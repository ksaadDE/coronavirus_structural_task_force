# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 215 ', 'ASP', 0.03113071145177838, (260.269, 247.915, 229.467)), ('B', ' 215 ', 'ASP', 0.031203817949783396, (165.28200000000007, 238.124, 229.46600000000004)), ('C', ' 215 ', 'ASP', 0.031119452985981295, (221.24999999999997, 160.757, 229.467))]
data['omega'] = []
data['rota'] = [('A', ' 312 ', 'ILE', 0.02412795086582599, (233.41800000000006, 236.6, 205.69900000000004)), ('A', ' 331 ', 'ASN', 0.0, (207.80600000000013, 253.668, 251.04800000000003)), ('A', ' 525 ', 'CYS', 0.062432898492527575, (209.1350000000001, 244.335, 251.312)), ('A', ' 563 ', 'GLN', 0.27653046117985736, (198.06200000000013, 245.015, 238.27700000000002)), ('A', ' 878 ', 'LEU', 0.05444078633344229, (235.581, 203.653, 175.61500000000004)), ('A', ' 916 ', 'LEU', 0.19183936546201666, (234.669, 216.611, 157.461)), ('A', '1039 ', 'ARG', 0.20307360370451244, (219.406, 219.283, 174.005)), ('B', ' 312 ', 'ILE', 0.024194302392248093, (188.507, 220.527, 205.69900000000004)), ('B', ' 331 ', 'ASN', 0.0, (186.53000000000006, 189.813, 251.04800000000003)), ('B', ' 525 ', 'CYS', 0.062469662026053606, (193.94900000000007, 195.63000000000002, 251.312)), ('B', ' 563 ', 'GLN', 0.27461064537246677, (198.896, 185.7, 238.27700000000002)), ('B', ' 878 ', 'LEU', 0.05453772732940327, (215.95900000000006, 238.873, 175.61500000000004)), ('B', ' 916 ', 'LEU', 0.19160283546654344, (205.193, 231.604, 157.461)), ('B', '1039 ', 'ARG', 0.20455151677677874, (210.51, 217.05000000000004, 174.005)), ('C', ' 312 ', 'ILE', 0.024109742318161986, (224.877, 189.668, 205.69900000000004)), ('C', ' 331 ', 'ASN', 0.0, (252.46600000000007, 203.314, 251.04700000000005)), ('C', ' 525 ', 'CYS', 0.06243714662033509, (243.71900000000005, 206.83, 251.311)), ('C', ' 563 ', 'GLN', 0.2754275399036782, (249.84400000000005, 216.079, 238.27600000000004)), ('C', ' 878 ', 'LEU', 0.05430857036325217, (195.262, 204.269, 175.616)), ('C', ' 916 ', 'LEU', 0.19213284552806686, (206.939, 198.58, 157.461)), ('C', '1039 ', 'ARG', 0.20435177423585144, (216.88499999999996, 210.461, 174.005))]
data['cbeta'] = []
data['probe'] = [(' C  67  ALA  O  ', ' C 262  ALA  HA ', -0.685, (220.901, 153.928, 240.72)), (' A  67  ALA  O  ', ' A 262  ALA  HA ', -0.678, (266.316, 250.96, 240.726)), (' B  67  ALA  O  ', ' B 262  ALA  HA ', -0.666, (159.964, 241.88, 240.901)), (' B 357  ARG HH12', ' B 394  ASN HD22', -0.651, (204.573, 187.469, 250.989)), (' C 357  ARG HH12', ' C 394  ASN HD22', -0.646, (245.38, 219.852, 251.534)), (' C1116  THR  HB ', ' C1140  PRO  HD3', -0.642, (221.06, 207.561, 137.894)), (' A 357  ARG HH12', ' A 394  ASN HD22', -0.639, (196.715, 239.283, 250.988)), (' A1116  THR  HB ', ' A1140  PRO  HD3', -0.633, (219.623, 224.419, 137.885)), (' B1116  THR  HB ', ' B1140  PRO  HD3', -0.623, (205.653, 214.762, 138.305)), (' B 703  ASN  ND2', ' C 787  GLN  OE1', -0.615, (186.375, 216.173, 174.622)), (' A  96  GLU  OE2', ' A 101  ILE  N  ', -0.614, (263.307, 242.788, 244.856)), (' A 703  ASN  ND2', ' B 787  GLN  OE1', -0.609, (230.366, 240.332, 174.073)), (' A 787  GLN  OE1', ' C 703  ASN  ND2', -0.601, (229.532, 190.13, 174.578)), (' B 588  THR HG21', ' C 841  LEU HD12', -0.583, (186.921, 198.109, 223.07)), (' B 406  GLU  OE2', ' B 417  LYS  NZ ', -0.581, (225.229, 200.911, 268.093)), (' C  96  GLU  OE2', ' C 101  ILE  N  ', -0.579, (215.447, 160.862, 244.701)), (' B 331  ASN  N  ', ' B 331  ASN  OD1', -0.579, (186.592, 189.681, 249.052)), (' C 331  ASN  N  ', ' C 331  ASN  OD1', -0.578, (252.534, 203.406, 249.027)), (' A 841  LEU HD12', ' C 588  THR HG21', -0.576, (245.161, 199.655, 223.065)), (' A 406  GLU  OE2', ' A 417  LYS  NZ ', -0.573, (198.076, 214.529, 268.13)), (' A 588  THR HG21', ' B 841  LEU HD12', -0.569, (214.684, 249.589, 222.803)), (' C 142  GLY  HA3', ' C 156  GLU  HB2', -0.562, (217.304, 154.797, 257.097)), (' A 142  GLY  HA3', ' A 156  GLU  HB2', -0.559, (267.453, 247.573, 256.62)), (' B  96  GLU  OE2', ' B 101  ILE  N  ', -0.557, (168.157, 243.241, 244.803)), (' C 777  ASN  OD1', ' C1019 BARG  NH1', -0.554, (204.009, 215.568, 193.063)), (' A 331  ASN  N  ', ' A 331  ASN  OD1', -0.553, (207.676, 253.657, 248.955)), (' B 142  GLY  HA3', ' B 156  GLU  HB2', -0.552, (162.077, 244.389, 257.044)), (' B 716  THR  N  ', ' B1071  GLN  O  ', -0.546, (192.575, 222.925, 158.93)), (' C 716  THR  N  ', ' C1071  GLN  O  ', -0.546, (220.745, 191.994, 158.945)), (' B 777  ASN  OD1', ' B1019 BARG  NH1', -0.535, (221.489, 225.625, 193.182)), (' B 216  LEU HD12', ' B 217  PRO  HD2', -0.533, (171.094, 239.445, 231.361)), (' C 406  GLU  OE2', ' C 417  LYS  NZ ', -0.533, (223.52, 231.243, 267.941)), (' A 216  LEU HD12', ' A 217  PRO  HD2', -0.521, (258.511, 242.087, 231.412)), (' A 716  THR  N  ', ' A1071  GLN  O  ', -0.518, (233.106, 231.88, 159.068)), (' C 216  LEU HD12', ' C 217  PRO  HD2', -0.517, (217.024, 164.691, 231.061)), (' A 370  ASN  HB3', ' C 455  LEU HD21', -0.504, (221.203, 239.555, 270.039)), (' A 455  LEU HD21', ' B 370  ASN  HB3', -0.502, (191.731, 208.791, 270.09)), (' B1116  THR HG22', ' B1138  TYR  HB3', -0.497, (203.4, 215.251, 138.245)), (' B 455  LEU HD21', ' C 370  ASN  HB3', -0.495, (233.761, 198.225, 270.248)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.489, (229.222, 218.756, 171.653)), (' B1048  HIS  HA ', ' B1066  THR HG22', -0.488, (205.692, 225.769, 172.009)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.487, (211.892, 201.931, 171.949)), (' C 981  LEU HD21', ' C 993  ILE HD11', -0.484, (200.265, 211.331, 236.47)), (' C1116  THR HG22', ' C1138  TYR  HB3', -0.484, (222.138, 205.11, 138.395)), (' A1116  THR HG22', ' A1138  TYR  HB3', -0.483, (220.939, 226.466, 138.017)), (' B 981  LEU HD21', ' B 993  ILE HD11', -0.478, (219.569, 230.93, 236.641)), (' A 981  LEU HD21', ' A 993  ILE HD11', -0.472, (227.381, 204.337, 236.782)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.471, (211.122, 191.827, 261.933)), (' A  78  ARG  HA ', ' A  78  ARG  HD2', -0.471, (260.947, 258.456, 243.564)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.469, (197.366, 231.087, 262.078)), (' A 777  ASN  OD1', ' A1019 BARG  NH1', -0.462, (221.492, 205.566, 193.006)), (' C 354  ASN  O  ', ' C 398  ASP  HA ', -0.461, (238.347, 223.91, 262.354)), (' B  78  ARG  HA ', ' B  78  ARG  HD2', -0.459, (155.844, 233.446, 243.581)), (' C 312  ILE HD12', ' C 598  ILE HG13', -0.449, (228.128, 188.242, 205.706)), (' C 105  ILE HD11', ' C 239  GLN HE21', -0.443, (225.24, 167.441, 253.613)), (' B 580  GLN  HB3', ' B 580  GLN HE21', -0.442, (182.87, 188.924, 245.246)), (' C 580  GLN  HB3', ' C 580  GLN HE21', -0.442, (254.93, 200.418, 245.177)), (' A 312  ILE HD12', ' A 598  ILE HG13', -0.439, (233.098, 240.093, 205.775)), (' B 312  ILE HD12', ' B 598  ILE HG13', -0.438, (186.038, 218.372, 205.93)), (' B 105  ILE HD11', ' B 239  GLN HE21', -0.436, (169.097, 231.273, 253.621)), (' B 153  MET  HE1', ' B1305  NAG  H4 ', -0.434, (160.916, 258.404, 258.945)), (' B 108  THR HG22', ' B 109  THR HG23', -0.432, (175.751, 221.16, 256.926)), (' B  29  THR  OG1', ' B  30  ASN  N  ', -0.432, (168.119, 232.077, 228.695)), (' C  29  THR  OG1', ' C  30  ASN  N  ', -0.431, (225.085, 166.262, 228.797)), (' A 153  MET  HE1', ' A1305  NAG  H4 ', -0.431, (279.679, 241.359, 258.727)), (' A  29  THR  OG1', ' A  30  ASN  N  ', -0.431, (253.648, 248.257, 228.726)), (' B  29  THR HG23', ' B  62  VAL HG23', -0.43, (169.004, 231.933, 232.276)), (' A 477  SER  O  ', ' A 478  THR  OG1', -0.429, (174.899, 202.185, 267.269)), (' C 477  SER  O  ', ' C 478  THR  OG1', -0.428, (224.435, 257.697, 267.175)), (' C 108  THR HG22', ' C 109  THR HG23', -0.427, (230.666, 178.233, 256.906)), (' A 105  ILE HD11', ' A 239  GLN HE21', -0.427, (252.571, 247.58, 253.698)), (' A 108  THR HG22', ' A 109  THR HG23', -0.425, (240.385, 247.257, 256.944)), (' C 153  MET  HE1', ' C1305  NAG  H4 ', -0.424, (206.03, 146.801, 258.864)), (' C  29  THR HG23', ' C  62  VAL HG23', -0.422, (224.806, 167.013, 232.338)), (' B 277  LEU HD12', ' B 285  ILE HG21', -0.422, (188.267, 237.611, 227.808)), (' A 580  GLN  HB3', ' A 580  GLN HE21', -0.419, (208.567, 257.213, 245.416)), (' A  29  THR HG23', ' A  62  VAL HG23', -0.417, (253.121, 247.661, 232.277)), (' C 277  LEU HD12', ' C 285  ILE HG21', -0.416, (210.479, 181.222, 227.683)), (' A 922  LEU HD11', ' I   1  NAG  H5 ', -0.415, (242.634, 225.158, 161.219)), (' B 808  ASP  HA ', ' B 809  PRO  HD3', -0.414, (211.354, 251.323, 178.546)), (' B 922  LEU HD11', ' R   1  NAG  H5 ', -0.414, (194.146, 234.473, 161.218)), (' C 922  LEU HD11', ' a   1  NAG  H5 ', -0.411, (209.951, 187.504, 161.202)), (' A 277  LEU HD12', ' A 285  ILE HG21', -0.409, (248.305, 228.177, 227.733)), (' B 185  ASN  HB2', ' B 212  LEU  O  ', -0.406, (163.441, 247.189, 231.44)), (' B 200  TYR  HB3', ' B 228  ASP  OD1', -0.405, (190.665, 233.524, 248.571)), (' A 950  ASP  OD1', ' A 951  VAL  N  ', -0.405, (232.436, 216.985, 198.782)), (' A 200  TYR  HB3', ' A 228  ASP  OD1', -0.404, (243.882, 227.943, 248.52)), (' A 101  ILE HG13', ' A 242  LEU  CD2', -0.4, (260.597, 246.277, 244.724))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
