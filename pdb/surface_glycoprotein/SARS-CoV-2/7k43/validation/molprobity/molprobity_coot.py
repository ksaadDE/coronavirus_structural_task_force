# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 809 ', 'PRO', 0.042946688226976275, (242.141, 228.067, 149.733)), ('B', ' 809 ', 'PRO', 0.042893855844479065, (178.283, 228.801, 149.733)), ('E', ' 809 ', 'PRO', 0.042904046555033507, (209.576, 173.132, 149.733))]
data['omega'] = [('D', '   8 ', 'PRO', None, (240.77600000000007, 242.45300000000003, 259.627)), ('G', '   8 ', 'PRO', None, (166.507, 220.426, 259.627)), ('L', '   8 ', 'PRO', None, (222.717, 167.121, 259.627))]
data['rota'] = [('A', '1135 ', 'ASN', 0.1690609032329745, (193.26299999999995, 222.70000000000002, 110.451)), ('B', '1135 ', 'ASN', 0.16912489062133731, (207.37, 189.155, 110.451)), ('E', '1135 ', 'ASN', 0.16899584871511972, (229.367, 218.145, 110.451))]
data['cbeta'] = [('A', '  61 ', 'ASN', ' ', 0.26519835067575376, (203.392, 257.49400000000014, 195.15799999999996)), ('A', ' 165 ', 'ASN', ' ', 0.7789193674871873, (217.86700000000005, 250.46900000000005, 229.66300000000004)), ('A', ' 662 ', 'CYS', ' ', 0.36228711383686935, (199.79700000000003, 235.61, 160.5)), ('H', '  81 ', 'MET', ' ', 0.2783396942877985, (193.019, 180.275, 257.167)), ('B', '  61 ', 'ASN', ' ', 0.26548069268177676, (172.173, 180.53, 195.15799999999996)), ('B', ' 165 ', 'ASN', ' ', 0.7780584810494041, (171.019, 196.57900000000006, 229.66300000000004)), ('B', ' 662 ', 'CYS', ' ', 0.36328052179249914, (192.923, 188.359, 160.5)), ('C', '  81 ', 'MET', ' ', 0.27804437090418527, (244.233, 210.157, 257.167)), ('E', '  61 ', 'ASN', ' ', 0.2645775694965811, (254.435, 191.976, 195.15799999999996)), ('E', ' 165 ', 'ASN', ' ', 0.779159080496779, (241.114, 182.952, 229.66300000000004)), ('E', ' 662 ', 'CYS', ' ', 0.36310086559710647, (237.28, 206.031, 160.5)), ('F', '  81 ', 'MET', ' ', 0.278460847043538, (192.74800000000005, 239.568, 257.167))]
data['probe'] = [(' E 115  GLN HE21', ' E 130  VAL  CG1', -1.029, (239.337, 183.295, 220.712)), (' B 115  GLN HE21', ' B 130  VAL  CG1', -1.025, (172.168, 198.008, 220.712)), (' A 115  GLN HE21', ' A 130  VAL  CG1', -1.021, (218.495, 248.819, 220.743)), (' B 115  GLN HE21', ' B 130  VAL HG11', -0.88, (172.347, 198.674, 220.741)), (' E 115  GLN HE21', ' E 130  VAL HG11', -0.875, (238.43, 182.661, 221.242)), (' A 115  GLN HE21', ' A 130  VAL HG11', -0.871, (219.441, 248.569, 221.29)), (' E 130  VAL  O  ', ' E 130  VAL HG12', -0.835, (239.938, 181.711, 222.014)), (' B 130  VAL  O  ', ' B 130  VAL HG12', -0.823, (170.492, 197.791, 221.983)), (' A 130  VAL  O  ', ' A 130  VAL HG12', -0.805, (219.333, 250.235, 221.966)), (' A 115  GLN HE21', ' A 130  VAL HG12', -0.696, (218.809, 249.278, 221.821)), (' E 115  GLN HE21', ' E 130  VAL HG12', -0.682, (239.764, 182.991, 222.002)), (' B 115  GLN HE21', ' B 130  VAL HG12', -0.672, (171.741, 197.704, 222.002)), (' E 130  VAL  CG1', ' E 233  ILE HD11', -0.64, (239.985, 182.375, 219.801)), (' B 115  GLN  NE2', ' B 130  VAL HG11', -0.639, (172.895, 198.382, 221.004)), (' B 130  VAL  CG1', ' B 233  ILE HD11', -0.638, (171.086, 197.709, 219.851)), (' A 130  VAL  CG1', ' A 233  ILE HD11', -0.633, (218.78, 249.851, 219.871)), (' A 115  GLN  NE2', ' A 130  VAL HG11', -0.619, (218.572, 247.863, 220.975)), (' E 115  GLN  NE2', ' E 130  VAL HG11', -0.608, (238.439, 183.584, 221.06)), (' A 130  VAL HG13', ' A 233  ILE HD11', -0.586, (218.461, 249.694, 219.461)), (' B 130  VAL HG13', ' B 233  ILE HD11', -0.577, (171.462, 197.44, 220.138)), (' A 131  CYS  HA ', ' A 166  CYS  HA ', -0.574, (220.613, 251.836, 225.302)), (' E 131  CYS  HA ', ' E 166  CYS  HA ', -0.572, (240.828, 179.253, 225.596)), (' E 130  VAL HG13', ' E 233  ILE HD11', -0.57, (240.615, 182.788, 219.819)), (' B 131  CYS  HA ', ' B 166  CYS  HA ', -0.564, (168.219, 198.728, 225.431)), (' E 115  GLN  NE2', ' E 130  VAL  CG1', -0.529, (239.061, 183.695, 221.177)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.494, (213.483, 218.755, 149.372)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.49, (200.412, 208.69, 149.826)), (' E1028  LYS  NZ ', ' E1042  PHE  O  ', -0.487, (215.918, 202.489, 149.373)), (' A 115  GLN  NE2', ' A 130  VAL  CG1', -0.478, (218.059, 248.509, 221.31)), (' B 130  VAL  CG1', ' B 130  VAL  O  ', -0.472, (170.235, 197.787, 221.868)), (' B 115  GLN  NE2', ' B 130  VAL  CG1', -0.452, (172.684, 197.89, 221.099)), (' E 130  VAL  CG1', ' E 130  VAL  O  ', -0.45, (240.508, 181.754, 221.901)), (' A 130  VAL HG11', ' A 233  ILE HD11', -0.445, (218.862, 248.895, 220.0)), (' E 130  VAL HG11', ' E 233  ILE HD11', -0.443, (239.238, 182.886, 219.995)), (' B  25  PRO  HA ', ' B  26  PRO  HD3', -0.418, (163.898, 172.292, 203.963)), (' E1139  ASP  N  ', ' E1139  ASP  OD2', -0.416, (219.914, 213.026, 104.527)), (' A 130  VAL  CG1', ' A 130  VAL  O  ', -0.414, (219.256, 250.629, 221.868)), (' A 216  LEU  HA ', ' A 217  PRO  HD3', -0.413, (216.746, 263.533, 193.218)), (' B 130  VAL HG11', ' B 233  ILE HD11', -0.411, (172.024, 198.167, 220.042)), (' A1139  ASP  N  ', ' A1139  ASP  OD2', -0.409, (202.497, 217.189, 104.459)), (' A 862  PRO  HA ', ' A 863  PRO  HD3', -0.408, (232.847, 217.819, 169.447)), (' E 792  PRO  HA ', ' E 793  PRO  HD3', -0.404, (203.857, 177.068, 138.027)), (' E 714  ILE  HA ', ' E 715  PRO  HD3', -0.401, (229.483, 207.62, 129.494))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
