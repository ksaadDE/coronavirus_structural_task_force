# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.010296578722889907, (-15.17673, 2.52493, 32.00978))]
data['omega'] = [('A', ' 196 ', 'THR', None, (-24.23896, 29.6109, 10.90428)), ('A', ' 294 ', 'PHE', None, (-17.606139999999996, 18.069719999999986, 31.962980000000005))]
data['rota'] = []
data['cbeta'] = [('A', ' 270 ', 'GLU', ' ', 0.6249018120983102, (-16.0015, 41.44985, 33.10566)), ('A', ' 294 ', 'PHE', ' ', 0.30141429950587273, (-18.86283, 15.83417, 32.0022))]
data['probe'] = [(' A 267  SER  O  ', ' A 270  GLU  HG3', -0.864, (-15.503, 38.364, 32.613)), (' A 198  THR HG22', ' A 238  ASN  OD1', -0.837, (-23.749, 31.732, 17.556)), (' A 232  LEU  O  ', ' A 501  HOH  O  ', -0.763, (-26.949, 41.377, 24.561)), (' A 127  GLN  NE2', ' A 502  HOH  O  ', -0.665, (-12.551, 13.705, 24.151)), (' A 127  GLN  OE1', ' A 502  HOH  O  ', -0.662, (-12.092, 13.223, 23.65)), (' A  49  MET  HA ', ' A  52  PRO  HG3', -0.629, (-21.11, 11.338, -6.036)), (' A 240  GLU  OE1', ' A 503  HOH  O  ', -0.603, (-24.577, 24.91, 24.735)), (' A 267  SER  O  ', ' A 270  GLU  CG ', -0.6, (-15.202, 39.043, 33.093)), (' A 267  SER  HA ', ' A 270  GLU  HG2', -0.591, (-15.814, 38.788, 34.823)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.59, (-7.316, 34.159, 29.49)), (' A 293  PRO  HB2', ' A 294  PHE  CD1', -0.56, (-20.242, 18.788, 32.345)), (' A   4  ARG  O  ', ' A 299  GLN  NE2', -0.559, (-7.672, 17.652, 29.384)), (' A 293  PRO  HB2', ' A 294  PHE  HD1', -0.558, (-20.12, 19.03, 32.966)), (' A 292  THR  O  ', ' A 294  PHE  N  ', -0.557, (-17.087, 18.735, 31.44)), (' A 292  THR  C  ', ' A 294  PHE  N  ', -0.545, (-17.416, 19.239, 30.963)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.529, (-15.68, 4.526, 4.719)), (' A 288  GLU  OE1', ' A 504  HOH  O  ', -0.522, (-10.362, 24.894, 23.42)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.503, (-13.65, 9.925, 17.832)), (' A 270  GLU  C  ', ' A 270  GLU  OE2', -0.503, (-13.692, 40.696, 31.836)), (' A 292  THR  C  ', ' A 294  PHE  H  ', -0.501, (-17.658, 18.966, 30.556)), (' A 267  SER  C  ', ' A 270  GLU  HG3', -0.488, (-16.455, 38.26, 33.113)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.47, (-15.065, -7.534, 16.454)), (' A 292  THR  O  ', ' A 293  PRO  C  ', -0.461, (-17.052, 19.111, 31.867)), (' A 197  ASP  HB3', ' A 516  HOH  O  ', -0.457, (-18.322, 28.567, 14.372)), (' A 241  PRO  HD3', ' A 528  HOH  O  ', -0.449, (-27.939, 32.792, 22.984)), (' A  87  LEU  HA ', ' A  87  LEU HD12', -0.437, (-23.787, 0.369, 2.673)), (' A 270  GLU  HA ', ' A 537  HOH  O  ', -0.436, (-16.118, 43.69, 31.225)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.43, (-23.566, 6.336, 8.086)), (' A 127  GLN  CD ', ' A 502  HOH  O  ', -0.424, (-12.029, 13.771, 24.512)), (' A 211  ALA  HA ', ' A 282  LEU HD21', -0.418, (-6.849, 26.745, 34.761)), (' A 270  GLU  O  ', ' A 274  ASN  HB2', -0.413, (-13.731, 42.51, 29.734)), (' A   4  ARG  NH1', ' A 524  HOH  O  ', -0.407, (1.133, 20.087, 26.94)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.404, (-8.474, 3.825, 12.729)), (' A 100  LYS  HD3', ' A 639  HOH  O  ', -0.401, (-21.126, -4.255, 24.088))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
