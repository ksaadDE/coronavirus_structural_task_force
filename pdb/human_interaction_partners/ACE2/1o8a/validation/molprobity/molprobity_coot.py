# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 156 ', 'GLY', 0.04720826254760819, (30.96400000000001, 5.881, 48.353))]
data['omega'] = [('A', ' 163 ', 'PRO', None, (41.663, 18.964, 46.965))]
data['rota'] = [('A', '  86 ', 'MET', 0.0, (27.794000000000004, 41.217000000000006, 67.75699999999998)), ('A', ' 107 ', 'LEU', 0.20854508994977883, (36.411, 69.608, 58.983)), ('A', ' 108 ', 'GLN', 0.015408007956315526, (39.729, 71.199, 58.005)), ('A', ' 122 ', 'LEU', 0.23156569791028728, (28.535000000000004, 51.291999999999994, 59.661)), ('A', ' 123 ', 'GLU', 0.008424603181260967, (28.20200000000001, 48.64399999999999, 56.96499999999999)), ('A', ' 131 ', 'GLU', 0.05646798935815174, (18.353, 41.595, 60.898)), ('A', ' 163 ', 'PRO', 0.1557524428204868, (42.2, 19.094, 45.607)), ('A', ' 308 ', 'GLN', 0.05506072285159082, (62.928, 17.713, 44.00099999999998)), ('A', ' 314 ', 'ARG', 0.0084237422760597, (59.30200000000001, 25.968, 50.378)), ('A', ' 363 ', 'LYS', 0.08830336589938159, (52.763000000000005, 42.106999999999985, 64.147)), ('A', ' 377 ', 'ASP', 0.17639983374705873, (49.683, 27.303, 43.448)), ('A', ' 390 ', 'TYR', 0.2954177035685074, (50.68799999999999, 45.355999999999995, 51.792)), ('A', ' 394 ', 'TYR', 0.2162109336189876, (50.79099999999999, 50.293, 55.861)), ('A', ' 463 ', 'LEU', 0.039004551572910696, (31.313000000000013, 39.197, 34.310999999999986)), ('A', ' 479 ', 'GLU', 0.06724833970064549, (13.534, 33.819, 39.116)), ('A', ' 539 ', 'GLN', 0.1802838975725669, (61.609, 50.20499999999999, 32.929)), ('A', ' 579 ', 'GLN', 0.2031119150075281, (51.25399999999999, 57.82, 39.444)), ('A', ' 585 ', 'PRO', 0.07500644094527566, (47.42700000000001, 58.379, 36.836))]
data['cbeta'] = [('A', ' 702 ', 'NXA', ' ', 0.3626537739363584, (41.603, 34.81, 41.28))]
data['probe'] = [(' A  82  LEU  HA ', ' A  85  ASN HD22', -0.856, (28.988, 35.833, 63.737)), (' A 346  ASP  HB3', ' A 348  ARG  HB2', -0.789, (41.833, 18.98, 61.257)), (' A 613  LYS  NZ ', ' A 617  PRO  HG3', -0.775, (27.941, 32.768, 12.993)), (' A 179  LEU HD11', ' A 499  VAL HG23', -0.748, (27.299, 18.157, 31.314)), (' A 107  LEU HD21', ' A 116  ILE HD12', -0.716, (35.783, 64.96, 61.142)), (' A 304  ALA  O  ', ' A 308  GLN  HG2', -0.706, (61.655, 18.986, 40.91)), (' A  45  SER  O  ', ' A  49  GLU  HG3', -0.662, (42.638, 61.872, 66.951)), (' A 560  GLN HE21', ' A 564  THR HG23', -0.609, (59.383, 53.986, 47.831)), (' A 334  GLU  HG2', ' A2327  HOH  O  ', -0.586, (52.456, 35.455, 62.943)), (' A  96  GLY  HA3', ' A 122  LEU HD22', -0.563, (29.004, 53.65, 62.418)), (' A 462  TYR  O  ', ' A 466  GLN  HG2', -0.558, (31.131, 42.362, 34.565)), (' A 560  GLN HE21', ' A 564  THR  CG2', -0.554, (60.073, 54.589, 47.724)), (' A 295  SER  O  ', ' A 297  PRO  HD3', -0.541, (60.557, 19.741, 21.044)), (' A 343  LYS  HB2', ' A 370  CYS  HB3', -0.531, (44.23, 22.022, 51.412)), (' A 511  LYS  O  ', ' A 515  PRO  HD2', -0.515, (30.585, 31.603, 45.244)), (' A 116  ILE  O  ', ' A 120  GLN  HG3', -0.514, (32.065, 59.299, 59.039)), (' A 533  PHE  O  ', ' A 537  LEU  HG ', -0.505, (56.25, 48.034, 37.921)), (' A 354  ALA  HB2', ' A 369  GLN  HG3', -0.501, (45.585, 29.2, 48.782)), (' A 613  LYS  HZ3', ' A 617  PRO  HG3', -0.497, (28.578, 32.31, 12.653)), (' A 312  PRO  HG2', ' A 342  GLU  HG2', -0.495, (51.56, 22.126, 52.04)), (' A  84  LYS  HD3', ' A  87  GLN  OE1', -0.492, (33.773, 39.12, 70.554)), (' A  98  GLN  HG2', ' A2050  HOH  O  ', -0.491, (29.544, 61.051, 69.073)), (' A 613  LYS  HZ1', ' A 617  PRO  HG3', -0.49, (28.117, 33.171, 12.484)), (' A 424  PRO  HA ', ' A 433  LEU HD12', -0.489, (60.799, 29.054, 32.247)), (' A  54  THR  O  ', ' A  58  VAL HG12', -0.488, (38.72, 47.737, 68.583)), (' A 463  LEU  C  ', ' A 463  LEU HD23', -0.487, (30.152, 37.548, 35.389)), (' A  96  GLY  HA3', ' A 122  LEU  CD2', -0.484, (28.956, 53.904, 62.259)), (' A  58  VAL HG13', ' A  59  TRP  CD1', -0.483, (37.391, 46.744, 66.203)), (' A 173  ARG  NH1', ' A 288  ASP  OD1', -0.481, (45.893, 19.447, 29.203)), (' A 353  HIS  HD2', ' A2314  HOH  O  ', -0.478, (39.525, 33.021, 49.742)), (' A  71  THR  O  ', ' A 348  ARG  HD2', -0.477, (41.237, 23.363, 61.381)), (' A 179  LEU HD11', ' A 499  VAL  CG2', -0.477, (26.378, 17.951, 31.811)), (' A 107  LEU  CD2', ' A 116  ILE HD12', -0.471, (36.111, 64.914, 60.934)), (' A 325  SER  O  ', ' A 554  GLN  HA ', -0.468, (65.921, 42.24, 44.968)), (' A 427  LEU  HB2', ' A 433  LEU HD12', -0.468, (60.75, 28.369, 33.943)), (' A 169  MET  O  ', ' A 276  GLY  HA2', -0.465, (40.514, 21.262, 33.265)), (' A 554  GLN  NE2', ' A2447  HOH  O  ', -0.464, (70.641, 38.245, 43.756)), (' A  91  HIS  HD2', ' A2024  HOH  O  ', -0.464, (34.581, 49.871, 70.859)), (' A 554  GLN  HG2', ' A 554  GLN  O  ', -0.463, (68.775, 43.187, 43.236)), (' A 479  GLU  HG3', ' A2394  HOH  O  ', -0.459, (10.951, 36.71, 38.58)), (' A 485  TRP  CD2', ' A 508  PRO  HG3', -0.457, (26.155, 32.938, 37.603)), (' A  58  VAL HG13', ' A  59  TRP  HD1', -0.456, (37.529, 46.146, 65.851)), (' A 514  ILE  HB ', ' A 515  PRO  CD ', -0.452, (29.243, 32.073, 45.676)), (' A 597  LYS  HE3', ' A 601  ASP  OD2', -0.452, (52.554, 42.367, 16.472)), (' A 130  GLN  HG2', ' A2105  HOH  O  ', -0.449, (15.407, 39.338, 62.113)), (' A 560  GLN  O  ', ' A 564  THR HG23', -0.446, (58.906, 53.705, 47.047)), (' A 457  PHE  CE2', ' A 461  SER  HB3', -0.445, (39.254, 38.023, 36.707)), (' A 115  ILE  O  ', ' A 119  VAL HG23', -0.444, (36.283, 56.986, 59.853)), (' A 500  PRO  HG2', ' A2413  HOH  O  ', -0.444, (19.646, 19.52, 31.035)), (' A  83  GLN  HG3', ' A2029  HOH  O  ', -0.443, (27.36, 33.2, 69.392)), (' A 597  LYS  HB3', ' A 598  PRO  HD3', -0.442, (53.96, 41.891, 21.549)), (' A 282  THR  HB ', ' A 453  ASP  OD1', -0.44, (44.368, 30.128, 34.091)), (' A 241  GLN  HB2', ' A 242  PRO  HD3', -0.44, (38.004, 43.74, 21.832)), (' A  75  THR HG22', ' A  76  GLU  OE1', -0.44, (30.632, 22.008, 67.521)), (' A 562  LEU  HB3', ' A 566  MET  HE2', -0.435, (55.081, 47.107, 46.689)), (' A 123  GLU  HB3', ' A 124  ARG  H  ', -0.433, (29.064, 46.352, 57.457)), (' A 554  GLN  CG ', ' A 554  GLN  O  ', -0.432, (68.432, 42.807, 43.22)), (' A 138  ILE HG13', ' A2104  HOH  O  ', -0.431, (20.341, 33.748, 58.081)), (' A 275  LEU  N  ', ' A 275  LEU HD22', -0.431, (37.136, 24.471, 28.876)), (' A 162  GLU  OE1', ' A 352  CYS  HB3', -0.428, (41.127, 24.887, 49.425)), (' A 148  VAL HG12', ' A 349  GLU  CG ', -0.427, (34.103, 21.392, 56.452)), (' A 463  LEU HD11', ' A 489  ARG  HA ', -0.425, (29.834, 34.318, 31.593)), (' A 399  VAL  HA ', ' A 402  ARG  HG3', -0.418, (44.762, 50.947, 59.471)), (' A 103  ASP  OD1', ' A 105  ASN  HB2', -0.416, (29.759, 69.715, 56.609)), (' A  75  THR  CG2', ' A  76  GLU  OE1', -0.414, (30.862, 22.369, 67.96)), (' A 308  GLN  H  ', ' A 308  GLN  HG2', -0.413, (61.797, 18.503, 41.882)), (' A 189  ALA  O  ', ' A 193  ILE HG12', -0.411, (26.004, 26.058, 47.099)), (' A 531  PHE  CE1', ' A 592  MET  HE3', -0.411, (47.64, 40.68, 32.166)), (' A 162  GLU  HA ', ' A 163  PRO  HA ', -0.408, (41.671, 20.701, 45.227)), (' A 232  ASP  OD1', ' A 235  ARG  NH2', -0.407, (36.578, 56.008, 31.585)), (' A 507  ASP  N  ', ' A 508  PRO  CD ', -0.402, (24.563, 29.676, 39.621))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
