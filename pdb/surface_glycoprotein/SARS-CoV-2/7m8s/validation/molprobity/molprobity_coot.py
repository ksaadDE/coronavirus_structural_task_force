# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  97 ', 'ARG', 0.005239041171980682, (-5.85, -19.019, 31.572))]
data['omega'] = [('A', ' 210 ', 'PRO', None, (-2.879000000000002, 0.788, 14.993)), ('B', '  32 ', 'PRO', None, (10.042, 4.92, 41.31)), ('D', ' 210 ', 'PRO', None, (-7.254, 30.355, 5.64)), ('E', '  32 ', 'PRO', None, (-19.84, 42.669, 28.649))]
data['rota'] = [('A', '  17 ', 'ARG', 0.0, (28.574000000000016, 2.74, 42.333)), ('A', '  19 ', 'GLU', 0.009731988782417805, (28.169000000000015, 7.001000000000001, 36.665)), ('A', '  35 ', 'ARG', 0.06712099996619705, (18.025, 2.28, 21.502)), ('A', '  58 ', 'GLU', 0.07582331530081322, (27.502000000000013, 7.642000000000001, 9.002)), ('A', ' 110 ', 'LEU', 0.18428182324782594, (1.1340000000000008, 19.516, 13.752)), ('A', ' 111 ', 'ARG', 0.02997068024575493, (3.0620000000000016, 19.734, 17.053)), ('A', ' 121 ', 'LYS', 0.09140189885043758, (7.473, 15.15499999999999, 38.214)), ('A', ' 195 ', 'SER', 0.13169774528930508, (-23.916, -15.417, 41.669)), ('A', ' 232 ', 'GLU', 0.0627210629534975, (-4.874, -0.3350000000000001, 30.078)), ('A', ' 270 ', 'LEU', 0.15910637331177307, (-18.702000000000016, -2.117, 16.165)), ('B', '   0 ', 'MET', 0.14959090531515715, (9.722, 11.477, 46.97299999999999)), ('B', '   4 ', 'THR', 0.13488550927717066, (3.0860000000000016, 1.375, 42.349)), ('B', '  89 ', 'GLN', 0.05585265340864616, (6.157, -7.85, 49.973000000000006)), ('C', '   1 ', 'LYS', 0.08819288881651538, (17.239, 11.479, 13.859)), ('D', '  75 ', 'ARG', 0.2933512958710183, (-34.75, 31.737, 28.328)), ('D', ' 111 ', 'ARG', 0.09479415008313329, (-12.945000000000007, 16.548, 18.076)), ('D', ' 128 ', 'GLU', 0.09289162536496036, (-12.959, 15.445, 25.066)), ('D', ' 131 ', 'ARG', 0.10310941923452341, (-19.019, 11.115, 27.923000000000002)), ('D', ' 132 ', 'SER', 0.100988483184669, (-18.183000000000014, 13.289, 30.961)), ('D', ' 225 ', 'THR', 0.2192314958411754, (8.4, 39.06000000000001, 23.341)), ('D', ' 226 ', 'GLN', 0.030934328303018784, (8.691000000000008, 42.682, 24.579)), ('D', ' 249 ', 'VAL', 0.0587273369745327, (13.726, 49.55, 17.066)), ('E', '   4 ', 'THR', 0.24311162533133335, (-13.289, 46.324000000000034, 27.337)), ('E', '   9 ', 'VAL', 0.2679048461248486, (-10.259000000000006, 50.994, 12.239)), ('E', '  20 ', 'SER', 0.054734473100891134, (-14.590000000000007, 52.881, -3.9090000000000003)), ('E', '  50 ', 'GLU', 0.06802938452820369, (-23.893, 47.825, 8.517)), ('E', '  69 ', 'GLU', 0.09861749354135176, (-18.773, 51.626, 1.407)), ('E', '  73 ', 'THR', 0.29441169076537493, (-9.861000000000008, 61.487, -0.056)), ('E', '  89 ', 'GLN', 0.15837046354405307, (-16.725, 58.221000000000025, 27.944)), ('E', '  99 ', 'MET', 0.05712104051663272, (-0.174, 52.561, 9.274)), ('F', '   2 ', 'LEU', 0.0030861039857819628, (-28.216, 22.168000000000013, 14.151)), ('F', '   8 ', 'THR', 0.02653990690529247, (-32.242, 19.715, 29.23))]
data['cbeta'] = [('F', '   8 ', 'THR', ' ', 0.2785828088008281, (-32.038000000000025, 18.39, 30.019000000000002))]
data['probe'] = [(' A  35  ARG  NH1', ' A  48  ARG  NH2', -0.856, (19.105, -4.339, 21.454)), (' D 253  GLN  HB3', ' D 256  ARG  HD3', -0.639, (19.575, 47.543, 15.159)), (' A  35  ARG HH11', ' A  48  ARG  NH2', -0.637, (19.366, -3.833, 21.846)), (' A  35  ARG  NH1', ' A  48  ARG HH22', -0.627, (19.067, -4.581, 21.617)), (' D 200  THR HG22', ' D 248  VAL HG22', -0.609, (8.031, 51.739, 17.619)), (' D 250  PRO  HG2', ' D 253  GLN  HG3', -0.605, (19.1, 50.326, 17.087)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.595, (9.073, 14.969, 33.081)), (' B  72  PRO  HB2', ' B  97  ARG HH12', -0.563, (-2.579, -23.424, 28.39)), (' A 262  GLN  HG2', ' A 269  PRO  HB3', -0.551, (-16.513, 3.065, 16.303)), (' B  19  LYS  O  ', ' B  72  PRO  HD2', -0.508, (1.117, -22.902, 23.687)), (' A 204  TRP  HZ2', ' B  99  MET  HB2', -0.501, (-9.49, -12.513, 29.053)), (' D   2  SER  HB2', ' D 103  VAL  O  ', -0.476, (-9.951, 18.389, 10.253)), (' E  24  ASN  HB3', ' E  65  LEU HD11', -0.457, (-14.244, 45.922, 9.364)), (' E  25  CYS  HB2', ' E  39  LEU HD21', -0.456, (-15.396, 51.347, 12.178)), (' D 257  TYR  CD1', ' D 257  TYR  N  ', -0.454, (15.891, 44.307, 13.594)), (' E  16  GLU  HG3', ' E  19  LYS  NZ ', -0.452, (-5.809, 54.683, -6.352)), (' D 117  ALA  HB2', ' E  60  TRP  CE2', -0.446, (-18.411, 30.07, 27.82)), (' A 127  LYS  HD2', ' A 132  SER  HB2', -0.441, (4.766, 29.186, 26.434)), (' A  19  GLU  HG3', ' A  20  PRO  HD2', -0.435, (27.179, 9.238, 35.051)), (' A  51  TRP  CZ2', ' A 179  LEU HD11', -0.419, (9.326, 2.973, 11.641)), (' D  63  GLU  OE1', ' F   2  LEU  HB2', -0.415, (-29.731, 23.337, 12.187)), (' A  35  ARG  HG2', ' A  36  PHE  N  ', -0.413, (19.255, 1.521, 23.07)), (' D 214  THR  HB ', ' D 262  GLN  HB3', -0.407, (2.86, 31.671, 12.325)), (' A   7  TYR  HB3', ' A   9  PHE  CZ ', -0.407, (15.545, 11.232, 22.616)), (' A   5  MET  HB2', ' A 168  LEU HD13', -0.402, (8.403, 10.38, 13.404))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
