# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 106 ', 'PRO', None, (198.71100000000013, 234.64, 138.191)), ('C', '1099 ', 'GLY', None, (230.711, 205.2540000000001, 267.205)), ('C', '1101 ', 'HIS', None, (229.02899999999988, 203.9630000000001, 271.34700000000004)), ('C', '1102 ', 'TRP', None, (225.6929999999999, 204.6070000000001, 272.136)), ('D', ' 106 ', 'PRO', None, (168.797, 176.358, 143.366)), ('E', ' 333 ', 'THR', None, (156.489, 189.351, 172.246)), ('E', ' 495 ', 'TYR', None, (157.201, 191.058, 132.522)), ('E', '1101 ', 'HIS', None, (188.53099999999998, 187.22300000000013, 273.654))]
data['rota'] = []
data['cbeta'] = [('B', ' 620 ', 'VAL', ' ', 0.253798538646382, (187.22800000000012, 237.581, 199.959)), ('C', '1098 ', 'ASN', ' ', 0.3276798662492089, (230.951, 207.3970000000001, 268.793)), ('E', '1101 ', 'HIS', ' ', 0.26712022192424545, (190.426, 186.81600000000012, 274.868))]
data['probe'] = [(' B 991  VAL HG23', ' B 992  GLN HE21', -0.672, (195.136, 197.305, 177.436)), (' C 971  GLY  H  ', ' E 755  GLN HE22', -0.643, (211.176, 208.893, 183.035)), (' D  33  TYR  HB3', ' D  99  ALA  HB3', -0.637, (175.728, 176.547, 152.671)), (' C 880  GLY  O  ', ' C 884  SER  HB3', -0.633, (198.931, 226.29, 242.977)), (' C 986  PRO  N  ', ' C 987  PRO  HD2', -0.626, (197.55, 211.426, 170.64)), (' C 969  ASN  HB3', ' C 975  SER  HA ', -0.621, (210.469, 214.322, 182.079)), (' C 969  ASN  OD1', ' E 755  GLN  NE2', -0.617, (212.237, 209.733, 182.658)), (' B  43  PHE  HB2', ' E 563  GLN  HG2', -0.613, (163.763, 200.907, 192.268)), (' C1095  PHE  HB3', ' C1102  TRP  HE1', -0.605, (221.599, 201.444, 267.733)), (' C 722  VAL HG22', ' C1065  VAL HG12', -0.596, (215.786, 222.45, 240.518)), (' B 129  LYS  NZ ', ' B 131  CYS  SG ', -0.596, (152.447, 212.68, 160.623)), (' B 339  GLY  O  ', ' B 343  ASN  HB2', -0.596, (216.265, 245.841, 148.477)), (' B  99  ASN  HB3', ' B 102  ARG HH22', -0.595, (141.976, 220.108, 178.964)), (' E 730  SER  HB2', ' E 774  GLN HE21', -0.595, (218.177, 196.038, 218.866)), (' E 102  ARG  HE ', ' E 241  LEU  HB3', -0.59, (208.414, 142.202, 175.0)), (' C1104  VAL HG23', ' C1115  ILE HG12', -0.583, (218.473, 204.927, 270.188)), (' C 136  CYS  SG ', ' C 137  ASN  N  ', -0.576, (255.745, 228.019, 159.395)), (' C 326  ILE HD13', ' C 534  VAL HG12', -0.575, (238.868, 180.627, 186.742)), (' A  98  ALA  HB3', ' A 114  TYR  HB2', -0.574, (189.538, 225.278, 149.264)), (' C1100  THR  HB ', ' C1101  HIS  HB2', -0.559, (230.186, 206.181, 271.186)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.557, (188.202, 236.205, 226.98)), (' C 566  GLY  HA2', ' E  43  PHE  HB3', -0.557, (223.456, 171.081, 194.26)), (' E 905  ARG  NH1', ' E1049  LEU  O  ', -0.556, (211.628, 195.498, 246.07)), (' B1037  SER  HA ', ' E1039  ARG HH12', -0.556, (197.378, 204.563, 242.837)), (' B 742  ILE HD12', ' B 997  ILE HD11', -0.553, (194.94, 190.863, 191.651)), (' B 357  ARG HH22', ' B 395  VAL  HB ', -0.551, (220.386, 230.358, 157.144)), (' B 752  LEU  O  ', ' B 755  GLN  NE2', -0.547, (200.446, 188.515, 186.887)), (' A  40  ALA  HB3', ' A  43  LYS  HB2', -0.547, (184.753, 229.906, 127.908)), (' E 136  CYS  SG ', ' E 137  ASN  N  ', -0.546, (201.387, 138.816, 166.64)), (' C 596  SER  HB2', ' C 611  LEU  HB3', -0.545, (233.886, 203.156, 208.56)), (' E1029  MET  O  ', ' E1033  VAL  HB ', -0.542, (215.22, 198.572, 236.853)), (' E 134  GLN  HG3', ' E 162  SER  HB2', -0.542, (206.016, 145.724, 160.0)), (' B  93  ALA  HB3', ' B 266  TYR  HB2', -0.541, (155.316, 226.074, 185.825)), (' D  40  ALA  HB3', ' D  43  LYS  HB2', -0.536, (178.912, 166.375, 132.394)), (' C1080  ALA  HB3', ' C1132  ILE HG12', -0.532, (218.895, 192.803, 268.661)), (' B1129  VAL HG13', ' C 917  TYR  HB3', -0.528, (212.417, 226.148, 261.46)), (' B 903  ALA  HB1', ' B 913  GLN  HG2', -0.528, (189.092, 203.689, 258.519)), (' E 317  ASN  HA ', ' E 594  GLY  HA2', -0.527, (188.142, 179.228, 202.756)), (' B 365  TYR  HA ', ' B 368  LEU HD13', -0.525, (209.173, 238.078, 155.045)), (' B 352  ALA  HA ', ' B 466  ARG  HE ', -0.525, (226.774, 230.392, 139.729)), (' C 156  GLU  OE2', ' C 158  ARG  NH1', -0.522, (259.097, 238.882, 159.822)), (' C 577  ARG  HE ', ' C 582  LEU  HA ', -0.522, (233.984, 165.444, 188.152)), (' B1104  VAL HG23', ' B1115  ILE HG12', -0.522, (199.224, 221.81, 269.079)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.522, (193.626, 207.732, 234.269)), (' C 908  GLY  O  ', ' C1038  LYS  NZ ', -0.521, (207.893, 211.162, 249.649)), (' C 909  ILE HD12', ' C1038  LYS  HZ1', -0.519, (209.453, 211.02, 248.283)), (' B 229  LEU  HB3', ' B 231  ILE HG12', -0.517, (160.721, 209.966, 170.621)), (' D 111  ASP  OD2', ' E 408  ARG  NH1', -0.514, (174.54, 180.651, 144.778)), (' E1050  MET  H  ', ' E1065  VAL  HB ', -0.512, (211.303, 191.329, 244.636)), (' A  33  TYR  HB3', ' A  99  ALA  HB3', -0.511, (195.063, 230.306, 148.397)), (' E 949  GLN  OE1', ' E 953  ASN  ND2', -0.511, (209.424, 181.578, 216.006)), (' B1103  PHE  HZ ', ' F   1  NAG  H62', -0.511, (190.03, 226.272, 271.406)), (' B 900  MET  HE1', ' E1079  PRO  HB3', -0.51, (185.242, 199.869, 262.619)), (' E 346  ARG  NH1', ' E 347  PHE  O  ', -0.51, (152.402, 194.452, 143.515)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.509, (158.495, 218.08, 168.593)), (' B 725  GLU  HB2', ' B1062  PHE  HB2', -0.508, (187.415, 206.219, 232.995)), (' B 454  ARG  HD3', ' B 457  ARG  HB2', -0.507, (222.72, 222.132, 130.865)), (' B1052  PHE  HB2', ' B1063  LEU  HB2', -0.507, (182.527, 203.016, 238.145)), (' B 736  VAL HG22', ' B 767  LEU  HG ', -0.504, (192.897, 191.101, 205.059)), (' B 864  LEU  HA ', ' E 667  GLY  HA2', -0.501, (186.326, 183.672, 219.738)), (' E 934  ILE HG21', ' E1063  LEU HD11', -0.501, (213.382, 182.835, 236.516)), (' E 565  PHE  HA ', ' E 576  VAL  HA ', -0.501, (165.227, 193.628, 190.682)), (' E 993  ILE HD13', ' E 996  LEU HD21', -0.498, (212.563, 194.308, 182.336)), (' C1129  VAL  HB ', ' C1132  ILE HD11', -0.497, (217.387, 190.383, 268.716)), (' B 204  TYR  HB3', ' B 223  LEU  HG ', -0.496, (159.181, 214.688, 186.29)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.496, (161.273, 210.895, 173.226)), (' C 727  LEU HD22', ' C1025  ALA  HB2', -0.496, (206.402, 214.128, 226.318)), (' C1054  GLN  HB2', ' C1061  VAL  HB ', -0.495, (210.778, 224.511, 229.646)), (' D  91  THR HG23', ' D 122  THR  HA ', -0.494, (182.349, 156.516, 136.912)), (' E 130  VAL HG13', ' E 167  THR  HB ', -0.494, (212.424, 157.185, 164.869)), (' C  99  ASN  OD1', ' C 190  ARG  NH2', -0.494, (247.547, 241.932, 178.234)), (' B 338  PHE  HA ', ' B 341  VAL HG12', -0.492, (218.034, 240.057, 150.766)), (' E 955  ASN  OD1', ' E1014  ARG  NH2', -0.491, (211.742, 192.339, 211.748)), (' E 159  VAL HG13', ' E 160  TYR  HD1', -0.491, (209.917, 142.822, 167.106)), (' C  96  GLU  OE1', ' C 190  ARG  NH1', -0.49, (248.818, 238.618, 178.488)), (' B 478  THR  OG1', ' B 487  ASN  ND2', -0.49, (228.445, 216.646, 113.988)), (' E 551  VAL  HB ', ' E 588  THR  HB ', -0.489, (170.842, 183.752, 197.511)), (' E 366  SER  O  ', ' E 370  ASN  ND2', -0.489, (161.518, 178.14, 162.208)), (' A  91  THR HG23', ' A 122  THR  HA ', -0.489, (174.465, 232.515, 131.756)), (' E 401  VAL HG22', ' E 509  ARG  HG3', -0.487, (156.965, 187.962, 145.119)), (' C 129  LYS  HB3', ' C 169  GLU  HG2', -0.487, (237.078, 235.791, 161.24)), (' E 903  ALA  HB1', ' E 913  GLN  HG2', -0.485, (213.875, 194.825, 258.547)), (' D   6  GLU  O  ', ' D 117  GLN  NE2', -0.484, (188.418, 162.838, 150.238)), (' B 452  LEU HD23', ' B 492  LEU  HB3', -0.484, (225.326, 232.394, 127.374)), (' B 136  CYS  SG ', ' B 137  ASN  N  ', -0.483, (150.164, 229.687, 161.464)), (' B 906  PHE  HB3', ' B 911  VAL  HB ', -0.483, (190.508, 208.956, 255.13)), (' B 172  SER  OG ', ' B 173  GLN  N  ', -0.483, (148.474, 206.909, 176.675)), (' E 598  ILE  HB ', ' E 609  ALA  HB3', -0.482, (189.783, 170.847, 215.001)), (' E 954  GLN  HG3', ' E1014  ARG HH11', -0.481, (208.455, 190.44, 212.16)), (' E 172  SER  OG ', ' E 173  GLN  N  ', -0.48, (223.151, 151.261, 177.878)), (' C 605  SER  OG ', ' C 606  ASN  N  ', -0.479, (241.5, 217.209, 212.137)), (' C 629  LEU  O  ', ' C 634  ARG  NH2', -0.479, (246.174, 208.089, 192.422)), (' E 332  ILE HG22', ' E 362  VAL HG21', -0.477, (159.276, 190.056, 170.373)), (' B 366  SER  O  ', ' B 370  ASN  ND2', -0.477, (203.651, 242.661, 155.767)), (' C 969  ASN  HB2', ' C 972  ALA  HB3', -0.474, (209.078, 211.979, 180.655)), (' D 106  PRO  O  ', ' E 408  ARG  NH2', -0.473, (171.557, 178.306, 143.911)), (' E 784  GLN  HB2', ' E1029  MET  HE1', -0.472, (218.52, 202.069, 233.14)), (' C  93  ALA  HB3', ' C 266  TYR  HB2', -0.471, (248.189, 229.128, 183.952)), (' C 193  VAL  HB ', ' C 204  TYR  HB2', -0.471, (236.17, 228.93, 181.198)), (' B 551  VAL  HB ', ' B 588  THR  HB ', -0.47, (203.247, 237.537, 193.175)), (' E 725  GLU  OE1', ' E1064  HIS  NE2', -0.47, (208.173, 192.155, 235.527)), (' C1049  LEU  HB2', ' C1065  VAL HG23', -0.469, (212.389, 218.885, 243.909)), (' E 478  THR  OG1', ' E 487  ASN  ND2', -0.469, (165.67, 208.721, 116.754)), (' B  41  LYS  NZ ', ' E 562  PHE  O  ', -0.469, (161.119, 200.741, 186.843)), (' B1049  LEU  HB2', ' B1065  VAL HG13', -0.468, (187.061, 206.237, 245.464)), (' B 109  THR  OG1', ' B 111  ASP  OD1', -0.468, (162.125, 224.46, 159.104)), (' B 456  PHE  HB2', ' B 491  PRO  HB3', -0.467, (223.62, 224.766, 126.059)), (' B 498  GLN  OE1', ' B 501  ASN  ND2', -0.466, (209.775, 240.168, 125.424)), (' B 405  ASP  N  ', ' B 405  ASP  OD1', -0.466, (207.49, 232.156, 132.08)), (' C 725  GLU  HB3', ' C1062  PHE  HB2', -0.464, (211.958, 217.374, 231.955)), (' B 969  ASN  HB2', ' C 755  GLN  HG3', -0.464, (188.926, 204.23, 184.262)), (' E 316  SER  OG ', ' E 317  ASN  N  ', -0.463, (190.562, 177.467, 200.719)), (' C1128  VAL  HB ', ' E 918  GLU  HG2', -0.46, (212.698, 185.52, 266.927)), (' C 617  CYS  HB2', ' C 649  CYS  HB2', -0.46, (240.446, 195.207, 207.002)), (' D  20  LEU  HB2', ' D  81  LEU  HB3', -0.458, (178.125, 160.682, 149.142)), (' C 976  VAL HG13', ' C 979  ASP  H  ', -0.458, (206.429, 219.526, 178.28)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.458, (166.799, 183.219, 146.444)), (' D  52  ILE HD12', ' D  57  HIS  HB2', -0.458, (166.309, 173.088, 154.74)), (' C 297  SER  HA ', ' C 300  LYS  HB2', -0.457, (233.399, 217.669, 202.321)), (' B  43  PHE  HB3', ' E 566  GLY  HA2', -0.456, (165.715, 199.032, 193.282)), (' B 765  ARG  NH1', ' E 957  GLN  OE1', -0.456, (203.433, 183.663, 207.052)), (' D  83  MET  HB3', ' D  86  LEU HD21', -0.456, (174.797, 156.419, 143.254)), (' E  48  LEU  HB2', ' E 304  LYS  HE2', -0.455, (210.55, 173.429, 203.491)), (' B 113  LYS  HD2', ' B 114  THR HG23', -0.455, (165.699, 221.944, 157.856)), (' E 906  PHE  HB3', ' E 911  VAL  HB ', -0.455, (207.714, 194.043, 255.792)), (' C 102  ARG  HD2', ' C 141  LEU HD13', -0.454, (249.919, 237.384, 166.504)), (' B  54  LEU  HA ', ' B 272  PRO  HA ', -0.454, (172.359, 219.409, 185.531)), (' B 332  ILE HG22', ' B 362  VAL HG21', -0.453, (214.765, 240.421, 164.788)), (' C 327  VAL  HA ', ' C 542  ASN  HB3', -0.453, (233.44, 180.296, 180.679)), (' E 360  ASN  H  ', ' E 523  THR  HB ', -0.452, (160.215, 199.861, 166.051)), (' E1104  VAL  HB ', ' E1113  GLN  HB2', -0.451, (198.315, 194.46, 269.88)), (' B1047  TYR  HB2', ' B1067  TYR  HB3', -0.451, (190.853, 212.924, 247.287)), (' B 767  LEU HD13', ' B 770  ILE HD12', -0.449, (193.697, 193.626, 209.006)), (' C 574  ASP  N  ', ' C 574  ASP  OD1', -0.449, (225.957, 176.972, 196.287)), (' E 627  ASP  N  ', ' E 627  ASP  OD1', -0.449, (182.805, 165.253, 195.136)), (' B 346  ARG  NH1', ' B 347  PHE  O  ', -0.448, (223.162, 238.908, 138.275)), (' B 723  THR  OG1', ' B 724  THR  N  ', -0.447, (184.012, 211.104, 234.711)), (' B 994  ASP  HA ', ' B 997  ILE HG22', -0.447, (197.054, 193.945, 185.845)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.446, (205.933, 233.442, 141.68)), (' B 743  CYS  HB3', ' B 746  SER  HB3', -0.444, (190.107, 187.072, 188.633)), (' C1052  PHE  HB2', ' C1063  LEU  HB2', -0.444, (210.94, 223.561, 236.377)), (' D  67  ARG  NH1', ' D  85  SER  O  ', -0.444, (170.406, 155.65, 140.001)), (' D  37  PHE  HB2', ' D  95  TYR  HB2', -0.443, (180.849, 169.379, 144.092)), (' E 395  VAL HG13', ' E 515  PHE  HE1', -0.442, (165.738, 194.75, 160.24)), (' B  96  GLU  OE1', ' B 190  ARG  NH1', -0.441, (145.873, 221.337, 182.301)), (' B 342  PHE  O  ', ' B 509  ARG  NH2', -0.441, (214.116, 243.286, 144.819)), (' E 577  ARG HH21', ' E 584  ILE HD11', -0.441, (156.934, 195.014, 192.957)), (' C 731  MET  HB2', ' C 955  ASN HD21', -0.441, (207.118, 217.505, 212.477)), (' C 659  SER  HB3', ' C 698  SER  HB3', -0.44, (238.174, 201.702, 228.939)), (' B 159  VAL HG13', ' B 160  TYR  HD1', -0.44, (147.988, 220.891, 163.581)), (' B 957  GLN  HB3', ' C 765  ARG HH12', -0.44, (185.826, 206.879, 205.218)), (' C 598  ILE HG23', ' C 664  ILE HG21', -0.439, (234.706, 208.632, 214.514)), (' A  48  VAL HG13', ' A  64  VAL HG21', -0.439, (186.921, 239.004, 136.827)), (' C 276  LEU HD22', ' C 301  CYS  HA ', -0.439, (228.828, 218.242, 199.587)), (' E 720  ILE  HB ', ' E 926  GLN  HB3', -0.438, (209.983, 181.867, 249.793)), (' E 430  THR  OG1', ' E 515  PHE  O  ', -0.437, (173.16, 196.957, 157.426)), (' E 297  SER  HA ', ' E 300  LYS  HB2', -0.436, (201.076, 168.048, 205.9)), (' B 139  PRO  HB3', ' B 159  VAL HG23', -0.435, (149.398, 225.015, 165.997)), (' B 825  LYS  HD2', ' B 945  LEU HD13', -0.434, (176.933, 207.624, 225.291)), (' B  34  ARG  NH2', ' B 191  GLU  OE2', -0.434, (155.487, 220.511, 192.357)), (' C1069  PRO  HG2', ' E 892  PRO  HD2', -0.433, (223.288, 210.163, 247.535)), (' C 566  GLY  N  ', ' C 575  ALA  O  ', -0.431, (226.625, 173.174, 193.199)), (' B 605  SER  OG ', ' B 606  ASN  N  ', -0.43, (170.325, 229.497, 212.351)), (' A  20  LEU HD12', ' A  81  LEU HD23', -0.43, (181.036, 234.959, 141.397)), (' E 974  SER  HB3', ' E 980  ILE HD11', -0.43, (211.513, 188.497, 178.405)), (' C 781  VAL  O  ', ' C 784  GLN  NE2', -0.428, (198.605, 219.683, 229.791)), (' E 808  ASP  HB3', ' E 811  LYS  HG2', -0.428, (230.161, 180.725, 234.039)), (' E 713  ALA  HA ', ' E1074  ASN  HA ', -0.427, (190.097, 185.403, 259.213)), (' C 904  TYR  O  ', ' C 908  GLY  N  ', -0.426, (206.592, 215.277, 252.697)), (' C 159  VAL HG13', ' C 160  TYR  HD1', -0.426, (248.177, 234.343, 160.542)), (' B1148  PHE  HB3', ' B1149  LYS  HZ2', -0.426, (195.504, 209.249, 293.757)), (' B 379  CYS  HA ', ' B 432  CYS  HA ', -0.426, (207.894, 228.446, 150.366)), (' E1104  VAL  O  ', ' E1113  GLN  N  ', -0.426, (198.85, 191.991, 269.004)), (' B 741  TYR  OH ', ' B 962  LEU  O  ', -0.425, (187.643, 197.813, 197.295)), (' E 417  LYS  HD2', ' E 455  LEU HD11', -0.425, (167.687, 192.641, 131.161)), (' B1086  LYS  HD2', ' B1122  VAL HG21', -0.423, (212.405, 219.805, 273.922)), (' A  43  LYS  HB3', ' A  43  LYS  HE3', -0.423, (188.031, 229.827, 127.911)), (' E 537  LYS  HA ', ' E 537  LYS  HD2', -0.422, (171.059, 176.458, 195.696)), (' C1050  MET  HB3', ' C1050  MET  HE3', -0.422, (208.149, 221.497, 241.499)), (' B 643  PHE  HB3', ' B 650  LEU  HB3', -0.422, (186.572, 237.804, 210.342)), (' B 722  VAL HG13', ' B 934  ILE HD11', -0.421, (179.747, 210.108, 238.465)), (' E 778  THR  HA ', ' E 781  VAL HG12', -0.421, (217.997, 198.876, 225.323)), (' B 240  THR  OG1', ' B 241  LEU  N  ', -0.421, (151.135, 225.384, 174.335)), (' E 355  ARG  HA ', ' E 355  ARG  HD3', -0.42, (162.124, 200.238, 152.233)), (' E 324  GLU  H  ', ' E 539  VAL HG23', -0.42, (172.22, 177.065, 187.905)), (' C  57  PRO  HG3', ' C 273  ARG  HG3', -0.42, (238.015, 216.3, 188.81)), (' B 819  GLU  HA ', ' B 822  LEU  HB2', -0.419, (176.665, 200.786, 229.197)), (' D  50  ALA  HB3', ' D  59  TYR  HB2', -0.418, (169.213, 170.855, 148.622)), (' E 433  VAL HG12', ' E 512  VAL HG22', -0.417, (166.708, 192.134, 149.555)), (' B 398  ASP  HB2', ' B 512  VAL  HB ', -0.417, (217.178, 229.938, 146.364)), (' C 134  GLN  N  ', ' C 162  SER  OG ', -0.416, (246.254, 228.878, 155.929)), (' B 453  TYR  HE2', ' B 455  LEU HD13', -0.415, (216.869, 228.109, 127.567)), (' B 742  ILE  HA ', ' B1000  ARG  HD3', -0.414, (190.588, 193.02, 192.642)), (' C 195  LYS  HD3', ' C 204  TYR  HE1', -0.414, (232.597, 226.546, 178.927)), (' B 900  MET  SD ', ' B 917  TYR  OH ', -0.414, (186.148, 200.345, 259.657)), (' E  26  PRO  O  ', ' E  63  THR  OG1', -0.414, (193.94, 144.418, 187.923)), (' C 742  ILE HG12', ' C1000  ARG  HG3', -0.414, (200.875, 212.954, 191.65)), (' E 619  GLU  O  ', ' E 623  ALA  N  ', -0.413, (178.283, 171.86, 200.263)), (' E 355  ARG  HD2', ' E 396  TYR  HB3', -0.413, (164.213, 200.512, 154.035)), (' C 327  VAL HG13', ' C 542  ASN HD22', -0.413, (232.841, 179.607, 178.66)), (' E 458  LYS  NZ ', ' E 471  GLU  OE2', -0.411, (164.318, 209.25, 132.269)), (' B 401  VAL HG22', ' B 509  ARG  HG2', -0.411, (214.001, 239.451, 139.65)), (' C 669  GLY  HA2', ' C 697  MET  HE3', -0.411, (232.284, 199.125, 222.52)), (' B 708  SER  OG ', ' B 710  ASN  OD1', -0.411, (200.768, 235.59, 257.015)), (' E 129  LYS  HE2', ' E 133  PHE  HZ ', -0.41, (212.195, 148.808, 165.772)), (' E 996  LEU  HB2', ' E1000  ARG HH21', -0.41, (210.804, 193.138, 186.867)), (' C 945  LEU HD12', ' C 948  LEU HD12', -0.41, (213.765, 222.346, 221.984)), (' C 749  CYS  O  ', ' C 753  LEU  N  ', -0.409, (193.717, 211.567, 186.013)), (' E 378  LYS  HA ', ' E 378  LYS  HD2', -0.408, (172.278, 184.024, 151.464)), (' B 746  SER  HB3', ' B 749  CYS  HB3', -0.408, (191.049, 186.961, 187.385)), (' E 273  ARG  HE ', ' E 292  ALA  HB3', -0.408, (196.32, 165.302, 196.444)), (' C 565  PHE  HA ', ' C 576  VAL  HA ', -0.408, (227.917, 172.29, 191.133)), (' A  91  THR  OG1', ' A 123  VAL  O  ', -0.407, (175.057, 235.345, 129.53)), (' E 869  MET  HB2', ' E 869  MET  HE3', -0.406, (229.633, 196.485, 227.44)), (' E1116  THR  O  ', ' E1120  THR  OG1', -0.406, (196.106, 201.706, 273.314)), (' E 915  VAL HG11', ' E1109  PHE  HD2', -0.405, (205.053, 189.241, 260.132)), (' B 401  VAL HG12', ' B 507  PRO  HB2', -0.405, (212.955, 237.929, 135.815)), (' B 194  PHE  HE1', ' B 203  ILE HG12', -0.405, (157.794, 214.466, 177.351)), (' E1015  ALA  HA ', ' E1018  ILE HG22', -0.405, (210.231, 198.17, 216.111)), (' B 334  ASN  HB3', ' B 362  VAL HG22', -0.404, (218.27, 240.157, 163.759)), (' B1090  PRO  HA ', ' B1120  THR  HA ', -0.404, (203.986, 217.104, 267.494)), (' B 574  ASP  N  ', ' B 574  ASP  OD1', -0.404, (212.519, 232.418, 192.051)), (' E 715  PRO  HA ', ' E1072  GLU  HA ', -0.404, (195.684, 183.675, 256.752)), (' C 985  ASP  OD2', ' C 987  PRO  CG ', -0.403, (197.71, 209.04, 168.614)), (' E 815  ARG  HD2', ' E 819  GLU  HB3', -0.403, (224.072, 185.106, 229.256)), (' E 498  GLN  O  ', ' E 506  GLN  NE2', -0.403, (155.111, 180.455, 135.311)), (' C 738  CYS  HB3', ' C 763  LEU HD11', -0.403, (195.755, 213.732, 197.79)), (' E 338  PHE  HA ', ' E 341  VAL HG12', -0.402, (155.564, 191.346, 156.736)), (' B 567  ARG  HA ', ' B 567  ARG  HD3', -0.402, (214.472, 229.22, 191.293)), (' B 395  VAL HG11', ' B 524  VAL  HB ', -0.402, (217.958, 232.359, 158.485)), (' E 351  TYR  HE2', ' E 452  LEU  HB2', -0.401, (155.176, 197.805, 136.308)), (' B 563  GLN  HG2', ' C  43  PHE  HB2', -0.401, (221.318, 234.051, 188.317)), (' C1098  ASN  H  ', ' C1101  HIS  HB3', -0.401, (228.236, 206.165, 269.736)), (' E 905  ARG  NH2', ' E1048  HIS  O  ', -0.4, (208.381, 195.658, 247.203)), (' C 129  LYS  HE2', ' C 133  PHE  HZ ', -0.4, (240.945, 233.473, 159.835))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
