# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  98 ', 'SER', 0.04318713407375613, (225.46200000000005, 164.13499999999993, 133.12000000000003)), ('A', ' 134 ', 'GLN', 0.028268173580547538, (214.37300000000005, 157.69599999999997, 111.094)), ('A', ' 640 ', 'SER', 0.03684384860532421, (198.77200000000005, 132.389, 162.982)), ('B', '  97 ', 'LYS', 0.020240003792101613, (131.318, 106.132, 140.267)), ('B', ' 123 ', 'ALA', 0.04453620781220155, (138.399, 105.365, 127.04100000000001)), ('B', ' 198 ', 'ASP', 0.002289548989462928, (146.40500000000006, 135.20799999999997, 128.191)), ('B', ' 362 ', 'VAL', 0.06122812547331605, (123.051, 181.594, 122.548)), ('B', ' 421 ', 'TYR', 0.025268920194376137, (136.801, 182.93, 102.283)), ('B', ' 524 ', 'VAL', 0.05479450031216485, (127.99600000000005, 182.651, 119.95800000000001)), ('B', ' 620 ', 'VAL', 0.000992794239883089, (125.295, 153.279, 157.278)), ('B', ' 621 ', 'PRO', 0.0, (124.06600000000003, 150.319, 155.146)), ('B', ' 623 ', 'ALA', 0.016560435048361254, (129.736, 152.698, 150.888)), ('B', ' 624 ', 'ILE', 0.038330680178990335, (131.823, 149.473, 151.094)), ('B', ' 630 ', 'THR', 0.0, (126.55800000000004, 137.42699999999994, 152.649)), ('B', ' 640 ', 'SER', 0.018578085837842245, (121.32300000000002, 141.95899999999995, 165.757)), ('B', ' 793 ', 'PRO', 0.04326355611167495, (176.312, 129.19, 202.66500000000005)), ('C', '  97 ', 'LYS', 0.04274741781688534, (126.91100000000007, 216.03599999999994, 142.266)), ('C', ' 112 ', 'SER', 0.023917307060349724, (139.93900000000005, 207.212, 114.92000000000003)), ('C', ' 281 ', 'GLU', 0.019047160802028885, (131.3, 188.394, 160.579)), ('C', ' 446 ', 'GLY', 0.02289811558944481, (177.178, 158.75200000000007, 88.807)), ('C', ' 626 ', 'ALA', 0.004615588439454525, (168.537, 202.47399999999993, 152.45600000000002)), ('C', ' 640 ', 'SER', 0.012053050653481652, (165.58500000000006, 207.581, 164.92))]
data['omega'] = []
data['rota'] = [('A', ' 336 ', 'CYS', 0.21563907918155334, (161.89400000000006, 128.647, 114.47000000000003)), ('A', ' 360 ', 'ASN', 0.2991416673750634, (159.335, 125.257, 120.89400000000002)), ('A', ' 546 ', 'LEU', 0.07785510266645318, (166.832, 134.465, 135.007)), ('A', ' 675 ', 'GLN', 0.13607834101658928, (199.532, 144.846, 176.13200000000006)), ('A', ' 760 ', 'CYS', 0.12636958257142125, (160.51600000000002, 175.844, 153.269)), ('A', '1082 ', 'CYS', 0.12714050459624707, (166.478, 141.276, 228.823)), ('B', ' 122 ', 'ASN', 0.018815482292219562, (136.95700000000005, 108.929, 127.225)), ('B', ' 212 ', 'LEU', 0.22875069807145668, (128.74200000000005, 112.159, 151.369)), ('B', ' 214 ', 'ARG', 0.26787212683766976, (123.09700000000002, 114.441, 147.538)), ('B', ' 307 ', 'THR', 0.030878354280290732, (143.794, 133.81, 164.526)), ('B', ' 586 ', 'ASP', 0.004502336446593822, (125.887, 175.30099999999993, 152.596)), ('B', ' 634 ', 'ARG', 0.1422232982249872, (125.31200000000003, 141.819, 156.362)), ('B', ' 738 ', 'CYS', 0.05033400460735891, (172.635, 150.702, 152.373)), ('B', ' 739 ', 'THR', 0.05979308929551967, (175.11300000000006, 149.94499999999994, 149.533)), ('B', ' 988 ', 'GLU', 0.22399935069013768, (167.12700000000007, 153.014, 129.098)), ('B', '1082 ', 'CYS', 0.25471770829215096, (144.968, 169.64, 229.60900000000007)), ('C', '  96 ', 'GLU', 0.027887110558412767, (130.709, 215.523, 142.39700000000002)), ('C', ' 472 ', 'ILE', 0.13437272570946113, (190.403, 142.715, 104.75400000000002)), ('C', ' 525 ', 'CYS', 0.2556293781004898, (186.094, 182.43299999999994, 123.965)), ('C', ' 578 ', 'ASP', 0.24196394160373413, (192.48900000000006, 187.443, 137.051)), ('C', ' 615 ', 'VAL', 0.24666988323633343, (175.043, 192.51199999999994, 160.117)), ('C', ' 622 ', 'VAL', 0.20024898796607926, (173.69200000000006, 201.452, 153.041)), ('C', ' 633 ', 'TRP', 1.5742540538673187e-06, (162.40000000000006, 196.635, 153.544)), ('C', ' 634 ', 'ARG', 0.0, (161.695, 200.352, 152.751)), ('C', ' 907 ', 'ASN', 0.09102794172377922, (155.72300000000007, 168.024, 212.116)), ('C', '1082 ', 'CYS', 0.04881918721366674, (179.976, 174.05299999999997, 228.979))]
data['cbeta'] = [('B', ' 200 ', 'TYR', ' ', 0.311697536847776, (142.02900000000005, 133.502, 125.96800000000002)), ('B', ' 623 ', 'ALA', ' ', 0.2516824718337752, (130.514, 153.546, 151.901)), ('C', ' 627 ', 'ASP', ' ', 0.25441997934382227, (171.79900000000006, 204.66199999999995, 150.176))]
data['probe'] = []
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
