# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  72 ', 'ILE', 0.09105365324042076, (225.79, 144.962, 136.104)), ('A', '  73 ', 'ASN', 0.01594186412978241, (227.849, 144.641, 132.85899999999998)), ('A', '  94 ', 'LYS', 0.020044115848270497, (224.004, 161.529, 140.25599999999994)), ('A', ' 110 ', 'LYS', 0.028007941732098134, (203.851, 154.009, 113.179)), ('A', ' 167 ', 'ALA', 0.0011682030125045506, (218.684, 173.1679999999999, 134.76299999999998)), ('A', ' 340 ', 'TRP', 0.03123778933127909, (153.44, 131.444, 98.97999999999998)), ('A', ' 409 ', 'ASN', 0.03948781109209402, (155.24399999999997, 138.33600000000007, 94.299)), ('A', ' 410 ', 'TYR', 0.024148145965928083, (156.333, 138.288, 98.049)), ('A', ' 451 ', 'PHE', 0.04599828419054129, (153.877, 141.922, 102.18)), ('A', ' 453 ', 'ARG', 0.007339988382277494, (153.754, 143.049, 96.90399999999995)), ('A', ' 454 ', 'ASP', 0.02032896861521961, (151.36099999999996, 141.47900000000013, 94.44899999999996)), ('A', ' 469 ', 'PRO', 0.03925605695189445, (141.81399999999988, 138.836, 82.022)), ('A', ' 470 ', 'PRO', 0.0, (143.88199999999998, 139.116, 78.70299999999997)), ('A', ' 529 ', 'PHE', 0.02873084021410585, (165.255, 128.935, 138.083)), ('A', ' 624 ', 'THR', 0.0287755319429511, (192.578, 139.807, 158.57599999999994)), ('A', ' 833 ', 'CYS', 0.01674459686161922, (186.69, 175.48, 165.26699999999997)), ('A', ' 834 ', 'ALA', 0.023089099471750425, (184.874, 176.45799999999988, 161.991)), ('A', ' 836 ', 'LYS', 0.014536861489941846, (180.314, 180.195, 161.219)), ('B', '  73 ', 'ASN', 0.013375434857089336, (111.68, 114.55600000000005, 135.165)), ('B', ' 108 ', 'ASN', 0.013864987571290312, (127.38600000000005, 129.871, 116.62399999999998)), ('B', ' 148 ', 'THR', 0.03699578408808328, (138.658, 109.68099999999998, 122.883)), ('B', ' 157 ', 'PHE', 0.03004360885234436, (134.847, 125.909, 111.669)), ('B', ' 167 ', 'ALA', 0.018295569209617345, (141.48199999999989, 108.941, 131.369)), ('B', ' 179 ', 'PHE', 0.037309718962845406, (124.36, 112.447, 143.427)), ('B', ' 238 ', 'PHE', 0.019147409401569313, (120.16700000000003, 115.454, 127.433)), ('B', ' 350 ', 'ALA', 0.027502881357624596, (123.35400000000003, 176.14, 118.752)), ('B', ' 417 ', 'MET', 0.025270986244292186, (132.28999999999988, 170.253, 110.26599999999999)), ('B', ' 454 ', 'ASP', 0.02819536414408499, (133.14799999999988, 180.73200000000006, 94.27299999999998)), ('B', ' 470 ', 'PRO', 4.8112634744859344e-05, (128.4049999999999, 190.138, 84.87899999999998)), ('B', ' 531 ', 'GLY', 0.06511672615866772, (134.26699999999988, 176.1619999999999, 136.731)), ('B', ' 622 ', 'TYR', 0.019735406863897135, (129.91299999999987, 149.399, 154.18)), ('B', ' 811 ', 'ALA', 0.014076118774536253, (158.283, 138.643, 168.61)), ('B', ' 813 ', 'ALA', 0.046888198405555144, (158.49899999999997, 133.444, 168.282)), ('B', ' 832 ', 'ILE', 0.00256301, (163.02, 135.79799999999997, 167.192)), ('B', ' 834 ', 'ALA', 0.02605327344813116, (164.11299999999994, 134.561, 161.48899999999998)), ('C', '  94 ', 'LYS', 0.030627927908168758, (132.64699999999982, 216.853, 141.691)), ('C', ' 138 ', 'PHE', 0.023493202706083374, (137.00299999999987, 218.409, 120.04999999999997)), ('C', ' 168 ', 'PHE', 0.02540364222935887, (129.15199999999984, 206.82799999999992, 137.682)), ('C', ' 180 ', 'LYS', 0.03904248079065701, (135.16099999999986, 220.094, 147.664)), ('C', ' 240 ', 'PRO', 0.07133246910787329, (136.9549999999999, 225.061, 131.536)), ('C', ' 340 ', 'TRP', 0.012894685226175215, (199.60899999999995, 185.468, 97.32699999999996)), ('C', ' 410 ', 'TYR', 0.030176985489919046, (191.016, 181.968, 96.586)), ('C', ' 454 ', 'ASP', 0.03868902706844055, (195.879, 176.017, 92.88099999999996)), ('C', ' 467 ', 'CYS', 0.0189607822941995, (197.82099999999994, 172.746, 80.08799999999998)), ('C', ' 470 ', 'PRO', 3.61032151178601e-05, (203.153, 179.35, 80.507)), ('C', ' 625 ', 'GLY', 0.09066057675250536, (170.813, 203.071, 161.013)), ('C', ' 668 ', 'SER', 0.030848750883280925, (160.216, 215.20699999999988, 180.228)), ('C', ' 691 ', 'ASN', 0.007334046925421832, (183.079, 181.612, 215.98199999999994)), ('C', ' 832 ', 'ILE', 0.0, (137.0679999999999, 175.357, 166.28699999999998)), ('C', '1066 ', 'GLU', 0.017383740279287397, (180.9140000000001, 168.621, 237.498)), ('H', '  54 ', 'GLY', 0.030163022173904066, (179.885, 124.788, 105.708)), ('H', ' 163 ', 'VAL', 0.02009860343029093, (212.569, 130.3479999999999, 71.73399999999998)), ('H', ' 211 ', 'VAL', 0.0037808009878685807, (222.775, 114.968, 69.065)), ('L', '   9 ', 'ASP', 0.03439977375814035, (189.596, 133.3349999999999, 73.00599999999997)), ('L', '  26 ', 'SER', 0.012893948364727306, (173.418, 135.30299999999988, 80.913)), ('L', '  31 ', 'ASN', 0.0036847776180866324, (175.203, 146.178, 86.55399999999999)), ('L', '  48 ', 'ILE', 0.023507469527272312, (186.98, 146.25, 86.49799999999999)), ('L', '  81 ', 'GLU', 0.031954232723785225, (199.529, 145.1719999999999, 78.85)), ('L', ' 191 ', 'VAL', 0.02015001214080073, (215.97799999999998, 110.66199999999996, 52.490999999999985))]
data['omega'] = [('A', ' 795 ', 'THR', None, (192.11499999999995, 184.45299999999995, 187.21899999999994)), ('B', ' 795 ', 'THR', None, (169.653, 126.41899999999994, 185.417)), ('C', ' 151 ', 'MET', None, (128.74899999999988, 209.261, 123.839)), ('C', ' 795 ', 'THR', None, (128.62499999999986, 175.44599999999997, 188.629))]
data['rota'] = [('A', '  46 ', 'ILE', 0.20064010074021046, (194.575, 172.946, 145.635)), ('A', '  48 ', 'ARG', 0.00021107052800505786, (195.90799999999996, 173.459, 152.37199999999996)), ('A', '  93 ', 'GLU', 0.19443904434783718, (222.21699999999996, 158.13299999999998, 140.583)), ('A', ' 102 ', 'VAL', 0.2913988911725556, (210.642, 156.5789999999999, 126.148)), ('A', ' 128 ', 'CYS', 0.2524684701693149, (207.80699999999993, 162.215, 117.59199999999997)), ('A', ' 178 ', 'ASN', 0.27082433704735787, (226.89299999999992, 158.667, 141.82499999999996)), ('A', ' 214 ', 'ASN', 0.08260677218093847, (209.295, 161.265, 151.405)), ('A', ' 271 ', 'THR', 0.0842026375436817, (203.31299999999996, 169.8869999999999, 153.577)), ('A', ' 318 ', 'ASN', 0.09852056215654871, (162.318, 119.25899999999994, 130.29399999999995)), ('A', ' 330 ', 'ASN', 0.19045258953207683, (160.37099999999998, 121.01099999999997, 105.12799999999997)), ('A', ' 382 ', 'VAL', 0.29410607232917857, (158.115, 135.317, 114.29699999999997)), ('A', ' 409 ', 'ASN', 0.018011575227836196, (155.24399999999997, 138.33600000000007, 94.299)), ('A', ' 425 ', 'THR', 0.12470488546336568, (164.64499999999992, 123.137, 93.88299999999997)), ('A', ' 429 ', 'ASP', 0.15511122229353688, (160.401, 120.279, 92.40299999999999)), ('A', ' 481 ', 'TYR', 0.11826139660630695, (161.178, 129.2739999999999, 87.046)), ('A', ' 484 ', 'TYR', 0.14325712906498905, (166.352, 120.921, 86.408)), ('A', ' 560 ', 'ASP', 0.0872024660940624, (162.95699999999997, 130.78, 150.45599999999996)), ('A', ' 619 ', 'TRP', 0.016338340530125107, (196.918, 142.65099999999998, 152.93)), ('A', ' 661 ', 'HIS', 0.09627166239074517, (197.191, 141.267, 179.222)), ('A', ' 742 ', 'CYS', 0.0896755184396596, (162.616, 177.89399999999995, 156.27999999999994)), ('A', ' 809 ', 'THR', 0.15943357547828801, (187.509, 170.21, 174.63099999999994)), ('A', ' 816 ', 'MET', 3.774708078920035e-05, (191.013, 166.7869999999999, 177.11)), ('A', '1056 ', 'ASN', 0.27446782124019176, (181.606, 141.329, 215.826)), ('B', '  48 ', 'ARG', 0.0007307131931210863, (153.924, 128.46099999999996, 151.792)), ('B', '  94 ', 'LYS', 0.20723608476379882, (128.19599999999988, 110.365, 140.185)), ('B', ' 214 ', 'ASN', 0.08720971093101111, (136.63099999999994, 123.00899999999994, 151.55699999999996)), ('B', ' 271 ', 'THR', 0.12133729394674925, (147.24, 123.83599999999994, 153.19399999999996)), ('B', ' 334 ', 'PHE', 0.170629881260134, (114.98, 181.559, 99.65099999999995)), ('B', ' 381 ', 'ASN', 0.1508090256682395, (132.37399999999988, 179.89199999999988, 114.46299999999998)), ('B', ' 382 ', 'VAL', 0.1823271160579447, (129.10499999999988, 179.281, 112.467)), ('B', ' 385 ', 'ASP', 0.004826842309707336, (123.83199999999994, 178.677, 104.12999999999998)), ('B', ' 421 ', 'LEU', 0.057867213512598076, (119.12699999999994, 169.27899999999997, 104.65499999999997)), ('B', ' 476 ', 'TRP', 0.04934383671049265, (127.73599999999995, 181.382, 84.243)), ('B', ' 485 ', 'THR', 0.24901539919735097, (103.316, 171.217, 91.766)), ('B', ' 496 ', 'VAL', 0.2888792426253766, (117.876, 173.33099999999996, 100.93999999999997)), ('B', ' 626 ', 'ASN', 0.0, (122.758, 150.29099999999997, 161.723)), ('B', ' 661 ', 'HIS', 0.1570841182249383, (126.96199999999999, 142.3929999999999, 180.888)), ('B', ' 889 ', 'ASN', 0.10198241185636, (161.03599999999994, 151.322, 214.25499999999997)), ('C', '  66 ', 'VAL', 0.0, (152.775, 211.944, 145.60099999999994)), ('C', '  92 ', 'THR', 0.0038480551082544653, (139.65399999999985, 217.267, 144.019)), ('C', ' 155 ', 'ASN', 0.24246299639016444, (138.01299999999995, 211.872, 115.94799999999998)), ('C', ' 162 ', 'GLU', 0.07403381322130131, (133.967, 200.43799999999987, 122.735)), ('C', ' 169 ', 'SER', 0.2213784170719853, (129.1679999999999, 210.664, 138.21599999999998)), ('C', ' 214 ', 'ASN', 0.11172097149422336, (139.83299999999986, 204.4069999999999, 152.97499999999994)), ('C', ' 305 ', 'PHE', 0.1481482013306128, (169.882, 190.177, 156.48599999999996)), ('C', ' 337 ', 'VAL', 0.0051351332100178625, (197.118, 187.375, 93.064)), ('C', ' 425 ', 'THR', 0.12401231274571439, (197.076, 201.0079999999999, 96.84499999999996)), ('C', ' 429 ', 'ASP', 0.0013092954406715878, (201.892, 199.435, 95.771)), ('C', ' 441 ', 'ARG', 0.0, (193.373, 185.6199999999999, 87.72699999999999)), ('C', ' 496 ', 'VAL', 0.06231222101637728, (193.37199999999999, 193.751, 100.472)), ('C', ' 560 ', 'ASP', 0.21908437791292087, (189.289, 180.12, 151.46299999999994)), ('C', ' 604 ', 'THR', 0.1913952929238664, (181.711, 198.82999999999996, 161.89799999999994)), ('C', ' 619 ', 'TRP', 0.04937437081735389, (165.29, 202.225, 153.10499999999993)), ('C', ' 624 ', 'THR', 0.022626430273194244, (167.606, 200.90899999999996, 161.275)), ('C', ' 810 ', 'LEU', 0.2452366033442467, (141.35999999999987, 177.628, 173.581)), ('C', ' 819 ', 'TYR', 0.0973129235146134, (149.944, 194.847, 181.65599999999995)), ('H', '  56 ', 'ASN', 0.0, (177.22299999999996, 123.83399999999995, 100.93)), ('L', '  31 ', 'ASN', 0.008881773483895423, (175.203, 146.178, 86.55399999999999)), ('L', ' 194 ', 'CYS', 0.23251579246792387, (211.6419999999999, 120.02499999999996, 53.79499999999999))]
data['cbeta'] = [('A', '  47 ', 'PHE', ' ', 0.38469297096552446, (197.51699999999997, 171.15, 148.814)), ('A', ' 236 ', 'THR', ' ', 0.2607012998972627, (221.646, 157.29099999999994, 125.18599999999999)), ('A', ' 247 ', 'THR', ' ', 0.29806807620694914, (230.117, 152.01699999999988, 135.83899999999997)), ('A', ' 287 ', 'LYS', ' ', 0.285775112351577, (193.752, 154.669, 162.456)), ('A', ' 330 ', 'ASN', ' ', 0.25137884203407473, (161.072, 120.208, 106.25399999999996)), ('A', ' 467 ', 'CYS', ' ', 0.26512764830452756, (144.508, 145.055, 85.342)), ('A', ' 470 ', 'PRO', ' ', 0.8358257697106148, (144.753, 137.93, 78.236)), ('A', ' 557 ', 'ASP', ' ', 0.40054092961371374, (156.04999999999998, 138.143, 151.145)), ('A', ' 727 ', 'ASP', ' ', 0.2518346517948276, (174.21, 184.42999999999992, 147.46)), ('A', ' 832 ', 'ILE', ' ', 0.30605524592666117, (183.176, 176.70599999999993, 168.19799999999998)), ('B', '  46 ', 'ILE', ' ', 0.2914382756560227, (154.402, 131.553, 144.573)), ('B', '  47 ', 'PHE', ' ', 0.34865350207967516, (150.942, 128.529, 148.40899999999996)), ('B', ' 287 ', 'LYS', ' ', 0.2983617351986982, (139.24299999999988, 139.14799999999988, 163.098)), ('B', ' 376 ', 'ASP', ' ', 0.2611651471098254, (125.20800000000004, 168.643, 122.64)), ('B', ' 440 ', 'TYR', ' ', 0.2592397110860306, (121.14099999999998, 175.908, 86.94199999999998)), ('B', ' 470 ', 'PRO', ' ', 0.8349292072275191, (127.015, 189.79099999999988, 85.44299999999998)), ('B', ' 545 ', 'PHE', ' ', 0.3126200034199657, (130.51499999999984, 188.5309999999999, 150.908)), ('B', ' 557 ', 'ASP', ' ', 0.3245314756226394, (142.94099999999986, 180.1789999999999, 152.16699999999994)), ('B', ' 614 ', 'GLN', ' ', 0.28265014892555984, (120.17399999999995, 147.693, 168.419)), ('B', ' 832 ', 'ILE', ' ', 0.2895284785372001, (163.372, 137.21199999999996, 167.725)), ('C', '  47 ', 'PHE', ' ', 0.38696865918462287, (137.17199999999985, 189.26399999999998, 150.61099999999996)), ('C', ' 153 ', 'PHE', ' ', 0.32814627422641945, (137.02799999999988, 211.87999999999988, 121.621)), ('C', ' 236 ', 'THR', ' ', 0.32621171239533037, (137.27299999999988, 219.29599999999988, 127.67099999999999)), ('C', ' 287 ', 'LYS', ' ', 0.3350143768374588, (153.105, 193.874, 163.99099999999999)), ('C', ' 443 ', 'LEU', ' ', 0.25421786379653294, (190.82899999999998, 182.23, 83.331)), ('C', ' 470 ', 'PRO', ' ', 0.833529665234935, (203.153, 180.6519999999999, 81.331)), ('C', ' 545 ', 'PHE', ' ', 0.2860865225778895, (199.73999999999995, 177.594, 150.136)), ('C', ' 557 ', 'ASP', ' ', 0.39365967691607845, (186.892, 170.78899999999993, 150.95)), ('C', ' 622 ', 'TYR', ' ', 0.3297303181837455, (170.62099999999992, 197.04899999999992, 156.75)), ('L', '  31 ', 'ASN', ' ', 0.3507298548361054, (175.176, 146.41799999999995, 85.02199999999996))]
data['probe'] = [(' A 606  VAL HG12', ' A 607  SER  H  ', -0.524, (187.466, 134.096, 157.847)), (' B  47  PHE  CD1', ' B 266  TYR  CZ ', -0.522, (148.766, 130.383, 150.054)), (' C  47  PHE  CD1', ' C 266  TYR  CZ ', -0.469, (140.234, 190.058, 151.938)), (' C 124  VAL HG22', ' C 151  MET  SD ', -0.468, (131.572, 208.758, 126.174)), (' A  47  PHE  CD1', ' A 266  TYR  CZ ', -0.46, (196.919, 168.201, 150.173)), (' A 131  GLU  HG3', ' A1302  NAG  H82', -0.459, (211.737, 154.865, 112.411)), (' H 118  GLY  H  ', ' H 119  PRO  CD ', -0.455, (211.072, 107.477, 78.503)), (' A 529  PHE  CG ', ' A 530  ASN  N  ', -0.427, (163.185, 128.846, 137.497)), (' B 529  PHE  CG ', ' B 530  ASN  N  ', -0.422, (130.779, 178.325, 138.753)), (' A 606  VAL  CG1', ' A 607  SER  H  ', -0.417, (187.162, 134.163, 158.224)), (' B 334  PHE  HA ', ' B 335  PRO  HD3', -0.416, (116.268, 181.299, 100.739))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
