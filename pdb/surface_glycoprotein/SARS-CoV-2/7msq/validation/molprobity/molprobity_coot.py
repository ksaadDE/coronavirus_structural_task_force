# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 483 ', 'VAL', 0.023059777658652223, (-46.213, -0.394, 63.735)), ('A', ' 519 ', 'HIS', 0.014257335369180796, (-8.282, -29.471000000000004, 75.922)), ('B', ' 372 ', 'ALA', 0.0006678772610319117, (27.008, 69.065, 20.006)), ('B', ' 387 ', 'LEU', 0.008377523848510362, (30.592, 61.60999999999999, 5.274999999999999)), ('D', '  56 ', 'ASN', 0.0438996629024806, (20.401, 63.513999999999996, 20.36)), ('D', '  65 ', 'SER', 0.006554066502648356, (15.445, 65.36, 35.16999999999999)), ('H', '   2 ', 'VAL', 0.05232142127210214, (12.685000000000004, -7.63, 47.856)), ('H', '  56 ', 'ASN', 0.01811185146187372, (-6.470999999999999, -16.478999999999992, 39.882999999999996))]
data['omega'] = [('D', ' 161 ', 'PRO', None, (2.064, 41.567, 41.04999999999999)), ('D', ' 163 ', 'PRO', None, (0.5579999999999998, 41.557, 35.054)), ('E', '   8 ', 'PRO', None, (-16.498, 63.22500000000001, 19.34)), ('E', '  95 ', 'PRO', None, (7.055, 69.243, 22.732)), ('E', ' 141 ', 'PRO', None, (-27.88599999999999, 46.228, 25.526)), ('H', ' 161 ', 'PRO', None, (16.513, 0.7329999999999998, 18.968)), ('H', ' 163 ', 'PRO', None, (16.688999999999993, 2.132, 24.985999999999994)), ('L', '   8 ', 'PRO', None, (-4.250000000000001, 20.18, 40.901)), ('L', '  95 ', 'PRO', None, (-11.442, -2.8529999999999993, 37.697)), ('L', ' 141 ', 'PRO', None, (13.830999999999996, 30.781000000000002, 34.602))]
data['rota'] = [('A', ' 346 ', 'ARG', 0.16718830223886216, (-30.800999999999988, -22.908999999999995, 49.27699999999999)), ('A', ' 358 ', 'ILE', 0.24040703195047378, (-18.393, -30.703, 61.91799999999999)), ('A', ' 367 ', 'VAL', 0.28469553965612043, (-8.885999999999997, -30.688, 47.259999999999984)), ('A', ' 371 ', 'SER', 0.054749424324601864, (-11.558000000000003, -25.49, 42.338999999999984)), ('A', ' 387 ', 'LEU', 0.0656966542525525, (-4.321, -27.258000000000006, 55.22399999999998)), ('A', ' 455 ', 'LEU', 0.014949143528402556, (-30.22200000000001, -2.5149999999999992, 58.329)), ('A', ' 468 ', 'ILE', 0.2950069391353984, (-33.004, -13.252, 64.495)), ('A', ' 483 ', 'VAL', 0.06406082538887858, (-46.213, -0.394, 63.735)), ('A', ' 498 ', 'GLN', 0.2531165502528948, (-31.967, -9.335, 39.148)), ('A', ' 517 ', 'LEU', 0.20281958784793283, (-8.937, -26.720000000000006, 69.782)), ('B', ' 357 ', 'ARG', 0.0, (31.861999999999995, 78.398, -3.337)), ('B', ' 367 ', 'VAL', 0.26501068860363797, (34.545, 66.535, 12.490999999999996)), ('B', ' 371 ', 'SER', 0.18818526667911684, (29.842, 69.815, 17.42)), ('B', ' 385 ', 'THR', 0.025034623202087866, (28.714, 60.32, 10.121999999999996)), ('B', ' 387 ', 'LEU', 0.08196751992893721, (30.592, 61.60999999999999, 5.274999999999999)), ('B', ' 441 ', 'LEU', 0.29066053956568316, (24.497999999999998, 86.443, 19.029999999999994)), ('B', ' 445 ', 'VAL', 0.010223653945556592, (17.313, 93.578, 24.656999999999993)), ('B', ' 480 ', 'CYS', 0.012204796803416684, (1.088, 101.847, -7.443)), ('B', ' 516 ', 'GLU', 0.0034344164193048183, (27.998, 68.425, -7.621)), ('D', '   5 ', 'GLN', 0.2715857415782501, (9.993, 43.643, 22.223)), ('D', '  68 ', 'SER', 0.1503370115107293, (17.275000000000002, 58.88100000000002, 30.546999999999997)), ('D', ' 140 ', 'PRO', 0.05884404658805239, (-21.109, 24.103, 35.66699999999999)), ('D', ' 152 ', 'LEU', 0.17950034655041083, (-17.409000000000006, 26.735, 33.176)), ('D', ' 195 ', 'VAL', 0.026254437398165464, (-15.083000000000007, 31.63, 31.645999999999997)), ('D', ' 228 ', 'LYS', 0.28912001013997235, (-19.813, 18.716, 39.70499999999999)), ('E', '  33 ', 'LEU', 0.22269040452230468, (-1.5750000000000002, 65.162, 12.305)), ('E', ' 152 ', 'ASN', 0.16663290114919943, (-33.929000000000016, 35.845, 50.34999999999999)), ('E', ' 158 ', 'ASN', 0.2757188602227424, (-19.354, 42.306, 49.523)), ('H', '  37 ', 'ILE', 0.26761304772968403, (1.8869999999999993, -1.872, 34.841999999999985)), ('H', ' 140 ', 'PRO', 0.003165002979162988, (35.605, 22.564, 24.613999999999994)), ('H', ' 163 ', 'PRO', 0.07863221913427908, (17.441999999999997, 3.3, 25.424999999999994)), ('H', ' 175 ', 'SER', 0.16114112023343696, (28.69300000000001, 16.116000000000003, 39.169)), ('H', ' 228 ', 'LYS', 0.0055326296307647215, (40.846, 20.554, 20.211999999999993)), ('L', '  11 ', 'LEU', 0.08640671806746, (1.7569999999999997, 23.479, 39.358)), ('L', ' 149 ', 'LYS', 0.11797086131615268, (23.331, 32.592, 12.626))]
data['cbeta'] = [('A', ' 468 ', 'ILE', ' ', 0.2742761828487941, (-33.004, -14.736999999999998, 64.88799999999998)), ('L', ' 170 ', 'ASP', ' ', 0.26124569644012574, (20.778, 23.828, 41.576999999999984))]
data['probe'] = [(' H 213 AASN  OD1', ' H 401  HOH  O  ', -0.938, (26.313, -2.007, 25.331)), (' B 365  TYR  HB3', ' B 387  LEU HD13', -0.822, (30.538, 66.371, 6.054)), (' B 371  SER  O  ', ' B 373  SER  N  ', -0.653, (26.563, 71.118, 18.076)), (' L  11  LEU  CD2', ' L 104  LEU HD13', -0.632, (3.72, 21.809, 42.369)), (' L  11  LEU HD22', ' L 104  LEU HD13', -0.616, (3.434, 21.535, 42.522)), (' B 403  ARG  HG2', ' B 504  GLY  O  ', -0.612, (10.309, 80.888, 15.026)), (' H  36  TRP  C  ', ' H  37  ILE HD12', -0.611, (1.24, -3.288, 36.373)), (' B 384  PRO  HA ', ' B 387  LEU HD12', -0.608, (27.759, 63.748, 6.912)), (' A 352  ALA  HA ', ' A 468  ILE HD11', -0.605, (-31.229, -15.691, 61.358)), (' H 192  LEU  C  ', ' H 192  LEU HD12', -0.601, (22.821, 12.173, 22.774)), (' B 371  SER  C  ', ' B 373  SER  H  ', -0.597, (27.875, 70.751, 18.176)), (' D  36  TRP  C  ', ' D  37  ILE HD12', -0.565, (7.496, 56.026, 23.809)), (' E  39  LYS  HE2', ' E  83  PHE  O  ', -0.562, (-12.063, 47.717, 18.436)), (' D  55 BGLY  HA2', ' D 106  TYR  CD1', -0.56, (22.018, 63.598, 15.246)), (' A 484  GLU  OE2', ' A 490  PHE  HB2', -0.553, (-41.684, -3.16, 58.754)), (' A 364  ASP  OD1', ' A 388  ASN  ND2', -0.537, (-5.697, -32.241, 51.057)), (' B 383  SER  O  ', ' B 387  LEU  HG ', -0.535, (28.021, 62.122, 5.105)), (' L  12  SER  HA ', ' L 105  GLU  O  ', -0.527, (6.624, 24.039, 40.447)), (' L  55  GLN  HA ', ' L  55  GLN  OE1', -0.519, (4.571, 2.515, 53.737)), (' D  37  ILE  N  ', ' D  37  ILE HD12', -0.518, (7.082, 55.854, 23.929)), (' H  55 BGLY  HA2', ' H 106  TYR  CE1', -0.513, (-7.096, -18.657, 44.329)), (' A 384  PRO  HA ', ' A 387  LEU HD22', -0.511, (-6.451, -24.223, 53.796)), (' H  37  ILE  N  ', ' H  37  ILE HD12', -0.508, (1.772, -3.058, 36.055)), (' B 365  TYR  HB2', ' B 387  LEU  HB3', -0.507, (31.76, 64.01, 5.749)), (' E  78  LEU HD11', ' E 104  LEU HD21', -0.502, (-16.954, 52.799, 14.129)), (' H  55 BGLY  HA2', ' H 106  TYR  CD1', -0.494, (-6.815, -18.316, 44.551)), (' E  39  LYS  CE ', ' E  83  PHE  O  ', -0.492, (-11.696, 47.551, 17.94)), (' E  33  LEU HD22', ' E  89  GLN  O  ', -0.486, (-1.713, 64.659, 14.841)), (' B 357  ARG  HG2', ' B 357  ARG HH11', -0.484, (34.176, 77.526, -6.115)), (' A 369  TYR  CD1', ' A 384  PRO  HB2', -0.483, (-6.394, -22.7, 49.236)), (' B 369  TYR  HA ', ' B 377  PHE  CE2', -0.481, (28.046, 67.869, 11.804)), (' B 384  PRO  O  ', ' B 387  LEU  HB2', -0.48, (29.324, 62.724, 7.761)), (' D 192  LEU  C  ', ' D 192  LEU HD12', -0.478, (-10.26, 35.872, 36.935)), (' L  61  ARG  NH1', ' L  82  ASP  OD1', -0.477, (9.675, 16.204, 49.536)), (' L  33  LEU HD22', ' L  89  GLN  O  ', -0.47, (-5.946, 5.82, 45.19)), (' B 388  ASN  HB2', ' B 389  ASP  OD1', -0.469, (34.771, 60.241, 4.624)), (' E 105  GLU  OE2', ' E 173  TYR  OH ', -0.469, (-20.785, 49.057, 24.881)), (' B 359  SER  HA ', ' B 524  VAL HG22', -0.465, (36.502, 72.389, -3.502)), (' B 357  ARG  HG2', ' B 357  ARG  NH1', -0.463, (34.045, 77.663, -6.399)), (' D  14  PRO  O  ', ' D  15  SER  HB2', -0.462, (11.573, 54.17, 46.565)), (' D 206  GLN  HA ', ' D 206  GLN  OE1', -0.458, (-13.144, 16.534, 24.792)), (' A 378  LYS  HB2', ' H 103  TYR  CD1', -0.457, (-7.189, -14.504, 52.431)), (' B 357  ARG  CG ', ' B 357  ARG HH11', -0.456, (33.817, 77.167, -6.131)), (' H  55 BGLY  CA ', ' H 106  TYR  CD1', -0.456, (-6.553, -17.729, 44.426)), (' H  12  VAL  O  ', ' H 125  VAL  HA ', -0.455, (7.274, -3.375, 18.146)), (' D  18  LEU HD12', ' D 123  VAL HG11', -0.454, (8.105, 51.382, 35.584)), (' D  64  LYS  O  ', ' D  65  SER  CB ', -0.453, (13.877, 66.543, 35.399)), (' E   6  GLN  HA ', ' E  22  THR  O  ', -0.449, (-11.309, 65.3, 18.253)), (' H 155  LEU HD11', ' H 436  HOH  O  ', -0.448, (23.032, 15.043, 18.382)), (' E  12  SER  HA ', ' E 105  GLU  O  ', -0.448, (-20.796, 52.963, 19.108)), (' A 378  LYS  O  ', ' A 432  CYS  HA ', -0.447, (-9.977, -18.163, 54.662)), (' B 486  PHE  CE2', ' B 487  ASN  ND2', -0.446, (-6.738, 97.036, -0.751)), (' D  99  MET  HE1', ' E  49  TYR  CZ ', -0.446, (3.683, 57.705, 6.007)), (' D  55 BGLY  CA ', ' D 106  TYR  CD1', -0.445, (21.717, 63.44, 15.784)), (' D  12  VAL  O  ', ' D 125  VAL  HA ', -0.438, (6.637, 50.252, 41.717)), (' L 150  VAL  CG1', ' L 189  HIS  CG ', -0.434, (26.896, 29.136, 6.739)), (' E  24  ARG  HD3', ' E  70  GLU  OE1', -0.434, (-11.323, 73.044, 16.09)), (' D 215  LYS  HB3', ' D 216  PRO  HD3', -0.427, (4.599, 37.749, 34.384)), (' A 338  PHE  CE1', ' A 358  ILE HD12', -0.426, (-17.225, -29.044, 57.348)), (' A 403  ARG  HD2', ' A 505  TYR  HA ', -0.426, (-25.074, -5.551, 45.061)), (' L 159  SER  HA ', ' L 178  THR  O  ', -0.424, (19.055, 21.671, 14.936)), (' H  55 BGLY  O  ', ' H  56 BASN  CB ', -0.422, (-7.602, -16.954, 41.108)), (' B 378  LYS  O  ', ' B 432  CYS  HA ', -0.421, (21.951, 67.529, 5.351)), (' A 482  GLY  O  ', ' A 483  VAL HG22', -0.418, (-45.564, 0.95, 65.908)), (' E 186  TYR  CE2', ' E 211  ARG  HD2', -0.418, (-21.229, 27.261, 51.845)), (' A 468  ILE  HA ', ' A 468  ILE HD13', -0.415, (-32.884, -13.429, 62.773)), (' A 405  ASP  HB2', ' A 504  GLY  O  ', -0.414, (-22.043, -4.862, 45.475)), (' L 161  GLU  HA ', ' L 176  SER  O  ', -0.412, (17.766, 21.591, 21.58)), (' A 365  TYR  O  ', ' A 368  LEU  HB3', -0.41, (-9.879, -27.693, 50.333)), (' B 338  PHE  HE2', ' B 363  ALA  HB1', -0.409, (34.845, 70.211, 4.461)), (' A 366  SER  OG ', ' A 385  THR  O  ', -0.408, (-3.3, -28.162, 50.524)), (' L   6  GLN  HA ', ' L  22  THR  O  ', -0.407, (-6.484, 15.175, 42.003)), (' E 120  PRO  HD3', ' E 132  VAL HG22', -0.406, (-20.239, 30.819, 46.681)), (' E 159  SER  HA ', ' E 178  THR  O  ', -0.402, (-19.138, 40.557, 45.231))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
