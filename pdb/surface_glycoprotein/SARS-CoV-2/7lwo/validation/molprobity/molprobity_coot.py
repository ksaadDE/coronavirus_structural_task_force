# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 235 ', 'ILE', 0.00512602, (150.633, 198.862, 124.663)), ('A', ' 330 ', 'PRO', 0.004523578760144726, (190.191, 183.019, 126.6)), ('A', ' 331 ', 'ASN', 0.0164054215631108, (191.55700000000002, 184.428, 123.28600000000002)), ('A', ' 332 ', 'ILE', 0.06671384182213488, (191.91400000000002, 182.406, 120.00100000000002)), ('A', ' 600 ', 'PRO', 0.03463038938125515, (155.657, 194.297, 170.937)), ('B', ' 113 ', 'LYS', 0.046858989872381754, (199.383, 147.775, 109.682)), ('B', ' 123 ', 'ALA', 0.04115755931956456, (219.302, 167.13900000000012, 125.17400000000002)), ('B', ' 137 ', 'ASN', 0.03132404492888525, (214.84, 149.01900000000012, 118.885)), ('B', ' 709 ', 'ASN', 0.00186520627540854, (170.7880000000001, 133.92500000000013, 211.689)), ('B', ' 744 ', 'GLY', 0.09526814563207135, (170.053, 179.097, 145.363)), ('C', '  97 ', 'LYS', 0.020321807612823286, (123.84300000000003, 106.757, 143.038)), ('C', ' 198 ', 'ASP', 0.04820475936928685, (142.986, 133.93, 128.716)), ('C', ' 709 ', 'ASN', 0.0026170607896219117, (135.737, 166.443, 213.885)), ('C', ' 710 ', 'ASN', 0.004152135183130165, (136.634, 163.929, 216.691))]
data['omega'] = []
data['rota'] = [('A', ' 233 ', 'ILE', 0.0005434882237639496, (148.435, 193.8800000000001, 121.61100000000002)), ('A', ' 332 ', 'ILE', 0.07782167447476045, (191.91400000000002, 182.406, 120.00100000000002)), ('A', ' 347 ', 'PHE', 0.16963409478552235, (182.902, 162.15, 102.17000000000002)), ('A', ' 414 ', 'GLN', 0.2768375668306956, (168.938, 153.6340000000001, 119.091)), ('A', ' 565 ', 'PHE', 0.06566208241756688, (189.728, 175.732, 139.252)), ('A', ' 602 ', 'THR', 0.036542996319888534, (150.267, 195.211, 167.464)), ('A', ' 603 ', 'ASN', 0.04038788780322025, (147.615, 196.687, 169.817)), ('A', '1073 ', 'LYS', 0.15142261175893873, (166.018, 186.605, 212.668)), ('B', ' 820 ', 'ASP', 0.19438691849697454, (187.7660000000001, 175.48, 182.513)), ('B', ' 895 ', 'GLN', 0.11589225581830134, (172.933, 181.409, 206.68)), ('B', '1074 ', 'ASN', 0.0, (180.962, 141.121, 212.063)), ('C', ' 319 ', 'ARG', 0.009176189658161185, (130.387, 156.298, 152.376)), ('C', ' 602 ', 'THR', 0.19410164214327238, (135.02900000000005, 134.161, 169.232)), ('C', ' 604 ', 'THR', 0.026731741260894174, (132.094, 133.753, 173.573)), ('C', ' 616 ', 'ASN', 0.033404654077225, (123.46600000000011, 160.059, 161.888)), ('C', ' 709 ', 'ASN', 0.21881072831714787, (135.737, 166.443, 213.885)), ('C', ' 802 ', 'PHE', 0.1274836652199154, (161.262, 132.772, 198.199)), ('C', '1113 ', 'GLN', 0.0987396098561996, (149.686, 152.83, 224.979))]
data['cbeta'] = [('A', ' 571 ', 'ASP', ' ', 0.2581029993441407, (180.567, 169.3030000000001, 143.362)), ('A', ' 617 ', 'CYS', ' ', 0.34645270432806596, (175.909, 197.292, 161.452)), ('A', ' 762 ', 'GLN', ' ', 0.25339394458482595, (151.881, 151.135, 157.57)), ('C', ' 198 ', 'ASP', ' ', 0.34290083896716433, (144.194, 134.78500000000005, 129.158)), ('C', ' 487 ', 'ASN', ' ', 0.28985752304152435, (171.61700000000005, 196.9870000000001, 106.37700000000001))]
data['probe'] = [(' C 804  GLN HE21', ' C1303  NAG  H5 ', -0.686, (157.475, 127.064, 195.828)), (' B 709  ASN  O  ', ' C 897  PRO  HG3', -0.653, (171.853, 136.914, 211.353)), (' C 599  THR HG22', ' C 601  GLY  H  ', -0.63, (133.88, 138.342, 170.304)), (' A 231  ILE HD12', ' A 233  ILE HG13', -0.576, (145.539, 195.196, 121.722)), (' A 897  PRO  HG3', ' C 709  ASN  O  ', -0.576, (137.462, 164.082, 213.353)), (' A  41  LYS  HB2', ' C 519  HIS  HB2', -0.535, (135.622, 183.607, 137.431)), (' A1032  CYS  CB ', ' A1043  CYS  HG ', -0.533, (152.945, 166.286, 193.993)), (' B  81  ASN  N  ', ' B 265  TYR  HH ', -0.532, (213.372, 146.255, 128.788)), (' C 805  ILE HG13', ' C 878  LEU HD21', -0.502, (164.326, 135.64, 193.919)), (' C1032  CYS  HG ', ' C1043  CYS  HG ', -0.494, (159.762, 150.871, 193.964)), (' A1082  CYS  CB ', ' A1126  CYS  HG ', -0.487, (182.042, 171.64, 227.137)), (' C1032  CYS  SG ', ' C1043  CYS  SG ', -0.468, (159.721, 151.436, 193.68)), (' B1082  CYS  CB ', ' B1126  CYS  HG ', -0.467, (163.58, 138.068, 227.68)), (' B 577  ARG HH11', ' B 582  LEU  HB3', -0.465, (156.191, 115.268, 142.589)), (' C 710  ASN  HB2', ' C1076  THR HG23', -0.449, (136.28, 162.222, 219.362)), (' A 327  VAL  H  ', ' A 531  THR HG22', -0.448, (182.57, 189.963, 130.777)), (' A1032  CYS  HG ', ' A1043  CYS  HB3', -0.445, (153.221, 168.309, 194.597)), (' A1032  CYS  HG ', ' A1043  CYS  CB ', -0.441, (153.688, 168.512, 194.462)), (' C 709  ASN  O  ', ' C 711  SER  N  ', -0.429, (136.898, 163.429, 214.286)), (' A1032  CYS  SG ', ' A1043  CYS  SG ', -0.429, (153.062, 167.477, 194.509)), (' A1076  THR  HB ', ' A1097  SER  HB3', -0.419, (174.334, 183.242, 220.169)), (' A1032  CYS  HB2', ' A1043  CYS  HG ', -0.415, (153.091, 166.074, 193.983)), (' A  34  ARG  HA ', ' A  34  ARG  HD3', -0.412, (141.633, 202.283, 148.188)), (' C 886  TRP  H  ', ' C 886  TRP  HE3', -0.409, (169.215, 147.399, 203.079)), (' B1076  THR  HB ', ' B1097  SER  HB3', -0.409, (177.041, 139.147, 219.755)), (' A1028  LYS  O  ', ' A1032  CYS  HB3', -0.409, (151.196, 164.567, 192.591)), (' C 804  GLN  NE2', ' C1303  NAG  H5 ', -0.405, (157.299, 127.323, 195.76)), (' B 612  TYR  HB2', ' B 649  CYS  HB3', -0.403, (182.911, 135.111, 159.495)), (' A1075  PHE  HB3', ' A1096  VAL HG13', -0.401, (169.969, 181.67, 217.43)), (' A 331  ASN  HB3', ' A 332  ILE  H  ', -0.401, (193.619, 183.748, 121.985))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
