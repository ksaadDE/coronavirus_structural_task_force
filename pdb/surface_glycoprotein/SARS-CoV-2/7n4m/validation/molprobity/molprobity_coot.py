# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('L', ' 142 ', 'PRO', None, (-24.82099999999999, 15.511999999999995, 36.167))]
data['rota'] = [('H', '   3 ', 'GLN', 0.06281697761002589, (-19.334, -19.458000000000002, 51.35000000000003)), ('H', '  29 ', 'ILE', 0.006411784097667401, (-16.679999999999993, -29.443999999999996, 48.542)), ('H', '  33 ', 'ASN', 0.15227421376578998, (-23.31399999999999, -30.93799999999999, 44.14300000000003)), ('H', ' 104 ', 'ARG', 0.14962373774082224, (-25.100999999999985, -25.932999999999996, 33.913)), ('H', ' 108 ', 'ASP', 0.04492917011620992, (-25.55499999999999, -19.014, 42.60800000000001)), ('H', ' 109 ', 'TYR', 0.1700094472731219, (-22.849999999999998, -17.917999999999992, 45.067)), ('A', ' 350 ', 'VAL', 0.15925869925361746, (-39.841, -39.722, 14.945000000000007)), ('A', ' 440 ', 'ASN', 0.16111544990584079, (-21.694, -40.989999999999995, 14.043)), ('A', ' 458 ', 'LYS', 0.28863312517329176, (-54.94599999999998, -34.173, 7.160000000000004)), ('A', ' 468 ', 'ILE', 0.10372713788960466, (-49.031, -44.457, 12.085000000000003)), ('A', ' 478 ', 'THR', 0.008087669993983582, (-59.715, -36.016, -7.0370000000000035)), ('A', ' 484 ', 'GLU', 0.0027894317450338256, (-49.549, -42.248, -8.918)), ('L', '   8 ', 'HIS', 0.023363847656182626, (-24.328, -0.46299999999999963, 24.036)), ('L', '  13 ', 'GLU', 0.09830634647098035, (-35.482, 5.507, 30.611000000000004)), ('L', '  48 ', 'ILE', 0.1750323685648242, (-33.217, -13.684, 35.83500000000003)), ('L', '  78 ', 'LEU', 0.0948720560789625, (-37.742, 1.515, 36.885000000000026)), ('L', '  85 ', 'ASP', 0.07887256794681984, (-24.537999999999997, -2.833, 34.361)), ('L', ' 109 ', 'GLN', 0.1738974074270391, (-31.493999999999975, 10.818000000000001, 38.904)), ('L', ' 203 ', 'VAL', 0.20427330074330227, (-17.887, 26.926, 43.843))]
data['cbeta'] = []
data['probe'] = [(' A 369  TYR  HB2', ' H 103  LEU HD12', -0.729, (-29.633, -30.292, 33.964)), (' H  35  PHE  HB2', ' H 100  LEU  HB3', -0.692, (-20.662, -24.797, 38.168)), (' A 370  ASN  ND2', ' H 102  TRP  O  ', -0.681, (-24.87, -29.711, 36.663)), (' H  49  TRP  HE1', ' H  52  THR HG23', -0.667, (-16.369, -22.801, 34.022)), (' L 149  TRP  H  ', ' L 157  LYS  HD3', -0.666, (-7.168, 25.889, 38.644)), (' A 384  PRO  HB2', ' H 103  LEU HD13', -0.661, (-32.288, -28.067, 34.495)), (' H   2  VAL  N  ', ' H 109  TYR  HH ', -0.645, (-22.427, -16.194, 51.757)), (' L 149  TRP  HB2', ' L 157  LYS  HG2', -0.644, (-4.808, 25.019, 39.894)), (' H  24  VAL  O  ', ' H  78  ASN  ND2', -0.639, (-15.136, -24.304, 51.732)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.625, (-37.282, -30.154, 30.005)), (' A 339  GLY  HA2', ' B   1  NAG  H83', -0.584, (-28.841, -44.595, 29.84)), (' L 116  VAL  O  ', ' L 205  LYS  NZ ', -0.57, (-16.539, 22.901, 49.586)), (' L  25  ARG  HB2', ' L  28  ILE HD13', -0.567, (-28.267, -16.447, 21.371)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.536, (-31.378, -40.53, 17.629)), (' H  29  ILE HG22', ' H  75  THR HG22', -0.524, (-13.31, -31.213, 48.416)), (' A 417  LYS  O  ', ' A 422  ASN  ND2', -0.523, (-44.083, -33.833, 10.846)), (' A 440  ASN  N  ', ' A 440  ASN  OD1', -0.509, (-22.485, -39.873, 15.132)), (' A 412  PRO  HG3', ' A 429  PHE  HB3', -0.506, (-44.183, -28.156, 26.558)), (' L  33  VAL  N  ', ' L  51  ASP  OD1', -0.504, (-31.438, -18.952, 28.551)), (' H 106  TYR  HB3', ' L  34  GLN  HG2', -0.503, (-28.647, -18.993, 35.577)), (' H  53  ILE HD13', ' H  59  THR HG22', -0.503, (-11.538, -29.987, 37.405)), (' A 350  VAL  HA ', ' A 400  PHE  HB2', -0.501, (-38.592, -40.065, 16.485)), (' H   8  GLY  N  ', ' H   9  PRO  HD3', -0.49, (-4.226, -14.412, 47.144)), (' A 454  ARG  NH2', ' A 469  SER  O  ', -0.486, (-49.694, -41.719, 7.44)), (' L  25  ARG  NH1', ' L  27B SER  O  ', -0.486, (-27.993, -21.5, 20.919)), (' H  17  THR HG22', ' H  85  SER  HA ', -0.476, (2.095, -19.058, 34.14)), (' H  32  SER  HB3', ' H  55  TYR  HB3', -0.474, (-17.548, -33.456, 44.041)), (' L  12  SER  HB2', ' L 107  LEU HD21', -0.473, (-31.783, 8.079, 29.596)), (' A 418  ILE  HA ', ' A 422  ASN  HB2', -0.469, (-43.012, -33.926, 13.174)), (' A 379  CYS  N  ', ' L  32  TYR  OH ', -0.468, (-35.502, -27.013, 31.033)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.466, (-29.103, -43.817, 9.797)), (' L  34  GLN  HG3', ' L  49  TYR  HA ', -0.466, (-30.468, -17.556, 34.152)), (' L  61  ARG  HB3', ' L  76  SER  O  ', -0.457, (-39.985, -3.129, 37.452)), (' L 148  ALA  HB3', ' L 195  GLN  HB2', -0.453, (-11.011, 26.891, 39.187)), (' A 380  TYR  N  ', ' A 431  GLY  O  ', -0.453, (-39.436, -28.824, 31.042)), (' H  39  ILE  O  ', ' H  96  TYR  N  ', -0.445, (-12.898, -13.36, 38.708)), (' A 417  LYS  HB2', ' A 417  LYS  HE2', -0.443, (-41.186, -30.685, 9.394)), (' H  33  ASN  HB2', ' H 102  TRP  CZ2', -0.443, (-26.037, -31.141, 44.756)), (' A 502  GLY  O  ', ' A 506  GLN  HG3', -0.442, (-25.678, -32.21, 8.916)), (' H  12  VAL HG21', ' H  18  LEU HD12', -0.436, (-0.938, -12.904, 39.064)), (' H  32  SER  O  ', ' H  54  TYR  OH ', -0.431, (-22.417, -33.267, 42.397)), (' H 106  TYR  CB ', ' L  34  GLN  HG2', -0.419, (-28.272, -18.406, 35.388)), (' A 403  ARG  NH1', ' A 405  ASP  OD2', -0.417, (-33.606, -28.904, 8.14)), (' L 109  GLN  HA ', ' L 110  PRO  HD3', -0.416, (-32.448, 10.497, 40.293)), (' A 396  TYR  HB2', ' A 514  SER  HB2', -0.413, (-44.108, -38.66, 29.98)), (' A 369  TYR  HE1', ' H 102  TRP  HB3', -0.408, (-27.923, -30.952, 39.053)), (' H  88  THR  O  ', ' H 118  VAL HG21', -0.408, (-0.64, -8.762, 32.326)), (' L  25  ARG  NH2', ' L  92  ASP  OD2', -0.406, (-24.194, -22.924, 20.62)), (' H  24  VAL  HB ', ' H  78  ASN  ND2', -0.404, (-15.065, -25.024, 50.762)), (' H  18  LEU HD11', ' H 116  VAL HG11', -0.401, (-4.096, -12.42, 39.768)), (' H  69  VAL  HA ', ' H  83  LYS  O  ', -0.401, (-4.17, -21.486, 34.338))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
