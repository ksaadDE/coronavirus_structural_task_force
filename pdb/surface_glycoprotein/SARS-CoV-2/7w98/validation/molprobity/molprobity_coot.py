# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('D', ' 146 ', 'PRO', None, (197.358, 127.92699999999999, 297.703))]
data['rota'] = [('C', ' 166 ', 'CYS', 0.1717515601956625, (158.73200000000006, 181.127, 237.896))]
data['cbeta'] = []
data['probe'] = [(' A 883  THR  HG1', ' C 707  TYR  HH ', -0.952, (197.828, 168.131, 148.528)), (' B 965  GLN  OE1', ' B1003  SER  OG ', -0.701, (204.091, 204.471, 200.298)), (' A 755  GLN  O  ', ' C 968  SER  OG ', -0.697, (186.932, 190.22, 206.941)), (' A 725  GLU  OE1', ' A1028  LYS  NZ ', -0.684, (206.924, 187.111, 162.399)), (' A 408  ARG  O  ', ' A 414  GLN  NE2', -0.677, (198.03, 204.233, 235.531)), (' A 968  SER  OG ', ' B 755  GLN  O  ', -0.674, (209.94, 186.078, 206.275)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.673, (220.481, 221.405, 164.524)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.669, (164.271, 199.883, 164.883)), (' C 326  ILE HD12', ' C 539  VAL HG21', -0.658, (201.733, 157.768, 209.216)), (' A 317  ASN  ND2', ' B 737  ASP  OD2', -0.644, (221.295, 198.014, 197.337)), (' C 280  ASN  OD1', ' C 284  THR  N  ', -0.642, (157.703, 187.201, 198.512)), (' A 381  GLY  O  ', ' B 983  ARG  NE ', -0.637, (210.156, 209.317, 222.874)), (' A 745  ASP  OD2', ' C 319  ARG  NH1', -0.633, (193.434, 170.695, 204.611)), (' C 212  LEU HD11', ' C 215  ASP  HA ', -0.631, (148.81, 163.113, 204.909)), (' C 324  GLU  OE2', ' C 537  LYS  NZ ', -0.612, (194.675, 152.551, 209.064)), (' C 731  MET  N  ', ' C 774  GLN  OE1', -0.61, (185.624, 201.03, 178.455)), (' D 269  ASP  OD1', ' D 272  GLY  N  ', -0.599, (190.525, 140.512, 304.609)), (' B 487  ASN  ND2', ' C 369  TYR  OH ', -0.587, (196.91, 157.816, 241.827)), (' B 725  GLU  OE1', ' B1028  LYS  NZ ', -0.586, (201.375, 206.176, 161.997)), (' B 317  ASN  ND2', ' C 737  ASP  OD2', -0.576, (184.727, 212.671, 198.06)), (' A 457  ARG  NH1', ' A 467  ASP  OD2', -0.57, (187.692, 221.536, 235.948)), (' A 334  ASN  O  ', ' A 362  VAL  N  ', -0.565, (223.997, 222.816, 231.786)), (' A 383  SER  N  ', ' B 983  ARG  O  ', -0.55, (213.724, 205.803, 224.576)), (' C 502  GLY  N  ', ' D 353  LYS  O  ', -0.547, (207.261, 150.821, 267.36)), (' B 780  GLU  O  ', ' B 784  GLN  NE2', -0.546, (212.423, 197.119, 164.215)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.543, (158.167, 171.977, 199.211)), (' B 741  TYR  CE1', ' B 966  LEU HD21', -0.543, (211.142, 205.822, 200.581)), (' C 439  ASN  O  ', ' C 443  SER  OG ', -0.541, (213.998, 145.467, 261.091)), (' C 301  CYS  O  ', ' C 304  LYS  NZ ', -0.539, (176.771, 181.571, 196.01)), (' B 383  SER  OG ', ' C 985  ASP  OD1', -0.533, (185.791, 203.255, 226.207)), (' A  91  TYR  OH ', ' A 191  GLU  OE1', -0.532, (240.4, 170.153, 207.019)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.531, (238.825, 172.583, 197.851)), (' C 125  ASN  ND2', ' C 172  SER  O  ', -0.53, (145.741, 186.019, 224.351)), (' A 895  GLN  NE2', ' C 706  ALA  O  ', -0.523, (194.946, 167.059, 144.04)), (' A 105  ILE  CD1', ' A 241  LEU HD21', -0.523, (244.428, 169.215, 227.951)), (' B 109  THR  OG1', ' B 111  ASP  OD1', -0.523, (191.636, 239.539, 235.622)), (' D 435  GLU  OE2', ' D 541  LYS  NZ ', -0.509, (167.139, 147.049, 284.6)), (' C 357  ARG  NH2', ' C 394  ASN  OD1', -0.503, (223.731, 168.077, 236.084)), (' B 326  ILE HD12', ' B 539  VAL HG21', -0.501, (165.64, 211.971, 210.281)), (' C 500  THR  OG1', ' D 355  ASP  OD2', -0.5, (207.693, 144.978, 270.421)), (' B 404  GLY  O  ', ' B 407  VAL HG12', -0.496, (191.247, 189.593, 243.852)), (' A  14  GLN  N  ', ' A 255  SER  HG ', -0.486, (254.16, 168.702, 237.116)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.483, (172.307, 168.705, 195.932)), (' A  20  THR  O  ', ' A  79  PHE  N  ', -0.481, (258.586, 171.452, 222.895)), (' C 887  THR HG21', ' C 894  LEU HD12', -0.476, (187.161, 209.066, 144.704)), (' C1089  PHE  O  ', ' C1121  PHE  N  ', -0.472, (201.98, 184.088, 127.817)), (' C 478  LYS  NZ ', ' C 488  CYS  SG ', -0.471, (230.45, 172.665, 278.501)), (' B  96  GLU  OE1', ' B 100  ILE  N  ', -0.47, (203.13, 255.544, 216.378)), (' A 357  ARG  NH2', ' A 394  ASN  OD1', -0.469, (212.094, 226.337, 225.88)), (' A 569  ILE HG22', ' B  47  VAL HG11', -0.469, (211.577, 221.689, 195.912)), (' B  34  ARG  O  ', ' B  56  LEU HD23', -0.468, (195.803, 238.907, 205.236)), (' B  69  HIS  N  ', ' B 260  ALA  O  ', -0.465, (195.763, 263.363, 219.454)), (' D 522  GLN  NE2', ' D 526  GLN  OE1', -0.461, (181.573, 152.185, 287.197)), (' A 731  MET  N  ', ' A 774  GLN  OE1', -0.461, (199.891, 180.102, 178.153)), (' B1082  CYS  N  ', ' B1133  VAL  O  ', -0.46, (177.574, 200.562, 124.129)), (' A1104  VAL  O  ', ' A1113  GLN  N  ', -0.46, (213.859, 193.499, 128.045)), (' D 235  PRO  O  ', ' D 239  HIS  ND1', -0.456, (172.795, 153.276, 304.798)), (' A 178  ASP  N  ', ' A 178  ASP  OD2', -0.452, (247.436, 152.942, 217.782)), (' D 264  ALA  N  ', ' D 488  VAL  O  ', -0.45, (186.189, 139.662, 313.609)), (' D 595  LEU  O  ', ' D 599  ASN  ND2', -0.45, (168.587, 148.593, 305.64)), (' D 150  GLU  OE1', ' D 154  ASN  ND2', -0.45, (187.201, 127.037, 296.836)), (' D 268  GLY  O  ', ' D 277  ASN  ND2', -0.45, (186.806, 136.084, 300.706)), (' C 393  THR  O  ', ' C 523  THR  OG1', -0.447, (219.65, 167.289, 233.153)), (' A  34  ARG  NH2', ' A 217  PRO  O  ', -0.447, (243.841, 170.227, 201.306)), (' B 582  LEU  H  ', ' B 582  LEU HD23', -0.445, (151.427, 202.883, 212.83)), (' B 701  ALA  O  ', ' C 787  GLN  NE2', -0.444, (180.147, 217.608, 157.044)), (' C 105  ILE  CD1', ' C 241  LEU HD21', -0.442, (153.283, 168.135, 228.46)), (' A1054  GLN  N  ', ' A1061  VAL  O  ', -0.441, (205.884, 176.064, 162.726)), (' D 457  GLU  OE2', ' D 513  ILE  N  ', -0.439, (196.982, 152.962, 300.484)), (' A 689  SER  O  ', ' A 689  SER  OG ', -0.438, (247.035, 188.388, 175.759)), (' B 773  GLU  OE1', ' B1019  ARG  NH1', -0.437, (207.723, 194.85, 179.055)), (' D 107  VAL HG21', ' D 193  ALA  HB3', -0.436, (216.546, 160.735, 302.957)), (' B 178  ASP  N  ', ' B 178  ASP  OD2', -0.435, (213.664, 256.686, 216.844)), (' B 584  ILE  C  ', ' B 585  LEU HD12', -0.435, (157.981, 204.65, 207.039)), (' B 993  ILE HG22', ' B 997  ILE HD12', -0.428, (210.831, 197.486, 210.84)), (' A 125  ASN  ND2', ' A 172  SER  O  ', -0.427, (233.736, 153.666, 223.7)), (' D 156  LEU  H  ', ' D 156  LEU HD23', -0.426, (182.096, 126.016, 304.664)), (' C 553  THR  O  ', ' C 586  ASP  N  ', -0.425, (208.683, 156.595, 202.017)), (' C 725  GLU  OE2', ' C1028  LYS  NZ ', -0.423, (188.123, 191.039, 163.755)), (' B 392  PHE  N  ', ' B 524  VAL  O  ', -0.423, (169.009, 199.193, 225.159)), (' A 973  ILE  N  ', ' A 992  GLN  OE1', -0.422, (205.895, 185.165, 216.54)), (' C 780  GLU  O  ', ' C 784  GLN  NE2', -0.416, (190.242, 205.612, 164.572)), (' A 300  LYS  O  ', ' A 304  LYS  N  ', -0.415, (223.847, 181.719, 192.108)), (' B 985  ASP  O  ', ' B 989  ALA  N  ', -0.415, (211.291, 199.607, 221.229)), (' A 479  PRO  O  ', ' A 481  ASN  ND2', -0.414, (170.477, 225.536, 243.998)), (' D 262  LEU HD23', ' D 267  LEU HD23', -0.413, (183.072, 140.908, 308.24)), (' B  86  PHE  CE1', ' B  90  VAL HG22', -0.412, (196.07, 238.721, 219.267)), (' B 699  LEU HD22', ' C 873  TYR  CE1', -0.408, (180.683, 212.35, 166.728)), (' C 568  ASP  OD1', ' C 572  THR  N  ', -0.406, (210.889, 170.686, 200.817)), (' C 605  SER  OG ', ' C 606  ASN  N  ', -0.404, (168.494, 166.972, 183.564)), (' C 907  ASN  ND2', ' C 913  GLN  OE1', -0.403, (187.409, 195.927, 136.769)), (' B  86  PHE  N  ', ' B 236  THR  O  ', -0.402, (190.61, 237.695, 223.291)), (' B 975  SER  O  ', ' B1000  ARG  NH2', -0.4, (209.846, 207.25, 208.428)), (' C 993  ILE HG22', ' C 997  ILE HD12', -0.4, (191.061, 203.726, 211.34))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
