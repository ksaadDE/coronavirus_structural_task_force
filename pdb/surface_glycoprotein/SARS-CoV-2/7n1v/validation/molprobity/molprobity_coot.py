# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 147 ', 'LYS', 0.04702739929981672, (175.26799999999997, 272.19599999999986, 168.24400000000003)), ('A', ' 159 ', 'VAL', 0.030209044075758612, (184.99800000000008, 253.63, 161.595)), ('A', ' 184 ', 'GLY', 0.035482143171713186, (178.46800000000005, 264.156, 189.174)), ('A', ' 316 ', 'SER', 0.02530966908366385, (203.234, 223.593, 196.19)), ('A', ' 464 ', 'PHE', 0.046183220931323335, (225.355, 198.167, 142.24700000000004)), ('B', '  32 ', 'PHE', 0.03646759606423413, (239.785, 178.221, 192.153)), ('B', ' 164 ', 'ASN', 0.010617546205697178, (240.432, 188.37599999999998, 150.79800000000003)), ('B', ' 198 ', 'ASP', 0.04843474867180925, (225.043, 192.117, 170.316)), ('C', '  99 ', 'ASN', 0.028667375574987348, (156.299, 153.717, 176.896)), ('C', ' 631 ', 'PRO', 0.04414713114196861, (166.234, 190.37199999999993, 193.774)), ('C', ' 744 ', 'GLY', 0.016421356058592927, (203.503, 177.845, 188.368))]
data['omega'] = []
data['rota'] = [('A', '  21 ', 'ARG', 0.06837650560659884, (194.0770000000001, 266.08899999999977, 172.19300000000004)), ('A', '  40 ', 'ASP', 0.09436188890461353, (181.31899999999996, 226.763, 182.20600000000002)), ('A', '  53 ', 'ASP', 0.20734441158955602, (190.839, 228.99799999999996, 183.202)), ('A', ' 159 ', 'VAL', 0.1547532619286576, (184.99800000000008, 253.63, 161.595)), ('A', ' 281 ', 'GLU', 0.04295466702823483, (172.414, 228.655, 197.839)), ('A', ' 392 ', 'PHE', 0.1014574489358591, (225.521, 203.327, 160.02500000000003)), ('A', ' 422 ', 'ASN', 0.2539204202692651, (227.428, 200.65699999999995, 133.726)), ('A', ' 427 ', 'ASP', 0.23847588597081257, (214.645, 201.757, 143.66)), ('A', ' 859 ', 'THR', 0.1722172941602135, (176.528, 204.01399999999995, 202.78000000000006)), ('A', '1072 ', 'GLU', 0.2570137959438142, (204.62100000000012, 222.624, 251.031)), ('A', '1082 ', 'CYS', 0.13770308895893277, (217.7179999999999, 206.639, 269.008)), ('B', ' 212 ', 'LEU', 0.1315168269382767, (255.182, 178.516, 190.22)), ('B', ' 326 ', 'ILE', 0.21619974596250044, (204.648, 161.695, 178.72)), ('B', ' 336 ', 'CYS', 0.04842321795877069, (190.566, 164.032, 158.67700000000002)), ('B', ' 488 ', 'CYS', 0.28002821054587546, (159.34, 195.609, 148.088)), ('B', ' 570 ', 'ASP', 0.05044613764834836, (190.986, 175.23199999999994, 193.54300000000003)), ('B', ' 602 ', 'THR', 0.2606991787599183, (230.988, 182.42099999999996, 209.50900000000001)), ('B', ' 779 ', 'GLN', 0.26596696001701986, (206.584, 213.82899999999998, 223.162)), ('B', ' 820 ', 'ASP', 0.030131127297355037, (226.767, 208.127, 224.699)), ('B', ' 994 ', 'ASP', 0.1189058291551843, (201.548, 203.997, 181.177)), ('C', ' 122 ', 'ASN', 0.1845768505235846, (160.365, 154.82199999999997, 166.31000000000003)), ('C', ' 136 ', 'CYS', 0.2232251977610004, (151.017, 167.403, 159.78900000000004)), ('C', ' 317 ', 'ASN', 0.13113162014477478, (171.654, 195.18099999999998, 196.587)), ('C', ' 406 ', 'GLU', 0.054355012908140946, (199.66899999999995, 209.122, 152.56800000000004)), ('C', ' 619 ', 'GLU', 0.08952858265754433, (159.463, 202.181, 198.055)), ('C', ' 738 ', 'CYS', 0.23211989619284348, (206.08, 183.89399999999995, 194.512)), ('C', ' 760 ', 'CYS', 0.2479610465928808, (207.796, 189.125, 195.04100000000005))]
data['cbeta'] = [('A', ' 198 ', 'ASP', ' ', 0.3382145121050319, (188.302, 225.93299999999996, 170.951)), ('A', ' 422 ', 'ASN', ' ', 0.2680483760808735, (228.51, 201.589, 133.149)), ('A', ' 745 ', 'ASP', ' ', 0.3034091429689219, (172.991, 201.463, 187.45200000000006)), ('B', ' 198 ', 'ASP', ' ', 0.30558842320983653, (224.044, 193.131, 170.902)), ('B', ' 745 ', 'ASP', ' ', 0.35496306557711177, (213.59499999999994, 216.261, 185.041)), ('C', ' 487 ', 'ASN', ' ', 0.2912996504730891, (221.016, 223.98999999999998, 150.346)), ('C', ' 745 ', 'ASP', ' ', 0.3164225272940497, (205.546, 174.31599999999995, 186.312)), ('C', ' 773 ', 'GLU', ' ', 0.27056493201847825, (206.25, 188.245, 214.73200000000003)), ('C', '1041 ', 'ASP', ' ', 0.27281081774223515, (187.24300000000005, 194.05799999999996, 235.28)), ('C', '1145 ', 'LEU', ' ', 0.26858848385053674, (195.538, 199.4660000000001, 285.391))]
data['probe'] = [(' C 709  ASN HD21', ' C1407  NAG  C1 ', -1.576, (171.041, 212.772, 255.939)), (' A 234  ASN  ND2', ' A1405  NAG  C1 ', -1.546, (197.502, 235.234, 163.095)), (' A1134  ASN HD21', ' K   1  NAG  C1 ', -1.54, (223.374, 210.251, 270.065)), (' C 331  ASN  ND2', ' C1403  NAG  C1 ', -1.507, (159.452, 221.984, 167.572)), (' C 709  ASN  ND2', ' C1407  NAG  C1 ', -1.479, (171.885, 212.651, 254.872)), (' A1134  ASN  ND2', ' K   1  NAG  C1 ', -1.403, (222.554, 211.084, 270.314)), (' A 124  THR  O  ', ' A 175  PHE  CE1', -1.369, (169.682, 250.113, 169.495)), (' B 149  ASN HD21', ' B1402  NAG  C1 ', -1.349, (275.528, 183.061, 162.906)), (' A 124  THR  O  ', ' A 175  PHE  CD1', -1.323, (168.149, 249.669, 170.524)), (' C 149  ASN  ND2', ' C1402  NAG  C1 ', -1.319, (142.263, 136.292, 166.459)), (' A 122  ASN  ND2', ' A1402  NAG  C1 ', -1.245, (173.389, 251.201, 163.432)), (' B 149  ASN  ND2', ' B1402  NAG  C1 ', -1.095, (274.483, 182.962, 163.532)), (' C 644  GLN  HG2', ' a   1  NAG  H82', -1.088, (159.797, 204.084, 208.244)), (' C 905  ARG  NH1', ' C1050  MET  HB3', -1.084, (196.878, 184.144, 242.794)), (' A 122  ASN HD21', ' A1402  NAG  C1 ', -1.079, (172.729, 250.744, 163.594)), (' A 740  MET  HE1', ' C 319  ARG HH21', -1.069, (172.875, 200.334, 193.078)), (' C 149  ASN HD21', ' C1402  NAG  C1 ', -1.066, (141.875, 136.421, 166.269)), (' C 509  ARG HH21', ' C 511  VAL HG22', -1.028, (185.796, 215.847, 153.174)), (' A 206  LYS  HD2', ' A 222  ALA  O  ', -1.018, (178.293, 239.909, 186.723)), (' C  57  PRO  HB3', ' C 273  ARG  NH1', -1.017, (164.201, 179.646, 189.264)), (' A 740  MET  HE1', ' C 319  ARG  NH2', -1.016, (172.956, 199.588, 192.327)), (' A 740  MET  CE ', ' C 319  ARG HH21', -1.001, (173.568, 200.548, 192.863)), (' C 900  MET  O  ', ' C 904  TYR  HD1', -0.987, (200.057, 183.406, 251.949)), (' C 149  ASN HD22', ' C1402  NAG  C1 ', -0.982, (143.341, 136.624, 167.399)), (' C 644  GLN  HG2', ' a   1  NAG  C8 ', -0.952, (160.635, 205.162, 208.232)), (' C 421  TYR  CD1', ' C 457  ARG  HB3', -0.946, (206.817, 221.724, 157.633)), (' A1134  ASN HD21', ' K   1  NAG  C2 ', -0.944, (223.92, 210.862, 270.281)), (' B 328  ARG  HG2', ' B 543  PHE  CE1', -0.939, (199.597, 161.768, 178.857)), (' B 905  ARG  NH1', ' B1050  MET  HB3', -0.924, (212.794, 203.726, 242.131)), (' C 509  ARG HH21', ' C 511  VAL  CG2', -0.919, (185.772, 215.484, 152.744)), (' B 361  CYS  SG ', ' B 524  VAL HG23', -0.918, (189.866, 165.518, 163.505)), (' A 472  ILE  CG2', ' A 488  CYS  O  ', -0.908, (233.524, 193.81, 117.988)), (' A 153  MET  HG3', ' A1403  NAG  H62', -0.889, (168.542, 264.808, 164.937)), (' A 140  PHE  CZ ', ' A 158  ARG  HD2', -0.879, (185.199, 261.892, 163.3)), (' B  21  ARG  NH1', ' B  79  PHE  O  ', -0.871, (250.871, 171.572, 167.873)), (' C 403  ARG  HG2', ' C 504  GLY  O  ', -0.867, (199.586, 207.909, 146.049)), (' C 905  ARG HH12', ' C1050  MET  CB ', -0.86, (196.986, 183.219, 242.087)), (' C 900  MET  O  ', ' C 904  TYR  CD1', -0.857, (199.704, 183.642, 252.2)), (' C 905  ARG HH12', ' C1050  MET  HB3', -0.855, (197.062, 183.96, 242.786)), (' C 509  ARG  NH2', ' C 511  VAL  CG2', -0.848, (185.039, 215.282, 151.924)), (' B 341  VAL HG13', ' B 356  LYS  NZ ', -0.84, (185.679, 168.754, 155.159)), (' A 472  ILE HG21', ' A 488  CYS  O  ', -0.837, (234.256, 193.942, 118.436)), (' B 328  ARG  HB2', ' B 543  PHE  CD1', -0.829, (198.139, 162.599, 178.011)), (' B 328  ARG  CG ', ' B 543  PHE  CE1', -0.828, (198.596, 161.294, 179.326)), (' C 295  PRO  HG2', ' C 636  TYR  CE1', -0.827, (162.562, 187.178, 201.208)), (' A 234  ASN HD22', ' A1405  NAG  C1 ', -0.822, (196.726, 234.678, 163.564)), (' A 191  GLU  CD ', ' A 223  LEU  CD2', -0.816, (181.147, 242.447, 185.187)), (' B1091  ARG  NH1', ' B1118  HIS  O  ', -0.811, (199.863, 193.261, 266.138)), (' C 709  ASN HD21', ' C1407  NAG  C2 ', -0.804, (171.552, 213.227, 256.928)), (' A 475  ALA  HB3', ' A 489  TYR  HD2', -0.8, (228.265, 195.633, 116.706)), (' C 421  TYR  HD1', ' C 457  ARG  HB3', -0.792, (207.099, 221.619, 158.717)), (' B1094  VAL  HB ', ' C 904  TYR  OH ', -0.791, (204.639, 184.675, 255.864)), (' C  63  THR HG21', ' C  65  PHE  CZ ', -0.784, (151.31, 172.329, 179.421)), (' C 403  ARG  NH2', ' C 406  GLU  OE1', -0.783, (202.911, 209.402, 148.824)), (' B 773  GLU  OE2', ' B1019  ARG  NH1', -0.781, (199.604, 208.256, 216.069)), (' B 140  PHE  CZ ', ' B 158  ARG  HD2', -0.776, (255.586, 177.31, 159.45)), (' C 331  ASN  ND2', ' C1403  NAG  C2 ', -0.767, (158.775, 222.422, 169.336)), (' B 391  CYS  HA ', ' B 525  CYS  HB3', -0.758, (193.573, 167.989, 168.785)), (' C 509  ARG  NH2', ' C 511  VAL HG22', -0.754, (184.963, 216.233, 152.433)), (' A 122  ASN HD22', ' A1402  NAG  C1 ', -0.745, (174.201, 251.042, 164.341)), (' C 905  ARG  NH1', ' C1050  MET  CB ', -0.741, (196.333, 184.022, 242.614)), (' B 328  ARG  CG ', ' B 543  PHE  CD1', -0.738, (199.091, 161.307, 178.145)), (' A 140  PHE  CE1', ' A 158  ARG  HD2', -0.734, (185.853, 260.811, 163.046)), (' A 475  ALA  HB3', ' A 489  TYR  CD2', -0.733, (227.597, 195.974, 116.281)), (' B 328  ARG  NH2', ' B 580  GLN  HB2', -0.732, (196.727, 155.688, 175.772)), (' A1134  ASN  CG ', ' K   1  NAG  C1 ', -0.728, (222.165, 210.145, 270.273)), (' A 191  GLU  HG3', ' A 223  LEU HD22', -0.722, (181.608, 241.965, 183.872)), (' C  63  THR  CG2', ' C  65  PHE  CZ ', -0.709, (151.603, 171.892, 179.028)), (' B 341  VAL HG13', ' B 356  LYS  HZ3', -0.708, (186.143, 168.672, 154.922)), (' B  21  ARG  HD3', ' B  79  PHE  HB3', -0.707, (253.488, 171.389, 168.154)), (' C  57  PRO  HB3', ' C 273  ARG  CZ ', -0.699, (163.389, 180.572, 188.8)), (' B  16  VAL HG21', ' B 158  ARG  NH1', -0.698, (256.287, 175.64, 157.121)), (' A 191  GLU  CD ', ' A 223  LEU HD21', -0.698, (182.322, 242.032, 185.28)), (' C 421  TYR  HD1', ' C 457  ARG  CB ', -0.693, (206.76, 222.339, 158.388)), (' C 577  ARG  CZ ', ' C 584  ILE HD11', -0.693, (167.261, 225.501, 182.963)), (' A 472  ILE HG22', ' A 488  CYS  O  ', -0.693, (233.031, 194.006, 118.785)), (' B 905  ARG  NH1', ' B1050  MET  CB ', -0.688, (212.346, 203.523, 241.695)), (' C 644  GLN  CG ', ' a   1  NAG  H82', -0.687, (161.026, 204.477, 208.511)), (' B 341  VAL  CG1', ' B 356  LYS  NZ ', -0.672, (185.265, 169.51, 154.945)), (' C  63  THR  HB ', ' C 267  VAL HG12', -0.67, (153.232, 172.399, 180.009)), (' B 896  ILE  CD1', ' B 904  TYR  CE2', -0.662, (210.211, 209.475, 250.824)), (' A  16  VAL HG12', ' A 158  ARG  HD3', -0.66, (186.233, 260.805, 160.657)), (' C 102  ARG  HE ', ' C 243  ALA  HB2', -0.655, (154.697, 155.423, 169.817)), (' B 328  ARG  CB ', ' B 543  PHE  CD1', -0.649, (198.399, 161.823, 177.681)), (' A 740  MET  CE ', ' C 319  ARG  NH2', -0.642, (174.184, 199.37, 192.994)), (' A 140  PHE  CZ ', ' A 158  ARG  NH1', -0.641, (183.981, 262.372, 162.988)), (' B 905  ARG HH12', ' B1050  MET  CB ', -0.641, (212.077, 204.289, 241.662)), (' C 896  ILE HD11', ' C 904  TYR  CE1', -0.635, (202.454, 182.409, 252.359)), (' B 328  ARG  HG2', ' B 543  PHE  CD1', -0.634, (199.156, 161.746, 178.607)), (' A 124  THR  O  ', ' A 175  PHE  CG ', -0.631, (168.64, 249.085, 170.499)), (' C 608  VAL HG23', ' C 636  TYR  OH ', -0.63, (163.129, 185.458, 204.018)), (' A 983  ARG  CZ ', ' C 517  LEU HD13', -0.63, (181.524, 212.252, 173.64)), (' B 361  CYS  SG ', ' B 524  VAL  CG2', -0.629, (189.736, 165.775, 163.05)), (' A 487  ASN  HA ', ' A 489  TYR  CE2', -0.628, (228.481, 195.749, 114.406)), (' C 436  TRP  CZ3', ' C 509  ARG  HG3', -0.625, (186.183, 212.894, 150.062)), (' C1011  GLN  OE1', ' C1014  ARG  NH1', -0.624, (194.918, 187.212, 207.097)), (' A 984  LEU  O  ', ' C 386  LYS  HE3', -0.623, (178.456, 202.132, 171.375)), (' B1107  ARG HH11', ' C 904  TYR  HD2', -0.618, (201.621, 187.513, 251.949)), (' L   1  NAG  O4 ', ' L   2  NAG  O7 ', -0.617, (243.081, 168.27, 154.598)), (' B 341  VAL HG11', ' B 356  LYS  HE2', -0.617, (184.983, 169.937, 156.21)), (' L   1  NAG  H62', ' L   2  NAG  C7 ', -0.615, (243.479, 167.138, 155.727)), (' C 421  TYR  HD1', ' C 457  ARG  CG ', -0.614, (206.748, 222.513, 158.866)), (' A 206  LYS  CD ', ' A 222  ALA  O  ', -0.612, (178.679, 240.237, 187.232)), (' B 353  TRP  CZ3', ' B 355  ARG  NH2', -0.608, (177.232, 177.822, 160.678)), (' B 353  TRP  CH2', ' B 355  ARG  NH2', -0.606, (177.169, 178.079, 160.689)), (' A 971  GLY  HA3', ' A 995  ARG HH21', -0.605, (194.408, 205.956, 180.285)), (' B 896  ILE HD11', ' B 904  TYR  CE2', -0.602, (211.059, 209.532, 251.363)), (' A 475  ALA  CB ', ' A 489  TYR  HD2', -0.599, (227.384, 195.787, 117.358)), (' A1093  GLY  HA2', ' A1107  ARG  HG3', -0.597, (204.685, 208.26, 255.544)), (' C 295  PRO  HG2', ' C 636  TYR  HE1', -0.592, (162.48, 186.785, 201.424)), (' A 124  THR  C  ', ' A 175  PHE  CE1', -0.588, (170.198, 250.116, 169.418)), (' A 124  THR  O  ', ' A 175  PHE  CZ ', -0.588, (169.869, 249.003, 170.275)), (' B 896  ILE  CD1', ' B 904  TYR  HE2', -0.586, (209.77, 210.088, 251.105)), (' A 421  TYR  CD1', ' A 457  ARG  HB3', -0.585, (224.107, 197.698, 128.214)), (' A 191  GLU  OE2', ' A 206  LYS  HB3', -0.585, (179.943, 242.716, 185.831)), (' C 403  ARG  CG ', ' C 504  GLY  O  ', -0.583, (199.331, 208.448, 146.105)), (' C 436  TRP  CZ2', ' C 509  ARG  HG2', -0.581, (185.016, 213.338, 148.858)), (' A 567  ARG HH11', ' B  42  VAL HG21', -0.578, (227.132, 201.624, 186.535)), (' A 153  MET  HG3', ' A1403  NAG  C6 ', -0.578, (168.153, 264.668, 165.62)), (' A 567  ARG  NH1', ' B  42  VAL HG21', -0.577, (226.518, 201.727, 185.85)), (' B 353  TRP  HZ3', ' B 355  ARG  NE ', -0.575, (177.829, 176.659, 159.831)), (' A 475  ALA  CB ', ' A 489  TYR  CD2', -0.573, (227.073, 195.951, 116.89)), (' A 125  ASN  HA ', ' A 175  PHE  CZ ', -0.568, (170.619, 248.593, 169.396)), (' B 328  ARG HH21', ' B 580  GLN  HB2', -0.566, (196.262, 155.974, 176.289)), (' B 328  ARG  HG3', ' B 543  PHE  CE1', -0.566, (198.667, 160.344, 179.386)), (' B 341  VAL  CG1', ' B 356  LYS  HE2', -0.563, (184.638, 170.236, 155.473)), (' C 634  ARG  HG2', ' C 634  ARG  O  ', -0.557, (157.183, 189.978, 196.165)), (' A 125  ASN  HB3', ' A 174  PRO  HA ', -0.556, (167.919, 247.737, 167.252)), (' A 206  LYS  NZ ', ' A 221  SER  HB2', -0.556, (178.203, 240.313, 189.995)), (' B 341  VAL  CG1', ' B 356  LYS  CE ', -0.553, (184.97, 169.274, 155.489)), (' C 421  TYR  CD1', ' C 457  ARG  CB ', -0.548, (207.747, 222.323, 158.303)), (' B 328  ARG  NE ', ' B 578  ASP  OD1', -0.544, (197.508, 157.49, 177.965)), (' C 624  ILE HD12', ' C 634  ARG  NH1', -0.537, (154.562, 192.623, 192.942)), (' A 472  ILE HG22', ' A 489  TYR  O  ', -0.535, (232.572, 195.039, 119.573)), (' C  57  PRO  CB ', ' C 273  ARG  NH1', -0.532, (163.364, 178.95, 189.324)), (' A 644  GLN  HG2', ' F   1  NAG  H82', -0.532, (220.953, 226.976, 206.618)), (' C  63  THR  HB ', ' C 267  VAL  CG1', -0.529, (153.856, 172.441, 179.847)), (' C 295  PRO  CG ', ' C 636  TYR  HE1', -0.528, (162.98, 186.483, 200.999)), (' C 465  GLU  HA ', ' C 465  GLU  OE1', -0.527, (197.144, 226.359, 162.929)), (' A 991  VAL  O  ', ' A 995  ARG  HG3', -0.526, (190.746, 201.046, 178.968)), (' A 403  ARG  HE ', ' A 505  TYR  HA ', -0.525, (227.607, 217.614, 127.489)), (' C 295  PRO  CG ', ' C 636  TYR  CE1', -0.525, (163.093, 186.909, 201.354)), (' B 905  ARG  HD2', ' B1049  LEU  O  ', -0.525, (210.467, 202.539, 243.962)), (' C 915  VAL  CG2', ' C1106  GLN HE22', -0.525, (187.729, 188.172, 257.257)), (' A 191  GLU  OE2', ' A 223  LEU HD23', -0.523, (180.922, 241.339, 185.9)), (' C  62  VAL  O  ', ' C  62  VAL HG23', -0.523, (153.882, 171.229, 185.454)), (' B 328  ARG  HG2', ' B 543  PHE  HE1', -0.52, (200.192, 161.279, 179.276)), (' A 156  GLU  CD ', ' A 158  ARG HH12', -0.519, (182.018, 263.627, 162.92)), (' A 971  GLY  HA3', ' A 995  ARG  NH2', -0.515, (195.026, 205.621, 180.075)), (' C 102  ARG  NE ', ' C 243  ALA  HB2', -0.513, (154.615, 155.63, 170.564)), (' A 454  ARG  CZ ', ' A 457  ARG  HD2', -0.507, (227.902, 194.807, 130.014)), (' A  21  ARG  HG2', ' A  21  ARG HH11', -0.504, (194.218, 262.779, 169.854)), (' B 341  VAL HG13', ' B 356  LYS  HZ1', -0.502, (186.546, 169.515, 155.57)), (' C1050  MET  HE2', ' C1052  PHE  CE1', -0.498, (196.787, 179.203, 241.072)), (' A 191  GLU  CG ', ' A 223  LEU HD22', -0.498, (181.489, 242.583, 184.437)), (' C1014  ARG  HB2', ' C1014  ARG  NH1', -0.498, (194.843, 189.186, 208.83)), (' A 850  ILE HG13', ' C 646  ARG  HD3', -0.495, (165.975, 206.803, 210.271)), (' B 762  GLN  HA ', ' B 765  ARG  NH1', -0.495, (196.25, 211.765, 199.942)), (' B 353  TRP  CZ3', ' B 355  ARG  CZ ', -0.494, (177.716, 177.193, 160.332)), (' C 436  TRP  CH2', ' C 509  ARG  HG2', -0.494, (185.7, 213.29, 149.206)), (' C 436  TRP  CH2', ' C 509  ARG  CG ', -0.491, (185.629, 212.814, 149.779)), (' A1014  ARG  HB2', ' A1014  ARG  NH1', -0.488, (191.726, 204.819, 208.524)), (' A 125  ASN  HB2', ' A 172  SER  OG ', -0.487, (169.992, 245.716, 167.94)), (' A 191  GLU  CG ', ' A 223  LEU  CD2', -0.485, (181.807, 242.132, 184.742)), (' A  21  ARG  HD2', ' A  21  ARG  O  ', -0.485, (196.405, 265.112, 171.543)), (' B  16  VAL HG21', ' B 158  ARG  CZ ', -0.483, (256.063, 176.131, 156.887)), (' A 205  SER  OG ', ' A 226  LEU  HB2', -0.482, (177.718, 240.421, 178.253)), (' C 149  ASN  ND2', ' C1402  NAG  O5 ', -0.48, (142.818, 136.039, 166.957)), (' A 983  ARG  CZ ', ' C 517  LEU  CD1', -0.48, (182.137, 212.457, 173.742)), (' C  63  THR HG22', ' C  65  PHE  CZ ', -0.477, (150.795, 171.375, 179.77)), (' B 773  GLU  CD ', ' B1019  ARG HH11', -0.476, (200.619, 207.433, 215.633)), (' A1141  LEU HD13', ' C1141  LEU HD11', -0.475, (199.522, 199.369, 279.577)), (' C 384  PRO  HA ', ' C 387  LEU HD23', -0.474, (180.235, 206.392, 163.87)), (' A  99  ASN  OD1', ' A 190  ARG  NH2', -0.471, (174.991, 252.737, 178.791)), (' C 559  PHE  HB3', ' C 577  ARG HH21', -0.47, (169.155, 227.532, 184.285)), (' A 206  LYS  HZ3', ' A 221  SER  HB2', -0.468, (177.739, 240.863, 190.252)), (' A 646  ARG  HB2', ' A 668  ALA  HB1', -0.467, (216.831, 221.195, 213.07)), (' A 905  ARG  NH1', ' A1049  LEU  O  ', -0.467, (188.445, 206.157, 243.114)), (' A 191  GLU  OE2', ' A 223  LEU  CD2', -0.464, (180.902, 242.0, 185.891)), (' A 296  LEU HD21', ' A 300  LYS  HE3', -0.464, (193.461, 233.143, 203.295)), (' A 140  PHE  HZ ', ' A 158  ARG  NH1', -0.463, (184.435, 262.535, 163.342)), (' C 608  VAL  CG2', ' C 636  TYR  OH ', -0.462, (163.484, 185.202, 204.325)), (' A 451  TYR  O  ', ' A 495  TYR  N  ', -0.46, (236.561, 208.893, 127.335)), (' C 403  ARG  HD2', ' C 505  TYR  HA ', -0.457, (200.876, 208.685, 145.118)), (' A 534  VAL HG11', ' A 539  VAL HG11', -0.457, (224.885, 223.891, 183.789)), (' C 901  GLN  O  ', ' C 905  ARG  HG2', -0.453, (197.774, 183.508, 248.69)), (' A 646  ARG  HB2', ' A 668  ALA  CB ', -0.452, (216.516, 221.175, 212.63)), (' B 524  VAL  O  ', ' B 524  VAL HG13', -0.451, (189.786, 167.538, 166.583)), (' A1134  ASN  ND2', ' K   1  NAG  C2 ', -0.449, (223.866, 211.361, 270.454)), (' A 837  TYR  CZ ', ' A 959  LEU  CB ', -0.445, (183.488, 210.893, 202.381)), (' B 599  THR HG22', ' B 608  VAL HG12', -0.444, (225.803, 177.863, 206.829)), (' A 192  PHE  CD2', ' A 205  SER  HB3', -0.442, (179.985, 242.233, 178.441)), (' C 644  GLN  CG ', ' a   1  NAG  C8 ', -0.439, (160.915, 204.485, 209.199)), (' C  34  ARG HH21', ' C 219  GLY  N  ', -0.438, (161.002, 164.154, 194.435)), (' B 328  ARG  NH2', ' B 580  GLN  CB ', -0.435, (196.406, 155.442, 175.508)), (' A 191  GLU  HG2', ' A 206  LYS  O  ', -0.434, (179.843, 244.513, 184.252)), (' A1014  ARG  CZ ', ' A1014  ARG  HB2', -0.432, (192.13, 204.928, 208.914)), (' A 644  GLN  CG ', ' F   1  NAG  H82', -0.431, (220.753, 226.806, 206.611)), (' C  21  ARG  NH2', ' C  77  LYS  N  ', -0.429, (139.492, 159.784, 174.191)), (' B 384  PRO  HA ', ' B 387  LEU HD23', -0.429, (197.44, 177.868, 163.963)), (' A 485  GLY  O  ', ' A 488  CYS  HB2', -0.426, (233.082, 193.901, 113.939)), (' A  34  ARG  NH2', ' A 189  LEU  CD2', -0.423, (182.282, 246.945, 188.508)), (' C1014  ARG  CZ ', ' C1014  ARG  HB2', -0.421, (194.457, 188.851, 209.223)), (' C  66  HIS  NE2', ' C  78  ARG  NH1', -0.42, (143.51, 164.978, 182.561)), (' B 328  ARG  NH2', ' B 580  GLN  CG ', -0.418, (196.799, 155.965, 175.681)), (' B  83  VAL HG11', ' B 237  ARG  HD2', -0.417, (237.021, 174.261, 165.575)), (' C 625  HIS  HB2', ' C 634  ARG  NE ', -0.415, (156.654, 190.907, 191.655)), (' B  83  VAL  CG1', ' B 237  ARG  HD2', -0.415, (236.634, 174.36, 165.784)), (' A 457  ARG  HG2', ' A 459  SER  O  ', -0.414, (223.404, 195.543, 129.756)), (' C 915  VAL HG21', ' C1106  GLN HE22', -0.413, (187.731, 188.365, 257.076)), (' C  21  ARG HH21', ' C  77  LYS  HA ', -0.413, (138.217, 160.619, 174.509)), (' A 837  TYR  CZ ', ' A 959  LEU  HB2', -0.412, (183.74, 211.127, 202.736)), (' A  16  VAL  CG1', ' A 158  ARG  HD3', -0.411, (186.633, 261.54, 161.324)), (' A 837  TYR  CZ ', ' A 959  LEU  HB3', -0.411, (183.219, 210.776, 202.026)), (' A 191  GLU  OE1', ' A 223  LEU HD21', -0.41, (182.627, 242.486, 186.011)), (' B 357  ARG  NH1', ' B 359  SER  OG ', -0.409, (181.8, 163.45, 163.933)), (' C  66  HIS  CE1', ' C  78  ARG  NH1', -0.409, (143.883, 165.659, 182.591)), (' A 403  ARG  NH2', ' A 505  TYR  CD2', -0.409, (226.809, 217.515, 125.143)), (' A 970  PHE  O  ', ' A 995  ARG  NH2', -0.408, (194.272, 204.701, 181.094)), (' C  34  ARG  NH2', ' C 217  PRO  O  ', -0.407, (160.065, 163.673, 192.993)), (' C  22  THR HG22', ' C  24  LEU  CD2', -0.407, (138.039, 167.866, 178.767)), (' A1134  ASN  OD1', ' K   1  NAG  C1 ', -0.406, (222.046, 209.873, 270.471)), (' C 604  THR HG22', ' C 674  TYR  CE2', -0.405, (163.519, 178.509, 215.27)), (' B 356  LYS  HE3', ' B 358  ILE HG13', -0.405, (184.84, 168.505, 158.735)), (' C 436  TRP  CH2', ' C 509  ARG  HG3', -0.405, (185.764, 212.82, 150.125)), (' A 374  PHE  CG ', ' A 434  ILE HD11', -0.404, (229.948, 218.18, 147.147)), (' C 625  HIS  HB2', ' C 634  ARG  HE ', -0.401, (156.991, 190.601, 191.959))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
