# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 134 ', 'GLY', None, (97.371, 124.195, 144.548)), ('A', ' 139 ', 'THR', None, (101.25099999999998, 129.67, 140.737)), ('A', ' 154 ', 'PRO', None, (87.802, 101.18699999999997, 125.698)), ('A', ' 156 ', 'PRO', None, (89.07999999999996, 106.17999999999999, 122.298)), ('A', ' 196 ', 'PRO', None, (90.143, 131.659, 141.598)), ('B', '   8 ', 'GLN', None, (120.076, 110.62399999999997, 111.484)), ('B', '  95 ', 'PRO', None, (112.12099999999998, 89.37199999999997, 101.14)), ('B', ' 141 ', 'PRO', None, (114.44399999999997, 122.07899999999997, 123.607))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B   6  GLN  HG3', ' B 100  GLY  H  ', -0.552, (115.232, 104.186, 108.217)), (' E 409  GLN  HB3', ' E 419  ALA  HB2', -0.51, (91.576, 84.972, 69.751)), (' A 139  THR  OG1', ' A 140  ASN  N  ', -0.509, (102.69, 132.691, 140.827)), (' E 454  ARG  NH2', ' E 467  ASP  O  ', -0.505, (106.969, 85.06, 72.002)), (' A 106  ALA  HB3', ' B  49  TYR  HB2', -0.504, (109.005, 103.673, 92.557)), (' E 427  ASP  N  ', ' E 427  ASP  OD2', -0.5, (92.297, 94.655, 59.995)), (' A   7  SER  OG ', ' A   8  GLY  N  ', -0.498, (86.436, 97.605, 109.483)), (' A  53  PRO  O  ', ' A  74  ARG  NH1', -0.496, (92.878, 85.811, 89.989)), (' E 444  LYS  NZ ', ' E 445  VAL  O  ', -0.493, (101.131, 60.681, 76.632)), (' A 214  ASP  N  ', ' A 214  ASP  OD2', -0.489, (80.019, 115.638, 135.217)), (' B  82  ASP  OD1', ' B  86  TYR  OH ', -0.476, (108.265, 116.616, 103.937)), (' A  98  ARG  N  ', ' A 108  ASP  O  ', -0.473, (99.133, 99.654, 96.623)), (' E 389  ASP  N  ', ' E 389  ASP  OD2', -0.459, (86.54, 81.427, 40.782)), (' A  11  LEU HD21', ' A 154  PRO  HG3', -0.458, (87.458, 98.749, 122.807)), (' B  14  SER  OG ', ' B  15  VAL  N  ', -0.457, (111.748, 127.634, 108.745)), (' A  35  TYR  HB2', ' A  97  ALA  HB3', -0.448, (100.786, 96.651, 99.111)), (' A 148  LEU HD23', ' A 185  SER  HB3', -0.444, (96.447, 112.351, 134.459)), (' B 124  GLN  NE2', ' B 129  GLY  O  ', -0.439, (93.97, 107.131, 144.255)), (' B   6  GLN HE21', ' B  99  GLY  HA3', -0.438, (114.155, 103.886, 106.322)), (' B  19  VAL HG21', ' B 104  LEU HD11', -0.436, (114.147, 118.132, 107.133)), (' E 418  ILE  HA ', ' E 422  ASN HD22', -0.436, (96.723, 83.377, 72.33)), (' E 334  ASN  N  ', ' E 334  ASN  OD1', -0.434, (100.983, 72.02, 37.348)), (' A 170  VAL HG22', ' A 188  VAL HG12', -0.434, (92.861, 123.14, 128.325)), (' B 150  ILE  O  ', ' B 153  SER  OG ', -0.432, (113.432, 108.488, 148.818)), (' E 498  GLN  H  ', ' E 501  ASN HD21', -0.425, (93.346, 66.602, 77.823)), (' A 108  ASP  OD2', ' B  36  TYR  OH ', -0.424, (106.015, 101.404, 98.817)), (' A 131  LEU HD12', ' A 146  GLY  HA3', -0.417, (95.318, 118.351, 136.051)), (' B 124  GLN HE21', ' B 130  ALA  HA ', -0.415, (95.082, 108.062, 144.188)), (' A 138  GLN  HA ', ' A 139  THR  HA ', -0.413, (102.382, 130.181, 142.693)), (' B 133  VAL HG12', ' B 178  THR HG22', -0.412, (100.107, 111.542, 136.652)), (' A  52  ASN  ND2', ' E 489  TYR  OH ', -0.408, (101.923, 87.278, 89.679)), (' A 107  LEU  HB2', ' B  55  TYR  HE2', -0.407, (103.532, 104.721, 92.494))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
