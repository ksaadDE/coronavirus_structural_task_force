# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (126.09600000000015, 152.712, 151.332)), ('B', ' 183 ', 'PRO', None, (147.702, 140.41500000000002, 161.286))]
data['rota'] = [('A', ' 758 ', 'LEU', 0.11610540162068828, (124.28200000000017, 129.031, 130.47900000000013))]
data['cbeta'] = []
data['probe'] = [(" P1201  RVP  C5'", " P1201  RVP  O5'", -1.407, (130.648, 130.657, 136.849)), (' A 618  ASP  HA ', ' A1102  HOH  O  ', -1.168, (133.4, 125.482, 132.131)), (" P1201  RVP  C5'", ' P1201  RVP  P  ', -0.871, (129.815, 130.118, 137.734)), (' P  20    G  N2 ', ' T  11    C  O2 ', -0.771, (123.326, 135.795, 139.293)), (' A 452  ASP  OD2', ' A 556  THR HG23', -0.693, (136.156, 135.502, 147.99)), (' A 577  LYS  NZ ', ' T  13    C  OP1', -0.686, (112.889, 137.803, 135.889)), (' P  13    G  N2 ', ' T  18    C  O2 ', -0.647, (101.924, 130.84, 152.427)), (" P  20    G  O2'", " P1201  RVP H5'1", -0.639, (128.91, 131.083, 136.06)), (' A 618  ASP  CB ', ' A1102  HOH  O  ', -0.638, (133.88, 125.252, 132.95)), (' G 158  GLN HE21', ' G 166  ILE HG23', -0.63, (163.801, 124.765, 185.002)), (' A 545  LYS  HD3', ' A 555  ARG  HG2', -0.63, (129.958, 132.103, 146.204)), (' A 545  LYS  HD3', ' A 555  ARG  CG ', -0.627, (130.207, 132.565, 146.224)), (' A 618  ASP  CG ', ' A 798  LYS  HD2', -0.623, (136.961, 123.791, 133.365)), (' P  13    G  N1 ', ' T  18    C  N3 ', -0.622, (102.798, 130.584, 150.394)), (' A 393  THR HG22', ' A 395  CYS  H  ', -0.621, (145.322, 144.003, 146.154)), (' B 120  ILE  O  ', ' B 124  THR  HB ', -0.608, (142.19, 164.898, 151.241)), (' A 758  LEU HD23', ' A 759  SER  H  ', -0.597, (124.119, 129.843, 132.976)), (' A 569  ARG  O  ', ' A 573  GLN  HB2', -0.587, (114.729, 146.162, 133.957)), (' A  74  ARG HH11', ' A 113  HIS  HE1', -0.586, (170.412, 130.374, 94.469)), (' A 618  ASP  HB2', ' A1102  HOH  O  ', -0.581, (133.988, 125.791, 133.42)), (' G 104  ASN  O  ', ' G 108  ASN  ND2', -0.565, (141.849, 108.552, 177.671)), (' A 105  ARG  HG2', ' A 110  MET  HG2', -0.551, (176.064, 132.938, 85.33)), (' G 104  ASN  HA ', ' G 107  ILE HG12', -0.551, (139.831, 110.125, 175.282)), (' G 160  VAL HG12', ' G 162  ALA  H  ', -0.551, (156.425, 126.712, 187.447)), (' A 858  ARG  NH1', " P  17    U H5''", -0.546, (119.397, 123.088, 153.315)), (' A 614  LEU  HB2', ' A 802  GLU  HB3', -0.544, (130.32, 114.841, 124.211)), (' G 154  TRP  HB3', ' G 188  ALA  HB1', -0.536, (157.842, 115.558, 175.295)), (' G 147  PHE  HB3', ' G 156  ILE HD11', -0.529, (158.4, 112.534, 180.695)), (' B 101  ASP  N  ', ' B 101  ASP  OD1', -0.528, (141.655, 172.044, 155.436)), (' A 532  LYS  HD2', ' A 650  HIS  HD2', -0.527, (117.94, 158.935, 128.127)), (' A 568  ASN  OD1', ' A 654  ARG  NH2', -0.51, (122.499, 149.813, 134.307)), (' G 142  CYS  HA ', ' G 147  PHE  HB2', -0.51, (155.956, 111.063, 181.634)), (' A 631  ARG  NH2', ' A 684  ASP  OD2', -0.508, (126.647, 143.713, 134.786)), (' A  60  ASP  HB2', ' A  66  ILE HD11', -0.508, (179.0, 135.651, 117.513)), (' A 918  PRO  HA ', ' A 921  TYR  HD2', -0.505, (108.946, 109.537, 145.138)), (' A 151  CYS  HA ', ' A 177  ASN HD22', -0.503, (163.341, 138.706, 130.047)), (' C  11  VAL HG12', ' C  36  HIS  HE1', -0.499, (134.35, 121.186, 159.756)), (' A 208  ASP  N  ', ' A 208  ASP  OD1', -0.498, (154.501, 138.902, 107.348)), (' G 100  ASN  O  ', ' G 104  ASN  ND2', -0.498, (141.036, 105.85, 172.371)), (' A 384  SER  HB3', ' B  97  LYS  HD2', -0.497, (134.556, 161.486, 157.155)), (' A 330  VAL HG11', ' B 117  LEU HD13', -0.492, (136.094, 162.195, 145.525)), (' A 847  ILE  O  ', ' A 850  THR  OG1', -0.492, (118.927, 122.931, 163.748)), (' A 919  GLU  HA ', ' A 922  GLU  HG2', -0.492, (106.506, 108.27, 140.683)), (' A 531  THR  O  ', ' A 657  ASN  ND2', -0.488, (123.944, 157.515, 133.67)), (' A 676  LYS  NZ ', ' A 681  SER  OG ', -0.486, (132.026, 143.697, 139.943)), (' A 545  LYS  CE ', ' A 555  ARG  HG2', -0.48, (129.56, 131.086, 146.636)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.479, (144.471, 135.188, 95.044)), (' G 133  PRO  HA ', ' G 183  PRO  HB3', -0.471, (148.831, 119.933, 189.201)), (' A 103  LYS  HG2', ' A 112  PRO  HA ', -0.469, (170.63, 137.491, 89.306)), (' A 726  ARG  NH2', ' A 744  GLU  OE2', -0.467, (130.094, 131.862, 101.793)), (' B 120  ILE  O  ', ' B 124  THR  CB ', -0.467, (142.677, 165.191, 151.034)), (' A 107  ASP  N  ', ' A 107  ASP  OD1', -0.465, (173.849, 127.673, 86.304)), (' B  78  ASP  HB3', ' B  80  ARG  HG2', -0.463, (107.653, 159.151, 153.872)), (' A 545  LYS  CD ', ' A 555  ARG  HG2', -0.463, (129.394, 131.842, 146.669)), (' A  21  PRO  HA ', ' A  56  PHE  HD1', -0.46, (175.036, 128.799, 105.224)), (' A 837  ILE  O  ', ' A 884  TYR  OH ', -0.458, (121.85, 114.766, 151.103)), (' A 545  LYS  HD3', ' A 555  ARG  HG3', -0.458, (130.365, 133.067, 146.729)), (' A 763  VAL HG21', ' A 809  PRO  HB3', -0.456, (127.128, 118.094, 127.039)), (' A 849  LYS  HA ', ' A 854  LEU HD23', -0.455, (115.753, 125.142, 159.088)), (' C   9  THR HG21', ' G  98  LEU HD11', -0.454, (135.948, 112.213, 165.928)), (' A 453  TYR  OH ', ' A 675  VAL  O  ', -0.452, (140.311, 146.809, 144.316)), (' A 388  LEU HD23', ' A 397  SER  HB2', -0.452, (143.157, 150.702, 150.922)), (' B 154  TRP  HB3', ' B 188  ALA  HB1', -0.451, (152.37, 158.51, 159.764)), (' A 256  HIS  HD2', ' A 261  LEU  HA ', -0.449, (162.615, 153.526, 131.041)), (' A 819  LEU HD11', ' A 826  TYR  HB3', -0.447, (117.137, 107.926, 125.768)), (' A 128  VAL HG22', ' A 244  ILE HG13', -0.447, (152.032, 139.613, 118.133)), (' A 332  LYS  HE3', ' A 339  PRO  HB2', -0.446, (133.582, 173.02, 150.657)), (' A 239  SER  OG ', ' A 465  ASP  OD1', -0.445, (142.584, 142.879, 114.346)), (' B 136  ASN  HA ', ' B 139  LYS  HE3', -0.441, (161.036, 141.91, 157.448)), (' A 845  ASP  N  ', ' A 845  ASP  OD1', -0.436, (122.889, 125.539, 156.572)), (' A  62  ASP  N  ', ' A  62  ASP  OD1', -0.435, (183.926, 134.464, 118.996)), (' A  33  ARG HH22', ' A  55  ARG HH12', -0.434, (164.772, 129.659, 110.335)), (' B 100  ASN  O  ', ' B 104  ASN  HB2', -0.433, (140.168, 174.336, 152.708)), (' A 708  LEU  HA ', ' A 708  LEU HD23', -0.432, (141.36, 131.851, 108.322)), (' C   3  MET  HB3', ' C   3  MET  HE2', -0.432, (137.35, 108.148, 155.555)), (" T  15    U  H2'", ' T  16    A  H8 ', -0.43, (109.459, 123.526, 144.149)), (' A  34  ALA  HA ', ' A  47  LYS  HA ', -0.43, (152.873, 129.714, 109.546)), (" P  18    G  H2'", ' P  19    U  C6 ', -0.429, (121.532, 125.068, 142.27)), (' A  98  LYS  HB3', ' A  98  LYS  HE3', -0.429, (173.354, 145.698, 103.056)), (' A 750  ARG  HA ', ' A 750  ARG  HD2', -0.428, (124.526, 127.056, 115.509)), (' A 694  PHE  HZ ', ' A 790  ASN HD21', -0.428, (137.229, 134.734, 129.707)), (' G 122  LEU HD13', ' G 190  ARG HH22', -0.426, (151.981, 114.559, 166.977)), (" P  17    U  H2'", ' P  18    G  H8 ', -0.424, (118.647, 124.814, 147.051)), (' A 204  VAL  HA ', ' A 233  VAL  HB ', -0.424, (149.127, 147.409, 103.11)), (" T  16    A  H2'", ' T  17    G  C8 ', -0.423, (106.336, 123.308, 148.342)), (' A 260  ASP  HB3', ' A 263  LYS  HG3', -0.421, (166.115, 157.444, 129.724)), (" T  15    U  H2'", ' T  16    A  C8 ', -0.421, (109.599, 123.625, 144.235)), (' A 472  VAL HG22', ' A 700  VAL HG12', -0.421, (133.535, 135.489, 116.75)), (' A 120  THR  OG1', ' A 211  ASP  OD2', -0.418, (166.192, 139.996, 113.097)), (' A 924  MET  HB3', ' A 924  MET  HE3', -0.415, (110.108, 117.812, 139.295)), (' A  27  SER  HA ', ' A  74  ARG HH22', -0.415, (169.93, 126.113, 96.32)), (' B 139  LYS  HB3', ' B 139  LYS  HE2', -0.414, (161.71, 143.958, 159.421)), (' A  11  VAL HG22', ' A  70  PHE  HD2', -0.414, (175.167, 136.552, 102.804)), (' A 116  ARG  HD3', ' A 217  TYR  HB2', -0.414, (164.933, 141.018, 103.494)), (' A 332  LYS  HB2', ' B 107  ILE HG21', -0.413, (136.33, 172.57, 145.849)), (' A 790  ASN  HB3', ' A 792  VAL HG22', -0.411, (141.844, 133.336, 130.307)), (' A 229  SER  O  ', ' A 229  SER  OG ', -0.411, (149.91, 158.884, 96.428)), (' A 575  LEU HD13', ' A 641  LYS  HG3', -0.411, (117.763, 142.613, 124.107)), (' A 720  VAL HG11', ' A 775  LEU HD13', -0.41, (136.16, 123.757, 106.043)), (' B 141  THR  OG1', ' B 142  CYS  N  ', -0.41, (156.304, 149.877, 156.636)), (' A 684  ASP  HB3', ' A 687  THR  HB ', -0.41, (126.224, 141.191, 137.5)), (' B  84  THR  O  ', ' B  88  GLN  HB2', -0.409, (117.936, 163.413, 155.934)), (' B  92  PHE  O  ', ' B  96  ARG  HG2', -0.404, (128.604, 167.552, 159.691)), (' A 767  ASN  HB3', ' A 770  TYR  HB2', -0.403, (133.015, 119.814, 111.65)), (' A 854  LEU  HA ', ' A 854  LEU HD12', -0.403, (111.293, 124.009, 157.205)), (' A 668  MET  HB3', ' A 668  MET  HE2', -0.403, (132.226, 148.136, 151.409)), (' A 726  ARG  NH1', ' A 744  GLU  OE1', -0.402, (129.231, 133.935, 101.76)), (' A 225  THR HG22', ' A 226  THR  H  ', -0.402, (151.44, 158.128, 92.792)), (' A 729  GLU  HG3', ' A 733  ARG  HB2', -0.401, (138.746, 142.402, 103.164)), (' A 825  ASP  N  ', ' A 825  ASP  OD1', -0.4, (109.219, 106.58, 125.949)), (' A 610  GLU  OE1', ' A 767  ASN  ND2', -0.4, (128.412, 118.238, 109.912))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
