# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 210 ', 'PRO', None, (2.995340000000001, -0.1293, -31.555149999999998)), ('B', '  32 ', 'PRO', None, (-2.82872, -26.64273, -20.76851)), ('C', ' 107 ', 'GLY', None, (43.541290000000025, 8.06088, -53.88638)), ('C', ' 196 ', 'ASP', None, (16.5889, 15.872759999999998, -6.55858)), ('C', ' 210 ', 'PRO', None, (34.73756, 17.11461, -40.31033)), ('D', '  32 ', 'PRO', None, (6.856789999999999, 14.12909, -48.80658))]
data['rota'] = [('A', '   9 ', 'SER', 0.23257363940856346, (1.3978900000000003, -14.83065, -12.74336)), ('A', '  11 ', 'SER', 0.08711076213198302, (1.65643, -21.271319999999985, -10.70242)), ('A', '  19 ', 'GLU', 0.262107674389612, (6.72671, -27.28688, -4.51097)), ('A', '  87 ', 'GLN', 0.19831631974547054, (-9.98352, -33.13834, -5.78275)), ('A', ' 110 ', 'LEU', 0.21401515769918963, (-8.588170000000002, 5.106509999999997, -15.957529999999998)), ('A', ' 122 ', 'ASP', 0.17789365202546872, (-12.080320000000018, -17.77839, -14.554569999999996)), ('A', ' 187 ', 'THR', 0.17793564106907936, (4.29073, -3.1805899999999983, -46.093329999999995)), ('A', ' 216 ', 'THR', 0.10906603792973793, (-8.35002, -5.39875, -44.36054)), ('A', ' 254 ', 'GLU', 0.29483593362572197, (-6.02918, -8.74983, -58.886269999999996)), ('A', ' 258 ', 'THR', 0.12284206571845585, (-7.003110000000006, -3.3687299999999984, -52.32878)), ('B', '   4 ', 'THR', 0.09661432431812074, (-4.41534, -27.002549999999985, -28.396259999999998)), ('C', '   2 ', 'SER', 0.11115153425340454, (37.84816000000003, 8.05619, -48.53974)), ('C', '   9 ', 'SER', 0.18869860530252064, (18.49352, 16.24424999999999, -57.91820999999999)), ('C', '  11 ', 'SER', 0.11140972801110603, (12.053630000000004, 17.18302, -59.74118)), ('C', '  53 ', 'GLU', 0.19657318325896053, (34.269980000000025, 30.578659999999974, -57.94081)), ('C', '  68 ', 'LYS', 0.25936965612228596, (19.6428, 22.11052, -67.87074)), ('C', '  78 ', 'LEU', 0.19405869768855444, (8.1198, 12.20528, -64.96367)), ('C', '  92 ', 'SER', 0.1566624269361774, (1.9966999999999997, 15.909379999999999, -58.379039999999996)), ('C', ' 103 ', 'VAL', 0.2545079434108155, (37.84680000000003, 8.09005, -54.13142)), ('C', ' 105 ', 'SER', 0.17021337974228512, (42.87879000000003, 7.026930000000001, -49.93276999999999)), ('C', ' 134 ', 'THR', 0.05943391261848026, (18.53524, -3.429800000000001, -59.95226999999999)), ('C', ' 155 ', 'GLN', 0.2933486931643857, (28.45351, 4.861889999999999, -70.63636)), ('C', ' 215 ', 'LEU', 0.27061563245189346, (30.23694, 10.819129999999987, -28.47015)), ('C', ' 249 ', 'VAL', 0.09064004994183379, (23.08341, 10.28243, -13.12899)), ('C', ' 266 ', 'LEU', 0.24877894592301936, (41.69247, 15.33562, -32.6628)), ('D', '  44 ', 'GLU', 0.1981148606901996, (4.73125, 35.84323, -34.13924)), ('D', '  55 ', 'SER', 0.20590538016122817, (18.8446, 17.95672, -50.55168)), ('D', '  91 ', 'LYS', 0.2682537900454929, (3.32404, 20.967209999999984, -34.46773)), ('F', '   7 ', 'ARG', 0.25732821861588334, (18.51647000000001, 8.6439, -70.93793))]
data['cbeta'] = []
data['probe'] = [(' C 261  VAL HG22', ' C 270  LEU  HB2', -0.885, (36.998, 14.247, -27.719)), (' B  24  ASN  HB3', ' B  65  LEU HD11', -0.821, (9.356, -16.401, -33.34)), (' C 106  ASP  HB2', ' C 108  ARG  H  ', -0.801, (43.215, 5.875, -55.265)), (' A 189  MET  HE1', ' A 217  TRP  HH2', -0.771, (-2.817, -7.901, -52.327)), (' C 102  ASP  HB2', ' C 111  ARG  HG3', -0.762, (32.728, 5.567, -54.103)), (' A  -4  MET  HG3', ' A 264  GLU  OE1', -0.758, (-0.657, 4.125, -29.768)), (' A  19  GLU  HG3', ' A  20  PRO  HD2', -0.747, (4.87, -25.854, -4.193)), (' C  55  GLU  OE1', ' C 170  ARG  NH2', -0.737, (37.021, 23.848, -63.038)), (' A 187  THR  HB ', ' A 272  LEU HD21', -0.737, (2.591, -2.315, -48.171)), (' A  20  PRO  HG2', ' A  75  ARG  HG2', -0.729, (3.347, -23.413, -4.992)), (' A  44  ARG  HD2', ' A  64  THR HG21', -0.728, (15.143, -11.141, -4.973)), (' F   7  ARG  HG3', ' F   7  ARG HH11', -0.718, (22.196, 6.389, -71.25)), (' A 255  GLN HE22', ' A 275  GLU  H  ', -0.709, (-1.565, -4.274, -59.045)), (' C 219  ARG  HD3', ' C 256  ARG  NH1', -0.701, (27.905, 3.31, -12.461)), (' A 189  MET  HE1', ' A 217  TRP  CH2', -0.692, (-3.502, -8.391, -51.828)), (' A 189  MET  HE2', ' A 201  LEU HD22', -0.683, (-1.281, -9.056, -52.847)), (' A 156  GLN HE22', ' E   3  ASN HD21', -0.682, (-3.994, -7.579, -5.544)), (' C  14  ARG  HB3', ' C  17  ARG  HB2', -0.68, (2.048, 23.455, -61.182)), (' D  87  LEU HD22', ' D  91  LYS  HD3', -0.675, (2.159, 17.056, -36.117)), (' A 191  HIS  CE1', ' A 199  ALA  HB1', -0.671, (-2.821, -15.132, -58.052)), (' D  45  ARG  NH2', ' D  47  GLU  OE2', -0.661, (6.559, 36.431, -44.879)), (' D   9  VAL HG21', ' D  80  CYS  HB2', -0.653, (11.844, 25.106, -34.616)), (' A 102  ASP  HB2', ' A 111  ARG  HB2', -0.641, (-7.121, 1.334, -17.865)), (' D  74  GLU  N  ', ' D  74  GLU  OE1', -0.638, (17.081, 37.49, -22.155)), (' A 129  ASP  OD2', ' A 131  ARG  HB2', -0.634, (-17.517, -0.939, -7.644)), (' A 103  VAL HG23', ' A 168  LEU HD23', -0.631, (-1.465, 3.367, -16.769)), (' C  63  GLU  O  ', ' C  67  VAL HG23', -0.629, (24.592, 22.28, -65.982)), (' A 173  GLU  O  ', ' A 176  LYS  HG3', -0.605, (10.944, 8.818, -20.542)), (' A 170  ARG  NH2', ' E   1  ASN  OD1', -0.594, (7.626, 1.364, -9.815)), (' D  70  PHE  CZ ', ' D  72  PRO  HG3', -0.593, (19.637, 33.45, -30.013)), (' C 144  LYS  NZ ', ' C 148  GLU  OE2', -0.59, (19.31, -5.97, -66.529)), (' C  13  SER  O  ', ' C  92  SER  HB2', -0.586, (3.369, 18.312, -59.118)), (' C   8  PHE  HB2', ' C  25  VAL HG23', -0.585, (21.621, 16.854, -54.15)), (' C  51  TRP  CZ2', ' C 179  LEU HD11', -0.582, (34.827, 21.546, -52.597)), (' D   4  THR HG22', ' D  86  THR  HB ', -0.578, (3.758, 11.929, -41.702)), (' C 109  PHE  HB2', ' C 165  VAL HG21', -0.577, (37.232, 7.119, -60.35)), (' A 142  ILE  O  ', ' A 146  LYS  HG3', -0.571, (-14.691, -16.471, 1.637)), (' A  85  TYR  OH ', ' A 137  ASP  OD2', -0.569, (-13.516, -22.523, -9.455)), (' A 249  VAL HG23', ' A 257  TYR  CZ ', -0.565, (-10.363, -10.794, -56.108)), (' C 189  MET  HE1', ' C 273  ARG  C  ', -0.555, (32.917, 16.329, -17.16)), (' C  20  PRO  HD2', ' C  75  ARG  HG2', -0.549, (9.29, 19.628, -66.403)), (' C  35  ARG  HD3', ' C  48  ARG  HD2', -0.548, (22.357, 27.146, -54.174)), (' C 268  LYS  HD2', ' C 269  PRO  HD2', -0.546, (43.011, 8.854, -28.591)), (' A 218  GLN  HA ', ' A 222  GLU  O  ', -0.543, (-13.23, -5.162, -50.267)), (' C  45  MET  HE2', ' C  67  VAL HG21', -0.542, (24.309, 21.752, -62.294)), (' C 178  THR  O  ', ' C 181  ARG  HB3', -0.541, (37.591, 22.072, -45.481)), (' C  11  SER  HA ', ' C  21  ARG  O  ', -0.538, (11.993, 18.791, -60.159)), (' C 205  ALA  HB2', ' C 215  LEU HD21', -0.535, (30.263, 16.195, -29.144)), (' C  45  MET  CG ', ' C  67  VAL HG21', -0.532, (24.622, 23.291, -63.215)), (' A 191  HIS  HE1', ' A 199  ALA  HB1', -0.531, (-3.025, -15.832, -57.621)), (' C 224  GLN  O  ', ' C 228  THR HG23', -0.526, (24.33, 5.526, -22.926)), (' A 133  TRP  HZ2', ' A 152  VAL HG13', -0.523, (-10.821, -7.48, -2.516)), (' C 219  ARG  HD3', ' C 256  ARG HH12', -0.521, (27.502, 2.867, -11.826)), (' C  25  VAL HG21', ' D  55  SER  HB3', -0.507, (21.047, 18.481, -51.684)), (' A  -4  MET  HG3', ' A 264  GLU  CD ', -0.504, (-0.216, 4.331, -30.406)), (' C 177  GLU  O  ', ' C 181  ARG  HB2', -0.501, (39.548, 24.004, -45.161)), (' A 147  TRP  HB3', ' A 152  VAL HG11', -0.5, (-11.725, -9.729, -1.4)), (' D  21  ASN  HB3', ' D  70  PHE  CE1', -0.495, (20.734, 33.539, -32.211)), (' A 106  ASP  HB3', ' A 108  ARG  HD3', -0.491, (-5.972, 12.694, -16.168)), (' C 227  ASP  O  ', ' C 247  VAL HG23', -0.488, (22.444, 7.557, -20.496)), (' C 126  LEU  HB2', ' C 133  TRP  CZ3', -0.487, (22.893, 2.746, -62.73)), (' A  63  GLU  O  ', ' A  67  VAL HG12', -0.487, (8.993, -9.036, -5.953)), (' A 249  VAL HG23', ' A 257  TYR  CE1', -0.485, (-10.21, -10.58, -56.354)), (' C 128  GLU  CD ', ' C 128  GLU  H  ', -0.485, (26.564, -2.648, -56.007)), (' B  20  SER  HA ', ' B  71  THR HG22', -0.483, (23.034, -15.953, -40.693)), (' C  47  PRO  O  ', ' C  48  ARG  HG2', -0.482, (25.935, 28.54, -54.892)), (' C   5  MET  HB2', ' C 168  LEU HD13', -0.481, (33.586, 14.367, -55.311)), (' C 203  CYS  HB2', ' C 217  TRP  CZ2', -0.48, (28.386, 13.956, -21.945)), (' C 127  LYS  HB3', ' C 127  LYS  HE3', -0.48, (25.468, -4.105, -57.944)), (' B  29  GLY  HA2', ' B  61  SER  HB2', -0.479, (-4.162, -19.781, -25.603)), (' A 147  TRP  HB3', ' A 152  VAL  CG1', -0.479, (-11.803, -9.605, -1.168)), (' A 156  GLN  NE2', ' E   3  ASN HD21', -0.479, (-3.997, -6.831, -5.258)), (' A 135  ALA  HB3', ' A 141  GLN  HG3', -0.479, (-19.016, -16.625, -6.423)), (' C 130  LEU  HB2', ' C 157  ARG  HD3', -0.476, (31.149, -0.397, -63.599)), (' A  13  SER  HA ', ' A  20  PRO  HB3', -0.475, (2.655, -26.269, -8.173)), (' C 106  ASP  HB2', ' C 108  ARG  N  ', -0.469, (43.069, 6.513, -55.375)), (' D  89  GLN  HB2', ' D  90  PRO  CD ', -0.468, (-2.367, 22.085, -38.163)), (' A 201  LEU HD21', ' A 274  TRP  CD1', -0.466, (-0.573, -10.025, -55.359)), (' A 212  GLU  O  ', ' A 263  HIS  CD2', -0.464, (-0.818, -1.102, -35.039)), (' C  23  ILE HG21', ' D  54  LEU  HB3', -0.463, (16.027, 21.104, -53.575)), (' C  45  MET  HG2', ' C  67  VAL HG21', -0.461, (24.12, 23.431, -63.209)), (' C  -4  MET  HB3', ' C 264  GLU  OE2', -0.461, (38.12, 13.129, -42.767)), (' C 213  ILE HG13', ' C 263  HIS  HB2', -0.46, (34.349, 14.004, -33.685)), (' C 188  HIS  O  ', ' C 204  TRP  HB2', -0.46, (29.292, 20.365, -23.977)), (' A 116  TYR  HB2', ' A 124  ILE HG22', -0.459, (-9.757, -14.942, -8.401)), (' B  31  HIS  ND1', ' B  32  PRO  HA ', -0.458, (-3.22, -24.929, -19.334)), (' A 114  HIS  NE2', ' A 156  GLN  NE2', -0.457, (-5.45, -7.921, -5.684)), (' A 268  LYS  HA ', ' A 268  LYS  HD2', -0.455, (-3.437, 8.842, -42.83)), (' C  55  GLU  CD ', ' C 170  ARG HH21', -0.455, (36.933, 24.36, -61.721)), (' B  39  LEU  O  ', ' B  46  ILE HG13', -0.454, (16.184, -26.911, -34.528)), (' A  97  MET  HE2', ' A  99  PHE  CD2', -0.453, (-2.147, -9.425, -9.283)), (' A   5  MET  HE2', ' A 168  LEU  HB2', -0.452, (2.195, 1.011, -14.492)), (' A 184  PRO  HB3', ' A 265  GLY  O  ', -0.451, (3.997, 4.826, -38.901)), (' A  14  ARG  HB3', ' A  17  ARG  HB2', -0.45, (6.884, -31.963, -9.891)), (' C 186  LYS  NZ ', ' C 188  HIS  HB3', -0.45, (32.532, 23.993, -24.317)), (' A  82  LEU HD12', ' A  87  GLN  HG3', -0.449, (-8.474, -30.598, -6.301)), (' C 130  LEU HD12', ' C 157  ARG  HG3', -0.448, (32.291, 1.92, -63.569)), (' C 129  ASP  O  ', ' C 131  ARG  HG3', -0.447, (30.214, -3.606, -63.363)), (' A 260  HIS  CE1', ' A 271  THR HG23', -0.443, (-6.522, 0.866, -49.986)), (' C  45  MET  HE2', ' C  67  VAL  CG2', -0.443, (24.134, 21.598, -62.856)), (' A 103  VAL HG23', ' A 168  LEU  CD2', -0.442, (-0.675, 3.234, -16.78)), (' C 217  TRP  HB2', ' C 228  THR HG22', -0.441, (25.73, 7.84, -22.137)), (' B   7  ILE HD11', ' B  25  CYS  SG ', -0.441, (6.068, -23.782, -33.978)), (' C  73  THR  OG1', ' F   6  TYR  HA ', -0.439, (18.656, 13.52, -70.785)), (' C 258  THR HG22', ' C 273  ARG  HG2', -0.438, (35.108, 11.451, -16.68)), (' B  96  ASP  HB3', ' B  99  MET  HA ', -0.437, (5.356, -19.826, -45.387)), (' A  49  ALA  O  ', ' A  52  ILE HG22', -0.437, (14.778, -3.322, -17.653)), (' C  37  ASP  HB3', ' C  40  ALA  HB2', -0.437, (17.098, 28.531, -58.594)), (' C  70  HIS  CG ', ' F   5  LEU HD12', -0.437, (21.212, 14.838, -64.848)), (' A 201  LEU  HA ', ' A 201  LEU HD23', -0.435, (-1.539, -12.667, -53.495)), (' C   8  PHE  HB2', ' C  25  VAL  CG2', -0.435, (21.142, 17.558, -53.979)), (' D  83  ASN  HB2', ' D  90  PRO  HG3', -0.435, (0.99, 23.373, -40.073)), (' C  45  MET  CE ', ' C  67  VAL HG21', -0.435, (24.488, 21.937, -62.286)), (' A  37  ASP  HB3', ' A  40  ALA  HB2', -0.434, (14.088, -18.53, -12.673)), (' C  58  GLU  O  ', ' C  62  GLU  HG3', -0.433, (32.048, 25.201, -69.854)), (' D  31  HIS  O  ', ' D  84  HIS  HE1', -0.432, (6.184, 13.884, -46.518)), (' C 211  ALA  HB2', ' C 241  PHE  CE2', -0.432, (28.713, 17.841, -41.075)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.432, (-8.432, -16.386, -15.517)), (' D  24  ASN  HB3', ' D  65  LEU HD11', -0.43, (19.608, 25.55, -38.318)), (' A 202  ARG  HG3', ' A 246  ALA  HB2', -0.429, (-1.452, -13.585, -47.183)), (' A 207  GLY  HA2', ' A 240  THR  OG1', -0.428, (8.915, -5.498, -36.19)), (' A 202  ARG  HD3', ' A 204  TRP  CZ2', -0.428, (2.571, -14.14, -46.132)), (' B  59  ASP  OD1', ' B  61  SER  OG ', -0.428, (-6.156, -17.569, -24.206)), (' B  84  HIS  ND1', ' B  86  THR HG23', -0.425, (-2.83, -29.552, -25.259)), (' C  66  LYS  HE3', ' F   2  TYR  HB3', -0.425, (27.656, 18.33, -65.752)), (' C 230  LEU HD11', ' C 243  LYS  HE3', -0.424, (25.581, 11.075, -30.54)), (' C  21  ARG  HD2', ' C  39  ASP  OD2', -0.422, (9.805, 25.88, -58.744)), (' A 155  GLN  O  ', ' A 158  ALA  HB3', -0.422, (-5.348, 0.111, -1.573)), (' C  50  PRO  O  ', ' C  53  GLU  HG2', -0.42, (34.805, 30.531, -54.519)), (' A  76  GLU  O  ', ' A  80  ILE HG12', -0.42, (-4.176, -22.54, -0.235)), (' A 191  HIS  HB2', ' A 274  TRP  NE1', -0.42, (1.063, -10.876, -56.527)), (' A  66  LYS  HD2', ' E   3  ASN  O  ', -0.42, (3.506, -6.114, -4.205)), (' A  44  ARG HH12', ' A  61  ASP  HA ', -0.42, (16.145, -7.226, -3.363)), (' C 152  VAL HG22', ' F   7  ARG  NH1', -0.417, (22.256, 4.46, -71.335)), (' C  59  TYR  O  ', ' C  63  GLU  HG2', -0.417, (30.414, 23.873, -65.693)), (' D  47  GLU  HG3', ' D  47  GLU  O  ', -0.416, (9.619, 37.848, -43.877)), (' A   8  PHE  HD1', ' B  56  PHE  CE1', -0.416, (-2.245, -12.99, -17.425)), (' C  82  LEU HD22', ' C  87  GLN  HB2', -0.414, (0.919, 9.414, -62.926)), (' A 147  TRP  O  ', ' A 152  VAL HG12', -0.413, (-12.402, -8.265, -0.092)), (' A 187  THR  HA ', ' A 204  TRP  O  ', -0.413, (3.512, -5.036, -45.277)), (' D  38  ASP  HB3', ' D  45  ARG  HG3', -0.412, (6.64, 32.197, -39.274)), (' C 201  LEU HD21', ' C 217  TRP  CH2', -0.409, (28.384, 14.169, -17.987)), (' D  41  LYS  HE3', ' D  78  TYR  OH ', -0.408, (13.811, 37.838, -30.131)), (' A 201  LEU  O  ', ' A 246  ALA  HA ', -0.404, (-3.874, -12.315, -48.922)), (' A 107  GLY  O  ', ' A 169  ARG  HD2', -0.403, (-0.356, 10.032, -14.64)), (' C 258  THR HG22', ' C 273  ARG  CG ', -0.403, (35.442, 11.007, -16.64)), (' D  75  LYS  HG3', ' D  76  ASP  OD1', -0.401, (12.053, 39.353, -25.294)), (' A 266  LEU  C  ', ' A 268  LYS  H  ', -0.4, (-0.009, 7.21, -41.316)), (' C 121  LYS  NZ ', ' C 136  ALA  HB1', -0.4, (11.112, -1.307, -55.504))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
