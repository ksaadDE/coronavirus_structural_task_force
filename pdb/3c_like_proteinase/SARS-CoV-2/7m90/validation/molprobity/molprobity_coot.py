# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.0042369804389591655, (-3.8499999999999965, -6.636, -0.9209999999999999)), ('A', '  56 ', 'ASP', 0.10175112823838871, (2.530999999999999, 10.423999999999989, 38.158)), ('A', ' 104 ', 'VAL', 0.15476919345499998, (-13.478000000000002, 5.114, 15.193))]
data['cbeta'] = []
data['probe'] = [(' A 224  THR HG22', ' A 225  THR  H  ', -0.833, (-26.401, -25.182, 1.528)), (' A  19  GLN  HB3', ' A  69  GLN  HB2', -0.759, (9.57, 15.533, 15.351)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.74, (6.281, 8.126, 22.65)), (' A   5  LYS  HE2', ' A 288  GLU  OE2', -0.702, (-3.712, -11.126, 2.467)), (' A  12  LYS  HE2', ' A 640  HOH  O  ', -0.651, (-7.215, 11.294, -0.186)), (' A 232  LEU HD12', ' A 632  HOH  O  ', -0.623, (-23.242, -25.601, 14.737)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.611, (-0.483, 20.018, 11.993)), (' A  68  VAL HG12', ' A  75  LEU HD12', -0.596, (5.362, 18.701, 16.013)), (' A 224  THR HG22', ' A 225  THR  N  ', -0.587, (-26.391, -25.823, 1.967)), (' A  46  SER  HG ', ' A  49  MET  N  ', -0.584, (9.92, 2.0, 33.605)), (' A  32  LEU HD13', ' A 101  TYR  CE1', -0.571, (-8.465, 13.57, 13.565)), (' A 244  GLN  HB3', ' A 564  HOH  O  ', -0.571, (-28.463, -12.505, 11.98)), (' A 228  ASN  O  ', ' A 232  LEU HD13', -0.551, (-23.624, -26.885, 12.84)), (' A  83  GLN  O  ', ' A  86  VAL HG12', -0.523, (-5.789, 8.446, 25.028)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.521, (0.042, 19.572, 12.13)), (' A 154  TYR  O  ', ' A 305  PHE  HB3', -0.511, (-12.474, 9.081, -0.503)), (' A   5  LYS  HE3', ' A 528  HOH  O  ', -0.507, (-3.526, -8.443, 4.315)), (' A  67  LEU  N  ', ' A  67  LEU HD12', -0.504, (10.729, 17.717, 23.556)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.5, (-11.078, -10.199, 10.396)), (' A  66  PHE  HB2', ' A  77  VAL HG21', -0.486, (5.576, 18.71, 23.82)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.478, (3.953, 7.26, 5.437)), (' A 230  PHE  CD1', ' A 265  CYS  HB3', -0.478, (-20.741, -22.948, 5.005)), (' A  27  LEU  C  ', ' A  27  LEU HD12', -0.461, (6.875, 9.331, 18.494)), (' A 190  THR  O  ', ' A 192  GLN  HG3', -0.452, (3.051, -8.142, 29.174)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.448, (-2.187, 6.029, 28.281)), (' A   8  PHE  HE1', ' A 305  PHE  CZ ', -0.447, (-11.327, 3.15, -0.043)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.432, (-4.783, 0.451, 23.274)), (' A 168  PRO  HD3', ' A 530  HOH  O  ', -0.43, (6.277, -9.192, 23.798)), (' A 242  LEU HD11', ' A 246  HIS  HB3', -0.43, (-21.066, -14.407, 7.811)), (' A  68  VAL  CG1', ' A  75  LEU HD12', -0.423, (4.862, 18.863, 16.397)), (' A 247  VAL HG22', ' A 261  VAL HG11', -0.422, (-24.58, -16.275, 4.339)), (' A   5  LYS  HZ1', ' A 290  GLU  HB2', -0.418, (-5.661, -10.237, 4.279)), (' A 292  THR  O  ', ' A 296  VAL HG23', -0.412, (-14.0, -8.196, 0.844)), (' A  40  ARG  CD ', ' A  85  CYS  HA ', -0.41, (-1.694, 6.027, 28.496)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.408, (-10.841, 10.838, 9.268)), (' A 190  THR HG22', ' A 191  ALA  N  ', -0.405, (3.892, -9.248, 32.647)), (' A 272  LEU  HA ', ' A 272  LEU HD23', -0.404, (-10.342, -26.111, 4.846)), (' A 242  LEU  CD1', ' A 246  HIS  HB3', -0.404, (-20.926, -14.843, 8.099)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.401, (-13.451, -10.366, -3.705))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
