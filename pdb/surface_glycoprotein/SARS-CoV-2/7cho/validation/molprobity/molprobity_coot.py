# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 457 ', 'ARG', 0.031017721818675483, (6.843, 20.376, 25.887)), ('B', ' 195 ', 'SER', 0.009202145131706828, (-35.22000000000003, 42.633, -18.518)), ('E', ' 497 ', 'PHE', 0.029053238096354992, (-22.759, -14.483, 48.004))]
data['omega'] = [('B', ' 155 ', 'PRO', None, (-32.891, 19.277, 11.796)), ('B', ' 157 ', 'PRO', None, (-28.25, 23.05, 9.975)), ('C', ' 146 ', 'PRO', None, (-31.607, 51.796, 13.146)), ('H', ' 155 ', 'PRO', None, (-44.69, 31.54, 36.056)), ('H', ' 157 ', 'PRO', None, (-47.162000000000006, 26.744, 39.14400000000001)), ('L', ' 146 ', 'PRO', None, (-62.322, 5.825000000000001, 23.963))]
data['rota'] = [('E', ' 388 ', 'ASN', 0.05143444868735969, (12.198000000000011, -6.141, 53.60700000000001)), ('H', '  12 ', 'ILE', 0.024479986573249835, (-34.84899999999998, 32.003, 39.848)), ('H', '  18 ', 'LEU', 0.0004273789003546144, (-31.923999999999985, 28.817000000000007, 46.286)), ('H', ' 151 ', 'LYS', 0.02632419685933203, (-54.797, 32.92500000000001, 30.619)), ('H', ' 185 ', 'SER', 0.09348789498067901, (-53.059, 29.109, 30.031)), ('L', '  41 ', 'LEU', 0.13337996261367638, (-49.61399999999999, 9.178000000000004, 39.232)), ('L', '  83 ', 'GLU', 0.04403887544748155, (-56.479, 2.716, 39.095)), ('L', '  97 ', 'LEU', 0.0, (-20.596999999999994, 5.573, 38.015)), ('L', '  99 ', 'VAL', 0.15014734499484783, (-24.816999999999997, 6.719, 41.296)), ('L', ' 175 ', 'ASN', 0.17778742589572308, (-63.063, 7.777, 34.693)), ('A', ' 346 ', 'ARG', 0.0, (18.259, 32.721, 45.839)), ('A', ' 373 ', 'SER', 0.0871223387506007, (6.454000000000015, 30.701, 58.853)), ('B', '   2 ', 'VAL', 0.029404970700852573, (-3.407, 27.67000000000001, 8.997)), ('C', ' 206 ', 'THR', 0.008159601566148922, (-46.266333333333336, 52.06533333333333, 9.635))]
data['cbeta'] = [('L', ' 175 ', 'ASN', ' ', 0.3173118991013473, (-63.12100000000001, 6.357, 35.254)), ('A', ' 445 ', 'VAL', ' ', 0.37036658516927196, (8.353000000000016, 47.52300000000002, 42.081))]
data['probe'] = [(' C  41  LEU  O  ', ' C  44  THR  OG1', -0.727, (-20.265, 36.217, 13.812)), (' L 165  GLU  OE2', ' L 301  HOH  O  ', -0.711, (-48.314, 26.049, 20.224)), (' A 403  ARG  HD2', ' A 505  TYR  CE1', -0.708, (0.912, 32.247, 37.383)), (' H   2  VAL  CG1', ' H  27  PHE  CE2', -0.685, (-41.756, 8.745, 56.582)), (' H 171  VAL HG22', ' H 190  VAL HG22', -0.66, (-66.785, 22.432, 38.539)), (' B 199  THR  OG1', ' B 200  GLN  N  ', -0.659, (-32.301, 34.982, -19.648)), (' A 403  ARG HH21', ' A 405  ASP  HB2', -0.656, (-1.982, 29.859, 40.422)), (' A 493  GLN  NE2', ' B 101  VAL  O  ', -0.645, (4.455, 34.439, 27.422)), (' B  97  ARG  NH2', ' B 109  ASP  OD2', -0.645, (-1.256, 30.841, 17.731)), (' B  47  TRP  CD2', ' C 100  VAL  CG1', -0.637, (-12.085, 26.587, 29.805)), (' B  47  TRP  CG ', ' C 100  VAL  CG1', -0.633, (-12.204, 27.178, 29.142)), (' H   2  VAL HG13', ' H  27  PHE  CE2', -0.633, (-41.513, 9.411, 56.996)), (' B  88  GLU  OE1', ' H  88  GLU  HB2', -0.63, (-28.924, 22.802, 31.999)), (' H  75  ASN  ND2', ' H 301  HOH  O  ', -0.613, (-33.876, 26.132, 60.828)), (' B  12  ILE HG21', ' B  85  LEU HD13', -0.61, (-25.458, 14.137, 20.7)), (' L 113  GLN  HG3', ' L 114  PRO  HD2', -0.606, (-66.339, 0.922, 28.645)), (' C  13  ALA  HB3', ' C  16  GLN  HG3', -0.604, (-19.959, 59.366, 20.905)), (' E 516  GLU  HG2', ' E 518  LEU HD13', -0.601, (3.651, 1.912, 66.859)), (' H 131  PRO  HD3', ' H 217  LYS  HD3', -0.599, (-63.982, 36.407, 34.163)), (' A 364  ASP  O  ', ' A 367  VAL HG12', -0.586, (15.534, 19.378, 62.174)), (' C  92  SER  O  ', ' C 100  VAL HG23', -0.582, (-10.842, 31.674, 31.251)), (' E 441  LEU HD22', ' E 509  ARG  NH2', -0.58, (-13.092, -18.902, 52.689)), (' H  82  MET  HB3', ' H  85  LEU HD21', -0.57, (-29.584, 24.705, 42.539)), (' E 339  GLY  O  ', ' E 343  ASN  HB2', -0.57, (-1.363, -19.056, 55.83)), (' E 364  ASP  OD1', ' E 366  SER  HB3', -0.569, (10.422, -13.956, 51.765)), (' C 193  HIS  HE2', ' L 193  HIS  CE1', -0.568, (-61.39, 36.059, 8.871)), (' B  47  TRP  CG ', ' C 100  VAL HG13', -0.567, (-12.923, 27.122, 29.842)), (' A 368  LEU  O  ', ' A 374  PHE  HE2', -0.552, (10.784, 24.2, 59.308)), (' H 205  ASN  ND2', ' H 216  ASP  OD1', -0.55, (-62.737, 32.942, 44.821)), (' A 382  VAL  HB ', ' A 387  LEU HD13', -0.549, (8.822, 10.176, 58.196)), (' L 141  ILE HG12', ' L 200  VAL HG21', -0.549, (-64.162, 18.115, 20.993)), (' A 335  LEU HD23', ' A 362  VAL  O  ', -0.549, (21.446, 17.537, 62.494)), (' B  88  GLU  HB2', ' H  88  GLU  CD ', -0.545, (-28.875, 20.312, 29.639)), (' E 403  ARG  NH2', ' L  33  TYR  OH ', -0.544, (-21.428, -2.948, 44.622)), (' B  47  TRP  CD2', ' C 100  VAL HG12', -0.544, (-11.563, 26.035, 30.302)), (' L  56  ARG  HD3', ' L  64  PHE  O  ', -0.54, (-47.14, -7.349, 45.015)), (' H  69  ILE HD11', ' H  78  LEU HD11', -0.537, (-30.422, 15.446, 51.839)), (' A 403  ARG  NH2', ' C  33  TYR  OH ', -0.535, (-3.211, 29.776, 39.076)), (' B  22  CYS  HB3', ' B  78  LEU  HB3', -0.534, (-9.919, 19.027, 16.441)), (' E 433  VAL HG22', ' E 512  VAL HG22', -0.533, (-6.042, -3.113, 54.237)), (' E 350  VAL  HA ', ' E 400  PHE  HB2', -0.526, (-14.427, -7.752, 57.353)), (' C 199  GLN  NE2', ' C 208  GLU  OE2', -0.525, (-51.136, 48.266, 6.986)), (' C 193  HIS  NE2', ' L 193  HIS  NE2', -0.525, (-61.224, 35.679, 7.888)), (' H   2  VAL HG11', ' H  27  PHE  CE2', -0.523, (-41.857, 8.308, 57.518)), (' B 222  LYS  O  ', ' B 301  HOH  O  ', -0.51, (-48.74, 33.074, -14.783)), (' A 383  SER  OG ', ' A 386  LYS  HB2', -0.504, (6.204, 9.754, 62.617)), (' C 137  LEU HD12', ' C 183  LEU HD23', -0.503, (-50.81, 35.64, 5.866)), (' A 477  SER  N  ', ' B  26  GLY  O  ', -0.502, (2.332, 23.461, 11.009)), (' E 477  SER  HA ', ' H  28  ILE HD11', -0.499, (-36.808, 10.13, 66.662)), (' H 218  LYS  HE2', ' H 220  GLU  OE2', -0.497, (-72.447, 37.294, 39.112)), (' L  14  PRO  HA ', ' L  80  LEU  O  ', -0.496, (-57.805, -4.752, 34.596)), (' C 124  PRO  HA ', ' C 137  LEU HD23', -0.496, (-48.38, 35.538, 0.47)), (' E 403  ARG  HD3', ' E 406  GLU  OE2', -0.496, (-20.496, -4.267, 49.277)), (' B  97  ARG  NH2', ' B  99  LEU HD11', -0.495, (-0.109, 30.445, 18.952)), (' A 350  VAL  HA ', ' A 400  PHE  HB2', -0.494, (12.018, 25.53, 40.308)), (' B  40  ALA  HB3', ' B  43  LYS  HB2', -0.494, (-26.338, 29.544, 24.75)), (' A 359  SER  OG ', ' A 394  ASN  OD1', -0.491, (24.064, 11.178, 51.121)), (' L 125  PRO  HD3', ' L 137 ALEU HD23', -0.489, (-64.848, 33.119, 20.521)), (' L 113  GLN  HG3', ' L 114  PRO  CD ', -0.489, (-66.168, 0.896, 28.394)), (' A 431  GLY  HA3', ' A 513  LEU  O  ', -0.487, (10.486, 13.404, 50.632)), (' B 178  LEU HD13', ' B 184  TYR  CE1', -0.483, (-35.426, 26.623, 15.003)), (' L  18  VAL HG11', ' L 108  LEU HD11', -0.483, (-50.386, -2.637, 33.638)), (' A 437  ASN  ND2', ' A 439  ASN  H  ', -0.483, (6.033, 36.185, 49.308)), (' L 128  GLU  N  ', ' L 128  GLU  OE1', -0.482, (-66.185, 40.171, 29.186)), (' C  14  PRO  HD3', ' C 111  LEU  O  ', -0.479, (-23.277, 57.266, 17.092)), (' E 505  TYR  CZ ', ' H 104  THR  HB ', -0.476, (-25.951, -6.234, 46.613)), (' L  57  PRO  HG2', ' L  60  VAL HG21', -0.476, (-45.438, -1.548, 48.057)), (' A 374  PHE  HB2', ' A 708  HOH  O  ', -0.472, (6.07, 26.689, 58.939)), (' E 392  PHE  CE1', ' E 515  PHE  HB3', -0.472, (5.704, -0.356, 59.267)), (' A 342  PHE  CZ ', ' A 368  LEU HD21', -0.471, (13.063, 21.944, 55.599)), (' H 107  TYR  HB3', ' L  36  HIS  CD2', -0.47, (-34.758, 0.365, 45.417)), (' B  88  GLU  HB2', ' H  88  GLU  OE2', -0.467, (-28.503, 19.945, 30.066)), (' H 197  LEU  HA ', ' H 197  LEU HD23', -0.467, (-76.965, 27.252, 36.419)), (' A 403  ARG HH21', ' A 405  ASP  CB ', -0.465, (-2.017, 29.203, 40.962)), (' B  30  SER  HA ', ' B  71  ARG  HD2', -0.462, (-1.723, 16.322, 19.497)), (' C  63  ARG  HB3', ' C  78  THR  O  ', -0.461, (-11.254, 53.244, 18.345)), (' B  97  ARG  HG2', ' B  98  ALA  N  ', -0.46, (-4.235, 26.611, 20.563)), (' H  90  THR HG23', ' H 118  THR  HA ', -0.456, (-37.826, 25.653, 36.513)), (' H 189  VAL HG11', ' L 140  LEU HD22', -0.454, (-65.632, 22.749, 29.989)), (' A 364  ASP  OD2', ' A 367  VAL  HB ', -0.453, (15.631, 20.319, 65.506)), (' A 347  PHE  CE2', ' A 399  SER  HB2', -0.452, (14.862, 25.944, 47.194)), (' L  82  ALA  HA ', ' L 110  VAL HG21', -0.452, (-56.759, 0.514, 34.759)), (' E 371  SER  C  ', ' E 373  SER  H  ', -0.448, (-0.63, -14.602, 43.683)), (' B 175  PRO  HG2', ' C 170  SER  OG ', -0.448, (-29.956, 37.97, 10.038)), (' A 347  PHE  CD2', ' A 399  SER  HB2', -0.446, (14.661, 26.427, 46.789)), (' E 455  LEU HD11', ' H 100  GLN  HB3', -0.445, (-28.702, -0.56, 52.963)), (' A 437  ASN HD21', ' A 439  ASN  HB2', -0.442, (4.782, 37.079, 48.934)), (' B  36  TRP  NE1', ' B  80  LEU  HB2', -0.441, (-13.315, 17.971, 21.208)), (' E 393  THR  O  ', ' E 523  THR  OG1', -0.44, (7.894, -4.805, 67.857)), (' C  56  ARG  HD3', ' C  64  PHE  O  ', -0.44, (-5.904, 48.102, 21.314)), (' B  82  MET  HB3', ' B  85  LEU HD21', -0.438, (-21.68, 14.753, 23.774)), (' E 395  VAL  HA ', ' E 514  SER  O  ', -0.438, (1.936, -3.363, 61.87)), (' A 421  TYR  OH ', ' B  52  TYR  HB3', -0.438, (0.445, 19.6, 28.374)), (' H 124  THR HG22', ' H 211  SER  HB3', -0.437, (-46.226, 35.845, 38.509)), (' A 396  TYR  O  ', ' A 513  LEU  HA ', -0.435, (14.905, 16.196, 49.844)), (' L  33  TYR  HE2', ' L  95  SER  HB3', -0.434, (-22.078, -1.68, 40.652)), (' E 443  SER  HB3', ' E 499  PRO  HD3', -0.429, (-21.376, -19.02, 45.362)), (' E 392  PHE  CD1', ' E 515  PHE  HB3', -0.429, (6.13, -0.213, 60.0)), (' E 425  LEU HD21', ' E 512  VAL HG11', -0.426, (-6.06, -1.272, 57.378)), (' E 403  ARG  HD2', ' E 505  TYR  CE1', -0.425, (-22.642, -6.479, 48.056)), (' A 449  TYR  CD1', ' A 449  TYR  N  ', -0.423, (10.502, 39.776, 35.435)), (' B  39  GLN  HB2', ' B  45  LEU HD23', -0.422, (-19.944, 30.487, 22.269)), (' B  32  ASN  OD1', ' B  97  ARG  HD2', -0.421, (-0.813, 25.741, 19.215)), (' L 209  LYS  HA ', ' L 209  LYS  HD3', -0.421, (-72.182, 22.694, 17.934)), (' C 155  ALA  HB2', ' C 196  TYR  CE2', -0.419, (-55.413, 37.356, 6.706)), (' H  47  TRP  CG ', ' L 100  VAL HG22', -0.418, (-29.52, 8.41, 42.811)), (' E 520  ALA  HB1', ' E 521  PRO  HD2', -0.417, (10.059, 0.26, 73.305)), (' B 135  SER  OG ', ' B 136  SER  N  ', -0.417, (-46.356, 40.721, -9.594)), (' L 113  GLN  HB3', ' L 145  TYR  CZ ', -0.415, (-62.124, 2.077, 27.797)), (' H 207  ASN  OD1', ' H 214  LYS  HD3', -0.412, (-53.059, 32.414, 45.543)), (' A 387  LEU  HA ', ' A 387  LEU HD12', -0.411, (10.655, 9.706, 60.235)), (' L  97  LEU  H  ', ' L  97  LEU  HG ', -0.409, (-21.988, 4.073, 36.364)), (' C  54  SER  HB3', ' C  66  GLY  O  ', -0.408, (-4.464, 46.858, 28.383)), (' E 364  ASP  O  ', ' E 367  VAL HG22', -0.408, (6.757, -13.243, 53.71)), (' A 392  PHE  CE1', ' A 515  PHE  HB3', -0.408, (13.925, 8.431, 54.382)), (' A 418  ILE  HA ', ' A 418  ILE HD13', -0.407, (5.307, 23.789, 36.165)), (' A 447  GLY  HA3', ' A 449  TYR  HE1', -0.407, (7.676, 41.808, 35.991)), (' H 152  ASP  HB3', ' H 183  LEU HD13', -0.406, (-49.486, 35.822, 28.908)), (' C  62  ASP  N  ', ' C  62  ASP  OD1', -0.405, (-5.187, 51.321, 16.583)), (' L  14  PRO  HD3', ' L 111  LEU  O  ', -0.403, (-59.632, -2.527, 30.439)), (' A 383  SER  HG ', ' A 386  LYS  HB2', -0.402, (6.369, 9.896, 62.639)), (' B 102  GLY  HA3', ' C  51  TYR  HE1', -0.401, (0.588, 37.858, 24.763)), (' B 179  GLN  HG2', ' C 165  GLU  HG3', -0.4, (-42.421, 30.253, 12.324))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
