# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 112 ', 'SER', 0.004441677755207199, (203.18999999999994, 148.81799999999996, 106.34499999999998)), ('A', ' 536 ', 'ASN', 0.04814426926603335, (174.842, 122.40199999999997, 142.222)), ('A', ' 582 ', 'LEU', 0.017702592055738518, (160.496, 116.82799999999997, 132.514)), ('A', ' 600 ', 'PRO', 0.03979990396764264, (192.098, 148.00299999999993, 166.205)), ('A', ' 709 ', 'ASN', 0.0005844028015669424, (170.729, 133.627, 208.897)), ('A', ' 710 ', 'ASN', 0.009135093679187677, (172.58399999999995, 135.348, 211.81900000000002)), ('B', '  97 ', 'LYS', 0.04611186586935985, (125.93200000000002, 106.069, 138.897)), ('B', ' 123 ', 'ALA', 0.008932875029360332, (134.00699999999998, 104.283, 125.88300000000001)), ('B', ' 197 ', 'ILE', 0.011801302833177516, (136.79, 134.841, 129.478)), ('B', ' 198 ', 'ASP', 0.030004986493047676, (137.91199999999995, 135.806, 125.87900000000002)), ('B', ' 571 ', 'ASP', 0.019387185153552856, (139.90699999999995, 176.486, 148.461)), ('B', ' 709 ', 'ASN', 1.0163690950223097e-05, (134.84599999999995, 165.702, 210.98899999999998)), ('C', ' 112 ', 'SER', 0.0004993149661634043, (144.558, 202.28399999999993, 110.18099999999998)), ('C', ' 198 ', 'ASP', 0.010865390129119974, (145.64099999999993, 185.51599999999993, 126.932)), ('C', ' 536 ', 'ASN', 0.03233745974633139, (185.42299999999994, 192.86, 144.985))]
data['omega'] = [('A', ' 709 ', 'ASN', None, (171.65599999999995, 132.95299999999995, 207.95399999999998)), ('B', ' 709 ', 'ASN', None, (134.482, 164.885, 209.79699999999997))]
data['rota'] = [('A', ' 331 ', 'ASN', 0.0, (162.298, 120.13199999999998, 121.66299999999998)), ('A', ' 602 ', 'THR', 0.0012662449084096922, (195.408, 152.265, 162.601)), ('A', ' 603 ', 'ASN', 0.01830924287378936, (198.51199999999994, 153.70199999999994, 164.355)), ('A', ' 615 ', 'VAL', 0.15381513900237315, (177.684, 132.68599999999995, 155.691)), ('A', ' 710 ', 'ASN', 0.2014144132530247, (172.58399999999995, 135.348, 211.81900000000002)), ('A', '1073 ', 'LYS', 0.09897988514934225, (183.11499999999995, 143.753, 208.656)), ('B', '  81 ', 'ASN', 0.16163051214505095, (116.94799999999996, 118.40699999999997, 129.577)), ('B', ' 403 ', 'ARG', 0.11470537958074134, (124.44999999999997, 173.22299999999996, 87.691)), ('B', ' 599 ', 'THR', 0.0013599335943581536, (134.059, 140.25599999999994, 166.108)), ('B', ' 604 ', 'THR', 0.1920110316812615, (133.908, 131.677, 170.134)), ('C', '  62 ', 'VAL', 0.029586637601027758, (149.462, 208.481, 139.158)), ('C', ' 331 ', 'ASN', 0.012391518424446064, (191.53999999999994, 186.461, 122.63099999999999)), ('C', ' 347 ', 'PHE', 0.15766485207473538, (182.61, 164.105, 99.927)), ('C', ' 565 ', 'PHE', 0.2340333457418661, (189.251, 175.847, 137.274)), ('C', ' 570 ', 'ASP', 0.008468640617370512, (178.99299999999994, 171.161, 146.455)), ('C', ' 599 ', 'THR', 0.14682398669618527, (157.33899999999994, 194.246, 165.925)), ('C', ' 602 ', 'THR', 0.05862497552859543, (150.25699999999995, 196.316, 165.631)), ('C', ' 619 ', 'GLU', 0.015367246138627355, (176.541, 194.954, 152.49)), ('C', ' 656 ', 'VAL', 0.14210158757869823, (170.70999999999995, 201.072, 174.749)), ('C', ' 716 ', 'ILE', 0.24375024657425606, (159.44599999999994, 182.93, 210.92000000000002))]
data['cbeta'] = [('A', ' 709 ', 'ASN', ' ', 0.2623334409816514, (169.82099999999994, 132.664, 209.667)), ('A', '1074 ', 'ASN', ' ', 0.3826601431446905, (181.29999999999995, 139.327, 209.183)), ('B', ' 603 ', 'ASN', ' ', 0.37167926181318073, (137.59099999999995, 130.674, 168.838)), ('B', '1074 ', 'ASN', ' ', 0.34508352956279975, (134.65999999999994, 153.438, 211.519)), ('C', ' 198 ', 'ASP', ' ', 0.3113999906348566, (145.68199999999993, 184.246, 127.802))]
data['probe'] = [(' A 709  ASN  O  ', ' B 897  PRO  HG3', -0.703, (171.909, 136.507, 208.733)), (' B 538  CYS  HG ', ' B 590  CYS  HG ', -0.521, (127.119, 162.042, 146.307)), (' B 708  SER  HB3', ' B 711  SER  HB3', -0.506, (134.236, 160.379, 210.311)), (' A 709  ASN  O  ', ' A 711  SER  N  ', -0.476, (173.08, 136.095, 209.77)), (' A 382  VAL HG11', ' A 387  LEU HD23', -0.459, (160.066, 141.055, 121.402)), (' A 280  ASN HD22', ' A1306  NAG  H83', -0.458, (201.765, 170.064, 151.575)), (' C 580  GLN  O  ', ' C1308  NAG  H4 ', -0.449, (196.612, 187.414, 127.81)), (' C 600  PRO  HB3', ' C 674  TYR  HB2', -0.417, (157.422, 197.835, 171.028)), (' A 327  VAL  H  ', ' A 531  THR HG22', -0.41, (171.676, 126.813, 127.709)), (' A 342  PHE  HB2', ' A1305  NAG  H82', -0.409, (156.721, 137.329, 105.645)), (' A1304  NAG  H2 ', ' A1304  NAG  H82', -0.409, (175.856, 124.401, 157.802))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
