# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('D', '  55 ', 'THR', 0.2610678354740503, (70.353, 35.296, 7.246999999999999)), ('D', '  86 ', 'SER', 0.003990900586359203, (78.332, 31.357999999999997, 21.993)), ('D', ' 186 ', 'LEU', 0.20601790846104048, (111.20700000000002, 5.208, 14.238999999999999)), ('D', ' 190 ', 'CYS', 0.012105804489692673, (116.21700000000003, -3.077, 22.818999999999992)), ('D', ' 191 ', 'LYS', 0.005329251888210597, (118.68, -5.89, 23.39)), ('D', ' 281 ', 'GLU', 0.0, (115.588, 39.369, 10.004999999999995))]
data['cbeta'] = []
data['probe'] = [(' D 158  LYS  NZ ', ' D 163  LEU  O  ', -0.899, (92.21, 26.284, 28.333)), (' D 278  THR HG22', ' D 284  TYR  HB2', -0.587, (108.775, 36.892, 15.522)), (' D 108  ALA  N  ', ' D 111  ASN  OD1', -0.586, (92.732, 38.619, 24.856)), (' D 281  GLU  OE2', ' D 284  TYR  OH ', -0.527, (110.966, 40.988, 10.699)), (' D 114  LEU HD11', ' D 153  LEU HD21', -0.525, (90.011, 30.123, 22.742)), (' D  80  PHE  HA ', ' D  83  ARG HH21', -0.516, (80.257, 21.655, 19.628)), (' D  39  GLY  O  ', ' D  89  ASN  ND2', -0.512, (75.6, 36.093, 19.898)), (' D 128  PHE  HA ', ' D 177  ALA  HA ', -0.488, (93.505, 20.203, 7.713)), (' D 185  VAL  CG1', ' D 237  GLN  HB3', -0.487, (110.693, 6.53, 7.919)), (' D   4  THR  HA ', ' D  24  MET  HG2', -0.487, (55.846, 38.114, 8.949)), (' D 264  GLU  OE2', ' D 285  ARG  NH2', -0.484, (108.563, 34.987, 27.625)), (' D  23  ASP  O  ', ' D  31  GLN  NE2', -0.482, (57.121, 33.635, 12.859)), (' D 265  TYR  CZ ', ' D 272  GLY  HA3', -0.477, (101.425, 28.996, 31.991)), (' D  60  PRO  HA ', ' D  65  LEU  HB3', -0.453, (69.892, 21.356, 10.175)), (' D 278  THR  CG2', ' D 284  TYR  HB2', -0.448, (109.023, 36.408, 15.131)), (' D  43  THR HG22', ' D  44  LYS  HD3', -0.447, (63.561, 31.231, 22.117)), (' D 166  VAL HG11', ' D 263  ASN  OD1', -0.433, (102.355, 26.727, 20.974)), (' A   2  UB4  N  ', ' D 165  ASP  OD2', -0.432, (99.34, 22.504, 28.648)), (' D 171  THR  O  ', ' D 175  GLN  HG2', -0.431, (93.559, 16.908, 16.815)), (' D  89  ASN  HA ', ' D  92  LYS  HE3', -0.428, (79.254, 37.673, 18.502)), (' D 279  ALA  HB2', ' D 283  LEU HD23', -0.427, (114.261, 33.757, 15.092)), (' D  22  VAL HG22', ' D  32  PHE  HZ ', -0.413, (61.602, 31.487, 9.341)), (' D  34  PRO  HB2', ' D  59  LEU HD11', -0.411, (69.732, 26.435, 18.676)), (' D  80  PHE  CA ', ' D  83  ARG HH21', -0.403, (80.111, 21.443, 19.618)), (' D  60  PRO  HD3', ' D  81  LEU HD13', -0.403, (73.75, 22.455, 13.896)), (' D 235  LEU HD21', ' D 238  GLN  HB2', -0.403, (111.799, 12.434, 10.953))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
