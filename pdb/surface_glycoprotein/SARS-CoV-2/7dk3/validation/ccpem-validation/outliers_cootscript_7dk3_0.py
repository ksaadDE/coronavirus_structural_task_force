
from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

dict_residue_prop_objects = {}
class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)
        ##save property list frame object
        dict_residue_prop_objects[data_key] = list_obj
# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "clusters","rama", "rota", "cbeta", "probe", "smoc", "fdr",
               "fsc","diffmap","cablam",
               "jpred"]
  data_titles = { "clusters"  : "Outlier residue clusters",
                  "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes",
                  "smoc"  : "Local density fit (SMOC)",
                  "fdr": "Backbone position score (FDR)",
                  "fsc": "Local density fit (FSC)",
                  "diffmap": "Model-map difference",
                  "cablam": "Ca geometry (CaBLAM)",
                  "jpred":"SS prediction"}
  data_names = { "clusters"  : ["Chain","Residue","Cluster","Outlier types"],
                 "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"],
                 "smoc" : ["Chain", "Residue", "Name", "Score"],
                 "fdr" : ["Chain", "Residue", "Name", "Score"],
                 "fsc" : ["Chain", "Residue", "Name", "Score"],
                 "diffmap" : ["Chain", "Residue", "Name", "Score"],
                 "cablam" : ["Chain", "Residue","Name","recommendation","DSSP"],
                 "jpred" : ["Chain", "Residue","Name","predicted SS","current SS"]}
  if (gobject is not None) :
    data_types = {  "clusters" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_INT, gobject.TYPE_STRING,
                             gobject.TYPE_PYOBJECT],
                    "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "smoc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "fdr" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "fsc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "diffmap" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cablam" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT],
                   "jpred" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT]}
  else :
    data_types = dict([ (s, []) for s in ["clusters","rama","rota","cbeta","probe","smoc",
                                          "fdr","fsc","diffmap","cablam","jpred"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "Validation To-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    ##adding a column type for checkbox (bool) before atom coordinate
    if gobject is not None:
        column_types = column_types[:-1]+[bool]+[column_types[-1]]
    
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    ##add a cell for checkbox
    cell1 = gtk.CellRendererToggle()
    cell1.connect ("toggled", self.on_selected_toggled)
    column = gtk.TreeViewColumn('Dealt with',cell1,active=i+1)
    self.listctrl.append_column(column)
    #column.set_sort_column_id(i+1)
    #column.pack_start(cell1, True)
    
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      row = row[:-1] + (False,)+(row[-1],)
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()
  ##check box toggle
  def on_selected_toggled(self,renderer,path):
    if path is not None:
      model = self.listmodel.get_model()
      it = model.get_iter(path)
      #set toggle
      model[it][-2] = not model[it][-2]
      #set checkboxes for same residues in other lists
      try:
        chain = model[it][0]
        residue = model[it][1]
        for data_key in dict_residue_prop_objects:
          prop_obj = dict_residue_prop_objects[data_key]
          for row in prop_obj.listmodel.get_model():
            if data_key == 'probe':
              atom1_split = row[0].split()
              atom2_split = row[1].split()
              if atom1_split[0] == chain and atom1_split[1] == residue:
                row[-2] = model[it][-2]
              elif atom2_split[0] == chain and atom2_split[1] == residue:
                row[-2] = model[it][-2]
            elif row[0] == chain and row[1] == residue:
              row[-2] = model[it][-2]
      except IndexError: pass

  def check_chain_residue(self,chain,residue):
      pass
  
def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data
data = {}
data['cbeta'] = []
data['fdr'] = []
data['fsc'] = []
data['diffmap'] = []
data['jpred'] = []
data['probe'] = [(' A 455  LEU  O  ', ' A 455  LEU HD23', -0.704, (184.039, 183.685, 161.013)), (' A 501  ASN  HB3', ' A 505  TYR  HB2', -0.605, (196.312, 187.314, 149.186)), (' B  24  LEU  H  ', ' B  24  LEU HD23', -0.591, (173.768, 147.656, 188.64)), (' C1328  ASP  HB2', ' C1329  PRO  HD2', -0.56, (185.854, 235.659, 203.204)), (' B 501  ASN  HB3', ' B 505  TYR  HB2', -0.545, (200.495, 205.237, 148.265)), (' A 189  LEU  C  ', ' A 189  LEU HD13', -0.524, (252.277, 220.898, 190.329)), (' B 294  ASP  HB2', ' B 295  PRO  HD2', -0.509, (182.545, 172.612, 210.794)), (' A1310  ASN  N  ', ' C1346  SER  HG ', -0.504, (196.217, 227.087, 200.995)), (' B1458  LEU  C  ', ' B1458  LEU HD13', -0.494, (162.033, 233.083, 188.506)), (' B  24  LEU  N  ', ' B  24  LEU HD23', -0.486, (173.507, 147.639, 189.079)), (' C1038  LYS  HD2', ' C1038  LYS  N  ', -0.481, (199.113, 208.514, 249.246)), (' A 192  PHE  HA ', ' A 204  TYR  O  ', -0.471, (244.941, 218.387, 186.274)), (' A 422  ASN  OD1', ' A 423  TYR  N  ', -0.465, (191.836, 179.461, 165.942)), (' B1311  LEU  C  ', ' B1311  LEU HD12', -0.461, (172.317, 249.947, 178.738)), (' C 916  LEU  O  ', ' C 920  GLN  N  ', -0.459, (183.281, 218.132, 261.086)), (' C 543  PHE  CD1', ' C1356  ARG  HB2', -0.456, (219.565, 233.975, 183.449)), (' A  24  LEU  C  ', ' A  24  LEU HD12', -0.449, (262.081, 201.547, 184.342)), (' B 916  LEU  O  ', ' B 920  GLN  N  ', -0.448, (206.72, 188.366, 265.342)), (' A 559  PHE  CD1', ' A 559  PHE  N  ', -0.445, (214.864, 164.257, 199.876)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.443, (171.276, 210.99, 180.599)), (' B 422  ASN  OD1', ' B 423  TYR  N  ', -0.442, (194.072, 216.333, 162.845)), (' C 509  ARG  O  ', ' C1444  ALA  HA ', -0.441, (223.347, 233.538, 147.233)), (' B1374  ILE  O  ', ' B1498  PHE  HA ', -0.439, (172.32, 233.204, 171.586)), (' B1551  GLN  HG3', ' C1423  ALA  HB3', -0.439, (213.799, 221.302, 144.865)), (' B1076  THR  O  ', ' B1097  SER  N  ', -0.435, (184.638, 199.494, 270.925)), (' A 445  VAL HG12', ' A 446  GLY  N  ', -0.434, (194.722, 178.312, 141.039)), (' B 445  VAL HG12', ' B 446  GLY  N  ', -0.432, (194.307, 209.519, 138.311)), (' B1542  CYS  SG ', ' B1547  PRO  HD3', -0.432, (214.652, 230.373, 156.667)), (' B  97  LYS  HB3', ' B 182  LYS  HB2', -0.43, (191.821, 137.556, 197.566)), (' C 522  ALA  HA ', ' C1405  THR  HA ', -0.428, (226.363, 218.834, 167.626)), (' B  85  PRO  HA ', ' B 237  ARG  HD3', -0.425, (182.077, 160.676, 181.747)), (' B 865  LEU  HG ', ' B 870  ILE HG13', -0.423, (221.552, 191.569, 232.481)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.422, (207.655, 184.433, 172.004)), (' B 490  PHE  CE2', ' B 492  LEU  HB3', -0.422, (194.448, 224.743, 151.697)), (' A 517  LEU  HG ', ' A 518  LEU  HG ', -0.422, (211.071, 177.121, 185.825)), (' B 517  LEU  HG ', ' B 518  LEU  HG ', -0.42, (179.159, 204.213, 182.487)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.417, (209.791, 166.68, 186.595)), (' A 916  LEU  O  ', ' A 920  GLN  N  ', -0.415, (221.606, 223.91, 260.665)), (' A 715  PRO  O  ', ' A1110  TYR  N  ', -0.415, (223.575, 209.668, 262.709)), (' C1375  PHE  CD2', ' C1411  SER  HB2', -0.414, (230.796, 230.701, 148.76)), (' A 359  SER  HA ', ' A 524  VAL  CG2', -0.411, (212.618, 167.722, 176.237)), (' B  41  LYS  HD2', ' B  41  LYS  N  ', -0.411, (206.746, 167.38, 191.999)), (' B 212  LEU HD22', ' B 217  PRO  HD3', -0.409, (189.554, 149.142, 203.951)), (' A 149  ASN  O  ', ' A 151  SER  N  ', -0.406, (270.71, 230.673, 173.886)), (' B 359  SER  HA ', ' B 524  VAL  CG2', -0.406, (171.714, 206.048, 171.454)), (' B 715  PRO  O  ', ' B1110  TYR  N  ', -0.405, (192.821, 193.261, 264.706)), (' C 593  GLY  O  ', ' C1347  PHE  N  ', -0.404, (200.212, 229.413, 203.156)), (' B 566  GLY  HA2', ' B1325  PHE  HB3', -0.404, (169.764, 209.196, 194.148)), (' B 379  CYS  HA ', ' B 432  CYS  HA ', -0.404, (188.893, 200.811, 170.773)), (' C 524  VAL HG23', ' C1386  SER  HA ', -0.403, (229.895, 223.716, 164.796)), (' A 896  ILE  O  ', ' A 901  GLN  NE2', -0.402, (208.643, 229.591, 253.366)), (' A 193  VAL  HB ', ' A 204  TYR  HB2', -0.402, (241.264, 217.093, 187.079)), (' B 435  ALA  HA ', ' B 509  ARG  O  ', -0.401, (189.277, 202.614, 159.385)), (' A 435  ALA  HA ', ' A 509  ARG  O  ', -0.4, (205.169, 182.071, 160.582)), (' B1311  LEU  O  ', ' B1311  LEU HD12', -0.4, (172.81, 249.897, 178.41)), (' A 294  ASP  HB2', ' A 295  PRO  CD ', -0.4, (240.526, 200.107, 208.343))]
data['cablam'] = [('B', '1322', 'ASP', 'check CA trace,carbonyls, peptide', ' ', ('', '', '')), ('B', '1355', 'PHE', 'check CA trace,carbonyls, peptide', ' ', ('', '', '')), ('B', '1356', 'ASN', 'check CA trace,carbonyls, peptide', ' ', ('', '', '')), ('B', '1357', 'ASP', 'check CA trace,carbonyls, peptide', ' ', ('', '', '')), ('B', '1415', 'HIS', 'check CA trace,carbonyls, peptide', ' ', ('', '', '')), ('B', '1416', 'LYS', 'check CA trace,carbonyls, peptide', ' ', ('', '', '')), ('B', '1417', 'ASN', 'check CA trace,carbonyls, peptide', ' ', ('', '', '')), ('B', '1418', 'ASN', 'check CA trace,carbonyls, peptide', ' ', ('', '', '')), ('B', '1419', 'LYS', 'check CA trace,carbonyls, peptide', ' ', ('', '', '')), ('B', '1421', 'TRP', ' beta sheet', ' ', ('', '', '')), ('B', '1424', 'SER', 'check CA trace,carbonyls, peptide', ' ', ('', '', '')), ('B', '1413', 'TYR', 'check CA trace', ' ', ('', '', '')), ('C', '1362', 'ASN', 'check CA trace,carbonyls, peptide', ' ', ('', '', '')), ('C', '1432', 'ASN', 'check CA trace,carbonyls, peptide', ' ', ('', '', '')), ('C', '1314', 'ARG', 'check CA trace', ' ', ('', '', '')), ('C', '1315', 'ASP', 'check CA trace', ' ', ('', '', '')), ('C', '1327', 'LEU', 'check CA trace', ' ', ('', '', '')), ('C', '1361', 'THR', 'check CA trace', ' ', ('', '', ''))]
data['rota'] = [('C', ' 822 ', 'LEU', 0.2169531072930394, (177.736, 211.577, 231.30300000000003))]
data['clusters'] = [('A', '1071', 1, 'smoc Outlier', (229.424, 208.642, 257.61400000000003)), ('A', '1111', 1, 'smoc Outlier', (221.768, 211.923, 267.954)), ('A', '1112', 1, 'smoc Outlier', (221.94899999999998, 210.14899999999997, 271.33)), ('A', '1113', 1, 'smoc Outlier', (218.829, 210.70399999999998, 273.42799999999994)), ('A', '1114', 1, 'smoc Outlier', (217.946, 209.218, 276.801)), ('A', '717', 1, 'smoc Outlier', (227.14899999999997, 212.546, 259.35200000000003)), ('A', '916', 1, 'backbone clash', (223.575, 209.668, 262.709)), ('A', '920', 1, 'backbone clash', (223.575, 209.668, 262.709)), ('A', '1033', 2, 'smoc Outlier', (209.389, 220.74099999999999, 243.154)), ('A', '1034', 2, 'smoc Outlier', (206.146, 221.67399999999998, 244.909)), ('A', '1050', 2, 'smoc Outlier', (212.706, 219.873, 247.48100000000002)), ('A', '1052', 2, 'smoc Outlier', (214.483, 223.618, 241.97899999999998)), ('A', '1054', 2, 'smoc Outlier', (215.35600000000002, 225.162, 235.65800000000002)), ('A', '1055', 2, 'smoc Outlier', (214.054, 225.85800000000003, 232.159)), ('A', '1060', 2, 'smoc Outlier', (213.129, 221.226, 231.692)), ('A', '736', 3, 'smoc Outlier', (204.873, 220.181, 205.955)), ('A', '738', 3, 'smoc Outlier', (202.238, 217.96800000000002, 201.05)), ('A', '742', 3, 'smoc Outlier', (205.58100000000002, 216.311, 196.598)), ('A', '856', 3, 'smoc Outlier', (210.829, 223.07, 199.976)), ('A', '858', 3, 'smoc Outlier', (208.565, 222.71499999999997, 205.417)), ('A', '517', 4, 'side-chain clash', (211.071, 177.121, 185.825)), ('A', '518', 4, 'side-chain clash\nsmoc Outlier', (211.071, 177.121, 185.825)), ('A', '519', 4, 'smoc Outlier', (207.162, 172.089, 187.43800000000002)), ('A', '520', 4, 'side-chain clash\nsmoc Outlier', (209.791, 166.68, 186.595)), ('A', '521', 4, 'side-chain clash', (209.791, 166.68, 186.595)), ('A', '136', 5, 'Bond angle:N:CA:CB', (256.08, 208.52, 166.48800000000003)), ('A', '14', 5, 'smoc Outlier', (259.399, 208.85600000000002, 164.005)), ('A', '15', 5, 'Bond angle:N:CA:CB', (260.639, 205.26299999999998, 163.843)), ('A', '161', 5, 'smoc Outlier', (255.05, 213.507, 161.61599999999999)), ('A', '1013', 6, 'smoc Outlier', (205.446, 207.836, 217.82200000000003)), ('A', '1014', 6, 'smoc Outlier', (208.212, 210.18, 218.98800000000003)), ('A', '1017', 6, 'smoc Outlier', (207.435, 209.592, 223.71899999999997)), ('A', '1019', 6, 'smoc Outlier', (204.21299999999997, 213.342, 225.849)), ('A', '261', 7, 'smoc Outlier', (266.867, 217.90800000000002, 182.311)), ('A', '262', 7, 'smoc Outlier', (266.10200000000003, 216.728, 185.82100000000003)), ('A', '263', 7, 'smoc Outlier', (262.36400000000003, 216.26, 186.35200000000003)), ('A', '69', 7, 'smoc Outlier', (270.51, 213.348, 181.373)), ('A', '417', 8, 'smoc Outlier', (188.45800000000003, 185.306, 164.315)), ('A', '422', 8, 'backbone clash', (191.836, 179.461, 165.942)), ('A', '423', 8, 'backbone clash', (191.836, 179.461, 165.942)), ('A', '455', 8, 'side-chain clash', (184.039, 183.685, 161.013)), ('A', '23', 9, 'smoc Outlier', (264.65000000000003, 201.44299999999998, 179.93200000000002)), ('A', '24', 9, 'side-chain clash', (262.081, 201.547, 184.342)), ('A', '25', 9, 'smoc Outlier', (261.23099999999994, 199.14399999999998, 185.595)), ('A', '276', 10, 'smoc Outlier', (233.765, 213.424, 201.7)), ('A', '277', 10, 'smoc Outlier', (234.5, 216.96200000000002, 200.484)), ('A', '288', 10, 'smoc Outlier', (238.777, 215.297, 201.447)), ('A', '330', 11, 'smoc Outlier', (222.185, 165.446, 182.83700000000002)), ('A', '331', 11, 'smoc Outlier', (224.194, 163.642, 180.171)), ('A', '333', 11, 'smoc Outlier', (223.67899999999997, 163.12800000000001, 173.507)), ('A', '267', 12, 'smoc Outlier', (250.762, 208.485, 186.917)), ('A', '268', 12, 'smoc Outlier', (247.871, 206.74399999999997, 188.648)), ('A', '269', 12, 'smoc Outlier', (244.493, 205.295, 187.73899999999998)), ('A', '197', 13, 'smoc Outlier', (232.563, 210.72, 180.453)), ('A', '198', 13, 'smoc Outlier', (229.61399999999998, 210.63299999999998, 178.026)), ('A', '199', 13, 'smoc Outlier', (231.871, 211.781, 175.19)), ('A', '1122', 14, 'smoc Outlier', (204.839, 199.36800000000002, 276.697)), ('A', '1123', 14, 'smoc Outlier', (203.74499999999998, 196.29899999999998, 274.727)), ('A', '1124', 14, 'smoc Outlier', (203.73999999999998, 192.654, 275.769)), ('A', '192', 15, 'backbone clash', (244.941, 218.387, 186.274)), ('A', '193', 15, 'side-chain clash', (241.264, 217.093, 187.079)), ('A', '204', 15, 'backbone clash\nside-chain clash', (241.264, 217.093, 187.079)), ('A', '427', 16, 'smoc Outlier', (195.894, 184.999, 178.88200000000003)), ('A', '428', 16, 'smoc Outlier', (198.96, 184.009, 180.931)), ('A', '429', 16, 'smoc Outlier', (200.694, 182.86700000000002, 177.724)), ('A', '144', 17, 'smoc Outlier', (269.41499999999996, 222.95600000000002, 170.20999999999998)), ('A', '145', 17, 'smoc Outlier', (272.779, 224.556, 170.935)), ('A', '247', 17, 'smoc Outlier', (274.46999999999997, 222.132, 174.131)), ('A', '970', 18, 'smoc Outlier', (211.804, 206.31, 193.651)), ('A', '971', 18, 'smoc Outlier', (212.124, 204.26999999999998, 190.45600000000002)), ('A', '973', 18, 'smoc Outlier', (213.975, 208.22, 185.401)), ('A', '1041', 19, 'smoc Outlier', (214.212, 207.333, 243.81)), ('A', '1042', 19, 'smoc Outlier', (211.585, 209.212, 241.788)), ('A', '1045', 19, 'smoc Outlier', (218.95800000000003, 209.12, 244.96200000000002)), ('A', '217', 20, 'smoc Outlier', (254.607, 215.24299999999997, 199.35500000000002)), ('A', '218', 20, 'smoc Outlier', (251.961, 214.942, 202.059)), ('A', '1092', 21, 'smoc Outlier', (210.191, 206.567, 266.96999999999997)), ('A', '1094', 21, 'smoc Outlier', (216.024, 202.847, 267.118)), ('A', '988', 22, 'smoc Outlier', (204.88800000000003, 208.66299999999998, 179.68)), ('A', '990', 22, 'smoc Outlier', (202.403, 210.59, 184.071)), ('A', '676', 23, 'smoc Outlier', (246.93800000000002, 201.834, 229.58100000000002)), ('A', '689', 23, 'smoc Outlier', (251.511, 202.43, 226.222)), ('A', '379', 24, 'side-chain clash', (207.655, 184.433, 172.004)), ('A', '432', 24, 'side-chain clash', (207.655, 184.433, 172.004)), ('A', '368', 25, 'smoc Outlier', (217.313, 178.918, 164.76999999999998)), ('A', '371', 25, 'smoc Outlier', (219.903, 180.28, 159.48800000000003)), ('A', '826', 26, 'smoc Outlier', (221.859, 222.718, 223.89600000000002)), ('A', '827', 26, 'smoc Outlier', (221.02, 224.389, 220.586)), ('A', '294', 27, 'side-chain clash', (240.526, 200.107, 208.343)), ('A', '295', 27, 'side-chain clash\nsmoc Outlier', (240.526, 200.107, 208.343)), ('A', '705', 28, 'smoc Outlier', (228.01, 194.33100000000002, 254.295)), ('A', '706', 28, 'smoc Outlier', (228.51, 193.369, 257.93499999999995)), ('A', '189', 29, 'side-chain clash', (252.277, 220.898, 190.329)), ('A', '190', 29, 'smoc Outlier', (251.668, 220.871, 187.725)), ('A', '619', 30, 'smoc Outlier', (237.77899999999997, 186.52100000000002, 206.708)), ('A', '620', 30, 'smoc Outlier', (240.80200000000002, 188.054, 208.526)), ('A', '528', 31, 'smoc Outlier', (226.136, 173.69, 178.359)), ('A', '529', 31, 'smoc Outlier', (229.14, 171.606, 179.394)), ('A', '445', 32, 'backbone clash\nRamachandran\nsmoc Outlier', (197.01, 178.241, 141.832)), ('A', '446', 32, 'backbone clash', (194.722, 178.312, 141.039)), ('A', '772', 33, 'smoc Outlier', (199.003, 221.06, 218.954)), ('A', '776', 33, 'smoc Outlier', (199.761, 220.91, 225.24399999999997)), ('A', '389', 34, 'smoc Outlier', (220.762, 180.10299999999998, 179.23999999999998)), ('A', '390', 34, 'smoc Outlier', (217.38400000000001, 178.89200000000002, 180.564)), ('A', '785', 35, 'smoc Outlier', (199.834, 227.66299999999998, 238.813)), ('A', '786', 35, 'smoc Outlier', (197.512, 230.39700000000002, 237.537)), ('A', '896', 36, 'side-chain clash', (208.643, 229.591, 253.366)), ('A', '901', 36, 'side-chain clash', (208.643, 229.591, 253.366)), ('A', '435', 37, 'backbone clash', (205.169, 182.071, 160.582)), ('A', '509', 37, 'backbone clash', (205.169, 182.071, 160.582)), ('A', '569', 38, 'smoc Outlier', (209.755, 177.702, 205.061)), ('A', '571', 38, 'smoc Outlier', (209.889, 178.624, 199.646)), ('A', '255', 39, 'smoc Outlier', (267.6, 213.363, 166.98100000000002)), ('A', '257', 39, 'smoc Outlier', (271.504, 212.009, 170.84)), ('A', '731', 40, 'smoc Outlier', (209.51399999999998, 218.77899999999997, 220.189)), ('A', '732', 40, 'smoc Outlier', (210.029, 220.846, 217.048)), ('A', '501', 41, 'side-chain clash', (196.312, 187.314, 149.186)), ('A', '505', 41, 'side-chain clash', (196.312, 187.314, 149.186)), ('A', '1100', 42, 'smoc Outlier', (227.732, 201.797, 278.258)), ('A', '1101', 42, 'smoc Outlier', (224.266, 203.383, 278.28999999999996)), ('A', '149', 43, 'backbone clash', (270.71, 230.673, 173.886)), ('A', '151', 43, 'backbone clash', (270.71, 230.673, 173.886)), ('A', '40', 44, 'smoc Outlier', (231.10999999999999, 219.547, 188.664)), ('A', '41', 44, 'smoc Outlier', (229.79399999999998, 223.11299999999997, 188.446)), ('A', '324', 45, 'smoc Outlier', (233.341, 179.751, 190.80700000000002)), ('A', '325', 45, 'smoc Outlier', (230.38500000000002, 178.694, 188.67499999999998)), ('A', '471', 46, 'smoc Outlier', (177.446, 172.595, 164.059)), ('A', '482', 46, 'smoc Outlier', (171.94899999999998, 171.85100000000003, 160.87800000000001)), ('A', '359', 47, 'side-chain clash', (212.618, 167.722, 176.237)), ('A', '524', 47, 'side-chain clash', (212.618, 167.722, 176.237)), ('B', '1413', 1, 'cablam CA Geom Outlier\nsmoc Outlier', (149.86200000000002, 242.80700000000002, 166.725)), ('B', '1414', 1, 'smoc Outlier', (146.816, 244.994, 167.372)), ('B', '1418', 1, 'cablam Outlier\nsmoc Outlier', (139.453, 240.092, 170.83)), ('B', '1507', 1, 'smoc Outlier', (146.817, 248.187, 170.905)), ('B', '517', 2, 'side-chain clash', (179.159, 204.213, 182.487)), ('B', '518', 2, 'side-chain clash\nsmoc Outlier', (179.159, 204.213, 182.487)), ('B', '519', 2, 'smoc Outlier', (176.708, 210.236, 183.24399999999997)), ('B', '520', 2, 'side-chain clash', (171.276, 210.99, 180.599)), ('B', '521', 2, 'side-chain clash\nsmoc Outlier', (171.276, 210.99, 180.599)), ('B', '1301', 3, 'smoc Outlier', (162.79299999999998, 239.71899999999997, 158.28)), ('B', '1302', 3, 'Bond angle:N:CA:CB\nsmoc Outlier', (165.58100000000002, 242.24099999999999, 157.726)), ('B', '1303', 3, 'smoc Outlier', (163.757, 245.01299999999998, 159.617)), ('B', '1405', 3, 'Bond angle:N:CA:CB', (169.002, 239.156, 162.846)), ('B', '267', 4, 'smoc Outlier', (184.88700000000003, 156.36800000000002, 192.60399999999998)), ('B', '268', 4, 'smoc Outlier', (184.752, 160.001, 193.69299999999998)), ('B', '269', 4, 'smoc Outlier', (185.03, 163.47299999999998, 192.20899999999997)), ('B', '271', 4, 'smoc Outlier', (187.444, 169.401, 193.44899999999998)), ('B', '781', 5, 'smoc Outlier', (215.86, 199.026, 234.96200000000002)), ('B', '782', 5, 'smoc Outlier', (218.178, 196.097, 235.67899999999997)), ('B', '865', 5, 'side-chain clash', (221.552, 191.569, 232.481)), ('B', '870', 5, 'side-chain clash', (221.552, 191.569, 232.481)), ('B', '136', 6, 'Bond angle:N:CA:CB', (184.091, 147.172, 172.93)), ('B', '14', 6, 'smoc Outlier', (183.92600000000002, 142.24699999999999, 170.978)), ('B', '15', 6, 'Bond angle:N:CA:CB', (180.30200000000002, 143.138, 170.23999999999998)), ('B', '24', 7, 'side-chain clash', (173.507, 147.639, 189.079)), ('B', '25', 7, 'smoc Outlier', (171.684, 151.785, 191.222)), ('B', '27', 7, 'smoc Outlier', (174.79, 153.44299999999998, 195.91899999999998)), ('B', '1310', 8, 'smoc Outlier', (171.196, 251.80800000000002, 174.0)), ('B', '1311', 8, 'smoc Outlier', (171.907, 251.934, 177.73899999999998)), ('B', '1312', 8, 'smoc Outlier', (174.96800000000002, 251.21599999999998, 179.89000000000001)), ('B', '261', 9, 'smoc Outlier', (184.99200000000002, 137.36, 191.98600000000002)), ('B', '262', 9, 'smoc Outlier', (183.977, 139.25, 195.102)), ('B', '263', 9, 'smoc Outlier', (185.61499999999998, 142.68200000000002, 195.201)), ('B', '1492', 10, 'smoc Outlier', (176.38200000000003, 218.77499999999998, 168.959)), ('B', '1493', 10, 'smoc Outlier', (177.405, 222.371, 168.22299999999998)), ('B', '1494', 10, 'smoc Outlier', (179.51899999999998, 225.04899999999998, 169.88800000000003)), ('B', '197', 11, 'smoc Outlier', (195.26, 169.77599999999998, 183.77599999999998)), ('B', '198', 11, 'smoc Outlier', (196.542, 171.976, 180.92800000000003)), ('B', '199', 11, 'smoc Outlier', (197.259, 168.853, 178.88200000000003)), ('B', '427', 12, 'smoc Outlier', (195.123, 212.124, 176.591)), ('B', '428', 12, 'smoc Outlier', (192.476, 210.292, 178.651)), ('B', '429', 12, 'smoc Outlier', (190.672, 209.13899999999998, 175.48800000000003)), ('B', '448', 13, 'smoc Outlier', (190.945, 212.025, 145.696)), ('B', '449', 13, 'smoc Outlier', (190.57899999999998, 215.695, 146.635)), ('B', '450', 13, 'smoc Outlier', (187.48100000000002, 215.168, 148.8)), ('B', '1345', 14, 'smoc Outlier', (158.32600000000002, 250.835, 175.17899999999997)), ('B', '1514', 14, 'smoc Outlier', (155.82700000000003, 245.283, 178.278)), ('B', '1515', 14, 'smoc Outlier', (157.566, 246.29, 181.485)), ('B', '736', 15, 'smoc Outlier', (217.226, 193.35700000000003, 209.627)), ('B', '854', 15, 'smoc Outlier', (217.72299999999998, 183.765, 210.067)), ('B', '858', 15, 'smoc Outlier', (217.787, 188.82600000000002, 209.845)), ('B', '501', 16, 'side-chain clash', (200.495, 205.237, 148.265)), ('B', '503', 16, 'smoc Outlier', (199.963, 200.11399999999998, 151.80700000000002)), ('B', '505', 16, 'side-chain clash', (200.495, 205.237, 148.265)), ('B', '1052', 17, 'smoc Outlier', (212.183, 190.35100000000003, 246.266)), ('B', '1054', 17, 'smoc Outlier', (213.846, 187.638, 240.542)), ('B', '1055', 17, 'smoc Outlier', (215.45800000000003, 187.60999999999999, 237.10399999999998)), ('B', '212', 18, 'side-chain clash', (189.554, 149.142, 203.951)), ('B', '217', 18, 'side-chain clash', (189.554, 149.142, 203.951)), ('B', '1146', 19, 'smoc Outlier', (198.607, 208.593, 294.683)), ('B', '1147', 19, 'smoc Outlier', (201.74499999999998, 206.448, 295.048)), ('B', '490', 20, 'side-chain clash', (194.448, 224.743, 151.697)), ('B', '492', 20, 'side-chain clash', (194.448, 224.743, 151.697)), ('B', '814', 21, 'smoc Outlier', (224.22899999999998, 182.15800000000002, 239.248)), ('B', '815', 21, 'smoc Outlier', (220.465, 181.93200000000002, 239.73)), ('B', '422', 22, 'backbone clash', (194.072, 216.333, 162.845)), ('B', '423', 22, 'backbone clash', (194.072, 216.333, 162.845)), ('B', '528', 23, 'smoc Outlier', (168.561, 192.078, 175.27299999999997)), ('B', '529', 23, 'smoc Outlier', (164.955, 191.23399999999998, 176.124)), ('B', '1391', 24, 'Bond angle:C', (155.627, 230.46, 169.277)), ('B', '1392', 24, 'Bond angle:N:CA', (152.784, 230.22, 171.88700000000003)), ('B', '294', 25, 'side-chain clash\nsmoc Outlier', (182.545, 172.612, 210.794)), ('B', '295', 25, 'side-chain clash\nsmoc Outlier', (182.545, 172.612, 210.794)), ('B', '705', 26, 'smoc Outlier', (178.261, 195.501, 254.24399999999997)), ('B', '706', 26, 'smoc Outlier', (176.62, 195.879, 257.65000000000003)), ('B', '144', 27, 'smoc Outlier', (189.505, 129.82100000000003, 180.60299999999998)), ('B', '145', 27, 'smoc Outlier', (189.37, 126.224, 181.85800000000003)), ('B', '1486', 28, 'smoc Outlier', (164.349, 220.732, 182.11599999999999)), ('B', '1487', 28, 'smoc Outlier', (165.531, 218.83, 179.025)), ('B', '237', 29, 'side-chain clash', (182.077, 160.676, 181.747)), ('B', '85', 29, 'side-chain clash', (182.077, 160.676, 181.747)), ('B', '379', 30, 'side-chain clash', (188.893, 200.811, 170.773)), ('B', '432', 30, 'side-chain clash', (188.893, 200.811, 170.773)), ('B', '799', 31, 'smoc Outlier', (212.654, 183.364, 260.441)), ('B', '801', 31, 'smoc Outlier', (213.57299999999998, 180.804, 254.318)), ('B', '359', 32, 'side-chain clash\nbackbone clash', (169.764, 209.196, 194.148)), ('B', '524', 32, 'side-chain clash\nbackbone clash', (169.764, 209.196, 194.148)), ('B', '1014', 33, 'smoc Outlier', (205.759, 197.433, 220.61899999999997)), ('B', '1017', 33, 'smoc Outlier', (205.072, 199.26, 225.035)), ('B', '916', 34, 'backbone clash', (206.72, 188.366, 265.342)), ('B', '920', 34, 'backbone clash', (206.72, 188.366, 265.342)), ('B', '581', 35, 'smoc Outlier', (158.348, 200.454, 184.484)), ('B', '582', 35, 'smoc Outlier', (159.27499999999998, 203.57399999999998, 186.42600000000002)), ('B', '445', 36, 'backbone clash\nRamachandran\nsmoc Outlier', (192.979, 207.81, 139.221)), ('B', '446', 36, 'backbone clash', (194.307, 209.519, 138.311)), ('B', '826', 37, 'smoc Outlier', (209.93, 180.82500000000002, 229.496)), ('B', '827', 37, 'smoc Outlier', (211.993, 180.155, 226.374)), ('B', '642', 38, 'smoc Outlier', (170.313, 177.936, 217.218)), ('B', '652', 38, 'smoc Outlier', (176.221, 175.232, 218.32500000000002)), ('B', '435', 39, 'backbone clash', (189.277, 202.614, 159.385)), ('B', '509', 39, 'backbone clash', (189.277, 202.614, 159.385)), ('B', '619', 40, 'smoc Outlier', (170.04299999999998, 182.323, 207.312)), ('B', '620', 40, 'smoc Outlier', (170.61899999999997, 179.092, 209.317)), ('B', '331', 41, 'smoc Outlier', (161.49, 199.278, 174.97)), ('B', '333', 41, 'smoc Outlier', (162.54399999999998, 198.626, 168.372)), ('B', '177', 42, 'smoc Outlier', (201.01, 139.172, 189.135)), ('B', '178', 42, 'smoc Outlier', (198.948, 136.485, 190.873)), ('B', '255', 43, 'smoc Outlier', (181.41899999999998, 134.503, 176.44899999999998)), ('B', '257', 43, 'smoc Outlier', (178.12800000000001, 133.406, 180.813)), ('B', '971', 44, 'smoc Outlier', (201.95700000000002, 192.12800000000001, 192.342)), ('B', '973', 44, 'smoc Outlier', (204.90800000000002, 187.82000000000002, 188.156)), ('B', '182', 45, 'side-chain clash', (191.821, 137.556, 197.566)), ('B', '97', 45, 'side-chain clash', (191.821, 137.556, 197.566)), ('B', '731', 46, 'smoc Outlier', (212.839, 193.011, 223.73999999999998)), ('B', '732', 46, 'smoc Outlier', (214.849, 190.83200000000002, 221.36800000000002)), ('B', '227', 47, 'smoc Outlier', (204.284, 158.937, 186.272)), ('B', '229', 47, 'smoc Outlier', (201.84, 161.499, 180.976)), ('B', '40', 48, 'smoc Outlier', (204.58100000000002, 168.262, 193.16299999999998)), ('B', '41', 48, 'backbone clash\nsmoc Outlier', (206.746, 167.38, 191.999)), ('B', '1100', 49, 'smoc Outlier', (183.55800000000002, 195.43, 278.832)), ('B', '1101', 49, 'smoc Outlier', (186.261, 198.11599999999999, 278.693)), ('B', '554', 50, 'smoc Outlier', (161.255, 199.096, 198.454)), ('B', '555', 50, 'smoc Outlier', (162.706, 202.566, 199.009)), ('B', '324', 51, 'smoc Outlier', (169.74399999999997, 185.222, 188.945)), ('B', '325', 51, 'smoc Outlier', (170.602, 187.80200000000002, 186.29899999999998)), ('B', '1041', 52, 'smoc Outlier', (197.95800000000003, 198.404, 244.54899999999998)), ('B', '1045', 52, 'smoc Outlier', (197.20499999999998, 193.623, 246.73499999999999)), ('B', '356', 53, 'smoc Outlier', (177.412, 211.35500000000002, 163.93)), ('B', '357', 53, 'smoc Outlier', (175.08700000000002, 210.92800000000003, 166.90800000000002)), ('C', '1050', 1, 'smoc Outlier', (188.94299999999998, 210.39700000000002, 248.48100000000002)), ('C', '1052', 1, 'smoc Outlier', (184.43, 209.162, 243.637)), ('C', '1054', 1, 'smoc Outlier', (181.64299999999997, 208.129, 237.724)), ('C', '1055', 1, 'smoc Outlier', (181.323, 206.099, 234.537)), ('C', '603', 2, 'smoc Outlier', (176.23399999999998, 230.65, 215.965)), ('C', '604', 2, 'smoc Outlier', (178.27499999999998, 233.416, 217.642)), ('C', '854', 3, 'smoc Outlier', (178.79399999999998, 198.754, 207.70399999999998)), ('C', '856', 3, 'smoc Outlier', (181.523, 198.445, 202.989)), ('C', '731', 4, 'smoc Outlier', (188.278, 203.26, 222.01899999999998)), ('C', '732', 4, 'smoc Outlier', (185.566, 202.156, 219.60399999999998)), ('C', '971', 5, 'smoc Outlier', (195.638, 206.79399999999998, 189.437)), ('C', '973', 5, 'smoc Outlier', (190.547, 205.342, 185.405)), ('C', '790', 6, 'smoc Outlier', (177.373, 197.665, 248.076)), ('C', '791', 6, 'smoc Outlier', (176.07399999999998, 199.976, 250.77899999999997)), ('C', '799', 7, 'smoc Outlier', (175.342, 214.477, 256.739)), ('C', '801', 7, 'smoc Outlier', (174.21099999999998, 213.71699999999998, 250.225)), ('C', '1111', 8, 'smoc Outlier', (193.87800000000001, 226.23299999999998, 266.362)), ('C', '1113', 8, 'smoc Outlier', (197.029, 225.318, 271.874)), ('C', '916', 9, 'backbone clash\nside-chain clash', (229.895, 223.716, 164.796)), ('C', '920', 9, 'backbone clash\nside-chain clash', (229.895, 223.716, 164.796)), ('C', '528', 10, 'smoc Outlier', (218.914, 231.95200000000003, 172.26299999999998)), ('C', '529', 10, 'smoc Outlier', (217.76999999999998, 235.49800000000002, 172.993)), ('C', '944', 11, 'smoc Outlier', (183.42800000000003, 219.078, 229.999)), ('C', '945', 11, 'smoc Outlier', (183.915, 215.518, 228.689)), ('C', '1100', 12, 'smoc Outlier', (200.687, 238.034, 272.727)), ('C', '1101', 12, 'smoc Outlier', (201.096, 234.364, 273.671))]
data['rama'] = [('A', ' 445 ', 'VAL', 0.017950951477123587, (197.01, 178.241, 141.832)), ('B', ' 445 ', 'VAL', 0.016933285103971074, (192.979, 207.81, 139.221))]
data['smoc'] = [('A', 14, u'GLN', 0.7339498423524342, (259.399, 208.85600000000002, 164.005)), ('A', 23, u'GLN', 0.710193404749344, (264.65000000000003, 201.44299999999998, 179.93200000000002)), ('A', 25, u'PRO', 0.7155261076939098, (261.23099999999994, 199.14399999999998, 185.595)), ('A', 34, u'ARG', 0.7245241228675191, (246.31, 213.297, 195.414)), ('A', 40, u'ASP', 0.7970068078358733, (231.10999999999999, 219.547, 188.664)), ('A', 41, u'LYS', 0.7851843998054092, (229.79399999999998, 223.11299999999997, 188.446)), ('A', 69, u'HIS', 0.7159567426059121, (270.51, 213.348, 181.373)), ('A', 87, u'ASN', 0.7950921238913118, (240.833, 203.56, 180.853)), ('A', 144, u'TYR', 0.6266427140155294, (269.41499999999996, 222.95600000000002, 170.20999999999998)), ('A', 145, u'TYR', 0.5435135226403082, (272.779, 224.556, 170.935)), ('A', 161, u'SER', 0.7866223365885098, (255.05, 213.507, 161.61599999999999)), ('A', 165, u'ASN', 0.7134397006436328, (241.333, 214.815, 158.71699999999998)), ('A', 173, u'GLN', 0.7579240577096666, (245.548, 233.064, 174.092)), ('A', 177, u'MET', 0.7130610566603469, (256.32, 230.16, 178.692)), ('A', 185, u'ASN', 0.7337545145016674, (264.34700000000004, 223.142, 194.054)), ('A', 190, u'ARG', 0.7819754228804966, (251.668, 220.871, 187.725)), ('A', 197, u'ILE', 0.7766729008296157, (232.563, 210.72, 180.453)), ('A', 198, u'ASP', 0.6417060063852197, (229.61399999999998, 210.63299999999998, 178.026)), ('A', 199, u'GLY', 0.7655748818222524, (231.871, 211.781, 175.19)), ('A', 217, u'PRO', 0.734590699668319, (254.607, 215.24299999999997, 199.35500000000002)), ('A', 218, u'GLN', 0.6791984158887152, (251.961, 214.942, 202.059)), ('A', 227, u'VAL', 0.713929303240499, (238.165, 223.39600000000002, 179.618)), ('A', 240, u'THR', 0.756363290657149, (253.064, 212.39100000000002, 178.282)), ('A', 247, u'SER', 0.6253236139832967, (274.46999999999997, 222.132, 174.131)), ('A', 255, u'SER', 0.6697563067210058, (267.6, 213.363, 166.98100000000002)), ('A', 257, u'GLY', 0.7211924735353437, (271.504, 212.009, 170.84)), ('A', 261, u'GLY', 0.7000272558097552, (266.867, 217.90800000000002, 182.311)), ('A', 262, u'ALA', 0.6708305768697543, (266.10200000000003, 216.728, 185.82100000000003)), ('A', 263, u'ALA', 0.6952700308661848, (262.36400000000003, 216.26, 186.35200000000003)), ('A', 267, u'VAL', 0.7886172839115446, (250.762, 208.485, 186.917)), ('A', 268, u'GLY', 0.7888657085203066, (247.871, 206.74399999999997, 188.648)), ('A', 269, u'TYR', 0.7568837014604717, (244.493, 205.295, 187.73899999999998)), ('A', 276, u'LEU', 0.7754426421880641, (233.765, 213.424, 201.7)), ('A', 277, u'LEU', 0.768238028899831, (234.5, 216.96200000000002, 200.484)), ('A', 288, u'ALA', 0.7399429788197123, (238.777, 215.297, 201.447)), ('A', 292, u'ALA', 0.7581047048679497, (237.405, 203.288, 201.162)), ('A', 295, u'PRO', 0.7943624516771433, (237.329, 200.572, 208.758)), ('A', 309, u'GLU', 0.7421450422710055, (232.811, 209.67499999999998, 218.129)), ('A', 314, u'GLN', 0.7739120859882473, (227.631, 198.96, 212.32700000000003)), ('A', 324, u'GLU', 0.7157818115165153, (233.341, 179.751, 190.80700000000002)), ('A', 325, u'SER', 0.7384760437848295, (230.38500000000002, 178.694, 188.67499999999998)), ('A', 330, u'PRO', 0.7706269217022854, (222.185, 165.446, 182.83700000000002)), ('A', 331, u'ASN', 0.7134796619247415, (224.194, 163.642, 180.171)), ('A', 333, u'THR', 0.7307401022363308, (223.67899999999997, 163.12800000000001, 173.507)), ('A', 357, u'ARG', 0.7013987890363991, (206.525, 167.303, 171.814)), ('A', 368, u'LEU', 0.673552486452592, (217.313, 178.918, 164.76999999999998)), ('A', 371, u'SER', 0.605168104354811, (219.903, 180.28, 159.48800000000003)), ('A', 377, u'PHE', 0.7447734921337608, (209.792, 186.629, 165.568)), ('A', 389, u'ASP', 0.7358044866060722, (220.762, 180.10299999999998, 179.23999999999998)), ('A', 390, u'LEU', 0.7495773312132432, (217.38400000000001, 178.89200000000002, 180.564)), ('A', 408, u'ARG', 0.6753717830045102, (198.64, 189.924, 164.47)), ('A', 417, u'LYS', 0.7379129279415695, (188.45800000000003, 185.306, 164.315)), ('A', 427, u'ASP', 0.5263762059384499, (195.894, 184.999, 178.88200000000003)), ('A', 428, u'ASP', 0.482131834232931, (198.96, 184.009, 180.931)), ('A', 429, u'PHE', 0.6408544046461988, (200.694, 182.86700000000002, 177.724)), ('A', 445, u'VAL', 0.6127018290091202, (197.01, 178.24099999999999, 141.83200000000002)), ('A', 450, u'ASN', 0.6408839919539873, (193.999, 171.731, 152.912)), ('A', 471, u'GLU', 0.6535465066660678, (177.446, 172.595, 164.059)), ('A', 477, u'SER', 0.6242443867426345, (166.92800000000003, 183.448, 167.303)), ('A', 482, u'GLY', 0.6584442792749721, (171.94899999999998, 171.85100000000003, 160.87800000000001)), ('A', 518, u'LEU', 0.6754947038189614, (210.154, 174.401, 186.92700000000002)), ('A', 519, u'HIS', 0.6109269383390754, (207.162, 172.089, 187.43800000000002)), ('A', 520, u'ALA', 0.698223334130495, (209.309, 168.946, 187.048)), ('A', 528, u'LYS', 0.7192697305695677, (226.136, 173.69, 178.359)), ('A', 529, u'LYS', 0.670854133807275, (229.14, 171.606, 179.394)), ('A', 532, u'ASN', 0.773285287666063, (232.975, 169.377, 188.575)), ('A', 554, u'GLU', 0.7851553520362243, (226.056, 166.836, 201.692)), ('A', 569, u'ILE', 0.7762404241354764, (209.755, 177.702, 205.061)), ('A', 571, u'ASP', 0.7707432083085323, (209.889, 178.624, 199.646)), ('A', 591, u'SER', 0.7922128430673391, (227.19299999999998, 186.03, 203.39600000000002)), ('A', 604, u'THR', 0.7762226408586206, (241.45700000000002, 209.76399999999998, 221.517)), ('A', 619, u'GLU', 0.7197887720989254, (237.77899999999997, 186.52100000000002, 206.708)), ('A', 620, u'VAL', 0.6415077555917044, (240.80200000000002, 188.054, 208.526)), ('A', 646, u'ARG', 0.7269328270842536, (230.497, 186.151, 222.666)), ('A', 661, u'GLU', 0.7525858631072987, (233.672, 199.60399999999998, 233.654)), ('A', 676, u'THR', 0.7843800181802946, (246.93800000000002, 201.834, 229.58100000000002)), ('A', 689, u'SER', 0.7766692848248592, (251.511, 202.43, 226.222)), ('A', 699, u'LEU', 0.7354387055840397, (228.925, 195.40800000000002, 237.796)), ('A', 705, u'VAL', 0.7867734232912237, (228.01, 194.33100000000002, 254.295)), ('A', 706, u'ALA', 0.7691265959802299, (228.51, 193.369, 257.93499999999995)), ('A', 709, u'ASN', 0.7755201572564421, (221.061, 190.65, 264.751)), ('A', 717, u'ASN', 0.7868362686785996, (227.14899999999997, 212.546, 259.35200000000003)), ('A', 731, u'MET', 0.7803031900195952, (209.51399999999998, 218.77899999999997, 220.189)), ('A', 732, u'THR', 0.7891307429323028, (210.029, 220.846, 217.048)), ('A', 736, u'VAL', 0.716903798404729, (204.873, 220.181, 205.955)), ('A', 738, u'CYS', 0.7507127471022264, (202.238, 217.96800000000002, 201.05)), ('A', 742, u'ILE', 0.7697743186082225, (205.58100000000002, 216.311, 196.598)), ('A', 745, u'ASP', 0.6853172772671383, (205.48000000000002, 224.107, 190.907)), ('A', 748, u'GLU', 0.760488602098179, (199.972, 218.08, 186.24299999999997)), ('A', 759, u'PHE', 0.7408389899112952, (196.548, 211.2, 201.589)), ('A', 772, u'VAL', 0.8031460852801706, (199.003, 221.06, 218.954)), ('A', 776, u'LYS', 0.8046145724287421, (199.761, 220.91, 225.24399999999997)), ('A', 782, u'PHE', 0.7638098938591186, (205.31, 224.434, 232.83700000000002)), ('A', 785, u'VAL', 0.776820555492569, (199.834, 227.66299999999998, 238.813)), ('A', 786, u'LYS', 0.6614451672883864, (197.512, 230.39700000000002, 237.537)), ('A', 793, u'PRO', 0.6997336244443799, (212.656, 242.816, 248.02100000000002)), ('A', 796, u'ASP', 0.7481713170081447, (216.318, 235.642, 253.121)), ('A', 799, u'GLY', 0.8003035942957474, (221.759, 230.431, 254.348)), ('A', 809, u'PRO', 0.7240871681277177, (216.864, 240.463, 235.14299999999997)), ('A', 826, u'VAL', 0.7754015940953443, (221.859, 222.718, 223.89600000000002)), ('A', 827, u'THR', 0.6330515199271743, (221.02, 224.389, 220.586)), ('A', 856, u'ASN', 0.7391708247647948, (210.829, 223.07, 199.976)), ('A', 858, u'LEU', 0.7266431165263985, (208.565, 222.71499999999997, 205.417)), ('A', 865, u'LEU', 0.7860249401189043, (204.592, 229.871, 224.946)), ('A', 890, u'ALA', 0.7832798315724325, (198.638, 222.518, 246.346)), ('A', 893, u'ALA', 0.7993244232071622, (199.694, 230.502, 248.995)), ('A', 938, u'LEU', 0.779173394555693, (226.843, 221.568, 233.112)), ('A', 945, u'LEU', 0.7783875343276042, (222.151, 217.49200000000002, 228.811)), ('A', 970, u'PHE', 0.7694040990275302, (211.804, 206.31, 193.651)), ('A', 971, u'GLY', 0.7443307929628419, (212.124, 204.26999999999998, 190.45600000000002)), ('A', 973, u'ILE', 0.743469800441127, (213.975, 208.22, 185.401)), ('A', 988, u'GLU', 0.7445719290450881, (204.88800000000003, 208.66299999999998, 179.68)), ('A', 990, u'GLU', 0.7576860030068006, (202.403, 210.59, 184.071)), ('A', 1005, u'GLN', 0.7703066044141307, (203.86, 209.38400000000001, 205.535)), ('A', 1013, u'ILE', 0.7797003671125765, (205.446, 207.836, 217.82200000000003)), ('A', 1014, u'ARG', 0.7699055821148695, (208.212, 210.18, 218.98800000000003)), ('A', 1017, u'GLU', 0.785863076790043, (207.435, 209.592, 223.71899999999997)), ('A', 1019, u'ARG', 0.78648950023923, (204.21299999999997, 213.342, 225.849)), ('A', 1033, u'VAL', 0.7924820851997788, (209.389, 220.74099999999999, 243.154)), ('A', 1034, u'LEU', 0.7713677020086237, (206.146, 221.67399999999998, 244.909)), ('A', 1041, u'ASP', 0.7412077544463848, (214.212, 207.333, 243.81)), ('A', 1042, u'PHE', 0.7900921347848601, (211.585, 209.212, 241.788)), ('A', 1045, u'LYS', 0.7244077042349579, (218.95800000000003, 209.12, 244.96200000000002)), ('A', 1050, u'MET', 0.7901867976848148, (212.706, 219.873, 247.48100000000002)), ('A', 1052, u'PHE', 0.7713619418990385, (214.483, 223.618, 241.97899999999998)), ('A', 1054, u'GLN', 0.7662928844016742, (215.35600000000002, 225.162, 235.65800000000002)), ('A', 1055, u'SER', 0.7506024788318777, (214.054, 225.85800000000003, 232.159)), ('A', 1060, u'VAL', 0.76905289558611, (213.129, 221.226, 231.692)), ('A', 1071, u'GLN', 0.7846265197968293, (229.424, 208.642, 257.61400000000003)), ('A', 1079, u'PRO', 0.8153864416883306, (214.4, 195.909, 269.34000000000003)), ('A', 1084, u'ASP', 0.8081745560638554, (209.72, 196.425, 284.953)), ('A', 1092, u'GLU', 0.7540617058809521, (210.191, 206.567, 266.96999999999997)), ('A', 1094, u'VAL', 0.794672002643463, (216.024, 202.847, 267.118)), ('A', 1100, u'THR', 0.8015446969288978, (227.732, 201.797, 278.258)), ('A', 1101, u'HIS', 0.7856893986390412, (224.266, 203.383, 278.28999999999996)), ('A', 1111, u'GLU', 0.7275343045865182, (221.768, 211.923, 267.954)), ('A', 1112, u'PRO', 0.7884965253094021, (221.94899999999998, 210.14899999999997, 271.33)), ('A', 1113, u'GLN', 0.7852551941581729, (218.829, 210.70399999999998, 273.42799999999994)), ('A', 1114, u'ILE', 0.7889484960537809, (217.946, 209.218, 276.801)), ('A', 1122, u'VAL', 0.8093989082102234, (204.839, 199.36800000000002, 276.697)), ('A', 1123, u'SER', 0.8020488443390966, (203.74499999999998, 196.29899999999998, 274.727)), ('A', 1124, u'GLY', 0.7796385119386426, (203.73999999999998, 192.654, 275.769)), ('A', 1136, u'THR', 0.7958609296479522, (216.67499999999998, 200.877, 282.894)), ('A', 1301, u'GLN', 0.8177139173420617, (182.85700000000003, 221.506, 191.64299999999997)), ('B', 14, u'GLN', 0.705424820629761, (183.92600000000002, 142.24699999999999, 170.978)), ('B', 25, u'PRO', 0.7106739085178981, (171.684, 151.785, 191.222)), ('B', 27, u'ALA', 0.7677930557207908, (174.79, 153.44299999999998, 195.91899999999998)), ('B', 34, u'ARG', 0.7655977317949335, (190.917, 160.117, 201.002)), ('B', 40, u'ASP', 0.780499641018323, (204.58100000000002, 168.262, 193.16299999999998)), ('B', 41, u'LYS', 0.770494528295761, (208.257, 167.277, 193.228)), ('B', 144, u'TYR', 0.5736787329352919, (189.505, 129.82100000000003, 180.60299999999998)), ('B', 145, u'TYR', 0.47671413937170526, (189.37, 126.224, 181.85800000000003)), ('B', 165, u'ASN', 0.7764227481584363, (197.39100000000002, 156.177, 165.292)), ('B', 173, u'GLN', 0.7112613899731849, (209.118, 146.272, 183.79899999999998)), ('B', 177, u'MET', 0.7188098180973697, (201.01, 139.172, 189.135)), ('B', 178, u'ASP', 0.6940271260882341, (198.948, 136.485, 190.873)), ('B', 197, u'ILE', 0.7284642712470538, (195.26, 169.77599999999998, 183.77599999999998)), ('B', 198, u'ASP', 0.6628956782446976, (196.542, 171.976, 180.92800000000003)), ('B', 199, u'GLY', 0.7633156486524797, (197.259, 168.853, 178.88200000000003)), ('B', 218, u'GLN', 0.6731113435375418, (189.433, 154.531, 208.476)), ('B', 227, u'VAL', 0.7236006302105819, (204.284, 158.937, 186.272)), ('B', 229, u'LEU', 0.7714376341432416, (201.84, 161.499, 180.976)), ('B', 239, u'GLN', 0.7931010121242181, (185.804, 152.64299999999997, 182.46)), ('B', 255, u'SER', 0.6523952610299966, (181.41899999999998, 134.503, 176.44899999999998)), ('B', 257, u'GLY', 0.6741874833709078, (178.12800000000001, 133.406, 180.813)), ('B', 261, u'GLY', 0.6688818656241928, (184.99200000000002, 137.36, 191.98600000000002)), ('B', 262, u'ALA', 0.6391065923670483, (183.977, 139.25, 195.102)), ('B', 263, u'ALA', 0.6530167907422256, (185.61499999999998, 142.68200000000002, 195.201)), ('B', 267, u'VAL', 0.7993866218366568, (184.88700000000003, 156.36800000000002, 192.60399999999998)), ('B', 268, u'GLY', 0.7837643091797718, (184.752, 160.001, 193.69299999999998)), ('B', 269, u'TYR', 0.7624925890851494, (185.03, 163.47299999999998, 192.20899999999997)), ('B', 271, u'GLN', 0.7833846452545509, (187.444, 169.401, 193.44899999999998)), ('B', 288, u'ALA', 0.7513943063787707, (196.18200000000002, 167.05100000000002, 206.075)), ('B', 292, u'ALA', 0.7519638073735203, (186.872, 174.177, 203.62)), ('B', 294, u'ASP', 0.7603830183537447, (183.942, 172.46, 208.88800000000003)), ('B', 295, u'PRO', 0.7736204921184983, (184.503, 175.632, 210.971)), ('B', 306, u'PHE', 0.7399834217984952, (196.846, 171.944, 213.167)), ('B', 314, u'GLN', 0.7822411363395114, (187.27499999999998, 185.499, 212.947)), ('B', 324, u'GLU', 0.7599083366127062, (169.74399999999997, 185.222, 188.945)), ('B', 325, u'SER', 0.7929516986721901, (170.602, 187.80200000000002, 186.29899999999998)), ('B', 331, u'ASN', 0.6619060177812591, (161.49, 199.278, 174.97)), ('B', 333, u'THR', 0.6893869728141265, (162.54399999999998, 198.626, 168.372)), ('B', 345, u'THR', 0.7147215542361027, (180.065, 205.708, 150.772)), ('B', 356, u'LYS', 0.7304129814451175, (177.412, 211.35500000000002, 163.93)), ('B', 357, u'ARG', 0.6696624050835802, (175.08700000000002, 210.92800000000003, 166.90800000000002)), ('B', 371, u'SER', 0.6201938342469481, (179.61599999999999, 189.942, 158.38800000000003)), ('B', 377, u'PHE', 0.6993747070818, (189.365, 196.684, 164.86700000000002)), ('B', 389, u'ASP', 0.6864303129800705, (177.553, 193.318, 176.365)), ('B', 408, u'ARG', 0.4899713626608977, (199.409, 205.602, 163.911)), ('B', 417, u'LYS', 0.7501048434658633, (201.292, 216.053, 161.96)), ('B', 427, u'ASP', 0.5145904380205293, (195.123, 212.124, 176.591)), ('B', 428, u'ASP', 0.3285613505994486, (192.476, 210.292, 178.651)), ('B', 429, u'PHE', 0.586289931584691, (190.672, 209.13899999999998, 175.48800000000003)), ('B', 440, u'ASN', 0.6661106003568085, (189.63899999999998, 199.57899999999998, 146.108)), ('B', 445, u'VAL', 0.6542739402532743, (192.97899999999998, 207.81, 139.221)), ('B', 448, u'ASN', 0.656391884495854, (190.945, 212.025, 145.696)), ('B', 449, u'TYR', 0.6034158064826927, (190.57899999999998, 215.695, 146.635)), ('B', 450, u'ASN', 0.6032160197770896, (187.48100000000002, 215.168, 148.8)), ('B', 458, u'LYS', 0.7604265162360012, (200.55100000000002, 227.748, 164.25)), ('B', 471, u'GLU', 0.596445388196085, (195.227, 231.296, 157.072)), ('B', 477, u'SER', 0.7037349587536456, (208.971, 237.335, 160.315)), ('B', 485, u'GLY', 0.6906797730814624, (206.35700000000003, 232.369, 150.123)), ('B', 503, u'VAL', 0.6416981653657724, (199.963, 200.11399999999998, 151.80700000000002)), ('B', 518, u'LEU', 0.6371506482086596, (176.965, 206.429, 183.297)), ('B', 519, u'HIS', 0.630416015930507, (176.708, 210.236, 183.24399999999997)), ('B', 521, u'PRO', 0.708088438088601, (170.21699999999998, 207.88200000000003, 181.068)), ('B', 528, u'LYS', 0.7147532106999518, (168.561, 192.078, 175.27299999999997)), ('B', 529, u'LYS', 0.6654607493938685, (164.955, 191.23399999999998, 176.124)), ('B', 554, u'GLU', 0.7433004401015109, (161.255, 199.096, 198.454)), ('B', 555, u'SER', 0.8028094979075557, (162.706, 202.566, 199.009)), ('B', 581, u'THR', 0.7757138867505334, (158.348, 200.454, 184.484)), ('B', 582, u'LEU', 0.7864477002893973, (159.27499999999998, 203.57399999999998, 186.42600000000002)), ('B', 603, u'ASN', 0.7445121028715295, (193.278, 169.1, 223.268)), ('B', 619, u'GLU', 0.6781257557696471, (170.04299999999998, 182.323, 207.312)), ('B', 620, u'VAL', 0.6028764320008018, (170.61899999999997, 179.092, 209.317)), ('B', 642, u'VAL', 0.6895133399318039, (170.313, 177.936, 217.218)), ('B', 646, u'ARG', 0.6833721045688969, (173.85600000000002, 190.44299999999998, 221.672)), ('B', 652, u'GLY', 0.7759332719860257, (176.221, 175.232, 218.32500000000002)), ('B', 661, u'GLU', 0.7624592714672733, (183.07399999999998, 183.86, 235.1)), ('B', 676, u'THR', 0.784862545583505, (178.541, 169.92100000000002, 231.026)), ('B', 699, u'LEU', 0.7560254699972648, (180.812, 190.70899999999997, 237.86100000000002)), ('B', 705, u'VAL', 0.8024019602221276, (178.261, 195.501, 254.24399999999997)), ('B', 706, u'ALA', 0.7623953015763011, (176.62, 195.879, 257.65000000000003)), ('B', 709, u'ASN', 0.7942714219529232, (177.92000000000002, 204.721, 263.07)), ('B', 731, u'MET', 0.7756893217256479, (212.839, 193.011, 223.73999999999998)), ('B', 732, u'THR', 0.7847091002003558, (214.849, 190.83200000000002, 221.36800000000002)), ('B', 736, u'VAL', 0.7013548424457497, (217.226, 193.35700000000003, 209.627)), ('B', 742, u'ILE', 0.7687123757857122, (214.697, 193.38600000000002, 199.61299999999997)), ('B', 745, u'ASP', 0.695915702382063, (221.983, 188.444, 195.77499999999998)), ('B', 759, u'PHE', 0.729117840622667, (214.20999999999998, 203.88100000000003, 202.74699999999999)), ('B', 765, u'ARG', 0.7608152267192553, (218.93800000000002, 202.58700000000002, 211.55100000000002)), ('B', 781, u'VAL', 0.7894621276830879, (215.86, 199.026, 234.96200000000002)), ('B', 782, u'PHE', 0.7660163668742471, (218.178, 196.097, 235.67899999999997)), ('B', 786, u'LYS', 0.6971786528084597, (226.63299999999998, 200.584, 241.56)), ('B', 793, u'PRO', 0.6613955362042704, (228.164, 183.164, 255.51)), ('B', 799, u'GLY', 0.7793441017179569, (212.654, 183.364, 260.441)), ('B', 801, u'ASN', 0.7344850908748455, (213.57299999999998, 180.804, 254.318)), ('B', 814, u'LYS', 0.7368156778149219, (224.22899999999998, 182.15800000000002, 239.248)), ('B', 815, u'ARG', 0.7589727735816435, (220.465, 181.93200000000002, 239.73)), ('B', 826, u'VAL', 0.7908226488803918, (209.93, 180.82500000000002, 229.496)), ('B', 827, u'THR', 0.6701665027484702, (211.993, 180.155, 226.374)), ('B', 854, u'LYS', 0.6781267958609195, (217.72299999999998, 183.765, 210.067)), ('B', 858, u'LEU', 0.7548289064541449, (217.787, 188.82600000000002, 209.845)), ('B', 945, u'LEU', 0.7702850415804772, (204.771, 183.701, 233.341)), ('B', 971, u'GLY', 0.7665940153035476, (201.95700000000002, 192.12800000000001, 192.342)), ('B', 973, u'ILE', 0.7609847999668589, (204.90800000000002, 187.82000000000002, 188.156)), ('B', 976, u'VAL', 0.7930133635176398, (212.30200000000002, 185.026, 192.712)), ('B', 988, u'GLU', 0.7577280504778633, (211.156, 194.292, 181.224)), ('B', 1014, u'ARG', 0.7535018973683633, (205.759, 197.433, 220.61899999999997)), ('B', 1017, u'GLU', 0.7479421187987179, (205.072, 199.26, 225.035)), ('B', 1041, u'ASP', 0.7400888575094239, (197.95800000000003, 198.404, 244.54899999999998)), ('B', 1045, u'LYS', 0.719050102938553, (197.20499999999998, 193.623, 246.73499999999999)), ('B', 1052, u'PHE', 0.7678120584793643, (212.183, 190.35100000000003, 246.266)), ('B', 1054, u'GLN', 0.7450591396651983, (213.846, 187.638, 240.542)), ('B', 1055, u'SER', 0.7273138677715983, (215.45800000000003, 187.60999999999999, 237.10399999999998)), ('B', 1074, u'ASN', 0.8032301524367608, (182.76999999999998, 193.788, 264.77099999999996)), ('B', 1079, u'PRO', 0.789144913724184, (184.721, 208.947, 267.524)), ('B', 1092, u'GLU', 0.708975649446587, (196.81, 206.85200000000003, 266.668)), ('B', 1100, u'THR', 0.7766641567709414, (183.55800000000002, 195.43, 278.832)), ('B', 1101, u'HIS', 0.7942761067162696, (186.261, 198.11599999999999, 278.693)), ('B', 1111, u'GLU', 0.7504139701964598, (195.465, 194.683, 269.862)), ('B', 1127, u'ASP', 0.7998724996875617, (179.14, 219.359, 273.39599999999996)), ('B', 1134, u'ASN', 0.8138653661221371, (181.363, 209.272, 278.15700000000004)), ('B', 1136, u'THR', 0.8231881348943836, (187.017, 206.889, 281.91499999999996)), ('B', 1146, u'ASP', 0.8033149618599681, (198.607, 208.593, 294.683)), ('B', 1147, u'SER', 0.7762848789277103, (201.74499999999998, 206.448, 295.048)), ('B', 1301, u'GLN', 0.6150529934942973, (162.79299999999998, 239.71899999999997, 158.28)), ('B', 1302, u'CYS', 0.49373373933782166, (165.58100000000002, 242.24099999999999, 157.726)), ('B', 1303, u'VAL', 0.5350436841177513, (163.757, 245.01299999999998, 159.617)), ('B', 1310, u'GLN', 0.6368183905551512, (171.196, 251.80800000000002, 174.0)), ('B', 1311, u'LEU', 0.6699101390724242, (171.907, 251.934, 177.73899999999998)), ('B', 1312, u'PRO', 0.6277963015875184, (174.96800000000002, 251.21599999999998, 179.89000000000001)), ('B', 1316, u'ARG', 0.7734789871556033, (171.578, 232.197, 192.689)), ('B', 1345, u'HIS', 0.6803161027090733, (158.32600000000002, 250.835, 175.17899999999997)), ('B', 1379, u'LEU', 0.7539842849790753, (175.812, 234.198, 164.994)), ('B', 1413, u'TYR', 0.5669907073131226, (149.86200000000002, 242.80700000000002, 166.725)), ('B', 1414, u'TYR', 0.5957411917028137, (146.816, 244.994, 167.372)), ('B', 1418, u'ASN', 0.6396023851387601, (139.453, 240.092, 170.83)), ('B', 1432, u'ALA', 0.6953064077017143, (166.77499999999998, 228.08800000000002, 158.268)), ('B', 1450, u'GLY', 0.6015873417736832, (149.724, 241.606, 179.824)), ('B', 1475, u'LYS', 0.7802653242027726, (162.941, 226.894, 187.618)), ('B', 1486, u'LEU', 0.7222380092517319, (164.349, 220.732, 182.11599999999999)), ('B', 1487, u'VAL', 0.676856354823551, (165.531, 218.83, 179.025)), ('B', 1492, u'GLY', 0.7117710243048826, (176.38200000000003, 218.77499999999998, 168.959)), ('B', 1493, u'ILE', 0.7444306177773715, (177.405, 222.371, 168.22299999999998)), ('B', 1494, u'ASN', 0.7246799401449254, (179.51899999999998, 225.04899999999998, 169.88800000000003)), ('B', 1507, u'SER', 0.6093600766992034, (146.817, 248.187, 170.905)), ('B', 1514, u'GLY', 0.5855451807933814, (155.82700000000003, 245.283, 178.278)), ('B', 1515, u'ALA', 0.6030623724552651, (157.566, 246.29, 181.485)), ('B', 1520, u'VAL', 0.7904399770350066, (172.623, 237.62800000000001, 183.075)), ('B', 1530, u'ASN', 0.7531809784425855, (163.102, 214.869, 200.85800000000003)), ('B', 1538, u'ALA', 0.681974438638432, (218.38400000000001, 242.883, 153.92600000000002)), ('B', 1544, u'GLY', 0.6986485909577863, (211.49, 222.60899999999998, 156.218)), ('C', 489, u'TYR', 0.6618757538670282, (231.39700000000002, 215.341, 126.573)), ('C', 496, u'GLY', 0.7429176030115847, (229.417, 232.88800000000003, 131.072)), ('C', 502, u'GLY', 0.639467097848447, (219.85700000000003, 238.623, 131.685)), ('C', 516, u'GLU', 0.7689669584134121, (223.784, 217.74099999999999, 160.25)), ('C', 528, u'LYS', 0.7201050432440103, (218.914, 231.95200000000003, 172.26299999999998)), ('C', 529, u'LYS', 0.6552158146220819, (217.76999999999998, 235.49800000000002, 172.993)), ('C', 537, u'LYS', 0.7965593479362624, (210.531, 239.45700000000002, 192.64899999999997)), ('C', 545, u'GLY', 0.781783349537821, (221.08800000000002, 225.23499999999999, 181.289)), ('C', 549, u'THR', 0.8005208752784494, (211.329, 229.281, 190.607)), ('C', 554, u'GLU', 0.7790529561266551, (222.10399999999998, 239.73499999999999, 195.06)), ('C', 581, u'THR', 0.7790014519449882, (227.417, 239.21599999999998, 183.893)), ('C', 603, u'ASN', 0.6782530792926271, (176.23399999999998, 230.65, 215.965)), ('C', 604, u'THR', 0.7112966442028101, (178.27499999999998, 233.416, 217.642)), ('C', 620, u'VAL', 0.5995644783888682, (196.157, 242.059, 200.56)), ('C', 652, u'GLY', 0.7556772032956487, (191.011, 241.597, 209.95000000000002)), ('C', 661, u'GLU', 0.7253689348238215, (193.69299999999998, 235.57399999999998, 229.227)), ('C', 676, u'THR', 0.7772318361395997, (183.725, 244.183, 222.45200000000003)), ('C', 699, u'LEU', 0.7097806933656846, (200.632, 234.379, 232.359)), ('C', 706, u'ALA', 0.7618385185460529, (204.976, 238.48100000000002, 251.768)), ('C', 709, u'ASN', 0.7724029636859573, (211.942, 234.787, 258.743)), ('C', 717, u'ASN', 0.7457299607117579, (189.46200000000002, 228.461, 257.4359999999999)), ('C', 731, u'MET', 0.7620705964083776, (188.278, 203.26, 222.01899999999998)), ('C', 732, u'THR', 0.7844065323240007, (185.566, 202.156, 219.60399999999998)), ('C', 736, u'VAL', 0.7038169036155238, (187.79299999999998, 196.348, 208.942)), ('C', 742, u'ILE', 0.7440013107314682, (190.296, 196.476, 198.71499999999997)), ('C', 745, u'ASP', 0.714796473793333, (183.148, 191.46800000000002, 194.502)), ('C', 759, u'PHE', 0.7255376587182649, (199.16899999999998, 192.212, 203.96800000000002)), ('C', 765, u'ARG', 0.7672934613557035, (195.383, 190.698, 213.1)), ('C', 772, u'VAL', 0.7661154497187069, (191.02100000000002, 193.09, 222.26899999999998)), ('C', 782, u'PHE', 0.7718787881803874, (187.168, 199.305, 235.509)), ('C', 786, u'LYS', 0.675333482941825, (186.607, 190.678, 241.96200000000002)), ('C', 790, u'LYS', 0.800221365053745, (177.373, 197.665, 248.076)), ('C', 791, u'THR', 0.7755091497197916, (176.07399999999998, 199.976, 250.77899999999997)), ('C', 795, u'LYS', 0.6979998579977149, (172.01299999999998, 205.632, 254.505)), ('C', 799, u'GLY', 0.757919127302941, (175.342, 214.477, 256.739)), ('C', 801, u'ASN', 0.7321086414106351, (174.21099999999998, 213.71699999999998, 250.225)), ('C', 809, u'PRO', 0.6889057345498856, (167.67299999999997, 201.646, 240.77899999999997)), ('C', 827, u'THR', 0.6571548561414273, (177.025, 209.62800000000001, 222.094)), ('C', 854, u'LYS', 0.6560829680743177, (178.79399999999998, 198.754, 207.70399999999998)), ('C', 856, u'ASN', 0.7172228271541252, (181.523, 198.445, 202.989)), ('C', 935, u'GLN', 0.786336775561406, (176.02, 218.672, 238.437)), ('C', 944, u'ALA', 0.7724516692010004, (183.42800000000003, 219.078, 229.999)), ('C', 945, u'LEU', 0.7562342779130518, (183.915, 215.518, 228.689)), ('C', 971, u'GLY', 0.7319144901425435, (195.638, 206.79399999999998, 189.437)), ('C', 973, u'ILE', 0.6987974477765959, (190.547, 205.342, 185.405)), ('C', 987, u'PRO', 0.7358205074439743, (195.041, 191.692, 180.753)), ('C', 1014, u'ARG', 0.7517042664337741, (196.324, 206.237, 218.99200000000002)), ('C', 1019, u'ARG', 0.76884038606927, (196.344, 202.64299999999997, 226.68800000000002)), ('C', 1034, u'LEU', 0.7844338559063931, (190.24399999999997, 202.82700000000003, 246.376)), ('C', 1045, u'LYS', 0.6908387196435523, (194.74599999999998, 220.29299999999998, 243.534)), ('C', 1050, u'MET', 0.7778740740293574, (188.94299999999998, 210.39700000000002, 248.48100000000002)), ('C', 1052, u'PHE', 0.7224177053884122, (184.43, 209.162, 243.637)), ('C', 1054, u'GLN', 0.7392858406561753, (181.64299999999997, 208.129, 237.724)), ('C', 1055, u'SER', 0.7085751057180487, (181.323, 206.099, 234.537)), ('C', 1079, u'PRO', 0.803064331764539, (211.554, 227.736, 265.018)), ('C', 1084, u'ASP', 0.7904286463933584, (214.38400000000001, 226.097, 280.99099999999993)), ('C', 1092, u'GLU', 0.7579562467381752, (204.016, 218.003, 265.59)), ('C', 1100, u'THR', 0.7769028341636752, (200.687, 238.034, 272.727)), ('C', 1101, u'HIS', 0.7698448673742025, (201.096, 234.364, 273.671)), ('C', 1111, u'GLU', 0.7022925688960696, (193.87800000000001, 226.23299999999998, 266.362)), ('C', 1113, u'GLN', 0.770692110065181, (197.029, 225.318, 271.874)), ('C', 1124, u'GLY', 0.7697824062940295, (220.33, 220.893, 273.014)), ('C', 1130, u'ILE', 0.7927738428029957, (219.187, 230.3, 265.248)), ('C', 1136, u'THR', 0.8062191704845977, (206.76, 230.046, 278.96299999999997)), ('C', 1147, u'SER', 0.745142409206042, (198.95100000000002, 216.86800000000002, 294.98499999999996))]
handle_read_draw_probe_dots_unformatted("/home/ccpem/agnel/gisaid/countries_seq/structure_data/emdb/EMD-30701/7dk3/Model_validation_1/validation_cootdata/molprobity_probe7dk3_0.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
