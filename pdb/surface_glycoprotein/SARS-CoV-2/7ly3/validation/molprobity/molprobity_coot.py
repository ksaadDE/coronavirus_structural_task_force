# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('C', ' 143 ', 'PRO', None, (35.687, -26.531999999999993, 15.290000000000001)), ('D', ' 153 ', 'PRO', None, (3.838999999999999, -28.903999999999993, 13.377)), ('D', ' 155 ', 'PRO', None, (7.761999999999998, -33.146, 15.095)), ('E', ' 143 ', 'PRO', None, (-10.711, 42.435999999999986, 11.747)), ('F', ' 153 ', 'PRO', None, (21.086, 42.363, 8.592)), ('F', ' 155 ', 'PRO', None, (17.057999999999993, 45.87599999999998, 5.603))]
data['rota'] = [('A', ' 165 ', 'ASN', 0.1845604039203139, (-4.814, 7.655, 58.202))]
data['cbeta'] = []
data['probe'] = [(' B 121  ASN  OD1', ' B 126  VAL HG22', -0.714, (-4.738, 22.564, 67.352)), (' B 126  VAL HG23', ' B 174  PRO  HA ', -0.652, (-5.715, 20.594, 67.323)), (' D 132  PRO  HD2', ' D 219  PRO  HA ', -0.607, (19.552, -38.081, -9.965)), (' A 126  VAL HG23', ' A 174  PRO  HA ', -0.602, (13.11, -0.194, 70.91)), (' A 121  ASN  OD1', ' A 126  VAL HG22', -0.595, (11.613, -1.758, 70.521)), (' A 155  SER  HB2', ' C  92  SER  HB3', -0.589, (14.744, -11.536, 54.372)), (' B 126  VAL  CG2', ' B 174  PRO  HA ', -0.57, (-5.769, 21.391, 67.127)), (' D  76  LYS  O  ', ' D  78  THR HG23', -0.569, (-1.364, -37.732, 41.29)), (' F 125  PRO  HB3', ' F 151  TYR  HB3', -0.567, (18.096, 37.408, 3.847)), (' C 164  THR  CG2', ' D 175  VAL HG22', -0.563, (18.963, -24.779, 9.655)), (' E 164  THR  CG2', ' F 175  VAL HG22', -0.559, (6.8, 36.925, 10.305)), (' F  49  THR HG23', ' F  70  ILE HD12', -0.558, (12.833, 42.845, 39.863)), (' D 154  GLU  HG3', ' D 155  PRO  HA ', -0.551, (10.051, -32.558, 14.229)), (' C 146  VAL HG21', ' C 197  VAL HG13', -0.545, (29.978, -22.975, 6.759)), (' D  30  SER  O  ', ' D  53  TYR  HB2', -0.542, (3.838, -31.298, 52.033)), (' A  68  ILE HG22', ' A  79  PHE  CD2', -0.539, (4.923, -20.178, 64.076)), (' F 132  PRO  HD2', ' F 219  PRO  HA ', -0.538, (5.568, 26.199, -11.441)), (' A 130  VAL HG21', ' A 231  ILE HG23', -0.534, (-2.678, 5.087, 69.083)), (' B 130  VAL HG21', ' B 231  ILE HG23', -0.534, (9.477, 15.334, 70.415)), (' A  44  ARG  O  ', ' A 283  GLY  HA2', -0.521, (9.555, 5.074, 98.022)), (' B 251  PRO  HB2', ' F  33  GLY  HA3', -0.514, (7.605, 45.653, 47.229)), (' F  76  LYS  O  ', ' F  78  THR HG23', -0.51, (18.749, 56.536, 42.449)), (' A 126  VAL  CG2', ' A 174  PRO  HA ', -0.499, (12.886, -0.659, 70.89)), (' F 154  GLU  HG2', ' F 155  PRO  HA ', -0.499, (14.408, 44.353, 5.789)), (' E  38  LYS  HB2', ' E  41  GLN  OE1', -0.498, (-0.842, 53.735, 24.631)), (' B  27  ALA  HB3', ' B  64  TRP  HB3', -0.491, (3.035, 44.059, 78.068)), (' C 164  THR HG22', ' D 175  VAL HG22', -0.489, (18.298, -25.123, 10.08)), (' E 164  THR HG23', ' F 175  VAL HG22', -0.487, (6.412, 36.434, 10.15)), (' E 121  PRO  HA ', ' E 134  LEU HD23', -0.486, (5.071, 23.319, 2.393)), (' A 105  ILE  O  ', ' A 238  PHE  HA ', -0.486, (-3.029, -6.667, 69.308)), (' B 199  GLY  HA2', ' B 232  GLY  HA2', -0.483, (12.175, 13.534, 76.857)), (' B 130  VAL  HB ', ' B 168  PHE  HB3', -0.48, (8.672, 13.897, 67.9)), (' B  44  ARG  O  ', ' B 283  GLY  HA2', -0.48, (-11.619, 16.262, 93.876)), (' D  49  THR HG23', ' D  70  ILE HD12', -0.476, (4.993, -23.614, 40.144)), (' A 276  LEU HD11', ' A 301  CYS  HA ', -0.475, (-4.287, -3.319, 103.952)), (' E  53  ARG  HD2', ' E  57  ILE  O  ', -0.467, (-13.597, 55.589, 35.214)), (' D 125  PRO  HB3', ' D 151  TYR  HB3', -0.466, (6.73, -30.693, 5.977)), (' C  50  ASP  O  ', ' C  63  GLY  HA3', -0.462, (30.942, -24.632, 46.553)), (' B 276  LEU HD11', ' B 301  CYS  HA ', -0.459, (0.202, 24.256, 103.758)), (' C 146  VAL HG21', ' C 197  VAL  CG1', -0.455, (30.246, -23.405, 6.74)), (' B 104  TRP  HB2', ' B 106  PHE  CE2', -0.451, (5.512, 25.26, 71.83)), (' F  12  VAL HG11', ' F  86  LEU HD13', -0.45, (21.598, 40.926, 27.28)), (' F  30  SER  O  ', ' F  53  TYR  HB2', -0.449, (10.395, 50.503, 51.596)), (' F 184  LEU  C  ', ' F 184  LEU HD12', -0.448, (10.227, 37.213, 2.019)), (' D  58  ARG  H  ', ' G   1  NAG  H81', -0.447, (0.751, -18.246, 47.713)), (' E 164  THR HG22', ' F 175  VAL HG22', -0.446, (6.57, 37.358, 10.544)), (' B 148  ASN  ND2', ' E  67  GLY  HA2', -0.444, (-15.953, 32.808, 42.178)), (' C 146  VAL  CG2', ' C 197  VAL HG13', -0.441, (30.202, -22.614, 7.217)), (' D 184  LEU  C  ', ' D 184  LEU HD12', -0.439, (14.815, -32.448, 6.019)), (' E  50  ASP  O  ', ' E  63  GLY  HA3', -0.436, (-14.134, 45.19, 37.933)), (' A  54  LEU HD13', ' A  88  ASP  O  ', -0.436, (-7.642, -2.665, 83.017)), (' C 121  PRO  HA ', ' C 134  LEU HD23', -0.436, (19.897, -25.041, -5.83)), (' A 251  PRO  HB2', ' D  33  GLY  HA3', -0.433, (7.603, -26.025, 48.918)), (' C 164  THR HG23', ' D 175  VAL HG22', -0.432, (18.88, -25.006, 9.395)), (' A 165  ASN  OD1', ' J   1  NAG  O5 ', -0.431, (-8.964, 8.995, 57.622)), (' F  29  PHE  CD2', ' F  77  ASN  HA ', -0.431, (15.251, 55.125, 45.727)), (' D  83  MET  HE1', ' D 115  VAL HG21', -0.43, (3.509, -25.832, 28.658)), (' A 155  SER  OG ', ' A 156  GLU  N  ', -0.428, (12.874, -9.824, 56.125)), (' A 193  VAL HG23', ' A 223  LEU HD12', -0.423, (3.702, -5.35, 84.582)), (' C  38  LYS  HB2', ' C  41  GLN  OE1', -0.422, (23.396, -35.014, 30.962)), (' A 104  TRP  HB2', ' A 106  PHE  CE2', -0.421, (1.522, -4.786, 71.684)), (' B  28  TYR  CZ ', ' O   1  NAG  H4 ', -0.419, (10.915, 43.395, 82.053)), (' C  23  SER  HB3', ' C  69  THR HG22', -0.418, (31.049, -12.5, 41.504)), (' B  53  ASP  HB3', ' B  55  PHE  CE2', -0.418, (3.907, 21.544, 91.208)), (' C 164  THR  CG2', ' D 175  VAL  CG2', -0.418, (18.207, -25.135, 9.366)), (' F  12  VAL  O  ', ' F 117  VAL  HA ', -0.415, (21.652, 39.801, 23.31)), (' E 134  LEU HD12', ' E 180  LEU HD23', -0.414, (5.262, 22.434, 8.638)), (' D   6  GLU  N  ', ' D   6  GLU  OE1', -0.413, (7.515, -35.208, 34.514)), (' B  46  SER  OG ', ' B 281  GLU  HG3', -0.413, (-16.324, 17.653, 99.564)), (' C  23  SER  CB ', ' C  69  THR HG22', -0.413, (30.792, -12.305, 41.725)), (' A 193  VAL HG23', ' A 223  LEU  CD1', -0.412, (3.905, -5.582, 84.338)), (' B 118  LEU  O  ', ' B 128  ILE  HA ', -0.411, (3.778, 19.314, 66.963)), (' B  68  ILE HG22', ' B  79  PHE  CD2', -0.411, (5.13, 40.54, 62.842)), (' G   1  NAG  H82', ' G   1  NAG  O3 ', -0.411, (-2.101, -16.153, 47.669)), (' B 276  LEU  O  ', ' B 288  ALA  HA ', -0.408, (-3.912, 25.591, 96.792)), (' B 143  VAL HG12', ' B 152  TRP  HE3', -0.408, (-7.15, 34.85, 56.186)), (' D  38  ARG  HG2', ' D  48  VAL  CG2', -0.407, (10.141, -21.301, 33.721)), (' A 126  VAL HG23', ' A 173  GLN  O  ', -0.407, (13.274, 0.926, 71.794)), (' A 281  GLU  HG2', ' A 282  ASN  OD1', -0.404, (16.402, 2.9, 101.644)), (' G   1  NAG  H2 ', ' G   1  NAG  H83', -0.404, (-2.137, -18.192, 49.096)), (' D 175  VAL  O  ', ' D 182  TYR  HA ', -0.403, (11.772, -25.293, 10.031)), (' F  35  HIS  CG ', ' F 106  PHE  HE2', -0.403, (5.328, 44.6, 40.204)), (' D 201  ILE  HA ', ' D 215  LYS  O  ', -0.403, (11.865, -42.044, -2.595)), (' F  61  ALA  O  ', ' F  65  LYS  HG3', -0.402, (12.265, 32.726, 38.692))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
