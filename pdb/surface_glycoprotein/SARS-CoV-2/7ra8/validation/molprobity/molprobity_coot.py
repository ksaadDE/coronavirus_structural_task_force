# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '1084 ', 'ASP', 0.006354431918351611, (203.749, 191.62, 128.264)), ('B', '1084 ', 'ASP', 0.0064379907469974875, (197.208, 224.603, 128.264)), ('C', '  27 ', 'GLY', 0.030457422409852494, (210.193, 246.073, 247.348)), ('C', '  28 ', 'ILE', 0.003013477074080343, (206.9220000000001, 247.657, 248.68700000000004)), ('E', '1084 ', 'ASP', 0.006356539413856638, (229.043, 213.776, 128.264)), ('F', '  27 ', 'GLY', 0.03041461811619779, (241.143, 191.796, 247.348)), ('F', '  28 ', 'ILE', 0.0030144082259499112, (244.151, 193.837, 248.68700000000004)), ('H', '  27 ', 'GLY', 0.030420931542099055, (178.663, 192.131, 247.348)), ('H', '  28 ', 'ILE', 0.003019538269360315, (178.927, 188.506, 248.68700000000004))]
data['omega'] = []
data['rota'] = [('A', ' 234 ', 'ASN', 0.0, (173.795, 217.933, 237.84300000000002)), ('A', ' 546 ', 'LEU', 0.24021745422868868, (197.587, 181.81500000000003, 223.787)), ('A', ' 582 ', 'LEU', 0.10183283321468474, (192.932, 167.495, 219.666)), ('A', '1038 ', 'LYS', 0.0015840322018590772, (205.233, 211.196, 162.689)), ('B', ' 234 ', 'ASN', 0.0, (234.973, 237.388, 237.84300000000002)), ('B', ' 546 ', 'LEU', 0.23909331108188858, (191.79800000000012, 234.842, 223.787)), ('B', ' 582 ', 'LEU', 0.10130942041861479, (181.724, 246.034, 219.666)), ('B', '1038 ', 'LYS', 0.0015646611128265586, (213.41900000000004, 213.53, 162.689)), ('E', ' 234 ', 'ASN', 0.0, (221.232, 174.679, 237.84300000000002)), ('E', ' 546 ', 'LEU', 0.24106694218594096, (240.615, 213.343, 223.787)), ('E', ' 582 ', 'LEU', 0.10207398791808331, (255.344, 216.471, 219.666)), ('E', '1038 ', 'LYS', 0.0016018899031560391, (211.348, 205.274, 162.689))]
data['cbeta'] = []
data['probe'] = [(' A 502  GLY  HA2', ' L  97  LEU  O  ', -0.619, (179.703, 169.264, 275.163)), (' B 502  GLY  HA2', ' D  97  LEU  O  ', -0.617, (190.074, 255.869, 275.187)), (' E 502  GLY  HA2', ' G  97  LEU  O  ', -0.608, (259.611, 204.281, 275.289)), (' B 790  LYS  NZ ', ' E 702  GLU  OE2', -0.583, (240.577, 196.548, 167.469)), (' A 790  LYS  NZ ', ' B 702  GLU  OE2', -0.576, (206.69, 243.733, 167.405)), (' A 702  GLU  OE2', ' E 790  LYS  NZ ', -0.571, (182.952, 190.142, 167.383)), (' A 579  PRO  O  ', ' A1310  NAG  H82', -0.551, (193.522, 167.749, 225.697)), (' B 579  PRO  O  ', ' B1310  NAG  H82', -0.546, (182.314, 245.727, 225.514)), (' E 579  PRO  O  ', ' E1510  NAG  H82', -0.544, (254.643, 216.286, 225.498)), (' A1142  GLN  N  ', ' A1143  PRO  CD ', -0.467, (202.404, 206.616, 123.038)), (' E 898  PHE  N  ', ' E 899  PRO  HD2', -0.465, (197.524, 190.591, 153.273)), (' B1142  GLN  N  ', ' B1143  PRO  CD ', -0.465, (210.853, 218.294, 123.058)), (' E1142  GLN  N  ', ' E1143  PRO  CD ', -0.464, (216.816, 205.101, 123.202)), (' A 898  PHE  N  ', ' A 899  PRO  HD2', -0.464, (199.434, 230.556, 153.25)), (' B 898  PHE  N  ', ' B 899  PRO  HD2', -0.46, (233.271, 208.943, 153.405)), (' A 193  VAL  HB ', ' A 204  TYR  HB2', -0.441, (169.279, 225.0, 222.145)), (' B 506  GLN  CB ', ' B 507  PRO  HD2', -0.434, (183.018, 253.102, 270.645)), (' E 193  VAL  HB ', ' E 204  TYR  HB2', -0.433, (216.952, 167.148, 222.219)), (' B 193  VAL  HB ', ' B 204  TYR  HB2', -0.432, (243.416, 237.825, 222.238)), (' A 506  GLN  CB ', ' A 507  PRO  HD2', -0.432, (186.385, 164.803, 270.395)), (' E 506  GLN  CB ', ' E 507  PRO  HD2', -0.424, (260.983, 212.202, 270.504)), (' A  84  LEU  HG ', ' A 267  VAL HG21', -0.42, (159.522, 216.332, 227.615)), (' B  84  LEU  HG ', ' B 267  VAL HG21', -0.415, (240.722, 250.684, 227.564)), (' B1107  ARG  H  ', ' B1107  ARG  HD2', -0.411, (211.922, 222.052, 149.358)), (' E  84  LEU  HG ', ' E 267  VAL HG21', -0.408, (229.904, 163.047, 227.546)), (' E1068  VAL  HA ', ' E1069  PRO  HD3', -0.404, (218.373, 194.538, 159.786)), (' A 336  CYS  HA ', ' A 337  PRO  HD3', -0.403, (198.094, 166.319, 243.923)), (' E1107  ARG  H  ', ' E1107  ARG  HD2', -0.402, (219.514, 202.417, 149.293)), (' A 582  LEU  CD1', ' A 582  LEU  N  ', -0.401, (192.899, 167.141, 221.616)), (' B 588  THR  HA ', ' B 589  PRO  HD3', -0.401, (196.191, 238.866, 209.184)), (' B 582  LEU  CD1', ' B 582  LEU  N  ', -0.4, (180.861, 246.758, 221.19)), (' E 985  ASP  HA ', ' E 986  PRO  HD3', -0.4, (196.731, 199.786, 235.018))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
