# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 154 ', 'TYR', 0.0173907352991736, (16.42966, -12.238150000000006, 36.21556))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 235  MET  HE1', ' B 241  PRO  HB3', -0.763, (12.673, 17.513, 51.886)), (' A 304  THR HG22', ' B 123  SER  HB2', -0.662, (-7.303, -6.235, 27.336)), (' A 231  ASN  O  ', ' A 235  MET  HE2', -0.649, (-2.226, 22.293, 5.822)), (' B 231  ASN  O  ', ' B 235  MET  HG2', -0.61, (12.467, 22.347, 50.56)), (' B 231  ASN  HB3', ' B 235  MET  HE3', -0.548, (13.842, 19.949, 52.026)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.542, (8.149, 7.317, 43.494)), (' B 233  VAL HG11', ' B 269  LYS  HG3', -0.537, (16.252, 25.732, 44.704)), (' A  17  MET  HE1', ' A  30  LEU HD13', -0.525, (10.749, -11.992, 17.156)), (' B  62  SER  HB2', ' B  64  HIS  CE1', -0.514, (-21.996, -22.804, 46.961)), (' B  83  GLN  O  ', ' B  86  VAL HG12', -0.498, (-5.972, -10.82, 51.759)), (' B 165  MET  HE1', ' B 192  GLN  NE2', -0.486, (-12.277, 3.824, 48.925)), (' B 165  MET  HE1', ' B 192  GLN HE22', -0.478, (-12.136, 3.087, 48.773)), (' B 242  LEU HD23', ' B 246  HIS  HB2', -0.476, (18.271, 12.193, 48.401)), (' A 211  ALA  HB1', ' A 216  ASP  HB2', -0.471, (-8.209, 16.041, 28.214)), (' B 297  VAL  O  ', ' B 301  SER  HB3', -0.47, (22.225, 0.041, 33.078)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.456, (2.417, -4.57, 37.651)), (' A  83  GLN  O  ', ' A  86  VAL HG12', -0.45, (15.618, -9.966, 4.309)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.441, (7.214, -3.874, 18.691)), (' A 285  ALA  HB3', ' B 285  ALA  HB3', -0.441, (5.14, 20.107, 28.863)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.44, (0.925, -21.791, 38.631)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.437, (11.301, -9.196, 26.088)), (' A   1  SER  N  ', ' B 166  GLU  OE1', -0.434, (-10.795, 4.704, 35.989)), (' A 167  LEU HD12', ' A 171  VAL HG23', -0.434, (17.333, 8.35, 12.511)), (' A 276  MET  HE2', ' A 287  LEU  HG ', -0.432, (0.123, 21.147, 23.01)), (' A 270  GLU  OE2', ' A 274  ASN  ND2', -0.431, (-6.682, 31.264, 20.822)), (' A 165  MET  HE1', ' A 192  GLN  NE2', -0.429, (22.674, 4.238, 7.963)), (' A 276  MET  HE1', ' A 286  LEU  C  ', -0.419, (1.134, 19.789, 24.572)), (' B 118  TYR  CE2', ' B 144  SER  HB3', -0.419, (-9.539, -2.85, 33.592)), (' B  40  ARG  HD3', ' B  85  CYS  HA ', -0.418, (-10.027, -8.147, 51.858)), (' A  13  VAL HG12', ' A  17  MET  HE3', -0.417, (9.462, -11.17, 20.478)), (' B 235  MET  HE1', ' B 241  PRO  CB ', -0.414, (12.411, 17.527, 51.886)), (' A  13  VAL  CG1', ' A  17  MET  HE3', -0.41, (9.277, -11.145, 19.996)), (' A  21  THR  HB ', ' A  67  LEU  HB2', -0.404, (26.787, -17.884, 17.209)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.403, (-1.891, 1.98, 28.062)), (' B 165  MET  HE2', ' B 167  LEU HD23', -0.401, (-10.622, 4.741, 46.435)), (' A  66  PHE  CE1', ' A  87  LEU HD21', -0.4, (23.702, -14.969, 8.75))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
