# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  28 ', 'ASN', 0.02981232382308733, (-0.7680000000000272, -81.49, 31.711)), ('A', '  28 ', 'ASN', 0.0010302487963119327, (-0.014000000000050623, -81.114, 32.882)), ('A', '  29 ', 'ASN', 0.005648190299088895, (2.741999999999992, -80.65, 30.303)), ('B', '  28 ', 'ASN', 0.006756234430860223, (73.20500000000003, -38.563, -17.538)), ('B', '  28 ', 'ASN', 0.0013836306842735806, (72.333, -38.564, -18.663)), ('B', '  29 ', 'ASN', 0.04612856487324786, (69.753, -39.348, -15.973999999999998))]
data['omega'] = [('A', '  28 ', 'ASN', None, (-1.197000000000015, -80.293, 32.669)), ('B', '  28 ', 'ASN', None, (72.947, -37.256, -18.477999999999998))]
data['rota'] = [('A', '  28 ', 'ASN', 0.0, (-0.7680000000000272, -81.49, 31.711)), ('B', '  28 ', 'ASN', 0.0, (73.20500000000003, -38.563, -17.538))]
data['cbeta'] = []
data['probe'] = [(' A 204  LYS  NZ ', ' A 502  HOH  O  ', -0.681, (14.305, -77.881, -3.982)), (' B 183  ASP  OD1', ' B 501  HOH  O  ', -0.677, (35.262, -55.524, -13.552)), (' A 266  GLU  HB3', ' A 279  PHE  HB3', -0.665, (11.51, -100.616, 12.613)), (' A 304  GLU  O  ', ' A 308  SER  OG ', -0.639, (37.02, -93.972, -3.45)), (' A 301  ASP  O  ', ' A 305  ILE HG13', -0.605, (32.098, -92.148, -1.902)), (' A 197  SER  HA ', ' A 401  RZG  H8 ', -0.601, (20.388, -86.146, 6.086)), (' B   0  MET  HE1', ' B  15  PHE  CZ ', -0.6, (51.908, -27.756, -13.421)), (' B 138  ARG  NH1', ' B 501  HOH  O  ', -0.591, (35.808, -54.927, -14.215)), (' A 305  ILE HD13', ' A 320  VAL HG11', -0.571, (33.243, -92.448, 2.62)), (' A 334  LYS  O  ', ' A 337  HIS  ND1', -0.568, (33.774, -111.853, -5.83)), (' B 197  SER  HA ', ' B 401  RZG  H8 ', -0.549, (56.637, -52.158, 8.26)), (' B 135  ARG  NH1', ' B 508  HOH  O  ', -0.546, (27.995, -45.355, -2.496)), (' B 344  LYS  HD3', ' B 346  GLN  HB3', -0.541, (55.972, -71.789, -0.846)), (' A  70  LYS  NZ ', ' A 401  RZG  H9 ', -0.503, (22.048, -85.676, 6.966)), (' A 332  TRP  HB2', ' A 340  THR HG22', -0.5, (29.542, -108.186, 2.776)), (' B   0  MET  HE1', ' B  15  PHE  HZ ', -0.489, (51.69, -27.618, -13.415)), (' A 213  PHE  O  ', ' A 256  LYS  HE2', -0.485, (17.003, -95.878, -10.484)), (' A 265  LEU HD21', ' A 280  ILE HD12', -0.456, (13.108, -98.311, 5.417)), (' A  27  ILE HG12', ' A  28 AASN  CG ', -0.451, (-3.609, -80.377, 32.209)), (' B 256  LYS  HA ', ' B 259  LYS  HE2', -0.444, (67.314, -55.061, 21.128)), (' A 197  SER  HA ', ' A 401  RZG  N14', -0.442, (20.647, -85.838, 6.333)), (' B   8  ASN  HB3', ' B  15  PHE  HA ', -0.438, (56.053, -27.315, -8.567)), (' B   3  GLU  N  ', ' B   3  GLU  OE1', -0.434, (61.054, -26.729, -18.875)), (' B 143  ILE  HA ', ' B 177  ASN  O  ', -0.429, (39.708, -45.646, 3.184)), (' B 110  LYS  NZ ', ' B 506  HOH  O  ', -0.428, (35.286, -32.939, -18.0)), (' B 135  ARG  HG2', ' B 135  ARG HH11', -0.427, (28.657, -44.297, -3.022)), (' B 307  LYS  NZ ', ' B 511  HOH  O  ', -0.422, (50.051, -66.291, 25.832)), (' B 330  MET  HG2', ' B 344  LYS  HG3', -0.42, (56.282, -72.715, 3.548)), (' A 330  MET  HG2', ' A 344  LYS  HB2', -0.416, (30.999, -102.371, 10.161)), (' B  84  VAL HG23', ' B 101  VAL HG11', -0.415, (51.18, -37.761, -11.32)), (' A 199  ASN  HB2', ' A 202  GLU  HG2', -0.414, (11.505, -85.196, 1.846)), (' B  27  ILE HG22', ' B  28 AASN  OD1', -0.411, (75.733, -36.703, -18.303)), (' A 234  HIS  O  ', ' A 247  GLY  HA3', -0.404, (21.492, -104.242, 0.388))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
