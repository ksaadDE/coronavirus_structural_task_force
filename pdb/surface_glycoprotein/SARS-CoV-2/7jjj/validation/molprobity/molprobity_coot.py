# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 122 ', 'ASN', 0.20117817138453237, (342.058, 260.683, 298.653)), ('B', '1074 ', 'ASN', 0.0, (330.488, 247.314, 190.483)), ('D', ' 122 ', 'ASN', 0.20117817138489033, (186.94200000000004, 268.317, 298.653)), ('E', '1074 ', 'ASN', 0.0, (198.512, 281.686, 190.483))]
data['cbeta'] = []
data['probe'] = [(' 6   1  NAG  H4 ', ' 6   3  FUC  H5 ', -0.903, (233.52, 246.155, 252.49)), (' S   1  NAG  H4 ', ' S   3  FUC  H5 ', -0.889, (295.236, 282.488, 253.066)), (' C 146  HIS  HE1', ' C 152  TRP  CE2', -0.695, (238.785, 246.327, 281.243)), (' F 146  HIS  HE1', ' F 152  TRP  CE2', -0.685, (290.082, 282.617, 281.405)), (' C 843  ASP  N  ', ' C 843  ASP  OD1', -0.554, (285.76, 268.469, 263.667)), (' F 843  ASP  N  ', ' F 843  ASP  OD1', -0.544, (243.707, 260.52, 263.454)), (' F 146  HIS  HE1', ' F 152  TRP  CD2', -0.54, (289.915, 282.721, 281.634)), (' C 146  HIS  HE1', ' C 152  TRP  CD2', -0.536, (239.085, 246.312, 281.656)), (' A 707  TYR  CG ', ' A 707  TYR  O  ', -0.529, (303.053, 286.35, 210.195)), (' D 707  TYR  CG ', ' D 707  TYR  O  ', -0.518, (226.131, 242.672, 210.061)), (' C 145  TYR  C  ', ' C 145  TYR  CD2', -0.517, (237.389, 245.739, 287.256)), (' A 843  ASP  N  ', ' A 843  ASP  OD1', -0.517, (342.114, 240.323, 257.165)), (' C 663  ASP  O  ', ' C 664  ILE  C  ', -0.514, (278.725, 243.565, 229.106)), (' D 843  ASP  N  ', ' D 843  ASP  OD1', -0.51, (187.16, 289.043, 257.191)), (' F 663  ASP  O  ', ' F 664  ILE  C  ', -0.504, (250.348, 285.45, 229.152)), (' E 663  ASP  O  ', ' E 664  ILE  C  ', -0.497, (202.985, 301.6, 225.591)), (' B 663  ASP  O  ', ' B 664  ILE  C  ', -0.492, (326.015, 227.286, 225.612)), (' E 843  ASP  N  ', ' E 843  ASP  OD1', -0.491, (239.808, 319.347, 241.997)), (' D 663  ASP  O  ', ' D 664  ILE  C  ', -0.488, (212.092, 255.74, 242.986)), (' A1084  ASP  OD2', ' A1086  LYS  NZ ', -0.486, (298.792, 280.738, 179.83)), (' F 145  TYR  C  ', ' F 145  TYR  CD2', -0.484, (291.611, 283.387, 287.342)), (' C 707  TYR  CG ', ' C 707  TYR  O  ', -0.484, (288.822, 242.824, 192.55)), (' F 707  TYR  CG ', ' F 707  TYR  O  ', -0.483, (240.067, 286.222, 192.357)), (' F1096  VAL HG13', ' F1103  PHE  CE1', -0.479, (237.96, 269.418, 185.61)), (' A 663  ASP  O  ', ' A 664  ILE  C  ', -0.476, (316.777, 273.407, 243.112)), (' C1096  VAL HG13', ' C1103  PHE  CE1', -0.473, (290.928, 259.525, 185.7)), (' A 468  ILE  HB ', ' q   1  NAG  H82', -0.471, (271.592, 223.343, 293.274)), (' B 843  ASP  N  ', ' B 843  ASP  OD1', -0.469, (289.066, 209.549, 242.092)), (' D 193  VAL HG12', ' D 204  TYR  HB2', -0.467, (197.522, 271.47, 280.735)), (' D 468  ILE  HB ', 'UA   1  NAG  H82', -0.46, (257.416, 305.522, 293.712)), (' E 664  ILE  O  ', ' E 664  ILE HG22', -0.456, (201.596, 303.176, 227.56)), (' A 193  VAL HG12', ' A 204  TYR  HB2', -0.454, (331.294, 257.379, 280.664)), (' B 664  ILE  O  ', ' B 664  ILE HG22', -0.45, (327.244, 226.106, 227.184)), (' A  79  PHE  CZ ', ' A 242  LEU  HB2', -0.449, (335.99, 272.309, 296.38)), (' C 266  TYR  CD1', ' C 266  TYR  N  ', -0.441, (255.432, 238.525, 266.394)), (' D1084  ASP  OD2', ' D1086  LYS  NZ ', -0.44, (230.215, 248.258, 179.681)), (' D  79  PHE  CZ ', ' D 242  LEU  HB2', -0.439, (192.83, 256.279, 296.504)), (' A1142  GLN  N  ', ' A1143  PRO  CD ', -0.438, (313.879, 279.267, 173.849)), (' F 710  ASN  HA ', 'MA   1  NAG  H82', -0.437, (236.788, 282.443, 185.671)), (' F 266  TYR  CD1', ' F 266  TYR  N  ', -0.437, (273.689, 290.428, 266.504)), (' A1096  VAL HG13', ' A1103  PHE  CE1', -0.436, (313.763, 283.695, 196.412)), (' D1142  GLN  N  ', ' D1143  PRO  CD ', -0.436, (215.545, 249.56, 173.897)), (' D1096  VAL HG13', ' D1103  PHE  CE1', -0.435, (215.237, 245.337, 196.412)), (' B  81  ASN  N  ', ' B  82  PRO  CD ', -0.433, (332.282, 188.094, 261.342)), (' E 440  ASN  N  ', ' E 440  ASN  OD1', -0.431, (214.69, 306.528, 307.577)), (' B 969  ASN  N  ', ' B 969  ASN  OD1', -0.431, (305.332, 224.721, 256.413)), (' C 710  ASN  HA ', ' i   1  NAG  H82', -0.431, (291.847, 246.792, 185.776)), (' E  81  ASN  N  ', ' E  82  PRO  CD ', -0.428, (196.587, 340.928, 261.208)), (' E1030  SER  HB3', ' F1041  ASP  HB2', -0.424, (230.7, 276.402, 212.654)), (' B1030  SER  HB3', ' C1041  ASP  HB2', -0.423, (298.3, 252.565, 212.753)), (' E 657  ASN  N  ', ' E 657  ASN  OD1', -0.423, (188.343, 304.504, 218.893)), (' E 193  VAL HG12', ' E 204  TYR  HB2', -0.422, (214.771, 329.556, 256.811)), (' A1097  SER  HB3', ' A1102  TRP  CD2', -0.422, (309.35, 287.873, 193.915)), (' B 145  TYR  O  ', ' B 146  HIS  C  ', -0.421, (323.354, 164.487, 258.255)), (' E 145  TYR  O  ', ' E 146  HIS  C  ', -0.42, (205.605, 364.427, 258.063)), (' C1097  SER  HB3', ' C1102  TRP  CD2', -0.42, (290.96, 255.822, 180.53)), (' B 193  VAL HG12', ' B 204  TYR  HB2', -0.42, (314.657, 199.567, 256.827)), (' D1075  PHE  HB2', ' D1096  VAL  CG2', -0.419, (216.863, 243.464, 199.987)), (' F1097  SER  HB3', ' F1102  TRP  CD2', -0.418, (238.04, 273.122, 180.487)), (' B 800  PHE  HB3', ' B 802  PHE  CE1', -0.418, (298.669, 237.313, 195.362)), (' B 707  TYR  CG ', ' B 707  TYR  O  ', -0.418, (336.26, 252.637, 199.552)), (' E 802  PHE  CE1', ' E 882  ILE HD11', -0.418, (232.336, 290.298, 197.082)), (' E 969  ASN  N  ', ' E 969  ASN  OD1', -0.418, (223.392, 304.202, 256.792)), (' A1075  PHE  HB2', ' A1096  VAL  CG2', -0.417, (311.924, 285.294, 199.717)), (' E 707  TYR  CG ', ' E 707  TYR  O  ', -0.417, (192.782, 276.395, 199.525)), (' E 800  PHE  HB3', ' E 802  PHE  CE1', -0.416, (230.654, 291.725, 195.677)), (' D1097  SER  HB3', ' D1102  TRP  CD2', -0.414, (219.692, 241.054, 193.944)), (' C 146  HIS  CE1', ' C 152  TRP  CE2', -0.412, (237.924, 246.585, 281.723)), (' A 440  ASN  N  ', ' A 440  ASN  OD1', -0.412, (292.66, 226.862, 308.047)), (' E 707  TYR  CD2', ' E 707  TYR  O  ', -0.411, (192.24, 275.996, 199.663)), (' B1097  SER  HB3', ' B1102  TRP  CD2', -0.411, (330.504, 256.744, 183.251)), (' F 600  PRO  O  ', ' F 601  GLY  C  ', -0.411, (256.236, 280.632, 238.915)), (' F  81  ASN  N  ', ' F  82  PRO  CD ', -0.411, (277.904, 299.069, 272.716)), (' E1097  SER  HB3', ' E1102  TRP  CD2', -0.41, (198.628, 272.245, 183.146)), (' B 133  PHE  HB2', ' B 135  PHE  CE1', -0.408, (324.781, 189.679, 275.278)), (' D 644  GLN  N  ', ' D 644  GLN  OE1', -0.406, (221.999, 245.115, 251.879)), (' C 146  HIS  HD2', ' C 247  SER  CB ', -0.406, (235.418, 242.384, 282.679)), (' A 644  GLN  N  ', ' A 644  GLN  OE1', -0.406, (306.862, 284.19, 252.134)), (' C  81  ASN  N  ', ' C  82  PRO  CD ', -0.405, (251.153, 230.123, 272.666)), (' B 802  PHE  CE1', ' B 882  ILE HD11', -0.404, (296.557, 238.677, 197.008)), (' F 146  HIS  HD2', ' F 247  SER  CB ', -0.403, (293.455, 286.255, 282.866)), (' E 133  PHE  HB2', ' E 135  PHE  CE1', -0.403, (204.219, 339.418, 275.257)), (' E 144  TYR  CG ', ' E 145  TYR  N  ', -0.4, (204.706, 362.215, 263.008)), (' B 707  TYR  CD2', ' B 707  TYR  O  ', -0.4, (336.804, 253.154, 199.574))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
