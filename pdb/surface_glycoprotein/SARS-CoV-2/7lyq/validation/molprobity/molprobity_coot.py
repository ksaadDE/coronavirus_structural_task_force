# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 123 ', 'ALA', 0.018857137964201597, (136.956, 113.356, 135.306)), ('A', ' 487 ', 'ASN', 0.030848084098498048, (174.44699999999995, 196.899, 110.72)), ('A', ' 571 ', 'ASP', 0.04671519287642458, (140.62399999999994, 174.064, 148.756)), ('A', ' 855 ', 'PHE', 0.03401426401725869, (167.97599999999994, 138.09199999999996, 156.754)), ('B', ' 113 ', 'LYS', 0.02446482453575114, (151.26599999999993, 204.794, 114.36)), ('B', ' 136 ', 'CYS', 0.03507120706098298, (141.869, 214.20599999999993, 122.851)), ('B', ' 138 ', 'ASP', 0.03548991483882733, (137.425, 218.24099999999996, 124.341)), ('B', ' 197 ', 'ILE', 0.06450236574116172, (148.808, 189.843, 132.858)), ('B', ' 198 ', 'ASP', 0.02824887311977613, (151.471, 189.777, 130.095)), ('C', ' 198 ', 'ASP', 0.040925345264376196, (188.612, 163.255, 130.104)), ('C', ' 337 ', 'PRO', 0.06972258096742977, (159.94, 128.83500000000006, 115.469)), ('C', ' 571 ', 'ASP', 0.03720122682683232, (159.12599999999995, 138.63, 148.366)), ('C', ' 603 ', 'ASN', 0.0037272611411073016, (198.02899999999994, 156.995, 172.481))]
data['omega'] = []
data['rota'] = [('A', ' 233 ', 'ILE', 0.2867317301500619, (137.04299999999995, 134.7, 123.69000000000001)), ('A', ' 345 ', 'THR', 0.2121194032198758, (140.572, 179.51399999999995, 103.64999999999999)), ('A', ' 456 ', 'PHE', 0.08488480866340489, (164.988, 188.605, 115.353)), ('A', ' 604 ', 'THR', 0.025276351561593746, (135.087, 131.95, 174.551)), ('A', ' 616 ', 'ASN', 0.01585230811561853, (123.70600000000005, 158.546, 165.263)), ('A', ' 811 ', 'LYS', 0.0, (170.903, 124.75, 188.718)), ('B', ' 273 ', 'ARG', 0.014033866141807346, (153.039, 192.263, 147.447)), ('B', ' 618 ', 'THR', 0.09676649883038191, (175.815, 199.176, 161.167)), ('C', ' 235 ', 'ILE', 0.290044387420701, (197.821, 156.543, 127.542)), ('C', ' 345 ', 'THR', 0.11120805529478073, (153.49999999999994, 134.231, 102.954)), ('C', ' 456 ', 'PHE', 0.07389929053011172, (133.152, 150.378, 114.743)), ('C', ' 709 ', 'ASN', 0.12308382242483171, (171.54799999999994, 135.29799999999994, 214.329)), ('C', ' 907 ', 'ASN', 0.08695886122029116, (170.702, 164.128, 213.63600000000002)), ('C', '1107 ', 'ARG', 0.0019353758359664842, (172.936, 152.142, 215.473))]
data['cbeta'] = [('B', ' 617 ', 'CYS', ' ', 0.5151650530635529, (173.418, 198.271, 165.633)), ('C', ' 198 ', 'ASP', ' ', 0.36032829756919726, (187.30699999999993, 163.735, 130.78)), ('C', ' 538 ', 'CYS', ' ', 0.27473003659066497, (178.55699999999993, 131.9, 149.872))]
data['probe'] = [(' C 617  CYS  SG ', ' C 644  GLN  OE1', -0.762, (183.923, 131.795, 164.988)), (' A 343  ASN  ND2', ' A1305  NAG  O7 ', -0.643, (135.895, 172.666, 107.68)), (' B  81  ASN  N  ', ' B 265  TYR  HH ', -0.569, (145.147, 214.082, 134.183)), (' C1081  ILE HD12', ' C1135  ASN  HB3', -0.559, (169.638, 143.088, 230.302)), (' C1103  PHE  HZ ', ' C1310  NAG  H62', -0.538, (181.671, 148.319, 229.447)), (' A 603  ASN  ND2', ' A 604  THR  OG1', -0.481, (136.71, 132.004, 176.253)), (' A1103  PHE  HZ ', ' A1312  NAG  H61', -0.46, (141.413, 149.849, 231.108)), (' A 617  CYS  SG ', ' A 642  VAL  CG1', -0.46, (121.29, 152.069, 166.992)), (' B1103  PHE  HZ ', ' B1313  NAG  H62', -0.445, (163.284, 183.01, 230.56)), (' A 616  ASN  O  ', ' A 618  THR  N  ', -0.439, (121.5, 157.416, 163.437)), (' C1076  THR  HB ', ' C1097  SER  HB3', -0.438, (177.496, 140.477, 223.021)), (' B 433  VAL HG22', ' B 512  VAL HG22', -0.423, (182.984, 181.715, 105.042)), (' C 714  ILE HD12', ' C1096  VAL HG11', -0.416, (176.441, 147.554, 218.937)), (' B 129  LYS  HE3', ' B 166  CYS  SG ', -0.416, (140.662, 200.683, 114.957)), (' C  44  ARG  O  ', ' C 283  GLY  HA2', -0.413, (195.687, 174.056, 154.325)), (' C 877  LEU HD22', ' C1029  MET  HE1', -0.406, (170.139, 175.368, 194.698)), (' B 611  LEU  HA ', ' B 649  CYS  O  ', -0.405, (167.262, 193.761, 167.125)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.402, (143.202, 173.785, 126.535))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
