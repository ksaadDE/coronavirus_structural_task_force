# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 128 ', 'CYS', 0.15219477133903203, (4.848, -3.405, -24.597))]
data['cbeta'] = [('A', '  64 ', 'HIS', ' ', 0.26404865211023604, (41.3, -5.199000000000001, -16.546))]
data['probe'] = [(' A 102  LYS  NZ ', ' A 156  CYS  SG ', -0.8, (11.111, -21.21, -21.374)), (' B 233  VAL HG21', ' B 269  LYS  HD2', -0.683, (-14.345, 25.536, -16.749)), (' A 100  LYS  NZ ', ' A 155  ASP  OD2', -0.614, (10.4, -23.223, -13.046)), (' B 298  ARG  NH1', ' B 504  HOH  O  ', -0.605, (7.817, 3.356, -11.074)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.581, (-14.59, -1.772, -42.67)), (' B 299  GLN  HG3', ' B 540  HOH  O  ', -0.577, (5.491, 6.426, -14.471)), (' A 233  VAL HG21', ' A 269  LYS  HE2', -0.576, (-14.825, -3.268, -44.418)), (' B   6  MET  HE2', ' B 299  GLN  HG2', -0.554, (7.036, 5.299, -14.964)), (' A 279  ARG  NH1', ' A 503  HOH  O  ', -0.553, (-21.539, 2.145, -23.244)), (' B   6  MET  CE ', ' B 299  GLN  HG2', -0.546, (7.596, 5.23, -15.12)), (' B 226  THR  OG1', ' B 229  ASP  OD1', -0.519, (-11.889, 31.511, -11.221)), (' B 114  VAL HG11', ' B 140  PHE  CZ ', -0.512, (-5.084, -6.945, -7.978)), (' B  27  LEU HD13', ' B  39  PRO  HD2', -0.494, (-6.993, -14.354, 1.493)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.479, (-9.868, -10.362, -24.174)), (' A 222 BARG  NH1', ' A 510  HOH  O  ', -0.462, (-29.232, -9.342, -41.079)), (' B  56  ASP  HB3', ' B  60  ARG  NH2', -0.462, (-18.957, -20.193, 16.335)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.452, (9.73, -13.2, 5.438)), (' B  86  VAL HG23', ' B 179  GLY  HA2', -0.449, (-7.904, -6.5, 6.632)), (' B   4  ARG  O  ', ' B 299  GLN  NE2', -0.445, (3.95, 5.119, -16.665)), (' B 235  MET  HB3', ' B 235  MET  HE2', -0.44, (-20.67, 20.283, -9.176)), (' A 222 AARG  NH2', ' A 514  HOH  O  ', -0.439, (-29.616, -2.315, -41.842)), (' A 269  LYS  HB2', ' A 269  LYS  HE3', -0.438, (-15.317, -4.079, -41.146)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.433, (-7.126, 9.081, -7.494)), (' B 298  ARG  NH2', ' B 509  HOH  O  ', -0.427, (5.309, 3.679, -10.152)), (' B 277  ASN  O  ', ' B 279  ARG  HG3', -0.427, (-8.604, 16.251, -32.729)), (' B 131  ARG  HD3', ' B 137  LYS  HE2', -0.427, (-10.673, 3.488, -11.666)), (' A  48  ASP  HA ', ' A 611  HOH  O  ', -0.425, (32.633, 8.195, -34.982)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.424, (27.231, -0.504, -23.355)), (' A 199  THR HG21', ' A 239  TYR  CZ ', -0.422, (-5.959, -0.544, -35.494)), (' A  86  VAL HG23', ' A 179  GLY  HA2', -0.422, (22.455, -8.499, -29.259)), (' B  32  LEU HD13', ' B 101  TYR  CE2', -0.42, (4.864, -6.873, 6.36)), (' A 124  GLY  HA2', ' B   9  PRO  HD3', -0.417, (9.523, -0.591, -11.111)), (' B 271  LEU HD22', ' B 276  MET  HG2', -0.416, (-8.896, 16.469, -24.824)), (' A  82  MET  HE3', ' A 596  HOH  O  ', -0.415, (29.892, -8.732, -34.262)), (' A 217  ARG  HB3', ' A 217  ARG  HE ', -0.415, (-24.348, -6.441, -26.707)), (' A 188  ARG  NH1', ' A 509  HOH  O  ', -0.413, (25.987, 0.112, -40.88)), (' A 286  LEU  HG ', ' B 285  ALA  HB2', -0.411, (-8.182, 7.859, -28.357)), (' B 269  LYS  HE2', ' B 640  HOH  O  ', -0.408, (-14.448, 28.913, -16.635)), (' B 114  VAL  O  ', ' B 125  VAL  HA ', -0.406, (0.543, -6.757, -10.476)), (' B  66  PHE  CE1', ' B  87  LEU HD21', -0.405, (-7.311, -18.928, 9.255)), (' B 227  LEU  HA ', ' B 227  LEU HD23', -0.405, (-8.716, 26.379, -8.86)), (' B  17  MET  HG3', ' B 117  CYS  SG ', -0.403, (1.172, -13.002, -5.028)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.401, (-0.411, -3.605, -5.131))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
