# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 525 ', 'CYS', 0.003730426110413342, (213.608, 163.287, 152.57700000000003))]
data['omega'] = [('B', ' 905 ', 'ARG', None, (173.249, 185.875, 234.974)), ('C', ' 525 ', 'CYS', None, (213.03, 162.486, 151.5))]
data['rota'] = [('A', ' 585 ', 'LEU', 0.18315283595561116, (150.445, 173.884, 169.385)), ('B', ' 620 ', 'VAL', 0.003127019590465352, (173.549, 223.219, 180.584)), ('C', ' 738 ', 'CYS', 0.2662607136165983, (182.505, 202.296, 178.013))]
data['cbeta'] = []
data['probe'] = [(' A 106  PHE  HB2', ' A 117  LEU  HB3', -0.634, (193.622, 140.458, 150.594)), (' C 103  GLY  H  ', ' C 241  LEU  HB2', -0.596, (235.687, 219.237, 154.192)), (' B 559  PHE  HB2', ' B 577  ARG HH21', -0.593, (207.7, 226.387, 170.702)), (' C 201  PHE  HB3', ' C 229  LEU  HB2', -0.588, (219.648, 214.715, 153.707)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.572, (196.737, 222.378, 212.3)), (' C 564  GLN  HG2', ' C 577  ARG  HB3', -0.567, (214.64, 157.105, 165.933)), (' B 620  VAL HG13', ' B 621  PRO  HD3', -0.56, (172.351, 225.117, 181.223)), (' A 820  ASP  O  ', ' A 824  ASN  ND2', -0.55, (208.087, 161.923, 210.28)), (' C  34  ARG  NH1', ' C 191  GLU  OE2', -0.528, (230.037, 217.472, 173.333)), (' B 323  THR  OG1', ' B 537  LYS  NZ ', -0.527, (181.968, 226.568, 167.369)), (' A 127  VAL HG11', ' A 170  TYR  H  ', -0.523, (204.922, 140.12, 148.724)), (' B 330  PRO  HG3', ' B 579  PRO  HB2', -0.519, (202.062, 225.875, 160.039)), (' B 725  GLU  OE1', ' B1064  HIS  NE2', -0.517, (173.199, 190.311, 216.782)), (' A  57  PRO  HG3', ' A 273  ARG  HE ', -0.515, (183.99, 148.058, 172.051)), (' B1011  GLN  OE1', ' B1014  ARG  NH1', -0.509, (177.176, 185.871, 190.546)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.508, (168.222, 159.639, 211.122)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.503, (199.268, 206.349, 225.148)), (' C 130  VAL  HB ', ' C 168  PHE  HB3', -0.502, (221.67, 216.472, 144.985)), (' C 108  THR HG23', ' C 109  THR HG23', -0.502, (228.73, 204.107, 144.49)), (' C1102  TRP  HB2', ' C1135  ASN HD22', -0.498, (204.473, 182.855, 256.549)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.495, (165.709, 190.368, 224.016)), (' B1017  GLU  OE1', ' C1019  ARG  NH1', -0.495, (181.544, 192.132, 199.79)), (' C 971  GLY  HA3', ' C 995  ARG HH21', -0.492, (196.82, 191.909, 166.027)), (' A 552  LEU HD12', ' A 585  LEU HD13', -0.489, (153.678, 171.995, 167.367)), (' A 725  GLU  OE1', ' A1064  HIS  NE2', -0.489, (192.594, 175.096, 218.241)), (' A 578  ASP  OD2', ' A 581  THR  OG1', -0.489, (147.112, 171.732, 161.392)), (' A 905  ARG  NH1', ' A1049  LEU  O  ', -0.488, (195.894, 178.936, 229.695)), (' C 391  CYS  SG ', ' C 526  GLY  N  ', -0.482, (214.053, 165.229, 153.565)), (' B 971  GLY  O  ', ' B 995  ARG  NH1', -0.481, (181.797, 188.873, 161.358)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.475, (211.742, 162.362, 215.232)), (' C 393  THR  HA ', ' C 523  THR  HB ', -0.471, (208.114, 159.401, 154.654)), (' A1126  CYS  HB2', ' A1132  ILE HD13', -0.47, (162.993, 185.601, 252.27)), (' C 659  SER  HB3', ' C 698  SER  HB3', -0.47, (222.335, 185.319, 213.637)), (' B 763  LEU HD22', ' B1008  VAL HG21', -0.469, (183.249, 179.317, 183.802)), (' A 726  ILE HG12', ' A1061  VAL HG22', -0.466, (197.147, 170.482, 212.147)), (' A 961  THR HG21', ' B 762  GLN HE21', -0.465, (193.138, 174.689, 183.092)), (' C 901  GLN HE21', ' C 905  ARG  HE ', -0.464, (188.536, 205.476, 230.65)), (' B 295  PRO  HB2', ' B 608  VAL HG21', -0.463, (162.818, 213.903, 186.318)), (' A 298  GLU  OE2', ' A 316  SER  OG ', -0.463, (180.072, 159.505, 180.641)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.457, (225.495, 200.344, 183.951)), (' B 905  ARG  NH1', ' B1049  LEU  O  ', -0.457, (173.341, 185.468, 228.398)), (' C 725  GLU  OE1', ' C1064  HIS  NE2', -0.455, (196.267, 199.676, 217.748)), (' B 319  ARG  HE ', ' C 740  MET  HE2', -0.454, (182.031, 211.823, 174.108)), (' B 189  LEU  N  ', ' B 208  THR  O  ', -0.452, (134.491, 204.837, 167.438)), (' A 281  GLU  HB2', ' A1301  NAG  H82', -0.452, (209.89, 148.697, 185.381)), (' C 106  PHE  HB2', ' C 117  LEU  HB3', -0.45, (226.671, 212.611, 150.556)), (' A  81  ASN  ND2', ' A 265  TYR  OH ', -0.449, (186.946, 127.939, 160.066)), (' C 985  ASP  N  ', ' C 985  ASP  OD1', -0.448, (189.035, 200.818, 152.659)), (' A 743  CYS  HB3', ' A 749  CYS  HB3', -0.448, (207.833, 184.552, 169.777)), (' C  44  ARG  HB2', ' C 279  TYR  HD2', -0.447, (210.173, 216.325, 178.001)), (' C 574  ASP  HA ', ' C 587  ILE  HB ', -0.447, (214.315, 165.062, 175.159)), (' A 985  ASP  N  ', ' A 985  ASP  OD1', -0.446, (205.64, 181.641, 154.502)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.445, (172.373, 219.736, 209.699)), (' A  32  PHE  HD2', ' A 218  GLN  HG2', -0.443, (189.216, 134.725, 181.019)), (' B1089  PHE  HB3', ' C 913  GLN HE21', -0.442, (190.049, 202.021, 247.002)), (' B  56  LEU HD12', ' B  57  PRO  HD2', -0.442, (153.605, 211.654, 167.251)), (' C1047  TYR  HB2', ' C1067  TYR  HB3', -0.441, (198.933, 196.626, 231.357)), (' A 392  PHE  HA ', ' A 517  LEU HD21', -0.441, (164.438, 183.532, 152.997)), (' C 617  CYS  HB3', ' C 649  CYS  HB3', -0.44, (226.171, 181.351, 190.331)), (' A 106  PHE  HD2', ' A 117  LEU HD23', -0.44, (194.948, 140.934, 153.068)), (' A 913  GLN HE21', ' C1089  PHE  HB3', -0.439, (194.319, 179.372, 247.422)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.437, (181.948, 149.059, 182.661)), (' C  44  ARG  HB2', ' C 279  TYR  CD2', -0.436, (210.201, 216.084, 177.735)), (' B 901  GLN HE21', ' B 905  ARG  HE ', -0.432, (171.153, 181.961, 230.284)), (' A 901  GLN HE21', ' A 905  ARG  HE ', -0.432, (199.966, 178.792, 231.976)), (' B 577  ARG  HD3', ' B 582  LEU HD22', -0.43, (205.971, 228.2, 165.801)), (' C 905  ARG  NH1', ' C1049  LEU  O  ', -0.43, (190.513, 201.771, 228.787)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.428, (158.711, 212.398, 180.945)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.425, (229.193, 214.467, 180.077)), (' C 330  PRO  HB3', ' C 579  PRO  HB2', -0.423, (218.868, 158.069, 159.439)), (' C 193  VAL HG23', ' C 223  LEU HD22', -0.421, (225.159, 215.453, 167.476)), (' A  83  VAL  O  ', ' A 237  ARG  NH2', -0.419, (182.073, 135.157, 153.036)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.418, (189.292, 126.179, 168.326)), (' B 105  ILE HG13', ' B 241  LEU HD23', -0.416, (140.441, 209.969, 147.301)), (' B 605  SER  OG ', ' B 606  ASN  N  ', -0.416, (155.425, 213.499, 192.551)), (' B 198  ASP  N  ', ' B 198  ASP  OD1', -0.415, (160.926, 199.682, 152.827)), (' C 726  ILE HG13', ' C1061  VAL HG22', -0.415, (197.684, 205.589, 211.461)), (' A 105  ILE HG12', ' A 118  LEU HD13', -0.412, (194.286, 133.757, 149.189)), (' B 825  LYS  HB2', ' B 945  LEU HD12', -0.407, (160.891, 188.872, 205.123)), (' A 825  LYS  HD2', ' A 945  LEU HD13', -0.407, (198.77, 164.23, 209.122)), (' B 566  GLY  HA2', ' C  43  PHE  HB3', -0.407, (205.216, 219.745, 173.877)), (' A  83  VAL  HB ', ' A 237  ARG HH21', -0.404, (182.694, 134.643, 152.391)), (' A 656  VAL HG23', ' A 658  ASN  H  ', -0.402, (166.365, 152.973, 206.169)), (' B 617  CYS  HB2', ' B 649  CYS  HB3', -0.4, (175.921, 223.919, 187.418))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
