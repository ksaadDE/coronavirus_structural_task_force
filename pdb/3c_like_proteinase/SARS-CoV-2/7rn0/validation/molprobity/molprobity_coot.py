# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   4 ', 'ARG', 0.0009637126966150251, (5.963, 5.406000000000001, -1.191)), ('A', '  78 ', 'ILE', 0.03481393579149134, (-15.974, -27.011, 19.461)), ('A', ' 106 ', 'ILE', 0.05541398241484834, (1.6529999999999987, -1.485, 19.398)), ('A', ' 110 ', 'GLN', 0.2655369803545308, (4.02, 2.992, 15.388)), ('A', ' 128 ', 'CYS', 0.10960218788821448, (-1.467000000000001, 2.797, 8.665000000000001)), ('A', ' 223 ', 'PHE', 0.20432978947675048, (20.616999999999983, 27.051000000000023, 11.083))]
data['cbeta'] = [('A', '   4 ', 'ARG', ' ', 0.28396229170024123, (5.784999999999999, 4.237, -2.158))]
data['probe'] = [(' A 115  LEU HD11', ' A 122  PRO  HB3', -0.671, (-6.244, -9.947, 1.707)), (' A   4  ARG  HG2', ' A   4  ARG HH11', -0.645, (4.528, 3.815, -4.395)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.645, (2.391, 4.855, 10.673)), (' A  78  ILE HD11', ' A  90  LYS  HD3', -0.607, (-12.198, -27.588, 20.681)), (' A   4  ARG  CG ', ' A   4  ARG HH11', -0.59, (4.338, 4.478, -4.367)), (' A 188  ARG  HG3', ' A 190  THR HG23', -0.587, (-22.589, 2.967, 23.546)), (' A 201  THR HG22', ' A 242  LEU HD13', -0.579, (10.81, 15.189, 16.671)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -0.558, (5.219, 21.866, -0.48)), (' A  78  ILE  CD1', ' A  90  LYS  HD3', -0.538, (-12.234, -27.054, 20.68)), (' A 249  ILE HG22', ' A 293  PRO  HG2', -0.532, (13.633, 6.428, 14.853)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.532, (-14.096, -1.465, 7.426)), (' A  56  ASP  HA ', ' A  59  ILE HD12', -0.531, (-25.971, -13.816, 30.012)), (' A 215  GLY  O  ', ' A 217  ARG  HG2', -0.524, (18.246, 17.246, -2.871)), (' A   4  ARG  CG ', ' A   4  ARG  NH1', -0.524, (4.421, 4.617, -4.426)), (' A  48  ASP  O  ', ' A  52  PRO  HB3', -0.519, (-25.905, -4.503, 22.028)), (' A  92  ASP  OD1', ' A  93  THR  N  ', -0.51, (-11.438, -27.929, 12.91)), (' A 503  5ZB  C14', ' A 503  5ZB  O32', -0.497, (-19.289, -0.288, 12.966)), (' A  79  GLY  O  ', ' A  90  LYS  N  ', -0.493, (-14.136, -22.087, 19.699)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.492, (-18.731, -10.321, 14.635)), (' A  21  THR HG23', ' A  26  THR  OG1', -0.486, (-22.881, -14.084, 7.994)), (' A  21  THR  HB ', ' A  67  LEU  HB2', -0.483, (-22.145, -17.992, 9.86)), (' A  78  ILE HD11', ' A  90  LYS  NZ ', -0.47, (-11.443, -28.449, 21.317)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.46, (-8.678, -10.87, 5.262)), (' A 160  CYS  O  ', ' A 182  TYR  OH ', -0.457, (-2.51, -3.661, 18.703)), (' A 203  ASN  O  ', ' A 206  ALA  HB3', -0.448, (9.534, 10.301, 9.714)), (' A  17  MET  HE2', ' A 117  CYS  SG ', -0.447, (-9.37, -10.256, 6.833)), (' A  78  ILE  O  ', ' A  78  ILE HD12', -0.445, (-14.498, -27.524, 21.415)), (' A 169  THR  OG1', ' A 171  VAL HG22', -0.445, (-12.767, 9.713, 13.904)), (' A 292  THR  HB ', ' A 293  PRO  HD2', -0.441, (10.206, 5.09, 13.264)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.436, (3.075, -13.854, 13.977)), (' A  25  THR HG22', ' A  42  VAL HG23', -0.425, (-21.413, -10.965, 13.068)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.424, (-3.244, -21.987, 11.142)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.422, (-10.03, -8.057, 21.309)), (' A  66  PHE  HE2', ' A  80  HIS  ND1', -0.418, (-20.187, -19.398, 21.088)), (' A 503  5ZB  C02', ' A 503  5ZB  C17', -0.415, (-17.917, -1.365, 10.431)), (' A 223  PHE  CD1', ' A 223  PHE  N  ', -0.413, (20.06, 28.4, 9.791)), (' A 230  PHE  CZ ', ' A 268  LEU HD23', -0.407, (10.473, 19.204, 14.615)), (' A 200  ILE HG21', ' A 203  ASN  ND2', -0.405, (5.194, 8.483, 14.011)), (' A  19  GLN  HG2', ' A  26  THR HG23', -0.404, (-19.23, -13.806, 7.34)), (' A 217  ARG  HB2', ' A 220  LEU HD12', -0.4, (19.539, 19.743, 1.182)), (' A 150  PHE  HA ', ' A 158  SER  O  ', -0.4, (1.4, -7.274, 12.346))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
