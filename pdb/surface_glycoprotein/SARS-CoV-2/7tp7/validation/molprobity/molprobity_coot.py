# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 486 ', 'PHE', 0.021919711941420165, (183.45, 131.26200000000006, 106.03400000000003)), ('A', ' 621 ', 'PRO', 0.0, (171.13700000000003, 202.673, 157.923)), ('B', '  97 ', 'LYS', 0.011570990968575685, (224.542, 165.838, 139.429)), ('B', ' 110 ', 'LEU', 0.04848871470822387, (207.526, 153.682, 119.778)), ('B', ' 198 ', 'ASP', 0.021691049988018282, (190.975, 164.59400000000002, 130.505)), ('B', ' 410 ', 'ILE', 0.029248685648729, (161.585, 122.578, 103.035)), ('B', ' 421 ', 'TYR', 0.017956484823471057, (150.998, 125.878, 102.37400000000001)), ('B', ' 442 ', 'ASP', 0.014655241676301951, (162.556, 110.44400000000003, 100.76)), ('B', ' 496 ', 'GLY', 0.042690398391164695, (161.163, 113.573, 88.222)), ('B', ' 524 ', 'VAL', 0.09941559486515293, (158.584, 123.537, 122.105)), ('B', ' 544 ', 'ASN', 0.047417276900452235, (164.27, 125.79500000000004, 139.277)), ('B', ' 621 ', 'PRO', 0.0, (191.068, 136.475, 155.566)), ('B', ' 626 ', 'ALA', 0.027525886661423936, (193.91600000000005, 140.86600000000007, 155.362)), ('B', ' 814 ', 'LYS', 0.03832312411576473, (183.921, 187.374, 189.37100000000004)), ('C', '  97 ', 'LYS', 0.0262206904152685, (131.258, 104.012, 147.254)), ('C', ' 110 ', 'LEU', 0.026930526710269895, (130.232, 121.27, 126.064)), ('C', ' 112 ', 'SER', 0.01173183752810725, (131.529, 119.969, 118.896)), ('C', ' 448 ', 'ASN', 0.00791145686775716, (149.789, 183.11, 98.045)), ('C', ' 571 ', 'ASP', 0.03962776147533367, (140.52100000000004, 174.48900000000003, 149.976)), ('C', ' 640 ', 'SER', 0.008071733239509764, (119.741, 141.62300000000005, 170.212))]
data['omega'] = [('C', ' 636 ', 'TYR', None, (124.30100000000006, 142.275, 160.581))]
data['rota'] = [('A', '  47 ', 'VAL', 0.2520576551853948, (138.502, 183.963, 158.943)), ('A', ' 210 ', 'ILE', 0.1834369128622231, (129.866, 210.90000000000006, 153.111)), ('A', ' 294 ', 'ASP', 0.1276400618145997, (155.75900000000004, 199.019, 159.289)), ('A', ' 318 ', 'PHE', 0.006292770108984041, (167.76000000000002, 191.795, 156.828)), ('A', ' 350 ', 'VAL', 0.2525683942715915, (181.212, 157.989, 109.989)), ('A', ' 489 ', 'TYR', 0.2881237911870801, (182.61100000000005, 139.649, 106.702)), ('A', ' 540 ', 'ASN', 0.23289185677329818, (176.98500000000007, 191.18200000000004, 142.256)), ('A', ' 546 ', 'LEU', 0.09602392013904047, (181.121, 181.722, 137.585)), ('A', ' 621 ', 'PRO', 0.18282148152739477, (171.13700000000003, 202.673, 157.923)), ('A', ' 634 ', 'ARG', 0.01808826035675616, (163.19900000000007, 202.796, 157.795)), ('A', ' 637 ', 'SER', 0.20443947624750872, (166.232, 202.884, 161.027)), ('A', ' 739 ', 'THR', 0.10931213643154282, (144.322, 156.806, 154.37)), ('A', ' 760 ', 'CYS', 0.05492158234119415, (150.231, 154.043, 156.862)), ('A', '1082 ', 'CYS', 0.14851112709303252, (181.24999999999994, 174.565, 230.302)), ('B', ' 122 ', 'ASN', 0.02368203750976801, (217.914, 170.408, 127.1)), ('B', ' 212 ', 'LEU', 0.0733717696831194, (221.47100000000006, 160.471, 150.706)), ('B', ' 214 ', 'ARG', 0.08150952103507504, (222.489, 154.357, 147.116)), ('B', ' 620 ', 'VAL', 0.23326361550975572, (188.189, 135.581, 157.908)), ('B', ' 621 ', 'PRO', 0.07058011649477376, (191.068, 136.475, 155.566)), ('B', ' 634 ', 'ARG', 0.0055414684267585754, (198.955, 141.59300000000005, 157.039)), ('B', ' 638 ', 'THR', 0.1496121412500231, (198.684, 136.67700000000005, 159.567)), ('C', ' 360 ', 'ASN', 0.19819732088231695, (126.33500000000005, 181.118, 126.895)), ('C', ' 628 ', 'GLN', 0.1335566965706766, (122.24300000000002, 148.225, 152.611)), ('C', ' 634 ', 'ARG', 0.0, (128.44900000000004, 142.453, 157.378)), ('C', ' 907 ', 'ASN', 0.07974815951813778, (163.175, 152.096, 213.914)), ('C', ' 916 ', 'LEU', 0.2941136343296243, (160.27300000000005, 143.44800000000006, 216.133)), ('C', '1082 ', 'CYS', 0.10658489256363003, (146.36100000000005, 169.38700000000006, 232.268))]
data['cbeta'] = [('A', ' 621 ', 'PRO', ' ', 0.2790781196059241, (172.19, 203.24000000000007, 156.971)), ('A', ' 634 ', 'ARG', ' ', 0.2765797342154941, (163.62, 203.03700000000006, 156.334)), ('B', ' 200 ', 'TYR', ' ', 0.3558811185034275, (194.402, 161.582, 127.50700000000002)), ('B', ' 621 ', 'PRO', ' ', 0.27839444776711175, (192.30400000000006, 135.596, 155.716)), ('C', ' 487 ', 'ASN', ' ', 0.2653162739303377, (171.396, 198.30900000000005, 108.216)), ('C', ' 627 ', 'ASP', ' ', 0.27109764048049445, (119.229, 146.6, 156.334))]
data['probe'] = [(' C 360  ASN  H  ', ' C 523  THR HG22', -0.515, (128.655, 181.835, 128.398)), (' C 462  LYS  N  ', ' D   2  NAG  HO6', -0.458, (156.004, 188.512, 123.311)), (' B 294  ASP  HA ', ' B 633  TRP  CE3', -0.438, (195.391, 148.211, 156.55)), (' B  98  SER  HG ', ' B 263  ALA  N  ', -0.435, (224.239, 160.527, 136.567)), (' A 630  THR  HB ', ' A 631  PRO  HD2', -0.423, (157.671, 199.282, 154.002)), (' C 599  THR HG22', ' C 601  GLY  H  ', -0.41, (137.295, 137.889, 174.404))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
