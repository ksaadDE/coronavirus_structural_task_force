# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 102 ', 'PRO', 0.0, (-27.292929999999995, -21.30220999999999, 57.035540000000005)), ('H', ' 102 ', 'PRO', 0.0, (-4.102439999999991, 35.896809999999995, 40.88273))]
data['omega'] = [('B', ' 151 ', 'PRO', None, (5.126629999999999, -17.05685, 35.54188)), ('B', ' 153 ', 'PRO', None, (-0.80900999999999, -19.01001999999999, 36.48711)), ('C', '   8 ', 'PRO', None, (-10.921669999999988, -42.37347, 53.55561)), ('C', '  95 ', 'PRO', None, (-6.57973999999998, -22.51166, 65.99891)), ('C', ' 141 ', 'PRO', None, (-9.726109999999995, -47.04894999999999, 31.68632)), ('H', ' 151 ', 'PRO', None, (-3.6825600000000005, 4.13474, 17.88468)), ('H', ' 153 ', 'PRO', None, (-4.947199999999997, 10.160359999999997, 19.12386)), ('L', '   8 ', 'PRO', None, (-26.50625999999999, 21.77395, 37.46132)), ('L', '  95 ', 'PRO', None, (-6.786880000000011, 15.015119999999996, 48.92379)), ('L', ' 141 ', 'PRO', None, (-32.06945, 21.811549999999993, 15.71806))]
data['rota'] = [('E', ' 334 ', 'ASN', 0.0634646292793253, (10.859189999999998, 27.854069999999993, 92.24821)), ('E', ' 517 ', 'LEU', 0.18250555031021568, (19.49134000000003, 15.72121, 77.61247)), ('A', ' 517 ', 'LEU', 0.07271884835636581, (-11.16289999999998, 2.329000000000001, 95.52989)), ('H', '   1 ', 'GLU', 0.006973424104890559, (5.414410000000004, 34.279860000000006, 25.846229999999995)), ('H', ' 183 ', 'SER', 0.003161985246223243, (-13.810569999999998, 12.43512, 8.41499)), ('B', ' 183 ', 'SER', 0.0, (-1.7314699999999945, -27.71704, 25.28588))]
data['cbeta'] = []
data['probe'] = [(' H 131  SER  HG ', ' H 135  THR  N  ', -0.803, (-23.63, 17.86, -8.064)), (' B 131  SER  HG ', ' B 135  THR  N  ', -0.691, (-5.358, -37.654, 8.637)), (' B  99  HIS  HB2', ' B 105  ASN  HB2', -0.651, (-20.177, -21.302, 54.944)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.644, (-12.112, -20.775, 85.941)), (' B  47  TRP  HE1', ' B  50  VAL HG23', -0.634, (-9.677, -17.851, 59.245)), (' L  63  SER  HB2', ' L  74  THR  HB ', -0.631, (-22.585, 34.958, 37.937)), (' L 120  PRO  HD3', ' L 132  VAL HG22', -0.626, (-19.893, 5.05, -1.993)), (' L 147  GLN  HB3', ' L 195  GLU  HB3', -0.625, (-33.201, 8.195, 4.808)), (' H  47  TRP  HE1', ' H  50  VAL HG23', -0.607, (-2.216, 17.994, 42.197)), (' B 199  ILE HG12', ' B 214  LYS  HG2', -0.606, (-8.573, -17.904, 14.53)), (' H  99  HIS  HB2', ' H 105  ASN  HB2', -0.589, (-4.664, 28.851, 38.414)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.586, (20.027, 19.057, 82.471)), (' A 383  SER  HB3', ' A 386  LYS  HB2', -0.572, (-2.937, -10.055, 98.981)), (' E 396  TYR  HB2', ' E 514  SER  HB2', -0.561, (12.572, 22.661, 72.764)), (' H  82  MET  HB3', ' H  85  LEU HD21', -0.556, (1.477, 4.996, 33.289)), (' A 403  ARG  NH2', ' C  92  ASP  OD1', -0.538, (-16.196, -24.025, 70.807)), (' C 185  ASP  OD1', ' C 188  LYS  NZ ', -0.537, (19.681, -34.969, 16.105)), (' B 123  PRO  HB3', ' B 149  TYR  HB3', -0.535, (4.063, -18.932, 28.166)), (' E 431  GLY  HA2', ' E 515  PHE  CD2', -0.531, (9.619, 16.335, 75.332)), (' L 120  PRO  HB3', ' L 131  SER  H  ', -0.53, (-16.144, 3.499, -0.084)), (' B  11  LEU  HB2', ' B 151  PRO  HG3', -0.529, (5.294, -15.379, 38.467)), (' C 166  GLN  HG3', ' C 173  TYR  CZ ', -0.528, (-11.149, -40.235, 35.381)), (' C 197  THR HG22', ' C 204  PRO  HB3', -0.524, (0.601, -50.431, 21.673)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.523, (-3.312, 19.532, 69.233)), (' E 403  ARG  NH2', ' L  92  ASP  OD1', -0.513, (-6.742, 24.266, 54.172)), (' C  16  GLY  HA2', ' C  77  SER  HB2', -0.503, (-26.411, -43.881, 42.944)), (' A 396  TYR  HB2', ' A 514  SER  HB2', -0.498, (-17.082, -5.129, 90.34)), (' C 120  PRO  HD3', ' C 132  VAL HG22', -0.494, (6.746, -32.877, 15.579)), (' B 199  ILE HD11', ' B 214  LYS  HE3', -0.493, (-9.798, -16.002, 13.852)), (' C  21  ILE HG21', ' C 102  THR HG21', -0.492, (-13.435, -39.867, 50.577)), (' H  11  LEU HD21', ' H 118  ALA  O  ', -0.491, (-1.39, -1.502, 20.189)), (' E 350  VAL HG22', ' E 422  ASN  HB3', -0.488, (4.987, 28.033, 60.427)), (' L 166  GLN  HG3', ' L 173  TYR  CZ ', -0.481, (-24.964, 22.354, 19.354)), (' H  36  TRP  CE2', ' H  80  LEU  HB2', -0.473, (3.333, 14.36, 34.781)), (' C   8  PRO  HD2', ' C  21  ILE HG22', -0.472, (-13.22, -41.929, 51.971)), (' E 431  GLY  HA2', ' E 515  PHE  HD2', -0.467, (9.806, 15.852, 75.311)), (' B  90  THR HG23', ' B 114  THR  HA ', -0.466, (3.837, -19.482, 43.847)), (' H 147  LYS  NZ ', ' H 175  GLN  OE1', -0.463, (-14.153, 2.051, 8.298)), (' C 161  GLU  HA ', ' C 177  SER  HA ', -0.462, (2.713, -36.007, 27.032)), (' L   2  ILE  O  ', ' L  97  THR HG21', -0.462, (-12.959, 14.857, 47.14)), (' D   2  NAG  H82', ' D   3  FUC  O2 ', -0.46, (-8.457, 31.716, 88.039)), (' A 501  ASN  HB3', ' A 505  TYR  HB2', -0.459, (-19.234, -30.061, 74.96)), (' A 350  VAL HG22', ' A 422  ASN  HB3', -0.457, (-21.052, -12.505, 77.179)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.457, (-10.599, -7.274, 92.813)), (' E 403  ARG  NH1', ' L  92  ASP  OD2', -0.453, (-6.127, 26.106, 53.632)), (' B 163  LEU HD21', ' B 186  VAL HG21', -0.453, (-14.121, -26.698, 20.041)), (' B  29  VAL HG13', ' B  34  MET  HG3', -0.453, (-14.591, -9.178, 54.884)), (' H 123  PRO  HB3', ' H 149  TYR  HB3', -0.452, (-5.461, 5.895, 10.759)), (' B  82  MET  HB3', ' B  85  LEU HD21', -0.451, (3.089, -12.5, 51.151)), (' B  36  TRP  CE2', ' B  80  LEU  HB2', -0.449, (-6.155, -11.194, 52.379)), (' B  11  LEU HD21', ' B 118  ALA  O  ', -0.448, (10.334, -14.52, 38.087)), (' B  47  TRP  NE1', ' B  50  VAL HG23', -0.446, (-9.436, -17.937, 59.724)), (' H   4  LEU HD21', ' H  27  PHE  CZ ', -0.444, (4.927, 26.236, 33.244)), (' L 186  TYR  O  ', ' L 192  TYR  OH ', -0.444, (-23.045, -1.008, -4.414)), (' C  35  TRP  HB2', ' C  48  ILE  HB ', -0.441, (-20.551, -31.471, 54.784)), (' C  22  THR HG22', ' C  72  THR HG22', -0.439, (-16.966, -42.072, 58.993)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.438, (-19.043, -12.879, 73.93)), (' C 145  LYS  HB3', ' C 197  THR  OG1', -0.437, (0.875, -49.214, 26.581)), (' L 185  ASP  HA ', ' L 188  LYS  HZ3', -0.433, (-22.806, -6.463, -2.556)), (' E 418  ILE  HA ', ' E 422  ASN HD22', -0.433, (4.181, 25.781, 57.207)), (' B  47  TRP  CG ', ' C  96  VAL  HB ', -0.433, (-8.785, -21.55, 59.985)), (' E 439  ASN HD21', ' E 499  PRO  HA ', -0.431, (-15.121, 30.967, 64.465)), (' H  34  MET  HB3', ' H  78  LEU HD22', -0.43, (4.353, 20.552, 37.315)), (' E 350  VAL  HA ', ' E 400  PHE  HB2', -0.429, (3.239, 29.558, 64.663)), (' L 120  PRO  HG3', ' L 130  ALA  HB1', -0.428, (-17.769, 2.445, -2.165)), (' B 147  LYS  NZ ', ' B 175  GLN  OE1', -0.428, (8.63, -27.05, 25.699)), (' L  91  TYR  HA ', ' L  96  VAL HG22', -0.426, (-6.792, 20.725, 45.575)), (' H  47  TRP  NE1', ' H  50  VAL HG23', -0.421, (-2.316, 17.719, 42.668)), (' A 431  GLY  HA2', ' A 515  PHE  HD2', -0.419, (-10.192, -7.317, 92.438)), (' E 502  GLY  O  ', ' E 506  GLN  HG3', -0.417, (-13.152, 26.138, 61.701)), (' C  11  LEU HD21', ' C  19  VAL HG13', -0.415, (-16.745, -42.901, 48.776)), (' E 448  ASN  HB3', ' E 497  PHE  HB2', -0.414, (-8.211, 35.123, 62.112)), (' H  47  TRP  CG ', ' L  96  VAL  HB ', -0.413, (-5.933, 17.46, 42.999)), (' C 186  TYR  O  ', ' C 192  TYR  OH ', -0.413, (13.064, -35.221, 12.867)), (' B 156  VAL HG22', ' B 202  VAL HG22', -0.412, (-4.538, -20.272, 25.41)), (' A 426  PRO  HB2', ' A 428  ASP  OD1', -0.41, (-9.043, -1.181, 82.844)), (' A 502  GLY  O  ', ' A 506  GLN  HG3', -0.409, (-17.594, -30.379, 77.996)), (' E 456  PHE  HB3', ' E 473  TYR  CD1', -0.406, (8.273, 31.21, 47.451)), (' L 136  LEU  HB2', ' L 175  LEU  HB3', -0.406, (-25.513, 15.526, 9.945)), (' B  93  TYR  O  ', ' B 110  GLY  HA2', -0.406, (-7.561, -16.679, 46.279)), (' H 101  ARG  O  ', ' H 102  PRO  C  ', -0.405, (-3.361, 34.342, 40.175)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.405, (-8.723, -11.971, 90.244)), (' L  50  ASP  OD1', ' L  91  TYR  OH ', -0.404, (-8.003, 29.809, 46.321)), (' L 145  LYS  HB3', ' L 197  THR  OG1', -0.404, (-35.038, 11.743, 10.623)), (' H  93  TYR  O  ', ' H 110  GLY  HA2', -0.403, (-1.734, 16.419, 28.813)), (' H  35  SER  OG ', ' H  50  VAL HG22', -0.402, (-0.437, 19.861, 41.934)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.401, (-22.949, -20.886, 84.911)), (' L  90  GLN  O  ', ' L  96  VAL HG13', -0.401, (-9.009, 20.516, 44.386)), (' B  34  MET  HB3', ' B  78  LEU HD22', -0.4, (-13.028, -11.873, 53.869))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
