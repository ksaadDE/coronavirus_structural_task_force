# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.030020026691398492, (-1.5310000000000004, -5.054, 25.599)), ('B', '   5 ', 'LYS', 0.012825832528137049, (16.232, 11.24, 23.616))]
data['omega'] = []
data['rota'] = [('B', '  47 ', 'GLU', 0.0, (24.104, -24.493, 37.6)), ('B', ' 196 ', 'THR', 0.058793679416277014, (35.899000000000015, 3.449, 35.69))]
data['cbeta'] = [('B', '  44 ', 'CYS', ' ', 0.2736929723271896, (23.88200000000001, -22.186, 30.599))]
data['probe'] = [(' A  75  LEU  O  ', ' A 502  HOH  O  ', -0.895, (-5.791, 10.534, -3.261)), (' B  67  LEU HD21', ' B  69  GLN HE21', -0.845, (8.225, -22.445, 21.676)), (' A   4  ARG  O  ', ' A 299  GLN  NE2', -0.795, (12.724, 3.261, 30.748)), (' B 288  GLU  OE2', ' B 502  HOH  O  ', -0.795, (23.943, 11.558, 28.439)), (' B 165  MET  HE1', ' B 187  ASP  HA ', -0.768, (27.516, -14.145, 30.086)), (' A 196  THR  O  ', ' A 503  HOH  O  ', -0.767, (-0.165, 25.448, 34.72)), (' B  75  LEU  O  ', ' B 503  HOH  O  ', -0.763, (11.282, -24.809, 15.973)), (' A 167  LEU HD12', ' A 171  VAL HG23', -0.726, (3.083, 25.611, 24.029)), (' B 194  ALA  O  ', ' B 505  HOH  O  ', -0.717, (35.069, -1.753, 31.98)), (' B 153  ASP  O  ', ' B 504  HOH  O  ', -0.716, (19.715, 7.608, 7.166)), (' A 192  GLN  OE1', ' A 505  HOH  O  ', -0.715, (-4.945, 29.265, 22.095)), (' B 263  ASP  OD2', ' B 506  HOH  O  ', -0.699, (34.196, 30.986, 17.075)), (' B  67  LEU HD21', ' B  69  GLN  NE2', -0.69, (7.533, -22.564, 21.589)), (' B 298  ARG  HB2', ' B 303  VAL  HB ', -0.677, (18.39, 12.405, 10.605)), (' A 142  ASN  HA ', ' A 401 AASC  H62', -0.656, (6.388, 22.205, 10.939)), (' A 225  THR HG21', ' A 269  LYS  HE3', -0.646, (5.38, 15.964, 54.401)), (' B 221  ASN  OD1', ' B 507  HOH  O  ', -0.629, (34.036, 31.135, 24.057)), (' B  67  LEU HD23', ' B 520  HOH  O  ', -0.627, (10.014, -21.332, 21.621)), (' B 142  ASN  HA ', ' B 401 AASC  H62', -0.622, (15.991, -11.641, 32.798)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.58, (27.54, -13.458, 19.196)), (' A 107  GLN  N  ', ' A 110  GLN  OE1', -0.568, (-4.844, 11.509, 30.779)), (' B 245  ASP  O  ', ' B 249  ILE HG12', -0.561, (35.668, 13.678, 13.824)), (' A 230  PHE  HA ', ' A 269  LYS  NZ ', -0.559, (4.888, 18.042, 53.06)), (' B  27  LEU HD13', ' B  39  PRO  HD2', -0.559, (19.225, -15.105, 23.086)), (' B 100  LYS  HE2', ' B 156  CYS  SG ', -0.552, (21.271, -1.577, 4.729)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.539, (-2.419, 17.201, 9.736)), (' A 142  ASN  ND2', ' A 401 AASC  O5 ', -0.531, (5.713, 24.523, 9.885)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.531, (-8.957, 17.012, 15.869)), (' A  45  THR HG23', ' A  48  ASP  H  ', -0.53, (-2.111, 31.769, 4.752)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.527, (-15.457, 27.671, 2.482)), (' B 127  GLN  NE2', ' B 518  HOH  O  ', -0.511, (21.277, 6.727, 18.191)), (' B 247  VAL  O  ', ' B 510  HOH  O  ', -0.507, (35.597, 19.509, 12.852)), (' B 239  TYR  CZ ', ' B 272  LEU HD21', -0.507, (33.221, 17.289, 31.262)), (' B  17  MET  HG3', ' B 117  CYS  SG ', -0.502, (12.065, -7.679, 20.103)), (' A 225  THR HG22', ' A 226  THR  N  ', -0.486, (2.925, 14.297, 56.174)), (' A 221  ASN HD22', ' A 270  GLU  HG3', -0.484, (14.091, 13.873, 54.77)), (' A 230  PHE  HA ', ' A 269  LYS  HZ3', -0.479, (5.02, 17.836, 52.796)), (' B 239  TYR  CE1', ' B 272  LEU HD21', -0.474, (33.518, 17.531, 31.647)), (' B 165  MET  CE ', ' B 187  ASP  HA ', -0.469, (27.781, -13.697, 30.106)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.463, (10.46, 2.985, 38.741)), (' B 111  THR HG22', ' B 129  ALA  HB2', -0.46, (25.043, 6.883, 22.738)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.456, (2.361, 14.541, 34.545)), (' B  70  ALA  O  ', ' B  73  VAL HG22', -0.452, (5.269, -17.389, 14.145)), (' A 225  THR HG22', ' A 226  THR  H  ', -0.449, (2.84, 14.605, 56.394)), (' A 140  PHE  O  ', ' B   1  SER  N  ', -0.445, (10.306, 22.254, 16.666)), (' B  87  LEU HD21', ' B  89  LEU HD21', -0.442, (20.721, -22.745, 18.872)), (' B  76  ARG  NH1', ' B 509  HOH  O  ', -0.442, (12.284, -32.12, 11.913)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.438, (9.919, -4.148, 20.093)), (' B 228  ASN  O  ', ' B 232  LEU  HG ', -0.436, (46.112, 20.127, 27.232)), (' A 218  TRP  CD2', ' A 279  ARG  HD2', -0.426, (22.287, 11.347, 47.387)), (' B 288  GLU  OE1', ' B 511  HOH  O  ', -0.426, (21.704, 14.475, 29.346)), (' A 176  ASP  HB2', ' A 508  HOH  O  ', -0.426, (-8.35, 11.742, 21.272)), (' A 230  PHE  CD1', ' A 265  CYS  HB3', -0.424, (5.197, 14.081, 51.111)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.42, (-5.957, 0.558, 8.286)), (' B 227  LEU  HA ', ' B 227  LEU HD23', -0.419, (41.453, 20.608, 22.038)), (' A 137  LYS  O  ', ' B   4  ARG  NH2', -0.412, (9.144, 16.345, 26.311)), (' B 209  TYR  O  ', ' B 212  VAL HG22', -0.409, (23.971, 24.236, 19.007)), (' B 101  TYR  HA ', ' B 157  VAL  O  ', -0.408, (20.78, -4.003, 8.957)), (' B 298  ARG  O  ', ' B 302  GLY  N  ', -0.404, (16.229, 16.192, 11.381)), (' A   1  SER  N  ', ' B 140  PHE  O  ', -0.402, (17.034, -5.136, 34.715))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
