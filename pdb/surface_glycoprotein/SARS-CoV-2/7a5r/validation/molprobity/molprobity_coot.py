# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', ' 153 ', 'PRO', 0.17627616536361682, (213.783, 258.08900000000006, 214.39500000000007)), ('I', ' 153 ', 'PRO', 0.1772479418490707, (221.037, 176.95899999999997, 214.32900000000006))]
data['omega'] = [('H', ' 151 ', 'PRO', None, (208.216, 254.824, 217.258)), ('H', ' 153 ', 'PRO', None, (213.318, 256.703, 214.344)), ('I', ' 151 ', 'PRO', None, (226.635, 180.224, 217.13100000000006)), ('I', ' 153 ', 'PRO', None, (221.502, 178.345, 214.272)), ('L', '   8 ', 'PRO', None, (241.186, 252.788, 230.347)), ('L', ' 101 ', 'PRO', None, (232.745, 230.239, 224.014)), ('L', ' 147 ', 'PRO', None, (234.363, 271.656, 229.168)), ('M', '   8 ', 'PRO', None, (193.622, 182.00699999999998, 230.503)), ('M', ' 101 ', 'PRO', None, (201.929, 204.546, 223.962)), ('M', ' 147 ', 'PRO', None, (200.48, 163.15099999999995, 229.334))]
data['rota'] = [('H', '   2 ', 'MET', 0.0007670100987391521, (234.80500000000006, 237.59, 199.70400000000006)), ('H', '   6 ', 'GLN', 0.10777601967906726, (222.941, 241.43199999999996, 204.12)), ('A', ' 395 ', 'VAL', 0.003150532575091347, (254.23, 220.48599999999993, 207.735)), ('A', ' 525 ', 'CYS', 0.12841566971293358, (258.334, 229.32, 203.45700000000005)), ('B', ' 395 ', 'VAL', 0.003150532575091347, (180.593, 214.339, 207.70800000000006)), ('B', ' 525 ', 'CYS', 0.12859391396846995, (176.473, 205.514, 203.427)), ('I', '   2 ', 'MET', 0.0006246637274303341, (199.87099999999995, 197.45499999999998, 199.84200000000007)), ('I', '   6 ', 'GLN', 0.10814466655116343, (211.779, 193.61099999999996, 204.137))]
data['cbeta'] = []
data['probe'] = [(' H 174  LEU  O  ', ' H 174  LEU HD12', -1.053, (212.981, 258.006, 228.392)), (' I 174  LEU  O  ', ' I 174  LEU HD12', -1.049, (221.993, 177.123, 228.236)), (' M 119  PRO  HB3', ' M 145  PHE  HB3', -0.758, (206.086, 159.002, 227.086)), (' L 119  PRO  HB3', ' L 145  PHE  HB3', -0.733, (228.236, 276.042, 227.355)), (' I  91  THR  HA ', ' I 115  VAL  O  ', -0.716, (219.896, 189.306, 216.089)), (' H  91  THR  HA ', ' H 115  VAL  O  ', -0.716, (214.98, 245.542, 216.613)), (' A 472  ILE HG13', ' A 482  GLY  HA2', -0.661, (244.906, 183.827, 217.828)), (' B 472  ILE HG13', ' B 482  GLY  HA2', -0.66, (189.987, 250.943, 217.886)), (' I 218  LYS  NZ ', ' M 127  SER  OG ', -0.648, (231.431, 155.267, 221.338)), (' I 141  ALA  HB3', ' M 124  PHE  HZ ', -0.629, (217.504, 155.805, 221.596)), (' I 174  LEU  CD1', ' I 174  LEU  O  ', -0.626, (221.766, 177.689, 228.311)), (' H 174  LEU  CD1', ' H 174  LEU  O  ', -0.613, (213.459, 257.405, 228.521)), (' H  38  ARG  HB3', ' H  48  MET  HE2', -0.608, (222.648, 239.852, 217.564)), (' H 198  TYR  HB2', ' H 215  VAL  HB ', -0.598, (210.966, 279.122, 212.497)), (' I  38  ARG  HB3', ' I  48  MET  HE2', -0.596, (212.081, 195.591, 217.248)), (' I 198  TYR  HB2', ' I 215  VAL  HB ', -0.586, (223.886, 155.533, 211.892)), (' L 152  VAL HG11', ' L 183  SER  HB2', -0.579, (219.922, 271.337, 232.367)), (' M 152  VAL HG11', ' M 183  SER  HB2', -0.574, (215.12, 163.91, 231.925)), (' I 170  PHE  CE2', ' M 182  SER  HB2', -0.544, (215.469, 163.867, 223.535)), (' B 393  THR HG22', ' B 394  ASN HD22', -0.539, (174.223, 213.498, 210.164)), (' L  34  ILE HG22', ' L  36  LYS  HG2', -0.533, (252.238, 231.31, 217.252)), (' A 393  THR HG22', ' A 394  ASN HD22', -0.526, (260.414, 221.726, 210.378)), (' M  34  ILE HG22', ' M  36  LYS  HG2', -0.523, (181.965, 203.772, 217.245)), (' H 170  PHE  CE2', ' L 182  SER  HB2', -0.508, (219.076, 270.991, 223.949)), (' H  45  LEU HD11', ' L  50  PRO  HG2', -0.505, (231.587, 245.088, 216.3)), (' H 174  LEU  C  ', ' H 174  LEU HD12', -0.492, (212.258, 257.794, 228.382)), (' A 328  ARG  NH1', ' A 533  LEU  HB2', -0.491, (272.55, 237.194, 197.378)), (' A 493  GLN  NE2', ' I  16  GLU  OE1', -0.488, (232.238, 194.911, 210.986)), (' B 328  ARG  NH1', ' B 533  LEU  HB2', -0.487, (162.246, 197.635, 197.292)), (' I 140  ALA  HA ', ' M 122  PHE  CE2', -0.481, (215.215, 151.497, 221.055)), (' I 174  LEU  C  ', ' I 174  LEU HD12', -0.479, (222.499, 177.196, 228.239)), (' B 493  GLN  NE2', ' H  16  GLU  OE1', -0.465, (202.613, 240.047, 211.122)), (' I 140  ALA  HA ', ' M 122  PHE  HE2', -0.456, (215.374, 151.458, 221.597)), (' H 148  ASP  HA ', ' H 179  LEU  HB2', -0.454, (205.967, 260.578, 223.327)), (' I   2  MET  HB2', ' I   2  MET  HE2', -0.454, (201.989, 199.031, 199.401)), (' B 490  PHE  CD1', ' B 491  PRO  HD2', -0.454, (192.444, 244.716, 214.917)), (' A 490  PHE  CD1', ' A 491  PRO  HD2', -0.451, (242.305, 190.145, 214.856)), (' I 139  THR  HA ', ' I 189  PRO  HA ', -0.449, (212.578, 148.399, 216.433)), (' L  91  VAL  HA ', ' L 108  THR  O  ', -0.448, (236.306, 253.354, 221.522)), (' I 148  ASP  HA ', ' I 179  LEU  HB2', -0.446, (229.122, 174.626, 223.053)), (' B 273  ARG HH21', ' B 275  PHE  HE2', -0.446, (162.424, 172.355, 211.302)), (' H 145  LEU HD13', ' H 183  SER  HB3', -0.445, (212.627, 270.443, 222.453)), (' M 155  LYS  HB2', ' M 199  ALA  HB3', -0.442, (219.277, 154.866, 238.428)), (' I 170  PHE  HE2', ' M 182  SER  HB2', -0.441, (215.475, 163.442, 223.596)), (' L 114  ARG  HG2', ' L 115  THR  N  ', -0.441, (240.327, 273.65, 223.913)), (' I 145  LEU HD13', ' I 183  SER  HB3', -0.44, (222.268, 164.579, 222.375)), (' H 139  THR  HA ', ' H 189  PRO  HA ', -0.439, (222.218, 286.502, 216.813)), (' H 141  ALA  HB3', ' L 124  PHE  HZ ', -0.438, (217.425, 279.316, 221.771)), (' M  91  VAL  HA ', ' M 108  THR  O  ', -0.437, (198.414, 181.53, 221.629)), (' L 155  LYS  HB2', ' L 199  ALA  HB3', -0.437, (215.567, 279.929, 238.359)), (' H   2  MET  HB2', ' H   2  MET  HE2', -0.434, (232.656, 236.226, 199.311)), (' M 114  ARG  HG2', ' M 115  THR  N  ', -0.433, (194.857, 161.12, 223.913)), (' M 119  PRO  HB2', ' M 142  LEU HD22', -0.432, (208.76, 158.08, 228.976)), (' I 172  ALA  HB1', ' I 180  TYR  HB3', -0.432, (221.415, 174.973, 221.66)), (' I  16  GLU  O  ', ' I  85  SER  HA ', -0.429, (226.963, 199.843, 216.357)), (' H  16  GLU  O  ', ' H  85  SER  HA ', -0.429, (207.669, 235.394, 216.168)), (' A 472  ILE HD12', ' A 484  GLU  HG2', -0.428, (241.891, 185.07, 215.841)), (' L 114  ARG HH22', ' L 117  ALA  HB2', -0.428, (235.161, 275.869, 224.196)), (' H 172  ALA  HB1', ' H 180  TYR  HB3', -0.427, (213.14, 260.036, 221.977)), (' M 142  LEU HD21', ' M 202  VAL HG11', -0.426, (211.153, 157.876, 231.549)), (' B 472  ILE HD12', ' B 484  GLU  HG2', -0.425, (193.001, 249.763, 215.899)), (' M 114  ARG HH22', ' M 117  ALA  HB2', -0.425, (199.646, 158.985, 224.476)), (' L 119  PRO  HB2', ' L 142  LEU HD22', -0.423, (226.03, 276.808, 228.829)), (' L 142  LEU HD21', ' L 202  VAL HG11', -0.423, (224.009, 276.916, 231.159)), (' B 503  VAL  HA ', ' B 506  GLN  OE1', -0.422, (207.168, 226.419, 199.179)), (' L  18  ARG  HB3', ' L  18  ARG  HE ', -0.421, (251.269, 256.755, 223.897)), (' A 503  VAL  HA ', ' A 506  GLN  OE1', -0.415, (227.662, 208.527, 199.203)), (' L 121  VAL HG21', ' L 202  VAL HG21', -0.412, (224.364, 279.248, 232.042)), (' A 273  ARG HH21', ' A 275  PHE  HE2', -0.412, (272.302, 262.546, 211.298)), (' A 395  VAL HG12', ' A 524  VAL HG21', -0.411, (255.984, 222.795, 205.303)), (' B 454  ARG  HD3', ' B 457  ARG  HG3', -0.411, (191.395, 237.081, 218.204)), (' I  20  ILE HD12', ' I  83  TRP  HZ3', -0.41, (217.642, 196.287, 212.529)), (' H  20  ILE HD12', ' H  83  TRP  HZ3', -0.408, (217.235, 238.715, 212.609)), (' B 395  VAL HG12', ' B 524  VAL HG21', -0.407, (179.172, 212.259, 205.385)), (' L 156  VAL  O  ', ' L 156  VAL HG23', -0.406, (210.353, 277.562, 242.75)), (' L  52  LEU  HA ', ' L  52  LEU HD12', -0.406, (239.743, 243.837, 214.035)), (' M 121  VAL HG21', ' M 202  VAL HG21', -0.404, (210.525, 155.524, 232.182)), (' M 197  VAL  O  ', ' M 197  VAL HG23', -0.402, (224.561, 152.956, 239.4)), (' M 156  VAL  O  ', ' M 156  VAL HG23', -0.401, (224.79, 157.709, 242.468)), (' M 156  VAL HG12', ' M 198  TYR  CD2', -0.4, (225.284, 157.163, 237.59))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
