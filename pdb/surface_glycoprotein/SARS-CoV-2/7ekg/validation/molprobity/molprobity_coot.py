# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (-39.921, 2.399, -31.847999999999995))]
data['rota'] = [('A', '  45 ', 'LEU', 2.1627781713674567e-05, (-40.659000000000006, 14.421, -5.764999999999998)), ('A', ' 102 ', 'GLN', 0.0905168802919753, (-34.67, 35.032, -17.402)), ('A', ' 103 ', 'ASN', 0.1740238130061401, (-36.48, 36.04800000000003, -20.62)), ('A', ' 107 ', 'VAL', 0.06362657905409404, (-41.707, 39.528, -23.351)), ('A', ' 171 ', 'GLU', 0.27299697876238593, (-44.635, 12.463000000000001, -44.26599999999999)), ('A', ' 236 ', 'LEU', 0.0008570952283091077, (-9.070000000000004, 14.011999999999999, -38.979)), ('A', ' 283 ', 'VAL', 0.2441815527145891, (-13.974, -2.503, -38.308)), ('A', ' 338 ', 'ASN', 0.0, (-43.914, -6.731, -14.085999999999997)), ('A', ' 363 ', 'LYS', 0.0, (-28.917000000000005, -4.801, -16.35899999999999)), ('A', ' 430 ', 'GLU', 0.08130133402250166, (-3.7360000000000033, -5.604, -25.592999999999986)), ('A', ' 559 ', 'ARG', 0.019606245965033128, (-17.981000000000005, 23.046, -6.437)), ('B', ' 358 ', 'ILE', 0.2999679987817898, (-35.272, 23.423, 36.658)), ('B', ' 382 ', 'VAL', 0.2461461603445895, (-18.388, 23.052, 32.545)), ('B', ' 445 ', 'VAL', 0.009381058771396056, (-43.809, 12.502, 3.47)), ('B', ' 498 ', 'GLN', 0.10200468703064774, (-39.712, 15.548000000000002, 4.467))]
data['cbeta'] = []
data['probe'] = [(' A 107  VAL HG11', ' A 194  ASN  ND2', -1.1, (-37.802, 38.171, -25.08)), (' A 107  VAL HG11', ' A 194  ASN HD21', -0.894, (-37.623, 37.879, -23.898)), (' A 107  VAL  CG1', ' A 194  ASN HD21', -0.726, (-38.596, 37.515, -24.183)), (' A 490  PRO  HA ', ' A 612  PRO  HG2', -0.695, (-29.234, 9.942, -53.547)), (' A 105  SER  O  ', ' A 105  SER  OG ', -0.639, (-44.656, 37.877, -17.861)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.636, (-30.223, 32.224, 45.078)), (' A 607  SER  OG ', ' A 609  ASP  OD1', -0.6, (-18.35, 16.755, -57.968)), (' B 366  SER  HB3', ' B 388  ASN HD21', -0.597, (-22.854, 12.043, 36.02)), (' A 107  VAL HG21', ' A 193  ALA  HB3', -0.587, (-39.152, 40.64, -26.699)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.582, (-28.229, 27.424, 42.875)), (' A 560  LEU HD22', ' A 564  GLU  HG3', -0.572, (-15.614, 29.436, -9.44)), (' A 432  ASN  HA ', ' A 435  GLU  HG3', -0.554, (-3.313, -1.313, -29.961)), (' A 107  VAL  CG2', ' A 193  ALA  HB3', -0.549, (-39.505, 40.639, -26.745)), (' A  85  LEU  HG ', ' A 101  GLN HE22', -0.539, (-31.295, 42.764, -14.525)), (' A 131  LYS  HD3', ' A 141  CYS  HB2', -0.521, (-48.437, 3.225, -37.968)), (' B 521  PRO  HB2', ' B 523  THR HG23', -0.519, (-31.434, 27.374, 46.286)), (' A 474  MET  HE1', ' A 500  PRO  HD2', -0.517, (-34.733, 21.377, -43.752)), (' A 419  LYS  HE3', ' A 426  PRO  HA ', -0.516, (-4.591, -8.658, -16.651)), (' B 379  CYS  HB2', ' B 384  PRO  HD3', -0.513, (-18.732, 19.232, 28.451)), (' B 393  THR HG21', ' B 518  LEU  H  ', -0.503, (-26.809, 31.487, 41.455)), (' B 474  GLN  NE2', ' B 479  PRO  HA ', -0.5, (-43.508, 50.388, 4.993)), (' B 334  ASN  O  ', ' B 362  VAL  N  ', -0.499, (-33.637, 16.567, 42.666)), (' A  55  THR  O  ', ' A  59  VAL HG23', -0.498, (-50.049, 8.663, -14.151)), (' A 379  ILE  O  ', ' A 383  MET  HG3', -0.495, (-24.048, 14.718, -6.194)), (' B 383  SER  H  ', ' B 387  LEU HD22', -0.493, (-17.093, 20.406, 34.072)), (' A  81  GLN  HG3', ' A 101  GLN  HG2', -0.486, (-36.505, 41.11, -15.046)), (' B 455  LEU HD22', ' B 493  GLN  HG3', -0.482, (-37.567, 32.145, 4.493)), (' A 346  PRO  HB3', ' A 360  MET  HG3', -0.478, (-29.446, 4.407, -16.189)), (' A 144  LEU  HA ', ' A 148  LEU  HB2', -0.471, (-39.096, 5.742, -36.818)), (' B 366  SER  HB3', ' B 388  ASN  ND2', -0.47, (-23.221, 12.405, 36.253)), (' A 140  GLU  HA ', ' A 140  GLU  OE1', -0.464, (-47.975, -3.415, -39.346)), (' B 395  VAL HG22', ' B 515  PHE  HD1', -0.464, (-27.439, 24.053, 34.729)), (' B 382  VAL HG11', ' B 515  PHE  HE2', -0.463, (-22.772, 22.154, 32.081)), (' B 383  SER  O  ', ' B 387  LEU  HB2', -0.461, (-18.773, 18.2, 33.923)), (' A 107  VAL  CG2', ' A 193  ALA  CB ', -0.458, (-39.754, 41.223, -26.592)), (' A 107  VAL HG21', ' A 193  ALA  CB ', -0.458, (-39.213, 41.121, -26.472)), (' A 239  HIS  CE1', ' A 596  LYS  HG2', -0.451, (-4.561, 10.948, -44.021)), (' B 447  GLY  HA2', ' B 498 AGLN  HG2', -0.448, (-42.364, 17.468, 3.86)), (' A 293  VAL  O  ', ' A 297  MET  HG3', -0.446, (-18.451, -8.319, -17.059)), (' A 294  THR HG23', ' A 365  THR  HA ', -0.446, (-23.544, -7.302, -19.242)), (' A 524  GLN  HG2', ' A 583  PRO  HG2', -0.442, (-8.06, 20.04, -24.345)), (' A 315  PHE  CZ ', ' A 408  MET  HG3', -0.441, (-17.831, 9.826, -12.525)), (' A 131  LYS  HD3', ' A 141  CYS  CB ', -0.44, (-47.975, 3.158, -38.083)), (' A 339  VAL  O  ', ' A 341  LYS  HG2', -0.439, (-46.092, -1.514, -14.893)), (' B 362  VAL  CG1', ' B 526  GLY  HA2', -0.437, (-29.139, 15.069, 42.403)), (' B 391  CYS  HA ', ' B 525  CYS  HA ', -0.433, (-25.471, 21.521, 42.427)), (' A  64  ASN  O  ', ' A  68  LYS  HG3', -0.432, (-48.902, 22.902, -8.616)), (' A  57  GLU  O  ', ' A  61  ASN  ND2', -0.428, (-51.622, 12.273, -8.692)), (' A 100  LEU  C  ', ' A 102  GLN  N  ', -0.427, (-34.894, 35.986, -15.232)), (' A 549  GLU  CD ', ' A 549  GLU  H  ', -0.417, (-3.795, 12.891, -6.804)), (' B 502  GLY  O  ', ' B 506  GLN  HG3', -0.415, (-31.985, 15.108, 6.2)), (' B 362  VAL HG13', ' B 526  GLY  HA2', -0.414, (-28.926, 15.616, 42.566)), (' A 462  MET  HE2', ' A 468  ILE HD11', -0.411, (-27.639, 29.183, -44.025)), (' A  74  LYS  HG2', ' A 105  SER  HB2', -0.41, (-44.335, 35.574, -15.735)), (' A 415  PRO  O  ', ' A 419  LYS  HG3', -0.408, (-7.7, -4.184, -17.449)), (' A 579  MET  HB3', ' A 579  MET  HE2', -0.408, (-13.976, 26.945, -27.494)), (' B 334  ASN  O  ', ' B 362  VAL HG23', -0.405, (-33.55, 15.586, 43.597)), (' A 524  GLN  HB3', ' A 574  VAL HG11', -0.401, (-9.326, 20.984, -20.539))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
