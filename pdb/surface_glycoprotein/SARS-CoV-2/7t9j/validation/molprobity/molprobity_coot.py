# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 372 ', 'ALA', 0.08063534255076346, (184.79581, 204.05567000000005, 265.13605))]
data['omega'] = []
data['rota'] = [('A', ' 295 ', 'PRO', 0.19853171125276017, (188.49581, 168.21967, 214.27105000000006)), ('B', ' 656 ', 'VAL', 0.2243103434818843, (235.68080999999995, 217.23667, 195.74105)), ('C', ' 295 ', 'PRO', 0.22862825003376436, (177.47981, 224.59667, 213.87605000000002)), ('C', ' 913 ', 'GLN', 0.2190187222670247, (200.99281, 213.25867, 157.90605))]
data['cbeta'] = []
data['probe'] = [(' C  46  SER  HA ', ' C 279  TYR  O  ', -0.693, (199.283, 233.888, 217.099)), (' B  46  SER  HA ', ' B 279  TYR  O  ', -0.673, (228.664, 182.223, 217.363)), (' C  51  THR  O  ', ' C 274  THR  HA ', -0.657, (187.241, 225.413, 225.827)), (' B 856  LYS  HD3', ' B 966  LEU HD12', -0.644, (209.478, 184.328, 221.307)), (' B 156  GLU  OE2', ' B 158  ARG  NH1', -0.637, (260.164, 188.782, 258.072)), (' A 856  LYS  HZ2', ' C 570  ALA  HB3', -0.632, (176.972, 195.687, 222.735)), (' A 572  THR HG22', ' B 856  LYS  HE3', -0.625, (212.604, 181.253, 221.812)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.623, (228.533, 215.285, 188.487)), (' B  26  PRO  HB3', ' B  65  PHE  HE1', -0.619, (251.422, 204.344, 238.023)), (' B 821  LEU HD11', ' B 939  SER  HB2', -0.616, (226.418, 183.01, 186.599)), (' C 821  LEU HD11', ' C 939  SER  HB3', -0.611, (199.655, 231.066, 186.493)), (' C 156  GLU  OE2', ' C 158  ARG  NH1', -0.608, (174.888, 257.646, 255.873)), (' A 105  ILE  HB ', ' A 239  GLN  HB2', -0.601, (173.575, 158.495, 247.645)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.6, (171.966, 184.043, 185.722)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.589, (162.867, 250.251, 239.561)), (' B 970  PHE  O  ', ' B 995  ARG  NH2', -0.587, (205.016, 197.477, 231.163)), (' A 156  GLU  OE2', ' A 158  ARG  NH1', -0.578, (160.719, 149.015, 256.277)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.552, (173.19, 141.911, 239.726)), (' A 127  VAL HG21', ' A1302  NAG  H62', -0.548, (160.16, 166.903, 253.083)), (' B 130  VAL  HB ', ' B 168  PHE  HB3', -0.545, (233.309, 187.752, 254.535)), (' A 189  LEU  HB3', ' A 208  THR  HB ', -0.545, (162.646, 162.97, 228.018)), (' B 568  ASP  OD2', ' C 856  LYS  NZ ', -0.543, (207.609, 223.538, 219.896)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.543, (232.323, 198.046, 217.33)), (' A 756  TYR  OH ', ' A 994  ASP  OD1', -0.542, (193.97, 205.156, 230.031)), (' A 995  ARG  NH1', ' B 994  ASP  OD2', -0.54, (196.617, 195.157, 231.947)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.54, (182.934, 228.786, 216.765)), (' B 126  VAL HG13', ' B 174  PRO  HA ', -0.535, (244.248, 179.468, 244.848)), (' A 895  GLN  NE2', ' C1074  ASN  OD1', -0.535, (175.906, 211.563, 161.705)), (' C 418  ILE  HA ', ' C 422  ASN HD22', -0.535, (195.83, 178.931, 259.03)), (' A  96  GLU  O  ', ' A 188  ASN  HB2', -0.529, (159.617, 158.049, 232.832)), (' C 278  LYS  HE3', ' C 287  ASP  HB2', -0.527, (191.402, 235.695, 215.99)), (' C 323  THR  OG1', ' C 324  GLU  OE1', -0.525, (162.787, 211.771, 232.008)), (' C 724  THR HG23', ' C 934  ILE HD12', -0.525, (196.873, 222.057, 181.718)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.525, (212.474, 193.259, 143.319)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.524, (182.342, 170.944, 217.433)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.522, (232.367, 203.64, 208.012)), (' A 192  PHE  HA ', ' A 204  TYR  O  ', -0.522, (169.183, 168.41, 235.607)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.52, (260.086, 204.378, 242.125)), (' A  46  SER  HA ', ' A 279  TYR  O  ', -0.52, (170.11, 182.247, 218.042)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.519, (244.031, 179.955, 253.935)), (' B 533  LEU HD21', ' B 585  LEU HD11', -0.517, (218.076, 234.624, 232.257)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.517, (186.519, 168.903, 207.33)), (' C 985  ASP  N  ', ' C 985  ASP  OD1', -0.516, (206.506, 209.111, 244.867)), (' A 125  ASN HD22', ' A 171  VAL HG13', -0.515, (158.694, 170.636, 250.627)), (' B 193  VAL HG23', ' B 223  LEU HD22', -0.514, (238.996, 189.865, 233.36)), (' C 393  THR  HB ', ' C 522  ALA  HA ', -0.51, (171.313, 188.332, 244.154)), (' C 858  LEU HD21', ' C 962  LEU HD23', -0.51, (206.524, 214.064, 214.805)), (' A 914  ASN  ND2', ' A1111  GLU  OE2', -0.51, (188.27, 188.129, 153.15)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.508, (185.296, 166.816, 217.378)), (' A 329  PHE  H  ', ' A 530  SER  HB2', -0.507, (217.07, 168.538, 242.893)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.507, (181.065, 186.241, 181.23)), (' B  93  ALA  HB3', ' B 266  TYR  HB2', -0.507, (247.348, 194.677, 232.752)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.506, (172.66, 146.481, 238.876)), (' B 724  THR HG23', ' B 934  ILE HD12', -0.505, (220.113, 190.483, 181.751)), (' B 189  LEU  HB3', ' B 208  THR  HB ', -0.505, (248.372, 185.738, 229.317)), (' A 856  LYS  NZ ', ' C 568  ASP  OD2', -0.504, (174.98, 196.005, 223.178)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.502, (177.966, 228.547, 216.82)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.5, (195.164, 230.262, 230.729)), (' C 858  LEU HD23', ' C 959  LEU HD22', -0.498, (207.482, 215.125, 212.778)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.497, (234.364, 202.578, 217.528)), (' C  46  SER  CA ', ' C 279  TYR  O  ', -0.497, (199.447, 233.625, 217.549)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.496, (199.939, 219.78, 174.546)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.496, (256.638, 201.813, 241.324)), (' B 319  ARG  NH2', ' B 590  CYS  O  ', -0.495, (218.938, 218.967, 222.035)), (' A 557  LYS  NZ ', ' A 574  ASP  OD2', -0.495, (220.618, 174.584, 221.588)), (' B 762  GLN  OE1', ' B 765  ARG  NH1', -0.494, (188.661, 188.9, 212.735)), (' C 129  LYS  NZ ', ' C 160  TYR  OH ', -0.494, (185.876, 246.259, 257.17)), (' A 707  TYR  HB3', ' B 792  PRO  HG3', -0.493, (209.356, 172.539, 167.573)), (' C 434  ILE  O  ', ' C 510  VAL  HA ', -0.489, (187.455, 190.79, 260.731)), (' B1074  ASN  OD1', ' C 895  GLN  NE2', -0.489, (221.744, 214.067, 162.382)), (' A 736  VAL HG11', ' A1004  LEU HD11', -0.486, (185.432, 202.956, 215.848)), (' C 776  LYS  NZ ', ' C 780  GLU  OE2', -0.486, (212.577, 201.507, 191.963)), (' C 656  VAL HG12', ' C 658  ASN  H  ', -0.485, (165.967, 222.396, 191.751)), (' C  93  ALA  HB3', ' C 266  TYR  HB2', -0.484, (177.716, 243.276, 231.574)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.484, (216.993, 189.474, 174.81)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.48, (254.571, 195.743, 233.306)), (' B1040  VAL HG21', ' C1035  GLY  HA3', -0.48, (207.161, 206.038, 173.818)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.478, (165.574, 172.133, 247.459)), (' C 659  SER  HB3', ' C 698  SER  HB3', -0.478, (171.68, 217.1, 187.45)), (' B 125  ASN HD22', ' B 171  VAL HG13', -0.478, (242.488, 177.027, 250.964)), (' A 946  GLY  O  ', ' A 950  ASP  HB2', -0.477, (185.109, 187.24, 197.462)), (' C 377  PHE  HE2', ' C 384  PRO  HB3', -0.474, (183.652, 200.347, 253.788)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.473, (166.372, 248.496, 238.656)), (' B 570  ALA  HB3', ' C 856  LYS  HZ3', -0.472, (205.981, 221.733, 219.761)), (' A1074  ASN  OD1', ' B 895  GLN  NE2', -0.472, (201.121, 173.381, 161.799)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.471, (197.756, 166.592, 187.601)), (' B 914  ASN  ND2', ' B1111  GLU  OE2', -0.47, (215.504, 195.635, 153.652)), (' B 142  ASP  HB2', ' B 156  GLU  HB3', -0.469, (258.982, 185.721, 254.792)), (' A 983  ARG  O  ', ' C 383  SER  N  ', -0.469, (184.052, 199.123, 245.332)), (' A 126  VAL HG23', ' A 174  PRO  HA ', -0.469, (159.139, 167.645, 243.938)), (' A1040  VAL HG21', ' B1035  GLY  HA3', -0.464, (200.722, 189.599, 173.652)), (' B 127  VAL HG22', ' B 171  VAL HG22', -0.463, (241.984, 179.435, 252.664)), (' A 656  VAL HG23', ' A 695  TYR  HB3', -0.462, (195.306, 162.39, 193.971)), (' B 736  VAL HG11', ' B1004  LEU HD11', -0.462, (202.446, 186.502, 215.946)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.462, (187.934, 191.967, 142.501)), (' C 756  TYR  OH ', ' C 994  ASP  OD1', -0.461, (205.925, 200.869, 230.706)), (' C 916  LEU HD22', ' C 923  ILE HD13', -0.46, (199.343, 219.387, 162.602)), (' B 722  VAL  HA ', ' B1064  HIS  O  ', -0.46, (216.548, 191.749, 176.478)), (' C 599  THR  HB ', ' C 608  VAL HG12', -0.46, (178.471, 225.784, 207.292)), (' C 127  VAL HG21', ' C1302  NAG  H62', -0.459, (190.322, 249.351, 253.232)), (' A  97  LYS  HG2', ' A 186  PHE  HD1', -0.458, (159.579, 152.703, 231.765)), (' C 226  LEU  HG ', ' C 227  VAL HG23', -0.457, (193.351, 241.504, 240.808)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.455, (168.559, 151.868, 231.879)), (' B 193  VAL  HB ', ' B 204  TYR  HB2', -0.454, (236.623, 189.437, 235.276)), (' C 934  ILE  HA ', ' C 934  ILE HD13', -0.453, (195.942, 224.992, 181.321)), (' B  39  PRO  HG3', ' B  55  PHE  HZ ', -0.453, (229.247, 190.916, 228.991)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.452, (199.081, 214.201, 143.308)), (' B 324  GLU  H  ', ' B 539  VAL HG12', -0.452, (225.579, 224.052, 232.044)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.45, (181.687, 189.962, 174.215)), (' B 756  TYR  OH ', ' B 994  ASP  OD1', -0.449, (195.849, 192.821, 229.807)), (' C  97  LYS  HG2', ' C 186  PHE  HD1', -0.448, (178.806, 257.212, 232.205)), (' C 195  LYS  O  ', ' C 201  PHE  HA ', -0.448, (187.485, 232.35, 242.272)), (' B  36  VAL HG23', ' B 222  ALA  HA ', -0.446, (237.161, 188.287, 226.824)), (' A 117  LEU HD22', ' A 231  ILE HD13', -0.445, (174.647, 169.817, 248.077)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.445, (174.718, 180.83, 231.534)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.444, (185.464, 171.479, 200.913)), (' A 139  PRO  HB3', ' A 159  VAL HG13', -0.443, (169.232, 156.449, 252.436)), (' C 598  ILE HG23', ' C 664  ILE HG21', -0.443, (178.463, 220.618, 202.031)), (' C  48  LEU  HA ', ' C 277  LEU  O  ', -0.443, (194.161, 229.708, 219.124)), (' C 720  ILE HG12', ' C 926  GLN HE21', -0.442, (195.098, 222.071, 167.371)), (' C  14  GLN  HB3', ' C 158  ARG  HE ', -0.442, (174.475, 253.722, 259.642)), (' A 128  ILE HG21', ' A 229  LEU HD13', -0.442, (169.485, 171.355, 248.08)), (' A  93  ALA  HB3', ' A 266  TYR  HB2', -0.442, (171.358, 158.987, 231.974)), (' C  48  LEU  HB3', ' C 276  LEU HD11', -0.442, (192.484, 226.87, 217.519)), (' B  46  SER  CA ', ' B 279  TYR  O  ', -0.441, (228.014, 181.736, 217.563)), (' C 736  VAL HG11', ' C1004  LEU HD11', -0.441, (208.735, 209.395, 216.41)), (' C 206  LYS  HB2', ' C 223  LEU  HA ', -0.438, (190.13, 242.057, 230.062)), (' A 984  LEU  HB3', ' A 988  GLU  HG2', -0.437, (188.203, 201.38, 242.55)), (' A 193  VAL  HB ', ' A 204  TYR  HB2', -0.437, (172.45, 170.233, 234.763)), (' A 790  LYS  HB3', ' A 790  LYS  HE2', -0.436, (168.269, 206.453, 176.155)), (' C  27  ALA  HB3', ' C  64  TRP  HB3', -0.436, (168.521, 245.328, 230.9)), (' B 742  ILE  O  ', ' B1000  ARG  NH1', -0.435, (204.652, 185.198, 226.72)), (' A 102  ARG  NH1', ' A 121  ASN  O  ', -0.435, (159.128, 161.463, 245.186)), (' C 229  LEU  HG ', ' C 231  ILE HG23', -0.435, (190.356, 234.751, 248.663)), (' B1048  HIS  HA ', ' B1066  THR HG22', -0.435, (212.269, 195.625, 173.95)), (' C 395  VAL  HA ', ' C 514  SER  O  ', -0.434, (178.544, 187.654, 250.148)), (' C 108  THR  O  ', ' C 237  ARG  NH1', -0.434, (173.565, 232.836, 250.706)), (' A 996  LEU  HA ', ' A 996  LEU HD23', -0.433, (189.079, 197.602, 228.973)), (' C 902  MET  HE3', ' C1049  LEU HD13', -0.433, (200.2, 217.056, 168.153)), (' B 105  ILE  O  ', ' B 238  PHE  HA ', -0.432, (242.277, 196.416, 247.813)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.432, (208.195, 196.427, 182.473)), (' A 722  VAL  HA ', ' A1064  HIS  O  ', -0.431, (183.971, 188.248, 175.982)), (' A1029  MET  HB2', ' A1029  MET  HE2', -0.43, (185.663, 200.9, 184.128)), (' C 318  PHE  O  ', ' C 592  PHE  HA ', -0.429, (172.716, 210.926, 218.858)), (' C 528  LYS  HB3', ' C 528  LYS  HE2', -0.428, (168.46, 203.977, 245.436)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.428, (189.503, 190.797, 173.284)), (' B  39  PRO  HG2', ' B  51  THR HG21', -0.427, (227.615, 190.358, 227.985)), (' B  52  GLN  OE1', ' B 274  THR  OG1', -0.423, (225.021, 199.822, 226.266)), (' C 720  ILE HG12', ' C 926  GLN  NE2', -0.423, (195.239, 221.611, 167.252)), (' C 345  THR  O  ', ' C 509  ARG  NH2', -0.423, (182.898, 186.847, 271.544)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.422, (197.022, 212.637, 173.65)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.422, (232.755, 188.467, 246.184)), (' A 566  GLY  N  ', ' A 575  ALA  O  ', -0.422, (221.347, 175.893, 228.558)), (' A 164  ASN  OD1', ' A 165  ASN  N  ', -0.422, (174.28, 166.627, 263.184)), (' A 715  PRO  O  ', ' A1110  TYR  N  ', -0.421, (192.858, 181.6, 158.715)), (' A  89  GLY  HA3', ' A 270  LEU HD12', -0.421, (179.847, 168.293, 236.701)), (' A 907  ASN HD22', ' C1107  ARG HH22', -0.419, (190.404, 199.379, 158.965)), (' B 715  PRO  O  ', ' B1110  TYR  N  ', -0.419, (218.963, 202.805, 159.65)), (' C 715  PRO  O  ', ' C1110  TYR  N  ', -0.419, (187.599, 214.706, 159.0)), (' B 322  PRO  HG3', ' B 549  THR HG21', -0.419, (221.149, 219.11, 229.799)), (' B 310  LYS  HG3', ' B 600  PRO  HA ', -0.418, (230.867, 201.359, 201.29)), (' A 903  ALA  HB2', ' A 916  LEU HD12', -0.417, (183.15, 194.809, 159.905)), (' A1094  VAL HG23', ' B 900  MET  HE1', -0.416, (205.376, 183.602, 157.056)), (' C 424  LYS  NZ ', ' C 425  LEU  O  ', -0.415, (193.747, 182.595, 248.062)), (' C 986  PRO  HA ', ' C 989  ALA  HB3', -0.415, (209.317, 207.187, 241.301)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.414, (174.511, 150.244, 230.877)), (' A  50  SER  HB2', ' A 304  LYS  HE3', -0.414, (182.286, 180.732, 220.411)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.414, (223.089, 189.97, 181.508)), (' C1141  LEU HD23', ' C1145  LEU HD22', -0.413, (195.634, 200.055, 131.955)), (' B 191  GLU  O  ', ' B 205  SER  HA ', -0.412, (241.08, 186.462, 235.242)), (' C 354  ASN  O  ', ' C 398  ASP  HA ', -0.412, (181.988, 182.928, 258.556)), (' B  48  LEU  HB3', ' B 276  LEU HD11', -0.411, (225.913, 190.367, 217.651)), (' A 191  GLU  O  ', ' A 205  SER  HA ', -0.41, (167.446, 167.701, 234.483)), (' A 934  ILE  HA ', ' A 934  ILE HD13', -0.409, (179.202, 183.991, 181.028)), (' A 278  LYS  HB2', ' A 278  LYS  HE3', -0.408, (174.236, 177.443, 216.836)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.408, (218.789, 190.392, 166.679)), (' A 612  TYR  O  ', ' A 648  GLY  HA3', -0.408, (202.515, 168.703, 209.095)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.408, (181.469, 225.474, 200.385)), (' C 128  ILE HD13', ' C 170  TYR  HD2', -0.407, (193.271, 242.277, 247.675)), (' A 763  LEU HD21', ' A1005  GLN  HG2', -0.407, (193.491, 204.56, 216.569)), (' A 598  ILE HG23', ' A 664  ILE HG21', -0.406, (191.139, 171.29, 202.34)), (' B 229  LEU  HB3', ' B 231  ILE HG23', -0.406, (232.352, 187.491, 248.512)), (' C  34  ARG  NH2', ' C 221  SER  OG ', -0.406, (185.686, 244.013, 225.508)), (' A 717  ASN  ND2', ' A1071  GLN  OE1', -0.405, (184.975, 177.176, 162.227)), (' A 103  GLY  HA3', ' A 119  ILE  O  ', -0.405, (166.377, 162.055, 246.675)), (' A  48  LEU  HB3', ' A 276  LEU HD11', -0.405, (178.532, 180.234, 218.083)), (' C 913  GLN  H  ', ' C 913  GLN  HG2', -0.405, (201.151, 210.779, 157.105)), (' C 959  LEU  O  ', ' C 963  VAL HG23', -0.403, (204.21, 216.638, 215.394)), (' C1028  LYS  NZ ', ' C1042  PHE  O  ', -0.403, (197.488, 208.653, 182.428)), (' C 722  VAL  HA ', ' C1064  HIS  O  ', -0.402, (197.518, 218.362, 176.597)), (' C  38  TYR  HB2', ' C 225  PRO  HD3', -0.401, (194.303, 236.004, 231.36)), (' B 866  THR  H  ', ' B 869  MET  HE3', -0.401, (204.981, 173.562, 193.439)), (' C 970  PHE  O  ', ' C 995  ARG  NH2', -0.401, (196.695, 207.064, 231.152)), (' C 612  TYR  O  ', ' C 648  GLY  HA3', -0.401, (170.983, 211.912, 208.908)), (' C 996  LEU  HA ', ' C 996  LEU HD23', -0.401, (202.041, 209.124, 229.079))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
