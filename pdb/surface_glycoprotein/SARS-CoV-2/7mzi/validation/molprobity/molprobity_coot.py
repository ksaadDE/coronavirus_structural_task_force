# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 151 ', 'PRO', None, (-39.465999999999994, -8.826, 21.499)), ('H', ' 153 ', 'PRO', None, (-38.171, -3.2539999999999996, 19.101)), ('L', ' 145 ', 'PRO', None, (-14.44300000000001, -0.28, 2.6590000000000003))]
data['rota'] = [('L', ' 191 ', 'SER', 0.29174889563601547, (-9.522999999999998, -20.586999999999996, 32.621)), ('H', ' 142 ', 'LEU', 0.2712475358376466, (-17.665, 2.9579999999999997, 28.006)), ('H', ' 200 ', 'CYS', 0.0073363782121995, (-27.374000000000002, 4.375999999999997, 29.995000000000005))]
data['cbeta'] = []
data['probe'] = [(' L 303  GOL  H11', ' L 525  HOH  O  ', -0.995, (-24.691, -3.963, -22.297)), (' L 118  THR HG22', ' L 301  GOL  O2 ', -0.86, (-13.729, 1.955, 17.364)), (' H 131  SER  O  ', ' H 135  THR HG23', -0.848, (-9.311, 2.524, 28.636)), (' A 495  TYR  O  ', ' A 603  GOL  H32', -0.807, (-27.197, -19.602, -30.724)), (' A 364  ASP  OD2', ' A 367  VAL HG23', -0.784, (-1.85, -18.028, -55.763)), (' H  28  THR  OG1', ' H 301  GOL  H32', -0.725, (-42.491, -24.831, -22.771)), (' L 185  THR  OG1', ' L 188  GLN  HG3', -0.724, (-17.296, -21.942, 30.579)), (' L 126  SER  O  ', ' L 130  GLN  HG2', -0.723, (-21.132, -10.337, 38.795)), (' H 129  ALA  HB3', ' H 218  LYS  HE3', -0.695, (-14.867, -2.247, 33.936)), (' L 303  GOL  H32', ' L 524  HOH  O  ', -0.694, (-25.416, -1.062, -18.324)), (' H 303  GOL  H12', ' L 508  HOH  O  ', -0.683, (-26.342, -12.675, 13.017)), (' A 355  ARG HH22', ' A 601  PG4  H12', -0.638, (-4.644, -32.388, -36.685)), (' A 403  ARG  NH2', ' A 603  GOL  O3 ', -0.622, (-25.023, -19.458, -27.357)), (' A 359  SER  HA ', ' A 524  VAL  CG2', -0.6, (0.546, -32.475, -49.529)), (' A 403  ARG HH21', ' A 603  GOL  C3 ', -0.595, (-25.24, -19.415, -28.686)), (' A 339  GLY  O  ', ' A 343  ASN  HB2', -0.595, (-13.693, -23.527, -52.276)), (' A 359  SER  HA ', ' A 524  VAL HG22', -0.573, (0.235, -32.295, -50.103)), (' L 192  HIS  HE1', ' L 531  HOH  O  ', -0.569, (-11.478, -22.528, 27.036)), (' A 520  ALA  HB1', ' A 521  PRO  CD ', -0.549, (8.023, -39.637, -46.211)), (' A 364  ASP  O  ', ' A 367  VAL  HB ', -0.546, (-2.77, -19.257, -52.884)), (' H 105  ASP  HB3', ' H 307  GOL  O3 ', -0.544, (-29.836, -21.438, -16.607)), (' A 393  THR HG21', ' A 518  LEU  HB2', -0.542, (6.503, -36.698, -43.006)), (' H 174  LEU  HB3', ' H 303  GOL  H11', -0.541, (-29.958, -12.248, 14.593)), (' H  76  LYS  HE3', ' H 453  HOH  O  ', -0.53, (-54.11, -30.036, -8.498)), (' A 360  ASN  OD1', ' A 523  THR  HB ', -0.529, (3.089, -35.154, -52.17)), (' L 198  GLN  NE2', ' L 207  GLU  OE2', -0.522, (-4.843, -12.178, 17.508)), (' H  83  MET  HE1', ' H  94  TYR  CZ ', -0.515, (-36.665, -24.194, 5.185)), (' L 185  THR  HG1', ' L 188  GLN  HG3', -0.507, (-17.116, -22.347, 30.768)), (' H 133  LYS  NZ ', ' L 211  ALA  H  ', -0.507, (-8.06, -7.952, 29.522)), (' H 174  LEU  H  ', ' H 303  GOL  H11', -0.497, (-28.732, -11.196, 14.872)), (' A 489  TYR  OH ', ' H 102  GLY  HA2', -0.496, (-27.058, -29.082, -13.872)), (' A 601  PG4  C4 ', ' A 601  PG4  H71', -0.492, (1.544, -30.094, -35.705)), (' A 388  ASN  HB3', ' A 527  PRO  HD2', -0.49, (4.64, -19.507, -52.87)), (' L 116  ASN  OD1', ' L 117  PRO  HD2', -0.489, (-8.993, -1.542, 9.74)), (' B   2  NAG  H62', ' B   3  BMA  H2 ', -0.487, (-7.816, -16.184, -59.868)), (' A 388  ASN  HA ', ' A 526  GLY  HA3', -0.482, (4.959, -21.869, -51.342)), (' A 447  GLY  HA3', ' A 449  TYR  CE1', -0.473, (-33.271, -21.015, -34.184)), (' A 429  PHE  CZ ', ' A 431  GLY  HA3', -0.471, (-1.238, -23.607, -37.871)), (' L 119  VAL  O  ', ' L 208  LYS  HE3', -0.468, (-10.165, -1.283, 19.455)), (' L 187  GLU  O  ', ' L 191  SER  HB3', -0.462, (-12.234, -21.184, 32.635)), (' H   3  GLN  NE2', ' H 404  HOH  O  ', -0.462, (-42.392, -12.235, -11.431)), (' A 383  SER  HB3', ' A 386  LYS  HG3', -0.46, (7.623, -15.703, -43.485)), (' L 154  ALA  HB2', ' L 195  TYR  CE2', -0.458, (-11.126, -17.701, 24.411)), (' H 135  THR HG22', ' H 140  ALA  CB ', -0.457, (-11.454, 5.647, 28.358)), (' A 369  TYR  CD1', ' A 369  TYR  O  ', -0.457, (-3.827, -11.826, -46.937)), (' H  19  ARG  HD2', ' H 529  HOH  O  ', -0.457, (-47.433, -30.21, 0.305)), (' H  12  VAL HG11', ' H  18  LEU  HG ', -0.456, (-43.982, -24.002, 10.519)), (' L  29  ILE  O  ', ' L  67  LYS  HE3', -0.456, (-13.346, -27.359, -12.571)), (' A 601  PG4  H42', ' A 601  PG4  H61', -0.453, (-0.234, -29.59, -35.893)), (' H 129  ALA  CB ', ' H 218  LYS  HE3', -0.452, (-15.763, -1.727, 34.179)), (' A 455  LEU  CD2', ' H 101  TRP  CD1', -0.452, (-26.164, -27.184, -21.587)), (' L  13  THR  HB ', ' L  14  PRO  CD ', -0.452, (-13.925, 3.858, -9.27)), (' H 301  GOL  H11', ' H 424  HOH  O  ', -0.445, (-37.964, -22.098, -21.35)), (' B   1  NAG  H61', ' B   2  NAG  C7 ', -0.444, (-15.051, -15.489, -57.003)), (' B   1  NAG  H82', ' B   1  NAG  O3 ', -0.444, (-10.419, -18.912, -54.89)), (' A 357  ARG  NH2', ' A 703  HOH  O  ', -0.443, (-6.754, -38.736, -46.145)), (' H 101  TRP  CE3', ' H 307  GOL  H12', -0.441, (-29.998, -24.044, -20.787)), (' A 602  GOL  C3 ', ' A 714  HOH  O  ', -0.438, (-16.617, -19.089, -24.269)), (' A 355  ARG HH12', ' A 601  PG4  H12', -0.437, (-4.101, -33.364, -36.721)), (' L 136  LEU  N  ', ' L 136  LEU HD12', -0.434, (-16.82, -11.794, 26.711)), (' A 417  LYS  HD2', ' A 453  TYR  CD1', -0.428, (-20.376, -24.971, -25.71)), (' A 455  LEU HD23', ' H 101  TRP  CD1', -0.428, (-26.098, -27.582, -21.489)), (' A 383  SER  HB3', ' A 386  LYS  CG ', -0.426, (7.517, -15.69, -43.718)), (' H 174  LEU  H  ', ' H 303  GOL  C1 ', -0.421, (-28.554, -11.194, 14.901)), (' H 212  ASP  H  ', ' H 305  GOL  C1 ', -0.42, (-32.957, 1.801, 35.232)), (' H 174  LEU  O  ', ' H 303  GOL  H11', -0.415, (-28.919, -13.156, 14.993)), (' H 149  TYR  CE2', ' H 154  VAL HG13', -0.414, (-34.367, -4.575, 22.406)), (' A 380  TYR  O  ', ' A 430  THR  HA ', -0.412, (2.91, -21.95, -36.411)), (' A 495  TYR  O  ', ' A 603  GOL  C3 ', -0.41, (-26.594, -19.778, -30.08)), (' A 444  LYS  HG3', ' A 448  ASN  HB2', -0.408, (-30.18, -21.039, -39.545)), (' H  68  PHE  CE2', ' H  83  MET  HE3', -0.407, (-36.601, -27.037, 5.093)), (' A 417  LYS  HB3', ' A 417  LYS  HE2', -0.406, (-17.807, -22.152, -25.696)), (' A 355  ARG  NH2', ' A 601  PG4  H12', -0.405, (-4.584, -32.5, -36.923)), (' A 517  LEU  O  ', ' A 518  LEU HD23', -0.405, (6.663, -34.487, -39.202)), (' H 101  TRP  CE3', ' H 307  GOL  C1 ', -0.403, (-29.597, -24.142, -20.779)), (' A 489  TYR  CZ ', ' H 102  GLY  HA2', -0.402, (-26.762, -29.241, -14.167))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
