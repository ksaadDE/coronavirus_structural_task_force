# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 104 ', 'PRO', None, (19.743999999999986, -8.177, 48.553)), ('A', ' 157 ', 'PRO', None, (-9.367, -6.456, 10.680000000000003)), ('A', ' 159 ', 'PRO', None, (-10.905, -10.269000000000007, 15.291)), ('B', '   8 ', 'PRO', None, (11.891, -29.769, 30.033000000000005)), ('B', ' 140 ', 'PRO', None, (0.522, -37.69200000000003, 19.438))]
data['rota'] = [('A', '  51 ', 'ILE', 0.14400449219060152, (8.787, 3.8959999999999995, 36.075)), ('C', ' 354 ', 'ASN', 0.06414385909265423, (17.614, 17.663999999999998, 54.547)), ('C', ' 386 ', 'LYS', 0.1881266153473764, (26.456, 22.009, 79.058)), ('C', ' 399 ', 'SER', 0.1110864514009317, (16.89, 15.229, 59.12))]
data['cbeta'] = []
data['probe'] = [(' B  59  PRO  HG2', ' B 301  CIT  H21', -0.772, (-3.896, -23.862, 43.082)), (' A 137  SER  H  ', ' A 140  SER  HB3', -0.76, (-15.49, -35.606, 1.059)), (' A  36  TRP  CE2', ' A  81  MET  HB2', -0.599, (2.732, 0.702, 29.425)), (' A 129  PRO  HD2', ' A 215  THR HG21', -0.552, (-17.244, -10.382, 5.758)), (' C 458  LYS  HD3', ' C 473  TYR  CE2', -0.545, (29.836, 0.762, 41.785)), (' C 340  GLU  OE1', ' C 356  LYS  NZ ', -0.533, (12.277, 26.405, 59.501)), (' C 393  THR  HA ', ' C 522  ALA  HA ', -0.532, (27.64, 32.402, 66.709)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.515, (18.276, 7.46, 67.528)), (' A 103  GLU  HG2', ' A 104  PRO  HA ', -0.498, (20.024, -5.687, 48.192)), (' C 340  GLU  O  ', ' C 344  ALA  HB2', -0.492, (9.867, 20.01, 60.491)), (' C 383  SER  OG ', ' C 386  LYS  HD3', -0.492, (29.324, 19.579, 78.973)), (' B  37  GLN  HB2', ' B  47  LEU HD11', -0.471, (2.592, -21.649, 37.531)), (' B  11  LEU  HG ', ' B  13  VAL HG23', -0.468, (4.845, -33.481, 31.987)), (' C 502  GLY  O  ', ' C 506  GLN  HG3', -0.465, (10.496, -2.922, 62.457)), (' A  91  THR  HA ', ' A 119  VAL  O  ', -0.464, (1.255, -5.508, 17.887)), (' C 443  SER  HB3', ' C 499  PRO  HD3', -0.458, (3.562, 0.301, 57.405)), (' C 439  ASN  HA ', ' C 507  PRO  HG2', -0.451, (7.796, 3.195, 61.239)), (' A  81  MET  HB3', ' A  81  MET  HE3', -0.45, (2.254, 0.978, 27.014)), (' A 141  THR HG22', ' A 146  ALA  HB2', -0.445, (-18.357, -38.18, 4.815)), (' C 440  ASN  N  ', ' C 440  ASN  OD1', -0.44, (4.706, 5.273, 63.777)), (' B 104  GLU  HG2', ' B 105  ILE  N  ', -0.435, (-0.776, -31.824, 26.739)), (' A 203  THR HG23', ' A 220  LYS  HE3', -0.432, (-28.299, -26.787, 4.073)), (' C 431  GLY  HA2', ' C 515  PHE  CD2', -0.429, (26.607, 19.565, 68.622)), (' B  91  TYR  HA ', ' B  94  TRP  O  ', -0.428, (17.124, -10.322, 38.147)), (' B  78  LEU  HA ', ' B  78  LEU HD23', -0.426, (-0.954, -30.768, 38.195)), (' C 386  LYS  O  ', ' C 390  LEU  HG ', -0.422, (27.017, 24.521, 76.96)), (' A 194  VAL HG11', ' A 204  TYR  CE1', -0.421, (-23.032, -31.967, 10.075)), (' B  94  TRP  CG ', ' B  95  LEU  N  ', -0.42, (17.75, -8.073, 35.427)), (' B 141 BARG  CZ ', ' B 162  VAL HG21', -0.418, (0.808, -27.997, 15.307)), (' B  79  GLN  NE2', ' B 410  HOH  O  ', -0.411, (-9.396, -27.879, 40.884)), (' C 360  ASN  HA ', ' C 523  THR  HB ', -0.411, (21.568, 34.52, 66.286)), (' C 371  SER  C  ', ' C 373  SER  H  ', -0.409, (11.061, 11.809, 75.173)), (' A 101  PHE  CZ ', ' A 108  PRO  HB3', -0.408, (12.297, -4.657, 40.17)), (' B  79  GLN  HG2', ' B 457  HOH  O  ', -0.405, (-8.176, -28.217, 37.8)), (' C 365  TYR  CD2', ' C 387  LEU  HB3', -0.401, (22.265, 22.662, 74.29)), (' B 144  LYS  HB3', ' B 196  THR  HB ', -0.4, (5.572, -36.268, 8.211))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
