# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('E', ' 419 ', 'ALA', 0.0016799995528781766, (102.457, 140.94300000000013, 98.283))]
data['omega'] = [('A', ' 146 ', 'PRO', None, (142.774, 109.816, 120.785))]
data['rota'] = [('A', ' 228 ', 'HIS', 0.0328022981621944, (153.921, 132.2690000000001, 92.311)), ('E', ' 468 ', 'ILE', 0.1450601735616443, (91.005, 130.605, 95.948))]
data['cbeta'] = []
data['probe'] = [(' E 418  ILE HG13', ' E 419  ALA  H  ', -0.815, (103.505, 138.942, 99.544)), (' E 361  CYS  HB2', ' E 524  VAL HG23', -0.81, (81.643, 150.127, 115.09)), (' A 261  CYS  HB2', ' A 488  VAL HG13', -0.809, (165.248, 115.729, 105.051)), (' E 418  ILE  O  ', ' E 420  ASP  N  ', -0.784, (102.047, 140.1, 95.629)), (' E 442  ASP  OD2', ' E 509  ARG  NE ', -0.753, (98.554, 133.026, 114.504)), (' A 574  VAL HG13', ' A 576  ALA  H  ', -0.749, (142.606, 143.752, 96.318)), (' A  28  PHE  HE1', ' A  76  GLN HE21', -0.748, (112.701, 121.146, 89.169)), (' E 420  ASP  HA ', ' E 424  LYS  HB2', -0.732, (98.592, 142.031, 95.59)), (' A 145  GLU  O  ', ' A 147  GLY  N  ', -0.73, (144.629, 107.477, 120.983)), (' A 504  PHE  O  ', ' A 508  ASN  ND2', -0.721, (140.26, 111.291, 106.22)), (' E 431  GLY  HA3', ' E 513  LEU  O  ', -0.718, (92.348, 149.059, 107.534)), (' A  41  TYR  OH ', ' E 500  THR  O  ', -0.717, (113.955, 126.603, 113.407)), (' E 422  ASN HD21', ' E 454  ARG  H  ', -0.716, (100.317, 132.967, 98.802)), (' A 103  SER  HB2', ' A 106  SER  HB2', -0.707, (124.455, 112.843, 88.691)), (' A 357  ARG  NH2', ' E 500  THR  OG1', -0.707, (116.569, 125.048, 115.718)), (' A 247  LYS  HD2', ' A 282  THR  HA ', -0.704, (163.917, 125.325, 120.132)), (' E 442  ASP  O  ', ' E 448  ASN  ND2', -0.693, (101.209, 126.737, 112.836)), (' E 403  ARG  NH1', ' E 406  GLU  OE2', -0.689, (107.811, 134.928, 102.183)), (' A 201  ASP  OD1', ' A 219  ARG  NE ', -0.689, (139.026, 121.922, 85.092)), (' A 295  ASP  O  ', ' A 299  ASN  ND2', -0.688, (142.315, 134.292, 137.689)), (' E 437  ASN  ND2', ' E 506  GLN  OE1', -0.68, (108.244, 135.031, 116.075)), (' A 161  ARG  NH2', ' A 265  HIS  O  ', -0.678, (157.569, 113.523, 115.347)), (' E 384  PRO  HA ', ' E 387  LEU HD12', -0.661, (93.212, 155.228, 115.428)), (' A 403  ALA  HB2', ' A 518  ARG  HB2', -0.659, (141.328, 131.793, 104.835)), (' E 418  ILE HG13', ' E 419  ALA  N  ', -0.656, (103.055, 139.307, 99.247)), (' A 264  ALA  HB3', ' A 490  PRO  HD3', -0.654, (159.926, 110.314, 108.546)), (' A 245  ARG  NH1', ' A 260  GLY  O  ', -0.651, (168.683, 120.131, 107.428)), (' E 361  CYS  O  ', ' E 525  CYS  N  ', -0.645, (80.26, 152.446, 116.165)), (' A 492  PRO  HD3', ' A 612  PRO  HG2', -0.638, (165.748, 104.78, 104.99)), (' E 355  ARG  HD3', ' E 396  TYR  HD2', -0.637, (84.711, 142.971, 104.007)), (' A 336  GLU  N  ', ' A 336  GLU  OE1', -0.636, (126.524, 119.002, 127.902)), (' A 476  LYS  O  ', ' A 480  MET  HG3', -0.635, (157.593, 113.332, 95.435)), (' A 535  TYR  OH ', ' A 541  LYS  O  ', -0.634, (149.283, 147.053, 115.319)), (' A 145  GLU  HG3', ' A 146  PRO  HD3', -0.623, (140.858, 110.576, 119.528)), (' A 511  SER  O  ', ' A 514  ARG  NH1', -0.622, (138.723, 121.597, 101.802)), (' A 204  ARG  NH1', ' A 465  ARG HH21', -0.622, (145.653, 120.545, 87.247)), (' A 134  ASN  HB2', ' A 137  ASN  HB3', -0.62, (153.819, 98.392, 124.045)), (' A 293  VAL HG21', ' A 423  LEU HD21', -0.619, (141.718, 136.204, 128.327)), (' A 119  ILE HG23', ' A 179  LEU HD22', -0.617, (138.341, 102.022, 99.451)), (' A 515  TYR  HD1', ' A 518  ARG  HE ', -0.614, (141.955, 126.52, 106.56)), (' A 414  THR HG23', ' A 417  HIS  H  ', -0.612, (144.257, 143.298, 121.417)), (' A 237  TYR  OH ', ' A 485  VAL  O  ', -0.603, (159.129, 122.349, 105.484)), (' A 308  PHE  HZ ', ' A 360  MET  SD ', -0.602, (131.886, 128.057, 121.195)), (' A  95  ARG  NH1', ' A 563  SER  O  ', -0.598, (127.651, 135.828, 90.596)), (' A 118  THR  O  ', ' A 122  THR HG23', -0.595, (133.95, 101.381, 101.666)), (' A 198  ASP  OD1', ' A 201  ASP  N  ', -0.591, (141.391, 117.876, 87.762)), (' A 519  THR  HA ', ' A 522  GLN HE21', -0.588, (145.329, 132.074, 106.214)), (' A 519  THR  O  ', ' A 522  GLN  HG2', -0.586, (145.804, 134.271, 105.703)), (' E 475  ALA  HB3', ' E 487  ASN  HB3', -0.58, (106.748, 125.788, 82.0)), (' A 524  GLN  HG2', ' A 574  VAL HG21', -0.578, (144.638, 141.078, 99.747)), (' A 161  ARG  NH2', ' A 267  LEU  H  ', -0.578, (157.762, 113.983, 115.886)), (' A  20  LEU  HG ', ' A  22  GLU  H  ', -0.574, (114.64, 132.901, 78.24)), (' A 374  HIS  ND1', ' A 405  GLY  O  ', -0.574, (137.787, 131.159, 112.547)), (' A 268  GLY  HA2', ' A 278  LEU  HG ', -0.572, (156.645, 119.383, 116.905)), (' A 126  ILE HG21', ' A 176  LEU HD21', -0.569, (140.887, 102.56, 105.147)), (' E 365  TYR  O  ', ' E 368  LEU  HB3', -0.569, (92.816, 149.373, 119.432)), (' A 312  GLU  HA ', ' A 376  MET  HE1', -0.567, (128.825, 137.964, 119.852)), (' E 455  LEU  HG ', ' E 456  PHE  H  ', -0.565, (105.407, 131.321, 92.711)), (' E 405  ASP  N  ', ' E 405  ASP  OD1', -0.563, (109.501, 137.603, 106.896)), (' E 357  ARG  NH1', ' E 396  TYR  OH ', -0.56, (80.616, 145.282, 103.251)), (' A 183  TYR  OH ', ' A 509  ASP  OD1', -0.56, (137.903, 111.256, 97.638)), (' A 540  HIS  HA ', ' A 587  TYR  CE2', -0.56, (149.858, 140.736, 112.736)), (' A 474  MET  HA ', ' A 477  TRP  HB3', -0.555, (154.858, 108.315, 97.681)), (' A 149  ASP  OD1', ' A 150  GLU  N  ', -0.553, (147.863, 111.978, 121.577)), (' A 587  TYR  HD1', ' A 588  PHE  CD1', -0.552, (153.23, 137.356, 110.797)), (' E 401  VAL HG21', ' E 451  TYR  HE2', -0.552, (97.561, 131.338, 110.326)), (' A 161  ARG HH22', ' A 267  LEU  H  ', -0.548, (157.617, 114.777, 115.527)), (' A 346  PRO  HA ', ' A 359  LYS  O  ', -0.548, (131.496, 123.167, 118.29)), (' A 237  TYR  CE1', ' A 451  PRO  HG2', -0.547, (157.506, 124.76, 105.381)), (' A 348  ALA  HA ', ' A 358  ILE HD13', -0.545, (128.324, 127.461, 115.378)), (' A  53  ASN  O  ', ' A  55  THR HG23', -0.545, (120.686, 110.332, 121.224)), (' A 161  ARG  NH2', ' A 267  LEU  O  ', -0.544, (156.462, 114.932, 116.641)), (' A 456  LEU HD23', ' A 512  PHE  CD2', -0.542, (146.161, 118.021, 102.264)), (' E 497  PHE  CG ', ' E 507  PRO  HG3', -0.54, (104.36, 129.763, 111.597)), (' E 336  CYS  HB2', ' E 337  PRO  HD2', -0.539, (81.559, 143.523, 116.603)), (' E 350  VAL  HA ', ' E 400  PHE  HB2', -0.538, (96.667, 135.089, 104.888)), (' A 331  SER  OG ', ' A 332  MET  N  ', -0.536, (125.043, 126.24, 121.324)), (' E 426  PRO  HG2', ' E 429  PHE  HB2', -0.533, (94.152, 150.205, 100.151)), (' A 460  ARG  HA ', ' A 463  VAL HG12', -0.533, (147.542, 113.034, 93.973)), (' A 134  ASN  ND2', ' A 140  GLU  O  ', -0.532, (151.182, 100.033, 123.285)), (' A 308  PHE  HB3', ' A 328  TRP  HH2', -0.531, (128.369, 133.764, 123.179)), (' E 422  ASN HD21', ' E 454  ARG  N  ', -0.526, (100.243, 132.187, 98.821)), (' A 574  VAL HG13', ' A 576  ALA  N  ', -0.526, (142.895, 143.202, 96.124)), (' A 303  ASP  N  ', ' A 303  ASP  OD1', -0.526, (131.253, 131.783, 133.525)), (' A 457  GLU  HG2', ' A 513  ILE  HB ', -0.525, (144.657, 122.317, 97.016)), (' A 535  TYR  OH ', ' A 538  SER  O  ', -0.525, (149.971, 146.704, 114.464)), (' E 366  SER  HA ', ' E 369  TYR  HB3', -0.524, (94.0, 152.283, 121.003)), (' E 454  ARG  HD3', ' E 457  ARG  HD2', -0.523, (97.584, 133.422, 92.107)), (' A 275  TRP  HB3', ' A 444  LEU HD12', -0.523, (156.41, 124.057, 113.984)), (' A 327  PHE  HE2', ' A 358  ILE HG12', -0.518, (126.878, 129.93, 117.272)), (' A 172  VAL  O  ', ' A 176  LEU  HB2', -0.517, (146.099, 102.57, 104.222)), (' A 446  ILE HG21', ' A 523  PHE  CZ ', -0.515, (149.254, 133.58, 108.789)), (' A 170  ALA  O  ', ' A 174  LYS  HG3', -0.515, (150.601, 98.935, 106.656)), (' A  28  PHE  CE2', ' A  80  ALA  HB2', -0.515, (116.6, 123.09, 86.93)), (' A 559  SER  O  ', ' A 559  SER  OG ', -0.512, (126.07, 141.392, 101.014)), (' E 448  ASN  ND2', ' E 451  TYR  HE1', -0.511, (100.26, 126.416, 112.052)), (' A 479  GLU  O  ', ' A 483  GLU  HG2', -0.511, (161.641, 115.651, 97.245)), (' A 518  ARG  HA ', ' A 521  TYR  HB2', -0.511, (142.252, 133.127, 102.692)), (' E 422  ASN  ND2', ' E 454  ARG  H  ', -0.509, (99.572, 133.065, 98.806)), (' A 236  LEU HD21', ' A 588  PHE  HD2', -0.508, (156.635, 134.199, 108.728)), (' A 457  GLU  HG2', ' A 513  ILE HD13', -0.508, (146.124, 122.026, 96.987)), (' E 442  ASP  OD1', ' E 509  ARG  NH2', -0.506, (97.329, 130.688, 115.425)), (' A 450  LEU HD21', ' A 519  THR HG21', -0.503, (149.082, 129.789, 105.272)), (' E 421  TYR  HE2', ' E 456  PHE  HA ', -0.499, (104.017, 134.173, 91.144)), (' E 350  VAL HG13', ' E 422  ASN HD22', -0.496, (99.283, 133.64, 100.616)), (' A 402  GLU  HB3', ' A 518  ARG  HD3', -0.492, (140.014, 128.576, 105.924)), (' A 519  THR  HA ', ' A 522  GLN  NE2', -0.492, (145.195, 131.745, 107.05)), (' A 126  ILE HG12', ' A 175  GLN  HG3', -0.492, (141.885, 99.806, 106.463)), (' A  28  PHE  HE2', ' A  80  ALA  HB2', -0.491, (116.902, 123.206, 87.213)), (' A 181  GLU  O  ', ' A 184  VAL HG12', -0.49, (143.256, 104.43, 92.271)), (' E 454  ARG  NH2', ' E 467  ASP  O  ', -0.489, (93.96, 131.537, 94.726)), (' A 431  ASP  O  ', ' A 434  THR  OG1', -0.489, (156.801, 142.467, 123.665)), (' A 165  TRP  O  ', ' A 169  ARG  HG2', -0.489, (154.036, 105.878, 111.022)), (' A 184  VAL HG23', ' A 464  PHE  CD1', -0.483, (143.231, 110.394, 91.852)), (' A 129  THR  OG1', ' A 130  GLY  N  ', -0.483, (140.637, 100.815, 113.747)), (' E 393  THR HG21', ' E 518  LEU  H  ', -0.482, (79.797, 155.671, 104.938)), (' E 420  ASP  HB3', ' E 424  LYS  HD3', -0.482, (100.454, 143.248, 94.767)), (' A 267  LEU HD22', ' A 275  TRP  NE1', -0.481, (157.543, 119.432, 111.75)), (' E 447  GLY  HA2', ' E 497  PHE  O  ', -0.479, (106.491, 123.609, 111.152)), (' A 503  LEU HD12', ' A 504  PHE  H  ', -0.476, (144.658, 113.802, 108.341)), (' A 387  ARG  HB3', ' A 388  GLN HE21', -0.476, (121.356, 138.362, 100.417)), (' E 399  SER  HB3', ' E 511  VAL HG22', -0.475, (92.72, 139.343, 111.423)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.475, (78.741, 154.746, 108.801)), (' E 401  VAL HG21', ' E 451  TYR  CE2', -0.474, (98.19, 130.887, 110.168)), (' A 144  LEU HD22', ' A 168  TRP  CZ2', -0.473, (145.01, 107.987, 111.968)), (' A 135  PRO  HD3', ' A 163  TRP  CE2', -0.473, (156.008, 99.051, 118.336)), (' A 353  HIS  ND1', ' E 505  TYR  HD2', -0.471, (112.342, 130.26, 106.712)), (' A 524  GLN HE21', ' A 574  VAL HG21', -0.471, (144.848, 141.306, 98.535)), (' E 425  LEU HD22', ' E 429  PHE  CD2', -0.47, (94.967, 148.994, 102.868)), (' A 223  ILE  H  ', ' A 223  ILE HD12', -0.469, (146.553, 125.422, 88.614)), (' E 457  ARG  NH1', ' E 459  SER  O  ', -0.468, (97.633, 137.237, 89.435)), (' A  51  ASN  O  ', ' A 359  LYS  HD2', -0.468, (126.642, 117.552, 118.394)), (' E 437  ASN  HB2', ' E 508  TYR  CZ ', -0.468, (107.013, 138.207, 114.724)), (' E 350  VAL HG23', ' E 400  PHE  CD2', -0.468, (97.725, 136.919, 104.299)), (' A 285  PHE  CE1', ' A 433  GLU  HB3', -0.465, (161.827, 137.416, 124.846)), (' A 119  ILE  O  ', ' A 123  MET  HG2', -0.463, (136.737, 104.211, 101.128)), (' E 425  LEU HD22', ' E 429  PHE  CG ', -0.463, (94.526, 148.972, 102.618)), (' E 335  LEU  H  ', ' E 335  LEU HD12', -0.463, (79.605, 147.586, 124.085)), (' A 446  ILE HG21', ' A 523  PHE  HZ ', -0.462, (149.529, 133.19, 109.388)), (' A 249  MET  HA ', ' A 256  ILE HG13', -0.462, (168.914, 117.845, 116.632)), (' E 395  VAL HG13', ' E 524  VAL HG11', -0.46, (83.47, 150.767, 111.048)), (' A 302  TRP  O  ', ' A 364  VAL HG21', -0.459, (134.887, 129.732, 133.225)), (' A  21  THR  HA ', ' A  24  ASN HD22', -0.458, (112.737, 129.1, 78.457)), (' A 204  ARG HH12', ' A 465  ARG HH21', -0.457, (145.507, 120.333, 87.237)), (' E 421  TYR  CE2', ' E 456  PHE  HA ', -0.457, (103.558, 134.522, 91.422)), (' A 204  ARG  HD3', ' A 223  ILE HD11', -0.457, (145.005, 123.011, 89.257)), (' A  48  TRP  HE3', ' A 349  TRP  CD1', -0.457, (124.312, 121.974, 115.027)), (' A 390  PHE  CG ', ' A 390  PHE  O  ', -0.456, (119.807, 127.639, 98.325)), (' A 336  GLU  HG3', ' A 340  ARG  HE ', -0.456, (122.449, 117.018, 128.013)), (' A 503  LEU HD12', ' A 504  PHE  N  ', -0.452, (144.549, 113.327, 108.191)), (' A 133  CYS  HA ', ' A 141  CYS  HA ', -0.452, (149.22, 98.501, 121.023)), (' E 421  TYR  O  ', ' E 454  ARG  HD2', -0.452, (98.11, 134.585, 94.876)), (' A 335  ASP  HB2', ' A 361  CYS  SG ', -0.451, (130.364, 119.228, 126.931)), (' A 529  LEU  O  ', ' A 533  ALA  N  ', -0.45, (141.109, 149.84, 108.948)), (' A 312  GLU  CA ', ' A 376  MET  HE1', -0.45, (129.224, 137.288, 119.961)), (' A 429  GLN  N  ', ' A 429  GLN  OE1', -0.449, (154.288, 145.297, 130.174)), (' E 421  TYR  HA ', ' E 461  LEU HD12', -0.449, (98.346, 137.599, 93.665)), (' A 457  GLU  CD ', ' A 460  ARG HH21', -0.449, (143.963, 119.006, 98.256)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.449, (102.502, 144.025, 112.321)), (' A 306  ARG  HA ', ' A 306  ARG  HD2', -0.449, (129.904, 136.488, 129.781)), (' A 589  GLN  HB3', ' A 590  PRO  HD3', -0.448, (157.64, 142.919, 110.665)), (' E 350  VAL HG22', ' E 422  ASN  HB3', -0.446, (98.12, 135.707, 100.667)), (' A 331  SER  OG ', ' A 358  ILE  O  ', -0.445, (125.53, 126.339, 120.984)), (' A 125  THR  O  ', ' A 129  THR HG22', -0.445, (138.136, 102.226, 111.06)), (' A 529  LEU HD22', ' A 550  ALA  O  ', -0.445, (136.896, 146.036, 108.734)), (' A 332  MET  HE1', ' A 342  VAL HG21', -0.445, (126.369, 117.568, 124.25)), (' E 457  ARG  NH1', ' E 461  LEU  HG ', -0.444, (96.636, 137.654, 90.678)), (' E 402  ILE  HA ', ' E 495  TYR  OH ', -0.443, (102.506, 133.734, 105.82)), (' A 249  MET  HE1', ' A 258  PRO  HB3', -0.443, (174.968, 118.917, 113.029)), (' A  89  GLN  HG2', ' A  90  THR  N  ', -0.442, (120.43, 137.73, 81.048)), (' A 457  GLU  OE1', ' A 512  PHE  HB3', -0.442, (144.43, 119.003, 100.159)), (' E 409  GLN  OE1', ' E 419  ALA  HB2', -0.44, (104.713, 140.862, 99.234)), (' A  87  GLU  N  ', ' A  87  GLU  OE1', -0.44, (120.536, 130.147, 75.638)), (' A  20  LEU  H  ', ' A  20  LEU HD23', -0.44, (111.763, 134.676, 76.864)), (' E 336  CYS  HB2', ' E 337  PRO  CD ', -0.439, (81.389, 143.391, 116.847)), (' E 338  PHE  O  ', ' E 342  PHE  HD1', -0.439, (89.7, 141.464, 117.635)), (' A 158  TYR  HB2', ' A 252  TYR  CE2', -0.438, (165.063, 111.173, 120.528)), (' E 361  CYS  H  ', ' E 524  VAL  HA ', -0.438, (79.583, 150.741, 114.847)), (' A 490  PRO  O  ', ' A 612  PRO  HB3', -0.434, (165.765, 105.837, 108.595)), (' A 105  SER  HA ', ' A 190  MET  SD ', -0.434, (130.068, 112.066, 90.485)), (' A 157  ASP  O  ', ' A 160  SER  OG ', -0.433, (159.891, 108.385, 122.261)), (' A 453  THR HG21', ' A 516  TYR  HB2', -0.432, (146.992, 124.7, 101.402)), (' A 534  LYS  HB2', ' A 534  LYS  HE2', -0.431, (141.839, 155.013, 112.654)), (' A 293  VAL HG22', ' A 366  MET  SD ', -0.43, (144.088, 134.36, 127.469)), (' A 239  HIS  HD2', ' A 604  VAL HG21', -0.43, (167.812, 131.741, 106.957)), (' A 450  LEU  HB2', ' A 451  PRO  HD3', -0.43, (153.751, 126.973, 104.577)), (' A 236  LEU HD13', ' A 592  PHE  HD1', -0.43, (160.803, 135.231, 107.713)), (' A 477  TRP  CH2', ' A 500  PRO  HB3', -0.429, (151.246, 112.34, 101.98)), (' A 320  LEU  HA ', ' A 320  LEU HD23', -0.429, (128.585, 143.676, 110.796)), (' E 357  ARG  O  ', ' E 358  ILE HD13', -0.428, (81.913, 141.694, 111.194)), (' A 455  MET  HE1', ' A 477  TRP  CZ3', -0.428, (153.425, 114.479, 101.258)), (' E 457  ARG  HG2', ' E 458  LYS  H  ', -0.426, (98.558, 133.87, 88.005)), (' A 547  SER  OG ', ' A 550  ALA  HB3', -0.425, (136.777, 149.35, 112.38)), (' A 460  ARG  O  ', ' A 463  VAL HG12', -0.424, (146.785, 113.386, 92.988)), (' E 426  PRO  HD2', ' E 429  PHE  HB2', -0.423, (94.181, 149.718, 100.439)), (' E 364  ASP  OD1', ' E 367  VAL HG13', -0.421, (89.307, 150.849, 124.487)), (' A 201  ASP  CG ', ' A 219  ARG  HE ', -0.419, (138.958, 121.064, 85.417)), (' E 337  PRO  O  ', ' E 340  GLU  N  ', -0.419, (86.184, 139.881, 118.536)), (' A 179  LEU  HA ', ' A 179  LEU HD23', -0.418, (139.908, 100.581, 98.459)), (' A 126  ILE  HA ', ' A 126  ILE HD12', -0.415, (139.156, 101.13, 109.864)), (' A  41  TYR  CD2', ' A 353  HIS  HB2', -0.415, (114.916, 126.816, 108.778)), (' E 440  ASN  OD1', ' E 441  LEU  N  ', -0.415, (102.627, 130.756, 120.481)), (' A 581  VAL  O  ', ' A 581  VAL HG13', -0.414, (153.403, 136.661, 99.149)), (' E 350  VAL  CG1', ' E 422  ASN HD22', -0.413, (99.582, 133.75, 101.34)), (' A 482  ARG  HG3', ' A 483  GLU  OE2', -0.412, (163.727, 115.308, 99.067)), (' A 123  MET  HE1', ' A 180  TYR  N  ', -0.412, (141.61, 104.142, 99.307)), (' A 284  PRO  HD3', ' A 440  LEU HD22', -0.409, (159.626, 130.275, 119.948)), (' E 484  GLU  HG2', ' E 484  GLU  O  ', -0.408, (103.406, 117.393, 88.869)), (' A 557  MET  HG2', ' A 569  ALA  HB1', -0.407, (133.472, 139.073, 98.303)), (' A 201  ASP  OD2', ' A 219  ARG  NH2', -0.405, (138.794, 121.208, 84.134)), (' A 168  TRP  CZ2', ' A 172  VAL HG11', -0.405, (146.26, 105.292, 110.368)), (' A 444  LEU  HA ', ' A 444  LEU HD13', -0.404, (156.277, 127.002, 113.16)), (' A 398  GLU  O  ', ' A 514  ARG  HG3', -0.404, (138.24, 126.63, 102.082)), (' A 455  MET  HE1', ' A 477  TRP  CH2', -0.404, (153.716, 114.694, 101.824)), (' A 144  LEU  HB2', ' A 168  TRP  CH2', -0.404, (145.216, 106.513, 113.627)), (' A 292  ASP  OD1', ' A 293  VAL  N  ', -0.404, (145.671, 132.69, 129.661)), (' E 506  GLN  O  ', ' E 508  TYR  HD1', -0.404, (106.315, 135.598, 111.805)), (' E 349  SER  HB3', ' E 452  LEU  O  ', -0.402, (97.734, 130.061, 103.362)), (' A 316  VAL HG21', ' A 322  HIS  HD2', -0.401, (125.58, 144.278, 119.654)), (' A 186  LEU  HA ', ' A 186  LEU HD12', -0.401, (135.827, 104.756, 89.154)), (' A 177  ARG  NH2', ' A 474  MET  HE3', -0.401, (151.128, 104.84, 98.088)), (' A 267  LEU  HA ', ' A 267  LEU HD23', -0.401, (159.167, 117.89, 114.146)), (' A 478  TRP  O  ', ' A 482  ARG  HG2', -0.4, (161.249, 113.535, 99.426))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
