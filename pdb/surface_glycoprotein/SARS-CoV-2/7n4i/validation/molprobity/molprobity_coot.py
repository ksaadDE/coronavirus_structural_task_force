# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 155 ', 'PRO', None, (-36.61, 11.56, -25.476999999999997)), ('L', '   8 ', 'PRO', None, (-18.586, 37.192, -3.5479999999999996)), ('L', '  95 ', 'PRO', None, (-21.973999999999997, 15.492999999999999, 7.689)), ('L', ' 141 ', 'PRO', None, (-25.431, 43.048, -17.33))]
data['rota'] = [('H', '   1 ', 'GLU', 0.10215056978231461, (-2.935, 8.92, -15.545)), ('H', ' 151 ', 'LYS', 0.021668156585466964, (-42.566, 21.468, -27.415)), ('L', '  11 ', 'LEU', 0.1770617273474148, (-18.356999999999996, 38.335, -10.146999999999998)), ('L', '  19 ', 'VAL', 0.14920572671826868, (-9.789, 38.318999999999996, -8.227)), ('L', '  76 ', 'SER', 0.09357419163296443, (-3.237, 36.716, -9.143)), ('L', '  81 ', 'GLU', 0.2056182790819194, (-9.355999999999998, 29.663, -18.879)), ('C', ' 390 ', 'LEU', 0.2659584836369591, (1.606, -21.752, -8.871)), ('C', ' 433 ', 'VAL', 0.23019003501346127, (7.058, -10.234, 3.786)), ('C', ' 441 ', 'LEU', 0.249727851586513, (22.886999999999997, 2.387999999999999, 2.8939999999999992)), ('C', ' 524 ', 'VAL', 0.21126813598828917, (2.1159999999999997, -14.354, -13.396))]
data['cbeta'] = []
data['probe'] = [(' A   2  NAG  H2 ', ' C 658  HOH  O  ', -1.019, (24.93, -12.964, -7.685)), (' L 147  GLN  OE1', ' L 154  LEU HD23', -0.842, (-45.097, 40.446, -10.989)), (' A   2  NAG  C1 ', ' C 658  HOH  O  ', -0.715, (24.002, -12.671, -7.537)), (' L 147  GLN  CD ', ' L 154  LEU HD23', -0.666, (-45.574, 40.211, -11.297)), (' A   2  NAG  C2 ', ' C 658  HOH  O  ', -0.64, (24.235, -12.852, -7.751)), (' L  24  ARG  NH1', ' L  70  ASP  OD1', -0.627, (-15.375, 35.058, 8.023)), (' L  33  LEU HD22', ' L  71  PHE  CG ', -0.593, (-11.506, 28.345, 3.413)), (' H 218  ARG  NH1', ' H 403  HOH  O  ', -0.582, (-46.021, 28.406, -47.215)), (' C 337  PRO  HB2', ' C 340  GLU  HB2', -0.579, (12.025, -4.282, -12.248)), (' H 189  VAL HG11', ' L 135  LEU HD11', -0.556, (-34.738, 35.084, -28.54)), (' H  65  GLN  NE2', ' H 401  HOH  O  ', -0.551, (-26.86, 2.691, 5.817)), (' C 472  ILE HD12', ' C 482  GLY  O  ', -0.543, (-0.054, 23.796, 10.54)), (' L 187  GLU  HB2', ' L 508  HOH  O  ', -0.527, (-59.629, 31.042, -26.583)), (' C 382  VAL HG12', ' C 383  SER  H  ', -0.52, (3.871, -21.465, -0.612)), (' C 383  SER  O  ', ' C 387  LEU  HG ', -0.508, (5.422, -20.476, -2.54)), (' H   3  GLN  NE2', ' H 408  HOH  O  ', -0.508, (-11.836, 10.809, -17.286)), (' C 335  LEU HD12', ' C 362  VAL  O  ', -0.494, (9.601, -14.958, -14.213)), (' L 147  GLN  CD ', ' L 154  LEU  CD2', -0.49, (-46.112, 40.347, -11.068)), (' H  23  LYS  NZ ', ' H 409  HOH  O  ', -0.487, (-12.477, -3.996, -16.109)), (' H  99  LEU HD13', ' H 106  SER  OG ', -0.481, (-11.963, 12.425, 2.263)), (' L  39  LYS  H  ', ' L  42  LYS  HG2', -0.473, (-16.277, 22.43, -15.314)), (' C 365  TYR  CG ', ' C 387  LEU  CD1', -0.47, (6.916, -17.448, -5.503)), (' C 382  VAL HG11', ' C 387  LEU  HB3', -0.465, (2.745, -19.85, -2.569)), (' L 182  SER  OG ', ' L 185  ASP  OD1', -0.461, (-56.664, 27.048, -19.813)), (' C 404  GLY  O  ', ' C 407  VAL HG22', -0.46, (12.202, -5.72, 12.807)), (' C 365  TYR  CD2', ' C 387  LEU  CD1', -0.458, (6.438, -18.279, -5.534)), (' C 382  VAL HG12', ' C 383  SER  N  ', -0.458, (3.835, -21.073, -0.218)), (' L  38  GLN  HA ', ' L  42  LYS  HE2', -0.454, (-15.288, 22.783, -13.321)), (' C 403  ARG  NH1', ' C 405  ASP  OD1', -0.454, (12.268, 0.627, 16.044)), (' C 382  VAL  CG1', ' C 387  LEU HD23', -0.453, (3.373, -19.363, -1.601)), (' H   2  VAL HG23', ' H  27  TYR  CD1', -0.448, (-6.155, 6.535, -9.839)), (' C 395  VAL HG23', ' C 524  VAL HG21', -0.446, (1.101, -12.486, -10.097)), (' C 363  ALA  O  ', ' C 527  PRO  HD3', -0.443, (8.525, -18.814, -11.289)), (' L   3  GLN  NE2', ' L 506  HOH  O  ', -0.443, (-25.545, 30.187, 6.903)), (' C 334  ASN  O  ', ' C 361  CYS  HB2', -0.442, (8.314, -12.092, -16.534)), (' H 219  VAL  O  ', ' H 219  VAL HG23', -0.437, (-40.659, 32.949, -39.84)), (' L  19  VAL  CG1', ' L  75  ILE  HB ', -0.434, (-8.245, 35.461, -10.034)), (' C 393  THR  N  ', ' C 516  GLU  O  ', -0.431, (-3.611, -13.61, -9.694)), (' H 172  HIS  HD2', ' L 137  ASN HD21', -0.43, (-30.621, 36.145, -28.964)), (' L 185  ASP  N  ', ' L 185  ASP  OD1', -0.427, (-57.525, 28.693, -19.742)), (' C 362  VAL  HA ', ' C 525  CYS  O  ', -0.425, (5.912, -16.673, -14.065)), (' C 361  CYS  O  ', ' C 524  VAL  HA ', -0.424, (3.885, -14.345, -14.593)), (' L 135  LEU HD21', ' L 137  ASN  HB2', -0.424, (-33.744, 38.619, -27.703)), (' H  85  SER  O  ', ' H  87  LYS  HE3', -0.424, (-37.777, 5.564, -5.565)), (' H 127  PRO  HB3', ' H 153  TYR  HB3', -0.42, (-40.099, 17.196, -29.146)), (' L  81  GLU  CD ', ' L  81  GLU  H  ', -0.42, (-7.169, 30.586, -19.535)), (' L 189  HIS  O  ', ' L 211  ARG  HD3', -0.42, (-57.638, 36.617, -24.61)), (' C 392  PHE  HA ', ' C 517  LEU HD13', -0.418, (-3.874, -16.682, -9.431)), (' L  19  VAL HG13', ' L  75  ILE  HB ', -0.416, (-8.254, 35.361, -9.563)), (' L 108  ARG  HG2', ' L 109  THR  N  ', -0.414, (-19.645, 45.513, -21.749)), (' L  39  LYS  H  ', ' L  42  LYS  HE2', -0.413, (-15.714, 23.232, -14.666)), (' C 365  TYR  HD2', ' C 388  ASN  CB ', -0.412, (7.731, -19.453, -7.583)), (' C 382  VAL HG11', ' C 387  LEU HD23', -0.411, (3.56, -18.932, -1.779)), (' L  11  LEU HD11', ' L  19  VAL HG23', -0.408, (-13.381, 38.035, -8.392)), (' L 115  VAL  HA ', ' L 135  LEU  O  ', -0.407, (-37.036, 40.761, -25.014)), (' C 335  LEU HD12', ' C 362  VAL HG13', -0.407, (10.04, -15.922, -15.116)), (' C 335  LEU HD11', ' C 364  ASP  HB2', -0.406, (11.819, -16.856, -12.501)), (' C 347  PHE  HB3', ' C 401  VAL HG23', -0.406, (12.791, 2.383, 1.847)), (' C 419  ALA  O  ', ' C 601  HOH  O  ', -0.405, (-3.022, -0.646, 10.695)), (' L  11  LEU HD23', ' L  12  SER  N  ', -0.405, (-17.158, 39.98, -11.279)), (' H  29  PHE  CD2', ' H  77  SER  HA ', -0.405, (-11.542, -0.779, -7.969)), (' L 115  VAL HG22', ' L 510  HOH  O  ', -0.403, (-37.209, 45.463, -25.407))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
