# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 132 ', 'GLU', 0.027284517103992444, (206.93500000000006, 158.158, 116.135)), ('A', ' 571 ', 'ASP', 0.036936921150958285, (159.40900000000005, 138.67999999999995, 148.675)), ('B', '  98 ', 'SER', 0.03528899384230986, (130.519, 106.987, 138.367)), ('B', ' 123 ', 'ALA', 0.04184076695744618, (138.09600000000006, 109.478, 129.588)), ('C', ' 590 ', 'CYS', 0.017474580099167032, (174.808, 188.972, 152.744)), ('C', ' 744 ', 'GLY', 0.06583051658167693, (139.527, 160.785, 150.427))]
data['omega'] = []
data['rota'] = [('A', ' 115 ', 'GLN', 0.1521061384660144, (202.06800000000007, 157.403, 118.652)), ('A', ' 242 ', 'LEU', 0.0, (219.194, 159.6, 130.728)), ('A', ' 458 ', 'LYS', 0.27910737636554367, (129.167, 148.544, 120.226)), ('A', ' 656 ', 'VAL', 0.2502648478793563, (193.085, 135.722, 179.669)), ('A', ' 779 ', 'GLN', 0.007125368592943521, (165.437, 178.704, 185.65400000000002)), ('A', ' 886 ', 'TRP', 0.018110858714265935, (166.937, 173.834, 205.57900000000004)), ('A', ' 907 ', 'ASN', 0.1911870599419509, (170.657, 163.89, 214.401)), ('A', '1098 ', 'ASN', 0.03244144937969058, (182.002, 142.454, 225.083)), ('B', ' 233 ', 'ILE', 0.10046563573039152, (137.35600000000005, 134.995, 124.211)), ('B', ' 242 ', 'LEU', 0.0, (126.49400000000006, 114.601, 130.937)), ('B', ' 347 ', 'PHE', 0.22324937331252054, (144.594, 182.383, 107.634)), ('B', ' 717 ', 'ASN', 0.0939071660445872, (146.18100000000007, 143.161, 214.11700000000002)), ('C', ' 233 ', 'ILE', 0.0411614584569501, (149.355, 194.673, 123.756)), ('C', ' 779 ', 'GLN', 0.0027443065363190744, (143.453, 155.904, 185.623)), ('C', ' 907 ', 'ASN', 0.17778438346673497, (154.434, 166.086, 214.66000000000003))]
data['cbeta'] = [('A', ' 487 ', 'ASN', ' ', 0.2789784677594733, (122.63000000000005, 154.306, 110.86800000000001)), ('B', '  61 ', 'ASN', ' ', 0.265319850518298, (122.66500000000008, 130.484, 149.767))]
data['probe'] = [(' B1032  CYS  HG ', ' B1043  CYS  HG ', -0.495, (160.049, 151.855, 197.131)), (' B 927  PHE  CZ ', ' B 931  ILE HD11', -0.476, (159.679, 136.613, 202.036)), (' B 468  ILE HD13', ' C1302  NAG  H83', -0.462, (147.565, 194.792, 113.919)), (' B 738  CYS  SG ', ' B 760  CYS  HA ', -0.46, (172.383, 154.226, 155.971)), (' C1032  CYS  HG ', ' C1043  CYS  HG ', -0.454, (154.064, 166.08, 197.81)), (' C 330  PRO  HB2', ' C 332  ILE HG22', -0.444, (189.536, 185.514, 128.694)), (' B 233  ILE  HA ', ' B 233  ILE HD12', -0.433, (137.144, 135.866, 122.716)), (' A1032  CYS  SG ', ' A1043  CYS  SG ', -0.421, (169.767, 164.216, 197.457)), (' C 330  PRO  C  ', ' C 332  ILE  H  ', -0.415, (189.547, 187.552, 129.775)), (' C 366  SER  HA ', ' C 369  TYR  CZ ', -0.402, (171.492, 179.836, 120.994))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
