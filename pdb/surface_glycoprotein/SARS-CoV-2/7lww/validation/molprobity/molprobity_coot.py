# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 112 ', 'SER', 0.020386791541595707, (149.658, 205.263, 111.259)), ('A', ' 123 ', 'ALA', 0.024738387136415765, (127.25500000000007, 207.47, 127.809)), ('A', ' 571 ', 'ASP', 0.04736362328475081, (180.044, 171.62100000000007, 144.286)), ('A', ' 709 ', 'ASN', 0.0025560584331606765, (180.04200000000006, 180.95600000000005, 211.524)), ('B', ' 582 ', 'LEU', 0.04569148934990514, (161.12200000000004, 116.802, 139.713)), ('C', ' 110 ', 'LEU', 0.026752624675914553, (129.772, 129.885, 119.411)), ('C', ' 112 ', 'SER', 0.002700202822726095, (130.765, 129.548, 112.05)), ('C', ' 481 ', 'ASN', 0.0389993513106731, (164.36400000000003, 204.751, 105.36)), ('C', ' 482 ', 'GLY', 0.05056839442974016, (162.338, 202.82, 102.654)), ('C', ' 571 ', 'ASP', 0.04380950885050699, (140.50600000000006, 173.85900000000007, 146.204)), ('C', ' 604 ', 'THR', 0.025412202894616456, (132.744, 132.6, 172.612))]
data['omega'] = []
data['rota'] = [('A', '  34 ', 'ARG', 0.010944957630964624, (144.068, 201.807, 146.591)), ('A', ' 332 ', 'ILE', 0.2611515900490463, (189.71700000000007, 183.322, 120.112)), ('A', ' 456 ', 'PHE', 0.06752050816605393, (177.653, 141.13, 112.033)), ('A', ' 603 ', 'ASN', 0.0, (147.18300000000005, 195.8, 169.166)), ('A', ' 604 ', 'THR', 0.09781954001664281, (149.64100000000002, 198.077, 171.033)), ('A', ' 820 ', 'ASP', 0.27858817394179447, (134.32, 175.40100000000007, 185.277)), ('B', ' 234 ', 'ASN', 0.06787391749927454, (195.767, 152.109, 121.21000000000001)), ('B', ' 273 ', 'ARG', 0.00011925292495994875, (191.285, 152.443, 142.868)), ('B', ' 281 ', 'GLU', 0.026910734712565193, (196.53000000000006, 175.018, 152.912)), ('B', ' 709 ', 'ASN', 0.02830636304993353, (171.213, 134.806, 211.478)), ('B', ' 711 ', 'SER', 0.1441104594237012, (175.39, 138.16900000000007, 212.659)), ('C', ' 233 ', 'ILE', 0.1753594574321369, (140.146, 133.939, 121.059)), ('C', ' 328 ', 'ARG', 0.17678518499576065, (123.59700000000007, 171.049, 134.439)), ('C', ' 332 ', 'ILE', 0.00014025203600132163, (122.06200000000007, 177.112, 124.325)), ('C', ' 656 ', 'VAL', 0.09260832054172471, (120.983, 148.311, 178.468)), ('C', ' 762 ', 'GLN', 5.107500415642261e-05, (172.856, 157.713, 156.787)), ('C', ' 921 ', 'LYS', 0.0, (155.71700000000004, 133.587, 211.053)), ('C', ' 926 ', 'GLN', 0.00012983101599150075, (151.49500000000006, 135.111, 203.229)), ('C', '1113 ', 'GLN', 0.14918877452906554, (149.63499999999993, 152.218, 224.89999999999998))]
data['cbeta'] = [('A', ' 122 ', 'ASN', ' ', 0.2678721610472297, (130.372, 209.993, 124.70700000000001)), ('B', ' 234 ', 'ASN', ' ', 0.27122554590316356, (194.882, 150.942, 120.74499999999999)), ('B', ' 710 ', 'ASN', ' ', 0.3692717474942203, (173.148, 135.299, 215.49299999999997)), ('B', ' 745 ', 'ASP', ' ', 0.26177203729613374, (169.38900000000007, 182.968, 145.197)), ('C', ' 198 ', 'ASP', ' ', 0.36081778160144906, (146.35, 138.363, 129.394))]
data['probe'] = [(' A1032  CYS  CB ', ' A1043  CYS  HG ', -0.642, (152.466, 165.865, 193.985)), (' A1032  CYS  HB2', ' A1043  CYS  HG ', -0.606, (152.98, 166.268, 193.948)), (' B 709  ASN  O  ', ' B 710  ASN  HB2', -0.597, (173.174, 134.537, 213.748)), (' B 603  ASN  OD1', ' B1302  NAG  O7 ', -0.579, (197.496, 160.698, 169.055)), (' B1103  PHE  HZ ', ' I   1  NAG  H62', -0.543, (182.046, 147.385, 226.441)), (' B  95  THR  HG1', ' B 263  ALA  N  ', -0.538, (219.781, 155.659, 138.196)), (' C 925  ASN  C  ', ' C 927  PHE  H  ', -0.529, (153.65, 135.117, 203.59)), (' B 710  ASN  HB2', ' B1308  NAG  O7 ', -0.491, (173.646, 133.887, 214.748)), (' B 708  SER  OG ', ' B 711  SER  HB3', -0.479, (175.68, 135.395, 210.968)), (' B1032  CYS  SG ', ' B1043  CYS  SG ', -0.478, (170.353, 164.291, 193.19)), (' B1302  NAG  C1 ', ' B1302  NAG  O7 ', -0.46, (198.146, 160.674, 170.376)), (' C 921  LYS  HA ', ' C 921  LYS  HD3', -0.46, (156.939, 133.211, 209.894)), (' C 925  ASN  C  ', ' C 927  PHE  N  ', -0.415, (153.584, 134.943, 203.419)), (' C 231  ILE HD12', ' C 233  ILE HG22', -0.413, (139.376, 130.92, 122.43)), (' C 332  ILE  H  ', ' C 332  ILE HG12', -0.408, (122.996, 177.452, 126.696)), (' A1076  THR  HB ', ' A1097  SER  HB3', -0.404, (173.265, 183.716, 220.038)), (' B 711  SER  O  ', ' C 897  PRO  HD3', -0.402, (173.106, 139.939, 210.788)), (' C 431  GLY  HA2', ' C 515  PHE  CD2', -0.401, (141.882, 173.764, 123.646)), (' C1103  PHE  HZ ', ' N   1  NAG  H62', -0.4, (142.287, 150.434, 227.992)), (' C 926  GLN  HA ', ' C 929  SER  HB3', -0.4, (150.984, 134.501, 201.539))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
