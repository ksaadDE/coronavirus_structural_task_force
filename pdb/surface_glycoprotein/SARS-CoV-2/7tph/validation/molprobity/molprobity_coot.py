# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  97 ', 'LYS', 0.0386806920976554, (125.48200000000006, 214.516, 144.451)), ('A', ' 123 ', 'ALA', 0.0047433936084216, (121.25, 208.032, 131.638)), ('A', ' 410 ', 'ILE', 0.018784640545763485, (186.331, 177.59, 99.54400000000001)), ('A', ' 421 ', 'TYR', 0.03388066202790963, (182.957, 168.517, 91.863)), ('A', ' 620 ', 'VAL', 0.06763145516038906, (171.656, 198.601, 158.40600000000003)), ('A', ' 635 ', 'VAL', 0.004763033051774602, (160.383, 206.415, 160.88000000000002)), ('B', ' 110 ', 'LEU', 0.03681236943141579, (205.707, 154.85, 119.89000000000003)), ('B', ' 123 ', 'ALA', 0.01286689553991131, (219.954, 172.58300000000006, 127.62100000000002)), ('B', ' 381 ', 'GLY', 0.03378723297972759, (166.858, 134.147, 114.25100000000002)), ('B', ' 418 ', 'ILE', 0.00512602, (156.953, 127.62, 98.73800000000001)), ('B', ' 582 ', 'LEU', 0.02479485847455122, (164.064, 115.244, 145.654)), ('B', '1084 ', 'ASP', 0.04085072607836113, (166.217, 142.777, 237.66100000000003)), ('C', '  97 ', 'LYS', 0.03941104623870157, (130.197, 104.584, 145.283)), ('C', ' 112 ', 'SER', 0.03432062793308868, (131.353, 121.197, 117.70100000000002)), ('C', ' 477 ', 'SER', 0.03215597064194263, (176.469, 196.865, 113.748)), ('C', ' 814 ', 'LYS', 0.04121606464165885, (173.527, 130.15, 189.54000000000002))]
data['omega'] = []
data['rota'] = [('A', ' 294 ', 'ASP', 0.002374214087482065, (154.695, 198.624, 159.032)), ('A', ' 586 ', 'ASP', 0.13244056458120054, (189.50899999999993, 187.107, 151.173)), ('A', ' 635 ', 'VAL', 0.09751566896157852, (160.383, 206.415, 160.88000000000002)), ('A', ' 739 ', 'THR', 0.0013599335943581536, (144.511, 156.353, 153.882)), ('A', ' 760 ', 'CYS', 0.13622669106787832, (149.985, 153.626, 156.507)), ('B', ' 122 ', 'ASN', 0.0165211891772983, (217.362, 169.743, 127.26100000000002)), ('B', ' 572 ', 'THR', 0.1443253797288229, (162.275, 134.883, 153.071)), ('B', ' 586 ', 'ASP', 0.1948991812679419, (168.195, 124.464, 153.95300000000003)), ('B', ' 738 ', 'CYS', 0.07739760255264821, (165.139, 178.043, 155.178)), ('B', ' 856 ', 'ASN', 0.15643495616597466, (174.767, 179.318, 154.509)), ('C', ' 117 ', 'LEU', 0.06975031600327865, (137.476, 120.844, 127.64100000000003)), ('C', ' 140 ', 'PHE', 0.17540860622897858, (127.962, 106.96800000000003, 127.27800000000003)), ('C', ' 227 ', 'VAL', 0.03505190487175175, (146.606, 119.768, 137.277)), ('C', ' 266 ', 'TYR', 0.2700369177720974, (126.83300000000006, 119.856, 145.053)), ('C', ' 308 ', 'VAL', 0.14066656827663065, (141.904, 136.811, 170.972)), ('C', ' 578 ', 'ASP', 0.23512991714176468, (122.99300000000005, 175.772, 141.782)), ('C', ' 586 ', 'ASP', 0.2680804041254606, (125.34100000000005, 173.571, 151.944)), ('C', ' 603 ', 'ASN', 0.005114514544379785, (138.029, 131.035, 175.79600000000002)), ('C', ' 622 ', 'VAL', 0.026168399331453422, (124.45100000000004, 150.557, 155.804)), ('C', ' 633 ', 'TRP', 0.24457672551495424, (126.59700000000004, 144.103, 158.9)), ('C', ' 907 ', 'ASN', 0.19209152512052477, (162.635, 152.32000000000005, 214.33900000000006)), ('C', '1012 ', 'LEU', 0.07442425481461355, (165.954, 156.953, 168.75500000000002))]
data['cbeta'] = [('A', ' 294 ', 'ASP', ' ', 0.6569528436259673, (154.234, 199.793, 159.92700000000002)), ('A', ' 622 ', 'VAL', ' ', 0.3065096917297411, (165.944, 199.83, 156.161)), ('A', ' 635 ', 'VAL', ' ', 0.2713451777805828, (159.438, 207.033, 161.936)), ('B', ' 130 ', 'VAL', ' ', 0.2555743285742449, (201.04, 164.83700000000005, 119.27800000000003)), ('C', ' 634 ', 'ARG', ' ', 0.3117337165751409, (123.69700000000006, 140.598, 158.035))]
data['probe'] = [(' A 164  ASN  HA ', ' A1311  NAG  H82', -0.579, (136.112, 203.416, 113.129)), (' B1083  HIS  CG ', ' B1084  ASP  H  ', -0.45, (167.678, 144.678, 236.745)), (' B 360  ASN  H  ', ' B 523  THR  CB ', -0.415, (153.507, 123.172, 123.406)), (' B1083  HIS  CD2', ' B1084  ASP  H  ', -0.413, (167.625, 145.269, 236.898)), (' A1083  HIS  CG ', ' A1084  ASP  H  ', -0.413, (179.454, 172.76, 235.77)), (' A  95  THR  HB ', ' A 186  PHE  CG ', -0.402, (130.617, 216.067, 145.992)), (' C 741  TYR  CE1', ' C 966  LEU HD21', -0.4, (166.255, 147.454, 153.464))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
