# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  45 ', 'ASN', 0.20757989347000466, (43.757, 54.705, -18.227999999999998)), ('A', '  46 ', 'ILE', 0.0057426893960503995, (46.137, 54.697, -15.261999999999997)), ('A', '  47 ', 'VAL', 0.18065414665828675, (48.014, 51.429, -14.751999999999997)), ('A', '  50 ', 'SER', 0.12671229870567943, (42.617000000000004, 45.448, -13.098)), ('A', '  53 ', 'LYS', 0.2504395226663894, (35.208999999999996, 41.768, -9.364)), ('A', '   8 ', 'GLU', 0.18569795036259892, (39.208, -0.19600000000000006, -30.473)), ('A', '  11 ', 'THR', 0.12485888838418045, (35.586, 3.302000000000001, -28.021)), ('A', '  19 ', 'LEU', 0.06552559162557019, (42.626, 13.656, -23.112)), ('A', '  21 ', 'LEU', 0.24018990916409738, (41.976, 14.937000000000003, -18.053)), ('A', '  46 ', 'ILE', 0.005231549570188789, (46.353, 54.753000000000014, -15.294999999999998)), ('A', '  51 ', 'LEU', 0.0072186389329091825, (39.852, 43.927000000000014, -11.446999999999996)), ('A', '  18 ', 'LEU', 0.08045011361619066, (42.45, 10.443, -20.901)), ('A', '  34 ', 'LEU', 0.05219457753498578, (44.157, 35.395, -20.378999999999994)), ('A', '  46 ', 'ILE', 0.005585087595710425, (46.56799999999999, 54.610000000000014, -15.128)), ('A', '  53 ', 'LYS', 0.25429156787622664, (35.075999999999986, 42.31, -9.102)), ('A', '   9 ', 'THR', 0.186133122919453, (35.87, -1.4400000000000004, -32.554)), ('A', '  19 ', 'LEU', 0.13776207818082917, (42.766, 13.759000000000004, -22.783999999999992)), ('A', '  21 ', 'LEU', 0.043586943349116766, (42.154, 14.907000000000004, -17.683)), ('A', '  31 ', 'LEU', 0.08760965713743421, (42.608, 30.409000000000006, -17.969999999999995)), ('A', '  46 ', 'ILE', 0.005640793146394359, (46.675, 54.438, -15.3)), ('A', '  47 ', 'VAL', 0.13788640014462272, (48.687, 51.21, -15.302)), ('A', '  48 ', 'ASN', 0.12687761049570906, (48.533, 47.536, -16.274999999999995)), ('A', '  53 ', 'LYS', 0.28493312974151247, (35.075999999999986, 42.19700000000002, -9.158)), ('A', '  29 ', 'VAL', 0.029674207699669684, (46.203, 27.536, -15.481)), ('A', '  46 ', 'ILE', 0.00452956797906225, (46.546, 54.44300000000001, -15.162999999999997)), ('A', '  53 ', 'LYS', 0.2946449038015516, (35.154, 42.073, -9.222)), ('A', '  21 ', 'LEU', 0.03909222830263185, (41.922, 14.987, -17.566)), ('A', '  46 ', 'ILE', 0.005252635697422894, (46.609, 54.431, -15.461999999999996)), ('A', '  53 ', 'LYS', 0.07684358672822617, (35.11399999999998, 42.383, -9.379)), ('A', '  21 ', 'LEU', 0.0704270744739529, (41.975, 14.967999999999996, -17.414)), ('A', '  46 ', 'ILE', 0.00635321699832938, (46.364, 54.36400000000001, -15.284)), ('A', '  47 ', 'VAL', 0.16891601031550152, (48.38, 51.14, -15.261999999999997)), ('A', '  48 ', 'ASN', 0.03799310733782423, (48.299, 47.56600000000002, -16.559)), ('A', '  12 ', 'LEU', 0.2849457094882574, (36.41, 6.9110000000000005, -27.894)), ('A', '  19 ', 'LEU', 0.06263577931903803, (42.686, 13.562000000000003, -22.802999999999997)), ('A', '  21 ', 'LEU', 0.027637237688045588, (41.888, 14.935000000000004, -17.754)), ('A', '  46 ', 'ILE', 0.005929646357757157, (46.358, 54.666, -15.298)), ('A', '  47 ', 'VAL', 0.05189440593823761, (48.444, 51.498000000000005, -15.016)), ('A', '  53 ', 'LYS', 0.18896720977995085, (35.086999999999996, 42.224, -9.228)), ('A', '  18 ', 'LEU', 0.11460204518442929, (42.351, 10.6, -20.843)), ('A', '  46 ', 'ILE', 0.005490106702814018, (46.119, 55.054, -15.486)), ('A', '  47 ', 'VAL', 0.25766495661205585, (47.864000000000004, 51.785, -14.629)), ('A', '  62 ', 'VAL', 0.20674760699456374, (25.05600000000001, 37.501, -19.591)), ('A', '   8 ', 'GLU', 0.10359322225044708, (41.193, -0.149, -28.21399999999999)), ('A', '  38 ', 'ARG', 0.019869308561925758, (42.76400000000001, 42.194, -19.373)), ('A', '  46 ', 'ILE', 0.006210795794358334, (46.33, 54.69, -15.125)), ('A', '  47 ', 'VAL', 0.033869812250003815, (48.175, 51.38900000000002, -14.728)), ('A', '  65 ', 'LEU', 0.24795393386502212, (20.06200000000001, 39.276, -22.449)), ('A', '  11 ', 'THR', 0.0741677898704905, (36.35, 3.120000000000001, -28.516)), ('A', '  13 ', 'ILE', 0.15244859313598513, (35.766, 7.269000000000002, -24.56)), ('A', '  31 ', 'LEU', 0.10948456742353752, (42.666, 30.441, -17.974)), ('A', '  46 ', 'ILE', 0.006093942583452331, (46.374, 54.787, -15.654)), ('A', '  47 ', 'VAL', 0.15870764626374861, (48.286, 51.566, -14.990999999999996)), ('A', '  65 ', 'LEU', 0.11851420783204798, (20.144000000000005, 38.487, -21.979)), ('A', '  13 ', 'ILE', 0.01575897556003777, (36.633, 6.403000000000001, -23.873)), ('A', '  19 ', 'LEU', 0.08844850658545932, (42.83500000000001, 13.648000000000001, -22.921)), ('A', '  34 ', 'LEU', 0.04080198538705507, (44.023, 35.469, -20.483999999999998)), ('A', '  38 ', 'ARG', 0.005283163528275204, (42.607, 42.30900000000001, -19.352999999999994)), ('A', '  46 ', 'ILE', 0.006044260000909178, (46.363, 54.653, -14.894999999999998)), ('A', '  47 ', 'VAL', 0.20833711189912804, (48.144, 51.326, -14.422999999999996)), ('A', '  50 ', 'SER', 0.17412508217457623, (42.642, 45.46400000000001, -12.997)), ('A', '  53 ', 'LYS', 0.0, (35.065999999999995, 42.100000000000016, -9.198999999999998)), ('A', '  64 ', 'ASN', 0.20326876477930622, (19.690000000000005, 39.548, -18.473)), ('A', '  13 ', 'ILE', 0.29385227394351554, (36.319, 6.643, -24.171)), ('A', '  34 ', 'LEU', 0.04884330936299496, (44.274, 35.379, -20.309)), ('A', '  38 ', 'ARG', 0.1656533945054069, (42.89000000000001, 42.227, -19.266)), ('A', '  46 ', 'ILE', 0.005984987570655016, (46.676, 54.78, -15.279999999999998)), ('A', '  53 ', 'LYS', 0.18620879719826952, (34.73199999999999, 42.967, -8.82)), ('A', '  62 ', 'VAL', 0.011943116991744393, (25.11499999999999, 38.427, -19.638999999999992)), ('A', '  65 ', 'LEU', 0.03561842705229181, (20.374000000000006, 38.25699999999999, -22.531)), ('A', '  21 ', 'LEU', 0.06925798150147726, (42.026999999999994, 14.813000000000004, -18.167)), ('A', '  38 ', 'ARG', 0.12214065799015282, (42.889, 42.11100000000001, -19.339)), ('A', '  46 ', 'ILE', 0.0056547046973164095, (46.49900000000001, 54.78, -15.366999999999999)), ('A', '  47 ', 'VAL', 0.1292621273608284, (48.707, 51.704, -15.001)), ('A', '  52 ', 'VAL', 0.24617783477102528, (36.79399999999999, 41.921, -12.056)), ('A', '  61 ', 'ARG', 0.1400276932498403, (23.422, 41.466, -17.947)), ('A', '  62 ', 'VAL', 0.011551952047739178, (25.109, 38.5, -19.627999999999997)), ('A', '  13 ', 'ILE', 0.10611691763925551, (36.209, 6.896000000000002, -24.435999999999993)), ('A', '  46 ', 'ILE', 0.0, (45.959, 54.75, -15.448999999999996)), ('A', '  53 ', 'LYS', 0.170462369762835, (35.191, 41.712, -9.325)), ('A', '  61 ', 'ARG', 0.0, (23.461, 42.588, -17.589))]
data['cbeta'] = []
data['probe'] = [(' A  47  VAL  HB ', ' A  49  VAL HG12', -0.648, (47.129, 49.428, -12.868)), (' A  53  LYS  N  ', ' A  54  PRO  HD2', -0.608, (36.773, 42.401, -10.874)), (' A  20  PHE  O  ', ' A  24  VAL HG23', -0.608, (39.701, 17.777, -18.532)), (' A  55  THR  O  ', ' A  58  VAL HG12', -0.537, (30.838, 41.944, -16.002)), (' A  37  LEU  O  ', ' A  40  ALA  HB3', -0.517, (45.634, 43.272, -21.427)), (' A  29  VAL HG23', ' A  30  THR  N  ', -0.497, (47.524, 27.118, -17.769)), (' A  43  ALA  HB2', ' A  48  ASN  HB3', -0.497, (48.779, 48.361, -18.53)), (' A  53  LYS  O  ', ' A  56  VAL HG22', -0.486, (32.124, 42.748, -9.96)), (' A  53  LYS  O  ', ' A  56  VAL HG13', -0.478, (32.522, 41.952, -10.128)), (' A  53  LYS  N  ', ' A  54  PRO  CD ', -0.462, (36.0, 43.071, -10.466)), (' A  17  VAL  O  ', ' A  21  LEU HD23', -0.436, (39.994, 12.031, -18.002)), (' A  39  LEU HD22', ' A  50  SER  O  ', -0.429, (43.354, 43.151, -12.938)), (' A  47  VAL HG12', ' A  48  ASN  H  ', -0.427, (49.504, 49.677, -14.474)), (' A  43  ALA  HB2', ' A  48  ASN  HA ', -0.425, (47.71, 48.468, -17.586)), (' A  58  VAL  O  ', ' A  62  VAL HG22', -0.411, (26.671, 39.787, -17.853)), (' A  13  ILE  O  ', ' A  17  VAL HG12', -0.41, (38.559, 7.813, -21.603)), (' A  25  VAL  HA ', ' A  28  LEU HD12', -0.41, (44.17, 21.647, -14.318))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
