# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 743 ', 'CYS', 0.041494373799476986, (194.01, 191.977, 223.498)), ('A', '1036 ', 'GLN', 0.013181238257096911, (196.839, 202.86, 277.114)), ('C', ' 743 ', 'CYS', 0.03667896280902853, (199.995, 222.90699999999995, 223.04299999999998))]
data['omega'] = [('H', ' 162 ', 'PRO', None, (210.59900000000005, 241.114, 119.60099999999997)), ('H', ' 164 ', 'PRO', None, (207.08500000000006, 243.04899999999995, 124.81899999999999)), ('I', ' 162 ', 'PRO', None, (173.014, 186.31799999999996, 120.66399999999997)), ('I', ' 164 ', 'PRO', None, (175.252, 183.092, 125.78499999999998)), ('L', '   8 ', 'PRO', None, (203.643, 225.314, 150.618)), ('L', ' 115 ', 'PRO', None, (226.793, 232.02499999999998, 146.707)), ('L', ' 161 ', 'PRO', None, (190.934, 224.98099999999997, 140.92899999999995)), ('M', '   8 ', 'PRO', None, (188.31, 196.911, 150.365)), ('M', ' 115 ', 'PRO', None, (166.671, 206.191, 145.947)), ('M', ' 161 ', 'PRO', None, (198.079, 188.153, 142.07299999999995))]
data['rota'] = [('A', ' 616 ', 'ASN', 0.28293202839217324, (191.14900000000011, 240.811, 237.49899999999994)), ('A', ' 709 ', 'ASN', 0.1242230858727004, (203.69100000000006, 232.40299999999993, 289.66)), ('A', ' 801 ', 'ASN', 0.1720602594172666, (177.451, 198.99800000000005, 276.56)), ('B', '  48 ', 'LEU', 0.06152938092001108, (218.39500000000007, 177.874, 233.552)), ('B', ' 657 ', 'ASN', 0.0387509429758268, (185.493, 170.864, 257.3809999999999)), ('C', ' 657 ', 'ASN', 0.009622522984936528, (247.938, 204.50499999999997, 256.776)), ('L', ' 104 ', 'CYS', 0.109392494673475, (212.25800000000007, 233.42399999999995, 150.69399999999993))]
data['cbeta'] = [('A', ' 201 ', 'PHE', ' ', 0.3451780468119117, (165.207, 212.60799999999995, 208.081))]
data['probe'] = [(' B 142  GLY  HA3', ' B 158  ARG  HD2', -0.603, (220.968, 145.41, 199.256)), (' H 139  LEU  HB3', ' L 138  PHE  HB3', -0.569, (191.208, 227.312, 116.824)), (' B  47  VAL HG12', ' B  48  LEU  N  ', -0.54, (219.671, 179.327, 233.149)), (' C 281  GLU  OE1', ' C1302  NAG  H62', -0.511, (221.757, 245.662, 238.567)), (' C 444  LYS  O  ', ' C 498  GLN  NE2', -0.502, (205.851, 188.911, 171.963)), (' A1071  GLN  HG3', ' A1305  NAG  H5 ', -0.498, (182.019, 220.986, 286.962)), (' A 709  ASN  N  ', ' A 709  ASN  OD1', -0.497, (203.214, 234.078, 289.642)), (' A 571  ASP  OD2', ' C 964  LYS  NZ ', -0.496, (217.597, 227.618, 228.162)), (' B  47  VAL  CG1', ' B  48  LEU  N  ', -0.49, (220.259, 179.807, 233.182)), (' B 326  ILE HD11', ' B 534  VAL  H  ', -0.483, (173.102, 181.325, 221.011)), (' C  48  LEU HD23', ' C 278  LYS  HA ', -0.476, (227.159, 233.102, 235.113)), (' H 216  LYS  N  ', ' H 217  PRO  CD ', -0.474, (205.749, 246.755, 119.661)), (' A 964  LYS  NZ ', ' B 571  ASP  OD2', -0.472, (182.417, 204.997, 230.657)), (' B  49  HIS  HB3', ' B 279  TYR  HE1', -0.47, (219.635, 177.594, 228.58)), (' A 800  PHE  CE2', ' A 927  PHE  HB3', -0.47, (181.399, 204.177, 280.044)), (' B 489  TYR  CE2', ' B 490  PHE  O  ', -0.466, (159.221, 201.717, 161.891)), (' B  28  TYR  HB3', ' B  61  ASN  HB3', -0.464, (202.234, 156.407, 224.422)), (' C1097  SER  HB2', ' C1102  TRP  CE2', -0.462, (228.825, 203.004, 301.009)), (' B 989  ALA  O  ', ' B 993  ILE HG12', -0.461, (218.555, 203.994, 213.682)), (' B 102  ARG  HB3', ' B 121  ASN  HB2', -0.459, (224.204, 152.898, 209.944)), (' A 800  PHE  CE2', ' A 924  ALA  HA ', -0.451, (180.472, 203.273, 282.572)), (' B 657  ASN  N  ', ' B 657  ASN  OD1', -0.45, (185.316, 169.847, 255.955)), (' A 324  GLU  HB2', ' A 539  VAL HG22', -0.449, (197.438, 242.94, 220.954)), (' H  29  ASP  OD1', ' H  30  LEU  N  ', -0.447, (226.177, 255.853, 148.079)), (' A 880  GLY  O  ', ' A 885  GLY  N  ', -0.445, (192.298, 193.085, 278.438)), (' M  41  TRP  HE1', ' M 102  TYR  HB3', -0.445, (180.271, 190.381, 151.314)), (' C  47  VAL HG12', ' C  48  LEU  N  ', -0.439, (222.675, 231.495, 234.371)), (' B 201  PHE  CD2', ' B 231  ILE HG13', -0.439, (218.749, 167.512, 203.96)), (' C 578  ASP  HB3', ' C 581  THR  O  ', -0.436, (241.331, 180.153, 217.359)), (' B 922  LEU HD11', ' G   1  NAG  H5 ', -0.434, (213.48, 180.169, 286.102)), (' C 102  ARG  HB3', ' C 121  ASN  HB3', -0.431, (242.603, 248.214, 210.619)), (' A 669  GLY  HA2', ' C 869  MET  HE1', -0.423, (194.217, 232.347, 255.561)), (' B 818  ILE  HB ', ' B1054  GLN HE22', -0.419, (224.137, 188.112, 266.767)), (' C 342  PHE  O  ', ' C 509  ARG  NH1', -0.417, (221.054, 188.084, 182.869)), (' B  91  TYR  CD1', ' B 270  LEU HD21', -0.416, (212.154, 164.386, 218.699)), (' B 714  ILE  HA ', ' B 715  PRO  HD3', -0.415, (199.721, 188.39, 288.016)), (' B 105  ILE HG23', ' B 239  GLN  HB2', -0.414, (211.794, 155.516, 205.027)), (' A 741  TYR  CE1', ' A 966  LEU HD11', -0.413, (192.225, 198.164, 229.683)), (' A 713  ALA  HB3', ' C 895  GLN  H  ', -0.407, (194.534, 226.521, 285.064)), (' A 674  TYR  CE2', ' A 692  ILE HG12', -0.404, (177.857, 230.628, 249.306)), (' A 329  PHE  O  ', ' A 580  GLN  HG3', -0.404, (210.717, 248.51, 212.945)), (' I 216  LYS  N  ', ' I 217  PRO  CD ', -0.403, (173.297, 179.475, 120.057)), (' A 360  ASN  H  ', ' A 523  THR  HB ', -0.403, (222.258, 241.074, 200.486)), (' L 114  TYR  HA ', ' L 115  PRO  C  ', -0.402, (225.383, 233.401, 147.717)), (' B 603  ASN  C  ', ' B 603  ASN  OD1', -0.402, (212.11, 167.26, 250.759)), (' L  41  TRP  CD1', ' L  89  LEU  HB2', -0.402, (207.692, 234.497, 154.563)), (' B 611  LEU  HA ', ' B 649  CYS  O  ', -0.401, (191.941, 175.59, 241.921)), (' C 660  TYR  CD1', ' C 695  TYR  CD2', -0.401, (244.922, 210.221, 257.803)), (' A 204  TYR  HA ', ' A 225  PRO  HA ', -0.4, (161.411, 209.97, 217.467))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
