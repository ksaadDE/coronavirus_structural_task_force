# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  69 ', 'GLY', 0.00514628, (3.9530000000000007, -19.913, -1.317)), ('A', '  70 ', 'ALA', 0.00021229802232894843, (0.9680000000000003, -19.607999999999997, 0.9100000000000003))]
data['omega'] = [('A', '  71 ', 'VAL', None, (-0.49200000000000016, -17.896, 0.10000000000000003)), ('A', '  72 ', 'ASP', None, (-2.434000000000001, -18.987, 1.34)), ('B', ' 188 ', 'PRO', None, (-1.624, -33.659, -11.619000000000003))]
data['rota'] = [('A', '  11 ', 'VAL', 0.21648070121770835, (-11.306, -1.7849999999999995, -7.003)), ('A', '  23 ', 'GLN', 0.025337352220718957, (5.307000000000002, -6.789, -1.2910000000000004)), ('A', '  48 ', 'LYS', 0.00011251798148948525, (-10.848, 5.393, -16.692)), ('B', ' 135 ', 'VAL', 0.11373504766319685, (-2.805, -23.244, -15.602)), ('B', ' 169 ', 'SER', 0.0954942413781606, (6.124000000000002, -33.315, -18.875))]
data['cbeta'] = [('A', '  70 ', 'ALA', ' ', 0.949947470639147, (0.782, -20.199, 2.322000000000001))]
data['probe'] = [(' A  64  LEU  CD1', ' A  71  VAL HG21', -1.043, (-1.147, -14.815, -2.609)), (' A  64  LEU HD11', ' A  71  VAL  CG2', -1.011, (-0.183, -14.596, -1.92)), (' A  64  LEU HD11', ' A  71  VAL HG21', -0.979, (-1.37, -13.691, -2.089)), (' A  64  LEU  CD1', ' A  71  VAL  CG2', -0.774, (-0.187, -14.767, -2.364)), (' A  64  LEU HD11', ' A  71  VAL HG22', -0.745, (-0.367, -14.375, -1.221)), (' A  19  LEU HD22', ' A  41  HIS  CG ', -0.738, (0.461, -1.155, -7.47)), (' A  64  LEU  CG ', ' A  71  VAL HG21', -0.728, (-1.937, -14.357, -3.063)), (' B 130  ALA  HA ', ' B 194  LEU  HB3', -0.728, (-3.172, -17.472, -28.341)), (' A  71  VAL  O  ', ' A  71  VAL HG12', -0.678, (-4.124, -16.925, 0.31)), (' A   7  LYS  O  ', ' A  11  VAL HG23', -0.668, (-14.052, -0.549, -8.689)), (' A  21  VAL HG21', ' B  96  LEU HD22', -0.658, (-3.528, -9.046, -0.738)), (' A  84  ARG  HD2', ' A  84  ARG  N  ', -0.622, (-17.442, -14.972, 13.516)), (' B 171  ILE HG22', ' B 172  VAL  N  ', -0.617, (-0.34, -34.678, -24.803)), (' B 165  VAL HG12', ' B 171  ILE HD13', -0.578, (3.17, -31.553, -23.533)), (' A  64  LEU  HG ', ' A  71  VAL HG21', -0.577, (-1.788, -14.469, -3.239)), (' B 140  TYR  HE2', ' B 179  MET  HE2', -0.55, (-16.294, -37.867, -16.361)), (' B  83  ASP  OD2', ' B  87  LYS  HE3', -0.524, (1.132, -13.409, 16.9)), (' A  74  ASN  OD1', ' B 116  ARG  HD2', -0.523, (-10.578, -23.036, -0.725)), (' B 164  VAL HG11', ' B 189  LEU HD13', -0.508, (-4.169, -33.176, -19.861)), (' A  19  LEU HD22', ' A  41  HIS  CD2', -0.498, (0.015, -0.936, -6.6)), (' A  73  ILE HG22', ' B 116  ARG  HD3', -0.491, (-10.309, -20.157, -0.666)), (' B 162  GLN  OE1', ' B 194  LEU  HG ', -0.49, (-3.143, -21.145, -29.009)), (' B 166  ASP  HB2', ' B 186  ALA  O  ', -0.48, (-0.454, -36.482, -15.696)), (' B 181  ASN  HA ', ' B 184  ASN HD22', -0.471, (-8.13, -44.355, -19.475)), (' A  71  VAL  CG1', ' A  71  VAL  O  ', -0.467, (-3.325, -16.263, 0.187)), (' A  84  ARG  CD ', ' A  84  ARG  N  ', -0.457, (-17.838, -14.514, 13.583)), (' B 171  ILE  CG2', ' B 172  VAL  N  ', -0.457, (0.298, -34.136, -25.01)), (' A  49  ASP  OD1', ' A  52  GLU  HB2', -0.456, (-11.051, 0.409, -18.789)), (' A  62  SER  CB ', ' B 125  ILE HG13', -0.454, (-3.819, -14.448, -13.374)), (' B 143  TYR  C  ', ' B 143  TYR  CD1', -0.451, (-12.138, -30.958, -17.821)), (' A  34  TRP  O  ', ' A  38  VAL HG23', -0.448, (6.253, -3.546, -8.959)), (' B 187  TRP  HB3', ' B 188  PRO  HA ', -0.447, (-3.654, -33.906, -12.432)), (' A  27  VAL  O  ', ' A  27  VAL HG12', -0.441, (7.953, -9.358, -6.45)), (' A  62  SER  HB2', ' B 125  ILE HG13', -0.44, (-3.599, -15.135, -13.662)), (' A  68  GLN  O  ', ' A  69  GLY  C  ', -0.432, (2.274, -21.074, -1.372)), (' A  28  GLU  HB2', ' A 101  HOH  O  ', -0.431, (9.794, -7.226, -2.053)), (' B 171  ILE HG22', ' B 172  VAL  H  ', -0.421, (-0.164, -34.066, -24.649)), (' B  89  THR  O  ', ' B  93  GLN  HG3', -0.417, (-2.081, -10.855, 5.272)), (' B 179  MET  HB2', ' B 179  MET  HE3', -0.417, (-16.526, -39.165, -18.044)), (' A  27  VAL  CG1', ' A  27  VAL  O  ', -0.416, (7.924, -9.744, -6.212)), (' B 166  ASP  OD1', ' B 170  LYS  HB2', -0.416, (3.184, -36.78, -19.34)), (' A  75  ARG  HD2', ' A  75  ARG  O  ', -0.41, (-7.619, -20.461, 7.451)), (' A  64  LEU HD21', ' A  71  VAL HG11', -0.409, (-3.329, -14.124, -1.725)), (' B 181  ASN  HA ', ' B 184  ASN  ND2', -0.403, (-7.975, -44.845, -19.041))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
