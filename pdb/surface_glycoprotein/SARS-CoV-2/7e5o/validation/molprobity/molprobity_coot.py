# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 337 ', 'PRO', 0.023595150370472346, (-12.504999999999997, 38.946, 44.054)), ('A', ' 383 ', 'SER', 0.08102171306980815, (-4.833, 19.706999999999987, 46.953))]
data['omega'] = [('H', ' 154 ', 'PRO', None, (-30.832999999999995, -6.100999999999998, -8.389)), ('H', ' 156 ', 'PRO', None, (-24.789, -6.508, -9.789)), ('L', '   9 ', 'PRO', None, (-8.719999999999988, 22.511999999999997, -11.644)), ('L', '  96 ', 'PRO', None, (-19.381, 22.366999999999983, 9.666))]
data['rota'] = [('H', '  67 ', 'VAL', 0.03752423508558422, (-27.747999999999994, 10.394, 12.066)), ('H', ' 176 ', 'VAL', 0.08873223514976886, (-27.603999999999992, 3.556999999999997, -15.597000000000005)), ('L', '  32 ', 'ASN', 0.2003875912034505, (-3.534, 24.51099999999999, 8.388)), ('L', '  34 ', 'LEU', 0.08060642249246913, (-6.3759999999999994, 20.943, 4.718000000000001)), ('L', ' 160 ', 'SER', 0.03924412969231792, (-32.168, 10.547, -23.06100000000001)), ('A', ' 358 ', 'ILE', 0.08911179595183587, (-4.706999999999999, 37.979, 44.35200000000001)), ('A', ' 366 ', 'SER', 0.29378235327131286, (-13.790999999999999, 23.905999999999985, 49.577))]
data['cbeta'] = []
data['probe'] = [(' L 107  ILE  H  ', ' L 167  GLN HE22', -0.789, (-6.45, 9.251, -19.262)), (' L   5  MET  HE2', ' L  91  GLN  HB3', -0.743, (-11.71, 22.942, 3.381)), (' L  21  THR HG22', ' L  75  THR HG23', -0.659, (2.091, 21.149, -9.49)), (' H 178  GLN  OE1', ' H 184  SER  HB2', -0.623, (-32.91, 0.181, -18.258)), (' A 361  CYS  HB3', ' A 391  CYS  HB3', -0.592, (-5.722, 35.227, 49.426)), (' H 159  VAL HG22', ' H 205  VAL HG22', -0.58, (-24.605, -8.92, -20.727)), (' L   5  MET  CE ', ' L  91  GLN  HB3', -0.573, (-11.397, 23.251, 2.824)), (' L  20  VAL HG21', ' L  79  LEU HD22', -0.572, (0.452, 14.837, -14.157)), (' L  64  SER  OG ', ' L  75  THR  HB ', -0.561, (4.244, 19.659, -5.207)), (' L  40  LYS  HD2', ' L  43  LYS  HD2', -0.54, (-6.248, 2.397, -7.542)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.532, (-12.33, 21.473, 33.861)), (' L  38  GLN  HB2', ' L  48  LEU HD11', -0.529, (-3.799, 11.132, -4.101)), (' L 126  LEU HD12', ' L 184  LYS  HG3', -0.525, (-44.05, -0.623, -30.763)), (' L 142  PRO  HD2', ' L 199  HIS  CE1', -0.512, (-12.582, 13.527, -29.525)), (' H 145  LEU  C  ', ' H 145  LEU HD12', -0.509, (-22.488, -6.187, -31.35)), (' H  63  LEU HD23', ' H  82  LEU HD11', -0.504, (-28.623, 10.425, 6.835)), (' H  40  PRO  HB2', ' H  43  LYS  HB2', -0.498, (-22.919, 10.651, -5.016)), (' H  59  TYR  CD1', ' H  67  VAL  CG1', -0.495, (-24.486, 12.004, 12.951)), (' A 336  CYS  SG ', ' A 363  ALA  HB2', -0.479, (-10.366, 34.106, 48.413)), (' A 382  VAL HG13', ' A 430  THR  HB ', -0.477, (1.105, 23.217, 45.103)), (' H  39  GLN  HB2', ' H  45  LEU HD23', -0.468, (-16.893, 8.953, -1.416)), (' L  92  HIS  HA ', ' L  97  TRP  CE3', -0.461, (-13.375, 20.384, 9.413)), (' L 167  GLN  HG3', ' L 174  TYR  CE1', -0.453, (-10.6, 8.451, -20.695)), (' L 171  ASP  OD1', ' L 173  THR  OG1', -0.453, (-9.838, 4.036, -26.879)), (' H  11  LEU  HA ', ' H  11  LEU HD23', -0.452, (-29.666, -2.348, -0.76)), (' A 343  ASN  OD1', ' B   1  NAG  H2 ', -0.451, (-20.237, 34.819, 40.401)), (' A 364  ASP  O  ', ' A 367  VAL HG12', -0.45, (-14.52, 28.507, 48.353)), (' L  67  GLY  HA3', ' L  72  PHE  CD2', -0.448, (-2.54, 25.625, 1.991)), (' A 403  ARG  HG2', ' A 406  GLU  CD ', -0.438, (-9.791, 22.568, 21.99)), (' A 461  LEU HD22', ' A 465  GLU  HB3', -0.431, (5.425, 30.714, 26.598)), (' A 335  LEU  HA ', ' A 335  LEU HD12', -0.421, (-13.245, 37.104, 52.12)), (' H 160  SER  OG ', ' H 204  ASN  HB2', -0.421, (-20.979, -14.213, -21.792)), (' H  59  TYR  CD1', ' H  67  VAL HG11', -0.409, (-24.448, 12.221, 12.768)), (' H 135  SER  O  ', ' H 136  LYS  HG3', -0.409, (-26.453, 0.374, -44.065)), (' A 439  ASN  O  ', ' A 443  SER  HB2', -0.407, (-22.424, 28.679, 23.14)), (' L 191  LYS  HE2', ' L 211  ASN  OD1', -0.402, (-37.996, 7.89, -43.529)), (' A 456  PHE  CZ ', ' L  32  ASN  HB2', -0.401, (-1.464, 25.616, 9.889)), (' A 391  CYS  SG ', ' A 525  CYS  C  ', -0.4, (-3.307, 36.512, 52.591))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
