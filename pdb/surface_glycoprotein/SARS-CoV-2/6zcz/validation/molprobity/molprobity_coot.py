# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 155 ', 'PRO', None, (42.57665, -30.156829999999992, 1.8698199999999998)), ('H', ' 157 ', 'PRO', None, (42.98461999999999, -32.69853, 7.63415)), ('L', '   8 ', 'PRO', None, (19.601199999999988, -22.93185, 28.78874)), ('L', ' 142 ', 'PRO', None, (35.072969999999984, -17.02654, 31.68002))]
data['rota'] = [('F', '  45 ', 'ARG', 0.03922487991104154, (-22.94180999999999, -2.626619999999999, -23.24271)), ('F', '  89 ', 'GLU', 0.07972239186734606, (-33.66242999999999, 5.3865099999999995, -22.37469)), ('H', '  50 ', 'VAL', 0.04281419587743757, (14.592119999999987, -43.22659, 6.79009)), ('H', ' 105 ', 'VAL', 0.04563827119936353, (7.560409999999991, -42.63276, 16.5022)), ('H', ' 212 ', 'ASN', 0.12993808330188764, (51.9354, -34.54229, 1.19602)), ('H', ' 217 ', 'LYS', 0.21233113410952634, (59.7526, -22.97905, 10.06808)), ('L', '  33 ', 'LEU', 0.27153229189219863, (10.968639999999999, -35.45413999999999, 23.139869999999995)), ('L', '  45 ', 'LYS', 0.12413859319038134, (24.509259999999983, -41.182879999999976, 22.6749)), ('L', ' 109 ', 'ARG', 0.012078812792978922, (36.18361999999999, -22.40338999999999, 37.79235)), ('L', ' 182 ', 'LEU', 0.128686954649725, (43.506289999999986, -8.31686, 4.22175))]
data['cbeta'] = []
data['probe'] = [(' E 367  VAL HG11', ' E 601  NAG  H83', -0.731, (-4.146, -47.239, -4.667)), (' L  32  TYR  HB3', ' L  91  SER  HB2', -0.702, (8.116, -37.92, 19.151)), (' E 383  SER  HB2', ' E 386  LYS  HG2', -0.593, (6.277, -45.565, 12.4)), (' H  22  CYS  HB3', ' H  79  LEU  HB3', -0.585, (23.777, -48.794, 6.872)), (' L  39  LYS  HD3', ' L  84  ALA  HB2', -0.572, (30.269, -35.102, 26.506)), (' E 383  SER  HA ', ' L  94  THR HG21', -0.563, (6.104, -41.419, 11.275)), (' E 493  GLN HE21', ' F 104  TYR  HD2', -0.56, (-13.819, -12.036, -3.136)), (' E 493  GLN  HG2', ' F 104  TYR  HB3', -0.559, (-14.676, -13.633, -1.509)), (' H 131  PRO  HD3', ' H 217  LYS  HD3', -0.556, (58.016, -18.445, 8.424)), (' L  90  GLN HE22', ' L  93  SER  HB3', -0.555, (9.155, -32.633, 13.889)), (' H 124  THR HG22', ' H 155  PRO  HD3', -0.547, (42.763, -31.687, -0.847)), (' H  12  VAL HG22', ' H  16  ARG  HB2', -0.536, (31.696, -35.248, -6.119)), (' H  91  THR HG23', ' H 118  THR  HA ', -0.532, (31.924, -31.264, 3.694)), (' F  83  MET  HE2', ' F  86  LEU HD21', -0.531, (-38.187, -1.963, -19.297)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.529, (23.81, -37.118, 27.095)), (' L  75  ILE HD11', ' L  86  TYR  HE2', -0.528, (23.988, -34.047, 31.95)), (' H  52  SER  HB3', ' H  57  ASN  HB2', -0.524, (9.191, -48.201, 4.906)), (' H  35  HIS  HE1', ' H 106  TYR  HB3', -0.506, (12.843, -42.414, 13.313)), (' H  34  MET  HB3', ' H  79  LEU HD22', -0.504, (19.754, -47.733, 8.535)), (' H  39  GLN  HB2', ' H  45  LEU HD23', -0.494, (25.032, -34.17, 13.956)), (' L 114  PRO  HB3', ' L 140  PHE  HB3', -0.49, (41.389, -14.508, 28.44)), (' E 339  GLY  HA2', ' E 601  NAG  H82', -0.488, (-6.962, -46.122, -4.665)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.475, (-10.764, -50.569, 15.721)), (' L  29  ILE HG22', ' L  92  TYR  HB3', -0.472, (5.569, -32.853, 18.398)), (' E 449  TYR  HB2', ' F 100  HIS  CD2', -0.462, (-15.845, -21.002, -11.744)), (' H  57  ASN  HB3', ' H  59  TYR  HE2', -0.461, (8.465, -45.524, 4.431)), (' H  29  PHE  O  ', ' H  72  ARG  NH2', -0.46, (17.246, -53.682, 9.049)), (' F 101  TYR  CE2', ' F 103  SER  HB2', -0.457, (-16.063, -12.802, -7.569)), (' L 109  ARG  HD2', ' L 172  SER  O  ', -0.455, (38.892, -22.811, 33.132)), (' F  31  THR  HA ', ' F  98  GLN HE21', -0.455, (-23.871, -21.109, -12.616)), (' E 396  TYR  OH ', ' E 602   CL CL  ', -0.447, (-15.876, -42.619, 14.368)), (' E 357  ARG  NH2', ' E 602   CL CL  ', -0.446, (-17.239, -44.393, 13.879)), (' E 357  ARG  HG3', ' E 396  TYR  HE1', -0.446, (-15.082, -43.218, 10.504)), (' E 385  THR HG22', ' H  57  ASN  HB2', -0.446, (8.965, -47.311, 5.344)), (' H  83  MET  HB3', ' H  86  LEU HD21', -0.444, (25.762, -36.312, -1.273)), (' E 339  GLY  CA ', ' E 601  NAG  H82', -0.442, (-7.011, -46.817, -4.646)), (' L 147  VAL HG21', ' L 176  LEU HD22', -0.44, (39.482, -13.248, 20.309)), (' E 386  LYS  NZ ', ' H 101  GLY  HA2', -0.436, (10.01, -48.014, 16.518)), (' F  91  THR HG23', ' F 124  THR  HA ', -0.435, (-36.943, -0.305, -27.337)), (' H  12  VAL HG11', ' H  86  LEU HD13', -0.433, (29.605, -35.2, -2.53)), (' E 396  TYR  HB2', ' E 514  SER  OG ', -0.432, (-9.427, -39.277, 10.549)), (' E 366  SER  HA ', ' E 369  TYR  CD2', -0.429, (3.171, -49.504, 0.858)), (' E 429  PHE  HE1', ' E 514  SER  HB3', -0.428, (-6.422, -37.287, 11.415)), (' L  36  TYR  HE1', ' L  46  LEU HD13', -0.428, (17.597, -40.426, 21.997)), (' H  57  ASN  HB3', ' H  59  TYR  CE2', -0.419, (8.332, -45.449, 4.15)), (' H 208  HIS  CD2', ' H 210  PRO  HD2', -0.419, (46.775, -32.443, 4.684)), (' H 105  VAL HG12', ' H 106  TYR  H  ', -0.418, (9.071, -41.173, 15.339)), (' L  50  ALA  O  ', ' L  52  SER  N  ', -0.418, (10.094, -39.147, 28.407)), (' H 159  THR  OG1', ' H 207  ASN  HB3', -0.417, (51.877, -33.415, 10.139)), (' E 502  GLY  O  ', ' E 506  GLN  HG3', -0.416, (0.61, -22.604, -9.601)), (' L  49  TYR  O  ', ' L  53  SER  HB2', -0.409, (11.624, -42.348, 27.036)), (' H  32  TYR  CE1', ' H  98  LYS  HE3', -0.406, (15.69, -52.125, 17.126)), (' L 148  GLN  HB3', ' L 196  GLU  HB3', -0.403, (38.273, -3.841, 20.691)), (' H  35  HIS  ND1', ' H 108  PHE  HE1', -0.402, (16.102, -41.586, 12.936)), (' H   4  LEU HD23', ' H  24  ALA  HA ', -0.4, (25.384, -51.525, 12.344))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
