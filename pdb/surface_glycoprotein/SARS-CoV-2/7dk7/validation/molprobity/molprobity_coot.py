# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 573 ', 'THR', 0.02955288453285917, (178.207, 218.834, 209.37300000000005))]
data['omega'] = [('C', ' 527 ', 'PRO', None, (196.06800000000004, 167.568, 230.26800000000003)), ('C', ' 530 ', 'SER', None, (190.326, 161.196, 225.19000000000005)), ('a', ' 151 ', 'PRO', None, (152.90400000000005, 235.25200000000007, 306.759)), ('a', ' 153 ', 'PRO', None, (154.61700000000005, 236.58000000000004, 300.826)), ('a', ' 193 ', 'PRO', None, (159.56900000000005, 267.766, 302.51000000000005)), ('b', '   8 ', 'PRO', None, (186.13100000000009, 226.972, 295.03900000000004)), ('b', '  28 ', 'SER', None, (178.48500000000007, 208.684, 288.756)), ('b', '  81 ', 'PRO', None, (184.52100000000013, 236.30900000000005, 278.907)), ('b', '  99 ', 'PRO', None, (171.6630000000001, 210.26, 294.4610000000001)), ('b', ' 145 ', 'PRO', None, (183.75500000000014, 246.776, 299.442)), ('c', ' 151 ', 'PRO', None, (252.10100000000003, 229.995, 308.3970000000001)), ('c', ' 153 ', 'PRO', None, (250.33800000000002, 227.55800000000005, 302.87)), ('c', ' 193 ', 'PRO', None, (276.976, 209.419, 301.551)), ('d', '   8 ', 'PRO', None, (229.11700000000005, 206.36100000000005, 294.211)), ('d', '  28 ', 'SER', None, (217.04000000000008, 222.44600000000005, 287.426)), ('d', '  81 ', 'PRO', None, (239.7030000000001, 203.19300000000007, 279.51000000000005)), ('d', '  99 ', 'PRO', None, (222.74500000000006, 228.243, 293.0)), ('d', ' 145 ', 'PRO', None, (248.25900000000007, 197.22700000000006, 300.981)), ('f', '   8 ', 'PRO', None, (206.77100000000004, 186.07600000000002, 294.764)), ('f', '  28 ', 'SER', None, (219.35900000000007, 185.88400000000001, 278.8010000000001)), ('f', '  81 ', 'PRO', None, (192.37800000000004, 180.532, 286.1710000000001)), ('f', '  99 ', 'PRO', None, (226.66900000000007, 180.199, 283.9380000000001))]
data['rota'] = [('A', '  33 ', 'THR', 0.2775130750750581, (218.48100000000008, 246.279, 206.25400000000005)), ('A', '  62 ', 'VAL', 0.25636016256933575, (211.95500000000007, 252.264, 214.36200000000005)), ('A', ' 203 ', 'ILE', 0.11912376489070525, (224.8890000000001, 239.514, 223.341)), ('A', ' 208 ', 'THR', 0.12339041847175374, (233.67800000000005, 249.461, 213.19500000000002)), ('A', ' 210 ', 'ILE', 0.10414823245954977, (232.17800000000005, 255.188, 210.33900000000006)), ('A', ' 488 ', 'CYS', 0.05053274553354295, (168.39500000000007, 207.186, 281.5430000000001)), ('A', ' 576 ', 'VAL', 0.27729376892182245, (172.28800000000004, 222.71999999999994, 211.52000000000004)), ('A', ' 738 ', 'CYS', 0.20296506057380873, (219.053, 201.09199999999998, 203.50500000000005)), ('A', ' 760 ', 'CYS', 0.170019369999963, (214.86800000000005, 197.446, 204.31200000000007)), ('A', ' 973 ', 'ILE', 0.16739567425209775, (212.391, 212.579, 221.56000000000006)), ('B', '  33 ', 'THR', 0.28596667845763957, (232.409, 169.105, 206.285)), ('B', '  47 ', 'VAL', 0.09282965100124833, (214.21700000000007, 173.24699999999996, 200.89400000000006)), ('B', '  90 ', 'VAL', 0.15489417060009192, (233.49300000000002, 172.97, 220.747)), ('B', ' 208 ', 'THR', 0.10636424906925543, (228.548, 155.45599999999996, 212.648)), ('B', ' 387 ', 'LEU', 0.25367282559352333, (232.80400000000006, 213.31899999999996, 238.8640000000001)), ('B', ' 472 ', 'ILE', 0.17428367292103633, (222.11800000000014, 234.32200000000006, 273.43200000000013)), ('B', ' 488 ', 'CYS', 0.12965062779777772, (221.83400000000006, 232.069, 280.666)), ('B', ' 760 ', 'CYS', 0.16392638450717048, (191.378, 196.894, 204.51200000000006)), ('a', '  12 ', 'VAL', 0.2025733371642894, (150.66, 225.398, 306.635)), ('a', '  50 ', 'VAL', 0.056965048343450106, (162.564, 214.106, 289.7720000000001)), ('a', '  95 ', 'CYS', 0.012204796803416684, (159.49, 223.31000000000006, 289.048)), ('a', ' 105 ', 'ASP', 0.21544932256716987, (166.97500000000005, 223.879, 281.2310000000001)), ('a', ' 144 ', 'CYS', 0.0, (159.39600000000004, 252.00300000000001, 304.235)), ('a', ' 191 ', 'THR', 0.2207512215312448, (160.69200000000006, 264.656, 297.705)), ('c', '  95 ', 'CYS', 0.0, (239.95600000000005, 231.19400000000002, 288.9390000000001)), ('c', ' 144 ', 'CYS', 0.051298869840661905, (264.2699999999999, 216.27000000000007, 306.71)), ('C', '  84 ', 'LEU', 0.2977178464584558, (158.89599999999993, 186.915, 227.27500000000006)), ('C', ' 208 ', 'THR', 0.1912193496350435, (149.01699999999994, 204.927, 212.11100000000005)), ('C', ' 301 ', 'CYS', 0.2453162637232083, (174.62000000000006, 195.40299999999993, 201.82100000000005)), ('C', ' 312 ', 'ILE', 0.10791282273921567, (178.35, 188.23599999999993, 189.72400000000002)), ('C', ' 326 ', 'ILE', 0.06119577475019326, (190.78400000000002, 167.30899999999997, 214.471)), ('C', ' 490 ', 'PHE', 0.0882845952527624, (219.44000000000008, 180.02599999999995, 263.142)), ('C', ' 524 ', 'VAL', 0.012072337527888957, (204.92400000000006, 169.17899999999995, 227.57100000000005)), ('C', ' 533 ', 'LEU', 0.02563982890016855, (190.16500000000005, 160.23999999999995, 215.774)), ('C', ' 599 ', 'THR', 0.09515217717149083, (172.20200000000003, 187.22099999999998, 189.689)), ('C', ' 611 ', 'LEU', 0.26572237571079277, (178.56300000000005, 179.78799999999995, 193.977)), ('C', '1122 ', 'VAL', 0.008405561029938282, (205.897, 191.788, 131.471))]
data['cbeta'] = []
data['probe'] = [(' A 572  THR HG22', ' C 855  PHE  HE1', -0.68, (181.365, 219.606, 206.763)), (' B 607  GLN  OE1', ' B 674  TYR  HE1', -0.661, (240.266, 180.591, 185.981)), (' A 607  GLN  OE1', ' A 674  TYR  HE1', -0.624, (204.034, 247.643, 185.799)), (' A 189  LEU  HB2', ' A 210  ILE HG12', -0.614, (229.513, 253.398, 212.659)), (' B 322  PRO  HB3', ' B 539  VAL  HA ', -0.562, (237.905, 205.194, 212.914)), (' C 328  ARG  HG2', ' C 579  PRO  HD2', -0.558, (199.18, 163.212, 216.853)), (' c  12  VAL HG22', ' c  18  LEU HD13', -0.553, (244.532, 237.731, 303.78)), (' B 598  ILE  HB ', ' B 609  ALA  HB3', -0.541, (236.93, 188.845, 189.79)), (' C1076  THR  HB ', ' C1097  SER  HB3', -0.54, (187.508, 184.009, 136.441)), (' B 146  HIS  H  ', ' B 247  SER  HA ', -0.54, (245.053, 142.413, 231.688)), (' d  50  LEU HD21', ' d  53  TYR  HB3', -0.539, (233.367, 221.007, 279.402)), (' C 189  LEU HD22', ' C 210  ILE HD12', -0.537, (148.977, 198.454, 211.479)), (' A 756  TYR  O  ', ' B 965  GLN  NE2', -0.53, (209.538, 192.922, 207.896)), (' C 106  PHE  HB2', ' C 117  LEU  HB3', -0.527, (160.713, 198.888, 232.505)), (' C 909  ILE  O  ', ' C1108  ASN  ND2', -0.527, (192.252, 199.162, 150.009)), (' b  43  LYS  HB2', ' b  46  GLN  HB3', -0.526, (168.706, 235.648, 289.629)), (' B  83  VAL HG22', ' B 239  GLN HE21', -0.522, (242.81, 170.533, 231.719)), (' A 551  VAL  HB ', ' A 588  THR  HB ', -0.521, (178.887, 230.336, 205.002)), (' d 110  ILE  HB ', ' d 170  GLN HE22', -0.52, (246.616, 203.131, 291.869)), (' f  21  ILE  HB ', ' f  77  LEU  HB3', -0.516, (204.524, 183.058, 288.098)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.514, (230.036, 170.211, 232.633)), (' A 715  PRO  HA ', ' A1072  GLU  HA ', -0.511, (201.856, 228.595, 147.854)), (' B 738  CYS  SG ', ' B 764  ASN  ND2', -0.506, (190.561, 193.427, 202.606)), (' A 572  THR HG22', ' C 855  PHE  CE1', -0.506, (181.055, 219.284, 206.578)), (' A 703  ASN  ND2', ' C 787  GLN  OE1', -0.504, (194.984, 231.872, 159.006)), (' A 725  GLU  OE2', ' A1028  LYS  NZ ', -0.503, (209.572, 214.446, 169.81)), (' C 128  ILE  HB ', ' C 170  TYR  HB3', -0.502, (157.614, 208.982, 234.163)), (' B 442  ASP  O  ', ' B 448  ASN  ND2', -0.501, (245.475, 228.87, 264.818)), (' a  37  VAL HG12', ' a  47  TRP  HA ', -0.499, (166.982, 220.159, 294.167)), (' C 325  SER  HA ', ' C 539  VAL HG11', -0.498, (187.735, 170.783, 214.754)), (' A1090  PRO  O  ', ' C 913  GLN  NE2', -0.495, (193.594, 209.881, 139.528)), (' a  90  THR HG23', ' a 114  THR  HA ', -0.493, (158.149, 228.835, 305.349)), (' B 733  LYS  HE3', ' B 771  ALA  HB1', -0.489, (192.034, 187.74, 188.873)), (' A 572  THR  CG2', ' C 855  PHE  CE1', -0.489, (181.815, 218.973, 206.518)), (' A 277  LEU HD22', ' A 285  ILE HD13', -0.489, (222.442, 235.72, 207.912)), (' A 816  SER  H  ', ' A 819  GLU  HB2', -0.488, (229.033, 217.133, 169.399)), (' C  96  GLU  OE2', ' C 190  ARG  NH2', -0.488, (147.006, 200.488, 223.439)), (' B 420  ASP  OD1', ' B 424  LYS  NZ ', -0.485, (221.426, 218.48, 260.586)), (' A 328  ARG  NH2', ' A 580  GLN  OE1', -0.484, (167.952, 232.388, 220.207)), (' b 167  TRP  HA ', ' b 179  MET  HG2', -0.484, (173.42, 243.97, 303.431)), (' C 551  VAL  HB ', ' C 588  THR  HB ', -0.484, (194.15, 169.0, 203.941)), (' C 442  ASP  O  ', ' C 448  ASN  ND2', -0.482, (208.937, 167.107, 258.823)), (' A  97  LYS  HB3', ' A 186  PHE  HA ', -0.481, (231.085, 261.077, 215.926)), (' C 596  SER  OG ', ' C 613  GLN  NE2', -0.48, (183.42, 184.215, 193.336)), (' B  96  GLU  OE2', ' B 190  ARG  NH2', -0.48, (234.302, 156.366, 222.98)), (' C1104  VAL HG23', ' C1115  ILE HG12', -0.479, (193.296, 193.089, 134.239)), (' C 489  TYR  HB3', ' f  32  TYR  HB3', -0.477, (218.055, 180.696, 267.14)), (' C 442  ASP  OD1', ' C 509  ARG  NH2', -0.475, (207.781, 165.33, 252.716)), (' B1092  GLU  O  ', ' B1106  GLN  NE2', -0.475, (211.868, 198.974, 141.006)), (' A 980  ILE HG23', ' A 984  LEU HD12', -0.47, (215.586, 207.273, 223.264)), (' A 731  MET  HE1', ' A1011  GLN HE22', -0.469, (214.911, 209.731, 189.458)), (' C 333  THR  OG1', ' C 334  ASN  N  ', -0.467, (200.54, 154.821, 230.675)), (' C  21  ARG  HG2', ' C  79  PHE  HB3', -0.465, (142.448, 184.944, 230.023)), (' B 551  VAL  HB ', ' B 588  THR  HB ', -0.464, (237.267, 212.205, 204.45)), (' B 437  ASN  ND2', ' B 506  GLN  OE1', -0.464, (246.638, 216.677, 263.614)), (' C 742  ILE  O  ', ' C1000  ARG  NH1', -0.463, (193.324, 216.088, 211.546)), (' C 591  SER  HB3', ' C 615  VAL HG12', -0.463, (187.477, 174.35, 199.325)), (' C 322  PRO  HA ', ' C 539  VAL HG22', -0.463, (186.397, 172.949, 212.161)), (' A 709  ASN  ND2', ' C 796  ASP  OD2', -0.463, (179.977, 223.804, 144.0)), (' A1144  GLU  HG3', ' B1141  LEU HD13', -0.462, (204.306, 208.072, 119.526)), (' C 439  ASN  O  ', ' C 443  SER  OG ', -0.461, (202.905, 165.314, 259.487)), (' B 152  TRP  HD1', ' B 179  LEU  HB2', -0.46, (235.798, 144.418, 229.04)), (' c  24  VAL HG11', ' c  29  LEU HD13', -0.46, (239.792, 237.353, 282.343)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.46, (159.889, 228.592, 264.787)), (' B  92  PHE  HB3', ' B 192  PHE  HB2', -0.46, (232.206, 165.432, 220.661)), (' A 784  GLN  HB2', ' A 877  LEU HD21', -0.459, (221.107, 203.409, 165.315)), (' d  37  LEU HD22', ' d  94  GLN  HA ', -0.458, (224.249, 220.368, 286.979)), (' B 193  VAL  HB ', ' B 204  TYR  HB2', -0.458, (226.408, 168.22, 218.662)), (' C 454  ARG  HA ', ' C 492  LEU HD22', -0.456, (215.583, 184.478, 256.403)), (' A 142  GLY  HA3', ' A 156  GLU  HB2', -0.455, (230.001, 262.439, 238.329)), (' C 273  ARG  HD3', ' C 292  ALA  HB3', -0.454, (170.833, 189.148, 210.174)), (' b 214  ASN  HB2', ' b 217  GLU  HG3', -0.454, (165.694, 266.995, 314.738)), (' C 417  LYS  O  ', ' C 422  ASN  ND2', -0.454, (210.624, 185.479, 252.15)), (' B 951  VAL  O  ', ' B 955  ASN  ND2', -0.453, (204.904, 187.475, 188.153)), (' A 755  GLN  O  ', ' B 968  SER  OG ', -0.453, (209.835, 191.77, 212.09)), (' b 110  ILE  HB ', ' b 170  GLN HE22', -0.453, (180.772, 243.131, 290.546)), (' C 919  ASN  HB3', ' C 922  LEU  HB3', -0.452, (177.961, 205.884, 145.65)), (' B 277  LEU HD22', ' B 285  ILE HD13', -0.452, (221.546, 170.676, 208.596)), (' A  99  ASN  ND2', ' A 178  ASP  O  ', -0.45, (236.553, 257.032, 223.905)), (' d  27  GLU  HA ', ' d  28  SER  HA ', -0.449, (214.658, 221.699, 287.527)), (' a 136  THR  OG1', ' a 139  MET  O  ', -0.447, (171.901, 261.921, 300.851)), (' C  37  TYR  H  ', ' C  55  PHE  HE1', -0.447, (165.422, 201.196, 212.917)), (' C 553  THR  HG1', ' C 588  THR  HG1', -0.446, (195.961, 166.301, 203.773)), (' A 193  VAL  HB ', ' A 204  TYR  HB2', -0.446, (223.269, 241.002, 218.564)), (' a  24  VAL HG11', ' a  29  LEU HD13', -0.445, (154.346, 219.713, 282.284)), (' B 106  PHE  HB3', ' B 235  ILE HD13', -0.445, (230.859, 172.472, 231.062)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.444, (233.734, 179.99, 200.314)), (' C1090  PRO  HA ', ' C1120  THR  HA ', -0.444, (200.161, 195.103, 135.111)), (' a  12  VAL  HB ', ' a 115  VAL HG22', -0.444, (153.514, 224.297, 305.926)), (' a 173  VAL HG11', ' b 164  LEU HD11', -0.442, (167.41, 239.668, 309.86)), (' A 781  VAL HG22', ' A1026  ALA  HB2', -0.442, (215.158, 203.983, 172.833)), (' b 152  TRP  NE1', ' b 181  SER  OG ', -0.439, (171.654, 249.36, 312.682)), (' A 733  LYS  HE3', ' A 771  ALA  HB1', -0.439, (222.33, 201.479, 188.076)), (' B 669  GLY  HA2', ' B 697  MET  HE2', -0.439, (232.096, 199.686, 179.359)), (' C 277  LEU HD22', ' C 285  ILE HD13', -0.438, (166.508, 203.678, 209.269)), (' A  29  THR  OG1', ' A  30  ASN  N  ', -0.436, (213.127, 255.451, 209.163)), (' B  84  LEU  HG ', ' B 267  VAL HG11', -0.435, (240.251, 170.967, 222.368)), (' b  41  GLN  HB2', ' b  51  LEU HD11', -0.435, (175.635, 230.328, 285.908)), (' f  27  GLU  HA ', ' f  28  SER  HA ', -0.434, (220.203, 188.413, 278.848)), (' f  65  ARG HH22', ' f  85  ASP  HB3', -0.433, (197.376, 171.987, 288.619)), (' A  24  LEU HD22', ' A  78  ARG  HD2', -0.433, (215.223, 265.968, 219.746)), (' B 216  LEU HD12', ' B 217  PRO  HD2', -0.433, (237.934, 162.716, 211.33)), (' B 742  ILE  O  ', ' B1000  ARG  NH1', -0.433, (198.272, 189.061, 211.756)), (' c  82  MET  HB3', ' c  85  LEU HD21', -0.431, (237.121, 235.97, 302.758)), (' B 195  LYS  HE2', ' B 204  TYR  HE1', -0.43, (223.512, 171.911, 219.923)), (' A 106  PHE  HB2', ' A 117  LEU  HB3', -0.43, (220.128, 243.224, 232.863)), (' c  38  ARG  NH2', ' c  46  GLU  OE1', -0.43, (232.396, 226.825, 301.643)), (' A 919  ASN  HB3', ' A 922  LEU  HB2', -0.429, (216.319, 224.841, 145.426)), (' a 105  ASP  N  ', ' a 105  ASP  OD1', -0.429, (167.429, 221.874, 281.022)), (' C 529  LYS  HA ', ' C 530  SER  HA ', -0.429, (192.403, 160.97, 227.006)), (' C  29  THR  OG1', ' C  30  ASN  N  ', -0.428, (154.136, 185.858, 210.831)), (' B 483  VAL HG13', ' c  53  ARG  HB2', -0.427, (227.469, 240.655, 280.025)), (' C 108  THR  O  ', ' C 236  THR  OG1', -0.427, (164.507, 189.567, 234.319)), (' A 656  VAL HG12', ' A 658  ASN  H  ', -0.426, (190.3, 245.277, 177.757)), (' C 553  THR  OG1', ' C 588  THR  OG1', -0.426, (196.302, 165.824, 203.477)), (' A 106  PHE  O  ', ' A 116  SER  OG ', -0.425, (218.443, 245.531, 235.742)), (' C  67  ALA  O  ', ' C 263  ALA  N  ', -0.425, (141.165, 192.457, 222.757)), (' C 393  THR  HA ', ' C 522  ALA  HA ', -0.424, (207.218, 173.432, 223.973)), (' A1141  LEU HD13', ' C1144  GLU  HG3', -0.423, (196.408, 204.199, 120.161)), (' B 869  MET  HB3', ' C 699  LEU HD11', -0.423, (188.467, 179.835, 174.089)), (' d 202  HIS  HB3', ' d 205  SER  HB3', -0.423, (253.655, 193.946, 306.165)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.422, (207.421, 242.706, 201.018)), (' a  23  THR  HA ', ' a  77  GLN  HG2', -0.422, (149.07, 222.851, 286.6)), (' c 136  THR  OG1', ' c 137  ASN  N  ', -0.422, (270.079, 199.281, 302.689)), (' B  40  ASP  N  ', ' B  40  ASP  OD1', -0.421, (216.956, 173.57, 214.048)), (' a  99  GLY  N  ', ' a 103  ALA  O  ', -0.421, (166.262, 218.783, 281.267)), (' b  37  LEU HD22', ' b  94  GLN  HA ', -0.42, (176.883, 215.249, 287.743)), (' C 823  PHE  HA ', ' C1057  PRO  HG3', -0.42, (178.893, 216.897, 179.178)), (' C 896  ILE  HB ', ' C 901  GLN HE21', -0.42, (191.028, 220.486, 150.831)), (' A1129  VAL HG13', ' C 917  TYR  HB3', -0.42, (182.962, 212.636, 139.411)), (' B 965  GLN  HG3', ' B 970  PHE  HZ ', -0.419, (205.981, 191.301, 208.358)), (' c  23  THR  HA ', ' c  77  GLN  HG2', -0.419, (245.44, 239.46, 286.584)), (' A1084  ASP  N  ', ' A1084  ASP  OD1', -0.419, (187.561, 211.931, 125.234)), (' b  80  ASP  HA ', ' b  81  PRO  HA ', -0.418, (185.924, 235.759, 280.816)), (' C  56  LEU HD12', ' C  57  PRO  HD2', -0.417, (163.277, 190.944, 214.952)), (' C 905  ARG  O  ', ' C1036  GLN  NE2', -0.416, (192.388, 206.935, 152.97)), (' C 106  PHE  O  ', ' C 117  LEU  N  ', -0.416, (160.678, 198.11, 235.541)), (' B 854  LYS  HG3', ' C 572  THR HG21', -0.415, (201.618, 177.347, 201.102)), (' B  68  ILE HG22', ' B 262  ALA  HA ', -0.414, (245.81, 153.704, 220.453)), (' B 906  PHE  HE2', ' B 916  LEU HD13', -0.414, (207.281, 185.765, 147.803)), (' C1084  ASP  N  ', ' C1084  ASP  OD1', -0.414, (202.528, 186.982, 125.2)), (' B 111  ASP  N  ', ' B 111  ASP  OD1', -0.414, (237.521, 173.589, 240.229)), (' c 116  SER  HB3', ' c 150  PHE  HZ ', -0.412, (246.412, 230.523, 311.865)), (' A 193  VAL HG23', ' A 223  LEU HD12', -0.412, (223.352, 243.05, 216.397)), (' f  28  SER  OG ', ' f  29  VAL  N  ', -0.411, (219.793, 187.286, 275.534)), (' A 969  ASN  ND2', ' C 755  GLN  OE1', -0.41, (211.261, 216.658, 216.753)), (' C 231  ILE  HB ', ' C 233  ILE HG12', -0.41, (166.02, 201.382, 235.011)), (' A 819  GLU  HA ', ' A 822  LEU HD12', -0.409, (225.167, 217.972, 171.378)), (' d  43  LYS  HB2', ' d  46  GLN  HB3', -0.409, (246.017, 217.302, 290.474)), (' a 123  PRO  HB3', ' a 149  TYR  HB3', -0.409, (154.265, 242.409, 307.304)), (' B 364  ASP  OD1', ' B 388  ASN  ND2', -0.407, (239.848, 214.505, 237.3)), (' C 215  ASP  N  ', ' C 215  ASP  OD1', -0.406, (147.674, 188.082, 210.58)), (' B 108  THR  OG1', ' B 234  ASN  O  ', -0.406, (232.197, 178.383, 235.237)), (' A 442  ASP  OD1', ' A 509  ARG  NH2', -0.406, (161.193, 229.547, 258.006)), (' A 195  LYS  HE3', ' A 202  LYS  HD2', -0.405, (220.169, 234.683, 221.486)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.405, (205.383, 240.8, 191.73)), (' C 980  ILE HG23', ' C 984  LEU HD12', -0.404, (194.235, 212.676, 223.725)), (' B 121  ASN HD21', ' B 175  PHE  HZ ', -0.404, (228.404, 154.544, 228.655)), (' B1144  GLU  HG3', ' C1141  LEU HD23', -0.404, (203.451, 200.684, 118.875)), (' A  91  TYR  HB2', ' A 270  LEU HD21', -0.404, (217.284, 244.133, 216.652)), (' c  41  PRO  HB3', ' c  91  ALA  HB2', -0.404, (237.768, 225.403, 302.231)), (' C 115  GLN  HB2', ' C 233  ILE HG21', -0.404, (166.314, 199.227, 238.947)), (' B 326  ILE HG22', ' B 534  VAL  H  ', -0.403, (243.12, 211.551, 214.253)), (' A 108  THR  OG1', ' A 234  ASN  O  ', -0.402, (213.192, 240.566, 235.367)), (' A 106  PHE  HB3', ' A 235  ILE HD13', -0.402, (218.336, 242.749, 231.25)), (' A 708  SER  HG ', ' A 711  SER  HG ', -0.402, (187.464, 228.915, 145.732)), (' B 453  TYR  HH ', ' d  53  TYR  HH ', -0.402, (231.371, 221.921, 272.649)), (' C 985  ASP  O  ', ' C 989  ALA  N  ', -0.401, (198.349, 214.259, 226.013)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.4, (222.323, 230.285, 213.452)), (' C 142  GLY  HA2', ' C 244  LEU  HB2', -0.4, (138.693, 195.173, 233.993))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
