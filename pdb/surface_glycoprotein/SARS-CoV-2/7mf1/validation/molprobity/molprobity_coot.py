# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 149 ', 'PRO', None, (103.62100000000004, 62.561, 134.242)), ('H', ' 151 ', 'PRO', None, (100.888, 65.92800000000003, 138.483)), ('L', ' 141 ', 'PRO', None, (102.469, 95.786, 139.36000000000007))]
data['rota'] = [('H', ' 183 ', 'VAL', 0.011988517105431156, (112.367, 78.88, 145.92)), ('H', ' 183 ', 'VAL', 0.00945159699767828, (112.406, 78.807, 145.97))]
data['cbeta'] = []
data['probe'] = [(' H 190  SER  HB3', ' H 194  GLN  HG3', -0.685, (119.048, 79.499, 159.039)), (' L  83  GLU  HG3', ' L 105  THR  HA ', -0.68, (92.42, 89.911, 140.713)), (' A 484  GLU  HG2', ' H  97  ARG  HB2', -0.666, (69.509, 71.023, 152.468)), (' A 382  VAL HG12', ' A 383  SER  H  ', -0.646, (56.013, 33.559, 180.011)), (' A 395  VAL HG23', ' A 524  VAL HG21', -0.634, (56.647, 30.849, 166.626)), (' H 100H GLY  O  ', ' L  36  TYR  OH ', -0.593, (76.85, 75.265, 144.531)), (' H  96  GLY  HA2', ' H 101  ASP  HB2', -0.579, (76.894, 71.347, 151.548)), (' H 183 BVAL HG11', ' L 135  LEU HD13', -0.536, (114.249, 80.715, 142.675)), (' A 335  LEU  H  ', ' A 335  LEU HD12', -0.522, (66.57, 22.27, 163.309)), (' H  11  VAL  HB ', ' H 149  PRO  HG3', -0.515, (100.23, 61.055, 133.79)), (' L 182  PRO  O  ', ' L 186  LYS  HD2', -0.514, (130.421, 73.893, 129.515)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.494, (62.446, 42.523, 162.746)), (' L 166  LYS  HE2', ' L 170  ASN  HA ', -0.489, (98.403, 88.053, 146.15)), (' A 364  ASP  O  ', ' A 367  VAL HG22', -0.488, (66.967, 28.304, 171.916)), (' A 395  VAL HG22', ' A 515  PHE  HD1', -0.487, (56.633, 33.358, 168.833)), (' A 359  SER  OG ', ' A 394  ASN  OD1', -0.485, (54.802, 31.768, 160.252)), (' L 149  LYS  HD3', ' L 154  PRO  HA ', -0.482, (120.451, 89.053, 124.447)), (' A 338  PHE  HE1', ' A 358  ILE HD13', -0.479, (62.237, 33.569, 165.439)), (' H 117  LYS  HB2', ' H 117  LYS  HE3', -0.476, (112.02, 59.765, 133.297)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.476, (56.563, 36.743, 172.623)), (' A 335  LEU  HA ', ' A 362  VAL HG12', -0.465, (63.92, 23.416, 165.121)), (' H   2  VAL  HA ', ' H  25  SER  O  ', -0.453, (83.64, 64.085, 157.308)), (' L  15  PRO  HD3', ' L 106A LEU  O  ', -0.453, (93.411, 98.386, 143.544)), (' A 392  PHE  CD1', ' A 515  PHE  HB3', -0.452, (53.608, 32.888, 170.78)), (' A 425  LEU HD21', ' A 512  VAL HG11', -0.45, (58.926, 44.447, 169.98)), (' A 412  PRO  HB3', ' A 426  PRO  O  ', -0.449, (53.304, 46.941, 174.803)), (' L 144  VAL HG12', ' L 197  HIS  HB2', -0.443, (108.63, 93.512, 135.93)), (' L  91  TYR  CZ ', ' L  95  SER  HA ', -0.437, (67.034, 69.974, 137.769)), (' H   9  ALA  HB2', ' H 340  HOH  O  ', -0.435, (96.514, 64.357, 141.302)), (' H  36  TRP  CE2', ' H  80  MET  HB2', -0.431, (83.385, 60.488, 140.607)), (' H  12  LYS  NZ ', ' H  17  SER  O  ', -0.429, (92.09, 53.175, 133.978)), (' H  18  VAL  HB ', ' H  82C LEU HD11', -0.425, (90.783, 57.166, 132.928)), (' L  39  HIS  HB2', ' L  42  LYS  HD3', -0.425, (92.498, 79.11, 147.008)), (' L 166  LYS  NZ ', ' L 302  HOH  O  ', -0.423, (94.447, 87.221, 146.314)), (' H  84  SER  HA ', ' H 111  VAL  HB ', -0.42, (93.445, 62.766, 127.267)), (' A 387  LEU  HA ', ' A 387  LEU HD23', -0.419, (56.442, 29.601, 175.712)), (' H 168  PHE  CE1', ' L 135  LEU HD22', -0.407, (111.47, 80.85, 140.795)), (' A 431  GLY  HA2', ' A 515  PHE  CE2', -0.401, (57.086, 36.595, 173.1))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
