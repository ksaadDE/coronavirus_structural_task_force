# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 146 ', 'PRO', 0.0030166862453028876, (142.77200000000005, 234.44600000000005, 293.9999999999999)), ('E', ' 372 ', 'ALA', 0.07161569085286144, (161.44, 212.502, 243.80899999999997)), ('E', ' 501 ', 'TYR', 0.0002861090511329648, (156.62199999999996, 211.01300000000006, 267.714))]
data['omega'] = [('A', ' 146 ', 'PRO', None, (142.50900000000004, 233.02700000000002, 293.83199999999994))]
data['rota'] = [('E', ' 379 ', 'CYS', 0.09116593578621525, (174.37200000000007, 204.00199999999998, 246.16699999999997)), ('E', ' 432 ', 'CYS', 0.018198438756176164, (170.85800000000003, 201.817, 247.04599999999996)), ('E', ' 483 ', 'VAL', 0.17868107655913487, (158.944, 180.385, 279.324)), ('A', ' 129 ', 'THR', 0.2923652411896142, (141.94, 223.144, 299.8209999999999))]
data['cbeta'] = [('E', ' 372 ', 'ALA', ' ', 0.26080787579771175, (162.362, 213.66999999999996, 244.17599999999996))]
data['probe'] = [(' E 371  LEU  C  ', ' E 373  PRO  HD3', -0.639, (159.433, 211.897, 241.741)), (' A 445  THR HG23', ' A 446  ILE HG12', -0.635, (166.48, 236.348, 290.784)), (' A 451  PRO  HB2', ' A 485  VAL HG12', -0.608, (167.524, 232.608, 304.75)), (' E 433  VAL HG12', ' E 512  VAL HG12', -0.6, (168.606, 199.303, 251.183)), (' A  37  GLU  HA ', ' A  37  GLU  OE1', -0.576, (159.917, 205.258, 276.147)), (' A 161  ARG HH22', ' A 268  GLY  H  ', -0.568, (154.672, 240.231, 302.148)), (' E 422  ASN HD21', ' E 454  ARG  H  ', -0.564, (164.131, 192.867, 264.468)), (' A 177  ARG  NH1', ' A 495  GLU  O  ', -0.562, (154.519, 221.702, 317.345)), (' A  85  LEU HD22', ' A  94  LYS  HG2', -0.559, (175.845, 198.833, 289.315)), (' A 240  LEU HD11', ' A 443  ALA  HB1', -0.553, (169.224, 241.07, 296.262)), (' A  19  SER  N  ', ' A  23  GLU  OE2', -0.546, (178.537, 186.568, 278.989)), (' A 348  ALA  HB2', ' A 375  GLU  HG3', -0.541, (159.14, 223.865, 279.142)), (' A 306  ARG  HA ', ' A 309  LYS  HB2', -0.54, (156.899, 233.969, 266.81)), (' A 172  VAL  O  ', ' A 175  GLN  NE2', -0.529, (147.012, 221.728, 307.814)), (' A  33  ASN  N  ', ' A  33  ASN HD22', -0.521, (165.965, 199.741, 278.553)), (' A  34  HIS  CE1', ' E 493  ARG  HB3', -0.519, (160.108, 196.084, 272.148)), (' E 370  ASN  C  ', ' E 372  ALA  H  ', -0.515, (162.092, 211.935, 241.409)), (' A 331  SER  OG ', ' A 332  MET  N  ', -0.513, (151.818, 223.993, 272.753)), (' A 326  GLY  O  ', ' A 330  ASN  ND2', -0.512, (154.108, 218.252, 267.565)), (' A  67  ASP  HA ', ' A  70  SER  HB2', -0.509, (151.304, 202.653, 288.531)), (' A 245  ARG  NH2', ' A 260  GLY  O  ', -0.501, (167.53, 244.667, 311.81)), (' A 367  ASP  N  ', ' A 367  ASP  OD1', -0.499, (155.924, 239.126, 281.734)), (' A 529  LEU HD11', ' A 554  LEU HD13', -0.496, (175.636, 227.684, 278.376)), (' A 300  GLN  OE1', ' A 302  TRP  NE1', -0.492, (157.241, 242.66, 267.223)), (' A 142  LEU HD11', ' A 163  TRP  HH2', -0.491, (140.477, 236.671, 304.336)), (' A 524  GLN  HG2', ' A 574  VAL HG11', -0.489, (180.436, 227.494, 286.864)), (' E 448  ASN  HB3', ' E 497  PHE  HB2', -0.482, (152.389, 201.916, 264.624)), (' A 602  SER  OG ', ' A 603  PHE  N  ', -0.478, (171.613, 250.084, 309.028)), (' A 306  ARG  NH2', ' A 310  GLU  OE2', -0.477, (160.689, 238.558, 265.359)), (' A 398  GLU  HG2', ' A 514  ARG  HB3', -0.475, (166.55, 219.519, 293.236)), (' E 370  ASN  C  ', ' E 372  ALA  N  ', -0.474, (161.837, 212.359, 241.428)), (' A 323  MET  HE1', ' A 379  ILE HG21', -0.472, (161.584, 221.794, 272.609)), (' A 263  PRO  HD2', ' A 266  LEU HD11', -0.472, (159.263, 243.291, 308.496)), (' A 450  LEU HD11', ' A 519  THR HG21', -0.461, (171.842, 232.594, 295.066)), (' A 389  PRO  HG2', ' A 392  LEU HD12', -0.455, (172.258, 206.218, 280.204)), (' E 398  ASP  HB2', ' E 512  VAL HG22', -0.455, (166.525, 194.709, 250.202)), (' E 396  TYR  HB2', ' E 514  SER  HB3', -0.45, (169.193, 192.236, 245.499)), (' A 446  ILE HG21', ' A 523  PHE  HE2', -0.449, (170.941, 233.836, 290.93)), (' A 447  VAL  HA ', ' A 450  LEU HD12', -0.448, (170.616, 234.845, 296.459)), (' E 502  GLY  C  ', ' E 504  GLY  N  ', -0.446, (161.647, 211.803, 264.909)), (' A 187  LYS  HA ', ' A 187  LYS  HD2', -0.446, (159.011, 207.497, 304.624)), (' A 293  VAL HG23', ' A 297  MET  HE2', -0.444, (157.869, 242.297, 275.986)), (' A 524  GLN  HG3', ' A 583  PRO  HG3', -0.444, (180.623, 229.634, 288.854)), (' A 131  LYS  HA ', ' A 131  LYS  HD2', -0.443, (138.589, 227.866, 302.902)), (' A 141  CYS  HB3', ' A 142  LEU  H  ', -0.443, (137.006, 231.586, 303.91)), (' A  81  GLN  HA ', ' A 101  GLN HE21', -0.437, (168.996, 194.375, 292.715)), (' A 458  LYS  HG2', ' A 462  MET  HE2', -0.435, (170.093, 222.718, 310.215)), (' A 120  LEU HD22', ' A 123  MET  HE3', -0.433, (152.429, 211.807, 302.977)), (' A 131  LYS  HZ1', ' A 141  CYS  HB2', -0.432, (135.226, 231.035, 303.085)), (' E 364  ASP  O  ', ' E 367  VAL HG22', -0.428, (161.276, 204.353, 237.45)), (' E 358  ILE  HB ', ' E 395  VAL HG13', -0.427, (163.969, 193.42, 240.359)), (' E 366  SER  O  ', ' E 367  VAL  C  ', -0.426, (162.431, 207.88, 238.767)), (' A 142  LEU HD11', ' A 163  TRP  CH2', -0.424, (140.772, 236.645, 304.892)), (' A 285  PHE  O  ', ' A 437  ASN  ND2', -0.423, (164.367, 252.811, 289.561)), (' E 467  ASP  N  ', ' E 467  ASP  OD1', -0.421, (166.544, 186.465, 260.564)), (' A  49  ASN  HB3', ' A  58  ASN HD21', -0.421, (142.748, 213.76, 277.292)), (' E 378  LYS  HB3', ' E 378  LYS  HE2', -0.417, (174.6, 206.818, 249.967)), (' A 478  TRP  HA ', ' A 481  LYS  HB2', -0.414, (162.3, 230.947, 312.885)), (' A 611  SER  HB3', ' A 614  ALA  HB2', -0.412, (159.793, 240.96, 322.526)), (' A  73  LEU  HA ', ' A  73  LEU HD23', -0.41, (159.66, 199.724, 286.467)), (' A  41  TYR  OH ', ' E 500  THR  OG1', -0.409, (153.311, 211.625, 270.675)), (' E 391  CYS  HB3', ' E 525  CYS  HB3', -0.408, (170.07, 197.749, 232.604)), (' A 261  CYS  HB2', ' A 488  VAL HG23', -0.406, (163.957, 238.963, 313.605)), (' A 201  ASP  OD1', ' A 204  ARG  NH2', -0.405, (172.363, 212.844, 304.798)), (' A  38  ASP  OD2', ' E 449  TYR  CE1', -0.405, (153.901, 199.699, 272.573)), (' A 595  LEU  O  ', ' A 599  ASN  ND2', -0.405, (174.022, 248.869, 301.889)), (' A 332  MET  HB3', ' A 359  LEU HD12', -0.402, (149.168, 223.359, 276.153)), (' A 471  ASP  N  ', ' A 471  ASP  OD1', -0.402, (160.168, 217.936, 322.187)), (' A 169  ARG HH21', ' A 271  TRP  HD1', -0.401, (155.904, 230.385, 306.018)), (' E 364  ASP  C  ', ' E 366  SER  N  ', -0.401, (164.2, 204.559, 236.649)), (' A 452  PHE  HZ ', ' A 487  VAL HG21', -0.4, (161.821, 235.749, 306.168))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
