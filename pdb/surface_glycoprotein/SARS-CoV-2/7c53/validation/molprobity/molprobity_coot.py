# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 913 ', 'GLN', 0.17877836422341076, (-68.349, -27.5, -43.687)), ('C', ' 968 ', 'SER', 0.17877036826764464, (-0.014, -10.079, -2.874)), ('C', ' 969 ', 'ASN', 0.1433254425430682, (0.85, -10.831, 0.716)), ('E', ' 968 ', 'SER', 0.28674781045960424, (-10.313, -66.188, -21.636)), ('F', '1002 ', 'LEU', 0.061615494073558104, (-21.98, -54.81600000000002, -9.715)), ('F', '1003 ', 'ASP', 0.15663495133335753, (-25.48, -53.435, -9.157))]
data['cbeta'] = []
data['probe'] = [(' E1004  GLN  HG3', ' F 965  GLN HE22', -0.76, (-24.738, -62.145, -21.965)), (' A 912  THR  HA ', ' A 915  VAL HG22', -0.687, (-67.961, -22.636, -43.246)), (' F1002  LEU  HA ', ' F1004  GLN HE22', -0.64, (-20.867, -53.71, -9.752)), (' D 950  ASP  O  ', ' D 954  GLN  HG3', -0.626, (-21.996, -38.125, -19.544)), (' A 951  VAL HG13', ' C1008  THR HG23', -0.6, (-18.41, -20.507, -13.868)), (' B1033  LEU  O  ', ' B1034  LYS  NZ ', -0.595, (-66.043, -33.779, -22.702)), (' E1004  GLN  HG2', ' E1005  ILE HG12', -0.584, (-22.4, -60.485, -24.214)), (' E 969  ASN  O  ', ' E 970  PHE  HD1', -0.564, (-13.121, -67.719, -16.221)), (' F 957  GLN  O  ', ' F 961  THR HG23', -0.53, (-26.013, -53.991, -23.315)), (' E 954  GLN  O  ', ' E 957  GLN  HG3', -0.529, (-10.395, -48.447, -27.002)), (' A 933  LYS  HE2', ' C1025  LYS  HB3', -0.527, (-42.74, -17.745, -32.906)), (' B1013  GLU  O  ', ' B1017  LYS  HG2', -0.497, (-41.604, -17.49, -5.648)), (' E 969  ASN  C  ', ' E 970  PHE  CD1', -0.493, (-12.851, -67.229, -16.996)), (' E1034  LYS  HE2', ' F 915  VAL HG22', -0.492, (-17.823, -1.771, -63.014)), (' D 912  THR HG22', ' D 915  VAL  H  ', -0.489, (-35.078, 1.066, -60.289)), (' C1024  LYS  O  ', ' C1027  GLU  HB2', -0.485, (-45.083, -12.66, -30.748)), (' D 956  ALA  O  ', ' D1007  VAL HG11', -0.484, (-14.607, -45.232, -18.304)), (' E1004  GLN  HG3', ' F 965  GLN  NE2', -0.474, (-24.255, -61.558, -21.733)), (' B 912  THR HG23', ' B 915  VAL  H  ', -0.474, (-66.772, -37.444, -41.251)), (' E1034  LYS  HB3', ' E1034  LYS  HE3', -0.468, (-15.751, -1.98, -60.641)), (' C 968  SER  OG ', ' C 969  ASN  OD1', -0.465, (-1.102, -8.031, -0.994)), (' A1025  LYS  HB3', ' B 933  LYS  HE2', -0.465, (-45.144, -35.844, -23.864)), (' D 923  ILE HG12', ' F1031  ILE HD13', -0.459, (-28.996, -10.699, -52.16)), (' F1004  GLN HE21', ' F1005  ILE HG13', -0.455, (-21.091, -51.052, -10.63)), (' E 949  GLN  HA ', ' E1010  LEU HD23', -0.454, (-15.949, -41.574, -33.118)), (' B 912  THR HG22', ' B 915  VAL  HB ', -0.453, (-65.022, -36.923, -42.013)), (' C 912  THR HG22', ' C 915  VAL  H  ', -0.452, (-73.84, -28.412, -33.962)), (' D1003  ASP  HB3', ' D1004  GLN  H  ', -0.452, (-4.331, -55.728, -18.21)), (' D1004  GLN  HA ', ' D1004  GLN  OE1', -0.451, (-3.749, -51.534, -16.146)), (' E1013  GLU  HA ', ' E1016  MET  HE3', -0.45, (-13.109, -37.901, -40.138)), (' E 969  ASN  O  ', ' E 970  PHE  CD1', -0.435, (-13.008, -67.488, -16.211)), (' C1020  GLU  O  ', ' C1024  LYS  HD2', -0.43, (-39.703, -12.51, -27.262)), (' E 970  PHE  CD1', ' E 970  PHE  N  ', -0.425, (-13.478, -67.201, -17.481)), (' C1034  LYS  O  ', ' C1035  GLU  HB2', -0.406, (-66.352, -18.229, -38.375)), (' E1014  TYR  O  ', ' E1018  LYS  HG2', -0.405, (-17.169, -35.961, -45.602)), (' B1034  LYS  HA ', ' B1034  LYS  HD3', -0.405, (-68.498, -33.976, -23.575)), (' E1014  TYR  CZ ', ' E1018  LYS  HD3', -0.404, (-19.156, -36.195, -48.368)), (' B1018  LYS  HB3', ' B1018  LYS  HE3', -0.402, (-45.504, -15.985, -12.756))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
