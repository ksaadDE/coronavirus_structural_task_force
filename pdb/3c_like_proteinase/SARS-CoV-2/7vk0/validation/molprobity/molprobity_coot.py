# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   4 ', 'ARG', 0.22166591345738532, (6.904, 4.81, -18.046)), ('A', '   5 ', 'LYS', 0.11216948957396176, (3.411999999999999, 5.426, -19.341)), ('A', '   6 ', 'MET', 0.02177999018597332, (1.3819999999999995, 7.580000000000001, -17.008)), ('A', '  24 ', 'THR', 0.23988415098303542, (-32.996, -4.065000000000001, -21.1)), ('A', '  27 ', 'LEU', 0.11040211756047123, (-24.442, 1.3680000000000005, -20.841)), ('A', '  47 ', 'GLU', 0.005069634848634465, (-32.236, -7.28, -33.674)), ('A', '  87 ', 'LEU', 0.12037110090323375, (-28.168, 10.999000000000004, -27.434000000000005)), ('A', '  93 ', 'THR', 0.17028156685457235, (-30.641, 18.262, -11.69)), ('A', ' 152 ', 'ILE', 0.26187241393571015, (-6.291, 17.229, -18.256)), ('A', ' 166 ', 'GLU', 0.020783714585218986, (-16.049, -3.381, -30.623000000000005)), ('A', ' 169 ', 'THR', 0.08997491912807506, (-10.387, -8.103, -34.651)), ('B', '   5 ', 'LYS', 0.27815713866168185, (-2.119999999999999, -2.724, -17.766)), ('B', '  24 ', 'THR', 0.016268421376491135, (14.081, 24.25700000000001, 2.22)), ('B', '  51 ', 'ASN', 0.23589385037921362, (24.918, 10.484, 8.318)), ('B', '  59 ', 'ILE', 0.16867551269188813, (13.771, 17.082000000000008, 19.377)), ('B', '  62 ', 'SER', 0.05632605754500359, (9.087, 22.555, 16.588)), ('B', '  67 ', 'LEU', 0.2974611194549284, (4.188, 24.013, 6.551)), ('B', '  73 ', 'VAL', 0.06399577930902024, (-5.879000000000001, 26.199, 2.755)), ('B', '  86 ', 'VAL', 0.16657799196137632, (7.639, 7.942, 8.514)), ('B', '  90 ', 'LYS', 0.040900837688326294, (-1.032, 15.898, 13.91)), ('B', ' 102 ', 'LYS', 0.07737137856592247, (-6.522, 0.3580000000000001, 5.757)), ('B', ' 139 ', 'SER', 0.10974626834493623, (8.330000000000004, 7.3999999999999995, -13.366)), ('B', ' 141 ', 'LEU', 0.19500114318132328, (11.471000000000002, 12.216, -11.257)), ('B', ' 155 ', 'ASP', 0.013445673005350796, (-15.04, 0.8620000000000003, -1.0)), ('B', ' 169 ', 'THR', 0.004028818689293662, (19.614, 2.275, -11.648)), ('B', ' 181 ', 'PHE', 0.24376855802043354, (11.205, -0.306, 4.388)), ('B', ' 196 ', 'THR', 0.0034861762155887267, (19.623000000000005, -9.337, -9.035000000000002)), ('B', ' 200 ', 'ILE', 0.2978039789867364, (8.012000000000004, -13.305, -11.495)), ('B', ' 226 ', 'THR', 0.028975100218576633, (7.311000000000002, -31.38900000000001, -12.809)), ('B', ' 233 ', 'VAL', 0.09228670153194987, (15.499, -24.253000000000007, -16.086)), ('B', ' 235 ', 'MET', 0.2046552916733865, (16.91400000000001, -20.826000000000004, -11.994)), ('B', ' 236 ', 'LYS', 0.01877460260643498, (19.185, -21.185, -15.046)), ('B', ' 240 ', 'GLU', 0.22215253839280824, (11.708000000000002, -17.239, -9.605)), ('B', ' 277 ', 'ASN', 0.13876372419615313, (10.696000000000002, -19.148, -32.806)), ('B', ' 279 ', 'ARG', 0.0, (6.226000000000002, -15.101999999999999, -33.126)), ('B', ' 286 ', 'LEU', 0.047188842074669654, (8.682, -10.487, -24.415))]
data['cbeta'] = [('A', '  84 ', 'ASN', ' ', 0.30590767665552304, (-23.839, 13.145, -35.161)), ('A', '  98 ', 'THR', ' ', 0.28409167485217857, (-20.264, 20.143, -13.894)), ('A', ' 155 ', 'ASP', ' ', 0.2782594257455163, (-8.037999999999997, 22.863, -13.148)), ('A', ' 222 ', 'ARG', ' ', 0.2972789129843203, (28.531, 9.035999999999996, -39.556)), ('A', ' 238 ', 'ASN', ' ', 0.2623557955425478, (3.767, -1.455, -41.62800000000001)), ('B', '  84 ', 'ASN', ' ', 0.27881649517781865, (9.773, 2.713, 11.379000000000001)), ('B', ' 238 ', 'ASN', ' ', 0.30000110050716144, (17.601, -15.009, -14.079))]
data['probe'] = [(' A  56  ASP  OD1', ' A 401  HOH  O  ', -0.849, (-41.057, 4.524, -38.536)), (' A 169  THR HG23', ' A 171  VAL HG22', -0.81, (-10.225, -4.296, -34.791)), (' A 100  LYS  HE3', ' A 456  HOH  O  ', -0.637, (-9.723, 28.039, -18.308)), (' A 130  MET  HE1', ' A 182  TYR  HB3', -0.625, (-10.58, 8.045, -34.806)), (' A 299  GLN  NE2', ' A 402  HOH  O  ', -0.563, (7.859, 11.865, -18.86)), (' B  13  VAL HG12', ' B  17  MET  HE3', -0.55, (-2.843, 9.984, -3.03)), (' B 141  LEU  HA ', ' B 422  HOH  O  ', -0.528, (13.257, 12.597, -12.255)), (' A 107  GLN  NE2', ' A 403  HOH  O  ', -0.528, (-9.672, 16.088, -37.084)), (' A 190  THR HG23', ' A 192  GLN  HG3', -0.494, (-19.681, -2.126, -40.645)), (' A 140  PHE  HB2', ' A 172  HIS  CE1', -0.489, (-12.772, -2.619, -26.413)), (' A 273  GLN  HB3', ' A 434  HOH  O  ', -0.472, (16.717, -1.062, -42.899)), (' B 136  ILE HD11', ' B 140  PHE  HE2', -0.472, (8.171, 4.021, -6.897)), (' B 118  TYR  OH ', ' B 141  LEU  HB2', -0.468, (9.014, 13.226, -11.818)), (' A   5  LYS  HB2', ' A   5  LYS  HE3', -0.459, (3.541, 2.937, -21.466)), (' A 270  GLU  HA ', ' A 273  GLN  HG2', -0.446, (19.311, -0.008, -40.801)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.444, (10.688, 1.121, 4.078)), (' A   5  LYS  HG3', ' A 291  PHE  CZ ', -0.44, (4.067, 6.072, -22.023)), (' A 227  LEU  HA ', ' A 227  LEU HD12', -0.437, (12.442, 12.252, -44.854)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.432, (-26.972, 3.203, -25.157)), (' B  74  GLN  HB3', ' B  76  ARG HH12', -0.43, (-1.137, 27.027, 7.526)), (' A 165  MET  HB3', ' A 165  MET  HE3', -0.428, (-19.43, -1.748, -32.965)), (' B 279  ARG  HB2', ' B 279  ARG  HE ', -0.423, (6.762, -17.765, -33.208)), (' A 186  VAL  H  ', ' A 192  GLN  NE2', -0.417, (-19.038, 1.18, -38.535)), (' B  27  LEU HD21', ' B  42  VAL  HB ', -0.417, (9.992, 15.148, 3.711)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.415, (-0.319, 8.406, -33.033)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.41, (6.023, -9.897, -8.622)), (' B 226  THR HG22', ' B 229  ASP  HB2', -0.404, (10.185, -31.982, -12.956)), (' B  40  ARG  HD3', ' B  85  CYS  HA ', -0.401, (11.832, 7.266, 9.461))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
