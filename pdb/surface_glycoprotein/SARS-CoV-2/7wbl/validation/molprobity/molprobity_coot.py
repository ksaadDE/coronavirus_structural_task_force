# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 338 ', 'ASN', 0.0070242644862704194, (66.04699999999998, 63.694, 91.583)), ('B', ' 449 ', 'TYR', 0.023759059047637917, (67.01099999999997, 94.339, 111.246)), ('B', ' 499 ', 'PRO', 0.09335465543715696, (72.90199999999997, 82.471, 109.099))]
data['omega'] = [('A', ' 146 ', 'PRO', None, (72.45, 70.37300000000002, 71.227))]
data['rota'] = [('A', '  24 ', 'GLN', 0.037356305907788455, (81.823, 115.74600000000001, 101.253)), ('A', '  42 ', 'GLN', 0.11343737437184791, (70.15599999999998, 90.167, 98.3)), ('A', '  45 ', 'LEU', 0.0015691154972661294, (71.283, 85.279, 96.99600000000001)), ('B', ' 449 ', 'TYR', 0.0931716737284918, (67.01099999999997, 94.339, 111.246)), ('B', ' 493 ', 'ARG', 0.020622013566674507, (72.414, 101.56900000000002, 110.24200000000002))]
data['cbeta'] = []
data['probe'] = [(' B 379  CYS  HB3', ' B 432  CYS  HA ', -1.035, (88.562, 90.999, 130.3)), (' A  35  GLU  HG3', ' B 493  ARG HH12', -0.874, (72.39, 102.519, 103.809)), (' A  35  GLU  HG3', ' B 493  ARG  NH1', -0.841, (73.191, 102.782, 103.65)), (' B 379  CYS  CB ', ' B 432  CYS  HA ', -0.763, (89.698, 91.292, 130.669)), (' A 133  CYS  HB3', ' A 141  CYS  HA ', -0.707, (65.67, 70.43, 61.646)), (' B 412  PRO  HG3', ' B 429  PHE  HB3', -0.702, (91.215, 98.999, 128.022)), (' A  41  TYR  HE2', ' B 501  TYR  CE1', -0.693, (75.084, 88.504, 104.644)), (' A  45  LEU  O  ', ' A  45  LEU HD12', -0.691, (69.592, 83.329, 96.691)), (' A  41  TYR  CE2', ' B 501  TYR  HE1', -0.684, (74.698, 88.548, 103.943)), (' A  41  TYR  HD1', ' A  41  TYR  O  ', -0.655, (73.162, 88.307, 98.659)), (' A 152  MET  O  ', ' A 161  ARG  NH1', -0.643, (83.564, 69.384, 62.426)), (' A 177  ARG  NH1', ' A 495  GLU  O  ', -0.639, (75.715, 92.315, 53.694)), (' B 381  GLY  HA3', ' B 430  THR HG23', -0.631, (93.398, 95.71, 134.951)), (' A 503  LEU HD23', ' A 505  HIS  H  ', -0.623, (80.669, 85.744, 70.076)), (' B 356  LYS  HB3', ' B 397  ALA  HB3', -0.605, (75.245, 94.5, 134.473)), (' A  35  GLU  CG ', ' B 493  ARG HH12', -0.604, (72.677, 102.799, 102.886)), (' A 201  ASP  OD2', ' A 219  ARG  NH1', -0.603, (88.806, 107.857, 74.569)), (' A 524  GLN  HB3', ' A 574  VAL HG11', -0.601, (104.408, 89.012, 83.861)), (' A 183  TYR  OH ', ' A 509  ASP  OD1', -0.597, (77.659, 96.19, 71.505)), (' A 538  PRO  HD2', ' A 541  LYS  HD3', -0.581, (111.938, 70.383, 82.358)), (' B 449  TYR  H  ', ' B 449  TYR  HD1', -0.574, (66.064, 92.464, 109.349)), (' A  41  TYR  HD2', ' A 353  LYS  HD2', -0.574, (75.735, 90.74, 102.84)), (' A 142  LEU HD22', ' A 147  GLY  HA3', -0.571, (71.72, 69.36, 66.612)), (' A 457  GLU  HG2', ' A 513  ILE HD13', -0.571, (91.065, 93.297, 70.689)), (' A  47  SER  O  ', ' A  51  ASN  ND2', -0.567, (70.871, 81.971, 89.923)), (' A 346  PRO  HA ', ' A 359  LEU  O  ', -0.562, (79.642, 75.268, 88.73)), (' A 305  GLN  O  ', ' A 309  LYS  HG2', -0.557, (87.73, 66.952, 99.458)), (' B 355  ARG  HD3', ' B 466  ARG HH22', -0.548, (75.95, 102.596, 130.771)), (' A 368  ASP  HA ', ' A 371  THR HG22', -0.541, (86.812, 69.606, 86.277)), (' B 409  GLN  HA ', ' B 414  GLN  HG2', -0.539, (89.697, 98.014, 118.316)), (' B 355  ARG  HG2', ' B 398  ASP  OD1', -0.538, (77.79, 99.134, 130.712)), (' A 116  LEU  HB2', ' A 186  LEU HD23', -0.535, (69.62, 101.588, 70.938)), (' A  41  TYR  CE2', ' B 501  TYR  CE1', -0.528, (74.745, 88.051, 104.73)), (' B 379  CYS  HB2', ' B 431  GLY  O  ', -0.527, (89.921, 92.247, 131.491)), (' B 346  ARG  NH2', ' B 451  TYR  OH ', -0.52, (68.864, 89.564, 118.258)), (' A 570  LEU  O  ', ' A 574  VAL HG22', -0.51, (104.787, 92.377, 85.957)), (' A 418  LEU  HB3', ' A 424  LEU HD13', -0.509, (99.656, 62.114, 88.283)), (' B 344  ALA  HB3', ' B 347  PHE  HE1', -0.508, (70.76, 88.504, 127.799)), (' A 217  TYR  OH ', ' A 225  ASP  OD2', -0.508, (99.709, 98.809, 75.797)), (' A 500  PRO  O  ', ' A 506  VAL HG11', -0.503, (79.371, 88.306, 65.348)), (' B 334  ASN  O  ', ' B 362  VAL  N  ', -0.499, (77.559, 87.871, 146.743)), (' A 456  LEU HD22', ' A 512  PHE  HD2', -0.493, (85.755, 88.983, 68.557)), (' B 447  GLY  H  ', ' B 498  ARG  HG2', -0.488, (68.284, 87.437, 106.677)), (' A 177  ARG  HB2', ' A 498  CYS  HB2', -0.488, (73.596, 90.772, 58.219)), (' A 456  LEU HD22', ' A 512  PHE  CD2', -0.485, (85.889, 88.656, 68.909)), (' A 293  VAL  O  ', ' A 293  VAL HG12', -0.482, (93.956, 59.419, 87.054)), (' B 449  TYR  CD1', ' B 449  TYR  N  ', -0.481, (66.911, 93.007, 109.914)), (' B 383  SER  H  ', ' B 387  LEU HD22', -0.478, (95.633, 89.203, 138.339)), (' A  45  LEU  C  ', ' A  45  LEU HD12', -0.476, (69.904, 84.042, 96.929)), (' B 422  ASN HD21', ' B 454  ARG  H  ', -0.473, (76.513, 102.935, 115.967)), (' A 378  HIS  HD1', ' A 401  HIS  CE1', -0.465, (88.179, 84.571, 89.205)), (' A 353  LYS  HA ', ' B 505  HIS  NE2', -0.464, (81.337, 90.677, 104.919)), (' A 321  PRO  O  ', ' A 380  GLN  NE2', -0.463, (93.189, 79.37, 100.244)), (' A 363  LYS  N  ', ' A 368  ASP  OD2', -0.462, (82.499, 66.078, 87.637)), (' A 527  GLU  O  ', ' A 531  GLN  HG2', -0.459, (110.334, 83.233, 86.973)), (' A 152  MET  HG3', ' A 270  MET  HG2', -0.455, (79.43, 74.232, 64.404)), (' A  41  TYR  C  ', ' A  41  TYR  CD1', -0.453, (73.299, 88.814, 99.563)), (' A 355  ASP  OD2', ' A 357  ARG  NH2', -0.453, (75.677, 82.328, 101.055)), (' A 489  GLU  OE2', ' A 613  TYR  OH ', -0.452, (85.082, 83.45, 47.949)), (' A 488  VAL HG11', ' A 610  TRP  HZ3', -0.451, (90.865, 77.703, 51.003)), (' A  41  TYR  C  ', ' A  41  TYR  HD1', -0.447, (72.863, 88.823, 99.105)), (' A 580  ASN  OD1', ' A 581  VAL  N  ', -0.445, (106.194, 89.571, 75.447)), (' B 496  SER  O  ', ' B 501  TYR  OH ', -0.445, (73.33, 90.792, 107.082)), (' A 360  MET  HE1', ' A 371  THR HG23', -0.443, (85.529, 71.959, 87.98)), (' A 295  ASP  OD1', ' A 296  ALA  N  ', -0.443, (93.079, 55.524, 86.582)), (' A 131  LYS  HD3', ' A 141  CYS  HB2', -0.436, (64.094, 73.118, 64.037)), (' A 366  MET  HE3', ' A 418  LEU HD21', -0.436, (96.824, 64.166, 86.032)), (' A 166  GLU  OE2', ' A 493  HIS  NE2', -0.434, (78.038, 81.717, 53.0)), (' A 477  TRP  HD1', ' A 478  TRP  CD1', -0.433, (83.857, 87.687, 56.271)), (' B 344  ALA  HB3', ' B 347  PHE  CE1', -0.429, (70.917, 88.901, 127.45)), (' A 318  VAL  O  ', ' A 551  GLY  HA3', -0.418, (102.36, 80.914, 98.392)), (' A 293  VAL HG21', ' A 424  LEU HD11', -0.416, (97.961, 60.688, 86.469)), (' A  92  THR HG22', ' A  96  GLN HE21', -0.415, (88.332, 104.76, 97.385)), (' B 360  ASN  H  ', ' B 524  VAL HG22', -0.414, (79.071, 94.52, 146.651)), (' A 431  ASP  N  ', ' A 431  ASP  OD1', -0.414, (108.524, 60.271, 78.318)), (' A 233  ILE HD11', ' A 581  VAL HG21', -0.412, (102.53, 86.586, 71.976)), (' B 372  ALA  N  ', ' B 373  PRO  HD3', -0.412, (83.867, 76.949, 129.884)), (' A 577  LYS  HB2', ' A 577  LYS  HE3', -0.407, (107.602, 100.163, 82.543)), (' A 574  VAL HG23', ' A 576  ALA  H  ', -0.407, (106.855, 92.727, 85.047)), (' B 388  ASN  N  ', ' B 388  ASN  OD1', -0.407, (90.585, 85.689, 143.1)), (' A 468  ILE HG22', ' A 473  TRP  HD1', -0.407, (82.488, 98.03, 56.308)), (' B 383  SER  O  ', ' B 387  LEU  HB2', -0.405, (93.672, 87.435, 138.752)), (' A 560  LEU  HA ', ' A 560  LEU HD23', -0.403, (96.231, 96.195, 97.294)), (' B 398  ASP  HB2', ' B 512  VAL  HB ', -0.402, (81.441, 95.702, 129.149)), (' A 248  LEU HD21', ' A 278  LEU HD22', -0.402, (92.768, 69.541, 61.186)), (' A 353  LYS  HA ', ' B 505  HIS  CD2', -0.402, (80.984, 89.896, 104.846))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
