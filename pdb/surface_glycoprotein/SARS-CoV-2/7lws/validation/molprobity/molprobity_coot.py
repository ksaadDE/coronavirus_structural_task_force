# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  99 ', 'ASN', 0.0076732446408668805, (221.17099999999994, 162.879, 135.904)), ('A', ' 569 ', 'ILE', 0.025555888044588023, (159.053, 135.65499999999994, 154.252)), ('A', ' 877 ', 'LEU', 0.04798416672310033, (172.71299999999994, 177.99199999999993, 194.78)), ('A', ' 878 ', 'LEU', 0.04704333240560882, (175.78999999999994, 177.07399999999996, 196.911)), ('A', '1041 ', 'ASP', 0.008033691414316294, (171.77999999999994, 155.903, 194.945)), ('A', '1084 ', 'ASP', 0.026016981808113473, (163.436, 139.42099999999994, 235.29600000000005)), ('B', ' 594 ', 'GLY', 0.08683798627794145, (133.175, 158.813, 156.157)), ('B', ' 855 ', 'PHE', 0.014867735576956352, (167.85199999999995, 137.212, 155.221)), ('C', ' 110 ', 'LEU', 0.026175656960813972, (144.255, 208.21399999999997, 123.068)), ('C', ' 593 ', 'GLY', 0.04028832629976034, (170.13499999999996, 186.572, 159.45)), ('C', ' 986 ', 'LYS', 0.00652886419310705, (143.76199999999994, 157.819, 132.10100000000003)), ('C', '1041 ', 'ASP', 0.011529188883178621, (160.146, 171.054, 195.594))]
data['omega'] = []
data['rota'] = [('A', ' 391 ', 'CYS', 0.06743640367908865, (161.27599999999995, 132.529, 129.21200000000002)), ('A', ' 403 ', 'ARG', 0.0507031630792574, (147.673, 151.163, 105.497)), ('A', ' 740 ', 'MET', 0.2569742448171748, (168.223, 179.471, 151.982)), ('A', ' 820 ', 'ASP', 0.06069502087833799, (187.36799999999994, 176.33, 185.17600000000004)), ('A', ' 867 ', 'ASP', 0.21530458083919837, (178.34899999999993, 181.588, 181.112)), ('A', ' 907 ', 'ASN', 0.1729072361983628, (171.496, 162.963, 212.30300000000005)), ('A', '1041 ', 'ASP', 0.21490228457011656, (171.77999999999994, 155.903, 194.945)), ('A', '1048 ', 'HIS', 0.14496887652622092, (173.97799999999995, 160.923, 201.18800000000005)), ('B', ' 505 ', 'TYR', 0.15785159105166285, (156.854, 175.10999999999996, 102.542)), ('B', ' 581 ', 'THR', 0.15008119968249412, (118.43299999999998, 179.57, 139.855)), ('C', ' 581 ', 'THR', 0.15323472858605094, (195.67799999999994, 189.705, 137.23)), ('C', ' 773 ', 'GLU', 0.06101179748321839, (147.23299999999995, 155.63699999999994, 175.09900000000002)), ('C', ' 907 ', 'ASN', 0.15381790558660977, (154.77899999999994, 165.941, 212.809))]
data['cbeta'] = [('A', ' 569 ', 'ILE', ' ', 0.28670709035628356, (160.594, 135.865, 154.147)), ('C', ' 112 ', 'SER', ' ', 0.2603954540527414, (140.98199999999994, 205.99099999999996, 118.59400000000002)), ('C', ' 824 ', 'ASN', ' ', 0.2599098645838483, (134.51299999999995, 178.26599999999993, 181.637))]
data['probe'] = [(' A 726  ILE HG12', ' A1061  VAL HG22', -0.437, (179.877, 166.819, 185.377)), (' C 770  ILE HD11', ' C1012  LEU  HA ', -0.436, (152.62, 159.145, 168.1)), (' A 394  ASN  H  ', ' A 516  GLU  HG3', -0.435, (152.665, 132.712, 128.25))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
