# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.013606226674781985, (-15.179380000000002, 2.13659, 31.8344))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = [('A', '  60 ', 'ARG', ' ', 0.36892135143707677, (-22.95972, -1.98709, -10.45345))]
data['probe'] = [(' A  68  VAL  O  ', ' A  74  GLN  HB3', -0.802, (-10.381, -8.239, 3.344)), (' A  60  ARG  HG3', ' A  60  ARG  O  ', -0.795, (-23.118, -4.664, -10.77)), (' A  12  LYS  HD3', ' A  12  LYS  N  ', -0.754, (-8.523, -0.769, 23.633)), (' A  69  GLN  HA ', ' A  74  GLN  HA ', -0.751, (-8.231, -8.184, 5.003)), (' A 225  THR  OG1', ' A 229  ASP  OD2', -0.745, (-25.301, 39.938, 34.019)), (' A  68  VAL  N  ', ' A  74  GLN  OE1', -0.728, (-11.284, -6.324, 1.213)), (' A 228  ASN  O  ', ' A 232  LEU HD13', -0.713, (-30.552, 39.082, 28.887)), (' A 227  LEU HD12', ' A 262  LEU HD21', -0.659, (-28.03, 33.341, 35.962)), (' A  69  GLN  CB ', ' A  74  GLN  HG2', -0.635, (-7.548, -6.905, 2.908)), (' A  69  GLN  HB2', ' A  74  GLN  HG2', -0.607, (-7.95, -6.234, 2.743)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.549, (-21.036, 2.791, 1.14)), (' A 295  ASP  OD1', ' A 298 BARG  NH2', -0.541, (-14.356, 14.262, 28.607)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.503, (-13.65, 9.563, 17.767)), (' A 235  MET  CE ', ' A 241  PRO  HG3', -0.497, (-29.463, 32.971, 23.528)), (' A  36  VAL HG21', ' A  68  VAL HG11', -0.487, (-14.498, -5.74, 6.523)), (' A 222  ARG  HA ', ' A 222  ARG  HD2', -0.484, (-16.377, 40.985, 43.889)), (' A  12  LYS  H  ', ' A  12  LYS  HD3', -0.482, (-9.105, 0.252, 23.42)), (' A  59  ILE  O  ', ' A  60  ARG  C  ', -0.475, (-24.906, -3.862, -8.881)), (' A  69  GLN  HA ', ' A  74  GLN  CA ', -0.47, (-8.482, -8.214, 4.747)), (' A 222  ARG  HG3', ' A 222  ARG  O  ', -0.466, (-17.93, 42.749, 42.884)), (' A  52  PRO  HG2', ' A  54  TYR  CE2', -0.46, (-23.74, 9.794, -3.178)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.454, (-15.246, 4.138, 4.231)), (' A  41  HIS  HD2', ' A 558  HOH  O  ', -0.453, (-19.646, 8.626, 2.095)), (' A  67  LEU  C  ', ' A  74  GLN  OE1', -0.449, (-11.162, -6.221, 0.963)), (' A 189  GLN  HG2', ' A 189  GLN  O  ', -0.446, (-18.378, 18.321, -5.908)), (' A  68  VAL  O  ', ' A  74  GLN  CB ', -0.442, (-9.678, -8.151, 4.0)), (' A 228  ASN  O  ', ' A 232  LEU  CD1', -0.44, (-30.384, 38.952, 28.725)), (' A   8  PHE  HE1', ' A 305  PHE  CZ ', -0.439, (-13.154, 8.412, 29.272)), (' A 103  PHE  CE1', ' A 177  LEU HD22', -0.437, (-20.568, 2.067, 15.349)), (' A 235  MET  HE2', ' A 241  PRO  HG3', -0.433, (-29.764, 32.696, 23.351)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.432, (-13.653, -7.587, 13.01)), (' A  12  LYS  CD ', ' A  12  LYS  N  ', -0.431, (-9.395, -0.143, 23.763)), (' A  78  ILE HD11', ' A  90  LYS  HG3', -0.414, (-22.174, -12.149, 6.582))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
