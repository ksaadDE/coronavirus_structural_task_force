# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 155 ', 'ASP', 0.025136311415480117, (26.827699999999993, 66.48582999999998, 30.719120000000007)), ('E', ' 360 ', 'ASN', 0.020332013528690886, (14.027219999999993, -37.733139999999985, 44.3284)), ('E', ' 362 ', 'VAL', 0.05543031649325481, (8.90092, -38.74263, 39.469460000000005)), ('L', ' 155 ', 'ASP', 0.019539075205749053, (-9.48824, 44.13734, 33.166460000000015))]
data['omega'] = [('B', ' 159 ', 'PRO', None, (-1.25413, 50.21902, 16.32947)), ('B', ' 161 ', 'PRO', None, (1.10696, 50.74855999999998, 10.52246)), ('C', ' 145 ', 'PRO', None, (30.240299999999987, 50.65997999999999, 6.24179)), ('H', ' 159 ', 'PRO', None, (21.624049999999993, 51.0646, 49.11309000000001)), ('H', ' 161 ', 'PRO', None, (19.19555, 49.42848, 54.54502000000001)), ('L', ' 145 ', 'PRO', None, (-0.7517, 28.96447, 56.78833))]
data['rota'] = [('H', ' 218 ', 'LYS', 0.11608463646432779, (15.108549999999997, 62.204109999999986, 55.08593)), ('A', ' 373 ', 'SER', 0.05359990173019469, (59.31110999999999, -2.701439999999999, 18.4849)), ('A', ' 518 ', 'LEU', 0.008588125809885864, (43.380099999999985, -24.57179, 1.3047700000000004)), ('B', ' 194 ', 'VAL', 0.2993863918298771, (13.326429999999997, 67.08488, 5.357680000000001)), ('C', '  35 ', 'ASN', 0.0, (26.901909999999994, 21.54059, 9.743660000000004)), ('C', ' 213 ', 'THR', 0.05847714492119849, (19.478419999999993, 77.02453, 27.464340000000004))]
data['cbeta'] = []
data['probe'] = [(' L 131  ALA  O  ', ' L 301  HOH  O  ', -0.708, (9.291, 59.857, 35.607)), (' L  97  ASN  OD1', ' L 302  HOH  O  ', -0.675, (24.835, 8.949, 33.191)), (' E 388  ASN  HA ', ' E 526  GLY  HA3', -0.641, (8.788, -39.648, 32.205)), (' A 388  ASN  HA ', ' A 526  GLY  HA3', -0.636, (59.931, -19.419, 4.369)), (' C 136  LEU HD12', ' C 182  LEU HD23', -0.61, (19.066, 62.354, 25.789)), (' C 142  ASP  OD1', ' C 171  GLN  NE2', -0.607, (22.672, 58.192, 2.697)), (' C   4  LEU  HB2', ' C 102  GLY  HA2', -0.595, (27.112, 27.446, 17.917)), (' B 171  LEU HD21', ' B 194  VAL HG21', -0.591, (11.285, 69.342, 2.72)), (' L 142  ASP  OD1', ' L 171  GLN  NE2', -0.584, (-0.288, 39.377, 60.291)), (' A 449  TYR  O  ', ' B 107  TYR  OH ', -0.571, (37.359, 10.192, 16.603)), (' A 369  TYR  OH ', ' A 384  PRO  O  ', -0.568, (59.744, -17.879, 12.148)), (' B  12  LYS  HE3', ' B  18  LEU HD13', -0.549, (-1.829, 32.543, 17.915)), (' C 117  PRO  HB3', ' C 143  PHE  HB3', -0.532, (26.981, 57.066, 9.628)), (' L   4  LEU  HB2', ' L 102  GLY  HA2', -0.528, (13.007, 16.474, 41.79)), (' L 136  LEU HD12', ' L 182  LEU HD23', -0.526, (-0.655, 46.601, 37.572)), (' H 171  LEU HD21', ' H 194  VAL HG21', -0.494, (-1.062, 55.131, 61.297)), (' B 131  PRO  HB3', ' B 157  TYR  HB3', -0.49, (1.268, 57.685, 16.701)), (' C 190  LYS  NZ ', ' C 212  PRO  HB2', -0.489, (16.734, 74.263, 29.072)), (' E 359  SER  O  ', ' E 361  CYS  N  ', -0.488, (12.691, -36.462, 42.789)), (' A 383  SER  HB2', ' A 386  LYS  HB2', -0.486, (57.815, -23.493, 13.551)), (' L 171  GLN  HG2', ' L 175  LYS  O  ', -0.484, (3.726, 36.772, 59.941)), (' A 516  GLU  HG2', ' A 518  LEU HD13', -0.48, (42.985, -21.546, 2.803)), (' H  35  GLY  HA3', ' H  50  ILE HG22', -0.478, (29.649, 17.847, 43.961)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.477, (50.2, -17.9, 10.612)), (' C 155  ASP  OD2', ' C 192  HIS  HD2', -0.477, (24.241, 66.297, 34.023)), (' H  22  CYS  SG ', ' H  34  ILE HD11', -0.471, (33.868, 21.215, 49.842)), (' L 117  PRO  HB3', ' L 143  PHE  HB3', -0.47, (-2.517, 35.455, 53.729)), (' E 354  ASN  O  ', ' E 398  ASP  HA ', -0.47, (17.201, -21.506, 37.901)), (' L 123  PRO  HA ', ' L 136  LEU HD23', -0.469, (-2.92, 51.233, 41.313)), (' B  30  THR HG22', ' B  74  LYS  HD2', -0.467, (3.051, 8.776, 10.346)), (' E 484  LYS  HD3', ' E 490  PHE  HB2', -0.464, (24.734, 4.004, 36.025)), (' H 181  VAL HG12', ' L 166  THR HG23', -0.464, (8.548, 41.829, 47.427)), (' H  33  TRP  HB2', ' H  99  SER  HB2', -0.462, (30.776, 12.331, 45.398)), (' H 211  ASN  ND2', ' H 410  HOH  O  ', -0.455, (12.889, 57.502, 59.447)), (' B  30  THR  CG2', ' B  74  LYS  HD2', -0.454, (3.024, 8.781, 9.701)), (' A 452  LEU HD23', ' A 494  SER  HA ', -0.454, (36.649, 6.787, 18.22)), (' C  62  ARG  NH1', ' C  83  ASP  OD2', -0.452, (30.5, 33.994, -2.607)), (' E 366  SER  OG ', ' E 388  ASN  OD1', -0.447, (3.946, -38.032, 28.659)), (' C 123  PRO  HA ', ' C 136  LEU HD23', -0.443, (17.002, 67.217, 22.406)), (' H 163  THR  OG1', ' H 211  ASN  HB2', -0.438, (14.873, 56.297, 58.563)), (' A 484  LYS  HE2', ' B 108  TYR  CD2', -0.435, (24.631, 11.706, 17.965)), (' A 338  PHE  HE2', ' A 363  ALA  HB1', -0.434, (56.371, -13.141, 4.292)), (' L 171  GLN  HG3', ' L 173  ASN  OD1', -0.431, (2.004, 38.046, 62.223)), (' E 484  LYS  HE3', ' L  92  TRP  CD1', -0.43, (23.252, 8.094, 37.109)), (' F   1  NAG  H61', ' F   2  NAG  N2 ', -0.426, (64.35, 0.603, 7.226)), (' E 452  LEU HD23', ' E 494  SER  HA ', -0.421, (15.953, -3.27, 35.408)), (' E 363  ALA  O  ', ' E 526  GLY  HA2', -0.419, (7.94, -37.801, 34.886)), (' B  33  TRP  HB2', ' B  99  SER  HB2', -0.414, (14.779, 14.858, 12.487)), (' E 365  TYR  CD2', ' E 387  LEU  HB3', -0.414, (9.607, -35.634, 30.803)), (' H 211  ASN  OD1', ' H 218  LYS  HG2', -0.407, (14.653, 61.015, 57.847)), (' L 145  PRO  O  ', ' L 201  HIS  HE1', -0.406, (-0.371, 30.408, 54.663)), (' B  87  LYS  HD3', ' L 160  LYS  HE2', -0.405, (6.317, 34.215, 31.049)), (' L 155  ASP  OD1', ' L 193  ARG  HG2', -0.405, (-11.042, 47.08, 32.265)), (' C 171  GLN  HG2', ' C 175  LYS  O  ', -0.403, (21.865, 53.486, 3.381))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
