# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  59 ', 'ILE', 0.05792740960734921, (-26.75, -42.844, -7.433999999999998)), ('A', '  67 ', 'LEU', 0.2331152138557202, (-11.947, -46.663, -0.367)), ('A', '  87 ', 'LEU', 0.15399206248154804, (-22.394, -40.14, 4.243)), ('A', ' 106 ', 'ILE', 0.12802354544217284, (-23.810999999999986, -27.786000000000005, 20.406)), ('A', ' 232 ', 'LEU', 0.2588502323887123, (-27.526999999999997, -1.307, 26.339999999999993)), ('A', ' 276 ', 'MET', 0.03164730571117486, (-7.605, -1.631, 27.450999999999993)), ('A', ' 286 ', 'LEU', 0.08222366832725285, (-8.302, -7.766, 23.596999999999998)), ('A', ' 290 ', 'GLU', 0.2360770329518713, (-13.357, -18.24, 23.322))]
data['cbeta'] = [('A', ' 117 ', 'CYS', ' ', 0.258719709992867, (-7.2410000000000005, -35.542, 10.147999999999998)), ('A', ' 187 ', 'ASP', ' ', 0.2961941445328937, (-21.911, -29.322, 1.3419999999999999))]
data['probe'] = [(' A  41  HIS  NE2', ' A 401   SE SE  ', -1.26, (-14.793, -31.983, 0.669)), (' A  41  HIS  CE1', ' A 401   SE SE  ', -0.709, (-15.728, -30.505, 1.241)), (' A  76  ARG  HG2', ' A  78  ILE HD11', -0.594, (-17.545, -55.107, 2.502)), (' A 165 BMET  HE1', ' A 192  GLN  NE2', -0.586, (-20.966, -22.887, 0.784)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.536, (-15.281, -48.445, 16.768)), (' A 226  THR  HB ', ' A 574  HOH  O  ', -0.508, (-30.496, -3.959, 35.341)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.484, (-13.223, -31.069, 17.49)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.481, (-18.951, -39.698, 22.491)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.464, (-23.3, -34.53, 8.005)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.462, (-11.313, -18.633, 33.938)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.455, (-4.69, -35.893, 15.206)), (' A 243  THR  H  ', ' A 246  HIS  CD2', -0.449, (-27.26, -13.98, 28.829)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.442, (-5.43, -25.279, 28.537)), (' A 208  LEU  HA ', ' A 208  LEU HD23', -0.429, (-11.172, -11.096, 32.786)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.423, (-6.407, -39.905, 1.318)), (' A  78  ILE  O  ', ' A  78  ILE HG22', -0.421, (-23.303, -53.953, 2.63)), (' A 401   SE SE  ', ' A 630  HOH  O  ', -0.42, (-12.882, -29.706, -0.07)), (' A 118  TYR  CE2', ' A 144  SER  HB3', -0.416, (-6.822, -29.953, 6.676)), (' A 276  MET  HB2', ' A 276  MET  HE3', -0.412, (-8.297, -3.85, 25.269)), (' A 127  GLN  HG2', ' A 560  HOH  O  ', -0.41, (-11.351, -23.606, 24.716)), (' A 111  THR HG21', ' A 290  GLU  O  ', -0.407, (-14.107, -21.547, 24.054)), (' A  97  LYS  HG3', ' A 510  HOH  O  ', -0.403, (-8.99, -48.911, 15.844)), (' A  27  LEU  C  ', ' A  27  LEU HD12', -0.401, (-12.331, -37.859, 3.574))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
