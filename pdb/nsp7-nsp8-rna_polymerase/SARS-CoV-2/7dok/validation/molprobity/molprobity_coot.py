# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (127.47499999999997, 151.497, 154.331)), ('B', ' 183 ', 'PRO', None, (150.063, 139.345, 162.616))]
data['rota'] = [('A', '  71 ', 'VAL', 0.2671779037500877, (169.547, 137.853, 104.316)), ('A', ' 291 ', 'ASP', 0.017690989687376226, (143.147, 156.898, 111.587)), ('A', ' 686 ', 'THR', 0.1962897802336561, (124.208, 140.996, 136.907)), ('A', ' 758 ', 'LEU', 0.024844507603628982, (125.691, 128.913, 132.493)), ('A', ' 763 ', 'VAL', 0.00669178382595422, (129.976, 122.68699999999997, 127.53100000000002)), ('B', ' 153 ', 'LEU', 0.055403277082786195, (157.55399999999997, 162.007, 159.756)), ('G', ' 156 ', 'ILE', 0.25374062063708436, (165.62499999999994, 114.66100000000002, 178.196))]
data['cbeta'] = []
data['probe'] = [(' A1003  POP  O4 ', ' A1101  HOH  O  ', -1.061, (137.827, 127.344, 138.215)), (' A 760  ASP  OD1', ' P1201  HCU  C9 ', -0.869, (133.144, 131.237, 137.703)), (' A  77  PHE  O  ', ' A  81  GLN  OE1', -0.761, (163.56, 143.71, 87.622)), (' A 734  ASN  ND2', ' A 736  ASP  O  ', -0.733, (132.705, 146.815, 108.069)), (' A 188  LYS  NZ ', ' A 213  ASN  O  ', -0.692, (165.646, 148.965, 115.075)), (' A 682  SER  HB2', ' P1201  HCU  O1 ', -0.688, (128.582, 135.387, 144.236)), (' A 576  LEU HD22', ' A 689  TYR  CD1', -0.681, (121.046, 138.622, 133.966)), (' A 875  GLN  HA ', ' A 875  GLN  OE1', -0.664, (124.941, 99.284, 143.109)), (' A 758  LEU  C  ', ' A 758  LEU HD12', -0.661, (125.947, 129.974, 133.914)), (' A 188  LYS  HD2', ' A 214  GLY  HA3', -0.658, (163.128, 149.611, 115.019)), (' A  10  ARG  NH1', ' A  10  ARG  O  ', -0.657, (178.169, 142.089, 97.092)), (' A 757  ILE HD13', ' A 762  ALA  CB ', -0.648, (129.711, 128.021, 127.438)), (' A 147  VAL HG23', ' A 157  PHE  HE2', -0.643, (165.58, 130.48, 126.857)), (' A 478  LYS  O  ', ' A 481  ASP  OD1', -0.639, (120.56, 136.575, 118.564)), (' G  51  ARG  HE ', " P   4    A  H4'", -0.638, (78.876, 125.753, 156.771)), (' A 757  ILE HD13', ' A 762  ALA  HB1', -0.623, (129.646, 127.33, 127.667)), (' A 333  ILE HG13', ' A 342  VAL  CG2', -0.615, (129.415, 167.758, 147.218)), (' A 599  HIS  O  ', ' A 603  LYS  HG2', -0.606, (118.061, 116.263, 125.15)), (' A 180  GLU  HA ', ' A 180  GLU  OE1', -0.603, (162.106, 149.795, 126.145)), (' A 589  ILE HG12', ' A 758  LEU HD13', -0.595, (123.045, 130.417, 134.114)), (' A 756  MET  HB3', ' A 763  VAL HG13', -0.589, (127.049, 122.932, 127.222)), (' A 291  ASP  N  ', ' A 291  ASP  OD1', -0.584, (144.214, 155.524, 111.287)), (' C  19  GLN HE22', ' G  87  MET  HG3', -0.584, (130.101, 121.571, 170.233)), (' A  86  ILE HD13', ' A 222  PHE  HB2', -0.581, (157.032, 150.08, 97.807)), (' A 204  VAL HG12', ' A 233  VAL  HB ', -0.571, (147.759, 149.244, 104.672)), (' A  82  HIS  NE2', ' A 222  PHE  O  ', -0.568, (155.996, 149.497, 94.635)), (' C  53  VAL HG13', ' G 106  ILE HD13', -0.561, (148.788, 112.24, 171.747)), (' A  86  ILE HD13', ' A 222  PHE  CB ', -0.556, (156.707, 150.481, 97.824)), (' B 146  THR  CG2', ' B 153  LEU  CD1', -0.554, (160.067, 160.65, 161.942)), (' A 128  VAL HG22', ' A 244  ILE HG13', -0.55, (152.824, 140.635, 119.886)), (' B 153  LEU  HB3', ' B 191  ALA  HB3', -0.546, (157.295, 163.322, 162.207)), (' A 614  LEU  HB2', ' A 802  GLU  HB3', -0.544, (132.035, 114.889, 124.627)), (' A  57  GLN  NE2', ' A  66  ILE  O  ', -0.538, (174.493, 135.316, 114.279)), (' A 746  TYR  OH ', ' A 750  ARG  NH1', -0.535, (121.795, 131.312, 117.615)), (' A 335  VAL HG21', ' A 366  LEU HD21', -0.53, (123.997, 168.098, 151.808)), (' G 100  ASN HD22', ' G 103  LEU  HG ', -0.529, (146.447, 108.202, 168.291)), (' B  47  SER  OG ', ' B  51  ARG  NH1', -0.526, (67.246, 139.935, 149.922)), (' A 388  LEU HD13', ' A 400  ALA  HB2', -0.524, (143.819, 151.32, 158.284)), (' A 631  ARG  HG2', ' A 663  LEU HD13', -0.523, (134.374, 145.122, 135.713)), (' A 739  THR  O  ', ' A 743  ASN  ND2', -0.52, (124.247, 139.442, 109.662)), (' A 756  MET  HE3', ' A 763  VAL HG11', -0.518, (125.985, 121.387, 128.65)), (' A 854  LEU HD22', ' G  72  LYS  HD3', -0.517, (112.061, 120.345, 165.415)), (' A 885  LEU HD22', ' A 916  TRP  HA ', -0.517, (112.366, 107.027, 150.74)), (' A 333  ILE HG13', ' A 342  VAL HG21', -0.516, (129.099, 167.178, 147.597)), (' G 134  ASP  N  ', ' G 134  ASP  OD1', -0.515, (153.035, 112.372, 189.464)), (' A 421  ASP  HA ', ' A 424  VAL HG12', -0.512, (127.859, 104.88, 161.827)), (" P   7    U  H2'", ' P   8    G  H8 ', -0.505, (91.312, 120.027, 143.7)), (' A 231  VAL  O  ', ' A 231  VAL HG13', -0.505, (147.862, 155.001, 102.456)), (' B 146  THR HG21', ' B 153  LEU HD12', -0.501, (160.708, 161.186, 162.98)), (' C  67  ASP  N  ', ' C  67  ASP  OD1', -0.501, (140.098, 115.566, 181.884)), (' A 196  MET  HE3', ' A 222  PHE  CE1', -0.499, (155.531, 151.946, 102.308)), (' A 303  ASP  N  ', ' A 303  ASP  OD1', -0.497, (130.15, 155.334, 119.011)), (' A 121  LYS  NZ ', ' A 144  GLU  OE2', -0.496, (167.181, 129.814, 116.332)), (' A  86  ILE  CD1', ' A 222  PHE  HB2', -0.495, (157.191, 150.29, 97.349)), (' A 333  ILE HG13', ' A 342  VAL HG22', -0.486, (130.025, 167.462, 147.859)), (' A 147  VAL  CG2', ' A 157  PHE  HE2', -0.485, (166.173, 131.031, 126.98)), (' A 858  ARG  NH2', ' P  17    U  OP1', -0.484, (121.26, 122.358, 155.047)), (' G 124  THR  HA ', ' G 190  ARG  HB3', -0.483, (161.872, 114.649, 166.765)), (' A 726  ARG  NH1', ' A 744  GLU  OE1', -0.483, (129.863, 135.21, 104.073)), (' A 435  VAL HG11', ' A 838  LEU  CD1', -0.482, (129.661, 107.836, 149.875)), (' A   5  GLN  O  ', ' A   9  ASN  ND2', -0.481, (183.52, 135.232, 98.025)), (' A 390  ASP  OD2', ' A 674  TYR  OH ', -0.48, (144.554, 145.417, 154.989)), (' A 623  ASP  N  ', ' A 623  ASP  OD2', -0.478, (137.109, 134.729, 139.971)), (' A 790  ASN  HB3', ' A 792  VAL HG22', -0.475, (143.201, 133.989, 131.172)), (' A 202  VAL HG12', ' A 231  VAL  H  ', -0.465, (149.767, 157.001, 100.734)), (' C  44  ASP  N  ', ' C  44  ASP  OD1', -0.464, (147.249, 109.752, 153.926)), (' A 334  PHE  O  ', ' A 362  HIS  HA ', -0.458, (126.061, 173.993, 150.701)), (' A 615  MET  HB2', ' A 766  PHE  HE1', -0.457, (134.979, 119.496, 122.519)), (' A 402  THR HG22', ' A 404  ASN  H  ', -0.455, (139.169, 149.703, 165.004)), (' A 568  ASN  OD1', ' A 654  ARG  NH2', -0.455, (123.25, 149.674, 137.234)), (' G  57  ARG  NH2', ' P   6    G  OP1', -0.455, (86.798, 118.956, 154.946)), (' A 465  ASP  HB3', ' A 468  GLN  HG2', -0.452, (141.876, 141.038, 118.653)), (' A 849  LYS  HA ', ' A 855  MET  HG3', -0.452, (119.04, 120.301, 161.363)), (' G 136  ASN  HA ', ' G 139  LYS  HG2', -0.451, (156.775, 105.603, 189.382)), (' B 146  THR HG21', ' B 153  LEU  CD1', -0.445, (160.788, 160.775, 162.644)), (' A 259  THR HG21', ' A 285  ARG HH22', -0.444, (158.947, 159.937, 125.983)), (' A 854  LEU HD21', ' G  75  ARG  HB2', -0.443, (113.385, 119.882, 168.231)), (' A 155  ASP  N  ', ' A 155  ASP  OD1', -0.442, (168.899, 128.658, 132.573)), (' A 599  HIS  CE1', ' A 603  LYS  HD3', -0.442, (117.771, 113.278, 124.735)), (' A 184  GLN  HA ', ' A 184  GLN  OE1', -0.439, (162.765, 152.385, 120.641)), (' A 380  MET  HE3', ' B  94  MET  HG2', -0.438, (132.747, 161.852, 157.376)), (' A 333  ILE  CG1', ' A 342  VAL HG22', -0.437, (130.293, 167.643, 147.742)), (' C  50  GLU  HB3', ' G 122  LEU HD23', -0.437, (152.42, 113.888, 163.027)), (' A 551  LYS  NZ ', ' A1003  POP  O6 ', -0.435, (138.358, 125.396, 142.516)), (' A 572  HIS  O  ', ' A 576  LEU  HG ', -0.435, (118.504, 142.449, 133.708)), (' A 123  THR  HA ', ' A 211  ASP  HA ', -0.433, (161.912, 141.158, 112.833)), (' A 757  ILE HD13', ' A 762  ALA  HB2', -0.432, (129.569, 128.098, 128.439)), (' C  34  GLN  HA ', ' C  34  GLN  OE1', -0.432, (146.774, 124.436, 158.632)), (' A 686  THR  O  ', ' A 686  THR  OG1', -0.43, (125.534, 141.112, 135.045)), (' A 304  ASP  HB2', ' A 636  LEU HD13', -0.426, (129.776, 149.742, 124.022)), (' B  55  MET  HA ', ' B  58  LYS  HG2', -0.425, (80.003, 143.86, 153.134)), (' B 158  GLN HE21', ' B 166  ILE HG12', -0.423, (148.518, 149.133, 173.685)), (' B 146  THR  CG2', ' B 153  LEU HD12', -0.422, (160.174, 160.821, 162.757)), (' B  83  VAL HG12', ' B  87  MET  HE2', -0.422, (118.581, 156.728, 156.066)), (' A 435  VAL  CG1', ' A 838  LEU HD12', -0.422, (129.679, 108.558, 149.837)), (' A 335  VAL HG22', ' A 363  SER  HB2', -0.422, (123.503, 170.577, 151.067)), (' A 702  ALA  HA ', ' A 785  VAL HG21', -0.421, (140.697, 132.238, 120.885)), (' A 496  ASN  ND2', ' T  13    A  OP2', -0.42, (116.035, 136.045, 142.215)), (' A 322  PRO  HA ', ' A 323  PRO  HD3', -0.419, (151.18, 155.905, 139.687)), (' A 760  ASP  OD1', ' P1201  HCU  O3 ', -0.418, (132.323, 130.454, 138.541)), (' A  57  GLN  HG2', ' A  65  LEU HD12', -0.417, (177.145, 132.413, 112.875)), (' A 423  ALA  HA ', ' A 883  LEU HD11', -0.416, (123.922, 104.894, 156.38)), (' B  40  LYS  HA ', ' B  43  ASN  HB3', -0.416, (59.408, 135.24, 152.413)), (' A 454  ASP  O  ', ' A 457  ARG  NH1', -0.415, (147.367, 137.593, 146.067)), (' A 854  LEU HD22', ' G  72  LYS  HA ', -0.415, (111.663, 121.08, 166.525)), (' A 753  PHE  CE2', ' A 764  VAL HG21', -0.414, (132.525, 125.774, 121.088)), (' C  31  GLN HE22', ' G 119  ILE HD13', -0.414, (151.128, 125.599, 169.01)), (' A   6  SER  HA ', ' A   9  ASN HD21', -0.414, (183.74, 135.049, 96.526)), (' A 576  LEU HD22', ' A 689  TYR  CG ', -0.414, (121.694, 138.473, 133.86)), (' C  23  GLU  HA ', ' C  29  TRP  HB2', -0.411, (142.343, 130.875, 167.855)), (' G 157  GLN  HG3', ' G 189  LEU HD13', -0.411, (166.029, 119.364, 174.471)), (' A 470  LEU  HA ', ' A 470  LEU HD23', -0.411, (134.246, 145.945, 119.071)), (' C  11  VAL HG12', ' C  36  HIS  HE1', -0.411, (136.817, 119.169, 160.908)), (' A 367  SER  HB3', ' A 370  GLU  HG3', -0.41, (118.056, 165.063, 148.596)), (' B  67  MET  HA ', ' B  70  MET  HG2', -0.409, (95.114, 150.939, 160.315)), (' A 602  LEU HD11', ' A 817  THR HG21', -0.409, (123.896, 114.316, 130.021)), (' A 837  ILE HG21', ' A 866  ALA  HB2', -0.408, (122.241, 112.371, 147.375)), (' A 489  ASN  OD1', ' A 492  GLN  NE2', -0.406, (107.066, 150.684, 134.788)), (' B 132  ILE HD13', ' B 138  TYR  HD2', -0.405, (156.715, 146.664, 162.024)), (' A 149  TYR  CD1', ' A 181  ARG  CZ ', -0.405, (167.111, 142.115, 121.224)), (" P   7    U  H2'", ' P   8    G  C8 ', -0.404, (91.085, 120.69, 143.664)), (' B 163  ASP  HB3', ' B 165  LYS  HE2', -0.404, (145.388, 139.055, 172.394)), (' A 620  PRO  HG2', ' A 792  VAL  HB ', -0.403, (144.228, 131.054, 134.136)), (' A 171  ILE  HA ', ' A 171  ILE HD12', -0.402, (158.755, 134.98, 133.401)), (' A 330  VAL HG11', ' B 117  LEU HD13', -0.4, (137.141, 161.446, 148.113)), (' G  76  SER  OG ', ' G  80  ARG  NH1', -0.4, (117.237, 126.407, 167.434)), (' A 756  MET  HE3', ' A 763  VAL  CG1', -0.4, (126.431, 121.805, 128.579))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
