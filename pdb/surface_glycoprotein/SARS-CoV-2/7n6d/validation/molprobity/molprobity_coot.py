# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 210 ', 'PRO', None, (-16.55405, -0.8645300000000005, 55.3557)), ('B', '  32 ', 'PRO', None, (-34.49360000000002, -21.142310000000002, 45.00675)), ('E', ' 210 ', 'PRO', None, (-47.60578000000001, -56.35142, 19.56929)), ('F', '  32 ', 'PRO', None, (-39.34361, -30.46393, 29.60026)), ('I', ' 210 ', 'PRO', None, (-18.501070000000002, -72.58807, 71.28247)), ('J', '  32 ', 'PRO', None, (-14.910870000000013, -61.20313999999999, 44.94435)), ('M', ' 210 ', 'PRO', None, (13.8795, -19.473130000000005, 1.73984)), ('N', '  32 ', 'PRO', None, (4.837699999999996, -27.602290000000007, 28.107590000000002))]
data['rota'] = [('A', ' 121 ', 'LYS', 0.11192503901756756, (-35.203190000000035, -22.562049999999985, 55.91643)), ('B', '   4 ', 'THR', 0.19496009173282036, (-37.81782, -14.11222, 43.70443)), ('B', '  89 ', 'GLN', 0.24042582437841467, (-40.750970000000024, -15.489510000000003, 31.84612)), ('B', '  97 ', 'ARG', 0.040156219958391616, (-27.53058, 5.586810000000002, 34.29174)), ('E', '  19 ', 'GLU', 0.2179927281368255, (-21.727949999999996, -32.939479999999996, 33.7718)), ('E', '  35 ', 'ARG', 0.010122481553213238, (-29.375669999999992, -49.37997, 27.70134)), ('E', '  98 ', 'MET', 0.1282964963802701, (-32.94405, -41.11466, 17.17053)), ('E', ' 131 ', 'ARG', 0.20806746329836456, (-29.641800000000014, -38.16414, 0.55462)), ('E', ' 138 ', 'MET', 0.010278555804188209, (-30.92606, -20.97138, 10.91993)), ('F', '   0 ', 'MET', 0.0, (-38.229689999999984, -23.01346, 25.40881)), ('F', '   1 ', 'ILE', 0.1396120689304453, (-40.871900000000004, -25.65365, 24.61188)), ('I', '  17 ', 'ARG', 0.1686617760327591, (-27.94578000000001, -49.36246000000001, 39.14423)), ('I', ' 275 ', 'GLU', 0.0014761350688888718, (-10.718869999999985, -99.47915, 68.94918)), ('J', '  50 ', 'GLU', 0.05902412155778191, (-32.366770000000045, -70.46547999999997, 52.15763)), ('J', '  71 ', 'THR', 0.07736896188029746, (-35.221669999999996, -86.33215000000001, 54.49954)), ('M', ' 255 ', 'GLN', 0.02122191007109936, (43.19642000000001, -18.928409999999996, 7.380550000000001))]
data['cbeta'] = []
data['probe'] = [(' I 255  GLN  O  ', ' I 273  ARG  NH1', -0.733, (-2.503, -96.032, 69.25)), (' J  42  ASN  ND2', ' J  76  ASP  OD1', -0.705, (-33.928, -87.993, 42.981)), (' A 253  GLN  HB3', ' A 256  ARG  HD3', -0.675, (-41.808, 21.052, 52.004)), (' M  97  ARG  HD3', ' M 116  TYR  CZ ', -0.668, (-5.782, -35.148, 13.915)), (' A   6  ARG  NH2', ' A 102  ASP  OD1', -0.666, (-18.501, -12.862, 62.903)), (' A  97  ARG  HD3', ' A 116  TYR  CZ ', -0.664, (-22.802, -28.017, 58.633)), (' M   6  ARG  HD2', ' M  98  MET  HE3', -0.656, (3.198, -30.915, 7.833)), (' I  97  ARG  HD3', ' I 116  TYR  CZ ', -0.643, (-14.835, -48.5, 58.226)), (' I 146  LYS  HE2', ' I 303  EDO  H22', -0.642, (-13.241, -37.275, 57.415)), (' O   4  PRO  HD2', ' O 102  EDO  H12', -0.642, (-11.577, -32.505, 3.366)), (' M  35  ARG  NH2', ' M  46  GLU  OE1', -0.641, (-6.065, -11.727, 13.013)), (' I  40  ALA  O  ', ' I  43  GLN  NE2', -0.631, (-34.99, -52.352, 51.808)), (' J  11  SER  H  ', ' J 101  EDO  H11', -0.6, (-23.213, -83.444, 56.572)), (' E  19  GLU  HG2', ' E  20  PRO  HD2', -0.587, (-20.593, -34.246, 31.551)), (' B  79  ALA  HB2', ' B  94  LYS  HD2', -0.582, (-31.927, -3.501, 28.762)), (' M 230  LEU HD11', ' M 243  LYS  HE3', -0.569, (24.023, -23.784, 11.398)), (' N  20  SER  HA ', ' N  71  THR HG22', -0.567, (14.937, 3.197, 16.407)), (' N  42  ASN  OD1', ' N  76  ASP  HA ', -0.567, (20.323, 0.643, 28.462)), (' I 230  LEU HD22', ' I 243  LYS  HE3', -0.563, (-9.524, -79.026, 60.938)), (' B  97 BARG  H  ', ' B  97 BARG  HD2', -0.553, (-29.048, 5.246, 32.029)), (' N  16  GLU  OE1', ' N  19  LYS  NZ ', -0.551, (24.221, 3.503, 10.885)), (' I 121  LYS  HB3', ' J   1  ILE HD13', -0.546, (-6.252, -56.044, 48.095)), (' J   0  MET  N  ', ' J   0  MET  SD ', -0.546, (-9.226, -55.265, 41.255)), (' M 178  THR  O  ', ' M 181  ARG  HG2', -0.534, (8.36, -15.472, -1.97)), (' N  19  LYS  O  ', ' N  72  PRO  HD2', -0.529, (18.23, 1.326, 16.511)), (' I  35  ARG  HD2', ' I  48  ARG  HD2', -0.523, (-30.166, -61.632, 59.585)), (' M 117  ALA  HB2', ' N  60  TRP  CE2', -0.523, (2.334, -35.187, 18.152)), (' M  73  THR HG23', ' O   8  LEU HD23', -0.515, (-13.295, -34.618, 16.176)), (' I 117  ALA  HB2', ' J  60  TRP  CE2', -0.513, (-10.36, -55.472, 54.708)), (' E 176  LYS  HG3', ' E 180  GLN  OE1', -0.512, (-38.359, -66.115, 14.701)), (' I 119  ASP  HB3', ' J   0  MET  HB3', -0.512, (-10.869, -54.503, 44.386)), (' E  73  THR HG23', ' G   8  LEU HD23', -0.511, (-20.11, -34.38, 17.956)), (' M 214  THR  HB ', ' M 262  GLN  HB2', -0.504, (23.962, -26.214, 2.664)), (' F  43  GLY  HA2', ' F 101  EDO  H11', -0.502, (-51.074, -39.847, 50.046)), (' I 178  THR  O  ', ' I 181  ARG  HG2', -0.502, (-25.284, -70.107, 74.136)), (' A  73  THR HG23', ' C   8  LEU HD23', -0.502, (-20.743, -35.04, 57.314)), (' B  73  THR  O  ', ' B  97 AARG  NH2', -0.502, (-24.376, 6.153, 27.003)), (' I  14  ARG  H  ', ' I 302  EDO  H12', -0.5, (-22.97, -49.057, 42.961)), (' M  98  MET  HE1', ' M 113  TYR  HB2', -0.495, (2.21, -33.493, 7.252)), (' A 301  EDO  H11', ' K   5  ARG  HD2', -0.494, (-19.9, -37.676, 65.729)), (' I  28  VAL HG11', ' I 179  LEU HD13', -0.491, (-24.038, -62.622, 73.392)), (' J  16  GLU  OE1', ' J  19  LYS  HE3', -0.484, (-32.853, -93.187, 62.261)), (' A 178  THR  O  ', ' A 181  ARG  HG2', -0.484, (-9.214, -2.661, 53.768)), (' A 234  ARG HH21', ' B 102  EDO  H22', -0.481, (-24.977, 2.211, 41.354)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.479, (-29.938, -21.852, 56.741)), (' A 114  HIS  CE1', ' C   3  GLN HE22', -0.477, (-18.542, -25.413, 62.365)), (' I   6  ARG  HD2', ' I  98  MET  HE1', -0.476, (-14.324, -58.058, 65.127)), (' E 178  THR  O  ', ' E 181  ARG  HG2', -0.469, (-42.166, -61.651, 21.037)), (' A 261  VAL  HB ', ' A 270  LEU  HB2', -0.468, (-23.89, 11.186, 55.629)), (' A  86  ASN  ND2', ' F  45  ARG  HB3', -0.465, (-42.168, -41.014, 51.52)), (' N  23  LEU  O  ', ' N  67  TYR  HA ', -0.461, (11.265, -8.274, 19.489)), (' M 109  PHE  HB2', ' M 165  VAL HG21', -0.452, (-0.374, -33.993, -4.883)), (' A  23  ILE HD13', ' A  37  ASP  HA ', -0.451, (-17.704, -24.473, 44.184)), (' E  74  HIS  NE2', ' E  97  ARG  HD3', -0.45, (-26.716, -38.623, 19.579)), (' M 131  ARG HH11', ' M 157  ARG HH12', -0.45, (-3.738, -46.535, -2.318)), (' E 301  EDO  H12', ' G   7  PHE  HB3', -0.448, (-20.681, -35.321, 10.989)), (' I 106  ASP  OD2', ' I 108  ARG  HD2', -0.447, (-11.677, -57.716, 84.846)), (' A  21  ARG  NH2', ' A  23  ILE HD11', -0.446, (-20.202, -23.367, 42.284)), (' F  17  ASN  ND2', ' F  74  GLU  HG3', -0.439, (-60.962, -55.381, 48.384)), (' C   5  ARG  HB2', ' C 101  EDO  H22', -0.439, (-13.995, -30.604, 64.486)), (' J  10  TYR  HB2', ' J 101  EDO  H12', -0.431, (-21.509, -82.96, 56.75)), (' E 117  ALA  HB2', ' F  60  TRP  CE2', -0.429, (-36.472, -33.706, 17.998)), (' E   9  PHE  HB2', ' E  97  ARG  HG2', -0.428, (-29.39, -39.469, 20.664)), (' M  13  SER  HB2', ' M  93  HIS  H  ', -0.428, (-6.018, -29.854, 29.369)), (' I 118  TYR  O  ', ' I 121  LYS  HG2', -0.428, (-8.243, -53.739, 48.392)), (' F  23  LEU  O  ', ' F  67  TYR  HA ', -0.427, (-45.741, -49.12, 39.947)), (' A  82  ARG  HD2', ' A  89  GLU  HA ', -0.426, (-32.758, -38.008, 46.06)), (' B  19  LYS  O  ', ' B  72  PRO  HD2', -0.426, (-16.956, 3.65, 29.195)), (' A 111  ARG  HD3', ' A 128  GLU  HG3', -0.425, (-24.671, -15.006, 69.437)), (' F  43  GLY  H  ', ' F 101  EDO  H22', -0.423, (-51.839, -42.279, 50.085)), (' I  73  THR HG23', ' K   8  LEU HD23', -0.423, (-18.374, -41.352, 55.38)), (' I  14  ARG  H  ', ' I 302  EDO  C1 ', -0.421, (-23.108, -49.426, 42.692)), (' E 146  LYS  HE2', ' E 301  EDO  H21', -0.416, (-18.922, -32.166, 10.274)), (' J  41  LYS  NZ ', ' J  78  TYR  OH ', -0.412, (-33.579, -86.186, 48.882)), (' B   4  THR HG22', ' B   5  PRO  HD2', -0.411, (-37.299, -13.463, 41.265)), (' I 117  ALA  HB2', ' J  60  TRP  CD2', -0.409, (-10.643, -55.909, 54.867)), (' J  39  LEU HD12', ' J  68  THR HG23', -0.409, (-30.952, -75.93, 49.791)), (' M 118  TYR  O  ', ' M 121  LYS  HG2', -0.409, (1.666, -37.0, 24.726)), (' E  19  GLU  CG ', ' E  75  ARG HH12', -0.406, (-19.28, -34.843, 31.705)), (' A  23  ILE HD11', ' A  37  ASP  OD1', -0.405, (-19.098, -24.082, 42.677)), (' I 146  LYS  HE2', ' I 303  EDO  C2 ', -0.405, (-12.809, -37.168, 58.031)), (' M  71  SER  O  ', ' M  75  ARG  HG3', -0.404, (-12.861, -28.23, 20.007)), (' J  48  LYS  HB3', ' J  48  LYS  HE3', -0.403, (-37.984, -74.971, 50.111)), (' M  76  VAL  HB ', ' O   8  LEU HD22', -0.403, (-14.432, -35.106, 19.291)), (' M  35  ARG  CZ ', ' M  46  GLU  OE1', -0.402, (-5.637, -11.877, 13.48)), (' E  33  PHE  CD2', ' E  34  VAL HG13', -0.4, (-29.665, -54.55, 22.739))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
