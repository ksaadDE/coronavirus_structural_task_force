# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 315 ', 'THR', 0.009504310126924473, (277.138, 253.25499999999997, 223.486)), ('A', ' 578 ', 'ASP', 0.0308602, (270.649, 230.5759999999999, 202.364)), ('A', ' 590 ', 'CYS', 0.035323625081493414, (277.828, 246.189, 213.573)), ('B', ' 315 ', 'THR', 0.0094113108558819, (157.64599999999987, 181.58199999999994, 223.487)), ('B', ' 578 ', 'ASP', 0.0308602, (164.1639999999999, 204.24299999999997, 202.35499999999996)), ('B', ' 590 ', 'CYS', 0.03598630496064769, (156.96599999999992, 188.64299999999994, 213.57)), ('H', ' 153 ', 'PRO', 0.1762761653636008, (213.78300000000004, 258.089, 214.395)), ('I', ' 153 ', 'PRO', 0.17724794184915618, (221.037, 176.95899999999995, 214.329))]
data['omega'] = [('H', ' 151 ', 'PRO', None, (208.21600000000007, 254.824, 217.258)), ('H', ' 153 ', 'PRO', None, (213.3180000000001, 256.703, 214.34399999999997)), ('I', ' 151 ', 'PRO', None, (226.635, 180.224, 217.131)), ('I', ' 153 ', 'PRO', None, (221.502, 178.345, 214.272)), ('L', '   8 ', 'PRO', None, (241.18600000000006, 252.78799999999995, 230.34699999999998)), ('L', ' 101 ', 'PRO', None, (232.745, 230.23899999999995, 224.01399999999995)), ('L', ' 147 ', 'PRO', None, (234.36300000000006, 271.656, 229.168)), ('M', '   8 ', 'PRO', None, (193.622, 182.00699999999995, 230.503)), ('M', ' 101 ', 'PRO', None, (201.929, 204.546, 223.962)), ('M', ' 147 ', 'PRO', None, (200.48, 163.151, 229.33399999999997))]
data['rota'] = [('H', '   2 ', 'MET', 0.0007670100987327696, (234.80500000000004, 237.58999999999997, 199.704)), ('H', '   6 ', 'GLN', 0.10777601967900867, (222.9410000000001, 241.43199999999993, 204.12)), ('A', ' 321 ', 'GLN', 0.05713035844041499, (274.373, 253.00399999999993, 210.52399999999994)), ('A', ' 525 ', 'CYS', 0.12841566971288884, (258.334, 229.32, 203.457)), ('A', ' 576 ', 'VAL', 0.007657194548946642, (273.411, 231.38899999999995, 207.80299999999997)), ('A', ' 590 ', 'CYS', 0.13580489500480838, (277.828, 246.189, 213.573)), ('B', ' 321 ', 'GLN', 0.05705953087726846, (160.41499999999994, 181.82299999999998, 210.52599999999998)), ('B', ' 525 ', 'CYS', 0.12846943712513273, (176.47999999999993, 205.48699999999994, 203.45)), ('B', ' 576 ', 'VAL', 0.007673786701682894, (161.39899999999992, 203.43599999999998, 207.793)), ('B', ' 590 ', 'CYS', 0.13592461884346002, (156.96599999999992, 188.64299999999994, 213.57)), ('I', '   2 ', 'MET', 0.0006845163003037951, (199.87099999999998, 197.455, 199.84199999999998)), ('I', '   6 ', 'GLN', 0.10814466655114181, (211.779, 193.611, 204.13699999999997))]
data['cbeta'] = [('A', ' 280 ', 'ASN', ' ', 0.2727991743379973, (258.119, 272.506, 220.56799999999998)), ('A', ' 578 ', 'ASP', ' ', 0.309277612561905, (271.14, 231.98099999999997, 201.98899999999995)), ('B', ' 280 ', 'ASN', ' ', 0.27360522957673855, (176.64699999999988, 162.31, 220.58499999999995)), ('B', ' 578 ', 'ASP', ' ', 0.30767767721879347, (163.6709999999999, 202.83799999999997, 201.98))]
data['probe'] = [(' H 174  LEU  O  ', ' H 174  LEU HD12', -1.055, (212.981, 258.006, 228.392)), (' I 174  LEU  O  ', ' I 174  LEU HD12', -1.052, (221.993, 177.123, 228.236)), (' A 541  PHE  CZ ', ' A 548  GLY  HA3', -0.81, (270.224, 240.519, 210.855)), (' B 541  PHE  CZ ', ' B 548  GLY  HA3', -0.809, (165.342, 194.472, 211.061)), (' B 395  VAL  CG1', ' B 515  PHE  HD1', -0.762, (182.399, 210.745, 207.66)), (' M 119  PRO  HB3', ' M 145  PHE  HB3', -0.758, (206.086, 159.002, 227.086)), (' B  67  ALA  O  ', ' B 262  ALA  HA ', -0.747, (156.611, 147.929, 191.012)), (' A 395  VAL  CG1', ' A 515  PHE  HD1', -0.746, (252.924, 223.764, 207.419)), (' A  67  ALA  O  ', ' A 262  ALA  HA ', -0.741, (277.745, 287.231, 191.248)), (' L 119  PRO  HB3', ' L 145  PHE  HB3', -0.733, (228.236, 276.042, 227.355)), (' H  91  THR  HA ', ' H 115  VAL  O  ', -0.716, (214.98, 245.542, 216.613)), (' I  91  THR  HA ', ' I 115  VAL  O  ', -0.716, (219.896, 189.306, 216.089)), (' A 395  VAL  CG1', ' A 515  PHE  CD1', -0.695, (251.941, 223.264, 207.232)), (' B 395  VAL  CG1', ' B 515  PHE  CD1', -0.685, (182.904, 211.676, 207.449)), (' A 395  VAL HG12', ' A 515  PHE  HD1', -0.677, (253.015, 223.492, 208.131)), (' A 472  ILE HG13', ' A 482  GLY  HA2', -0.661, (244.906, 183.827, 217.828)), (' B 472  ILE HG13', ' B 482  GLY  HA2', -0.66, (189.949, 250.941, 217.879)), (' B 395  VAL HG12', ' B 515  PHE  HD1', -0.66, (181.748, 211.183, 208.161)), (' I 218  LYS  NZ ', ' M 127  SER  OG ', -0.648, (231.431, 155.267, 221.338)), (' I 174  LEU  CD1', ' I 174  LEU  O  ', -0.629, (221.767, 177.692, 228.31)), (' I 141  ALA  HB3', ' M 124  PHE  HZ ', -0.629, (217.504, 155.805, 221.596)), (' B 395  VAL HG12', ' B 515  PHE  CD1', -0.623, (182.74, 211.62, 208.106)), (' A 395  VAL HG12', ' A 515  PHE  CD1', -0.618, (252.058, 223.066, 208.131)), (' H 174  LEU  CD1', ' H 174  LEU  O  ', -0.616, (213.458, 257.403, 228.521)), (' L 194  LYS  HG2', ' L 195  HIS  ND1', -0.614, (204.951, 278.495, 242.478)), (' M 194  LYS  HG2', ' M 195  HIS  ND1', -0.611, (230.078, 157.069, 242.124)), (' B 395  VAL HG11', ' B 515  PHE  CD1', -0.611, (182.868, 211.066, 207.131)), (' H  38  ARG  HB3', ' H  48  MET  HE2', -0.608, (222.648, 239.852, 217.564)), (' A  38  TYR  CD2', ' A 285  ILE HD12', -0.606, (259.859, 268.78, 210.442)), (' A 395  VAL HG11', ' A 515  PHE  CD1', -0.605, (251.924, 223.446, 207.149)), (' H 198  TYR  HB2', ' H 215  VAL  HB ', -0.598, (210.966, 279.122, 212.497)), (' I  38  ARG  HB3', ' I  48  MET  HE2', -0.596, (212.081, 195.591, 217.248)), (' B  38  TYR  CD2', ' B 285  ILE HD12', -0.596, (174.912, 165.593, 210.456)), (' B 395  VAL HG11', ' B 515  PHE  HD1', -0.587, (182.124, 211.206, 207.249)), (' I 198  TYR  HB2', ' I 215  VAL  HB ', -0.586, (223.886, 155.533, 211.892)), (' A  34  ARG  CZ ', ' A 191  GLU  OE2', -0.584, (268.987, 276.969, 206.503)), (' B  34  ARG  CZ ', ' B 191  GLU  OE2', -0.58, (165.46, 157.537, 206.005)), (' L 152  VAL HG11', ' L 183  SER  HB2', -0.579, (219.922, 271.337, 232.367)), (' A 395  VAL HG11', ' A 515  PHE  HD1', -0.574, (252.75, 223.783, 207.23)), (' M 152  VAL HG11', ' M 183  SER  HB2', -0.574, (215.12, 163.91, 231.925)), (' A  96  GLU  OE2', ' A 101  ILE  N  ', -0.56, (269.608, 283.403, 191.287)), (' A 599  THR HG22', ' A 601  GLY  H  ', -0.557, (279.127, 265.001, 231.538)), (' B  96  GLU  OE2', ' B 101  ILE  N  ', -0.556, (165.29, 151.313, 191.292)), (' B 599  THR HG22', ' B 601  GLY  H  ', -0.546, (155.91, 169.4, 231.86)), (' I 170  PHE  CE2', ' M 182  SER  HB2', -0.544, (215.469, 163.867, 223.535)), (' B 393  THR HG22', ' B 394  ASN HD22', -0.541, (174.227, 213.473, 210.184)), (' A  34  ARG  HD2', ' A 191  GLU  OE1', -0.539, (268.358, 275.851, 205.602)), (' B  34  ARG  HD2', ' B 191  GLU  OE1', -0.534, (166.41, 159.04, 205.559)), (' L  34  ILE HG22', ' L  36  LYS  HG2', -0.533, (252.238, 231.31, 217.252)), (' B 324  GLU  HB2', ' B 539  VAL HG22', -0.532, (161.172, 187.554, 202.66)), (' A 324  GLU  HB2', ' A 539  VAL HG22', -0.529, (273.058, 247.107, 202.43)), (' A 393  THR HG22', ' A 394  ASN HD22', -0.526, (260.414, 221.726, 210.378)), (' M  34  ILE HG22', ' M  36  LYS  HG2', -0.523, (181.965, 203.772, 217.245)), (' A  34  ARG  O  ', ' A  56  LEU HD23', -0.52, (272.129, 270.221, 207.263)), (' B  34  ARG  O  ', ' B  56  LEU HD23', -0.518, (163.157, 164.535, 207.304)), (' B 299  THR  CG2', ' B 315  THR  CG2', -0.515, (157.91, 178.21, 224.207)), (' B 589  PRO  C  ', ' B 591  SER  H  ', -0.515, (156.912, 189.562, 215.479)), (' A 589  PRO  C  ', ' A 591  SER  H  ', -0.51, (278.136, 244.597, 215.435)), (' H 170  PHE  CE2', ' L 182  SER  HB2', -0.508, (219.076, 270.991, 223.949)), (' L 195  HIS  O  ', ' L 217  ARG  NE ', -0.508, (203.108, 282.206, 237.209)), (' A 598  ILE  N  ', ' A 598  ILE HD12', -0.507, (282.921, 257.456, 229.743)), (' H  45  LEU HD11', ' L  50  PRO  HG2', -0.505, (231.587, 245.088, 216.3)), (' A 299  THR  CG2', ' A 315  THR  CG2', -0.505, (276.869, 256.736, 224.113)), (' B 598  ILE  N  ', ' B 598  ILE HD12', -0.503, (151.413, 177.591, 229.84)), (' B 576  VAL HG12', ' B 585  LEU  HB2', -0.502, (159.804, 201.014, 205.459)), (' A 576  VAL HG12', ' A 585  LEU  HB2', -0.5, (274.586, 233.658, 205.568)), (' M 195  HIS  O  ', ' M 217  ARG  NE ', -0.5, (231.87, 152.838, 237.06)), (' B  34  ARG  O  ', ' B  56  LEU  CD2', -0.499, (163.26, 164.591, 206.907)), (' A  34  ARG  O  ', ' A  56  LEU  CD2', -0.499, (271.512, 270.2, 206.917)), (' B 395  VAL  O  ', ' B 395  VAL HG23', -0.498, (180.63, 215.407, 205.499)), (' A  38  TYR  CD2', ' A 285  ILE  CD1', -0.494, (259.944, 268.709, 211.203)), (' B 312  ILE  O  ', ' B 312  ILE HG13', -0.494, (157.021, 181.03, 232.905)), (' A 395  VAL  O  ', ' A 395  VAL HG23', -0.494, (253.947, 219.276, 205.414)), (' H 174  LEU  C  ', ' H 174  LEU HD12', -0.492, (212.258, 257.794, 228.382)), (' A 328  ARG  NH1', ' A 533  LEU  HB2', -0.491, (272.55, 237.194, 197.378)), (' B  38  TYR  CD2', ' B 285  ILE  CD1', -0.491, (174.72, 166.139, 211.051)), (' B 296  LEU HD13', ' B 608  VAL HG11', -0.49, (155.25, 171.758, 226.452)), (' A 296  LEU HD13', ' A 608  VAL HG11', -0.488, (279.169, 262.948, 226.168)), (' A 641  ASN  HB3', ' A 653  ALA  O  ', -0.488, (293.57, 260.957, 229.078)), (' A 493  GLN  NE2', ' I  16  GLU  OE1', -0.488, (232.238, 194.911, 210.986)), (' B 328  ARG  NH1', ' B 533  LEU  HB2', -0.487, (162.258, 197.59, 197.326)), (' A 299  THR HG23', ' A 315  THR  CG2', -0.486, (277.084, 257.305, 224.146)), (' A 312  ILE  O  ', ' A 312  ILE HG13', -0.482, (277.683, 253.635, 232.845)), (' I 140  ALA  HA ', ' M 122  PHE  CE2', -0.481, (215.215, 151.497, 221.055)), (' I 174  LEU  C  ', ' I 174  LEU HD12', -0.479, (222.499, 177.196, 228.239)), (' B  38  TYR  HD2', ' B 285  ILE  CD1', -0.479, (175.295, 166.549, 210.902)), (' B 641  ASN  HB3', ' B 653  ALA  O  ', -0.478, (141.125, 173.92, 229.117)), (' B 299  THR HG23', ' B 315  THR  CG2', -0.478, (157.698, 177.5, 224.011)), (' A  38  TYR  HD2', ' A 285  ILE  CD1', -0.474, (259.884, 268.231, 211.107)), (' B  34  ARG  NH1', ' B 191  GLU  OE1', -0.469, (167.117, 157.941, 206.426)), (' A  34  ARG  NH1', ' A 191  GLU  OE1', -0.466, (267.705, 276.979, 206.326)), (' B 557  LYS  HB2', ' B 584  ILE HG21', -0.461, (154.926, 206.674, 208.189)), (' A 589  PRO  C  ', ' A 591  SER  N  ', -0.461, (278.08, 245.283, 215.383)), (' B 589  PRO  C  ', ' B 591  SER  N  ', -0.46, (156.64, 189.999, 215.114)), (' I 140  ALA  HA ', ' M 122  PHE  HE2', -0.456, (215.374, 151.458, 221.597)), (' B 246  ARG  NH2', ' B 254  SER  O  ', -0.456, (158.425, 148.328, 174.759)), (' B 490  PHE  CD1', ' B 491  PRO  HD2', -0.455, (192.408, 244.713, 214.912)), (' I   2  MET  HB2', ' I   2  MET  HE2', -0.454, (201.989, 199.031, 199.401)), (' H 148  ASP  HA ', ' H 179  LEU  HB2', -0.454, (205.967, 260.578, 223.327)), (' A 557  LYS  HB2', ' A 584  ILE HG21', -0.453, (279.575, 228.238, 207.869)), (' B 108  THR HG22', ' B 109  THR HG23', -0.453, (163.807, 175.595, 180.99)), (' A 246  ARG  NH2', ' A 254  SER  O  ', -0.453, (275.899, 286.339, 174.962)), (' A  56  LEU HD12', ' A  57  PRO  HD2', -0.452, (274.512, 266.704, 204.833)), (' A 108  THR HG22', ' A 109  THR HG23', -0.451, (270.921, 259.202, 180.527)), (' A 490  PHE  CD1', ' A 491  PRO  HD2', -0.451, (242.305, 190.145, 214.856)), (' I 139  THR  HA ', ' I 189  PRO  HA ', -0.449, (212.578, 148.399, 216.433)), (' L  91  VAL  HA ', ' L 108  THR  O  ', -0.448, (236.306, 253.354, 221.522)), (' I 148  ASP  HA ', ' I 179  LEU  HB2', -0.446, (229.122, 174.626, 223.053)), (' B  56  LEU HD12', ' B  57  PRO  HD2', -0.446, (159.882, 168.428, 204.858)), (' A 589  PRO  O  ', ' A 591  SER  N  ', -0.445, (278.744, 244.704, 215.227)), (' H 145  LEU HD13', ' H 183  SER  HB3', -0.445, (212.627, 270.443, 222.453)), (' M 155  LYS  HB2', ' M 199  ALA  HB3', -0.442, (219.277, 154.866, 238.428)), (' I 170  PHE  HE2', ' M 182  SER  HB2', -0.441, (215.475, 163.442, 223.596)), (' L 114  ARG  HG2', ' L 115  THR  N  ', -0.441, (240.327, 273.65, 223.913)), (' A  34  ARG  HD2', ' A 191  GLU  CD ', -0.44, (268.748, 275.861, 205.432)), (' B 185  ASN  HB2', ' B 212  LEU  O  ', -0.44, (158.406, 145.061, 202.56)), (' I 145  LEU HD13', ' I 183  SER  HB3', -0.44, (222.268, 164.579, 222.375)), (' B  34  ARG  HD2', ' B 191  GLU  CD ', -0.439, (165.825, 159.134, 205.83)), (' H 139  THR  HA ', ' H 189  PRO  HA ', -0.439, (222.218, 286.502, 216.813)), (' B 542  ASN  HA ', ' B 547  THR  HA ', -0.439, (168.675, 195.798, 208.432)), (' A 599  THR  OG1', ' A 608  VAL HG12', -0.438, (280.226, 262.808, 228.782)), (' H 141  ALA  HB3', ' L 124  PHE  HZ ', -0.438, (217.425, 279.316, 221.771)), (' L 155  LYS  HB2', ' L 199  ALA  HB3', -0.437, (215.567, 279.929, 238.359)), (' B 589  PRO  O  ', ' B 591  SER  N  ', -0.437, (156.15, 189.7, 215.336)), (' M  91  VAL  HA ', ' M 108  THR  O  ', -0.437, (198.414, 181.53, 221.629)), (' M 194  LYS  HG2', ' M 195  HIS  HD1', -0.436, (229.588, 156.887, 242.242)), (' L 196  LYS  HA ', ' L 217  ARG  HG3', -0.436, (205.246, 283.666, 237.098)), (' H   2  MET  HB2', ' H   2  MET  HE2', -0.434, (232.656, 236.226, 199.311)), (' M 114  ARG  HG2', ' M 115  THR  N  ', -0.433, (194.857, 161.12, 223.913)), (' M 119  PRO  HB2', ' M 142  LEU HD22', -0.432, (208.76, 158.08, 228.976)), (' I 172  ALA  HB1', ' I 180  TYR  HB3', -0.432, (221.415, 174.973, 221.66)), (' A 542  ASN  HA ', ' A 547  THR  HA ', -0.43, (265.999, 239.125, 208.385)), (' A 185  ASN  HB2', ' A 212  LEU  O  ', -0.43, (276.14, 290.162, 202.325)), (' B 599  THR  OG1', ' B 608  VAL HG12', -0.43, (154.758, 172.487, 228.807)), (' M 196  LYS  HA ', ' M 217  ARG  HG3', -0.429, (229.72, 151.411, 236.558)), (' H  16  GLU  O  ', ' H  85  SER  HA ', -0.429, (207.669, 235.394, 216.168)), (' I  16  GLU  O  ', ' I  85  SER  HA ', -0.429, (226.963, 199.843, 216.357)), (' A 472  ILE HD12', ' A 484  GLU  HG2', -0.428, (241.891, 185.07, 215.841)), (' L 114  ARG HH22', ' L 117  ALA  HB2', -0.428, (235.161, 275.869, 224.196)), (' B 541  PHE  CE2', ' B 548  GLY  C  ', -0.427, (164.061, 193.365, 210.477)), (' H 172  ALA  HB1', ' H 180  TYR  HB3', -0.427, (213.14, 260.036, 221.977)), (' B 642  VAL HG22', ' B 651  ILE HG12', -0.426, (142.017, 178.306, 223.954)), (' M 142  LEU HD21', ' M 202  VAL HG11', -0.426, (211.153, 157.876, 231.549)), (' A 642  VAL HG22', ' A 651  ILE HG12', -0.426, (292.764, 256.517, 223.932)), (' B 115  GLN HE22', ' B 167  THR HG23', -0.426, (178.245, 172.525, 179.118)), (' A 541  PHE  CE2', ' A 548  GLY  C  ', -0.425, (270.448, 241.774, 210.512)), (' M 114  ARG HH22', ' M 117  ALA  HB2', -0.425, (199.646, 158.985, 224.476)), (' B 472  ILE HD12', ' B 484  GLU  HG2', -0.424, (192.963, 249.76, 215.893)), (' B 503  VAL  HA ', ' B 506  GLN  OE1', -0.423, (207.147, 226.429, 199.175)), (' L 119  PRO  HB2', ' L 142  LEU HD22', -0.423, (226.03, 276.808, 228.829)), (' L 142  LEU HD21', ' L 202  VAL HG11', -0.423, (224.009, 276.916, 231.159)), (' L  18  ARG  HB3', ' L  18  ARG  HE ', -0.421, (251.269, 256.755, 223.897)), (' B 100  ILE HD11', ' B 245  HIS  HE1', -0.42, (162.389, 145.46, 188.407)), (' A 115  GLN HE22', ' A 167  THR HG23', -0.419, (256.979, 262.22, 179.061)), (' B 102  ARG  HD2', ' B 121  ASN  O  ', -0.419, (170.741, 152.011, 186.528)), (' A 100  ILE HD11', ' A 245  HIS  HE1', -0.418, (272.171, 289.028, 188.626)), (' A 102  ARG  HD2', ' A 121  ASN  O  ', -0.416, (263.981, 282.878, 186.546)), (' A 503  VAL  HA ', ' A 506  GLN  OE1', -0.415, (227.662, 208.527, 199.203)), (' A  78  ARG  HA ', ' A  78  ARG  HD2', -0.415, (284.239, 280.774, 186.677)), (' B 206  LYS  HB3', ' B 223  LEU HD22', -0.414, (170.701, 159.086, 204.522)), (' B 218  GLN  HB3', ' B 218  GLN HE21', -0.414, (158.998, 156.719, 213.457)), (' B  34  ARG  NE ', ' B 191  GLU  OE2', -0.413, (165.012, 158.161, 206.538)), (' B 578  ASP  OD1', ' B 579  PRO  HD2', -0.412, (166.178, 203.421, 200.679)), (' L 121  VAL HG21', ' L 202  VAL HG21', -0.412, (224.364, 279.248, 232.042)), (' B 454  ARG  HD3', ' B 457  ARG  HG3', -0.411, (191.372, 237.08, 218.204)), (' I  20  ILE HD12', ' I  83  TRP  HZ3', -0.41, (217.642, 196.287, 212.529)), (' A  34  ARG  NE ', ' A 191  GLU  OE2', -0.409, (269.753, 276.544, 206.484)), (' B 105  ILE HD11', ' B 239  GLN HE21', -0.409, (163.411, 163.434, 182.196)), (' H  20  ILE HD12', ' H  83  TRP  HZ3', -0.408, (217.235, 238.715, 212.609)), (' A 206  LYS  HB3', ' A 223  LEU HD22', -0.408, (263.814, 276.084, 204.519)), (' B 216  LEU HD12', ' B 217  PRO  HD2', -0.408, (160.456, 155.762, 204.104)), (' A 310  LYS  HG3', ' A 310  LYS  O  ', -0.407, (276.673, 261.093, 236.757)), (' A 216  LEU HD12', ' A 217  PRO  HD2', -0.406, (274.164, 279.261, 204.429)), (' L  52  LEU  HA ', ' L  52  LEU HD12', -0.406, (239.743, 243.837, 214.035)), (' L 156  VAL  O  ', ' L 156  VAL HG23', -0.406, (210.353, 277.562, 242.75)), (' B 310  LYS  HG3', ' B 310  LYS  O  ', -0.405, (158.099, 173.824, 236.835)), (' B 578  ASP  HA ', ' B 579  PRO  HD3', -0.404, (165.863, 204.11, 202.598)), (' B  50  SER  HB2', ' B 304  LYS  NZ ', -0.404, (170.628, 177.585, 219.308)), (' M 121  VAL HG21', ' M 202  VAL HG21', -0.404, (210.523, 155.524, 232.181)), (' H 136  SER  O  ', ' H 190  SER  HB3', -0.403, (220.961, 291.282, 216.979)), (' A 299  THR  CG2', ' A 315  THR HG22', -0.403, (276.51, 256.801, 224.499)), (' M 197  VAL  O  ', ' M 197  VAL HG23', -0.402, (224.562, 152.956, 239.4)), (' A 578  ASP  HA ', ' A 579  PRO  HD3', -0.401, (268.951, 230.674, 202.67)), (' M 156  VAL  O  ', ' M 156  VAL HG23', -0.4, (224.79, 157.709, 242.468)), (' M 156  VAL HG12', ' M 198  TYR  CD2', -0.4, (225.085, 157.515, 237.25)), (' A 299  THR HG22', ' A 315  THR  CG2', -0.4, (276.692, 256.413, 224.975))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
