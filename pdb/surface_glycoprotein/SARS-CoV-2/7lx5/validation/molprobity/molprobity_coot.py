# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A  15  GLY  HA2', ' A  84  SER  HA ', -0.785, (79.597, 41.871, 66.022)), (' A  90  THR HG22', ' A 121  VAL  H  ', -0.702, (84.007, 48.577, 74.108)), (' A  96  ALA  HB1', ' A 110  PHE  HB3', -0.686, (71.546, 67.109, 71.235)), (' B 409  GLN  HA ', ' B 414  GLN  HG2', -0.678, (70.637, 83.234, 72.718)), (' A  29  PHE  O  ', ' A  71  ARG  NH2', -0.673, (59.285, 63.864, 69.911)), (' B 498  GLN  OE1', ' C  28  THR  OG1', -0.574, (88.846, 69.852, 88.932)), (' C  93  VAL HG22', ' C 125  GLN  HG2', -0.56, (66.35, 81.525, 105.918)), (' A  99  ARG  NH2', ' A 109  ASP  OD2', -0.531, (70.037, 76.444, 69.498)), (' C  60  TYR  OH ', ' C  70  ALA  N  ', -0.524, (86.302, 87.235, 107.461)), (' B 457  ARG  NE ', ' B 467  ASP  OD2', -0.507, (80.867, 97.339, 75.579)), (' A  47  TRP  CZ3', ' A 108  ARG  HD3', -0.501, (73.47, 66.505, 62.549)), (' A   5  GLN  O  ', ' A  22  CYS  HA ', -0.496, (67.594, 57.056, 78.711)), (' B 457  ARG  NH1', ' B 459  SER  O  ', -0.496, (77.224, 98.267, 76.377)), (' A  82  MET  HE3', ' A  85  LEU HD11', -0.477, (77.234, 48.236, 71.085)), (' A  48  VAL HG13', ' A  63  VAL HG21', -0.469, (76.737, 55.983, 64.266)), (' C 129  SER  OG ', ' C 130  SER  N  ', -0.463, (63.781, 88.784, 119.885)), (' A  33  LEU  HB3', ' A  98  ASP  HB2', -0.461, (66.683, 68.056, 67.248)), (' A  33  LEU  HB3', ' A  98  ASP  CB ', -0.453, (66.47, 68.171, 67.323)), (' A  33  LEU HD13', ' A  52  TYR  CD1', -0.451, (66.285, 65.545, 63.179)), (' A  51  ILE HG21', ' A  71  ARG  HB2', -0.438, (63.014, 58.634, 66.369)), (' B 461  LEU HD23', ' B 462  LYS  O  ', -0.437, (77.519, 94.986, 69.852)), (' B 466  ARG  HG3', ' B 466  ARG  O  ', -0.437, (86.392, 95.086, 69.601)), (' B 392  PHE  O  ', ' B 524  VAL  HB ', -0.431, (80.805, 85.504, 47.561)), (' B 353  TRP  O  ', ' B 466  ARG  NH1', -0.424, (87.992, 90.084, 67.421)), (' A 105  TRP  HB3', ' A 106  PRO  HD3', -0.423, (68.64, 68.512, 55.86)), (' A  29  PHE  CZ ', ' A  78  VAL HG13', -0.421, (63.044, 59.694, 71.958)), (' A  66  ARG HH21', ' A  85  LEU  HA ', -0.419, (80.274, 47.345, 66.974)), (' B 382  VAL HG22', ' B 383  SER  H  ', -0.417, (69.426, 79.642, 52.33)), (' C   5  GLN  O  ', ' C  22  CYS  HA ', -0.415, (78.974, 74.941, 104.707)), (' B 406  GLU  OE1', ' B 495  TYR  OH ', -0.411, (80.261, 81.952, 78.009)), (' A   9  GLY  HA2', ' A  18  LEU HD13', -0.411, (75.774, 48.202, 75.957)), (' B 370  ASN  N  ', ' B 370  ASN  OD1', -0.4, (77.464, 66.751, 55.22)), (' B 474  GLN  NE2', ' B 478  THR  O  ', -0.4, (81.742, 103.294, 93.066)), (' A  52  TYR  OH ', ' A 105  TRP  O  ', -0.4, (70.222, 66.921, 60.265))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
