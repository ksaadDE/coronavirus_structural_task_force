# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', ' 135 ', 'GLY', 0.08407536593986573, (-2.626000000000001, -12.945, -8.775))]
data['omega'] = [('H', ' 135 ', 'GLY', None, (-3.8039999999999994, -12.221999999999996, -9.236)), ('H', ' 137 ', 'ALA', None, (-2.974000000000002, -16.183, -5.704)), ('H', ' 140 ', 'THR', None, (-8.960000000000004, -19.121, 0.4020000000000001)), ('H', ' 155 ', 'PRO', None, (17.496000000000006, 9.298, -10.319)), ('H', ' 157 ', 'PRO', None, (16.278, 8.38, -4.224)), ('H', ' 197 ', 'PRO', None, (-11.211000000000004, -6.329, -1.746)), ('L', ' 140 ', 'PRO', None, (15.153999999999998, -18.797000000000004, 8.81))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' H  11  LEU HD11', ' H 120  VAL  CG1', -0.95, (21.846, 12.079, -12.097)), (' H  11  LEU HD11', ' H 120  VAL HG12', -0.887, (23.049, 12.143, -11.393)), (' H 120  VAL HG22', ' H 122  ALA  H  ', -0.752, (24.41, 10.764, -15.497)), (' A 333  THR  O  ', ' A 701  HOH  O  ', -0.738, (50.171, 33.33, 29.358)), (' L 135  LEU HD11', ' L 145  VAL HG22', -0.698, (11.132, -17.392, -3.355)), (' H 195  PRO  O  ', ' H 199  GLU  N  ', -0.66, (-12.449, -3.134, 1.275)), (' L 107  ARG  NH1', ' L 108  ALA  O  ', -0.641, (11.274, -17.23, 13.061)), (' H  11  LEU  CD1', ' H 120  VAL HG12', -0.632, (22.301, 12.495, -11.062)), (' A 518  LEU HD22', ' L  67  VAL HG21', -0.619, (37.502, 9.074, 32.425)), (' H 139  GLN  HG2', ' H 140  THR  HA ', -0.603, (-9.597, -16.948, 1.099)), (' L 189  ASN  OD1', ' L 209  ASN  OD1', -0.588, (-2.033, -21.766, -18.639)), (' A 517  LEU  H  ', ' A 517  LEU HD23', -0.587, (36.919, 13.565, 38.01)), (' L 145  VAL HG23', ' L 174  MET  HE1', -0.587, (13.95, -16.325, -4.114)), (' L 145  VAL  CG2', ' L 174  MET  HE1', -0.567, (13.926, -15.589, -4.161)), (' L 180  LEU HD11', ' L 185  TYR  HB2', -0.558, (5.829, -12.065, -20.696)), (' H 192  PRO  HB2', ' H 195  PRO  HD2', -0.545, (-8.962, -7.702, 6.177)), (' L  24  LYS  HE2', ' L  70  ASP  OD1', -0.525, (40.786, 0.527, 23.687)), (' L 146  LYS  HB3', ' L 146  LYS  NZ ', -0.522, (11.855, -23.916, -8.046)), (' H 139  GLN  CG ', ' H 140  THR  HA ', -0.519, (-9.913, -16.617, 0.707)), (' H 141  ASN  HB2', ' H 143  MET  O  ', -0.518, (-5.37, -13.959, 2.209)), (' L 182  LYS  O  ', ' L 186  GLU  HG3', -0.512, (3.098, -11.366, -24.758)), (' H 194  SER  OG ', ' H 195  PRO  HD3', -0.51, (-11.226, -7.722, 6.362)), (' H 120  VAL HG11', ' H 154  PHE  CE2', -0.509, (22.071, 9.832, -12.6)), (' L 109  ASP  OD2', ' L 198  LYS  HE3', -0.508, (14.827, -23.592, 10.864)), (' H 192  PRO  O  ', ' H 195  PRO  HD2', -0.502, (-8.786, -7.677, 4.75)), (' H  86  LEU  CD2', ' H 117  LEU HD21', -0.491, (25.762, 17.011, -4.681)), (' H 143  MET  HE2', ' H 192  PRO  HA ', -0.469, (-6.299, -10.602, 6.567)), (' H 120  VAL HG11', ' H 154  PHE  HE2', -0.444, (21.647, 10.333, -12.329)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.442, (27.706, 26.425, 31.508)), (' L  61  ARG  HB2', ' L  76  THR  O  ', -0.441, (18.051, -3.533, 27.062)), (' A 440  ASN  OD1', ' A 441  LEU  HG ', -0.436, (24.85, 44.963, 37.547)), (' L 131  VAL  CG1', ' L 178  LEU  HB3', -0.435, (8.084, -13.271, -13.806)), (' A 480  CYS  O  ', ' A 483  VAL HG12', -0.434, (-3.261, 22.625, 19.4)), (' H  86  LEU HD21', ' H 117  LEU HD21', -0.428, (26.161, 17.662, -4.405)), (' A 517  LEU  HG ', ' A 517  LEU  O  ', -0.426, (38.133, 11.892, 38.663)), (' A 393  THR HG22', ' A 516  GLU  O  ', -0.425, (39.569, 15.748, 35.251)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.424, (45.001, 11.514, 30.133)), (' L 194  GLU  HG2', ' L 205  VAL HG22', -0.421, (6.579, -24.248, -6.826)), (' L 146  LYS  HB3', ' L 146  LYS  HZ1', -0.421, (12.37, -23.864, -7.561)), (' L  11  MET  HG3', ' L 101  THR  CG2', -0.418, (28.06, -5.913, 16.716)), (' H 134  PRO  HA ', ' H 135  GLY  HA3', -0.414, (-2.481, -11.832, -7.247)), (' L 131  VAL HG13', ' L 178  LEU  HB3', -0.413, (8.518, -13.49, -13.431)), (' L  54  ARG  HG2', ' L  58  VAL  HB ', -0.412, (18.33, 7.409, 27.43)), (' L 180  LEU  CD1', ' L 185  TYR  HB2', -0.41, (6.405, -11.67, -20.562)), (' H 151  LYS  HA ', ' H 184  THR HG23', -0.408, (10.818, -0.658, -11.409)), (' L 168  LYS  HA ', ' L 168  LYS  HD2', -0.408, (8.618, -5.357, 16.307)), (' L 144  ASN  HB3', ' L 196  THR  OG1', -0.404, (15.136, -22.925, -2.703)), (' A 334  ASN  ND2', ' A 701  HOH  O  ', -0.401, (49.659, 33.108, 28.076))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
