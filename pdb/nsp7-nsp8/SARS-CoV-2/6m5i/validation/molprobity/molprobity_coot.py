# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  26 ', 'SER', 0.004631251900370585, (-32.341, -27.386, -9.607)), ('A', '  65 ', 'ALA', 0.01046121722700502, (-22.229, -17.062, 0.079)), ('A', '  80 ', 'ALA', 0.014031224929407124, (-0.9009999999999999, -23.532, 12.576)), ('B', ' 104 ', 'ASP', 0.013971984421250791, (-1.329, -25.371, -6.581)), ('B', ' 128 ', 'THR', 0.00795109315584696, (-15.980999999999995, -24.418, -24.762)), ('B', ' 161 ', 'ILE', 0.06122846584764061, (-13.572999999999999, -9.0, -25.183)), ('B', ' 174 ', 'LEU', 0.013609886738281575, (-12.34, -0.07700000000000003, -24.998)), ('B', ' 177 ', 'ILE', 0.007423357336000725, (-11.199, 2.453, -20.347))]
data['omega'] = [('B', ' 188 ', 'PRO', None, (-18.078, -0.6160000000000002, -10.851))]
data['rota'] = [('A', '  39 ', 'ILE', 0.0, (-13.972999999999997, -35.03, -13.158))]
data['cbeta'] = []
data['probe'] = [(' B 119  CYS  SG ', ' B 321  HOH  O  ', -0.896, (-11.823, -10.13, -13.903)), (' B  95  MET  SD ', ' B 320  HOH  O  ', -0.748, (-8.046, -27.631, 6.464)), (' A  62  MET  O  ', ' A 101  HOH  O  ', -0.733, (-19.624, -14.875, -3.651)), (' B 173  GLN  OE1', ' B 301  HOH  O  ', -0.72, (-15.115, 0.069, -28.441)), (' A  25  SER  O  ', ' A  27  LYS  N  ', -0.671, (-30.353, -25.837, -10.562)), (' A  76  LEU  O  ', ' A  79  ARG  NH1', -0.649, (-1.722, -16.374, 10.371)), (' A  18  GLN  NE2', ' A  23  GLU  OE2', -0.645, (-28.296, -31.298, -1.19)), (' A  53  VAL HG23', ' B 111  ILE HD13', -0.614, (-11.206, -21.313, -12.145)), (' A  50  GLU  O  ', ' A  53  VAL HG12', -0.6, (-11.894, -25.617, -15.843)), (' B  89  THR HG22', ' B  93  GLN  OE1', -0.597, (-19.892, -23.655, 4.174)), (' B  83  ASP  N  ', ' B  83  ASP  OD2', -0.575, (-26.421, -22.585, 15.711)), (' A   3  MET  HB2', ' A  45  THR HG22', -0.574, (-4.343, -36.629, -13.104)), (' B  91  ALA  O  ', ' B  95  MET  HE2', -0.567, (-12.017, -26.796, 7.556)), (' A   3  MET  HE1', ' A  44  ASP  N  ', -0.564, (-7.671, -37.707, -16.681)), (' B 178  SER  OG ', ' B 179  MET  O  ', -0.561, (-6.65, 6.957, -21.595)), (' A  13  LEU HD23', ' A  55  LEU HD23', -0.56, (-15.679, -28.171, -7.793)), (' A   1  SER  OG ', ' A   2  LYS  N  ', -0.549, (-2.02, -36.734, -9.615)), (' A   2  LYS  HG2', ' A   5  ASP  HB2', -0.544, (-3.823, -33.568, -6.453)), (' B 165  VAL HG12', ' B 171  ILE HD13', -0.543, (-22.156, -2.665, -22.673)), (' B 166  ASP  HB2', ' B 186  ALA  HB3', -0.541, (-20.428, 3.124, -15.619)), (' B 182  SER  HA ', ' B 185  LEU HD12', -0.54, (-11.962, 4.323, -16.938)), (' A   3  MET  SD ', ' A  45  THR  HA ', -0.51, (-6.357, -35.462, -14.385)), (' B 139  ASP  HB2', ' B 142  THR  OG1', -0.507, (-8.993, -4.137, -10.359)), (' B  97  PHE  HA ', ' B 100  LEU  HB2', -0.504, (-8.853, -24.109, -2.056)), (' B 179  MET  O  ', ' B 180  ASP  HB2', -0.503, (-6.715, 9.145, -20.594)), (' B 108  LEU  O  ', ' B 111  ILE HG12', -0.497, (-8.513, -19.891, -9.778)), (' B  87  LYS  HA ', ' B  90  SER  HB3', -0.487, (-17.761, -22.693, 10.901)), (' A  16  VAL HG21', ' B  96  LEU HD22', -0.484, (-15.951, -26.358, -0.308)), (' A  12  VAL  O  ', ' A  16  VAL HG23', -0.477, (-17.353, -28.479, -0.144)), (' B  83  ASP  O  ', ' B  87  LYS  HG3', -0.473, (-21.643, -22.927, 14.326)), (' B  97  PHE  HA ', ' B 100  LEU HD12', -0.472, (-9.986, -24.007, -1.924)), (' A  21  ARG  NH1', ' A 102  HOH  O  ', -0.466, (-27.752, -21.64, 5.667)), (' B 144  LYS  HA ', ' B 144  LYS  HD3', -0.46, (-5.121, -2.83, -18.213)), (' A  71  LEU  O  ', ' A  75  MET  HG2', -0.46, (-8.979, -18.056, 5.303)), (' B 174  LEU  HA ', ' B 177  ILE HD12', -0.453, (-12.906, -0.531, -23.003)), (' B 137  ILE HD13', ' B 191  VAL HG23', -0.449, (-14.022, -6.817, -17.23)), (' A  25  SER  C  ', ' A  27  LYS  H  ', -0.441, (-31.323, -25.383, -9.859)), (' B 187  TRP  CE3', ' B 189  LEU  HG ', -0.44, (-14.457, -0.38, -14.482)), (' B  90  SER  O  ', ' B  94  THR  OG1', -0.433, (-13.51, -22.776, 7.352)), (' B  85  ARG  NH2', ' B  88  VAL HG21', -0.431, (-21.823, -29.903, 11.172)), (' A  43  LYS  HA ', ' A  43  LYS  HD2', -0.429, (-8.837, -41.247, -15.997)), (' A  57  SER  CB ', ' B 125  ILE HG13', -0.428, (-16.032, -20.104, -13.205)), (' B 158  LEU  HA ', ' B 158  LEU HD23', -0.421, (-6.847, -15.15, -22.656)), (' B 132  LYS  NZ ', ' B 134  MET  SD ', -0.418, (-23.199, -13.541, -19.77)), (' A  59  LEU HD11', ' A  66  VAL HG21', -0.417, (-18.027, -21.084, -1.245)), (' B 152  PHE  HB3', ' B 159  TRP  HB2', -0.411, (-11.011, -12.745, -22.11)), (' B 164  VAL HG22', ' B 191  VAL HG22', -0.408, (-15.0, -5.823, -20.302)), (' A  35  LEU  O  ', ' A  39  ILE HG23', -0.407, (-16.105, -32.735, -12.411)), (' B 194  LEU  HA ', ' B 194  LEU HD23', -0.402, (-16.877, -16.204, -24.708)), (' B 159  TRP  HA ', ' B 194  LEU  O  ', -0.402, (-12.23, -15.509, -24.952))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
