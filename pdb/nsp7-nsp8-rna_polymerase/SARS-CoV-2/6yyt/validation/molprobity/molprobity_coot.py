# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (93.77700000000006, 117.381, 117.10599999999998)), ('B', ' 183 ', 'PRO', None, (116.458, 104.639, 124.24)), ('D', ' 183 ', 'PRO', None, (122.311, 84.952, 152.684))]
data['rota'] = [('A', ' 246 ', 'THR', 0.24595925941595084, (114.83, 110.637, 89.62599999999999)), ('A', ' 371 ', 'LEU', 0.02691128465042977, (87.456, 126.817, 115.475)), ('A', ' 440 ', 'PHE', 0.24999709296586164, (99.299, 84.587, 117.302)), ('A', ' 491 ', 'ASN', 0.0, (71.847, 115.32499999999999, 104.854))]
data['cbeta'] = []
data['probe'] = [(' B  44  VAL HG22', " U  15    G  H4'", -0.692, (28.541, 99.956, 112.107)), (' C  58  VAL HG22', ' D 119  ILE HG12', -0.635, (115.541, 87.85, 131.658)), (' B  40  LYS  O  ', ' B  44  VAL HG23', -0.599, (26.898, 98.951, 115.012)), (" P   5    C  H2'", ' P   6    A  C8 ', -0.599, (57.198, 86.94, 107.279)), (' D 157  GLN  HG3', ' D 189  LEU HD23', -0.579, (132.308, 83.393, 134.786)), (' A 605  VAL HG21', ' A 756  MET  HE2', -0.575, (88.764, 86.786, 89.416)), (' D 131  VAL HG12', ' D 185  ILE HG13', -0.555, (122.325, 86.484, 145.418)), (' C  71  LEU HD21', ' D  88  GLN  HB3', -0.553, (100.023, 82.1, 139.43)), (' C   2  LYS  O  ', ' C   6  VAL HG23', -0.529, (105.952, 73.116, 124.037)), (' D 109  ASN  O  ', ' D 114  CYS  N  ', -0.516, (115.958, 79.034, 144.901)), (' A 606  TYR  HE1', ' A 614  LEU HD21', -0.514, (90.527, 82.14, 86.043)), (' A 491  ASN  N  ', ' A 491  ASN  OD1', -0.512, (72.249, 116.811, 104.104)), (' D 101  ASP  OD1', ' D 102  ALA  N  ', -0.51, (115.842, 70.475, 131.708)), (' A 335  VAL  O  ', ' A 338  VAL HG12', -0.501, (92.614, 138.083, 119.596)), (' D 117  LEU HD11', ' D 131  VAL HG13', -0.501, (120.621, 86.829, 143.735)), (' A 531  THR HG21', ' A 567  THR HG21', -0.501, (87.257, 120.013, 103.92)), (' A 330  VAL HG11', ' B 117  LEU HD13', -0.493, (102.948, 127.547, 110.563)), (' A 726  ARG  NH2', ' A 744  GLU  OE2', -0.488, (92.598, 100.016, 66.845)), (' A 900  LEU  O  ', ' A 900  LEU HD23', -0.487, (69.215, 76.264, 137.996)), (' A 303  ASP  N  ', ' A 303  ASP  OD1', -0.484, (93.719, 121.175, 81.751)), (' A 254  GLU  OE1', ' A 286  TYR  OH ', -0.484, (121.494, 120.999, 86.81)), (' C  13  LEU HD23', ' C  55  LEU  HB3', -0.482, (108.737, 82.699, 129.484)), (' A 242  MET  SD ', ' A 312  ASN  ND2', -0.482, (107.856, 113.389, 83.004)), (' A 628  ASN  HB3', ' A 663  LEU HD21', -0.479, (102.279, 113.195, 95.889)), (' A 503  GLY  O  ', ' A 507  ASN  N  ', -0.476, (90.984, 113.776, 118.373)), (' A 676  LYS  NZ ', ' A 681  SER  OG ', -0.474, (99.388, 109.311, 104.732)), (' A 647  SER  OG ', ' A 648  LEU  N  ', -0.472, (85.843, 125.087, 87.814)), (' A 859  PHE  HA ', ' A 862  LEU HD12', -0.462, (84.48, 81.369, 116.257)), (' C  71  LEU HD23', ' D  92  PHE  HE2', -0.459, (102.928, 81.194, 140.578)), (' A 340  PHE  CD2', ' A 380  MET  HE1', -0.458, (94.143, 131.041, 116.467)), (' B 132  ILE HG21', ' B 138  TYR  HB2', -0.456, (123.924, 109.762, 122.314)), (' B  58  LYS  HG2', ' B  62  MET  HE3', -0.455, (50.38, 110.483, 115.998)), (' D 127  LYS  HD2', ' D 189  LEU HD21', -0.454, (130.917, 85.674, 133.408)), (' A 689  TYR  O  ', ' A 693  VAL HG23', -0.442, (90.996, 103.21, 93.309)), (' A 340  PHE  HD2', ' A 380  MET  HE1', -0.442, (94.305, 130.697, 115.972)), (' A 852  GLY  O  ', ' A 853  THR  OG1', -0.441, (79.369, 85.106, 128.971)), (' B 141  THR  OG1', ' B 142  CYS  N  ', -0.437, (124.818, 114.67, 119.837)), (' A 633  MET  O  ', ' A 637  VAL HG23', -0.433, (93.446, 109.385, 88.202)), (' A 601  MET  O  ', ' A 605  VAL HG23', -0.432, (85.524, 86.607, 88.387)), (' A 631  ARG  HD3', ' A 680  THR HG22', -0.432, (98.187, 107.17, 97.871)), (" P   5    C  H2'", ' P   6    A  H8 ', -0.432, (57.569, 87.267, 107.757)), (' C  36  HIS  CE1', ' C  40  LEU HD11', -0.432, (103.749, 85.885, 121.196)), (' B  59  LEU  HA ', ' B  62  MET  HG2', -0.425, (51.184, 111.954, 118.471)), (' A 626  MET  HE3', ' A 680  THR HG21', -0.424, (98.935, 104.598, 97.223)), (' B  56  GLN  O  ', ' B  59  LEU  HG ', -0.423, (47.249, 110.164, 121.312)), (' A 711  ASP  OD1', ' A 713  ASN  ND2', -0.423, (111.288, 94.087, 64.513)), (' D 159  VAL HG22', ' D 186  VAL HG22', -0.421, (129.619, 81.793, 145.08)), (' A 374  TYR  HB3', ' A 380  MET  HE3', -0.42, (93.941, 128.254, 115.131)), (' A 278  GLU  N  ', ' A 278  GLU  OE1', -0.419, (113.898, 130.459, 91.405)), (' C  71  LEU HD23', ' D  92  PHE  CE2', -0.416, (102.774, 80.978, 140.568)), (' A 540  THR HG21', ' A 665  GLU  OE1', -0.413, (97.39, 112.398, 107.197)), (' A 155  ASP  N  ', ' A 155  ASP  OD1', -0.412, (133.421, 93.514, 93.407)), (' A 575  LEU HD22', ' A 641  LYS  HG3', -0.408, (83.884, 109.163, 90.7)), (" P   6    A  H2'", ' P   7    U  C6 ', -0.408, (60.323, 90.132, 105.139)), (' A 209  ASN  ND2', ' A 218  ASP  OD2', -0.408, (119.747, 108.174, 65.142)), (' C  54  SER  O  ', ' C  58  VAL HG23', -0.408, (114.095, 84.907, 131.383)), (' B 177  SER  N  ', ' B 178  PRO  CD ', -0.406, (127.06, 100.522, 128.625)), (' B  52  ASP  HA ', ' B  55  MET  HG3', -0.405, (41.401, 108.421, 117.826)), (' A 707  LEU  O  ', ' A 724  GLN  NE2', -0.405, (104.757, 95.628, 70.845)), (' A 715  ILE  O  ', ' A 721  ARG  NH2', -0.404, (103.21, 89.796, 62.038)), (' B 126  ALA  O  ', ' B 190  ARG  N  ', -0.404, (117.036, 126.754, 124.607)), (' A 623  ASP  N  ', ' A 623  ASP  OD1', -0.4, (101.833, 100.254, 102.085))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
