# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 319 ', 'ILE', 0.04160153947590683, (223.363, 275.619, 296.969)), ('A', ' 600 ', 'ASP', 0.013888734420519487, (243.92, 286.336, 260.532)), ('A', ' 969 ', 'PRO', 0.07948823149754822, (274.4240000000001, 258.571, 291.474)), ('A', '1081 ', 'GLY', 0.0111503, (251.429, 295.525, 198.04800000000003)), ('B', ' 418 ', 'GLY', 0.05513269906133807, (293.11, 271.365, 316.4020000000001)), ('B', '1081 ', 'GLY', 0.01898027744240418, (291.467, 266.32700000000006, 195.241)), ('C', ' 318 ', 'ASN', 0.01328965313826109, (268.868, 215.48300000000003, 286.818)), ('C', ' 969 ', 'PRO', 0.050104496523555295, (257.52499999999986, 271.225, 293.044))]
data['omega'] = [('A', ' 470 ', 'PRO', None, (216.213, 265.671, 355.399)), ('A', ' 617 ', 'PRO', None, (252.651, 290.82200000000006, 272.951)), ('B', ' 470 ', 'PRO', None, (291.418, 286.595, 356.132)), ('B', ' 617 ', 'PRO', None, (293.783, 256.872, 269.4530000000001)), ('C', ' 470 ', 'PRO', None, (274.372, 201.88999999999993, 347.93800000000005)), ('C', ' 617 ', 'PRO', None, (243.64000000000004, 238.232, 267.627)), ('D', ' 108 ', 'PRO', None, (287.6390000000001, 269.49, 346.193)), ('E', '   8 ', 'PRO', None, (268.90500000000003, 248.87299999999993, 358.8780000000001)), ('E', ' 100 ', 'PRO', None, (281.216, 269.739, 354.90200000000004)), ('G', ' 108 ', 'PRO', None, (259.795, 214.241, 342.18)), ('H', ' 108 ', 'PRO', None, (234.514, 274.68399999999997, 348.298)), ('I', '   8 ', 'PRO', None, (246.80100000000007, 232.686, 362.786)), ('I', ' 100 ', 'PRO', None, (262.247, 216.74499999999995, 352.459)), ('L', '   8 ', 'PRO', None, (259.7649999999999, 271.962, 365.169)), ('L', ' 100 ', 'PRO', None, (236.651, 269.19, 357.463))]
data['rota'] = [('A', '  65 ', 'ASN', 0.0, (261.2879999999999, 310.172, 280.769)), ('A', ' 109 ', 'ASN', 0.2505411664790829, (270.03, 304.849, 312.88600000000014)), ('A', ' 227 ', 'ASN', 0.021489764055061106, (268.562, 296.947, 302.39)), ('A', ' 357 ', 'ASN', 0.23827905891562082, (226.02300000000002, 290.436, 310.355)), ('A', '1080 ', 'ASN', 0.22760874943967566, (252.223, 292.3, 199.90500000000003)), ('B', ' 109 ', 'ASN', 0.062470764080595514, (299.323, 231.453, 306.87100000000004)), ('B', ' 119 ', 'ASN', 0.0037546140293822005, (299.144, 215.34400000000002, 292.837)), ('B', ' 269 ', 'ASN', 0.15330168170643926, (280.746, 223.42799999999994, 264.453)), ('C', '  65 ', 'ASN', 0.12668455274104742, (222.90000000000006, 235.20000000000005, 274.535)), ('C', ' 109 ', 'ASN', 0.22015599143648054, (220.14200000000008, 240.29700000000003, 306.9400000000001)), ('C', ' 119 ', 'ASN', 0.0002703731626760561, (206.161, 251.592, 295.16)), ('C', ' 691 ', 'ASN', 0.13412944154170456, (260.387, 240.89999999999998, 204.20000000000002))]
data['cbeta'] = [('B', ' 784 ', 'PHE', ' ', 0.5812348010615709, (267.056, 239.15499999999994, 217.88400000000001))]
data['probe'] = [(' C 778  TYR  HB2', ' C1328  NAG  H81', -0.614, (231.425, 278.814, 217.496)), (' C  78  ASN  N  ', ' C  79  PRO  CD ', -0.541, (212.878, 233.971, 289.318)), (' B  78  ASN  N  ', ' B  79  PRO  CD ', -0.532, (310.718, 230.85, 289.729)), (' B1080  ASN  CG ', ' B1081  GLY  N  ', -0.514, (289.377, 265.9, 195.487)), (' C1124  GLN  N  ', ' C1125  PRO  CD ', -0.514, (258.512, 264.3, 178.905)), (' A  78  ASN  N  ', ' A  79  PRO  CD ', -0.51, (265.926, 316.189, 297.38)), (' A  65  ASN  N  ', ' A  65  ASN  OD1', -0.508, (260.196, 309.278, 279.537)), (' A1080  ASN  CG ', ' A1081  GLY  N  ', -0.488, (253.342, 293.748, 198.443)), (' C  78  ASN  N  ', ' C  79  PRO  HD3', -0.485, (212.22, 233.596, 289.362)), (' B 978  LEU HD21', ' B 982  ARG  CZ ', -0.485, (262.93, 247.052, 274.688)), (' B 109  ASN  N  ', ' B 109  ASN  OD1', -0.482, (301.028, 231.342, 306.759)), (' B  78  ASN  N  ', ' B  79  PRO  HD3', -0.477, (311.324, 230.556, 289.796)), (' A1010  LYS  NZ ', ' A1024  PHE  O  ', -0.477, (266.94, 275.028, 230.917)), (' C 109  ASN  N  ', ' C 109  ASN  OD1', -0.473, (219.315, 238.851, 306.571)), (' B1010  LYS  NZ ', ' B1024  PHE  O  ', -0.467, (269.17, 258.418, 228.72)), (' A 778  TYR  HB2', ' A1333  NAG  H81', -0.464, (288.909, 288.679, 218.514)), (' A 691  ASN  N  ', ' A 691  ASN  OD1', -0.462, (239.932, 285.681, 210.394)), (' C1010  LYS  NZ ', ' C1024  PHE  O  ', -0.461, (252.821, 264.861, 229.799)), (' A1080  ASN  O  ', ' A1082  THR  N  ', -0.454, (250.059, 293.647, 197.292)), (' A  78  ASN  N  ', ' A  79  PRO  HD3', -0.444, (265.734, 317.007, 297.474)), (' B 296  ASP  O  ', ' B 297  LYS  HB2', -0.429, (289.952, 246.207, 247.089)), (' C 296  ASP  O  ', ' C 297  LYS  HB2', -0.425, (234.77, 250.329, 247.794)), (' C 529  PHE  O  ', ' C 531  GLY  N  ', -0.423, (266.315, 228.012, 283.325)), (' A 119  ASN  C  ', ' A 119  ASN  OD1', -0.414, (286.443, 315.09, 300.633)), (' B1080  ASN  O  ', ' B1082  THR  N  ', -0.412, (290.359, 268.288, 195.325)), (' A 951  ASN  ND2', ' A 954  ALA  O  ', -0.412, (268.194, 272.297, 283.419)), (' A1081  GLY  HA3', ' A1343  NAG  H82', -0.411, (252.415, 296.577, 198.692)), (' B 968  PRO  N  ', ' B 969  PRO  CD ', -0.406, (256.748, 247.809, 291.964)), (' A 529  PHE  O  ', ' A 531  GLY  N  ', -0.403, (233.774, 274.371, 287.973)), (' A 109  ASN  N  ', ' A 109  ASN  OD1', -0.403, (268.425, 305.839, 313.05)), (' H  13  GLN  HA ', ' H  14  PRO  HD3', -0.403, (229.686, 275.488, 384.231)), (' A 281  ASN  HB2', ' A 282  PRO  HD2', -0.403, (257.9, 300.692, 266.73)), (' C 691  ASN  N  ', ' C 691  ASN  OD1', -0.403, (259.572, 239.17, 204.403)), (' A 946  LYS  NZ ', ' C 740  SER  OG ', -0.401, (268.466, 279.055, 269.525))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
