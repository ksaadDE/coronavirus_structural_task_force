# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 189 ', 'GLN', 0.0052480617008674076, (-27.353, 20.143, -21.617999999999995)), ('B', '  27 ', 'LEU', 0.2260560516248187, (-65.865, -28.688999999999993, -44.981999999999985)), ('B', ' 189 ', 'GLN', 0.21586700102178813, (-71.605, -28.270999999999997, -29.505)), ('C', '   6 ', 'MET', 0.12617998286516707, (-23.60000000000001, 0.799, -2.1489999999999996)), ('C', '  27 ', 'LEU', 0.2922943463366401, (-5.564, -11.358, 12.399999999999997)), ('D', '   6 ', 'MET', 0.008935953385359269, (-20.912000000000006, -42.98099999999999, -53.403999999999996)), ('D', '  27 ', 'LEU', 0.2782325887052511, (-38.721, -30.713, -38.796)), ('D', ' 299 ', 'GLN', 0.06114463860823773, (-13.885000000000005, -47.63099999999999, -53.782))]
data['cbeta'] = [('A', '  41 ', 'HIS', ' ', 0.252642420669328, (-21.117000000000008, 22.586, -15.84)), ('C', '  41 ', 'HIS', ' ', 0.2833666667345818, (-10.387, -18.491, 17.202))]
data['probe'] = [(' A 124  GLY  HA3', ' C   6  MET  HE3', -0.721, (-23.335, 4.906, -1.243)), (' C  58  LEU HD22', ' C  82  MET  HE3', -0.673, (-9.815, -15.311, 27.014)), (' D 109  GLY  HA2', ' D 200  ILE HD13', -0.618, (-11.654, -32.384, -46.374)), (' C 227  LEU  O  ', ' C 231  ASN  ND2', -0.6, (-49.368, -13.762, 1.996)), (' C 109  GLY  HA2', ' C 200  ILE HD13', -0.592, (-32.357, -10.013, 4.392)), (' A   8  PHE  HB3', ' A 152  ILE HD12', -0.571, (-9.053, 2.491, -2.853)), (' C  43  ILE  HB ', ' C  61  LYS  HE3', -0.564, (-4.125, -17.696, 22.98)), (' D  58  LEU HD22', ' D  82  MET  HE3', -0.562, (-34.499, -27.3, -23.974)), (' B  58  LEU HD22', ' B  82  MET  HE3', -0.55, (-57.304, -36.673, -35.495)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.541, (-14.652, -2.841, -19.335)), (' B 233  VAL HG11', ' B 269  LYS  HG3', -0.514, (-63.705, 11.241, -21.902)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.497, (-66.94, -18.441, -37.412)), (' C 175  THR HG22', ' C 181  PHE  HA ', -0.496, (-20.991, -15.114, 16.974)), (' D 111  THR HG22', ' D 129  ALA  HB2', -0.484, (-15.475, -35.27, -48.202)), (' A  58  LEU HD22', ' A  82  MET  HE3', -0.479, (-12.872, 28.821, -16.061)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.471, (-59.371, -5.125, -32.314)), (' C 111  THR HG22', ' C 129  ALA  HB2', -0.464, (-28.679, -6.767, 3.086)), (' D 108  PRO  HB3', ' D 132  PRO  HA ', -0.46, (-12.462, -27.53, -42.707)), (' B 202  VAL HG21', ' B 249  ILE HD11', -0.46, (-52.166, 0.453, -30.68)), (' B  30  LEU HD22', ' B 148  VAL HG11', -0.458, (-56.072, -21.901, -43.959)), (' C 111  THR HG23', ' C 292  THR HG23', -0.455, (-30.956, -4.577, 3.846)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.449, (-19.119, -19.041, -29.518)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.442, (-22.935, 10.518, -13.973)), (' D 202  VAL HG11', ' D 249  ILE HD11', -0.436, (-4.587, -37.196, -45.781)), (' C   6  MET  HB3', ' C   6  MET  HE2', -0.425, (-24.613, 3.111, -0.873)), (' C 187  ASP  N  ', ' C 187  ASP  OD1', -0.423, (-16.366, -21.305, 18.67)), (' D 131  ARG  NH2', ' D 289  ASP  OD2', -0.421, (-12.891, -28.444, -50.612)), (' D 175  THR HG22', ' D 181  PHE  HA ', -0.418, (-23.796, -27.14, -34.117)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.417, (-15.333, -2.42, -14.17)), (' D   6  MET  HB3', ' D   6  MET  HE3', -0.414, (-21.687, -45.013, -55.105)), (' B 163  HIS  HE1', ' B 172  HIS  HB3', -0.404, (-67.327, -18.694, -36.983))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
