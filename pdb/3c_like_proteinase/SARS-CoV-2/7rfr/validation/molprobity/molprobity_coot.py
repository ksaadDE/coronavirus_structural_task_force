# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  47 ', 'GLU', 0.005340031659694199, (-23.473, 19.122999999999998, -3.4509999999999996))]
data['omega'] = []
data['rota'] = [('A', '  26 ', 'THR', 0.22619262461613635, (-8.73, 20.629, -0.09899999999999996)), ('A', '  48 ', 'ASP', 0.10313851142657401, (-21.926, 17.312999999999995, -6.517999999999999)), ('A', '  49 ', 'MET', 0.019139148056729012, (-21.096999999999998, 14.118, -4.594999999999999)), ('A', '  59 ', 'ILE', 0.006451881513114568, (-14.025, 17.24299999999999, -18.763999999999996)), ('A', '  67 ', 'LEU', 0.14918276896286622, (-3.599, 24.029, -6.878999999999999)), ('A', '  74 ', 'GLN', 0.10685017647497141, (3.4640000000000017, 26.082, -5.094999999999999)), ('A', '  87 ', 'LEU', 0.0, (-6.759, 11.918, -10.06)), ('A', ' 130 ', 'MET', 0.026855932885053363, (-6.971, -4.964, 5.527)), ('A', ' 233 ', 'VAL', 0.10778794316066544, (-15.094, -24.638, 14.379)), ('A', ' 235 ', 'MET', 0.03152794291368933, (-16.84, -21.388, 10.409999999999995)), ('B', '  46 ', 'SER', 0.2339441018655689, (32.165, -8.341999999999993, 29.153999999999996)), ('B', '  67 ', 'LEU', 0.2763915783736515, (33.736, 4.688999999999998, 15.318999999999997)), ('B', '  86 ', 'VAL', 0.11756750340241306, (25.176, 9.368, 28.458999999999996)), ('B', '  87 ', 'LEU', 0.08023373334401014, (28.328, 9.810999999999998, 26.348)), ('B', ' 130 ', 'MET', 0.0, (6.214, 6.064, 31.209999999999997))]
data['cbeta'] = [('A', ' 233 ', 'VAL', ' ', 0.2844427437279383, (-14.357, -25.070999999999987, 15.704999999999998))]
data['probe'] = [(' A  49  MET  HA ', ' A  52  PRO  HG3', -0.965, (-20.36, 13.598, -6.581)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.933, (5.728, -5.728, 19.066)), (' B   4  ARG  H  ', ' B 299  GLN HE22', -0.881, (-6.585, 5.879, 16.774)), (' B 138  GLY  H  ', ' B 172  HIS  HD2', -0.673, (9.769, -2.204, 26.922)), (' A  58  LEU HD22', ' A  82  MET  HE3', -0.642, (-11.247, 12.194, -14.043)), (' B  58  LEU HD22', ' B  82 AMET  HE3', -0.601, (32.502, 8.913, 29.475)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.562, (0.868, 7.384, 32.466)), (' B  40  ARG  HB2', ' B  82 AMET  HE2', -0.549, (29.897, 6.564, 29.586)), (' B 108 BPRO  HA ', ' B 130 BMET  HG2', -0.529, (5.945, 8.312, 33.621)), (' A 138  GLY  H  ', ' A 172  HIS  HD2', -0.515, (-10.377, 3.319, 9.843)), (' B   4  ARG  H  ', ' B 299  GLN  NE2', -0.499, (-6.849, 6.607, 17.015)), (' B  19  GLN  NE2', ' B 119  ASN HD22', -0.475, (25.735, -2.066, 13.91)), (' B 138  GLY  H  ', ' B 172  HIS  CD2', -0.461, (9.767, -2.201, 26.669)), (' A 126  TYR  CD2', ' B   6  MET  HE2', -0.459, (-3.631, 7.162, 13.554)), (' B  41  HIS  CE1', ' B9001  4W8  S45', -0.456, (23.798, -0.308, 27.059)), (' B 154  TYR  O  ', ' B 155  ASP  OD1', -0.448, (6.585, 22.985, 15.565)), (' B  19  GLN HE21', ' B 119  ASN HD22', -0.445, (25.973, -1.554, 13.919)), (' A  58  LEU HD22', ' A  82  MET  HB2', -0.433, (-9.93, 12.002, -14.491)), (' B 216  ASP  OD1', ' B 218  TRP  HD1', -0.43, (-20.617, 1.467, 24.395)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.43, (10.382, 7.801, 21.413)), (' A  66  PHE  CE1', ' A  87  LEU HD11', -0.429, (-7.705, 17.237, -10.075)), (' B  41  HIS  ND1', ' B9001  4W8  S45', -0.428, (24.459, -0.698, 26.767)), (' B  54  TYR  HB3', ' B  82 AMET  HE1', -0.427, (31.602, 6.109, 32.036)), (' B  48  ASP  O  ', ' B  52  PRO  HB3', -0.424, (31.371, -2.201, 33.388)), (' B 121  SER  HA ', ' B 122  PRO  HD3', -0.424, (18.67, 3.355, 10.418)), (' B  19  GLN HE21', ' B  26  THR HG21', -0.423, (26.776, -1.353, 14.491)), (' A   4  ARG  H  ', ' A 299  GLN  NE2', -0.421, (6.494, -5.599, 19.875)), (' A  21  THR  HB ', ' A  67  LEU  HB3', -0.421, (-5.293, 24.267, -4.713)), (' A 126  TYR  CD1', ' B   4  ARG  HD3', -0.415, (-4.267, 2.948, 12.922)), (' A  49  MET  H  ', ' A  49  MET  HG2', -0.41, (-21.027, 16.251, -3.317)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.407, (22.14, 17.318, 12.767)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.407, (-12.702, -26.446, 17.059)), (' B 273  GLN HE21', ' B 274  ASN HD21', -0.406, (-21.328, -3.428, 39.332)), (' A  41  HIS  ND1', ' A9001  4W8  S45', -0.405, (-13.033, 12.766, -1.423))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
