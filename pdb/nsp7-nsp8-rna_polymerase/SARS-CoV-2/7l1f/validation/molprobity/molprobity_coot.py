# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (172.887, 154.468, 163.61000000000004)), ('A', ' 557 ', 'VAL', None, (182.684, 168.70800000000003, 164.40200000000002)), ('C', '  99 ', 'ASP', None, (172.80499999999995, 135.809, 171.966)), ('C', ' 183 ', 'PRO', None, (201.20199999999994, 156.856, 170.608))]
data['rota'] = []
data['cbeta'] = [('A', ' 144 ', 'GLU', ' ', 0.2695146145194361, (194.34, 185.66799999999998, 205.034)), ('A', ' 304 ', 'ASP', ' ', 0.25002125136985676, (155.5279999999999, 173.08900000000003, 184.033)), ('A', ' 698 ', 'GLN', ' ', 0.2568776089418257, (174.62, 185.035, 181.444))]
data['probe'] = [(' A 389  LEU  HB3', ' C 130  VAL HG22', -0.583, (191.515, 149.133, 179.235)), (' A 292  GLN  HB3', ' A 309  HIS  HE1', -0.569, (160.036, 171.968, 197.128)), (' D   4  SER  HA ', ' D   7  LYS  HD2', -0.559, (204.833, 185.161, 154.786)), (' A 569  ARG  O  ', ' A 573  GLN  HB2', -0.537, (158.5, 171.82, 163.211)), (' A 202  VAL HG22', ' A 231  VAL  H  ', -0.533, (157.441, 177.872, 214.371)), (' A 536  ILE  O  ', ' A 661  GLN  NE2', -0.527, (166.502, 159.024, 172.546)), (' A 181  ARG  NH2', ' A 213  ASN  OD1', -0.522, (187.298, 174.883, 212.188)), (' A 591  THR HG23', ' A 601  MET  HE1', -0.519, (168.832, 192.345, 161.245)), (' A 197  ARG  NH2', ' A 198  ASN  OD1', -0.507, (161.125, 167.454, 217.698)), (' A 715  ILE  O  ', ' A 721  ARG  NH2', -0.498, (168.736, 205.394, 197.639)), (' P  12    U  O4 ', ' T   6    A  N6 ', -0.497, (172.961, 181.351, 148.742)), (' A 778  SER  OG ', ' A 779  ILE  N  ', -0.497, (180.968, 196.337, 183.626)), (' A 755  MET  HG2', ' A 764  VAL HG12', -0.488, (171.983, 194.266, 175.864)), (' A 311  ALA  HB1', ' A 350  GLU  HB3', -0.487, (167.375, 167.251, 186.554)), (' A 825  ASP  N  ', ' A 825  ASP  OD1', -0.482, (171.038, 211.459, 153.166)), (' A 377  ASP  HA ', ' A 537  PRO  HG2', -0.479, (168.668, 153.134, 171.001)), (' A 857  GLU  HA ', ' A 860  VAL HG22', -0.474, (180.494, 186.595, 141.547)), (' C 112  ASP  N  ', ' C 112  ASP  OD1', -0.473, (163.964, 142.978, 188.05)), (' A 516  TYR  OH ', ' A 569  ARG  NH1', -0.472, (162.435, 166.405, 158.785)), (' A 806  THR  OG1', ' A 807  LYS  N  ', -0.47, (180.841, 208.56, 166.071)), (' A 846  ASP  HB3', ' A 849  LYS  HG3', -0.465, (187.863, 173.919, 145.586)), (' A 140  ASP  N  ', ' A 140  ASP  OD2', -0.465, (191.881, 190.565, 198.935)), (' A 459  ASN  ND2', ' A 678  GLY  O  ', -0.461, (178.862, 168.99, 179.803)), (' C  87  MET  HB3', ' C  87  MET  HE2', -0.453, (165.082, 147.132, 158.228)), (' A 452  ASP  OD2', ' A 624  ARG  NH2', -0.451, (185.693, 169.746, 169.53)), (' C 134  ASP  N  ', ' C 134  ASP  OD1', -0.45, (202.164, 157.286, 178.272)), (' A 144  GLU  HA ', ' A 147  VAL HG22', -0.447, (196.169, 183.662, 203.754)), (' A 527  LEU HD23', ' A 566  MET  HE1', -0.445, (158.788, 159.019, 163.166)), (' A 497  ASN  HB2', ' A 500  LYS  HE2', -0.445, (169.668, 170.621, 153.677)), (' A 194  ASP  O  ', ' A 198  ASN  ND2', -0.445, (164.373, 168.561, 217.838)), (' D  61  SER  OG ', ' D  62  MET  SD ', -0.445, (213.132, 163.511, 153.651)), (' A 589  ILE HG21', ' A 689  TYR  HE2', -0.442, (166.766, 182.818, 165.645)), (' A  88  ASN  O  ', ' A  91  LYS  NZ ', -0.442, (168.624, 175.981, 230.398)), (' A 371  LEU HD13', ' C  87  MET  HE1', -0.441, (162.058, 146.529, 159.817)), (' A 505  PRO  HD3', ' A 539  ILE HD13', -0.438, (172.421, 154.091, 165.938)), (' A 206  THR  OG1', ' A 209  ASN  OD1', -0.434, (171.832, 184.967, 211.788)), (' A 428  PHE  HE2', ' A 883  LEU  HB2', -0.432, (195.93, 196.679, 144.306)), (' A 537  PRO  HA ', ' A 661  GLN HE22', -0.432, (167.904, 157.98, 172.706)), (' A 612  PRO  HG2', ' A 805  LEU HD13', -0.43, (174.639, 207.249, 172.021)), (' A 708  LEU  HA ', ' A 724  GLN HE22', -0.43, (170.231, 194.249, 195.489)), (' A 260  ASP  HB3', ' A 263  LYS  HD2', -0.427, (185.813, 155.311, 209.025)), (' C 104  ASN  HA ', ' C 107  ILE HG22', -0.426, (169.803, 135.502, 181.611)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.424, (162.875, 197.643, 207.289)), (' A 606  TYR  HE1', ' A 614  LEU HD21', -0.423, (174.997, 202.549, 171.077)), (' A 705  ASN  ND2', ' A 788  TYR  OH ', -0.42, (174.747, 185.871, 190.355)), (' A 189  THR HG22', ' A 216  TRP  HE1', -0.42, (174.221, 175.563, 211.544)), (' A 221  ASP  N  ', ' A 221  ASP  OD1', -0.42, (166.573, 186.855, 216.467)), (' A 628  ASN  HB3', ' A 663  LEU HD21', -0.412, (171.642, 168.527, 182.339)), (' C 159  VAL HG13', ' C 186  VAL HG12', -0.405, (200.197, 146.966, 174.175)), (' A 303  ASP  N  ', ' A 303  ASP  OD1', -0.403, (153.746, 170.422, 188.96)), (' A 330  VAL HG22', ' C 115  VAL  H  ', -0.4, (168.458, 144.925, 183.069)), (' A 701  THR  HA ', ' A 704  VAL HG12', -0.4, (169.382, 187.94, 187.119)), (' A 540  THR  OG1', ' A 665  GLU  OE2', -0.4, (173.737, 162.374, 169.807))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
