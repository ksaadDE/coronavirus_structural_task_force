# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 151 ', 'PRO', None, (-42.29200000000004, -67.241, -2.302)), ('B', ' 142 ', 'PRO', None, (-50.38199999999999, -51.17699999999999, -30.836))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 185  VAL HG21', ' B 136  LEU HD22', -0.798, (-49.462, -68.313, -25.599)), (' C 377  PHE  CD1', ' C 434  ILE HG12', -0.79, (-52.104, -10.921, 16.885)), (' C 377  PHE  HD1', ' C 434  ILE HG12', -0.767, (-51.439, -10.816, 16.86)), (' B  95  PRO  HG2', ' B  96  PRO  HD3', -0.717, (-43.717, -29.289, 3.543)), (' B  94  THR HG22', ' C 417  LYS  HZ1', -0.704, (-38.683, -28.24, 1.186)), (' A  29  VAL HG13', ' A  34  MET  HG3', -0.7, (-27.936, -38.563, 5.56)), (' C 369  TYR  HD1', ' C 377  PHE  CE2', -0.684, (-56.663, -9.757, 19.204)), (' B  94  THR HG22', ' C 417  LYS  NZ ', -0.656, (-38.428, -28.054, 1.657)), (' A  82  MET  HE2', ' A  85  LEU HD21', -0.641, (-42.124, -51.465, 6.439)), (' A 130  PRO  HG3', ' A 142  LEU  HB3', -0.626, (-49.452, -75.976, -27.73)), (' B   7  SER  HB2', ' B   8  PRO  HD3', -0.614, (-47.727, -34.435, -21.552)), (' C 369  TYR  HD1', ' C 377  PHE  HE2', -0.58, (-56.051, -9.52, 19.616)), (' A 126  PHE  CE2', ' B 125  GLN  HG3', -0.567, (-53.958, -75.928, -12.15)), (' A  47  TRP  HB2', ' B  97  TYR  HB2', -0.559, (-42.276, -37.295, -1.023)), (' A 196  GLN  NE2', ' A 197  THR  O  ', -0.549, (-39.602, -81.049, -28.561)), (' A  59  TYR  HB2', ' A  64  LYS  HG2', -0.548, (-45.458, -39.414, 10.157)), (' A  90  THR HG23', ' A 114  THR  HA ', -0.545, (-42.846, -56.9, 0.071)), (' A   4  LEU HD22', ' A  22  CYS  SG ', -0.545, (-27.65, -44.258, 1.608)), (' A 104  MET  HE1', ' B  99  PHE  CZ ', -0.521, (-38.636, -37.449, -4.939)), (' C 369  TYR  CD1', ' C 377  PHE  CE2', -0.519, (-56.547, -9.779, 19.712)), (' B 142  PRO  HB2', ' B 144  GLU  OE1', -0.517, (-51.911, -48.883, -28.462)), (' C 369  TYR  CD1', ' C 377  PHE  HE2', -0.516, (-56.673, -9.442, 19.575)), (' C 384  PRO  HA ', ' C 387  LEU HD12', -0.51, (-53.45, -8.798, 24.872)), (' A 121  LYS  HD3', ' A 148  ASP  O  ', -0.506, (-48.466, -72.716, -4.841)), (' C 481  ASN  O  ', ' C 483  VAL HG23', -0.505, (-15.47, -20.832, -3.812)), (' C 364  ASP  O  ', ' C 367  VAL HG22', -0.504, (-53.498, -0.655, 20.907)), (' B  48  ILE HD12', ' B  73  LEU HD13', -0.499, (-34.789, -32.715, -18.972)), (' B  33  LEU HD12', ' B  89  GLN  O  ', -0.498, (-40.092, -30.902, -9.998)), (' C 393  THR  HA ', ' C 522  ALA  HA ', -0.496, (-40.706, -2.133, 32.534)), (' B  23  CYS  HB2', ' B  35  TRP  CH2', -0.494, (-42.472, -32.919, -16.728)), (' A  14  PRO  HD3', ' A 116  SER  C  ', -0.488, (-47.577, -61.399, 5.433)), (' A  24  ALA  HB3', ' A  76  ASN  HB3', -0.487, (-22.864, -41.66, 4.602)), (' A 204  HIS  CD2', ' A 206  PRO  HD2', -0.486, (-38.743, -69.816, -5.683)), (' B  94  THR  N  ', ' B  95  PRO  HD2', -0.485, (-41.783, -28.416, 1.52)), (' A  59  TYR  OH ', ' A  68  THR  HA ', -0.483, (-39.049, -42.511, 12.312)), (' B  33  LEU HD22', ' B  71  PHE  CG ', -0.482, (-41.732, -28.29, -14.791)), (' A 203  ASN  OD1', ' A 205  LYS  HD2', -0.481, (-34.371, -72.085, -10.205)), (' B 108  LYS  HG3', ' B 109  ARG  N  ', -0.472, (-44.115, -46.66, -34.311)), (' A 104  MET  HE2', ' B  89  GLN  NE2', -0.47, (-37.623, -34.283, -4.685)), (' C 381  GLY  HA3', ' C 430  THR  HA ', -0.459, (-46.439, -15.986, 27.795)), (' B  94  THR  N  ', ' B  95  PRO  CD ', -0.456, (-41.4, -28.773, 1.123)), (' B  30  SER  OG ', ' B  31  SER  N  ', -0.447, (-39.259, -21.038, -10.379)), (' C 369  TYR  HD1', ' C 377  PHE  CD2', -0.445, (-56.134, -10.251, 18.86)), (' B   4  MET  HE3', ' B  90  GLN  HG2', -0.44, (-45.168, -30.003, -6.976)), (' B 195  CYS  O  ', ' B 207  THR  HA ', -0.436, (-63.169, -63.494, -28.293)), (' C 431  GLY  HA2', ' C 515  PHE  CD2', -0.435, (-46.249, -11.507, 24.773)), (' A   4  LEU HD13', ' A  95  CYS  SG ', -0.434, (-29.491, -43.364, 0.162)), (' C 369  TYR  HA ', ' C 377  PHE  CE2', -0.433, (-56.059, -8.459, 18.74)), (' B 114  PRO  HB3', ' B 140  PHE  HB3', -0.433, (-52.116, -57.972, -30.477)), (' C 334  ASN  O  ', ' C 362  VAL HG22', -0.43, (-47.329, 6.622, 25.482)), (' C 401  VAL HG22', ' C 509  ARG  HG2', -0.427, (-45.011, -9.775, 5.42)), (' A  66  ARG  NH1', ' A  84  SER  O  ', -0.427, (-47.089, -51.061, 9.653)), (' C 431  GLY  HA2', ' C 515  PHE  HD2', -0.422, (-46.37, -11.668, 25.049)), (' A  67  PHE  HA ', ' A  81  GLN  O  ', -0.422, (-40.357, -47.549, 11.544)), (' B  36  TYR  O  ', ' B  86  TYR  HA ', -0.42, (-37.71, -39.356, -15.645)), (' C 454  ARG  NH2', ' C 467  ASP  O  ', -0.417, (-28.948, -16.202, 7.871)), (' A  32  ASN  OD1', ' A  97  ARG  HD3', -0.416, (-27.318, -33.507, 0.849)), (' A 104  MET  HE1', ' B  99  PHE  HZ ', -0.415, (-38.716, -37.802, -4.265)), (' A  12  VAL  CG1', ' A  18  LEU HD13', -0.414, (-38.489, -58.044, 8.149)), (' A 205  LYS  HD3', ' A 205  LYS  N  ', -0.413, (-36.472, -71.306, -7.466)), (' B  11  LEU  HB3', ' B 105  LEU HD23', -0.412, (-42.808, -40.903, -24.634)), (' C 350  VAL  O  ', ' C 353  TRP  HD1', -0.412, (-35.736, -14.164, 10.638)), (' C 433  VAL HG22', ' C 512  VAL HG13', -0.409, (-44.789, -14.458, 18.088)), (' B 187  TYR  O  ', ' B 193  TYR  OH ', -0.407, (-68.102, -73.791, -16.545)), (' A   6  GLU  OE2', ' A  94  TYR  HA ', -0.406, (-32.84, -46.745, -1.45)), (' A  85  LEU  HA ', ' A  85  LEU HD23', -0.406, (-45.545, -52.302, 8.008))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
