# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 371 ', 'LEU', 0.19931536975979763, (94.95599999999997, 114.81899999999997, 155.70999999999998)), ('B', ' 371 ', 'LEU', 0.20007147794478486, (161.85499999999993, 141.99, 155.718))]
data['cbeta'] = []
data['probe'] = [(' A 379  MET  HE1', ' A 400  PHE  HA ', -0.635, (100.959, 117.006, 164.353)), (' B 379  MET  HE1', ' B 400  PHE  HA ', -0.623, (155.562, 139.433, 164.511)), (' A 286  ARG  HE ', ' B 109  ALA  HB2', -0.619, (151.239, 131.474, 109.922)), (' A 109  ALA  HB2', ' B 286  ARG  HE ', -0.613, (105.47, 125.473, 109.997)), (' B 356  GLY  HA3', ' B 390  LEU  HB3', -0.612, (162.205, 133.767, 179.096)), (' A 431  HIS  HD2', ' A 433  TYR  HB2', -0.61, (116.993, 84.745, 140.007)), (' A 356  GLY  HA3', ' A 390  LEU  HB3', -0.602, (94.922, 122.436, 179.32)), (' B 431  HIS  HD2', ' B 433  TYR  HB2', -0.596, (139.935, 172.088, 139.96)), (' B 279  ILE HG13', ' B 280  PRO  HD3', -0.575, (117.934, 121.069, 106.559)), (' A 279  ILE HG13', ' A 280  PRO  HD3', -0.574, (138.258, 136.24, 106.486)), (' A  66  VAL  HA ', ' A  71  MET  HE3', -0.558, (86.956, 133.741, 158.504)), (' B  66  VAL  HA ', ' B  71  MET  HE3', -0.556, (169.847, 122.641, 158.752)), (' A 460  LEU HD23', ' A 464  ARG HH21', -0.543, (119.516, 93.463, 100.324)), (' B 460  LEU HD23', ' B 464  ARG HH21', -0.54, (137.214, 163.485, 100.782)), (' A 212  SER  HB3', ' A 314  GLN  HG3', -0.539, (120.866, 138.598, 141.636)), (' B 212  SER  HB3', ' B 314  GLN  HG3', -0.539, (136.438, 118.082, 141.204)), (' B 183  PRO  O  ', ' B 185  ARG  NH1', -0.524, (161.161, 115.762, 114.067)), (' A 574  GLY  O  ', ' A 578  ASN  ND2', -0.517, (114.126, 120.666, 142.586)), (' B 574  GLY  O  ', ' B 578  ASN  ND2', -0.517, (142.629, 136.552, 142.394)), (' A 183  PRO  O  ', ' A 185  ARG  NH1', -0.511, (95.327, 140.678, 113.935)), (' A 505  ASP  OD1', ' A 554  ARG  NH1', -0.501, (109.496, 95.392, 130.157)), (' B 505  ASP  OD1', ' B 554  ARG  NH1', -0.5, (147.407, 161.35, 129.734)), (' A 111  VAL HG12', ' A 632  TRP  HB3', -0.493, (110.864, 129.455, 102.707)), (' B 111  VAL HG12', ' B 632  TRP  HB3', -0.489, (146.451, 127.391, 102.84)), (' B 101  THR  OG1', ' B 185  ARG  NH2', -0.484, (162.049, 119.916, 114.006)), (' A 469  LEU  O  ', ' A 473  ASN  ND2', -0.484, (111.408, 91.355, 114.496)), (' A 101  THR  OG1', ' A 185  ARG  NH2', -0.483, (94.875, 137.298, 114.254)), (' B 362  LEU HD12', ' B 366  LEU HD11', -0.483, (163.04, 139.504, 167.711)), (' A 653  ASN HD22', ' B 274  ASN  H  ', -0.482, (124.175, 125.529, 114.456)), (' A 362  LEU HD12', ' A 366  LEU HD11', -0.48, (93.69, 117.675, 167.946)), (' B 469  LEU  O  ', ' B 473  ASN  ND2', -0.478, (144.942, 165.751, 114.451)), (' B  65  ARG  NH1', ' B  67  ASP  OD2', -0.478, (172.968, 118.427, 156.492)), (' B 623  CYS  HA ', ' B 628  GLN  HG3', -0.477, (131.368, 127.367, 98.439)), (' A  65  ARG  NH1', ' A  67  ASP  OD2', -0.476, (83.615, 138.555, 156.008)), (' A 623  CYS  HA ', ' A 628  GLN  HG3', -0.473, (125.774, 129.782, 98.409)), (' A 274  ASN  H  ', ' B 653  ASN HD22', -0.472, (132.927, 131.598, 114.453)), (' A 634  ASN  HB3', ' A 645  THR HG23', -0.471, (113.757, 131.107, 111.512)), (' A 379  MET  HE2', ' A 402  GLU  HB2', -0.471, (101.491, 114.609, 163.598)), (' B 372  ASP  HB2', ' B 375  HIS  HD2', -0.469, (157.479, 144.921, 155.912)), (' B 429  PHE  HE1', ' B 487  LYS  HG2', -0.468, (149.869, 168.104, 138.952)), (' A 372  ASP  HB2', ' A 375  HIS  HD2', -0.468, (99.199, 111.832, 156.065)), (' B 683  VAL  O  ', ' B 687  ASN  ND2', -0.466, (133.621, 121.742, 131.016)), (' A 429  PHE  HE1', ' A 487  LYS  HG2', -0.465, (107.223, 88.357, 139.174)), (' B 379  MET  HE2', ' B 402  GLU  HB2', -0.464, (155.782, 142.099, 163.721)), (' A 683  VAL  O  ', ' A 687  ASN  ND2', -0.463, (123.588, 134.889, 131.113)), (' B 604  VAL HG21', ' B 666  SER  HB2', -0.458, (145.849, 114.964, 106.81)), (' B 634  ASN  HB3', ' B 645  THR HG23', -0.456, (143.044, 125.797, 111.562)), (' B 268  LEU HD22', ' B 277  VAL HG11', -0.453, (121.261, 118.557, 114.643)), (' B 273  ASN  N  ', ' B 273  ASN  OD1', -0.451, (125.777, 121.885, 114.563)), (' A 268  LEU HD22', ' A 277  VAL HG11', -0.449, (135.527, 138.512, 115.001)), (' A 604  VAL HG21', ' A 666  SER  HB2', -0.446, (111.015, 142.337, 106.895)), (' A 623  CYS  HB3', ' B 623  CYS  HB3', -0.435, (128.199, 128.189, 99.496)), (' A 273  ASN  N  ', ' A 273  ASN  OD1', -0.433, (130.771, 134.958, 114.427)), (' B 125  THR  OG1', ' B 126  GLU  OE1', -0.432, (168.788, 122.373, 117.685)), (' B 341  LEU  HA ', ' B 341  LEU HD23', -0.432, (167.189, 130.259, 170.964)), (' B 174  VAL  O  ', ' B 177  SER  OG ', -0.432, (171.87, 110.105, 118.251)), (' A 125  THR  OG1', ' A 126  GLU  OE1', -0.431, (88.015, 134.446, 117.581)), (' A 231  THR HG22', ' A 265  LEU HD12', -0.43, (133.438, 147.024, 117.334)), (' B 231  THR HG22', ' B 265  LEU HD12', -0.43, (123.6, 109.423, 117.306)), (' B 140  LEU HD13', ' B 161  TYR  HD2', -0.426, (164.401, 116.934, 140.297)), (' A 140  LEU HD13', ' A 161  TYR  HD2', -0.425, (92.203, 140.027, 140.644)), (' A 437  LEU  HA ', ' A 437  LEU HD23', -0.423, (117.928, 86.758, 132.682)), (' B 420  PRO  HA ', ' B 423  GLN  HG2', -0.423, (151.975, 182.47, 147.798)), (' B 635  ASN  N  ', ' B 635  ASN  OD1', -0.422, (147.229, 125.679, 109.453)), (' A 420  PRO  HA ', ' A 423  GLN  HG2', -0.417, (104.832, 74.306, 147.871)), (' A 213  LEU  HA ', ' A 213  LEU HD23', -0.411, (119.606, 143.194, 136.38)), (' A 174  VAL  O  ', ' A 177  SER  OG ', -0.411, (84.933, 146.691, 118.309)), (' B 437  LEU  HA ', ' B 437  LEU HD23', -0.408, (138.748, 170.161, 133.075)), (' A 204  LYS  HB3', ' A 204  LYS  HE3', -0.406, (111.831, 132.668, 146.038)), (' B 485  LEU  HA ', ' B 488  VAL HG12', -0.405, (155.872, 168.795, 134.893)), (' A 494  ARG  HA ', ' A 494  ARG  HD3', -0.405, (95.947, 96.295, 142.729)), (' B 679  LEU  HA ', ' B 679  LEU HD23', -0.402, (135.148, 117.414, 126.085)), (' A 223  LEU HD21', ' A 269  LEU HD21', -0.402, (129.289, 141.525, 125.205)), (' B 223  LEU HD21', ' B 269  LEU HD21', -0.402, (127.515, 115.381, 125.241)), (' A 679  LEU  HA ', ' A 679  LEU HD23', -0.4, (121.658, 139.427, 125.992))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
