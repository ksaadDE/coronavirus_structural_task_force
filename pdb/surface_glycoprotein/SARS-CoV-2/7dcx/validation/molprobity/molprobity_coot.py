# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 153 ', 'PRO', None, (240.561, 200.844, 146.993)), ('A', ' 155 ', 'PRO', None, (237.01, 197.33, 150.869)), ('A', ' 195 ', 'PRO', None, (255.89199999999997, 169.67999999999998, 153.563)), ('A', ' 220 ', 'ASP', None, (265.004, 175.84, 149.704)), ('B', ' 153 ', 'PRO', None, (224.15400000000002, 255.215, 160.308)), ('B', ' 155 ', 'PRO', None, (220.641, 256.82499999999993, 165.528)), ('B', ' 195 ', 'PRO', None, (190.15700000000007, 259.63, 151.39)), ('E', ' 153 ', 'PRO', None, (300.168, 277.032, 157.835)), ('E', ' 155 ', 'PRO', None, (303.506, 275.491, 163.506)), ('E', ' 195 ', 'PRO', None, (313.1889999999999, 305.632, 172.344)), ('E', ' 220 ', 'ASP', None, (305.3609999999999, 308.56699999999995, 156.699)), ('F', '  95 ', 'PRO', None, (223.737, 213.73999999999998, 171.854)), ('F', ' 141 ', 'PRO', None, (251.261, 186.373, 178.05099999999996)), ('G', '  95 ', 'PRO', None, (233.87500000000006, 281.57700000000006, 185.834)), ('G', ' 141 ', 'PRO', None, (205.16200000000006, 252.374, 188.13099999999997)), ('H', '  95 ', 'PRO', None, (284.984, 256.1000000000001, 177.732)), ('H', ' 141 ', 'PRO', None, (301.419, 285.02700000000004, 190.85))]
data['rota'] = [('A', '   2 ', 'VAL', 0.04665871881960989, (217.33199999999997, 189.82099999999997, 163.306)), ('A', '  20 ', 'LEU', 0.26418222554646303, (225.267, 204.862, 152.39699999999996)), ('A', ' 115 ', 'LEU', 0.17310204198287832, (234.764, 204.44899999999998, 154.18199999999996)), ('A', ' 158 ', 'VAL', 0.0054484165582019935, (242.019, 186.974, 151.918)), ('A', ' 187 ', 'VAL', 0.06345547001616271, (248.717, 179.879, 158.958)), ('B', ' 158 ', 'VAL', 0.004820665278421742, (212.62700000000007, 260.88699999999994, 161.14599999999996)), ('B', ' 189 ', 'VAL', 0.08695590827569814, (194.03600000000003, 259.463, 160.41699999999997)), ('D', '  33 ', 'THR', 0.1350465403427095, (201.7670000000001, 245.48300000000003, 233.78299999999996)), ('D', ' 118 ', 'LEU', 0.003629753242879404, (198.025, 242.875, 205.93499999999995)), ('D', ' 119 ', 'ILE', 0.031086452476690445, (196.177, 239.96599999999998, 207.546)), ('D', ' 120 ', 'VAL', 0.006260986088627708, (192.61900000000006, 239.089, 206.48)), ('D', ' 185 ', 'ASN', 0.1597805453820408, (180.78900000000004, 240.967, 228.795)), ('D', ' 208 ', 'THR', 0.12028455142267694, (193.36100000000005, 234.501, 226.98399999999998)), ('D', ' 233 ', 'ILE', 0.2305784996974888, (211.17200000000005, 247.026, 204.024)), ('D', ' 312 ', 'ILE', 0.0866204889707179, (219.5390000000001, 251.58499999999998, 251.916)), ('D', ' 367 ', 'VAL', 0.01502358653474913, (228.57700000000006, 287.631, 197.962)), ('D', ' 369 ', 'TYR', 0.07911733704950055, (231.68700000000004, 281.494, 195.76299999999998)), ('D', ' 402 ', 'ILE', 0.02369025288739104, (250.637, 278.053, 190.743)), ('D', ' 483 ', 'VAL', 0.009631202717440886, (276.388, 271.2440000000001, 194.354)), ('D', ' 511 ', 'VAL', 0.005310065938561436, (243.282, 282.65400000000005, 197.674)), ('D', ' 599 ', 'THR', 0.12880789568518702, (213.03400000000008, 251.15500000000003, 251.464)), ('D', ' 642 ', 'VAL', 0.004702301788777215, (211.30400000000006, 267.56000000000006, 250.379)), ('D', ' 760 ', 'CYS', 0.27076554859359897, (248.254, 230.741, 234.391)), ('D', ' 912 ', 'THR', 0.19510189188578858, (230.342, 232.68700000000007, 297.36299999999994)), ('D', ' 948 ', 'LEU', 0.15616119282193336, (227.1730000000001, 232.4, 258.749)), ('D', ' 961 ', 'THR', 0.12633047919289003, (229.4710000000001, 236.436, 238.634)), ('E', '  51 ', 'ILE', 0.0732913049169864, (291.941, 248.039, 169.04)), ('E', ' 187 ', 'VAL', 0.006614017441722953, (308.55, 293.25299999999993, 173.848)), ('F', '  56 ', 'THR', 0.23463215181484418, (216.678, 189.171, 176.992)), ('F', '  78 ', 'VAL', 0.26251405287939683, (232.443, 183.571, 182.959)), ('F', ' 132 ', 'VAL', 0.006612551707209935, (258.45, 193.00399999999996, 156.952)), ('F', ' 146 ', 'VAL', 0.0072721152451434845, (258.183, 192.78499999999997, 171.42)), ('G', '  29 ', 'VAL', 0.07110619657122039, (227.43800000000002, 282.464, 199.10799999999998)), ('G', '  36 ', 'TYR', 0.03399302598382035, (217.57300000000004, 277.13200000000006, 186.266)), ('G', '  78 ', 'VAL', 0.028949207017533236, (203.37100000000007, 272.363, 192.31199999999998)), ('H', '  29 ', 'VAL', 0.1680354548225971, (287.659, 252.208, 194.675)), ('H', '  47 ', 'LEU', 0.1490602243804832, (303.478, 257.033, 187.941)), ('H', '  78 ', 'VAL', 0.016999658769912558, (310.32, 267.61600000000004, 194.934)), ('H', ' 115 ', 'VAL', 0.007096616641932751, (298.8559999999999, 295.833, 181.149)), ('H', ' 132 ', 'VAL', 0.01693360335672331, (292.8599999999999, 296.1979999999999, 169.97599999999997)), ('H', ' 146 ', 'VAL', 0.006214152452326247, (291.93, 290.117, 182.939)), ('K', ' 208 ', 'THR', 0.13720718065279489, (263.1199999999999, 294.577, 238.872)), ('K', ' 312 ', 'ILE', 0.08610255213860886, (265.685, 258.74300000000005, 254.542)), ('K', ' 390 ', 'LEU', 0.02083409442942048, (285.973, 244.82699999999997, 206.217)), ('K', ' 395 ', 'VAL', 0.005096618268902385, (281.723, 236.39700000000002, 198.03)), ('K', ' 410 ', 'ILE', 0.16848180135106522, (290.171, 240.97800000000004, 182.943)), ('K', ' 524 ', 'VAL', 0.006504104063674976, (283.078, 236.583, 206.43899999999994)), ('K', ' 535 ', 'LYS', 0.0, (287.851, 241.36, 232.591)), ('K', ' 551 ', 'VAL', 0.003150532575091347, (282.189, 242.91199999999998, 234.293)), ('K', ' 552 ', 'LEU', 0.2914486399037485, (283.973, 239.55, 234.169)), ('K', ' 587 ', 'ILE', 0.13115995839386116, (280.362, 237.459, 233.70099999999996)), ('K', ' 597 ', 'VAL', 0.27838404110298004, (270.08, 260.31600000000003, 251.001)), ('K', ' 599 ', 'THR', 0.07921421600911903, (268.197, 264.86400000000003, 254.687)), ('K', ' 759 ', 'PHE', 0.09934815263881412, (233.8260000000001, 245.069, 235.408)), ('K', ' 806 ', 'LEU', 0.28308754237561606, (235.67800000000008, 264.943, 280.479)), ('K', ' 873 ', 'TYR', 0.28670041489621084, (229.98200000000008, 257.804, 273.057)), ('K', ' 915 ', 'VAL', 0.14698708093459636, (248.22100000000006, 252.46300000000005, 300.817)), ('K', '1068 ', 'VAL', 0.005432935087126592, (255.49300000000005, 251.579, 287.941)), ('C', '  33 ', 'THR', 0.25225931682632274, (266.046, 205.34099999999998, 231.512)), ('C', ' 208 ', 'THR', 0.1539281258188406, (280.296, 203.572, 227.719)), ('C', ' 212 ', 'LEU', 0.13430619575312835, (276.194, 191.726, 228.26199999999997)), ('C', ' 312 ', 'ILE', 0.08667056761522471, (248.75500000000005, 214.478, 248.71999999999997)), ('C', ' 324 ', 'GLU', 0.25467203089815926, (230.391, 210.45699999999997, 219.96199999999996)), ('C', ' 326 ', 'ILE', 0.099458853380834, (226.13599999999997, 213.779, 217.70299999999997)), ('C', ' 329 ', 'PHE', 0.06272869068166771, (219.135, 219.159, 215.483)), ('C', ' 332 ', 'ILE', 0.16241577429965023, (213.887, 215.81799999999998, 208.00599999999997)), ('C', ' 503 ', 'VAL', 0.040083710796941376, (212.997, 206.76899999999998, 172.42399999999998)), ('C', ' 506 ', 'GLN', 0.04059466088973037, (208.87, 209.71, 173.374)), ('C', ' 533 ', 'LEU', 0.12904970220872042, (221.651, 210.786, 218.64499999999995)), ('C', ' 576 ', 'VAL', 0.04845694582617966, (218.20299999999995, 220.264, 225.68299999999996)), ('C', ' 599 ', 'THR', 0.20785536805611243, (252.61100000000005, 209.004, 247.80799999999996)), ('C', ' 720 ', 'ILE', 0.09338424608887413, (257.123, 219.50000000000003, 284.476)), ('C', ' 760 ', 'CYS', 0.20268565772634134, (255.3940000000001, 252.611, 237.87699999999998)), ('C', ' 912 ', 'THR', 0.10953303958072047, (250.749, 225.81200000000007, 297.054)), ('C', ' 966 ', 'LEU', 0.20858239181771746, (260.624, 238.347, 232.189))]
data['cbeta'] = []
data['probe'] = [(' E 160  TRP  HE1', ' E 185  SER  HG ', -0.688, (307.48, 289.75, 169.656)), (' B  39  LYS  HG3', ' G  38  GLN HE22', -0.586, (219.031, 270.842, 177.067)), (' C1035  GLY  HA3', ' K1040  VAL HG21', -0.58, (253.231, 238.963, 282.588)), (' D 373  SER  HB3', ' G  93  ARG  HB2', -0.578, (232.285, 283.269, 190.932)), (' D 948  LEU HD11', ' D1059  GLY  HA3', -0.573, (229.734, 229.476, 260.814)), (' G  47  LEU  HG ', ' G  48  ILE HG13', -0.567, (213.71, 280.521, 189.476)), (' A  40  PHE  HB2', ' A  44  LYS  HB3', -0.567, (237.7, 207.519, 166.768)), (' E 103  LYS  HG2', ' K 375  SER  HA ', -0.564, (303.256, 238.213, 188.931)), (' H   4  MET  SD ', ' H  90  GLN  NE2', -0.554, (288.726, 257.383, 191.036)), (' H 151  ASP  HA ', ' H 191  SER  HB2', -0.549, (283.401, 302.842, 176.76)), (' K 398  ASP  HB3', ' K 512  VAL  HB ', -0.549, (285.551, 235.469, 187.939)), (' D  92  PHE  HB3', ' D 192  PHE  HB2', -0.546, (198.533, 243.864, 218.527)), (' D 435  ALA  HB2', ' D 510  VAL HG23', -0.544, (244.017, 278.46, 193.602)), (' F  39  LYS  HB2', ' F  42  GLN  HB2', -0.544, (230.406, 188.435, 168.499)), (' D  96  GLU  HB3', ' D 188  ASN  HB2', -0.542, (187.578, 239.344, 221.015)), (' K 106  PHE  HB2', ' K 117  LEU  HB3', -0.541, (266.196, 286.61, 214.614)), (' D1047  TYR  HB2', ' D1067  TYR  HB3', -0.534, (229.037, 236.235, 286.141)), (' D 720  ILE HG13', ' D 923  ILE HG23', -0.532, (222.22, 230.185, 287.316)), (' D 725  GLU  OE2', ' D1028  LYS  NZ ', -0.526, (233.336, 236.689, 270.264)), (' B 148  VAL  HB ', ' B 183  LEU  HB2', -0.525, (213.187, 253.345, 159.576)), (' D 902  MET  SD ', ' D 905  ARG  NH1', -0.525, (229.023, 224.915, 286.47)), (' C 143  VAL HG22', ' C 154  GLU  HG2', -0.524, (286.309, 194.718, 205.328)), (' D1040  VAL HG21', ' K1035  GLY  HA3', -0.524, (237.097, 244.497, 282.522)), (' C1030  SER  HB3', ' K1041  ASP  HB2', -0.52, (252.925, 242.943, 276.98)), (' K 417  LYS  O  ', ' K 422  ASN  ND2', -0.519, (287.23, 236.988, 174.207)), (' D 398  ASP  HB2', ' D 512  VAL  HB ', -0.518, (246.471, 281.451, 201.559)), (' A  90  THR HG23', ' A 116  THR  HA ', -0.516, (238.611, 206.989, 154.733)), (' K 725  GLU  OE2', ' K1028  LYS  NZ ', -0.515, (247.747, 248.842, 271.732)), (' C  41  LYS  HB3', ' K 563  GLN  HA ', -0.515, (277.36, 224.55, 224.574)), (' F 147  LYS  HE3', ' F 156  GLN HE21', -0.514, (261.006, 199.866, 172.22)), (' A  33  TYR  HB2', ' A  98  ASP  HB3', -0.514, (216.122, 204.277, 167.323)), (' H  39  LYS  HB2', ' H  42  GLN  HB2', -0.51, (306.223, 266.575, 180.029)), (' C 356  LYS  HB3', ' C 397  ALA  HB3', -0.51, (207.252, 223.221, 189.753)), (' D1041  ASP  HB2', ' K1030  SER  HB2', -0.51, (234.394, 243.372, 276.161)), (' A   3  GLN HE22', ' F  43  SER  HB3', -0.51, (225.776, 191.247, 163.34)), (' K 396  TYR  HB2', ' K 514  SER  HB3', -0.509, (281.174, 236.889, 192.976)), (' C 908  GLY  O  ', ' C1038  LYS  NZ ', -0.506, (246.44, 232.714, 288.379)), (' C 725  GLU  OE2', ' C1028  LYS  NZ ', -0.505, (251.043, 231.215, 270.256)), (' D 437  ASN  ND2', ' D 506  GLN  OE1', -0.505, (243.589, 278.888, 182.34)), (' K 909  ILE  O  ', ' K1108  ASN  ND2', -0.504, (250.754, 242.53, 292.498)), (' A  63  LEU HD23', ' A  66  ARG  HG3', -0.503, (227.652, 217.974, 158.016)), (' G  33  VAL  H  ', ' G  51  ALA  HB2', -0.503, (219.682, 283.72, 195.635)), (' K  68  ILE HG22', ' K 262  ALA  HA ', -0.503, (278.957, 300.802, 231.297)), (' K 412  PRO  HD3', ' K 425  LEU HD22', -0.501, (287.26, 244.348, 186.228)), (' F 149  LYS  HB2', ' F 193  THR  HB ', -0.499, (266.441, 193.747, 166.224)), (' C 720  ILE HG21', ' C 923  ILE HG23', -0.499, (259.944, 220.965, 287.531)), (' C 563  GLN  HA ', ' D  41  LYS  HB3', -0.499, (212.649, 228.351, 222.76)), (' C 362  VAL  HA ', ' C 526  GLY  HA2', -0.498, (214.379, 220.607, 202.639)), (' E 148  VAL  HB ', ' E 183  LEU  HB2', -0.494, (300.976, 286.436, 164.029)), (' H  34  ALA  HB3', ' H  89  GLN  HB3', -0.494, (294.413, 256.502, 186.38)), (' D 102  ARG  NH1', ' D 154  GLU  OE1', -0.494, (185.767, 238.325, 208.736)), (' D 742  ILE  O  ', ' D1000  ARG  NH1', -0.493, (237.507, 231.337, 227.445)), (' D 908  GLY  O  ', ' D1038  LYS  NZ ', -0.493, (238.587, 235.175, 288.652)), (' D 454  ARG  NH2', ' D 469  SER  O  ', -0.492, (264.196, 278.128, 199.122)), (' K 457  ARG  NH1', ' K 460  ASN  O  ', -0.491, (278.158, 242.844, 172.534)), (' B 142  VAL  HB ', ' B 189  VAL HG13', -0.491, (193.64, 257.412, 158.006)), (' D  97  LYS  HB3', ' D 186  PHE  HA ', -0.49, (183.216, 241.128, 224.98)), (' K 102  ARG  HB3', ' K 121  ASN  HB3', -0.49, (267.243, 299.876, 221.01)), (' K 780  GLU  O  ', ' K 784  GLN  NE2', -0.488, (233.488, 248.037, 270.578)), (' K 408  ARG  NH2', ' K 414  GLN  OE1', -0.488, (293.761, 247.83, 178.628)), (' C 392  PHE  H  ', ' C 525  CYS  HB2', -0.488, (219.385, 225.398, 198.914)), (' F 138  ASN  ND2', ' F 170  ASP  OD2', -0.487, (249.944, 176.195, 170.877)), (' G  37  GLN  HB2', ' G  47  LEU HD22', -0.486, (213.286, 276.92, 187.019)), (' K1104  VAL HG23', ' K1115  ILE HG12', -0.486, (256.157, 237.379, 308.801)), (' F  16  GLY  HA2', ' F  77  ASN  HA ', -0.484, (233.376, 181.779, 186.488)), (' D 426  PRO  HA ', ' D 463  PRO  HB3', -0.484, (250.009, 273.347, 210.208)), (' D  89  GLY  HA3', ' D 270  LEU  H  ', -0.483, (206.45, 251.525, 220.686)), (' D  99  ASN  ND2', ' D 178  ASP  O  ', -0.482, (182.37, 234.722, 216.645)), (' E  53  TYR  O  ', ' E  71  ARG  NH2', -0.481, (295.468, 240.717, 166.467)), (' K 454  ARG  NH1', ' K 469  SER  O  ', -0.479, (279.649, 233.165, 169.848)), (' D 669  GLY  HA2', ' D 697  MET  HE2', -0.479, (224.489, 259.431, 262.935)), (' D 971  GLY  HA3', ' D 995  ARG HH21', -0.479, (238.369, 245.539, 223.761)), (' E  12  VAL  HB ', ' E 117  VAL HG22', -0.478, (295.205, 267.299, 158.131)), (' C 332  ILE HG22', ' C 362  VAL HG11', -0.478, (214.858, 216.974, 204.813)), (' D 422  ASN  ND2', ' D 454  ARG  O  ', -0.478, (257.788, 273.302, 196.321)), (' D 348  ALA  HB3', ' D 353  TRP  HA ', -0.478, (253.698, 286.723, 197.044)), (' K 246  ARG  NH1', ' K 257  GLY  O  ', -0.478, (286.463, 308.356, 220.992)), (' G 132  VAL  HB ', ' G 179  LEU  HB2', -0.478, (205.06, 241.474, 167.618)), (' H 113  PRO  HB2', ' H 136  LEU HD11', -0.477, (299.059, 292.372, 184.447)), (' K 877  LEU HD22', ' K1034  LEU HD11', -0.477, (232.574, 251.496, 277.453)), (' C 909  ILE  O  ', ' C1108  ASN  ND2', -0.477, (245.505, 225.946, 289.618)), (' K 327  VAL HG13', ' K 542  ASN  HB3', -0.477, (279.082, 241.218, 220.165)), (' C 813  SER  OG ', ' C 815  ARG  NH1', -0.476, (274.557, 235.163, 265.637)), (' A 177  GLN  NE2', ' F 180  THR  OG1', -0.476, (253.483, 199.984, 156.89)), (' K 905  ARG  NH1', ' K1049  LEU  O  ', -0.475, (240.941, 250.187, 286.59)), (' F  38  GLN  HG3', ' F  44  PRO  HG3', -0.475, (231.402, 194.603, 167.85)), (' D 246  ARG  NH1', ' D 247  SER  OG ', -0.474, (170.3, 246.875, 208.609)), (' K 908  GLY  O  ', ' K1038  LYS  NZ ', -0.471, (244.365, 241.162, 290.141)), (' C  99  ASN  ND2', ' C 178  ASP  O  ', -0.471, (287.643, 197.617, 215.584)), (' K1111  GLU  OE2', ' K1113  GLN  NE2', -0.47, (249.872, 245.322, 306.282)), (' C 108  THR  O  ', ' C 236  THR  OG1', -0.47, (261.974, 210.902, 202.887)), (' C 462  LYS  HG2', ' G 157  ASN  HB2', -0.469, (215.854, 238.798, 176.809)), (' K 379  CYS  HA ', ' K 432  CYS  HA ', -0.468, (290.119, 242.888, 193.582)), (' C1090  PRO  O  ', ' D 913  GLN  NE2', -0.467, (233.795, 227.859, 300.044)), (' K 533  LEU HD23', ' K 585  LEU HD12', -0.467, (287.655, 235.86, 230.367)), (' C 328  ARG HH21', ' C 552  LEU HD13', -0.466, (221.557, 213.998, 223.321)), (' D 277  LEU HD22', ' D 285  ILE HD13', -0.464, (209.903, 238.047, 230.981)), (' D 780  GLU  O  ', ' D 784  GLN  NE2', -0.463, (242.758, 224.934, 268.048)), (' H  19  VAL  HB ', ' H  75  ILE  HB ', -0.463, (304.832, 265.46, 195.878)), (' C 409  GLN  HB3', ' C 419  ALA  HB2', -0.463, (218.239, 224.208, 173.119)), (' D 328  ARG  NH1', ' D 578  ASP  OD2', -0.462, (232.765, 288.037, 230.24)), (' D 570  ALA  HB2', ' K 963  VAL HG12', -0.458, (242.745, 265.44, 238.411)), (' D1139  ASP  HB3', ' D1142  GLN  HG3', -0.458, (237.042, 238.186, 320.036)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.457, (271.326, 193.545, 218.697)), (' G  12  SER  HB3', ' G 107  LYS  HB2', -0.456, (206.825, 260.213, 194.665)), (' C 854  LYS  NZ ', ' K 568  ASP  OD2', -0.453, (272.84, 232.835, 240.479)), (' K 822  LEU HD22', ' K 945  LEU HD21', -0.453, (246.27, 262.912, 268.461)), (' B 169  VAL  HA ', ' B 187  VAL HG12', -0.452, (202.015, 259.234, 164.215)), (' H 198  HIS  HE1', ' H 201  SER  HB3', -0.452, (296.966, 295.487, 194.896)), (' E  90  THR HG23', ' E 116  THR  HA ', -0.452, (295.195, 270.841, 163.674)), (' K 742  ILE HG23', ' K1000  ARG  HD2', -0.452, (239.417, 256.581, 231.555)), (' C 117  LEU HD22', ' C 231  ILE HD13', -0.45, (272.23, 216.03, 207.41)), (' F 115  VAL  O  ', ' F 207  LYS  NZ ', -0.449, (261.701, 182.164, 165.273)), (' H   6  GLN HE22', ' H 101  GLY  H  ', -0.448, (292.729, 267.094, 188.029)), (' K  99  ASN  ND2', ' K 178  ASP  O  ', -0.446, (267.696, 305.811, 229.162)), (' E  11  LEU HD22', ' E 153  PRO  HG3', -0.446, (301.357, 273.664, 156.79)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.444, (268.414, 204.308, 233.257)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.444, (255.835, 207.328, 235.886)), (' G  54  ARG  NH1', ' G  58  VAL  O  ', -0.443, (206.585, 285.499, 186.689)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.443, (259.957, 224.859, 280.06)), (' K 966  LEU  O  ', ' K1000  ARG  NH2', -0.443, (242.114, 260.941, 231.55)), (' K  37  TYR  HB3', ' K 223  LEU  HB2', -0.44, (261.278, 283.354, 232.597)), (' K 725  GLU  OE1', ' K1064  HIS  NE2', -0.438, (246.803, 251.404, 275.218)), (' K  66  HIS  HB2', ' K  78  ARG  HB3', -0.437, (283.221, 294.989, 229.459)), (' C1036  GLN  HA ', ' C1048  HIS  HE1', -0.436, (252.716, 233.689, 283.003)), (' E 137  GLN  O  ', ' H 207  LYS  NZ ', -0.436, (299.264, 304.611, 179.261)), (' C 244  LEU  HB3', ' C 258  TRP  HB3', -0.436, (279.261, 190.148, 202.782)), (' C  68  ILE HG22', ' C 262  ALA  HA ', -0.435, (276.735, 188.757, 214.752)), (' K  35  GLY  HA3', ' K  56  LEU  HB3', -0.435, (268.124, 279.909, 234.631)), (' D 985  ASP  O  ', ' D 989  ALA  N  ', -0.435, (241.955, 236.578, 212.88)), (' D 418  ILE  HA ', ' D 422  ASN HD22', -0.435, (255.712, 272.673, 196.63)), (' C 896  ILE  HA ', ' K 712  ILE HG13', -0.435, (264.367, 238.21, 295.242)), (' D 458  LYS  HB2', ' D 474  GLN  HB3', -0.434, (267.923, 267.329, 202.355)), (' D 951  VAL  O  ', ' D 955  ASN  ND2', -0.433, (231.728, 232.333, 251.462)), (' C 966  LEU  O  ', ' C1000  ARG  NH2', -0.433, (261.47, 239.672, 229.776)), (' C  93  ALA  HB3', ' C 266  TYR  HB2', -0.432, (269.238, 200.289, 221.032)), (' C 702  GLU  HA ', ' D 788  ILE  HB ', -0.432, (236.754, 208.67, 272.154)), (' D 596  SER  HB2', ' D 611  LEU HD22', -0.431, (220.8, 257.516, 249.123)), (' C 784  GLN  HB3', ' C1034  LEU HD11', -0.429, (258.716, 242.504, 276.878)), (' D 733  LYS  HE3', ' D 771  ALA  HB1', -0.429, (240.683, 223.562, 249.882)), (' E  20  LEU HD13', ' E  80  LEU HD23', -0.429, (296.14, 259.199, 163.72)), (' E 161  ASN  ND2', ' E 198  THR  O  ', -0.429, (316.127, 296.014, 167.784)), (' D 725  GLU  HB3', ' D1062  PHE  HB2', -0.428, (229.299, 232.437, 271.033)), (' D 108  THR  O  ', ' D 236  THR  OG1', -0.428, (205.136, 254.959, 206.136)), (' C 102  ARG  NH2', ' C 154  GLU  OE2', -0.428, (284.986, 197.235, 208.053)), (' C 276  LEU HD11', ' C 301  CYS  HA ', -0.428, (258.809, 217.579, 237.482)), (' D 289  VAL HG13', ' D 297  SER  HB3', -0.428, (210.444, 247.346, 239.642)), (' D  33  THR  HB ', ' D 220  PHE  HD1', -0.427, (202.355, 242.91, 234.147)), (' K 427  ASP  N  ', ' K 427  ASP  OD1', -0.427, (280.464, 249.641, 186.254)), (' C 102  ARG  HB3', ' C 121  ASN  HB3', -0.427, (282.282, 203.64, 209.443)), (' E  58  TYR  OH ', ' K 457  ARG  O  ', -0.427, (282.199, 242.685, 167.388)), (' C 206  LYS  HE2', ' C 221  SER  HB2', -0.426, (275.844, 207.837, 229.243)), (' K 108  THR  O  ', ' K 236  THR  OG1', -0.426, (272.814, 280.161, 212.234)), (' C 896  ILE HG23', ' C 901  GLN HE21', -0.426, (264.046, 236.249, 290.846)), (' K 901  GLN  HG3', ' K 905  ARG  HE ', -0.426, (237.96, 251.968, 289.966)), (' A  10  SER  HA ', ' A 115  LEU  HG ', -0.426, (233.078, 203.951, 151.551)), (' D 581  THR  OG1', ' D 582  LEU  N  ', -0.425, (237.247, 292.7, 232.019)), (' C  58  PHE  HB2', ' C 293  LEU HD22', -0.424, (259.396, 206.026, 232.369)), (' C1013  ILE HG21', ' D1012  LEU  HG ', -0.424, (245.308, 237.551, 250.838)), (' D  37  TYR  H  ', ' D  55  PHE  HE2', -0.424, (207.939, 241.228, 226.662)), (' C 454  ARG  NE ', ' C 456  PHE  O  ', -0.423, (208.256, 232.53, 166.51)), (' F  13  THR HG21', ' F  19  VAL HG22', -0.423, (236.93, 188.797, 184.062)), (' C  35  GLY  HA3', ' C  56  LEU  HB3', -0.422, (264.937, 207.936, 225.232)), (' A 125  PRO  HG3', ' A 205  HIS  HB2', -0.422, (242.619, 193.584, 145.015)), (' C 362  VAL HG22', ' C 527  PRO  HD2', -0.422, (213.874, 220.99, 205.146)), (' K  83  VAL HG22', ' K 239  GLN HE21', -0.42, (278.225, 287.834, 215.339)), (' C 448  ASN  HB3', ' C 497  PHE  HD1', -0.42, (201.349, 214.495, 171.871)), (' D 203  ILE  HB ', ' D 227  VAL  HB ', -0.42, (204.154, 237.539, 213.744)), (' D 563  GLN  HA ', ' K  41  LYS  HB3', -0.418, (248.446, 282.192, 229.644)), (' D 656  VAL HG12', ' D 658  ASN  H  ', -0.418, (211.328, 264.355, 265.841)), (' A 179  ASP  N  ', ' A 179  ASP  OD1', -0.418, (250.927, 205.48, 153.815)), (' D1089  PHE  O  ', ' D1121  PHE  N  ', -0.417, (240.907, 243.1, 306.832)), (' C 378  LYS  NZ ', ' C 407  VAL  O  ', -0.417, (218.423, 218.454, 177.301)), (' K  40  ASP  N  ', ' K  40  ASP  OD1', -0.416, (253.544, 277.345, 231.017)), (' D1018  ILE  O  ', ' D1022  ALA  N  ', -0.416, (238.912, 233.192, 261.507)), (' K 324  GLU  H  ', ' K 539  VAL HG12', -0.416, (283.85, 250.177, 228.088)), (' G 170  ASP  N  ', ' G 170  ASP  OD1', -0.415, (196.59, 260.218, 184.367)), (' K 418  ILE  HA ', ' K 422  ASN HD22', -0.414, (287.164, 237.678, 175.88)), (' K 280  ASN HD21', ' K 284  THR  HB ', -0.414, (252.978, 284.895, 244.011)), (' C 100  ILE HG23', ' C 243  ALA  HB3', -0.413, (280.127, 194.733, 209.92)), (' K 575  ALA  HA ', ' K 586  ASP  HA ', -0.413, (280.41, 233.324, 233.457)), (' C 708  SER  HB3', ' C 711  SER  HB3', -0.413, (232.148, 208.895, 290.863)), (' D 119  ILE  HB ', ' D 128  ILE HG12', -0.412, (198.11, 238.084, 208.684)), (' C1076  THR  O  ', ' C1097  SER  N  ', -0.412, (236.589, 212.835, 300.021)), (' C 716  THR HG22', ' C1110  TYR  HB3', -0.412, (246.599, 214.185, 294.971)), (' B  14  PRO  HA ', ' B  85  VAL HG23', -0.412, (235.766, 263.65, 166.903)), (' C 417  LYS  O  ', ' C 422  ASN  ND2', -0.412, (211.594, 226.761, 170.118)), (' D 383  SER  HA ', ' D 384  PRO  HD3', -0.411, (232.849, 269.861, 206.643)), (' G   4  MET  HG3', ' G  99  GLY  HA2', -0.411, (226.928, 271.099, 190.424)), (' K 728  PRO  HB2', ' K1018  ILE HD11', -0.41, (243.27, 253.482, 261.401)), (' E  56  SER  OG ', ' K 421  TYR  OH ', -0.41, (287.148, 242.566, 168.127)), (' G  21  ILE HD11', ' G 104  LEU HD21', -0.41, (212.749, 269.155, 192.069)), (' D1084  ASP  N  ', ' D1084  ASP  OD1', -0.409, (241.319, 248.655, 318.063)), (' D 919  ASN  HB3', ' D 922  LEU  HB3', -0.409, (218.909, 230.59, 292.791)), (' H 170  ASP  N  ', ' H 170  ASP  OD1', -0.409, (312.249, 284.301, 184.229)), (' K  89  GLY  HA3', ' K 270  LEU  H  ', -0.408, (270.286, 277.223, 226.662)), (' E 165  LEU HD21', ' E 187  VAL HG21', -0.408, (312.061, 294.263, 172.119)), (' K1114  ILE  HA ', ' K1114  ILE HD12', -0.407, (256.627, 240.807, 312.702)), (' C1084  ASP  N  ', ' C1084  ASP  OD1', -0.407, (228.266, 222.656, 314.675)), (' G 113  PRO  HB3', ' G 139  PHE  HB3', -0.406, (200.618, 249.087, 183.046)), (' D1090  PRO  HA ', ' D1120  THR  HA ', -0.406, (238.616, 242.341, 306.218)), (' K 455  LEU HD22', ' K 493  GLN  HG3', -0.405, (290.152, 233.473, 167.269)), (' F 170  ASP  N  ', ' F 170  ASP  OD1', -0.405, (246.429, 175.721, 171.552)), (' K 886  TRP  HB3', ' K1035  GLY  HA2', -0.404, (236.051, 246.794, 284.341)), (' K1084  ASP  N  ', ' K1084  ASP  OD1', -0.404, (258.067, 225.393, 316.2)), (' D 921  LYS  O  ', ' D 925  ASN  ND2', -0.404, (213.477, 227.289, 289.773)), (' C  97  LYS  HB3', ' C 186  PHE  HA ', -0.404, (281.003, 193.266, 222.073)), (' B  51  ILE HG13', ' B  57  THR  HB ', -0.404, (237.691, 284.323, 176.227)), (' E 172  PHE  HB2', ' E 184  SER  HB3', -0.403, (300.564, 285.679, 171.226)), (' K1093  GLY  HA2', ' K1107  ARG  HG3', -0.403, (254.653, 237.974, 297.804)), (' D 866  THR  OG1', ' D 867  ASP  N  ', -0.403, (231.085, 216.598, 257.393)), (' A   6  GLU  OE1', ' A 111  GLN  N  ', -0.403, (227.131, 195.67, 160.287)), (' C 661  GLU  O  ', ' C 695  TYR  OH ', -0.403, (245.635, 207.632, 259.332)), (' D 376  THR  HB ', ' D 435  ALA  H  ', -0.403, (240.4, 276.742, 193.169)), (' C 277  LEU HD22', ' C 285  ILE HD13', -0.403, (269.262, 216.201, 230.86)), (' K 909  ILE HG13', ' K 911  VAL HG23', -0.402, (248.73, 245.75, 293.128)), (' K 712  ILE HD13', ' K1094  VAL HG21', -0.401, (260.767, 238.793, 298.197)), (' C1083  HIS  HB2', ' C1137  VAL HG23', -0.401, (232.481, 221.819, 312.221)), (' E 219  ARG  HA ', ' E 220  ASP  HA ', -0.401, (306.78, 306.718, 156.172)), (' B 130  LEU HD12', ' B 145  GLY  HA3', -0.401, (202.97, 251.781, 157.839)), (' G  36  TYR  HA ', ' G  36  TYR  HD2', -0.401, (217.464, 278.626, 185.392)), (' D 294  ASP  N  ', ' D 294  ASP  OD1', -0.4, (209.161, 252.828, 239.446)), (' K 393  THR HG21', ' K 518  LEU  HB2', -0.4, (273.566, 239.288, 201.177)), (' C 598  ILE  HB ', ' C 609  ALA  HB3', -0.4, (247.656, 208.005, 247.373)), (' D 276  LEU HD11', ' D 301  CYS  HA ', -0.4, (215.572, 244.285, 239.046)), (' C 475  ALA  HB3', ' G 125  LEU HD22', -0.4, (199.594, 238.703, 157.092))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
