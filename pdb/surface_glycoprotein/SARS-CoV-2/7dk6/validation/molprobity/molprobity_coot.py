# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('a', ' 151 ', 'PRO', None, (213.059, 140.032, 303.0719999999999)), ('a', ' 153 ', 'PRO', None, (209.80299999999994, 143.531, 298.56399999999996)), ('a', ' 193 ', 'PRO', None, (181.55, 130.537, 296.6569999999999)), ('b', '   8 ', 'PRO', None, (205.91499999999996, 172.89500000000004, 293.049)), ('b', '  28 ', 'SER', None, (224.31499999999997, 173.97000000000006, 285.446)), ('b', '  81 ', 'PRO', None, (195.668, 167.79700000000005, 278.269)), ('b', '  99 ', 'PRO', None, (226.97399999999993, 165.408, 290.18)), ('b', ' 145 ', 'PRO', None, (187.601, 161.06, 297.86)), ('c', ' 151 ', 'PRO', None, (166.20299999999997, 227.30500000000004, 312.281)), ('c', ' 153 ', 'PRO', None, (167.682, 227.34400000000005, 306.003)), ('c', ' 193 ', 'PRO', None, (174.947, 258.50700000000006, 303.232)), ('d', '   8 ', 'PRO', None, (197.369, 218.65000000000006, 297.156)), ('d', '  28 ', 'SER', None, (188.708, 202.25700000000003, 290.736)), ('d', '  81 ', 'PRO', None, (196.34599999999995, 229.67700000000005, 281.98399999999987)), ('d', '  99 ', 'PRO', None, (181.876, 202.792, 295.845)), ('d', ' 145 ', 'PRO', None, (198.06700000000006, 237.15800000000004, 304.302))]
data['rota'] = [('a', '  95 ', 'CYS', 0.06266863119500213, (219.37099999999995, 150.435, 285.471)), ('c', ' 144 ', 'CYS', 0.23639836683519033, (173.771, 243.86100000000005, 308.525))]
data['cbeta'] = []
data['probe'] = [(' A 913  GLN  NE2', ' B1090  PRO  O  ', -0.724, (191.158, 212.184, 141.704)), (' A1090  PRO  O  ', ' C 913  GLN  NE2', -0.72, (198.742, 195.92, 139.902)), (' a 136  THR  OG1', ' a 139  MET  O  ', -0.698, (177.788, 138.587, 298.333)), (' C 439  ASN  O  ', ' C 443  SER  OG ', -0.69, (223.872, 209.203, 259.294)), (' B 755  GLN  O  ', ' C 968  SER  OG ', -0.679, (212.944, 189.594, 209.476)), (' B  29  THR  OG1', ' B 215  ASP  OD2', -0.65, (221.278, 252.642, 210.06)), (' A 968  SER  OG ', ' C 755  GLN  O  ', -0.649, (195.032, 202.53, 212.898)), (' A1032  CYS  SG ', ' A1051  SER  OG ', -0.64, (190.758, 209.918, 163.985)), (' A 319  ARG  NH2', ' C 739  THR  OG1', -0.637, (192.016, 187.812, 206.294)), (' A  29  THR  OG1', ' A 215  ASP  OD2', -0.634, (155.41, 188.178, 212.043)), (' C 645  THR  OG1', ' C 648  GLY  O  ', -0.628, (238.119, 196.743, 186.107)), (' A  14  GLN  N  ', ' A 136  CYS  HG ', -0.621, (151.932, 191.63, 244.122)), (' C  94  SER  OG ', ' C  96  GLU  OE2', -0.611, (238.579, 154.998, 212.776)), (' C 908  GLY  O  ', ' C1038  LYS  NZ ', -0.609, (202.766, 200.981, 151.623)), (' b  94  GLN  NE2', ' b  96  ASN  OD1', -0.607, (222.702, 171.004, 284.13)), (' A 108  THR  OG1', ' A 234  ASN  O  ', -0.601, (172.145, 192.368, 237.495)), (' a  53  ARG  NH2', ' a  98  ASN  OD1', -0.593, (223.892, 157.908, 274.677)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.593, (161.74, 197.637, 207.272)), (' B 398  ASP  OD2', ' B 423  TYR  OH ', -0.588, (180.623, 211.333, 256.121)), (' C 108  THR  OG1', ' C 234  ASN  O  ', -0.583, (233.991, 172.958, 229.168)), (' d   7  SER  O  ', ' d  22  SER  OG ', -0.574, (197.706, 216.532, 294.632)), (' B 409  GLN  N  ', ' B 409  GLN  OE1', -0.569, (189.612, 216.221, 265.69)), (' A 409  GLN  N  ', ' A 409  GLN  OE1', -0.567, (207.725, 170.779, 261.303)), (' C 613  GLN  NE2', ' C 647  ALA  O  ', -0.566, (233.907, 200.19, 188.195)), (' d 152  TRP  HE1', ' d 181  SER  HG ', -0.564, (185.065, 240.459, 317.678)), (' A 290  ASP  OD1', ' A 291  CYS  N  ', -0.542, (173.71, 192.791, 207.767)), (' c  98  ASN  ND2', ' c  99  GLY  O  ', -0.538, (174.097, 210.088, 282.803)), (' b  65  ARG  NH1', ' b  86  ASP  OD1', -0.532, (198.598, 161.813, 281.951)), (' A 725  GLU  OE2', ' A1028  LYS  NZ ', -0.525, (192.193, 204.745, 170.879)), (' B 203  ILE HD12', ' B 229  LEU HD13', -0.517, (232.824, 234.72, 226.902)), (' B 738  CYS  SG ', ' B 764  ASN  ND2', -0.516, (220.935, 195.102, 200.042)), (' C 598  ILE HG23', ' C 664  ILE HG21', -0.502, (231.01, 187.612, 182.739)), (' C 287  ASP  OD1', ' C 288  ALA  N  ', -0.501, (226.855, 169.738, 197.086)), (' A 102  ARG  O  ', ' A 121  ASN  N  ', -0.495, (154.548, 203.184, 232.939)), (' B 102  ARG  O  ', ' B 121  ASN  N  ', -0.487, (237.732, 246.592, 228.745)), (' A 909  ILE  O  ', ' A1108  ASN  ND2', -0.485, (191.117, 201.577, 150.753)), (' A 787  GLN  OE1', ' B 703  ASN  ND2', -0.485, (196.505, 231.829, 161.321)), (' d 134  ALA  N  ', ' d 185  LEU  O  ', -0.48, (173.86, 243.914, 323.622)), (' A1074  ASN  OD1', ' C 895  GLN  NE2', -0.478, (182.586, 186.338, 148.815)), (' B1031  GLU  OE2', ' C1039  ARG  NE ', -0.471, (205.467, 203.341, 164.724)), (' b   7  SER  O  ', ' b  22  SER  OG ', -0.467, (207.58, 174.587, 290.953)), (' a 200  ASN  ND2', ' a 211  ASP  OD1', -0.467, (200.682, 131.132, 291.933)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.466, (233.353, 165.859, 198.851)), (' C 109  THR  OG1', ' C 111  ASP  OD1', -0.464, (238.787, 169.587, 234.855)), (' A1077  THR  OG1', ' A1078  ALA  N  ', -0.459, (191.159, 188.179, 140.472)), (' B 109  THR  OG1', ' B 111  ASP  OD1', -0.458, (221.105, 242.238, 240.937)), (' a  39  GLN  OE1', ' b  42  GLN  NE2', -0.457, (211.033, 154.475, 291.972)), (' C  48  LEU HD21', ' C 276  LEU HD13', -0.454, (222.957, 177.033, 196.452)), (' C 280  ASN  OD1', ' C 284  THR  N  ', -0.451, (217.146, 163.791, 199.511)), (' B  33  THR  OG1', ' B 219  GLY  O  ', -0.45, (224.985, 242.388, 205.312)), (' b 110  ILE  O  ', ' b 144  TYR  OH ', -0.45, (191.629, 162.9, 292.657)), (' d 170  GLN  NE2', ' d 175  SER  O  ', -0.45, (193.579, 236.216, 297.493)), (' A 908  GLY  O  ', ' A1038  LYS  NZ ', -0.449, (196.307, 205.776, 152.606)), (' c  60  ASN  OD1', ' c  61  ALA  N  ', -0.448, (180.018, 204.877, 301.006)), (' C 318  PHE  N  ', ' C 593  GLY  O  ', -0.445, (232.895, 195.426, 197.681)), (' A  99  ASN  OD1', ' A 188  ASN  ND2', -0.445, (147.688, 203.56, 222.4)), (' A 287  ASP  OD1', ' A 288  ALA  N  ', -0.445, (167.662, 200.856, 204.958)), (' B 802  PHE  CD1', ' B 805  ILE HD11', -0.441, (224.117, 215.562, 158.211)), (' B 230  PRO  O  ', ' C 357  ARG  NH2', -0.437, (230.681, 227.803, 234.697)), (' B 287  ASP  OD1', ' B 288  ALA  N  ', -0.436, (224.884, 235.373, 202.614)), (' d 112  ARG  NH1', ' d 175  SER  OG ', -0.431, (193.929, 240.494, 294.298)), (' a  31  SER  O  ', ' a  53  ARG  NH1', -0.423, (225.453, 154.521, 273.026)), (' A 813  SER  OG ', ' A 815  ARG  NH1', -0.423, (181.248, 225.306, 180.13)), (' a  99  GLY  N  ', ' a 103  ALA  O  ', -0.422, (219.984, 158.362, 277.802)), (' C 725  GLU  OE1', ' C1064  HIS  NE2', -0.419, (207.028, 191.723, 166.344)), (' B 442  ASP  OD1', ' B 509  ARG  NH2', -0.418, (171.531, 226.405, 262.79)), (' b 171  ASP  OD1', ' b 172  SER  N  ', -0.418, (197.857, 153.268, 288.951)), (' B 787  GLN  OE1', ' C 703  ASN  ND2', -0.416, (227.825, 196.107, 155.888)), (' C 802  PHE  CD1', ' C 805  ILE HD11', -0.413, (200.094, 180.265, 157.779)), (' b  71  SER  N  ', ' b  74  ASP  O  ', -0.413, (213.432, 177.83, 282.276)), (' a 171  PRO  O  ', ' b 166  SER  OG ', -0.412, (199.776, 148.192, 303.473)), (' A 669  GLY  N  ', ' C 864  LEU  O  ', -0.409, (187.797, 182.414, 181.591)), (' B 802  PHE  HD1', ' B 805  ILE HD11', -0.408, (223.733, 216.04, 158.007)), (' C1028  LYS  O  ', ' C1032  CYS  N  ', -0.402, (199.841, 194.827, 164.173))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
