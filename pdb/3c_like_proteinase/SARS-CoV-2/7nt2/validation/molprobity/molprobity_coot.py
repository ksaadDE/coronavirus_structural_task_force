# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  23 ', 'GLY', 0.02167825421082127, (-12.046, -25.343, 5.402999999999999)), ('A', ' 154 ', 'TYR', 0.04772936162216893, (14.643000000000002, 2.8939999999999997, -2.683)), ('B', ' 195 ', 'GLY', 0.007689660229887117, (7.821000000000001, 0.8830000000000001, -42.011999999999986))]
data['omega'] = []
data['rota'] = [('A', '  24 ', 'THR', 0.009435615356778726, (-13.57, -24.593, 1.977)), ('A', '  62 ', 'SER', 0.26251147574231487, (-8.163999999999996, -24.224, 16.037)), ('A', '  64 ', 'HIS', 0.05146529091937822, (-4.894, -26.18899999999998, 12.865999999999994)), ('A', '  69 ', 'GLN', 0.015372690601813148, (1.3260000000000016, -23.014, 1.8969999999999996)), ('A', '  81 ', 'SER', 0.29263861024951526, (-5.9, -12.505000000000003, 15.929999999999996)), ('A', '  93 ', 'THR', 0.14881991757957327, (8.947, -19.680000000000007, 10.580999999999998)), ('A', ' 102 ', 'LYS', 0.13799757353426162, (6.005, -0.577, 6.126)), ('A', ' 121 ', 'SER', 0.23481977834167644, (0.7939999999999999, -17.908, -6.952999999999999)), ('A', ' 145 ', 'CYS', 0.019257188095017613, (-8.883, -11.995, -2.535)), ('A', ' 188 ', 'ARG', 0.11767311448607194, (-20.446, -8.678, 4.13)), ('A', ' 224 ', 'THR', 0.12794875153140295, (-3.7960000000000016, 31.619000000000003, -18.627)), ('A', ' 232 ', 'LEU', 0.16324095656861237, (-16.01600000000001, 26.452999999999978, -11.781999999999995)), ('A', ' 238 ', 'ASN', 0.1267631889455819, (-17.213, 16.151, -12.529999999999996)), ('A', ' 288 ', 'GLU', 0.03359912963068932, (-5.883000000000002, 9.751999999999999, -18.405)), ('B', '   5 ', 'LYS', 0.17304827991395969, (-3.019, -4.273, -19.359999999999996)), ('B', '  49 ', 'MET', 0.03283070184435196, (28.63, 4.544, -34.083)), ('B', '  55 ', 'GLU', 0.09629188207679536, (35.052, -7.771, -35.08799999999999)), ('B', ' 141 ', 'LEU', 0.06573054966774527, (15.615, 6.669999999999997, -21.256999999999998)), ('B', ' 158 ', 'SER', 0.13179925810479806, (10.806, -16.955, -22.177)), ('B', ' 190 ', 'THR', 0.032459052207105724, (22.68, 5.576, -39.960999999999984)), ('B', ' 222 ', 'ARG', 0.01473254256044938, (-26.686, -8.616, -37.722999999999985)), ('B', ' 276 ', 'MET', 0.022886666854333517, (-17.836000000000013, 4.882, -30.777))]
data['cbeta'] = []
data['probe'] = [(' B 604  URK  C3 ', ' B 606  DMS  H13', -0.755, (19.8, 5.16, -26.547)), (' A 190  THR  CG2', ' A 704  HOH  O  ', -0.684, (-25.763, -7.436, 5.412)), (' A 260  ALA  O  ', ' A 263  ASP  HB3', -0.678, (0.586, 26.851, -17.861)), (' A 190  THR HG21', ' A 704  HOH  O  ', -0.672, (-26.214, -6.614, 5.423)), (' B 604  URK  C2 ', ' B 606  DMS  H13', -0.667, (19.56, 4.459, -25.839)), (' B 227  LEU  H  ', ' B 605  PEG  H21', -0.66, (-14.614, -14.377, -46.464)), (' B 227  LEU  H  ', ' B 605  PEG  C2 ', -0.656, (-14.129, -14.509, -46.469)), (' B 602  DMS  H23', ' B 719  HOH  O  ', -0.63, (21.886, -12.275, -8.715)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.567, (-7.13, -4.796, 7.128)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.566, (-0.434, -2.754, -5.513)), (' A 137  LYS  O  ', ' B   4  ARG  NH1', -0.563, (-7.732, -0.349, -13.167)), (' B 226  THR  HA ', ' B 605  PEG  H21', -0.548, (-15.726, -14.245, -46.746)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.536, (21.863, -9.864, -29.78)), (' A 126  TYR  HE1', ' A 128  CYS  SG ', -0.536, (-5.142, -2.02, -10.332)), (' A 298  ARG  HG3', ' A 303  VAL  HB ', -0.535, (12.317, 7.284, -10.802)), (' A 228  ASN  O  ', ' A 232  LEU HD23', -0.522, (-14.693, 29.335, -10.585)), (' B 226  THR  CA ', ' B 605  PEG  H21', -0.51, (-15.781, -13.662, -46.787)), (' A   4  ARG  HD2', ' B 137  LYS  O  ', -0.503, (5.068, 1.311, -25.249)), (' A 126  TYR  HE1', ' A 128  CYS  HG ', -0.5, (-4.951, -2.567, -10.444)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.494, (9.949, -7.833, -21.881)), (' B 227  LEU  N  ', ' B 605  PEG  H21', -0.49, (-14.597, -13.634, -46.281)), (' B  49  MET  HA ', ' B  49  MET  HE2', -0.486, (27.952, 3.153, -33.765)), (' A  76  ARG  HB3', ' A  92  ASP  OD2', -0.484, (5.569, -24.327, 12.002)), (' A  86  VAL HG13', ' A 179  GLY  CA ', -0.484, (-7.121, -4.805, 7.383)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -0.476, (-7.834, 13.228, -28.982)), (' B  76  ARG  NH1', ' B  92  ASP  OD2', -0.476, (36.493, -15.218, -11.092)), (' B 140  PHE  O  ', ' B 606  DMS  H22', -0.469, (14.04, 5.728, -24.178)), (' B 169  THR  O  ', ' B 169  THR HG22', -0.467, (8.237, 7.984, -33.3)), (' A 188  ARG  NE ', ' A 704  HOH  O  ', -0.459, (-24.961, -7.056, 6.417)), (' B 227  LEU  H  ', ' B 605  PEG  H22', -0.453, (-13.939, -14.78, -46.067)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.451, (-20.023, -2.749, -6.136)), (' B  44  CYS  SG ', ' B  49  MET  HE3', -0.449, (29.189, 1.051, -31.826)), (' B  49  MET  SD ', ' B 604  URK  O2 ', -0.448, (25.394, 2.932, -32.534)), (' B 101  TYR  HA ', ' B 157  VAL  O  ', -0.442, (12.987, -18.858, -19.754)), (' B 169  THR  CG2', ' B 169  THR  O  ', -0.438, (8.274, 7.852, -33.744)), (' B  55 AGLU  CD ', ' B  55 AGLU  H  ', -0.434, (33.419, -6.964, -36.464)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.433, (21.966, -17.142, -12.969)), (' B 104  VAL  O  ', ' B 160  CYS  HA ', -0.427, (12.371, -13.964, -27.481)), (' B 605  PEG  H22', ' B 731  HOH  O  ', -0.424, (-13.341, -16.569, -45.95)), (' A  76  ARG  HB3', ' A  92  ASP  CG ', -0.421, (5.036, -23.923, 12.14)), (' A 288 AGLU  OE2', ' A 290  GLU  HB2', -0.42, (-4.452, 6.038, -15.52)), (' B 276  MET  HE1', ' B 281  ILE  CD1', -0.419, (-15.564, 0.138, -29.316)), (' A  17  MET  HE2', ' A 117  CYS  SG ', -0.419, (-0.281, -12.441, -4.364)), (' A 169  THR  CG2', ' A 171  VAL HG22', -0.41, (-17.617, -0.729, -8.937)), (' A 276  MET  CE ', ' A 280  THR  HA ', -0.41, (-6.407, 12.589, -28.213)), (' A 226  THR  HA ', ' A 262  LEU HD22', -0.402, (-5.451, 30.711, -12.113)), (' A 276  MET  HE1', ' A 280  THR  HA ', -0.401, (-6.169, 12.029, -28.203)), (' B  52  PRO  HD2', ' B 188  ARG  HG2', -0.4, (27.525, 0.866, -38.023))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
