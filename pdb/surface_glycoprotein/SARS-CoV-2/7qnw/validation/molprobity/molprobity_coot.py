# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 161 ', 'PRO', None, (-30.972859999999994, 29.966490000000004, -73.18006000000001)), ('A', ' 163 ', 'PRO', None, (-33.07001, 24.88104, -70.4023)), ('B', '   8 ', 'PRO', None, (-15.61148, 2.1489499999999997, -56.6318)), ('B', ' 142 ', 'PRO', None, (-23.0644, -2.40722, -76.41128000000003)), ('H', ' 155 ', 'PRO', None, (-71.47035, -1.0835000000000004, -29.906020000000012)), ('H', ' 157 ', 'PRO', None, (-73.1639, -1.5254199999999998, -24.00909)), ('L', '   8 ', 'PRO', None, (-50.71619, -4.78633, -0.17513)), ('L', ' 142 ', 'PRO', None, (-59.13947, -19.08333, -4.17341))]
data['rota'] = [('H', ' 217 ', 'LYS', 0.19792912555486897, (-82.44672, -18.08034, -27.959200000000006)), ('L', '  33 ', 'LEU', 0.21369598242712062, (-51.2852, 11.767979999999996, -0.10676)), ('L', ' 161 ', 'GLN', 0.17809277284004918, (-59.48495000000002, -14.267909999999997, -24.223050000000008)), ('L', ' 182 ', 'LEU', 0.15950005577613172, (-59.74013000000002, -19.6674, -34.484330000000014)), ('E', ' 369 ', 'TYR', 0.29937317754830817, (-48.39304999999999, 31.572999999999986, -15.90435)), ('E', ' 371 ', 'LEU', 0.08299640540064557, (-48.415549999999996, 29.54758, -20.950180000000007)), ('E', ' 392 ', 'PHE', 0.07545560100187965, (-44.71320999999999, 34.8085, 0.4514100000000001)), ('A', '  68 ', 'ARG', 0.0, (-22.60045999999999, 36.244419999999984, -51.61198000000002)), ('A', ' 113 ', 'LEU', 0.08820598650402214, (-28.986550000000005, 14.95402, -44.79774)), ('A', ' 119 ', 'GLN', 0.2292461098936471, (-37.12930000000001, 19.021749999999994, -59.24103))]
data['cbeta'] = []
data['probe'] = [(' E 450  ASN  OD1', ' E 901  HOH  O  ', -0.836, (-18.064, 30.533, -26.554)), (' B   2  ILE  O  ', ' B 501  HOH  O  ', -0.778, (-16.336, 16.805, -46.721)), (' A  49  TRP  HE1', ' A  52  THR HG23', -0.72, (-28.432, 23.133, -46.442)), (' B  97  TRP  O  ', ' B 501  HOH  O  ', -0.68, (-16.975, 17.795, -46.928)), (' A 206  GLN  OE1', ' A 401  HOH  O  ', -0.677, (-53.596, 7.373, -85.085)), (' L  43  ALA  O  ', ' L 302  GOL  O3 ', -0.652, (-66.945, 4.65, -5.933)), (' B  67  SER  O  ', ' B 503  HOH  O  ', -0.647, (-14.839, 2.674, -40.079)), (' A  35  TYR  HB2', ' A 100  PRO  HG2', -0.647, (-33.96, 21.876, -42.678)), (' L 109  ARG  NH1', ' L 110  THR  O  ', -0.619, (-63.308, -21.168, -0.682)), (' A 306   CL CL  ', ' B  98  THR HG22', -0.582, (-21.463, 19.712, -50.074)), (' E 386  LYS  NZ ', ' H 103  LEU  O  ', -0.562, (-55.377, 23.945, -2.6)), (' E 492  LEU  O  ', ' E 493  ARG  NH1', -0.555, (-14.559, 19.283, -19.108)), (' A 113  LEU HD23', ' B  91  TYR  CE1', -0.555, (-26.875, 11.41, -42.985)), (' A 182  ALA  H  ', ' A 302  GOL  H32', -0.551, (-29.476, 18.572, -74.584)), (' H  11  VAL HG21', ' H 155  PRO  HG3', -0.545, (-71.133, 2.419, -29.758)), (' H  29  PHE  O  ', ' H  72  ARG  NH2', -0.537, (-66.633, 26.569, -10.558)), (' H 124  THR HG22', ' H 155  PRO  HD3', -0.536, (-72.222, 0.998, -31.458)), (' H 100  GLY  HA3', ' H 107  TYR  CZ ', -0.53, (-60.436, 19.139, -1.361)), (' A  47  LEU  O  ', ' A 403  HOH  O  ', -0.526, (-20.392, 18.208, -53.184)), (' H 218  ARG  NH1', ' H 220  GLU  OE1', -0.518, (-85.577, -27.601, -27.031)), (' A  73  VAL HG22', ' A  80  PHE  HB3', -0.505, (-37.021, 29.456, -46.535)), (' A  67  SER  HA ', ' A 404  HOH  O  ', -0.498, (-21.407, 34.911, -47.682)), (' H 167  LEU HD21', ' H 190  VAL HG21', -0.485, (-80.503, -21.012, -15.289)), (' H  22  CYS  HB3', ' H  79  LEU  HB3', -0.483, (-68.254, 19.387, -15.866)), (' A  40  ARG  HB3', ' A  50  ILE HD11', -0.483, (-26.377, 25.631, -56.208)), (' A  70  THR  HB ', ' A  83  LYS  HB2', -0.482, (-29.731, 36.245, -50.403)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.48, (-62.25, 4.265, 0.712)), (' H 201  THR HG23', ' H 218  ARG  HE ', -0.48, (-87.304, -23.943, -23.929)), (' A 101  ARG  HB2', ' A 115  ASP  HB3', -0.475, (-34.41, 13.402, -44.931)), (' H  97  ALA  HB1', ' H 108  PHE  HB3', -0.474, (-62.433, 14.839, -8.069)), (' B  40  PRO  HB3', ' B 166  GLU  HG3', -0.473, (-29.543, 10.533, -67.534)), (' H  83  MET  HB3', ' H  86  LEU HD21', -0.467, (-61.493, 13.504, -26.62)), (' H  91  THR HG23', ' H 118  THR  HA ', -0.464, (-63.911, 3.603, -25.668)), (' A   8  GLY  HA3', ' A  20  LEU HD23', -0.464, (-34.686, 30.775, -60.13)), (' A 133  PRO  HB3', ' A 159  TYR  HB3', -0.463, (-34.548, 26.381, -79.29)), (' A  49  TRP  NE1', ' A  52  THR HG23', -0.463, (-27.563, 23.176, -46.246)), (' A 157  LYS  NZ ', ' A 185  GLN  OE1', -0.461, (-27.102, 23.872, -85.229)), (' H 152  ASP  OD1', ' H 179  GLN  NE2', -0.461, (-66.678, -10.861, -32.877)), (' E 489  TYR  HD1', ' E 802  ACT  H1 ', -0.458, (-9.46, 13.579, -18.216)), (' B 121  PRO  HD3', ' B 133  VAL HG22', -0.457, (-29.781, 16.697, -94.687)), (' B  37  GLN  HB2', ' B  47  LEU HD11', -0.455, (-29.844, 4.816, -54.391)), (' A 113  LEU HD21', ' B  49  TYR  HB2', -0.454, (-29.685, 10.334, -42.659)), (' E 369  TYR  CE1', ' E 434  ILE HD11', -0.453, (-44.255, 30.364, -14.119)), (' A  37  GLY  HA3', ' A  52  THR HG22', -0.45, (-30.707, 23.677, -46.937)), (' E 379  CYS  SG ', ' E 384  PRO  HG3', -0.45, (-47.956, 25.095, -11.207)), (' E 373  PRO  HA ', ' H  65  LYS  HE2', -0.447, (-48.709, 23.035, -23.523)), (' L 148  GLN  HB3', ' L 196  GLU  HB3', -0.445, (-53.829, -25.885, -19.54)), (' A 113  LEU HD23', ' B  91  TYR  CZ ', -0.443, (-27.188, 11.393, -42.296)), (' C   1  NAG  H62', ' C   2  NAG  C7 ', -0.436, (-44.108, 38.622, -27.818)), (' A  75  THR  OG1', ' A 304  GOL  O2 ', -0.435, (-42.906, 33.304, -41.296)), (' H 208  HIS  CD2', ' H 210  PRO  HD2', -0.434, (-76.309, -2.414, -27.68)), (' H 143  THR  HA ', ' H 194  SER  HB2', -0.433, (-76.085, -31.76, -12.583)), (' E 502  GLY  O  ', ' E 506  GLN  HG3', -0.431, (-32.197, 19.034, -30.401)), (' A 110  GLY  HA2', ' E 498  ARG  HD2', -0.431, (-23.539, 20.355, -35.491)), (' A  18  LEU  HB3', ' A  84  LEU  HB3', -0.43, (-27.095, 33.271, -57.128)), (' A   6  GLU  CD ', ' A 120  GLY  H  ', -0.43, (-35.913, 21.969, -58.121)), (' H  40  ALA  HB3', ' H  43  LYS  HB2', -0.427, (-57.609, 1.618, -17.629)), (' H  39  GLN  HB2', ' H  45  LEU HD23', -0.427, (-60.569, 5.892, -13.47)), (' A  99  ARG  NH1', ' A 115  ASP  OD2', -0.427, (-38.163, 14.864, -44.437)), (' H 154  PHE  HA ', ' H 155  PRO  HA ', -0.421, (-69.74, -2.806, -29.412)), (' H 120  SER  HB3', ' H 154  PHE  CZ ', -0.421, (-65.717, 1.064, -31.276)), (' A  12  VAL  O  ', ' A 125  VAL  HA ', -0.42, (-25.809, 34.381, -66.063)), (' E 359  SER  HB3', ' E 394  ASN  OD1', -0.419, (-38.058, 39.502, -1.524)), (' A 101  ARG  HD3', ' A 113  LEU HD11', -0.416, (-32.194, 12.018, -42.775)), (' A  45  LYS  HA ', ' A  45  LYS  HD3', -0.411, (-18.36, 16.824, -61.588)), (' L  35  TRP  CE2', ' L  73  LEU  HB2', -0.409, (-54.446, 5.016, 2.82)), (' E 501  TYR  HB3', ' E 505  HIS  HB2', -0.409, (-29.054, 17.692, -30.388)), (' E 385  THR HG22', ' H  57  ASN  HB2', -0.409, (-55.538, 28.424, -13.293)), (' B 187  TYR  CE2', ' B 212  ARG  HD3', -0.408, (-29.411, 19.024, -100.78)), (' B  20  THR HG23', ' B  72  THR HG23', -0.407, (-19.615, -2.368, -50.474)), (' B 185  ALA  O  ', ' B 189  LYS  HG3', -0.404, (-23.414, 23.932, -102.473)), (' B  35  TRP  CE2', ' B  73  LEU  HB2', -0.404, (-23.442, 3.468, -49.546)), (' L 188  GLU  HG3', ' L 212  ARG  NH1', -0.402, (-63.115, -30.552, -39.274)), (' E 447  GLY  HA2', ' E 498  ARG  HG3', -0.402, (-22.973, 24.161, -32.778)), (' B   1  ALA  HB2', ' B  96  PRO  HG2', -0.401, (-14.293, 22.289, -45.79)), (' H  34  MET  HB3', ' H  79  LEU HD22', -0.4, (-64.674, 20.521, -13.651)), (' H  12  VAL HG11', ' H  86  LEU HD13', -0.4, (-63.698, 10.355, -29.396)), (' A   2  VAL HG22', ' A  29  ILE HD13', -0.4, (-45.288, 19.474, -46.132))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
