# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   1 ', 'SER', 0.12784054024794464, (16.283000000000005, 4.886000000000002, -17.044)), ('A', ' 123 ', 'SER', 0.05359990173019469, (-13.186, 0.171, -12.939)), ('A', ' 181 ', 'PHE', 0.2912028335702016, (-17.433, 9.085, -35.532)), ('A', ' 222 ', 'ARG', 0.15519509602654108, (26.886, 9.548, -38.81300000000001)), ('A', ' 232 ', 'LEU', 0.29277813109180423, (10.293, 5.07, -49.293000000000006)), ('A', ' 254 ', 'SER', 0.037896739208281634, (16.421999999999993, 18.845000000000006, -32.55500000000001)), ('B', '  46 ', 'SER', 0.2305080273813864, (21.303, 18.266, 2.22)), ('B', '  46 ', 'SER', 0.2305080273813864, (21.303, 18.266, 2.22)), ('B', '  49 ', 'MET', 0.2999402449033372, (21.713, 13.481, 4.708000000000002)), ('B', '  73 ', 'VAL', 0.27226578395356094, (-5.964, 26.188000000000002, 2.708)), ('B', '  86 ', 'VAL', 0.008972812651723307, (7.591000000000002, 7.739000000000002, 8.446000000000002)), ('B', ' 165 ', 'MET', 0.14009348304899524, (14.416, 7.267, -2.312)), ('B', ' 169 ', 'THR', 0.008460571191912505, (19.914, 2.352, -11.433000000000002)), ('B', ' 181 ', 'PHE', 0.2829663331829908, (11.208, -0.35100000000000003, 4.484)), ('B', ' 253 ', 'LEU', 0.28961857068202373, (-7.326, -20.354, -14.085000000000003)), ('B', ' 280 ', 'THR', 0.2653427327225256, (3.7380000000000004, -12.877000000000004, -30.606))]
data['cbeta'] = []
data['probe'] = [(' A 137  LYS  HB2', ' B   4  ARG HH21', -0.759, (-3.675, 0.383, -27.958)), (' B 226  THR  OG1', ' B 229  ASP  OD2', -0.734, (9.812, -33.018, -13.47)), (' A 140  PHE  HB2', ' A 172  HIS  CE1', -0.729, (-13.237, -2.085, -25.825)), (' A  41  HIS  HB2', ' A  49  MET  HE1', -0.676, (-27.205, 0.404, -30.818)), (' A 233  VAL HG21', ' A 269  LYS  HE2', -0.593, (16.088, 3.311, -46.745)), (' A 231  ASN  O  ', ' A 235  MET  HG2', -0.552, (8.008, 5.185, -47.484)), (' B 166  GLU  HG2', ' B 172  HIS  CE1', -0.55, (14.076, 7.795, -8.791)), (' A 140  PHE  HB2', ' A 172  HIS  HE1', -0.544, (-12.798, -2.782, -25.271)), (' A 167  LEU HD12', ' A 171  VAL HG23', -0.537, (-10.95, -2.127, -34.947)), (' B 276  MET  HG2', ' B 279  ARG  H  ', -0.522, (7.975, -14.797, -32.023)), (' B 140  PHE  HB2', ' B 172  HIS  CD2', -0.521, (10.982, 7.671, -8.839)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.506, (5.378, 19.374, -37.152)), (' B  28  ASN  ND2', ' B 117  CYS  O  ', -0.506, (4.738, 13.922, -5.101)), (' A   3  PHE  HB2', ' A 282  LEU HD23', -0.497, (11.793, 6.717, -21.294)), (' A 107  GLN  H  ', ' A 110  GLN  NE2', -0.495, (-5.912, 14.789, -32.736)), (' A   5  LYS  NZ ', ' A 290  GLU  OE1', -0.485, (1.249, 2.357, -25.539)), (' B 221  ASN HD21', ' B 267  SER  HA ', -0.471, (5.145, -25.313, -24.062)), (' B 142  ASN  N  ', ' B 142  ASN  OD1', -0.462, (12.351, 15.826, -10.158)), (' A 106  ILE  HB ', ' A 110  GLN HE21', -0.458, (-6.316, 13.586, -31.184)), (' B  41  HIS  HB2', ' B  49  MET  HE2', -0.451, (16.457, 12.251, 3.925)), (' B  40  ARG  NE ', ' B 187  ASP  OD2', -0.448, (14.349, 7.429, 8.432)), (' B  27  LEU HD21', ' B  42  VAL  HB ', -0.448, (9.828, 15.07, 3.875)), (' B 114  VAL HG11', ' B 140  PHE  HZ ', -0.443, (4.784, 6.299, -7.398)), (' B 140  PHE  HD2', ' B 172  HIS  CD2', -0.442, (10.024, 6.412, -8.298)), (' A 108  PRO  HB3', ' A 132  PRO  HA ', -0.44, (-4.023, 7.536, -37.181)), (' B 140  PHE  HB2', ' B 172  HIS  NE2', -0.439, (11.168, 7.879, -9.085)), (' A   6  MET  HG2', ' B 124  GLY  HA3', -0.438, (0.995, 9.914, -14.435)), (' B 164  HIS  HB2', ' B 174  GLY  HA2', -0.436, (10.934, 4.443, 0.184)), (' B 181  PHE  CE1', ' B 185  PHE  HB2', -0.435, (15.302, 1.139, 1.402)), (' B 249  ILE  HA ', ' B 249  ILE HD13', -0.431, (-4.526, -19.368, -5.444)), (' B  76  ARG  CZ ', ' B  76  ARG  HB2', -0.428, (-3.065, 26.191, 11.722)), (' A  30  LEU HD22', ' A 148  VAL HG11', -0.425, (-17.611, 11.546, -21.478)), (' A 126  TYR  HE1', ' A 140  PHE  HE1', -0.423, (-9.909, 1.206, -21.272)), (' A 173  ALA  HB1', ' A 181  PHE  HE1', -0.422, (-15.655, 3.422, -34.356)), (' A 164  HIS  HB2', ' A 174  GLY  HA2', -0.419, (-17.972, 4.527, -30.888)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.411, (-0.908, 7.923, -27.56)), (' B 207  TRP  CZ3', ' B 287  LEU  HA ', -0.409, (4.433, -12.745, -22.232)), (' A 106  ILE  HB ', ' A 110  GLN  NE2', -0.409, (-6.471, 13.964, -31.027)), (' B 140  PHE  HD2', ' B 172  HIS  HD2', -0.408, (9.96, 6.906, -8.03)), (' B  53  ASN  O  ', ' B  57  LEU HD12', -0.408, (18.622, 13.286, 13.461)), (' A 276  MET  HB3', ' A 276  MET  HE3', -0.407, (17.364, -3.022, -28.349)), (' B  21  THR  HB ', ' B  67  LEU  HB2', -0.405, (6.199, 24.088, 4.441)), (' B 140  PHE  CD2', ' B 172  HIS  HD2', -0.405, (9.527, 7.003, -7.927)), (' B 227  LEU  HA ', ' B 227  LEU HD12', -0.402, (7.538, -27.266, -10.747)), (' B 140  PHE  HB2', ' B 172  HIS  HE2', -0.4, (11.41, 8.614, -9.053))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
