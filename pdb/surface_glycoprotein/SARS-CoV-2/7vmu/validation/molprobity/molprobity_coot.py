# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 103 ', 'GLY', 0.03240282577574601, (-39.87, 2.99, -2.493))]
data['omega'] = [('A', ' 147 ', 'PRO', None, (-28.801000000000002, 15.299999999999999, -20.324))]
data['rota'] = [('A', ' 101 ', 'GLU', 0.0037428344039424346, (-37.0, -1.389, -4.671)), ('A', ' 102 ', 'LYS', 0.04735052636294873, (-40.278, -0.654, -3.0360000000000005)), ('A', ' 105 ', 'MET', 0.04488642872124243, (-34.936, 6.714, -0.368)), ('A', ' 144 ', 'THR', 0.08098814620115888, (-25.1, 7.709, -16.788)), ('A', ' 148 ', 'SER', 0.11289892070994734, (-25.269000000000002, 17.329, -17.776)), ('A', ' 149 ', 'SER', 0.10921936494887277, (-26.683, 20.799, -17.722)), ('A', ' 150 ', 'LEU', 0.0, (-29.602, 22.388, -19.393000000000004)), ('B', ' 335 ', 'LEU', 0.0, (-33.11699999999997, -44.644, -7.713000000000001)), ('B', ' 336 ', 'CYS', 0.05715714566408474, (-33.414, -41.38, -5.9990000000000006)), ('B', ' 345 ', 'THR', 0.12466652696905803, (-41.004, -27.69900000000002, -14.587)), ('B', ' 346 ', 'ARG', 0.0, (-41.48, -25.133000000000003, -11.888000000000002)), ('B', ' 354 ', 'ASN', 0.11933874286984358, (-39.027, -26.436, -1.309)), ('B', ' 357 ', 'ARG', 0.10175284437511636, (-36.463, -35.191, 1.673)), ('B', ' 358 ', 'ILE', 0.0, (-34.875, -38.034, -0.089)), ('B', ' 359 ', 'SER', 0.03860032142176998, (-34.664, -41.267, 1.729)), ('B', ' 362 ', 'VAL', 0.002027546432221056, (-29.369, -44.594, -3.3340000000000005)), ('B', ' 366 ', 'SER', 0.031671728440568675, (-23.307000000000002, -38.385, -11.213)), ('B', ' 367 ', 'VAL', 0.0030287943881438044, (-25.851000000000003, -36.165, -12.796000000000001)), ('B', ' 386 ', 'LYS', 0.23298469904041844, (-15.79, -38.678, -2.679)), ('B', ' 387 ', 'LEU', 0.0008490600487367556, (-19.532, -38.615, -2.983)), ('B', ' 389 ', 'ASP', 0.2637873071559925, (-18.406000000000002, -44.165, -1.728)), ('B', ' 428 ', 'ASP', 0.008629156256837179, (-20.346999999999998, -24.976, 8.551))]
data['cbeta'] = []
data['probe'] = [(' A  35  SER  HB3', ' A  50  LEU HD23', -0.881, (-29.064, 2.724, 2.843)), (' A  82  MET  HB3', ' A  85  LEU HD11', -0.85, (-14.875, 10.261, 8.946)), (' A  59  TYR  HB2', ' A  64  LYS  HG2', -0.725, (-17.246, -0.125, 2.705)), (' A 178  LYS  HG2', ' A 223  ALA  HB2', -0.643, (-34.457, 22.714, -6.947)), (' A 161  THR HG22', ' A 211  THR HG22', -0.628, (-34.966, 9.892, -21.704)), (' A   4  LEU HD13', ' A 107  VAL HG12', -0.623, (-36.18, 10.968, 7.177)), (' B 490  PHE  CZ ', ' B 492  LEU  HB2', -0.617, (-44.909, -10.112, -0.651)), (' B 425  LEU HD12', ' B 426  PRO  HD2', -0.598, (-26.464, -24.562, 5.176)), (' A  61  ASP  HA ', ' A  64  LYS  HE2', -0.593, (-15.077, -0.915, -0.585)), (' B 403  ARG  HB3', ' B 497  PHE  HE1', -0.587, (-33.325, -11.691, -10.959)), (' B 338  PHE  CE1', ' B 358  ILE HD12', -0.574, (-31.476, -36.643, -3.452)), (' A   2  VAL HG22', ' A  26  GLY  HA3', -0.563, (-42.747, 9.261, 11.069)), (' A  35  SER  HB3', ' A  50  LEU  CD2', -0.562, (-28.679, 2.188, 2.693)), (' A 228  GLN HE21', ' A 234  PRO  HB3', -0.559, (-29.437, 4.903, -3.707)), (' B 345  THR HG22', ' B 346  ARG HH11', -0.558, (-43.894, -28.591, -13.291)), (' A  34  MET  HB3', ' A  78  LEU HD22', -0.544, (-29.803, 5.506, 8.722)), (' A  82  MET  HE1', ' A 114  VAL HG21', -0.524, (-18.906, 14.04, 8.624)), (' A  36  TRP  CE2', ' A  80  LEU  HB2', -0.521, (-24.169, 7.696, 9.159)), (' B 412  PRO  HG3', ' B 429  PHE  HB3', -0.518, (-21.666, -24.625, 3.855)), (' A  39  GLN  HB2', ' A  45  LEU HD23', -0.511, (-24.811, 15.067, -2.842)), (' B 402  ILE HD12', ' B 406  GLU  HG3', -0.507, (-29.725, -14.759, -5.725)), (' B 338  PHE  HE1', ' B 358  ILE HD12', -0.506, (-31.283, -36.231, -3.228)), (' B 403  ARG  HB3', ' B 497  PHE  CE1', -0.505, (-33.218, -12.436, -10.992)), (' A 218  GLN  HG3', ' A 219  PRO  HD2', -0.489, (-43.839, 27.605, -11.283)), (' B 404  GLY  O  ', ' B 407  VAL HG12', -0.486, (-25.446, -15.493, -8.834)), (' B 497  PHE  CD2', ' B 507  PRO  HB3', -0.478, (-35.714, -14.715, -12.733)), (' A 172  LEU HD13', ' A 210  PHE  CD1', -0.476, (-32.597, 4.078, -15.528)), (' B 401  VAL HG22', ' B 509  ARG  HG2', -0.473, (-35.023, -21.455, -10.7)), (' A 106  ASP  OD1', ' A 107  VAL HG23', -0.46, (-38.806, 7.502, 3.135)), (' B 421  TYR  CD1', ' B 457  ARG  HB3', -0.457, (-35.103, -10.393, 7.213)), (' A 234  PRO  O  ', ' A 235  ARG  HD3', -0.456, (-24.825, 3.326, -4.92)), (' A 106  ASP  CG ', ' A 107  VAL HG23', -0.454, (-39.183, 7.843, 2.852)), (' B 350  VAL HG22', ' B 422  ASN  HB3', -0.452, (-34.899, -16.459, -0.005)), (' A  20  LEU  HG ', ' A  82  MET  HE2', -0.447, (-19.97, 12.378, 10.383)), (' A 157  ARG  HG2', ' A 157  ARG HH11', -0.445, (-40.568, 17.626, -22.412)), (' A   9  GLY  O  ', ' A  18  LEU HD11', -0.445, (-17.692, 17.243, 12.764)), (' B 502  GLY  O  ', ' B 506  GLN  HG3', -0.443, (-29.167, -10.376, -16.185)), (' A   6  GLN  HB2', ' A  21  SER  O  ', -0.442, (-27.501, 13.178, 11.839)), (' A 221  ASP  O  ', ' A 225  TYR  OH ', -0.441, (-36.952, 20.868, -11.23)), (' A   6  GLN  HA ', ' A  22  CYS  HA ', -0.438, (-29.541, 12.785, 12.889)), (' A  69  ILE HD11', ' A  78  LEU HD11', -0.436, (-26.851, 3.672, 9.461)), (' A  33  TYR  HB2', ' A  98  ASP  O  ', -0.421, (-34.547, 0.594, 3.426)), (' A  82  MET  CB ', ' A  85  LEU HD11', -0.416, (-15.154, 9.796, 10.085)), (' B 347  PHE  CE2', ' B 399  SER  HB2', -0.414, (-35.177, -25.979, -7.396)), (' A 222  PHE  CE1', ' A 244  ILE HG23', -0.413, (-35.234, 27.883, -15.409)), (' A  27  VAL  HA ', ' B 476  GLY  HA2', -0.412, (-41.174, 4.593, 11.265)), (' A  32  ASN  ND2', ' A  97  ARG HH11', -0.411, (-38.507, 2.172, 6.515)), (' B 437  ASN  HA ', ' B 508  TYR  CD1', -0.406, (-29.282, -17.781, -13.946)), (' A 200  ARG  NE ', ' A 221  ASP  OD2', -0.405, (-42.931, 21.749, -11.73)), (' A  60  ALA  O  ', ' A  64  LYS  HG3', -0.404, (-16.065, 0.848, 1.463)), (' A 164  ALA  HB3', ' A 208  THR  HA ', -0.403, (-30.224, 0.361, -18.268)), (' A 155  GLY  N  ', ' A 217  LEU  O  ', -0.402, (-42.526, 26.956, -16.437)), (' A 175  TYR  O  ', ' A 225  TYR  HA ', -0.402, (-32.835, 14.837, -9.021)), (' A  86  ARG  C  ', ' A 116  VAL HG11', -0.401, (-9.878, 14.592, 5.1)), (' A  80  LEU  HA ', ' A  80  LEU HD12', -0.401, (-21.8, 5.609, 10.607)), (' B 425  LEU HD11', ' B 429  PHE  CE1', -0.4, (-26.365, -26.273, 2.85))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
