# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' C  58  VAL HG22', ' D 119  ILE HG12', -1.09, (111.636, 84.349, 134.036)), (' C  60  LEU HD12', ' D 106  ILE HD12', -0.961, (109.267, 77.938, 139.137)), (' C  58  VAL HG22', ' D 119  ILE  CG1', -0.844, (111.695, 84.88, 133.554)), (' C  60  LEU HD12', ' D 106  ILE  CD1', -0.815, (108.664, 77.818, 138.754)), (' C  60  LEU  CD1', ' D 106  ILE HD12', -0.772, (108.476, 77.935, 140.049)), (' A 507  ASN  ND2', ' A 541  GLN  OE1', -0.751, (90.733, 107.109, 117.062)), (' A 545  LYS  HE3', ' A 557  VAL HG21', -0.749, (91.219, 95.185, 112.891)), (' A 755  MET  HG2', ' A 764  VAL HG12', -0.717, (91.024, 83.826, 86.431)), (' A 654  ARG  NH2', ' A 658  GLU  OE2', -0.706, (84.961, 110.888, 97.688)), (' A 830  PRO  HD2', ' A 916  TRP  HE1', -0.695, (78.682, 74.477, 102.258)), (' C  60  LEU  CD1', ' D 106  ILE  CD1', -0.687, (107.959, 77.548, 139.613)), (' A 516  TYR  OH ', ' A 569  ARG  NH1', -0.686, (78.302, 107.193, 107.08)), (' A 631  ARG  NH1', ' A 635  SER  OG ', -0.664, (90.161, 104.206, 94.558)), (' C  58  VAL HG22', ' D 119  ILE  CD1', -0.662, (111.129, 85.584, 133.145)), (' A 758  LEU HD23', ' A 759  SER  H  ', -0.66, (86.998, 89.008, 98.32)), (' A 773  GLN  HG3', ' A 775  LEU HD13', -0.652, (99.394, 78.649, 72.175)), (' B 125  ALA  O  ', ' B 190  ARG  NH2', -0.626, (110.834, 124.2, 116.793)), (' A 549  SER  HB2', ' A 555  ARG HH11', -0.619, (95.911, 86.013, 113.083)), (' A 717  ASP  HB3', ' A 720  VAL HG22', -0.612, (95.488, 80.862, 67.098)), (' A  90  LEU HD11', ' A 201  ILE HD12', -0.607, (118.389, 110.314, 59.233)), (' A 271  LEU HD23', ' B 110  ALA  HB2', -0.606, (107.483, 130.997, 103.076)), (' A 840  ALA  O  ', ' A 858  ARG  NH1', -0.605, (85.965, 80.538, 118.873)), (' B 136  ASN  O  ', ' B 140  ASN  ND2', -0.602, (125.097, 104.608, 115.766)), (' C  35  LEU HD11', ' C  55  LEU HD13', -0.597, (107.728, 82.679, 129.32)), (' A 388  LEU HD13', ' A 400  ALA  HB2', -0.595, (106.497, 112.723, 118.755)), (' A 453  TYR  CE1', ' A 667  VAL HG21', -0.594, (101.372, 105.649, 109.175)), (' A 468  GLN HE22', ' A 705  ASN HD21', -0.581, (102.748, 93.965, 79.119)), (' A 183  ARG  NH1', ' A 286  TYR  OH ', -0.578, (119.803, 113.519, 83.289)), (' A 829  LEU HD22', ' A 916  TRP  CD1', -0.576, (77.458, 72.609, 101.15)), (' A 367  SER  OG ', ' A 368  PHE  N  ', -0.573, (78.385, 124.807, 111.557)), (' A 531  THR  O  ', ' A 657  ASN  ND2', -0.572, (86.489, 116.802, 97.608)), (' A 844  VAL HG21', ' A 849  LYS  HD3', -0.567, (85.747, 81.917, 127.422)), (' B  90  MET  HG2', ' B  94  MET  HE3', -0.561, (91.944, 120.103, 119.715)), (' A 380  MET  HB3', ' B  94  MET  SD ', -0.56, (94.18, 122.061, 116.365)), (' A 206  THR  OG1', ' A 209  ASN  ND2', -0.558, (114.808, 99.526, 66.135)), (' C  16  VAL HG11', ' D  91  LEU HD22', -0.554, (98.822, 81.993, 136.586)), (' C  53  VAL HG22', ' D 103  LEU HD12', -0.548, (108.955, 73.337, 134.779)), (' A 409  THR  OG1', ' C  23  GLU  OE2', -0.539, (99.733, 95.727, 127.351)), (' A 503  GLY  HA3', ' A 561  SER  HA ', -0.539, (88.445, 109.312, 111.564)), (' D  85  SER  OG ', ' D  86  ALA  N  ', -0.539, (90.942, 84.253, 142.389)), (' A  98  LYS  O  ', ' A 118  ARG  NH2', -0.532, (130.015, 100.803, 63.17)), (' A 829  LEU HD22', ' A 916  TRP  HD1', -0.527, (77.082, 73.23, 100.908)), (' D 162  ALA  HB2', ' D 183  PRO  HG2', -0.525, (120.368, 88.374, 154.02)), (' A 583  ARG HH11', ' A 591  THR  HA ', -0.521, (74.991, 86.998, 97.95)), (' A 203  GLY  HA3', ' A 222  PHE  HD1', -0.518, (112.857, 105.825, 61.033)), (' A 500  LYS  HG2', ' A 501  SER  H  ', -0.517, (84.933, 101.737, 113.182)), (' A 203  GLY  HA3', ' A 222  PHE  CD1', -0.517, (112.828, 105.567, 61.022)), (' C  54  SER  O  ', ' C  58  VAL HG23', -0.512, (110.132, 82.338, 133.436)), (' C  53  VAL HG22', ' D 103  LEU  CD1', -0.51, (109.13, 73.823, 134.104)), (' C  19  GLN HE22', ' D  87  MET  CE ', -0.509, (91.487, 86.615, 134.594)), (' A 414  ASN  ND2', ' A 846  ASP  HB3', -0.508, (89.475, 87.007, 127.842)), (' B 104  ASN  ND2', ' B 108  ASN  OD1', -0.506, (103.416, 137.731, 109.485)), (' A 468  GLN  NE2', ' A 705  ASN HD21', -0.503, (102.345, 94.301, 79.123)), (' D 118  ASN HD21', ' D 128  LEU  HA ', -0.5, (119.464, 84.523, 138.3)), (' A 615  MET  HE2', ' A 764  VAL HG21', -0.49, (94.399, 80.938, 86.217)), (' B  83  VAL  O  ', ' B  87  MET  HG3', -0.49, (82.865, 118.731, 119.136)), (' D 160  VAL HG13', ' D 164  SER  HA ', -0.488, (126.651, 90.381, 150.104)), (' D 137  THR  OG1', ' D 140  ASN  OD1', -0.482, (115.919, 69.011, 153.726)), (' A 149  TYR  HE2', ' A 212  LEU HD13', -0.477, (124.481, 96.987, 79.823)), (' A 372  LEU  HA ', ' B  87  MET  HE1', -0.477, (83.84, 118.933, 113.245)), (' A 822  GLN HE21', ' A 827  VAL HG21', -0.474, (74.54, 69.344, 97.492)), (' D 159  VAL HG13', ' D 185  ILE  O  ', -0.473, (125.361, 82.87, 148.198)), (' A 294  TYR  OH ', ' A 314  ASN  ND2', -0.472, (103.918, 115.681, 86.324)), (' B 168  GLN  HB2', ' B 171  GLU  HG3', -0.472, (122.045, 108.026, 134.696)), (' A 619  TYR  HE1', ' A 786  LEU HD21', -0.469, (99.568, 90.347, 91.543)), (' D 123  THR  C  ', ' D 125  ALA  H  ', -0.468, (122.686, 79.838, 129.266)), (' A 509  TRP  CZ3', ' B  87  MET  HG2', -0.466, (85.075, 117.298, 117.994)), (' A 837  ILE  O  ', ' A 884  TYR  OH ', -0.466, (86.082, 74.993, 117.697)), (' A 708  LEU HD21', ' A 728  TYR  HB2', -0.465, (101.458, 92.856, 70.464)), (' C  28  LEU HD12', ' C  31  GLN HE21', -0.464, (111.708, 89.32, 132.023)), (' C  56  LEU  CD2', ' D 103  LEU  HG ', -0.463, (106.122, 75.211, 136.627)), (' A 166  VAL HG13', ' A 458  TYR  CZ ', -0.463, (109.04, 93.085, 103.418)), (' A 851  ASP  N  ', ' A 851  ASP  OD1', -0.46, (78.315, 86.136, 128.82)), (' A  42  VAL HG23', ' A 712  GLY  HA3', -0.46, (104.323, 86.862, 65.386)), (' A 520  SER  O  ', ' A 524  GLN  HG3', -0.459, (73.858, 115.363, 107.766)), (' C  58  VAL  CG2', ' D 119  ILE HG12', -0.455, (110.794, 84.184, 134.18)), (' A 575  LEU HD13', ' A 641  LYS  HG3', -0.453, (79.259, 102.044, 89.295)), (' A 408  GLN  NE2', ' A 544  LEU  HB2', -0.453, (96.788, 97.425, 119.684)), (' A 614  LEU  HB2', ' A 802  GLU  HB3', -0.449, (92.01, 73.405, 90.012)), (' A 391  LYS  HB3', ' A 391  LYS  HE3', -0.447, (117.632, 106.314, 114.507)), (' A 531  THR HG22', ' A 536  ILE HD12', -0.447, (85.507, 117.521, 102.618)), (' A 527  LEU  O  ', ' A 531  THR HG23', -0.444, (82.469, 117.431, 101.659)), (' A 328  PRO  HB3', ' A 537  PRO  HG3', -0.439, (96.115, 118.726, 103.947)), (' A 569  ARG  O  ', ' A 573  GLN  HB2', -0.439, (77.223, 105.088, 99.871)), (' C  56  LEU HD22', ' D 103  LEU  HG ', -0.433, (105.809, 75.225, 136.394)), (' A 322  PRO  O  ', ' A 325  SER  OG ', -0.428, (108.913, 117.94, 98.546)), (' D 164  SER  O  ', ' D 165  LYS  HG3', -0.425, (130.067, 91.692, 151.477)), (' A 578  SER  O  ', ' A 582  THR HG23', -0.424, (74.636, 93.686, 91.712)), (' A 124  MET  O  ', ' A 128  VAL HG23', -0.421, (115.314, 97.454, 77.92)), (' C  19  GLN  NE2', ' D  87  MET  SD ', -0.42, (92.444, 86.928, 134.89)), (' A 498  LEU  O  ', ' A 500  LYS  N  ', -0.419, (80.446, 102.332, 114.661)), (' B 132  ILE HG21', ' B 138  TYR  HB2', -0.418, (120.068, 105.904, 122.01)), (' A  90  LEU  HB3', ' A  96  VAL HG21', -0.418, (122.57, 109.519, 63.249)), (' A 453  TYR  HE1', ' A 667  VAL HG21', -0.417, (101.313, 105.094, 109.228)), (' A 270  LEU  O  ', ' B 119  ILE HD13', -0.416, (108.896, 124.776, 104.159)), (' A 239  SER  OG ', ' A 465  ASP  OD1', -0.416, (103.621, 101.628, 77.717)), (' D 179  ASN  O  ', ' D 180  LEU HD22', -0.415, (126.42, 82.802, 160.694)), (' C  14  LEU  HA ', ' C  14  LEU HD12', -0.415, (102.037, 85.102, 131.301)), (' D 100  ASN  ND2', ' D 103  LEU HD13', -0.415, (107.9, 71.704, 133.97)), (' A 372  LEU HD12', ' B  87  MET  HE1', -0.415, (83.306, 118.066, 114.072)), (' D 108  ASN  OD1', ' D 109  ASN  N  ', -0.414, (109.616, 72.403, 145.747)), (' A 906  MET  HG2', ' A 911  ASN  HB2', -0.414, (67.693, 73.838, 114.42)), (' A 819  LEU HD11', ' A 826  TYR  HB3', -0.411, (78.962, 66.463, 92.738)), (' A 680  THR HG21', ' A 687  THR HG23', -0.411, (91.978, 98.165, 100.751)), (' A 500  LYS  HG2', ' A 501  SER  N  ', -0.41, (84.637, 102.056, 113.693)), (' A 816  HIS  O  ', ' A 830  PRO  HA ', -0.408, (84.372, 74.068, 101.04)), (' B 163  ASP  N  ', ' B 163  ASP  OD1', -0.408, (109.66, 103.146, 131.441)), (' A 388  LEU HD23', ' A 397  SER  OG ', -0.408, (107.546, 111.317, 114.229)), (' C   3  MET  HE2', ' C   7  LYS  HE2', -0.407, (103.006, 72.987, 122.171)), (' A 689  TYR  O  ', ' A 693  VAL HG23', -0.407, (87.631, 97.06, 93.027)), (' A 665  GLU  N  ', ' A 665  GLU  OE1', -0.405, (97.125, 108.786, 104.367)), (' A 830  PRO  HD2', ' A 916  TRP  NE1', -0.404, (78.682, 74.212, 102.247)), (' A 859  PHE  HB3', ' A 888  ILE HG12', -0.403, (77.78, 75.673, 120.411)), (' A 360  ASN  N  ', ' A 360  ASN  OD1', -0.401, (87.724, 131.141, 103.623)), (' A 413  GLY  HA2', ' A 546  TYR  OH ', -0.401, (92.774, 86.658, 124.775))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
