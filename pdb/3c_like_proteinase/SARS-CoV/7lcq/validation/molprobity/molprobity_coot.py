# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  33 ', 'ASP', 0.03514963106452123, (-9.63941, -62.54703, 11.77142)), ('A', '  84 ', 'ASN', 0.005515468825663437, (-22.46004, -48.72458, 18.815959999999997))]
data['omega'] = [('A', '  33 ', 'ASP', None, (-9.824540000000002, -61.10152, 11.899229999999998)), ('A', '  84 ', 'ASN', None, (-21.6473, -49.89437, 19.087989999999998)), ('A', ' 277 ', 'ASN', None, (6.602400000000001, -12.79093, 4.14651))]
data['rota'] = [('A', ' 192 ', 'GLN', 0.06608262608779528, (-25.581660000000007, -31.362989999999982, 11.84021))]
data['cbeta'] = []
data['probe'] = [(' A  47  GLU  N  ', ' A  47  GLU  OE1', -0.927, (-35.616, -43.63, 1.443)), (' A 276  MET  HE1', ' A 281  ILE HD12', -0.879, (5.914, -19.91, 4.694)), (' A 189  GLN  OE1', ' A 603  UED  N11', -0.771, (-25.709, -39.219, 3.841)), (' A  30  LEU  HG ', ' A  32  LEU HD22', -0.74, (-10.603, -55.239, 9.211)), (' A 226  THR HG23', ' A 229  ASP  H  ', -0.736, (3.501, -15.026, 27.757)), (' A  30  LEU  HG ', ' A  32  LEU  CD2', -0.687, (-10.188, -54.665, 9.704)), (' A 114  VAL HG21', ' A 126  TYR  CZ ', -0.677, (-8.38, -40.026, 2.619)), (' A 257  THR HG23', ' A 259  ILE  H  ', -0.665, (16.603, -25.229, 18.735)), (' A 236  LYS  HA ', ' A 236  LYS  HE2', -0.647, (-8.516, -14.135, 18.74)), (' A  24  THR  O  ', ' A  24  THR HG22', -0.645, (-28.362, -49.325, -3.557)), (' A 209  TYR  CE1', ' A 257  THR HG21', -0.637, (13.855, -26.525, 17.338)), (' A   4  ARG  O  ', ' A 299  GLN  NE2', -0.628, (6.578, -36.42, 4.796)), (' A 198  THR HG22', ' A 238  ASN  OD1', -0.614, (-9.985, -20.935, 16.21)), (' A  53  ASN  O  ', ' A  57  LEU HD23', -0.582, (-33.723, -48.761, 12.693)), (' A 276  MET  CE ', ' A 281  ILE HD12', -0.577, (6.327, -19.223, 4.93)), (' A 154  TYR  O  ', ' A 155  ASP  OD1', -0.561, (5.246, -55.045, 13.812)), (' A  52  PRO  HD2', ' A 188  ARG  HG2', -0.541, (-30.967, -41.546, 11.316)), (' A 114  VAL HG21', ' A 126  TYR  CE1', -0.521, (-8.118, -39.675, 3.012)), (' A 106  ILE HG23', ' A 160  CYS  HB2', -0.517, (-7.069, -43.165, 15.379)), (' A 276  MET  HE1', ' A 281  ILE  CD1', -0.512, (6.511, -19.492, 5.575)), (' A 224  THR HG22', ' A 225  THR  N  ', -0.509, (10.3, -15.399, 24.817)), (' A 209  TYR  CD1', ' A 257  THR HG21', -0.493, (14.456, -26.695, 16.965)), (' A 203  ASN  HB3', ' A 291  PHE  O  ', -0.491, (2.312, -30.887, 12.752)), (' A 253  LEU  N  ', ' A 253  LEU HD12', -0.486, (11.781, -32.853, 18.978)), (' A  33  ASP  O  ', ' A  94  SER  HA ', -0.483, (-10.623, -64.787, 9.599)), (' A  70  ALA  O  ', ' A  73  VAL HG12', -0.477, (-12.858, -62.82, -2.945)), (' A 106  ILE HG23', ' A 160  CYS  CB ', -0.476, (-6.435, -43.572, 15.361)), (' A  24  THR  CG2', ' A  24  THR  O  ', -0.474, (-29.038, -49.6, -3.527)), (' A  49  MET  HB3', ' A 189  GLN  HG2', -0.471, (-29.435, -40.637, 5.619)), (' A 253  LEU  H  ', ' A 253  LEU HD12', -0.468, (11.657, -32.386, 19.675)), (' A 224  THR  HA ', ' A 266  ALA  HB2', -0.461, (10.144, -15.323, 21.691)), (' A 209  TYR  O  ', ' A 213  ILE HG13', -0.458, (13.966, -28.743, 12.448)), (' A 130  MET  HB2', ' A 130  MET  HE2', -0.457, (-8.557, -37.687, 13.625)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.456, (-6.578, -48.976, -1.381)), (' A  45  THR  H  ', ' A  48  ASP  HB2', -0.453, (-33.264, -46.697, 5.078)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.451, (-6.396, -44.491, 7.582)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.446, (-18.265, -48.306, 15.031)), (' A 114  VAL  CG2', ' A 126  TYR  CZ ', -0.443, (-7.886, -40.602, 2.856)), (' A 225  THR HG21', ' A 269  LYS  HD3', -0.442, (5.625, -13.593, 21.69)), (' A 218  TRP  CZ2', ' A 279  ARG  HB2', -0.44, (9.015, -16.61, 4.863)), (' A  14  GLU  HG2', ' A 122  PRO  HG2', -0.438, (-6.253, -52.141, -1.277)), (' A 136  ILE HD13', ' A 136  ILE HG21', -0.436, (-10.306, -38.475, 9.877)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.436, (-17.874, -42.262, 15.614)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.433, (-7.51, -61.67, 8.439)), (' A 254  SER  O  ', ' A 257  THR HG22', -0.424, (16.201, -27.774, 19.152)), (' A 276  MET  CE ', ' A 281  ILE  CD1', -0.422, (6.271, -19.471, 5.722)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -0.421, (5.576, -18.111, 3.067)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.419, (-2.467, -34.936, 10.764)), (' A 213  ILE HG23', ' A 302  GLY  O  ', -0.419, (17.942, -31.624, 10.699)), (' A   5  LYS  CE ', ' A 288  GLU  OE2', -0.414, (-0.105, -30.64, 5.979)), (' A 603  UED  H18', ' A 603  UED  H9 ', -0.414, (-23.689, -40.118, 6.489)), (' A 224  THR  CG2', ' A 225  THR  N  ', -0.413, (10.391, -15.382, 24.575)), (' A  90  LYS  HB3', ' A  90  LYS  HE2', -0.409, (-18.47, -65.359, 13.055)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.406, (-24.152, -51.486, 10.644)), (' A 225  THR HG21', ' A 269  LYS  CD ', -0.405, (5.262, -13.701, 21.739)), (' A 257  THR  O  ', ' A 259  ILE HD12', -0.402, (18.308, -25.007, 16.858)), (' A 153  ASP  OD1', ' A 156  CYS  O  ', -0.402, (1.379, -50.616, 14.227)), (' A 254  SER  HA ', ' A 257  THR HG22', -0.402, (15.294, -27.563, 18.823)), (' A  53  ASN  OD1', ' A  55  GLU  HB2', -0.4, (-34.092, -49.628, 17.163))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
