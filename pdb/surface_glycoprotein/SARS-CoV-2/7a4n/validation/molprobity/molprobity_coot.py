# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 407 ', 'VAL', 0.15473827892643516, (229.52199999999993, 187.787, 203.783)), ('A', ' 430 ', 'THR', 0.025875693722365797, (213.888, 180.353, 207.59600000000006)), ('B', ' 207 ', 'HIS', 0.21860935863256353, (203.885, 145.30600000000007, 215.79800000000006)), ('C', ' 204 ', 'TYR', 0.19655256792046016, (215.58799999999997, 197.174, 152.58700000000005)), ('C', ' 341 ', 'VAL', 0.21651536882949848, (218.69099999999995, 224.19, 207.837))]
data['cbeta'] = [('A', ' 503 ', 'VAL', ' ', 0.30580581587707123, (238.43199999999993, 198.552, 206.58200000000005))]
data['probe'] = [(' A 902  MET  HG3', ' A 916  LEU  CD1', -0.863, (132.187, 187.515, 173.637)), (' C 568  ASP  OD1', ' C 569  ILE  N  ', -0.827, (182.673, 211.617, 191.199)), (' C 776  LYS  NZ ', ' C 780  GLU  OE1', -0.812, (168.393, 166.548, 178.967)), (' B 403  ARG  HD3', ' B 406  GLU  OE1', -0.808, (231.524, 209.952, 189.631)), (' A 236  THR  O  ', ' A 236  THR HG22', -0.808, (195.282, 214.029, 229.725)), (' B 568  ASP  OD1', ' B 569  ILE  N  ', -0.799, (200.607, 180.349, 165.34)), (' A 457  ARG  NH1', ' A 460  ASN  O  ', -0.789, (228.405, 170.206, 194.009)), (' B  37  TYR  OH ', ' B  53  ASP  OD2', -0.779, (206.911, 158.848, 202.939)), (' B 101  ILE  O  ', ' B 101  ILE HG22', -0.777, (217.211, 142.661, 212.101)), (' B 206  LYS  HE2', ' B 221  SER  HB3', -0.773, (199.206, 147.498, 211.374)), (' A 102  ARG  HD3', ' A 121  ASN  HB2', -0.729, (186.588, 236.84, 223.322)), (' C 101  ILE  O  ', ' C 101  ILE HG22', -0.721, (221.849, 207.227, 143.387)), (' C 281  GLU  N  ', ' C 281  GLU  OE1', -0.714, (200.262, 182.433, 150.484)), (' C1091  ARG  NH1', ' C1118  ASP  O  ', -0.693, (121.913, 171.133, 162.816)), (' A 902  MET  CG ', ' A 916  LEU HD11', -0.689, (132.041, 188.925, 173.66)), (' C 386  LYS  O  ', ' C 389  ASP  OD1', -0.687, (207.776, 217.52, 189.875)), (' A 618  THR  OG1', ' A 619  GLU  OE1', -0.686, (173.36, 180.573, 223.704)), (' A 902  MET  CG ', ' A 916  LEU  CD1', -0.679, (132.126, 188.27, 173.67)), (' C1028  LYS  NZ ', ' C1042  PHE  O  ', -0.671, (157.644, 177.298, 166.489)), (' A  37  TYR  OH ', ' A  53  ASP  OD2', -0.662, (186.141, 214.031, 212.685)), (' B 902  MET  HG3', ' B 916  LEU  CD1', -0.652, (137.762, 158.912, 183.283)), (' A 776  LYS  NZ ', ' A 780  GLU  OE1', -0.63, (165.307, 186.171, 167.669)), (' B 596  SER  OG ', ' B 613  GLN  NE2', -0.627, (188.27, 160.685, 177.653)), (' B 735  SER  HB3', ' B 859  THR  CG2', -0.624, (175.553, 182.61, 205.346)), (' B 902  MET  HG3', ' B 916  LEU HD13', -0.624, (138.004, 158.899, 182.461)), (' C 287  ASP  OD1', ' C 288  ALA  N  ', -0.622, (197.957, 194.274, 151.151)), (' B 457  ARG  NH1', ' B 460  ASN  O  ', -0.614, (220.961, 215.311, 176.562)), (' C 417  LYS  NZ ', ' C 453  TYR  CE1', -0.614, (223.309, 205.052, 221.072)), (' B 403  ARG  HD3', ' B 406  GLU  CD ', -0.61, (231.227, 210.164, 190.123)), (' C 455  LEU HD23', ' C 456  PHE  CE2', -0.604, (222.028, 201.45, 227.786)), (' A1091  ARG  NH1', ' A1118  ASP  O  ', -0.598, (121.718, 165.905, 169.431)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.598, (171.379, 218.345, 215.222)), (' B 102  ARG  HD3', ' B 121  ASN  HB2', -0.595, (216.997, 143.263, 219.757)), (' C 417  LYS  NZ ', ' C 453  TYR  CD1', -0.587, (222.716, 205.651, 220.732)), (' A 101  ILE  N  ', ' A 242  LEU HD13', -0.579, (184.606, 233.413, 228.604)), (' B 117  LEU HD23', ' B 118  LEU  N  ', -0.578, (223.181, 152.944, 213.523)), (' B1011  GLN  OE1', ' B1014  ARG  NH1', -0.574, (177.556, 176.573, 192.34)), (' A 641  ASN  OD1', ' A 642  VAL  N  ', -0.566, (161.44, 189.244, 223.869)), (' A 287  ASP  OD1', ' A 288  ALA  N  ', -0.564, (171.491, 213.723, 208.736)), (' B 618  THR  OG1', ' B 619  GLU  OE1', -0.563, (200.895, 155.986, 166.128)), (' A 615  VAL HG12', ' A 616  ASN  O  ', -0.559, (171.948, 183.122, 219.789)), (' A 902  MET  HG2', ' A 916  LEU HD11', -0.553, (132.121, 189.131, 174.408)), (' C 101  ILE  CG2', ' C 101  ILE  O  ', -0.551, (221.513, 207.301, 142.85)), (' B 101  ILE  CG2', ' B 101  ILE  O  ', -0.548, (217.464, 142.594, 212.098)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.547, (176.249, 196.953, 153.909)), (' B 902  MET  CG ', ' B 916  LEU  CD1', -0.545, (138.351, 158.41, 183.261)), (' B  32  PHE  CE2', ' B 216  LEU  O  ', -0.544, (201.669, 139.307, 201.708)), (' B 735  SER  HB3', ' B 859  THR HG22', -0.537, (175.838, 183.164, 205.541)), (' C 578  ASP  OD1', ' C 585  LEU HD21', -0.536, (191.027, 228.829, 187.843)), (' C 101  ILE  N  ', ' C 242  LEU HD13', -0.536, (223.72, 207.208, 139.511)), (' A 903  ALA  HB1', ' A 913  GLN  HB2', -0.534, (128.441, 183.578, 169.746)), (' B 386  LYS  O  ', ' B 389  ASP  OD1', -0.532, (222.844, 180.483, 179.159)), (' A 236  THR  CG2', ' A 236  THR  O  ', -0.532, (195.4, 214.146, 229.489)), (' C 502  GLY  O  ', ' C 506  GLN  NE2', -0.532, (235.765, 208.08, 209.915)), (' A 441  LEU  H  ', ' A 441  LEU HD23', -0.529, (239.544, 188.267, 217.045)), (' A 943  SER  O  ', ' A 943  SER  OG ', -0.529, (155.768, 197.405, 193.418)), (' B 943  SER  O  ', ' B 943  SER  OG ', -0.528, (169.469, 157.501, 188.7)), (' B 564  GLN  N  ', ' B 564  GLN  OE1', -0.528, (215.856, 183.619, 160.101)), (' A 417  LYS  NZ ', ' A 453  TYR  CE1', -0.527, (238.538, 180.107, 197.786)), (' A 735  SER  HB3', ' A 859  THR  CG2', -0.527, (178.78, 203.479, 174.916)), (' C 439  ASN  OD1', ' C 443 BSER  OG ', -0.525, (235.424, 214.658, 212.441)), (' C1011  GLN  OE1', ' C1014  ARG  NH1', -0.523, (183.018, 180.388, 173.929)), (' A 117  LEU HD23', ' A 118  LEU  N  ', -0.523, (196.272, 227.686, 223.047)), (' A 809  PRO  O  ', ' A 814  LYS  NZ ', -0.522, (147.797, 213.444, 168.56)), (' B 453  TYR  HE1', ' B 455  LEU HD13', -0.521, (231.905, 217.06, 186.489)), (' A  32  PHE  CE2', ' A 216  LEU  O  ', -0.52, (169.266, 219.877, 222.591)), (' A 393  THR  O  ', ' A 523  THR  OG1', -0.517, (213.363, 172.36, 220.282)), (' B 537  LYS  N  ', ' B 551  VAL HG23', -0.516, (210.631, 163.168, 165.511)), (' C  37  TYR  OH ', ' C  53  ASP  OD2', -0.514, (209.096, 199.964, 159.67)), (' A 434  ILE  HB ', ' A 511  VAL HG13', -0.51, (225.548, 184.582, 214.024)), (' C 102  ARG  HD3', ' C 121  ASN  HB2', -0.508, (226.531, 200.957, 141.509)), (' A 555  SER  HB3', ' A 586  ASP  CG ', -0.508, (188.21, 168.038, 221.566)), (' B  91  TYR  N  ', ' B 268  GLY  O  ', -0.507, (211.633, 149.672, 202.226)), (' C 366  SER  HA ', ' C 369  TYR  CE2', -0.506, (216.65, 219.026, 191.398)), (' A1051  SER  OG ', ' A1064  HIS  ND1', -0.5, (146.847, 188.656, 178.274)), (' C 506  GLN  N  ', ' C 506  GLN  OE1', -0.499, (233.165, 208.725, 210.741)), (' A 195  LYS  NZ ', ' A 204  TYR  OH ', -0.499, (188.915, 217.537, 212.256)), (' C 576  VAL HG22', ' C 577  ARG  H  ', -0.496, (191.072, 224.753, 192.166)), (' B 197  ILE  HB ', ' B 202  LYS  HZ1', -0.495, (213.782, 163.322, 205.287)), (' A  65  PHE  CE2', ' A  84  LEU HD11', -0.494, (183.808, 219.318, 231.958)), (' A 736  VAL HG22', ' A 858  LEU HD22', -0.492, (180.942, 202.18, 181.381)), (' A 906  PHE  CE1', ' A 916  LEU HD12', -0.491, (131.439, 186.672, 175.306)), (' B  80  ASP  N  ', ' B  80  ASP  OD1', -0.49, (225.292, 134.062, 207.228)), (' B 169  GLU  OE1', ' B 170  TYR  N  ', -0.489, (222.25, 157.233, 223.199)), (' C 641  ASN  OD1', ' C 642  VAL  N  ', -0.487, (176.818, 216.979, 155.149)), (' C1101  HIS  HD2', ' C1304  NAG  H5 ', -0.486, (120.429, 183.396, 146.3)), (' B 281  GLU  N  ', ' B 281  GLU  OE1', -0.486, (186.286, 156.634, 211.781)), (' A  43  PHE  N  ', ' C 565  PHE  O  ', -0.485, (185.448, 220.015, 197.313)), (' B 227  VAL HG12', ' B 228  ASP  N  ', -0.485, (214.488, 158.985, 215.838)), (' C 364  ASP  OD1', ' C 366  SER  OG ', -0.484, (216.252, 223.449, 191.316)), (' A 239  GLN  O  ', ' A 240  THR  OG1', -0.482, (188.2, 225.093, 229.534)), (' B 366  SER  HA ', ' B 369  TYR  CE2', -0.481, (231.153, 181.721, 183.703)), (' A 904  TYR  OH ', ' C1094  VAL HG11', -0.476, (131.625, 183.914, 161.997)), (' B 586  ASP  OD1', ' B 587  ILE  N  ', -0.476, (207.642, 172.097, 162.433)), (' B 446  GLY  N  ', ' B 498  GLN  OE1', -0.476, (249.808, 212.923, 192.532)), (' C 118  LEU HD21', ' C 120  VAL HG23', -0.475, (230.896, 205.26, 147.879)), (' C 241  LEU  HG ', ' C 242  LEU  N  ', -0.474, (227.779, 210.28, 142.652)), (' A 822  LEU HD21', ' A 938  LEU HD21', -0.471, (150.167, 200.01, 184.003)), (' C  32  PHE  CE2', ' C 216  LEU  O  ', -0.469, (201.997, 204.839, 140.769)), (' C 417  LYS  HE3', ' C 455  LEU  HA ', -0.468, (220.384, 204.574, 222.892)), (' C 724  THR HG23', ' C 934  ILE HD12', -0.468, (162.12, 177.054, 154.472)), (' A 467  ASP  N  ', ' A 467  ASP  OD1', -0.467, (231.953, 169.934, 202.909)), (' C 438  SER  HB3', ' C 509  ARG  HG2', -0.466, (227.711, 216.481, 209.34)), (' B  32  PHE  CD2', ' B 216  LEU  O  ', -0.466, (201.357, 139.51, 201.306)), (' B 417  LYS  NZ ', ' B 453  TYR  CE1', -0.465, (231.456, 215.452, 186.938)), (' C 441  LEU  H  ', ' C 441  LEU HD23', -0.465, (232.921, 219.571, 210.456)), (' B 752  LEU  CD2', ' B 994  ASP  OD1', -0.464, (197.609, 193.698, 202.269)), (' C 126  VAL HG22', ' C 172  SER  O  ', -0.463, (227.527, 194.398, 147.529)), (' C 553  THR HG22', ' C 554  GLU  N  ', -0.46, (182.522, 228.295, 183.526)), (' B 273  ARG  NH2', ' B 290  ASP  OD2', -0.459, (202.448, 152.441, 193.335)), (' C 912  THR  OG1', ' C1106  GLN  NE2', -0.459, (134.219, 173.132, 155.479)), (' C 228  ASP  OD1', ' C 229  LEU  N  ', -0.457, (222.677, 198.06, 160.239)), (' B 441  LEU  H  ', ' B 441  LEU HD23', -0.457, (246.449, 200.536, 187.675)), (' B  83  VAL  C  ', ' B  84  LEU HD22', -0.456, (222.789, 143.555, 201.571)), (' B 724  THR HG23', ' B 934  ILE HD12', -0.455, (156.512, 157.609, 188.417)), (' C 615  VAL HG12', ' C 616  ASN  O  ', -0.452, (179.906, 216.219, 168.265)), (' A 735  SER  HB3', ' A 859  THR HG22', -0.452, (179.487, 203.465, 175.42)), (' C 384  PRO  HA ', ' C 387  LEU  HG ', -0.45, (212.43, 215.29, 194.256)), (' A  39  PRO  HG3', ' A  51  THR HG21', -0.449, (183.307, 213.058, 206.731)), (' C 576  VAL HG22', ' C 577  ARG  N  ', -0.448, (190.573, 225.062, 192.126)), (' B 615  VAL HG12', ' B 616  ASN  O  ', -0.447, (197.82, 156.751, 169.603)), (' B 344  ALA  HB3', ' B 347  PHE  HE1', -0.447, (241.147, 197.725, 178.163)), (' A 227  VAL HG12', ' A 228  ASP  N  ', -0.447, (194.235, 226.483, 212.922)), (' A 576  VAL HG12', ' A 585  LEU  CD1', -0.446, (193.297, 172.838, 222.348)), (' C 779  GLN  OE1', ' C 865  LEU HD11', -0.446, (171.658, 161.262, 170.141)), (' A 813  SER  O  ', ' A 815  ARG  N  ', -0.445, (151.008, 208.774, 172.166)), (' C 735  SER  HB3', ' C 859  THR  CG2', -0.445, (189.884, 168.379, 175.247)), (' A 576  VAL HG22', ' A 577  ARG  H  ', -0.445, (197.6, 171.307, 220.847)), (' A 384  PRO  HA ', ' A 387  LEU  HG ', -0.444, (213.459, 187.165, 215.406)), (' C 457  ARG  NH1', ' C 460  ASN  O  ', -0.443, (208.448, 204.238, 222.98)), (' B 995  ARG  NH2', ' C 994  ASP  OD2', -0.442, (203.932, 185.289, 192.997)), (' B 189  LEU  HB2', ' B 208  THR  HB ', -0.442, (203.003, 142.213, 211.485)), (' A 736  VAL HG13', ' A 858  LEU HD23', -0.441, (182.89, 202.744, 180.941)), (' B 190  ARG  HB3', ' B 192  PHE  CE2', -0.441, (210.178, 145.403, 213.508)), (' A 581  THR  C  ', ' A 582  LEU HD22', -0.44, (201.49, 167.614, 228.982)), (' C 193  VAL HG23', ' C 223  LEU HD12', -0.44, (211.538, 199.912, 151.118)), (' A 387  LEU HD22', ' A 515  PHE  HE2', -0.439, (213.735, 183.165, 215.545)), (' A 314  GLN  HG3', ' A 314  GLN  O  ', -0.438, (173.187, 192.671, 205.102)), (' C 902  MET  SD ', ' C1050  MET  SD ', -0.438, (150.411, 167.054, 156.299)), (' C 560  LEU  O  ', ' C 562  PHE  N  ', -0.438, (186.563, 227.438, 202.121)), (' A 598  ILE HG23', ' A 664  ILE HG21', -0.437, (161.043, 192.456, 207.87)), (' B 228  ASP  OD1', ' B 229  LEU  N  ', -0.437, (215.898, 161.655, 212.998)), (' B 204  TYR  CD1', ' B 204  TYR  N  ', -0.437, (209.549, 155.291, 210.338)), (' B 578  ASP  OD1', ' B 585  LEU HD21', -0.437, (216.947, 171.816, 161.991)), (' A 462  LYS  N  ', ' A 465  GLU  OE2', -0.436, (225.287, 170.618, 198.077)), (' A 201  PHE  HE2', ' A 203  ILE HD11', -0.436, (192.482, 225.16, 218.377)), (' C 189  LEU  HB2', ' C 208  THR  HB ', -0.435, (210.131, 198.159, 140.576)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.434, (145.481, 195.634, 185.121)), (' C  80  ASP  N  ', ' C  80  ASP  OD1', -0.434, (222.34, 218.959, 138.85)), (' C 326  ILE HD12', ' C 539  VAL HG21', -0.432, (193.158, 225.261, 180.454)), (' B 384  PRO  HA ', ' B 387  LEU  HG ', -0.432, (225.661, 184.922, 182.29)), (' A 675  GLN HE21', ' A 693  ILE HD11', -0.432, (150.102, 191.477, 212.201)), (' B 515  PHE  CD1', ' B 515  PHE  N  ', -0.431, (224.687, 191.779, 175.937)), (' B 641  ASN  OD1', ' B 642  VAL  N  ', -0.431, (193.219, 144.74, 171.971)), (' A 726  ILE HG13', ' A1061  VAL HG22', -0.43, (153.015, 195.621, 183.172)), (' B 227  VAL  CG1', ' B 228  ASP  N  ', -0.43, (214.339, 158.997, 216.064)), (' A 366  SER  HA ', ' A 369  TYR  CE2', -0.428, (215.576, 190.463, 220.954)), (' C 347  PHE  HB2', ' C 401  VAL  CG2', -0.427, (223.471, 218.24, 213.561)), (' C 981  LEU HD21', ' C 993  ILE HD11', -0.427, (210.469, 179.33, 184.631)), (' C 348  ALA  O  ', ' C 400  PHE  HA ', -0.427, (220.469, 217.006, 215.079)), (' C 204  TYR  CD1', ' C 204  TYR  N  ', -0.427, (215.675, 198.173, 154.171)), (' B 101  ILE HD13', ' B 265  TYR  HB3', -0.426, (215.213, 139.825, 208.639)), (' A 344  ALA  HB3', ' A 347  PHE  HE1', -0.426, (232.646, 180.234, 218.947)), (' C 101  ILE HD13', ' C 265  TYR  HB3', -0.426, (216.82, 208.751, 141.613)), (' C 117  LEU HD23', ' C 118  LEU  N  ', -0.425, (227.082, 205.439, 153.436)), (' A  58  PHE  HB3', ' A  59  PHE  CD2', -0.425, (171.726, 210.636, 218.368)), (' B 407  VAL HG13', ' B 408  ARG  N  ', -0.425, (228.371, 201.54, 191.63)), (' C  86  PHE  HB2', ' C 238  PHE  HB2', -0.425, (218.485, 211.876, 154.705)), (' C 197  ILE  HB ', ' C 202  LYS  HZ1', -0.425, (216.309, 201.198, 164.201)), (' A  29  THR HG22', ' A  30  ASN  N  ', -0.424, (172.154, 217.508, 226.886)), (' B 188  ASN  O  ', ' B 190  ARG  N  ', -0.423, (207.347, 141.404, 213.066)), (' C 555  SER  HB3', ' C 586  ASP  HB2', -0.423, (182.457, 225.007, 187.297)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.423, (200.782, 198.928, 145.395)), (' B  29  THR HG22', ' B  30  ASN  N  ', -0.423, (206.035, 139.137, 198.101)), (' A 825  LYS  HE3', ' A 938  LEU  O  ', -0.422, (149.746, 203.591, 189.256)), (' B 752  LEU HD21', ' B 994  ASP  OD1', -0.421, (198.303, 193.525, 202.262)), (' B 193  VAL HG23', ' B 223  LEU HD12', -0.421, (206.707, 151.236, 207.692)), (' B1094  VAL HG11', ' C 904  TYR  OH ', -0.421, (140.258, 158.259, 160.697)), (' C 813  SER  O  ', ' C 815  ARG  N  ', -0.421, (172.376, 160.379, 153.664)), (' A 199  GLY  CA ', ' A 232  GLY  HA2', -0.421, (200.975, 218.067, 217.322)), (' C1088  HIS  CD2', ' C1122  VAL HG22', -0.42, (115.973, 178.052, 165.706)), (' C 190  ARG  HB3', ' C 192  PHE  CE2', -0.42, (217.132, 200.242, 144.112)), (' A 970  PHE  O  ', ' A 995  ARG  NH1', -0.419, (197.337, 196.346, 195.238)), (' C 916  LEU  C  ', ' C 916  LEU HD23', -0.419, (141.331, 167.023, 150.555)), (' C 409  GLN  OE1', ' C 418  ILE  N  ', -0.419, (218.326, 203.455, 215.482)), (' C 903  ALA  HB1', ' C 913  GLN  HB2', -0.419, (138.887, 165.354, 155.991)), (' B 560  LEU  O  ', ' B 562  PHE  N  ', -0.418, (215.893, 184.373, 154.725)), (' B1138  TYR  CE2', ' B1143  PRO  HG3', -0.417, (115.824, 152.247, 158.6)), (' B 752  LEU  HG ', ' B 994  ASP  OD1', -0.417, (197.326, 193.94, 201.484)), (' B 581  THR  O  ', ' B 582  LEU HD22', -0.417, (222.885, 175.98, 158.139)), (' A 353  TRP  HB2', ' A 400  PHE  HD1', -0.417, (229.819, 176.693, 209.133)), (' A  32  PHE  HE2', ' A 216  LEU  O  ', -0.416, (169.312, 219.515, 223.366)), (' C 101  ILE HG23', ' C 240  THR HG21', -0.416, (220.767, 209.35, 143.97)), (' C 207  HIS  CG ', ' C 207  HIS  O  ', -0.415, (213.388, 193.126, 141.596)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.415, (212.179, 211.97, 138.097)), (' B  62  VAL  HB ', ' B 267  VAL  O  ', -0.414, (211.441, 143.949, 199.772)), (' A 576  VAL HG12', ' A 585  LEU HD11', -0.414, (193.569, 173.27, 222.367)), (' B 193  VAL HG23', ' B 223  LEU  CD1', -0.414, (207.181, 150.97, 207.623)), (' C 354  ASN  N  ', ' C 354  ASN  OD1', -0.414, (216.404, 219.269, 215.293)), (' C 227  VAL HG12', ' C 228  ASP  N  ', -0.414, (222.848, 196.235, 156.92)), (' A 515  PHE  CD1', ' A 515  PHE  N  ', -0.414, (216.27, 178.646, 212.814)), (' C  91  TYR  N  ', ' C 268  GLY  O  ', -0.413, (211.027, 207.025, 152.104)), (' C 822  LEU HD21', ' C 938  LEU HD21', -0.413, (168.534, 174.341, 154.757)), (' A 344  ALA  HB3', ' A 347  PHE  CE1', -0.411, (232.632, 180.421, 218.506)), (' A  51  THR  CG2', ' A 277  LEU HD23', -0.41, (181.192, 211.748, 206.589)), (' B  86  PHE  HB2', ' B 238  PHE  HB2', -0.409, (220.719, 151.286, 203.102)), (' A 555  SER  CB ', ' A 586  ASP  CG ', -0.409, (188.268, 167.842, 221.394)), (' C 564  GLN  N  ', ' C 564  GLN  OE1', -0.409, (190.195, 224.098, 199.553)), (' A 277  LEU HD12', ' A 285  ILE HD13', -0.409, (178.779, 216.409, 207.168)), (' B 914  ASN  N  ', ' B 914  ASN  OD1', -0.408, (131.316, 157.078, 176.037)), (' C 236  THR  O  ', ' C 236  THR HG22', -0.407, (218.877, 216.598, 159.361)), (' B 736  VAL HG13', ' B 858  LEU HD23', -0.407, (181.83, 181.994, 202.97)), (' A 191  GLU  O  ', ' A 205  SER  HA ', -0.407, (182.27, 225.7, 216.785)), (' B 740  MET  O  ', ' B 744  GLY  HA2', -0.407, (187.833, 184.993, 207.835)), (' A 347  PHE  HB2', ' A 401  VAL  CG2', -0.406, (235.321, 181.217, 213.15)), (' A 916  LEU  C  ', ' A 916  LEU HD23', -0.406, (127.094, 188.371, 173.661)), (' C 752  LEU  O  ', ' C 755  GLN  HG2', -0.406, (202.311, 178.079, 192.391)), (' C 972  ALA  HA ', ' C 992  GLN  OE1', -0.406, (208.094, 189.376, 183.535)), (' C 344  ALA  HB3', ' C 347  PHE  HE1', -0.406, (222.232, 223.39, 210.326)), (' C1138  TYR  CE2', ' C1143  PRO  HG3', -0.405, (111.742, 171.875, 152.687)), (' B1051  SER  OG ', ' B1064  HIS  ND1', -0.405, (151.757, 165.191, 184.811)), (' C  37  TYR  OH ', ' C  54  LEU  O  ', -0.404, (209.075, 200.843, 158.861)), (' C 193  VAL HG23', ' C 223  LEU  CD1', -0.404, (211.459, 199.636, 150.685)), (' A1072  GLU  HG2', ' B 894  LEU  CD2', -0.404, (130.993, 177.136, 191.839)), (' C 779  GLN  OE1', ' C 865  LEU  CD1', -0.404, (171.895, 161.473, 170.538)), (' B  33  THR  OG1', ' B 219  GLY  O  ', -0.404, (197.577, 145.354, 203.261)), (' B 236  THR  O  ', ' B 236  THR HG22', -0.404, (224.787, 153.528, 198.432)), (' C 537  LYS  N  ', ' C 551  VAL HG23', -0.403, (186.857, 224.67, 177.578)), (' A  31  SER  O  ', ' A  59  PHE  N  ', -0.402, (173.355, 212.793, 220.747)), (' A 227  VAL  CG1', ' A 228  ASP  N  ', -0.402, (194.207, 226.612, 212.792)), (' A 894  LEU  CD2', ' C1072  GLU  HG2', -0.401, (140.525, 188.009, 154.594)), (' A 752  LEU  O  ', ' A 755  GLN  HG2', -0.4, (200.971, 195.853, 180.096)), (' C 819  GLU  OE1', ' C1055  SER  OG ', -0.4, (170.29, 165.538, 158.773)), (' C 819  GLU  HA ', ' C 822  LEU HD12', -0.4, (169.76, 169.96, 155.157))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
