# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = [('L', '  23 ', 'CYS', ' ', 0.3052325264168331, (195.16100000000003, 208.69499999999996, 261.76200000000006)), ('L', '  49 ', 'TYR', ' ', 0.25097351243037336, (183.07, 206.695, 254.62000000000003))]
data['probe'] = [(' B 580  GLN  OE1', ' B1310  NAG  H81', -1.364, (156.453, 202.38, 210.127)), (' B 580  GLN  CD ', ' B1310  NAG  H81', -1.343, (157.125, 201.628, 210.222)), (' B 580  GLN  OE1', ' B1310  NAG  C8 ', -1.08, (155.598, 201.656, 210.751)), (' B 580  GLN  CD ', ' B1310  NAG  C8 ', -0.86, (156.814, 202.647, 211.507)), (' H  66  ARG  NE ', ' H  82B ASN  OD1', -0.7, (188.883, 182.025, 274.115)), (' D   1  NAG  O3 ', ' D   2  NAG  O6 ', -0.611, (201.334, 175.724, 116.482)), (' A 804  GLN  NE2', ' A1303  NAG  O6 ', -0.609, (172.82, 189.022, 146.071)), (' A 563  GLN  O  ', ' A 577  ARG  NH1', -0.602, (231.564, 178.319, 204.93)), (' A 557  LYS  NZ ', ' A 574  ASP  OD2', -0.588, (224.28, 177.894, 194.098)), (' A 905  ARG  NH1', ' A1049  LEU  O  ', -0.578, (191.243, 198.188, 142.006)), (' D   1  NAG  O3 ', ' D   2  NAG  O5 ', -0.571, (201.723, 174.567, 116.317)), (' C 563  GLN  O  ', ' C 577  ARG  NH1', -0.559, (205.711, 243.843, 199.8)), (' A 703  ASN  ND2', ' C 787  GLN  OE1', -0.549, (203.39, 173.001, 148.132)), (' B 498  GLN  OE1', ' B 500  THR  N  ', -0.54, (193.224, 195.839, 250.684)), (' B 342  PHE  CB ', ' B1311  NAG  H82', -0.527, (173.73, 199.034, 233.986)), (' A1019  ARG  NH2', ' B1017  GLU  OE1', -0.525, (198.621, 208.12, 170.97)), (' H  57  LYS  NZ ', ' H  69  ILE  O  ', -0.498, (179.551, 182.226, 261.179)), (' C 115  GLN  NE2', ' C1301  NAG  H82', -0.498, (234.729, 195.087, 234.241)), (' D   1  NAG  O3 ', ' D   1  NAG  O7 ', -0.497, (201.512, 175.627, 118.233)), (' C 738  CYS  SG ', ' C 739  THR  N  ', -0.496, (199.428, 186.211, 193.485)), (' L  52  SER  OG ', ' L  64  GLY  O  ', -0.491, (189.491, 215.751, 252.943)), (' A1307  NAG  O3 ', ' A1307  NAG  O7 ', -0.489, (178.456, 173.188, 167.222)), (' A 189  LEU  N  ', ' A 208  THR  O  ', -0.483, (159.857, 164.863, 197.919)), (' C 804  GLN  NE2', ' C1307  NAG  O6 ', -0.481, (229.996, 179.783, 152.222)), (' J   1  NAG  O3 ', ' J   2  NAG  O6 ', -0.477, (229.088, 208.261, 118.21)), (' B 580  GLN  NE2', ' B1310  NAG  H81', -0.476, (157.495, 202.33, 211.618)), (' B 883  THR HG23', ' C 707  TYR  HB2', -0.468, (222.258, 220.236, 140.363)), (' B 658  ASN  ND2', ' B 660  TYR  OH ', -0.467, (169.925, 226.442, 158.385)), (' B 787  GLN  OE1', ' C 703  ASN  ND2', -0.461, (228.642, 214.915, 148.466)), (' B 405  ASP  OD2', ' B 406  GLU  N  ', -0.459, (195.181, 194.259, 235.236)), (' J   1  NAG  HO3', ' J   2  NAG  HO6', -0.456, (229.692, 208.624, 118.31)), (' B  29  THR  O  ', ' B  62  VAL  N  ', -0.449, (172.834, 243.849, 196.656)), (' C 553  THR  O  ', ' C 586  ASP  N  ', -0.439, (216.619, 238.738, 194.898)), (' B 905  ARG  NH1', ' B1049  LEU  O  ', -0.439, (208.536, 213.416, 142.968)), (' H  70  THR  O  ', ' H  79  VAL  N  ', -0.438, (175.043, 185.415, 264.321)), (' A 641  ASN  ND2', ' A 654  GLU  OE1', -0.432, (195.665, 158.402, 175.846)), (' C 905  ARG  NH1', ' C1049  LEU  O  ', -0.425, (213.12, 190.897, 144.5)), (' B 903  ALA  HB1', ' B 913  GLN  HB2', -0.425, (208.805, 214.673, 131.115)), (' H 113  SER  O  ', ' H 113  SER  OG ', -0.419, (180.21, 186.693, 290.544)), (' C 973  ILE HG23', ' C 980  ILE HG22', -0.411, (209.933, 192.75, 210.539)), (' B1031  GLU  OE2', ' C1039  ARG  NE ', -0.41, (206.486, 202.482, 151.896)), (' B 553  THR  O  ', ' B 586  ASP  N  ', -0.409, (161.436, 199.936, 195.551)), (' B  31  SER  N  ', ' B  60  SER  O  ', -0.402, (175.321, 242.421, 194.549))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
