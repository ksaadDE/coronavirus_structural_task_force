# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', '   8 ', 'PRO', None, (169.169, 184.04000000000002, 242.43199999999993)), ('B', '  95 ', 'PRO', None, (182.965, 193.97, 224.336)), ('D', '   8 ', 'PRO', None, (255.0050000000001, 238.25200000000012, 265.608)), ('G', '   8 ', 'PRO', None, (176.7720000000001, 238.53200000000012, 265.608)), ('I', '   8 ', 'PRO', None, (266.639, 191.30100000000004, 242.43199999999993)), ('I', '  95 ', 'PRO', None, (251.14199999999997, 198.284, 224.336)), ('L', '   8 ', 'PRO', None, (215.64699999999996, 170.64000000000013, 265.608)), ('N', '   8 ', 'PRO', None, (211.61600000000013, 272.08300000000025, 242.43199999999993)), ('N', '  95 ', 'PRO', None, (213.31699999999995, 255.17, 224.336))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' P   1  NAG  O4 ', ' P   2  NAG  C1 ', -1.432, (212.684, 180.326, 238.237)), (' V   1  NAG  O4 ', ' V   2  NAG  C1 ', -1.423, (186.597, 236.332, 238.289)), (' S   1  NAG  O4 ', ' S   2  NAG  C1 ', -1.416, (248.018, 230.699, 238.237)), (' W   1  NAG  O4 ', ' W   2  NAG  C1 ', -1.397, (231.112, 243.437, 133.748)), (' T   1  NAG  O4 ', ' T   2  NAG  C1 ', -1.394, (231.946, 188.657, 133.654)), (' Q   1  NAG  O4 ', ' Q   2  NAG  C1 ', -1.393, (184.223, 215.367, 133.677)), (' X   1  NAG  O4 ', ' X   2  NAG  C1 ', -1.391, (248.415, 236.023, 145.245)), (' R   1  NAG  O4 ', ' R   2  NAG  C1 ', -1.385, (182.029, 233.994, 145.194)), (' U   1  NAG  O4 ', ' U   2  NAG  C1 ', -1.382, (216.756, 177.386, 145.156)), (' X   1  NAG  C4 ', ' X   2  NAG  C1 ', -1.02, (248.032, 235.565, 144.752)), (' T   1  NAG  C4 ', ' T   2  NAG  C1 ', -1.017, (231.953, 189.542, 133.792)), (' R   1  NAG  C4 ', ' R   2  NAG  C1 ', -1.013, (182.611, 233.574, 144.787)), (' U   1  NAG  C4 ', ' U   2  NAG  C1 ', -1.008, (216.864, 177.943, 144.674)), (' W   1  NAG  C4 ', ' W   2  NAG  C1 ', -0.998, (230.568, 242.919, 133.702)), (' Q   1  NAG  C4 ', ' Q   2  NAG  C1 ', -0.996, (184.903, 214.955, 133.702)), (' V   1  NAG  C4 ', ' V   2  NAG  C1 ', -0.973, (188.232, 235.739, 238.828)), (' S   1  NAG  C4 ', ' S   2  NAG  C1 ', -0.967, (246.894, 230.211, 238.647)), (' P   1  NAG  C4 ', ' P   2  NAG  C1 ', -0.956, (212.655, 181.761, 238.695)), (' R   1  NAG  H4 ', ' R   2  NAG  C1 ', -0.649, (182.422, 232.876, 144.943)), (' W   1  NAG  H4 ', ' W   2  NAG  C1 ', -0.628, (230.016, 243.618, 134.415)), (' U   1  NAG  H4 ', ' U   2  NAG  C1 ', -0.621, (217.408, 178.31, 144.848)), (' X   1  NAG  H4 ', ' X   2  NAG  C1 ', -0.614, (247.298, 236.093, 144.962)), (' T   1  NAG  H4 ', ' T   2  NAG  C1 ', -0.605, (232.698, 189.664, 134.48)), (' Q   1  NAG  H4 ', ' Q   2  NAG  C1 ', -0.577, (184.558, 214.191, 134.351)), (' A 808  ASP  OD2', ' A 811  LYS  NZ ', -0.522, (186.49, 237.555, 155.197)), (' F 808  ASP  OD2', ' F 811  LYS  NZ ', -0.516, (211.565, 179.308, 155.22)), (' A 298  GLU  OE2', ' A 316  SER  HB3', -0.514, (189.697, 203.187, 189.862)), (' A1142  GLN  N  ', ' A1143  PRO  HD2', -0.512, (209.587, 210.587, 104.943)), (' F1142  GLN  N  ', ' F1143  PRO  HD2', -0.512, (223.317, 212.941, 104.75)), (' K 298  GLU  OE2', ' K 316  SER  HB3', -0.51, (217.853, 244.811, 189.891)), (' K1142  GLN  N  ', ' K1143  PRO  HD2', -0.51, (214.54, 224.33, 104.855)), (' F 298  GLU  OE2', ' F 316  SER  HB3', -0.507, (239.445, 199.915, 189.877)), (' K1092  GLU  O  ', ' K1107  ARG  NH1', -0.499, (212.188, 224.26, 129.779)), (' A1092  GLU  O  ', ' A1107  ARG  NH1', -0.496, (210.254, 208.37, 129.77)), (' F1092  GLU  O  ', ' F1107  ARG  NH1', -0.492, (224.982, 214.638, 129.822)), (' A 189  LEU HD22', ' A 217  PRO  HG3', -0.49, (161.937, 216.506, 196.104)), (' K 808  ASP  OD2', ' K 811  LYS  NZ ', -0.487, (249.418, 230.29, 155.269)), (' P   1  NAG  H4 ', ' P   2  NAG  C1 ', -0.484, (211.871, 181.943, 239.703)), (' F 189  LEU HD22', ' F 217  PRO  HG3', -0.48, (242.469, 169.004, 195.593)), (' K 898  PHE  N  ', ' K 899  PRO  CD ', -0.479, (238.093, 221.944, 134.695)), (' V   1  NAG  H4 ', ' V   2  NAG  C1 ', -0.479, (188.474, 236.11, 239.593)), (' K 189  LEU HD22', ' K 217  PRO  HG3', -0.477, (243.206, 262.218, 196.112)), (' S   1  NAG  H4 ', ' S   2  NAG  C1 ', -0.475, (247.079, 229.29, 239.607)), (' F 898  PHE  N  ', ' F 899  PRO  CD ', -0.469, (210.11, 193.493, 134.825)), (' A 898  PHE  N  ', ' A 899  PRO  CD ', -0.464, (199.353, 231.889, 134.81)), (' A 113  LYS  HE2', ' B  50  ASP  O  ', -0.452, (166.563, 202.066, 232.298)), (' F 113  LYS  HE2', ' I  50  ASP  O  ', -0.451, (252.076, 179.813, 232.564)), (' A 357  ARG  NH2', ' A 394  ASN  OD1', -0.451, (224.102, 183.506, 220.49)), (' K 113  LYS  HE2', ' N  50  ASP  O  ', -0.45, (228.448, 265.31, 232.359)), (' F 357  ARG  NH2', ' F 394  ASN  OD1', -0.448, (239.722, 239.121, 220.331)), (' K 862  PRO  HA ', ' K 863  PRO  HD3', -0.447, (240.539, 216.159, 174.147)), (' A 620  VAL  N  ', ' A 621  PRO  HD2', -0.445, (187.44, 187.307, 189.053)), (' K 357  ARG  NH2', ' K 394  ASN  OD1', -0.445, (184.048, 225.018, 220.276)), (' A 189  LEU  CD2', ' A 217  PRO  HG3', -0.438, (162.365, 216.381, 195.759)), (' K 898  PHE  HB3', ' K 899  PRO  HD3', -0.437, (238.518, 223.147, 135.852)), (' K 620  VAL  N  ', ' K 621  PRO  HD2', -0.437, (205.23, 254.328, 188.676)), (' K1073  LYS  HG3', ' K1075  PHE  CE2', -0.435, (214.395, 240.52, 129.156)), (' F 189  LEU  CD2', ' F 217  PRO  HG3', -0.434, (241.961, 169.005, 196.163)), (' F 273  ARG HH21', ' F 290  ASP  CG ', -0.433, (242.141, 188.141, 195.097)), (' F 898  PHE  HB3', ' F 899  PRO  HD3', -0.432, (210.762, 192.55, 135.852)), (' K 273  ARG HH21', ' K 290  ASP  CG ', -0.432, (226.617, 252.472, 195.098)), (' F 620  VAL  N  ', ' F 621  PRO  HD2', -0.432, (254.378, 205.679, 188.749)), (' A 366  SER  HB3', ' A 388  ASN HD21', -0.429, (204.765, 190.818, 226.588)), (' F 237  ARG  HG2', ' J 106  GLY  HA2', -0.429, (249.362, 182.201, 218.695)), (' A 898  PHE  HB3', ' A 899  PRO  HD3', -0.427, (198.144, 231.886, 135.852)), (' K 237  ARG  HG2', ' O 106  GLY  HA2', -0.426, (228.537, 261.831, 218.56)), (' A1073  LYS  HG3', ' A1075  PHE  CE2', -0.425, (195.085, 202.271, 129.092)), (' F 366  SER  HB3', ' F 388  ASN HD21', -0.425, (243.022, 218.66, 226.535)), (' K 189  LEU  CD2', ' K 217  PRO  HG3', -0.424, (243.092, 262.0, 196.182)), (' F1073  LYS  HG3', ' F1075  PHE  CE2', -0.422, (238.011, 204.683, 129.035)), (' A 273  ARG HH21', ' A 290  ASP  CG ', -0.422, (178.74, 206.75, 194.933)), (' A 237  ARG  HG2', ' C 106  GLY  HA2', -0.419, (169.858, 203.502, 218.603)), (' K 366  SER  HB3', ' K 388  ASN HD21', -0.418, (199.675, 237.981, 226.575)), (' K1138  TYR  CE2', ' K1140  PRO  HA ', -0.415, (215.616, 225.706, 108.89)), (' L  59  ILE  HA ', ' L  60  PRO  HD3', -0.415, (219.769, 192.133, 262.461)), (' A1138  TYR  CE2', ' A1140  PRO  HA ', -0.413, (207.639, 210.97, 108.806)), (' H  36  TRP  CE2', ' H  81  MET  HB2', -0.412, (207.008, 247.203, 261.423)), (' A 565  PHE  CE1', ' F  42  VAL HG22', -0.412, (218.996, 185.45, 203.57)), (' A 326  ILE  O  ', ' A 326  ILE HG13', -0.411, (201.805, 182.461, 208.497)), (' F 565  PHE  CE1', ' K  42  VAL HG22', -0.41, (240.579, 233.778, 203.518)), (' F1138  TYR  CE2', ' F1140  PRO  HA ', -0.41, (224.512, 211.084, 108.83)), (' F 111  ASP  C  ', ' F 111  ASP  OD1', -0.409, (247.703, 175.902, 229.086)), (' M  36  TRP  CE2', ' M  81  MET  HB2', -0.408, (192.643, 192.364, 261.549)), (' A 108  THR  HB ', ' C 102  SER  O  ', -0.407, (171.572, 205.142, 223.399)), (' K 108  THR  HB ', ' O 102  SER  O  ', -0.406, (229.029, 259.421, 223.625)), (' E  36  TRP  CE2', ' E  81  MET  HB2', -0.406, (247.731, 207.514, 261.534)), (' F1011  GLN  OE1', ' F1014  ARG  NH1', -0.404, (215.158, 204.242, 180.087)), (' F 108  THR  HB ', ' J 102  SER  O  ', -0.404, (247.079, 182.774, 223.266)), (' B  58  VAL  HA ', ' B  59  PRO  HD3', -0.404, (154.406, 191.105, 227.899)), (' A  44  ARG  O  ', ' A 283  GLY  HA2', -0.403, (181.428, 228.654, 193.992)), (' K  44  ARG  O  ', ' K 283  GLY  HA2', -0.403, (243.968, 238.855, 194.232)), (' B  43  ALA  HA ', ' B  44  PRO  HD3', -0.402, (166.564, 182.134, 221.424)), (' K1011  GLN  OE1', ' K1014  ARG  NH1', -0.401, (226.226, 221.111, 180.072)), (' K 326  ILE  O  ', ' K 326  ILE HG13', -0.401, (193.941, 244.746, 208.564)), (' A 111  ASP  C  ', ' A 111  ASP  OD1', -0.401, (165.14, 208.514, 228.987)), (' D  14  SER  HA ', ' D  15  PRO  HD3', -0.401, (243.039, 242.838, 276.133)), (' F 326  ILE  O  ', ' F 326  ILE HG13', -0.4, (251.79, 220.261, 208.549)), (' F  44  ARG  O  ', ' F 283  GLY  HA2', -0.4, (221.817, 179.977, 193.54)), (' A  42  VAL HG22', ' K 565  PHE  CE1', -0.4, (188.166, 227.814, 202.952))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
