# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 457  ARG  NH1', ' A 467  ASP  OD2', -0.764, (192.302, 179.024, 185.058)), (' L   8  SER  HA ', ' L 104  THR  HA ', -0.73, (179.097, 202.092, 226.925)), (' H  82  MET  HE3', ' H  85  LEU HD11', -0.69, (204.409, 188.31, 222.999)), (' A 366  SER  O  ', ' A 370  ASN  ND2', -0.668, (181.503, 142.448, 184.192)), (' H  30  ILE  O  ', ' H  53  THR  OG1', -0.658, (190.246, 180.467, 202.46)), (' H  12  VAL HG13', ' H  18  LEU HD23', -0.656, (208.077, 184.988, 227.364)), (' A 393  THR  O  ', ' A 523  THR  OG1', -0.644, (196.158, 151.723, 172.906)), (' A 339  GLY  HA2', ' A 601  NAG  H83', -0.637, (191.55, 148.03, 190.114)), (' H  53  THR  O  ', ' H  71  LYS  NZ ', -0.627, (194.286, 179.574, 205.176)), (' H  64  LYS  NZ ', ' H  84  SER  O  ', -0.62, (207.847, 193.128, 221.885)), (' A 403  ARG  NH1', ' A 406  GLU  OE2', -0.603, (179.015, 170.817, 195.689)), (' L  41  LYS  HD3', ' L  42  PRO  HD2', -0.597, (177.128, 187.684, 230.821)), (' L  12  THR  OG1', ' L  16  GLU  O  ', -0.596, (164.902, 198.863, 227.039)), (' H  47  TRP  HB2', ' L 100  PHE  HE2', -0.592, (190.02, 193.838, 217.266)), (' L  39  GLN  HB2', ' L  49  LEU HD11', -0.585, (176.532, 190.362, 221.922)), (' H  47  TRP  HB2', ' L 100  PHE  CE2', -0.582, (190.144, 194.469, 216.617)), (' H  20  ILE HG12', ' H 114  THR HG21', -0.58, (196.844, 182.276, 223.807)), (' H 106  GLY  HA3', ' L  36  ASN  ND2', -0.576, (181.808, 191.865, 211.768)), (' A 466  ARG  HG2', ' A 466  ARG HH11', -0.565, (195.876, 170.091, 186.486)), (' H  39  GLN  NE2', ' H  43  LYS  O  ', -0.554, (189.283, 194.959, 228.202)), (' H 106  GLY  HA3', ' L  36  ASN HD21', -0.55, (181.316, 191.678, 211.504)), (' L  24  SER  OG ', ' L  25  SER  N  ', -0.528, (185.636, 207.848, 212.732)), (' A 461  LEU HD23', ' A 465  GLU  HB3', -0.527, (190.219, 173.514, 182.177)), (' H 103  ARG  NH1', ' L  56  ARG  O  ', -0.523, (174.056, 186.299, 209.94)), (' A 377  PHE  HE2', ' A 384  PRO  HB3', -0.518, (178.636, 150.267, 180.875)), (' L  15  GLY  H  ', ' L  79  GLY  HA3', -0.516, (162.938, 194.409, 227.446)), (' A 489  TYR  HB3', ' H 101  TYR  HE1', -0.514, (187.349, 184.502, 198.592)), (' H   3  GLN HE21', ' H   5  LYS  HE3', -0.51, (186.874, 174.248, 222.198)), (' H  13  ALA  O  ', ' H  16  GLN  HG2', -0.51, (210.123, 187.365, 228.945)), (' H  66  ARG  HB3', ' H  83  ASN HD21', -0.508, (210.041, 191.829, 216.413)), (' H  64  LYS  HG2', ' H  67  LEU HD23', -0.493, (204.139, 193.148, 217.843)), (' H 104  TYR  CE2', ' H 108  ASP  HA ', -0.492, (180.316, 186.572, 212.875)), (' H   4  LEU HD13', ' H  24  VAL HG12', -0.488, (189.661, 177.838, 216.049)), (' H  12  VAL HG11', ' H  85  LEU HD22', -0.487, (206.993, 187.421, 227.245)), (' L  93  TRP  HB2', ' L  98  TRP  CH2', -0.486, (185.657, 195.448, 209.083)), (' A 377  PHE  CD1', ' A 434  ILE HG12', -0.486, (181.282, 152.756, 185.123)), (' A 497  PHE  CE2', ' A 507  PRO  HB3', -0.485, (183.857, 164.607, 199.988)), (' A 382  VAL HG21', ' A 387  LEU HD21', -0.481, (182.349, 152.03, 175.754)), (' H   2  VAL HG11', ' H 109  TYR  CE2', -0.479, (180.449, 178.539, 214.511)), (' A 377  PHE  HD1', ' A 434  ILE HG12', -0.476, (181.074, 152.714, 185.604)), (' A 489  TYR  HB3', ' H 101  TYR  CE1', -0.472, (187.47, 184.07, 198.996)), (' A 466  ARG  HG2', ' A 466  ARG  NH1', -0.462, (196.219, 169.889, 186.963)), (' A 417  LYS  HZ3', ' A 421  TYR  HE2', -0.456, (181.377, 179.828, 189.293)), (' L   4  VAL HG13', ' L 101  GLY  HA2', -0.451, (186.075, 202.179, 219.905)), (' L   7  GLU  CD ', ' L   7  GLU  H  ', -0.451, (177.71, 205.824, 223.33)), (' H   4  LEU  O  ', ' H   5  LYS  HE2', -0.45, (187.912, 176.329, 222.561)), (' L  12  THR HG22', ' L 106  LEU HD11', -0.447, (169.657, 197.761, 228.786)), (' A 445  VAL  HA ', ' A 499  PRO  HG3', -0.444, (182.341, 162.392, 212.063)), (' L  94  TYR  HE2', ' L  99  VAL HG11', -0.443, (188.365, 202.943, 213.321)), (' H  37  VAL HG12', ' H  47  TRP  HA ', -0.442, (191.588, 192.465, 217.995)), (' L  56  ARG  HD3', ' L  64  PHE  O  ', -0.442, (168.536, 190.134, 215.375)), (' H  46  GLU  N  ', ' H  46  GLU  OE1', -0.439, (192.609, 195.825, 222.67)), (' H  45  LEU  H  ', ' H  45  LEU HD23', -0.436, (187.976, 195.949, 223.933)), (' A 421  TYR  CD1', ' A 457  ARG  HB3', -0.436, (185.94, 179.929, 186.874)), (' H  87  THR  HA ', ' H 118  VAL  CG1', -0.435, (204.82, 192.629, 230.98)), (' L   2  ALA  O  ', ' L  99  VAL HG21', -0.434, (189.995, 203.199, 216.036)), (' A 426  PRO  HB3', ' A 463  PRO  HB3', -0.433, (186.406, 169.182, 175.825)), (' L  36  ASN  HA ', ' L  50  ILE  O  ', -0.433, (179.05, 193.42, 213.762)), (' L  41  LYS  CD ', ' L  42  PRO  HD2', -0.43, (177.205, 186.756, 230.631)), (' A 497  PHE  CZ ', ' A 507  PRO  HB3', -0.429, (183.353, 164.743, 199.993)), (' L  36  ASN  HB2', ' L  91  ALA  HB3', -0.427, (182.966, 194.764, 214.682)), (' A 462  LYS  HA ', ' A 462  LYS  HD3', -0.427, (187.473, 175.948, 177.228)), (' L   7  GLU  OE2', ' L  21  THR  OG1', -0.425, (176.116, 207.163, 220.553)), (' L  81  GLN  HG2', ' L 108  VAL HG23', -0.423, (167.549, 193.106, 233.477)), (' H  12  VAL HG12', ' H  13  ALA  O  ', -0.422, (208.65, 187.247, 229.342)), (' A 417  LYS  NZ ', ' A 421  TYR  HE2', -0.419, (180.981, 179.744, 189.597)), (' A 492  LEU  O  ', ' A 493  GLN  NE2', -0.417, (188.274, 178.597, 199.673)), (' L  83  GLU  N  ', ' L  83  GLU  OE1', -0.415, (168.166, 186.945, 229.428)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.41, (180.572, 156.088, 180.104)), (' A 355  ARG  HG3', ' A 355  ARG HH11', -0.41, (193.48, 162.039, 181.648)), (' A 498  GLN  HA ', ' A 498  GLN  OE1', -0.41, (181.635, 166.39, 209.64)), (' A 498  GLN  H  ', ' A 501  ASN  ND2', -0.409, (179.532, 166.728, 206.179)), (' L  81  GLN  HG2', ' L 108  VAL  CG2', -0.409, (167.873, 193.214, 233.047)), (' L  64  PHE  CG ', ' L  77  ILE HD13', -0.407, (169.453, 191.612, 220.322)), (' A 341  VAL HG22', ' A 356  LYS  HD3', -0.406, (195.007, 154.518, 187.239)), (' L  20  LEU  H  ', ' L  20  LEU HD23', -0.404, (172.741, 200.72, 220.743)), (' L   7  GLU  O  ', ' L   8  SER  OG ', -0.404, (180.752, 205.542, 228.253)), (' L  35  ALA  HB3', ' L  53  THR  HA ', -0.4, (177.258, 197.126, 210.468)), (' A 485  GLY  H  ', ' A 488  CYS  HB2', -0.4, (192.199, 190.999, 198.955))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
