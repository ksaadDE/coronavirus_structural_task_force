# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 252 ', 'GLY', 0.06311358466232743, (67.98300000000006, 35.163999999999994, 89.209)), ('D', ' 161 ', 'SER', 0.012989020898199777, (-8.12, -16.293, 26.153)), ('E', ' 234 ', 'GLN', 0.03219161606016504, (14.398, -24.715, 4.375))]
data['omega'] = [('A', ' 210 ', 'PRO', None, (41.34300000000003, 15.627000000000002, 75.075)), ('B', '  32 ', 'PRO', None, (56.480999999999995, 17.395999999999997, 49.77100000000001)), ('E', '   8 ', 'PRO', None, (23.409, -4.492, 17.598)), ('E', ' 161 ', 'PRO', None, (10.376000000000007, -14.119, 16.05))]
data['rota'] = [('A', '  11 ', 'SER', 0.12868177994383306, (47.048, 9.75, 46.291)), ('A', '  14 ', 'ARG', 0.015666486527307715, (54.77, 7.066999999999995, 40.778)), ('A', '  35 ', 'ARG', 0.021655818037897824, (43.257000000000005, 2.976, 57.728)), ('A', '  73 ', 'THR', 0.2961690622065479, (38.35, 7.696, 41.497)), ('A', '  75 ', 'ARG', 0.0, (43.63000000000003, 7.4759999999999955, 40.135)), ('A', '  89 ', 'GLU', 0.0016383907755415828, (53.16400000000004, 11.562999999999999, 32.299)), ('A', '  97 ', 'ARG', 0.017925628601798558, (41.105000000000004, 14.996999999999998, 49.907)), ('A', ' 110 ', 'LEU', 0.0010709172015293726, (27.312, 21.747999999999998, 63.336000000000006)), ('A', ' 141 ', 'GLN', 0.11799136312442651, (36.62500000000003, 25.982, 37.87)), ('A', ' 156 ', 'LEU', 0.0789538867420707, (27.33, 15.502999999999991, 49.528)), ('A', ' 165 ', 'VAL', 0.056713524561729914, (26.444000000000003, 12.500999999999996, 61.937)), ('A', ' 176 ', 'LYS', 0.0, (32.18, 5.973, 74.816)), ('A', ' 181 ', 'ARG', 0.016416255783676392, (36.871, 10.765, 78.236)), ('A', ' 189 ', 'MET', 0.03170830910488358, (58.005, 22.761, 85.845)), ('A', ' 200 ', 'THR', 0.03201324110340202, (65.33100000000006, 28.864000000000008, 81.419)), ('A', ' 213 ', 'ILE', 0.2855220164622259, (45.356, 22.955, 75.033)), ('A', ' 216 ', 'THR', 0.08003837577193652, (50.594, 30.815000000000005, 78.47)), ('A', ' 234 ', 'ARG', 0.2500969778339806, (52.643000000000036, 16.067, 69.878)), ('A', ' 251 ', 'SER', 0.06846292094691087, (67.587, 35.55, 85.398)), ('A', ' 254 ', 'GLU', 0.26498224495132533, (62.82, 33.58699999999999, 88.23100000000001)), ('A', ' 255 ', 'GLN', 0.005704059124524694, (60.035999999999994, 33.37299999999999, 90.914)), ('A', ' 264 ', 'GLU', 0.12417271203217217, (39.004, 20.784, 78.665)), ('A', ' 271 ', 'THR', 0.05643449355767006, (48.758, 27.97, 87.569)), ('B', '   1 ', 'ILE', 0.0, (55.39800000000003, 23.439, 46.81)), ('B', '  19 ', 'LYS', 0.2969870563912801, (62.64000000000003, 1.7729999999999995, 83.26100000000001)), ('B', '  57 ', 'SER', 0.29241775673695714, (46.79, 18.885000000000005, 58.931)), ('B', '  58 ', 'LYS', 0.0, (44.206, 21.647, 57.98800000000001)), ('B', '  68 ', 'THR', 0.1881982627998103, (60.428000000000004, 2.324, 69.21)), ('B', '  88 ', 'SER', 0.019354059167515647, (70.485, 19.499999999999993, 51.352000000000004)), ('B', '  89 ', 'GLN', 0.15764616202185885, (71.90100000000001, 17.205999999999996, 54.093)), ('C', '   2 ', 'LEU', 0.0, (32.90599999999999, 6.365000000000001, 54.107)), ('C', '   5 ', 'ARG', 0.00979232919757014, (29.177000000000003, 8.106, 46.22)), ('C', '   8 ', 'LEU', 0.0, (35.207, 12.7, 39.39)), ('C', '   9 ', 'LEU', 0.02165363931904698, (37.263, 15.969000000000001, 39.26)), ('D', '   3 ', 'GLU', 0.25991365501856223, (20.025000000000002, -3.545, 46.257000000000005)), ('D', '   6 ', 'GLN', 0.06700227395216363, (10.398, -2.016, 46.331)), ('D', '   7 ', 'ASN', 0.061697734809536164, (7.763, -0.5450000000000002, 43.781000000000006)), ('D', '  11 ', 'LEU', 0.1051634072916817, (-2.493000000000002, 1.1699999999999997, 38.714)), ('D', '  38 ', 'SER', 0.17559605799028177, (20.699000000000012, 9.587, 44.715)), ('D', '  67 ', 'GLU', 0.046860468508940316, (7.598, 19.988, 42.298)), ('D', '  82 ', 'LYS', 0.0, (15.637000000000006, 9.392, 54.079)), ('D', '  87 ', 'VAL', 0.15521818845027885, (10.322, 7.905999999999998, 47.71500000000001)), ('D', '  90 ', 'LEU', 0.06690881559113104, (2.558, 12.135, 42.421)), ('D', '  92 ', 'ARG', 0.09371261319443974, (-1.580000000000001, 15.826, 39.11)), ('D', '  95 ', 'GLN', 0.10190948681343169, (-2.877000000000002, 12.589999999999998, 30.935000000000006)), ('D', '  99 ', 'SER', 0.24035186131986147, (0.5719999999999997, 5.668, 30.791000000000004)), ('D', ' 101 ', 'THR', 0.002028792994701418, (5.831000000000001, 1.8289999999999986, 33.695)), ('D', ' 108 ', 'ARG', 0.09514781775831935, (24.189000000000014, 1.454, 45.386)), ('D', ' 119 ', 'ARG', 0.09054684872011047, (2.62, 0.056999999999999995, 35.345)), ('D', ' 127 ', 'GLN', 0.28772243120795593, (-19.25000000000001, 9.864000000000003, 28.67)), ('D', ' 145 ', 'SER', 0.05321201169863343, (-13.582, -12.88, 10.728)), ('D', ' 148 ', 'LEU', 0.0658846479413998, (-14.790000000000006, -6.52, 18.106)), ('D', ' 153 ', 'ASP', 0.19874549947884512, (-16.9, 1.849, 30.059)), ('D', ' 161 ', 'SER', 0.10238290280173978, (-8.12, -16.293, 26.153)), ('D', ' 163 ', 'ASP', 0.03889996981359246, (-10.047000000000008, -21.307999999999993, 25.406)), ('D', ' 209 ', 'ASP', 0.0703843334098134, (-27.007, -3.581, 27.928)), ('E', '  12 ', 'ILE', 0.22841405715795515, (17.989, -13.522999999999996, 16.834)), ('E', '  15 ', 'ARG', 0.05470980605826785, (20.832, -21.746, 21.361)), ('E', '  19 ', 'VAL', 0.0, (26.607, -12.749999999999996, 20.382)), ('E', '  22 ', 'ARG', 0.26510375743924064, (28.06200000000001, -2.6749999999999994, 20.88)), ('E', '  38 ', 'ARG', 0.0029920695842903453, (30.768000000000008, 5.892999999999999, 33.674)), ('E', '  63 ', 'GLU', 0.03844527901122759, (38.41500000000001, 1.310999999999999, 30.520000000000007)), ('E', '  67 ', 'GLU', 0.14697405276549613, (31.764000000000028, -3.9759999999999995, 39.458)), ('E', '  79 ', 'GLU', 0.22974484690072497, (34.916, -4.993, 27.506000000000004)), ('E', '  83 ', 'LYS', 0.005923588706929204, (39.714, 2.729999999999999, 24.958000000000002)), ('E', '  92 ', 'GLN', 0.0, (28.93400000000002, -17.1, 24.696000000000005)), ('E', ' 165 ', 'GLU', 0.09225485981763958, (6.144, -2.657, 14.671)), ('E', ' 189 ', 'GLN', 0.0, (0.027000000000000024, -21.453, 22.478)), ('E', ' 192 ', 'LEU', 0.00100382671769136, (5.120000000000001, -23.710999999999988, 24.548)), ('E', ' 231 ', 'GLU', 0.0, (22.421000000000006, -19.562, 6.686)), ('E', ' 251 ', 'ARG', 0.28206394353692377, (-16.982, 0.9749999999999993, 0.627))]
data['cbeta'] = [('A', ' 165 ', 'VAL', 'B', 0.26335307103192485, (25.64, 13.813, 62.23500000000001)), ('D', '  53 ', 'ILE', ' ', 0.2741310978995698, (10.15, 11.731999999999996, 34.65100000000001)), ('D', '  92 ', 'ARG', ' ', 0.2835331428667162, (-1.1620000000000013, 17.289, 39.35600000000001)), ('D', ' 101 ', 'THR', ' ', 0.2936383350945795, (6.22, 0.356, 33.575)), ('D', ' 166 ', 'VAL', ' ', 0.26368135112250213, (-11.544000000000008, -18.142, 21.635))]
data['probe'] = [(' E 101 AMET  HE2', ' E 117  GLY  HA3', -0.827, (16.565, -1.883, 23.692)), (' B   4 ATHR HG22', ' B  86  THR  HB ', -0.719, (63.008, 22.237, 52.834)), (' E  37  ASN HD22', ' E  58  ASN HD21', -0.718, (36.815, 8.725, 31.865)), (' E  38  ARG HH11', ' E  57  GLN HE21', -0.716, (33.15, 7.124, 38.618)), (' D 163  ASP  HB2', ' D 166  VAL HG22', -0.675, (-11.527, -19.461, 23.619)), (' D 105  ALA  HB1', ' D 112  ILE  CG2', -0.662, (18.316, 4.053, 38.881)), (' A  89  GLU  CD ', ' A  89  GLU  H  ', -0.615, (53.263, 12.821, 30.401)), (' D   3  GLU  HB2', ' D 108  ARG  HD2', -0.606, (21.912, -2.026, 46.019)), (' D 172  CYS  SG ', ' E 180  CYS  SG ', -0.596, (-6.67, -0.616, 20.758)), (' D 138  ASP  HB3', ' D 141  SER  O  ', -0.571, (-11.77, -12.178, 5.126)), (' E 139  PRO  HG3', ' E 150  ALA  HB1', -0.569, (-15.689, 1.376, 8.7)), (' A  97  ARG  HG3', ' A 116  TYR  CE2', -0.556, (39.009, 14.619, 46.429)), (' D 105  ALA  HB1', ' D 112  ILE HG21', -0.525, (18.256, 4.307, 38.685)), (' A 126  LEU HD22', ' A 156  LEU HD13', -0.509, (30.172, 19.046, 49.582)), (' E 101 BMET  HE2', ' E 103  LEU HD21', -0.496, (16.185, -0.644, 26.551)), (' E  53  LEU HD22', ' E  72  LEU HD13', -0.494, (24.64, -10.241, 33.599)), (' A  14  ARG  HB3', ' A  17  ARG  HB2', -0.481, (56.331, 5.048, 41.558)), (' A  97  ARG  HG3', ' A 116  TYR  CZ ', -0.48, (38.579, 14.862, 46.545)), (' A  20  PRO  HD2', ' A  75  ARG HH11', -0.476, (47.008, 3.878, 40.747)), (' E  21  PHE  CD1', ' E 118  THR HG21', -0.475, (22.891, -7.462, 21.052)), (' D 108  ARG  O  ', ' D 111  LYS  HG2', -0.471, (25.754, 1.041, 42.492)), (' E 132  PRO  HB3', ' E 159  PHE  CD2', -0.466, (3.258, -11.686, 13.028)), (' B  25  CYS  HB2', ' B  39  LEU HD21', -0.453, (62.391, 8.921, 65.832)), (' D 136  LEU HD22', ' E 139  PRO  HA ', -0.453, (-15.886, -3.845, 11.192)), (' E  12  ILE HD13', ' E 161  PRO  HG3', -0.447, (13.542, -14.856, 17.051)), (' E  76  PHE  CE2', ' E  91  ILE HG12', -0.446, (24.635, -11.962, 27.953)), (' B   2  GLN  HB3', ' B  86  THR HG22', -0.437, (60.985, 21.823, 50.525)), (' E 121  THR HG21', ' E 161  PRO  HB3', -0.434, (12.533, -14.429, 19.305)), (' E 207  ALA  O  ', ' E 211  GLN  HG3', -0.432, (-18.693, 5.62, 5.773)), (' B   2  GLN  HB3', ' B  86  THR  CG2', -0.431, (60.729, 21.594, 50.721)), (' E  13 ATHR HG21', ' E  19  VAL HG13', -0.43, (23.896, -13.67, 18.691)), (' E 153  VAL HG22', ' E 202  ARG  HG3', -0.428, (-10.024, -3.208, 15.62)), (' A  95  VAL HG12', ' A 118  TYR  HD1', -0.424, (46.217, 16.595, 42.703)), (' D 166  VAL HG12', ' D 190  SER  HB2', -0.42, (-12.552, -18.876, 19.456)), (' A 133  TRP  HB2', ' A 144  LYS  HD2', -0.415, (32.638, 26.238, 43.013)), (' A   6 AARG  HG2', ' A 113 ATYR  HE1', -0.412, (36.261, 16.508, 58.929)), (' A 187  THR  HA ', ' A 204  TRP  O  ', -0.41, (52.503, 19.706, 83.148)), (' D 174  LEU  HB3', ' E 180  CYS  HB3', -0.407, (-6.962, 3.113, 19.693)), (' E  58  ASN  O  ', ' E  80  ARG  HD3', -0.405, (35.249, 2.387, 29.892))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
