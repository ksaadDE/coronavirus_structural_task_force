# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('E', ' 506 ', 'GLN', 0.059143408866144206, (157.166, 206.13699999999983, 262.176))]
data['omega'] = [('A', ' 146 ', 'PRO', None, (141.511, 227.907, 294.7))]
data['rota'] = [('E', ' 493 ', 'GLN', 0.012336882036664013, (157.083, 190.561, 268.604))]
data['cbeta'] = []
data['probe'] = [(' A 353  LYS  HA ', ' E 505  TYR  CE2', -0.958, (159.525, 205.537, 270.044)), (' A 353  LYS  CA ', ' E 505  TYR  CE2', -0.778, (159.03, 205.847, 270.458)), (' A 131  LYS  HB3', ' A 143  LEU HD23', -0.72, (136.881, 222.868, 300.732)), (' E 498  GLN  H  ', ' E 501  TYR  HE2', -0.698, (151.622, 203.625, 266.434)), (' A 144  LEU HD12', ' A 148  LEU  HB2', -0.697, (144.482, 227.809, 300.539)), (' A 353  LYS  C  ', ' E 505  TYR  CE2', -0.683, (159.873, 206.819, 269.767)), (' A 152  MET  O  ', ' A 161  ARG  NH1', -0.658, (149.707, 237.096, 302.291)), (' A 394  ASN  OD1', ' A 395  GLY  N  ', -0.647, (165.332, 209.948, 284.941)), (' A 458  LYS  HG2', ' A 462  MET  HE2', -0.644, (166.218, 215.912, 311.424)), (' A 419  LYS  HE2', ' A 428  PHE  HB3', -0.626, (168.442, 247.378, 277.542)), (' A 284  PRO  HG3', ' A 440  LEU HD13', -0.623, (165.989, 243.947, 296.91)), (' A 378  HIS  HE1', ' A 402  GLU  HA ', -0.623, (162.97, 219.085, 285.235)), (' E 351  TYR  HE1', ' E 452  LEU  HB2', -0.621, (155.337, 189.147, 262.154)), (' A 353  LYS  HA ', ' E 505  TYR  HE2', -0.621, (160.289, 206.239, 270.685)), (' A 524  GLN  HB3', ' A 574  VAL HG11', -0.611, (178.493, 221.952, 288.235)), (' E 405  ASP  O  ', ' E 408  ARG  NH1', -0.605, (168.021, 203.836, 262.371)), (' A 183  TYR  OH ', ' A 509  ASP  OD1', -0.6, (154.501, 208.398, 301.512)), (' A  19  SER  N  ', ' A  23  GLU  OE1', -0.594, (174.701, 181.407, 276.877)), (' A  44  SER  HB3', ' A 351  LEU  HG ', -0.589, (152.284, 208.969, 277.354)), (' E 342  PHE  HE1', ' E 511  VAL HG11', -0.586, (159.728, 198.247, 245.3)), (' A  47  SER  O  ', ' A  51  ASN  ND2', -0.585, (146.38, 213.351, 281.347)), (' A 317  SER  HB2', ' A 546  ASN  H  ', -0.581, (173.261, 230.841, 270.576)), (' A 290  ASN  OD1', ' A 291  ILE  N  ', -0.567, (161.588, 244.2, 285.896)), (' A 233  ILE HD13', ' A 450  LEU HD13', -0.567, (171.652, 226.342, 299.826)), (' A  35  GLU  OE2', ' E 493 AGLN  NE2', -0.563, (156.198, 191.745, 273.389)), (' A 524  GLN  NE2', ' A 580  ASN  H  ', -0.552, (178.63, 221.02, 293.779)), (' A 308  PHE  HE2', ' A 333  LEU HD22', -0.549, (153.565, 225.011, 273.805)), (' A 353  LYS  C  ', ' E 505  TYR  CD2', -0.547, (159.229, 206.861, 269.283)), (' E 344  ALA  HB3', ' E 347  PHE  HE1', -0.547, (152.423, 195.996, 248.152)), (' A  31  LYS  NZ ', ' E 493 AGLN  OE1', -0.545, (157.799, 188.87, 272.434)), (' A 119  ILE HG22', ' A 123  MET  HE2', -0.544, (147.858, 207.216, 304.105)), (' A 526  GLN  NE2', ' A 530  CYS  SG ', -0.542, (175.314, 230.496, 282.676)), (' A  83  TYR  OH ', ' E 487  ASN  OD1', -0.541, (165.965, 184.352, 281.89)), (' E 505  TYR  O  ', ' E 506  GLN  O  ', -0.539, (159.166, 204.574, 261.765)), (' E 437  ASN  HA ', ' E 508  TYR  HD1', -0.538, (157.812, 205.746, 256.057)), (' A 353  LYS  C  ', ' E 505  TYR  HE2', -0.536, (160.174, 206.776, 270.458)), (' A 381  TYR  HD1', ' A 558  LEU HD22', -0.536, (169.643, 217.085, 279.96)), (' E 437  ASN  HA ', ' E 508  TYR  CD1', -0.534, (157.925, 206.492, 255.686)), (' A 209  VAL  HB ', ' A 217  TYR  H  ', -0.533, (178.457, 205.904, 294.613)), (' A  41  TYR  OH ', ' E 500  THR  OG1', -0.53, (150.607, 208.075, 269.495)), (' A 132  VAL HG21', ' A 148  LEU HD21', -0.527, (140.81, 229.171, 303.927)), (' E 347  PHE  CE2', ' E 509  ARG  HD3', -0.526, (154.683, 198.945, 251.176)), (' A 190  MET  O  ', ' A 194  ASN  ND2', -0.521, (160.961, 196.917, 301.482)), (' A 460  ARG HH21', ' A 506  VAL HG22', -0.52, (156.262, 216.122, 303.116)), (' A 245  ARG  NH2', ' A 603  PHE  O  ', -0.512, (168.353, 240.51, 312.545)), (' A 578  ASN  OD1', ' A 579  MET  N  ', -0.51, (179.87, 216.708, 296.017)), (' A 237  TYR  CE1', ' A 451  PRO  HG2', -0.503, (166.499, 230.566, 304.329)), (' E 497  PHE  CE1', ' E 507  PRO  HB3', -0.498, (155.711, 201.355, 261.73)), (' A 439  LEU  O  ', ' A 443  ALA  N  ', -0.496, (167.299, 236.401, 293.993)), (' A 396  ALA  HB3', ' A 400  PHE  HD2', -0.488, (171.979, 213.08, 285.976)), (' E 505  TYR  O  ', ' E 506  GLN  C  ', -0.487, (158.35, 204.583, 261.951)), (' A 455  MET  SD ', ' A 481  LYS  HD2', -0.48, (160.901, 224.601, 309.797)), (' E 502  GLY  O  ', ' E 506  GLN  HG3', -0.478, (157.694, 209.233, 263.656)), (' A  57  GLU  O  ', ' A  61  ASN  ND2', -0.478, (136.923, 206.394, 278.944)), (' E 418  ILE  HA ', ' E 422  ASN HD22', -0.47, (165.742, 192.51, 261.987)), (' A 382  ASP  HA ', ' A 385  TYR  CE2', -0.469, (165.651, 212.441, 278.893)), (' A 389  PRO  O  ', ' A 393  ARG  HG3', -0.463, (165.864, 203.663, 278.262)), (' A 353  LYS  CA ', ' E 505  TYR  HE2', -0.463, (160.099, 206.506, 270.69)), (' A 394  ASN  HB3', ' A 562  LYS  HD2', -0.462, (166.881, 206.303, 285.127)), (' A 525  PHE  CZ ', ' A 557  MET  HE1', -0.461, (174.068, 218.656, 284.896)), (' A 353  LYS  HD3', ' E 501  TYR  HE1', -0.459, (156.034, 203.632, 269.996)), (' A 273  ARG HH12', ' A 505  HIS  CE1', -0.448, (155.868, 220.98, 296.186)), (' E 431  GLY  HA2', ' E 515  PHE  HD2', -0.447, (170.462, 195.954, 242.452)), (' A 276  THR  OG1', ' A 445  THR  OG1', -0.444, (160.329, 233.299, 293.873)), (' A 580  ASN  OD1', ' A 581  VAL  N  ', -0.442, (180.144, 224.04, 297.196)), (' A  37  GLU  HB3', ' A 353  LYS  HE3', -0.441, (157.786, 201.078, 273.028)), (' A 478  TRP  CE3', ' A 481  LYS  HG3', -0.438, (157.652, 225.713, 313.023)), (' E 490  PHE  CE2', ' E 492  LEU  HB2', -0.437, (155.419, 185.419, 267.756)), (' A 535  HIS  CD2', ' A 542  CYS  HA ', -0.437, (176.962, 235.884, 280.728)), (' A 529  LEU HD21', ' A 554  LEU  HB2', -0.432, (176.452, 222.414, 279.601)), (' A 207  TYR  HD2', ' A 222  LEU HD22', -0.431, (171.014, 211.488, 298.2)), (' A 315  PHE  HD1', ' A 320  LEU HD12', -0.431, (168.67, 223.336, 274.501)), (' A 161  ARG  NH2', ' A 265  HIS  O  ', -0.428, (151.523, 235.585, 305.485)), (' A 156  LEU  O  ', ' A 252  TYR  OH ', -0.426, (149.89, 243.242, 305.852)), (' A 145  GLU  OE1', ' A 149  ASN  ND2', -0.425, (146.213, 227.582, 296.007)), (' E 377  PHE  HD1', ' E 434  ILE HG12', -0.424, (164.425, 203.652, 245.887)), (' A 198  ASP  OD1', ' A 201  ASP  N  ', -0.423, (166.033, 205.527, 305.658)), (' A 457  GLU  HG3', ' A 513  ILE HD13', -0.423, (166.307, 216.477, 301.262)), (' A 450  LEU  HB2', ' A 451  PRO  HD3', -0.421, (167.59, 227.986, 301.81)), (' A 308  PHE  CE2', ' A 333  LEU HD22', -0.42, (153.624, 225.02, 273.556)), (' A 354  GLY  N  ', ' E 505  TYR  HE2', -0.417, (160.024, 207.14, 270.736)), (' A 215  TYR  OH ', ' A 571  GLU  OE1', -0.416, (185.942, 210.761, 287.51)), (' A 482  ARG  HE ', ' A 488  VAL HG23', -0.415, (158.808, 229.597, 317.883)), (' E 404  GLY  HA2', ' E 508  TYR  CD2', -0.415, (161.871, 204.602, 259.069)), (' A 245  ARG  HA ', ' A 262  LEU HD21', -0.413, (161.399, 239.517, 309.07)), (' A 504  PHE  O  ', ' A 508  ASN  ND2', -0.413, (150.232, 216.11, 298.881)), (' A 144  LEU HD22', ' A 168  TRP  CZ2', -0.411, (145.431, 222.72, 301.725)), (' E 377  PHE  CD1', ' E 434  ILE HG12', -0.41, (164.729, 203.953, 245.684)), (' E 438  SER  HB3', ' E 509  ARG  HG3', -0.408, (154.802, 202.262, 254.446)), (' A 152  MET  HE2', ' A 270  MET  HA ', -0.406, (149.972, 230.858, 304.534)), (' E 405  ASP  HB3', ' E 408  ARG HH12', -0.405, (167.168, 204.821, 264.048)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.403, (155.46, 198.955, 254.63)), (' A  27  THR HG22', ' E 489  TYR  HE2', -0.401, (165.294, 185.903, 277.173)), (' A 117  ASN  O  ', ' A 121  ASN  ND2', -0.4, (145.207, 204.496, 297.671))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
