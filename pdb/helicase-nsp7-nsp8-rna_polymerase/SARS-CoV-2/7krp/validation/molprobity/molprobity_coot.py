# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (159.4799999999999, 165.978, 175.58)), ('B', ' 183 ', 'PRO', None, (175.50399999999993, 144.95499999999998, 176.822)), ('D', '  32 ', 'GLU', None, (190.13600000000002, 241.842, 153.984)), ('D', ' 183 ', 'PRO', None, (197.14099999999996, 132.99, 153.18299999999996))]
data['rota'] = [('A', '  24 ', 'THR', 0.284531623382267, (186.95600000000005, 148.65399999999997, 242.465)), ('A', '  31 ', 'VAL', 0.06420007849593835, (182.35400000000007, 156.844, 232.52)), ('A', '  49 ', 'LEU', 0.24944295306850087, (181.467, 162.462, 232.44599999999994)), ('A', '  72 ', 'VAL', 0.2577738986156063, (173.548, 151.51, 241.557)), ('A', ' 105 ', 'ARG', 0.002318573666758807, (176.004, 151.35699999999997, 255.73499999999996)), ('A', ' 114 ', 'ILE', 0.0, (168.86, 153.027, 243.929)), ('A', ' 212 ', 'LEU', 0.19563568052221114, (169.31199999999995, 150.34999999999997, 224.11299999999994)), ('A', ' 231 ', 'VAL', 0.04670233077184739, (152.11099999999988, 165.00599999999994, 230.19999999999993)), ('A', ' 293 ', 'THR', 0.01614924054205949, (149.63299999999992, 168.40499999999994, 214.507)), ('A', ' 315 ', 'VAL', 0.00945159699767828, (159.85899999999992, 161.169, 204.327)), ('A', ' 320 ', 'VAL', 0.16668203285468283, (157.25599999999994, 151.38399999999996, 204.33599999999996)), ('A', ' 335 ', 'VAL', 0.18315431302665797, (138.95699999999988, 165.183, 174.36899999999994)), ('A', ' 341 ', 'VAL', 0.03835090320298859, (145.14999999999995, 159.19099999999995, 179.889)), ('A', ' 359 ', 'VAL', 0.07769575327060466, (140.51099999999988, 168.757, 185.648)), ('A', ' 445 ', 'ASP', 0.12707104680802814, (181.74899999999997, 153.69, 176.024)), ('A', ' 481 ', 'ASP', 0.24009636758587938, (167.01899999999992, 188.934, 203.802)), ('A', ' 602 ', 'LEU', 0.23523701737316294, (188.241, 188.41399999999993, 199.72499999999994)), ('A', ' 666 ', 'MET', 0.20770378868317027, (160.89399999999992, 161.01699999999994, 185.40299999999993)), ('A', ' 686 ', 'THR', 0.03673633751634541, (167.0069999999999, 177.574, 190.48399999999995)), ('A', ' 687 ', 'THR', 0.2422054620383249, (169.93599999999992, 175.185, 190.667)), ('A', ' 694 ', 'PHE', 0.1344607500117885, (171.5089999999999, 174.14499999999995, 200.98499999999996)), ('A', ' 711 ', 'ASP', 0.02921796886056014, (180.58199999999997, 170.815, 227.262)), ('A', ' 737 ', 'VAL', 0.01765959326269887, (159.77299999999988, 181.738, 215.967)), ('A', ' 754 ', 'SER', 0.03760663138373444, (182.042, 184.94, 208.002)), ('A', ' 758 ', 'LEU', 0.03045068331138077, (178.97999999999996, 179.954, 195.342)), ('A', ' 776 ', 'VAL', 0.019920355716393966, (182.122, 177.49299999999994, 216.115)), ('A', ' 805 ', 'LEU', 0.2659956739272784, (195.694, 185.26099999999994, 205.253)), ('A', ' 813 ', 'CYS', 0.2539367949976442, (185.769, 178.15599999999995, 192.148)), ('A', ' 870 ', 'THR', 0.0020141051413428528, (202.778, 186.19999999999993, 185.17199999999994)), ('A', ' 891 ', 'LEU', 0.08548131260285653, (198.431, 183.41899999999998, 164.532)), ('A', ' 912 ', 'THR', 0.20141609266883836, (194.694, 193.07599999999994, 166.493)), ('B', '  33 ', 'VAL', 0.1511810449951129, (171.99, 241.75999999999993, 144.217)), ('B', '  79 ', 'LYS', 0.028647706895397765, (155.8159999999999, 177.65, 163.0)), ('B', ' 111 ', 'ARG', 0.2208423308976398, (138.07699999999994, 153.454, 193.399)), ('B', ' 122 ', 'LEU', 0.11571270090963548, (153.17099999999994, 147.078, 184.92999999999995)), ('B', ' 127 ', 'LYS', 0.2669847081555806, (155.80299999999994, 144.14199999999997, 175.55499999999995)), ('B', ' 157 ', 'GLN', 0.018883264885198824, (160.27999999999994, 136.832, 171.294)), ('B', ' 186 ', 'VAL', 0.003150532575091347, (165.58099999999993, 140.749, 175.39499999999995)), ('D', '  32 ', 'GLU', 0.06303656232091212, (189.558, 241.06999999999994, 155.084)), ('D', '  33 ', 'VAL', 0.23912844462870225, (186.44900000000004, 240.18499999999995, 153.10399999999996)), ('D', '  42 ', 'LEU', 0.055692324758509, (187.85, 226.244, 151.80499999999995)), ('D', '  50 ', 'ASP', 0.1754315094976369, (184.752, 214.86899999999994, 154.25499999999994)), ('D', '  72 ', 'LYS', 0.18356844397373084, (186.75999999999996, 182.16399999999996, 157.88699999999994)), ('D', '  95 ', 'LEU', 0.07568440837893321, (203.64599999999996, 157.95399999999998, 165.072)), ('D', ' 130 ', 'VAL', 0.16496453685626167, (198.10099999999997, 137.29199999999994, 163.509)), ('D', ' 131 ', 'VAL', 0.07397023308334078, (198.08, 136.599, 159.78)), ('D', ' 155 ', 'GLU', 0.08093561290973812, (205.236, 131.152, 171.797)), ('D', ' 167 ', 'VAL', 0.21276775434189085, (199.68899999999996, 122.789, 159.55499999999995)), ('D', ' 176 ', 'ASN', 0.16570726885600848, (207.429, 123.239, 150.481)), ('D', ' 177 ', 'SER', 0.24400598683489075, (206.172, 126.79600000000002, 151.075))]
data['cbeta'] = []
data['probe'] = [(' A  83  GLU  HG3', ' A 219  PHE  HB2', -0.724, (163.285, 158.084, 239.744)), (' A 607  SER  HG ', ' A 754  SER  HG ', -0.698, (182.298, 188.131, 208.139)), (' A 553  ARG  HD2', " P  38    C  H4'", -0.649, (183.644, 163.27, 188.882)), (' A 569  ARG  O  ', ' A 573  GLN  HB2', -0.647, (162.112, 184.645, 186.159)), (' A 105  ARG  NH1', ' A 110  MET  SD ', -0.637, (173.633, 151.284, 258.706)), (' A 116  ARG  NH2', ' A1004  ADP  O3B', -0.636, (171.691, 155.827, 236.28)), (' A 116  ARG  HG2', ' A 217  TYR  HB2', -0.623, (167.935, 152.842, 235.84)), (' A 653  TYR  O  ', ' A 657  ASN  ND2', -0.619, (153.009, 173.222, 191.418)), (' A 449  ALA  HB2', ' A 544  LEU HD11', -0.614, (174.815, 158.798, 177.54)), (' A  50  LYS  NZ ', ' A  53  CYS  SG ', -0.61, (175.373, 156.526, 235.984)), (' B 130  VAL  HB ', ' B 186  VAL HG13', -0.606, (164.726, 141.053, 178.913)), (' A 378  PRO  HD2', ' A 537  PRO  HB2', -0.604, (153.836, 164.04, 184.436)), (' A 496  ASN  ND2', ' T  22    A  OP2', -0.586, (171.842, 184.249, 182.617)), (' A 589  ILE HG12', ' A 758  LEU HD13', -0.586, (177.084, 182.194, 192.991)), (" P  26    U  H2'", ' P  27    A  H8 ', -0.575, (169.775, 198.764, 175.25)), (" T  40    C  H2'", ' T  41    G  H8 ', -0.574, (169.998, 229.234, 156.968)), (' D  25  ALA  O  ', ' D  29  GLY  N  ', -0.572, (197.226, 236.752, 152.898)), (' A 409  THR  OG1', ' C  23  GLU  OE1', -0.566, (179.978, 157.024, 170.271)), (' A 615  MET  HB2', ' A 766  PHE  HE1', -0.565, (188.756, 177.341, 208.614)), (' A 468  GLN  HA ', ' A 731  LEU HD22', -0.563, (166.778, 173.614, 216.001)), (' A 568  ASN  OD1', ' A 654  ARG  NH2', -0.556, (158.444, 176.708, 188.656)), (" T  47    U  H2'", ' T  48    G  H8 ', -0.556, (178.804, 251.503, 160.209)), (" P  18    C  H2'", ' P  19    A  H8 ', -0.548, (173.591, 216.869, 157.805)), (' A 691  ASN  HB3', ' A 759  SER  O  ', -0.535, (175.094, 174.599, 195.387)), (' D 177  SER  HA ', ' D 180  LEU HD12', -0.535, (204.584, 126.066, 152.205)), (' A 545  LYS  HB3', ' A 555  ARG  HG3', -0.533, (179.977, 166.24, 180.364)), (" T  45    C  H2'", ' T  46    A  H8 ', -0.531, (174.885, 245.513, 167.885)), (' A  59  LYS  HB3', ' A  65  LEU HD23', -0.53, (180.356, 137.71, 233.423)), (" T  34    G  H2'", ' T  35    A  H8 ', -0.528, (177.47, 216.831, 172.997)), (' A 851  ASP  OD1', ' D  75  ARG  NH2', -0.528, (193.604, 176.411, 158.587)), (' D 134  ASP  OD1', ' D 135  TYR  N  ', -0.527, (205.957, 134.398, 151.666)), (' A 239  SER  OG ', ' A 465  ASP  OD1', -0.526, (164.891, 167.557, 216.368)), (' A 867  TYR  O  ', ' A 870  THR  OG1', -0.523, (200.194, 187.475, 184.185)), (' C  58  VAL HG22', ' D 119  ILE HG12', -0.522, (192.271, 146.137, 169.242)), (' A 502  ALA  HB1', ' A 562  ILE  HB ', -0.517, (161.242, 173.659, 176.013)), (" T  50    U  H2'", ' T  51    A  H8 ', -0.512, (168.262, 258.083, 151.132)), (' A  53  CYS  HB3', ' A  71  VAL HG13', -0.505, (175.269, 153.539, 237.566)), (' A 790  ASN  HB3', ' A 792  VAL HG22', -0.504, (175.793, 163.632, 202.266)), (" P  26    U  H2'", ' P  27    A  C8 ', -0.502, (170.27, 198.848, 174.788)), (" P  25    C  H2'", ' P  26    U  H6 ', -0.501, (173.173, 201.812, 176.872)), (' A 382  ALA  HB3', ' B 117  LEU HD11', -0.501, (152.855, 156.602, 182.212)), (' A 849  LYS  HG2', ' A 855  MET  HE3', -0.498, (186.527, 177.014, 167.161)), (' A 698  GLN  OE1', ' A 789  GLN  NE2', -0.497, (173.004, 169.105, 206.675)), (' A 462  THR  OG1', ' A 791  ASN  OD1', -0.496, (169.811, 160.58, 203.685)), (' A 149  TYR  HE2', ' A 212  LEU HD13', -0.491, (173.492, 149.165, 221.908)), (' A 587  VAL HG12', ' A 589  ILE HG13', -0.491, (174.989, 183.158, 195.403)), (' A 602  LEU HD11', ' A 809  PRO  HD3', -0.49, (190.621, 184.206, 199.817)), (' A 614  LEU  HA ', ' A 764  VAL  O  ', -0.49, (188.645, 180.713, 206.038)), (' A 647  SER  OG ', ' A 648  LEU  N  ', -0.49, (147.745, 181.571, 199.302)), (' A 249  ARG  HB3', ' A 252  THR HG23', -0.488, (164.755, 150.213, 207.288)), (' A  80  TYR  HE1', ' A 101  PHE  HB3', -0.488, (165.643, 152.986, 247.619)), (" T  29    U  H2'", ' T  30    A  H8 ', -0.487, (172.112, 199.257, 164.206)), (" T  35    A  H2'", ' T  36    A  H8 ', -0.48, (180.87, 219.118, 170.295)), (' A 335  VAL HG12', ' A 363  SER  HB2', -0.48, (139.468, 167.914, 175.8)), (' A 303  ASP  N  ', ' A 303  ASP  OD1', -0.478, (152.12, 176.903, 208.407)), (' D  22  TYR  HD1', ' D  38  LEU  HB3', -0.478, (190.821, 231.437, 151.547)), (' A  72  VAL HG13', ' A 115  SER  HB2', -0.477, (172.007, 149.757, 243.344)), (" P  18    C  H2'", ' P  19    A  C8 ', -0.477, (174.12, 217.277, 158.018)), (' A 211  ASP  N  ', ' A 211  ASP  OD1', -0.476, (167.358, 151.562, 228.336)), (" P  25    C  H2'", ' P  26    U  C6 ', -0.474, (173.175, 202.176, 176.511)), (' A 416  ASN  HA ', ' A 850  THR HG23', -0.471, (194.07, 171.309, 166.352)), (" T  47    U  H2'", ' T  48    G  C8 ', -0.471, (178.384, 251.354, 159.875)), (' A  86  ILE HG23', ' A 201  ILE HD13', -0.467, (156.734, 159.293, 238.238)), (' A 840  ALA  O  ', ' A 858  ARG  NH2', -0.467, (190.984, 174.927, 173.389)), (' A1005  1N7  H14', ' A1005  1N7  H29', -0.467, (157.257, 170.296, 229.919)), (" T  38    G  H2'", ' T  39    A  C8 ', -0.467, (178.975, 224.622, 157.776)), (' A 445  ASP  N  ', ' A 445  ASP  OD1', -0.466, (182.724, 153.997, 177.383)), (' A 708  LEU HD11', ' A 731  LEU HD12', -0.463, (170.215, 172.859, 219.513)), (' D  95  LEU  HA ', ' D  95  LEU HD12', -0.46, (203.295, 157.596, 166.72)), (' A 636  LEU HD21', ' A 655  LEU HD22', -0.458, (157.211, 174.405, 200.075)), (' A 720  VAL HG11', ' A 775  LEU HD13', -0.458, (181.281, 180.367, 222.539)), (' A  80  TYR  CE1', ' A 101  PHE  HB3', -0.457, (165.265, 153.231, 247.691)), (" T  34    G  H2'", ' T  35    A  C8 ', -0.457, (177.724, 216.348, 172.897)), (" T  38    G  H2'", ' T  39    A  H8 ', -0.455, (179.103, 224.997, 157.918)), (' A 904  SER  HB3', ' D 201  1N7  H53', -0.455, (197.285, 192.588, 145.027)), (' A 202  VAL HG13', ' A 231  VAL HG13', -0.453, (153.6, 167.318, 231.959)), (' A 684  ASP  N  ', ' A 684  ASP  OD1', -0.453, (167.755, 172.923, 187.168)), (" T  52    C  H2'", ' T  53    G  C8 ', -0.453, (162.516, 263.368, 156.369)), (' A 694  PHE  HE1', ' A 698  GLN HE21', -0.453, (173.753, 168.999, 202.597)), (' B 160  VAL HG12', ' B 166  ILE HD13', -0.452, (167.959, 141.596, 167.367)), (' A 699  ALA  HA ', ' A 782  PHE  CE1', -0.452, (178.343, 174.328, 207.604)), (' A 837  ILE  O  ', ' A 884  TYR  OH ', -0.451, (195.515, 176.941, 176.708)), (" T  29    U  H2'", ' T  30    A  C8 ', -0.451, (171.732, 199.191, 164.931)), (" T  31    G  H2'", ' T  32    G  H8 ', -0.45, (169.106, 206.684, 169.901)), (' A 915  TYR  O  ', ' A 921  TYR  OH ', -0.449, (196.603, 188.809, 173.756)), (" T  50    U  H2'", ' T  51    A  C8 ', -0.449, (168.669, 257.651, 151.101)), (' A 388  LEU HD23', ' A 397  SER  HB2', -0.448, (163.004, 151.018, 183.1)), (' A 699  ALA  HA ', ' A 782  PHE  HE1', -0.446, (178.727, 174.249, 207.267)), (" T  32    G  H2'", ' T  33    A  H8 ', -0.444, (170.309, 210.126, 172.665)), (' A 480  PHE  HE1', ' A 696  ILE HD12', -0.443, (172.242, 181.326, 201.592)), (' B   6  PHE  HA ', ' B   9  LEU HD23', -0.442, (160.597, 212.396, 147.405)), (' A 824  ASP  N  ', ' A 824  ASP  OD1', -0.441, (200.083, 201.35, 193.731)), (' A 555  ARG  NE ', ' P  37    C  O2 ', -0.439, (183.207, 167.189, 183.498)), (' A 695  ASN HD21', ' A 762  ALA  HB2', -0.439, (180.08, 176.802, 200.769)), (' C  56  LEU HD23', ' D 106  ILE HD11', -0.439, (201.259, 150.263, 166.536)), (' A 182  VAL  O  ', ' A 185  ALA  HB3', -0.438, (163.9, 151.922, 219.474)), (' D 176  ASN  ND2', ' D 176  ASN  O  ', -0.437, (205.158, 122.825, 150.862)), (' A 440  PHE  CZ ', ' C   7  LYS  HD3', -0.437, (198.144, 163.628, 178.914)), (' A 615  MET  HB2', ' A 766  PHE  CE1', -0.435, (188.218, 177.348, 208.742)), (" P   5    U  H2'", ' P   6    A  H8 ', -0.43, (163.18, 253.908, 159.504)), (' A 746  TYR  CZ ', ' A 750  ARG  HD2', -0.429, (174.452, 188.552, 208.198)), (' A 225  THR  OG1', ' A 226  THR  N  ', -0.429, (148.0, 165.977, 238.687)), (" P  24    C  H2'", ' P  25    C  H6 ', -0.428, (177.377, 205.192, 176.88)), (' A 434  SER  OG ', ' A 876  GLU  OE1', -0.427, (207.288, 174.543, 186.82)), (" T  22    A  H2'", ' T  23    G  H8 ', -0.427, (178.254, 185.84, 184.418)), (' A 390  ASP  OD2', ' A 674  TYR  OH ', -0.427, (167.619, 151.557, 181.428)), (' A1005  1N7  H15', ' A1005  1N7  H6 ', -0.427, (158.889, 169.518, 234.648)), (' A 698  GLN  NE2', ' A 790  ASN  OD1', -0.426, (173.621, 167.897, 203.534)), (" T  33    A  H2'", ' T  34    G  H8 ', -0.426, (173.616, 213.507, 174.019)), (' A 109  ASP  N  ', ' A 109  ASP  OD1', -0.425, (177.801, 156.212, 256.969)), (" T  40    C  H2'", ' T  41    G  C8 ', -0.423, (169.988, 228.924, 157.126)), (' D 160  VAL HG23', ' D 185  ILE  HB ', -0.42, (195.322, 130.735, 160.874)), (' A 173  ARG  O  ', ' A 177  ASN  ND2', -0.42, (172.56, 144.702, 208.685)), (' A 633  MET  HB3', ' A 633  MET  HE3', -0.419, (166.513, 173.117, 202.66)), (' D 201  1N7  H10', ' D 201  1N7  H33', -0.418, (191.607, 194.953, 146.673)), (" T  45    C  H2'", ' T  46    A  C8 ', -0.418, (175.129, 245.71, 167.522)), (" P  10    U  H2'", ' P  11    G  H8 ', -0.417, (179.361, 241.701, 158.99)), (' D 167  VAL HG21', ' D 180  LEU HD21', -0.416, (201.779, 124.126, 156.307)), (' A 210  GLN HE21', ' A 214  GLY  HA2', -0.415, (164.046, 151.638, 224.728)), (' D  70  MET  HE1', ' D 201  1N7  H22', -0.415, (183.001, 187.226, 148.157)), (' A 715  ILE  O  ', ' A 721  ARG  NH2', -0.413, (181.633, 179.012, 231.128)), (" T  24    C  H2'", ' T  25    U  H6 ', -0.412, (184.434, 189.523, 178.21)), (' A  42  VAL HG23', ' A 712  GLY  HA3', -0.412, (177.377, 173.27, 229.71)), (" P  24    C  H2'", ' P  25    C  C6 ', -0.411, (177.092, 204.997, 176.588)), (" T  35    A  H2'", ' T  36    A  C8 ', -0.411, (181.046, 218.866, 170.205)), (' A 598  TRP  HE1', ' A 817  THR  HG1', -0.411, (191.177, 184.475, 195.274)), (" T  22    A  H2'", ' T  23    G  C8 ', -0.41, (178.32, 185.593, 184.408)), (' B 162  ALA  HB2', ' B 183  PRO  HD2', -0.409, (175.541, 146.371, 174.86)), (' A 864  ILE HG23', ' A 924  MET  HG2', -0.407, (190.768, 189.625, 181.575)), (' A  75  HIS  CG ', ' A  76  THR  H  ', -0.407, (171.205, 162.391, 245.444)), (' D 201  1N7  H14', ' D 201  1N7  H29', -0.406, (188.982, 195.719, 148.903)), (' B 137  THR  O  ', ' B 141  THR HG22', -0.406, (168.915, 137.812, 184.649)), (' C  20  LEU HD11', ' C  66  VAL HG13', -0.406, (191.42, 153.807, 159.553)), (' A 128  VAL HG22', ' A 244  ILE HG13', -0.406, (169.786, 158.382, 217.468)), (' A 123  THR  HA ', ' A 211  ASP  HA ', -0.405, (170.848, 152.927, 226.809)), (' A 295  HIS  HE1', ' A 306  CYS  SG ', -0.405, (150.57, 171.485, 209.805)), (' A 816  HIS  O  ', ' A 830  PRO  HA ', -0.405, (193.649, 182.859, 192.101)), (' A 723  LEU HD21', ' A 745  PHE  HD1', -0.405, (173.684, 181.728, 218.597)), (" P  23    U  H2'", ' P  24    C  C6 ', -0.404, (180.598, 207.688, 174.471)), (' D 155  GLU  HG2', ' D 191  ALA  HB2', -0.404, (205.588, 132.796, 175.036)), (' A 450  ILE  HA ', ' A 450  ILE HD12', -0.403, (172.082, 155.352, 183.205)), (' A 603  LYS  HA ', ' A 603  LYS  HD3', -0.403, (189.331, 191.456, 202.736)), (' A 855  MET  HB3', ' A 858  ARG  HB3', -0.403, (190.034, 180.5, 168.853)), (' A 715  ILE HG12', ' A 775  LEU HD21', -0.401, (182.211, 177.299, 224.585)), (' A 223  ILE HD11', ' A1005  1N7  H8 ', -0.401, (156.523, 170.145, 235.94)), (' A 494  ILE  O  ', ' A 573  GLN  NE2', -0.401, (165.834, 185.535, 182.643)), (' A 371  LEU HD21', ' B  88  GLN  HG3', -0.4, (148.223, 169.732, 169.136)), (' A 371  LEU HD23', ' B  87  MET  HE3', -0.4, (150.607, 171.203, 170.105)), (" T  31    G  H2'", ' T  32    G  C8 ', -0.4, (169.182, 206.45, 170.141))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
