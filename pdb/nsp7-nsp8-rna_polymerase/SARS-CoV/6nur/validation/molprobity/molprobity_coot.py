# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (140.8369999999999, 165.133, 165.98200000000006)), ('B', ' 183 ', 'PRO', None, (162.44799999999992, 153.121, 175.681)), ('D', ' 183 ', 'PRO', None, (165.02599999999995, 138.32099999999994, 207.826))]
data['rota'] = [('A', ' 583 ', 'ARG', 0.029601149769495263, (125.30000000000004, 138.43, 142.7)), ('A', ' 631 ', 'ARG', 0.0, (145.66399999999993, 153.137, 144.937)), ('A', ' 651 ', 'ARG', 0.28239822423485555, (136.57199999999995, 164.612, 139.81800000000007)), ('A', ' 733 ', 'ARG', 0.0, (150.96399999999994, 151.433, 119.823)), ('A', ' 785 ', 'VAL', 0.2586533773944719, (154.029, 140.622, 138.812))]
data['cbeta'] = []
data['probe'] = [(' A 583  ARG  HG3', ' A 583  ARG HH11', -0.894, (124.906, 139.306, 145.095)), (' A 487  CYS  SG ', ' A 642  HIS  CE1', -0.863, (128.909, 161.139, 142.377)), (' A 412  PRO  HG3', ' C  14  LEU HD23', -0.801, (148.095, 138.694, 178.568)), (' A 631  ARG  HG3', ' A 663  LEU HD21', -0.732, (145.664, 154.338, 147.756)), (' A 306  CYS  HG ', ' A1001   ZN ZN  ', -0.719, (147.469, 164.842, 131.837)), (' A 619  TYR  HE1', ' A 786  LEU HD21', -0.718, (149.097, 140.25, 143.817)), (' A 583  ARG  HG3', ' A 583  ARG  NH1', -0.674, (124.577, 139.303, 146.168)), (' A 306  CYS  SG ', ' A1001   ZN ZN  ', -0.666, (147.459, 165.177, 131.349)), (' A 487  CYS  SG ', ' A 642  HIS  ND1', -0.664, (129.796, 161.36, 141.63)), (' A 372  LEU  HA ', ' B  87  MET  HE1', -0.652, (134.865, 171.205, 162.887)), (' A 631  ARG  HG3', ' A 663  LEU  CD2', -0.631, (146.271, 154.754, 148.143)), (' A 733  ARG  O  ', ' A 734  ASN  C  ', -0.62, (148.21, 151.919, 120.982)), (' A 718  LYS  HG2', ' A 721  ARG HH12', -0.602, (147.55, 130.954, 113.509)), (' C   5  ASP  OD2', ' D  97  LYS  NZ ', -0.569, (143.935, 119.625, 182.596)), (' A 712  GLY  O  ', ' A 721  ARG  HG3', -0.557, (151.975, 132.211, 117.531)), (' A 402  THR  O  ', ' B 129  MET  SD ', -0.53, (155.989, 166.461, 172.81)), (' A 412  PRO  HG3', ' C  14  LEU  CD2', -0.513, (148.919, 138.99, 179.225)), (' B 112  ASP  N  ', ' B 112  ASP  OD1', -0.501, (154.922, 182.798, 148.458)), (' A 571  PHE  CZ ', ' A 642  HIS  CD2', -0.497, (133.221, 160.44, 142.091)), (' A 306  CYS  O  ', ' A 310  CYS  SG ', -0.494, (148.844, 163.219, 132.902)), (' D 157  GLN  O  ', ' D 158  GLN  HG3', -0.492, (178.729, 134.853, 197.009)), (' A 456  TYR  CE1', ' A 624  ARG  HD3', -0.483, (151.082, 150.842, 156.514)), (' A 785  VAL HG13', ' A 789  GLN  HG3', -0.48, (151.808, 143.581, 138.95)), (' A 618  ASP  O  ', ' A 794  MET  SD ', -0.465, (150.701, 136.32, 146.315)), (' A 583  ARG  CG ', ' A 583  ARG  NH1', -0.457, (124.458, 138.548, 145.98)), (' C  14  LEU HD22', ' C  36  HIS  CG ', -0.457, (150.828, 137.021, 178.472)), (' A 619  TYR  CE1', ' A 786  LEU HD21', -0.447, (149.354, 140.744, 144.278)), (' B 177  SER  N  ', ' B 178  PRO  CD ', -0.446, (172.787, 149.479, 180.981)), (' A 647  ASN  O  ', ' A 651  ARG  HG3', -0.44, (134.412, 165.553, 137.151)), (' A 117  GLN  HG2', ' A 118  ARG  HG3', -0.436, (184.468, 146.45, 119.798)), (' C  14  LEU HD22', ' C  36  HIS  CD2', -0.435, (150.605, 137.59, 178.507)), (' A 164  ASP  OD1', ' A 165  PHE  N  ', -0.432, (161.524, 140.7, 149.877)), (' A 642  HIS  HB3', ' A 646  CYS  HB2', -0.422, (130.837, 162.872, 138.908)), (' A 456  TYR  CD1', ' A 624  ARG  HD3', -0.421, (151.604, 150.818, 156.513)), (' A 402  THR  OG1', ' A 403  ASN  N  ', -0.413, (152.969, 165.994, 175.548)), (' A 372  LEU  CA ', ' B  87  MET  HE1', -0.41, (134.961, 171.074, 162.459)), (' A 208  ASP  N  ', ' A 208  ASP  OD1', -0.406, (166.301, 145.305, 122.229)), (' A 712  GLY  O  ', ' A 721  ARG  CG ', -0.406, (151.924, 132.574, 117.67))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
