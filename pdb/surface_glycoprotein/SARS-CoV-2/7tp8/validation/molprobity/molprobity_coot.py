# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  68 ', 'ILE', 0.038890052452492295, (145.55399999999992, 225.208, 133.877)), ('A', ' 134 ', 'GLN', 0.04339680766556595, (146.32399999999996, 211.891, 113.00299999999999)), ('A', ' 582 ', 'LEU', 0.042394633636385126, (196.871, 187.78099999999995, 138.398)), ('A', ' 603 ', 'ASN', 0.022176531717899604, (149.70199999999994, 197.794, 170.822)), ('A', ' 621 ', 'PRO', 0.0, (177.174, 200.892, 156.736)), ('A', ' 624 ', 'ILE', 0.022625867210102967, (170.482, 202.133, 150.114)), ('A', ' 625 ', 'HIS', 0.030897068981100555, (172.02, 199.723, 147.525)), ('A', '1085 ', 'GLY', 0.027932788027058533, (183.723, 171.65599999999995, 234.382)), ('B', ' 113 ', 'LYS', 0.049408705963911226, (206.838, 151.938, 113.145)), ('B', ' 197 ', 'ILE', 0.00256301, (194.517, 159.79399999999995, 132.595)), ('B', ' 216 ', 'LEU', 0.07048990674547334, (215.809, 156.804, 149.653)), ('B', ' 441 ', 'LEU', 0.01770801938977961, (165.67499999999995, 116.91, 93.606)), ('B', ' 524 ', 'VAL', 0.04844010469557696, (158.444, 130.537, 120.503)), ('B', ' 571 ', 'ASP', 0.02703348767409331, (158.27599999999995, 138.52199999999993, 152.462)), ('B', ' 623 ', 'ALA', 0.0430503630331543, (186.104, 139.93399999999997, 150.737)), ('B', ' 624 ', 'ILE', 0.09027199084691982, (187.90699999999995, 143.02699999999993, 152.188)), ('B', ' 630 ', 'THR', 0.0866835696168624, (201.43199999999996, 142.748, 153.029)), ('C', ' 112 ', 'SER', 0.0333856984676627, (132.52399999999994, 129.29699999999994, 113.76999999999998)), ('C', ' 136 ', 'CYS', 0.014923009107707089, (124.08900000000004, 123.553, 117.74)), ('C', ' 213 ', 'VAL', 0.04908707340558218, (123.44200000000004, 116.129, 147.942)), ('C', ' 446 ', 'GLY', 0.0496786621292473, (156.72999999999993, 179.275, 90.291)), ('C', ' 571 ', 'ASP', 0.04993635721602925, (142.627, 176.51299999999995, 148.151)), ('C', ' 582 ', 'LEU', 0.042585985109600266, (123.41000000000004, 184.351, 139.917)), ('C', ' 624 ', 'ILE', 0.00512602, (128.804, 154.81099999999995, 153.042)), ('C', ' 626 ', 'ALA', 0.020778565793032354, (123.76000000000006, 149.94199999999995, 154.279)), ('C', ' 632 ', 'THR', 0.022877340278538764, (133.304, 147.291, 152.033)), ('C', ' 634 ', 'ARG', 0.010932662902255202, (127.78300000000004, 146.573, 154.207))]
data['omega'] = [('A', ' 362 ', 'VAL', None, (188.959, 182.946, 120.405)), ('A', ' 621 ', 'PRO', None, (176.787, 199.55199999999994, 156.292))]
data['rota'] = [('A', ' 321 ', 'GLN', 0.26060871374523464, (169.99799999999993, 194.87699999999995, 145.259)), ('A', ' 414 ', 'GLN', 0.28246896794458193, (172.234, 154.68599999999995, 123.216)), ('A', ' 461 ', 'LEU', 0.23857106167475933, (184.075, 149.83799999999997, 122.188)), ('A', ' 628 ', 'GLN', 0.2923163295359941, (168.60699999999997, 195.8, 152.741)), ('A', ' 634 ', 'ARG', 0.0020039679096830916, (168.457, 203.81499999999994, 156.531)), ('A', ' 760 ', 'CYS', 0.05492158234119415, (150.05, 155.77499999999995, 155.862)), ('A', '1082 ', 'CYS', 0.20702553546733746, (180.72199999999995, 174.59699999999995, 230.422)), ('B', ' 116 ', 'SER', 0.1317210793874885, (207.173, 157.614, 120.684)), ('B', ' 122 ', 'ASN', 0.08937566454587598, (219.453, 170.469, 127.941)), ('B', ' 198 ', 'ASP', 0.005457051936704982, (192.952, 163.325, 132.118)), ('B', ' 212 ', 'LEU', 0.04788729782608506, (221.975, 159.61299999999994, 151.599)), ('B', ' 581 ', 'THR', 0.15408369951397927, (165.686, 117.52, 141.297)), ('B', ' 586 ', 'ASP', 0.08148210875398412, (167.222, 126.35099999999997, 151.969)), ('B', ' 634 ', 'ARG', 0.020390159869112606, (197.689, 140.785, 156.729)), ('B', ' 738 ', 'CYS', 0.026833137717539368, (167.035, 178.405, 154.923)), ('B', ' 739 ', 'THR', 0.013658325831867603, (166.444, 180.84899999999993, 152.027)), ('C', ' 140 ', 'PHE', 0.1471266527084499, (126.58300000000004, 117.362, 124.237)), ('C', ' 308 ', 'VAL', 0.06406082538887858, (140.78399999999993, 139.813, 168.92399999999998)), ('C', ' 603 ', 'ASN', 0.0682602676700355, (136.809, 133.956, 173.272)), ('C', ' 615 ', 'VAL', 0.039885547353033186, (128.755, 161.899, 163.557)), ('C', ' 628 ', 'GLN', 0.06207532157676211, (123.67800000000005, 154.264, 150.624)), ('C', ' 634 ', 'ARG', 0.0, (127.78300000000004, 146.573, 154.207)), ('C', ' 636 ', 'TYR', 0.21919539153723955, (124.25200000000005, 147.59299999999993, 159.256))]
data['cbeta'] = [('A', ' 634 ', 'ARG', ' ', 0.2635168599574506, (169.339, 204.226, 155.339)), ('B', ' 197 ', 'ILE', ' ', 0.28270191898051567, (193.934, 159.44899999999996, 133.984)), ('B', ' 200 ', 'TYR', ' ', 0.26185288137472984, (196.335, 162.20799999999994, 127.254)), ('C', ' 487 ', 'ASN', ' ', 0.25240448998983966, (176.80299999999994, 197.48399999999995, 107.448)), ('C', ' 633 ', 'TRP', ' ', 0.4450576944638787, (131.909, 148.855, 156.331)), ('C', ' 634 ', 'ARG', ' ', 0.3392631452678468, (128.15899999999996, 145.067, 154.157))]
data['probe'] = [(' B  95  THR HG21', ' B 186  PHE  CD2', -0.448, (221.934, 159.253, 144.437)), (' B 630  THR  HB ', ' B 631  PRO  HD2', -0.416, (203.318, 143.606, 152.923))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
