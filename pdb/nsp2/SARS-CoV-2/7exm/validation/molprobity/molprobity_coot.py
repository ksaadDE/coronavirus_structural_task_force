# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  26 ', 'LEU', 0.0, (21.631000000000007, 120.67400000000002, 16.884)), ('A', '  63 ', 'THR', 0.031002736068330705, (17.812, 101.248, 18.563)), ('A', ' 122 ', 'ARG', 0.21510122855333608, (30.646999999999995, 98.097, 46.312)), ('A', ' 158 ', 'VAL', 0.05029743597812412, (44.414, 92.747, 25.438999999999986)), ('A', ' 196 ', 'ASN', 0.18799823454730888, (55.64899999999998, 99.881, 37.69599999999997)), ('A', ' 215 ', 'LYS', 0.07833909541669232, (42.777, 103.26000000000002, 23.863)), ('A', ' 217 ', 'ILE', 0.00024137982548769535, (38.50799999999998, 108.797, 25.237)), ('A', ' 219 ', 'ARG', 0.14219126532201218, (33.653, 111.527, 27.388)), ('A', ' 224 ', 'THR', 0.009435615356778726, (34.858999999999995, 103.091, 28.082)), ('A', ' 247 ', 'ARG', 0.24596042794611828, (28.472, 98.718, 32.782)), ('B', '  28 ', 'ARG', 0.24206244034962726, (-17.94, 48.379, -6.744)), ('B', '  91 ', 'CYS', 0.11391278219906147, (-17.79899999999999, 79.303, -12.016999999999992)), ('B', ' 183 ', 'GLN', 0.24891074800494337, (12.525999999999998, 81.215, -6.877)), ('B', ' 199 ', 'VAL', 0.036295330843432706, (5.073, 70.839, 22.923)), ('B', ' 219 ', 'ARG', 0.08009276214363965, (-4.6780000000000035, 61.619, 2.927)), ('B', ' 277 ', 'LYS', 0.0, (-2.9689999999999994, 86.622, -24.502)), ('C', '  91 ', 'CYS', 0.24791918176000186, (10.690000000000005, 56.30699999999997, -22.868999999999986)), ('C', ' 135 ', 'GLN', 0.10855012977744767, (36.992, 49.603, -36.53999999999997)), ('C', ' 199 ', 'VAL', 0.09158053831242176, (34.48400000000001, 61.443, -59.074)), ('C', ' 215 ', 'LYS', 0.08508876106624336, (20.381999999999994, 58.524, -44.563)), ('C', ' 247 ', 'ARG', 0.16112599550031284, (32.08799999999997, 62.855, -32.746)), ('D', '  28 ', 'ARG', 0.013643795781231153, (8.317999999999996, 87.884, -20.002999999999986)), ('D', '  53 ', 'ARG', 0.11389392293088188, (11.880999999999993, 97.726, -29.745999999999984)), ('D', '  71 ', 'GLU', 0.12754487651178212, (5.431, 96.544, -10.809)), ('D', ' 113 ', 'LYS', 0.01021221861334223, (-9.954999999999997, 101.79999999999998, 17.680999999999987)), ('D', ' 115 ', 'ASP', 0.11611413181865383, (-15.149999999999999, 104.9, 14.943999999999994)), ('D', ' 135 ', 'GLN', 0.2678238934964468, (-4.590999999999999, 123.248, 6.455999999999997)), ('D', ' 183 ', 'GLN', 0.0916277849062244, (2.5109999999999992, 119.432, 11.531999999999993)), ('D', ' 275 ', 'LEU', 0.00458497953857657, (17.706, 126.22, 2.032))]
data['cbeta'] = [('A', ' 157 ', 'PHE', ' ', 0.25474114671738424, (40.44499999999997, 94.147, 26.493))]
data['probe'] = [(' B  10  ASN HD22', ' B  40  LEU HD11', -0.696, (-10.532, 62.264, -16.749)), (' A   0  SER  CB ', ' A  17  TYR  HB2', -0.678, (29.714, 107.83, 20.105)), (' B 106  GLN  HG3', ' C  86  THR  CG2', -0.576, (8.534, 65.823, -10.897)), (' A 108  ARG  NE ', ' A 122  ARG  O  ', -0.554, (27.365, 98.359, 45.998)), (' A 158  VAL HG23', ' A 159  LYS  HG3', -0.549, (47.457, 91.31, 25.892)), (' C 142  MET  CE ', ' C 160  ALA  HB3', -0.531, (22.519, 43.345, -39.49)), (' C  17  TYR  CE2', ' C 217  ILE HD11', -0.517, (20.912, 65.548, -36.078)), (' A 272  LEU  O  ', ' A 276  GLN  HG2', -0.517, (18.355, 79.031, 18.971)), (' B 162  CYS  SG ', ' B 164  PHE  HB2', -0.503, (-6.498, 99.638, 4.78)), (' B 180  TYR  HB2', ' D  33  SER  HB3', -0.497, (6.712, 87.595, -8.919)), (' A 118  MET  HA ', ' A 118  MET  HE2', -0.49, (35.767, 96.128, 47.857)), (' A   0  SER  CB ', ' A  17  TYR  CB ', -0.474, (29.743, 108.155, 20.277)), (' B  10  ASN HD22', ' B  40  LEU  CD1', -0.471, (-10.587, 61.776, -16.758)), (' A  42  PHE  O  ', ' A  45  THR  HB ', -0.459, (14.544, 119.232, 11.106)), (' D  18  PRO  HD3', ' D  73  GLN  O  ', -0.451, (4.962, 101.779, -9.869)), (' C  74  THR  HB ', ' C  75  PRO  HD2', -0.432, (23.568, 68.312, -32.619)), (' A 104  THR  HA ', ' A 247  ARG  O  ', -0.431, (25.193, 98.871, 32.067)), (' B 254  CYS  HA ', ' C  45  THR  HB ', -0.431, (6.037, 84.56, -18.062)), (' A  18  PRO  HD3', ' A  73  GLN  O  ', -0.428, (26.268, 109.789, 23.493)), (' A 136  MET  HE2', ' A 178  CYS  HB3', -0.419, (31.483, 89.092, 28.905)), (' B 193  ALA  HB2', ' B 211  GLU  HB2', -0.417, (2.251, 72.836, 17.17)), (' A  35 ATHR HG23', ' A  38  GLU  H  ', -0.416, (12.684, 115.549, 21.583)), (' D 199  VAL HG12', ' D 203  HIS  HB3', -0.415, (-22.444, 109.906, -0.594)), (' A  84  PHE  CE2', ' A  86  THR HG22', -0.407, (15.203, 102.308, 7.773)), (' A 137  CYS  SG ', ' A 154 ATHR HG23', -0.4, (36.425, 82.768, 27.328))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
