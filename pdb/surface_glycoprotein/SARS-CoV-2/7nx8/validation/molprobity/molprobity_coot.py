# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', ' 155 ', 'PRO', 0.15432802743071464, (23.873, 4.423000000000004, -18.277))]
data['omega'] = [('A', ' 108 ', 'PRO', None, (3.493, -38.354, -57.31099999999999)), ('A', ' 153 ', 'PRO', None, (-17.271000000000008, -17.855, -54.323)), ('A', ' 155 ', 'PRO', None, (-13.447, -21.150000000000013, -57.943)), ('B', '   8 ', 'PRO', None, (16.692, -15.924000000000014, -65.144)), ('B', ' 141 ', 'PRO', None, (1.482, -9.202, -80.664)), ('H', ' 155 ', 'PRO', None, (24.98, 5.378, -18.235)), ('H', ' 157 ', 'PRO', None, (22.651, 3.334, -13.077)), ('L', '   8 ', 'PRO', None, (0.21, -19.121000000000013, -13.209)), ('L', ' 142 ', 'PRO', None, (-5.9910000000000005, -2.287999999999999, -9.312))]
data['rota'] = [('H', '  11 ', 'VAL', 0.2583787933308678, (29.912, -0.03300000000000001, -19.404)), ('H', ' 178 ', 'LEU', 0.29101740267844517, (15.341999999999997, 3.5300000000000025, -22.667)), ('H', ' 217 ', 'LYS', 0.20418429357658235, (17.475, 21.386, -8.058)), ('L', '  45 ', 'LYS', 0.05921993215268791, (17.601, -18.152000000000015, -3.879)), ('L', ' 161 ', 'GLN', 0.05961887709576537, (6.75, 5.794, -22.68)), ('L', ' 182 ', 'LEU', 0.22610054810235977, (8.191, 15.132000000000007, -29.122000000000003)), ('A', '  48 ', 'VAL', 0.1593147167500415, (3.226, -26.456000000000014, -45.805)), ('B', ' 106 ', 'ILE', 0.16912045800969833, (7.409000000000004, -17.912, -76.498))]
data['cbeta'] = []
data['probe'] = [(' A1203  PEG  H22', ' B 180  THR HG21', -0.772, (-21.957, -4.363, -65.153)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.645, (11.368, -19.146, -4.095)), (' A  82  MET  HB3', ' A  85  LEU HD21', -0.632, (-6.654, -23.133, -43.235)), (' H 208  HIS  HD1', ' H 211  SER  HG ', -0.624, (26.053, 10.562, -15.372)), (' B  18  ARG  NH2', ' B 310  SO4  O3 ', -0.609, (20.747, -27.776, -78.851)), (' H   6  GLU  H  ', ' H 113  GLN HE22', -0.607, (29.557, -9.23, -6.143)), (' E 340  GLU  OE1', ' E 356  LYS  NZ ', -0.604, (37.862, -50.92, -28.866)), (' A 123  LYS  NZ ', ' A1303  HOH  O  ', -0.592, (-25.439, -14.512, -59.634)), (' B  26  SER  N  ', ' B 303   CL CL  ', -0.587, (23.866, -19.304, -52.039)), (' B  18  ARG  NH2', ' B 310  SO4  O4 ', -0.582, (20.819, -26.949, -79.379)), (' E 370  ASN  ND2', ' H  56  SER  O  ', -0.577, (38.464, -29.716, -19.607)), (' H   7  SER  OG ', ' H  21  SER  OG ', -0.565, (35.571, -8.683, -9.403)), (' H 100  GLY  HA3', ' H 107  TYR  CZ ', -0.554, (22.578, -28.721, -5.816)), (' B 142  ARG  NH2', ' B 309  SO4  O2 ', -0.548, (2.622, -12.242, -70.842)), (' B   4  MET  HG3', ' B  91  HIS  CE1', -0.544, (17.832, -23.598, -52.497)), (' H  83  MET  HB3', ' H  86  LEU HD21', -0.543, (30.837, -9.948, -22.675)), (' H  97  ALA  HB1', ' H 108  PHE  HB3', -0.533, (23.774, -20.927, -9.098)), (' A  59  TYR  O  ', ' A  64  LYS  NZ ', -0.533, (7.5, -25.765, -39.611)), (' H 208  HIS  ND1', ' H 211  SER  OG ', -0.532, (26.629, 10.61, -15.426)), (' A 149  LYS  NZ ', ' A 177  GLN  OE1', -0.515, (-21.161, -8.702, -64.383)), (' H  67  ARG  NH1', ' H  90  ASP  OD2', -0.51, (27.925, -10.755, -26.888)), (' L   7  SER  HB3', ' L  24  ARG HH22', -0.508, (0.522, -21.672, -17.465)), (' H  12  VAL HG11', ' H  86  LEU HD13', -0.506, (30.931, -5.619, -22.777)), (' B  19  ALA  HB3', ' B  76  ILE  HB ', -0.498, (14.598, -24.221, -72.847)), (' L  39  LYS  HB2', ' L  42  LYS  HB2', -0.496, (15.465, -9.879, -3.949)), (' A  48  VAL HG13', ' A  63  VAL HG21', -0.492, (1.105, -25.408, -43.218)), (' H  34  MET  HB3', ' H  79  LEU HD22', -0.489, (31.718, -20.183, -10.846)), (' L 147  VAL HG21', ' L 176  LEU HD22', -0.489, (-0.37, 5.808, -17.521)), (' A  11  LEU  HB2', ' A 153  PRO  HG3', -0.485, (-15.864, -19.301, -51.565)), (' B  18  ARG  NH2', ' B 310  SO4  S  ', -0.484, (20.881, -27.595, -79.198)), (' L 154  ALA  O  ', ' L 156  GLN  NE2', -0.483, (-2.9, 12.836, -31.055)), (' B  78  ARG  NH1', ' B 312  SO4  O3 ', -0.475, (14.457, -33.006, -78.589)), (' H  29  PHE  O  ', ' H  72  ARG  NH2', -0.473, (35.569, -24.663, -7.135)), (' H 152  ASP  OD1', ' H 179  GLN  NE2', -0.466, (16.984, 11.348, -23.679)), (' L  39  LYS  HD3', ' L  84  ALA  HB2', -0.466, (10.734, -11.943, -3.355)), (' L 116  VAL  HB ', ' L 208  LYS  HG3', -0.466, (-5.93, 13.607, -13.861)), (' A 105  TRP  CE2', ' B  50  TYR  HB2', -0.455, (14.973, -36.121, -57.154)), (' A  82  MET  HE1', ' A 115  VAL HG21', -0.454, (-7.791, -24.796, -47.421)), (' L 187  TYR  O  ', ' L 193  TYR  OH ', -0.454, (2.295, 21.322, -29.214)), (' B  62  ARG  HB2', ' B  77  SER  O  ', -0.451, (14.153, -29.025, -76.379)), (' H 154  PHE  HA ', ' H 155  PRO  HA ', -0.448, (22.796, 5.124, -19.392)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.447, (27.451, -32.914, -32.259)), (' H  52  SER  O  ', ' H  72  ARG  NH1', -0.445, (34.902, -25.844, -10.962)), (' A  61  ASP  OD1', ' A  64  LYS  NZ ', -0.437, (8.272, -24.286, -38.497)), (' H 208  HIS  CD2', ' H 210  PRO  HD2', -0.436, (25.826, 7.144, -13.071)), (' B  90  GLN  HG2', ' B  97  ARG  O  ', -0.428, (12.345, -26.673, -53.34)), (' E 379  CYS  HA ', ' E 432  CYS  HA ', -0.426, (24.45, -35.941, -22.579)), (' L 150  LYS  HG2', ' L 155  LEU HD23', -0.425, (-6.775, 10.06, -28.378)), (' B  81  PRO  HA ', ' B 106  ILE HD13', -0.424, (5.752, -22.054, -76.572)), (' E 386  LYS  HG2', ' H 104  TRP  HA ', -0.422, (25.199, -36.311, -10.786)), (' H  24  ALA  HB1', ' H  27  PHE  CE1', -0.422, (32.571, -20.181, -2.65)), (' A1206  PEG  H11', ' A1206  PEG  H31', -0.421, (-1.478, -20.732, -60.717)), (' L  35  TRP  CE2', ' L  73  LEU  HB2', -0.419, (7.501, -24.871, -7.998)), (' H 120  SER  HB3', ' H 154  PHE  CZ ', -0.417, (25.29, 1.922, -23.259)), (' B 145  LYS  HB3', ' B 197  THR  HB ', -0.415, (-6.189, 0.126, -79.858)), (' L 162  GLU  HG2', ' L 176  LEU HD21', -0.415, (2.069, 4.789, -18.698)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.414, (31.378, -39.707, -38.606)), (' L 109  ARG  NH1', ' L 112  ALA  HB2', -0.412, (-6.361, 1.186, -3.39)), (' H  83  MET  HE1', ' H 117  VAL HG21', -0.411, (29.63, -8.158, -18.06)), (' H  98  LYS  NZ ', ' H 109  ASP  OD2', -0.41, (25.999, -25.313, -3.096)), (' H   6  GLU  H  ', ' H 113  GLN  NE2', -0.41, (29.337, -9.371, -6.149)), (' A 101  SER  OG ', ' A 104  ASN  HB3', -0.408, (12.848, -37.403, -49.983)), (' B  40  LYS  HG2', ' B  85  ALA  HB2', -0.408, (3.808, -25.348, -68.812)), (' A  29  VAL HG13', ' A  34  MET  HG3', -0.405, (-0.435, -39.914, -47.791)), (' A 125  PRO  HB3', ' A 151  TYR  HB3', -0.405, (-21.232, -17.717, -60.68)), (' L 109  ARG HH12', ' L 112  ALA  HB2', -0.4, (-6.627, 1.188, -3.35))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
