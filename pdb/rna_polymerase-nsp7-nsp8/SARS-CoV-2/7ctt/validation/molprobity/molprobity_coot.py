# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 153 ', 'ASP', 0.14897373578591405, (158.345, 114.15899999999999, 125.26500000000001)), ('A', ' 299 ', 'VAL', 0.2071771010011265, (132.95400000000004, 150.289, 113.48900000000002)), ('A', ' 353 ', 'VAL', 0.16799591246762266, (137.32600000000005, 150.058, 120.21700000000003)), ('A', ' 621 ', 'LYS', 0.0, (130.437, 122.747, 128.20900000000003)), ('A', ' 682 ', 'SER', 0.17083972302166156, (123.14100000000006, 131.145, 129.505)), ('A', ' 686 ', 'THR', 0.20267380569822385, (118.22700000000009, 134.891, 123.003)), ('A', ' 915 ', 'TYR', 0.0017660009345458242, (93.377, 113.28, 136.516)), ('A', ' 928 ', 'HIS', 0.27422212328310097, (94.76300000000003, 116.93199999999997, 118.47500000000001)), ('C', '  55 ', 'LEU', 0.1807143926526728, (128.06000000000003, 111.654, 158.252))]
data['cbeta'] = []
data['probe'] = [(' A 452  ASP  OD1', ' A 556  THR HG23', -0.916, (128.033, 127.333, 137.321)), (' D 100  ASN HD22', ' D 103  LEU HD13', -0.753, (124.941, 101.345, 158.74)), (' A 682  SER  OG ', ' A1004  GE6  C02', -0.73, (123.558, 128.61, 128.689)), (' A 502  ALA  HB1', ' A 562  ILE  HB ', -0.701, (115.768, 143.764, 135.077)), (' A 254  GLU  OE1', ' A 282  LEU  CD2', -0.695, (152.894, 141.676, 115.968)), (' A 358  ASP  HB2', ' A 534  ASN HD21', -0.658, (123.968, 157.406, 122.661)), (' A 380  MET  HE2', ' B  91  LEU HD12', -0.657, (125.623, 154.513, 140.916)), (' A 618  ASP  HB3', ' A 798  LYS  HE2', -0.634, (126.873, 115.739, 125.265)), (' A 507  ASN  ND2', ' A 541  GLN  OE1', -0.633, (121.38, 140.133, 141.236)), (' A 720  VAL HG11', ' A 775  LEU HD13', -0.619, (129.784, 112.997, 97.166)), (' A 798  LYS  NZ ', ' A1004  GE6  O15', -0.615, (126.63, 118.32, 128.145)), (' A 699  ALA  O  ', ' A 703  ASN  ND2', -0.614, (127.648, 120.115, 108.291)), (' A 615  MET  HB2', ' A 766  PHE  HE1', -0.608, (124.674, 110.467, 111.959)), (' A 330  VAL HG11', ' B 117  LEU HD13', -0.605, (134.943, 152.003, 134.412)), (' A 149  TYR  HE2', ' A 212  LEU HD13', -0.604, (156.979, 120.464, 111.811)), (' A 602  LEU HD11', ' A 809  PRO  HD3', -0.6, (114.459, 110.051, 116.057)), (' A 254  GLU  OE1', ' A 282  LEU HD21', -0.599, (152.644, 141.755, 116.946)), (' A 830  PRO  HD2', ' A 925  TYR  HE2', -0.598, (105.672, 111.258, 123.75)), (' A 468  GLN  OE1', ' A 705  ASN  ND2', -0.595, (136.392, 123.432, 106.748)), (' A 207  LEU HD21', ' A 241  LEU HD12', -0.587, (149.767, 127.885, 106.475)), (' A 852  GLY  HA2', ' A 855  MET  HE3', -0.585, (100.612, 118.305, 149.753)), (' A 444  GLN  NE2', ' A 552  ASN  O  ', -0.584, (127.566, 119.597, 142.409)), (' A 653  TYR  O  ', ' A 657  ASN  ND2', -0.579, (124.77, 148.473, 120.776)), (' A 856  ILE  O  ', ' A 860  VAL HG23', -0.578, (98.764, 116.653, 140.381)), (' A 676  LYS  HD3', ' A 679  GLY  O  ', -0.575, (130.2, 135.479, 128.24)), (' A 691  ASN  HB3', ' A 759  SER  O  ', -0.572, (122.122, 126.251, 121.724)), (' A 516  TYR  OH ', ' A 569  ARG  NH1', -0.569, (112.038, 142.071, 128.989)), (' A 837  ILE HG12', ' A 866  ALA  HB2', -0.568, (107.65, 109.901, 134.873)), (' A 611  ASN  HB3', ' A 768  SER  HB3', -0.559, (123.035, 104.643, 103.377)), (' A 153  ASP  N  ', ' A 153  ASP  OD1', -0.559, (157.4, 115.11, 126.426)), (' A 636  LEU HD21', ' A 655  LEU HD22', -0.558, (128.028, 142.212, 114.015)), (' A 606  TYR  HE1', ' A 614  LEU HD11', -0.558, (115.938, 109.267, 111.798)), (' A 837  ILE  O  ', ' A 884  TYR  OH ', -0.556, (108.932, 110.565, 139.659)), (' A 786  LEU HD22', ' A 790  ASN HD22', -0.555, (131.872, 122.587, 120.227)), (' A 844  VAL HG11', ' A 848  VAL  H  ', -0.554, (108.373, 120.347, 147.557)), (' A 350  GLU  OE2', ' A 628  ASN  ND2', -0.552, (134.991, 137.659, 122.519)), (' A 330  VAL  HA ', ' A 343  SER  HA ', -0.551, (133.219, 154.394, 130.532)), (' B 176  ASN  OD1', ' B 179  ASN  ND2', -0.549, (145.393, 123.805, 162.752)), (' A 613  HIS  CD2', ' A 768  SER  HB2', -0.549, (123.511, 104.948, 106.385)), (' B 132  ILE HG21', ' B 138  TYR  HB2', -0.547, (146.964, 131.608, 150.565)), (' A 132  ARG  HE ', ' A 243  PRO  HG2', -0.544, (141.111, 126.203, 110.75)), (' A 457  ARG  NH2', ' A 458  TYR  OH ', -0.543, (138.683, 122.604, 134.148)), (" Q  16    A  H2'", ' Q  17    G  H8 ', -0.541, (105.844, 122.892, 137.483)), (' A 387  LEU HD22', ' B 122  LEU  HA ', -0.535, (143.893, 147.644, 141.279)), (' C  19  GLN  O  ', ' C  21  ARG  NH1', -0.531, (118.758, 125.112, 160.91)), (' C  17  LEU HD22', ' C  22  VAL HG21', -0.53, (125.151, 119.287, 160.357)), (' A 456  TYR  CE1', ' A 679  GLY  HA3', -0.527, (131.665, 131.401, 129.462)), (' A 417  LYS  HD2', ' D  90  MET  HE3', -0.526, (110.914, 110.611, 155.927)), (' A 421  ASP  HA ', ' A 424  VAL HG12', -0.525, (108.293, 103.652, 150.662)), (" T  11    U  H2'", ' T  12    A  C8 ', -0.525, (113.903, 131.907, 128.177)), (' A 122  TYR  OH ', ' A 144  GLU  OE1', -0.521, (155.371, 110.952, 111.045)), (' A 340  PHE  HE2', ' B  91  LEU  HG ', -0.519, (125.176, 158.448, 140.593)), (' C   9  THR HG21', ' D  98  LEU HD11', -0.518, (119.661, 105.551, 155.94)), (' A 211  ASP  OD2', ' A 212  LEU  N  ', -0.516, (158.517, 122.739, 107.057)), (' A 540  THR HG23', ' A 665  GLU  HG3', -0.515, (126.848, 140.419, 131.385)), (' A 124  MET  O  ', ' A 128  VAL HG23', -0.515, (149.553, 123.501, 108.324)), (' A 924  MET  HE1', " T  16    U  O5'", -0.511, (97.809, 119.312, 129.036)), (' A 369  LYS  O  ', ' A 373  VAL HG23', -0.509, (118.776, 154.815, 130.94)), (' A1004  GE6  O04', ' T  10    C  N4 ', -0.508, (117.962, 128.678, 134.215)), (' A 254  GLU  OE1', ' A 285  ARG  NH2', -0.508, (154.526, 141.704, 116.158)), (" T  11    U  H2'", ' T  12    A  H8 ', -0.507, (113.692, 132.643, 128.261)), (' A 623  ASP  OD2', ' A 682  SER  OG ', -0.506, (124.817, 128.737, 129.367)), (' A 595  TYR  OH ', ' T  16    U  OP1', -0.505, (96.781, 119.75, 126.072)), (' A 200  GLY  HA2', ' A 230  GLY  H  ', -0.503, (155.787, 141.529, 90.442)), (' A 626  MET  HE2', ' A 631  ARG  HD3', -0.502, (127.632, 132.187, 121.045)), (' A 433  SER  OG ', ' A 435  VAL  O  ', -0.501, (116.003, 99.288, 140.212)), (' A 196  MET  SD ', ' A 232  PRO  HB3', -0.498, (153.52, 135.217, 95.396)), (' B 129  MET  HA ', ' B 186  VAL  O  ', -0.489, (142.06, 141.236, 150.38)), (' A 303  ASP  N  ', ' A 303  ASP  OD1', -0.489, (130.46, 144.798, 105.105)), (' A 770  TYR  CD1', ' A 775  LEU HD12', -0.485, (127.692, 110.766, 98.67)), (' A 696  ILE HG23', ' A 755  MET  HE1', -0.484, (122.591, 123.472, 110.62)), (' A 164  ASP  OD2', ' A 166  VAL  N  ', -0.481, (139.127, 118.975, 127.63)), (" Q  16    A  H2'", ' Q  17    G  C8 ', -0.48, (105.608, 122.383, 137.333)), (' A 615  MET  HE3', ' A 617  TRP  HZ3', -0.479, (125.587, 114.462, 113.486)), (' D  87  MET  HA ', ' D  90  MET  HG2', -0.475, (112.22, 114.7, 159.168)), (' A 528  PHE  HA ', ' A 531  THR HG22', -0.474, (118.155, 150.459, 122.704)), (' A 476  VAL HG22', ' A 696  ILE HG22', -0.474, (123.725, 126.595, 110.126)), (" Q   9    C  H2'", ' Q  10    C  C6 ', -0.472, (89.421, 129.771, 122.502)), (' A 200  GLY  HA3', ' A 227  PRO  HA ', -0.472, (157.808, 141.431, 89.022)), (' A 837  ILE HD11', ' A 862  LEU  HB3', -0.471, (106.47, 112.71, 137.213)), (' A 825  ASP  N  ', ' A 825  ASP  OD1', -0.469, (98.182, 103.698, 114.804)), (' A 506  PHE  HB3', ' A 515  TYR  CZ ', -0.468, (115.752, 147.309, 138.899)), (' A 239  SER  OG ', ' A 467  ARG  HG2', -0.468, (140.302, 132.521, 103.743)), (' A 238  TYR  O  ', ' A 242  MET  HG3', -0.468, (143.987, 132.663, 108.443)), (' C   5  ASP  OD2', ' D  97  LYS  NZ ', -0.467, (114.175, 101.266, 153.155)), (' A 756  MET  O  ', ' A 762  ALA  HA ', -0.466, (119.231, 118.681, 116.341)), (' A 412  PRO  HG3', ' C  14  LEU HD22', -0.465, (121.945, 118.941, 152.557)), (' A 688  ALA  HA ', ' A 759  SER  OG ', -0.465, (119.204, 127.799, 123.009)), (' A 417  LYS  HE2', ' D  94  MET  HE2', -0.465, (112.165, 107.919, 155.925)), (' A 605  VAL HG21', ' A 756  MET  HE2', -0.464, (115.122, 115.427, 114.653)), (' A 836  ARG  NH1', ' A 840  ALA  HB2', -0.464, (112.575, 115.239, 138.15)), (" Q   8    U  H2'", ' Q   9    C  H6 ', -0.464, (86.178, 125.88, 123.01)), (' A 226  THR  OG1', ' A 229  SER  OG ', -0.464, (154.109, 144.041, 86.758)), (' A 584  GLY  HA2', ' A 604  THR HG21', -0.462, (109.591, 120.035, 110.033)), (' A 752  HIS  CE1', ' A 770  TYR  HE2', -0.46, (123.173, 113.726, 98.43)), (' A 606  TYR  CE1', ' A 614  LEU HD11', -0.46, (115.463, 109.043, 111.688)), (' B 132  ILE  O  ', ' B 183  PRO  HA ', -0.458, (140.845, 130.84, 150.08)), (' C  49  PHE  O  ', ' C  53  VAL HG13', -0.457, (128.629, 104.142, 157.432)), (' A 885  LEU HD11', ' A 918  PRO  HB3', -0.456, (96.769, 105.595, 134.351)), (' C   9  THR  HA ', ' C  12  VAL HG12', -0.456, (117.399, 110.191, 155.162)), (' A 601  MET  O  ', ' A 605  VAL HG23', -0.456, (112.542, 115.701, 112.681)), (" Q   9    C  H2'", ' Q  10    C  H6 ', -0.456, (89.957, 129.607, 122.901)), (' A 205  LEU HD12', ' A 234  VAL HG12', -0.456, (150.778, 133.916, 100.256)), (' A 171  ILE HD12', ' A 174  VAL  HB ', -0.455, (149.945, 119.278, 124.729)), (' C   6  VAL  HA ', ' C   9  THR HG22', -0.454, (120.259, 105.82, 153.805)), (' A 389  LEU  HB3', ' B 130  VAL HG22', -0.453, (144.538, 140.233, 146.048)), (' A 694  PHE  HE1', ' A 698  GLN HE21', -0.449, (131.098, 126.145, 117.568)), (' A 268  TRP  CD1', ' A 322  PRO  HD3', -0.449, (149.802, 145.065, 126.62)), (' A 441  PHE  CE1', ' A 845  ASP  HB3', -0.448, (115.116, 120.885, 143.579)), (' A 273  TYR  HB3', ' B 116  PRO  HG3', -0.447, (141.605, 151.609, 127.948)), (' A 613  HIS  HD1', ' A 803  THR  HA ', -0.447, (121.908, 103.719, 110.902)), (' A 562  ILE  HA ', ' A 565  THR HG22', -0.447, (116.654, 142.738, 131.502)), (' A 236  SER  HB3', ' A 732  TYR  HB3', -0.446, (142.363, 129.234, 99.265)), (" Q  17    G  H2'", ' Q  18    C  C6 ', -0.445, (108.472, 119.785, 134.391)), (' A 203  GLY  HA3', ' A 222  PHE  CD2', -0.442, (152.656, 131.134, 92.001)), (' A 358  ASP  OD1', ' A 533  ARG  NH1', -0.441, (123.252, 159.85, 118.94)), (' A 884  TYR  O  ', ' A 888  ILE HG13', -0.438, (100.189, 109.594, 140.894)), (' C  14  LEU HD12', ' C  36  HIS  HB2', -0.437, (125.337, 115.666, 152.568)), (' A 411  LYS  HG3', ' C  18  GLN  HG3', -0.437, (121.104, 124.106, 153.48)), (' C  14  LEU  O  ', ' C  14  LEU HD23', -0.436, (122.372, 119.32, 154.903)), (' C   7  LYS  O  ', ' C  11  VAL HG23', -0.435, (119.741, 110.982, 150.173)), (' A 204  VAL HG12', ' A 233  VAL  HB ', -0.433, (146.821, 131.936, 94.959)), (" Q   8    U  H2'", ' Q   9    C  C6 ', -0.432, (86.039, 126.427, 123.267)), (' A 524  GLN  HB3', ' A 570  GLN HE22', -0.432, (111.678, 149.558, 125.763)), (' A 131  LEU  HG ', ' A 247  LEU HD23', -0.43, (144.788, 123.186, 116.568)), (" T  17    C  H2'", ' T  18    U  H6 ', -0.429, (93.496, 124.63, 137.782)), (' A 589  ILE HG12', ' A 758  LEU HD13', -0.429, (114.817, 124.514, 120.759)), (' A 699  ALA  HA ', ' A 782  PHE  CZ ', -0.428, (127.592, 119.832, 112.341)), (' A 754  SER  O  ', ' A 764  VAL  HA ', -0.427, (119.536, 115.411, 111.145)), (' A 798  LYS  HB3', ' A 798  LYS  HE2', -0.425, (127.084, 115.301, 125.293)), (' A 616  GLY  HA3', ' A 800  TRP  CE2', -0.425, (122.167, 111.783, 119.065)), (' A 759  SER  HB3', " Q  20    A  O2'", -0.425, (119.1, 124.43, 124.114)), (' B 175  ASP  OD2', ' B 176  ASN  N  ', -0.424, (150.581, 124.431, 161.359)), (' A 480  PHE  CZ ', ' A 693  VAL HG22', -0.424, (120.186, 130.383, 114.079)), (' A 767  ASN  HB3', ' A 770  TYR  HB2', -0.424, (124.723, 110.616, 102.428)), (' A 689  TYR  O  ', ' A 693  VAL HG23', -0.424, (120.374, 130.683, 116.654)), (' A 658  GLU  O  ', ' A 662  VAL HG22', -0.423, (125.908, 139.72, 124.193)), (' B 103  LEU  H  ', ' B 103  LEU HD12', -0.423, (140.184, 159.216, 141.604)), (' A  35  PHE  HE1', ' A  50  LYS  HG2', -0.421, (150.867, 113.975, 97.173)), (' B 103  LEU  HA ', ' B 106  ILE HG12', -0.421, (142.051, 158.431, 138.401)), (' A 315  VAL HG21', ' A 629  MET  HG2', -0.417, (137.077, 135.464, 117.069)), (' A 682  SER  HA ', ' A 687  THR HG21', -0.417, (122.392, 130.768, 127.586)), (' A 767  ASN  OD1', ' A 770  TYR  N  ', -0.416, (125.979, 108.077, 101.513)), (' A 251  LEU  O  ', ' A 320  VAL HG12', -0.415, (150.767, 137.741, 120.669)), (' A 576  LEU HD11', ' A 686  THR HG22', -0.415, (116.57, 136.78, 121.693)), (' A 749  LEU  HA ', ' A 749  LEU HD23', -0.415, (123.924, 118.517, 103.171)), (' A 251  LEU HD22', ' A 316  LEU  HG ', -0.415, (147.397, 137.43, 116.218)), (' A 598  TRP  HE1', ' A 817  THR  CG2', -0.414, (111.841, 110.657, 120.203)), (' A  87  TYR  CE2', ' A  99  HIS  HB2', -0.414, (166.565, 126.333, 93.742)), (' A 305  ARG  NH1', ' A 470  LEU  O  ', -0.414, (130.198, 134.384, 103.973)), (' A 392  ARG  CZ ', ' A 450  ILE HG13', -0.413, (135.291, 132.848, 145.162)), (' A 829  LEU  HG ', ' A 925  TYR  CD2', -0.412, (103.703, 109.936, 123.502)), (" T  17    C  H2'", ' T  18    U  C6 ', -0.412, (93.624, 125.158, 137.809)), (' A 503  GLY  HA3', ' A 561  SER  HA ', -0.411, (120.141, 142.512, 135.393)), (' A 376  ALA  HB2', ' A 506  PHE  CZ ', -0.411, (120.59, 148.579, 135.056)), (' A  93  CYS  SG ', ' A 191  GLN  HB3', -0.411, (161.388, 136.988, 102.672)), (' A 700  VAL  O  ', ' A 704  VAL HG13', -0.411, (129.953, 123.095, 105.855)), (' A 576  LEU HD22', ' A 689  TYR  CG ', -0.41, (115.85, 132.952, 119.393)), (" Q  17    G  H2'", ' Q  18    C  H6 ', -0.409, (108.655, 119.738, 134.599)), (' A 605  VAL  CG2', ' A 756  MET  HB2', -0.409, (114.76, 116.71, 113.327)), (' A 731  LEU  HA ', ' A 731  LEU HD23', -0.408, (134.499, 130.093, 101.03)), (' A 668  MET  HB2', ' A 668  MET  HE3', -0.407, (128.345, 141.891, 139.617)), (' D 100  ASN  HB3', ' D 103  LEU  HB2', -0.406, (123.59, 100.719, 160.273)), (' A  43  ALA  O  ', ' A 724  GLN  NE2', -0.406, (137.925, 118.543, 97.182)), (' B 166  ILE  H  ', ' B 166  ILE HD12', -0.405, (137.298, 137.333, 163.572)), (' A 437  LEU HD21', ' A 843  PHE  CE2', -0.404, (115.921, 110.037, 145.187)), (' A 235  ASP  OD2', ' A 236  SER  N  ', -0.404, (143.492, 131.845, 99.681)), (' A 428  PHE  CD2', ' A 883  LEU HD22', -0.403, (107.228, 103.315, 142.223)), (' A 605  VAL HG22', ' A 756  MET  HB2', -0.402, (115.018, 117.121, 113.375)), (' A 847  ILE  HA ', ' A 847  ILE HD13', -0.402, (108.004, 124.845, 146.561)), (' A 889  ARG  NH2', ' A 916  TRP  O  ', -0.401, (93.763, 106.67, 137.899)), (' A 297  ASN  HA ', ' A 352  GLY  HA3', -0.4, (138.117, 147.771, 116.709)), (' A 558  ALA  O  ', ' A 683  GLY  HA3', -0.4, (121.266, 134.68, 132.264)), (' B 153  LEU  HA ', ' B 153  LEU HD23', -0.4, (153.509, 146.197, 147.084)), (' A 183  ARG  HB2', ' A 250  ALA  O  ', -0.4, (153.453, 133.853, 116.265))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
