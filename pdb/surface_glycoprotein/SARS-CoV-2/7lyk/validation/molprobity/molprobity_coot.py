# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 197 ', 'ILE', 0.012878748056870188, (192.107, 155.574, 128.122)), ('A', ' 198 ', 'ASP', 0.02949399340216284, (190.146, 154.417, 124.989)), ('A', ' 744 ', 'GLY', 0.08554196290297676, (169.962, 178.511, 144.656)), ('B', ' 137 ', 'ASN', 0.02025668003546944, (119.192, 120.35800000000003, 119.076)), ('B', ' 536 ', 'ASN', 0.04338135737008649, (119.011, 166.86800000000005, 149.967)), ('B', ' 571 ', 'ASP', 0.0458513695305587, (140.335, 176.082, 149.362)), ('C', ' 112 ', 'SER', 0.008002690719805323, (142.154, 203.597, 112.84700000000001)), ('C', ' 801 ', 'ASN', 0.03441338635438209, (137.189, 175.931, 200.652)), ('C', ' 812 ', 'PRO', 0.045342875062725246, (125.141, 170.14000000000004, 182.787))]
data['omega'] = []
data['rota'] = [('A', ' 102 ', 'ARG', 0.2868236022431254, (215.698, 158.12700000000007, 124.319)), ('A', ' 501 ', 'TYR', 0.08343497638047659, (168.652, 120.968, 80.148)), ('A', ' 618 ', 'THR', 0.05677885216267811, (183.702, 126.96700000000003, 155.526)), ('A', ' 650 ', 'LEU', 0.0, (186.637, 135.80500000000006, 163.562)), ('B', ' 102 ', 'ARG', 0.21144968818862903, (129.25, 112.962, 126.714)), ('B', ' 400 ', 'PHE', 0.12444935921272096, (123.674, 184.05300000000005, 98.191)), ('B', ' 453 ', 'TYR', 0.08657357678899755, (125.966, 186.293, 89.014)), ('C', ' 331 ', 'ASN', 0.009655814569073207, (190.862, 186.842, 123.556)), ('C', ' 907 ', 'ASN', 0.09006874753876945, (154.738, 166.57600000000005, 209.121)), ('C', '1126 ', 'CYS', 0.2474301075823796, (184.05, 168.866, 224.38700000000003)), ('C', '1135 ', 'ASN', 0.14309124765139844, (176.24, 176.31800000000007, 227.609))]
data['cbeta'] = [('A', ' 657 ', 'ASN', ' ', 0.28293012704758497, (189.017, 130.13000000000005, 175.72)), ('B', ' 617 ', 'CYS', ' ', 0.2669638312802696, (120.966, 154.781, 161.145)), ('C', ' 198 ', 'ASP', ' ', 0.26962754556467144, (144.044, 185.37100000000007, 129.449)), ('C', ' 487 ', 'ASN', ' ', 0.2757987443390543, (176.007, 131.299, 104.871)), ('C', ' 617 ', 'CYS', ' ', 0.2539879618077884, (176.197, 197.543, 159.72))]
data['probe'] = [(' B1082  CYS  SG ', ' B1132  ILE  CD1', -0.921, (144.682, 171.512, 224.2)), (' B1082  CYS  SG ', ' B1132  ILE HD13', -0.859, (144.523, 171.718, 224.169)), (' B1082  CYS  SG ', ' B1132  ILE HD11', -0.837, (145.072, 170.817, 224.361)), (' B 617  CYS  SG ', ' B 642  VAL HG11', -0.827, (119.822, 152.038, 161.711)), (' A1082  CYS  SG ', ' A1132  ILE  CD1', -0.723, (163.67, 137.681, 223.467)), (' B 617  CYS  SG ', ' B 642  VAL  CG1', -0.673, (120.885, 151.385, 161.683)), (' B 808  ASP  HB3', ' B 811  LYS  HE2', -0.616, (166.321, 125.614, 186.401)), (' A1082  CYS  SG ', ' A1132  ILE HD13', -0.581, (162.432, 137.886, 223.3)), (' C 927  PHE  CZ ', ' C 931  ILE HD11', -0.558, (142.498, 174.952, 197.535)), (' A1082  CYS  SG ', ' A1132  ILE HD11', -0.556, (163.445, 138.588, 223.915)), (' A1116  THR HG22', ' A1138  TYR  HD1', -0.533, (171.537, 152.468, 229.165)), (' A 811  LYS  HG2', ' A 814  LYS  H  ', -0.532, (185.992, 185.422, 182.156)), (' A1098  ASN  ND2', ' A1100  THR  OG1', -0.523, (183.473, 141.192, 222.373)), (' A 809  PRO  HA ', ' A 814  LYS  HE3', -0.514, (185.915, 186.955, 187.094)), (' B 332  ILE HD11', ' B 362  VAL HG21', -0.485, (121.393, 179.773, 124.148)), (' C 418  ILE HD12', ' C 453  TYR  CE2', -0.479, (174.669, 152.701, 107.046)), (' C 617  CYS  SG ', ' C 642  VAL  CG1', -0.476, (173.904, 198.818, 160.725)), (' B  81  ASN  N  ', ' B 265  TYR  HH ', -0.472, (121.106, 121.721, 131.499)), (' C 418  ILE HD12', ' C 453  TYR  HE2', -0.462, (174.844, 152.929, 107.495)), (' C 350  VAL HG11', ' C 453  TYR  CE2', -0.448, (177.06, 153.446, 106.691)), (' C 350  VAL HG11', ' C 453  TYR  CZ ', -0.435, (177.056, 154.083, 106.486)), (' B1032  CYS  HG ', ' B1043  CYS  HG ', -0.43, (159.988, 151.153, 191.745)), (' C1083  HIS  CG ', ' C1084  ASP  H  ', -0.428, (177.033, 169.677, 230.894)), (' B1081  ILE HD11', ' B1115  ILE HG21', -0.414, (147.35, 161.456, 224.787)), (' A 811  LYS  HZ3', ' A 814  LYS  HG2', -0.414, (184.731, 187.475, 182.46)), (' C 718  PHE  HZ ', ' C 923  ILE HD11', -0.407, (150.701, 177.594, 208.81)), (' B1032  CYS  SG ', ' B1043  CYS  SG ', -0.402, (159.419, 150.784, 191.946))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
