# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  72 ', 'ASN', 0.04234644470662265, (38.314, 24.742000000000004, 62.291)), ('A', ' 155 ', 'ASN', 0.008662913410834762, (29.82800000000001, 3.804, 45.662)), ('A', ' 156 ', 'GLY', 0.025507792291096884, (30.882000000000012, 6.082999999999999, 48.503))]
data['omega'] = [('A', ' 163 ', 'PRO', None, (41.611, 19.157, 47.033999999999985))]
data['rota'] = [('A', '  43 ', 'GLU', 0.0, (37.266000000000005, 67.177, 68.916)), ('A', '  86 ', 'MET', 0.0, (27.66, 41.474, 67.623)), ('A', '  90 ', 'ASN', 0.1892854472477116, (28.427, 47.5, 68.863)), ('A', ' 107 ', 'LEU', 0.07237618693780491, (36.572, 69.855, 58.81)), ('A', ' 131 ', 'GLU', 0.053401039569724064, (18.252, 41.906, 60.889)), ('A', ' 163 ', 'PRO', 0.11785442287026754, (42.131, 19.279, 45.669)), ('A', ' 240 ', 'LEU', 0.11717878985843772, (41.147, 43.60400000000001, 25.287999999999993)), ('A', ' 308 ', 'GLN', 0.10471021138728001, (62.821, 17.721, 43.828)), ('A', ' 314 ', 'ARG', 0.11828159222693144, (59.305, 26.031999999999993, 50.30699999999999)), ('A', ' 349 ', 'GLU', 0.13586543610580848, (37.125, 20.955, 58.451999999999984)), ('A', ' 363 ', 'LYS', 0.09817613120869507, (52.795, 42.153, 64.145)), ('A', ' 377 ', 'ASP', 0.05266792498762891, (49.473, 27.377000000000002, 43.506)), ('A', ' 394 ', 'TYR', 0.14775042922100134, (50.819999999999986, 50.338999999999984, 55.91099999999999)), ('A', ' 463 ', 'LEU', 0.18094969393081597, (31.427000000000014, 39.346, 34.34399999999999)), ('A', ' 539 ', 'GLN', 0.11965560370557957, (61.647, 50.238, 32.944)), ('A', ' 585 ', 'PRO', 0.04648566278314319, (47.641, 58.575, 36.969))]
data['cbeta'] = []
data['probe'] = [(' A 179  LEU HD11', ' A 499  VAL HG23', -0.827, (26.707, 18.601, 30.952)), (' A  45  SER  O  ', ' A  49  GLU  HG3', -0.662, (42.558, 61.833, 67.001)), (' A 500  PRO  HG2', ' A2365  HOH  O  ', -0.654, (19.822, 19.361, 30.97)), (' A 304  ALA  O  ', ' A 308  GLN  HG2', -0.652, (61.932, 19.047, 40.955)), (' A 301  THR HG21', ' A 375  LEU HD22', -0.637, (55.5, 26.017, 35.915)), (' A  98  GLN  OE1', ' A 101  LYS  HD2', -0.632, (28.692, 62.212, 68.301)), (' A  58  VAL HG13', ' A  59  TRP  HD1', -0.626, (37.14, 46.634, 66.253)), (' A  82  LEU  HA ', ' A  85  ASN HD22', -0.602, (28.9, 35.8, 64.171)), (' A 334  GLU  HG2', ' A2294  HOH  O  ', -0.596, (52.294, 35.75, 62.914)), (' A  58  VAL HG13', ' A  59  TRP  CD1', -0.585, (37.402, 46.969, 66.177)), (' A 148  VAL HG12', ' A 349  GLU  HG2', -0.564, (33.646, 21.709, 56.041)), (' A 116  ILE  O  ', ' A 120  GLN  HG3', -0.561, (32.24, 59.654, 58.691)), (' A 354  ALA  HB2', ' A 369  GLN  HG3', -0.558, (45.515, 29.065, 48.868)), (' A  96  GLY  HA3', ' A 122  LEU  CD2', -0.552, (29.072, 54.633, 62.584)), (' A 427  LEU  HB2', ' A 433  LEU HD12', -0.543, (60.82, 28.556, 33.374)), (' A 231  GLN  HG3', ' A2192  HOH  O  ', -0.539, (30.375, 55.573, 33.53)), (' A 462  TYR  O  ', ' A 466  GLN  HG2', -0.52, (31.723, 42.49, 34.704)), (' A 107  LEU HD21', ' A 116  ILE HD12', -0.519, (36.313, 65.154, 61.112)), (' A 457  PHE  CE2', ' A 461  SER  HB3', -0.518, (39.273, 38.067, 36.433)), (' A 104  VAL HG13', ' A 113  LYS  HG3', -0.517, (35.382, 65.303, 55.937)), (' A  84  LYS  HD3', ' A  87  GLN  OE1', -0.516, (33.185, 39.226, 70.918)), (' A  79  LYS  HG2', ' A  83  GLN HE21', -0.511, (28.134, 31.567, 70.584)), (' A 346  ASP  OD1', ' A 348  ARG  HG2', -0.509, (42.734, 19.471, 61.621)), (' A 531  PHE  CE1', ' A 592  MET  HE3', -0.508, (47.72, 40.718, 32.058)), (' A 488  LEU HD22', ' A 492  TYR  HE1', -0.507, (27.581, 40.579, 30.992)), (' A 104  VAL HG12', ' A 113  LYS  NZ ', -0.499, (34.304, 66.512, 54.591)), (' A 579  GLN  NE2', ' A 584  GLN  HA ', -0.498, (51.489, 60.157, 35.618)), (' A 463  LEU HD11', ' A 489  ARG  HA ', -0.496, (30.142, 34.721, 31.386)), (' A 597  LYS  HB3', ' A 598  PRO  HD3', -0.48, (54.141, 42.232, 21.582)), (' A 511  LYS  O  ', ' A 515  PRO  HD2', -0.478, (30.563, 31.807, 45.35)), (' A 554  GLN  HG2', ' A 554  GLN  O  ', -0.465, (68.593, 42.902, 42.943)), (' A 313  ARG HH22', ' A 336  TRP  HB3', -0.465, (57.603, 28.485, 59.574)), (' A 179  LEU HD11', ' A 499  VAL  CG2', -0.459, (26.371, 18.173, 31.878)), (' A 485  TRP  CD2', ' A 508  PRO  HG3', -0.458, (26.076, 33.068, 38.096)), (' A 144  THR  O  ', ' A 148  VAL HG22', -0.447, (30.045, 23.531, 54.097)), (' A 338  LYS  HD3', ' A 366  ARG  NH2', -0.446, (48.598, 33.881, 65.539)), (' A 313  ARG  NH2', ' A 336  TRP  HB3', -0.443, (57.854, 28.598, 59.324)), (' A 275  LEU  N  ', ' A 275  LEU HD22', -0.439, (37.063, 24.569, 28.864)), (' A  96  GLY  HA3', ' A 122  LEU HD21', -0.436, (28.804, 54.619, 62.915)), (' A 169  MET  O  ', ' A 276  GLY  HA2', -0.435, (40.445, 21.291, 33.327)), (' A 442  HIS  HD2', ' A2330  HOH  O  ', -0.435, (59.167, 25.79, 24.857)), (' A 162  GLU  HA ', ' A 163  PRO  HA ', -0.427, (41.594, 20.861, 45.286)), (' A 539  GLN  C  ', ' A 539  GLN  NE2', -0.426, (61.839, 52.246, 34.068)), (' A 209  ARG  HA ', ' A 213  TYR  O  ', -0.424, (21.048, 52.999, 50.487)), (' A  91  HIS  HD2', ' A2020  HOH  O  ', -0.421, (34.839, 50.14, 70.849)), (' A 514  ILE  HB ', ' A 515  PRO  CD ', -0.418, (29.136, 32.526, 45.88)), (' A 173  ARG  NH1', ' A 288  ASP  OD1', -0.415, (45.891, 19.786, 29.489)), (' A 107  LEU  HA ', ' A 107  LEU HD12', -0.409, (36.519, 70.181, 60.479)), (' A 443  ASP  CG ', ' A 548  HIS  HE2', -0.409, (59.09, 35.864, 23.724)), (' A  78  SER  HB3', ' A 140  LEU HD21', -0.408, (28.892, 29.442, 63.043)), (' A  44  ALA  HB1', ' A 112  ILE HG21', -0.407, (38.913, 65.588, 62.619)), (' A 104  VAL  O  ', ' A 113  LYS  NZ ', -0.406, (34.416, 68.046, 55.015)), (' A 148  VAL HG12', ' A 349  GLU  CG ', -0.406, (33.978, 21.47, 56.303)), (' A 104  VAL  CG1', ' A 113  LYS  HG3', -0.404, (35.116, 65.753, 55.701)), (' A 363  LYS  HG3', ' A2291  HOH  O  ', -0.404, (55.687, 40.683, 64.991))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
