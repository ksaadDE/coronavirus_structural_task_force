# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 246 ', 'ILE', None, (172.437, 157.838, 240.307)), ('A', ' 292 ', 'ALA', None, (203.339, 185.504, 218.939)), ('B', ' 292 ', 'ALA', None, (190.82800000000003, 244.10799999999995, 220.559)), ('B', ' 336 ', 'CYS', None, (167.77400000000006, 197.597, 247.216)), ('B', ' 493 ', 'GLN', None, (158.90499999999994, 197.03000000000006, 285.26)), ('C', ' 292 ', 'ALA', None, (247.82999999999998, 226.48499999999999, 226.25400000000005)), ('C', ' 362 ', 'VAL', None, (221.8870000000001, 252.47399999999996, 254.853)), ('C', ' 532 ', 'ASN', None, (233.90000000000006, 257.392, 242.427)), ('a', ' 118 ', 'ALA', None, (220.49399999999994, 203.86599999999996, 341.4400000000001)), ('a', ' 151 ', 'PRO', None, (214.36199999999994, 210.96999999999994, 338.5500000000001)), ('a', ' 153 ', 'PRO', None, (213.97599999999994, 216.08699999999993, 334.9780000000001)), ('a', ' 193 ', 'PRO', None, (204.113, 239.36499999999995, 355.539)), ('b', '   8 ', 'PRO', None, (241.45700000000005, 234.21599999999995, 324.744)), ('b', ' 101 ', 'PRO', None, (244.296, 211.05100000000002, 315.902)), ('b', ' 114 ', 'ALA', None, (227.216, 245.60899999999995, 332.78)), ('b', ' 146 ', 'PRO', None, (231.194, 240.315, 338.284)), ('c', ' 118 ', 'ALA', None, (164.85799999999995, 205.17699999999994, 335.8460000000001)), ('c', ' 151 ', 'PRO', None, (175.06299999999996, 206.09699999999998, 335.41)), ('c', ' 153 ', 'PRO', None, (180.19599999999994, 203.13699999999994, 333.332)), ('c', ' 193 ', 'PRO', None, (197.203, 195.172, 359.699)), ('d', '   8 ', 'PRO', None, (180.682, 171.21599999999995, 320.821)), ('d', ' 101 ', 'PRO', None, (163.79099999999994, 184.014, 307.006)), ('d', ' 114 ', 'ALA', None, (195.107, 174.68799999999993, 333.791)), ('d', ' 146 ', 'PRO', None, (187.137, 174.61099999999993, 337.144))]
data['rota'] = [('A', ' 391 ', 'CYS', 0.0, (235.56500000000003, 199.95199999999994, 254.87100000000007)), ('B', ' 166 ', 'CYS', 0.012204796803416684, (195.91200000000006, 257.837, 260.184)), ('B', ' 760 ', 'CYS', 0.23376882418561515, (227.20899999999995, 223.02099999999993, 222.501)), ('C', '  95 ', 'THR', 0.19533747662839954, (270.305, 215.31899999999993, 237.156)), ('a', ' 120 ', 'THR', 0.288141265623269, (213.02499999999995, 206.90199999999993, 341.778)), ('d', ' 155 ', 'ILE', 0.24584956784993003, (170.99399999999994, 180.66899999999998, 357.575))]
data['cbeta'] = []
data['probe'] = [(' B  14  GLN  N  ', ' B 255  SER  HG ', -0.695, (177.184, 271.805, 253.625)), (' A1035  GLY  HA3', ' B1040  VAL HG21', -0.598, (209.748, 223.083, 173.247)), (' B1051  SER  HG ', ' B1064  HIS  HD1', -0.585, (218.713, 235.643, 179.803)), (' A 720  ILE HG13', ' A 923  ILE HG23', -0.578, (204.527, 206.749, 164.613)), (' A 226  LEU  HG ', ' A 227  VAL HG23', -0.572, (177.328, 186.565, 233.651)), (' b 154  LYS  HB2', ' b 198  THR  HB ', -0.572, (231.255, 232.87, 358.924)), (' A 563  GLN HE21', ' C  41  LYS  HA ', -0.561, (248.17, 203.809, 233.949)), (' A 912  THR  OG1', ' A1106  GLN  NE2', -0.558, (216.333, 212.041, 155.152)), (' C 662  CYS  HB2', ' C 697  MET  HG3', -0.556, (241.916, 235.781, 196.473)), (' a   6  GLN  NE2', ' a  96  CYS  SG ', -0.555, (223.681, 212.119, 315.894)), (' C 720  ILE HG13', ' C 923  ILE HG23', -0.554, (240.667, 215.501, 169.519)), (' a  11  LEU HD21', ' a 151  PRO  HG3', -0.549, (214.472, 208.957, 335.386)), (' b  45  LYS  HB2', ' b  48  GLN  HB2', -0.54, (221.682, 225.888, 319.437)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.54, (215.192, 242.497, 168.037)), (' C 119  ILE HG12', ' C 128  ILE HG12', -0.539, (257.532, 208.148, 250.888)), (' A 787  GLN  NE2', ' B 701  VAL  O  ', -0.539, (191.974, 232.614, 176.29)), (' A 203  ILE HD11', ' A 229  LEU HD11', -0.528, (182.299, 184.899, 238.182)), (' a 156  VAL HG22', ' a 201  VAL HG12', -0.527, (210.008, 222.27, 342.385)), (' A1040  VAL HG21', ' C1035  GLY  HA3', -0.521, (222.24, 211.334, 174.292)), (' A 560  LEU  O  ', ' A 577  ARG  NH2', -0.521, (250.661, 196.54, 231.777)), (' C 347  PHE  HB2', ' C 401  VAL HG23', -0.519, (204.89, 243.528, 272.177)), (' B 853  GLN  HB3', ' B 858  LEU  HB2', -0.519, (222.562, 238.77, 216.623)), (' A 295  PRO  HB2', ' A 608  VAL HG11', -0.517, (208.655, 184.099, 208.994)), (' A 895  GLN  NE2', ' B1074  ASN  OD1', -0.516, (195.26, 231.563, 160.319)), (' B 787  GLN  NE2', ' C 701  VAL  O  ', -0.515, (242.5, 239.283, 182.416)), (' A1121  PHE  HE1', ' C 914  ASN HD21', -0.514, (234.803, 218.986, 153.787)), (' B 398  ASP  HB2', ' B 512  VAL  HB ', -0.511, (172.944, 203.466, 265.851)), (' A 433  VAL HG22', ' A 512  VAL HG13', -0.511, (234.235, 196.631, 271.969)), (' A 780  GLU  O  ', ' A 784  GLN  NE2', -0.509, (205.155, 225.623, 185.659)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.508, (244.348, 198.133, 188.129)), (' B 276  LEU HD11', ' B 301  CYS  HA ', -0.505, (198.703, 244.617, 216.922)), (' B 420  ASP  OD1', ' B 424  LYS  NZ ', -0.505, (180.213, 207.268, 278.379)), (' C 389  ASP  HA ', ' C 527  PRO  HD3', -0.504, (228.342, 249.75, 253.882)), (' A 357  ARG HH12', ' C 167  THR HG22', -0.504, (247.516, 207.513, 262.987)), (' B 212  LEU  HB3', ' B 217  PRO  HB3', -0.504, (186.952, 269.294, 222.817)), (' A 172  SER  OG ', ' A 173  GLN  N  ', -0.503, (171.939, 186.046, 234.768)), (' c   1  GLU  HG3', ' c   2  VAL HG23', -0.502, (186.181, 198.337, 302.609)), (' d 121  SER  OG ', ' d 140  PHE  O  ', -0.501, (185.819, 183.965, 348.167)), (' C 327  VAL HG13', ' C 542  ASN  HB3', -0.501, (225.257, 249.304, 240.95)), (' B 908  GLY  O  ', ' B1038  LYS  NZ ', -0.501, (219.156, 226.803, 167.659)), (' B 201  PHE  HB2', ' B 229  LEU  HB2', -0.5, (198.618, 255.651, 245.339)), (' C 780  GLU  O  ', ' C 784  GLN  NE2', -0.499, (220.466, 207.107, 185.919)), (' B 787  GLN HE22', ' C 701  VAL HG13', -0.499, (243.696, 238.073, 181.783)), (' b 126  SER  OG ', ' b 127  SER  N  ', -0.498, (211.537, 224.564, 359.41)), (' B 422  ASN  HA ', ' B 461  LEU HD12', -0.498, (173.367, 199.887, 277.583)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.497, (236.401, 199.95, 286.431)), (' A 701  VAL  O  ', ' C 787  GLN  NE2', -0.496, (222.99, 191.76, 177.789)), (' B 780  GLU  O  ', ' B 784  GLN  NE2', -0.495, (228.354, 229.548, 188.126)), (' C  92  PHE  HB2', ' C 192  PHE  HB2', -0.494, (260.939, 214.347, 241.545)), (' C 452  LEU HD13', ' C 492  LEU HD21', -0.493, (191.021, 239.874, 268.629)), (' d 111  GLU  OE2', ' d 178  TYR  OH ', -0.491, (186.727, 180.177, 330.277)), (' c 123  PRO  HB3', ' c 149  TYR  HB3', -0.491, (177.787, 204.563, 342.263)), (' A 804  GLN  OE1', ' A 935  GLN  NE2', -0.491, (190.909, 205.265, 177.397)), (' C 804  GLN  OE1', ' C 935  GLN  NE2', -0.49, (246.092, 204.603, 183.398)), (' b 121  SER  OG ', ' b 140  PHE  O  ', -0.488, (222.434, 235.054, 349.071)), (' A 984  LEU HD13', ' A 988  GLU  HG3', -0.487, (200.459, 216.62, 242.381)), (' b 112  LEU  H  ', ' b 171  GLN HE22', -0.487, (227.733, 239.283, 330.0)), (' C 908  GLY  O  ', ' C1038  LYS  NZ ', -0.486, (225.269, 220.168, 167.978)), (' A 908  GLY  O  ', ' A1038  LYS  NZ ', -0.486, (216.285, 218.079, 166.888)), (' C 573  THR HG22', ' C 587  ILE HG13', -0.484, (221.813, 249.884, 229.47)), (' B 295  PRO  HB2', ' B 608  VAL HG11', -0.482, (187.868, 242.7, 210.55)), (' A 106  PHE  HB2', ' A 117  LEU  HB3', -0.481, (185.752, 180.332, 243.575)), (' C 557  LYS  HB2', ' C 584  ILE HG21', -0.481, (220.309, 259.527, 226.947)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.48, (191.327, 257.017, 248.857)), (' C  60  SER  OG ', ' C  61  ASN  N  ', -0.479, (258.608, 228.333, 233.654)), (' C1084  ASP  N  ', ' C1084  ASP  OD1', -0.479, (225.439, 240.843, 141.176)), (' A 645  THR  OG1', ' A 646  ARG  N  ', -0.478, (226.203, 186.789, 202.447)), (' C 919  ASN  HB3', ' C 922  LEU  HB3', -0.478, (245.228, 216.171, 164.151)), (' B 214  ARG  NH2', ' B 266  TYR  OH ', -0.478, (179.674, 265.302, 227.249)), (' B  47  VAL HG12', ' C 569  ILE HG22', -0.475, (212.418, 249.057, 218.709)), (' B 646  ARG  NH2', ' B 668  ALA  O  ', -0.475, (186.166, 225.944, 194.822)), (' A1090  PRO  O  ', ' C 913  GLN  NE2', -0.474, (229.892, 215.024, 155.501)), (' c   6  GLN  NE2', ' c  96  CYS  SG ', -0.474, (177.058, 199.839, 312.435)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.469, (187.726, 195.178, 225.514)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.469, (185.686, 209.525, 182.104)), (' A  87  ASN  ND2', ' A  88  ASP  OD1', -0.469, (198.995, 180.031, 234.447)), (' A 379  CYS  HB3', ' A 432  CYS  HA ', -0.469, (229.977, 194.813, 268.354)), (' C 226  LEU  HG ', ' C 227  VAL HG13', -0.467, (256.374, 203.566, 243.434)), (' B 538  CYS  HB2', ' B 590  CYS  HB3', -0.464, (179.345, 221.564, 219.76)), (' B 963  VAL HG11', ' C 570  ALA  HB1', -0.464, (217.394, 241.486, 221.619)), (' A 544  ASN HD21', ' A 579  PRO  HB3', -0.463, (241.595, 192.954, 239.246)), (' C 738  CYS  HB2', ' C 760  CYS  HB2', -0.462, (214.671, 205.196, 220.654)), (' b 120  VAL HG22', ' b 212  LYS  HG3', -0.461, (224.184, 241.001, 355.205)), (' A1084  ASP  N  ', ' A1084  ASP  OD1', -0.461, (238.0, 212.29, 141.279)), (' B 574  ASP  HA ', ' B 587  ILE  HB ', -0.46, (182.586, 210.715, 219.952)), (' A 550  GLY  HA2', ' A 589  PRO  HA ', -0.46, (230.457, 191.711, 224.847)), (' C1082  CYS  HB2', ' C1126  CYS  HB3', -0.459, (225.269, 244.122, 147.846)), (' C 538  CYS  HB2', ' C 590  CYS  HB3', -0.458, (233.782, 247.116, 227.87)), (' B 725  GLU  OE2', ' B1028  LYS  NZ ', -0.457, (215.323, 231.166, 185.961)), (' C  40  ASP  HB3', ' C  42  VAL HG23', -0.457, (244.166, 207.206, 232.962)), (' C 535  LYS  NZ ', ' C 554  GLU  OE2', -0.456, (230.478, 262.355, 230.766)), (' C 742  ILE  O  ', ' C1000  ARG  NH1', -0.455, (221.411, 204.801, 228.19)), (' A  92  PHE  HB2', ' A 192  PHE  HB2', -0.455, (185.302, 177.727, 230.627)), (' d 112  LEU  H  ', ' d 171  GLN HE22', -0.454, (190.675, 178.496, 330.39)), (' b 170  ASP  N  ', ' b 170  ASP  OD1', -0.454, (222.722, 230.634, 333.961)), (' B1084  ASP  N  ', ' B1084  ASP  OD1', -0.454, (206.474, 215.964, 137.784)), (' B 102  ARG HH12', ' B 179  LEU HD11', -0.453, (190.879, 276.525, 244.025)), (' B 280  ASN  OD1', ' B 284  THR  N  ', -0.452, (207.703, 259.862, 221.4)), (' A 605  SER  OG ', ' A 606  ASN  N  ', -0.451, (203.15, 180.447, 201.154)), (' b  45  LYS  NZ ', ' b  87  GLU  O  ', -0.451, (223.106, 233.123, 319.196)), (' a 148  GLY  HA2', ' a 178  LEU HD13', -0.451, (217.841, 213.323, 347.133)), (' A 126  VAL  HB ', ' A 172  SER  HB3', -0.451, (173.869, 183.657, 236.451)), (' A 326  ILE HD13', ' A 533  LEU HD12', -0.45, (235.613, 185.121, 233.035)), (' A 882  ILE  O  ', ' A 901  GLN  NE2', -0.449, (198.624, 220.594, 165.88)), (' B1030  SER  HA ', ' B1034  LEU HD12', -0.448, (227.931, 229.88, 181.696)), (' C 195  LYS  HE2', ' C 197  ILE HD11', -0.448, (247.284, 213.758, 241.222)), (' c 142  LEU HD11', ' c 214  ILE HG21', -0.447, (189.46, 196.859, 354.306)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.447, (224.401, 254.542, 188.701)), (' a 123  PRO  HB3', ' a 149  TYR  HB3', -0.445, (212.67, 215.439, 344.106)), (' A 742  ILE  O  ', ' A1000  ARG  NH1', -0.444, (197.502, 218.507, 226.187)), (' B  18  PHE  HB2', ' B  21  ARG  HB2', -0.443, (173.349, 270.528, 245.466)), (' B 141  LEU HD11', ' B 154  GLU  HG3', -0.443, (190.086, 274.88, 250.552)), (' B 565  PHE  HD2', ' B 576  VAL HG22', -0.443, (180.199, 206.7, 225.613)), (' B 914  ASN HD21', ' C1121  PHE  HE1', -0.443, (218.849, 234.775, 152.892)), (' B 412  PRO  HG3', ' B 429  PHE  HB3', -0.443, (181.182, 210.13, 267.174)), (' A 201  PHE  HB2', ' A 229  LEU  HB2', -0.442, (184.395, 187.678, 240.017)), (' C 387  LEU HD11', ' C 431  GLY  HA2', -0.442, (219.933, 242.714, 259.811)), (' C 646  ARG  NH2', ' C 668  ALA  O  ', -0.441, (237.158, 243.774, 201.912)), (' C 245  HIS  N  ', ' C 259  THR  O  ', -0.441, (278.371, 214.739, 252.762)), (' B 882  ILE  O  ', ' B 901  GLN  NE2', -0.439, (229.942, 240.531, 170.626)), (' c  87  THR  OG1', ' c  88  PHE  N  ', -0.439, (161.034, 196.021, 328.321)), (' C  35  GLY  HA3', ' C  56  LEU  HB3', -0.438, (255.56, 219.782, 233.55)), (' B 985  ASP  O  ', ' B 989  ALA  N  ', -0.438, (220.183, 227.234, 244.75)), (' C  48  LEU HD11', ' C 276  LEU  HB3', -0.437, (247.026, 215.768, 221.269)), (' B  96  GLU  OE1', ' B 100  ILE  N  ', -0.437, (187.398, 273.361, 237.233)), (' A1047  TYR  HB2', ' A1067  TYR  HB3', -0.436, (212.642, 209.155, 168.273)), (' A 459  SER  OG ', ' A 460  ASN  N  ', -0.436, (235.251, 211.691, 287.414)), (' b  13  VAL HG21', ' b 110  LEU HD13', -0.435, (230.859, 239.393, 322.517)), (' C 673  SER  OG ', ' C 695  TYR  OH ', -0.434, (247.831, 234.74, 199.114)), (' b 141  LEU  N  ', ' b 180  MET  O  ', -0.434, (224.07, 233.166, 345.622)), (' b   6  GLN  NE2', ' b  94  CYS  SG ', -0.433, (239.228, 226.46, 319.568)), (' B 454  ARG  NH2', ' B 469  SER  O  ', -0.432, (166.331, 192.404, 280.233)), (' b  42  TYR  HB2', ' b  93  TYR  HB2', -0.432, (233.757, 224.321, 317.895)), (' B  97  LYS  HG3', ' B 186  PHE  HA ', -0.432, (186.137, 276.568, 229.142)), (' B 119  ILE HG12', ' B 128  ILE HG12', -0.432, (196.217, 262.342, 247.147)), (' B 605  SER  OG ', ' B 606  ASN  N  ', -0.432, (188.56, 250.801, 203.502)), (' d 153  TRP  HE1', ' d 182  SER  HG ', -0.432, (176.382, 183.85, 347.624)), (' C 521  PRO  HG3', ' C 564  GLN  HG3', -0.432, (213.085, 254.508, 238.725)), (' B 544  ASN HD21', ' B 579  PRO  HB3', -0.431, (175.465, 205.196, 231.577)), (' B 774  GLN HE22', ' B1018  ILE HG21', -0.43, (222.515, 229.885, 202.208)), (' C 419  ALA  HB1', ' C 424  LYS  HG2', -0.43, (204.262, 235.358, 257.033)), (' a 171  PRO  HD3', ' b 169  THR HG22', -0.429, (221.643, 227.774, 338.039)), (' A 538  CYS  HB2', ' A 590  CYS  HB3', -0.429, (228.475, 187.553, 223.664)), (' B 418  ILE  HA ', ' B 422  ASN HD22', -0.429, (172.251, 204.638, 279.434)), (' C 985  ASP  O  ', ' C 989  ALA  N  ', -0.429, (215.817, 205.939, 243.235)), (' c 140  VAL HG23', ' c 187  VAL HG23', -0.428, (195.809, 191.684, 352.858)), (' C 349  SER  OG ', ' C 350  VAL  N  ', -0.427, (199.368, 241.437, 267.192)), (' B 662  CYS  HB2', ' B 671  CYS  HB3', -0.426, (189.72, 236.374, 193.376)), (' C 882  ILE  O  ', ' C 901  GLN  NE2', -0.425, (231.908, 203.379, 168.863)), (' C 703  ASN  N  ', ' C 703  ASN  OD1', -0.425, (242.08, 240.661, 179.891)), (' B 526  GLY  HA3', ' B 527  PRO  HD3', -0.424, (179.893, 206.71, 245.52)), (' A1011  GLN  OE1', ' A1014  ARG  NH1', -0.424, (204.644, 215.607, 206.904)), (' c  90  ASP  O  ', ' c  94  TYR  OH ', -0.424, (167.482, 197.045, 322.474)), (' C  91  TYR  OH ', ' C 191  GLU  OE1', -0.423, (260.253, 215.529, 233.758)), (' A 326  ILE HD12', ' A 539  VAL HG21', -0.422, (232.876, 186.189, 231.461)), (' a 159  ASN HD22', ' a 163  LEU HD23', -0.421, (201.872, 234.945, 343.161)), (' C 645  THR  OG1', ' C 646  ARG  N  ', -0.421, (239.518, 245.278, 206.942)), (' B 291  CYS  HB3', ' B 301  CYS  HB2', -0.421, (195.45, 244.345, 217.291)), (' b  19  VAL HG11', ' b 110  LEU HD11', -0.42, (233.21, 237.548, 320.554)), (' A 245  HIS  HA ', ' A 246  ILE  HA ', -0.418, (172.951, 155.993, 238.53)), (' C  24  LEU HD11', ' C  78  ARG  HB3', -0.418, (276.263, 226.471, 246.353)), (' C 147  LYS  HB3', ' C 147  LYS  HE2', -0.415, (289.717, 202.326, 253.098)), (' A 114  THR  OG1', ' A 115  GLN  N  ', -0.414, (188.684, 181.633, 252.691)), (' C 402  ILE HG21', ' C 418  ILE HD13', -0.412, (204.893, 236.344, 266.259)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.411, (249.77, 222.82, 221.364)), (' C 887  THR  HB ', ' C 894  LEU HD12', -0.411, (221.482, 202.956, 167.278)), (' A  99  ASN  ND2', ' A 178  ASP  O  ', -0.41, (172.273, 170.717, 228.159)), (' a 101  LYS  HB3', ' a 101  LYS  HE3', -0.41, (233.78, 218.172, 300.648)), (' b 189  ASP  N  ', ' b 189  ASP  OD1', -0.409, (223.901, 216.319, 365.142)), (' B 644  GLN  HA ', ' B 649  CYS  HA ', -0.408, (179.933, 231.038, 204.376)), (' A 856  ASN HD22', ' A 963  VAL HG13', -0.407, (194.258, 212.992, 218.829)), (' B 865  LEU HD13', ' B 869  MET  HE2', -0.406, (235.0, 238.691, 195.549)), (' C1091  ARG  NH1', ' C1118  ASP  O  ', -0.406, (224.842, 225.826, 148.705)), (' B 212  LEU HD22', ' B 217  PRO  HD3', -0.406, (186.707, 268.282, 225.612)), (' A 656  VAL HG12', ' A 658  ASN  H  ', -0.406, (221.134, 178.553, 191.024)), (' B  99  ASN  HB3', ' B 177  MET  HE2', -0.405, (191.368, 273.951, 239.901)), (' B 853  GLN  HG2', ' B 959  LEU  HB3', -0.404, (219.692, 238.726, 215.47)), (' C 126  VAL  HB ', ' C 172  SER  HB3', -0.404, (259.927, 202.284, 247.794)), (' B 362  VAL HG13', ' B 525  CYS  HB2', -0.404, (175.547, 202.049, 245.293)), (' C 596  SER  HB3', ' C 611  LEU  HB3', -0.404, (241.377, 235.723, 212.417)), (' A 389  ASP  N  ', ' A 389  ASP  OD1', -0.404, (230.685, 193.867, 253.839)), (' B 909  ILE HG13', ' B 911  VAL HG23', -0.403, (214.89, 232.058, 165.169)), (' B 128  ILE  HB ', ' B 170  TYR  HB3', -0.401, (199.636, 262.202, 249.474)), (' B 656  VAL HG12', ' B 658  ASN  H  ', -0.401, (179.663, 238.649, 189.412)), (' A1116  THR HG22', ' A1138  TYR  HB3', -0.4, (224.823, 211.003, 141.389)), (' a   6  GLN  H  ', ' a 109  GLN HE22', -0.4, (216.963, 212.132, 317.085))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
