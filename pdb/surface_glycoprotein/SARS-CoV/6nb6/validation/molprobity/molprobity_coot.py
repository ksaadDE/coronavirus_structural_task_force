# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 600 ', 'ASP', 0.01606257510184062, (244.217, 285.125, 256.03799999999995)), ('A', ' 613 ', 'ASP', 0.0378101922760638, (246.673, 298.19099999999986, 270.737)), ('A', '1081 ', 'GLY', 0.0111503, (250.087, 288.6740000000001, 192.925)), ('B', ' 418 ', 'GLY', 0.08947904795709248, (299.113, 279.124, 312.83599999999996)), ('B', ' 969 ', 'PRO', 0.09987019190888968, (258.3609999999999, 252.39, 289.347)), ('B', '1081 ', 'GLY', 0.03169247850400694, (290.247, 259.342, 191.886)), ('C', ' 926 ', 'ALA', 0.0442090674419405, (238.36100000000008, 258.905, 236.18699999999995)), ('C', ' 969 ', 'PRO', 0.028980225787906027, (258.7949999999999, 273.137, 289.48999999999995))]
data['omega'] = [('A', ' 470 ', 'PRO', None, (241.68, 226.59399999999994, 318.74)), ('A', ' 617 ', 'PRO', None, (253.134, 290.829, 267.619)), ('B', ' 470 ', 'PRO', None, (300.447, 302.4159999999999, 348.5)), ('B', ' 617 ', 'PRO', None, (294.52600000000007, 256.347, 266.68999999999994)), ('C', ' 470 ', 'PRO', None, (281.99, 242.30199999999994, 347.705)), ('C', ' 617 ', 'PRO', None, (244.1710000000001, 237.75600000000006, 267.557)), ('H', ' 108 ', 'PRO', None, (269.403, 252.13799999999995, 335.188)), ('I', ' 108 ', 'PRO', None, (297.989, 283.21999999999997, 343.52899999999994)), ('L', '   8 ', 'PRO', None, (265.9619999999999, 282.36999999999995, 338.63399999999996)), ('L', ' 100 ', 'PRO', None, (274.571, 259.462, 341.29099999999994)), ('M', '   8 ', 'PRO', None, (284.264, 264.449, 363.326)), ('M', ' 100 ', 'PRO', None, (292.86, 284.73499999999996, 352.534))]
data['rota'] = [('A', '  65 ', 'ASN', 0.0, (261.9019999999999, 310.745, 273.688)), ('A', ' 227 ', 'ASN', 0.02244981283457554, (270.008, 299.466, 296.1789999999999)), ('A', '1080 ', 'ASN', 0.27371692949676923, (250.87100000000004, 285.64500000000004, 195.085)), ('B', ' 109 ', 'ASN', 0.04987998674357396, (301.00800000000004, 234.84499999999994, 305.868)), ('B', ' 119 ', 'ASN', 0.0036829039269422833, (300.5400000000001, 217.47700000000003, 293.561)), ('C', '  65 ', 'ASN', 0.0, (224.36900000000006, 234.71, 274.428)), ('C', ' 269 ', 'ASN', 0.0005103935998196095, (222.45200000000006, 266.245, 268.38799999999986)), ('C', ' 691 ', 'ASN', 0.1634967720809606, (259.198, 234.791, 203.83199999999994))]
data['cbeta'] = [('B', ' 926 ', 'ALA', ' ', 0.845690023232534, (277.215, 241.13099999999994, 233.879)), ('B', ' 927 ', 'LEU', ' ', 0.6581210465306465, (273.6930000000001, 241.62599999999995, 236.949)), ('C', ' 926 ', 'ALA', ' ', 0.8982057214390461, (237.44800000000006, 259.655, 235.235)), ('C', ' 927 ', 'LEU', ' ', 0.6245902027197774, (239.98700000000005, 262.531, 237.996))]
data['probe'] = [(' A 793  LYS  NZ ', ' A 795  THR  OG1', -0.654, (292.081, 281.376, 230.199)), (' A 109  ASN  N  ', ' A 109  ASN  OD1', -0.566, (270.432, 309.436, 306.027)), (' A 439  LYS  NZ ', ' A 480  ASP  OD1', -0.561, (242.781, 243.72, 318.441)), (' A 543  LYS  NZ ', ' A 560  ASP  OD2', -0.559, (230.852, 272.651, 269.195)), (' C  78  ASN  N  ', ' C  79  PRO  CD ', -0.546, (216.041, 232.564, 290.26)), (' B  78  ASN  N  ', ' B  79  PRO  CD ', -0.52, (311.924, 232.726, 288.802)), (' A  78  ASN  N  ', ' A  79  PRO  CD ', -0.517, (266.907, 318.42, 289.386)), (' B1080  ASN  CG ', ' B1081  GLY  N  ', -0.513, (287.714, 258.824, 192.063)), (' C 269  ASN  N  ', ' C 269  ASN  OD1', -0.503, (221.816, 265.686, 266.667)), (' B 109  ASN  N  ', ' B 109  ASN  OD1', -0.502, (302.83, 234.534, 305.551)), (' A 807  LYS  NZ ', ' A 923  THR  O  ', -0.497, (276.129, 290.016, 237.548)), (' C1124  GLN  N  ', ' C1125  PRO  CD ', -0.496, (256.941, 255.665, 176.663)), (' A 530  ASN  N  ', ' A 530  ASN  OD1', -0.491, (233.73, 276.124, 285.161)), (' C 109  ASN  N  ', ' C 109  ASN  OD1', -0.488, (224.386, 237.07, 307.116)), (' A 691  ASN  N  ', ' A 691  ASN  OD1', -0.48, (238.909, 279.923, 206.349)), (' B 296  ASP  N  ', ' B 296  ASP  OD1', -0.478, (287.317, 243.559, 248.687)), (' B  78  ASN  N  ', ' B  79  PRO  HD3', -0.475, (312.525, 233.067, 289.059)), (' A1010  LYS  NZ ', ' A1024  PHE  O  ', -0.474, (266.471, 271.211, 226.558)), (' B 310  SER  OG ', ' B 311  GLY  N  ', -0.474, (302.246, 269.528, 276.091)), (' B1052  SER  OG ', ' B1053  GLN  N  ', -0.471, (284.949, 251.226, 209.564)), (' A 296  ASP  N  ', ' A 296  ASP  OD1', -0.47, (266.996, 291.801, 248.994)), (' C  78  ASN  N  ', ' C  79  PRO  HD3', -0.47, (215.418, 232.032, 290.595)), (' C 786  GLN HE21', ' C 917  GLN HE22', -0.467, (229.653, 268.695, 225.197)), (' A1100  ASP  N  ', ' A1100  ASP  OD1', -0.461, (257.759, 267.885, 188.123)), (' C  65  ASN  N  ', ' C  65  ASN  OD1', -0.461, (226.039, 234.449, 274.134)), (' A1080  ASN  O  ', ' A1082  THR  N  ', -0.46, (248.958, 286.376, 192.594)), (' A 356  TYR  HH ', ' A 372  THR  HG1', -0.459, (251.402, 275.414, 298.452)), (' C 778  TYR  HB2', ' C1336  NAG  H81', -0.455, (230.661, 274.113, 213.744)), (' A  78  ASN  N  ', ' A  79  PRO  HD3', -0.447, (266.893, 319.086, 289.617)), (' C 691  ASN  N  ', ' C 691  ASN  OD1', -0.447, (258.574, 233.201, 204.01)), (' A1080  ASN  CG ', ' A1081  GLY  N  ', -0.445, (251.846, 286.761, 193.406)), (' B 539  THR  O  ', ' B 572  ASP  N  ', -0.441, (297.087, 283.038, 268.699)), (' A 310  SER  OG ', ' A 311  GLY  N  ', -0.439, (239.388, 291.554, 278.022)), (' C 769  GLN  N  ', ' C 769  GLN  OE1', -0.431, (251.728, 284.944, 223.58)), (' A 529  PHE  O  ', ' A 531  GLY  N  ', -0.429, (236.597, 275.95, 286.227)), (' C 663  VAL  O  ', ' C 664  SER  C  ', -0.428, (226.757, 228.569, 241.732)), (' B 691  ASN  N  ', ' B 691  ASN  OD1', -0.425, (289.108, 273.159, 203.811)), (' A 281  ASN  HB2', ' A 282  PRO  HD2', -0.425, (258.007, 299.953, 260.648)), (' B 296  ASP  O  ', ' B 297  LYS  HB2', -0.423, (289.69, 244.507, 245.12)), (' B1071  PHE  O  ', ' B1102  THR  OG1', -0.421, (271.969, 269.107, 192.796)), (' A 329  PHE  HB2', ' A1316  NAG  H82', -0.415, (241.37, 268.645, 311.534)), (' B 778  TYR  CD1', ' B1332  NAG  H82', -0.415, (268.627, 229.211, 212.455)), (' C1100  ASP  N  ', ' C1100  ASP  OD1', -0.414, (258.803, 256.36, 188.139)), (' C 529  PHE  O  ', ' C 531  GLY  N  ', -0.414, (267.322, 229.38, 283.861)), (' B 923  THR  OG1', ' B 924  SER  N  ', -0.412, (281.992, 239.379, 235.333)), (' C 310  SER  OG ', ' C 311  GLY  N  ', -0.409, (251.343, 224.739, 276.891)), (' A 296  ASP  O  ', ' A 297  LYS  HB2', -0.407, (265.148, 293.871, 245.728)), (' C 296  ASP  O  ', ' C 297  LYS  HB2', -0.402, (234.919, 248.188, 247.207)), (' A 793  LYS  HZ2', ' A 795  THR  HG1', -0.402, (293.021, 282.358, 230.673)), (' C1059  THR  OG1', ' C1060  ALA  N  ', -0.401, (257.098, 241.442, 198.331)), (' C 923  THR  OG1', ' C 924  SER  N  ', -0.4, (233.762, 256.065, 236.775)), (' A 504  LEU  HG ', ' A 504  LEU  O  ', -0.4, (234.278, 267.898, 285.502)), (' B1010  LYS  NZ ', ' B1024  PHE  O  ', -0.4, (268.857, 254.3, 226.763))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
