# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  45 ', 'SER', 0.03742332961147322, (133.93599999999995, 171.352, 167.40400000000005)), ('A', ' 290 ', 'ASP', 0.03477498027400152, (139.97099999999992, 190.57899999999995, 163.84100000000007)), ('A', ' 402 ', 'ILE', 0.02820221746082091, (185.272, 207.70900000000006, 104.64)), ('A', ' 423 ', 'TYR', 0.033051939704217444, (188.902, 197.87400000000005, 109.14500000000001)), ('A', ' 479 ', 'PRO', 0.05053032877255047, (200.624, 188.63700000000006, 89.724)), ('A', ' 582 ', 'LEU', 0.035172652107480606, (185.614, 212.574, 155.161)), ('A', ' 614 ', 'ASP', 0.03831389811129007, (163.693, 199.396, 174.54600000000005)), ('A', ' 709 ', 'ASN', 0.0, (171.309, 197.49899999999997, 223.23100000000005)), ('B', '  42 ', 'VAL', 0.026357322699638693, (189.84, 198.83899999999997, 153.48300000000006)), ('B', '  47 ', 'VAL', 0.0050287103991838175, (189.392, 194.881, 168.58800000000005)), ('B', ' 364 ', 'ASP', 0.038704245971702154, (198.468, 138.327, 131.473)), ('B', ' 441 ', 'LEU', 0.045902458333902545, (207.467, 128.907, 109.99700000000001)), ('B', ' 468 ', 'ILE', 0.058921049319254556, (181.98699999999997, 128.556, 107.60000000000001)), ('B', ' 476 ', 'GLY', 0.026507941192097016, (171.903, 132.874, 91.06400000000002)), ('B', ' 545 ', 'GLY', 0.056840320991865534, (189.445, 145.047, 148.326)), ('B', ' 604 ', 'THR', 0.01507034142009222, (205.353, 185.00999999999993, 184.99900000000002)), ('B', ' 614 ', 'ASP', 0.03680642907386709, (197.231, 159.458, 174.58)), ('B', ' 709 ', 'ASN', 0.0007260029141946697, (191.726, 153.14, 223.411)), ('C', ' 111 ', 'ASP', 0.04020578415850069, (168.848, 118.894, 130.24500000000003)), ('C', ' 304 ', 'LYS', 0.0437648306010423, (171.209, 140.955, 171.613)), ('C', ' 338 ', 'PHE', 0.016154385374220526, (127.62300000000003, 163.632, 123.65200000000003)), ('C', ' 410 ', 'ILE', 0.00512602, (141.88999999999993, 164.96600000000004, 110.59300000000002)), ('C', ' 536 ', 'ASN', 0.028814054103773745, (133.96699999999993, 149.08400000000003, 161.006)), ('H', '  21 ', 'VAL', 0.011145467546490059, (210.768, 164.5620000000001, 109.124)), ('H', '  45 ', 'ALA', 0.017482623171700993, (207.585, 166.246, 114.779)), ('H', '  92 ', 'ASP', 0.02599308778076349, (216.65599999999998, 155.119, 121.155)), ('H', ' 143 ', 'GLY', 0.012439798576901888, (218.79, 161.147, 104.685)), ('H', ' 235 ', 'VAL', 0.02921471614936804, (242.725, 169.55000000000007, 95.08100000000002)), ('H', ' 236 ', 'ASN', 0.021515377994821207, (241.465, 170.62800000000007, 98.59700000000001)), ('H', ' 248 ', 'VAL', 0.07753468023125526, (245.571, 173.23600000000002, 84.743)), ('L', '  21 ', 'ILE', 0.06869113125839346, (203.817, 147.09600000000003, 94.90600000000002)), ('L', '  47 ', 'SER', 0.04075867644670481, (195.277, 146.86300000000003, 93.10500000000003)), ('L', '  49 ', 'LEU', 0.019123465050527585, (192.885, 151.57300000000004, 94.40800000000003)), ('L', '  56 ', 'ASN', 0.04691554035887026, (193.96299999999997, 154.69, 96.79400000000003)), ('L', '  77 ', 'SER', 0.04157852413567449, (195.86799999999997, 164.49300000000005, 94.89100000000003)), ('L', '  85 ', 'ASP', 0.016783692838810413, (198.809, 174.25300000000004, 93.61700000000002)), ('L', ' 100 ', 'ILE', 0.028710537139197696, (203.79299999999995, 171.292, 85.112)), ('L', ' 104 ', 'GLN', 0.015927501176165534, (211.567, 174.54300000000003, 83.632)), ('L', ' 129 ', 'VAL', 0.0261362259378255, (211.448, 169.809, 83.956)), ('L', ' 131 ', 'ILE', 0.00512602, (216.692, 174.462, 81.746)), ('L', ' 135 ', 'VAL', 0.03245651537344982, (221.47399999999996, 168.887, 72.631)), ('L', ' 163 ', 'ASN', 0.04958172382998369, (226.162, 173.93, 75.82200000000002)), ('M', ' 119 ', 'VAL', 0.0320476676890674, (151.63799999999995, 146.9, 108.605)), ('M', ' 142 ', 'GLN', 0.016294626477843275, (149.832, 131.099, 106.70000000000003)), ('M', ' 184 ', 'PRO', 0.06717578191301551, (137.497, 114.684, 98.23600000000003)), ('M', ' 189 ', 'VAL', 0.007156147031550647, (147.478, 108.96299999999997, 93.33700000000002)), ('M', ' 228 ', 'THR', 0.03216944382034357, (151.837, 95.073, 81.303)), ('M', ' 235 ', 'VAL', 0.010497508270658906, (144.731, 107.56, 95.66700000000003)), ('M', ' 241 ', 'ASN', 0.0349630200130402, (140.743, 110.76, 105.18)), ('M', ' 248 ', 'VAL', 0.00646535232423383, (145.889, 100.168, 86.95)), ('N', '  28 ', 'ASP', 0.022791352331333774, (149.652, 139.219, 83.22)), ('N', '  56 ', 'ASN', 0.028918186921524605, (152.83999999999995, 156.14900000000003, 97.89200000000002)), ('N', ' 103 ', 'LEU', 0.015810915956204968, (165.325, 135.945, 86.21600000000002)), ('N', ' 125 ', 'GLN', 0.02020654707444557, (145.52499999999995, 139.938, 89.271)), ('N', ' 140 ', 'VAL', 0.03911702931313551, (151.512, 110.633, 73.03500000000003)), ('N', ' 153 ', 'GLY', 0.08946822316680832, (132.379, 103.39799999999998, 83.778)), ('N', ' 157 ', 'VAL', 0.03890446827918474, (138.051, 110.35699999999999, 74.96200000000003)), ('N', ' 182 ', 'GLY', 0.02630482291751022, (134.742, 120.649, 72.449)), ('O', '  28 ', 'ASP', 0.018935832405526685, (156.358, 212.153, 85.07300000000002)), ('O', '  85 ', 'ASP', 0.02178158966484482, (149.13099999999994, 195.38000000000008, 93.593)), ('O', ' 100 ', 'ILE', 0.020537806791482857, (149.72499999999994, 199.593, 85.71900000000001)), ('O', ' 108 ', 'VAL', 0.08250145198001499, (146.23199999999997, 205.67500000000007, 89.01500000000003)), ('O', ' 135 ', 'VAL', 0.06656488540000437, (143.12199999999996, 215.776, 72.01200000000001)), ('O', ' 195 ', 'ASP', 0.04093702909136604, (139.717, 208.369, 79.34500000000001)), ('P', '  92 ', 'ASP', 0.03037818008602876, (159.112, 216.26099999999997, 120.22600000000001)), ('P', ' 155 ', 'GLY', 0.039806050802594944, (141.102, 237.532, 96.766)), ('P', ' 218 ', 'VAL', 0.06845826846048125, (133.841, 227.552, 83.462))]
data['omega'] = []
data['rota'] = [('A', ' 121 ', 'ASN', 0.1626887801146204, (117.46499999999999, 187.062, 141.833)), ('A', ' 227 ', 'VAL', 0.14678498405937462, (128.01099999999994, 178.91999999999993, 145.75700000000003)), ('A', ' 273 ', 'ARG', 0.0, (143.29499999999993, 189.904, 157.64900000000003)), ('A', ' 281 ', 'GLU', 0.20364461740823644, (128.94399999999993, 172.79299999999998, 169.38700000000003)), ('A', ' 293 ', 'LEU', 0.11174153971150277, (141.91799999999995, 195.773, 165.146)), ('A', ' 472 ', 'ILE', 0.04592218387276749, (199.044, 196.38000000000005, 96.376)), ('A', ' 542 ', 'ASN', 0.268794324008819, (175.075, 202.135, 150.159)), ('A', ' 572 ', 'THR', 0.011032352591853218, (179.93, 193.657, 162.0)), ('A', ' 615 ', 'VAL', 0.1684379180656891, (162.373, 202.072, 172.066)), ('A', ' 675 ', 'GLN', 0.21599426670321067, (142.79099999999994, 201.829, 189.34000000000006)), ('A', ' 760 ', 'CYS', 0.1269572266688835, (164.52999999999997, 156.62600000000003, 165.15200000000002)), ('A', ' 907 ', 'ASN', 0.22455725585028627, (159.375, 170.124, 221.89100000000002)), ('A', ' 916 ', 'LEU', 0.20799500283781974, (150.47799999999995, 172.379, 224.04700000000005)), ('A', '1004 ', 'LEU', 0.10203295016248647, (160.69699999999997, 165.134, 166.64)), ('B', '  44 ', 'ARG', 0.015245125549159588, (188.707, 199.083, 160.389)), ('B', ' 293 ', 'LEU', 0.1670581155493549, (205.409, 180.094, 165.31500000000003)), ('B', ' 472 ', 'ILE', 0.059820554591721746, (178.967, 126.909, 95.606)), ('B', ' 603 ', 'ASN', 0.26754686231396246, (202.51899999999998, 187.24799999999996, 183.53200000000007)), ('B', ' 604 ', 'THR', 0.06879448864836109, (205.353, 185.00999999999993, 184.99900000000002)), ('B', ' 760 ', 'CYS', 0.24855957099606177, (159.894, 180.218, 164.981)), ('B', ' 764 ', 'ASN', 0.25878386060203196, (160.445, 182.546, 170.85600000000005)), ('B', ' 820 ', 'ASP', 0.12334196717430398, (180.531, 197.621, 195.74100000000007)), ('B', ' 907 ', 'ASN', 0.09999503524469346, (174.034, 177.23399999999998, 222.05800000000002)), ('B', '1004 ', 'LEU', 0.08185721705704474, (169.111, 178.98299999999998, 166.54400000000007)), ('B', '1094 ', 'VAL', 0.005782878873017444, (182.775, 164.11, 228.12700000000004)), ('B', '1130 ', 'ILE', 0.019420813033573847, (184.094, 148.37, 229.07600000000005)), ('B', '1132 ', 'ILE', 0.07676045917169631, (184.84900000000005, 152.598, 233.36900000000006)), ('B', '1135 ', 'ASN', 0.12277516070945274, (186.49100000000007, 158.439, 240.84000000000003)), ('B', '1136 ', 'THR', 0.11263523018286772, (184.84200000000007, 160.31, 243.74200000000002)), ('C', '  60 ', 'SER', 0.23195900443891046, (160.842, 124.20300000000002, 160.09100000000004)), ('C', ' 130 ', 'VAL', 0.057490970229146184, (177.885, 123.63900000000001, 133.745)), ('C', ' 229 ', 'LEU', 0.061120679507011506, (180.584, 130.36800000000002, 140.495)), ('C', ' 231 ', 'ILE', 0.18869842334935583, (178.88799999999998, 134.96, 137.047)), ('C', ' 324 ', 'GLU', 0.08585003438779666, (140.73599999999993, 147.352, 151.34800000000004)), ('C', ' 353 ', 'TRP', 0.1866662027493956, (132.58399999999995, 173.14600000000007, 109.20800000000001)), ('C', ' 376 ', 'THR', 0.28030736100588494, (137.64799999999997, 154.639, 113.55900000000003)), ('C', ' 586 ', 'ASP', 0.057472142408283, (133.68499999999995, 159.18500000000003, 162.35800000000006)), ('C', ' 760 ', 'CYS', 0.13174649185103152, (182.867, 172.065, 165.18600000000006)), ('C', ' 820 ', 'ASP', 0.290713359999517, (187.32899999999998, 145.179, 195.615)), ('C', ' 856 ', 'ASN', 0.08310576063801148, (187.287, 156.97600000000003, 164.73000000000005)), ('C', ' 907 ', 'ASN', 0.1846464951305058, (172.77, 160.852, 222.00600000000003)), ('C', ' 916 ', 'LEU', 0.22319870658237362, (175.36199999999997, 151.976, 224.158)), ('C', '1004 ', 'LEU', 0.07044637438738544, (177.05, 164.743, 166.607)), ('M', '  78 ', 'ILE', 0.07683667251276571, (134.954, 147.45100000000002, 109.16100000000002)), ('M', ' 131 ', 'LEU', 0.1842312754690456, (142.54999999999995, 154.17, 108.17500000000001)), ('N', '  46 ', 'GLN', 0.010900248672229416, (144.15599999999995, 157.216, 90.55400000000002)), ('P', '  77 ', 'THR', 0.008159601566148922, (169.334, 216.013, 112.797)), ('P', ' 126 ', 'SER', 0.2963648807493479, (171.926, 201.218, 120.07000000000002)), ('O', '  48 ', 'VAL', 0.1690425410492872, (171.327, 200.52100000000004, 95.228)), ('O', '  49 ', 'LEU', 0.22298150115393395, (171.692, 196.68100000000007, 95.49800000000002)), ('O', '  56 ', 'ASN', 0.048356357798373675, (168.149, 196.58200000000005, 97.43100000000001)), ('O', '  61 ', 'TYR', 0.00958305527641435, (156.009, 205.41500000000005, 97.43400000000003)), ('H', ' 128 ', 'TYR', 0.04638675205896123, (200.77099999999996, 149.03000000000003, 117.42100000000002)), ('L', '  21 ', 'ILE', 0.2699251099558362, (203.817, 147.09600000000003, 94.90600000000002)), ('L', '  46 ', 'GLN', 0.2711779044779295, (198.112, 146.426, 90.475)), ('L', '  49 ', 'LEU', 0.17958793390184916, (192.885, 151.57300000000004, 94.40800000000003))]
data['cbeta'] = [('A', '1098 ', 'ASN', ' ', 0.2638682536556162, (157.414, 194.194, 231.97800000000004)), ('B', ' 300 ', 'LYS', ' ', 0.3657116845147857, (198.456, 183.623, 173.254)), ('B', ' 571 ', 'ASP', ' ', 0.304272344370604, (180.774, 145.50600000000003, 162.74400000000003)), ('C', '  60 ', 'SER', ' ', 0.32744847673131666, (161.379, 124.98500000000001, 158.85300000000007)), ('C', ' 130 ', 'VAL', ' ', 0.28857734985310896, (177.41099999999997, 124.98600000000003, 134.32800000000003)), ('C', ' 231 ', 'ILE', ' ', 0.3219794476079843, (179.296, 135.85500000000002, 135.838)), ('C', '1041 ', 'ASP', ' ', 0.2600120492940271, (164.298, 158.384, 204.565)), ('L', '  47 ', 'SER', ' ', 0.25998510912259415, (195.308, 145.516, 93.848))]
data['probe'] = [(' P 155  GLY  H  ', ' P 156  PRO  CD ', -0.475, (140.901, 239.23, 97.984)), (' C  81  ASN  N  ', ' C 265  TYR  HH ', -0.473, (165.189, 112.342, 145.713)), (' P 155  GLY  H  ', ' P 156  PRO  HD3', -0.473, (140.509, 239.61, 98.164)), (' B 543  PHE  CG ', ' B 544  ASN  N  ', -0.448, (192.08, 142.126, 150.517)), (' A 714  ILE HD12', ' A1096  VAL HG11', -0.436, (161.465, 187.948, 227.509)), (' B 714  ILE HD12', ' B1096  VAL HG11', -0.425, (188.368, 166.422, 227.78)), (' A 741  TYR  CE1', ' A 966  LEU HD21', -0.412, (154.554, 163.949, 163.294)), (' C 714  ILE HD12', ' C1096  VAL HG11', -0.402, (156.301, 153.934, 227.534))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
