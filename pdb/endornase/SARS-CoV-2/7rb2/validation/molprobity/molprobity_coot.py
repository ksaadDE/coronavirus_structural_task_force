# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 341 ', 'PHE', 0.003504242864948633, (117.3490000000001, 138.092, 139.41200000000003)), ('A', ' 342 ', 'TYR', 0.0, (116.24500000000009, 136.72500000000005, 136.021)), ('C', ' 330 ', 'MET', 0.07736887415575108, (93.563, 140.60899999999998, 76.179)), ('C', ' 340 ', 'THR', 0.009435615356778726, (98.177, 140.343, 70.31300000000006)), ('D', ' 340 ', 'THR', 0.018714681195085073, (131.76, 82.31400000000001, 140.943)), ('F', ' 340 ', 'THR', 0.02118128294393459, (80.961, 82.40800000000003, 70.18200000000003))]
data['cbeta'] = []
data['probe'] = [(' F  65  PRO  HG3', ' F 162  LEU HD12', -0.868, (119.07, 85.033, 77.1)), (' E 266  GLU  HB2', ' E 279  PHE  HB3', -0.783, (91.698, 96.702, 128.64)), (' D 266  GLU  HB2', ' D 279  PHE  HB3', -0.759, (122.057, 98.428, 128.587)), (' B 266  GLU  HB2', ' B 279  PHE  HB3', -0.758, (121.195, 97.122, 81.514)), (' E 257  ARG HH12', ' E 261  SER  HB3', -0.747, (94.915, 94.309, 145.094)), (' F 266  GLU  HB3', ' F 279  PHE  HB3', -0.736, (91.242, 98.9, 81.757)), (' E 235  ILE HG13', ' E 236  VAL HG23', -0.735, (78.532, 100.838, 144.157)), (' F 235  ILE HG13', ' F 236  VAL HG23', -0.733, (88.077, 85.049, 66.023)), (' C 266  GLU  HB2', ' C 279  PHE  HB3', -0.725, (106.869, 123.971, 81.731)), (' F 212  ASP  OD2', ' F 225  TYR  OH ', -0.713, (97.563, 83.022, 54.223)), (' E 135  ARG  O  ', ' E 181  LYS  NZ ', -0.711, (71.8, 135.386, 118.86)), (' F 193  TYR  OH ', ' F 304  GLU  OE2', -0.706, (97.573, 70.658, 67.319)), (' D 257  ARG HH12', ' D 261  SER  HB3', -0.702, (122.126, 102.247, 144.701)), (' D 301  ASP  O  ', ' D 305  ILE HG13', -0.69, (117.907, 76.182, 142.946)), (' A 342  TYR  C  ', ' A 342  TYR  HD1', -0.684, (116.316, 136.565, 133.636)), (' C 330  MET  HE2', ' C 342  TYR  OH ', -0.684, (98.295, 142.339, 77.693)), (' E 213  PHE  O  ', ' E 256  LYS  NZ ', -0.683, (87.384, 103.222, 151.891)), (' E 132  ASP  OD1', ' E 133  LEU  N  ', -0.68, (79.247, 139.955, 118.94)), (' B 102  CYS  SG ', ' B 105  THR  OG1', -0.678, (119.76, 125.887, 100.761)), (' F 332  TRP  HB2', ' F 340  THR HG22', -0.676, (79.03, 80.685, 71.778)), (' F 132  ASP  OD1', ' F 133  LEU  N  ', -0.675, (122.012, 66.479, 91.206)), (' A 266  GLU  HB2', ' A 279  PHE  HB3', -0.675, (105.389, 123.916, 128.664)), (' B 132  ASP  OD1', ' B 133  LEU  N  ', -0.674, (133.395, 139.461, 91.137)), (' A 132  ASP  OD1', ' A 133  LEU  N  ', -0.672, (148.872, 113.066, 118.809)), (' A 135  ARG  O  ', ' A 181  LYS  NZ ', -0.669, (148.9, 121.877, 118.764)), (' F 135  ARG  O  ', ' F 181  LYS  NZ ', -0.665, (114.453, 61.224, 91.583)), (' F 214  LEU  O  ', ' F 256  LYS  NZ ', -0.662, (95.314, 93.825, 58.289)), (' E 212  ASP  OD2', ' E 225  TYR  OH ', -0.658, (81.994, 110.55, 156.006)), (' A 138  ARG  HE ', ' A 183  ASP  HA ', -0.655, (144.323, 127.957, 114.818)), (' B 135  ARG  O  ', ' B 181  LYS  NZ ', -0.651, (141.14, 136.181, 91.656)), (' D 135  ARG  O  ', ' D 181  LYS  NZ ', -0.647, (98.559, 61.622, 119.062)), (' E 265  LEU HD22', ' E 280  ILE HG12', -0.641, (90.101, 98.908, 134.478)), (' C 257  ARG HH12', ' C 261  SER  HB3', -0.636, (111.043, 122.213, 65.479)), (' F 257  ARG HH12', ' F 261  SER  HB3', -0.632, (90.371, 102.239, 65.462)), (' D 213  PHE  O  ', ' D 256  LYS  NZ ', -0.626, (119.022, 91.874, 151.808)), (' A 342  TYR  C  ', ' A 342  TYR  CD1', -0.622, (116.229, 136.929, 133.815)), (' D 330  MET  HG2', ' D 342  TYR  CZ ', -0.609, (131.796, 80.06, 132.92)), (' B 301  ASP  O  ', ' B 305  ILE HG13', -0.609, (139.211, 111.141, 68.069)), (' E 301  ASP  O  ', ' E 305  ILE HG13', -0.607, (74.262, 111.184, 143.044)), (' D 332  TRP  HB2', ' D 340  THR HG22', -0.607, (134.115, 80.908, 138.539)), (' D 212  ASP  OD2', ' D 225  TYR  OH ', -0.599, (114.948, 82.967, 156.122)), (' A 301  ASP  O  ', ' A 305  ILE HG13', -0.598, (126.759, 132.116, 142.722)), (' B 334  LYS  O  ', ' B 337  HIS  ND1', -0.588, (146.533, 92.96, 62.814)), (' C 213  PHE  O  ', ' C 256  LYS  NZ ', -0.583, (100.167, 124.512, 58.566)), (' A 212  ASP  OD2', ' A 225  TYR  OH ', -0.581, (122.388, 125.43, 156.338)), (' F 334  LYS  O  ', ' F 337  HIS  ND1', -0.577, (74.582, 79.014, 63.719)), (' A 342  TYR  CD1', ' A 342  TYR  O  ', -0.573, (116.568, 137.209, 133.37)), (' B 126  ARG  HG2', ' B 145  GLU  HG2', -0.572, (126.108, 135.225, 79.155)), (' C 265  LEU HD22', ' C 280  ILE HG12', -0.572, (104.95, 124.492, 75.862)), (' C  39  ASP  O  ', ' F  90  ARG  NH1', -0.564, (103.424, 90.101, 93.871)), (' F 244  GLN  NE2', ' F 289  LYS  HG3', -0.563, (81.18, 93.676, 77.676)), (' D 330  MET  HG2', ' D 342  TYR  OH ', -0.555, (132.144, 79.864, 132.675)), (' B 257  ARG  HD2', ' B 257  ARG  O  ', -0.551, (119.766, 97.008, 65.391)), (' E 198  ARG HH21', ' E 203  PHE  HZ ', -0.547, (86.946, 110.017, 143.833)), (' F 301  ASP  O  ', ' F 305  ILE HG12', -0.545, (94.352, 75.834, 67.728)), (' F 317  VAL HG22', ' F 330  MET  HG3', -0.545, (81.515, 76.885, 78.518)), (' B 212  ASP  OD2', ' B 225  TYR  OH ', -0.541, (130.967, 110.634, 54.2)), (' F 138  ARG  NH1', ' F 183  ASP  HA ', -0.541, (106.601, 62.509, 96.223)), (' D 148  VAL HG13', ' D 151  LEU  HB2', -0.538, (96.101, 62.764, 129.548)), (' C 332  TRP  HB2', ' C 340  THR HG22', -0.537, (97.747, 142.387, 72.068)), (' D 209  MET  HE3', ' D 300  ASP  OD1', -0.536, (114.776, 79.74, 150.196)), (' A 271  MET  O  ', ' A 276  LYS  NZ ', -0.533, (117.3, 120.995, 127.216)), (' C 330  MET  SD ', ' C 344  LYS  NZ ', -0.531, (94.483, 142.088, 80.465)), (' C  74  ASN  ND2', ' C 323  ASP  O  ', -0.531, (83.569, 126.278, 81.557)), (' D 198  ARG  HD3', ' D 206  ARG HH11', -0.531, (107.529, 86.759, 142.644)), (' A 342  TYR  HD1', ' A 342  TYR  O  ', -0.528, (116.63, 136.957, 133.359)), (' B 317  VAL HG22', ' B 330  MET  SD ', -0.525, (145.219, 100.163, 78.669)), (' A  90  ARG  NH1', ' E  39  ASP  O  ', -0.525, (119.29, 117.612, 117.068)), (' B 271  MET  O  ', ' B 276  LYS  NZ ', -0.524, (124.052, 108.698, 83.402)), (' A 148  VAL HG13', ' A 151  LEU  HB2', -0.523, (149.107, 119.65, 129.276)), (' B 189  LEU HD12', ' B 324  TYR  HD2', -0.515, (139.209, 122.508, 81.012)), (' A 332  TRP  O  ', ' A 339  GLU  N  ', -0.515, (115.32, 143.262, 142.348)), (' C 135  ARG  O  ', ' C 181  LYS  NZ ', -0.514, (63.634, 121.192, 91.477)), (' F 273  SER  OG ', ' F 275  VAL  O  ', -0.513, (96.545, 85.518, 82.834)), (' F 195  THR HG22', ' F 197  SER  H  ', -0.511, (102.194, 84.117, 74.219)), (' A 265  LEU HD22', ' A 280  ILE HG12', -0.51, (107.912, 124.661, 134.391)), (' A 199  ASN  OD1', ' A 200  LEU  N  ', -0.508, (113.984, 116.591, 137.991)), (' A 234  HIS  O  ', ' A 247  GLY  HA3', -0.507, (110.721, 134.256, 141.344)), (' E 330  MET  SD ', ' E 344  LYS  HD3', -0.507, (70.878, 98.527, 130.451)), (' C 330  MET  SD ', ' C 342  TYR  HE1', -0.504, (96.656, 140.764, 78.633)), (' F 209  MET  HE3', ' F 300  ASP  OD1', -0.504, (97.733, 79.697, 60.371)), (' F 193  TYR  C  ', ' F 322  ILE HD12', -0.503, (99.915, 76.177, 74.025)), (' D 230  TYR  HE1', ' D 311  LEU HD11', -0.503, (129.037, 74.751, 147.819)), (' C 125  GLY  HA3', ' C 144  THR HG22', -0.498, (68.49, 112.542, 82.576)), (' A 334  LYS  O  ', ' A 337  HIS  ND1', -0.494, (114.561, 147.581, 147.279)), (' D 230  TYR  HA ', ' D 338  VAL  HB ', -0.494, (130.391, 79.198, 146.816)), (' F 330  MET  SD ', ' F 344  LYS  HD3', -0.492, (82.159, 79.366, 80.135)), (' D 189  LEU HD12', ' D 324  TYR  HD1', -0.489, (109.23, 70.095, 129.697)), (' F 289  LYS  HB3', ' F 292  CYS  SG ', -0.489, (85.466, 94.09, 77.108)), (' F 231  ALA  O  ', ' F 235  ILE HG12', -0.487, (84.812, 84.523, 65.371)), (' B 252  ILE HD13', ' B 299  LEU HD22', -0.486, (128.666, 107.386, 63.215)), (' B 199  ASN  OD1', ' B 200  LEU  N  ', -0.485, (118.258, 108.122, 73.121)), (' E 138  ARG  NH1', ' E 183  ASP  HA ', -0.485, (68.232, 128.046, 114.302)), (' A  39  ASP  O  ', ' D  90  ARG  NH1', -0.48, (109.381, 89.833, 116.918)), (' D 138  ARG  NH1', ' D 183  ASP  HA ', -0.48, (106.372, 62.653, 114.437)), (' A 202  GLU  N  ', ' A 202  GLU  OE1', -0.479, (114.17, 112.933, 140.197)), (' A 252  ILE HD13', ' A 299  LEU HD22', -0.478, (118.584, 125.668, 147.547)), (' D 206  ARG  N  ', ' D 210  GLU  OE1', -0.478, (109.45, 85.737, 147.112)), (' A 289  LYS  HB3', ' A 292  CYS  SG ', -0.476, (106.415, 130.479, 133.598)), (' F 198  ARG  HD3', ' F 206  ARG HH11', -0.476, (105.018, 86.95, 68.134)), (' F 330  MET  HB3', ' F 342  TYR  CE1', -0.476, (81.952, 80.94, 77.039)), (' D 234  HIS  O  ', ' D 247  GLY  HA3', -0.475, (128.025, 88.867, 141.355)), (' E 321  THR  OG1', ' E 326  GLU  OE1', -0.475, (68.904, 114.706, 132.428)), (' E 148  VAL HG13', ' E 151  LEU  HB2', -0.475, (73.421, 136.642, 129.506)), (' E 223  GLU  O  ', ' E 226  LYS  HD2', -0.474, (74.998, 104.488, 158.825)), (' C 199  ASN  OD1', ' C 200  LEU  N  ', -0.474, (98.831, 115.978, 72.755)), (' C   0  MET  HE2', ' C 102  CYS  SG ', -0.474, (82.025, 102.469, 103.649)), (' E 219  ASP  O  ', ' E 223  GLU  OE1', -0.474, (79.492, 99.624, 158.177)), (' A 232  PHE  HZ ', ' A 303  VAL HG12', -0.473, (120.632, 132.22, 147.849)), (' F 330  MET  SD ', ' F 342  TYR  HE1', -0.473, (81.641, 80.5, 78.726)), (' D  74  ASN  ND2', ' D 323  ASP  O  ', -0.472, (112.003, 76.646, 129.328)), (' B  90  ARG  NH1', ' F  39  ASP  O  ', -0.472, (122.298, 111.53, 94.104)), (' E 269  ILE HG22', ' E 271  MET  HG2', -0.471, (87.596, 107.039, 122.854)), (' D  39  ASP  O  ', ' E  90  ARG  NH1', -0.471, (90.439, 112.005, 116.916)), (' F 219  ASP  O  ', ' F 223  GLU  OE1', -0.47, (86.953, 86.653, 52.773)), (' F  74  ASN  ND2', ' F 323  ASP  O  ', -0.47, (100.618, 76.699, 81.598)), (' F 196  GLN  HB2', ' F 296  ASP  OD2', -0.469, (101.422, 84.899, 71.456)), (' B  71  ILE  O  ', ' B  75  LEU HD23', -0.466, (133.351, 121.088, 83.83)), (' C 216  LEU  HB3', ' C 220  GLU  HB2', -0.466, (99.22, 127.309, 52.587)), (' E 199  ASN  OD1', ' E 200  LEU  N  ', -0.465, (93.986, 108.172, 137.8)), (' B 330  MET  HG2', ' B 342  TYR  OH ', -0.464, (141.888, 96.899, 78.438)), (' E 252  ILE HD13', ' E 299  LEU HD22', -0.464, (84.028, 107.562, 147.612)), (' F  53  VAL HG22', ' F 104  MET  SD ', -0.463, (116.94, 90.314, 103.882)), (' A 230  TYR  HE1', ' A 311  LEU HD21', -0.463, (122.256, 142.417, 147.358)), (' A 189  LEU HD12', ' A 324  TYR  HD1', -0.462, (136.454, 126.912, 129.739)), (' C 180  LYS  HB3', ' C 189  LEU HD21', -0.461, (72.346, 125.324, 84.381)), (' E 189  LEU HD12', ' E 324  TYR  HD1', -0.46, (73.939, 122.135, 130.036)), (' F 218  MET  O  ', ' F 222  ILE HG13', -0.46, (87.84, 87.681, 56.615)), (' F 189  LEU HD12', ' F 324  TYR  HD1', -0.459, (103.455, 70.217, 80.899)), (' A 156  GLY  HA3', ' A 178  TYR  CE1', -0.458, (135.869, 119.312, 133.192)), (' C 148  VAL HG13', ' C 151  LEU  HB2', -0.458, (63.629, 119.614, 81.535)), (' A  74  ASN  ND2', ' A 323  ASP  O  ', -0.457, (129.48, 125.958, 129.095)), (' C 234  HIS  O  ', ' C 247  GLY  HA3', -0.456, (102.25, 134.175, 69.536)), (' B 289  LYS  HB3', ' B 292  CYS  SG ', -0.455, (127.364, 94.863, 77.176)), (' E 231  ALA  O  ', ' E 235  ILE HG12', -0.455, (76.644, 98.831, 145.269)), (' B 234  HIS  O  ', ' B 247  GLY  HA3', -0.454, (132.194, 96.112, 69.082)), (' B 113  GLU  HG2', ' B 115  ILE HG22', -0.453, (132.82, 129.456, 105.292)), (' E 139  ASN  HA ', ' E 181  LYS  O  ', -0.453, (72.268, 128.277, 118.217)), (' B 148  VAL HG13', ' B 151  LEU  HB2', -0.452, (138.873, 136.922, 81.405)), (' B 206  ARG  N  ', ' B 210  GLU  OE1', -0.452, (125.44, 113.503, 63.461)), (' F 310  ASP  HB3', ' F 316  LYS  NZ ', -0.452, (81.436, 70.323, 69.871)), (' D 311  LEU  HB3', ' D 336  GLY  O  ', -0.452, (134.567, 73.472, 147.397)), (' D 108  ALA  HB3', ' D 116  CYS  SG ', -0.451, (98.324, 73.623, 108.85)), (' C 329  PHE  HB3', ' C 341  PHE  CE1', -0.451, (91.052, 137.903, 73.699)), (' D 321  THR  OG1', ' D 326  GLU  OE2', -0.451, (117.608, 70.177, 132.583)), (' D 325  THR HG23', ' D 327  ILE HD11', -0.45, (116.67, 77.277, 129.953)), (' C 189  LEU HD12', ' C 324  TYR  HD1', -0.45, (76.102, 126.746, 81.16)), (' B 222  ILE HG23', ' B 227  LEU  HB2', -0.449, (136.579, 101.368, 57.859)), (' D   0  MET  HE2', ' D 102  CYS  SG ', -0.448, (90.938, 87.554, 106.925)), (' F 206  ARG  N  ', ' F 210  GLU  OE1', -0.448, (103.042, 86.169, 63.453)), (' A 104  MET  HG2', ' F  23  PRO  HB3', -0.448, (128.435, 105.277, 103.085)), (' A 235  ILE HD13', ' A 341  PHE  HB2', -0.446, (117.449, 136.77, 141.896)), (' A 135  ARG HH22', ' A 149  LYS  HZ3', -0.446, (152.6, 115.253, 126.964)), (' C 301  ASP  O  ', ' C 305  ILE HG23', -0.444, (85.361, 132.132, 68.134)), (' D 331  LEU HD12', ' D 340  THR  O  ', -0.444, (130.907, 79.164, 140.407)), (' F 210  GLU  OE2', ' F 298  LEU HD12', -0.444, (101.211, 83.005, 65.453)), (' D 102  CYS  SG ', ' D 104  MET  HE2', -0.443, (92.566, 87.485, 107.968)), (' B  64  LYS  O  ', ' B  66  VAL HG13', -0.443, (120.883, 127.507, 83.071)), (' E 332  TRP  O  ', ' E 339  GLU  N  ', -0.442, (69.858, 95.862, 142.493)), (' C 206  ARG  N  ', ' C 210  GLU  OE1', -0.441, (90.411, 119.459, 63.152)), (' F 240  PHE  CE1', ' F 257  ARG  HD3', -0.441, (87.753, 96.717, 66.528)), (' E  53  VAL HG22', ' E 104  MET  SD ', -0.441, (97.424, 123.148, 107.131)), (' D 143  ILE  O  ', ' D 143  ILE HG13', -0.44, (96.232, 73.626, 127.969)), (' F 148  VAL HG13', ' F 151  LEU  HB2', -0.44, (116.595, 62.88, 81.601)), (' D 317  VAL HG22', ' D 330  MET  SD ', -0.438, (131.451, 75.965, 131.965)), (' E 320  VAL  O  ', ' E 327  ILE  N  ', -0.437, (71.848, 111.113, 131.779)), (' F 108  ALA  HB3', ' F 116  CYS  SG ', -0.437, (114.804, 73.839, 102.333)), (' C 325  THR HG23', ' C 327  ILE HD11', -0.437, (85.963, 129.934, 81.262)), (' D 153  PRO  HB2', ' D 177  ASN  HB3', -0.437, (99.484, 67.728, 133.7)), (' F 192  THR HG23', ' F 194  PHE  CE1', -0.436, (102.912, 73.021, 75.649)), (' B 330  MET  HB3', ' B 342  TYR  CE1', -0.434, (140.596, 98.897, 77.297)), (' E 138  ARG HH12', ' E 183  ASP  HA ', -0.434, (67.978, 128.037, 114.328)), (' C 149  LYS  C  ', ' C 149  LYS  HD3', -0.433, (58.321, 118.9, 81.277)), (' F 316  LYS  HZ3', ' F 331  LEU HD23', -0.432, (81.587, 73.21, 70.879)), (' B 144  THR HG22', ' B 146  GLY  H  ', -0.432, (131.496, 136.475, 78.34)), (' C 230  TYR  HA ', ' C 338  VAL  HB ', -0.431, (94.741, 140.482, 63.773)), (' B 329  PHE  HB3', ' B 341  PHE  CE1', -0.431, (141.761, 103.932, 73.419)), (' A 219  ASP  O  ', ' A 223  GLU  HG2', -0.431, (113.988, 132.435, 158.788)), (' F  34  LYS  NZ ', ' F  39  ASP  OD1', -0.43, (125.045, 111.563, 99.847)), (' F 234  HIS  O  ', ' F 247  GLY  HA3', -0.429, (84.465, 88.844, 69.621)), (' F 252  ILE HD13', ' F 299  LEU HD22', -0.429, (95.955, 86.093, 63.253)), (' A 206  ARG  N  ', ' A 210  GLU  OE1', -0.429, (122.604, 119.274, 147.061)), (' D 220  GLU  O  ', ' D 223  GLU  HG3', -0.427, (123.806, 85.787, 159.224)), (' A 125  GLY  HA3', ' A 144  THR HG22', -0.427, (143.916, 112.682, 128.088)), (' A 257  ARG  HD2', ' A 257  ARG  O  ', -0.426, (105.178, 122.941, 145.298)), (' F 193  TYR  CE2', ' F 305  ILE HD11', -0.425, (95.419, 73.405, 70.091)), (' F 149  LYS  C  ', ' F 149  LYS  HD3', -0.425, (119.353, 58.363, 81.37)), (' A   0  MET  HE2', ' A 102  CYS  SG ', -0.424, (130.347, 102.733, 107.296)), (' C 321  THR  OG1', ' C 326  GLU  OE1', -0.424, (80.487, 134.555, 78.635)), (' A 192  THR HG23', ' A 194  PHE  CE1', -0.424, (133.286, 125.62, 135.325)), (' E 196  GLN  HB2', ' E 296  ASP  OD2', -0.424, (85.477, 113.23, 139.873)), (' E  74  ASN  ND2', ' E 323  ASP  O  ', -0.422, (77.743, 116.393, 129.249)), (' C 156  GLY  HA3', ' C 178  TYR  CE1', -0.42, (76.842, 119.351, 77.35)), (' D 233  GLU  HA ', ' D 237  TYR  HB2', -0.42, (127.407, 89.658, 147.915)), (' F 126  ARG  HG2', ' F 145  GLU  HG2', -0.42, (121.442, 74.874, 79.118)), (' E 319  LYS  HE3', ' E 326  GLU  HB3', -0.419, (68.925, 111.292, 129.834)), (' B   4  ASN  HA ', ' B  20  GLY  O  ', -0.419, (103.688, 133.444, 98.965)), (' E 329  PHE  HB3', ' E 341  PHE  CE1', -0.419, (71.03, 103.83, 137.663)), (' B 339  GLU  HG2', ' B 340  THR HG23', -0.418, (140.832, 93.082, 69.855)), (' E  99  ILE HD13', ' E 111  PRO  HA ', -0.418, (82.144, 131.372, 112.33)), (' B  53  VAL HG22', ' B 104  MET  SD ', -0.417, (115.428, 123.185, 103.899)), (' C   0  MET  HE1', ' C 104  MET  HE3', -0.417, (83.931, 101.836, 105.517)), (' F 125  GLY  HA3', ' F 144  THR HG22', -0.417, (119.682, 70.805, 82.871)), (' C 212  ASP  OD2', ' C 225  TYR  OH ', -0.417, (90.501, 125.863, 54.192)), (' B 219  ASP  O  ', ' B 220  GLU  C  ', -0.417, (131.635, 101.1, 53.238)), (' E 156  GLY  HA3', ' E 178  TYR  CE1', -0.416, (80.56, 125.513, 133.272)), (' A 271  MET  HB2', ' A 271  MET  HE3', -0.416, (120.22, 120.496, 122.821)), (' E 145  GLU  OE2', ' E 173  LYS  HE3', -0.416, (85.697, 133.287, 137.078)), (' F 193  TYR  O  ', ' F 194  PHE  HD1', -0.416, (101.613, 75.32, 75.11)), (' C 126  ARG  HG2', ' C 145  GLU  HG2', -0.415, (71.397, 109.325, 79.209)), (' B 210  GLU  OE2', ' B 298  LEU HD12', -0.415, (128.988, 113.236, 65.244)), (' F   4  ASN  HA ', ' F  20  GLY  O  ', -0.415, (131.174, 95.067, 98.931)), (' C 192  THR  HB ', ' C 321  THR HG22', -0.414, (79.68, 130.116, 77.463)), (' F 289  LYS  HD3', ' F 292  CYS  SG ', -0.414, (85.653, 92.708, 77.194)), (' C 276  LYS  HB3', ' C 276  LYS  HE3', -0.414, (97.483, 123.402, 81.159)), (' D 330  MET  HB3', ' D 342  TYR  CE1', -0.412, (130.037, 80.775, 133.49)), (' E 234  HIS  O  ', ' E 247  GLY  HA3', -0.412, (80.379, 96.104, 141.618)), (' A   0  MET  SD ', ' A   1  SER  N  ', -0.412, (129.959, 98.248, 107.642)), (' E 319  LYS  HE3', ' E 326  GLU  CB ', -0.412, (68.965, 111.538, 129.361)), (' B 121  VAL HG12', ' B 122  PHE  N  ', -0.411, (131.205, 128.629, 92.372)), (' A 325  THR HG23', ' A 327  ILE HD11', -0.411, (126.759, 130.054, 129.772)), (' F 329  PHE  CE1', ' F 343  PRO  HG3', -0.411, (89.478, 81.915, 74.993)), (' B   0  MET  SD ', ' B   1  SER  N  ', -0.41, (110.892, 131.225, 103.428)), (' A  65  PRO  HG2', ' A 172  VAL HG21', -0.41, (133.996, 105.947, 134.403)), (' F 329  PHE  HB3', ' F 341  PHE  CE1', -0.41, (86.572, 77.07, 73.322)), (' C 277  ASN  HB3', ' C 291  VAL HG23', -0.41, (101.086, 129.098, 82.995)), (' E 329  PHE  CE1', ' E 343  PRO  HG3', -0.41, (76.706, 104.106, 136.074)), (' B  35  VAL HG12', ' B  36 BASP  OD1', -0.409, (91.824, 124.849, 91.159)), (' A 331  LEU  HB2', ' A 341  PHE  CE1', -0.408, (121.432, 140.256, 138.863)), (' A   1  SER  OG ', ' A   2  LEU  N  ', -0.407, (127.228, 94.982, 107.66)), (' C 200  LEU HD21', ' C 254  LEU  HB3', -0.407, (100.766, 121.557, 71.111)), (' A 182  VAL  O  ', ' A 185  VAL HG12', -0.407, (145.314, 129.761, 119.484)), (' C 108  ALA  HB3', ' C 116  CYS  SG ', -0.406, (73.853, 115.323, 102.272)), (' B 319  LYS  HE3', ' B 326  GLU  HB3', -0.405, (143.917, 111.102, 80.833)), (' E   0  MET  HE2', ' E 102  CYS  SG ', -0.405, (97.502, 129.164, 107.268)), (' E 241  SER  OG ', ' E 242  HIS  ND1', -0.404, (82.93, 85.943, 143.523)), (' D 192  THR HG23', ' D 194  PHE  CE1', -0.404, (109.471, 73.314, 135.4)), (' D 189  LEU HD12', ' D 324  TYR  CD1', -0.403, (108.784, 70.373, 130.082)), (' E 277  ASN  HB3', ' E 291  VAL HG23', -0.403, (83.979, 99.528, 128.24)), (' F 156  GLY  HA3', ' F 178  TYR  HE1', -0.403, (110.254, 74.597, 77.3)), (' E 342  TYR  HA ', ' E 343  PRO  HD3', -0.403, (76.661, 100.644, 136.8)), (' E 159  GLN  N  ', ' E 159  GLN  OE1', -0.402, (85.798, 121.782, 137.962)), (' F 306  ILE  HA ', ' F 306  ILE HD12', -0.402, (87.551, 75.778, 67.677)), (' D 156  GLY  HA3', ' D 178  TYR  CE1', -0.401, (102.764, 74.138, 133.713)), (' C  65  PRO  O  ', ' C 126  ARG  NH1', -0.401, (77.383, 109.315, 80.858)), (' B 216  LEU  HB3', ' B 220  GLU  HB2', -0.401, (127.87, 102.197, 53.115)), (' C 342  TYR  HA ', ' C 343  PRO  HD3', -0.401, (96.742, 134.848, 74.517)), (' C 302  PHE  HA ', ' C 305  ILE HG12', -0.401, (87.793, 132.333, 68.572)), (' B 156  GLY  HA3', ' B 178  TYR  CE1', -0.4, (132.463, 126.091, 77.471)), (' C   1  SER  HB2', ' D   1  SER  HB2', -0.4, (85.472, 93.787, 105.438)), (' D 212  ASP  O  ', ' D 216  LEU  HB2', -0.4, (117.722, 89.222, 155.346)), (' A 156  GLY  HA3', ' A 178  TYR  HE1', -0.4, (135.81, 118.806, 133.377))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
