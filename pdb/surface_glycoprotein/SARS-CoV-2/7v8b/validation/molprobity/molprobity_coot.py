# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 332 ', 'ILE', 0.04256824954480628, (182.45301, 198.32201, 231.53200999999996))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' F 188  ASN  HB3', ' F 192  ARG HH12', -0.84, (195.354, 204.12, 319.277)), (' F 188  ASN  HB3', ' F 192  ARG  NH1', -0.71, (195.27, 203.383, 318.49)), (' F 284  PRO  HG3', ' F 440  LEU HD13', -0.705, (189.52, 246.86, 304.775)), (' F  47  SER  HA ', ' F  62  MET  HE2', -0.685, (173.517, 207.547, 292.423)), (' F 398  GLU  HB2', ' F 514  ARG  HE ', -0.623, (191.948, 216.27, 299.866)), (' F 157  ASP  HB3', ' F 160  GLU  HG2', -0.616, (170.558, 238.244, 318.785)), (' F 177  ARG  NH1', ' F 495  GLU  O  ', -0.6, (183.519, 216.171, 328.642)), (' F 116  LEU HD13', ' F 186  LEU HD23', -0.598, (184.8, 201.172, 315.811)), (' F 161  ARG HH22', ' F 268  GLY  HA2', -0.589, (177.974, 236.575, 312.727)), (' F 374  HIS  HE1', ' F 406  GLU  HG2', -0.578, (188.703, 226.485, 294.29)), (' F 169  ARG HH11', ' F 270  MET  HE3', -0.572, (178.548, 226.321, 318.103)), (' D   1  NAG  H3 ', ' D   1  NAG  H83', -0.558, (198.862, 191.813, 303.595)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.558, (182.723, 197.592, 262.263)), (' F 271  TRP  NE1', ' F 502  SER  O  ', -0.552, (179.861, 222.847, 314.473)), (' F 145  GLU  HB2', ' F 146  PRO  HD2', -0.54, (167.89, 224.657, 305.559)), (' F 161  ARG  NH1', ' F 265  HIS  O  ', -0.531, (178.275, 235.722, 316.624)), (' F 334  THR HG22', ' F 335  ASP  HB2', -0.521, (167.569, 226.587, 284.633)), (' F 374  HIS  CE1', ' F 406  GLU  HG2', -0.52, (188.394, 226.409, 293.706)), (' A 392  PHE  HD1', ' A 517  LEU HD12', -0.508, (199.772, 194.531, 241.514)), (' F 315  PHE  HD1', ' F 320  LEU HD12', -0.504, (192.424, 225.638, 280.889)), (' F 259  ILE  HA ', ' F 603  PHE  HZ ', -0.502, (194.91, 245.245, 325.459)), (' F  84  PRO  O  ', ' F  86  GLN  N  ', -0.499, (207.423, 192.84, 297.556)), (' F 297  MET  HE1', ' F 307  ILE HD11', -0.494, (175.934, 235.338, 283.937)), (' A 349  SER  OG ', ' A 452  ARG  O  ', -0.487, (186.895, 190.609, 269.25)), (' F 457  GLU  HG2', ' F 513  ILE HD13', -0.487, (196.035, 219.054, 309.867)), (' A 485  GLY  H  ', ' A 488  CYS  HB2', -0.484, (193.361, 179.814, 286.451)), (' A 502  GLY  O  ', ' A 506  GLN  HG2', -0.484, (183.577, 207.707, 271.4)), (' F  55  THR HG21', ' F2001  NAG  H62', -0.479, (162.352, 207.95, 289.08)), (' F 592  PHE  O  ', ' F 596  LYS  HG3', -0.478, (201.399, 247.144, 307.483)), (' A 382  VAL HG21', ' A 387  LEU HD13', -0.476, (197.214, 201.635, 244.025)), (' F 213  ASP  OD1', ' F 214  GLY  N  ', -0.476, (217.207, 211.282, 296.789)), (' F 579  MET  HG3', ' F 579  MET  O  ', -0.475, (205.541, 224.724, 303.021)), (' F  67  ASP  OD1', ' F  68  LYS  N  ', -0.471, (176.46, 196.262, 295.093)), (' F 292  ASP  HA ', ' F 366  MET  HE1', -0.47, (180.101, 242.272, 290.608)), (' F 552  GLN  NE2', ' F 556  ASN  OD1', -0.469, (204.081, 220.885, 278.341)), (' F 258  PRO  HG2', ' F 259  ILE HD12', -0.465, (192.053, 247.175, 327.208)), (' F 269  ASP  OD1', ' F 270  MET  N  ', -0.461, (179.019, 229.88, 312.253)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.459, (195.3, 193.15, 268.862)), (' F 108  LEU HD11', ' F 190  MET  HB2', -0.458, (189.541, 198.994, 313.477)), (' F 455  MET  HB2', ' F 484  ILE HG21', -0.457, (194.893, 226.668, 316.452)), (' A 517  LEU  O  ', ' A 517  LEU HD23', -0.454, (202.814, 189.94, 240.769)), (' F 252  TYR  HE2', ' F 266  LEU HD22', -0.453, (178.792, 240.254, 319.149)), (' F 208  GLU  OE2', ' F 219  ARG  NH1', -0.447, (204.886, 206.281, 306.038)), (' F 455  MET  HB3', ' F 455  MET  HE3', -0.447, (192.053, 225.819, 316.347)), (' F 528  ALA  HB2', ' F 574  VAL HG12', -0.446, (205.397, 228.402, 291.217)), (' F  20  THR HG23', ' F  22  GLU  H  ', -0.445, (209.192, 189.368, 288.255)), (' F  85  LEU HD12', ' F  88  ILE HD12', -0.445, (205.147, 194.993, 294.285)), (' F 263  PRO  HD2', ' F 266  LEU HD12', -0.442, (183.345, 239.298, 321.203)), (' A 377  PHE  CD1', ' A 434  ILE HG12', -0.437, (189.915, 203.951, 252.544)), (' F 261  CYS  SG ', ' F 488  VAL HG13', -0.436, (190.01, 235.81, 324.092)), (' F 169  ARG  NH1', ' F 270  MET  HE3', -0.43, (178.995, 226.17, 318.122)), (' F 119  ILE  HA ', ' F 122  THR HG22', -0.43, (177.026, 204.754, 316.076)), (' F 564  GLU  HB3', ' F 568  LEU HD23', -0.429, (207.453, 212.886, 289.404)), (' F 123  MET  HG3', ' F 176  LEU HD11', -0.427, (178.401, 211.702, 316.827)), (' A 392  PHE  CD1', ' A 517  LEU HD12', -0.427, (199.899, 194.763, 241.525)), (' F  74  LYS  HA ', ' F  74  LYS  HD2', -0.425, (188.397, 194.207, 299.037)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.425, (189.049, 190.853, 255.949)), (' F 206  ASP  N  ', ' F 206  ASP  OD1', -0.423, (198.75, 210.912, 303.613)), (' F 589  GLU  HB3', ' F 590  PRO  HD3', -0.421, (201.118, 244.233, 298.719)), (' F 309  LYS  O  ', ' F 313  LYS  HG3', -0.421, (183.759, 231.148, 275.397)), (' F 168  TRP  CD1', ' F 270  MET  HE2', -0.42, (176.148, 225.223, 317.662)), (' F 315  PHE  HZ ', ' F 408  MET  HG3', -0.417, (189.77, 227.25, 284.984)), (' F  67  ASP  O  ', ' F  71  ALA  N  ', -0.416, (181.041, 195.71, 296.272)), (' F 478  TRP  O  ', ' F 482  ARG  HG3', -0.416, (191.414, 228.987, 325.254)), (' F 131  LYS  HB2', ' F 141  CYS  HB3', -0.414, (164.41, 220.994, 316.964)), (' A 444  LYS  O  ', ' A 499  PRO  HD3', -0.413, (174.687, 201.542, 275.004)), (' F 116  LEU  O  ', ' F 119  ILE HG22', -0.411, (180.874, 203.001, 314.55)), (' F 168  TRP  HE1', ' F 502  SER  HB2', -0.41, (177.199, 221.892, 316.657)), (' F 156  LEU  HA ', ' F 156  LEU HD12', -0.407, (174.471, 241.685, 315.485)), (' F  53  ASN  CG ', ' F 340  GLN HE22', -0.406, (163.891, 212.19, 286.992)), (' F 471  ASP  N  ', ' F 471  ASP  OD1', -0.406, (191.408, 213.492, 331.254)), (' F 248  LEU  HA ', ' F 248  LEU HD23', -0.406, (182.327, 245.033, 316.24)), (' F 268  GLY  O  ', ' F 277  ASN  ND2', -0.405, (178.742, 234.27, 309.633)), (' A 489  TYR  CE1', ' F  31  LYS  HG2', -0.404, (192.962, 187.874, 285.813)), (' F 458  LYS  O  ', ' F 462  MET  HG3', -0.404, (197.318, 218.157, 318.988)), (' F 419  LYS  NZ ', ' F 428  PHE  O  ', -0.403, (188.674, 251.243, 283.625)), (' F 172  VAL  O  ', ' F 176  LEU HD23', -0.402, (176.1, 215.317, 320.286)), (' F  54  ILE HD11', ' F 343  VAL  N  ', -0.401, (167.99, 216.404, 293.742)), (' F  55  THR  O  ', ' F  59  VAL HG23', -0.401, (165.015, 207.116, 294.277)), (' F 456  LEU HD23', ' F 512  PHE  CD2', -0.4, (188.866, 221.48, 310.982)), (' A 390  LEU  H  ', ' A 390  LEU HD23', -0.4, (196.936, 201.467, 238.84))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
