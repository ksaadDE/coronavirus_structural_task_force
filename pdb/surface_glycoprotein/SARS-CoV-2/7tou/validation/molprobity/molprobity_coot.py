# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 473 ', 'TYR', 0.0049033080233107556, (125.84100000000002, 149.897, 110.16499999999999)), ('A', ' 571 ', 'ASP', 0.036320828986090535, (159.935, 139.772, 145.363)), ('A', ' 634 ', 'ARG', 0.008232774810239223, (192.26800000000006, 143.314, 151.689)), ('A', ' 637 ', 'SER', 0.008613178037084808, (193.024, 138.803, 156.135)), ('B', '  98 ', 'SER', 0.04028091406550845, (128.271, 108.57400000000003, 134.469)), ('B', ' 470 ', 'THR', 0.03592484389205562, (157.558, 204.352, 109.77299999999998)), ('B', ' 487 ', 'ASN', 0.03441058976363974, (173.68200000000004, 197.775, 106.465)), ('B', ' 489 ', 'TYR', 0.01953833758158973, (167.115, 199.341, 103.88399999999999)), ('B', ' 604 ', 'THR', 0.04469817963045924, (135.813, 133.824, 171.574)), ('C', ' 110 ', 'LEU', 0.024235934055495872, (151.302, 209.297, 119.22499999999998)), ('C', ' 446 ', 'GLY', 0.09129029077437704, (177.805, 156.731, 91.29799999999999)), ('C', ' 457 ', 'ARG', 0.0025928418050303495, (186.70300000000006, 143.345, 111.873)), ('C', ' 621 ', 'PRO', 0.08609733225344478, (174.759, 200.79, 153.35)), ('C', ' 623 ', 'ALA', 0.03746547048465617, (169.624, 204.212, 153.921)), ('C', ' 625 ', 'HIS', 0.027321968100401762, (164.832, 202.29000000000005, 148.653)), ('C', ' 630 ', 'THR', 0.0032484399999999996, (163.78400000000005, 194.79700000000005, 152.385)), ('C', ' 631 ', 'PRO', 0.040149061603500055, (163.728, 197.30000000000007, 155.369)), ('C', ' 632 ', 'THR', 0.019069400776654043, (164.629, 200.19500000000002, 152.975)), ('C', ' 634 ', 'ARG', 0.023514170846905644, (164.39600000000004, 206.35200000000006, 154.455)), ('C', ' 744 ', 'GLY', 0.02503035375023535, (140.23, 162.328, 146.841))]
data['omega'] = []
data['rota'] = [('A', ' 120 ', 'VAL', 0.14175674171037336, (214.99000000000007, 166.448, 125.31199999999998)), ('A', ' 266 ', 'TYR', 0.006442060291128424, (214.51900000000006, 154.282, 138.485)), ('A', ' 422 ', 'ASN', 0.03781979847272903, (140.48000000000005, 147.358, 113.595)), ('A', ' 474 ', 'GLN', 0.0, (124.48400000000002, 153.48200000000006, 109.902)), ('A', ' 523 ', 'THR', 0.21091472981828963, (160.25900000000004, 127.966, 124.924)), ('A', ' 635 ', 'VAL', 0.00342355725403026, (194.507, 140.13800000000006, 151.523)), ('A', ' 760 ', 'CYS', 0.15881349976758055, (160.601, 176.591, 153.185)), ('A', ' 868 ', 'GLU', 0.016603109807783116, (180.039, 186.335, 182.31099999999998)), ('A', ' 886 ', 'TRP', 0.03572745406769786, (168.97000000000006, 175.369, 202.275)), ('A', ' 907 ', 'ASN', 0.07338933962596036, (172.43300000000005, 165.10200000000006, 211.005)), ('A', '1094 ', 'VAL', 0.06840584969423898, (171.902, 148.981, 217.13799999999998)), ('B', ' 318 ', 'PHE', 0.003895659988409255, (132.982, 155.333, 153.981)), ('B', ' 346 ', 'ARG', 0.10553196313185997, (144.104, 184.54, 101.06299999999999)), ('B', ' 421 ', 'TYR', 0.14148144460370943, (161.051, 188.582, 115.149)), ('B', ' 523 ', 'THR', 0.21397837606342687, (131.384, 182.138, 125.547)), ('B', ' 622 ', 'VAL', 0.06927170508329261, (123.24000000000002, 154.66800000000006, 152.281)), ('B', ' 760 ', 'CYS', 0.05492158234119415, (173.94100000000006, 156.999, 152.525)), ('B', '1081 ', 'ILE', 0.024795467720046725, (145.066, 167.049, 226.062)), ('B', '1094 ', 'VAL', 0.17239279578650452, (147.91400000000004, 160.44300000000007, 217.86299999999997)), ('C', ' 132 ', 'GLU', 0.1577570849911491, (147.23000000000005, 203.305, 111.128)), ('C', ' 457 ', 'ARG', 0.09625573485235296, (186.70300000000006, 143.345, 111.873)), ('C', ' 523 ', 'THR', 0.22436916570492127, (191.461, 180.40300000000005, 124.515)), ('C', ' 588 ', 'THR', 0.19237891173284008, (184.06, 187.929, 147.965)), ('C', ' 603 ', 'ASN', 0.08721155027938068, (148.168, 197.08700000000005, 169.763)), ('C', ' 615 ', 'VAL', 0.1478378631595433, (176.85100000000006, 193.03100000000006, 160.139)), ('C', ' 622 ', 'VAL', 0.24273279652852398, (170.92300000000006, 200.735, 152.77)), ('C', ' 629 ', 'LEU', 0.16059128723465219, (163.785, 196.30400000000006, 148.906)), ('C', ' 630 ', 'THR', 0.04065579559747115, (163.78400000000005, 194.79700000000005, 152.385)), ('C', ' 632 ', 'THR', 0.07353806589060741, (164.629, 200.19500000000002, 152.975)), ('C', ' 641 ', 'ASN', 0.026741557067607218, (170.33400000000006, 206.51, 167.107)), ('C', ' 738 ', 'CYS', 0.009545584332000298, (145.901, 159.641, 152.946)), ('C', ' 907 ', 'ASN', 0.09193285331285075, (155.47200000000007, 168.106, 211.563))]
data['cbeta'] = [('A', ' 634 ', 'ARG', ' ', 0.3087157017962103, (191.28000000000006, 143.216, 150.51)), ('A', ' 635 ', 'VAL', ' ', 0.305637559432156, (195.11500000000007, 139.666, 150.177)), ('B', ' 391 ', 'CYS', ' ', 0.2585787122514582, (133.826, 175.533, 127.291)), ('B', ' 745 ', 'ASP', ' ', 0.25035780491185533, (176.12900000000005, 143.749, 145.132)), ('C', ' 112 ', 'SER', ' ', 0.26082448687942156, (148.201, 206.708, 115.166)), ('C', ' 391 ', 'CYS', ' ', 0.2652652761103272, (184.58100000000005, 181.553, 126.08999999999999)), ('C', ' 457 ', 'ARG', ' ', 0.36783283453666665, (187.63000000000005, 144.583, 111.749)), ('C', ' 630 ', 'THR', ' ', 0.42498599570698203, (164.69200000000006, 193.585, 152.692))]
data['probe'] = [(' C 629  LEU  HG ', ' C 629  LEU  O  ', -0.604, (163.33, 194.055, 148.371)), (' B 391  CYS  HB2', ' B 525  CYS  HA ', -0.562, (133.572, 176.271, 125.782)), (' C 391  CYS  HB2', ' C 525  CYS  HA ', -0.558, (184.923, 181.603, 124.09)), (' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.543, (164.705, 133.128, 124.403)), (' A 633  TRP  CG ', ' A 634  ARG  N  ', -0.457, (193.426, 145.374, 152.152)), (' B1131  GLY  HA3', ' B1310  NAG  H83', -0.434, (138.801, 170.577, 218.379)), (' C 318  PHE  CE1', ' C 622  VAL HG22', -0.414, (170.897, 197.021, 152.794)), (' A 478  LYS  HE3', ' A 488  CYS  SG ', -0.408, (119.559, 154.095, 105.87))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
