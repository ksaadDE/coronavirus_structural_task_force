# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 793 ', 'LYS', None, (253.96200000000002, 207.346, 258.401)), ('C', ' 793 ', 'LYS', None, (178.45100000000002, 225.047, 257.99999999999994)), ('I', '   8 ', 'PRO', None, (202.69600000000003, 177.861, 196.384)), ('I', ' 142 ', 'PRO', None, (199.902, 181.205, 175.74299999999997)), ('J', ' 156 ', 'PRO', None, (231.48100000000005, 193.248, 179.59599999999998)), ('J', ' 158 ', 'PRO', None, (226.378, 195.694, 181.689)), ('J', ' 198 ', 'PRO', None, (210.394, 202.59400000000002, 154.015)), ('K', '   8 ', 'PRO', None, (230.317, 254.27000000000007, 196.34999999999997)), ('K', ' 142 ', 'PRO', None, (233.28500000000008, 250.837, 175.74799999999993)), ('L', ' 156 ', 'PRO', None, (201.69100000000006, 238.826, 179.39499999999998)), ('L', ' 158 ', 'PRO', None, (206.77300000000008, 236.378, 181.536)), ('L', ' 198 ', 'PRO', None, (222.981, 229.39700000000005, 154.013))]
data['rota'] = [('A', ' 930 ', 'THR', 0.26408350255001634, (215.50700000000006, 205.86900000000003, 245.19299999999996)), ('C', ' 930 ', 'THR', 0.256786565247917, (217.09800000000007, 226.445, 245.159))]
data['cbeta'] = []
data['probe'] = [(' B 760  GLU  OE2', ' B 763  ASN  ND2', -0.652, (226.055, 173.047, 219.709)), (' J  22  CYS  HB3', ' J  79  LEU  HB3', -0.65, (226.521, 202.877, 202.341)), (' L  22  CYS  HB3', ' L  79  LEU  HB3', -0.649, (206.409, 228.944, 202.762)), (' K 109  ARG  NH1', ' K 171  ASP  O  ', -0.63, (236.186, 241.667, 175.939)), (' I 109  ARG  NH1', ' I 171  ASP  O  ', -0.627, (197.056, 190.243, 175.863)), (' I 150  LYS  HB2', ' I 194  THR  HB ', -0.625, (212.837, 173.874, 157.959)), (' K 150  LYS  HB2', ' K 194  THR  HB ', -0.614, (220.912, 257.778, 157.493)), (' G   9  CYS  H  ', ' G  24  TRP  HA ', -0.6, (165.725, 216.017, 222.802)), (' B 905  MET  HE2', ' C 896  GLN HE22', -0.6, (212.22, 224.01, 227.358)), (' E   9  CYS  H  ', ' E  24  TRP  HA ', -0.591, (266.928, 216.152, 223.189)), (' H   9  CYS  H  ', ' H  24  TRP  HA ', -0.584, (216.14, 267.609, 223.804)), (' A 973  LYS  HE3', ' D 974  LEU HD22', -0.582, (220.509, 221.291, 309.472)), (' F   9  CYS  H  ', ' F  24  TRP  HA ', -0.581, (217.179, 164.859, 223.891)), (' K  39  GLN HE22', ' L  39  GLN HE22', -0.581, (218.423, 240.616, 192.297)), (' D 761  PHE  O  ', ' D 764  VAL  HB ', -0.578, (203.305, 256.354, 225.472)), (' J  91  THR HG22', ' J 120  VAL  H  ', -0.573, (230.782, 187.422, 189.011)), (' C 905  MET  HE2', ' D 896  GLN HE22', -0.572, (223.82, 220.302, 227.848)), (' A 896  GLN HE22', ' D 905  MET  HE2', -0.568, (220.277, 208.144, 227.923)), (' L 160  THR  HB ', ' L 207  ALA  HB3', -0.567, (209.56, 229.874, 175.459)), (' J   9  GLY  HA2', ' J  18  LEU HD21', -0.562, (231.852, 196.391, 192.01)), (' L  91  THR HG22', ' L 120  VAL  H  ', -0.562, (202.132, 244.121, 188.84)), (' J 160  THR  HB ', ' J 207  ALA  HB3', -0.561, (223.806, 202.703, 175.378)), (' B 974  LEU HD22', ' C 973  LYS  HE3', -0.557, (211.533, 211.806, 309.797)), (' A 816  VAL  H  ', ' A 819  LEU HD11', -0.556, (253.863, 204.458, 224.4)), (' I  91  GLN  NE2', ' I  92  TRP  O  ', -0.555, (213.911, 184.1, 213.087)), (' K  91  GLN  NE2', ' K  92  TRP  O  ', -0.554, (219.077, 248.02, 212.871)), (' L   9  GLY  HA2', ' L  18  LEU HD21', -0.554, (201.261, 235.919, 191.778)), (' K 107  ILE  H  ', ' K 167  GLN HE22', -0.551, (233.471, 244.68, 183.679)), (' B 761  PHE  O  ', ' B 764  VAL  HB ', -0.551, (229.444, 175.908, 225.937)), (' A 762  LYS  O  ', ' A 765  LEU  HB2', -0.548, (254.294, 224.858, 226.936)), (' I 185  ASP  OD2', ' I 189  ARG  NH1', -0.548, (231.051, 174.752, 154.069)), (' D 760  GLU  OE2', ' D 763  ASN  ND2', -0.544, (206.735, 258.963, 219.403)), (' A 886  THR  OG1', ' A 887  LEU  N  ', -0.542, (228.847, 193.206, 229.176)), (' I 161  LEU  HB3', ' I 179  THR  HB ', -0.541, (220.219, 182.458, 168.617)), (' J  69  THR  HB ', ' J  82  GLN  HB3', -0.54, (236.185, 195.654, 204.48)), (' C 762  LYS  O  ', ' C 765  LEU  HB2', -0.54, (178.315, 207.155, 226.21)), (' A 769  ASN  OD1', ' A 829  ARG  NH2', -0.538, (254.952, 220.03, 235.543)), (' C 764  VAL  HA ', ' C 767  ILE HD12', -0.537, (172.333, 205.562, 225.798)), (' I 107  ILE  H  ', ' I 167  GLN HE22', -0.537, (199.686, 187.146, 184.161)), (' I  39  GLN HE22', ' J  39  GLN HE22', -0.537, (214.563, 191.351, 192.424)), (' L  69  THR  HB ', ' L  82  GLN  HB3', -0.536, (196.52, 236.404, 204.324)), (' K 161  LEU  HB3', ' K 179  THR  HB ', -0.535, (213.153, 249.451, 168.472)), (' K 185  ASP  OD2', ' K 189  ARG  NH1', -0.533, (202.307, 257.928, 153.979)), (' L 137  CYS  SG ', ' L 138  GLY  N  ', -0.529, (225.151, 242.431, 149.915)), (' C 769  ASN  OD1', ' C 829  ARG  NH2', -0.528, (177.914, 212.263, 235.065)), (' A 964  GLU  O  ', ' A 968  ASN  ND2', -0.528, (224.566, 215.34, 297.181)), (' C 964  GLU  O  ', ' C 968  ASN  ND2', -0.526, (207.094, 217.204, 297.416)), (' A 905  MET  HE2', ' B 896  GLN HE22', -0.52, (208.716, 211.719, 227.347)), (' A 764  VAL  HA ', ' A 767  ILE HD12', -0.516, (260.528, 226.535, 226.162)), (' J 137  CYS  SG ', ' J 138  GLY  N  ', -0.515, (208.246, 189.149, 149.944)), (' C 886  THR  OG1', ' C 887  LEU  N  ', -0.514, (203.884, 238.546, 228.95)), (' I 116  VAL HG22', ' I 137  LEU  HG ', -0.498, (206.931, 182.452, 165.425)), (' C 816  VAL  H  ', ' C 819  LEU HD11', -0.497, (178.987, 227.445, 223.831)), (' D 779  GLU  OE2', ' D 783  ARG  NE ', -0.496, (213.043, 257.021, 252.046)), (' K 116  VAL HG22', ' K 137  LEU  HG ', -0.496, (226.396, 249.521, 165.401)), (' J 208  HIS  HB3', ' J 213  THR  HB ', -0.494, (229.973, 199.323, 173.34)), (' J 109  LEU  HB3', ' J 112  TRP  HE1', -0.492, (215.13, 196.776, 203.867)), (' J 218  LYS  NZ ', ' J 220  GLU  OE2', -0.49, (221.701, 203.1, 154.195)), (' L 208  HIS  HB3', ' L 213  THR  HB ', -0.49, (203.25, 232.664, 173.18)), (' K 212  ARG  HA ', ' K 215  CYS  HB2', -0.489, (214.678, 248.642, 148.797)), (' I 212  ARG  HA ', ' I 215  CYS  HB2', -0.487, (218.746, 183.767, 148.996)), (' B 779  GLU  OE2', ' B 783  ARG  NE ', -0.487, (219.721, 175.192, 252.265)), (' L 218  LYS  NZ ', ' L 220  GLU  OE2', -0.486, (211.666, 229.272, 153.84)), (' L  67  ARG HH12', ' L  87  ARG  HG3', -0.481, (198.257, 248.379, 198.025)), (' J  67  ARG HH12', ' J  87  ARG  HG3', -0.48, (235.256, 183.642, 198.023)), (' L 109  LEU  HB3', ' L 112  TRP  HE1', -0.479, (218.05, 235.358, 204.284)), (' A 731  GLU  OE2', ' A 786  VAL HG11', -0.475, (261.506, 217.986, 260.524)), (' A 968  ASN  HA ', ' A 971  ILE HD12', -0.472, (223.232, 215.446, 301.757)), (' K  18  LYS  HG3', ' K  77  SER  HA ', -0.47, (242.807, 244.592, 198.045)), (' B 861  MET  HE1', ' B 929  VAL HG13', -0.467, (202.725, 211.681, 243.731)), (' C 968  ASN  HA ', ' C 971  ILE HD12', -0.466, (209.29, 217.59, 301.663)), (' I  18  LYS  HG3', ' I  77  SER  HA ', -0.463, (190.263, 187.589, 197.792)), (' D 968  ASN  HA ', ' D 971  ILE HD12', -0.462, (217.443, 223.122, 302.254)), (' B 968  ASN  HA ', ' B 971  ILE HD12', -0.457, (215.163, 209.003, 302.042)), (' D 753  GLU  HG3', ' D 757  MET  HE2', -0.452, (206.208, 248.667, 225.735)), (' C 731  GLU  OE2', ' C 786  VAL HG11', -0.451, (170.824, 214.345, 260.011)), (' D 861  MET  HE1', ' D 929  VAL HG13', -0.449, (229.973, 220.521, 243.888)), (' B 753  GLU  HG3', ' B 757  MET  HE2', -0.447, (226.465, 183.47, 226.019)), (' B 970  GLU  O  ', ' B 973  LYS  HB3', -0.443, (218.644, 209.664, 308.884)), (' C 902  SER  HA ', ' D 901  GLU  OE2', -0.441, (217.915, 220.318, 229.616)), (' A 945  MET  HE1', ' C 945  MET  HE1', -0.44, (216.446, 216.275, 265.725)), (' D 835  THR  O  ', ' D 841  ARG  NH2', -0.439, (213.86, 248.216, 253.299)), (' A 975  ARG  HA ', ' B 973  LYS  HZ3', -0.437, (223.803, 212.359, 311.516)), (' B 762  LYS  HA ', ' B 765  LEU HD12', -0.435, (227.017, 179.262, 226.341)), (' A 902  SER  HA ', ' B 901  GLU  OE2', -0.435, (214.528, 212.255, 229.862)), (' B 902  SER  HA ', ' C 901  GLU  OE2', -0.434, (212.357, 217.559, 229.752)), (' K 140  PHE  O  ', ' K 174  TYR  N  ', -0.433, (230.565, 245.86, 175.227)), (' D 747  THR  O  ', ' D 751  ALA  HB2', -0.428, (205.326, 245.899, 236.24)), (' L 196  THR  O  ', ' L 200  GLN  N  ', -0.422, (223.659, 225.602, 156.44)), (' B 851  ILE HG23', ' B 852  PRO  HD3', -0.422, (207.166, 198.445, 255.467)), (' A 816  VAL  HB ', ' A 819  LEU HD21', -0.422, (253.692, 203.074, 222.871)), (' C 764  VAL  O  ', ' C 767  ILE  HB ', -0.421, (173.136, 205.978, 228.256)), (' A 901  GLU  OE2', ' D 902  SER  HA ', -0.421, (220.138, 214.327, 229.778)), (' L  29  PHE  CE1', ' L  34  MET  HE3', -0.421, (210.327, 227.096, 207.164)), (' E   5  TRP  CE2', ' E  27  LYS  HE3', -0.419, (267.754, 206.804, 229.033)), (' D 774  GLY  O  ', ' D 777  ALA  HB3', -0.419, (212.643, 263.204, 242.878)), (' F   5  TRP  CE2', ' F  27  LYS  HE3', -0.418, (207.775, 165.04, 230.45)), (' C 975  ARG  HA ', ' D 973  LYS  HZ3', -0.418, (208.258, 220.399, 311.499)), (' B 835  THR  O  ', ' B 841  ARG  NH2', -0.417, (218.79, 183.981, 253.841)), (' H   5  TRP  CE2', ' H  27  LYS  HE3', -0.416, (225.481, 267.388, 229.776)), (' D 970  GLU  O  ', ' D 973  LYS  HB3', -0.415, (213.573, 222.912, 308.541)), (' D 966  ASN  O  ', ' D 969  ASN  HB2', -0.415, (211.561, 225.485, 302.11)), (' C 787  HIS  HB2', ' C 791  PHE  HB2', -0.414, (173.036, 220.499, 257.801)), (' C 973  LYS  HA ', ' C 976  GLU  HG2', -0.414, (206.564, 214.003, 310.868)), (' J  29  PHE  CE1', ' J  34  MET  HE3', -0.413, (222.235, 204.799, 207.152)), (' G   5  TRP  CE2', ' G  27  LYS  HE3', -0.413, (165.112, 225.059, 228.352)), (' D 780  ILE  HA ', ' D 780  ILE HD12', -0.413, (216.224, 259.366, 250.133)), (' I  84  ALA  HB2', ' I 107  ILE HG12', -0.412, (199.416, 189.392, 186.397)), (' B 757  MET  SD ', ' B 762  LYS  HB3', -0.411, (226.672, 180.656, 223.584)), (' B 861  MET  HB3', ' B 861  MET  HE3', -0.411, (201.612, 208.602, 244.972)), (' I   7  SER  O  ', ' I  22  THR  OG1', -0.41, (202.736, 177.998, 199.823)), (' K  84  ALA  HB2', ' K 107  ILE HG12', -0.41, (233.337, 242.561, 186.649)), (' L  29  PHE  HE1', ' L  34  MET  HE3', -0.409, (210.588, 227.469, 206.834)), (' A 835  THR  O  ', ' A 841  ARG  NH2', -0.408, (248.765, 218.673, 252.901)), (' B 966  ASN  O  ', ' B 969  ASN  HB2', -0.408, (220.511, 207.412, 301.993)), (' J  29  PHE  HE1', ' J  34  MET  HE3', -0.407, (222.621, 204.922, 206.824)), (' D 819  LEU HD22', ' H  29  LEU HD22', -0.406, (230.42, 253.626, 226.43)), (' L  83  MET  HB3', ' L  86  LEU HD21', -0.406, (197.967, 240.636, 197.917)), (' L 153  GLY  HA2', ' L 183  LEU  HB3', -0.406, (203.128, 244.056, 171.928)), (' A 875  LEU  HA ', ' A 875  LEU HD23', -0.405, (215.56, 188.854, 228.85)), (' J  22  CYS  O  ', ' J  78  SER  OG ', -0.405, (227.624, 206.201, 201.764)), (' J 196  THR  O  ', ' J 200  GLN  N  ', -0.405, (209.651, 206.505, 156.769)), (' I  33  ASN  N  ', ' I  33  ASN  OD1', -0.404, (208.366, 188.09, 214.996)), (' J 153  GLY  HA2', ' J 183  LEU  HB3', -0.402, (230.057, 187.911, 172.01)), (' C 821  VAL  O  ', ' C 824  SER  HB3', -0.402, (184.857, 222.967, 231.05)), (' B 898  MET  HG3', ' B 929  VAL HG11', -0.402, (204.49, 212.788, 241.627)), (' B 975  ARG  HE ', ' C 973  LYS  HZ2', -0.402, (210.421, 208.0, 308.23)), (' I 140  PHE  O  ', ' I 174  TYR  N  ', -0.401, (202.741, 186.032, 175.305)), (' J  83  MET  HB3', ' J  86  LEU HD21', -0.401, (234.972, 191.266, 197.795)), (' C 881  PRO  HB2', ' L  57  TYR  HD2', -0.401, (206.995, 236.217, 220.26)), (' C 780  ILE  HA ', ' C 780  ILE HD12', -0.4, (173.893, 215.863, 249.537))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
