# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('E', '  42 ', 'ASN', 0.03931647144278946, (11.749999999999998, -13.399, 38.998)), ('E', '  76 ', 'ASP', 0.021252414352787297, (10.123000000000008, -17.584000000000007, 46.809))]
data['omega'] = [('A', ' 210 ', 'PRO', None, (-6.830000000000006, 16.374000000000006, 18.555)), ('B', '  32 ', 'PRO', None, (2.2149999999999945, 42.12200000000001, 28.637)), ('D', ' 210 ', 'PRO', None, (24.523, 0.19200000000000012, 70.814)), ('E', '  32 ', 'PRO', None, (27.093000000000004, 11.140000000000008, 43.82699999999999)), ('E', '  40 ', 'LEU', None, (13.045000000000007, -6.674000000000004, 44.11899999999999)), ('E', '  42 ', 'ASN', None, (12.552999999999999, -12.271, 39.546999999999976))]
data['rota'] = [('A', '   2 ', 'SER', 0.19498979886450948, (-2.156000000000002, 17.666, 8.697)), ('A', '  88 ', 'SER', 0.10877861191680684, (16.461000000000013, 53.174, 27.416)), ('A', ' 132 ', 'SER', 0.2332291318209008, (10.115000000000002, 37.753, 0.915)), ('A', ' 178 ', 'THR', 0.19280452292457223, (0.6770000000000008, 9.572, 20.756999999999998)), ('A', ' 223 ', 'ASP', 0.026103056592988675, (-27.661000000000005, 29.314, 13.461999999999993)), ('B', '  44 ', 'GLU', 0.049006150967766865, (-5.181000000000003, 31.038, 51.48799999999998)), ('B', '  74 ', 'GLU', 0.2612850523000301, (-18.275999999999993, 19.341, 49.827999999999996)), ('B', '  75 ', 'LYS', 0.1619326272305665, (-17.027, 22.095, 52.25099999999999)), ('B', '  98 ', 'ASP', 0.0, (-20.258, 23.083000000000013, 36.844)), ('C', '   5 ', 'ARG', 0.0, (22.124, 28.926000000000023, 11.635)), ('D', '  35 ', 'ARG', 0.14731872778695462, (13.661999999999995, 14.913999999999993, 59.60399999999999)), ('D', ' 105 ', 'SER', 0.010642402048688382, (29.84299999999999, 8.664, 80.35899999999998)), ('D', ' 181 ', 'ARG', 0.004665307348749598, (20.154, 1.3279999999999994, 76.586)), ('D', ' 212 ', 'GLU', 0.04641789199347556, (29.812, 0.398, 67.26099999999997)), ('E', '  19 ', 'LYS', 0.0, (6.834000000000005, -16.404, 59.306999999999974)), ('E', '  34 ', 'ASP', 0.018618484429609197, (20.596999999999998, 10.408000000000007, 43.40099999999999)), ('E', '  40 ', 'LEU', 0.15418754006845506, (12.788999999999994, -7.1720000000000015, 42.735)), ('E', '  41 ', 'LYS', 0.0, (13.095, -10.758, 41.314)), ('E', '  42 ', 'ASN', 0.01325400415328881, (11.749999999999998, -13.399, 38.998)), ('E', '  70 ', 'PHE', 0.26584955047841147, (7.317, -10.0, 53.55199999999999)), ('E', '  73 ', 'THR', 0.015662447851086215, (8.917, -19.53000000000001, 51.647))]
data['cbeta'] = [('D', ' 154 ', 'GLU', ' ', 0.25472969600566187, (33.80700000000001, 33.32700000000001, 69.41599999999998))]
data['probe'] = [(' E  41  LYS  HD3', ' E  42  ASN  OD1', -0.89, (15.051, -13.265, 40.478)), (' D 220  ASP  OD1', ' D 256  ARG  HD2', -0.768, (46.027, -23.015, 65.451)), (' E  41  LYS  HE2', ' E  79  ALA  CB ', -0.762, (16.844, -10.328, 42.111)), (' A  17  ARG  NH1', ' A 401  HOH  O  ', -0.761, (17.262, 51.042, 34.988)), (' F   3  GLN  NE2', ' F 102  IOD  I  ', -0.749, (25.084, 28.53, 65.765)), (' E  41  LYS  HE2', ' E  79  ALA  HB3', -0.734, (15.9, -9.867, 42.643)), (' A 230  LEU  O  ', ' A 230  LEU HD12', -0.713, (-16.12, 31.727, 23.448)), (' D  97  ARG  HD2', ' D 116  TYR  CZ ', -0.711, (27.073, 24.926, 56.454)), (' A  43  GLN HE22', ' D  91  GLY  H  ', -0.668, (26.104, 22.062, 34.455)), (' D 194  VAL HG23', ' D 200  THR HG23', -0.665, (33.978, -21.27, 52.225)), (' D  47  PRO  HB2', ' D  53  GLU  HG2', -0.631, (7.568, 12.014, 66.864)), (' B  98  ASP  N  ', ' B  98  ASP  OD1', -0.63, (-20.167, 22.63, 38.618)), (' E  58  LYS  HD3', ' E 101  IOD  I  ', -0.625, (31.106, 11.999, 61.433)), (' D 194  VAL  CG2', ' D 200  THR HG23', -0.616, (34.574, -21.033, 51.623)), (' A  83  GLY  C  ', ' A 309  PEG  H22', -0.599, (18.822, 51.232, 17.068)), (' E  58  LYS  HG2', ' E 101  IOD  I  ', -0.586, (30.996, 10.851, 60.734)), (' D 177  GLU  HA ', ' D 177  GLU  OE1', -0.585, (14.613, 2.918, 79.038)), (' D 146  LYS  HE2', ' D 302  IOD  I  ', -0.584, (29.442, 35.516, 56.511)), (' A 188  HIS  HD2', ' A 436  HOH  O  ', -0.554, (-19.189, 15.668, 28.591)), (' D  74  HIS  HE1', ' D  97  ARG  HD3', -0.554, (24.738, 23.659, 56.328)), (' A  82  ARG  NH1', ' A 402  HOH  O  ', -0.548, (19.182, 45.354, 26.235)), (' D 253  GLN HE22', ' D 256  ARG HH21', -0.54, (46.717, -24.256, 60.708)), (' E  41  LYS  HE2', ' E  79  ALA  HB2', -0.53, (17.257, -10.822, 42.808)), (' D 156  LEU HD23', ' F   3  GLN HE22', -0.527, (27.018, 27.561, 65.294)), (' E  40  LEU HD23', ' E  45  ARG  HB2', -0.522, (10.584, -6.207, 40.096)), (' A  73  THR  OG1', ' C   6  THR HG23', -0.522, (21.051, 33.56, 16.719)), (' D 138  MET  O  ', ' D 141  GLN  HB2', -0.508, (41.042, 30.775, 49.697)), (' B  24  ASN  HB3', ' B  65  LEU HD11', -0.502, (-5.311, 24.215, 34.158)), (' D 181  ARG  NH2', ' D 402  HOH  O  ', -0.5, (17.749, 2.314, 68.917)), (' D  98  MET  HE2', ' E 101  IOD  I  ', -0.493, (29.877, 13.339, 61.51)), (' B  17  ASN  OD1', ' B  97  ARG  NH2', -0.492, (-16.734, 17.809, 46.084)), (' D 146  LYS  CE ', ' D 302  IOD  I  ', -0.491, (29.567, 35.701, 56.515)), (' A  35  ARG  NH2', ' D  16  GLY  O  ', -0.484, (13.339, 22.918, 34.153)), (' D 117  ALA  HB2', ' E  60  TRP  CE2', -0.48, (32.15, 16.825, 53.459)), (' E  51  HIS  HD2', ' E  52  SER  O  ', -0.48, (15.015, 7.489, 52.659)), (' A  81  LEU HD13', ' A 118  TYR  CD1', -0.479, (11.918, 44.008, 19.338)), (' D 308  PEG  H11', ' F   4  LEU HD11', -0.477, (15.615, 31.763, 66.153)), (' E  73  THR  O  ', ' E  97  ARG  NH2', -0.475, (11.845, -19.108, 50.701)), (' E  41  LYS  CD ', ' E  42  ASN  OD1', -0.474, (15.067, -13.701, 41.433)), (' D  73  THR HG21', ' F   6  THR  OG1', -0.472, (21.349, 30.795, 57.601)), (' A 253  GLN  NE2', ' A 256  ARG HH11', -0.471, (-38.463, 29.956, 21.073)), (' A 138  MET  O  ', ' A 141  GLN  HB2', -0.468, (12.127, 50.523, 8.433)), (' E  40  LEU  HA ', ' E  45  ARG  HA ', -0.467, (11.078, -6.978, 42.395)), (' A  43  GLN HE22', ' D  91  GLY  N  ', -0.465, (25.607, 21.815, 35.105)), (' D  74  HIS  HE1', ' D  97  ARG HH11', -0.464, (23.888, 24.4, 56.3)), (' D  74  HIS  CE1', ' D  97  ARG  HD3', -0.459, (24.382, 23.447, 56.022)), (' A  68  LYS  O  ', ' A  72 BGLN  HG3', -0.457, (23.093, 31.079, 22.608)), (' A 187  THR  HA ', ' A 204  TRP  O  ', -0.454, (-19.496, 17.516, 25.277)), (' D 275  GLU  O  ', ' D 276  PRO  C  ', -0.454, (31.13, -29.258, 65.362)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.453, (4.377, 38.563, 16.796)), (' B  51  HIS  HD2', ' B  52  SER  O  ', -0.452, (5.047, 27.306, 33.654)), (' E  41  LYS  CE ', ' E  79  ALA  HB2', -0.449, (17.135, -11.083, 42.444)), (' D 187  THR  HA ', ' D 204  TRP  O  ', -0.449, (26.859, -13.595, 66.722)), (' A  83  GLY  HA3', ' A 309  PEG  C1 ', -0.446, (20.107, 50.328, 17.926)), (' E  40  LEU  CD2', ' E  45  ARG  HB2', -0.442, (10.783, -6.937, 39.814)), (' D 218  GLN  O  ', ' D 257  TYR  HA ', -0.437, (41.196, -19.008, 65.162)), (' D  74  HIS  CE1', ' D  97  ARG HH11', -0.436, (23.897, 24.579, 56.119)), (' A  14  ARG  NH1', ' B  34  ASP  OD1', -0.435, (9.244, 38.917, 33.831)), (' C   5  ARG  HD3', ' C 101  IOD  I  ', -0.433, (20.735, 27.269, 8.561)), (' E  17  ASN HD21', ' E  74  GLU  HG3', -0.43, (12.292, -23.029, 52.88)), (' A 309  PEG  H11', ' A 309  PEG  H31', -0.428, (22.463, 50.075, 15.58)), (' A 230  LEU  C  ', ' A 230  LEU HD12', -0.426, (-16.162, 30.638, 23.699)), (' E  17  ASN  ND2', ' E  74  GLU  HG3', -0.425, (11.721, -22.948, 53.172)), (' A 127  LYS  NZ ', ' A 134  THR  OG1', -0.422, (4.857, 40.671, 3.468)), (' A  98  MET  HE2', ' A 303  IOD  I  ', -0.419, (2.326, 29.616, 14.992)), (' D  49  ALA  O  ', ' D  53  GLU  HG3', -0.416, (8.614, 10.783, 68.602)), (' D 200  THR HG22', ' D 248  VAL HG22', -0.415, (35.776, -19.186, 52.946)), (' A 117  ALA  HB2', ' B  60  TRP  CD2', -0.414, (4.363, 38.346, 17.525)), (' A  45  MET  HE2', ' C   2  LEU HD11', -0.414, (16.362, 23.614, 20.884)), (' B  59  ASP  O  ', ' B  60  TRP  HB2', -0.413, (0.597, 38.584, 19.516)), (' E  23  LEU  O  ', ' E  67  TYR  HA ', -0.412, (13.2, -3.864, 53.127)), (' A  35  ARG  HD3', ' B  53  ASP  OD2', -0.408, (9.281, 22.871, 30.057)), (' B   3  ARG  HG2', ' B   3  ARG HH11', -0.404, (-4.866, 42.705, 23.496)), (' E  89  GLN  HG3', ' E  90  PRO  HD2', -0.402, (21.455, -2.411, 34.044)), (' A 306  IOD  I  ', ' A 402  HOH  O  ', -0.401, (18.131, 44.217, 26.527))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
