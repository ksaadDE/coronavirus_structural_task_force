# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  31 ', 'ILE', 0.05593109947375587, (-5.823, -5.317, 4.508)), ('A', '  94 ', 'GLY', 0.022193191477182, (-12.595, 6.63, -15.615)), ('A', ' 107 ', 'TYR', 0.03406348221695417, (-12.986, -1.9289999999999996, -14.586)), ('B', ' 196 ', 'ASN', 0.02465217887351637, (0.8419999999999997, -8.793, 25.265000000000004)), ('B', ' 197 ', 'SER', 0.014373248361175504, (-1.9029999999999998, -7.249, 23.031)), ('B', ' 214 ', 'GLY', 0.051179437431773674, (-8.586999999999998, -0.597, 20.69)), ('B', ' 217 ', 'ALA', 0.03514948017883529, (-6.102999999999998, -4.869, 12.398000000000001)), ('B', ' 236 ', 'GLY', 0.043034145537989836, (15.278999999999998, 4.327999999999999, 12.311)), ('A', '  26 ', 'GLU', 0.012651909248848778, (-9.309, -2.8239999999999994, -4.742)), ('B', ' 206 ', 'SER', 0.0341086, (-22.740999999999996, 12.759, 22.086)), ('B', ' 216 ', 'ASP', 0.016525343147083607, (-13.803999999999993, -9.628999999999998, 14.581)), ('B', ' 235 ', 'SER', 0.005165541241634449, (18.414, 0.7059999999999998, 16.09)), ('B', ' 237 ', 'LYS', 0.014186844351057588, (16.045, 6.301, 14.626000000000003)), ('B', ' 238 ', 'GLY', 0.04826829526441592, (15.036, 8.477, 11.669)), ('B', ' 243 ', 'GLY', 0.08355135407433685, (4.861999999999998, 6.041999999999998, 3.1440000000000006)), ('A', '  26 ', 'GLU', 0.02151952751139373, (-8.398, -3.424999999999999, -5.417000000000001)), ('B', ' 211 ', 'ALA', 0.013934280165868486, (-1.649, -1.3509999999999995, 21.743)), ('B', ' 257 ', 'LYS', 0.03463605293546063, (13.613, 12.268, -22.876)), ('A', '  17 ', 'GLY', 0.03470500731233306, (10.861, 17.716, -4.931)), ('A', '  26 ', 'GLU', 0.0020850115335211143, (-10.034, -3.288, -4.903)), ('A', '  31 ', 'ILE', 0.00512602, (-5.512999999999998, -6.002, 4.202)), ('A', '  94 ', 'GLY', 0.06975014031801595, (-13.521, 7.116999999999997, -15.010000000000002)), ('A', ' 110 ', 'ASP', 0.025084224296548333, (-17.67299999999999, -7.641, -22.63)), ('B', ' 206 ', 'SER', 0.0341086, (-33.449, -8.738, 10.963)), ('B', ' 257 ', 'LYS', 0.0, (12.423, 5.271, -24.644)), ('A', '  94 ', 'GLY', 0.03481886023431937, (-12.209000000000001, 6.668999999999998, -14.739)), ('A', '  96 ', 'PHE', 0.041070271821619576, (-7.089999999999995, 9.292, -14.813000000000004)), ('B', ' 239 ', 'GLN', 0.01648629212644142, (7.693000000000002, 10.649, 10.993000000000002)), ('B', ' 245 ', 'THR', 0.005565746473013755, (11.071, 7.305999999999999, -4.473000000000001)), ('B', ' 257 ', 'LYS', 0.01323490513184764, (11.026, 8.824, -25.457)), ('A', '  27 ', 'LEU', 0.036688579492284344, (-8.539, -4.478, -0.767)), ('A', '  76 ', 'GLY', 0.0428447507324748, (-9.511, -15.222, 2.343)), ('A', '  99 ', 'ALA', 0.03635874234913308, (-4.738999999999997, 13.779, -6.901)), ('B', ' 197 ', 'SER', 0.013126032098408742, (3.5079999999999996, -19.061, 21.688)), ('B', ' 243 ', 'GLY', 0.022103839499157896, (6.47, 3.217, 1.357)), ('B', ' 259 ', 'ARG', 0.013381042851029364, (14.799000000000001, 13.252, -27.488)), ('A', '  17 ', 'GLY', 0.0449070601370073, (10.496, 18.063, -5.4110000000000005)), ('A', '  28 ', 'ASP', 0.034711178466761694, (-11.432, -2.441, 0.9320000000000002)), ('A', '  31 ', 'ILE', 0.03739614905417455, (-5.887, -5.485, 4.364)), ('A', '  86 ', 'THR', 0.0056727835451456515, (-3.04, -5.65, -13.183000000000002)), ('B', ' 193 ', 'SER', 0.014364551536841241, (2.087, 1.509, 29.628)), ('B', ' 198 ', 'THR', 0.08114095143366808, (-7.217999999999997, 2.747, 25.586)), ('B', ' 203 ', 'ARG', 0.0136030432562392, (-18.862999999999996, -6.091999999999998, 30.488)), ('B', ' 204 ', 'GLY', 0.06767271495449911, (-17.451, -6.291000000000002, 34.02)), ('B', ' 211 ', 'ALA', 0.013080348725807038, (-23.436999999999998, 1.673, 22.078)), ('B', ' 212 ', 'GLY', 0.08363896474214992, (-20.903, -1.1660000000000004, 22.233000000000004)), ('B', ' 245 ', 'THR', 0.00447114749735766, (10.299, 6.669999999999997, -3.0190000000000006)), ('A', '  26 ', 'GLU', 0.0003133473198530839, (-7.398999999999999, -4.084, -4.779)), ('A', '  67 ', 'PRO', 0.05271237461576641, (6.097999999999998, -13.587, 2.046)), ('A', ' 107 ', 'TYR', 0.025323570105175813, (-11.027999999999999, -3.8440000000000007, -15.520000000000001)), ('B', ' 194 ', 'SER', 0.014891454664403675, (-36.792, -20.36, 4.978)), ('B', ' 200 ', 'GLY', 0.068470611763852, (-24.445999999999998, -27.263, 2.856)), ('B', ' 203 ', 'ARG', 0.013352021606659643, (-21.897999999999993, -24.444, 12.437000000000001)), ('B', ' 216 ', 'ASP', 0.0135145542745992, (-15.139, -10.759, 12.211)), ('B', ' 232 ', 'SER', 0.004321658160772306, (10.979999999999999, -2.425, 8.106000000000002)), ('B', ' 233 ', 'LYS', 0.03024608951488976, (12.167999999999997, 0.24399999999999994, 5.570000000000001)), ('B', ' 236 ', 'GLY', 0.07712806409595484, (17.905, 2.75, -1.879)), ('A', '  17 ', 'GLY', 0.024896687879244088, (8.98, 19.506999999999998, -5.371)), ('A', '  26 ', 'GLU', 0.023697984517598896, (-9.019, -3.954, -4.668000000000001)), ('A', '  27 ', 'LEU', 0.009735881318447525, (-9.693, -3.813, -0.841)), ('A', '  95 ', 'GLU', 0.019824536838944393, (-10.453, 8.378, -14.881000000000002)), ('B', ' 197 ', 'SER', 0.013427670649822313, (-3.781, -14.76, 19.906)), ('B', ' 210 ', 'MET', 0.012472692113870172, (-10.993999999999998, 8.310999999999996, 15.947)), ('B', ' 211 ', 'ALA', 0.012548350770539965, (-8.366999999999999, 5.841, 17.339)), ('B', ' 217 ', 'ALA', 0.015124635860561423, (-8.847999999999999, -7.899, 15.720000000000002)), ('B', ' 237 ', 'LYS', 0.014498159063045817, (20.98, 5.994, 12.953000000000001)), ('B', ' 245 ', 'THR', 0.03506368286263436, (9.248, 3.928, -1.6040000000000005)), ('A', '  28 ', 'ASP', 0.012657484139862863, (-12.148, -3.611, 1.759)), ('A', '  31 ', 'ILE', 0.05845761522879088, (-5.692999999999998, -6.029, 3.827)), ('A', '  67 ', 'PRO', 0.0675188390035043, (6.295, -13.894999999999996, 2.447)), ('B', ' 193 ', 'SER', 0.01297210199793725, (-17.975, -14.723999999999997, 29.785000000000004)), ('B', ' 242 ', 'GLN', 0.01570113667973462, (12.402, 10.216, 3.309)), ('B', ' 257 ', 'LYS', 0.0, (8.433, 8.26, -27.264000000000003))]
data['omega'] = []
data['rota'] = [('A', '  23 ', 'ILE', 0.0061899440861561015, (-3.8709999999999987, 4.8919999999999995, -3.4350000000000005)), ('A', '  31 ', 'ILE', 0.12429900270319587, (-5.823, -5.317, 4.508)), ('A', '  34 ', 'VAL', 0.06747477243091461, (-2.885, -2.079, 6.865)), ('A', '  45 ', 'GLU', 0.24813157017881468, (4.814, 14.206, -10.584)), ('A', '  46 ', 'LEU', 0.005265288941998634, (8.594999999999997, 13.689999999999998, -10.768)), ('A', '  59 ', 'ASP', 0.08527062208935693, (5.025, -4.542, -6.91)), ('A', '  62 ', 'ILE', 0.062422937387268514, (3.530999999999999, -8.208999999999996, -3.8430000000000004)), ('A', '  65 ', 'LEU', 0.25300592068648986, (3.188, -9.081, 1.7330000000000003)), ('B', ' 223 ', 'LEU', 0.10973749110454661, (1.4539999999999995, -10.843, 8.157)), ('B', ' 227 ', 'LEU', 0.021286645680546112, (7.030999999999997, -9.333, 6.739000000000002)), ('B', ' 229 ', 'GLN', 0.012791450735543912, (9.342, -5.374, 9.603)), ('B', ' 248 ', 'LYS', 0.1213508093731255, (13.108999999999998, 5.638, -9.531)), ('A', '  23 ', 'ILE', 0.0, (-3.4969999999999986, 5.240999999999999, -3.495000000000001)), ('A', '  24 ', 'THR', 0.13204945731241713, (-6.308, 2.695, -3.197)), ('A', '  26 ', 'GLU', 0.2950591885520946, (-8.398, -3.424999999999999, -5.417000000000001)), ('A', '  31 ', 'ILE', 0.00912042582657429, (-6.144999999999999, -6.514, 4.766000000000001)), ('A', '  35 ', 'LEU', 0.0225830755824165, (-2.922, -1.7709999999999995, 2.249)), ('A', '  45 ', 'GLU', 0.19016590754171225, (5.058999999999999, 14.25, -10.684)), ('A', '  46 ', 'LEU', 0.003675171400046923, (8.808, 13.664, -11.138)), ('A', '  68 ', 'VAL', 0.006301065150182694, (4.462999999999999, -14.863, 4.412)), ('A', '  77 ', 'ILE', 0.03251795251040164, (-6.658999999999999, -13.966, 0.547)), ('A', ' 104 ', 'CYS', 0.07257373789601386, (-7.174000000000002, 1.6229999999999996, -9.022)), ('B', ' 223 ', 'LEU', 0.09765052695400525, (1.1849999999999996, -10.474, 8.477)), ('B', ' 227 ', 'LEU', 0.025005077814688633, (6.677999999999996, -9.165, 7.052)), ('A', '  23 ', 'ILE', 0.0, (-3.5019999999999984, 4.633, -3.478)), ('A', '  24 ', 'THR', 0.09028272744915752, (-6.426999999999999, 2.25, -2.9550000000000005)), ('A', '  46 ', 'LEU', 0.003723937136691428, (8.560999999999996, 13.421, -10.994)), ('A', '  62 ', 'ILE', 0.12844062659382155, (3.3879999999999986, -8.573999999999996, -3.659)), ('A', '  65 ', 'LEU', 0.15742758301057702, (3.022, -9.178999999999998, 2.022)), ('A', '  77 ', 'ILE', 0.26214676741652815, (-7.218999999999998, -14.391, -0.9160000000000001)), ('A', '  89 ', 'LEU', 0.15396301066871687, (-6.167999999999998, 3.985, -11.655)), ('A', ' 102 ', 'MET', 0.18417719800451046, (-6.386999999999997, 7.298, -6.143)), ('B', ' 223 ', 'LEU', 0.18251415150797354, (1.1109999999999998, -10.296, 8.917)), ('B', ' 227 ', 'LEU', 0.031022544126108418, (6.996999999999999, -8.972, 7.505000000000001)), ('B', ' 229 ', 'GLN', 0.03480990872034246, (9.144, -4.833, 10.19)), ('B', ' 248 ', 'LYS', 0.01208997893739842, (12.044999999999998, 7.79, -10.845)), ('A', '  23 ', 'ILE', 0.0, (-3.2739999999999987, 5.429999999999997, -3.0220000000000002)), ('A', '  24 ', 'THR', 0.12288243310945987, (-6.249999999999998, 3.18, -2.207)), ('A', '  31 ', 'ILE', 0.011645382110255769, (-5.740999999999998, -5.823, 3.7100000000000004)), ('A', '  38 ', 'LYS', 0.1444959321373035, (1.11, 1.525, 5.883000000000001)), ('A', '  46 ', 'LEU', 0.005571749438644377, (8.61, 13.591, -11.484)), ('A', '  62 ', 'ILE', 0.09994268585829019, (3.2759999999999994, -8.592999999999998, -3.844)), ('B', ' 223 ', 'LEU', 0.07432345003136619, (0.468, -10.39, 9.152)), ('B', ' 224 ', 'LEU', 0.12469869736850046, (1.3819999999999995, -6.822, 8.107)), ('B', ' 227 ', 'LEU', 0.0, (6.057999999999999, -9.549999999999999, 8.571)), ('B', ' 229 ', 'GLN', 0.017725223606961073, (8.424, -5.156, 10.754)), ('B', ' 230 ', 'LEU', 0.0002577029326950131, (10.317, -8.521, 10.725)), ('A', '  23 ', 'ILE', 0.0, (-3.7739999999999987, 4.827, -3.576)), ('A', '  24 ', 'THR', 0.14524197603588435, (-6.574, 2.266, -3.164)), ('A', '  31 ', 'ILE', 0.010485516422147657, (-5.589999999999998, -5.617, 4.801)), ('A', '  36 ', 'ASN', 0.25609563608483177, (-3.456, 2.13, 3.347)), ('A', '  46 ', 'LEU', 0.0076292327660950204, (8.243999999999996, 13.808999999999997, -11.015)), ('A', '  62 ', 'ILE', 0.04770251559517898, (3.3109999999999986, -8.505999999999997, -3.79)), ('A', '  92 ', 'GLU', 0.2549697960254482, (-13.241, 8.797, -10.231)), ('B', ' 191 ', 'ARG', 0.06665263007005255, (15.020000000000003, -29.139, 18.618)), ('B', ' 223 ', 'LEU', 0.0675914838147448, (1.335, -10.479, 8.721)), ('B', ' 227 ', 'LEU', 0.02542655547872801, (7.046999999999997, -9.415, 7.11)), ('B', ' 229 ', 'GLN', 0.009610179892518264, (9.413999999999998, -5.294, 9.587)), ('B', ' 260 ', 'GLN', 0.13175948810156995, (17.273999999999994, 13.709999999999997, -30.366)), ('A', '  23 ', 'ILE', 0.0, (-3.102999999999999, 4.536, -3.228)), ('A', '  26 ', 'GLU', 0.2312602395366206, (-8.654, -3.9299999999999993, -4.929)), ('A', '  27 ', 'LEU', 0.1399138497062108, (-8.586, -4.07, -1.07)), ('A', '  31 ', 'ILE', 0.08699215842377246, (-5.887, -5.485, 4.364)), ('A', '  34 ', 'VAL', 0.09359592115003552, (-3.2189999999999994, -2.177, 6.787)), ('A', '  46 ', 'LEU', 0.0049111210283594746, (8.110999999999999, 13.622, -11.244)), ('A', '  62 ', 'ILE', 0.037140401884257504, (3.7180000000000004, -8.814999999999996, -3.621)), ('A', '  65 ', 'LEU', 0.11870904406756594, (2.897, -9.181, 2.077)), ('A', '  68 ', 'VAL', 0.0755128287529796, (3.23, -14.443, 4.628)), ('A', '  89 ', 'LEU', 0.10188398112593716, (-5.993, 3.831, -11.53)), ('A', ' 102 ', 'MET', 0.16411254483656698, (-6.186, 7.05, -6.125)), ('A', ' 104 ', 'CYS', 0.07550679172678801, (-6.874, 0.817, -8.594)), ('B', ' 223 ', 'LEU', 0.19193855531774642, (1.005, -10.575, 8.865)), ('B', ' 227 ', 'LEU', 0.0271833238555568, (6.675999999999998, -9.578, 7.676000000000002)), ('B', ' 229 ', 'GLN', 0.06986961657315083, (9.166999999999998, -5.433, 9.965)), ('A', '  23 ', 'ILE', 0.0, (-2.8259999999999987, 5.255, -3.3150000000000004)), ('A', '  24 ', 'THR', 0.09873203009940976, (-5.274, 2.377, -2.849)), ('A', '  27 ', 'LEU', 0.13537160943410964, (-9.838, -4.898, -1.947)), ('A', '  46 ', 'LEU', 0.009345879916297003, (8.146, 14.017999999999999, -12.192)), ('A', '  65 ', 'LEU', 0.04286441042960534, (2.286, -8.688, 2.399)), ('A', '  77 ', 'ILE', 0.06759479895115146, (-7.902999999999997, -14.981999999999996, 0.253)), ('A', '  89 ', 'LEU', 0.1474369880644777, (-5.898, 3.9150000000000005, -11.511)), ('A', ' 102 ', 'MET', 0.08099324966215672, (-5.780999999999998, 7.485999999999999, -6.265)), ('B', ' 223 ', 'LEU', 0.13385615258050998, (0.11099999999999999, -10.323, 8.628)), ('B', ' 227 ', 'LEU', 0.078240717296977, (5.877999999999998, -8.946, 7.763000000000001)), ('B', ' 229 ', 'GLN', 0.008852154961184232, (7.752, -4.784000000000001, 10.717)), ('B', ' 230 ', 'LEU', 0.08105260848959972, (9.879999999999999, -7.93, 10.015)), ('B', ' 244 ', 'GLN', 0.1436185009166935, (9.47, 7.379, -2.4420000000000006)), ('A', '  23 ', 'ILE', 0.0, (-3.4759999999999986, 4.645, -3.366)), ('A', '  25 ', 'PHE', 0.0026802626360755417, (-5.967, -1.62, -4.635)), ('A', '  31 ', 'ILE', 0.0, (-6.871, -5.332, 3.81)), ('A', '  43 ', 'THR', 0.008159601566148922, (6.017, 9.616, -5.269000000000001)), ('A', '  46 ', 'LEU', 0.010559770656552257, (8.37, 13.839, -11.113)), ('A', '  62 ', 'ILE', 0.02947086745001167, (3.692, -8.772999999999998, -4.266)), ('A', '  75 ', 'LEU', 0.12755041363762246, (-7.334999999999999, -14.817999999999996, 5.578)), ('A', '  87 ', 'TYR', 0.04481708109669997, (-4.989, -3.298, -12.474)), ('A', '  89 ', 'LEU', 0.03525996703254991, (-5.771, 3.565, -11.681000000000001)), ('A', ' 102 ', 'MET', 0.014429681434670568, (-6.225999999999999, 6.936, -6.567)), ('B', ' 223 ', 'LEU', 0.01925688749476812, (1.5409999999999995, -10.287, 8.374)), ('B', ' 225 ', 'ASP', 0.2984726060155765, (4.165000000000001, -5.993, 10.782)), ('B', ' 229 ', 'GLN', 0.010426120290664413, (9.496, -4.806, 10.068)), ('A', '  23 ', 'ILE', 0.0, (-2.7259999999999986, 5.158, -3.2920000000000003)), ('A', '  24 ', 'THR', 0.2957330693712125, (-5.644999999999998, 2.953, -2.24)), ('A', '  35 ', 'LEU', 0.04203391667950898, (-1.591, -1.785, 2.846)), ('A', '  36 ', 'ASN', 0.15307902305914292, (-3.093, 1.7399999999999995, 2.731)), ('A', '  46 ', 'LEU', 0.010272822956901068, (8.149, 13.591, -12.061)), ('A', '  62 ', 'ILE', 0.025999509318220246, (3.294, -8.604999999999997, -3.5460000000000003)), ('A', '  65 ', 'LEU', 0.09761842962694382, (2.933, -9.097, 2.078)), ('A', '  68 ', 'VAL', 0.20195841701611014, (3.257, -14.949, 4.617)), ('A', '  87 ', 'TYR', 0.2084975589392293, (-4.575, -3.254999999999999, -12.216)), ('A', '  89 ', 'LEU', 0.09160809079907298, (-5.819, 3.594, -11.106)), ('B', ' 198 ', 'THR', 0.2491129248611444, (-19.32, -27.134, 28.996)), ('B', ' 227 ', 'LEU', 0.12186355910003034, (6.107999999999999, -9.563, 8.311)), ('B', ' 229 ', 'GLN', 0.10865295941985739, (8.859, -5.41, 10.263)), ('B', ' 248 ', 'LYS', 0.05691687033534177, (10.662, 6.409, -11.22)), ('B', ' 253 ', 'GLU', 0.20314460827955835, (11.954, 9.259, -20.399000000000004)), ('A', '  23 ', 'ILE', 0.0009839849151429883, (-4.087000000000001, 5.538, -3.6370000000000005)), ('A', '  31 ', 'ILE', 0.11694155747367795, (-5.450999999999997, -6.556999999999999, 4.618000000000001)), ('A', '  43 ', 'THR', 0.028911520583890425, (6.1, 9.565, -5.137)), ('A', '  46 ', 'LEU', 0.011309891890594956, (9.167999999999996, 13.459999999999999, -10.750000000000002)), ('A', '  62 ', 'ILE', 0.027725786332598014, (3.341999999999999, -7.942999999999998, -3.7240000000000006)), ('A', '  65 ', 'LEU', 0.13822473635644708, (2.894, -8.687, 1.903)), ('A', '  68 ', 'VAL', 0.016789473568845793, (5.046999999999998, -14.506999999999996, 4.071)), ('B', ' 223 ', 'LEU', 0.1509642066527936, (1.383, -10.744, 8.384000000000002)), ('B', ' 227 ', 'LEU', 0.02378279492998875, (6.7139999999999995, -9.151, 7.317000000000001)), ('B', ' 229 ', 'GLN', 0.004627150845120344, (8.329, -5.159, 10.649))]
data['cbeta'] = []
data['probe'] = [(' A  30  ARG  O  ', ' A  31  ILE HG12', -0.836, (-7.58, -5.994, 1.905)), (' A  22  ASN  HA ', ' A  40  SER  O  ', -0.715, (-0.811, 6.315, -1.657)), (' A  18  TYR  HA ', ' A  46  LEU HD11', -0.682, (8.506, 14.866, -6.243)), (' B 226  ARG  O  ', ' B 230  LEU  HB2', -0.656, (9.255, -9.605, 8.425)), (' B 224  LEU  O  ', ' B 228  ASN  HB2', -0.635, (4.797, -6.028, 7.872)), (' A  20  SER  HA ', ' A  42  TYR  O  ', -0.62, (3.763, 9.966, -3.886)), (' A  27  LEU HD21', ' A  35  LEU  HB2', -0.616, (-3.833, -2.209, 1.491)), (' A  36  ASN  HA ', ' A  40  SER  OG ', -0.614, (-2.929, 2.208, 1.131)), (' A  67  PRO  HB2', ' B 227  LEU HD21', -0.592, (8.035, -12.671, 3.794)), (' A  21  VAL  O  ', ' A  41  ALA  HA ', -0.583, (1.236, 7.606, -1.338)), (' A  25  PHE  HA ', ' A 104  CYS  O  ', -0.582, (-6.505, -0.81, -6.242)), (' A  71  LEU  O  ', ' A  74  PRO  HD2', -0.574, (-3.587, -17.285, 5.35)), (' A  62  ILE  O  ', ' A  66  GLN  HB2', -0.559, (4.662, -10.304, -3.186)), (' A  31  ILE  O  ', ' A  34  VAL HG22', -0.548, (-3.786, -3.723, 4.284)), (' A  49  GLU  O  ', ' A  53  PHE  HB2', -0.541, (1.201, 5.992, -12.713)), (' A  60  ALA  O  ', ' A  64  THR HG22', -0.541, (4.46, -5.075, -0.444)), (' A  68  VAL HG22', ' B 227  LEU HD23', -0.541, (5.943, -12.592, 5.127)), (' A  58  ALA  O  ', ' A  62  ILE  HB ', -0.536, (2.613, -6.658, -6.281)), (' A  44  VAL HG11', ' A  53  PHE  CE1', -0.527, (1.415, 8.495, -8.926)), (' A  91  ASP  OD1', ' A  92  GLU  HG2', -0.517, (-10.867, 12.23, -12.436)), (' A  46  LEU  N  ', ' A  46  LEU HD13', -0.517, (7.093, 14.668, -9.409)), (' A  27  LEU HD23', ' A  32  ASP  HA ', -0.513, (-6.753, -1.52, 2.348)), (' B 237  LYS  N  ', ' B 239  GLN HE22', -0.506, (13.344, 2.98, 13.131)), (' A  37  GLU  O  ', ' B 242  GLN  HB2', -0.502, (2.782, 3.61, 6.077)), (' A  44  VAL HG12', ' A  48  THR HG21', -0.473, (3.785, 8.064, -9.649)), (' A  59  ASP  O  ', ' A  63  LYS  HB2', -0.471, (7.128, -5.811, -4.437)), (' B 222  LEU  O  ', ' B 226  ARG  HB2', -0.469, (3.516, -11.3, 10.709)), (' A  32  ASP  O  ', ' A  36  ASN  HB2', -0.467, (-5.244, 1.106, 3.941)), (' A  65  LEU HD11', ' B 223  LEU HD13', -0.466, (-0.357, -8.499, 4.62)), (' A  53  PHE  HA ', ' A  56  VAL HG12', -0.464, (2.885, 2.813, -9.836)), (' A  27  LEU HD23', ' A  32  ASP  O  ', -0.461, (-5.719, -0.546, 3.129)), (' A 107  TYR  H  ', ' A 108  PRO  CD ', -0.459, (-11.053, -2.304, -15.552)), (' A  69  SER  O  ', ' A  73  THR HG22', -0.458, (-0.889, -18.769, 2.775)), (' A  42  TYR  OH ', ' A  57  VAL  HA ', -0.457, (2.411, 0.23, -4.795)), (' A  36  ASN  O  ', ' A  40  SER  HB2', -0.457, (-1.813, 4.075, 2.71)), (' A  71  LEU  O  ', ' A  75  LEU  HB2', -0.456, (-4.244, -15.44, 5.753)), (' A  81  GLU  O  ', ' A  85  ALA  HB3', -0.441, (-4.81, -10.345, -10.356)), (' A  53  PHE  O  ', ' A  56  VAL HG12', -0.439, (2.34, 2.145, -9.476)), (' A  42  TYR  CD2', ' B 246  VAL HG11', -0.438, (5.058, 3.104, -4.023)), (' A  57  VAL  O  ', ' A  61  VAL HG12', -0.434, (1.166, -3.744, -4.65)), (' B 223  LEU HD12', ' B 224  LEU  N  ', -0.433, (0.26, -8.507, 7.263)), (' A  91  ASP  OD2', ' A  97  LYS  HB2', -0.417, (-8.064, 11.641, -12.679)), (' B 225  ASP  O  ', ' B 229  GLN  HB2', -0.413, (7.35, -6.711, 10.828)), (' A  23  ILE HD11', ' A  42  TYR  CE1', -0.411, (0.553, 2.833, -3.252)), (' A  34  VAL  CG2', ' A  35  LEU  N  ', -0.403, (-2.48, -3.161, 5.052)), (' A  71  LEU  C  ', ' A  74  PRO  HD2', -0.401, (-2.932, -17.101, 5.675))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
