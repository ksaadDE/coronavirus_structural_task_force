# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 157 ', 'PRO', None, (-30.762, 7.698999999999998, -12.083)), ('L', '   8 ', 'PRO', None, (-5.081999999999999, 32.675, -19.101)), ('L', '  96 ', 'PRO', None, (-13.518, 32.898999999999994, 3.4240000000000004)), ('L', ' 142 ', 'PRO', None, (-11.232, 23.877, -33.865))]
data['rota'] = [('L', '   5 ', 'THR', 0.0013479450899467338, (-9.533999999999995, 35.417, -11.597)), ('L', '   7 ', 'SER', 0.24614744889749166, (-5.975999999999999, 33.856, -17.145)), ('L', '  10 ', 'THR', 0.002962945459119376, (-8.101, 28.497, -21.94900000000001)), ('L', '  12 ', 'SER', 0.10739091355355393, (-3.938, 25.796, -26.481000000000005)), ('L', '  14 ', 'SER', 0.13348827582153983, (1.4499999999999993, 22.029, -29.1)), ('L', '  28 ', 'SER', 0.12075351833979678, (-3.342, 40.946, -1.451)), ('L', '  31 ', 'SER', 0.008438563437124935, (1.9569999999999994, 33.785999999999994, -0.45600000000000007)), ('L', '  38 ', 'GLN', 0.29807177556049186, (-4.248, 19.835, -11.761)), ('L', '  54 ', 'SER', 0.08921927339867126, (7.069000000000001, 24.88599999999999, -3.372)), ('L', '  74 ', 'LEU', 0.23315266542933485, (2.178, 28.56699999999998, -12.599000000000002)), ('L', '  75 ', 'THR', 0.26003404325883445, (4.63, 27.671999999999976, -15.369000000000003)), ('L', '  86 ', 'VAL', 0.10951721544999711, (-7.640999999999996, 21.816, -15.974000000000002)), ('L', ' 115 ', 'SER', 0.2979975993138515, (-17.835, 15.301999999999998, -40.277)), ('L', ' 116 ', 'VAL', 0.003127019590465352, (-21.50799999999999, 16.176999999999996, -39.873)), ('L', ' 122 ', 'SER', 0.1612540712577397, (-35.879, 5.626, -34.825)), ('L', ' 128 ', 'SER', 0.10626158104805959, (-43.24199999999999, 5.277, -28.099)), ('L', ' 133 ', 'VAL', 0.003127019590465352, (-33.481, 13.613, -34.481)), ('L', ' 134 ', 'VAL', 0.055752905370727926, (-29.764, 13.966000000000001, -33.826)), ('L', ' 160 ', 'SER', 0.17732467291307916, (-32.427, 21.448, -29.12)), ('L', ' 169 ', 'SER', 0.11521808610149671, (-5.932000000000002, 11.784, -26.757)), ('L', ' 172 ', 'SER', 0.25196573803039407, (-6.776999999999999, 15.877, -30.578000000000007)), ('L', ' 197 ', 'VAL', 0.009381058771396056, (-23.256, 23.723, -38.968)), ('L', ' 203 ', 'SER', 0.08794643910945409, (-15.603000000000005, 27.604999999999986, -46.384000000000015)), ('L', ' 207 ', 'THR', 0.296008209024661, (-26.182999999999996, 21.781, -44.152)), ('H', '   4 ', 'LEU', 0.24276751602911148, (-8.332, 9.173, 1.709)), ('H', '   7 ', 'SER', 0.08611651994857308, (-18.548, 7.134, 0.9220000000000002)), ('H', '  11 ', 'VAL', 0.003127019590465352, (-29.179999999999993, 10.586, -4.689)), ('H', '  22 ', 'CYS', 0.09684643591754138, (-13.632, 10.528, 4.628)), ('H', '  25 ', 'SER', 0.2885565680060073, (-5.165000000000004, 5.727, 5.86)), ('H', '  31 ', 'SER', 0.09889680671210975, (-2.698, 16.297, 13.664)), ('H', '  67 ', 'ARG', 0.27595771718083895, (-27.014, 24.04799999999999, 6.403000000000001)), ('H', '  75 ', 'SER', 0.0862814671302772, (-11.591999999999992, 6.615999999999996, 16.948)), ('H', '  89 ', 'GLU', 0.07794019636782737, (-28.362999999999992, 23.170999999999996, -7.471)), ('H', '  91 ', 'THR', 0.179364284521783, (-25.975999999999992, 18.292, -7.036)), ('H', '  93 ', 'VAL', 0.0, (-19.190999999999995, 15.751999999999988, -6.816)), ('H', '  96 ', 'CYS', 0.024211608979385346, (-12.588999999999992, 15.978999999999997, 0.7950000000000002)), ('H', ' 100 ', 'HIS', 0.2640428194556859, (-0.6039999999999999, 14.379999999999999, 5.273)), ('H', ' 104 ', 'THR', 0.010393869702090344, (6.33, 15.669999999999995, 14.282000000000004)), ('H', ' 120 ', 'THR', 0.0012970951050242823, (-27.593999999999994, 14.122999999999989, -7.0950000000000015)), ('H', ' 125 ', 'SER', 0.10550326008476095, (-37.797, 8.914, -9.164)), ('H', ' 137 ', 'SER', 0.08908623200930232, (-27.411999999999995, 7.151999999999999, -43.833)), ('H', ' 138 ', 'SER', 0.003103738390592134, (-27.651, 5.870999999999997, -47.407)), ('H', ' 150 ', 'CYS', 0.02535260664718448, (-27.827000000000012, 4.289, -30.055)), ('H', ' 151 ', 'LEU', 0.296671220940189, (-29.634999999999994, 7.067, -28.189)), ('H', ' 153 ', 'LYS', 0.046968493947338215, (-32.893, 8.446999999999997, -23.294)), ('H', ' 180 ', 'LEU', 0.25385071263901604, (-30.360999999999994, 16.475, -18.261)), ('H', ' 181 ', 'GLN', 0.14316940876289702, (-33.611999999999995, 17.206, -20.048)), ('H', ' 187 ', 'SER', 0.15764026005691198, (-30.377, 11.259, -22.125)), ('H', ' 190 ', 'SER', 0.27457335059528987, (-23.296, 6.897, -28.131)), ('H', ' 196 ', 'SER', 0.11760841534080337, (-18.872, 2.214, -45.313)), ('H', ' 197 ', 'SER', 0.18836870715031862, (-17.463, -0.8889999999999999, -47.026)), ('H', ' 201 ', 'THR', 0.20597525809772033, (-20.885, -7.692999999999995, -43.83)), ('H', ' 207 ', 'ASN', 0.0, (-25.395999999999997, -2.996, -24.682000000000002)), ('F', ' 350 ', 'VAL', 0.08858967785631974, (-6.446999999999999, 23.201, 34.353)), ('F', ' 367 ', 'VAL', 0.24567469524291002, (-11.944, 14.651999999999997, 58.543)), ('F', ' 421 ', 'TYR', 0.06956362409749257, (-0.061999999999999965, 19.000999999999987, 28.523000000000007)), ('F', ' 443 ', 'SER', 0.281829917756924, (-22.31399999999998, 23.433, 34.42)), ('F', ' 477 ', 'SER', 0.0998134546114541, (6.688000000000004, 24.99, 8.434))]
data['cbeta'] = []
data['probe'] = [(' F 493  GLN HE21', ' F 494  SER  H  ', -0.953, (-12.517, 24.415, 23.928)), (' L  80  GLU  HG3', ' L  81  PRO  HD2', -0.886, (4.482, 14.073, -22.603)), (' F 503  VAL  HA ', ' F 506  GLN HE21', -0.785, (-21.614, 12.433, 34.649)), (' H   2  MET  HB2', ' H  26  GLY  HA3', -0.771, (-0.837, 5.803, 4.543)), (' L  84  PHE  CG ', ' L 107  ILE HG22', -0.748, (-2.828, 18.208, -24.107)), (' L  84  PHE  CD1', ' L 107  ILE HG22', -0.748, (-2.707, 19.519, -25.001)), (' H 107  TYR  HD2', ' H 111  ASP  OD2', -0.716, (1.714, 16.177, 1.586)), (' L   3  VAL HG22', ' L  26  SER  HB3', -0.695, (-11.312, 40.277, -6.61)), (' L 151  VAL HG13', ' L 156  GLN  HG3', -0.687, (-36.728, 23.028, -36.992)), (' H 154  ASP  OD1', ' H 181  GLN  NE2', -0.654, (-36.099, 12.307, -21.828)), (' F 454  ARG  NH2', ' F 469  SER  O  ', -0.653, (-0.494, 28.08, 26.644)), (' H  88  SER  O  ', ' H  91  THR HG22', -0.637, (-28.937, 20.169, -8.303)), (' F 493  GLN HE21', ' F 494  SER  N  ', -0.636, (-11.838, 25.086, 24.101)), (' H 219  LYS  HE2', ' L 124  GLU  OE2', -0.634, (-36.116, -0.615, -29.483)), (' F 376  THR  HB ', ' F 435  ALA  HB3', -0.632, (-10.997, 12.479, 42.731)), (' H   6  GLN  H  ', ' H 115  GLN HE22', -0.632, (-14.062, 7.561, -0.858)), (' F 503  VAL  HA ', ' F 506  GLN  NE2', -0.626, (-22.09, 13.079, 34.846)), (' F 393  THR HG22', ' F 517  LEU  HA ', -0.622, (9.196, 20.656, 54.079)), (' F 501  ASN HD22', ' F 505  TYR  HB3', -0.615, (-19.46, 15.937, 28.713)), (' F 387  LEU  HA ', ' F 390  LEU HD13', -0.61, (1.566, 10.465, 58.618)), (' F 355  ARG  HB2', ' F 398  ASP  OD1', -0.609, (-0.534, 24.07, 43.306)), (' H  36  TRP  HD1', ' H  70  ILE HD13', -0.601, (-15.513, 19.193, 5.74)), (' H 205  ILE HG22', ' H 220  ARG  HG2', -0.597, (-27.857, -6.623, -33.151)), (' H 107  TYR  CD2', ' H 111  ASP  OD2', -0.596, (1.769, 17.095, 1.447)), (' H 111  ASP  OD1', ' H 112  ILE  N  ', -0.591, (-2.183, 15.089, 0.362)), (' L  79  VAL HG23', ' L  83  ASP  HB2', -0.58, (1.432, 19.1, -20.244)), (' H  56  GLY  N  ', ' H  72  ARG HH21', -0.577, (-11.951, 18.498, 16.972)), (' L 190  HIS  HB2', ' L 193  TYR  HE1', -0.576, (-40.51, 18.925, -39.961)), (' F 359  SER  HA ', ' F 524  VAL HG23', -0.572, (1.923, 24.748, 56.689)), (' H  36  TRP  CD1', ' H  70  ILE HD13', -0.572, (-16.206, 19.523, 5.871)), (' L  21  LEU HD12', ' L  74  LEU HD23', -0.571, (-0.674, 26.178, -14.58)), (' H 164  TRP  CZ3', ' H 206  CYS  HB3', -0.569, (-24.593, -0.435, -30.028)), (' A   1  NAG  H3 ', ' A   1  NAG  H83', -0.56, (-16.844, 21.006, 54.035)), (' L 121  PRO  HB2', ' L 126  LEU HD21', -0.554, (-39.113, 8.748, -35.934)), (' L  19  ALA  HB3', ' L  76  ILE  HB ', -0.548, (2.839, 24.753, -19.277)), (' F 503  VAL  CA ', ' F 506  GLN HE21', -0.546, (-22.025, 12.014, 34.407)), (' H 211  LYS  HG3', ' H 212  PRO  HD3', -0.545, (-25.976, 2.138, -12.012)), (' F 376  THR HG23', ' F 378  LYS  HD3', -0.544, (-8.851, 8.795, 42.792)), (' L 152  ASP  HA ', ' L 192  VAL HG13', -0.543, (-38.735, 21.678, -44.424)), (' H 107  TYR  HD1', ' H 108  ASP  H  ', -0.542, (3.298, 21.288, 3.582)), (' L 150  LYS  HA ', ' L 154  ALA  O  ', -0.542, (-34.928, 25.544, -39.555)), (' H 129  PRO  HB3', ' H 155  TYR  HB3', -0.539, (-32.324, 5.781, -19.176)), (' L  62  ARG  HD2', ' L  83  ASP  OD2', -0.535, (4.407, 18.241, -18.388)), (' F 439  ASN  ND2', ' F 506  GLN  OE1', -0.53, (-23.606, 16.463, 35.572)), (' H  19  LYS  HG3', ' H  82  GLU  HB2', -0.526, (-23.27, 14.455, 7.662)), (' F 475  ALA  O  ', ' H 106  CYS  HB2', -0.523, (2.076, 20.779, 10.485)), (' H 153  LYS  HA ', ' H 187  SER  HB3', -0.522, (-32.261, 10.272, -23.273)), (' H 118  MET  HE3', ' H 120  THR HG23', -0.519, (-25.359, 13.805, -9.958)), (' F 503  VAL  HA ', ' F 506  GLN  HG3', -0.516, (-21.176, 12.844, 34.151)), (' F 417  LYS  NZ ', ' F 455  LEU HD12', -0.513, (-4.974, 17.453, 22.06)), (' L 116  VAL  HA ', ' L 136  LEU  O  ', -0.511, (-21.684, 15.255, -37.966)), (' H   6  GLN  H  ', ' H 115  GLN  NE2', -0.508, (-13.779, 7.292, -1.443)), (' F 350  VAL HG22', ' F 401  VAL  O  ', -0.507, (-9.392, 21.543, 34.381)), (' H  53  VAL  O  ', ' H  74  MET  HE2', -0.506, (-9.845, 15.786, 16.046)), (' F 468  ILE  O  ', ' F 468  ILE HG12', -0.505, (-1.576, 31.926, 30.058)), (' F 404  GLY  O  ', ' F 407  VAL HG22', -0.504, (-12.203, 10.912, 35.875)), (' F 472  ILE HD12', ' F 482  GLY  HA2', -0.5, (-0.727, 34.189, 16.417)), (' H 158  GLU  OE2', ' H 178  ALA  HB3', -0.5, (-25.252, 11.592, -18.54)), (' F 401  VAL HG21', ' F 451  TYR  CD2', -0.495, (-14.085, 23.863, 35.064)), (' F 421  TYR  HE2', ' F 457  ARG  H  ', -0.491, (0.563, 19.925, 22.08)), (' H  13  LYS  O  ', ' H  16  THR  OG1', -0.485, (-33.542, 14.995, -0.071)), (' L 151  VAL  CG1', ' L 156  GLN  HG3', -0.48, (-37.295, 22.804, -36.795)), (' L 109  ARG  HG2', ' L 172  SER  HB2', -0.475, (-5.518, 17.864, -32.68)), (' H 136  PRO  HG2', ' H 199  LEU HD21', -0.469, (-24.365, 1.481, -41.13)), (' F 355  ARG  CB ', ' F 398  ASP  OD1', -0.466, (-0.838, 24.524, 43.174)), (' L 107  ILE HD11', ' L 172  SER  OG ', -0.464, (-4.054, 16.036, -29.927)), (' F 408  ARG  NH1', ' F 409  GLN HE21', -0.464, (-7.226, 9.814, 30.946)), (' H 135  ALA  HB1', ' H 223  PRO  HA ', -0.462, (-29.332, 1.713, -40.823)), (' H 178  ALA  HA ', ' H 188  LEU  HB3', -0.455, (-25.623, 11.499, -22.142)), (' F 440  ASN  OD1', ' F 441  LEU HD22', -0.454, (-21.977, 22.362, 42.66)), (' H 210  HIS  CD2', ' H 212  PRO  HD2', -0.453, (-28.685, 3.292, -13.958)), (' H  83  LEU  HA ', ' H  83  LEU HD12', -0.453, (-25.529, 20.43, 4.828)), (' F 358  ILE HG13', ' F 395  VAL  CG2', -0.452, (-0.714, 23.341, 53.328)), (' H 211  LYS  CG ', ' H 212  PRO  HD3', -0.452, (-26.458, 2.2, -12.153)), (' H 134  LEU  HB3', ' L 119  PHE  CD1', -0.451, (-28.453, 7.681, -36.39)), (' F 493  GLN  HA ', ' F 493  GLN  NE2', -0.447, (-10.938, 25.029, 22.937)), (' H  72  ARG  NH1', ' H  74  MET  HE3', -0.446, (-11.535, 14.758, 17.869)), (' L 187  TYR  CE1', ' L 193  TYR  HE2', -0.444, (-39.159, 14.904, -37.613)), (' L 187  TYR  CD1', ' L 193  TYR  HE2', -0.441, (-39.457, 15.564, -37.262)), (' F 416  GLY  O  ', ' F 420  ASP  OD1', -0.438, (-1.011, 13.013, 28.314)), (' H  63  LYS  HB3', ' H  63  LYS  HE2', -0.436, (-23.375, 28.38, -0.502)), (' H  91  THR  HB ', ' H 121  VAL  H  ', -0.436, (-28.583, 16.618, -7.36)), (' H 136  PRO  HD2', ' H 223  PRO  HB3', -0.435, (-27.088, 1.343, -41.64)), (' H   6  GLN  HA ', ' H  21  SER  O  ', -0.434, (-15.558, 9.38, 2.45)), (' H 127  LYS  HE3', ' H 154  ASP  O  ', -0.434, (-36.739, 6.485, -18.986)), (' F 340  GLU  O  ', ' F 344  ALA  HB2', -0.434, (-11.104, 28.249, 47.635)), (' H  40  ALA  HB3', ' H  43  GLN  HB2', -0.432, (-20.351, 22.934, -11.577)), (' F 359  SER  HA ', ' F 524  VAL  CG2', -0.428, (1.671, 24.829, 56.693)), (' L 107  ILE HD13', ' L 107  ILE HG21', -0.428, (-3.337, 16.751, -26.058)), (' L 190  HIS  HB2', ' L 193  TYR  CE1', -0.428, (-40.566, 18.909, -39.457)), (' L  49  ILE HD12', ' L  74  LEU HD12', -0.427, (2.977, 25.431, -10.049)), (' F 454  ARG  HD3', ' F 457  ARG  HB2', -0.427, (0.354, 22.715, 25.428)), (' F 369  TYR  HD2', ' F 384  PRO  HB2', -0.426, (-7.145, 8.674, 53.929)), (' F 379  CYS  HB2', ' F 384  PRO  HD3', -0.426, (-3.211, 7.926, 50.992)), (' H 136  PRO  HG3', ' H 148  LEU  HB3', -0.425, (-24.548, 3.16, -38.95)), (' F 358  ILE  CG1', ' F 395  VAL HG23', -0.425, (-0.844, 22.907, 52.782)), (' H 132  PHE  HB3', ' L 122  SER  OG ', -0.422, (-34.841, 5.608, -31.268)), (' L 109  ARG  NH1', ' L 171  ASP  O  ', -0.42, (-6.72, 16.141, -34.269)), (' F 378  LYS  HB2', ' F 378  LYS  HE2', -0.419, (-5.777, 9.023, 43.392)), (' F 383  SER  HB3', ' F 386  LYS  HB2', -0.416, (-0.26, 6.05, 56.608)), (' F 518  LEU  C  ', ' F 520  ALA  H  ', -0.415, (13.459, 21.542, 56.091)), (' F 417  LYS  HZ1', ' F 455  LEU HD12', -0.414, (-5.158, 17.269, 22.052)), (' F 478  THR HG21', ' L  32  SER  HB3', -0.413, (2.862, 30.303, 5.398)), (' L  35  ALA  HA ', ' L  49  ILE  O  ', -0.413, (-0.344, 25.309, -4.34)), (' H 107  TYR  OH ', ' L  57  THR HG23', -0.412, (5.761, 17.446, -0.839)), (' F 393  THR  O  ', ' F 523  THR  OG1', -0.412, (5.537, 25.201, 56.926)), (' H 206  CYS  O  ', ' H 218  ASP  HA ', -0.412, (-27.592, -3.155, -26.466)), (' H  17  SER  HA ', ' H  83  LEU  O  ', -0.412, (-28.918, 16.909, 3.74)), (' F 335  LEU HD12', ' F 362  VAL HG13', -0.41, (-5.494, 23.264, 63.529)), (' H  72  ARG  HD2', ' H  72  ARG  O  ', -0.41, (-14.217, 14.251, 15.293)), (' F 462  LYS  N  ', ' F 465  GLU  OE1', -0.409, (6.714, 19.794, 32.552)), (' A   1  NAG  O3 ', ' A   2  NAG  N2 ', -0.408, (-17.794, 21.853, 57.54)), (' F 350  VAL HG21', ' F 402  ILE HG22', -0.406, (-8.804, 19.632, 33.237)), (' H   7  SER  OG ', ' H  21  SER  N  ', -0.406, (-18.725, 9.598, 3.648)), (' H 161  THR  O  ', ' H 208  VAL  HA ', -0.404, (-24.635, 0.517, -21.186)), (' F 388  ASN  O  ', ' F 526  GLY  HA3', -0.403, (-1.27, 15.118, 62.597)), (' L  55  ARG  HD3', ' L  59  ILE  O  ', -0.403, (7.905, 18.125, -8.94)), (' H   4  LEU HD22', ' H 112  ILE HG22', -0.401, (-6.962, 13.016, 2.238)), (' F 493  GLN  NE2', ' F 494  SER  H  ', -0.4, (-12.487, 24.471, 23.297)), (' H   6  GLN  NE2', ' H  96  CYS  H  ', -0.4, (-12.856, 14.261, -1.161))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
