# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('C', ' 130 ', 'VAL', 0.2680216758543683, (131.28499999999994, 156.218, 221.608)), ('B', '  83 ', 'VAL', 0.27426333456074165, (161.258, 226.682, 211.664)), ('B', ' 130 ', 'VAL', 0.2593506089845848, (175.984, 220.974, 222.012))]
data['cbeta'] = []
data['probe'] = [(' C  14  GLN  N  ', ' C 255  SER  HG ', -0.719, (117.569, 137.971, 223.449)), (' A 125  ASN HD21', ' A 171  VAL HG13', -0.653, (206.904, 136.066, 219.659)), (' A  81  ASN  HB3', ' A 239  GLN HE22', -0.639, (224.182, 154.236, 217.998)), (' C  96  GLU  HB3', ' C 190  ARG  HE ', -0.622, (119.805, 150.233, 200.781)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.619, (163.611, 193.709, 229.025)), (' A 105  ILE HG22', ' A 118  LEU  HA ', -0.58, (214.136, 150.078, 221.222)), (' C 560  LEU  H  ', ' C 563  GLN HE21', -0.561, (197.2, 140.665, 195.518)), (' B 141  LEU  HB3', ' B 243  ALA  HA ', -0.56, (174.669, 237.718, 213.677)), (' B 145  TYR  HB3', ' B 148  ASN  HB3', -0.559, (184.12, 248.043, 221.312)), (' A  99  ASN  HB3', ' A 102  ARG HH22', -0.556, (222.454, 140.173, 212.575)), (' B 418  ILE  HA ', ' B 422  ASN HD22', -0.552, (161.601, 157.738, 228.406)), (' B 907  ASN HD21', ' B 913  GLN HE21', -0.549, (183.836, 181.37, 123.9)), (' B 498  GLN  HG2', ' B 500  THR  H  ', -0.541, (164.584, 167.291, 249.297)), (' A 571  ASP  OD2', ' B 964  LYS  NZ ', -0.539, (184.252, 197.096, 189.99)), (' B 138  ASP  N  ', ' B 138  ASP  OD2', -0.531, (163.574, 235.474, 219.628)), (' A 106  PHE  HB2', ' A 117  LEU HD12', -0.529, (209.892, 154.072, 218.466)), (' C 433  VAL HG12', ' C 512  VAL HG23', -0.526, (182.45, 147.076, 240.55)), (' B 452  ARG  HD3', ' B 492  LEU HD11', -0.526, (153.354, 153.277, 237.015)), (' A 854  LYS  N  ', ' A 858  LEU  O  ', -0.521, (175.893, 150.512, 182.499)), (' B  97  LYS  HE3', ' B 182  LYS  HE2', -0.52, (181.882, 242.717, 197.443)), (' C 106  PHE  HB2', ' C 117  LEU  HB3', -0.52, (133.12, 152.395, 215.91)), (' B 353  TRP  O  ', ' B 466  ARG  NH1', -0.52, (147.245, 159.369, 228.114)), (' A 569  ILE  O  ', ' B 964  LYS  NZ ', -0.519, (184.695, 196.684, 188.934)), (' B 102  ARG HH12', ' B 123  ALA  HB2', -0.518, (183.687, 236.903, 211.241)), (' B 459  SER  OG ', ' B 460  ASN  N  ', -0.516, (160.767, 149.459, 219.245)), (' A 408  ARG HH12', ' A 414  GLN  HG3', -0.512, (167.328, 184.12, 223.498)), (' A 121  ASN  HB3', ' A 126  VAL HG12', -0.51, (214.176, 140.064, 215.791)), (' A  24  LEU HD12', ' A  25  PRO  HD2', -0.509, (234.063, 161.198, 209.946)), (' C 105  ILE HD12', ' C 110  LEU HD11', -0.504, (130.658, 145.75, 218.135)), (' A 406  GLU  OE1', ' A 409  GLN  NE2', -0.502, (165.509, 187.974, 230.947)), (' B 355  ARG  NH1', ' B 398  ASP  OD2', -0.502, (150.467, 163.609, 223.336)), (' A 820  ASP  O  ', ' A 824  ASN  ND2', -0.5, (190.16, 144.508, 159.704)), (' C 605  SER  OG ', ' C 606  ASN  N  ', -0.499, (144.326, 145.841, 171.17)), (' C  80  ASP  N  ', ' C  80  ASP  OD1', -0.496, (123.696, 136.461, 207.278)), (' B 393  THR HG21', ' B 520  ALA  HB3', -0.491, (142.642, 171.208, 210.152)), (' C 454  ARG  NH2', ' C 469  SER  O  ', -0.487, (197.302, 150.679, 256.021)), (' C 349  SER  OG ', ' C 350  VAL  N  ', -0.487, (191.12, 142.835, 252.229)), (' B 474  GLN HE21', ' B 475  ALA  H  ', -0.486, (163.968, 138.282, 230.909)), (' B 826  VAL  HA ', ' B 949  GLN HE21', -0.486, (185.919, 198.15, 164.347)), (' C 398  ASP  HB2', ' C 512  VAL HG12', -0.485, (187.603, 145.327, 241.521)), (' C 411  ALA  HB3', ' C 414  GLN  HG3', -0.484, (177.12, 153.043, 247.782)), (' B 900  MET  SD ', ' B 917  TYR  OH ', -0.482, (190.271, 185.551, 123.843)), (' A 473  TYR  HB2', ' A 491  PRO  HG3', -0.482, (153.687, 201.943, 232.29)), (' B 344  ALA  HB3', ' B 347  PHE  HE2', -0.481, (146.634, 170.548, 235.835)), (' C 405  ASP  O  ', ' C 408  ARG  NH2', -0.481, (175.663, 146.291, 254.75)), (' C 193  VAL  HB ', ' C 204  TYR  HB2', -0.479, (133.117, 156.97, 201.17)), (' B 153  MET  HE3', ' B 154  GLU  H  ', -0.477, (183.362, 237.28, 218.863)), (' B 105  ILE HD12', ' B 110  LEU HD11', -0.476, (167.776, 225.915, 217.661)), (' B 777  ASN  OD1', ' B1019  ARG  NH1', -0.474, (187.361, 175.159, 162.088)), (' A 102  ARG HH11', ' A 243  ALA  HB2', -0.473, (224.124, 141.62, 216.741)), (' C 777  ASN  OD1', ' C1019  ARG  NH1', -0.472, (168.358, 183.407, 160.975)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.472, (172.065, 221.548, 215.999)), (' A 393  THR  HA ', ' A 522  ALA  HA ', -0.471, (189.434, 203.07, 213.707)), (' C  66  HIS  HB3', ' C  78  ARG  HE ', -0.471, (122.492, 135.28, 200.682)), (' C 146  HIS  HA ', ' C 150  LYS  HD3', -0.469, (103.57, 146.973, 216.1)), (' A 294  ASP  N  ', ' A 294  ASP  OD2', -0.469, (211.301, 165.524, 186.488)), (' A  93  ALA  HB3', ' A 266  TYR  HD2', -0.468, (221.118, 151.79, 202.913)), (' A 393  THR  O  ', ' A 523  THR  OG1', -0.468, (189.202, 204.861, 216.394)), (' B 326  ILE HD11', ' B 534  VAL HG22', -0.468, (138.11, 194.206, 198.742)), (' B1081  ILE HG13', ' B1088  HIS  HB2', -0.467, (161.612, 177.441, 110.99)), (' A 796  ASP  N  ', ' A 796  ASP  OD2', -0.465, (182.27, 141.703, 132.359)), (' C 100  ILE HD13', ' C 263  ALA  HB2', -0.463, (117.828, 143.555, 203.659)), (' A 345  THR  O  ', ' A 346  ARG  NE ', -0.463, (178.991, 200.155, 242.75)), (' A 102  ARG HH21', ' A 177  MET  HE2', -0.462, (220.48, 139.687, 214.096)), (' A 522  ALA  HB3', ' A 544  ASN HD21', -0.461, (193.633, 201.654, 212.196)), (' C 529  LYS  HA ', ' C 529  LYS  HD2', -0.459, (179.931, 133.992, 215.169)), (' C 457  ARG  HD2', ' C 461  LEU HD23', -0.459, (191.324, 155.384, 253.148)), (' B 977  LEU HD23', ' B 980  ILE HD11', -0.457, (186.439, 183.904, 202.338)), (' B 102  ARG HH21', ' B 121  ASN  HB3', -0.456, (181.902, 233.377, 210.93)), (' B 605  SER  OG ', ' B 606  ASN  N  ', -0.456, (165.773, 214.172, 170.31)), (' C 979  ASP  O  ', ' C 983  ARG  NE ', -0.455, (154.959, 179.431, 207.045)), (' C 689  SER  O  ', ' C 689  SER  OG ', -0.454, (143.563, 136.217, 163.279)), (' B 796  ASP  N  ', ' B 796  ASP  OD2', -0.454, (201.058, 193.67, 131.864)), (' A 777  ASN  OD1', ' A1019  ARG  NH1', -0.452, (170.839, 162.969, 161.424)), (' B 109  THR  OG1', ' B 114  THR  OG1', -0.451, (164.559, 219.512, 223.542)), (' C  34  ARG  NH2', ' C 191  GLU  OE1', -0.451, (129.158, 151.52, 194.19)), (' C 617  CYS  HA ', ' C 620  VAL HG23', -0.45, (163.621, 137.445, 182.214)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.449, (183.734, 193.24, 140.688)), (' B 663  ASP  N  ', ' B 663  ASP  OD1', -0.448, (163.073, 202.398, 160.417)), (' A 326  ILE HD11', ' A 534  VAL HG22', -0.447, (209.081, 196.117, 202.493)), (' C 344  ALA  O  ', ' C 509  ARG  NH1', -0.445, (188.585, 132.326, 243.062)), (' B1104  VAL HG23', ' B1115  ILE HG12', -0.444, (166.77, 183.161, 112.318)), (' C 294  ASP  HB3', ' C 297  SER  H  ', -0.444, (147.508, 148.723, 181.41)), (' B 328  ARG  NH1', ' B 531  THR  O  ', -0.444, (134.443, 191.73, 205.771)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.444, (215.471, 151.669, 191.294)), (' A 359  SER  OG ', ' A 360  ASN  ND2', -0.443, (189.46, 208.247, 218.629)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.442, (172.786, 197.17, 245.337)), (' A 703  ASN  ND2', ' B 787  GLN  OE1', -0.441, (203.774, 176.161, 142.225)), (' B 143  VAL  HB ', ' B 150  LYS  HZ2', -0.44, (180.012, 243.561, 216.239)), (' A 971  GLY  O  ', ' A 995  ARG  NH1', -0.44, (180.1, 170.165, 204.409)), (' C 780  GLU  O  ', ' C 784  GLN  NE2', -0.438, (166.464, 184.441, 151.377)), (' B 359  SER  OG ', ' B 360  ASN  OD1', -0.438, (136.55, 173.369, 216.263)), (' C 982  SER  O  ', ' C 982  SER  OG ', -0.437, (152.239, 184.054, 209.289)), (' C 435  ALA  HA ', ' C 510  VAL  HA ', -0.437, (181.516, 139.767, 243.778)), (' B  33  THR  OG1', ' B 219  GLY  O  ', -0.436, (174.473, 222.103, 186.897)), (' A  17  ASN  O  ', ' A 256  SER  OG ', -0.435, (233.439, 153.345, 228.508)), (' B 255  SER  HA ', ' B 258  TRP  HE1', -0.434, (169.361, 243.845, 220.837)), (' B 820  ASP  O  ', ' B 824  ASN  ND2', -0.433, (193.454, 200.866, 157.727)), (' C 900  MET  SD ', ' C 917  TYR  OH ', -0.432, (159.294, 177.872, 122.864)), (' A 905  ARG  NH1', ' A1049  LEU  O  ', -0.432, (181.688, 160.472, 137.745)), (' C1084  ASP  N  ', ' C1084  ASP  OD1', -0.432, (185.23, 155.586, 105.684)), (' A 214  ARG  HD3', ' A 215  ASP  H  ', -0.431, (227.201, 152.633, 196.339)), (' A 189  LEU  HA ', ' A 189  LEU HD23', -0.427, (220.655, 145.016, 200.884)), (' C 428  ASP  N  ', ' C 428  ASP  OD2', -0.427, (183.247, 158.694, 238.048)), (' B 140  PHE  O  ', ' B 158  GLY  N  ', -0.427, (172.416, 236.491, 218.828)), (' C 357  ARG  HA ', ' C 357  ARG  HD2', -0.425, (194.917, 145.819, 233.084)), (' C 105  ILE HD11', ' C 239  GLN  HB3', -0.425, (129.44, 144.25, 215.012)), (' B 246  ARG  HB3', ' B 258  TRP  HA ', -0.424, (171.235, 247.405, 215.664)), (' A 719  THR HG23', ' A1070  ALA  HB2', -0.424, (200.081, 163.783, 135.18)), (' C 144  TYR  O  ', ' C 150  LYS  NZ ', -0.423, (106.764, 147.0, 216.654)), (' A  84  LEU HD13', ' A 267  VAL HG11', -0.423, (220.066, 159.651, 210.262)), (' A 663  ASP  N  ', ' A 663  ASP  OD1', -0.423, (206.881, 170.823, 162.854)), (' C 409  GLN HE22', ' C 417  LYS  HB3', -0.422, (181.773, 149.07, 256.193)), (' C 538  CYS  HB2', ' C 590  CYS  HB3', -0.422, (171.754, 139.259, 191.741)), (' B 405  ASP  N  ', ' B 405  ASP  OD1', -0.421, (166.372, 166.85, 235.061)), (' C 409  GLN  OE1', ' C 418  ILE  N  ', -0.421, (183.064, 150.801, 254.34)), (' A1116  THR  OG1', ' A1117  THR  N  ', -0.42, (186.322, 174.837, 108.137)), (' A 314  GLN HE22', ' A 613  GLN HE22', -0.418, (199.718, 177.388, 178.146)), (' B  56  LEU  HB2', ' B  91  TYR  HE2', -0.418, (170.489, 218.079, 196.659)), (' C 820  ASP  O  ', ' C 824  ASN  ND2', -0.418, (142.791, 175.748, 156.799)), (' B 320  VAL  H  ', ' B 591  SER  HB2', -0.417, (151.226, 195.8, 189.373)), (' C 417  LYS  HD2', ' C 455  LEU  HA ', -0.417, (186.472, 149.273, 259.844)), (' A 528  LYS  HA ', ' A 528  LYS  HD2', -0.416, (202.157, 194.075, 217.228)), (' B 662  CYS  HB2', ' B 671  CYS  HB3', -0.415, (159.801, 201.16, 161.152)), (' A 210  ILE HD12', ' A 212  LEU  HB2', -0.415, (224.249, 144.823, 196.47)), (' A1126  CYS  HB2', ' A1132  ILE HD13', -0.414, (190.597, 190.994, 112.345)), (' B 971  GLY  O  ', ' B 995  ARG  NH1', -0.411, (175.539, 183.394, 204.584)), (' C 150  LYS  HA ', ' C 150  LYS  HD2', -0.41, (104.679, 150.093, 216.249)), (' B1053  PRO  O  ', ' B1054  GLN  NE2', -0.41, (191.671, 190.785, 148.381)), (' A 111  ASP  N  ', ' A 111  ASP  OD1', -0.41, (213.711, 159.8, 228.734)), (' A 342  PHE  HE1', ' A 511  VAL HG11', -0.41, (183.435, 195.485, 229.936)), (' C 336  CYS  HB2', ' C 361  CYS  HB2', -0.409, (191.284, 138.639, 224.799)), (' B 277  LEU HD22', ' B 285  ILE HD13', -0.409, (180.008, 212.221, 191.395)), (' C 355  ARG  HA ', ' C 355  ARG  HD3', -0.408, (193.841, 144.846, 238.549)), (' B 419  ALA  HB1', ' B 424  LYS  HD3', -0.407, (163.299, 159.949, 221.057)), (' B 151  SER  O  ', ' B 151  SER  OG ', -0.406, (188.7, 240.24, 216.01)), (' A 808  ASP  N  ', ' A 808  ASP  OD2', -0.406, (184.181, 139.435, 149.563)), (' C  84  LEU HD22', ' C 267  VAL HG11', -0.406, (134.788, 141.724, 205.131)), (' A 327  VAL  HA ', ' A 542  ASN  HB3', -0.406, (201.597, 194.865, 208.248)), (' B 490  PHE  O  ', ' B 493  GLN  NE2', -0.402, (161.699, 148.423, 237.941)), (' A1104  VAL HG23', ' A1115  ILE HG12', -0.401, (192.652, 176.214, 113.492)), (' C 763  LEU HD22', ' C1008  VAL HG21', -0.401, (168.317, 182.218, 181.43)), (' A  41  LYS  HB3', ' C 563  GLN  HA ', -0.4, (195.759, 144.751, 201.601))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
