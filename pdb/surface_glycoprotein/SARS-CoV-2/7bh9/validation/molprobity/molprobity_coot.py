# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (200.904, 177.57899999999995, 164.6))]
data['rota'] = [('A', '  20 ', 'THR', 0.008159601566148922, (161.77399999999994, 165.412, 209.674)), ('A', '  21 ', 'ILE', 0.02168110236211709, (164.41699999999994, 164.50599999999994, 207.047))]
data['cbeta'] = []
data['probe'] = [(' A 524  GLN  NE2', ' A 574  VAL HG11', -1.187, (162.47, 186.481, 174.212)), (' A 524  GLN HE21', ' A 574  VAL  CG1', -1.147, (162.188, 187.387, 174.587)), (' A 524  GLN HE21', ' A 574  VAL HG11', -0.956, (161.68, 187.223, 174.804)), (' A 524  GLN  HG2', ' A 574  VAL  CG2', -0.697, (163.555, 187.628, 175.294)), (' A 323  MET  HE2', ' A 376  MET  HE3', -0.691, (183.218, 196.016, 184.939)), (' A 524  GLN  NE2', ' A 574  VAL HG21', -0.676, (163.314, 186.747, 175.079)), (' A 435  GLU  OE2', ' A 541  LYS  NZ ', -0.651, (172.115, 203.699, 159.483)), (' A 524  GLN  HG2', ' A 574  VAL HG21', -0.634, (164.221, 187.19, 175.574)), (' A 524  GLN HE21', ' A 574  VAL  CB ', -0.577, (162.688, 187.3, 175.777)), (' A 192  ARG  NH2', ' A 197  GLU  O  ', -0.576, (170.466, 154.592, 176.173)), (' A 365  THR HG22', ' A 367  ASP  H  ', -0.569, (191.202, 195.885, 168.452)), (' A 288  LYS  NZ ', ' A 431  ASP  OD2', -0.567, (179.388, 206.584, 150.782)), (' A 394  ASN  HB2', ' A 562  LYS  HE3', -0.552, (174.488, 178.161, 187.484)), (' A  19  SER  OG ', ' A  23  GLU  OE1', -0.545, (164.431, 168.037, 212.487)), (' A 233  ILE HG12', ' A 581  VAL HG21', -0.534, (165.803, 181.271, 163.032)), (' E 353  TRP  O  ', ' E 466  ARG  NH1', -0.529, (183.507, 186.727, 227.456)), (' A 295  ASP  HA ', ' A 298  VAL HG12', -0.517, (196.492, 205.045, 166.21)), (' A 327  PHE  HZ ', ' A 358  ILE HD12', -0.515, (188.507, 193.751, 184.405)), (' A 284  PRO  HD3', ' A 440  LEU HD22', -0.513, (179.932, 191.982, 151.851)), (' A 524  GLN  HG2', ' A 574  VAL HG22', -0.512, (164.325, 188.532, 175.334)), (' A 524  GLN  CG ', ' A 574  VAL HG21', -0.51, (164.349, 186.889, 174.958)), (' E 474  GLN  HG3', ' E 474  GLN  O  ', -0.489, (170.954, 166.708, 218.515)), (' A 524  GLN  CD ', ' A 574  VAL HG21', -0.488, (163.919, 186.641, 174.947)), (' A 229  THR  O  ', ' A 233  ILE HG13', -0.476, (165.671, 179.31, 162.373)), (' A 482  ARG HH22', ' A 611  SER  HB3', -0.472, (179.884, 164.748, 145.215)), (' A 420  SER  OG ', ' A 902  NAG  O3 ', -0.468, (177.832, 210.991, 174.745)), (' A  22  GLU  HG3', ' A  88  ILE HG23', -0.467, (163.239, 169.536, 202.163)), (' A 145  GLU  OE1', ' A 149  ASN  ND2', -0.466, (196.05, 177.368, 164.721)), (' A 303  ASP  N  ', ' A 303  ASP  OD1', -0.464, (195.686, 204.529, 178.343)), (' A 327  PHE  CZ ', ' A 358  ILE HD12', -0.463, (188.253, 193.728, 185.149)), (' E 426  PRO  HD3', ' E 463  PRO  HB3', -0.462, (170.275, 192.172, 225.409)), (' A 284  PRO  HD2', ' A 437  ASN  OD1', -0.458, (180.63, 195.341, 151.78)), (' A 354  GLY  HA3', ' E 502  GLY  HA3', -0.445, (185.161, 190.626, 198.884)), (' A 335  ASP  HB2', ' A 361  CYS  HB3', -0.443, (200.564, 191.472, 177.862)), (' E 438  SER  O  ', ' E 438  SER  OG ', -0.44, (192.563, 194.194, 212.034)), (' A 217  TYR  OH ', ' A 225  ASP  OD2', -0.433, (162.803, 173.946, 173.784)), (' A 245  ARG  NH1', ' A 603  PHE  O  ', -0.433, (172.629, 179.488, 143.779)), (' A 152  MET  O  ', ' A 161  ARG  NH2', -0.432, (191.65, 179.177, 154.421)), (' A 145  GLU  HA ', ' A 146  PRO  HA ', -0.429, (198.574, 177.861, 164.01)), (' E 437  ASN  OD1', ' E 438  SER  N  ', -0.428, (190.008, 196.08, 209.075)), (' A 581  VAL  O  ', ' A 585  LEU  HG ', -0.427, (164.54, 185.39, 163.102)), (' A 416  LYS  HE3', ' A 543  ASP  HB3', -0.425, (173.252, 204.59, 170.711)), (' A 293  VAL  O  ', ' A 297  MET  HG2', -0.422, (191.881, 203.878, 168.463)), (' A 248  LEU HD21', ' A 278  LEU HD22', -0.421, (185.327, 182.925, 150.158)), (' A  23  GLU  H  ', ' A  23  GLU  HG3', -0.419, (163.111, 168.817, 208.745)), (' A 462  MET  HE3', ' A 468  ILE HD11', -0.416, (173.055, 160.414, 162.169)), (' A 198  ASP  N  ', ' A 198  ASP  OD1', -0.415, (170.58, 158.102, 176.36)), (' A 474  MET  HE1', ' A 500  PRO  CD ', -0.413, (183.667, 162.129, 161.197)), (' A 376  MET  O  ', ' A 380  GLN  HG2', -0.411, (180.551, 193.741, 184.487)), (' E 468  THR  O  ', ' E 468  THR HG22', -0.41, (183.532, 177.451, 225.939)), (' E 452  LEU HD23', ' E 494  SER  HB3', -0.409, (187.636, 178.844, 213.689)), (' A 474  MET  HE1', ' A 500  PRO  HD3', -0.408, (183.494, 161.841, 160.801)), (' A 132  VAL HG12', ' A 171  GLU  HG3', -0.408, (199.616, 165.368, 159.328)), (' A 215  TYR  CZ ', ' A 568  LEU HD13', -0.408, (157.672, 182.006, 185.507)), (' E 438  SER  HB2', ' E 509  ARG  HG3', -0.406, (190.188, 195.087, 213.764)), (' A 351  LEU  HB2', ' A 355  ASP  HB3', -0.405, (188.523, 186.051, 194.753)), (' A 524  GLN HE21', ' A 574  VAL  CG2', -0.404, (162.912, 187.173, 175.772)), (' A 371  THR  O  ', ' A 375  GLU  HG2', -0.403, (186.856, 191.1, 177.868)), (' A 535  HIS  CD2', ' A 542  CYS  HB3', -0.403, (168.336, 200.363, 168.454))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
