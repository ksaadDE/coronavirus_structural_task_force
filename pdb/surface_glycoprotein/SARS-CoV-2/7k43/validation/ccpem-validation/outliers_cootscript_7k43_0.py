
from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

dict_residue_prop_objects = {}
class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)
        ##save property list frame object
        dict_residue_prop_objects[data_key] = list_obj
# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "clusters","rama", "rota", "cbeta", "probe", "smoc", "fdr",
               "fsc","diffmap","cablam",
               "jpred"]
  data_titles = { "clusters"  : "Outlier residue clusters",
                  "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes",
                  "smoc"  : "Local density fit (SMOC)",
                  "fdr": "Backbone position score (FDR)",
                  "fsc": "Local density fit (FSC)",
                  "diffmap": "Model-map difference",
                  "cablam": "Ca geometry (CaBLAM)",
                  "jpred":"SS prediction"}
  data_names = { "clusters"  : ["Chain","Residue","Cluster","Outlier types"],
                 "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"],
                 "smoc" : ["Chain", "Residue", "Name", "Score"],
                 "fdr" : ["Chain", "Residue", "Name", "Score"],
                 "fsc" : ["Chain", "Residue", "Name", "Score"],
                 "diffmap" : ["Chain", "Residue", "Name", "Score"],
                 "cablam" : ["Chain", "Residue","Name","recommendation","DSSP"],
                 "jpred" : ["Chain", "Residue","Name","predicted SS","current SS"]}
  if (gobject is not None) :
    data_types = {  "clusters" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_INT, gobject.TYPE_STRING,
                             gobject.TYPE_PYOBJECT],
                    "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "smoc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "fdr" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "fsc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "diffmap" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cablam" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT],
                   "jpred" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT]}
  else :
    data_types = dict([ (s, []) for s in ["clusters","rama","rota","cbeta","probe","smoc",
                                          "fdr","fsc","diffmap","cablam","jpred"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "Validation To-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    ##adding a column type for checkbox (bool) before atom coordinate
    if gobject is not None:
        column_types = column_types[:-1]+[bool]+[column_types[-1]]
    
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    ##add a cell for checkbox
    cell1 = gtk.CellRendererToggle()
    cell1.connect ("toggled", self.on_selected_toggled)
    column = gtk.TreeViewColumn('Dealt with',cell1,active=i+1)
    self.listctrl.append_column(column)
    #column.set_sort_column_id(i+1)
    #column.pack_start(cell1, True)
    
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      row = row[:-1] + (False,)+(row[-1],)
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()
  ##check box toggle
  def on_selected_toggled(self,renderer,path):
    if path is not None:
      model = self.listmodel.get_model()
      it = model.get_iter(path)
      #set toggle
      model[it][-2] = not model[it][-2]
      #set checkboxes for same residues in other lists
      try:
        chain = model[it][0]
        residue = model[it][1]
        for data_key in dict_residue_prop_objects:
          prop_obj = dict_residue_prop_objects[data_key]
          for row in prop_obj.listmodel.get_model():
            if data_key == 'probe':
              atom1_split = row[0].split()
              atom2_split = row[1].split()
              if atom1_split[0] == chain and atom1_split[1] == residue:
                row[-2] = model[it][-2]
              elif atom2_split[0] == chain and atom2_split[1] == residue:
                row[-2] = model[it][-2]
            elif row[0] == chain and row[1] == residue:
              row[-2] = model[it][-2]
      except IndexError: pass

  def check_chain_residue(self,chain,residue):
      pass
  
def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data
data = {}
data['fdr'] = []
data['fsc'] = []
data['diffmap'] = []
data['jpred'] = []
data['probe'] = [(' E 115  GLN HE21', ' E 130  VAL  CG1', -1.029, (239.337, 183.295, 220.712)), (' B 115  GLN HE21', ' B 130  VAL  CG1', -1.025, (172.168, 198.008, 220.712)), (' A 115  GLN HE21', ' A 130  VAL  CG1', -1.021, (218.495, 248.819, 220.743)), (' B 115  GLN HE21', ' B 130  VAL HG11', -0.88, (172.347, 198.674, 220.741)), (' E 115  GLN HE21', ' E 130  VAL HG11', -0.875, (238.43, 182.661, 221.242)), (' A 115  GLN HE21', ' A 130  VAL HG11', -0.871, (219.441, 248.569, 221.29)), (' E 130  VAL  O  ', ' E 130  VAL HG12', -0.835, (239.938, 181.711, 222.014)), (' B 130  VAL  O  ', ' B 130  VAL HG12', -0.823, (170.492, 197.791, 221.983)), (' A 130  VAL  O  ', ' A 130  VAL HG12', -0.805, (219.333, 250.235, 221.966)), (' A 115  GLN HE21', ' A 130  VAL HG12', -0.696, (218.809, 249.278, 221.821)), (' E 115  GLN HE21', ' E 130  VAL HG12', -0.682, (239.764, 182.991, 222.002)), (' B 115  GLN HE21', ' B 130  VAL HG12', -0.672, (171.741, 197.704, 222.002)), (' E 130  VAL  CG1', ' E 233  ILE HD11', -0.64, (239.985, 182.375, 219.801)), (' B 115  GLN  NE2', ' B 130  VAL HG11', -0.639, (172.895, 198.382, 221.004)), (' B 130  VAL  CG1', ' B 233  ILE HD11', -0.638, (171.086, 197.709, 219.851)), (' A 130  VAL  CG1', ' A 233  ILE HD11', -0.633, (218.78, 249.851, 219.871)), (' A 115  GLN  NE2', ' A 130  VAL HG11', -0.619, (218.572, 247.863, 220.975)), (' E 115  GLN  NE2', ' E 130  VAL HG11', -0.608, (238.439, 183.584, 221.06)), (' A 130  VAL HG13', ' A 233  ILE HD11', -0.586, (218.461, 249.694, 219.461)), (' B 130  VAL HG13', ' B 233  ILE HD11', -0.577, (171.462, 197.44, 220.138)), (' A 131  CYS  HA ', ' A 166  CYS  HA ', -0.574, (220.613, 251.836, 225.302)), (' E 131  CYS  HA ', ' E 166  CYS  HA ', -0.572, (240.828, 179.253, 225.596)), (' E 130  VAL HG13', ' E 233  ILE HD11', -0.57, (240.615, 182.788, 219.819)), (' B 131  CYS  HA ', ' B 166  CYS  HA ', -0.564, (168.219, 198.728, 225.431)), (' E 115  GLN  NE2', ' E 130  VAL  CG1', -0.529, (239.061, 183.695, 221.177)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.494, (213.483, 218.755, 149.372)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.49, (200.412, 208.69, 149.826)), (' E1028  LYS  NZ ', ' E1042  PHE  O  ', -0.487, (215.918, 202.489, 149.373)), (' A 115  GLN  NE2', ' A 130  VAL  CG1', -0.478, (218.059, 248.509, 221.31)), (' B 130  VAL  CG1', ' B 130  VAL  O  ', -0.472, (170.235, 197.787, 221.868)), (' B 115  GLN  NE2', ' B 130  VAL  CG1', -0.452, (172.684, 197.89, 221.099)), (' E 130  VAL  CG1', ' E 130  VAL  O  ', -0.45, (240.508, 181.754, 221.901)), (' A 130  VAL HG11', ' A 233  ILE HD11', -0.445, (218.862, 248.895, 220.0)), (' E 130  VAL HG11', ' E 233  ILE HD11', -0.443, (239.238, 182.886, 219.995)), (' B  25  PRO  HA ', ' B  26  PRO  HD3', -0.418, (163.898, 172.292, 203.963)), (' E1139  ASP  N  ', ' E1139  ASP  OD2', -0.416, (219.914, 213.026, 104.527)), (' A 130  VAL  CG1', ' A 130  VAL  O  ', -0.414, (219.256, 250.629, 221.868)), (' A 216  LEU  HA ', ' A 217  PRO  HD3', -0.413, (216.746, 263.533, 193.218)), (' B 130  VAL HG11', ' B 233  ILE HD11', -0.411, (172.024, 198.167, 220.042)), (' A1139  ASP  N  ', ' A1139  ASP  OD2', -0.409, (202.497, 217.189, 104.459)), (' A 862  PRO  HA ', ' A 863  PRO  HD3', -0.408, (232.847, 217.819, 169.447)), (' E 792  PRO  HA ', ' E 793  PRO  HD3', -0.404, (203.857, 177.068, 138.027)), (' E 714  ILE  HA ', ' E 715  PRO  HD3', -0.401, (229.483, 207.62, 129.494))]
data['cbeta'] = [('A', '  61 ', 'ASN', ' ', 0.2651983506758127, (203.392, 257.494, 195.15799999999996)), ('A', ' 165 ', 'ASN', ' ', 0.7789193674872142, (217.86700000000005, 250.46900000000005, 229.66299999999998)), ('A', ' 662 ', 'CYS', ' ', 0.3622871138369374, (199.79700000000005, 235.61, 160.5)), ('H', '  81 ', 'MET', ' ', 0.2783396942878061, (193.019, 180.275, 257.167)), ('B', '  61 ', 'ASN', ' ', 0.26548069268179186, (172.173, 180.53, 195.15799999999996)), ('B', ' 165 ', 'ASN', ' ', 0.7780584810492889, (171.019, 196.579, 229.66299999999998)), ('B', ' 662 ', 'CYS', ' ', 0.3632805217924201, (192.923, 188.359, 160.5)), ('C', '  81 ', 'MET', ' ', 0.27804437090418527, (244.233, 210.157, 257.167)), ('E', '  61 ', 'ASN', ' ', 0.2645775694966404, (254.435, 191.976, 195.15799999999996)), ('E', ' 165 ', 'ASN', ' ', 0.7791590804967752, (241.11399999999998, 182.952, 229.66299999999998)), ('E', ' 662 ', 'CYS', ' ', 0.36310086559698723, (237.28, 206.031, 160.5)), ('F', '  81 ', 'MET', ' ', 0.2784608470435833, (192.74800000000005, 239.56800000000007, 257.167))]
data['smoc'] = [('A', 15, u'CYS', 0.5722174315856604, (213.967, 270.187, 224.48100000000002)), ('A', 55, u'PHE', 0.4905587004830538, (212.815, 246.89600000000002, 197.14899999999997)), ('A', 62, u'VAL', 0.523609804263075, (207.507, 259.073, 197.253)), ('A', 80, u'ASP', 0.4890108413136014, (209.936, 269.573, 207.939)), ('A', 101, u'ILE', 0.5038925064284964, (220.829, 266.18, 207.431)), ('A', 117, u'LEU', 0.5398401774806244, (217.772, 253.501, 217.795)), ('A', 123, u'ALA', 0.6059547485506082, (230.494, 267.98499999999996, 213.61499999999998)), ('A', 135, u'PHE', 0.5474613477947536, (213.031, 261.893, 222.696)), ('A', 143, u'VAL', 0.6222393135761727, (224.752, 275.138, 213.683)), ('A', 154, u'GLU', 0.6014841370253216, (227.905, 273.34400000000005, 215.642)), ('A', 159, u'VAL', 0.5441083959049073, (217.463, 265.453, 220.32600000000002)), ('A', 198, u'ASP', 0.6036825985846066, (215.934, 238.959, 211.815)), ('A', 235, u'ILE', 0.4486830745937043, (210.912, 249.666, 214.621)), ('A', 276, u'LEU', 0.4636520296942609, (215.99800000000002, 241.03, 187.736)), ('A', 291, u'CYS', 0.5414621935803554, (208.93800000000002, 242.344, 187.42800000000003)), ('A', 363, u'ALA', 0.4818224984302279, (181.96800000000002, 221.091, 220.21299999999997)), ('A', 376, u'THR', 0.4541292847393675, (198.728, 215.665, 228.57)), ('A', 398, u'ASP', 0.4249807157637109, (186.816, 206.796, 225.39700000000002)), ('A', 406, u'GLU', 0.3752710807491392, (201.72299999999998, 204.007, 230.783)), ('A', 413, u'GLY', 0.5127817581980312, (202.369, 203.112, 216.977)), ('A', 430, u'THR', 0.4608188970110437, (192.62800000000001, 211.094, 214.253)), ('A', 431, u'GLY', 0.4120591303364246, (191.833, 212.442, 217.66299999999998)), ('A', 438, u'SER', 0.4152874691568763, (193.948, 211.82700000000003, 239.54399999999998)), ('A', 495, u'TYR', 0.42103429154002164, (197.096, 198.71299999999997, 239.946)), ('A', 512, u'VAL', 0.44594255763397395, (190.61299999999997, 209.835, 224.198)), ('A', 519, u'HIS', 0.49547073351806736, (181.601, 211.58100000000002, 203.53)), ('A', 544, u'ASN', 0.5224914152124651, (179.74299999999997, 222.29, 207.15800000000002)), ('A', 548, u'GLY', 0.6036703831599568, (187.218, 226.016, 198.762)), ('A', 563, u'GLN', 0.5683514738874578, (172.668, 213.47899999999998, 199.266)), ('A', 566, u'GLY', 0.5259280021406919, (177.783, 216.33800000000002, 194.431)), ('A', 574, u'ASP', 0.5729786212302768, (180.80800000000002, 220.701, 192.122)), ('A', 671, u'CYS', 0.5000066874892413, (197.05200000000002, 237.965, 164.477)), ('A', 695, u'TYR', 0.542041523398473, (193.15200000000002, 241.67, 162.642)), ('A', 699, u'LEU', 0.5514233835121943, (195.494, 233.646, 153.731)), ('A', 703, u'ASN', 0.5679014860460578, (193.098, 234.869, 142.225)), ('A', 733, u'LYS', 0.4377074820669875, (227.192, 215.41, 171.906)), ('A', 742, u'ILE', 0.41799653245439783, (224.309, 213.64, 191.789)), ('A', 758, u'SER', 0.49742617529961186, (221.334, 200.618, 187.64399999999998)), ('A', 762, u'GLN', 0.501024280551346, (221.222, 203.24299999999997, 182.024)), ('A', 816, u'SER', 0.4366214301248278, (233.444, 228.563, 150.608)), ('A', 819, u'GLU', 0.43082854357733097, (229.845, 228.634, 154.135)), ('A', 853, u'GLN', 0.4201090638449621, (228.455, 223.625, 183.192)), ('A', 873, u'TYR', 0.44360555255571366, (232.87800000000001, 216.31, 151.809)), ('A', 880, u'GLY', 0.39488210288991066, (231.132, 216.036, 141.444)), ('A', 881, u'THR', 0.4051605487944251, (227.833, 217.82200000000003, 140.843)), ('A', 890, u'ALA', 0.47660127186247725, (225.623, 206.068, 140.509)), ('A', 894, u'LEU', 0.3808172188287214, (231.75, 210.879, 133.94299999999998)), ('A', 905, u'ARG', 0.445838271387609, (218.454, 218.955, 133.51899999999998)), ('A', 923, u'ILE', 0.43504759985367925, (220.503, 231.441, 132.14299999999997)), ('A', 926, u'GLN', 0.47033566969266827, (220.124, 234.612, 136.106)), ('A', 962, u'LEU', 0.4153850390878644, (220.002, 220.632, 184.534)), ('A', 968, u'SER', 0.45731502208596264, (217.534, 223.034, 194.618)), ('A', 990, u'GLU', 0.4980061171369198, (221.662, 210.078, 204.95100000000002)), ('A', 1011, u'GLN', 0.46483459438813485, (217.39700000000002, 214.477, 174.923)), ('A', 1022, u'ALA', 0.4339734000245815, (219.198, 214.11399999999998, 159.345)), ('A', 1027, u'THR', 0.43559017988816684, (217.48800000000003, 211.88400000000001, 151.374)), ('A', 1056, u'ALA', 0.44279034530485484, (226.67, 224.70299999999997, 158.32200000000003)), ('A', 1072, u'GLU', 0.5307856906386335, (202.642, 235.60299999999998, 130.61399999999998)), ('A', 1075, u'PHE', 0.5254658868173574, (196.559, 231.10299999999998, 123.787)), ('A', 1077, u'THR', 0.5159476021546358, (193.834, 225.539, 122.35499999999999)), ('A', 1079, u'PRO', 0.5321313324237481, (192.863, 218.60399999999998, 122.12599999999999)), ('A', 1089, u'PHE', 0.5542346266550925, (197.146, 214.632, 118.476)), ('A', 1095, u'PHE', 0.4861780025691342, (198.123, 222.65800000000002, 120.026)), ('A', 1306, u'NAG', 0.5823084982030324, (215.656, 245.23999999999998, 163.085)), ('H', 4, u'LEU', 0.5014668965745082, (201.758, 190.565, 257.369)), ('H', 6, u'GLN', 0.5548265288737104, (197.666, 187.872, 261.808)), ('H', 10, u'GLU', 0.5851651705590023, (192.126, 180.67299999999997, 269.16200000000003)), ('H', 45, u'LEU', 0.5519307320048226, (206.494, 173.324, 258.47799999999995)), ('H', 77, u'THR', 0.40315463074335917, (193.89800000000002, 193.71099999999998, 251.89100000000002)), ('H', 86, u'LEU', 0.5811648623948739, (188.834, 170.439, 263.42299999999994)), ('H', 90, u'ASP', 0.5425534383594705, (195.271, 170.365, 264.025)), ('H', 100, u'ALA', 0.45303556082257634, (205.048, 185.60399999999998, 243.804)), ('H', 109, u'TYR', 0.42821249404803396, (206.554, 181.48600000000002, 243.39000000000001)), ('H', 118, u'GLY', 0.5236237726820177, (202.063, 182.718, 263.612)), ('H', 119, u'THR', 0.48600350350701654, (198.62, 182.271, 265.09)), ('L', 1, u'GLU', 0.5696530431437504, (205.412, 162.09, 246.787)), ('L', 11, u'LEU', 0.5978930717228563, (224.40800000000002, 170.42100000000002, 264.722)), ('L', 47, u'LEU', 0.4519596652913672, (213.91, 183.447, 254.142)), ('L', 48, u'LEU', 0.5575855930282103, (217.678, 183.224, 253.931)), ('L', 72, u'PHE', 0.5284479122017526, (222.091, 171.142, 248.564)), ('L', 79, u'LEU', 0.607572778205938, (228.194, 181.983, 263.63599999999997)), ('L', 80, u'GLU', 0.6007669532903599, (226.742, 184.54899999999998, 265.96999999999997)), ('L', 82, u'GLU', 0.5449010970169281, (221.444, 184.586, 266.54200000000003)), ('L', 90, u'GLN', 0.4859336955429068, (212.07, 174.031, 251.171)), ('B', 15, u'CYS', 0.6015747568217337, (155.893, 183.342, 224.48100000000002)), ('B', 80, u'ASP', 0.4942522168209932, (158.44, 180.15800000000002, 207.939)), ('B', 86, u'PHE', 0.5123716580054899, (173.93200000000002, 187.55100000000002, 209.098)), ('B', 97, u'LYS', 0.6459163155868427, (149.336, 191.80200000000002, 199.47299999999998)), ('B', 104, u'TRP', 0.5560308068810297, (163.545, 191.79299999999998, 212.256)), ('B', 135, u'PHE', 0.6157540956112025, (163.54399999999998, 186.678, 222.696)), ('B', 166, u'CYS', 0.6050527073033161, (168.36100000000002, 199.787, 226.85200000000003)), ('B', 180, u'GLU', 0.5969610901885163, (143.612, 193.87, 205.21299999999997)), ('B', 201, u'PHE', 0.5355678076939426, (173.563, 199.586, 211.23399999999998)), ('B', 223, u'LEU', 0.5152474172916912, (167.853, 201.19299999999998, 197.092)), ('B', 233, u'ILE', 0.5737157429975135, (175.93200000000002, 195.788, 217.972)), ('B', 235, u'ILE', 0.4134101561870399, (175.192, 190.95700000000002, 214.621)), ('B', 243, u'ALA', 0.5843004626907096, (151.997, 188.466, 211.506)), ('B', 296, u'LEU', 0.5076860100608734, (181.98100000000002, 190.06, 179.538)), ('B', 339, u'GLY', 0.5252773116911538, (217.075, 182.037, 230.606)), ('B', 350, u'VAL', 0.3838451707483081, (227.731, 198.86, 231.07299999999998)), ('B', 356, u'LYS', 0.472756143102437, (226.804, 185.71599999999998, 224.82000000000002)), ('B', 365, u'TYR', 0.548755227631142, (210.592, 184.35200000000003, 222.16299999999998)), ('B', 398, u'ASP', 0.43746366881618376, (224.36700000000002, 191.524, 225.39700000000002)), ('B', 406, u'GLU', 0.40123232197825265, (219.329, 205.82800000000003, 230.783)), ('B', 422, u'ASN', 0.4351584030749989, (229.42800000000003, 202.63, 226.889)), ('B', 434, u'ILE', 0.44603466344069576, (214.612, 194.089, 227.148)), ('B', 447, u'GLY', 0.4854331031826004, (225.343, 202.108, 247.961)), ('B', 484, u'GLU', 0.5448114013997585, (244.64299999999997, 212.74499999999998, 237.80200000000002)), ('B', 489, u'TYR', 0.48547745894465066, (239.972, 212.724, 234.79899999999998)), ('B', 493, u'GLN', 0.402640835144113, (232.23999999999998, 206.563, 237.46800000000002)), ('B', 509, u'ARG', 0.4236409801689504, (219.097, 195.046, 234.04399999999998)), ('B', 511, u'VAL', 0.39979948260579423, (219.45800000000003, 192.429, 227.82700000000003)), ('B', 544, u'ASN', 0.5347875807674157, (214.485, 177.65200000000002, 207.15800000000002)), ('B', 548, u'GLY', 0.5351906919863544, (207.52100000000002, 182.262, 198.762)), ('B', 567, u'ARG', 0.5638759829904406, (219.80200000000002, 181.944, 192.311)), ('B', 586, u'ASP', 0.5764236717169362, (213.993, 173.60299999999998, 192.10999999999999)), ('B', 598, u'ILE', 0.5156213677276411, (187.542, 187.864, 172.78)), ('B', 649, u'CYS', 0.5364353678125319, (194.529, 178.33100000000002, 175.90800000000002)), ('B', 666, u'ILE', 0.48572928726257214, (194.635, 185.971, 168.772)), ('B', 671, u'CYS', 0.5019211583887374, (192.256, 184.804, 164.477)), ('B', 672, u'ALA', 0.5038462987205853, (188.721, 184.537, 165.811)), ('B', 703, u'ASN', 0.631270944324536, (196.914, 182.92800000000003, 142.225)), ('B', 712, u'ILE', 0.5408464308278469, (201.86200000000002, 188.74099999999999, 127.787)), ('B', 773, u'GLU', 0.40053603865329096, (204.288, 222.707, 166.74499999999998)), ('B', 781, u'VAL', 0.4125711069647824, (200.14499999999998, 220.83100000000002, 155.278)), ('B', 816, u'SER', 0.5138088924081013, (182.202, 221.02200000000002, 150.608)), ('B', 868, u'GLU', 0.4665758008512605, (186.93200000000002, 228.101, 157.90200000000002)), ('B', 894, u'LEU', 0.47064957281071507, (198.364, 228.39700000000002, 133.94299999999998)), ('B', 903, u'ALA', 0.380343807490563, (195.502, 213.995, 128.91299999999998)), ('B', 911, u'VAL', 0.46379467665643714, (198.83200000000002, 205.815, 128.51)), ('B', 962, u'LEU', 0.45527991225367415, (195.791, 213.346, 184.534)), ('B', 988, u'GLU', 0.4528523544085232, (202.706, 218.345, 209.893)), ('B', 999, u'GLY', 0.45333528057362443, (202.71099999999998, 212.26, 193.26299999999998)), ('B', 1002, u'GLN', 0.4260486374963048, (205.13, 212.683, 188.848)), ('B', 1007, u'TYR', 0.4229906085200994, (201.47899999999998, 213.265, 181.025)), ('B', 1010, u'GLN', 0.45261742406465416, (203.507, 211.003, 176.725)), ('B', 1017, u'GLU', 0.40556605725784023, (204.003, 210.791, 165.975)), ('B', 1018, u'ILE', 0.40705039326802644, (201.636, 213.533, 164.85200000000003)), ('B', 1031, u'GLU', 0.39675588410451057, (203.507, 215.333, 145.455)), ('B', 1056, u'ALA', 0.4740760375702397, (188.93200000000002, 217.085, 158.32200000000003)), ('B', 1072, u'GLU', 0.48849271150045387, (191.506, 190.82600000000002, 130.61399999999998)), ('B', 1087, u'ALA', 0.5807602068442843, (216.342, 193.063, 114.45700000000001)), ('B', 1138, u'TYR', 0.5973336756242101, (206.15800000000002, 198.231, 106.67799999999998)), ('B', 1303, u'NAG', 0.6228928020565453, (169.05800000000002, 178.94899999999998, 192.078)), ('B', 1306, u'NAG', 0.5700463093313775, (176.653, 197.278, 163.085)), ('C', 7, u'SER', 0.5688919860015955, (237.05, 208.127, 264.317)), ('C', 28, u'THR', 0.4391802072040878, (227.33800000000002, 208.829, 246.06)), ('C', 45, u'LEU', 0.5110044248453182, (243.515, 225.30200000000002, 258.47799999999995)), ('C', 54, u'ILE', 0.4819778419316747, (236.659, 205.578, 242.289)), ('C', 77, u'THR', 0.4461602627936754, (232.15800000000002, 204.2, 251.89100000000002)), ('C', 86, u'LEU', 0.5524444235809977, (254.844, 211.45000000000002, 263.42299999999994)), ('C', 90, u'ASP', 0.5435523779622455, (251.689, 217.062, 264.025)), ('C', 92, u'ALA', 0.5332782643343064, (246.365, 218.707, 265.35400000000004)), ('C', 107, u'SER', 0.5208075420569558, (234.227, 224.92200000000003, 240.21599999999998)), ('C', 109, u'TYR', 0.4503340168551887, (236.417, 221.27299999999997, 243.39000000000001)), ('C', 116, u'GLY', 0.5180923722011002, (233.38000000000002, 215.722, 259.374)), ('D', 6, u'GLN', 0.5630256889899126, (243.07, 238.25, 256.168)), ('D', 11, u'LEU', 0.6211845821794342, (237.072, 242.267, 264.722)), ('D', 47, u'LEU', 0.4793248435387042, (231.041, 226.66299999999998, 254.142)), ('D', 69, u'GLY', 0.619048914275684, (241.35000000000002, 240.17399999999998, 241.637)), ('D', 80, u'GLU', 0.6318971996410688, (223.67, 237.224, 265.96999999999997)), ('D', 82, u'GLU', 0.5381843301850231, (226.287, 232.618, 266.54200000000003)), ('E', 15, u'CYS', 0.5340872954779712, (260.14000000000004, 176.471, 224.48100000000002)), ('E', 53, u'ASP', 0.5572405108186586, (235.02200000000002, 191.465, 198.41899999999998)), ('E', 62, u'VAL', 0.5670577143982314, (253.74499999999998, 187.622, 197.253)), ('E', 86, u'PHE', 0.4964357547748393, (247.475, 189.98800000000003, 209.098)), ('E', 135, u'PHE', 0.5590708049870342, (253.425, 181.429, 222.696)), ('E', 154, u'GLU', 0.6434058299711909, (255.905, 162.82200000000003, 215.642)), ('E', 159, u'VAL', 0.5693121990813219, (254.292, 175.81, 220.32600000000002)), ('E', 180, u'GLU', 0.6377841241040536, (257.163, 160.571, 205.21299999999997)), ('E', 201, u'PHE', 0.5497012418134434, (237.237, 183.65200000000002, 211.23399999999998)), ('E', 223, u'LEU', 0.553532107008257, (238.7, 177.903, 197.092)), ('E', 235, u'ILE', 0.46343681037617185, (243.89600000000002, 189.377, 214.621)), ('E', 240, u'THR', 0.5115514222005707, (253.259, 179.82100000000003, 210.606)), ('E', 291, u'CYS', 0.5024090102814577, (238.542, 194.748, 187.42800000000003)), ('E', 336, u'CYS', 0.4743434761253213, (233.237, 232.978, 223.39000000000001)), ('E', 349, u'SER', 0.3908298704289671, (211.77599999999998, 232.82200000000003, 234.181)), ('E', 350, u'VAL', 0.39975331049481083, (210.782, 230.92600000000002, 231.07299999999998)), ('E', 351, u'TYR', 0.41094633577491596, (207.99200000000002, 233.35500000000002, 230.26)), ('E', 361, u'CYS', 0.5331175047496107, (234.894, 234.819, 219.037)), ('E', 398, u'ASP', 0.41258973594337417, (218.817, 231.68, 225.39700000000002)), ('E', 406, u'GLU', 0.44540021268996965, (208.948, 220.165, 230.783)), ('E', 429, u'PHE', 0.4186333309781157, (215.899, 224.82600000000002, 214.412)), ('E', 436, u'TRP', 0.4592190559466306, (220.866, 220.46200000000002, 234.04899999999998)), ('E', 495, u'TYR', 0.40373191382830953, (206.677, 226.819, 239.946)), ('E', 509, u'ARG', 0.4378009388520269, (218.40200000000002, 225.35500000000002, 234.04399999999998)), ('E', 542, u'ASN', 0.5898033085129258, (238.007, 225.01899999999998, 204.19)), ('E', 544, u'ASN', 0.5438306602599994, (235.772, 230.05800000000002, 207.15800000000002)), ('E', 550, u'GLY', 0.5912727488695445, (239.755, 222.319, 193.883)), ('E', 558, u'LYS', 0.6178072916861949, (236.91299999999998, 242.88100000000003, 191.52700000000002)), ('E', 613, u'GLN', 0.5308740966129069, (238.8, 212.59, 177.63)), ('E', 671, u'CYS', 0.490678482958675, (240.692, 207.231, 164.477)), ('E', 703, u'ASN', 0.5073669903045825, (239.98800000000003, 212.20299999999997, 142.225)), ('E', 718, u'PHE', 0.54271703366637, (228.16899999999998, 197.782, 132.8)), ('E', 771, u'ALA', 0.4653038232796911, (202.518, 195.526, 171.039)), ('E', 868, u'GLU', 0.5063327279892734, (205.85800000000003, 180.972, 157.90200000000002)), ('E', 876, u'ALA', 0.4468310476178207, (203.97899999999998, 186.14399999999998, 146.83100000000002)), ('E', 901, u'GLN', 0.43896551256592026, (210.316, 192.804, 131.947)), ('E', 924, u'ALA', 0.4932478123087694, (221.847, 186.92000000000002, 133.35700000000003)), ('E', 962, u'LEU', 0.3958749246296694, (214.207, 196.02200000000002, 184.534)), ('E', 966, u'LEU', 0.43253286411199815, (213.99, 194.089, 191.63)), ('E', 970, u'PHE', 0.46000448337277605, (215.77399999999997, 201.71899999999997, 197.192)), ('E', 989, u'ALA', 0.4114544860740446, (206.134, 197.22299999999998, 206.889)), ('E', 990, u'GLU', 0.4101087977788425, (204.237, 199.86100000000002, 204.95100000000002)), ('E', 997, u'ILE', 0.4362527936034672, (207.06, 200.647, 195.39700000000002)), ('E', 1008, u'VAL', 0.4225457854773287, (208.148, 201.939, 179.417)), ('E', 1011, u'GLN', 0.40399059387404646, (210.17899999999997, 201.35500000000002, 174.923)), ('E', 1018, u'ILE', 0.39533853577661154, (211.122, 200.99, 164.85200000000003)), ('E', 1072, u'GLU', 0.5715725820790122, (235.85200000000003, 203.571, 130.61399999999998)), ('E', 1073, u'LYS', 0.4841921855164083, (236.262, 205.632, 127.423)), ('E', 1138, u'TYR', 0.5595946406416822, (222.11299999999997, 212.55700000000002, 106.67799999999998)), ('E', 1306, u'NAG', 0.5801433344060906, (237.691, 187.48200000000003, 163.085)), ('F', 15, u'GLY', 0.5728761915327402, (187.65800000000002, 252.472, 265.082)), ('F', 54, u'ILE', 0.44221147643265185, (200.499, 235.29899999999998, 242.289)), ('F', 77, u'THR', 0.4193285012017516, (203.944, 232.089, 251.89100000000002)), ('F', 81, u'MET', 0.5075408971487373, (193.73299999999998, 240.292, 256.302)), ('F', 89, u'ASP', 0.5948671788051361, (179.694, 243.782, 265.33099999999996)), ('F', 92, u'ALA', 0.5346735016151233, (184.277, 237.13899999999998, 265.35400000000004)), ('F', 102, u'PHE', 0.4691235530925828, (188.92000000000002, 230.118, 238.923)), ('G', 34, u'LEU', 0.5091195908079142, (177.21899999999997, 222.777, 246.474)), ('G', 69, u'GLY', 0.6570192579399882, (168.194, 222.063, 241.637)), ('G', 75, u'THR', 0.6437112000287897, (173.344, 211.71099999999998, 254.92800000000003)), ('G', 80, u'GLU', 0.5914994678060362, (179.58800000000002, 208.226, 265.96999999999997)), ('G', 92, u'TYR', 0.5205536902864013, (179.036, 229.225, 244.984)), ('G', 103, u'THR', 0.5444783156509905, (172.27499999999998, 222.60999999999999, 261.641))]
data['rota'] = [('A', '1135 ', 'ASN', 0.16765611521648202, (193.263, 222.7, 110.451)), ('B', '1135 ', 'ASN', 0.16772270655629384, (207.37, 189.15500000000006, 110.451)), ('E', '1135 ', 'ASN', 0.1675942240483236, (229.367, 218.145, 110.451))]
data['clusters'] = [('A', '108', 1, 'cablam Outlier', (208.0, 252.0, 218.4)), ('A', '109', 1, 'cablam Outlier', (206.9, 254.7, 220.7)), ('A', '111', 1, 'cablam Outlier', (209.4, 257.8, 224.8)), ('A', '112', 1, 'cablam Outlier', (211.7, 255.5, 226.9)), ('A', '135', 1, 'smoc Outlier', (213.031, 261.893, 222.696)), ('A', '15', 1, 'smoc Outlier', (213.967, 270.187, 224.48100000000002)), ('A', '158', 1, 'Dihedral angle:CD:NE:CZ:NH1', (218.38700000000003, 268.967, 221.342)), ('A', '159', 1, 'smoc Outlier', (217.463, 265.453, 220.32600000000002)), ('A', '161', 1, 'cablam Outlier', (216.6, 264.4, 227.3)), ('A', '235', 1, 'smoc Outlier', (210.912, 249.666, 214.621)), ('A', '237', 1, 'Dihedral angle:CD:NE:CZ:NH1', (208.13299999999998, 254.539, 213.364)), ('A', '115', 2, 'side-chain clash', (218.059, 248.509, 221.31)), ('A', '117', 2, 'smoc Outlier', (217.772, 253.501, 217.795)), ('A', '130', 2, 'side-chain clash\nbackbone clash', (219.256, 250.629, 221.868)), ('A', '131', 2, 'side-chain clash', (220.613, 251.836, 225.302)), ('A', '164', 2, 'cablam CA Geom Outlier', (219.5, 255.0, 230.1)), ('A', '165', 2, 'C-beta\nBond angle:N:CA:CB\ncablam Outlier', (219.18800000000002, 251.23499999999999, 229.48100000000002)), ('A', '166', 2, 'side-chain clash', (220.613, 251.836, 225.302)), ('A', '233', 2, 'side-chain clash', (218.862, 248.895, 220.0)), ('A', '661', 3, 'Bond angle:C', (199.759, 238.535, 156.576)), ('A', '662', 3, 'C-beta\nBond angle:N:CA:CB\nBond angle:CA:C\nBond angle:N:CA\nBond length:C:O\nBond length:C', (200.164, 236.972, 160.025)), ('A', '663', 3, 'Bond angle:N\nBond length:N', (202.86, 238.49800000000002, 162.259)), ('A', '666', 3, 'cablam Outlier', (196.9, 235.3, 168.8)), ('A', '667', 3, 'cablam Outlier', (194.7, 232.4, 167.8)), ('A', '671', 3, 'smoc Outlier', (197.05200000000002, 237.965, 164.477)), ('A', '695', 3, 'smoc Outlier', (193.15200000000002, 241.67, 162.642)), ('A', '1075', 4, 'smoc Outlier', (196.559, 231.10299999999998, 123.787)), ('A', '1077', 4, 'smoc Outlier', (193.834, 225.539, 122.35499999999999)), ('A', '1079', 4, 'smoc Outlier', (192.863, 218.60399999999998, 122.12599999999999)), ('A', '1089', 4, 'smoc Outlier', (197.146, 214.632, 118.476)), ('A', '1095', 4, 'smoc Outlier', (198.123, 222.65800000000002, 120.026)), ('A', '123', 5, 'smoc Outlier', (230.494, 267.98499999999996, 213.61499999999998)), ('A', '143', 5, 'smoc Outlier', (224.752, 275.138, 213.683)), ('A', '152', 5, 'Bond length:CZ2:CH2\nBond length:CD2:CE3', (229.372, 278.187, 210.782)), ('A', '154', 5, 'Dihedral angle:CB:CG:CD:OE1\nsmoc Outlier', (227.905, 273.34400000000005, 215.642)), ('A', '155', 5, 'cablam Outlier', (226.3, 274.4, 218.9)), ('A', '214', 6, 'Bond angle:C', (214.267, 271.08099999999996, 192.61499999999998)), ('A', '215', 6, 'Bond angle:N:CA\ncablam CA Geom Outlier', (214.177, 267.289, 192.16299999999998)), ('A', '216', 6, 'side-chain clash', (216.746, 263.533, 193.218)), ('A', '217', 6, 'side-chain clash', (216.746, 263.533, 193.218)), ('A', '1056', 7, 'smoc Outlier', (226.67, 224.70299999999997, 158.32200000000003)), ('A', '1058', 7, 'cablam Outlier', (225.4, 221.2, 163.1)), ('A', '816', 7, 'smoc Outlier', (233.444, 228.563, 150.608)), ('A', '819', 7, 'smoc Outlier', (229.845, 228.634, 154.135)), ('A', '1303', 8, 'Bond angle:C8:C7:N2', (203.58, 260.98199999999997, 192.078)), ('A', '60', 8, 'Bond angle:C', (206.567, 254.546, 193.13899999999998)), ('A', '61', 8, 'C-beta\nBond angle:N:CA\nBond angle:CA:CB:CG\nBond length:C:O', (204.869, 257.445, 194.969)), ('A', '62', 8, 'smoc Outlier', (207.507, 259.073, 197.253)), ('A', '291', 9, 'smoc Outlier', (208.93800000000002, 242.344, 187.42800000000003)), ('A', '293', 9, 'cablam CA Geom Outlier', (205.8, 247.1, 187.2)), ('A', '298', 9, 'Dihedral angle:CB:CG:CD:OE1', (207.018, 240.845, 183.564)), ('A', '516', 10, 'Dihedral angle:CB:CG:CD:OE1', (185.461, 210.324, 212.686)), ('A', '517', 10, 'Bond angle:CB:CG:CD2\nBond angle:CD1:CG:CD2', (185.584, 211.791, 209.17)), ('A', '519', 10, 'smoc Outlier', (181.601, 211.58100000000002, 203.53)), ('A', '1034', 11, 'cablam Outlier', (223.3, 213.4, 143.4)), ('A', '880', 11, 'smoc Outlier', (231.132, 216.036, 141.444)), ('A', '881', 11, 'smoc Outlier', (227.833, 217.82200000000003, 140.843)), ('A', '733', 12, 'smoc Outlier', (227.192, 215.41, 171.906)), ('A', '862', 12, 'side-chain clash', (232.847, 217.819, 169.447)), ('A', '863', 12, 'side-chain clash', (232.847, 217.819, 169.447)), ('A', '1070', 13, 'cablam Outlier', (207.8, 233.8, 134.0)), ('A', '1072', 13, 'smoc Outlier', (202.642, 235.60299999999998, 130.61399999999998)), ('A', '758', 14, 'smoc Outlier', (221.334, 200.618, 187.64399999999998)), ('A', '762', 14, 'smoc Outlier', (221.222, 203.24299999999997, 182.024)), ('A', '548', 15, 'smoc Outlier', (187.218, 226.016, 198.762)), ('A', '549', 15, 'cablam CA Geom Outlier', (187.1, 229.1, 196.5)), ('A', '923', 16, 'smoc Outlier', (220.503, 231.441, 132.14299999999997)), ('A', '926', 16, 'smoc Outlier', (220.124, 234.612, 136.106)), ('A', '398', 17, 'smoc Outlier', (186.816, 206.796, 225.39700000000002)), ('A', '512', 17, 'smoc Outlier', (190.61299999999997, 209.835, 224.198)), ('A', '849', 18, 'Bond length:CB:CG', (229.22, 229.26399999999998, 180.26999999999998)), ('A', '853', 18, 'smoc Outlier', (228.455, 223.625, 183.192)), ('A', '220', 19, 'cablam CA Geom Outlier', (220.4, 254.1, 188.1)), ('A', '34', 19, 'cablam CA Geom Outlier', (216.2, 254.5, 192.5)), ('A', '566', 20, 'smoc Outlier', (177.783, 216.33800000000002, 194.431)), ('A', '574', 20, 'smoc Outlier', (180.80800000000002, 220.701, 192.122)), ('A', '430', 21, 'smoc Outlier', (192.62800000000001, 211.094, 214.253)), ('A', '431', 21, 'smoc Outlier', (191.833, 212.442, 217.66299999999998)), ('H', '118', 1, 'smoc Outlier', (202.063, 182.718, 263.612)), ('H', '119', 1, 'smoc Outlier', (198.62, 182.271, 265.09)), ('H', '4', 1, 'smoc Outlier', (201.758, 190.565, 257.369)), ('H', '6', 1, 'smoc Outlier', (197.666, 187.872, 261.808)), ('H', '86', 2, 'smoc Outlier', (188.834, 170.439, 263.42299999999994)), ('H', '90', 2, 'smoc Outlier', (195.271, 170.365, 264.025)), ('H', '100', 3, 'smoc Outlier', (205.048, 185.60399999999998, 243.804)), ('H', '109', 3, 'smoc Outlier', (206.554, 181.48600000000002, 243.39000000000001)), ('L', '79', 1, 'smoc Outlier', (228.194, 181.983, 263.63599999999997)), ('L', '80', 1, 'smoc Outlier', (226.742, 184.54899999999998, 265.96999999999997)), ('L', '82', 1, 'smoc Outlier', (221.444, 184.586, 266.54200000000003)), ('L', '84', 1, 'Bond angle:CA:CB:CG', (221.629, 179.042, 266.884)), ('L', '47', 2, 'smoc Outlier', (213.91, 183.447, 254.142)), ('L', '48', 2, 'smoc Outlier', (217.678, 183.224, 253.931)), ('L', '34', 3, 'Bond angle:CD1:CG:CD2', (215.32500000000002, 175.222, 246.474)), ('L', '90', 3, 'smoc Outlier', (212.07, 174.031, 251.171)), ('B', '108', 1, 'cablam Outlier', (174.7, 187.3, 218.4)), ('B', '109', 1, 'cablam Outlier', (172.8, 185.0, 220.7)), ('B', '111', 1, 'cablam Outlier', (168.9, 185.6, 224.8)), ('B', '112', 1, 'cablam Outlier', (169.7, 188.7, 226.9)), ('B', '135', 1, 'smoc Outlier', (163.54399999999998, 186.678, 222.696)), ('B', '161', 1, 'cablam Outlier', (159.6, 188.6, 227.3)), ('B', '235', 1, 'smoc Outlier', (175.192, 190.95700000000002, 214.621)), ('B', '237', 1, 'Dihedral angle:CD:NE:CZ:NH1', (172.36200000000002, 186.11399999999998, 213.364)), ('B', '86', 1, 'smoc Outlier', (173.93200000000002, 187.55100000000002, 209.098)), ('B', '88', 1, 'cablam Outlier', (178.9, 190.8, 205.9)), ('B', '661', 2, 'Bond angle:C', (190.40800000000002, 186.864, 156.576)), ('B', '662', 2, 'C-beta\nBond angle:N:CA:CB\nBond angle:CA:C\nBond angle:N:CA\nBond length:C:O\nBond length:C', (191.56, 187.996, 160.025)), ('B', '663', 2, 'Bond angle:N\nBond length:N', (188.89000000000001, 189.568, 162.259)), ('B', '666', 2, 'cablam Outlier\nsmoc Outlier', (194.6, 186.0, 168.8)), ('B', '667', 2, 'cablam Outlier', (198.3, 185.6, 167.8)), ('B', '671', 2, 'smoc Outlier', (192.256, 184.804, 164.477)), ('B', '672', 2, 'smoc Outlier', (188.721, 184.537, 165.811)), ('B', '115', 3, 'side-chain clash', (172.684, 197.89, 221.099)), ('B', '130', 3, 'side-chain clash\nbackbone clash', (172.024, 198.167, 220.042)), ('B', '131', 3, 'side-chain clash', (168.219, 198.728, 225.431)), ('B', '164', 3, 'cablam CA Geom Outlier', (166.3, 195.8, 230.1)), ('B', '165', 3, 'C-beta\nBond angle:N:CA:CB\ncablam Outlier', (169.695, 197.34, 229.48100000000002)), ('B', '166', 3, 'side-chain clash\nsmoc Outlier', (168.219, 198.728, 225.431)), ('B', '233', 3, 'side-chain clash\nsmoc Outlier', (172.024, 198.167, 220.042)), ('B', '356', 4, 'smoc Outlier', (226.804, 185.71599999999998, 224.82000000000002)), ('B', '398', 4, 'smoc Outlier', (224.36700000000002, 191.524, 225.39700000000002)), ('B', '434', 4, 'smoc Outlier', (214.612, 194.089, 227.148)), ('B', '509', 4, 'smoc Outlier', (219.097, 195.046, 234.04399999999998)), ('B', '511', 4, 'smoc Outlier', (219.45800000000003, 192.429, 227.82700000000003)), ('B', '1303', 5, 'Bond angle:C8:C7:N2\nsmoc Outlier', (169.05800000000002, 178.94899999999998, 192.078)), ('B', '60', 5, 'Bond angle:C', (173.138, 184.754, 193.13899999999998)), ('B', '61', 5, 'C-beta\nBond angle:N:CA\nBond angle:CA:CB:CG\nBond length:C:O', (171.477, 181.834, 194.969)), ('B', '1007', 6, 'smoc Outlier', (201.47899999999998, 213.265, 181.025)), ('B', '1010', 6, 'smoc Outlier', (203.507, 211.003, 176.725)), ('B', '962', 6, 'smoc Outlier', (195.791, 213.346, 184.534)), ('B', '214', 7, 'Bond angle:C', (154.969, 183.155, 192.61499999999998)), ('B', '215', 7, 'Bond angle:N:CA\ncablam CA Geom Outlier', (158.298, 184.97299999999998, 192.16299999999998)), ('B', '25', 8, 'side-chain clash', (163.898, 172.292, 203.963)), ('B', '26', 8, 'side-chain clash', (163.898, 172.292, 203.963)), ('B', '1070', 9, 'cablam Outlier', (190.4, 196.2, 134.0)), ('B', '1072', 9, 'smoc Outlier', (191.506, 190.82600000000002, 130.61399999999998)), ('B', '548', 10, 'smoc Outlier', (207.52100000000002, 182.262, 198.762)), ('B', '549', 10, 'cablam CA Geom Outlier', (204.9, 180.6, 196.5)), ('B', '1002', 11, 'smoc Outlier', (205.13, 212.683, 188.848)), ('B', '999', 11, 'smoc Outlier', (202.71099999999998, 212.26, 193.26299999999998)), ('B', '296', 12, 'smoc Outlier', (181.98100000000002, 190.06, 179.538)), ('B', '298', 12, 'Dihedral angle:CB:CG:CD:OE1', (184.778, 191.995, 183.564)), ('B', '1017', 13, 'smoc Outlier', (204.003, 210.791, 165.975)), ('B', '1018', 13, 'smoc Outlier', (201.636, 213.533, 164.85200000000003)), ('B', '350', 14, 'smoc Outlier', (227.731, 198.86, 231.07299999999998)), ('B', '422', 14, 'smoc Outlier', (229.42800000000003, 202.63, 226.889)), ('B', '1109', 15, 'cablam Outlier', (196.1, 199.6, 127.1)), ('B', '911', 15, 'smoc Outlier', (198.83200000000002, 205.815, 128.51)), ('B', '1138', 16, 'smoc Outlier', (206.15800000000002, 198.231, 106.67799999999998)), ('B', '1139', 16, 'Dihedral angle:CA:CB:CG:OD1', (207.835, 201.40200000000002, 105.406)), ('B', '220', 17, 'cablam CA Geom Outlier', (166.6, 197.0, 188.1)), ('B', '34', 17, 'cablam CA Geom Outlier', (168.3, 193.1, 192.5)), ('B', '516', 18, 'Dihedral angle:CB:CG:CD:OE1', (221.989, 188.58700000000002, 212.686)), ('B', '517', 18, 'Bond angle:CB:CG:CD2\nBond angle:CD1:CG:CD2', (220.657, 187.96, 209.17)), ('B', '152', 19, 'Bond length:CZ2:CH2\nBond length:CD2:CE3', (141.262, 192.683, 210.782)), ('B', '180', 19, 'smoc Outlier', (143.612, 193.87, 205.21299999999997)), ('B', '1031', 20, 'smoc Outlier', (203.507, 215.333, 145.455)), ('B', '1034', 20, 'cablam Outlier', (200.4, 219.8, 143.4)), ('B', '15', 21, 'smoc Outlier', (155.893, 183.342, 224.48100000000002)), ('B', '158', 21, 'Dihedral angle:CD:NE:CZ:NH1', (154.73999999999998, 187.78, 221.342)), ('B', '154', 22, 'Dihedral angle:CB:CG:CD:OE1', (146.19, 193.834, 215.642)), ('B', '155', 22, 'cablam Outlier', (146.1, 192.0, 218.9)), ('B', '1056', 23, 'smoc Outlier', (188.93200000000002, 217.085, 158.32200000000003)), ('B', '1058', 23, 'cablam Outlier', (192.6, 217.8, 163.1)), ('B', '484', 24, 'cablam Outlier\nsmoc Outlier', (244.6, 212.7, 237.8)), ('B', '489', 24, 'smoc Outlier', (239.972, 212.724, 234.79899999999998)), ('C', '86', 1, 'smoc Outlier', (254.844, 211.45000000000002, 263.42299999999994)), ('C', '90', 1, 'smoc Outlier', (251.689, 217.062, 264.025)), ('C', '92', 1, 'smoc Outlier', (246.365, 218.707, 265.35400000000004)), ('C', '107', 2, 'smoc Outlier', (234.227, 224.92200000000003, 240.21599999999998)), ('C', '109', 2, 'smoc Outlier', (236.417, 221.27299999999997, 243.39000000000001)), ('D', '80', 1, 'smoc Outlier', (223.67, 237.224, 265.96999999999997)), ('D', '82', 1, 'smoc Outlier', (226.287, 232.618, 266.54200000000003)), ('D', '84', 1, 'Bond angle:CA:CB:CG', (230.996, 235.55, 266.884)), ('D', '4', 2, 'Bond length:SD:CE', (246.66899999999998, 234.39200000000002, 251.85000000000002)), ('D', '6', 2, 'smoc Outlier', (243.07, 238.25, 256.168)), ('E', '108', 1, 'cablam Outlier', (247.3, 190.8, 218.4)), ('E', '109', 1, 'cablam Outlier', (250.3, 190.3, 220.7)), ('E', '111', 1, 'cablam Outlier', (251.7, 186.6, 224.8)), ('E', '112', 1, 'cablam Outlier', (248.6, 185.7, 226.9)), ('E', '135', 1, 'smoc Outlier', (253.425, 181.429, 222.696)), ('E', '15', 1, 'smoc Outlier', (260.14000000000004, 176.471, 224.48100000000002)), ('E', '158', 1, 'Dihedral angle:CD:NE:CZ:NH1', (256.873, 173.253, 221.342)), ('E', '159', 1, 'smoc Outlier', (254.292, 175.81, 220.32600000000002)), ('E', '161', 1, 'cablam Outlier', (253.7, 177.1, 227.3)), ('E', '235', 1, 'smoc Outlier', (243.89600000000002, 189.377, 214.621)), ('E', '237', 1, 'Dihedral angle:CD:NE:CZ:NH1', (249.505, 189.347, 213.364)), ('E', '86', 1, 'smoc Outlier', (247.475, 189.98800000000003, 209.098)), ('E', '88', 1, 'cablam Outlier', (242.2, 192.7, 205.9)), ('E', '115', 2, 'side-chain clash', (239.061, 183.695, 221.177)), ('E', '130', 2, 'side-chain clash\nbackbone clash', (239.238, 182.886, 219.995)), ('E', '131', 2, 'side-chain clash', (240.828, 179.253, 225.596)), ('E', '164', 2, 'cablam CA Geom Outlier', (244.2, 179.3, 230.1)), ('E', '165', 2, 'C-beta\nBond angle:N:CA:CB\ncablam Outlier', (241.117, 181.425, 229.48100000000002)), ('E', '166', 2, 'side-chain clash', (240.828, 179.253, 225.596)), ('E', '233', 2, 'side-chain clash', (239.238, 182.886, 219.995)), ('E', '661', 3, 'Bond angle:C', (239.833, 204.601, 156.576)), ('E', '662', 3, 'C-beta\nBond angle:N:CA:CB\nBond angle:CA:C\nBond angle:N:CA\nBond length:C:O\nBond length:C', (238.27599999999998, 205.032, 160.025)), ('E', '663', 3, 'Bond angle:N\nBond length:N', (238.25, 201.934, 162.259)), ('E', '666', 3, 'cablam Outlier', (238.5, 208.7, 168.8)), ('E', '667', 3, 'cablam Outlier', (237.0, 212.1, 167.8)), ('E', '671', 3, 'smoc Outlier', (240.692, 207.231, 164.477)), ('E', '1303', 4, 'Bond angle:C8:C7:N2', (257.362, 190.069, 192.078)), ('E', '60', 4, 'Bond angle:C', (250.29399999999998, 190.7, 193.13899999999998)), ('E', '61', 4, 'C-beta\nBond angle:N:CA\nBond angle:CA:CB:CG\nBond length:C:O', (253.654, 190.721, 194.969)), ('E', '62', 4, 'smoc Outlier', (253.74499999999998, 187.622, 197.253)), ('E', '1070', 5, 'cablam Outlier', (231.7, 200.0, 134.0)), ('E', '1072', 5, 'smoc Outlier', (235.85200000000003, 203.571, 130.61399999999998)), ('E', '1073', 5, 'smoc Outlier', (236.262, 205.632, 127.423)), ('E', '718', 5, 'smoc Outlier', (228.16899999999998, 197.782, 132.8)), ('E', '349', 6, 'smoc Outlier', (211.77599999999998, 232.82200000000003, 234.181)), ('E', '350', 6, 'smoc Outlier', (210.782, 230.92600000000002, 231.07299999999998)), ('E', '351', 6, 'smoc Outlier', (207.99200000000002, 233.35500000000002, 230.26)), ('E', '1109', 7, 'cablam Outlier', (225.9, 203.2, 127.1)), ('E', '714', 7, 'side-chain clash', (229.483, 207.62, 129.494)), ('E', '715', 7, 'side-chain clash', (229.483, 207.62, 129.494)), ('E', '291', 8, 'smoc Outlier', (238.542, 194.748, 187.42800000000003)), ('E', '293', 8, 'cablam CA Geom Outlier', (244.3, 195.1, 187.2)), ('E', '298', 8, 'Dihedral angle:CB:CG:CD:OE1', (238.20399999999998, 197.16, 183.564)), ('E', '214', 9, 'Bond angle:C', (260.764, 175.76399999999998, 192.61499999999998)), ('E', '215', 9, 'Bond angle:N:CA\ncablam CA Geom Outlier', (257.525, 177.738, 192.16299999999998)), ('E', '542', 10, 'smoc Outlier', (238.007, 225.01899999999998, 204.19)), ('E', '544', 10, 'smoc Outlier', (235.772, 230.05800000000002, 207.15800000000002)), ('E', '549', 11, 'cablam CA Geom Outlier', (238.0, 220.3, 196.5)), ('E', '550', 11, 'smoc Outlier', (239.755, 222.319, 193.883)), ('E', '989', 12, 'smoc Outlier', (206.134, 197.22299999999998, 206.889)), ('E', '990', 12, 'smoc Outlier', (204.237, 199.86100000000002, 204.95100000000002)), ('E', '792', 13, 'side-chain clash', (203.857, 177.068, 138.027)), ('E', '793', 13, 'side-chain clash', (203.857, 177.068, 138.027)), ('E', '1008', 14, 'smoc Outlier', (208.148, 201.939, 179.417)), ('E', '1011', 14, 'smoc Outlier', (210.17899999999997, 201.35500000000002, 174.923)), ('E', '336', 15, 'smoc Outlier', (233.237, 232.978, 223.39000000000001)), ('E', '361', 15, 'smoc Outlier', (234.894, 234.819, 219.037)), ('E', '1138', 16, 'smoc Outlier', (222.11299999999997, 212.55700000000002, 106.67799999999998)), ('E', '1139', 16, 'Dihedral angle:CA:CB:CG:OD1', (218.52800000000002, 212.423, 105.406)), ('E', '220', 17, 'cablam CA Geom Outlier', (243.0, 179.0, 188.1)), ('E', '34', 17, 'cablam CA Geom Outlier', (245.5, 182.4, 192.5)), ('E', '436', 18, 'smoc Outlier', (220.866, 220.46200000000002, 234.04899999999998)), ('E', '509', 18, 'smoc Outlier', (218.40200000000002, 225.35500000000002, 234.04399999999998)), ('E', '516', 19, 'Dihedral angle:CB:CG:CD:OE1', (222.55, 231.089, 212.686)), ('E', '517', 19, 'Bond angle:CB:CG:CD2\nBond angle:CD1:CG:CD2', (223.759, 230.24899999999997, 209.17)), ('E', '152', 20, 'Bond length:CZ2:CH2\nBond length:CD2:CE3', (259.366, 159.13, 210.782)), ('E', '180', 20, 'smoc Outlier', (257.163, 160.571, 205.21299999999997)), ('E', '154', 21, 'Dihedral angle:CB:CG:CD:OE1\nsmoc Outlier', (255.905, 162.82200000000003, 215.642)), ('E', '155', 21, 'cablam Outlier', (257.6, 163.7, 218.9)), ('F', '15', 1, 'smoc Outlier', (187.65800000000002, 252.472, 265.082)), ('F', '35', 1, 'Bond length:CB:CG', (189.823, 233.238, 251.231)), ('F', '54', 1, 'smoc Outlier', (200.499, 235.29899999999998, 242.289)), ('F', '77', 1, 'smoc Outlier', (203.944, 232.089, 251.89100000000002)), ('F', '81', 1, 'C-beta\nBond length:CG:SD\nsmoc Outlier', (193.73299999999998, 240.292, 256.302)), ('F', '89', 1, 'smoc Outlier', (179.694, 243.782, 265.33099999999996)), ('F', '92', 1, 'smoc Outlier', (184.277, 237.13899999999998, 265.35400000000004)), ('F', '102', 1, 'smoc Outlier', (188.92000000000002, 230.118, 238.923)), ('G', '34', 1, 'Bond angle:CD1:CG:CD2\nsmoc Outlier', (177.21899999999997, 222.777, 246.474)), ('G', '92', 1, 'smoc Outlier', (179.036, 229.225, 244.984)), ('J', '2', 1, 'Bond angle:C8:C7:N2\nBond length:C5:O5', (233.7, 258.574, 222.181)), ('K', '1', 1, 'Bond angle:C8:C7:N2\nBond angle:C8:C7:O7', (179.26899999999998, 217.29399999999998, 239.602)), ('K', '2', 1, 'Bond angle:C8:C7:N2\nBond length:C5:O5\nBond length:C4:O4', (173.953, 219.566, 230.82100000000003)), ('M', '2', 1, 'Bond angle:C8:C7:N2\nBond length:C5:O5', (219.32100000000003, 238.933, 133.61399999999998)), ('N', '1', 1, 'Bond angle:C8:C7:N2', (234.76899999999998, 234.266, 135.819)), ('P', '1', 1, 'Bond angle:C8:C7:N2', (184.283, 222.349, 114.197)), ('P', '2', 1, 'Bond angle:C8:C7:N2', (182.389, 217.67399999999998, 103.94600000000001)), ('R', '2', 1, 'Bond angle:C8:C7:N2\nBond length:C5:O5', (156.084, 206.238, 222.181)), ('S', '1', 1, 'Bond angle:C8:C7:N2\nBond angle:C8:C7:O7', (219.04899999999998, 179.73899999999998, 239.602)), ('S', '2', 1, 'Bond angle:C8:C7:N2\nBond length:C5:O5\nBond length:C4:O4', (219.73899999999998, 173.999, 230.82100000000003)), ('T', '2', 1, 'Bond angle:C8:C7:N2\nBond length:C5:O5', (180.283, 203.606, 133.61399999999998)), ('U', '1', 1, 'Bond angle:C8:C7:N2', (176.6, 219.318, 135.819)), ('W', '1', 1, 'Bond angle:C8:C7:N2', (212.164, 181.554, 114.197)), ('W', '2', 1, 'Bond angle:C8:C7:N2', (217.16, 182.251, 103.94600000000001)), ('Y', '2', 1, 'Bond angle:C8:C7:N2\nBond length:C5:O5', (240.21599999999998, 165.18800000000002, 222.181)), ('Z', '1', 1, 'Bond angle:C8:C7:N2\nBond angle:C8:C7:O7', (231.68200000000002, 232.967, 239.602)), ('Z', '2', 1, 'Bond angle:C8:C7:N2\nBond length:C5:O5\nBond length:C4:O4', (236.30800000000002, 236.435, 230.82100000000003)), ('a', '2', 1, 'Bond angle:C8:C7:N2\nBond length:C5:O5', (230.39600000000002, 187.461, 133.61399999999998)), ('b', '1', 1, 'Bond angle:C8:C7:N2', (218.63, 176.416, 135.819)), ('d', '1', 1, 'Bond angle:C8:C7:N2', (233.553, 226.097, 114.197)), ('d', '2', 1, 'Bond angle:C8:C7:N2', (230.45100000000002, 230.075, 103.94600000000001))]
data['omega'] = [('D', '   8 ', 'PRO', None, (240.77600000000007, 242.453, 259.627)), ('G', '   8 ', 'PRO', None, (166.507, 220.426, 259.627)), ('L', '   8 ', 'PRO', None, (222.717, 167.121, 259.627))]
data['rama'] = [('A', ' 809 ', 'PRO', 0.042946688226990534, (242.141, 228.06700000000006, 149.733)), ('B', ' 809 ', 'PRO', 0.04289385584442995, (178.283, 228.801, 149.733)), ('E', ' 809 ', 'PRO', 0.04290404655507408, (209.57599999999996, 173.132, 149.733))]
data['cablam'] = [('A', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\n--SEE', (208.9, 246.5, 205.9)), ('A', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEESS-', (208.0, 252.0, 218.4)), ('A', '109', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nESS-B', (206.9, 254.7, 220.7)), ('A', '111', 'ASP', 'check CA trace,carbonyls, peptide', 'beta bridge\nS-BSS', (209.4, 257.8, 224.8)), ('A', '112', 'SER', 'check CA trace,carbonyls, peptide', 'bend\n-BSSS', (211.7, 255.5, 226.9)), ('A', '155', 'SER', 'check CA trace,carbonyls, peptide', ' \n----E', (226.3, 274.4, 218.9)), ('A', '161', 'SER', 'check CA trace,carbonyls, peptide', 'strand\nEEEEE', (216.6, 264.4, 227.3)), ('A', '165', 'ASN', 'check CA trace,carbonyls, peptide', ' \nEE---', (219.2, 251.2, 229.5)), ('A', '310', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\n--SEE', (208.9, 240.1, 168.7)), ('A', '484', 'GLU', 'check CA trace,carbonyls, peptide', ' \nT--BT', (195.1, 178.6, 237.8)), ('A', '486', 'PHE', 'check CA trace,carbonyls, peptide', 'turn\n-BTTE', (201.8, 176.5, 236.9)), ('A', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (196.9, 235.3, 168.8)), ('A', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (194.7, 232.4, 167.8)), ('A', '797', 'PHE', 'check CA trace,carbonyls, peptide', ' \n---TT', (231.5, 226.2, 133.3)), ('A', '809', 'PRO', 'check CA trace,carbonyls, peptide', 'turn\nB-TTS', (242.1, 228.1, 149.7)), ('A', '1034', 'LEU', 'check CA trace,carbonyls, peptide', 'bend\nIISS-', (223.3, 213.4, 143.4)), ('A', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'bend\nTTSSS', (214.1, 220.2, 146.2)), ('A', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (225.4, 221.2, 163.1)), ('A', '1070', 'ALA', 'check CA trace,carbonyls, peptide', ' \nEE-S-', (207.8, 233.8, 134.0)), ('A', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (191.6, 214.5, 106.5)), ('A', '1109', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\nTTS--', (208.0, 227.2, 127.1)), ('A', '34', 'ARG', 'check CA trace', ' \nTT--E', (216.2, 254.5, 192.5)), ('A', '164', 'ASN', 'check CA trace', 'strand\nEEE--', (219.5, 255.0, 230.1)), ('A', '215', 'ASP', 'check CA trace', ' \nSS---', (214.2, 267.3, 192.2)), ('A', '220', 'PHE', 'check CA trace', ' \n-S--E', (220.4, 254.1, 188.1)), ('A', '293', 'LEU', 'check CA trace', 'bend\nTTSSH', (205.8, 247.1, 187.2)), ('A', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (187.1, 229.1, 196.5)), ('L', '94', 'SER', 'check CA trace,carbonyls, peptide', 'turn\nEETTE', (204.6, 169.7, 240.9)), ('B', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\n--SEE', (178.9, 190.8, 205.9)), ('B', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEESS-', (174.7, 187.3, 218.4)), ('B', '109', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nESS-B', (172.8, 185.0, 220.7)), ('B', '111', 'ASP', 'check CA trace,carbonyls, peptide', 'beta bridge\nS-BSS', (168.9, 185.6, 224.8)), ('B', '112', 'SER', 'check CA trace,carbonyls, peptide', 'bend\n-BSSS', (169.7, 188.7, 226.9)), ('B', '155', 'SER', 'check CA trace,carbonyls, peptide', ' \n----E', (146.1, 192.0, 218.9)), ('B', '161', 'SER', 'check CA trace,carbonyls, peptide', 'strand\nEEEEE', (159.6, 188.6, 227.3)), ('B', '165', 'ASN', 'check CA trace,carbonyls, peptide', ' \nEE---', (169.7, 197.3, 229.5)), ('B', '310', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\n--SEE', (184.5, 194.0, 168.7)), ('B', '484', 'GLU', 'check CA trace,carbonyls, peptide', ' \nT--BT', (244.6, 212.7, 237.8)), ('B', '486', 'PHE', 'check CA trace,carbonyls, peptide', 'turn\n-BTTE', (243.1, 219.6, 236.9)), ('B', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (194.6, 186.0, 168.8)), ('B', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (198.3, 185.6, 167.8)), ('B', '797', 'PHE', 'check CA trace,carbonyls, peptide', ' \n---TT', (185.2, 220.6, 133.3)), ('B', '809', 'PRO', 'check CA trace,carbonyls, peptide', 'turn\nB-TTS', (178.3, 228.8, 149.7)), ('B', '1034', 'LEU', 'check CA trace,carbonyls, peptide', 'bend\nIISS-', (200.4, 219.8, 143.4)), ('B', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'bend\nTTSSS', (199.1, 208.5, 146.2)), ('B', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (192.6, 217.8, 163.1)), ('B', '1070', 'ALA', 'check CA trace,carbonyls, peptide', ' \nEE-S-', (190.4, 196.2, 134.0)), ('B', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (215.3, 191.8, 106.5)), ('B', '1109', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\nTTS--', (196.1, 199.6, 127.1)), ('B', '34', 'ARG', 'check CA trace', ' \nTT--E', (168.3, 193.1, 192.5)), ('B', '164', 'ASN', 'check CA trace', 'strand\nEEE--', (166.3, 195.8, 230.1)), ('B', '215', 'ASP', 'check CA trace', ' \nSS---', (158.3, 185.0, 192.2)), ('B', '220', 'PHE', 'check CA trace', ' \n-S--E', (166.6, 197.0, 188.1)), ('B', '293', 'LEU', 'check CA trace', 'bend\nTTSSH', (180.0, 187.8, 187.2)), ('B', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (204.9, 180.6, 196.5)), ('D', '94', 'SER', 'check CA trace,carbonyls, peptide', 'turn\nEETTE', (247.6, 225.5, 240.9)), ('E', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\n--SEE', (242.2, 192.7, 205.9)), ('E', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEESS-', (247.3, 190.8, 218.4)), ('E', '109', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nESS-B', (250.3, 190.3, 220.7)), ('E', '111', 'ASP', 'check CA trace,carbonyls, peptide', 'beta bridge\nS-BSS', (251.7, 186.6, 224.8)), ('E', '112', 'SER', 'check CA trace,carbonyls, peptide', 'bend\n-BSSS', (248.6, 185.7, 226.9)), ('E', '155', 'SER', 'check CA trace,carbonyls, peptide', ' \n----E', (257.6, 163.7, 218.9)), ('E', '161', 'SER', 'check CA trace,carbonyls, peptide', 'strand\nEEEEE', (253.7, 177.1, 227.3)), ('E', '165', 'ASN', 'check CA trace,carbonyls, peptide', ' \nEE---', (241.1, 181.4, 229.5)), ('E', '310', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\n--SEE', (236.6, 195.9, 168.7)), ('E', '484', 'GLU', 'check CA trace,carbonyls, peptide', ' \nT--BT', (190.3, 238.6, 237.8)), ('E', '486', 'PHE', 'check CA trace,carbonyls, peptide', 'turn\n-BTTE', (185.1, 233.9, 236.9)), ('E', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (238.5, 208.7, 168.8)), ('E', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (237.0, 212.1, 167.8)), ('E', '797', 'PHE', 'check CA trace,carbonyls, peptide', ' \n---TT', (213.2, 183.3, 133.3)), ('E', '809', 'PRO', 'check CA trace,carbonyls, peptide', 'turn\nB-TTS', (209.6, 173.1, 149.7)), ('E', '1034', 'LEU', 'check CA trace,carbonyls, peptide', 'bend\nIISS-', (206.3, 196.8, 143.4)), ('E', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'bend\nTTSSS', (216.8, 201.3, 146.2)), ('E', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (212.0, 191.0, 163.1)), ('E', '1070', 'ALA', 'check CA trace,carbonyls, peptide', ' \nEE-S-', (231.7, 200.0, 134.0)), ('E', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (223.1, 223.7, 106.5)), ('E', '1109', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\nTTS--', (225.9, 203.2, 127.1)), ('E', '34', 'ARG', 'check CA trace', ' \nTT--E', (245.5, 182.4, 192.5)), ('E', '164', 'ASN', 'check CA trace', 'strand\nEEE--', (244.2, 179.3, 230.1)), ('E', '215', 'ASP', 'check CA trace', ' \nSS---', (257.5, 177.7, 192.2)), ('E', '220', 'PHE', 'check CA trace', ' \n-S--E', (243.0, 179.0, 188.1)), ('E', '293', 'LEU', 'check CA trace', 'bend\nTTSSH', (244.3, 195.1, 187.2)), ('E', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (238.0, 220.3, 196.5)), ('G', '94', 'SER', 'check CA trace,carbonyls, peptide', 'turn\nEETTE', (177.8, 234.8, 240.9))]
handle_read_draw_probe_dots_unformatted("/home/ccpem/agnel/gisaid/countries_seq/structure_data/emdb/EMD-22659/7k43/Model_validation_1/validation_cootdata/molprobity_probe7k43_0.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
