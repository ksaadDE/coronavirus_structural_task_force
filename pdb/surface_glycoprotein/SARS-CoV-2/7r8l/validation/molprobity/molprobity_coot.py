# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 133 ', 'GLY', 0.00936569203318298, (45.15667, 41.57753000000001, 67.95201)), ('L', ' 212 ', 'ARG', 0.017015047043170226, (-70.8019, 22.08997, 32.9536))]
data['omega'] = [('C', ' 147 ', 'PRO', None, (12.4357, 38.02203, 46.62597000000002)), ('C', ' 149 ', 'PRO', None, (17.69102, 34.86748, 45.55530000000001)), ('D', '   8 ', 'PRO', None, (23.347110000000008, 7.036559999999996, 63.17817000000001)), ('D', '  95 ', 'PRO', None, (4.50931, 2.85474, 47.96042)), ('D', ' 141 ', 'PRO', None, (33.57758, 22.08229, 67.9938)), ('H', ' 105 ', 'THR', None, (-24.46371, -9.20355, 21.59863)), ('H', ' 152 ', 'PRO', None, (-43.62482, 5.470210000000001, 42.68938)), ('H', ' 154 ', 'PRO', None, (-43.8673, 1.75048, 37.9456)), ('L', '   8 ', 'PRO', None, (-29.154329999999998, 9.854690000000003, 10.78723)), ('L', '  96 ', 'PRO', None, (-16.34997, -2.25529, 29.572050000000004)), ('L', ' 142 ', 'PRO', None, (-49.94857, 12.847040000000003, 10.41911))]
data['rota'] = [('H', '  13 ', 'GLN', 0.2982763069752327, (-33.46511, 7.3442500000000015, 48.35775)), ('H', ' 101 ', 'SER', 0.22138294800565644, (-17.07293, -11.0222, 17.54732)), ('H', ' 110 ', 'GLN', 0.2982701190012794, (-36.78268, -8.044939999999997, 30.379390000000004)), ('L', '   7 ', 'SER', 0.1903631880660649, (-27.06932, 9.79586, 12.07925)), ('L', ' 127 ', 'LYS', 0.04294612567202114, (-65.72401, 15.334170000000002, 45.51428000000002)), ('E', ' 370 ', 'ASN', 0.2515819589715866, (19.235180000000003, 2.35833, 23.9266)), ('E', ' 388 ', 'ASN', 0.19469341032482673, (25.71996, -6.8302, 33.44288)), ('E', ' 403 ', 'ARG', 0.2682490436069251, (-3.405, -4.89523, 19.551040000000004)), ('C', ' 132 ', 'SER', 0.08456524179150575, (41.66766, 40.021380000000015, 67.86996)), ('C', ' 140 ', 'CYS', 0.24488213353287083, (27.628580000000007, 44.00687000000001, 55.62250000000001)), ('C', ' 196 ', 'CYS', 0.04777070756177933, (30.78027, 45.22239000000001, 49.89378)), ('C', ' 210 ', 'LYS', 0.29756503198072964, (31.786299999999997, 51.320200000000014, 52.132170000000016)), ('D', '   5 ', 'THR', 0.20352785643780352, (14.92501, 4.69924, 60.39738)), ('D', '  63 ', 'SER', 0.24600816749019835, (30.418559999999996, -0.24576999999999996, 51.04439)), ('D', '  77 ', 'SER', 0.08525205895651221, (38.78421999999997, 6.01975, 54.81422000000003)), ('D', '  78 ', 'LEU', 0.16960898740707944, (36.726599999999976, 9.17373, 55.11508000000001)), ('D', ' 100 ', 'GLN', 0.09210403416922923, (15.443140000000001, 10.60127, 57.614230000000006)), ('D', ' 203 ', 'SER', 0.17595191361034404, (34.83148, 29.951260000000005, 80.57081000000001))]
data['cbeta'] = []
data['probe'] = [(' C 121  VAL  O  ', ' C 209  LYS  NZ ', -0.814, (23.369, 50.252, 52.728)), (' L 144  GLU  N  ', ' L 144  GLU  OE1', -0.75, (-47.403, 16.048, 13.639)), (' E 518  LEU  O  ', ' E 520  ALA  N  ', -0.72, (19.683, -23.895, 41.056)), (' D   6  GLN  H  ', ' D 100  GLN HE21', -0.668, (16.822, 7.537, 60.616)), (' D  54  ARG  NE ', ' D 301  HOH  O  ', -0.66, (33.289, -0.102, 44.376)), (' E 444  LYS  HG3', ' E 448  ASN  HB2', -0.654, (-3.373, -8.603, 7.318)), (' H  29  VAL HG13', ' H  34  MET  HG3', -0.649, (-23.7, -14.653, 33.418)), (' L 184  LYS  O  ', ' L 188  GLU  HG2', -0.637, (-65.722, 24.324, 40.994)), (' E 357  ARG  NH1', ' E 601  HOH  O  ', -0.618, (17.86, -24.651, 26.577)), (' H   2  VAL  N  ', ' H 302  HOH  O  ', -0.608, (-34.966, -21.507, 25.807)), (' D 142  ARG  NH2', ' D 302  HOH  O  ', -0.601, (25.722, 23.599, 59.636)), (' H 186  VAL HG11', ' L 136  LEU HD22', -0.598, (-58.798, 8.183, 25.509)), (' L 108  LYS  HG2', ' L 109  ARG  H  ', -0.594, (-46.248, 8.133, 5.698)), (' E 364  ASP  OD2', ' E 366  SER  HB3', -0.584, (24.491, -3.386, 24.363)), (' L  55  ARG  HD2', ' L 302  HOH  O  ', -0.582, (-29.98, -12.345, 6.595)), (' C   2  MET  HE2', ' C  32  TYR  CG ', -0.58, (15.659, 7.47, 32.268)), (' L 142  PRO  HB2', ' L 144  GLU  OE1', -0.571, (-46.786, 14.83, 11.359)), (' C  89  ILE HD11', ' C 106  GLY  HA3', -0.565, (16.564, 21.565, 43.178)), (' E 362  VAL  HA ', ' E 525  CYS  O  ', -0.562, (25.883, -12.751, 29.171)), (' E 394  ASN  HB2', ' E 516  GLU  OE1', -0.562, (15.836, -20.452, 33.383)), (' H  43  LYS  N  ', ' H 301  HOH  O  ', -0.551, (-33.591, 6.516, 25.915)), (' C  27  TYR  HB3', ' E 370  ASN  HB3', -0.551, (20.835, 4.325, 24.703)), (' D 115  VAL HG12', ' D 207  LYS  HG3', -0.541, (32.834, 39.131, 70.992)), (' E 388  ASN  HA ', ' E 526  GLY  HA3', -0.537, (25.952, -8.346, 31.966)), (' L  62  LYS  NZ ', ' L  83  ASP  OD2', -0.53, (-39.394, -4.304, 7.575)), (' H 100  TYR  CD1', ' L  92  TYR  HB2', -0.526, (-17.077, -7.102, 22.81)), (' H  11  LEU  HB2', ' H 152  PRO  HG3', -0.519, (-40.213, 3.833, 43.426)), (' D   6  GLN  O  ', ' D 100  GLN  NE2', -0.513, (17.883, 7.657, 61.616)), (' D  39  LYS  HE2', ' D  81  GLU  O  ', -0.507, (32.015, 14.647, 48.784)), (' C  12  LYS  HE3', ' C  18  LEU HD13', -0.507, (4.819, 28.461, 39.555)), (' D  46  LEU HD23', ' D  55  GLU  HG3', -0.504, (23.502, 3.768, 41.211)), (' C 186  SER  O  ', ' C 189  LEU  HB2', -0.488, (43.2, 48.247, 60.267)), (' E 359  SER  HB3', ' E 394  ASN  ND2', -0.486, (18.805, -21.267, 29.741)), (' C  68  THR  HB ', ' C  81  GLN  HG2', -0.485, (-1.345, 18.177, 38.182)), (' C   2  MET  HG2', ' C  32  TYR  CE2', -0.484, (17.721, 6.805, 31.273)), (' C 210  LYS  HD2', ' C 212  GLU  OE2', -0.482, (35.138, 55.276, 53.208)), (' E 481  ASN  O  ', ' E 483  VAL HG23', -0.475, (-19.698, -32.344, 17.856)), (' C  27  TYR  HB3', ' E 370  ASN  CB ', -0.474, (21.031, 4.384, 24.201)), (' H 124  PRO  HB3', ' H 150  TYR  HB3', -0.469, (-51.124, 6.585, 41.03)), (' D 146  VAL HG22', ' D 196  VAL HG22', -0.464, (27.91, 33.123, 70.946)), (' L  40  LYS  NZ ', ' L  82  GLU  HG3', -0.464, (-42.011, -5.502, 13.946)), (' C   4  LEU HD22', ' C  22  CYS  SG ', -0.464, (13.099, 14.322, 34.508)), (' E 359  SER  HA ', ' E 524  VAL HG22', -0.463, (21.536, -18.775, 29.176)), (' L  33  TYR  HA ', ' L  92  TYR  CE1', -0.461, (-16.838, -6.564, 17.973)), (' H  12  ILE HG21', ' H  85  LEU HD13', -0.458, (-30.994, 2.72, 44.596)), (' D 131  SER  OG ', ' D 180  THR HG22', -0.457, (18.58, 44.037, 63.281)), (' L  42  GLY  O  ', ' L  43  LEU HD23', -0.455, (-41.579, -4.617, 25.746)), (' D  30  LYS  HA ', ' D  30  LYS  HD3', -0.452, (20.399, -9.794, 46.663)), (' L 191  LYS  HA ', ' L 191  LYS  HD2', -0.452, (-70.214, 25.886, 33.067)), (' L 125  GLN  HG2', ' L 130  THR  O  ', -0.452, (-61.365, 16.314, 40.434)), (' H 104  GLY  HA3', ' L  47  LEU HD13', -0.449, (-25.283, -9.334, 18.975)), (' C  12  LYS  O  ', ' C 111  VAL  HA ', -0.444, (4.576, 31.622, 46.504)), (' C 197  ASN  ND2', ' C 208  ASP  OD1', -0.443, (30.524, 46.653, 45.132)), (' D   6  GLN  N  ', ' D 100  GLN HE21', -0.44, (17.392, 6.791, 60.673)), (' H  44  GLY  N  ', ' H 301  HOH  O  ', -0.44, (-33.163, 6.261, 25.68)), (' H 100  TYR  O  ', ' H 103  GLY  O  ', -0.437, (-20.718, -10.924, 19.027)), (' C 117  LYS  HE2', ' C 144  ASP  O  ', -0.434, (13.863, 44.734, 52.142)), (' E 388  ASN  N  ', ' E 388  ASN  OD1', -0.432, (24.365, -5.957, 32.756)), (' L  34  LEU HD13', ' L  72  PHE  CD2', -0.431, (-19.267, 0.612, 13.412)), (' E 505  TYR  CE1', ' L  29  ILE HG22', -0.429, (-11.395, 0.858, 18.149)), (' D 125  LEU  HA ', ' D 125  LEU HD23', -0.428, (18.527, 52.607, 64.211)), (' L 211  ASN  O  ', ' L 213  GLY  N  ', -0.428, (-72.383, 20.864, 31.526)), (' E 364  ASP  O  ', ' E 367  VAL HG12', -0.427, (22.192, -6.433, 23.618)), (' D  28  ILE  HA ', ' E 517  LEU HD21', -0.427, (16.961, -14.604, 41.793)), (' C 214  LYS  HA ', ' C 214  LYS  HD2', -0.426, (32.161, 53.866, 62.598)), (' C  97  GLY  O  ', ' C 100  THR  HB ', -0.425, (12.947, 1.115, 38.677)), (' C 101  ASP  OD1', ' E 386  LYS  NZ ', -0.423, (21.608, 2.65, 38.191)), (' D 119  PRO  HB3', ' D 209  PHE  CZ ', -0.42, (26.757, 48.964, 69.298)), (' D  15  LEU  HA ', ' D  15  LEU HD23', -0.419, (38.821, 12.281, 56.853)), (' H  12  ILE HD12', ' H  13  GLN  H  ', -0.419, (-33.624, 4.4, 48.975)), (' D 106  ILE  HA ', ' D 106  ILE HD13', -0.417, (35.184, 14.443, 58.823)), (' H 129  LEU  HA ', ' H 129  LEU HD23', -0.417, (-63.469, 10.329, 31.995)), (' D  31  ASN  O  ', ' D  50  TRP  HA ', -0.417, (19.204, -4.181, 46.912)), (' C  39  GLN  HB3', ' C  89  ILE HG23', -0.416, (14.586, 19.947, 48.094)), (' L 114  PRO  HB3', ' L 140  PHE  CD2', -0.413, (-55.155, 12.382, 16.106)), (' H  51  MET  HG3', ' H  57  THR HG22', -0.412, (-17.29, -9.272, 37.3)), (' E 398  ASP  O  ', ' E 511  VAL  HA ', -0.408, (8.121, -11.584, 23.944)), (' L 137  LEU HD22', ' L 176  LEU HD22', -0.408, (-54.073, 15.511, 20.208)), (' C 100  THR HG23', ' C 100A PRO  HD2', -0.406, (16.777, 0.692, 39.497)), (' D 125  LEU HD21', ' D 130  ALA  HB2', -0.405, (19.469, 51.299, 66.655)), (' D 105  GLU  OE1', ' D 173  TYR  OH ', -0.403, (29.931, 19.793, 60.912)), (' L  41  PRO  HG3', ' L  84  PHE  HE2', -0.402, (-42.943, 2.283, 19.036)), (' C 171  GLN  HA ', ' D 160  GLN HE22', -0.402, (13.083, 36.207, 60.941)), (' D  34  ALA  HB2', ' D  91  TYR  HE1', -0.4, (17.994, 0.921, 46.157))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
