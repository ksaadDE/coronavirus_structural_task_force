# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 155 ', 'PRO', None, (7.841000000000001, 9.867, 3.997)), ('H', ' 157 ', 'PRO', None, (11.148, 6.083, 7.398)), ('L', '  10 ', 'PRO', None, (36.083000000000006, 11.629, 24.418)), ('L', '  10 ', 'PRO', None, (36.083000000000006, 11.629, 24.418)), ('L', ' 148 ', 'PRO', None, (40.228, 2.85, 4.165))]
data['rota'] = [('H', '  14 ', 'VAL', 0.14927444366095083, (1.9349999999999996, 13.914, 10.667)), ('H', ' 100 ', 'ARG', 0.0373491893075155, (11.773, -0.44300000000000017, 30.829)), ('H', ' 124 ', 'THR', 0.07756894647700838, (3.4170000000000003, 10.758, 1.875)), ('H', ' 158 ', 'VAL', 0.16484337126265075, (11.917, 2.392, 4.18)), ('H', ' 186 ', 'LEU', 0.10234446832307637, (17.94, 4.393, -1.3489999999999998)), ('H', ' 204 ', 'CYS', 0.03192585994665511, (13.98300000000001, -7.671, -2.165)), ('L', '  21 ', 'VAL', 0.14439924033236864, (39.78, 2.447, 25.139)), ('L', ' 149 ', 'ARG', 0.0, (36.093, 5.434, 4.257))]
data['cbeta'] = [('L', ' 201 ', 'CYS', 'B', 0.2554807660277342, (31.325999999999997, 4.011, -12.020999999999999))]
data['probe'] = [(' H 207 BASN  OD1', ' H 401  HOH  O  ', -0.701, (4.8, -1.129, 3.948)), (' H 171  VAL HG22', ' H 190 BVAL HG22', -0.672, (21.564, -8.578, 0.326)), (' L 175 BSER  OG ', ' L 401  HOH  O  ', -0.58, (27.507, -2.821, 13.924)), (' H 301  GOL  H31', ' H 581  HOH  O  ', -0.579, (18.748, -17.214, -0.306)), (' L 157 BVAL HG22', ' L 162  GLN  NE2', -0.572, (28.251, 12.786, -19.217)), (' L 170 BVAL HG21', ' L 512  HOH  O  ', -0.566, (31.915, 7.888, 1.609)), (' H  41  GLN  HG3', ' H  46 ASER  O  ', -0.563, (19.315, 10.38, 19.601)), (' L  62  ARG HH21', ' L  71 BTHR HG22', -0.553, (33.651, -4.63, 33.958)), (' H 124 BTHR HG21', ' H 520  HOH  O  ', -0.552, (1.575, 8.536, 4.926)), (' H 138  SER  HA ', ' L 123  PHE  HD2', -0.544, (29.716, -6.287, -10.185)), (' H 138  SER  CA ', ' L 123  PHE  HD2', -0.542, (29.613, -6.508, -10.167)), (' H 172  HIS  CE1', ' L 302 AGOL  H31', -0.538, (28.219, -3.077, 4.561)), (' H  40 ALYS  HE2', ' H 404  HOH  O  ', -0.535, (13.262, 15.762, 18.027)), (' L 170 BVAL HG22', ' L 182  LEU HD12', -0.527, (30.551, 6.402, 0.461)), (' H 138  SER  C  ', ' L 123  PHE  HD2', -0.526, (29.153, -6.709, -9.863)), (' H  13  LEU HD23', ' H 124 BTHR HG23', -0.512, (3.06, 11.354, 4.857)), (' H  29  TYR  CZ ', ' H 100 BARG  HD2', -0.511, (9.625, -4.959, 30.328)), (' H  53  LEU HD21', ' H  74  VAL  HB ', -0.501, (0.854, 2.599, 30.662)), (' L 142  LEU HD11', ' L 144 BASN  OD1', -0.485, (28.695, -2.6, -2.491)), (' H  14 BVAL HG12', ' H  18  ALA  HB3', -0.481, (-0.314, 16.019, 12.782)), (' H 158 BVAL HG23', ' H 207  ASN  O  ', -0.473, (9.953, 0.476, 3.107)), (' H 172  HIS  CE1', ' L 302 BGOL  O3 ', -0.462, (28.908, -3.791, 4.399)), (' L  15  VAL HG11', ' L  21 BVAL HG12', -0.46, (40.797, 2.779, 21.454)), (' H  43 AHIS  HE1', ' H 588  HOH  O  ', -0.456, (24.494, 15.673, 17.859)), (' L  26  LYS  HD2', ' L  78  ASP  OD1', -0.455, (34.607, 14.913, 35.78)), (' H  13  LEU  CD2', ' H 124 BTHR HG23', -0.444, (3.318, 11.326, 4.856)), (' H 201 BTHR HG22', ' H 218 BARG  NH2', -0.43, (14.47, -17.824, -8.68)), (' H 201 BTHR HG21', ' H 420  HOH  O  ', -0.428, (12.6, -18.971, -7.654)), (' L   6  MET  HE3', ' L  25  CYS  SG ', -0.421, (27.847, 11.651, 32.341)), (' H 138  SER  C  ', ' L 123  PHE  CD2', -0.418, (29.579, -7.009, -9.713)), (' H  14 AVAL HG21', ' H  88  LEU HD13', -0.413, (3.007, 14.679, 14.592)), (' L 142  LEU HD21', ' L 144 BASN HD21', -0.408, (28.089, -4.399, -3.726))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
