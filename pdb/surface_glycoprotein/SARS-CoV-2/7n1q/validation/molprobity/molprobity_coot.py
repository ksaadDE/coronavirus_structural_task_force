# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  18 ', 'PHE', 0.031276350850109144, (197.68699999999995, 261.027, 161.461)), ('A', '  78 ', 'ARG', 0.023616152550312037, (193.845, 262.8459999999998, 169.79600000000002)), ('A', ' 164 ', 'ASN', 0.007939794865425764, (193.7070000000001, 238.3709999999999, 149.48900000000006)), ('A', ' 518 ', 'LEU', 0.044726829109918376, (217.78699999999992, 199.112, 162.86400000000003)), ('A', ' 744 ', 'GLY', 0.009978940005955849, (177.535, 201.88499999999988, 190.245)), ('B', '  78 ', 'ARG', 0.010197594916718048, (254.384, 169.324, 166.66300000000007)), ('B', '  98 ', 'SER', 0.04500459045018255, (257.794, 185.34399999999988, 175.887)), ('B', ' 112 ', 'SER', 0.035439019056918326, (233.489, 181.945, 154.26500000000004)), ('B', ' 123 ', 'ALA', 0.045688130882045395, (255.249, 191.112, 165.678)), ('B', ' 148 ', 'ASN', 0.03633627370472795, (271.486, 187.526, 160.77400000000006)), ('B', ' 582 ', 'LEU', 0.04812279889320728, (191.20899999999992, 155.34, 180.38900000000004)), ('B', ' 634 ', 'ARG', 0.006772836428583839, (223.464, 169.3709999999999, 196.05700000000002)), ('C', '  19 ', 'THR', 0.009686571998659972, (139.06399999999985, 168.004, 164.79900000000004)), ('C', '  32 ', 'PHE', 0.04669183497673719, (161.016, 171.408, 194.07100000000003)), ('C', '  78 ', 'ARG', 0.008877060806096352, (141.91999999999985, 161.495, 172.238)), ('C', ' 148 ', 'ASN', 0.01878837079964188, (151.536, 138.016, 162.996)), ('C', ' 164 ', 'ASN', 0.010787906927440695, (163.55, 171.03399999999993, 151.781)), ('C', ' 176 ', 'LEU', 0.029076651759706126, (164.901, 154.312, 174.362)), ('C', ' 635 ', 'VAL', 0.001682391806588127, (158.093, 186.901, 200.30600000000004)), ('C', ' 744 ', 'GLY', 0.006953600816306375, (204.20299999999997, 178.20699999999994, 190.36500000000007)), ('C', ' 830 ', 'ASP', 0.03867652472308965, (196.975, 172.413, 210.456))]
data['omega'] = []
data['rota'] = [('A', '  30 ', 'ASN', 0.04171078751250948, (196.20500000000013, 246.185, 190.515)), ('A', ' 115 ', 'GLN', 0.19022626643064633, (196.6750000000001, 235.225, 158.261)), ('A', ' 117 ', 'LEU', 0.012635958754468688, (191.83600000000013, 237.706, 162.86200000000002)), ('A', ' 122 ', 'ASN', 0.08611937616411613, (180.30200000000005, 248.111, 163.4410000000001)), ('A', ' 130 ', 'VAL', 0.2486986342890555, (190.2540000000001, 235.808, 159.40500000000006)), ('A', ' 213 ', 'VAL', 0.012593520447218134, (185.9630000000001, 257.46, 189.381)), ('A', ' 239 ', 'GLN', 0.1871740341350962, (195.5580000000001, 245.48, 169.42100000000002)), ('A', ' 326 ', 'ILE', 0.16769351174180303, (224.655, 221.286, 179.869)), ('A', ' 376 ', 'THR', 0.22821088338418663, (222.135, 219.798, 143.83900000000006)), ('A', ' 383 ', 'SER', 0.24582048760026237, (215.93199999999996, 216.34, 155.388)), ('A', ' 985 ', 'ASP', 0.04145320145256005, (181.488, 199.331, 172.103)), ('A', '1082 ', 'CYS', 0.15139521422439323, (217.06499999999997, 207.3920000000001, 270.889)), ('B', ' 281 ', 'GLU', 0.29705566511854703, (236.8629999999999, 202.4169999999999, 199.20300000000003)), ('B', ' 319 ', 'ARG', 0.0, (212.154, 172.109, 194.57600000000002)), ('B', ' 421 ', 'TYR', 0.0051938397258318265, (172.85, 189.87999999999988, 159.08400000000006)), ('B', ' 480 ', 'CYS', 0.06837285956834509, (154.088, 193.74099999999999, 151.49)), ('B', ' 577 ', 'ARG', 0.01663991589661725, (192.074, 160.617, 182.70600000000005)), ('B', ' 619 ', 'GLU', 0.05958487953721716, (213.052, 163.126, 198.96300000000005)), ('B', ' 646 ', 'ARG', 0.0, (209.054, 167.783, 212.992)), ('B', ' 773 ', 'GLU', 0.1247684559417532, (202.53, 211.3409999999999, 216.77200000000002)), ('B', ' 855 ', 'PHE', 0.04916273086614932, (217.393, 212.91499999999994, 195.139)), ('B', ' 983 ', 'ARG', 0.0, (213.11, 206.279, 172.698)), ('C', ' 169 ', 'GLU', 0.293947461052851, (171.57199999999992, 165.477, 160.09900000000005)), ('C', ' 176 ', 'LEU', 0.07103767963744956, (164.901, 154.312, 174.362)), ('C', ' 237 ', 'ARG', 0.0003975331740777995, (158.923, 177.707, 170.20900000000006)), ('C', ' 319 ', 'ARG', 0.1592859291476856, (167.65199999999993, 198.47899999999993, 194.17)), ('C', ' 357 ', 'ARG', 0.18018193391443252, (181.287, 223.369, 160.594)), ('C', ' 427 ', 'ASP', 0.16566114110744817, (196.685, 214.34199999999998, 171.94600000000003)), ('C', ' 460 ', 'ASN', 0.03563342567289474, (206.3439999999999, 222.166, 164.948)), ('C', ' 516 ', 'GLU', 0.09788217069815516, (183.407, 217.0319999999999, 171.934)), ('C', ' 519 ', 'HIS', 0.027357459958218745, (179.819, 218.62, 178.86600000000007)), ('C', ' 574 ', 'ASP', 0.014418949794694883, (172.785, 215.1329999999999, 189.115)), ('C', ' 577 ', 'ARG', 0.0017849995979825274, (168.198, 220.639, 181.16500000000002)), ('C', ' 675 ', 'GLN', 0.2594786721244215, (161.239, 181.932, 220.90200000000002)), ('C', ' 790 ', 'LYS', 0.0012722634794000251, (207.81, 170.61799999999994, 240.46400000000006)), ('C', ' 995 ', 'ARG', 0.0, (197.856, 190.495, 184.55200000000002)), ('C', '1107 ', 'ARG', 0.0, (185.26700000000002, 196.123, 256.677))]
data['cbeta'] = [('A', ' 487 ', 'ASN', ' ', 0.2877309262224126, (219.88999999999993, 194.18499999999997, 114.31400000000002)), ('A', ' 745 ', 'ASP', ' ', 0.34037817981348856, (173.25299999999993, 201.306, 188.83000000000004)), ('A', '1041 ', 'ASP', ' ', 0.2571091625501778, (200.14600000000007, 210.082, 236.866)), ('B', ' 198 ', 'ASP', ' ', 0.34160991321217343, (222.127, 193.64899999999994, 173.039)), ('B', ' 745 ', 'ASP', ' ', 0.3437386361387819, (213.13499999999996, 216.91499999999994, 187.11600000000007)), ('B', '1041 ', 'ASP', ' ', 0.26321108569624285, (207.80900000000005, 190.811, 236.95300000000003)), ('C', '  19 ', 'THR', ' ', 0.25334445492819935, (138.10399999999987, 167.085, 165.58100000000005)), ('C', ' 198 ', 'ASP', ' ', 0.3130884476955391, (177.395, 181.33, 171.374)), ('C', ' 519 ', 'HIS', ' ', 0.2659963373505747, (181.27599999999995, 218.6919999999999, 179.39000000000001)), ('C', ' 617 ', 'CYS', ' ', 0.30673303028259546, (159.106, 199.9289999999999, 206.045))]
data['probe'] = [(' A 331  ASN HD21', ' E   1  NAG  C1 ', -1.568, (240.001, 217.138, 173.181)), (' A1158  ASN HD21', ' A1411  NAG  C1 ', -1.565, (190.792, 207.214, 305.081)), (' B 122  ASN HD21', ' L   1  NAG  C1 ', -1.535, (250.817, 192.133, 160.437)), (' A 165  ASN HD21', ' A1404  NAG  C1 ', -1.526, (196.313, 233.671, 147.561)), (' B 122  ASN  ND2', ' L   1  NAG  C1 ', -1.447, (250.845, 191.149, 160.797)), (' A1158  ASN  ND2', ' A1411  NAG  C1 ', -1.44, (191.769, 207.347, 304.46)), (' A  34  ARG  NH1', ' A 221  SER  HB3', -1.363, (182.743, 241.025, 187.787)), (' A 657  ASN HD21', ' A1409  NAG  C1 ', -1.326, (218.711, 237.635, 221.385)), (' A 173  GLN  CG ', ' A 174  PRO  HD2', -1.301, (172.284, 243.291, 164.98)), (' A 331  ASN  ND2', ' E   1  NAG  C1 ', -1.299, (240.089, 216.268, 172.337)), (' A 173  GLN  HG2', ' A 174  PRO  CD ', -1.278, (172.713, 244.469, 164.966)), (' A 165  ASN  ND2', ' A1404  NAG  C1 ', -1.234, (195.537, 233.299, 148.508)), (' B 624  ILE  C  ', ' B 634  ARG  HD2', -1.23, (222.109, 164.83, 192.996)), (' C 896  ILE HD11', ' C 904  TYR  CE2', -1.198, (202.015, 182.477, 253.973)), (' A 328  ARG  NH1', ' A 533  LEU  HB2', -1.19, (232.188, 221.049, 180.128)), (' C 905  ARG  NH1', ' C1036  GLN  HB2', -1.187, (198.958, 187.134, 244.979)), (' A1107  ARG  HD3', ' B 904  TYR  CE2', -1.179, (206.571, 208.864, 254.584)), (' B 905  ARG  NH1', ' B1050  MET  HB3', -1.099, (211.542, 204.052, 244.167)), (' C 900  MET  O  ', ' C 904  TYR  CD2', -1.07, (200.043, 183.439, 253.6)), (' A  34  ARG HH12', ' A 221  SER  CB ', -1.065, (182.076, 240.436, 187.948)), (' A1107  ARG  CD ', ' B 904  TYR  HE2', -1.054, (205.816, 208.364, 255.2)), (' A 657  ASN  ND2', ' A1409  NAG  C1 ', -1.049, (217.919, 237.017, 221.973)), (' A1158  ASN  ND2', ' A1411  NAG  O5 ', -0.992, (191.151, 206.2, 305.144)), (' B 403  ARG  NH2', ' B 406  GLU  OE2', -0.981, (180.943, 194.489, 150.222)), (' A 328  ARG HH12', ' A 533  LEU  HB2', -0.973, (232.635, 221.208, 181.223)), (' A 983  ARG  CZ ', ' C 517  LEU HD12', -0.973, (183.931, 210.732, 173.767)), (' A  34  ARG HH12', ' A 221  SER  HB3', -0.969, (182.321, 240.128, 188.659)), (' B 624  ILE  CA ', ' B 634  ARG  HD2', -0.965, (221.838, 164.297, 194.088)), (' B 646  ARG  HG3', ' B 646  ARG HH11', -0.954, (208.426, 166.297, 215.323)), (' B 143  VAL HG11', ' B 246  ARG HH21', -0.95, (258.21, 186.214, 166.24)), (' C 905  ARG HH11', ' C1036  GLN  HB2', -0.943, (197.888, 187.666, 245.634)), (' A 143  VAL HG21', ' A 246  ARG HH21', -0.942, (179.021, 255.869, 165.557)), (' C 995  ARG  HG2', ' C 995  ARG HH11', -0.911, (196.377, 192.827, 183.078)), (' B 905  ARG HH12', ' B1050  MET  CB ', -0.909, (211.995, 204.649, 243.15)), (' A1107  ARG  CD ', ' B 904  TYR  CE2', -0.908, (206.163, 207.233, 255.206)), (' A1107  ARG  HD3', ' B 904  TYR  HE2', -0.903, (205.852, 208.11, 255.189)), (' B 624  ILE  C  ', ' B 634  ARG  CD ', -0.902, (222.062, 165.688, 192.748)), (' B 102  ARG  NH2', ' B 246  ARG HH11', -0.895, (255.156, 186.409, 169.244)), (' B 319  ARG  HB2', ' B 319  ARG HH11', -0.884, (212.496, 174.459, 193.542)), (' B 905  ARG HH12', ' B1050  MET  HB3', -0.873, (212.059, 205.19, 244.216)), (' C 900  MET  O  ', ' C 904  TYR  HD2', -0.86, (200.459, 183.135, 253.587)), (' B  91  TYR  OH ', ' B 191  GLU  OE2', -0.855, (241.834, 183.796, 185.144)), (' C  17  ASN  O  ', ' C  17  ASN  OD1', -0.854, (141.374, 167.101, 159.926)), (' B 896  ILE HD11', ' B 904  TYR  CE1', -0.853, (210.394, 209.354, 253.697)), (' C 896  ILE HD11', ' C 904  TYR  HE2', -0.848, (202.012, 181.799, 254.932)), (' B 102  ARG HH21', ' B 246  ARG  NH1', -0.848, (256.028, 186.829, 168.626)), (' C1093  GLY  O  ', ' C1107  ARG  NH1', -0.847, (187.135, 200.566, 258.761)), (' B 900  MET  O  ', ' B 904  TYR  HD1', -0.843, (211.792, 207.469, 253.185)), (' A 983  ARG  NH2', ' C 517  LEU HD12', -0.84, (184.108, 211.623, 174.246)), (' A1107  ARG  HD3', ' B 904  TYR  CD2', -0.838, (206.52, 207.733, 253.924)), (' B 319  ARG  CB ', ' B 319  ARG HH11', -0.829, (212.099, 173.98, 192.797)), (' B 900  MET  O  ', ' B 904  TYR  CD1', -0.823, (210.893, 207.193, 253.489)), (' B 624  ILE  HA ', ' B 634  ARG  HD2', -0.818, (221.447, 164.773, 194.798)), (' A 102  ARG  HD3', ' A 121  ASN  O  ', -0.812, (181.331, 249.492, 166.056)), (' C 124  THR  O  ', ' C 174  PRO  HG3', -0.81, (166.706, 152.603, 166.897)), (' A  81  ASN  ND2', ' A 245  HIS  CD2', -0.804, (192.635, 252.954, 169.899)), (' B 403  ARG  HE ', ' B 406  GLU  CD ', -0.801, (181.541, 192.272, 150.335)), (' C 319  ARG  HB2', ' C 319  ARG  NH1', -0.797, (168.789, 200.126, 191.737)), (' B 905  ARG  NH1', ' B1050  MET  CB ', -0.794, (212.168, 204.017, 243.806)), (' C 995  ARG  HG2', ' C 995  ARG  NH1', -0.79, (195.448, 193.343, 183.373)), (' C 896  ILE  CD1', ' C 904  TYR  CE2', -0.786, (202.829, 182.677, 253.609)), (' B 102  ARG  NH2', ' B 246  ARG  NH1', -0.776, (255.388, 186.928, 169.597)), (' C1107  ARG  HG2', ' C1107  ARG HH11', -0.773, (186.862, 198.932, 257.487)), (' A 143  VAL HG21', ' A 246  ARG  NH2', -0.771, (179.253, 255.746, 165.551)), (' B 403  ARG  CZ ', ' B 406  GLU  OE2', -0.769, (180.629, 193.711, 149.655)), (' A 143  VAL  CG2', ' A 246  ARG HH21', -0.75, (178.995, 256.424, 164.626)), (' B 140  PHE  CZ ', ' B 158  ARG  HD2', -0.748, (252.461, 176.756, 158.296)), (' A  81  ASN HD21', ' A 245  HIS  CD2', -0.745, (191.742, 253.427, 170.304)), (' A 142  GLY  HA2', ' A 247  SER  O  ', -0.744, (184.44, 258.175, 163.958)), (' A 173  GLN  CB ', ' A 174  PRO  HD2', -0.744, (172.783, 242.621, 165.811)), (' B1107  ARG  HD3', ' C 904  TYR  CD1', -0.735, (202.737, 186.737, 254.484)), (' B 403  ARG  NE ', ' B 406  GLU  OE2', -0.735, (180.467, 193.164, 150.105)), (' A 125  ASN  HB3', ' A 173  GLN  HA ', -0.729, (174.242, 242.449, 163.557)), (' A 173  GLN  HG2', ' A 174  PRO  HD2', -0.729, (171.662, 243.711, 165.375)), (' C1107  ARG  CG ', ' C1107  ARG HH11', -0.715, (187.766, 198.493, 257.657)), (' C1093  GLY  C  ', ' C1107  ARG  NH1', -0.71, (187.059, 199.414, 258.885)), (' A 454  ARG HH12', ' A 467  ASP  CG ', -0.701, (223.771, 195.294, 132.707)), (' C1093  GLY  CA ', ' C1107  ARG  NH1', -0.697, (187.676, 199.18, 258.799)), (' A 896  ILE HD11', ' A 904  TYR  CE1', -0.693, (183.289, 202.61, 254.527)), (' B 102  ARG  HG3', ' B 246  ARG  HB2', -0.688, (251.759, 183.723, 167.644)), (' B 319  ARG  HB2', ' B 319  ARG  NH1', -0.688, (211.358, 174.851, 193.31)), (' B 213  VAL HG13', ' B 214  ARG  HD2', -0.68, (253.225, 172.241, 189.017)), (' A 454  ARG  NH1', ' A 467  ASP  HB3', -0.674, (223.992, 195.894, 133.031)), (' C  83  VAL HG11', ' C 237  ARG  NH2', -0.672, (154.326, 176.403, 167.605)), (' B 896  ILE HD11', ' B 904  TYR  HE1', -0.672, (210.901, 209.722, 254.829)), (' A 141  LEU  O  ', ' A 247  SER  N  ', -0.664, (186.491, 256.899, 165.12)), (' C1011  GLN  OE1', ' C1014  ARG  NH1', -0.66, (195.386, 187.207, 208.366)), (' C1093  GLY  N  ', ' C1107  ARG  NH1', -0.659, (188.691, 199.475, 259.575)), (' B1107  ARG  HD3', ' C 904  TYR  HD1', -0.654, (202.144, 187.042, 254.98)), (' A 328  ARG HH11', ' A 533  LEU  HB2', -0.653, (231.338, 220.395, 180.71)), (' A 983  ARG  NE ', ' C 517  LEU HD12', -0.653, (183.08, 210.717, 174.206)), (' C 319  ARG  HB2', ' C 319  ARG HH11', -0.644, (168.985, 199.43, 191.5)), (' A 273  ARG HH11', ' A 292  ALA  HB3', -0.636, (199.739, 231.708, 191.041)), (' B 102  ARG HH21', ' B 246  ARG HH11', -0.636, (255.252, 186.647, 169.254)), (' A 457  ARG  CZ ', ' A 461  LEU  HB3', -0.634, (219.349, 195.805, 134.169)), (' C1093  GLY  C  ', ' C1107  ARG HH12', -0.633, (187.006, 200.074, 259.669)), (' A1107  ARG  NE ', ' B 904  TYR  CE2', -0.632, (206.699, 206.972, 255.94)), (' A  34  ARG  NH1', ' A 221  SER  CB ', -0.63, (182.373, 240.43, 189.355)), (' B 646  ARG  CG ', ' B 646  ARG HH11', -0.628, (208.254, 166.545, 215.424)), (' A 983  ARG  NE ', ' C 517  LEU  CD1', -0.623, (182.975, 210.31, 173.585)), (' A 896  ILE HD11', ' A 904  TYR  HE1', -0.617, (183.028, 203.339, 255.297)), (' A  81  ASN  OD1', ' A 245  HIS  NE2', -0.608, (193.405, 253.652, 171.55)), (' B 418  ILE  HA ', ' B 422  ASN HD22', -0.608, (177.248, 189.006, 155.398)), (' A 278  LYS  HB2', ' A 306  PHE  CE1', -0.604, (184.615, 229.384, 197.924)), (' A 273  ARG  NH1', ' A 292  ALA  HB3', -0.603, (200.132, 231.068, 191.431)), (' C1093  GLY  H  ', ' C1107  ARG  NH1', -0.603, (188.604, 199.267, 258.544)), (' C 125  ASN  HB3', ' C 174  PRO  HD3', -0.599, (168.533, 152.952, 165.639)), (' A 105  ILE  CD1', ' A 241  LEU HD21', -0.592, (191.995, 246.817, 164.029)), (' B 646  ARG  HG3', ' B 646  ARG  NH1', -0.584, (208.468, 166.687, 216.126)), (' A  48  LEU HD21', ' A 306  PHE  CD1', -0.58, (185.603, 228.263, 200.309)), (' B 983  ARG  CB ', ' B 983  ARG HH11', -0.579, (213.763, 203.792, 173.125)), (' A 454  ARG  NH1', ' A 467  ASP  CG ', -0.578, (224.306, 195.224, 132.298)), (' A  84  LEU  O  ', ' A 238  PHE  N  ', -0.575, (199.525, 241.872, 170.308)), (' A 278  LYS  HB2', ' A 306  PHE  CZ ', -0.572, (185.05, 230.022, 197.842)), (' A 328  ARG HH12', ' A 533  LEU  CB ', -0.569, (232.835, 221.359, 181.005)), (' A 900  MET  O  ', ' A 904  TYR  HD1', -0.566, (184.263, 204.982, 253.832)), (' C1107  ARG  HG2', ' C1107  ARG  NH1', -0.564, (187.057, 199.829, 257.608)), (' C 995  ARG  CG ', ' C 995  ARG HH11', -0.564, (196.317, 192.862, 182.834)), (' A 328  ARG HH21', ' A 580  GLN  HB2', -0.562, (234.843, 218.063, 177.729)), (' B 328  ARG  O  ', ' B 579  PRO  HG3', -0.56, (196.961, 162.182, 175.807)), (' C 900  MET  O  ', ' C 904  TYR  CE2', -0.56, (201.002, 182.377, 254.527)), (' C 886  TRP  HE3', ' C 905  ARG  NH1', -0.558, (200.472, 187.078, 246.143)), (' A 840  CYS  HA ', ' A 845  ALA  HB2', -0.557, (169.344, 214.375, 198.729)), (' A  34  ARG HH11', ' A 221  SER  HB3', -0.556, (183.591, 240.353, 188.368)), (' A 143  VAL  CG2', ' A 246  ARG  HE ', -0.553, (180.514, 256.042, 165.108)), (' A 143  VAL HG23', ' A 246  ARG  HE ', -0.552, (181.057, 255.591, 165.301)), (' A 904  TYR  OH ', ' C1094  VAL  HB ', -0.545, (184.354, 200.176, 258.025)), (' A 141  LEU  O  ', ' A 247  SER  OG ', -0.543, (186.944, 257.451, 163.979)), (' A 905  ARG  NH1', ' A1049  LEU  O  ', -0.543, (188.034, 206.055, 244.969)), (' C 319  ARG  CB ', ' C 319  ARG  CZ ', -0.54, (169.658, 199.284, 192.666)), (' E   1  NAG  H62', ' E   2  NAG  C7 ', -0.539, (241.815, 221.517, 174.659)), (' C 357  ARG  HB2', ' C 396  TYR  CE1', -0.539, (183.08, 224.515, 162.369)), (' C1093  GLY  CA ', ' C1107  ARG HH11', -0.538, (187.76, 198.614, 259.046)), (' B  91  TYR  OH ', ' B 191  GLU  CD ', -0.538, (241.381, 184.03, 184.895)), (' B 418  ILE  HA ', ' B 422  ASN  ND2', -0.537, (176.922, 189.697, 155.258)), (' A 454  ARG  NH1', ' A 467  ASP  CB ', -0.534, (224.481, 195.407, 133.4)), (' B 896  ILE  CD1', ' B 904  TYR  CE1', -0.534, (210.2, 210.021, 253.521)), (' A 173  GLN  CB ', ' A 174  PRO  CD ', -0.529, (173.314, 243.349, 165.986)), (' B 905  ARG  NH1', ' B1049  LEU  O  ', -0.529, (211.263, 203.696, 244.687)), (' A 173  GLN  CG ', ' A 174  PRO  CD ', -0.527, (173.416, 243.387, 165.487)), (' A 125  ASN  CB ', ' A 173  GLN  HA ', -0.524, (174.995, 242.547, 163.367)), (' C 905  ARG HH12', ' C1036  GLN  HB2', -0.524, (199.315, 187.52, 244.996)), (' C 905  ARG  HD2', ' C1049  LEU  O  ', -0.522, (196.446, 185.648, 246.173)), (' B 457  ARG  NH1', ' B 459  SER  O  ', -0.522, (168.335, 189.385, 161.88)), (' A 353  TRP  HZ3', ' A 355  ARG  HD2', -0.514, (226.854, 200.475, 144.908)), (' A1031  GLU  OE2', ' C1039  ARG  NH2', -0.512, (194.738, 197.183, 235.104)), (' B 564  GLN  HG2', ' B 577  ARG  HG2', -0.509, (190.673, 161.908, 179.92)), (' B 382  VAL HG12', ' C 983  ARG  HB3', -0.503, (196.108, 178.886, 172.559)), (' B 646  ARG  CG ', ' B 646  ARG  NH1', -0.502, (207.983, 166.702, 215.626)), (' A  81  ASN HD21', ' A 245  HIS  CG ', -0.5, (191.234, 253.263, 170.521)), (' A 454  ARG HH12', ' A 467  ASP  CB ', -0.499, (224.126, 195.283, 133.412)), (' C 886  TRP  CE3', ' C 905  ARG  NH1', -0.498, (200.123, 187.283, 246.62)), (' A 142  GLY  HA2', ' A 247  SER  C  ', -0.494, (184.936, 258.353, 164.688)), (' A 900  MET  O  ', ' A 904  TYR  CD1', -0.49, (184.886, 204.552, 254.199)), (' A 105  ILE HD13', ' A 241  LEU HD21', -0.49, (192.291, 247.328, 164.545)), (' B 457  ARG  HG2', ' B 459  SER  O  ', -0.488, (168.395, 190.716, 161.395)), (' A 143  VAL  N  ', ' A 247  SER  O  ', -0.486, (183.265, 258.415, 164.083)), (' A 403  ARG  HD3', ' A 505  TYR  HA ', -0.485, (224.524, 217.206, 127.707)), (' A 328  ARG  NH1', ' A 533  LEU  CB ', -0.482, (232.091, 221.454, 180.766)), (' B1014  ARG  HB2', ' B1014  ARG  NH1', -0.482, (207.249, 200.21, 210.201)), (' A 403  ARG  HG2', ' A 504  GLY  O  ', -0.478, (223.753, 217.133, 130.02)), (' C 319  ARG  CB ', ' C 319  ARG  NH1', -0.477, (169.516, 199.368, 192.554)), (' C 577  ARG  HG3', ' C 577  ARG  O  ', -0.476, (168.497, 220.812, 178.831)), (' B 418  ILE  O  ', ' B 422  ASN  HB2', -0.473, (177.17, 188.448, 157.343)), (' A 421  TYR  CD1', ' A 457  ARG  HB3', -0.47, (219.019, 198.068, 129.386)), (' B1094  VAL  CG2', ' C 904  TYR  OH ', -0.462, (204.251, 183.021, 258.021)), (' A1107  ARG  NE ', ' B 904  TYR  HE2', -0.461, (206.378, 207.767, 256.333)), (' A1404  NAG  H83', ' C 351  TYR  OH ', -0.461, (198.653, 227.962, 149.149)), (' A 896  ILE  CD1', ' A 904  TYR  CE1', -0.46, (182.802, 202.288, 254.404)), (' B1107  ARG  NH1', ' C 904  TYR  CD1', -0.46, (201.246, 186.979, 255.914)), (' A1094  VAL  HB ', ' B 904  TYR  OH ', -0.459, (207.913, 210.184, 257.071)), (' B1107  ARG  HD3', ' C 904  TYR  CE1', -0.459, (203.187, 186.493, 255.461)), (' B1039  ARG  NH2', ' C1031  GLU  OE2', -0.457, (200.665, 195.674, 235.181)), (' B 122  ASN  CG ', ' L   1  NAG  C1 ', -0.455, (250.394, 192.013, 162.495)), (' B 983  ARG  HB3', ' B 983  ARG HH11', -0.455, (214.069, 203.798, 172.901)), (' C 346  ARG  H  ', ' C 346  ARG  HD3', -0.453, (186.446, 220.613, 144.957)), (' B 454  ARG  NH2', ' B 469  SER  O  ', -0.451, (167.176, 184.182, 153.72)), (' A1404  NAG  H81', ' C 468  ILE HG23', -0.451, (197.661, 229.687, 151.157)), (' B 403  ARG  HG3', ' B 495  TYR  CE1', -0.441, (180.72, 190.631, 148.456)), (' B 102  ARG  CG ', ' B 246  ARG  HB2', -0.441, (251.892, 183.904, 168.407)), (' A1107  ARG  CG ', ' B 904  TYR  HE2', -0.44, (205.948, 208.83, 255.965)), (' A 457  ARG  HD3', ' A 459  SER  O  ', -0.439, (217.928, 196.541, 131.656)), (' B1014  ARG  CZ ', ' B1014  ARG  HB2', -0.437, (207.183, 199.839, 210.675)), (' A 559  PHE  HB2', ' A 577  ARG  NH2', -0.437, (237.27, 207.661, 186.79)), (' E   1  NAG  O4 ', ' E   2  NAG  O7 ', -0.436, (241.42, 220.566, 176.712)), (' C 319  ARG  CZ ', ' C 319  ARG  HB2', -0.434, (169.862, 199.643, 192.327)), (' B 173  GLN  HG2', ' B 174  PRO  HD2', -0.433, (252.086, 199.932, 169.811)), (' B 131  CYS  HA ', ' B 165  ASN  O  ', -0.432, (234.29, 190.112, 156.111)), (' A 454  ARG HH11', ' A 467  ASP  HB3', -0.432, (224.304, 196.529, 133.292)), (' A  48  LEU  HG ', ' A 306  PHE  HE1', -0.43, (185.034, 227.68, 198.678)), (' C 380  TYR  CE2', ' C 412  PRO  HD2', -0.429, (194.377, 208.242, 166.562)), (' B 457  ARG  HG2', ' B 457  ARG HH11', -0.429, (168.401, 189.573, 160.854)), (' A 646  ARG  HB2', ' A 668  ALA  CB ', -0.425, (216.6, 221.849, 214.609)), (' B 319  ARG  CB ', ' B 319  ARG  NH1', -0.424, (211.238, 174.731, 193.262)), (' B 191  GLU  O  ', ' B 205  SER  HA ', -0.424, (241.981, 189.287, 180.774)), (' A 657  ASN  CG ', ' A1409  NAG  C1 ', -0.423, (218.066, 236.806, 221.964)), (' A 328  ARG  NH2', ' A 578  ASP  OD2', -0.423, (233.893, 218.334, 179.955)), (' B 421  TYR  HB3', ' B 457  ARG  CB ', -0.423, (169.756, 190.817, 158.769)), (' B 905  ARG  HD2', ' B1049  LEU  O  ', -0.422, (210.621, 202.865, 245.789)), (' A 273  ARG  NH1', ' A 292  ALA  CB ', -0.419, (200.402, 231.202, 191.611)), (' A 355  ARG  NH2', ' A 396  TYR  CD2', -0.416, (224.669, 199.545, 150.165)), (' B 173  GLN  CB ', ' B 174  PRO  HD2', -0.415, (251.556, 199.072, 169.739)), (' C1107  ARG  H  ', ' C1107  ARG  HG3', -0.414, (187.482, 196.853, 258.007)), (' B  18  PHE  CZ ', ' B 158  ARG  NH1', -0.413, (253.688, 174.384, 157.273)), (' B 330  PRO  HD2', ' B 525  CYS  SG ', -0.413, (195.223, 163.389, 170.776)), (' A 395  VAL HG22', ' A 515  PHE  HB3', -0.413, (223.861, 205.99, 155.4)), (' A 457  ARG  CD ', ' A 459  SER  O  ', -0.411, (218.117, 196.068, 131.635)), (' B 454  ARG  HD3', ' B 454  ARG HH11', -0.41, (167.765, 187.885, 155.679)), (' B 765  ARG  HG2', ' B 765  ARG  O  ', -0.408, (197.193, 212.031, 206.984)), (' C 900  MET  C  ', ' C 904  TYR  CD2', -0.406, (200.543, 182.057, 254.172)), (' B 122  ASN  OD1', ' B 125  ASN  O  ', -0.406, (249.955, 192.65, 165.023)), (' A 736  VAL HG13', ' A 858  LEU HD23', -0.405, (181.536, 202.427, 199.718)), (' A 143  VAL  O  ', ' A 248  TYR  HA ', -0.405, (182.663, 260.878, 164.387)), (' C 567  ARG  HD3', ' C 571  ASP  O  ', -0.405, (180.247, 215.121, 186.609)), (' B1050  MET  HE2', ' B1052  PHE  CE1', -0.404, (215.589, 206.874, 242.637)), (' A 213  VAL HG13', ' A 214  ARG  HD3', -0.403, (188.686, 257.209, 190.985)), (' C 346  ARG  HD3', ' C 346  ARG  N  ', -0.403, (186.591, 220.589, 144.986)), (' A 403  ARG  NH2', ' A 495  TYR  CD1', -0.402, (227.338, 211.681, 127.96)), (' C  83  VAL HG11', ' C 237  ARG HH21', -0.401, (153.729, 177.02, 168.482)), (' B1094  VAL HG21', ' C 904  TYR  OH ', -0.4, (204.609, 182.719, 257.174))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
