# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('L', '  94 ', 'PRO', None, (177.28100000000006, 179.23000000000002, 242.35399999999998))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 425  LEU HD12', ' A 426  PRO  HD2', -0.803, (170.094, 190.107, 203.165)), (' A 374  PHE  HB2', ' A 377  PHE  HE1', -0.645, (183.974, 182.94, 215.029)), (' L  44  ARG  HD3', ' L  45  LEU  N  ', -0.64, (170.535, 197.885, 251.424)), (' A 351  TYR  HE1', ' A 452  LEU  HB2', -0.631, (162.428, 194.593, 222.764)), (' A 370  ASN  OD1', ' A 371  SER  N  ', -0.625, (194.279, 186.038, 216.578)), (' L  81  ASP  OD1', ' L  82  ALA  N  ', -0.604, (179.577, 207.397, 255.736)), (' A 444  LYS  HD3', ' L  31  PHE  HE1', -0.578, (172.655, 190.636, 235.79)), (' A 389  ASP  O  ', ' A 390  LEU HD22', -0.576, (192.076, 190.081, 197.187)), (' H  86  GLN  NE2', ' H 113  THR  O  ', -0.573, (173.158, 179.741, 269.875)), (' L  44  ARG  HD3', ' L  45  LEU  H  ', -0.571, (171.135, 197.627, 251.272)), (' A 384  PRO  HA ', ' A 387  LEU HD13', -0.567, (188.893, 183.975, 204.177)), (' A 452  LEU  HB3', ' A 492  LEU HD22', -0.566, (160.239, 194.115, 223.388)), (' H  52  TRP  CD1', ' H  54  ASP  HA ', -0.548, (158.264, 178.077, 243.942)), (' H  54  ASP  OD2', ' H  73  ASN  ND2', -0.547, (153.063, 176.543, 245.884)), (' L  37  GLN  NE2', ' L  38  LYS  O  ', -0.545, (174.997, 199.038, 258.897)), (' A 440  ASN  O  ', ' L  91  ASN  ND2', -0.543, (178.622, 186.372, 233.433)), (' A 444  LYS  HD3', ' L  31  PHE  CE1', -0.529, (172.611, 190.451, 235.044)), (' H  86  GLN HE22', ' H 112  LEU  HG ', -0.529, (172.658, 179.591, 268.762)), (' H  50  VAL HG22', ' H  58  TYR  O  ', -0.527, (168.589, 176.548, 246.468)), (' A 384  PRO  HA ', ' A 387  LEU  CD1', -0.52, (188.206, 184.33, 203.875)), (' L  82  ALA  HA ', ' L 103  LEU HD11', -0.511, (182.393, 206.042, 256.79)), (' L  60  ARG HH21', ' L  61  PHE  HZ ', -0.506, (175.522, 208.875, 249.905)), (' L  47  ILE HG22', ' L  51  SER  HA ', -0.496, (173.003, 201.883, 242.2)), (' H   4  LEU HD22', ' H  24  VAL HG12', -0.486, (158.009, 187.107, 253.415)), (' L  46  LEU  HB3', ' L  48  TYR  CE1', -0.483, (168.541, 197.915, 245.084)), (' A 386  LYS  O  ', ' A 390  LEU HD23', -0.48, (190.379, 187.895, 199.177)), (' H  52  TRP  HD1', ' H  54  ASP  HA ', -0.472, (158.032, 178.323, 243.904)), (' L  46  LEU HD12', ' L  48  TYR  HE1', -0.471, (169.2, 195.989, 244.877)), (' L  81  ASP  OD1', ' L  83  ALA  N  ', -0.465, (178.832, 205.886, 255.624)), (' H  64  MET  HA ', ' H  67  LEU HD13', -0.462, (173.568, 170.646, 251.438)), (' H   5  LYS  HE3', ' H  23  THR  HB ', -0.455, (154.499, 185.926, 259.685)), (' H  63  LEU  C  ', ' H  64  MET  HE2', -0.454, (176.689, 171.367, 251.781)), (' H  50  VAL HG13', ' H  58  TYR  H  ', -0.454, (166.889, 176.142, 244.853)), (' A 461  LEU  H  ', ' A 461  LEU HD23', -0.45, (159.248, 191.709, 207.506)), (' H  18  LEU HD12', ' H 112  LEU HD13', -0.448, (168.765, 179.092, 267.312)), (' H  60  ASN  ND2', ' L  94  PRO  HD3', -0.446, (176.873, 176.514, 242.917)), (' L  76  ARG  HG2', ' L  77  MET  H  ', -0.436, (181.643, 215.948, 251.189)), (' A 468  ILE  O  ', ' A 468  ILE HG22', -0.434, (159.375, 202.134, 218.121)), (' H  50  VAL  HB ', ' H  52  TRP  HZ3', -0.433, (164.874, 179.526, 246.743)), (' L  61  PHE  CE1', ' L  74  ILE HD12', -0.431, (177.652, 208.659, 248.353)), (' A 453  TYR  CE1', ' A 493  GLN  HB3', -0.431, (158.346, 187.912, 223.284)), (' A 453  TYR  CD1', ' A 495  TYR  HE1', -0.431, (161.537, 187.37, 222.25)), (' A 363  ALA  HB1', ' A 365  TYR  CE2', -0.428, (190.667, 192.626, 206.04)), (' H  54  ASP  OD1', ' H  55  GLY  N  ', -0.425, (157.577, 175.92, 245.057)), (' L  65  GLY  HA3', ' L  70  TYR  HD1', -0.425, (183.674, 197.9, 237.134)), (' H  39  GLN  HB2', ' H  45  LEU  HG ', -0.422, (175.347, 188.527, 257.8)), (' H  59  TYR  CD2', ' H  67  LEU  HG ', -0.419, (169.644, 171.493, 249.4)), (' H  60  ASN  HB3', ' L  94  PRO  HB3', -0.417, (176.767, 177.562, 245.435)), (' A 495  TYR  HD2', ' A 497  PHE  CZ ', -0.411, (166.979, 186.079, 224.381)), (' H  50  VAL HG12', ' H  52  TRP  HE3', -0.411, (164.32, 178.605, 244.947)), (' H   6  GLU  N  ', ' H   6  GLU  OE1', -0.41, (159.95, 188.773, 261.525)), (' L   2  ILE HG12', ' L  27  SER  HB3', -0.408, (185.342, 184.498, 238.049))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
