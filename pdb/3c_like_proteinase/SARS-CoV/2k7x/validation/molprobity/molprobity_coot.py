# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 188 ', 'ARG', 0.010571982241351162, (11.01, 15.199, 7.155999999999999)), ('A', ' 189 ', 'GLN', 0.006983333331056386, (8.855999999999998, 14.110999999999999, 4.127)), ('A', ' 277 ', 'ASN', 0.03315175191424843, (0.846, -4.543, 13.438)), ('A', ' 301 ', 'SER', 0.016942465282010755, (23.81, -23.309, 2.401)), ('A', ' 303 ', 'VAL', 0.0, (23.800000000000008, -28.62, 4.116)), ('A', ' 217 ', 'ARG', 0.024205695406735044, (5.602, -16.468, 5.397)), ('A', ' 190 ', 'THR', 0.028545592285830968, (4.929, 16.544000000000004, -7.522)), ('A', ' 189 ', 'GLN', 0.003747380620450027, (14.155000000000003, 7.644, 15.096999999999998)), ('A', ' 251 ', 'GLY', 0.05725704118534683, (16.211, -12.982999999999999, -8.644)), ('A', ' 304 ', 'THR', 0.04833144950483577, (31.674000000000003, -22.304, 4.715)), ('A', ' 302 ', 'GLY', 0.08720823348863924, (15.434, -24.134, 6.848999999999999)), ('A', ' 217 ', 'ARG', 0.04914982311680032, (5.512, -16.264, 5.574)), ('A', ' 278 ', 'GLY', 0.05351617696979854, (2.281, -6.595999999999998, 16.305)), ('A', ' 300 ', 'CYS', 0.048016878352951, (19.407000000000004, -20.532, 2.814)), ('A', ' 194 ', 'ALA', 0.04650311394194285, (25.593, 15.991, 2.689)), ('A', ' 278 ', 'GLY', 0.02892071954982627, (1.103, -8.474, 16.014)), ('A', ' 303 ', 'VAL', 0.011959609549659663, (28.051000000000002, -23.597, 1.253)), ('A', ' 251 ', 'GLY', 0.07546708854551497, (16.108, -13.035, -8.682)), ('A', ' 303 ', 'VAL', 0.01759191006321325, (28.028000000000002, -21.115, -1.299)), ('A', ' 278 ', 'GLY', 0.05838525722514479, (1.604, -7.843, 15.943)), ('A', ' 217 ', 'ARG', 0.04362198045926182, (5.652000000000001, -16.375, 5.509)), ('A', ' 251 ', 'GLY', 0.04356315237901208, (16.291, -12.927999999999997, -8.688)), ('A', ' 303 ', 'VAL', 0.03972165843045512, (24.404000000000003, -22.747, -4.759)), ('A', ' 251 ', 'GLY', 0.08723356105590177, (16.076, -12.79, -8.652)), ('A', ' 303 ', 'VAL', 0.027934261852993882, (28.102999999999998, -27.207, 3.477)), ('A', ' 278 ', 'GLY', 0.08339881938205637, (0.7700000000000002, -7.932999999999998, 15.879))]
data['omega'] = [('A', ' 306 ', 'GLN', None, (23.009000000000007, -24.917, -3.764))]
data['rota'] = [('A', ' 198 ', 'THR', 0.009507190257983307, (17.15, 5.819, 3.5719999999999996)), ('A', ' 221 ', 'ASN', 0.027708878356515056, (-0.11800000000000002, -11.906, -0.349)), ('A', ' 224 ', 'THR', 0.28037933497662854, (1.461, -7.883, -7.543999999999999)), ('A', ' 226 ', 'THR', 0.0027198671887163073, (3.2030000000000007, -1.813, -9.623)), ('A', ' 236 ', 'LYS', 0.15115784773560959, (6.881000000000003, 7.855, 2.514)), ('A', ' 244 ', 'GLN', 0.0, (14.337, -3.376999999999999, -12.243)), ('A', ' 286 ', 'ILE', 0.11922309376131228, (10.897, -4.383, 13.271999999999998)), ('A', ' 288 ', 'GLU', 0.14384649914504188, (15.237, -5.252999999999998, 9.293)), ('A', ' 289 ', 'ASP', 0.007328680235972822, (17.507, -4.102, 6.417999999999999)), ('A', ' 298 ', 'ARG', 0.002697376451573892, (24.181, -17.788, 1.149)), ('A', ' 303 ', 'VAL', 0.01040122320384643, (23.800000000000008, -28.62, 4.116)), ('A', ' 306 ', 'GLN', 0.0, (22.135, -23.962, -3.0469999999999997)), ('A', ' 188 ', 'ARG', 0.0, (-1.78, 7.047999999999998, 10.617)), ('A', ' 198 ', 'THR', 0.06748541479791384, (17.210000000000004, 5.804, 3.539)), ('A', ' 224 ', 'THR', 0.07812475923012523, (1.2810000000000001, -7.867999999999999, -7.142999999999999)), ('A', ' 226 ', 'THR', 0.0027198671887163073, (3.196000000000001, -1.824, -9.601)), ('A', ' 282 ', 'LEU', 0.11371050249807499, (11.407000000000004, -13.501, 11.432)), ('A', ' 286 ', 'ILE', 0.07816238379296839, (11.029999999999998, -4.130000000000001, 12.945)), ('A', ' 304 ', 'THR', 0.030467737774240472, (28.197, -20.835, -0.022)), ('A', ' 196 ', 'THR', 0.13690653404184733, (21.507, 8.387, 2.089)), ('A', ' 198 ', 'THR', 0.13757531175100768, (17.177000000000003, 5.731, 3.408)), ('A', ' 220 ', 'LEU', 0.05645219827879993, (3.18, -13.147, 2.074)), ('A', ' 226 ', 'THR', 0.0028198237492295065, (3.113000000000001, -1.911, -9.556)), ('A', ' 286 ', 'ILE', 0.12407310031134997, (10.735999999999999, -4.149, 12.812)), ('A', ' 188 ', 'ARG', 0.21423123857313586, (11.606, 16.942, -5.253)), ('A', ' 198 ', 'THR', 0.06358461341113819, (17.07, 5.839, 3.553)), ('A', ' 226 ', 'THR', 0.0027198671887163073, (3.270000000000001, -1.821, -9.687999999999999)), ('A', ' 282 ', 'LEU', 0.14655386083066108, (11.992000000000004, -13.924, 11.262)), ('A', ' 286 ', 'ILE', 0.03304452581271422, (11.214999999999996, -4.4, 13.201)), ('A', ' 198 ', 'THR', 0.09421550478243172, (16.898, 5.866, 3.667)), ('A', ' 226 ', 'THR', 0.0027198671887163073, (3.204000000000001, -1.7599999999999998, -9.597)), ('A', ' 282 ', 'LEU', 0.13299827479522064, (12.201000000000004, -14.218, 11.311)), ('A', ' 286 ', 'ILE', 0.03488688516294623, (11.129, -4.713000000000001, 13.412)), ('A', ' 289 ', 'ASP', 0.21314724780156355, (17.436, -4.082, 6.522)), ('A', ' 189 ', 'GLN', 0.2473309103042201, (14.155000000000003, 7.644, 15.096999999999998)), ('A', ' 196 ', 'THR', 0.169290432494901, (20.081000000000003, 10.408, 2.984)), ('A', ' 198 ', 'THR', 0.030635216480738352, (17.254, 5.774, 3.494)), ('A', ' 224 ', 'THR', 0.1663751328522129, (1.233, -7.651, -7.715)), ('A', ' 226 ', 'THR', 0.0030363627984144265, (3.096000000000001, -1.649, -9.631)), ('A', ' 268 ', 'LEU', 0.23557087370561536, (5.956000000000001, -5.291999999999999, 1.981)), ('A', ' 286 ', 'ILE', 0.19278925931897253, (10.403999999999996, -4.496, 13.558)), ('A', ' 289 ', 'ASP', 0.28563463310349163, (17.511, -4.029, 6.31)), ('A', ' 198 ', 'THR', 0.13702330639953486, (17.477, 5.813, 3.94)), ('A', ' 226 ', 'THR', 0.002895105297249653, (3.376000000000001, -1.729, -9.66)), ('A', ' 286 ', 'ILE', 0.08644721454118881, (11.463999999999999, -4.292, 13.245)), ('A', ' 292 ', 'THR', 0.22642137479004246, (21.675, -8.061, 1.155)), ('A', ' 198 ', 'THR', 0.016297501078355967, (17.325, 5.696, 3.396)), ('A', ' 224 ', 'THR', 0.11033692835058372, (1.393, -7.793, -7.3)), ('A', ' 226 ', 'THR', 0.006967270276034999, (3.246000000000001, -1.8319999999999999, -9.679)), ('A', ' 279 ', 'ARG', 0.17836302732149434, (2.9920000000000013, -9.798, 14.304)), ('A', ' 286 ', 'ILE', 0.037460180883461175, (11.015999999999996, -3.989, 12.935999999999998)), ('A', ' 224 ', 'THR', 0.14802404680331135, (1.4500000000000004, -7.776, -7.416)), ('A', ' 226 ', 'THR', 0.0027198671887163073, (3.2880000000000007, -1.761, -9.665)), ('A', ' 286 ', 'ILE', 0.1468412794676344, (10.992, -4.341, 13.033999999999999)), ('A', ' 198 ', 'THR', 0.0823221666080184, (17.093, 5.89, 3.352)), ('A', ' 226 ', 'THR', 0.002792529238423778, (3.133000000000001, -2.016, -9.541)), ('A', ' 274 ', 'ASN', 0.0072281078877273345, (-0.26999999999999996, -1.558, 8.734)), ('A', ' 286 ', 'ILE', 0.12877110848465978, (10.910999999999996, -4.727999999999998, 13.888)), ('A', ' 298 ', 'ARG', 0.0, (24.283, -17.793, 1.038)), ('A', ' 198 ', 'THR', 0.0191032796118857, (16.952, 5.770999999999999, 3.562)), ('A', ' 222 ', 'ARG', 0.028400266343169056, (-1.689, -12.532, -3.855)), ('A', ' 226 ', 'THR', 0.0027198671887163073, (3.314000000000001, -1.779, -9.624)), ('A', ' 282 ', 'LEU', 0.1202536087129088, (11.589000000000006, -13.891, 11.301)), ('A', ' 286 ', 'ILE', 0.12224451020625912, (10.277999999999997, -4.824000000000002, 13.569)), ('A', ' 198 ', 'THR', 0.057043460450504097, (17.207, 5.729, 3.373)), ('A', ' 224 ', 'THR', 0.13009139052786886, (1.2290000000000003, -7.917999999999999, -7.082)), ('A', ' 226 ', 'THR', 0.0027198671887163073, (3.107000000000001, -1.87, -9.554)), ('A', ' 264 ', 'MET', 0.00770158456463552, (7.121999999999997, -9.445, -2.123)), ('A', ' 286 ', 'ILE', 0.1769551220745049, (10.305999999999997, -4.532000000000001, 13.346)), ('A', ' 198 ', 'THR', 0.03136731339600212, (17.567, 5.724, 3.919)), ('A', ' 226 ', 'THR', 0.0028852175050593414, (3.2150000000000007, -1.6699999999999995, -9.666)), ('A', ' 286 ', 'ILE', 0.1525319145343429, (11.002999999999998, -4.23, 13.012)), ('A', ' 198 ', 'THR', 0.04115351080523946, (17.307, 5.83, 3.4799999999999995)), ('A', ' 226 ', 'THR', 0.0027198671887163073, (3.194000000000001, -1.897, -9.683)), ('A', ' 264 ', 'MET', 0.055054486169359186, (7.129, -9.388, -2.137)), ('A', ' 282 ', 'LEU', 0.021639010605601517, (11.960000000000004, -13.519, 11.082)), ('A', ' 196 ', 'THR', 0.0013599335943581536, (20.848, 9.114, 2.044)), ('A', ' 198 ', 'THR', 0.08033247447655159, (16.87, 5.902, 3.362)), ('A', ' 226 ', 'THR', 0.0027198671887163073, (3.218000000000001, -1.634, -9.729)), ('A', ' 274 ', 'ASN', 0.013144698894016798, (-0.2680000000000001, -1.9139999999999995, 9.094)), ('A', ' 286 ', 'ILE', 0.16609328081470587, (11.133999999999997, -4.5600000000000005, 13.52)), ('A', ' 198 ', 'THR', 0.1671373553266148, (16.952, 5.788, 3.87)), ('A', ' 226 ', 'THR', 0.0027198671887163073, (3.141000000000001, -1.881, -9.549)), ('A', ' 268 ', 'LEU', 0.12091972716444617, (5.896, -5.171, 2.057)), ('A', ' 286 ', 'ILE', 0.10593892689434331, (11.253, -4.452000000000001, 13.254999999999999)), ('A', ' 289 ', 'ASP', 0.11606243736219893, (17.513, -4.21, 6.607999999999999)), ('A', ' 198 ', 'THR', 0.19252898109443595, (16.577000000000005, 5.893999999999998, 3.542)), ('A', ' 222 ', 'ARG', 0.00010064879449252273, (-1.3030000000000004, -12.781, -3.4409999999999994)), ('A', ' 224 ', 'THR', 0.0027198671887163073, (1.53, -7.991, -7.442)), ('A', ' 226 ', 'THR', 0.0027198671887163073, (3.405000000000001, -1.954, -9.686)), ('A', ' 264 ', 'MET', 0.05868424087272751, (7.142999999999999, -9.311, -2.039)), ('A', ' 282 ', 'LEU', 0.13823672070857176, (12.501000000000003, -13.678, 11.388999999999998)), ('A', ' 286 ', 'ILE', 0.022528829985781467, (11.096999999999996, -4.329, 13.182)), ('A', ' 304 ', 'THR', 0.08776778903106279, (17.65, -23.578999999999997, 9.848999999999998)), ('A', ' 198 ', 'THR', 0.07075279709389719, (17.209, 5.816, 3.4839999999999995)), ('A', ' 224 ', 'THR', 0.09732948305740803, (1.4140000000000004, -8.007, -7.788)), ('A', ' 226 ', 'THR', 0.0027198671887163073, (3.087000000000001, -1.838, -9.562)), ('A', ' 268 ', 'LEU', 0.24024297476060255, (6.253000000000001, -5.1, 2.004)), ('A', ' 286 ', 'ILE', 0.0750322811754916, (11.348999999999997, -4.138, 13.366999999999999)), ('A', ' 298 ', 'ARG', 0.052399797783211424, (24.234000000000005, -17.67, 1.328)), ('A', ' 198 ', 'THR', 0.04627262782340504, (17.283, 5.751, 3.477)), ('A', ' 224 ', 'THR', 0.1494668221787166, (1.34, -8.024, -7.238)), ('A', ' 226 ', 'THR', 0.0034080732980297686, (3.172000000000001, -1.9639999999999997, -9.59)), ('A', ' 264 ', 'MET', 0.06016997939379213, (7.217, -9.356, -2.131)), ('A', ' 286 ', 'ILE', 0.10335512163628692, (10.721999999999998, -3.937, 12.870999999999999)), ('A', ' 198 ', 'THR', 0.19591657825697603, (17.463, 5.884, 3.6979999999999995)), ('A', ' 224 ', 'THR', 0.08120938310278551, (1.5310000000000001, -8.156, -7.529)), ('A', ' 226 ', 'THR', 0.0031451678995359418, (3.2150000000000007, -1.983, -9.604)), ('A', ' 286 ', 'ILE', 0.16073107312492232, (10.309999999999999, -4.608, 13.661000000000001)), ('A', ' 198 ', 'THR', 0.0020258391049817496, (17.482, 5.800999999999999, 3.676)), ('A', ' 226 ', 'THR', 0.0037594764674668962, (3.277000000000001, -1.862, -9.677))]
data['cbeta'] = [('A', ' 192 ', 'GLN', ' ', 0.29578832490282425, (17.44, 10.093999999999998, 1.305)), ('A', ' 197 ', 'ASP', ' ', 0.2744146985612083, (19.331, 9.467, 6.0)), ('A', ' 221 ', 'ASN', ' ', 0.3040147830109696, (0.05700000000000002, -10.494, -0.169)), ('A', ' 276 ', 'MET', ' ', 0.2961714658506303, (5.545, -4.988, 11.836)), ('A', ' 279 ', 'ARG', ' ', 0.25515887171867446, (2.696000000000001, -10.3, 13.404)), ('A', ' 294 ', 'PHE', ' ', 0.3548518422258711, (24.405, -11.737999999999998, -1.85)), ('A', ' 303 ', 'VAL', ' ', 0.2603447300251301, (23.404, -29.694, 5.165)), ('A', ' 189 ', 'GLN', ' ', 0.30300639825598896, (14.809000000000006, 7.241000000000001, 16.448))]
data['probe'] = [(' A 222  ARG  HD3', ' A 222  ARG  O  ', -0.653, (-2.441, -12.693, -6.387)), (' A 244  GLN  HA ', ' A 244  GLN HE21', -0.599, (13.142, -4.364, -12.404)), (' A 217  ARG  HG3', ' A 217  ARG  O  ', -0.566, (4.079, -17.122, 4.218)), (' A 271  LEU HD13', ' A 276  MET  HA ', -0.521, (3.737, -5.762, 9.873)), (' A 220  LEU HD11', ' A 259  ILE HD13', -0.481, (6.102, -14.68, -0.525)), (' A 298  ARG  HD2', ' A 298  ARG HH11', -0.445, (26.816, -16.914, 3.224)), (' A 279  ARG  HD2', ' A 279  ARG HH11', -0.433, (0.813, -10.793, 11.256)), (' A 233  VAL HG21', ' A 269  LYS  HE3', -0.428, (1.489, 1.358, -1.794))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
