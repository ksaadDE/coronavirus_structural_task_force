# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 371 ', 'SER', 0.008320858417297752, (-6.808, -29.999999999999996, -4.295)), ('A', ' 384 ', 'PRO', 0.06515502831434523, (2.546999999999998, -25.811, 3.384)), ('A', ' 386 ', 'LYS', 0.005077321101540561, (2.726, -24.591, 8.525)), ('A', ' 519 ', 'HIS', 0.019612279066779377, (8.588, -5.392999999999997, 10.761)), ('A', ' 520 ', 'ALA', 0.004348331928272249, (5.169, -3.6889999999999996, 10.948)), ('H', ' 100 ', 'GLY', 0.03607822504321979, (14.503, -17.758, -37.504))]
data['omega'] = [('H', ' 147 ', 'PRO', None, (48.21, -34.815, -39.884)), ('H', ' 149 ', 'PRO', None, (43.936, -31.467, -42.722)), ('L', '   8 ', 'PRO', None, (13.294, -40.74, -47.089)), ('L', '  96 ', 'PRO', None, (17.392, -31.649999999999977, -25.513)), ('L', ' 142 ', 'PRO', None, (25.986, -43.49499999999997, -64.016))]
data['rota'] = [('L', '  34 ', 'LEU', 0.2667274190714275, (11.083999999999998, -27.188, -36.66)), ('L', ' 163 ', 'SER', 0.05911819750923905, (38.42100000000003, -42.56699999999999, -53.738))]
data['cbeta'] = []
data['probe'] = [(' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.793, (3.848, -2.74, 9.019)), (' A 387  LEU HD21', ' A 515  PHE  CZ ', -0.756, (2.234, -19.667, 1.217)), (' A 386  LYS  O  ', ' A 390  LEU  CD2', -0.727, (2.934, -21.242, 8.869)), (' L  19 AARG  NH2', ' L  77  ASN  OD1', -0.655, (5.838, -29.08, -58.38)), (' A 440  ASN  ND2', ' A1102  HOH  O  ', -0.629, (-7.679, -30.331, -23.336)), (' A 393  THR HG23', ' A 516  GLU  HG2', -0.611, (4.755, -7.805, 4.592)), (' A 383  SER  O  ', ' A 386  LYS  HB3', -0.597, (4.159, -24.625, 5.829)), (' A 360  ASN  N  ', ' A 523  THR  OG1', -0.573, (-4.273, -7.118, 5.265)), (' A 498  GLN  NE2', ' A1107  HOH  O  ', -0.571, (1.475, -27.378, -34.526)), (' A 371  SER  C  ', ' A 373  SER  H  ', -0.548, (-6.252, -30.749, -6.877)), (' A 363  ALA  O  ', ' A 364  ASP  HB3', -0.534, (-7.903, -19.624, 4.22)), (' A 364  ASP  HA ', ' A 388  ASN  ND2', -0.525, (-4.238, -22.033, 5.958)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.511, (1.296, -12.197, -10.553)), (' A 390  LEU  N  ', ' A 390  LEU HD22', -0.511, (1.879, -19.984, 10.077)), (' H  71  ARG HH21', ' H 302  ACT  C  ', -0.508, (27.825, -10.663, -21.879)), (' L 190  HIS  ND1', ' L 402  HOH  O  ', -0.495, (54.183, -60.045, -62.952)), (' A 369  TYR  HA ', ' A 377  PHE  CE2', -0.495, (-2.033, -26.22, -3.02)), (' A 386  LYS  O  ', ' A 390  LEU HD22', -0.469, (2.588, -21.209, 9.879)), (' A 371  SER  HB3', ' A 373  SER  OG ', -0.46, (-7.002, -28.278, -6.259)), (' L  77  ASN  ND2', ' L 406  HOH  O  ', -0.456, (7.153, -27.283, -54.212)), (' H   2  VAL HG22', ' H  27  PHE  CE2', -0.453, (26.768, -12.18, -39.084)), (' H 121  VAL  O  ', ' H 209  LYS  NZ ', -0.453, (57.185, -34.062, -55.456)), (' A 386  LYS  O  ', ' A 390  LEU HD23', -0.453, (2.712, -21.115, 8.875)), (' A 334  ASN  O  ', ' A 362  VAL HG12', -0.433, (-10.134, -13.967, 6.436)), (' A 498  GLN  NE2', ' A1104  HOH  O  ', -0.424, (0.342, -25.916, -35.063)), (' A 365  TYR  CE1', ' A 387  LEU  HG ', -0.424, (0.171, -19.575, 4.132)), (' A 386  LYS  HG3', ' A 390  LEU HD21', -0.422, (4.505, -21.903, 9.335)), (' H  73  ASN HD21', ' H 302  ACT  C  ', -0.418, (29.345, -9.032, -22.387)), (' A 394  ASN  O  ', ' A 516  GLU  HB3', -0.411, (3.885, -10.464, 2.324)), (' L 186  ASP  HA ', ' L 189  LYS  HD3', -0.408, (58.567, -57.33, -57.23)), (' H 143  LYS  NZ ', ' H 171  GLN  OE1', -0.408, (50.309, -44.525, -49.6)), (' H  12  ILE HG21', ' H  82C LEU HD13', -0.405, (41.673, -31.861, -29.086)), (' L 146  LYS  HB3', ' L 198  THR  HB ', -0.403, (33.32, -52.637, -64.017))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
