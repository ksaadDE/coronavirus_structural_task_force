# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 383 ', 'SER', None, (202.087, 224.26500000000004, 176.932)), ('C', ' 982 ', 'SER', None, (201.495, 220.151, 179.462)), ('C', '1099 ', 'GLY', None, (225.39200000000005, 198.8810000000001, 273.724)), ('E', '  44 ', 'ARG', None, (219.58, 171.922, 199.633)), ('E', '1101 ', 'HIS', None, (183.473, 181.3440000000001, 274.24099999999993))]
data['rota'] = []
data['cbeta'] = [('E', '1101 ', 'HIS', ' ', 0.281343807475688, (185.634, 182.46500000000012, 275.073))]
data['probe'] = [(' C1100  THR HG21', ' L   1  NAG  O7 ', -1.002, (227.695, 202.542, 276.948)), (' C 339  GLY  O  ', ' C 343  ASN  HB2', -0.838, (241.014, 162.728, 162.176)), (' A 503  VAL  N  ', ' H  58  TYR  HH ', -0.796, (205.231, 208.142, 148.539)), (' A1028  LYS  O  ', ' A1032  CYS  HB3', -0.751, (189.648, 199.701, 240.29)), (' A 417  LYS  O  ', ' A 421  TYR  HB2', -0.66, (224.482, 207.189, 164.228)), (' C  96  GLU  OE1', ' C 190  ARG  NH2', -0.636, (248.365, 242.91, 189.462)), (' E 328  ARG  HB2', ' E 543  PHE  HA ', -0.612, (167.066, 190.735, 183.655)), (' C 136  CYS  SG ', ' C 137  ASN  N  ', -0.61, (256.604, 233.127, 169.994)), (' C  36  VAL HG11', ' C 277  LEU HD11', -0.605, (232.031, 227.783, 199.533)), (' C 769  GLY  O  ', ' C 773  GLU  HB2', -0.604, (191.961, 214.226, 219.68)), (' E 731  MET  H  ', ' E 774  GLN  HG2', -0.599, (213.602, 196.488, 221.809)), (' E  90  VAL  HB ', ' E 194  PHE  HB2', -0.596, (205.41, 159.395, 182.247)), (' E 909  ILE HD12', ' E1047  TYR  HB3', -0.592, (199.989, 191.216, 251.709)), (' E  64  TRP  HE1', ' E 264  ALA  HB1', -0.59, (202.018, 143.889, 189.451)), (' C1104  VAL HG23', ' C1115  ILE HG12', -0.59, (213.359, 199.021, 274.211)), (' C 909  ILE HD12', ' C1047  TYR  HB3', -0.588, (209.005, 208.987, 252.64)), (' C1130  ILE HD12', ' C1304  NAG  H81', -0.58, (218.461, 184.618, 265.751)), (' C 346  ARG  NH1', ' C 347  PHE  O  ', -0.579, (236.525, 160.506, 149.992)), (' C  55  PHE  HB2', ' C 273  ARG  HB2', -0.575, (234.31, 220.55, 195.781)), (' E 350  VAL HG21', ' E 422  ASN HD22', -0.574, (165.87, 203.596, 140.164)), (' E 136  CYS  SG ', ' E 137  ASN  N  ', -0.57, (202.136, 144.7, 165.218)), (' B  47  TRP  HB3', ' C 498  GLN  NE2', -0.565, (250.242, 162.652, 137.048)), (' A 112  SER  HA ', ' A 132  GLU  HB3', -0.558, (162.885, 225.57, 160.854)), (' H   5  VAL  HB ', ' H  23  ALA  HB3', -0.555, (221.204, 186.104, 150.35)), (' A 101  ILE  HA ', ' A 242  LEU  HA ', -0.555, (149.483, 228.788, 176.905)), (' A 310  LYS  HG2', ' A 664  ILE HD11', -0.552, (177.755, 223.868, 222.388)), (' E 804  GLN  NE2', ' E 935  GLN  OE1', -0.55, (216.527, 176.107, 240.556)), (' D  20  LEU HD12', ' D  80  LEU HD23', -0.549, (164.106, 191.352, 115.999)), (' A 667  GLY  HA2', ' C 864  LEU  HA ', -0.548, (191.625, 227.817, 222.415)), (' A 969  ASN  ND2', ' C 755  GLN  OE1', -0.546, (186.216, 208.544, 188.414)), (' E 742  ILE HG21', ' E 997  ILE HG13', -0.543, (212.668, 201.977, 195.0)), (' C 731  MET  SD ', ' C 955  ASN  ND2', -0.543, (204.022, 217.815, 217.859)), (' E1104  VAL HG23', ' E1115  ILE HG12', -0.542, (188.705, 190.552, 273.033)), (' C 995  ARG  NH1', ' E 994  ASP  OD2', -0.542, (207.136, 206.326, 186.74)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.541, (190.546, 206.081, 238.738)), (' A 866  THR HG22', ' A 869  MET  HE2', -0.535, (178.891, 184.224, 226.334)), (' C 366  SER  O  ', ' C 370  ASN  ND2', -0.535, (245.613, 175.827, 168.863)), (' E 629  LEU  O  ', ' E 634  ARG  NH2', -0.534, (186.308, 163.337, 196.289)), (' C 121  ASN  HA ', ' C 126  VAL HG12', -0.532, (242.254, 244.909, 180.781)), (' B  47  TRP  HB3', ' C 498  GLN HE22', -0.531, (249.649, 163.17, 136.738)), (' H  87  THR HG23', ' H 108  THR  HA ', -0.53, (229.48, 196.37, 134.279)), (' C 729  VAL HG22', ' C1059  GLY  HA2', -0.53, (202.21, 219.546, 228.936)), (' A 533  LEU HD11', ' A 585  LEU HD21', -0.528, (206.022, 245.18, 190.611)), (' E1028  LYS  NZ ', ' E1042  PHE  O  ', -0.522, (202.212, 193.759, 238.814)), (' E1129  VAL  HB ', ' E1132  ILE HD11', -0.522, (176.33, 198.967, 269.734)), (' C 974  SER  OG ', ' C 975  SER  N  ', -0.52, (208.941, 220.53, 186.786)), (' H  52  GLN  O  ', ' H  71  ARG  NH2', -0.519, (207.882, 197.15, 151.582)), (' C 172  SER  OG ', ' C 173  GLN  N  ', -0.519, (235.599, 246.165, 181.614)), (' C1081  ILE HG13', ' C1115  ILE HD13', -0.517, (213.849, 196.058, 275.138)), (' E 827  THR  O  ', ' E 949  GLN  NE2', -0.517, (212.727, 181.853, 220.168)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.517, (175.415, 225.057, 220.759)), (' C 568  ASP  O  ', ' E  44  ARG  NH2', -0.516, (217.914, 178.767, 201.746)), (' C 454  ARG  NH2', ' C 469  SER  O  ', -0.515, (228.747, 163.837, 137.945)), (' E 172  SER  OG ', ' E 173  GLN  N  ', -0.515, (223.653, 155.508, 179.065)), (' C 433  VAL HG22', ' C 512  VAL HG22', -0.515, (235.456, 176.696, 152.402)), (' C 280  ASN HD22', ' C1301  NAG  H82', -0.514, (226.281, 239.418, 207.19)), (' B  68  THR  HB ', ' B  81  GLN  HB3', -0.512, (263.865, 167.679, 126.77)), (' A 970  PHE  HA ', ' C 756  TYR  HA ', -0.51, (191.715, 207.524, 192.649)), (' C 945  LEU HD12', ' C 948  LEU HD12', -0.509, (211.052, 222.059, 229.919)), (' A 353  TRP  O  ', ' A 466  ARG  NH1', -0.506, (225.783, 221.827, 163.297)), (' A 383  SER  HB3', ' C 982  SER  HB2', -0.503, (199.494, 223.098, 177.437)), (' C 458  LYS  NZ ', ' C 471  GLU  OE2', -0.5, (224.236, 167.17, 132.917)), (' A 562  PHE  O  ', ' C  41  LYS  NZ ', -0.5, (222.598, 236.97, 187.516)), (' C 398  ASP  HB2', ' C 512  VAL  HB ', -0.5, (232.89, 172.969, 153.068)), (' E 756  TYR  OH ', ' E 994  ASP  OD1', -0.499, (208.142, 206.036, 190.644)), (' H  47  TRP  NE1', ' H  49  ALA  O  ', -0.498, (215.96, 203.005, 146.8)), (' D  87  THR HG23', ' D 108  THR  HA ', -0.496, (154.465, 197.197, 110.895)), (' C1029  MET  O  ', ' C1033  VAL  HB ', -0.493, (199.284, 216.396, 241.78)), (' E1029  MET  HE1', ' E1053  PRO  HG3', -0.493, (215.199, 193.736, 240.24)), (' H  18  LEU  O  ', ' H  81  GLN  NE2', -0.493, (216.016, 191.031, 134.873)), (' A 825  LYS  NZ ', ' A 941  THR  O  ', -0.492, (171.75, 209.452, 228.637)), (' A 965  GLN  HG3', ' A 970  PHE  HZ ', -0.492, (189.344, 204.739, 198.45)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.49, (237.744, 216.679, 207.148)), (' E 398  ASP  HB2', ' E 512  VAL  HB ', -0.489, (165.957, 201.911, 151.428)), (' E 605  SER  OG ', ' E 606  ASN  N  ', -0.489, (193.943, 162.894, 216.355)), (' A1081  ILE HG13', ' A1088  HIS  HB2', -0.489, (201.172, 218.057, 275.286)), (' E 326  ILE HD13', ' E 534  VAL HG12', -0.488, (167.42, 183.483, 188.094)), (' C 276  LEU HD23', ' C 301  CYS  HB2', -0.486, (227.89, 219.405, 203.578)), (' A 788  ILE HD11', ' E 699  LEU  HB2', -0.485, (181.155, 181.243, 235.749)), (' C 106  PHE  HB2', ' C 117  LEU  HB3', -0.484, (240.45, 232.225, 175.723)), (' A 433  VAL HG23', ' A 512  VAL HG22', -0.483, (212.341, 218.781, 165.065)), (' E 442  ASP  OD2', ' E 509  ARG  NH2', -0.482, (156.506, 193.807, 144.626)), (' E  92  PHE  HB3', ' E 192  PHE  HB2', -0.481, (208.455, 155.131, 185.74)), (' A 645  THR HG22', ' A 647  ALA  H  ', -0.479, (191.295, 234.116, 219.247)), (' C  34  ARG  NH2', ' C 217  PRO  O  ', -0.477, (245.918, 233.816, 202.044)), (' C 726  ILE HD13', ' C 945  LEU HD13', -0.476, (212.854, 219.921, 231.759)), (' C 708  SER  HB3', ' C 711  SER  HB3', -0.476, (225.759, 192.918, 261.907)), (' A 995  ARG  NH2', ' C 994  ASP  OD2', -0.476, (196.024, 208.161, 186.367)), (' E 598  ILE HG23', ' E 664  ILE HG21', -0.475, (189.456, 173.974, 219.009)), (' C 297  SER  HA ', ' C 300  LYS  HB2', -0.474, (231.608, 219.068, 209.393)), (' C 971  GLY  N  ', ' E 755  GLN  OE1', -0.474, (210.348, 211.334, 189.796)), (' C1053  PRO  O  ', ' C1054  GLN  NE2', -0.473, (204.538, 225.234, 240.37)), (' E 613  GLN  HA ', ' E 648  GLY  HA3', -0.473, (180.686, 179.409, 211.713)), (' A 393  THR HG22', ' A 522  ALA  HA ', -0.472, (214.636, 233.99, 180.387)), (' B  66  ARG  NH2', ' B  86  ASP  OD2', -0.471, (259.242, 157.326, 127.579)), (' B  39  LYS  HG3', ' B  45  ARG  HE ', -0.471, (243.445, 161.257, 128.076)), (' E 338  PHE  HA ', ' E 341  VAL HG12', -0.469, (157.381, 197.276, 157.007)), (' E 598  ILE  HB ', ' E 609  ALA  HB3', -0.469, (187.779, 170.975, 215.835)), (' C1101  HIS  HE1', ' L   1  NAG  O4 ', -0.467, (224.367, 203.181, 281.413)), (' E 627  ASP  N  ', ' E 627  ASP  OD1', -0.466, (181.749, 167.478, 194.618)), (' A 804  GLN  NE2', ' A 935  GLN  OE1', -0.466, (168.73, 201.183, 239.461)), (' E1127  ASP  N  ', ' E1127  ASP  OD1', -0.465, (173.609, 203.022, 273.649)), (' A 496  GLY  HA3', ' H  47  TRP  HB2', -0.463, (219.855, 207.293, 147.386)), (' A 393  THR  OG1', ' A 516  GLU  OE2', -0.463, (217.193, 229.799, 179.16)), (' C 654  GLU  O  ', ' C 694  ALA  N  ', -0.462, (240.643, 204.272, 224.955)), (' C 659  SER  HA ', ' C 695  TYR  HB2', -0.46, (237.415, 202.002, 231.403)), (' E 402  ILE HD11', ' E 418  ILE HD12', -0.459, (168.25, 199.223, 139.517)), (' B  34  MET  HG2', ' B  78  VAL HG21', -0.458, (252.842, 175.979, 128.352)), (' C 316  SER  OG ', ' C 317  ASN  N  ', -0.458, (228.578, 205.43, 204.112)), (' A 899  ALA  HB1', ' A 917  TYR  HE1', -0.458, (178.863, 197.898, 261.447)), (' E 761  THR HG22', ' E 765  ARG HH12', -0.457, (216.757, 212.834, 208.256)), (' A  56  LEU HD12', ' A  57  PRO  HD2', -0.457, (167.827, 228.081, 191.468)), (' A 816  SER  OG ', ' A 817  PHE  N  ', -0.457, (170.306, 196.058, 237.561)), (' D  29  VAL  O  ', ' D  71  ARG  NH1', -0.457, (175.768, 187.061, 125.789)), (' E 346  ARG  NH1', ' E 347  PHE  O  ', -0.455, (155.171, 201.823, 144.162)), (' C 726  ILE  HB ', ' C 947  LYS  HD2', -0.455, (211.522, 215.805, 231.707)), (' A 452  LEU HD12', ' A 494  SER  HB3', -0.454, (227.29, 211.191, 151.633)), (' A1081  ILE HG21', ' A1135  ASN HD22', -0.452, (196.778, 221.307, 275.242)), (' C 788  ILE HG23', ' C 876  ALA  HB2', -0.452, (193.738, 228.914, 241.025)), (' C 389  ASP  N  ', ' C 389  ASP  OD1', -0.451, (235.547, 183.201, 170.431)), (' C1031  GLU  OE2', ' C1039  ARG  NH1', -0.451, (200.199, 206.082, 241.779)), (' A 985  ASP  N  ', ' A 985  ASP  OD1', -0.45, (191.254, 197.825, 176.124)), (' A 825  LYS  HE2', ' A 944  ALA  HB3', -0.45, (174.38, 208.186, 229.746)), (' C 827  THR  O  ', ' C 949  GLN  NE2', -0.448, (213.951, 225.247, 221.722)), (' A 189  LEU HD23', ' A 208  THR HG21', -0.448, (152.431, 224.035, 194.396)), (' B  29  VAL  O  ', ' B  71  ARG  NH1', -0.447, (254.45, 180.423, 131.765)), (' C 778  THR  HA ', ' C 781  VAL HG12', -0.446, (197.26, 218.97, 230.468)), (' A 566  GLY  HA2', ' C  43  PHE  H  ', -0.446, (216.766, 234.405, 195.623)), (' E 344  ALA  HB3', ' E 347  PHE  HE1', -0.446, (153.469, 196.704, 150.833)), (' A 341  VAL HG22', ' A 356  LYS  HD3', -0.445, (217.668, 230.178, 162.165)), (' E 332  ILE HG22', ' E 362  VAL HG21', -0.444, (160.027, 194.364, 170.408)), (' E 319  ARG  O  ', ' E 321  GLN  NE2', -0.444, (182.589, 179.921, 195.386)), (' E 966  LEU HD23', ' E1000  ARG  HD2', -0.443, (213.178, 194.459, 197.571)), (' A 880  GLY  O  ', ' A 884  SER  OG ', -0.443, (183.814, 188.746, 248.804)), (' C1128  VAL HG23', ' C1129  VAL HG23', -0.443, (208.904, 183.176, 271.653)), (' A 398  ASP  HB2', ' A 512  VAL  HB ', -0.441, (216.352, 221.522, 165.523)), (' D  20  LEU  HB2', ' D  80  LEU  HB3', -0.441, (166.047, 190.367, 115.322)), (' D  66  ARG  NH2', ' D  86  ASP  OD2', -0.44, (153.671, 188.411, 115.437)), (' D  47  TRP  HE1', ' D  50  ALA  HB2', -0.439, (164.794, 190.366, 126.686)), (' C 769  GLY  O  ', ' C 773  GLU  CB ', -0.439, (192.275, 214.701, 219.816)), (' E 574  ASP  HA ', ' E 587  ILE  HB ', -0.439, (170.297, 193.918, 196.798)), (' A 642  VAL HG22', ' A 651  ILE HG12', -0.439, (182.572, 240.042, 211.83)), (' H  34  MET  N  ', ' H  34  MET  SD ', -0.439, (212.308, 197.475, 152.675)), (' A 611  LEU HD22', ' A 666  ILE HG23', -0.439, (187.225, 230.173, 217.446)), (' A 452  LEU  HA ', ' A 494  SER  HA ', -0.438, (225.101, 210.915, 153.245)), (' C 902  MET  HE1', ' C1049  LEU HD13', -0.437, (208.466, 216.625, 254.006)), (' E 788  ILE HG23', ' E 876  ALA  HB2', -0.437, (225.242, 195.601, 241.514)), (' C1102  TRP  HB2', ' C1135  ASN HD22', -0.436, (217.295, 196.81, 277.543)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.436, (173.072, 228.552, 204.349)), (' C 317  ASN  HA ', ' C 594  GLY  HA2', -0.435, (227.825, 201.998, 206.591)), (' B  39  LYS  HB2', ' B  91  TYR  HE2', -0.435, (244.689, 160.807, 125.782)), (' D  34  MET  HG2', ' D  78  VAL HG21', -0.435, (172.579, 190.108, 121.728)), (' E 327  VAL  HB ', ' E 531  THR HG23', -0.434, (167.51, 184.344, 179.584)), (' A 106  PHE  HB3', ' A 235  ILE HD13', -0.434, (165.766, 223.062, 173.518)), (' C 879  ALA  HA ', ' C 882  ILE HG22', -0.434, (198.859, 227.589, 247.98)), (' C 970  PHE  HB2', ' C 996  LEU HD23', -0.433, (206.045, 213.951, 191.113)), (' E1080  ALA  HB3', ' E1132  ILE HG13', -0.433, (178.346, 196.91, 270.39)), (' E  36  VAL HG12', ' E 285  ILE HD13', -0.433, (209.705, 164.71, 197.917)), (' A 329  PHE  O  ', ' A 580  GLN  NE2', -0.433, (207.233, 244.757, 180.185)), (' E 222  ALA  HB2', ' E 285  ILE  HB ', -0.432, (213.183, 162.882, 199.113)), (' H  84  PRO  HA ', ' H 109  VAL  HB ', -0.432, (226.454, 198.182, 130.862)), (' C 357  ARG  NH2', ' C 523  THR  OG1', -0.431, (224.942, 172.274, 165.343)), (' H  66  ARG  NH2', ' H  86  ASP  OD2', -0.431, (220.626, 200.024, 132.623)), (' E 462  LYS  HD2', ' E 463  PRO  HD2', -0.431, (177.449, 210.795, 147.649)), (' E 715  PRO  HA ', ' E1072  GLU  HA ', -0.431, (191.431, 180.757, 258.158)), (' E 126  VAL HG13', ' E 174  PRO  HB3', -0.43, (220.844, 150.291, 179.594)), (' E 972  ALA  HA ', ' E 995  ARG HH21', -0.43, (205.45, 196.867, 184.686)), (' A 355  ARG  HD3', ' A 396  TYR  HD1', -0.43, (221.967, 225.824, 170.952)), (' E 320  VAL HG22', ' E 623  ALA  HA ', -0.429, (179.008, 177.24, 198.887)), (' C 746  SER  HB3', ' C 749  CYS  HB2', -0.429, (195.229, 220.829, 190.523)), (' C1039  ARG  NE ', ' E1031  GLU  OE2', -0.429, (202.751, 203.151, 242.176)), (' C 430  THR  OG1', ' C 515  PHE  O  ', -0.427, (227.616, 182.171, 157.356)), (' E 411  ALA  HB3', ' E 414  GLN  HB3', -0.427, (179.717, 197.37, 145.358)), (' A 193  VAL HG12', ' A 223  LEU HD22', -0.427, (161.222, 219.474, 188.736)), (' E 327  VAL  HA ', ' E 542  ASN  HB2', -0.427, (170.102, 187.589, 182.167)), (' D  56  GLU  OE1', ' D  58  TYR  OH ', -0.426, (166.09, 180.891, 133.135)), (' E1091  ARG  NE ', ' E1118  ASP  O  ', -0.425, (194.688, 199.652, 273.143)), (' C 405  ASP  N  ', ' C 405  ASP  OD1', -0.424, (245.06, 174.406, 141.797)), (' E 159  VAL HG13', ' E 160  TYR  HD1', -0.424, (211.124, 147.729, 167.516)), (' A 393  THR HG21', ' A 520  ALA  HB3', -0.424, (216.873, 231.473, 182.142)), (' C 715  PRO  HD3', ' E 894  LEU HD13', -0.423, (218.657, 204.141, 258.134)), (' E 355  ARG  HA ', ' E 355  ARG  HD3', -0.423, (164.13, 207.06, 154.487)), (' C 353  TRP  HZ3', ' C 355  ARG  HE ', -0.423, (227.191, 171.211, 151.8)), (' C 969  ASN  HB2', ' E 755  GLN  HB2', -0.423, (212.226, 214.103, 190.249)), (' A 204  TYR  HB3', ' A 223  LEU  HB3', -0.422, (160.759, 216.829, 189.051)), (' E 826  VAL  HB ', ' E1057  PRO  HG2', -0.421, (214.953, 183.872, 225.686)), (' E 391  CYS  HB3', ' E 525  CYS  HB3', -0.421, (168.2, 196.962, 168.892)), (' C 215  ASP  N  ', ' C 215  ASP  OD1', -0.42, (253.426, 234.2, 202.474)), (' C 742  ILE HG23', ' C1000  ARG  HD2', -0.42, (199.955, 217.019, 195.665)), (' A 804  GLN HE22', ' A 817  PHE  HD2', -0.42, (167.644, 200.193, 238.565)), (' C  84  LEU HD13', ' C 267  VAL HG11', -0.42, (249.093, 227.733, 186.004)), (' A 215  ASP  N  ', ' A 215  ASP  OD1', -0.419, (151.901, 233.76, 197.094)), (' A  93  ALA  HB3', ' A 266  TYR  HB2', -0.417, (157.432, 229.324, 189.089)), (' E 215  ASP  N  ', ' E 215  ASP  OD1', -0.417, (201.809, 144.176, 197.578)), (' C1086  LYS  HD2', ' C1125  ASN  HA ', -0.416, (206.635, 184.791, 277.902)), (' A 311  GLY  HA2', ' A 664  ILE HD12', -0.415, (180.103, 223.391, 221.234)), (' E  91  TYR  HB2', ' E 270  LEU HD21', -0.414, (203.345, 160.518, 188.995)), (' C 312  ILE HD12', ' C 598  ILE HG13', -0.414, (230.807, 207.07, 218.424)), (' A 699  LEU  HB2', ' C 788  ILE HD11', -0.412, (188.963, 229.244, 238.094)), (' E 458  LYS  HE3', ' E 474  GLN  H  ', -0.412, (170.008, 216.143, 130.638)), (' H  37  TYR  HD2', ' H  45  ARG  HG2', -0.412, (224.719, 203.873, 147.71)), (' E 347  PHE  N  ', ' E 451  TYR  OH ', -0.411, (155.384, 199.102, 145.372)), (' E  39  PRO  HG3', ' E  51  THR HG21', -0.411, (209.671, 171.559, 195.592)), (' A 869  MET  HA ', ' A 872  GLN  HB2', -0.41, (178.654, 185.534, 233.152)), (' C  37  TYR  HA ', ' C 223  LEU  H  ', -0.409, (233.563, 232.781, 195.961)), (' E 619  GLU  O  ', ' E 623  ALA  N  ', -0.408, (177.914, 174.366, 200.77)), (' C 869  MET  HB2', ' C 869  MET  HE2', -0.408, (194.42, 231.77, 230.504)), (' A 392  PHE  O  ', ' A 523  THR  N  ', -0.407, (213.815, 235.395, 177.905)), (' C 995  ARG HH22', ' E 991  VAL HG22', -0.407, (206.201, 205.765, 183.424)), (' H  40  ALA  HB3', ' H  43  LYS  HB2', -0.406, (229.86, 205.098, 139.803)), (' C 740  MET  HG3', ' C 857  GLY  HA3', -0.406, (197.183, 224.697, 202.429)), (' C1101  HIS  CE1', ' L   1  NAG  O4 ', -0.405, (223.909, 203.409, 281.423)), (' E 811  LYS  HA ', ' E 811  LYS  HD3', -0.405, (229.529, 177.545, 234.899)), (' A 882  ILE  HA ', ' A 898  PHE  HE2', -0.405, (179.822, 193.971, 249.83)), (' C 611  LEU HD13', ' C 666  ILE HD11', -0.404, (231.305, 202.426, 217.281)), (' C 130  VAL HG12', ' C 168  PHE  HB3', -0.404, (233.755, 236.282, 170.752)), (' C  65  PHE  HB2', ' C 265  TYR  CZ ', -0.404, (254.468, 232.116, 187.171)), (' C 899  ALA  HB1', ' C 917  TYR  HE1', -0.403, (204.796, 222.408, 262.736)), (' A 382  VAL  O  ', ' C 983  ARG  NE ', -0.403, (205.1, 224.615, 175.26)), (' C 330  PRO  HG3', ' C 544  ASN HD22', -0.403, (230.026, 173.542, 184.518)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.403, (178.898, 204.764, 245.923)), (' E 616  ASN  OD1', ' E 618  THR  OG1', -0.402, (171.26, 175.394, 205.845)), (' C 415  THR  OG1', ' C 416  GLY  N  ', -0.401, (234.749, 182.276, 137.785)), (' C 767  LEU HD12', ' C 770  ILE HD11', -0.401, (197.277, 215.975, 213.604)), (' C 974  SER  HB3', ' C 980  ILE HG13', -0.4, (206.807, 219.187, 184.792)), (' A1097  SER  HB2', ' A1102  TRP  CD2', -0.4, (192.515, 224.218, 272.69))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
