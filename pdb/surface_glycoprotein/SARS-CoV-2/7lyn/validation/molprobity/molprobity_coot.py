# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 112 ', 'SER', 0.040064266639989216, (200.25499999999994, 145.26599999999993, 108.51299999999999)), ('A', ' 360 ', 'ASN', 0.044905704200273004, (154.67699999999994, 124.987, 120.58199999999998)), ('B', ' 571 ', 'ASP', 0.034403504852797834, (140.03, 175.947, 150.08)), ('B', ' 744 ', 'GLY', 0.010712134041800816, (169.62499999999994, 142.589, 144.51299999999998)), ('C', ' 112 ', 'SER', 0.0008257733282100701, (143.08999999999995, 202.761, 112.21599999999998))]
data['omega'] = []
data['rota'] = [('A', ' 331 ', 'ASN', 0.01697561853180586, (162.646, 120.695, 123.971)), ('A', ' 332 ', 'ILE', 0.033686504142029165, (161.32799999999995, 122.265, 120.71399999999998)), ('A', ' 650 ', 'LEU', 0.006052364303948717, (186.30699999999993, 135.537, 163.49499999999998)), ('A', ' 651 ', 'ILE', 0.018676804819199117, (189.064, 135.37399999999994, 160.81099999999998)), ('A', ' 709 ', 'ASN', 0.06264625090954329, (170.88899999999995, 134.317, 210.251)), ('A', ' 801 ', 'ASN', 0.0, (187.55399999999995, 174.35399999999996, 199.949)), ('B', ' 115 ', 'GLN', 0.11247965274548037, (131.21, 127.327, 116.355)), ('B', ' 281 ', 'GLU', 0.0, (153.07, 121.616, 153.819)), ('C', ' 328 ', 'ARG', 0.17160738820086274, (185.196, 186.669, 131.336)), ('C', ' 362 ', 'VAL', 0.04093389568424404, (185.66999999999993, 182.059, 118.76999999999998)), ('C', ' 618 ', 'THR', 0.1454683264400466, (178.05, 197.278, 156.207)), ('C', ' 804 ', 'GLN', 0.0, (135.534, 175.924, 193.825)), ('C', ' 810 ', 'SER', 0.0, (124.22500000000004, 172.68999999999994, 188.32299999999998)), ('C', ' 814 ', 'LYS', 0.0, (129.58299999999994, 167.33599999999996, 186.773)), ('C', ' 907 ', 'ASN', 0.07026919917405573, (154.842, 166.574, 210.152))]
data['cbeta'] = [('A', ' 336 ', 'CYS', ' ', 0.2906443451622013, (157.255, 130.098, 114.98999999999997)), ('A', ' 487 ', 'ASN', ' ', 0.258919577535329, (120.14399999999998, 161.293, 111.294)), ('C', ' 198 ', 'ASP', ' ', 0.3418520210711648, (144.48899999999995, 184.18499999999995, 130.00799999999998)), ('C', ' 336 ', 'CYS', ' ', 0.3469779859853319, (185.414, 178.442, 114.55499999999999)), ('C', ' 487 ', 'ASN', ' ', 0.2772507679282999, (180.55999999999995, 131.659, 104.142)), ('C', ' 516 ', 'GLU', ' ', 0.26610306107199994, (186.09599999999995, 167.803, 124.86899999999997)), ('C', ' 617 ', 'CYS', ' ', 0.3847681737675546, (175.48599999999993, 197.65699999999995, 160.378))]
data['probe'] = [(' C 599  THR HG22', ' C 601  GLY  H  ', -0.702, (153.765, 194.682, 168.31)), (' A 362  VAL HG12', ' A 525  CYS  HB2', -0.649, (162.084, 128.048, 120.844)), (' A 617  CYS  HA ', ' A 620  VAL HG23', -0.61, (183.138, 130.686, 157.281)), (' B1103  PHE  HZ ', ' B1312  NAG  H61', -0.558, (141.76, 150.302, 227.188)), (' C 813  SER  HB3', ' C 815  ARG  HG3', -0.542, (131.557, 168.713, 183.165)), (' C1081  ILE HD12', ' C1135  ASN  HB3', -0.536, (174.65, 174.572, 226.336)), (' C 362  VAL HG12', ' C 525  CYS  HB2', -0.501, (185.298, 182.609, 121.509)), (' B1082  CYS  HG ', ' B1126  CYS  HB3', -0.493, (142.694, 171.679, 226.606)), (' A 332  ILE  HB ', ' A 362  VAL HG13', -0.475, (161.158, 125.419, 120.229)), (' B1032  CYS  HG ', ' B1043  CYS  HG ', -0.474, (160.001, 151.245, 192.509)), (' A 611  LEU  HA ', ' A 649  CYS  O  ', -0.467, (184.175, 136.843, 161.364)), (' C 804  GLN  H  ', ' C 804  GLN  HG2', -0.466, (136.61, 176.235, 196.194)), (' C 599  THR HG22', ' C 601  GLY  N  ', -0.462, (153.931, 194.23, 168.589)), (' A 801  ASN  ND2', ' A 803  SER  OG ', -0.45, (190.25, 175.66, 197.094)), (' B  31  SER  HB3', ' B  62  VAL HG13', -0.43, (126.144, 126.342, 145.509)), (' C 394  ASN  H  ', ' C 516  GLU  HG3', -0.423, (187.267, 170.678, 123.91)), (' B1101  HIS  ND1', ' B1312  NAG  H5 ', -0.421, (138.739, 151.242, 228.718)), (' A 877  LEU HD13', ' A1029  MET  SD ', -0.417, (171.652, 174.648, 188.383)), (' B 877  LEU HD13', ' B1029  MET  SD ', -0.407, (168.695, 144.523, 188.153)), (' B 332  ILE HD11', ' B 362  VAL HG21', -0.406, (122.839, 178.274, 123.612)), (' A 331  ASN  N  ', ' A 331  ASN  OD1', -0.406, (162.274, 121.198, 125.745)), (' C1082  CYS  CB ', ' C1126  CYS  HG ', -0.406, (181.23, 171.343, 226.463)), (' A 617  CYS  SG ', ' A 644  GLN  OE1', -0.405, (181.974, 129.403, 161.766)), (' C 335  LEU  HG ', ' C 336  CYS  N  ', -0.404, (185.174, 181.251, 112.851)), (' A1103  PHE  HZ ', ' A1310  NAG  H62', -0.403, (181.471, 146.916, 225.314)), (' C 814  LYS  HA ', ' C 814  LYS  HD3', -0.401, (128.517, 168.392, 187.696))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
