# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 161 ', 'PRO', None, (-16.660789999999995, 1.9421300000000004, -12.63442)), ('A', ' 163 ', 'PRO', None, (-13.461819999999998, -1.2308400000000002, -8.420020000000005)), ('B', '   8 ', 'PRO', None, (16.11939, 10.573869999999998, 1.9719800000000003)), ('B', '  95 ', 'PRO', None, (-3.205279999999998, 24.624, 7.28116)), ('B', ' 141 ', 'PRO', None, (16.996589999999994, -3.08297, -9.698330000000004)), ('C', ' 157 ', 'PRO', None, (-3.6563300000000027, -26.292869999999986, 36.90606000000001)), ('C', ' 159 ', 'PRO', None, (-5.683, -26.61091, 42.74564)), ('D', '   8 ', 'PRO', None, (-19.791759999999996, -2.9954999999999976, 59.49936000000003)), ('D', '  96 ', 'PRO', None, (-34.1791, -9.1736, 41.41113)), ('D', ' 142 ', 'PRO', None, (-1.7499200000000008, -5.13703, 63.216900000000024)), ('E', ' 161 ', 'PRO', None, (-30.030229999999992, -1.7000299999999997, -12.64693)), ('E', ' 163 ', 'PRO', None, (-33.195479999999975, 1.59427, -8.504200000000006)), ('F', '   8 ', 'PRO', None, (-62.898119999999956, -10.38429, 1.96968)), ('F', '  95 ', 'PRO', None, (-43.44243, -24.31333, 7.330680000000002)), ('F', ' 141 ', 'PRO', None, (-63.64456999999999, 3.0825999999999985, -9.871190000000007)), ('H', ' 157 ', 'PRO', None, (-42.84787, 26.766590000000015, 36.837600000000016)), ('H', ' 159 ', 'PRO', None, (-40.88342999999999, 27.11645, 42.70665)), ('L', '   8 ', 'PRO', None, (-26.845379999999995, 3.559210000000002, 59.47802000000001)), ('L', '  96 ', 'PRO', None, (-12.393309999999998, 9.67577, 41.38098)), ('L', ' 142 ', 'PRO', None, (-44.72820999999998, 5.809479999999996, 63.33045))]
data['rota'] = [('R', ' 389 ', 'ASP', 0.0008376790831182657, (27.670549999999977, 56.85135, 27.076590000000014)), ('H', ' 199 ', 'LEU', 0.12042957334876975, (-65.72697, 26.841790000000007, 61.86909000000001)), ('L', '  61 ', 'ASP', 0.22864365393318026, (-17.28199, 19.17719, 70.61301)), ('L', ' 214 ', 'GLU', 0.0, (-74.45377999999994, 14.696019999999994, 49.57032000000003)), ('A', '  12 ', 'VAL', 0.21018296676729556, (-20.693869999999997, 11.10129, -7.926280000000001)), ('A', ' 123 ', 'VAL', 0.05550658475798603, (-15.255169999999996, 8.807010000000002, -3.310270000000001)), ('X', ' 346 ', 'ARG', 0.13733263591390046, (-61.09857, -28.85692, 21.03406)), ('X', ' 387 ', 'LEU', 0.0, (-69.18614, -54.26428, 27.61278)), ('X', ' 391 ', 'CYS', 0.04886998623204709, (-76.75059999999995, -52.1434, 31.08444)), ('X', ' 392 ', 'PHE', 0.1893602115292344, (-76.36999, -49.11228, 33.33837000000001)), ('C', ' 199 ', 'LEU', 0.1876991173321092, (19.104150000000004, -26.113809999999994, 61.8473)), ('D', ' 144 ', 'GLU', 0.019629374535873195, (-1.7716900000000013, -3.50245, 57.126980000000025)), ('D', ' 214 ', 'GLU', 0.004591359617753509, (28.164669999999987, -14.081750000000007, 49.49323000000002)), ('E', '  53 ', 'GLN', 0.1554919858231229, (-32.316179999999996, -18.38353, 20.89640000000001)), ('E', ' 123 ', 'VAL', 0.07059006362734002, (-31.411679999999997, -8.434759999999999, -3.275310000000002)), ('F', '  54 ', 'LEU', 0.24919253229882843, (-53.71604, -6.74639, 20.71082)), ('F', ' 132 ', 'VAL', 0.2884552437479667, (-46.85675999999999, 3.05562, -27.802870000000013))]
data['cbeta'] = []
data['probe'] = [(' C  38  ARG  HB3', ' C  48  ILE HD11', -0.746, (-21.658, -17.264, 39.609)), (' F  91  ALA  O  ', ' X 444  LYS  NZ ', -0.67, (-48.335, -21.596, 16.197)), (' B  91  ALA  O  ', ' R 444  LYS  NZ ', -0.667, (1.485, 21.5, 16.014)), (' E  83  MET  HB3', ' E  86  LEU HD21', -0.662, (-28.949, -16.329, -1.286)), (' E 407   CL CL  ', ' F 437  HOH  O  ', -0.662, (-50.318, 8.632, -6.329)), (' L  38  GLN  HB2', ' L  48  LEU HD11', -0.659, (-22.967, 17.128, 60.182)), (' E  55  GLY  HA3', ' E 403  GOL  H11', -0.654, (-27.172, -20.226, 16.571)), (' B  21  ILE HD12', ' B 102  THR HG21', -0.65, (14.382, 7.618, 3.995)), (' F  21  ILE HD12', ' F 102  THR HG21', -0.645, (-60.914, -7.486, 4.132)), (' L 211  ASN  ND2', ' L 402  HOH  O  ', -0.643, (-74.142, 7.822, 52.127)), (' H  30  THR HG23', ' H  31  THR HG23', -0.637, (-3.976, 31.439, 44.61)), (' C  30  THR HG23', ' C  31  THR HG23', -0.63, (-43.31, -30.777, 44.91)), (' E 404  BTB  O6 ', ' E 501  HOH  O  ', -0.63, (-37.115, 6.487, -6.652)), (' A  83  MET  HB3', ' A  86  LEU HD21', -0.628, (-17.792, 16.143, -1.509)), (' C 129  PRO  HB3', ' C 155  TYR  HB3', -0.622, (3.279, -25.933, 39.928)), (' H  38  ARG  HB3', ' H  48  ILE HD11', -0.61, (-24.841, 17.739, 39.678)), (' L  61  ASP  N  ', ' L  61  ASP  OD1', -0.597, (-18.348, 20.515, 71.154)), (' D 109  ARG  NH1', ' D 110  THR  O  ', -0.576, (-0.217, -7.933, 68.59)), (' R 389  ASP  N  ', ' R 389  ASP  OD1', -0.575, (26.518, 56.842, 25.432)), (' X 393  THR  OG1', ' X 516  GLU  O  ', -0.571, (-77.154, -45.304, 36.356)), (' C  28  THR HG22', ' C  30  THR HG22', -0.569, (-40.875, -33.119, 45.789)), (' H 129  PRO  HB3', ' H 155  TYR  HB3', -0.564, (-50.147, 26.301, 40.214)), (' A  55  GLY  HA3', ' A 301  GOL  H32', -0.562, (-19.303, 21.181, 16.714)), (' A 133  PRO  HB3', ' A 159  TYR  HB3', -0.553, (-13.699, -2.822, -17.614)), (' X 472  ILE HD13', ' X 482  GLY  HA2', -0.552, (-52.359, -13.345, 44.863)), (' R 350  VAL HG22', ' R 422  ASN  HB3', -0.55, (9.558, 32.632, 35.669)), (' A 108  ASN  ND2', ' A 304  PO4  O1 ', -0.549, (-7.803, 18.311, 28.923)), (' L 143  ARG  NH1', ' L 407  HOH  O  ', -0.549, (-40.174, 12.171, 54.625)), (' L 109  ARG  NH1', ' L 110  THR  O  ', -0.542, (-46.053, 8.848, 68.577)), (' D  40  LYS  NZ ', ' D  82  GLU  O  ', -0.536, (-16.673, -19.76, 62.774)), (' D  38  GLN  HB2', ' D  48  LEU HD11', -0.536, (-23.512, -16.726, 60.378)), (' R 472  ILE HD13', ' R 482  GLY  HA2', -0.535, (5.327, 14.14, 44.599)), (' E 133  PRO  HB3', ' E 159  TYR  HB3', -0.525, (-33.33, 3.342, -18.007)), (' X 395  VAL HG22', ' X 515  PHE  HD1', -0.518, (-72.224, -46.08, 30.982)), (' E  53  GLN  NE2', ' E 405  PO4  O3 ', -0.517, (-36.446, -20.611, 21.242)), (' H 196  SER  HA ', ' H 199  LEU HD23', -0.513, (-64.357, 22.683, 63.435)), (' E 157  LYS  NZ ', ' E 185  GLN  OE1', -0.508, (-38.895, -2.403, -23.001)), (' F  48  ILE HG12', ' F  54  LEU HD12', -0.506, (-55.273, -6.548, 18.021)), (' D  33  TYR  CE2', ' D1201  TRS  H21', -0.505, (-41.917, -12.142, 50.528)), (' A 141  SER  HB3', ' A 144  SER  HB3', -0.504, (7.412, -14.994, -27.872)), (' L  67  GLY  HA3', ' L  72  PHE  HA ', -0.504, (-13.609, 5.003, 60.459)), (' C  44  ARG  NH1', ' C  45  LEU  O  ', -0.503, (-23.122, -10.194, 45.712)), (' L 186  ASP  HA ', ' L 189  LYS  HD3', -0.497, (-66.718, 7.681, 34.382)), (' D 121  PRO  HG3', ' D 131  ALA  HB1', -0.492, (17.334, -14.665, 41.794)), (' F 193  ALA  HB2', ' F 208  SER  HB3', -0.492, (-56.855, 3.889, -32.239)), (' E  91  THR HG23', ' E 124  THR  HA ', -0.492, (-33.946, -9.104, -7.171)), (' C 169  LEU HD21', ' C 192  VAL HG21', -0.491, (8.478, -25.999, 60.261)), (' C  50  TRP  CD1', ' C  59  ASN  HB2', -0.487, (-35.352, -15.981, 39.672)), (' J   1  NAG  H82', ' X 342  PHE  HB2', -0.485, (-65.182, -40.701, 18.974)), (' R 418  ILE  HA ', ' R 422  ASN HD22', -0.482, (6.392, 34.007, 37.53)), (' R 461  LEU HD22', ' R 465  GLU  HB3', -0.478, (14.986, 32.728, 43.059)), (' D 106  GLU  HG2', ' D 107  ILE  N  ', -0.471, (-9.647, -10.375, 63.856)), (' R 406  GLU  HB3', ' R 418  ILE HG13', -0.471, (4.802, 36.831, 34.059)), (' F 105  GLU  HG2', ' F 106  ILE  N  ', -0.467, (-60.013, 3.001, -1.395)), (' L  15  PRO  HD3', ' L 107  ILE HG23', -0.467, (-36.045, 13.019, 69.896)), (' A 112  ASN  OD1', ' R 444  LYS  HE2', -0.467, (0.807, 20.155, 19.267)), (' R 379  CYS  HA ', ' R 432  CYS  HA ', -0.465, (16.072, 48.903, 31.457)), (' H 169  LEU HD21', ' H 192  VAL HG21', -0.465, (-55.398, 27.059, 60.209)), (' X 461  LEU HD22', ' X 465  GLU  HB3', -0.464, (-61.16, -32.056, 43.322)), (' C 146  ALA  HB3', ' C 199  LEU HD21', -0.464, (16.578, -21.526, 61.546)), (' A  16  ARG HH12', ' E 213  ASN HD21', -0.463, (-28.236, 11.522, -9.505)), (' R 395  VAL HG22', ' R 515  PHE  HD1', -0.463, (25.965, 46.282, 30.767)), (' C 196  SER  HA ', ' C 199  LEU HD23', -0.462, (18.087, -22.18, 63.113)), (' L 211  ASN  HB3', ' L 214  GLU  HG3', -0.462, (-74.109, 10.874, 48.993)), (' C 164  TRP  CH2', ' C 206  CYS  HB3', -0.462, (9.135, -27.266, 52.515)), (' E 209  ILE HG12', ' E 224  LYS  HG2', -0.458, (-37.295, 21.253, -21.348)), (' E  22  CYS  HB3', ' E  79  LEU  HB3', -0.457, (-30.224, -10.352, 11.625)), (' H  35  GLN  N  ', ' H 608  HOH  O  ', -0.457, (-13.739, 21.632, 44.172)), (' B 120  PRO  HG3', ' B 130  ALA  HB1', -0.455, (-2.934, -3.075, -32.144)), (' D 121  PRO  HB3', ' D 132  SER  H  ', -0.455, (14.837, -16.205, 42.216)), (' F  47  LEU  HA ', ' F  58  VAL HG21', -0.455, (-51.595, -4.264, 16.406)), (' X 350  VAL  HA ', ' X 400  PHE  HB2', -0.454, (-58.01, -32.318, 31.698)), (' E 112  ASN  OD1', ' X 444  LYS  HE2', -0.454, (-47.76, -19.884, 19.357)), (' X 354  ASN  OD1', ' X 802  GOL  O2 ', -0.453, (-67.849, -29.545, 30.728)), (' H  60  TYR  HE1', ' H  70  ILE HG13', -0.453, (-16.73, 19.78, 35.004)), (' B 105  GLU  HG2', ' B 106  ILE  N  ', -0.453, (13.39, -2.775, -0.912)), (' H  50  TRP  CD1', ' H  59  ASN  HB2', -0.452, (-11.149, 16.411, 39.652)), (' R 350  VAL  HA ', ' R 400  PHE  HB2', -0.452, (11.556, 32.711, 31.148)), (' D  15  PRO  HD3', ' D 107  ILE HG23', -0.45, (-10.303, -12.023, 69.892)), (' X 350  VAL HG22', ' X 422  ASN  HB3', -0.442, (-56.223, -32.769, 35.557)), (' X 379  CYS  HA ', ' X 432  CYS  HA ', -0.442, (-62.567, -48.667, 31.824)), (' E  72  ARG  HG2', ' E 403  GOL  H12', -0.442, (-26.963, -18.269, 16.233)), (' A 157  LYS  NZ ', ' A 185  GLN  OE1', -0.441, (-7.761, 1.911, -23.31)), (' H 164  TRP  CH2', ' H 206  CYS  HB3', -0.441, (-55.689, 27.665, 52.977)), (' L 109  ARG  HG2', ' L 110  THR  N  ', -0.441, (-43.565, 9.183, 70.091)), (' L  49  ILE HD13', ' L  55  GLY  HA2', -0.44, (-15.14, 17.398, 63.311)), (' B 120  PRO  HD3', ' B 132  VAL HG22', -0.44, (-0.458, -3.574, -30.626)), (' L 121  PRO  HB3', ' L 132  SER  H  ', -0.439, (-61.413, 16.595, 42.264)), (' R 351  TYR  OH ', ' R 452  ARG  NH2', -0.438, (10.623, 22.121, 33.257)), (' L  33  TYR  CE2', ' L 301  TRS  H31', -0.438, (-4.022, 12.063, 50.241)), (' R 436  TRP  CD1', ' R 801  GOL  H11', -0.437, (10.88, 40.397, 18.657)), (' D1201  TRS  O1 ', ' X 484  GLU  O  ', -0.436, (-43.145, -12.016, 44.528)), (' D 109  ARG  HG2', ' D 110  THR  N  ', -0.436, (-3.128, -8.022, 70.202)), (' D 194  ALA  HB2', ' D 209  SER  HB3', -0.436, (18.681, -5.123, 51.53)), (' D  67  GLY  HA3', ' D  72  PHE  HA ', -0.435, (-33.307, -4.845, 60.731)), (' E  97  ALA  HB1', ' E 114  MET  HB3', -0.435, (-41.119, -10.598, 12.487)), (' A  34  LEU  HB3', ' A  79  LEU HD22', -0.435, (-13.585, 13.271, 13.125)), (' A  97  ALA  HB1', ' A 114  MET  HB3', -0.435, (-5.598, 10.898, 12.561)), (' C   2  VAL  HA ', ' C  26  GLY  HA3', -0.434, (-32.016, -34.627, 52.304)), (' L  39  GLN  O  ', ' L  85  ALA  HB1', -0.434, (-29.744, 17.45, 57.957)), (' D  24  ARG  CZ ', ' L   9  GLY  HA2', -0.433, (-29.371, 4.645, 54.501)), (' D   2  ILE HD13', ' D  29  VAL HG12', -0.433, (-36.27, -4.64, 48.941)), (' D  23  CYS  HB2', ' D  36  TRP  CH2', -0.432, (-27.154, -6.974, 57.486)), (' A 209  ILE HG12', ' A 224  LYS  HG2', -0.431, (-9.569, -20.973, -21.093)), (' R 359  SER  OG ', ' R 394  ASN  OD1', -0.43, (31.137, 40.354, 31.363)), (' B 197  THR HG22', ' B 204  PRO  HB3', -0.429, (17.541, 0.461, -24.03)), (' F 136  LEU  HB2', ' F 175  LEU  HB3', -0.427, (-54.805, 3.239, -16.653)), (' X 365  TYR  HB2', ' X 387  LEU HD13', -0.427, (-68.091, -51.93, 24.419)), (' D  34  LEU HD22', ' D  72  PHE  CG ', -0.426, (-32.751, -7.169, 57.302)), (' L 214  GLU  H  ', ' L 214  GLU  HG2', -0.426, (-74.123, 12.877, 47.492)), (' E 135  VAL  O  ', ' E 223  LYS  HE3', -0.425, (-35.239, 11.206, -23.944)), (' F 145  LYS  HB3', ' F 197  THR  OG1', -0.424, (-61.848, -3.046, -20.12)), (' A  52  SER  O  ', ' A  72  ARG  NH1', -0.424, (-14.604, 17.692, 17.916)), (' C  73  ASP  HB3', ' C  76  THR HG22', -0.424, (-32.42, -34.01, 35.753)), (' R 439  ASN  O  ', ' R 443  SER  HB2', -0.423, (2.257, 32.003, 18.39)), (' E 401  GOL  H31', ' F 162  SER  HB3', -0.423, (-46.876, 1.202, -15.445)), (' D 186  ASP  HA ', ' D 189  LYS  HD3', -0.422, (20.348, -7.252, 34.343)), (' A   2  VAL HG12', ' A 116  VAL HG11', -0.421, (-9.301, 4.597, 17.965)), (' D   9  GLY  HA2', ' L  24  ARG  CZ ', -0.42, (-17.257, -4.155, 54.558)), (' H   4  LEU  HB2', ' H 112  ILE HG22', -0.42, (-18.133, 28.968, 49.749)), (' A 135  VAL  O  ', ' A 223  LYS  HE3', -0.42, (-11.512, -11.175, -23.584)), (' C 107  TYR  HH ', ' D  50  TYR  HE1', -0.419, (-34.853, -20.937, 60.175)), (' D 109  ARG  HG2', ' D 110  THR  H  ', -0.417, (-3.06, -8.124, 70.431)), (' X 394  ASN  HB3', ' X 516  GLU  HG2', -0.415, (-75.328, -42.445, 35.575)), (' H  73  ASP  HB3', ' H  76  THR HG22', -0.415, (-14.074, 34.444, 35.762)), (' L 109  ARG  HG2', ' L 110  THR  H  ', -0.414, (-43.601, 9.263, 70.326)), (' D 114  PRO  HB3', ' D 140  PHE  CD1', -0.413, (4.676, -8.958, 59.939)), (' H  44  ARG  NH1', ' H  45  LEU  O  ', -0.412, (-23.748, 10.762, 45.779)), (' H 174  HIS  NE2', ' L 139  ASN  OD1', -0.411, (-49.403, 17.584, 61.107)), (' A 214  HIS  CD2', ' A 216  PRO  HD2', -0.41, (-16.917, -3.248, -11.569)), (' F 122  ASP  O  ', ' F 126  LYS  HG2', -0.409, (-35.41, 8.559, -34.146)), (' C  60  TYR  HE1', ' C  70  ILE HG13', -0.408, (-30.138, -19.032, 34.677)), (' E 404  BTB  H42', ' E 404  BTB  H52', -0.408, (-39.441, 1.999, -7.53)), (' C  99  PRO  HB3', ' C 109  ALA  O  ', -0.407, (-35.586, -22.474, 51.646)), (' H 152  VAL  N  ', ' H 188  LEU  O  ', -0.406, (-52.486, 22.764, 45.65)), (' L  78  ARG  CZ ', ' L  78  ARG  HB3', -0.406, (-24.776, 15.956, 74.717)), (' X 357  ARG  HG3', ' X 394  ASN HD21', -0.406, (-76.041, -38.236, 32.677)), (' B  37  GLN  HB2', ' B  47  LEU HD11', -0.406, (6.179, 3.828, 10.968)), (' B  31  SER  O  ', ' B  31  SER  OG ', -0.406, (7.639, 18.854, 19.301)), (' C  63  LYS  HB3', ' C  63  LYS  HE3', -0.405, (-22.701, -9.655, 35.492)), (' B 105  GLU  HG3', ' B 173  TYR  OH ', -0.405, (11.499, -1.517, -3.327)), (' L 121  PRO  HD3', ' L 133  VAL HG22', -0.404, (-62.777, 13.72, 44.591)), (' L  40  LYS  NZ ', ' L  82  GLU  O  ', -0.403, (-29.983, 20.381, 62.977)), (' X 395  VAL HG22', ' X 515  PHE  CD1', -0.403, (-72.042, -45.895, 30.99)), (' X 406  GLU  HB3', ' X 418  ILE HG13', -0.403, (-51.04, -36.81, 34.044)), (' E 181  PRO  HA ', ' E 404  BTB  H31', -0.402, (-42.135, 2.718, -10.439)), (' C   4  LEU  HB2', ' C 112  ILE HG22', -0.402, (-28.51, -28.363, 49.668)), (' E   2  VAL HG12', ' E 116  VAL HG11', -0.401, (-37.595, -4.501, 17.571)), (' E 214  HIS  CD2', ' E 216  PRO  HD2', -0.4, (-29.449, 3.365, -11.372)), (' X 387  LEU  H  ', ' X 387  LEU HD12', -0.4, (-67.396, -55.138, 25.75))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
