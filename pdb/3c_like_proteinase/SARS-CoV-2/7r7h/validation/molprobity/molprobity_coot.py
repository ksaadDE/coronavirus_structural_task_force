# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 189 ', 'GLN', 0.030414855966290247, (-40.35767690722224, -14.793473312398495, -48.01727830401143))]
data['omega'] = []
data['rota'] = [('C', ' 106 ', 'ILE', 0.15234368252929817, (-15.501301881403053, -11.46340747169652, -48.04132104006032)), ('C', ' 224 ', 'THR', 0.009435615356778726, (3.362982704942418, -37.85412472964115, -42.59586912198772)), ('C', ' 301 ', 'SER', 0.1582223764428492, (0.677388435579684, -12.55208050904013, -30.72721902434246)), ('D', '  22 ', 'CYS', 0.10526440413475412, (5.654880834076636, 2.325326700608221, -13.893202034136976)), ('D', ' 128 ', 'CYS', 0.22649690436368095, (-16.663618488238495, -15.835519215068949, -19.739465220814274)), ('D', ' 177 ', 'LEU', 0.27178055669319756, (-12.68964415297624, -3.532933601528974, -8.835405442324358)), ('D', ' 301 ', 'SER', 0.07696135034605525, (-36.000971179839354, -12.782596099683278, -26.399142151193956)), ('D', ' 303 ', 'VAL', 0.28227076796449524, (-32.729621507330904, -7.738621753724804, -25.07357648435075))]
data['cbeta'] = [('C', ' 224 ', 'THR', ' ', 0.30107604496101553, (4.776677890062655, -37.635372186297516, -43.11978600485176))]
data['probe'] = [(' C  75  LEU  O  ', ' C 501  HOH  O  ', -0.975, (-35.49, 10.828, -40.915)), (' C  65  ASN  O  ', ' C 502  HOH  O  ', -0.828, (-42.532, 5.246, -45.041)), (' C 165  MET  HE3', ' C 514  HOH  O  ', -0.779, (-36.259, -14.358, -47.138)), (' C   4  ARG  NH1', ' C 505  HOH  O  ', -0.744, (-14.601, -19.051, -22.486)), (' C  61  LYS  O  ', ' C 503  HOH  O  ', -0.728, (-41.089, 7.842, -53.943)), (' C 107  GLN  HG3', ' C 108  PRO  HD2', -0.712, (-14.794, -17.386, -51.304)), (' C  62  SER  N  ', ' C  65  ASN  OD1', -0.695, (-42.533, 7.434, -50.224)), (' D  58  LEU  O  ', ' D 501  HOH  O  ', -0.675, (4.302, 5.321, -2.775)), (' D 108  PRO  O  ', ' D 502  HOH  O  ', -0.673, (-23.008, -18.793, -10.333)), (' C 285  ALA  HB3', ' D 285  ALA  HB3', -0.646, (-17.484, -32.567, -28.945)), (' C 270  GLU  OE1', ' C 274  ASN  OD1', -0.643, (-6.396, -43.252, -36.438)), (' C 115  LEU HD11', ' C 122  PRO  HB3', -0.621, (-24.384, -3.673, -30.82)), (' C 189  GLN  HG3', ' C 401  4IT  C15', -0.604, (-41.338, -16.513, -46.261)), (' C  81  SER  O  ', ' C  87  LEU HD13', -0.592, (-32.549, 3.081, -52.067)), (' D 263  ASP  OD2', ' D 503  HOH  O  ', -0.588, (-42.215, -32.83, -18.337)), (' D  86  VAL HG13', ' D 179  GLY  HA2', -0.582, (-8.095, -5.227, -6.884)), (' C 113  SER  O  ', ' C 149  GLY  HA2', -0.58, (-20.066, -8.664, -38.555)), (' C 245  ASP  O  ', ' C 249  ILE HG12', -0.573, (-1.783, -20.005, -48.802)), (' D  40  ARG  HA ', ' D  87  LEU HD23', -0.566, (-1.485, -1.225, -7.629)), (' D 165  MET  HE1', ' D 186  VAL  O  ', -0.556, (-1.349, -13.997, -7.717)), (' C 298  ARG  NH2', ' C 504  HOH  O  ', -0.553, (-10.847, -10.7, -34.004)), (' D 223  PHE  CD1', ' D 223  PHE  N  ', -0.538, (-37.9, -41.608, -19.773)), (' D  40  ARG  CB ', ' D  87  LEU HD23', -0.516, (-1.378, -1.59, -7.119)), (' D  12  LYS  CE ', ' D  12  LYS  H  ', -0.505, (-20.542, 0.11, -24.471)), (' D 110  GLN  HG3', ' D 557  HOH  O  ', -0.499, (-23.847, -12.787, -10.44)), (' C   1  SER  OG ', ' C   2  GLY  N  ', -0.497, (-3.415, -20.495, -22.456)), (' D 113  SER  O  ', ' D 149  GLY  HA2', -0.488, (-15.517, -8.075, -18.732)), (' D 225  THR  OG1', ' D 226  THR  N  ', -0.487, (-35.066, -37.378, -10.055)), (' C 188  ARG  O  ', ' C 190  THR  N  ', -0.486, (-38.986, -15.897, -49.622)), (' C   1  SER  HB3', ' D 166  GLU  OE1', -0.48, (-2.168, -18.314, -20.335)), (' C 166  GLU  OE2', ' D   1  SER  HB3', -0.475, (-33.844, -19.336, -36.644)), (' D  95  ASN  HB3', ' D  98  THR  OG1', -0.471, (-14.811, 8.798, -17.179)), (' D 189  GLN  HG2', ' D 189  GLN  O  ', -0.469, (6.607, -17.066, -8.795)), (' C   8  PHE  HB3', ' C 152  ILE HD12', -0.467, (-13.136, -5.196, -34.298)), (' D 276  MET  O  ', ' D 279  ARG  HG3', -0.467, (-25.117, -38.84, -29.565)), (' D   1  SER  OG ', ' D   2  GLY  N  ', -0.464, (-31.898, -20.511, -34.503)), (' D  22  CYS  SG ', ' D  66  PHE  CE1', -0.461, (4.083, 3.282, -10.47)), (' D  92  ASP  OD1', ' D  93  THR HG23', -0.46, (-5.764, 16.039, -15.968)), (' C  95  ASN  HB3', ' C  98  THR  OG1', -0.457, (-20.828, 8.845, -40.174)), (' C 254  SER  OG ', ' C 259  ILE  O  ', -0.454, (5.01, -26.561, -40.158)), (' C 100  LYS  HA ', ' C 100  LYS  HD3', -0.454, (-13.001, 6.022, -43.094)), (' C 304  THR  HB ', ' D 121  SER  OG ', -0.45, (-4.7, -2.311, -29.018)), (' D 233  VAL HG21', ' D 269  LYS  HD2', -0.44, (-29.154, -39.217, -12.131)), (' C 254  SER  OG ', ' C 260  ALA  HA ', -0.435, (5.136, -26.707, -41.041)), (' C 235  MET  HB3', ' C 235  MET  HE3', -0.433, (-14.092, -37.249, -51.771)), (' C 166  GLU  O  ', ' C 401  4IT  N20', -0.431, (-35.575, -17.719, -43.611)), (' C   8  PHE  CE2', ' C 151  ASN  HA ', -0.429, (-12.951, -8.112, -37.774)), (' C  14  GLU  OE1', ' D  12  LYS  NZ ', -0.428, (-21.506, -0.269, -26.574)), (' C   8  PHE  HE2', ' C 151  ASN HD22', -0.423, (-12.364, -9.52, -38.358)), (' D 233  VAL HG21', ' D 269  LYS  HE2', -0.421, (-29.034, -39.932, -11.866)), (' D 205  LEU HD12', ' D 250  LEU HD11', -0.421, (-31.315, -26.021, -13.956)), (' D 186  VAL HG23', ' D 188  ARG  HG2', -0.419, (1.137, -14.315, -4.179)), (' D  12  LYS  H  ', ' D  12  LYS  HE2', -0.419, (-20.423, -0.019, -23.977)), (' D  49  MET  HB2', ' D  49  MET  HE3', -0.418, (8.137, -11.418, -10.537)), (' D   5  LYS  HG2', ' D 127  GLN  HB3', -0.418, (-19.39, -16.145, -24.102)), (' D 254  SER  HB2', ' D 259  ILE  O  ', -0.417, (-39.761, -26.856, -17.415)), (' D 121  SER  HA ', ' D 122  PRO  HD3', -0.415, (-7.541, 0.451, -26.203)), (' C 131  ARG  NH2', ' C 289  ASP  OD2', -0.414, (-16.783, -24.653, -41.466)), (' D  40  ARG  CA ', ' D  87  LEU HD23', -0.414, (-1.158, -1.936, -7.385)), (' C  37  TYR  CD2', ' C  88  LYS  HG2', -0.413, (-25.989, 2.435, -48.64)), (' D  20  VAL HG12', ' D  42  VAL HG21', -0.412, (1.027, 0.502, -14.443)), (' C   4  ARG  NH2', ' D   5  LYS  HE3', -0.41, (-16.609, -18.028, -24.752)), (' D 166  GLU  O  ', ' D 401  4IT  N20', -0.409, (0.032, -17.534, -13.766)), (' D  45  THR  O  ', ' D  47  GLU  N  ', -0.408, (11.121, -7.824, -10.627)), (' C   6  MET  HE2', ' D 126  TYR  CD1', -0.408, (-10.804, -12.518, -26.213)), (' D  14  GLU  HG2', ' D 122  PRO  HG2', -0.406, (-11.751, -0.726, -26.899)), (' C  21  THR  HB ', ' C  67  LEU  HB2', -0.405, (-39.653, 4.746, -39.482)), (' C 127  GLN  O  ', ' D   4  ARG  NH2', -0.404, (-19.694, -16.805, -33.739)), (' D  37  TYR  CE2', ' D  88  LYS  HD2', -0.404, (-10.358, 3.035, -7.658)), (' D 305  PHE  O  ', ' D 306  GLN  CB ', -0.4, (-28.328, 1.071, -25.185))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
