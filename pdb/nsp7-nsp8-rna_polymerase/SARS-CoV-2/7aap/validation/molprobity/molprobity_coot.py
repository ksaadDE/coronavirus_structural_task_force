# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (96.609, 119.68399999999998, 121.91800000000002)), ('B', ' 183 ', 'PRO', None, (119.125, 108.01599999999999, 131.618))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' C  13  LEU HD13', ' D  91  LEU HD21', -0.774, (106.515, 86.087, 142.19)), (' C  13  LEU  HA ', ' D  91  LEU HD11', -0.719, (105.374, 87.602, 140.683)), (' A 758  LEU HD23', ' A 759  SER  H  ', -0.715, (94.963, 95.935, 104.415)), (' C  53  VAL HG12', ' D 103  LEU HD23', -0.682, (114.405, 80.725, 142.105)), (' A 614  LEU  HB2', ' A 802  GLU  HB3', -0.681, (101.027, 79.905, 97.126)), (' A 380  MET  HG3', ' B  94  MET  HE3', -0.665, (100.251, 128.34, 123.125)), (' A 371  LEU  HG ', ' B  87  MET  HE3', -0.654, (89.325, 128.428, 121.37)), (' A 849  LYS  NZ ', ' P  17    U  OP1', -0.644, (89.455, 92.157, 126.878)), (' A 856  ILE HD11', ' A 888  ILE HG23', -0.619, (80.43, 80.158, 127.888)), (' A 415  PHE  CZ ', ' C   8  CYS  SG ', -0.606, (100.27, 80.672, 134.389)), (' C   9  THR HG22', ' D  94  MET  HB3', -0.606, (104.131, 79.895, 139.77)), (' A 576  LEU HD11', ' A 686  THR HG22', -0.584, (90.523, 107.599, 104.659)), (' A 211  ASP  OD1', ' A 212  LEU  N  ', -0.581, (132.55, 105.546, 82.862)), (' D 100  ASN  HB3', ' D 103  LEU  HB2', -0.58, (112.742, 77.196, 142.656)), (' A 103  LYS  HG2', ' A 112  PRO  HA ', -0.563, (139.018, 101.486, 59.047)), (' A 388  LEU HD23', ' A 397  SER  HB3', -0.561, (113.947, 117.963, 120.845)), (' A 758  LEU HD23', ' A 759  SER  N  ', -0.533, (95.274, 95.955, 104.494)), (' A 507  ASN  ND2', ' A 541  GLN  OE1', -0.526, (97.571, 114.14, 123.87)), (' A 858  ARG  HG3', " P  17    U  H5'", -0.522, (87.767, 89.596, 124.693)), (' B 132  ILE HG21', ' B 138  TYR  HB2', -0.516, (126.652, 113.059, 129.373)), (' A 837  ILE  O  ', ' A 884  TYR  OH ', -0.51, (93.298, 81.306, 123.891)), (' A 720  VAL HG11', ' A 775  LEU  HG ', -0.505, (106.459, 88.452, 78.452)), (" P  18    U  O2'", " P  19    A  H5'", -0.495, (91.855, 88.055, 113.825)), (' A 454  ASP  OD2', ' A 457  ARG  NH1', -0.494, (117.33, 104.949, 116.172)), (' A  56  PHE  HB2', ' A  70  PHE  HB2', -0.494, (143.321, 99.123, 74.975)), (' D 101  ASP  OD1', ' D 102  ALA  N  ', -0.489, (117.451, 75.091, 143.072)), (' C  53  VAL HG12', ' D 103  LEU  CD2', -0.484, (114.348, 80.472, 141.839)), (' A  69  TYR  N  ', ' A 119  LEU  O  ', -0.484, (139.6, 101.813, 80.434)), (' A 824  ASP  N  ', ' A 824  ASP  OD1', -0.482, (77.938, 70.178, 100.993)), (' A  88  ASN  HA ', ' A  91  LYS  HE3', -0.469, (136.883, 116.816, 65.371)), (' A 100  ASP  OD1', ' A 117  GLN  NE2', -0.466, (143.992, 108.07, 71.195)), (' A 916  TRP  O  ', ' A 917  GLU  HG2', -0.466, (75.681, 74.696, 121.235)), (' C  13  LEU  CD1', ' D  91  LEU HD21', -0.462, (106.762, 86.321, 142.578)), (' A 631  ARG  HG2', ' A 663  LEU HD13', -0.46, (103.293, 110.497, 104.087)), (' A 623  ASP  N  ', ' A 623  ASP  OD1', -0.46, (105.754, 101.233, 109.261)), (' A 396  PHE  HB3', ' A 675  VAL  HB ', -0.452, (112.795, 117.409, 113.337)), (' A 358  ASP  OD1', ' A 533  ARG  NH2', -0.452, (90.449, 133.688, 102.187)), (' B  96  ARG  HG3', ' B  97  LYS  HG2', -0.451, (107.93, 131.679, 129.103)), (' A 388  LEU HD22', ' A 672  SER  HB3', -0.45, (111.516, 117.616, 123.325)), (' A 755  MET  HB3', ' A 764  VAL HG22', -0.449, (99.087, 90.352, 93.64)), (' A 116  ARG  HG2', ' A 217  TYR  HB2', -0.448, (133.99, 106.128, 73.15)), (' C  16  VAL  HA ', ' C  19  GLN HE22', -0.447, (102.425, 92.997, 142.463)), (' A 388  LEU HD13', ' A 400  ALA  HB2', -0.443, (112.721, 119.476, 125.697)), (' C  13  LEU HD12', ' D  91  LEU HD11', -0.438, (106.311, 87.379, 141.917)), (' A 545  LYS  HB3', ' A 555  ARG  HB2', -0.437, (101.893, 98.927, 120.865)), (' A 515  TYR  O  ', ' A 519  MET  HG3', -0.434, (83.128, 120.666, 118.341)), (' A 164  ASP  HB3', ' A 167  GLU  HB2', -0.427, (121.243, 94.696, 107.781)), (' A 553  ARG  HB3', ' A 555  ARG HH12', -0.421, (108.322, 95.041, 118.116)), (' C  16  VAL  O  ', ' C  19  GLN  NE2', -0.42, (102.856, 94.165, 143.425)), (' A 917  GLU  O  ', ' A 919  GLU  N  ', -0.418, (77.202, 73.928, 117.955)), (' A 613  HIS  CE1', ' A 803  THR HG23', -0.418, (103.212, 75.666, 91.437)), (' A 341  VAL  HB ', ' B  98  LEU HD11', -0.415, (104.212, 133.195, 119.323)), (' A 530  TYR  HD2', ' A 536  ILE HD11', -0.414, (91.817, 126.077, 108.888)), (' A 851  ASP  OD2', ' A 853  THR  OG1', -0.413, (81.273, 90.45, 135.14)), (' C   9  THR  CG2', ' D  94  MET  HB3', -0.412, (104.557, 79.959, 139.486)), (' A 378  PRO  HA ', ' A 539  ILE HD11', -0.411, (101.978, 122.695, 118.615)), (' A  60  ASP  CG ', ' A  61  GLU  H  ', -0.41, (151.567, 103.623, 86.315)), (' A 340  PHE  HE1', ' B  95  LEU HD21', -0.409, (99.14, 135.278, 123.904)), (" T  13    A  H2'", ' T  14    A  C8 ', -0.408, (84.795, 95.545, 110.647)), (' A 469  LEU  O  ', ' A 473  VAL HG13', -0.407, (103.079, 107.242, 88.974)), (' A 238  TYR  O  ', ' A 242  MET  HG3', -0.406, (116.316, 110.859, 86.964)), (' A 746  TYR  OH ', ' A 750  ARG  NH1', -0.405, (90.591, 95.591, 88.158)), (' A 322  PRO  HA ', ' A 323  PRO  HD3', -0.405, (120.252, 122.37, 107.2)), (' A 811  GLU  OE2', ' A 814  SER  HA ', -0.404, (99.603, 85.651, 109.78)), (' A 506  PHE  HB3', ' A 515  TYR  CZ ', -0.403, (89.982, 119.272, 122.467)), (' A 576  LEU HD22', ' A 689  TYR  CG ', -0.402, (90.216, 104.716, 102.83)), (' A 444  GLN  HB3', ' A 448  ALA  HB2', -0.401, (109.892, 100.308, 126.696)), (' B 166  ILE  H  ', ' B 166  ILE HD12', -0.4, (117.207, 116.001, 142.921)), (' A 590  GLY  HA2', " T  13    A  O2'", -0.4, (86.489, 95.711, 106.607))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
