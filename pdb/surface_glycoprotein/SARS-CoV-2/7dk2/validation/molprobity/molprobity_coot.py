# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('K', '   9 ', 'SER', 0.018226614054669035, (18.188000000000002, 0.076, 46.074))]
data['omega'] = [('A', ' 109 ', 'PRO', None, (15.847000000000001, 2.205, 3.8389999999999995)), ('A', ' 154 ', 'PRO', None, (-10.335, -0.101, 11.417000000000002)), ('A', ' 156 ', 'PRO', None, (-5.666000000000002, 3.8890000000000016, 10.973000000000003)), ('B', '   8 ', 'PRO', None, (17.376, 1.9640000000000009, 33.947)), ('B', '  95 ', 'PRO', None, (14.232999999999997, -19.772, 24.207)), ('B', ' 141 ', 'PRO', None, (7.6019999999999985, 15.766, 34.602)), ('D', ' 109 ', 'PRO', None, (17.282, -46.034, 74.988)), ('D', ' 154 ', 'PRO', None, (43.201999999999984, -48.231, 66.965)), ('D', ' 156 ', 'PRO', None, (38.42699999999999, -44.347, 67.591)), ('E', '   8 ', 'PRO', None, (15.476999999999999, -46.38600000000001, 44.828)), ('E', '  95 ', 'PRO', None, (18.40199999999999, -68.12000000000002, 54.501)), ('E', ' 141 ', 'PRO', None, (24.822000000000003, -32.588, 43.862)), ('G', ' 109 ', 'PRO', None, (-8.75, -55.330000000000005, 13.358)), ('G', ' 154 ', 'PRO', None, (15.284000000000002, -53.161000000000016, 0.24)), ('G', ' 156 ', 'PRO', None, (11.506, -56.955, 3.412)), ('H', '   8 ', 'PRO', None, (11.594, -54.99200000000001, 35.665)), ('H', '  95 ', 'PRO', None, (6.767999999999999, -33.220000000000006, 26.806)), ('H', ' 141 ', 'PRO', None, (18.903, -68.77500000000003, 29.603)), ('J', ' 109 ', 'PRO', None, (40.973, -0.8230000000000002, 64.162)), ('J', ' 154 ', 'PRO', None, (17.088, 1.4950000000000006, 77.462)), ('J', ' 156 ', 'PRO', None, (20.77699999999999, -2.545000000000001, 74.444)), ('K', '   8 ', 'PRO', None, (20.631999999999998, -0.4099999999999999, 41.858)), ('K', '  95 ', 'PRO', None, (25.439999999999998, 21.449, 50.79600000000001)), ('K', ' 141 ', 'PRO', None, (13.156999999999998, -14.366000000000007, 48.339999999999996))]
data['rota'] = [('A', '  31 ', 'SER', 0.29888226335700147, (24.927, -18.43, 5.42)), ('A', ' 136 ', 'LYS', 0.005474887588458545, (-16.054000000000006, 28.111000000000004, 33.986)), ('A', ' 138 ', 'THR', 0.0, (-10.845000000000004, 28.024999999999995, 31.849999999999998)), ('B', '   7 ', 'SER', 0.004019992775283754, (17.493000000000002, -0.445, 34.402)), ('B', '  33 ', 'LEU', 0.2335413393485511, (24.734999999999996, -10.270000000000003, 24.552)), ('B', '  70 ', 'ASP', 0.04160331164368078, (25.961000000000006, -7.970000000000002, 34.251)), ('C', ' 346 ', 'ARG', 0.00015598255240026424, (43.794000000000004, -8.091000000000003, -6.444)), ('C', ' 408 ', 'ARG', 0.037579403913101786, (37.116000000000014, 5.3370000000000015, 10.915)), ('C', ' 455 ', 'LEU', 0.2485638527606972, (32.416, -11.379, 13.006)), ('C', ' 494 ', 'SER', 0.06836544695975838, (30.782, -12.160000000000004, 3.432)), ('C', ' 500 ', 'THR', 0.2283356080614256, (23.899, 0.654, -5.958)), ('D', '   1 ', 'GLU', 0.1753646169121394, (9.727999999999998, -51.449, 75.847)), ('E', '   7 ', 'SER', 0.2736832745133056, (15.516999999999998, -48.82200000000001, 44.567)), ('E', '  33 ', 'LEU', 0.27544562795802113, (7.994999999999994, -58.30900000000001, 54.181)), ('E', '  56 ', 'SER', 0.29569929937493755, (2.501999999999992, -49.325, 67.079)), ('F', ' 357 ', 'ARG', 0.0009168650760449931, (-25.217000000000017, -53.555, 75.97)), ('G', '   1 ', 'GLU', 0.0032581901681743085, (-14.894000000000005, -50.08600000000001, 17.867)), ('G', '  85 ', 'SER', 0.11082174292368807, (14.111999999999993, -32.982, 6.576)), ('G', ' 124 ', 'LYS', 0.0, (19.575, -54.148, -3.806)), ('H', '   7 ', 'SER', 0.06444850415911342, (11.821, -52.55100000000002, 35.905)), ('H', '  33 ', 'LEU', 0.2562704971980012, (-0.43000000000000327, -43.07, 34.407)), ('H', '  53 ', 'THR', 0.13757722766549102, (-8.778, -48.414, 36.253)), ('H', '  56 ', 'SER', 0.2795627018453184, (-13.237000000000005, -52.047, 29.245)), ('J', ' 138 ', 'THR', 0.2311744314566962, (1.9580000000000055, -26.86000000000001, 63.305)), ('K', '   7 ', 'SER', 0.004019992775283754, (20.262, 1.999, 41.503)), ('K', '  21 ', 'ILE', 0.1563072986751053, (25.836999999999996, -0.18900000000000006, 40.842)), ('K', '  33 ', 'LEU', 0.2664450154586196, (32.473, 11.567000000000004, 43.234)), ('K', '  56 ', 'SER', 0.28888944636693753, (45.31900000000001, 2.490000000000001, 48.368)), ('K', '  61 ', 'ARG', 0.013884702869696793, (38.503, -5.92, 41.858999999999995)), ('K', '  89 ', 'GLN', 0.11620624506155253, (28.957999999999984, 10.807000000000004, 47.613)), ('K', ' 102 ', 'THR', 0.029410773655850406, (22.611999999999995, -0.281, 47.45099999999999))]
data['cbeta'] = []
data['probe'] = [(' G  47  TRP  HZ2', ' G  50  ASN  HB2', -0.908, (1.296, -34.885, 21.231)), (' J  47  TRP  HZ2', ' J  50  ASN  HB2', -0.903, (30.191, 20.529, 55.607)), (' D  47  TRP  HZ2', ' D  50  ASN  HB2', -0.885, (18.395, -66.875, 61.023)), (' A  47  TRP  HZ2', ' A  50  ASN  HB2', -0.834, (14.197, -18.628, 16.558)), (' J  91  THR HG23', ' J 117  THR  HA ', -0.795, (19.666, 7.897, 69.693)), (' A  91  THR HG23', ' A 117  THR  HA ', -0.749, (-3.346, -6.516, 14.481)), (' E 169  LYS  HG3', ' K 169  LYS  HD3', -0.74, (25.134, -23.977, 59.489)), (' B 210  ASN  HB2', ' B 213  GLU  HG3', -0.733, (-23.105, 21.123, 37.421)), (' A 134  SER  HB2', ' A 136  LYS  HD2', -0.707, (-18.123, 26.381, 31.103)), (' A 136  LYS  HE2', ' B 214  CYS  HB3', -0.697, (-21.49, 26.846, 31.55)), (' G  91  THR HG23', ' G 117  THR  HA ', -0.693, (13.322, -46.775, 7.755)), (' B  36  TYR  HE2', ' B  89  GLN  HG2', -0.691, (19.328, -8.289, 20.256)), (' F 519  HIS  HB3', ' I 519  HIS  HB3', -0.688, (-37.282, -50.674, 61.355)), (' H  61  ARG  NH2', ' H  82  ASP  OD1', -0.675, (-4.104, -62.295, 29.352)), (' G 123  THR HG22', ' G 154  PRO  HD3', -0.673, (14.31, -51.557, -2.299)), (' C 414  GLN  O  ', ' C 424  LYS  NZ ', -0.666, (40.66, -0.791, 18.324)), (' J  47  TRP  CZ2', ' J  50  ASN  HB2', -0.66, (30.573, 19.586, 55.566)), (' J  83  MET  HB3', ' J  86  LEU HD21', -0.66, (22.508, 17.29, 68.904)), (' H  36  TYR  HE1', ' H  89  GLN  HG2', -0.655, (0.241, -45.187, 27.833)), (' K  36  TYR  HE1', ' K  89  GLN  HG2', -0.646, (31.718, 9.67, 48.952)), (' A 150  LYS  HA ', ' A 184  SER  HB2', -0.642, (-13.396, 6.85, 19.764)), (' H 210  ASN  HB2', ' H 213  GLU  HG3', -0.638, (42.978, -74.058, 9.887)), (' J 123  THR HG22', ' J 154  PRO  HD3', -0.631, (17.904, 3.699, 79.425)), (' B  48  LEU HD23', ' B  54  LEU  HA ', -0.625, (29.206, -2.156, 18.866)), (' D  91  THR HG23', ' D 117  THR  HA ', -0.624, (36.448, -54.929, 63.202)), (' E  21  ILE HD11', ' E  73  LEU HD23', -0.616, (10.485, -47.361, 52.845)), (' E  37  GLN  HB2', ' E  47  LEU HD11', -0.613, (11.817, -46.355, 58.654)), (' K  48  LEU HD23', ' K  54  LEU  HA ', -0.607, (39.364, 3.1, 43.369)), (' B  37  GLN  HB2', ' B  47  LEU HD11', -0.603, (20.516, 1.769, 19.648)), (' G   3  GLN  HB3', ' G 110  TRP  CE3', -0.601, (-11.734, -48.247, 11.026)), (' F 381  GLY  HA3', ' F 430  THR HG22', -0.601, (-21.382, -38.829, 63.813)), (' E  36  TYR  HE2', ' E  89  GLN  HG2', -0.594, (13.099, -56.191, 58.22)), (' D 123  THR HG22', ' D 154  PRO  HD3', -0.59, (43.99, -49.985, 68.502)), (' F 393  THR  HA ', ' F 522  ALA  HA ', -0.588, (-34.408, -47.489, 70.679)), (' G 130  PRO  HG3', ' G 216  LYS  HD2', -0.588, (25.933, -71.943, -2.047)), (' H 147  GLN  NE2', ' H 301  HOH  O  ', -0.587, (36.648, -62.881, 26.249)), (' A  83  MET  HB3', ' A  86  LEU HD21', -0.586, (-1.036, -16.074, 13.412)), (' I 381  GLY  HA3', ' I 430  THR HG22', -0.583, (-27.875, -62.081, 48.648)), (' K  37  GLN  HB2', ' K  47  LEU HD11', -0.58, (32.457, -0.78, 49.348)), (' H  37  GLN  HB2', ' H  47  LEU HD11', -0.58, (-1.316, -55.22, 28.291)), (' L 433  VAL HG22', ' L 512  VAL HG22', -0.579, (59.441, -0.973, 39.064)), (' D  34  MET  HB3', ' D  79  LEU HD22', -0.573, (18.625, -63.203, 70.012)), (' K   8  PRO  O  ', ' K 102  THR  OG1', -0.569, (21.305, -0.196, 44.451)), (' A  47  TRP  CZ2', ' A  50  ASN  HB2', -0.569, (13.749, -18.76, 17.119)), (' H 137  ASN  ND2', ' H 138  ASN  OD1', -0.568, (18.838, -75.551, 17.976)), (' J 150  LYS  HA ', ' J 184  SER  HB2', -0.568, (8.734, -5.406, 73.129)), (' K 210  ASN  ND2', ' K 213  GLU  OE2', -0.56, (-11.863, -21.532, 66.02)), (' H  47  LEU  HA ', ' H  58  VAL HG21', -0.556, (-6.611, -53.121, 28.868)), (' G  47  TRP  CZ2', ' G  50  ASN  HB2', -0.554, (2.098, -34.562, 21.526)), (' C 456  PHE  HB3', ' C 473  TYR  CG ', -0.554, (32.338, -16.124, 16.95)), (' I 383  SER  HB2', ' I 387  LEU HD13', -0.55, (-33.464, -69.541, 45.54)), (' F 380  TYR  O  ', ' F 430  THR  HA ', -0.549, (-20.333, -39.845, 65.68)), (' B  36  TYR  CE2', ' B  89  GLN  HG2', -0.548, (19.98, -8.252, 20.087)), (' H  48  LEU HD23', ' H  54  LEU  HA ', -0.547, (-7.072, -51.448, 33.76)), (' A  11  LEU HD23', ' A 117  THR  HB ', -0.545, (-5.481, -5.501, 11.269)), (' I 502  GLY  O  ', ' I 506  GLN  HG3', -0.543, (-20.451, -55.75, 18.62)), (' A 202  ILE HG12', ' A 217  LYS  HG3', -0.542, (-17.113, 24.074, 11.666)), (' K   8  PRO  HG2', ' K  11  LEU  HB2', -0.542, (21.446, -3.891, 42.844)), (' A  12  VAL HG23', ' A 118  VAL HG22', -0.538, (-5.19, -11.594, 13.033)), (' J  52  LYS  HG2', ' J  53  GLN  H  ', -0.538, (40.261, 24.998, 56.463)), (' D 130  PRO  HG3', ' D 216  LYS  HD2', -0.538, (52.258, -29.925, 61.054)), (' I 393  THR  HA ', ' I 522  ALA  HA ', -0.534, (-41.4, -54.322, 52.484)), (' K   3  GLN  HB2', ' K  26  SER  HB3', -0.531, (19.175, 15.268, 42.03)), (' I 380  TYR  O  ', ' I 430  THR  HA ', -0.531, (-27.569, -61.26, 46.217)), (' G  83  MET  HB3', ' G  86  LEU HD21', -0.53, (9.426, -37.26, 8.614)), (' H 210  ASN  HB2', ' H 213  GLU  CG ', -0.527, (43.356, -74.359, 9.36)), (' D   3  GLN  HB3', ' D 110  TRP  CE3', -0.526, (16.909, -52.861, 78.083)), (' G 150  LYS  HA ', ' G 184  SER  HB2', -0.525, (23.569, -59.866, 4.691)), (' A 123  THR HG22', ' A 154  PRO  HD3', -0.525, (-11.294, -2.08, 9.291)), (' A 207  HIS  CD2', ' A 209  PRO  HD2', -0.524, (-10.021, 4.768, 8.584)), (' F 418  ILE  HA ', ' F 422  ASN HD22', -0.524, (-4.166, -54.635, 66.526)), (' L 347  PHE  CE2', ' L 399  SER  HB2', -0.523, (65.137, 4.313, 45.317)), (' E  53  THR HG21', ' F 421  TYR  CZ ', -0.522, (-1.56, -56.754, 59.465)), (' I 401  VAL HG22', ' I 509  ARG  HG2', -0.51, (-30.098, -50.586, 26.738)), (' B 186  TYR  HA ', ' B 192  TYR  OH ', -0.509, (-22.907, 10.427, 35.235)), (' F 433  VAL HG22', ' F 512  VAL HG22', -0.508, (-13.615, -45.674, 70.898)), (' E  61  ARG  NH2', ' E  82  ASP  OD1', -0.507, (8.614, -38.944, 60.161)), (' B 145  LYS  HB3', ' B 197  THR  HB ', -0.504, (-1.781, 11.905, 40.941)), (' J 130  PRO  HG3', ' J 216  LYS  HD2', -0.503, (6.762, -16.65, 79.752)), (' C 383  SER  HB2', ' C 387  LEU HD22', -0.503, (56.448, 15.903, 9.711)), (' B  53  THR HG21', ' C 421  TYR  CZ ', -0.499, (34.265, -8.441, 18.907)), (' L 412  PRO  HG3', ' L 429  PHE  HB3', -0.497, (55.065, -3.908, 32.777)), (' B  24  ARG  NH1', ' K  20  THR  O  ', -0.496, (24.1, -3.21, 38.889)), (' J  11  LEU HD23', ' J 117  THR  HB ', -0.495, (20.689, 6.637, 74.042)), (' I 376  THR  HB ', ' I 435  ALA  HB3', -0.494, (-26.807, -59.453, 30.69)), (' L 383  SER  HB2', ' L 387  LEU HD22', -0.494, (65.105, -14.813, 30.467)), (' I 433  VAL HG22', ' I 512  VAL HG22', -0.493, (-27.208, -56.293, 38.052)), (' I 379  CYS  SG ', ' I 384  PRO  HB3', -0.493, (-31.029, -65.611, 39.885)), (' K 113  PRO  HB3', ' K 139  PHE  CD2', -0.493, (9.565, -16.03, 54.521)), (' H  96  ARG  NH2', ' I 487  ASN  OD1', -0.492, (-1.678, -33.67, 28.543)), (' L 502  GLY  O  ', ' L 506  GLN  HG3', -0.491, (53.109, -1.166, 58.486)), (' F 502  GLY  O  ', ' F 506  GLN  HG3', -0.489, (4.722, -45.697, 79.155)), (' J   2  VAL HG21', ' J  98  ARG  NH2', -0.489, (43.534, 8.832, 56.053)), (' F 376  THR  HB ', ' F 435  ALA  HB3', -0.488, (-8.139, -41.704, 75.326)), (' E  47  LEU  HA ', ' E  58  VAL HG21', -0.488, (7.1, -48.672, 62.438)), (' D  47  TRP  CZ2', ' D  50  ASN  HB2', -0.486, (18.094, -66.239, 61.35)), (' J  33  TRP  HB2', ' J  99  ASP  HB3', -0.484, (37.835, 17.98, 55.616)), (' L 411  ALA  HB3', ' L 414  GLN  HG3', -0.483, (50.632, -3.563, 38.6)), (' D  33  TRP  HB2', ' D  99  ASP  HB3', -0.482, (12.896, -64.748, 66.29)), (' L 401  VAL HG22', ' L 509  ARG  HG2', -0.482, (62.391, 4.134, 50.348)), (' L 490  PHE  HE2', ' L 492  LEU  HB2', -0.48, (51.715, 18.884, 48.087)), (' C 439  ASN  HA ', ' C 507  PRO  HG2', -0.48, (33.211, -0.438, -4.532)), (' C 466  ARG HH12', ' C 468  ILE HD11', -0.479, (47.449, -15.536, 7.084)), (' I 417  LYS  HD3', ' I 453  TYR  CD2', -0.478, (-16.156, -44.996, 29.795)), (' L 417  LYS  HD3', ' L 453  TYR  CD2', -0.478, (48.154, 9.734, 47.632)), (' E 159  SER  HA ', ' E 178  THR  O  ', -0.477, (44.393, -41.599, 46.836)), (' A 150  LYS  NZ ', ' A 178  GLN  OE1', -0.477, (-15.396, 4.312, 23.71)), (' J   3  GLN  HB3', ' J 110  TRP  CE3', -0.477, (43.675, 5.339, 66.411)), (' K 120  PRO  HD3', ' K 132  VAL HG22', -0.476, (-2.646, -12.038, 70.019)), (' C 411  ALA  HB3', ' C 414  GLN  HG3', -0.476, (40.615, 5.171, 14.269)), (' D 150  LYS  HA ', ' D 184  SER  HB2', -0.474, (46.214, -41.302, 57.606)), (' C 466  ARG  NH1', ' C 468  ILE HD11', -0.472, (47.044, -15.655, 7.499)), (' A  33  TRP  HB2', ' A  99  ASP  HB3', -0.472, (19.853, -17.021, 12.059)), (' D  40  ALA  HB3', ' D  43  LYS  HB2', -0.471, (29.56, -53.422, 55.893)), (' G  47  TRP  CD2', ' H  96  ARG  HB2', -0.471, (3.405, -37.547, 23.659)), (' K  39  LYS  HB2', ' K  42  LYS  HG2', -0.471, (31.355, -3.289, 57.697)), (' I 425  LEU HD21', ' I 512  VAL HG11', -0.469, (-27.011, -53.909, 40.743)), (' B   9  SER  O  ', ' B 102  THR  HA ', -0.469, (12.859, 2.107, 29.737)), (' I 456  PHE  HB3', ' I 473  TYR  CD1', -0.467, (-11.082, -37.231, 35.656)), (' L 392  PHE  HD1', ' L 517  LEU  HB2', -0.466, (67.736, -3.485, 25.221)), (' J  12  VAL HG23', ' J 118  VAL HG22', -0.466, (19.692, 13.396, 72.899)), (' J   1  GLU  HG2', ' L 505  TYR  CG ', -0.466, (48.197, 1.667, 58.369)), (' K 120  PRO  HG2', ' K 130  ALA  HB1', -0.465, (-3.683, -9.605, 72.485)), (' F 383  SER  HB2', ' F 387  LEU HD22', -0.464, (-23.834, -32.592, 69.177)), (' D 175  ALA  HA ', ' D 185  LEU  HB3', -0.463, (39.423, -41.16, 58.373)), (' D  36  TRP  O  ', ' D  48  VAL HG22', -0.462, (23.04, -62.259, 62.707)), (' B 120  PRO  HG2', ' B 130  ALA  HB1', -0.461, (-21.611, 11.659, 29.726)), (' F 498  GLN  HB2', ' F 501  ASN  ND2', -0.461, (8.032, -51.132, 81.481)), (' D  52  LYS  HG2', ' D  53  GLN  H  ', -0.461, (11.931, -71.784, 68.802)), (' F 365  TYR  CD2', ' F 388  ASN  HB3', -0.46, (-25.679, -37.591, 76.181)), (' A  32  TYR  HD1', ' A 100  LEU  HG ', -0.459, (24.26, -15.163, 10.358)), (' B  61  ARG  NH2', ' B  82  ASP  OD1', -0.458, (23.812, 9.157, 18.543)), (' L 456  PHE  HB3', ' L 473  TYR  CG ', -0.457, (43.117, 17.209, 42.67)), (' A   1  GLU  O  ', ' A  26  GLY  HA3', -0.456, (21.731, -6.042, 1.162)), (' H   1  ASP  HB2', ' H  95  PRO  HD2', -0.456, (9.061, -32.813, 28.371)), (' I 472  ILE HD12', ' I 484  GLU  HG2', -0.455, (-13.907, -29.819, 29.935)), (' K  35  TRP  CZ3', ' K  88  CYS  HB3', -0.455, (27.842, 5.175, 44.417)), (' L 456  PHE  HB3', ' L 473  TYR  CD1', -0.454, (42.94, 17.113, 41.836)), (' J 133  PRO  HD3', ' J 145  LEU  HB3', -0.453, (6.27, -22.547, 71.909)), (' H   1  ASP  HB3', ' H 307  HOH  O  ', -0.452, (7.748, -34.036, 30.04)), (' G  33  TRP  HB2', ' G  99  ASP  HB3', -0.451, (-5.384, -36.576, 22.074)), (' B   3  GLN  HB2', ' B  26  SER  HB3', -0.45, (16.18, -14.029, 34.546)), (' F 439  ASN  OD1', ' F 443  SER  OG ', -0.45, (2.346, -49.142, 84.218)), (' K  96  ARG  NH1', ' L 701  HOH  O  ', -0.449, (35.194, 19.663, 50.881)), (' L 376  THR  HB ', ' L 435  ALA  HB3', -0.449, (58.785, -4.887, 46.393)), (' F 456  PHE  HB3', ' F 473  TYR  CD1', -0.449, (-0.338, -63.976, 60.59)), (' I 411  ALA  HB3', ' I 414  GLN  HG3', -0.449, (-18.498, -58.103, 38.56)), (' G 126  PRO  HB3', ' G 152  TYR  HB3', -0.449, (19.652, -59.194, 0.095)), (' G  36  TRP  NE1', ' G  81  LEU  HB2', -0.447, (1.033, -36.986, 12.09)), (' H  89  GLN  HB3', ' H  98  PHE  CE1', -0.445, (2.444, -44.728, 27.262)), (' D  18  LEU  HA ', ' D  18  LEU HD12', -0.445, (35.751, -63.675, 71.961)), (' C 456  PHE  HB3', ' C 473  TYR  CD1', -0.444, (32.917, -15.885, 17.353)), (' F 449  TYR  HB3', ' F 494  SER  HB3', -0.443, (2.899, -60.86, 78.272)), (' C 403  ARG  HE ', ' C 405  ASP  HB2', -0.443, (30.222, -0.008, 6.877)), (' G  34  MET  HB3', ' G  79  LEU HD22', -0.442, (-4.281, -38.006, 15.484)), (' C 490  PHE  CD1', ' C 491  PRO  HD2', -0.44, (33.589, -20.499, 10.131)), (' D  11  LEU HD23', ' D 117  THR  HB ', -0.44, (38.454, -53.745, 67.126)), (' C 354  ASN  O  ', ' C 398  ASP  HA ', -0.439, (49.485, -5.436, 3.624)), (' I 418  ILE  HA ', ' I 422  ASN HD22', -0.439, (-18.025, -46.77, 34.146)), (' D  86  LEU  HA ', ' D  86  LEU HD23', -0.439, (35.382, -64.725, 62.659)), (' A  67  ARG  NH1', ' A  68  PHE  HE1', -0.438, (-0.26, -17.515, 16.852)), (' G  86  LEU  HA ', ' G  86  LEU HD23', -0.437, (13.118, -36.51, 8.852)), (' G  11  LEU HD23', ' G 117  THR  HB ', -0.437, (11.656, -47.484, 3.632)), (' E 145  LYS  HZ2', ' E 147  GLN  HG3', -0.435, (38.159, -40.013, 37.401)), (' F 379  CYS  HB2', ' F 384  PRO  HB3', -0.434, (-17.755, -35.396, 71.473)), (' C 520  ALA  O  ', ' L 519  HIS  NE2', -0.434, (70.141, 0.5, 12.029)), (' E 210  ASN  ND2', ' E 213  GLU  OE1', -0.432, (54.422, -25.814, 38.391)), (' A 223  CYS  HB3', ' B 214  CYS  HA ', -0.432, (-24.822, 24.873, 30.357)), (' A  34  MET  HB3', ' A  79  LEU HD22', -0.431, (14.341, -15.436, 8.557)), (' G 175  ALA  HA ', ' G 185  LEU  HB3', -0.43, (18.558, -60.318, 9.051)), (' A   4  LEU  HB3', ' A  96  CYS  SG ', -0.428, (13.644, -8.934, 6.45)), (' K  13  ALA  O  ', ' K 107  LYS  N  ', -0.428, (23.41, -13.894, 45.607)), (' E  48  LEU HD23', ' E  54  LEU  HA ', -0.427, (3.279, -50.255, 59.855)), (' I 406  GLU  HB3', ' I 418  ILE HG13', -0.427, (-18.843, -51.168, 31.483)), (' I 402  ILE HD11', ' I 407  VAL  HA ', -0.427, (-22.153, -55.055, 31.383)), (' J  71  SER  OG ', ' J  80  TYR  HB2', -0.426, (34.292, 21.76, 69.042)), (' H  20  THR  HA ', ' H  73  LEU  O  ', -0.426, (2.772, -56.397, 37.991)), (' F 368  LEU  O  ', ' F 371  SER  HB3', -0.426, (-15.557, -37.017, 82.884)), (' J  86  LEU  HA ', ' J  86  LEU HD23', -0.426, (19.876, 18.394, 69.089)), (' G  52  LYS  HG2', ' G  53  GLN  H  ', -0.425, (-8.098, -29.828, 20.937)), (' B  36  TYR  CD1', ' B  46  LEU  HA ', -0.425, (20.923, -4.107, 17.216)), (' A  36  TRP  NE1', ' A  81  LEU  HB2', -0.424, (7.814, -16.019, 9.654)), (' K 145  LYS  HB3', ' K 197  THR  HB ', -0.424, (2.274, -10.085, 50.12)), (' E 124  GLN  HG2', ' E 129  THR  O  ', -0.424, (55.008, -39.22, 53.291)), (' K  39  LYS  HG3', ' K  42  LYS  HE3', -0.424, (32.64, -3.585, 56.116)), (' F 490  PHE  CE2', ' F 492  LEU  HB2', -0.423, (-1.443, -66.018, 71.172)), (' G  35  SER  OG ', ' G  99  ASP  OD2', -0.423, (-1.861, -37.887, 22.236)), (' A 123  THR  HA ', ' A 153  PHE  HD2', -0.422, (-13.418, -2.289, 11.007)), (' E   8  PRO  O  ', ' E 102  THR  OG1', -0.421, (17.062, -47.438, 47.821)), (' F 417  LYS  HB3', ' F 417  LYS  HE2', -0.421, (0.389, -52.75, 66.094)), (' B 120  PRO  HD3', ' B 132  VAL HG22', -0.421, (-19.21, 13.491, 30.841)), (' K  33  LEU HD22', ' K  71  PHE  CG ', -0.42, (30.058, 9.038, 39.95)), (' J  72  ARG  HD3', ' J  74  ASN  OD1', -0.419, (42.144, 22.282, 64.128)), (' C 462  LYS  H  ', ' C 462  LYS  HD2', -0.419, (45.862, -9.412, 19.81)), (' C 461  LEU HD22', ' C 465  GLU  HB3', -0.419, (45.021, -10.308, 15.848)), (' E   7  SER  HA ', ' E   8  PRO  HA ', -0.418, (17.09, -48.323, 44.124)), (' H  53  THR HG21', ' I 421  TYR  CZ ', -0.418, (-11.241, -44.912, 37.248)), (' G 196  LEU  HA ', ' G 196  LEU HD23', -0.417, (23.617, -83.819, 5.564)), (' C 435  ALA  HA ', ' C 509  ARG  O  ', -0.417, (42.101, 3.003, 1.192)), (' A  33  TRP  CZ2', ' A  52  LYS  HG3', -0.417, (20.671, -23.621, 12.684)), (' J  18  LEU  HA ', ' J  18  LEU HD12', -0.417, (25.831, 16.713, 75.851)), (' J 109  PRO  HD2', ' J 110  TRP  CD1', -0.417, (42.737, 0.882, 65.097)), (' B  56  SER  HB3', ' C 406  GLU  HG2', -0.416, (32.784, -1.606, 10.211)), (' D 152  TYR  CE2', ' D 157  VAL HG13', -0.416, (42.278, -42.029, 64.758)), (' A 207  HIS  ND1', ' A 210  SER  OG ', -0.416, (-14.049, 5.085, 8.721)), (' D 196  LEU  HA ', ' D 196  LEU HD23', -0.416, (44.891, -17.405, 57.217)), (' K  36  TYR  CE1', ' K  89  GLN  HG2', -0.416, (31.969, 9.559, 49.863)), (' A 172  THR  OG1', ' A 301  HOH  O  ', -0.415, (-4.599, 16.444, 16.105)), (' D  36  TRP  NE1', ' D  81  LEU  HB2', -0.415, (24.832, -64.306, 68.871)), (' E   7  SER  HB3', ' H  24  ARG HH12', -0.414, (13.739, -48.162, 42.269)), (' D 103  LEU HD12', ' E  98  PHE  HZ ', -0.414, (16.222, -57.911, 60.438)), (' H 161  GLU  HA ', ' H 176  SER  O  ', -0.413, (24.76, -61.866, 15.957)), (' L 393  THR  N  ', ' L 516  GLU  O  ', -0.413, (69.557, 0.083, 25.925)), (' K  86  TYR  O  ', ' K 101  GLY  HA2', -0.412, (24.876, 2.629, 48.89)), (' G  40  ALA  HB3', ' G  43  LYS  HB2', -0.412, (13.487, -48.111, 17.586)), (' L 418  ILE  HA ', ' L 422  ASN HD22', -0.411, (49.977, 7.731, 43.116)), (' G 102  ILE  H  ', ' G 102  ILE HG13', -0.411, (-6.283, -40.113, 29.145)), (' F 484  GLU  CD ', ' F 490  PHE  HB2', -0.411, (2.592, -69.745, 68.908)), (' G 145  LEU  HB2', ' G 218  VAL HG11', -0.41, (24.412, -75.781, 4.871)), (' F 368  LEU HD21', ' F 601  NAG  H83', -0.41, (-18.704, -42.28, 84.817)), (' I 474  GLN  OE1', ' I 479  PRO  HA ', -0.409, (-6.529, -28.327, 38.098)), (' F 401  VAL HG22', ' F 509  ARG  HG2', -0.409, (-7.79, -50.914, 80.653)), (' D  32  TYR  CZ ', ' D  98  ARG  HD2', -0.409, (8.927, -60.42, 71.332)), (' J 129  PHE  HA ', ' J 130  PRO  HD3', -0.408, (5.238, -13.656, 78.73)), (' K 113  PRO  HD3', ' K 198  HIS  ND1', -0.408, (8.282, -16.824, 51.176)), (' E  20  THR  HA ', ' E  73  LEU  O  ', -0.407, (7.656, -45.073, 49.413)), (' F 406  GLU  HB3', ' F 418  ILE HG13', -0.407, (-2.789, -50.328, 69.473)), (' K  89  GLN  HB3', ' K  98  PHE  CD1', -0.407, (28.982, 10.15, 50.184)), (' H  56  SER  HB3', ' I 406  GLU  HG2', -0.407, (-15.875, -51.628, 29.779)), (' D  36  TRP  CD1', ' D  81  LEU  HB2', -0.406, (24.415, -64.251, 68.207)), (' B 137  ASN  ND2', ' B 138  ASN  OD1', -0.405, (-0.585, 22.2, 26.226)), (' G  71  SER  O  ', ' G  79  LEU HD12', -0.405, (-3.566, -34.163, 12.311)), (' A  86  LEU  HA ', ' A  86  LEU HD23', -0.405, (-3.057, -17.044, 15.736)), (' J 171  HIS  HA ', ' J 315  HOH  O  ', -0.404, (17.871, -15.397, 64.454)), (' I 368  LEU  O  ', ' I 371  SER  HB3', -0.404, (-37.257, -64.801, 31.053)), (' B  20  THR  O  ', ' K  24  ARG  NH1', -0.403, (21.795, 4.513, 33.336)), (' L 474  GLN  OE1', ' L 479  PRO  HA ', -0.403, (38.584, 26.732, 39.857)), (' C 502  GLY  O  ', ' C 506  GLN  HG3', -0.403, (28.139, 2.758, -0.927)), (' C 418  ILE  HA ', ' C 422  ASN HD22', -0.402, (37.166, -6.615, 12.385)), (' I 449  TYR  HB3', ' I 494  SER  OG ', -0.401, (-21.528, -40.592, 21.501)), (' J 159  VAL  HA ', ' J 204  ASN  O  ', -0.401, (18.186, -13.943, 76.57)), (' A 109  PRO  HD2', ' A 110  TRP  CD1', -0.4, (15.992, 0.881, 1.484))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
