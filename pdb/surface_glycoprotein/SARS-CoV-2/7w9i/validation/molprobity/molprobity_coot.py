# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (197.29400000000007, 126.30999999999997, 293.405)), ('E', ' 479 ', 'PRO', None, (234.53100000000003, 175.41900000000007, 278.921))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' E 376  THR  HB ', ' E 435  ALA  HB3', -0.613, (206.779, 157.288, 251.969)), (' A 463  VAL HG23', ' A 468  ILE HD11', -0.611, (203.548, 150.042, 314.144)), (' A 542  CYS  SG ', ' A 543  ASP  N  ', -0.598, (176.587, 153.155, 280.041)), (' E 417  LYS  O  ', ' E 422  ASN  ND2', -0.561, (217.488, 164.824, 262.917)), (' A 573  VAL HG23', ' A 574  VAL HG23', -0.556, (186.279, 163.004, 285.092)), (' A 177  ARG  NH1', ' A 495  GLU  O  ', -0.552, (205.159, 141.015, 317.305)), (' A  55  THR  HB ', ' A  58  ASN HD22', -0.536, (215.007, 130.436, 279.888)), (' A 169  ARG  NH2', ' A 270  MET  O  ', -0.534, (194.691, 136.411, 306.37)), (' A  42  GLN  NE2', ' E 449  TYR  OH ', -0.531, (219.458, 148.188, 271.865)), (' A 161  ARG  NH1', ' A 252  TYR  OH ', -0.527, (182.936, 129.744, 305.454)), (' A  24  GLN  OE1', ' E 487  ASN  ND2', -0.521, (223.963, 173.05, 281.378)), (' A 245  ARG  NH2', ' A 260  GLY  O  ', -0.52, (177.845, 142.581, 314.213)), (' A 455  MET  HG3', ' A 484  ILE HD12', -0.508, (191.069, 150.419, 309.998)), (' A 611  SER  HB3', ' A 614  ALA  HB2', -0.503, (185.602, 138.005, 324.041)), (' A 201  ASP  OD2', ' A 219  ARG  NE ', -0.503, (205.58, 164.501, 301.819)), (' E 346  ARG  NH1', ' E 347  PHE  O  ', -0.501, (224.109, 152.076, 255.257)), (' A 501  ALA  O  ', ' A 507  SER  OG ', -0.5, (204.714, 139.586, 303.87)), (' A 123  MET  HG3', ' A 176  LEU HD22', -0.495, (209.16, 139.663, 304.852)), (' A 534  LYS  NZ ', ' A 549  GLU  OE2', -0.491, (176.125, 161.87, 272.591)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.49, (216.767, 152.71, 254.748)), (' A 134  ASN  ND2', ' A 137  ASN  OD1', -0.484, (196.856, 117.031, 311.702)), (' A 451  PRO  HB2', ' A 485  VAL HG12', -0.479, (187.38, 147.554, 306.229)), (' A 245  ARG  NH1', ' A 603  PHE  O  ', -0.454, (174.475, 144.18, 312.638)), (' A 170  SER  OG ', ' A 171  GLU  OE1', -0.451, (202.877, 128.1, 311.233)), (' E 371  SER  OG ', ' E 373  SER  OG ', -0.449, (206.951, 148.365, 245.392)), (' A  81  GLN  NE2', ' A 103  ASN  OD1', -0.448, (219.741, 163.188, 294.563)), (' A  44  SER  HB3', ' A 351  LEU  HG ', -0.448, (209.074, 145.16, 277.516)), (' E 351  TYR  HE1', ' E 468  ILE HG23', -0.443, (229.091, 161.707, 259.784)), (' A 597  ASP  HA ', ' A 600  LYS  HE3', -0.443, (163.63, 147.781, 304.926)), (' E 478  LYS  HB2', ' E 478  LYS  HE2', -0.442, (231.844, 173.184, 279.264)), (' A  74  LYS  HB2', ' A  74  LYS  HE3', -0.441, (222.053, 153.215, 290.369)), (' E 360  ASN  HA ', ' E 523  THR HG23', -0.436, (220.278, 162.575, 229.553)), (' E 448  ASN  OD1', ' E 450  ASN  ND2', -0.433, (222.943, 147.358, 261.624)), (' E 374  PHE  HA ', ' E 436  TRP  HB3', -0.432, (207.954, 151.902, 249.953)), (' E 342  PHE  HE2', ' E 434  ILE HG21', -0.43, (211.169, 154.765, 245.696)), (' A 457  GLU  HG2', ' A 512  PHE  HB3', -0.423, (197.409, 150.706, 301.531)), (' A 308  PHE  HE1', ' A 362  THR HG21', -0.423, (193.012, 135.923, 276.381)), (' A 233  ILE  HA ', ' A 233  ILE HD12', -0.422, (180.046, 154.739, 301.035)), (' A 323  MET  SD ', ' A 380  GLN  NE2', -0.42, (193.905, 148.117, 271.667)), (' E 454  ARG  HA ', ' E 454  ARG  HD2', -0.415, (224.243, 163.995, 264.596)), (' A 423  LEU  HA ', ' A 423  LEU HD23', -0.413, (177.381, 134.621, 273.512)), (' E 454  ARG  NH1', ' E 469  SER  O  ', -0.41, (228.783, 165.332, 263.565)), (' A 450  LEU  HA ', ' A 450  LEU HD23', -0.408, (188.377, 149.88, 299.317)), (' A 439  LEU  O  ', ' A 443  ALA  N  ', -0.408, (178.276, 144.463, 294.548)), (' A 429  GLN  H  ', ' A 429  GLN  HG2', -0.407, (164.473, 136.29, 281.43)), (' A 455  MET  HB3', ' A 455  MET  HE2', -0.407, (192.088, 147.744, 306.921)), (' A 120  LEU  HA ', ' A 120  LEU HD23', -0.406, (212.338, 143.098, 301.087)), (' E 403  ARG  HG2', ' E 505  TYR  HA ', -0.406, (210.578, 154.339, 264.92)), (' A 284  PRO  HG3', ' A 440  LEU HD22', -0.401, (172.782, 139.575, 297.278))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
