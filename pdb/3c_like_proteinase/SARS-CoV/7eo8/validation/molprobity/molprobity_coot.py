# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  50 ', 'LEU', 0.028193370200927305, (73.41117, -30.83894, -5.45552)), ('A', '  51 ', 'ASN', 0.0, (76.58355999999995, -28.71284000000003, -5.74214)), ('B', ' 260 ', 'ALA', 0.04744264119330489, (33.60939, -37.06885, -11.69026))]
data['omega'] = []
data['rota'] = [('B', ' 202 ', 'LEU', 0.0032105806844781267, (32.49721, -43.64622, 0.7819)), ('B', ' 276 ', 'MET', 0.0, (38.14809, -58.65240000000001, -10.789119999999995))]
data['cbeta'] = []
data['probe'] = [(' A 159  PHE  HB3', ' A 177  LEU HD13', -0.952, (67.265, -42.898, 16.898)), (' B  54  TYR  HB3', ' B  82  MET  HE1', -0.877, (26.32, -50.811, 36.737)), (' A  50  LEU  O  ', ' A  52  PRO  N  ', -0.698, (75.839, -29.426, -4.03)), (' A 159  PHE  HB3', ' A 177  LEU  CD1', -0.694, (67.103, -42.44, 15.983)), (' B 105  ARG  NH1', ' B 176  ASP  OD2', -0.66, (28.167, -43.587, 22.455)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.657, (33.506, -46.424, 7.168)), (' B 165  MET  HE1', ' B 192  GLN  NE2', -0.654, (27.845, -58.414, 24.193)), (' B 167  LEU  HB3', ' B 168  PRO  HD2', -0.643, (29.977, -61.391, 18.833)), (' A 159  PHE  CB ', ' A 177  LEU HD13', -0.634, (67.569, -42.921, 17.103)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.631, (54.186, -37.051, 16.2)), (' A   5  LYS  NZ ', ' A 288  GLU  OE2', -0.594, (52.949, -54.736, 5.88)), (' A 269  LYS  O  ', ' A 273  GLN  HG3', -0.591, (55.167, -72.206, -5.072)), (' A 138  GLY  H  ', ' A 172  HIS  HD2', -0.579, (58.538, -44.709, 2.104)), (' B 159  PHE  HB3', ' B 177  LEU HD13', -0.574, (36.445, -40.656, 24.399)), (' A  58  LEU HD22', ' A  82  MET  HE3', -0.541, (78.967, -28.734, 9.366)), (' A 137  LYS  HA ', ' A 171  VAL HG23', -0.534, (59.552, -46.855, -0.064)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.527, (67.756, -28.737, 7.983)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.522, (72.01, -41.849, 5.805)), (' A  62  SER  O  ', ' A  65  SER  OG ', -0.52, (74.763, -19.813, 12.346)), (' B  83  GLN  OE1', ' B  88  ARG  HD2', -0.516, (29.661, -39.464, 33.316)), (' A 211  ALA  HB1', ' A 216  ASP  HB3', -0.515, (46.217, -67.958, 8.763)), (' A 254  SER  HB2', ' A 259  ILE  O  ', -0.512, (57.713, -75.124, 12.668)), (' B 264  MET  HE3', ' B 267  ALA  HB3', -0.507, (35.617, -45.999, -11.005)), (' A 401  FNO  O04', ' A 401  FNO  O05', -0.505, (63.853, -31.685, 2.588)), (' A 288  GLU  HG2', ' A 291  PHE  CE2', -0.504, (51.987, -57.673, 7.482)), (' A  92  ASP  OD1', ' A  93  THR HG23', -0.5, (68.506, -23.356, 26.465)), (' A 280  THR HG22', ' A 285  THR HG22', -0.484, (42.487, -61.29, 0.095)), (' B  40  ARG  HG3', ' B  54  TYR  CE1', -0.473, (28.646, -52.375, 34.517)), (' B  56  ASP  O  ', ' B  60  ARG  HG3', -0.471, (25.191, -53.843, 45.233)), (' A 140  PHE  HD2', ' A 172  HIS  CG ', -0.471, (59.845, -41.36, 3.095)), (' A 224  THR  HA ', ' A 266  ALA  HB2', -0.468, (57.66, -78.876, 2.793)), (' A 187  ASP  N  ', ' A 187  ASP  OD1', -0.468, (73.679, -36.301, 1.158)), (' A 288  GLU  HG2', ' A 291  PHE  HE2', -0.465, (51.806, -57.789, 7.478)), (' A  50  LEU  C  ', ' A  50  LEU  CD2', -0.458, (75.156, -30.839, -6.586)), (' B 219  PHE  CE1', ' B 264  MET  HE1', -0.456, (38.067, -46.396, -10.497)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.455, (62.72, -56.844, 6.089)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.451, (73.082, -30.082, 9.582)), (' B 254  SER  O  ', ' B 256  GLN  N  ', -0.45, (39.734, -33.546, -8.373)), (' A   5  LYS  HG3', ' A 291  PHE  CE1', -0.449, (52.04, -55.436, 10.853)), (' A  50  LEU  C  ', ' A  50  LEU HD23', -0.443, (75.519, -31.304, -6.12)), (' A 126  TYR  HD1', ' B   6  MET  HG2', -0.441, (51.868, -42.844, 9.539)), (' B 229  ASP  HA ', ' B 232  LEU HD12', -0.439, (19.009, -47.433, -8.99)), (' A  22  CYS  HB3', ' A  42  VAL  O  ', -0.436, (69.505, -24.248, 7.23)), (' B 100  LYS  HD3', ' B 156  CYS  HB2', -0.435, (41.857, -28.645, 21.625)), (' A 111  THR HG23', ' A 292  THR HG23', -0.434, (60.043, -56.177, 11.153)), (' A 243  THR  O  ', ' A 246  HIS  HB2', -0.43, (67.841, -69.155, 7.768)), (' B 219  PHE  HE1', ' B 264  MET  HE1', -0.43, (38.271, -45.961, -10.279)), (' B 187  ASP  N  ', ' B 187  ASP  OD1', -0.427, (26.232, -54.418, 29.111)), (' B  40  ARG  HA ', ' B  87  LEU  HG ', -0.425, (31.929, -48.813, 36.132)), (' A   6  MET  HE3', ' B 124  GLY  HA3', -0.424, (50.479, -51.364, 19.889)), (' A 237  TYR  OH ', ' A 273  GLN  HA ', -0.424, (54.844, -69.554, -8.389)), (' A 141  LEU  O  ', ' A 144  SER  HB3', -0.417, (57.668, -34.841, 4.772)), (' B 276  MET  O  ', ' B 278  GLY  N  ', -0.417, (40.211, -61.143, -10.958)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.416, (41.55, -44.375, 19.517)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.414, (73.457, -38.359, 10.675)), (' A 126  TYR  CD1', ' B   6  MET  HG2', -0.414, (52.258, -43.178, 9.417)), (' A 104  VAL  O  ', ' A 160  CYS  HA ', -0.413, (68.945, -46.604, 14.983)), (' A 184  PRO  HD2', ' A 185  PHE  CE2', -0.413, (70.201, -46.403, -0.701)), (' B 276  MET  HE2', ' B 285  THR  HA ', -0.409, (41.336, -56.985, -6.446)), (' A  82  MET  HB2', ' A  82  MET  HE3', -0.406, (78.528, -29.871, 9.901)), (' B 164  HIS  HB3', ' B 165  MET  HG3', -0.405, (32.276, -54.702, 26.596)), (' A 213  ILE HD11', ' A 256  GLN  HG2', -0.403, (51.954, -70.342, 18.297)), (' B  40  ARG  HD3', ' B  85  CYS  HA ', -0.402, (27.635, -48.971, 32.569)), (' B 254  SER  O  ', ' B 255  ALA  HB3', -0.402, (38.554, -32.313, -8.099)), (' A 171  VAL HG22', ' A 172  HIS  H  ', -0.401, (61.741, -45.575, 0.424))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
