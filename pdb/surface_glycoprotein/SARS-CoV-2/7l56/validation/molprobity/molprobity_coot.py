# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 521 ', 'PRO', None, (230.227, 182.92900000000012, 211.514)), ('A', '1040 ', 'VAL', None, (201.948, 195.776, 148.494)), ('B', ' 521 ', 'PRO', None, (173.817, 190.401, 210.643)), ('C', ' 521 ', 'PRO', None, (206.87600000000012, 236.656, 211.06)), ('J', ' 100I', 'TYR', None, (210.02000000000012, 168.342, 244.587))]
data['rota'] = [('A', ' 690 ', 'GLN', 0.09416795295703785, (187.438, 162.347, 170.12))]
data['cbeta'] = [('B', ' 432 ', 'CYS', ' ', 0.2703394208869682, (187.815, 195.96600000000012, 225.181))]
data['probe'] = [(' A 676  THR  HA ', ' A 690  GLN  N  ', -0.928, (189.625, 161.528, 168.389)), (' F  50  TRP  CE3', ' F  52  ASN  OD1', -0.819, (169.783, 226.164, 245.563)), (' A 675  GLN  O  ', ' A 690  GLN  N  ', -0.706, (189.38, 163.407, 168.713)), (' F  50  TRP  CZ3', ' F  52  ASN  OD1', -0.698, (169.836, 226.562, 245.085)), (' G  50  ASP  OD1', ' G  51  VAL  N  ', -0.685, (158.646, 208.246, 246.865)), (' B 784  GLN  OE1', ' B1030  SER  OG ', -0.68, (213.547, 208.58, 155.56)), (' C 484  GLU  CD ', ' F  52  ASN  ND2', -0.652, (171.664, 227.102, 242.072)), (' C 710  ASN  ND2', ' C 710  ASN  O  ', -0.644, (220.18, 222.917, 128.733)), (' C 290  ASP  OD2', ' C 293  LEU  N  ', -0.626, (240.156, 204.856, 193.12)), (' F  50  TRP  HE3', ' F  52  ASN  OD1', -0.577, (169.973, 226.495, 246.551)), (' A 983  ARG  NH2', ' B 517  LEU  O  ', -0.573, (183.085, 194.941, 212.131)), (' B1031  GLU  OE2', ' C1039  ARG  NE ', -0.566, (206.71, 204.165, 152.229)), (' C 484  GLU  OE2', ' F  52  ASN  ND2', -0.54, (172.063, 226.842, 242.608)), (' I   3  BMA  O4 ', ' J 100F TYR  OH ', -0.536, (213.503, 174.178, 240.713)), (' A 869  MET  HE1', ' B 669  GLY  CA ', -0.531, (176.373, 213.645, 167.385)), (' A1006  THR  OG1', ' C1005  GLN  NE2', -0.528, (199.763, 199.646, 189.45)), (' D   1  NAG  O3 ', ' D   1  NAG  O7 ', -0.528, (196.146, 178.79, 117.475)), (' P   2  NAG  O3 ', ' P   2  NAG  O7 ', -0.522, (217.546, 230.47, 241.827)), (' A 454  ARG  NH2', ' A 469  SER  O  ', -0.521, (237.758, 210.485, 232.163)), (' B 755  GLN  O  ', ' C 968  SER  OG ', -0.512, (216.125, 198.995, 199.798)), (' B  34  ARG  NH1', ' B  91  TYR  OH ', -0.509, (187.571, 249.271, 199.305)), (' F  50  TRP  HZ3', ' F  52  ASN  ND2', -0.504, (170.58, 227.207, 243.775)), (' C 117  LEU HD23', ' C 118  LEU  N  ', -0.503, (250.582, 192.515, 220.467)), (' A 869  MET  HE1', ' B 669  GLY  HA3', -0.503, (175.454, 213.714, 167.741)), (' F 100J TYR  OH ', ' M   6  GAL  O6 ', -0.497, (165.669, 217.087, 239.462)), (' C 805  ILE HD12', ' C1063  LEU HD12', -0.485, (220.684, 187.676, 151.67)), (' A 616  ASN  OD1', ' A 644  GLN  NE2', -0.485, (210.896, 164.822, 182.287)), (' B 869  MET  HE1', ' C 669  GLY  HA3', -0.484, (226.573, 221.476, 167.519)), (' C 328  ARG  NH1', ' C 531  THR  O  ', -0.48, (225.707, 238.56, 211.579)), (' F  58  ASN  OD1', ' F  59  TYR  N  ', -0.476, (163.428, 231.047, 247.027)), (' I   1  NAG  O6 ', ' I   2  NAG  H82', -0.474, (220.752, 183.812, 244.657)), (' A 676  THR  CA ', ' A 690  GLN  N  ', -0.473, (189.11, 162.055, 167.67)), (' B 804  GLN  OE1', ' B1307  NAG  O6 ', -0.469, (208.164, 236.649, 149.287)), (' C 484  GLU  CD ', ' F  52  ASN HD21', -0.467, (170.767, 226.689, 242.706)), (' L   6  GLN  NE2', ' L  86  TYR  O  ', -0.455, (238.313, 241.686, 260.648)), (' C1072  GLU  N  ', ' C1072  GLU  OE1', -0.452, (227.378, 210.384, 137.677)), (' B 379  CYS  HA ', ' B 432  CYS  CB ', -0.445, (188.797, 196.328, 224.455)), (' A 328  ARG  NH2', ' A 531  THR  O  ', -0.445, (222.274, 166.112, 212.291)), (' C 475  ALA  O  ', ' C 487  ASN  ND2', -0.439, (163.695, 219.966, 231.2)), (' C 484  GLU  CD ', ' F  52  ASN HD22', -0.438, (172.063, 227.203, 242.5)), (' C1301  NAG  O3 ', ' C1301  NAG  O7 ', -0.436, (252.731, 196.065, 238.176)), (' B 763  LEU HD12', ' B1008  VAL HG21', -0.434, (211.368, 208.43, 187.609)), (' A 699  LEU HD22', ' C 873  TYR  CZ ', -0.431, (205.298, 178.222, 160.4)), (' A 976  VAL  O  ', ' A 976  VAL HG13', -0.428, (183.339, 199.87, 206.651)), (' A 328  ARG  NE ', ' A 531  THR  O  ', -0.427, (222.154, 167.276, 212.803)), (' C 905  ARG  NH1', ' C1049  LEU  O  ', -0.425, (211.979, 193.478, 144.312)), (' C 804  GLN  NE2', ' C1308  NAG  O6 ', -0.422, (230.244, 181.94, 150.171)), (' B 726  ILE HD12', ' B1061  VAL HG22', -0.421, (204.179, 223.181, 161.276)), (' H  96  LEU HD12', ' H 100I TYR  O  ', -0.42, (232.808, 226.78, 245.854)), (' B 379  CYS  HA ', ' B 432  CYS  HB3', -0.419, (189.131, 196.537, 224.151)), (' C 780  GLU  O  ', ' C 784  GLN  NE2', -0.418, (203.513, 189.077, 159.571)), (' H  35  HIS  ND1', ' H  48  MET  HE1', -0.416, (239.299, 226.694, 251.917)), (' B 883  THR HG21', ' C 705  VAL  CG1', -0.412, (221.861, 220.704, 142.828)), (' F  50  TRP  HZ3', ' F  52  ASN HD21', -0.41, (170.468, 226.975, 243.765)), (' A 976  VAL HG13', ' A 979  ASP  HB2', -0.409, (182.569, 199.514, 207.443)), (' B 883  THR HG21', ' C 705  VAL HG13', -0.409, (222.099, 221.255, 143.052)), (' B1306  NAG  O3 ', ' B1306  NAG  O7 ', -0.401, (170.287, 204.256, 129.8)), (' M   4  MAN  O3 ', ' M   5  NAG  N2 ', -0.401, (167.257, 208.886, 242.503))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
