# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A  38  ASP  OD2', ' A2101  HOH  O  ', -0.886, (-38.403, 56.79, -5.854)), (' A 292  THR HG23', ' A2005  EDO  H11', -0.723, (-43.941, 18.362, -4.799)), (' A 293  LYS  H  ', ' A2005  EDO  H22', -0.715, (-43.186, 18.75, -2.304)), (' A 212  LEU  H  ', ' A2009  EDO  H12', -0.708, (-19.723, 14.362, -9.527)), (' B 223  ILE HD12', ' B 224  PRO  HD2', -0.693, (-50.777, 60.695, 40.633)), (' B 178  ASN  OD1', ' B 180  GLU  HG2', -0.621, (-38.759, 40.016, 28.225)), (' A 241  SER  O  ', ' A2010  EDO  H11', -0.614, (-19.174, 26.004, 5.372)), (' A 167  ARG  HG3', ' A2008  EDO  H12', -0.604, (-18.613, 25.811, -10.05)), (' B 139  ARG  NH2', ' B 144  ASP  OD2', -0.601, (-41.725, 40.823, 1.574)), (' B 127  LYS  NZ ', ' B 138  TYR  OH ', -0.589, (-33.291, 41.348, 15.907)), (' A 195  GLN HE22', ' A 317  PRO  HB3', -0.586, (2.102, 11.489, 0.212)), (' B  67  SER  O  ', ' B  71  GLU  HG2', -0.569, (-48.903, 27.587, 17.877)), (' A  97  PRO  HA ', ' B 405  EDO  H21', -0.566, (-42.211, 36.193, -0.728)), (' B 227  CYS  SG ', ' B 228  GLY  N  ', -0.557, (-53.899, 62.132, 50.685)), (' B 190  CYS  SG ', ' B 229  ARG  NH1', -0.556, (-48.71, 64.648, 50.302)), (' B 112  CYS  H  ', ' F   5  GVE  HB1', -0.542, (-51.503, 59.197, 6.503)), (' A 137  TYR  CE2', ' A 141  ARG  HD2', -0.529, (-26.247, 37.125, 3.286)), (' A 307  LYS  HG2', ' A2010  EDO  H22', -0.529, (-21.782, 24.791, 6.75)), (' B 253  LYS  HE3', ' B 298  LYS  HE2', -0.529, (-37.179, 77.71, 19.45)), (' B 404  EDO  H22', ' B 405  EDO  O1 ', -0.521, (-45.164, 36.561, 2.882)), (' B 309  THR HG23', ' B 310  SER  N  ', -0.516, (-27.967, 52.608, 30.373)), (' A 131  PRO  HG2', ' A2006  EDO  H11', -0.507, (-18.319, 51.187, 1.816)), (' A2006  EDO  O1 ', ' A2103  HOH  O  ', -0.506, (-19.77, 54.501, 0.837)), (' B 124  LEU  HA ', ' B 412  EDO  H12', -0.5, (-34.243, 52.6, 19.722)), (' A  79  SER  OG ', ' A  83  ARG  NH1', -0.491, (-19.445, 49.147, -16.427)), (' A 125  GLU  OE2', ' A2010  EDO  H21', -0.49, (-21.435, 27.511, 7.753)), (' A2005  EDO  H21', ' B   9  PHE  CZ ', -0.489, (-45.152, 20.058, -1.307)), (' A 207  MET  HB3', ' A2008  EDO  H11', -0.489, (-15.963, 26.075, -8.164)), (' B 186  LEU  HB2', ' B 198  THR  OG1', -0.487, (-43.271, 55.518, 40.767)), (' B 235  LEU HD21', ' B 238  GLN  HB2', -0.47, (-35.496, 56.33, 33.914)), (' A 302  THR HG23', ' A 303  ASP  OD2', -0.469, (-24.584, 23.578, -10.815)), (' A 195  GLN HE22', ' A 317  PRO  CB ', -0.469, (2.758, 11.162, 0.198)), (' B  69  ALA  HB1', ' B 409  EDO  H11', -0.467, (-53.732, 32.351, 15.017)), (' A 112  CYS  HB3', ' D   5  GVE  HG1', -0.465, (-35.666, 30.427, -13.865)), (' B 278  THR HG23', ' B 284  TYR  HB2', -0.46, (-33.931, 62.423, 10.074)), (' A   6  ILE HG13', ' A  22  VAL HG12', -0.459, (-35.263, 70.334, -7.923)), (' B  19  THR  H  ', ' B 403  EDO  H12', -0.456, (-48.508, 18.592, 4.711)), (' B  63  ASP  OD1', ' B 501  HOH  O  ', -0.454, (-56.836, 21.153, 21.055)), (' B 182  ALA  HA ', ' B 239  GLU  O  ', -0.453, (-36.141, 48.556, 31.449)), (' B 191  LYS  HG2', ' B 229  ARG  CZ ', -0.449, (-47.148, 67.22, 50.558)), (' B 114  LEU HD11', ' B 153  LEU HD21', -0.445, (-52.115, 51.274, 9.178)), (' B 187  ASN  O  ', ' B 233  GLN  HA ', -0.445, (-42.063, 60.65, 43.175)), (' A 224  PRO  HA ', ' A 230  ASP  OD1', -0.443, (-4.704, 11.122, -17.236)), (' B 191  LYS  H  ', ' B 229  ARG  NH1', -0.44, (-47.286, 65.159, 51.309)), (' B 220  GLY  HA2', ' B 234  TYR  HB3', -0.438, (-40.314, 64.209, 39.887)), (' A 185  VAL HG12', ' A 236  VAL  HB ', -0.436, (-3.047, 18.266, 0.982)), (' A 137  TYR  O  ', ' A 141  ARG  HG3', -0.436, (-28.684, 38.616, 2.636)), (' B  86  SER  OG ', ' B 408  EDO  H12', -0.435, (-59.503, 43.501, 4.214)), (' A  71  GLU  HB3', ' A2006  EDO  H22', -0.433, (-16.396, 53.81, 2.061)), (' A 170  MET  HB3', ' A 170  MET  HE3', -0.429, (-20.355, 30.375, -5.842)), (' A 273  HIS  CD2', ' D   5  GVE  HG2', -0.429, (-35.918, 27.965, -15.096)), (' A 227  CYS  SG ', ' A 229  ARG  HB2', -0.428, (1.929, 8.159, -16.308)), (' A 269  TYR  CZ ', ' D   2  73O  H10', -0.425, (-23.255, 20.927, -20.151)), (' B 223  ILE HG13', ' B 224  PRO  O  ', -0.425, (-50.798, 59.945, 43.874)), (' B 152  ILE HG12', ' B 173  LEU HD11', -0.423, (-46.604, 48.355, 14.694)), (' B 229  ARG  NH2', ' B 230  ASP  O  ', -0.42, (-48.133, 66.978, 47.754)), (' A 234  TYR  OH ', ' A2102  HOH  O  ', -0.42, (-1.259, 12.612, 0.368)), (' B 253  LYS  HG2', ' B 298  LYS  HG3', -0.419, (-38.19, 75.432, 19.661)), (' B 207  MET  HE3', ' B 244  MET  SD ', -0.416, (-45.66, 55.402, 23.081)), (' B 309  THR HG23', ' B 310  SER  H  ', -0.412, (-27.841, 52.78, 30.604)), (' A2005  EDO  H12', ' B   7  LYS  CD ', -0.41, (-46.765, 17.773, -3.429)), (' B  23  ASP  OD1', ' B  25  SER  HB3', -0.41, (-62.782, 18.413, -8.651)), (' B 309  THR  CG2', ' B 310  SER  N  ', -0.407, (-28.13, 52.627, 30.172)), (' B 185  VAL  HB ', ' B 237  GLN  HB3', -0.404, (-35.632, 53.355, 39.595)), (' A2005  EDO  H12', ' B   7  LYS  HD2', -0.402, (-46.296, 17.72, -3.715))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
