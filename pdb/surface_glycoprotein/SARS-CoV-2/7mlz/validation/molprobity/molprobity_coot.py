# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 348 ', 'ALA', 0.0, (239.83400000000015, 271.897, 271.804))]
data['omega'] = [('L', '  95 ', 'PRO', None, (227.746, 276.773, 305.924))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 351  TYR  HB3', ' A 454  ARG  HB2', -0.812, (232.908, 266.549, 278.253)), (' H 148  GLU  HG2', ' H 202  PRO  HG2', -0.797, (243.513, 249.96, 324.734)), (' A 393  THR  HA ', ' A 522  ALA  HA ', -0.779, (233.673, 259.052, 250.198)), (' H  70  THR  HB ', ' H  79  TYR  HB2', -0.776, (242.49, 260.56, 302.125)), (' A 379  CYS  HB2', ' A 432  CYS  HA ', -0.744, (242.518, 254.484, 263.137)), (' H 155  ASN  HB3', ' H 195  ILE  HB ', -0.712, (233.024, 237.314, 339.288)), (' L 149  LYS  H  ', ' L 193  ALA  HB3', -0.711, (229.582, 265.547, 354.28)), (' A 357  ARG  NH2', ' A 396  TYR  OH ', -0.71, (230.003, 265.189, 256.988)), (' A 426  PRO  HG2', ' A 429  PHE  HB2', -0.705, (232.435, 254.14, 264.885)), (' H 162  GLY  HA3', ' H 183  THR HG22', -0.701, (220.275, 246.445, 340.396)), (' A 379  CYS  HB2', ' A 432  CYS  CA ', -0.699, (243.244, 254.366, 262.892)), (' A 417  LYS  O  ', ' A 422  ASN  ND2', -0.698, (234.63, 261.008, 279.256)), (' H 154  TRP  HZ3', ' H 194  TYR  HB3', -0.686, (230.428, 240.069, 342.675)), (' L  38  GLN  NE2', ' L  39  LYS  O  ', -0.685, (223.097, 257.106, 319.575)), (' A 441  LEU  O  ', ' A 509  ARG  NH2', -0.685, (250.073, 271.356, 273.378)), (' A 395  VAL HG23', ' A 524  VAL HG21', -0.68, (238.953, 262.37, 254.016)), (' L 136  LEU HD11', ' L 175  LEU HD23', -0.668, (220.507, 259.122, 340.985)), (' A 433  VAL HG22', ' A 512  VAL HG22', -0.659, (240.479, 257.839, 266.959)), (' L  78  LEU HD13', ' L  82  ASP  HB3', -0.656, (209.283, 256.19, 318.862)), (' A 346  ARG  NH1', ' A 347  PHE  O  ', -0.644, (242.731, 273.306, 273.501)), (' L 118  PHE  HB2', ' L 133  VAL  HB ', -0.64, (231.162, 253.493, 347.88)), (' A 406  GLU  HG2', ' A 409  GLN  HG3', -0.634, (239.842, 257.771, 279.835)), (' A 344  ALA  HB3', ' A 347  PHE  HE1', -0.631, (246.667, 272.637, 266.913)), (' A 466  ARG  HD2', ' A 468  ILE HD11', -0.63, (230.214, 270.574, 268.941)), (' H  47  TRP  HZ2', ' H  50  TRP  HB3', -0.621, (229.706, 269.062, 303.428)), (' H  71  ARG  HB3', ' H  73  MET  SD ', -0.61, (239.087, 261.587, 295.11)), (' H  28  THR  OG1', ' H  97  CYS  O  ', -0.602, (225.48, 254.503, 292.709)), (' L  36  TYR  HE2', ' L  89  GLN  HG3', -0.599, (220.908, 266.337, 308.614)), (' H 124  LEU HD21', ' H 141  LEU  HB2', -0.595, (234.711, 251.524, 343.072)), (' L 133  VAL HG13', ' L 178  THR HG22', -0.593, (231.158, 255.134, 344.639)), (' A 391  CYS  HB2', ' A 524  VAL  O  ', -0.588, (239.717, 259.165, 249.565)), (' L  25  ALA  HB3', ' L  69  THR  HA ', -0.587, (213.214, 279.108, 309.769)), (' H  71  ARG  HG3', ' H  71  ARG HH11', -0.581, (239.921, 264.308, 294.524)), (' H 147  PRO  HB3', ' H 176  TYR  CZ ', -0.578, (239.331, 257.894, 326.774)), (' L  18  ARG  HD2', ' L  18  ARG  O  ', -0.567, (200.549, 265.516, 319.037)), (' A 419  ALA  HA ', ' A 424  LYS  HA ', -0.567, (232.354, 257.852, 273.733)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.565, (238.928, 265.36, 255.817)), (' L  61  ARG  O  ', ' L  76  SER  OG ', -0.563, (201.405, 258.99, 314.32)), (' A 405  ASP  N  ', ' A 504  GLY  O  ', -0.561, (247.87, 258.173, 282.183)), (' A 475  ALA  O  ', ' A 487  ASN  ND2', -0.559, (221.097, 264.046, 294.715)), (' L  12  SER  HB3', ' L 105  GLU  HB3', -0.557, (209.853, 262.088, 330.168)), (' A 456  PHE  HZ ', ' H  53  GLY  HA3', -0.554, (230.72, 262.477, 290.803)), (' A 362  VAL HG13', ' A 526  GLY  HA3', -0.549, (245.645, 261.509, 246.617)), (' L 117  ILE HD13', ' L 208  SER  HB3', -0.547, (229.699, 256.67, 355.569)), (' L 189  HIS  ND1', ' L 192  TYR  OH ', -0.545, (239.237, 261.279, 353.632)), (' H  12  LYS  HE3', ' H  18  VAL  HA ', -0.545, (246.25, 260.689, 312.774)), (' L 146  VAL HG12', ' L 196  VAL HG12', -0.545, (222.911, 262.548, 346.286)), (' H  38  ARG  HD2', ' H  39  GLN  N  ', -0.542, (232.26, 264.935, 317.226)), (' H  21  SER  HB3', ' H  79  TYR  HE1', -0.54, (241.459, 255.172, 304.863)), (' L 107  ARG  HE ', ' L 108  ARG  H  ', -0.539, (206.926, 259.268, 335.524)), (' H  40  ALA  HB3', ' H  43  GLN  HB2', -0.537, (230.017, 265.389, 322.546)), (' A 475  ALA  HB3', ' A 487  ASN  HB3', -0.535, (222.419, 266.411, 293.615)), (' L 116  PHE  HE1', ' L 135  LEU  HB3', -0.534, (224.921, 252.853, 345.836)), (' A 452  LEU  HG ', ' A 494  SER  HA ', -0.527, (239.017, 271.676, 284.118)), (' H 195  ILE HG22', ' H 197  ASN  H  ', -0.522, (234.424, 239.464, 338.28)), (' H   6  GLN  H  ', ' H 105  GLN  NE2', -0.522, (233.548, 250.59, 310.464)), (' A 365  TYR  O  ', ' A 368  LEU  HG ', -0.521, (249.686, 259.291, 257.365)), (' L 163  VAL HG23', ' L 175  LEU  HB3', -0.52, (223.047, 259.717, 337.2)), (' L  21  LEU HD22', ' L 102  THR HG21', -0.515, (211.322, 267.346, 320.635)), (' H  18  VAL HG12', ' H  82  LEU  HB3', -0.515, (243.22, 264.999, 312.025)), (' H 126  PRO  HA ', ' L 118  PHE  HE1', -0.515, (228.75, 247.985, 349.772)), (' H  36  TRP  CE3', ' H  80  MET  HE2', -0.514, (236.134, 262.892, 308.648)), (' A 403  ARG  NH2', ' A 406  GLU  OE1', -0.513, (241.081, 260.187, 283.399)), (' L 208  SER  OG ', ' L 211  ARG  NH1', -0.513, (232.116, 256.785, 356.684)), (' A 454  ARG  NE ', ' A 467  ASP  OD2', -0.507, (228.859, 267.493, 278.716)), (' H 139  GLY  HA3', ' H 181  VAL  HA ', -0.507, (228.91, 247.888, 341.505)), (' H   2  MET  N  ', ' H  26  GLY  HA3', -0.505, (225.859, 247.849, 300.145)), (' H  32  SER  OG ', ' H  33  ALA  N  ', -0.505, (228.12, 260.335, 297.136)), (' H  97  CYS  HA ', ' H 100B CYS  CB ', -0.503, (221.773, 257.717, 294.039)), (' L 186  TYR  O  ', ' L 190  LYS  NZ ', -0.503, (242.883, 259.099, 358.066)), (' H  68  THR HG22', ' H  81  GLU  OE2', -0.502, (245.111, 268.708, 304.997)), (' H 196  CYS  O  ', ' H 198  VAL HG23', -0.5, (236.172, 243.067, 337.238)), (' L 108  ARG  HE ', ' L 140  TYR  HB2', -0.5, (211.772, 257.243, 337.529)), (' L 182  SER  OG ', ' L 185  ASP  OD2', -0.496, (243.921, 264.578, 352.378)), (' A 424  LYS  HB2', ' A 461  LEU HD23', -0.491, (229.803, 259.047, 273.492)), (' H 201  LYS  HG2', ' H 202  PRO  HD3', -0.489, (241.404, 247.167, 325.291)), (' L  27A SER  HB2', ' L  68  GLY  HA3', -0.489, (210.557, 279.517, 305.505)), (' A 344  ALA  HB3', ' A 347  PHE  CE1', -0.483, (246.651, 272.268, 267.763)), (' H 164  HIS  N  ', ' H 181  VAL  O  ', -0.483, (225.588, 248.111, 337.952)), (' H 124  LEU HD22', ' L 133  VAL HG21', -0.481, (233.475, 252.336, 345.628)), (' A 461  LEU  HG ', ' A 462  LYS  N  ', -0.48, (226.151, 259.963, 273.351)), (' A 453  TYR  HB3', ' A 455  LEU  HG ', -0.479, (234.088, 264.755, 283.685)), (' L  37  GLN HE22', ' L  39  LYS  HE3', -0.478, (216.03, 255.731, 318.56)), (' L 185  ASP  OD1', ' L 186  TYR  N  ', -0.478, (245.055, 261.928, 354.635)), (' H 126  PRO  HA ', ' L 118  PHE  CE1', -0.477, (228.619, 248.444, 349.678)), (' H  88  ALA  HB3', ' H  90  TYR  CE1', -0.477, (236.579, 263.451, 316.672)), (' A 422  ASN  OD1', ' A 454  ARG  HB3', -0.475, (232.915, 264.499, 279.027)), (' H 121  VAL HG12', ' H 142  VAL  HA ', -0.475, (239.47, 250.172, 337.725)), (' L 113  PRO  HB3', ' L 137  ASN  O  ', -0.472, (216.914, 255.497, 344.34)), (' L 107  ARG  HE ', ' L 109  THR  H  ', -0.468, (206.136, 259.008, 336.672)), (' A 409  GLN  OE1', ' A 416  GLY  HA3', -0.468, (237.105, 254.636, 280.736)), (' L  67  SER  N  ', ' L  70  ASP  O  ', -0.465, (207.208, 275.027, 309.02)), (' A 468  ILE  O  ', ' A 468  ILE HG22', -0.465, (227.61, 273.83, 273.859)), (' H 212  GLU  HG2', ' H 213  PRO  HD2', -0.464, (231.831, 239.391, 351.942)), (' H 154  TRP  CZ3', ' H 194  TYR  HB3', -0.464, (230.279, 240.376, 342.325)), (' A 400  PHE  HB3', ' A 402  ILE HD11', -0.462, (241.176, 263.137, 274.206)), (' L 116  PHE  CE1', ' L 135  LEU  HB3', -0.462, (224.462, 252.88, 346.335)), (' L 134  CYS  HB2', ' L 177  SER  OG ', -0.461, (227.458, 258.986, 346.897)), (' A 456  PHE  HB3', ' A 473  TYR  CD2', -0.461, (225.483, 264.449, 287.251)), (' H   6  GLN  H  ', ' H 105  GLN HE22', -0.459, (233.453, 250.483, 310.235)), (' L   8  PRO  HG2', ' L  21  LEU  HA ', -0.458, (209.2, 269.52, 320.012)), (' L   2  ILE  O  ', ' L   2  ILE HG13', -0.458, (223.44, 279.741, 315.72)), (' A 346  ARG HH21', ' A 450  ASN  HB3', -0.456, (241.162, 275.005, 277.24)), (' H 152  VAL HG22', ' H 198  VAL HG22', -0.455, (234.737, 245.539, 334.613)), (' A 418  ILE  HA ', ' A 422  ASN  HB2', -0.455, (234.867, 260.176, 277.607)), (' A 353  TRP  CH2', ' A 355  ARG  HD2', -0.454, (232.723, 264.731, 266.352)), (' H  21  SER  HB3', ' H  79  TYR  CE1', -0.454, (241.341, 255.564, 305.008)), (' H   9  PRO  HB3', ' H 108  MET  HB3', -0.453, (238.338, 254.382, 319.224)), (' A 382  VAL HG11', ' A 390  LEU HD11', -0.453, (242.227, 252.009, 254.615)), (' L 164  THR HG22', ' L 174  SER  H  ', -0.451, (221.03, 256.274, 335.73)), (' L 158  ASN  OD1', ' L 180  THR  OG1', -0.45, (238.931, 262.991, 342.785)), (' A 495  TYR  HB3', ' A 497  PHE  CD2', -0.448, (245.042, 268.304, 282.783)), (' A 393  THR  O  ', ' A 523  THR  OG1', -0.447, (235.597, 262.643, 250.918)), (' L  35  TRP  HZ2', ' L  71  PHE  HB3', -0.447, (211.246, 271.112, 309.706)), (' L  20  THR  OG1', ' L  73  LEU  O  ', -0.447, (204.91, 268.759, 315.927)), (' L 108  ARG  O  ', ' L 109  THR  OG1', -0.446, (205.488, 256.121, 339.0)), (' H  71  ARG  HG3', ' H  71  ARG  NH1', -0.446, (239.202, 263.906, 294.361)), (' L  21  LEU  O  ', ' L  73  LEU  HG ', -0.445, (208.449, 269.057, 315.284)), (' L 179  LEU HD13', ' L 181  LEU HD23', -0.445, (235.829, 263.608, 348.827)), (' A 396  TYR  HE2', ' A 516  GLU  OE2', -0.443, (230.961, 261.893, 258.411)), (' H  18  VAL  HB ', ' H  82C LEU HD21', -0.443, (244.951, 263.288, 315.027)), (' A 379  CYS  HB2', ' A 433  VAL  H  ', -0.441, (243.494, 254.691, 264.095)), (' A 426  PRO  HG3', ' A 464  PHE  CE2', -0.44, (230.713, 257.087, 264.666)), (' A 379  CYS  CB ', ' A 433  VAL  H  ', -0.44, (243.732, 254.952, 264.566)), (' L 151  ASP  HB3', ' L 190  LYS  H  ', -0.438, (237.06, 263.243, 358.916)), (' A 396  TYR  HB2', ' A 514  SER  HB3', -0.437, (235.47, 261.32, 261.73)), (' L  89  GLN  NE2', ' L  90  GLN  O  ', -0.435, (221.997, 269.725, 306.487)), (' A 443  SER  HB2', ' A 507  PRO  HG2', -0.434, (250.008, 268.59, 279.25)), (' H  29  PHE  CZ ', ' H  52A VAL HG21', -0.434, (234.417, 258.873, 297.33)), (' H  13  LYS  O  ', ' H  15  GLY  N  ', -0.433, (249.022, 265.877, 319.11)), (' L  66  GLY  HA3', ' L  72  THR  H  ', -0.432, (206.825, 272.902, 310.227)), (' H 181  VAL HG11', ' L 135  LEU HD13', -0.43, (226.261, 251.096, 343.191)), (' A 410  ILE HG23', ' A 425  LEU HD21', -0.43, (238.008, 256.691, 270.712)), (' L  35  TRP  CE3', ' L  48  ILE HG23', -0.429, (212.101, 265.82, 308.162)), (' L  67  SER  OG ', ' L  68  GLY  N  ', -0.426, (207.53, 278.013, 306.864)), (' H 146  PHE  CD1', ' H 147  PRO  HD2', -0.426, (244.882, 256.721, 327.151)), (' A 402  ILE  CG2', ' A 406  GLU  HB3', -0.426, (242.593, 260.022, 279.358)), (' H  97  CYS  HA ', ' H 100B CYS  HB3', -0.426, (222.069, 257.344, 293.994)), (' A 336  CYS  O  ', ' A 338  PHE  N  ', -0.425, (245.617, 269.023, 255.429)), (' L 113  PRO  HD3', ' L 139  PHE  HE1', -0.424, (215.213, 259.073, 345.342)), (' H  18  VAL  CG1', ' H  82  LEU  HB3', -0.424, (243.025, 264.444, 312.324)), (' H  66  ARG  HB3', ' H  82A SER  O  ', -0.423, (245.055, 270.894, 312.66)), (' L 117  ILE HG21', ' L 208  SER  HB3', -0.423, (229.147, 256.34, 355.803)), (' A 461  LEU  HG ', ' A 462  LYS  H  ', -0.422, (225.683, 259.905, 273.128)), (' L 149  LYS  HE2', ' L 154  LEU HD21', -0.421, (233.21, 272.698, 357.413)), (' A 377  PHE  HD1', ' A 434  ILE HG12', -0.42, (248.009, 256.807, 264.481)), (' A 493  GLN  OE1', ' H  54  SER  HB3', -0.42, (235.952, 266.863, 290.062)), (' A 336  CYS  HB3', ' A 361  CYS  HB2', -0.419, (242.903, 268.963, 250.695)), (' H 203  SER  O  ', ' H 203  SER  OG ', -0.417, (246.483, 246.03, 329.858)), (' L 120  PRO  HD3', ' L 132  VAL HG12', -0.416, (235.275, 256.157, 352.098)), (' A 495  TYR  HB3', ' A 497  PHE  HD2', -0.416, (245.172, 268.022, 283.254)), (' A 339  GLY  HA3', ' B   1  NAG  C8 ', -0.415, (250.486, 269.705, 258.657)), (' A 524  VAL  O  ', ' A 524  VAL HG23', -0.414, (239.558, 260.227, 250.969)), (' L 148  TRP  HZ2', ' L 156  SER  HB2', -0.412, (233.642, 270.727, 348.939)), (' L  11  LEU  O  ', ' L 105  GLU  N  ', -0.41, (210.723, 261.934, 327.249)), (' A 429  PHE  HZ ', ' A 514  SER  HA ', -0.41, (236.63, 257.868, 262.365)), (' L   3  VAL HG22', ' L  26  SER  HB3', -0.408, (218.698, 281.254, 312.846)), (' L  48  ILE HG13', ' L  53  SER  O  ', -0.408, (208.611, 262.744, 304.979)), (' L 180  THR  O  ', ' L 181  LEU HD22', -0.408, (238.046, 264.449, 346.524)), (' A 411  ALA  O  ', ' A 413  GLY  N  ', -0.408, (234.393, 251.768, 272.697)), (' L  79 AGLU  HB2', ' L  81  GLU  HG3', -0.407, (208.204, 251.386, 319.526)), (' H 195  ILE HG22', ' H 197  ASN  N  ', -0.405, (235.025, 239.282, 338.667)), (' L 196  VAL  O  ', ' L 204  PRO  HG3', -0.405, (219.457, 263.361, 350.949)), (' H 162  GLY  O  ', ' H 182  VAL  HA ', -0.404, (223.647, 247.001, 339.464)), (' H  35  GLN  HG2', ' H  93  ALA  HB3', -0.404, (227.302, 262.375, 305.656)), (' L 161  GLU  HA ', ' L 161  GLU  OE1', -0.404, (229.252, 261.849, 341.406)), (' L 108  ARG  HG2', ' L 108  ARG  O  ', -0.402, (207.462, 255.611, 337.875)), (' H  41  ARG  H  ', ' H  41  ARG  HD3', -0.402, (232.127, 263.062, 325.203)), (' A 491  PRO  HG2', ' A 492  LEU  HG ', -0.401, (229.868, 270.921, 283.717))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
