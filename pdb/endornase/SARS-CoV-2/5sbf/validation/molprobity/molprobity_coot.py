# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  29 ', 'ASN', 0.00020354232139417822, (2.7699999999999836, -80.426, 30.216999999999995)), ('B', '  28 ', 'ASN', 0.03562018363676956, (72.95600000000002, -38.562, -16.981999999999992)), ('B', '  29 ', 'ASN', 0.0005686103954679078, (69.605, -39.239000000000004, -15.285999999999998))]
data['omega'] = []
data['rota'] = [('A', ' 109 ', 'LYS', 0.0, (25.551000000000013, -65.698, 32.453)), ('A', ' 147 ', 'SER', 0.10638955676341055, (37.475000000000016, -65.255, 7.555999999999999)), ('A', ' 226 ', 'LYS', 0.13173271810452689, (30.952000000000027, -99.16400000000003, -14.154999999999996)), ('A', ' 264 ', 'GLU', 0.08649290793689556, (7.432000000000002, -98.561, 7.056999999999999)), ('A', ' 330 ', 'MET', 0.1780700274580588, (31.909000000000006, -103.189, 7.422999999999999)), ('B', '   1 ', 'SER', 0.1463494987496494, (56.736000000000004, -27.655, -18.733)), ('B', ' 115 ', 'ILE', 0.14578897002705085, (39.895, -46.722000000000016, -19.676)), ('B', ' 200 ', 'LEU', 0.191082854194891, (65.717, -51.78200000000001, 13.378999999999996)), ('B', ' 330 ', 'MET', 0.006581960146279801, (55.115000000000016, -72.858, 7.252)), ('B', ' 345 ', 'LEU', 0.07744701180608805, (59.51100000000001, -68.419, 0.972)), ('B', ' 346 ', 'GLN', 0.0563271051458825, (57.259, -69.16000000000003, -2.079))]
data['cbeta'] = [('A', '  25 ', 'SER', ' ', 0.2504972561530702, (-3.882000000000003, -71.764, 32.695)), ('A', ' 199 ', 'ASN', ' ', 0.29909407407222693, (12.384000000000015, -86.112, 3.7229999999999985)), ('B', ' 191 ', 'GLU', ' ', 0.25593816497933974, (39.335000000000015, -60.335, 10.161999999999997)), ('B', ' 199 ', 'ASN', ' ', 0.3449554197882586, (63.714, -48.598, 11.478999999999996))]
data['probe'] = [(' A  28 AASN  HB2', ' A 634  HOH  O  ', -0.659, (-2.8, -81.361, 29.59)), (' A 258  PHE  HE1', ' A 565  HOH  O  ', -0.649, (6.455, -95.384, 2.474)), (' B  28 AASN  HB2', ' B 641  HOH  O  ', -0.562, (74.885, -37.028, -15.175)), (' A 188  GLN  HG2', ' A 915  HOH  O  ', -0.561, (45.168, -80.244, 9.669)), (' B   0  MET  HA ', ' B 692  HOH  O  ', -0.519, (53.698, -27.21, -16.257)), (' B 219  ASP  HB2', ' B 873  HOH  O  ', -0.518, (66.072, -66.452, 31.246)), (' B 137  ALA  O  ', ' B 181  LYS  HE2', -0.509, (32.672, -49.078, -7.841)), (' A 219  ASP  HB2', ' A 790  HOH  O  ', -0.494, (19.111, -103.286, -16.563)), (' B 401  CIT  C6 ', ' B 401  CIT  O4 ', -0.481, (65.114, -70.998, 9.733)), (' A   0  MET  HA ', ' A 548  HOH  O  ', -0.48, (11.306, -62.469, 31.042)), (' B 346  GLN  NE2', ' B 516  HOH  O  ', -0.477, (52.305, -70.728, -1.165)), (' B 200  LEU HD13', ' B 251  LEU HD11', -0.468, (64.193, -54.952, 12.116)), (' A 127  VAL HG21', ' A 863  HOH  O  ', -0.458, (24.876, -65.75, 18.988)), (' A 266  GLU  HB3', ' A 279  PHE  HB3', -0.452, (11.232, -100.125, 12.881)), (' B 118  PRO  HG2', ' B 726  HOH  O  ', -0.443, (41.164, -50.865, -18.157)), (' B  95  HIS  O  ', ' B 501  HOH  O  ', -0.431, (52.314, -44.44, -11.457)), (' A 242  HIS  HE1', ' A 825  HOH  O  ', -0.427, (19.291, -113.261, -1.915)), (' A 134  PHE  CZ ', ' A 181  LYS  HG3', -0.422, (38.871, -72.823, 19.004)), (' A 330  MET  O  ', ' A 341  PHE  HA ', -0.422, (30.536, -103.114, 4.351)), (' B 200  LEU  HA ', ' B 200  LEU HD12', -0.415, (65.069, -53.472, 14.53)), (' B  12  LYS  HE3', ' B  18  GLN  HG3', -0.412, (53.9, -21.309, -5.048)), (' A 313  VAL  O  ', ' A 333  CYS  HB2', -0.41, (36.958, -108.864, 0.656)), (' A  27  ILE HG23', ' A  32  TYR  HE1', -0.406, (-3.311, -77.378, 30.224)), (' B 143  ILE  HA ', ' B 177  ASN  O  ', -0.406, (39.707, -44.998, 3.433)), (' B  27  ILE  O  ', ' B  28 AASN  C  ', -0.405, (72.025, -37.528, -15.872)), (' B 200  LEU HD11', ' B 254  LEU  HB3', -0.401, (66.375, -56.64, 13.537)), (' A 216  LEU  HB3', ' A 220  GLU  HG3', -0.4, (19.378, -96.913, -16.519))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
