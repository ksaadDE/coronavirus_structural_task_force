# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A  38  ALA  HB3', ' A  41  LYS  HB2', -0.887, (261.442, 213.3, 139.474)), (' A   2  VAL HG23', ' A  25  SER  O  ', -0.754, (234.152, 214.393, 133.966)), (' A  32  VAL HG21', ' A  77  ILE HG13', -0.753, (240.817, 221.619, 137.23)), (' E 448  ASN  OD1', ' E 450  ASN  ND2', -0.749, (228.424, 230.776, 142.877)), (' A  27  LEU  HG ', ' A  70  ARG HH22', -0.741, (234.842, 221.676, 137.345)), (' E 495  TYR  HB3', ' E 497  PHE  CE1', -0.727, (225.762, 222.239, 147.941)), (' E 414  GLN  O  ', ' E 424  LYS  NZ ', -0.703, (226.938, 218.604, 167.702)), (' A  62  VAL  HB ', ' A  66  PHE  CD2', -0.679, (255.001, 226.011, 138.381)), (' A  24  VAL HG11', ' A  27  LEU HD13', -0.67, (236.414, 217.646, 135.985)), (' A  20  LEU HD23', ' A  81  MET  HE2', -0.669, (252.328, 223.548, 129.362)), (' A  84  LEU HD22', ' A 115  VAL HG21', -0.655, (260.849, 224.218, 130.19)), (' E 358  ILE  HB ', ' E 395  VAL HG23', -0.646, (220.531, 241.427, 168.094)), (' E 409  GLN  NE2', ' E 416  GLY  HA3', -0.635, (227.705, 216.294, 161.836)), (' A   6  GLU  HG3', ' A  22  CYS  SG ', -0.626, (244.102, 216.897, 130.939)), (' E 388  ASN  OD1', ' E 389  ASP  N  ', -0.625, (206.113, 239.14, 174.356)), (' E 472  ILE HG21', ' E 488  CYS  HB3', -0.625, (248.497, 218.766, 151.754)), (' E 383  SER  H  ', ' E 386  LYS  HE2', -0.624, (209.411, 229.765, 175.438)), (' A  72  ASN  ND2', ' A  72  ASN  O  ', -0.622, (230.683, 225.531, 134.997)), (' A  81  MET  HE1', ' A 113  VAL HG21', -0.608, (254.256, 222.578, 128.496)), (' E 406  GLU  HG2', ' E 409  GLN  OE1', -0.602, (225.289, 216.978, 158.628)), (' A  84  LEU HD22', ' A 115  VAL  CG2', -0.595, (260.657, 223.774, 130.129)), (' E 442  ASP  OD1', ' E 509  ARG  NH2', -0.585, (221.273, 234.014, 148.22)), (' E 368  LEU  HB3', ' E 374  PHE  HE2', -0.584, (211.236, 235.167, 160.434)), (' E 473  TYR  CE2', ' E 475  ALA  HB2', -0.583, (243.386, 214.575, 157.937)), (' E 495  TYR  HB3', ' E 497  PHE  CD1', -0.578, (226.052, 222.514, 147.514)), (' E 395  VAL HG12', ' E 515  PHE  HD1', -0.576, (218.688, 238.113, 171.127)), (' A  84  LEU HD21', ' A  88  ASP  HB2', -0.574, (260.182, 222.68, 133.265)), (' E 455  LEU HD12', ' E 456  PHE  H  ', -0.567, (238.342, 217.593, 155.167)), (' E 433  VAL HG12', ' E 512  VAL HG22', -0.557, (220.886, 228.216, 164.784)), (' E 497  PHE  CD2', ' E 507  PRO  HB3', -0.555, (222.625, 225.846, 147.694)), (' E 360  ASN  H  ', ' E 523  THR  HB ', -0.551, (221.062, 247.22, 171.706)), (' A  60  ASP  OD1', ' A  61  SER  N  ', -0.548, (259.426, 224.883, 145.513)), (' A  37  ARG  HG3', ' A  93  TYR  HE1', -0.545, (253.513, 211.809, 135.726)), (' E 409  GLN HE21', ' E 416  GLY  HA3', -0.537, (226.824, 216.504, 162.051)), (' E 382  VAL HG23', ' E 386  LYS  HE3', -0.536, (210.139, 231.464, 176.601)), (' A  23  ALA  HA ', ' A  76  THR HG22', -0.536, (238.527, 220.636, 128.402)), (' E 458  LYS  HA ', ' E 473  TYR  HE1', -0.536, (243.28, 217.604, 161.899)), (' E 497  PHE  CE2', ' E 507  PRO  HB3', -0.533, (222.701, 225.559, 148.42)), (' E 410  ILE  O  ', ' E 410  ILE HG13', -0.53, (220.538, 223.507, 163.714)), (' A  45  PHE  HE2', ' A  57  ASN  O  ', -0.53, (248.873, 223.861, 144.764)), (' A  12  VAL HG23', ' A 115  VAL HG22', -0.527, (259.878, 224.522, 126.955)), (' E 344  ALA  HB3', ' E 347  PHE  HE1', -0.522, (221.59, 238.506, 154.179)), (' E 344  ALA  HB3', ' E 347  PHE  CE1', -0.521, (221.871, 237.92, 153.882)), (' E 498  GLN  HB2', ' E 501  ASN  OD1', -0.519, (222.27, 220.274, 141.514)), (' A  49  ILE HD13', ' A  56  THR HG22', -0.518, (243.262, 228.053, 142.25)), (' E 418  ILE HD12', ' E 422  ASN  ND2', -0.51, (230.285, 222.572, 157.546)), (' A  24  VAL  CG1', ' A  27  LEU  HB2', -0.508, (235.673, 218.487, 134.403)), (' A  84  LEU HD23', ' A  85  LYS  O  ', -0.503, (261.81, 224.186, 132.508)), (' E 435  ALA  HB2', ' E 510  VAL HG22', -0.499, (218.327, 226.672, 158.232)), (' E 335  LEU HD12', ' E 362  VAL  O  ', -0.498, (211.969, 247.063, 165.523)), (' E 481  ASN  OD1', ' E 483  VAL HG22', -0.494, (255.02, 219.203, 150.866)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.493, (220.256, 244.212, 177.036)), (' A  66  PHE  CD1', ' A  81  MET  HA ', -0.493, (253.951, 227.136, 134.365)), (' E 455  LEU HD12', ' E 456  PHE  N  ', -0.493, (237.855, 217.505, 155.818)), (' E 440  ASN  OD1', ' E 441  LEU  N  ', -0.479, (215.927, 231.864, 145.229)), (' A  27  LEU HD21', ' A  70  ARG HH12', -0.479, (236.987, 221.988, 137.252)), (' E 350  VAL HG21', ' E 402  ILE HD11', -0.477, (227.118, 224.907, 158.264)), (' E 395  VAL HG12', ' E 515  PHE  CD1', -0.474, (218.314, 237.667, 171.17)), (' A  49  ILE HD11', ' A  53  GLY  O  ', -0.472, (239.984, 229.015, 142.527)), (' E 400  PHE  CE2', ' E 402  ILE HD12', -0.47, (224.57, 226.041, 158.692)), (' A  31  ARG  HD3', ' A  97  ARG  HD3', -0.466, (239.249, 219.033, 146.423)), (' E 391  CYS  SG ', ' E 525  CYS  O  ', -0.465, (211.498, 244.576, 175.874)), (' E 364  ASP  O  ', ' E 367  VAL HG12', -0.462, (208.274, 240.078, 163.281)), (' A  36  ARG  HB2', ' A  90  ALA  CB ', -0.461, (255.838, 216.712, 135.537)), (' A  11  LEU  HA ', ' A 114  THR  O  ', -0.46, (259.016, 220.532, 124.498)), (' E 342  PHE  HE2', ' E 368  LEU HD13', -0.459, (212.834, 236.786, 161.745)), (' E 517  LEU HD23', ' E 518  LEU  N  ', -0.457, (218.645, 238.502, 181.633)), (' A  70  ARG  NH1', ' A  77  ILE HD11', -0.455, (238.064, 223.433, 136.892)), (' E 393  THR HG21', ' E 518  LEU  HG ', -0.453, (222.037, 240.637, 179.473)), (' E 421  TYR  CD1', ' E 457  ARG  HB3', -0.453, (237.626, 219.499, 162.183)), (' E 476  GLY  HA3', ' E 487  ASN  ND2', -0.447, (249.551, 210.382, 155.74)), (' A  84  LEU  CD2', ' A  88  ASP  HB2', -0.446, (260.243, 223.514, 132.902)), (' A  66  PHE  CE1', ' A  81  MET  HG2', -0.444, (254.308, 225.588, 134.084)), (' A  24  VAL HG12', ' A  27  LEU  HB2', -0.441, (235.316, 218.101, 134.386)), (' A  80  GLN  HG3', ' A  82  ASN  OD1', -0.439, (252.041, 231.37, 131.314)), (' A  31  ARG  HD3', ' A  97  ARG HH11', -0.438, (239.757, 219.541, 147.561)), (' E 473  TYR  CD2', ' E 475  ALA  HB2', -0.436, (243.849, 214.996, 157.706)), (' A  36  ARG  HA ', ' A  91  VAL  O  ', -0.433, (253.343, 215.445, 135.619)), (' A  36  ARG  HB2', ' A  90  ALA  HB1', -0.43, (255.945, 216.633, 135.746)), (' E 447  GLY  HA2', ' E 497  PHE  O  ', -0.428, (224.632, 224.591, 141.121)), (' E 452  LEU HD23', ' E 494  SER  HA ', -0.424, (233.092, 224.407, 148.32)), (' E 431  GLY  HA2', ' E 515  PHE  CD2', -0.421, (217.078, 233.279, 171.529)), (' E 455  LEU HD12', ' E 456  PHE  CG ', -0.418, (238.692, 216.375, 155.149)), (' E 400  PHE  HE2', ' E 402  ILE HD12', -0.415, (224.326, 225.465, 158.789)), (' A  35  PHE  O  ', ' A  92  TYR  HA ', -0.414, (251.491, 216.329, 135.745)), (' E 461  LEU HD13', ' E 465  GLU  O  ', -0.414, (235.348, 226.781, 164.552)), (' A  59  LEU  HG ', ' A  61  SER  H  ', -0.413, (257.911, 223.718, 144.718)), (' E 476  GLY  HA3', ' E 487  ASN  CG ', -0.413, (249.133, 210.65, 155.545)), (' E 435  ALA  HA ', ' E 509  ARG  O  ', -0.412, (217.547, 229.352, 156.837)), (' E 528  LYS  HA ', ' E 528  LYS  HE2', -0.408, (205.545, 247.831, 174.808)), (' E 347  PHE  HD2', ' E 509  ARG  HG2', -0.407, (221.332, 232.421, 152.91)), (' E 409  GLN  NE2', ' E 418  ILE HG22', -0.403, (226.705, 218.153, 160.22)), (' A  31  ARG  HB2', ' A  97  ARG  CD ', -0.402, (239.281, 218.613, 145.073)), (' E 393  THR HG22', ' E 516  GLU  O  ', -0.402, (220.759, 239.536, 177.682)), (' E 402  ILE HG22', ' E 403  ARG  N  ', -0.4, (223.675, 222.322, 154.356))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
