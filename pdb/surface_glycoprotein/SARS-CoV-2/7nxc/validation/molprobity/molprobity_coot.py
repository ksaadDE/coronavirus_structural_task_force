# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 338 ', 'ASN', 0.0007474022039825635, (-42.712999999999994, -6.302, -11.045000000000003))]
data['omega'] = [('A', ' 146 ', 'PRO', None, (-38.365, 2.1899999999999986, -30.111000000000004))]
data['rota'] = [('A', '  88 ', 'ILE', 0.08448208620906053, (-23.68799999999999, 46.38199999999999, -7.925)), ('A', ' 110 ', 'GLU', 0.2553619296254288, (-48.209, 36.888, -23.736000000000004)), ('A', ' 171 ', 'GLU', 0.2264438821858025, (-43.047999999999995, 11.475, -42.675000000000004)), ('A', ' 183 ', 'TYR', 0.22865799105220797, (-39.786, 28.931999999999988, -34.248000000000005)), ('A', ' 240 ', 'LEU', 0.16195656841690428, (-10.496999999999993, 7.942999999999998, -39.78400000000002)), ('A', ' 339 ', 'VAL', 0.14105990133050234, (-45.739, -3.9879999999999978, -11.178000000000006)), ('A', ' 385 ', 'TYR', 0.21401611534066084, (-20.278, 22.823999999999995, -5.096000000000002)), ('A', ' 401 ', 'HIS', 0.20964591204012273, (-20.734, 18.614, -15.858000000000008)), ('A', ' 409 ', 'SER', 0.2517462148882225, (-15.159000000000002, 5.802, -17.115)), ('A', ' 419 ', 'LYS', 0.22331833080840524, (-6.751999999999999, -5.813999999999999, -13.22)), ('A', ' 439 ', 'LEU', 0.06998711876652867, (-8.719, 3.4599999999999995, -29.846)), ('A', ' 440 ', 'LEU', 0.15869764685626978, (-10.633, 2.798, -33.077)), ('A', ' 455 ', 'MET', 0.21931633137582587, (-21.446, 21.157999999999994, -38.568)), ('A', ' 485 ', 'VAL', 0.19441445686248301, (-18.625, 15.978999999999989, -42.188)), ('B', ' 484 ', 'LYS', 0.0, (-44.848, 41.812, 3.0710000000000015)), ('B', ' 498 ', 'GLN', 0.030713826122739263, (-38.095, 15.729000000000001, 5.5950000000000015))]
data['cbeta'] = []
data['probe'] = [(' A 402  GLU  HB3', ' A 518  ARG  HD2', -0.701, (-20.667, 15.514, -21.897)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.685, (-29.574, 32.791, 46.206)), (' A 245  ARG  NH2', ' A 603  PHE  O  ', -0.676, (-10.177, 8.28, -49.606)), (' A 574  VAL HG23', ' A 576  ALA  H  ', -0.658, (-5.111, 24.318, -18.473)), (' A 490  PRO  HA ', ' A 612  PRO  HG2', -0.646, (-27.328, 8.949, -51.932)), (' A  81  GLN  NE2', ' A 103  ASN  OD1', -0.623, (-37.144, 40.178, -16.646)), (' A 294  THR HG23', ' A 365  THR  HA ', -0.588, (-22.253, -7.49, -17.671)), (' A 607  SER  OG ', ' A 609  ASP  OD1', -0.576, (-17.006, 14.967, -56.473)), (' B 521  PRO  HB2', ' B 523  THR HG23', -0.571, (-30.828, 28.236, 47.525)), (' A  96  GLN  HB3', ' A 391  LEU HD12', -0.547, (-28.316, 34.158, -7.383)), (' A 538  PRO  HD2', ' A 541  LYS  HD3', -0.53, (0.375, 2.759, -22.485)), (' A  24  GLN  OE1', ' B 487  ASN  ND2', -0.529, (-34.839, 48.054, -1.813)), (' A 104  GLY  HA2', ' A 190  MET  HE3', -0.507, (-35.257, 34.081, -23.238)), (' B 363  ALA  H  ', ' B 526  GLY  HA2', -0.504, (-28.061, 17.12, 41.915)), (' A 322  ASN HD22', ' A 801  NAG  C7 ', -0.494, (-18.241, 5.84, 3.539)), (' B 350  VAL HG22', ' B 422  ASN  HB3', -0.493, (-32.569, 30.475, 17.233)), (' A 560  LEU HD22', ' A 564  GLU  HG3', -0.493, (-14.076, 29.629, -8.528)), (' A 284  PRO  HB3', ' A 594  TRP  CH2', -0.491, (-6.846, -1.253, -38.105)), (' A  55  THR  O  ', ' A  59  VAL HG23', -0.49, (-47.974, 8.864, -13.215)), (' A 570  LEU  O  ', ' A 574  VAL HG22', -0.479, (-7.935, 23.774, -16.802)), (' A  90  ASN  OD1', ' A  92  THR HG22', -0.478, (-19.507, 39.017, -4.508)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.47, (-27.346, 27.713, 44.676)), (' A 233  ILE HD13', ' A 450  LEU HD13', -0.462, (-12.852, 17.425, -32.652)), (' B 412  PRO  HG3', ' B 429  PHE  HB3', -0.46, (-20.025, 29.872, 26.521)), (' B 334  ASN  O  ', ' B 362  VAL  N  ', -0.46, (-33.108, 16.894, 43.8)), (' A 108  LEU HD11', ' A 190  MET  HB2', -0.459, (-39.328, 35.053, -27.727)), (' A 223  ILE HG12', ' A 461  TRP  CZ3', -0.453, (-19.934, 29.393, -33.302)), (' A 578  ASN  OD1', ' A 579  MET  N  ', -0.449, (-10.472, 27.326, -24.503)), (' A 535  HIS  CD2', ' A 542  CYS  HB2', -0.448, (-2.223, 7.366, -18.145)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.447, (-34.804, 26.351, 26.98)), (' A 144  LEU  HA ', ' A 148  LEU  HB2', -0.447, (-37.203, 5.208, -35.484)), (' A 190  MET  HE1', ' A 202  TYR  CE1', -0.439, (-32.326, 34.522, -24.079)), (' B 365  TYR  HB2', ' B 388  ASN  HB3', -0.437, (-23.192, 15.177, 37.769)), (' A 155  SER  O  ', ' A 161  ARG  HD2', -0.434, (-27.463, -1.516, -41.621)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.432, (-24.882, 18.027, 20.034)), (' A 474  MET  HE1', ' A 499  ASP  HB2', -0.43, (-32.216, 17.807, -43.521)), (' A 322  ASN  ND2', ' A 801  NAG  C7 ', -0.428, (-18.157, 6.487, 4.01)), (' B 339  GLY  O  ', ' B 343  ASN  HB2', -0.428, (-38.382, 13.299, 29.167)), (' A 279  TYR  CE1', ' A 441  LYS  HB2', -0.427, (-13.816, -0.57, -31.301)), (' A 535  HIS  CE1', ' A 542  CYS  HA ', -0.427, (-2.058, 5.303, -17.362)), (' A 132  VAL HG11', ' A 167  SER  HB3', -0.424, (-40.796, 5.205, -42.423)), (' A 353  LYS  HB3', ' B 501  TYR  CD1', -0.423, (-32.707, 19.139, 2.486)), (' A 353  LYS  HD2', ' B 505  TYR  CD2', -0.421, (-31.212, 21.629, 3.686)), (' A 455  MET  HE1', ' A 477  TRP  CE3', -0.419, (-26.444, 20.645, -41.391)), (' A 457  GLU  HG2', ' A 513  ILE  HB ', -0.418, (-22.632, 24.847, -30.668)), (' B 383  SER  H  ', ' B 387  LEU HD22', -0.415, (-16.206, 20.348, 36.13)), (' A 351  LEU  H  ', ' A 351  LEU HD12', -0.415, (-31.047, 15.556, -5.208)), (' A 524  GLN  HB3', ' A 574  VAL HG11', -0.414, (-7.584, 20.715, -19.466)), (' A 469  PRO  HB2', ' A 471  ASP  OD1', -0.411, (-33.272, 31.588, -49.16)), (' A 288  LYS  HD3', ' A 434  THR HG23', -0.407, (-5.336, -7.908, -28.987)), (' A 419  LYS  HG3', ' A 424  LEU  HB3', -0.406, (-7.393, -6.8, -15.6)), (' A 237  TYR  CE1', ' A 451  PRO  HG2', -0.405, (-15.553, 14.107, -38.575)), (' A 478  TRP  CD2', ' A 489  GLU  HB3', -0.403, (-28.115, 15.292, -47.328)), (' A 402  GLU  HB3', ' A 518  ARG  CD ', -0.401, (-20.419, 15.944, -21.878)), (' A 525  PHE  O  ', ' A 529  LEU  HG ', -0.4, (-7.316, 15.625, -15.657))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
