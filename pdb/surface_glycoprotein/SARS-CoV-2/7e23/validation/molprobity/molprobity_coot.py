# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('C', '  72 ', 'THR', None, (208.079, 123.232, 77.021))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' C  94  TRP  HB2', ' C  95  PRO  HD3', -0.761, (202.662, 141.255, 73.151)), (' C  68  GLY  HA3', ' C  73  LEU HD23', -0.76, (206.825, 124.302, 81.763)), (' A 417  LYS  O  ', ' A 422  ASN  ND2', -0.706, (188.586, 147.105, 108.625)), (' A 454  ARG  NH2', ' A 469  SER  O  ', -0.677, (186.234, 137.39, 109.281)), (' B  51  VAL HG13', ' B  66  ARG HH12', -0.659, (191.179, 147.872, 81.721)), (' C   2  ILE HG21', ' C  95  PRO  HG2', -0.657, (201.724, 138.072, 71.798)), (' A 501  ASN  O  ', ' A 506  GLN  NE2', -0.654, (206.396, 156.151, 104.366)), (' B  34  TRP  HB3', ' B  75  LYS  HD2', -0.638, (187.829, 144.823, 86.394)), (' A 461  LEU HD22', ' A 465  GLU  HB3', -0.612, (182.164, 143.015, 116.594)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.596, (199.23, 157.226, 117.522)), (' B 110  GLU  HG2', ' B 112  TRP  HE1', -0.578, (190.13, 135.231, 85.509)), (' A 355  ARG  HD2', ' A 396  TYR  CD1', -0.576, (190.714, 142.964, 127.277)), (' A 377  PHE  CD2', ' A 434  ILE HG12', -0.569, (199.85, 156.875, 124.516)), (' C  23  CYS  HB3', ' C  73  LEU  HB2', -0.567, (202.679, 124.223, 78.18)), (' B  18  LEU HD12', ' B  82  LEU HD13', -0.564, (179.674, 145.201, 71.262)), (' B  51  VAL HG13', ' B  66  ARG  NH1', -0.556, (190.841, 147.682, 81.305)), (' B  28  SER  OG ', ' B  53  HIS  O  ', -0.545, (194.541, 149.967, 91.102)), (' B  20  LEU HD11', ' B 117  LEU HD11', -0.536, (177.817, 144.105, 75.275)), (' A 395  VAL HG22', ' A 515  PHE  HD1', -0.534, (193.199, 150.868, 133.03)), (' B  33  TYR  HB2', ' B  98  GLY  HA3', -0.528, (193.617, 140.514, 87.182)), (' B  40  PRO  HG2', ' B  43  LYS  HB2', -0.516, (184.852, 131.924, 69.526)), (' B  64  LYS  HD2', ' B  77  GLN HE22', -0.514, (185.53, 146.031, 74.128)), (' C  38  GLN  HG3', ' C  44  PRO  HD3', -0.514, (184.189, 129.155, 80.833)), (' C   7  SER  OG ', ' C  22  SER  OG ', -0.511, (200.454, 118.333, 73.238)), (' B  36  TRP  CE2', ' B  77  GLN  HB2', -0.504, (183.776, 145.424, 80.112)), (' B  29  PHE  O  ', ' B 103  ARG  NH1', -0.501, (197.872, 145.092, 95.996)), (' B  66  ARG  HB3', ' B  77  GLN  HG2', -0.5, (186.056, 147.278, 78.297)), (' C  63  SER  O  ', ' C  77  SER  OG ', -0.498, (196.843, 117.927, 87.666)), (' C  36  TYR  OH ', ' C  89  GLN  OE1', -0.498, (194.539, 134.273, 82.832)), (' A 355  ARG  NE ', ' A 398  ASP  OD1', -0.495, (191.294, 143.81, 124.33)), (' B  66  ARG  CB ', ' B  77  GLN  HA ', -0.491, (185.141, 148.514, 78.769)), (' B  99  ASN  O  ', ' B 101  MET  N  ', -0.487, (199.017, 138.854, 91.659)), (' C  95  PRO  O  ', ' C  97  THR  N  ', -0.487, (198.406, 136.908, 75.119)), (' A 377  PHE  HE1', ' A 384  PRO  HB3', -0.484, (198.68, 160.54, 128.35)), (' A 369  TYR  HD1', ' A 377  PHE  CE1', -0.482, (200.018, 160.358, 127.792)), (' B  47  TRP  HB3', ' C  98  PHE  HE1', -0.481, (192.18, 136.639, 77.292)), (' A 346  ARG  NH1', ' A 347  PHE  O  ', -0.478, (201.009, 140.577, 114.867)), (' C  20  THR HG22', ' C  76  SER  HB2', -0.477, (201.049, 114.247, 82.584)), (' A 493  GLN  HG2', ' B  29  PHE  CE1', -0.474, (192.268, 145.304, 99.793)), (' C  10  THR  H  ', ' C 102  THR  HB ', -0.473, (192.192, 118.046, 73.127)), (' B  48  ILE  O  ', ' B  48  ILE HG13', -0.467, (188.584, 143.069, 77.053)), (' A 501  ASN  HB3', ' A 505  TYR  HB2', -0.457, (203.438, 153.913, 102.382)), (' C  46  LEU HD21', ' C  49  TYR  HB3', -0.457, (196.419, 131.758, 89.125)), (' B  24  VAL HG21', ' B  75  LYS  HG3', -0.456, (185.391, 146.941, 88.844)), (' B  50  GLU  C  ', ' B  66  ARG HH22', -0.453, (193.058, 146.458, 81.138)), (' B  69  ILE HG12', ' B  71  VAL  O  ', -0.451, (184.211, 154.535, 90.83)), (' A 419  ALA  O  ', ' A 424  LYS  HB2', -0.45, (184.044, 149.965, 114.512)), (' C   8  PRO  HG2', ' C 102  THR HG21', -0.448, (194.368, 119.07, 73.428)), (' C   9  ALA  H  ', ' C 102  THR HG21', -0.448, (194.197, 118.782, 72.151)), (' A 404  GLY  O  ', ' A 407  VAL HG22', -0.447, (197.302, 157.2, 111.298)), (' C   4  LEU HD11', ' C  90  GLN  HB2', -0.447, (200.859, 133.08, 75.544)), (' C  32  TYR  O  ', ' C  91  ARG  HB2', -0.443, (202.017, 134.937, 82.196)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.441, (193.439, 158.047, 125.914)), (' C  11  LEU HD11', ' C  19  ALA  HB1', -0.438, (194.193, 113.724, 79.635)), (' C  36  TYR  HD1', ' C  46  LEU  HA ', -0.438, (192.056, 129.94, 85.984)), (' C  29  VAL  HB ', ' C  71  PHE  CE2', -0.435, (206.375, 130.961, 77.3)), (' A 457  ARG  NH2', ' A 467  ASP  OD2', -0.431, (181.239, 139.906, 112.232)), (' C  68  GLY  O  ', ' C  69  THR  OG1', -0.43, (210.491, 125.78, 83.643)), (' B  66  ARG  HB3', ' B  77  GLN  HA ', -0.429, (185.092, 148.455, 78.598)), (' C  65  SER  OG ', ' C  76  SER  N  ', -0.429, (199.774, 117.849, 85.231)), (' A 355  ARG  HD2', ' A 396  TYR  HD1', -0.429, (191.218, 143.015, 127.838)), (' B  94  TYR  HD1', ' B 113  ASP  O  ', -0.425, (181.509, 134.919, 83.036)), (' A 490  PHE  CD1', ' A 491  PRO  HD2', -0.424, (188.235, 135.554, 102.86)), (' A 402  ILE HD11', ' A 510  VAL HG21', -0.42, (196.275, 152.209, 115.028)), (' B  31  GLY  H  ', ' B  53  HIS  CB ', -0.418, (197.499, 146.506, 91.9)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.418, (191.555, 154.451, 130.256)), (' C  23  CYS  O  ', ' C  25  ALA  N  ', -0.418, (203.719, 125.574, 74.658)), (' B  60  ASN  HB3', ' B  61  PRO  HD2', -0.417, (194.228, 142.422, 69.686)), (' B  12  LEU HD13', ' B 117  LEU HD22', -0.417, (174.499, 143.579, 73.056)), (' A 353  TRP  HZ3', ' A 355  ARG  HE ', -0.412, (190.593, 143.322, 123.086)), (' A 340  GLU  OE2', ' A 356  LYS  HE3', -0.41, (200.526, 140.57, 129.962)), (' A 392  PHE  CG ', ' A 515  PHE  HB3', -0.408, (190.775, 152.26, 134.749)), (' B  47  TRP  HB3', ' C  98  PHE  CE1', -0.407, (192.065, 136.188, 77.507)), (' A 342  PHE  HB2', ' A 601  NAG  H82', -0.406, (205.857, 149.173, 126.161)), (' C   8  PRO  CB ', ' C  11  LEU HD23', -0.406, (195.696, 115.418, 75.175)), (' C  89  GLN  HG2', ' C  90  GLN  O  ', -0.405, (198.067, 134.668, 79.831)), (' B  45  LEU  HA ', ' B  45  LEU HD23', -0.405, (187.146, 132.717, 74.987)), (' A 391  CYS  HA ', ' A 524  VAL  O  ', -0.405, (194.123, 151.81, 139.58)), (' B 108  PRO  HG2', ' C  49  TYR  CE2', -0.404, (199.711, 133.163, 92.708)), (' A 347  PHE  CE2', ' A 399  SER  HB2', -0.404, (200.275, 145.826, 120.244)), (' A 447  GLY  HA2', ' A 497  PHE  O  ', -0.403, (206.184, 146.041, 102.935)), (' A 484  GLU  OE1', ' A 490  PHE  HB2', -0.403, (188.935, 134.729, 99.058)), (' B  96  ALA  HA ', ' B 111  TYR  O  ', -0.401, (186.834, 137.411, 86.978)), (' B 102  VAL  HA ', ' B 108  PRO  HD3', -0.401, (199.995, 136.189, 95.355)), (' A 404  GLY  N  ', ' A 504  GLY  O  ', -0.4, (199.633, 155.056, 108.033)), (' B  21  THR  HA ', ' B  75  LYS  O  ', -0.4, (180.809, 148.151, 83.552))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
