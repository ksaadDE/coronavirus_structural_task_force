# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 470 ', 'PRO', None, (26.438999999999993, -41.10499999999998, 28.711)), ('H', '  54 ', 'GLU', None, (36.425, -23.194999999999983, 11.118)), ('H', ' 147 ', 'PRO', None, (72.934, -22.722, -1.79)), ('H', ' 149 ', 'PRO', None, (70.106, -17.699, -3.8209999999999997)), ('L', '   8 ', 'PRO', None, (46.993, -18.93, -27.526)), ('L', ' 141 ', 'PRO', None, (64.074, -12.896999999999998, -32.745))]
data['rota'] = [('A', ' 358 ', 'SER', 0.2987918545866728, (17.705, -16.473, -13.807))]
data['cbeta'] = []
data['probe'] = [(' L 212  GLY  H  ', ' L 303  EDO  H11', -0.723, (94.627, -21.629, -25.404)), (' B   2 BNAG  H5 ', ' B   4  FUC  O2 ', -0.683, (28.682, -9.764, -11.691)), (' L 123  GLU  OE2', ' L 401  HOH  O  ', -0.658, (88.734, -17.811, -8.602)), (' L 212  GLY  H  ', ' L 303  EDO  C1 ', -0.61, (94.41, -21.436, -24.855)), (' A 428 BILE HG23', ' A 818  HOH  O  ', -0.584, (31.608, -23.337, -0.653)), (' H  53  GLY  HA2', ' H  73  LYS  HD3', -0.564, (38.543, -20.898, 13.863)), (' L 142  ARG  NH2', ' L 163  VAL HG11', -0.549, (64.52, -18.869, -22.883)), (' H 127  SER  O  ', ' H 131 BTHR HG23', -0.548, (88.098, -8.892, -28.134)), (' A 342  ARG HH22', ' A 604  EDO  H21', -0.545, (10.418, -15.459, 9.414)), (' H  60  SER  HA ', ' L  95A ARG  HA ', -0.524, (41.504, -31.421, -4.948)), (' A 322  LEU HD13', ' A 349  VAL  O  ', -0.518, (17.185, -2.749, -4.864)), (' A 333  LYS  HD3', ' A 706  HOH  O  ', -0.51, (27.098, -19.055, 7.938)), (' A 360  PHE  HZ ', ' A 423  TRP  CD1', -0.484, (23.031, -22.579, -6.445)), (' H 588  HOH  O  ', ' L  95A ARG  HD2', -0.482, (40.703, -36.572, -4.659)), (' A 329  PHE  HB2', ' B   1  NAG  H82', -0.481, (22.033, -13.991, -4.104)), (' L  20  THR HG23', ' L  72  THR  CG2', -0.475, (39.337, -13.772, -26.807)), (' L 145  LYS  HB3', ' L 197  THR  OG1', -0.472, (71.123, -22.847, -34.546)), (' H  53  GLY  CA ', ' H  73  LYS  HD3', -0.467, (38.583, -21.124, 13.297)), (' A 360  PHE  HE2', ' A 602  EDO  H21', -0.46, (22.051, -19.774, -6.768)), (' L  95A ARG  NH2', ' L  95B GLN HE21', -0.454, (37.501, -36.089, -8.568)), (' A 360  PHE  CZ ', ' A 423  TRP  CD1', -0.453, (22.786, -22.366, -6.423)), (' H  33  TRP  HB2', ' H  95  ILE  HB ', -0.453, (38.492, -19.411, -0.233)), (' L   4  MET  HE3', ' L  23  CYS  SG ', -0.451, (40.43, -22.77, -19.205)), (' A 342  ARG  NH2', ' A 604  EDO  H21', -0.45, (10.553, -15.235, 9.424)), (' L 212  GLY  N  ', ' L 303  EDO  H11', -0.448, (94.973, -22.381, -25.266)), (' A 418  GLY  HA2', ' A 501  PHE  CD2', -0.445, (7.22, -13.754, -0.326)), (' L 120  PRO  HD3', ' L 132  VAL HG22', -0.44, (87.068, -23.046, -22.53)), (' H  61  SER  OG ', ' H  62  SER  N  ', -0.434, (46.379, -35.001, -6.364)), (' H  29  PHE  CD2', ' H  76  SER  HA ', -0.431, (43.949, -16.634, 11.214)), (' A 352  TYR  CD2', ' A 374  LEU  HB3', -0.431, (9.921, -8.807, -6.013)), (' H 216  CYS  SG ', ' L 214  CYS  HB3', -0.425, (95.234, -14.82, -25.605)), (' H 100C TRP  HB2', ' L  91  SER  HB2', -0.422, (35.787, -22.063, -7.463)), (' A 603  EDO  H12', ' B   1  NAG  H3 ', -0.422, (23.758, -14.198, -9.928)), (' A 426 BARG  NH1', ' A 704  HOH  O  ', -0.419, (30.262, -32.45, -9.843)), (' A 451  PHE  CE2', ' A 604  EDO  H22', -0.417, (7.454, -15.794, 9.223)), (' A 333  LYS  HE2', ' A 334  PHE  O  ', -0.413, (26.672, -22.311, 7.329)), (' A 453  ARG  HD3', ' A 453  ARG HH11', -0.406, (17.938, -19.086, 16.589)), (' H  68  THR  HB ', ' H  81  GLN  HG2', -0.402, (50.786, -30.93, 7.529)), (' L  20  THR HG23', ' L  72  THR HG23', -0.401, (39.732, -14.083, -26.614)), (' H 178  LEU  C  ', ' H 178  LEU HD12', -0.401, (76.696, -16.77, -13.408))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
