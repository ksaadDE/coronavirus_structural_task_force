
from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

dict_residue_prop_objects = {}
class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)
        ##save property list frame object
        dict_residue_prop_objects[data_key] = list_obj
# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "clusters","rama", "rota", "cbeta", "probe", "smoc", "fdr",
               "fsc","diffmap","cablam",
               "jpred"]
  data_titles = { "clusters"  : "Outlier residue clusters",
                  "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes",
                  "smoc"  : "Local density fit (SMOC)",
                  "fdr": "Backbone position score (FDR)",
                  "fsc": "Local density fit (FSC)",
                  "diffmap": "Model-map difference",
                  "cablam": "Ca geometry (CaBLAM)",
                  "jpred":"SS prediction"}
  data_names = { "clusters"  : ["Chain","Residue","Cluster","Outlier types"],
                 "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"],
                 "smoc" : ["Chain", "Residue", "Name", "Score"],
                 "fdr" : ["Chain", "Residue", "Name", "Score"],
                 "fsc" : ["Chain", "Residue", "Name", "Score"],
                 "diffmap" : ["Chain", "Residue", "Name", "Score"],
                 "cablam" : ["Chain", "Residue","Name","recommendation","DSSP"],
                 "jpred" : ["Chain", "Residue","Name","predicted SS","current SS"]}
  if (gobject is not None) :
    data_types = {  "clusters" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_INT, gobject.TYPE_STRING,
                             gobject.TYPE_PYOBJECT],
                    "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "smoc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "fdr" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "fsc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "diffmap" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cablam" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT],
                   "jpred" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT]}
  else :
    data_types = dict([ (s, []) for s in ["clusters","rama","rota","cbeta","probe","smoc",
                                          "fdr","fsc","diffmap","cablam","jpred"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "Validation To-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    ##adding a column type for checkbox (bool) before atom coordinate
    if gobject is not None:
        column_types = column_types[:-1]+[bool]+[column_types[-1]]
    
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    ##add a cell for checkbox
    cell1 = gtk.CellRendererToggle()
    cell1.connect ("toggled", self.on_selected_toggled)
    column = gtk.TreeViewColumn('Dealt with',cell1,active=i+1)
    self.listctrl.append_column(column)
    #column.set_sort_column_id(i+1)
    #column.pack_start(cell1, True)
    
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      row = row[:-1] + (False,)+(row[-1],)
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()
  ##check box toggle
  def on_selected_toggled(self,renderer,path):
    if path is not None:
      model = self.listmodel.get_model()
      it = model.get_iter(path)
      #set toggle
      model[it][-2] = not model[it][-2]
      #set checkboxes for same residues in other lists
      try:
        chain = model[it][0]
        residue = model[it][1]
        for data_key in dict_residue_prop_objects:
          prop_obj = dict_residue_prop_objects[data_key]
          for row in prop_obj.listmodel.get_model():
            if data_key == 'probe':
              atom1_split = row[0].split()
              atom2_split = row[1].split()
              if atom1_split[0] == chain and atom1_split[1] == residue:
                row[-2] = model[it][-2]
              elif atom2_split[0] == chain and atom2_split[1] == residue:
                row[-2] = model[it][-2]
            elif row[0] == chain and row[1] == residue:
              row[-2] = model[it][-2]
      except IndexError: pass

  def check_chain_residue(self,chain,residue):
      pass
  
def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data
data = {}
data['fdr'] = []
data['fsc'] = []
data['diffmap'] = []
data['jpred'] = []
data['probe'] = [(' B 123  ALA  HB3', ' B1302  NAG  C8 ', -0.93, (148.367, 199.114, 242.733)), (' B 123  ALA  HB3', ' B1302  NAG  H82', -0.805, (149.377, 199.073, 242.476)), (' B 123  ALA  CB ', ' B1302  NAG  H81', -0.685, (147.469, 198.679, 242.947)), (' B 123  ALA  HB3', ' B1302  NAG  H81', -0.662, (148.086, 198.878, 242.972)), (' B 339  GLY  HA2', ' B1305  NAG  O7 ', -0.633, (224.791, 168.282, 261.909)), (' B 123  ALA  CB ', ' B1302  NAG  C8 ', -0.604, (148.267, 198.625, 242.425)), (' B 599  THR  O  ', ' B 599  THR HG23', -0.59, (186.195, 189.194, 202.888)), (' B 557  LYS  NZ ', ' B 574  ASP  OD1', -0.589, (222.645, 179.398, 218.741)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.499, (212.051, 219.374, 180.131)), (' B1142  GLN  N  ', ' B1143  PRO  CD ', -0.499, (209.745, 198.034, 132.047)), (' A1084  ASP  N  ', ' A1084  ASP  OD1', -0.496, (195.844, 207.442, 137.201)), (' B 391  CYS  SG ', ' B 522  ALA  O  ', -0.486, (225.036, 184.165, 249.281)), (' B 601  GLY  C  ', ' B 603  ASN  H  ', -0.481, (179.946, 190.473, 201.012)), (' B 856  ASN  N  ', ' B 856  ASN  OD1', -0.467, (187.377, 221.135, 215.077)), (' B 898  PHE  N  ', ' B 899  PRO  HD2', -0.466, (189.346, 215.652, 160.22)), (' C 898  PHE  N  ', ' C 899  PRO  HD2', -0.455, (216.144, 185.326, 163.748)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.452, (201.359, 206.291, 180.597)), (' A 898  PHE  N  ', ' A 899  PRO  HD2', -0.452, (228.969, 223.248, 161.883)), (' B 905  ARG  HD3', ' B1049  LEU  O  ', -0.451, (197.936, 210.141, 167.523)), (' B 601  GLY  C  ', ' B 603  ASN  N  ', -0.447, (179.753, 190.123, 201.241)), (' C1142  GLN  N  ', ' C1143  PRO  HD2', -0.418, (220.815, 206.857, 132.705)), (' A1110  TYR  CZ ', ' A1112  PRO  HG3', -0.412, (203.044, 225.975, 148.879)), (' B 986  PRO  HB2', ' B 987  PRO  HD3', -0.405, (198.065, 228.083, 239.85)), (' C1011  GLN  OE1', ' C1014  ARG  NH1', -0.404, (213.361, 201.194, 207.387)), (' A 986  PRO  N  ', ' A 987  PRO  HD2', -0.4, (220.568, 216.811, 243.113))]
data['cbeta'] = [('A', '1071 ', 'GLN', ' ', 0.37474633347726277, (203.06499999999994, 234.168, 159.893))]
data['smoc'] = [('A', 42, u'VAL', 0.7170968867534017, (221.83200000000002, 243.039, 224.28)), ('A', 53, u'ASP', 0.7084860134498355, (207.05800000000002, 243.34, 226.272)), ('A', 90, u'VAL', 0.650998327230232, (203.83700000000002, 254.46200000000002, 232.22)), ('A', 97, u'LYS', 0.8066159245085942, (212.083, 275.545, 228.063)), ('A', 141, u'LEU', 0.8030467138791293, (209.52800000000002, 271.82, 244.60899999999998)), ('A', 193, u'VAL', 0.6080569110760458, (209.466, 254.841, 230.417)), ('A', 198, u'ASP', 0.758620750705848, (209.313, 241.525, 239.77299999999997)), ('A', 211, u'ASN', 0.7566977698915585, (211.73899999999998, 273.005, 217.55700000000002)), ('A', 212, u'LEU', 0.7371811393626109, (207.953, 272.78599999999994, 218.105)), ('A', 222, u'ALA', 0.6252695053261504, (214.57899999999998, 254.45200000000003, 220.95700000000002)), ('A', 276, u'LEU', 0.6712974803508228, (209.39800000000002, 243.948, 215.336)), ('A', 277, u'LEU', 0.6919893414320627, (212.516, 245.961, 216.129)), ('A', 299, u'THR', 0.6811551941594767, (202.071, 240.69299999999998, 207.789)), ('A', 320, u'VAL', 0.7465376820328826, (183.76999999999998, 234.97299999999998, 217.01399999999998)), ('A', 326, u'ILE', 0.8431872325283739, (173.82700000000003, 231.178, 229.756)), ('A', 342, u'PHE', 0.8079049796886766, (178.536, 218.94299999999998, 260.161)), ('A', 346, u'ARG', 0.7732337938967404, (176.54899999999998, 212.366, 267.202)), ('A', 379, u'CYS', 0.7508753470867531, (191.029, 218.817, 248.655)), ('A', 391, u'CYS', 0.7196023448657654, (178.212, 219.554, 239.65)), ('A', 402, u'ILE', 0.790881929422399, (189.512, 210.463, 265.622)), ('A', 406, u'GLU', 0.702683191162043, (195.401, 211.17399999999998, 263.502)), ('A', 410, u'ILE', 0.7039032126077788, (192.895, 210.893, 256.46)), ('A', 423, u'TYR', 0.7983899182903791, (189.306, 204.259, 257.265)), ('A', 427, u'ASP', 0.8001396717497536, (195.526, 206.766, 246.218)), ('A', 432, u'CYS', 0.7381519670897629, (187.751, 217.108, 250.346)), ('A', 433, u'VAL', 0.6999758287728819, (188.672, 216.183, 253.904)), ('A', 444, u'LYS', 0.8341702302360791, (183.57399999999998, 214.154, 278.99399999999997)), ('A', 480, u'CYS', 0.7980849988648115, (191.20299999999997, 182.17399999999998, 270.501)), ('A', 482, u'GLY', 0.777682890593589, (186.17299999999997, 184.13299999999998, 270.452)), ('A', 483, u'VAL', 0.7873967398340456, (187.782, 184.26999999999998, 273.9)), ('A', 484, u'GLU', 0.7841998368189204, (190.29299999999998, 186.847, 275.14300000000003)), ('A', 497, u'PHE', 0.8192642646053437, (188.472, 211.70399999999998, 275.369)), ('A', 510, u'VAL', 0.7561688887992538, (186.037, 214.412, 260.444)), ('A', 518, u'LEU', 0.7673836321660128, (181.446, 210.52700000000002, 235.96)), ('A', 519, u'HIS', 0.7298699001747672, (179.87800000000001, 210.416, 232.49)), ('A', 525, u'CYS', 0.8064988677993911, (174.975, 220.924, 241.95000000000002)), ('A', 538, u'CYS', 0.7714447898707777, (177.70299999999997, 233.004, 220.33800000000002)), ('A', 546, u'LEU', 0.7560943501271771, (178.39600000000002, 220.721, 231.107)), ('A', 547, u'THR', 0.8174207365511279, (180.346, 223.65200000000002, 229.812)), ('A', 563, u'GLN', 0.7813562893344738, (169.228, 210.813, 227.015)), ('A', 574, u'ASP', 0.7173340695951773, (176.784, 218.57, 219.515)), ('A', 586, u'ASP', 0.7492077028815989, (172.11299999999997, 221.722, 218.64299999999997)), ('A', 590, u'CYS', 0.7716150103099407, (181.407, 229.839, 217.117)), ('A', 595, u'VAL', 0.6680051942228117, (192.99, 235.49, 208.409)), ('A', 609, u'ALA', 0.6865642201428481, (192.722, 243.586, 201.621)), ('A', 649, u'CYS', 0.6834828899308306, (184.777, 237.11599999999999, 203.518)), ('A', 666, u'ILE', 0.6837740846458366, (192.55800000000002, 233.811, 196.784)), ('A', 671, u'CYS', 0.6988178444668928, (192.172, 236.289, 192.329)), ('A', 672, u'ALA', 0.7280822084799626, (193.112, 239.842, 193.23999999999998)), ('A', 699, u'LEU', 0.6986321592561985, (192.011, 230.84, 182.21299999999997)), ('A', 713, u'ALA', 0.6797254093102656, (196.97, 225.376, 158.04899999999998)), ('A', 714, u'ILE', 0.6627962138353184, (200.686, 225.093, 157.30800000000002)), ('A', 729, u'VAL', 0.5944260251145208, (220.281, 219.42700000000002, 192.02)), ('A', 738, u'CYS', 0.5998986154511496, (223.011, 215.14299999999997, 218.288)), ('A', 741, u'TYR', 0.6499317222468589, (223.118, 219.906, 220.016)), ('A', 742, u'ILE', 0.6537146024422799, (221.224, 218.569, 223.011)), ('A', 749, u'CYS', 0.6727329587260599, (223.222, 215.873, 230.585)), ('A', 763, u'LEU', 0.6992121958370286, (219.758, 211.005, 213.81)), ('A', 770, u'ILE', 0.6666896148951963, (221.39200000000002, 213.062, 203.33200000000002)), ('A', 774, u'GLN', 0.6724673476765559, (224.13899999999998, 215.403, 197.629)), ('A', 781, u'VAL', 0.5945245966338768, (223.6, 215.285, 186.78)), ('A', 797, u'PHE', 0.5840330587395851, (230.20899999999997, 227.696, 163.814)), ('A', 890, u'ALA', 0.6572197560788549, (226.731, 207.48700000000002, 172.82200000000003)), ('A', 906, u'PHE', 0.5919396122006952, (215.88600000000002, 220.108, 161.83)), ('A', 912, u'THR', 0.56313089629145, (213.591, 218.976, 155.67899999999997)), ('A', 926, u'GLN', 0.6296421522154316, (217.393, 234.278, 165.416)), ('A', 958, u'ALA', 0.7178419701867027, (214.95100000000002, 225.12, 208.97899999999998)), ('A', 962, u'LEU', 0.689100225117816, (216.38700000000003, 224.303, 214.93200000000002)), ('A', 965, u'GLN', 0.6734287749159926, (214.74399999999997, 225.79899999999998, 219.88100000000003)), ('A', 977, u'LEU', 0.7252244510565008, (221.555, 223.32200000000003, 231.39700000000002)), ('A', 980, u'ILE', 0.7177370824846806, (219.494, 223.929, 236.16899999999998)), ('A', 1002, u'GLN', 0.7123537500054127, (212.21299999999997, 215.989, 219.684)), ('A', 1012, u'LEU', 0.6667990977578961, (214.99200000000002, 213.904, 204.995)), ('A', 1019, u'ARG', 0.695818619915576, (216.824, 213.95200000000003, 194.79)), ('A', 1030, u'SER', 0.5721449408141613, (221.151, 212.98000000000002, 179.047)), ('A', 1031, u'GLU', 0.6098078497031044, (218.136, 213.196, 176.74099999999999)), ('A', 1049, u'LEU', 0.6037334879738184, (216.39800000000002, 221.07299999999998, 168.52100000000002)), ('A', 1054, u'GLN', 0.6370802011766882, (224.72, 226.134, 182.48000000000002)), ('A', 1062, u'PHE', 0.6072856841919807, (219.118, 224.47899999999998, 180.82100000000003)), ('A', 1066, u'THR', 0.6110905355084012, (213.272, 224.94299999999998, 170.095)), ('A', 1077, u'THR', 0.660947599729645, (193.599, 219.83200000000002, 151.46800000000002)), ('A', 1081, u'ILE', 0.6586600847906362, (194.684, 212.467, 144.642)), ('A', 1095, u'PHE', 0.6139392105358192, (198.493, 217.583, 149.497)), ('A', 1104, u'VAL', 0.6466573196142488, (202.61499999999998, 218.38700000000003, 147.98700000000002)), ('A', 1117, u'THR', 0.688368904625016, (205.186, 209.91899999999998, 140.954)), ('A', 1301, u'NAG', 0.7054152866976529, (194.667, 261.665, 219.655)), ('A', 1305, u'NAG', 0.8456783991138858, (162.41299999999998, 220.731, 235.47299999999998)), ('A', 1307, u'NAG', 0.5692480581545581, (208.07, 246.105, 190.98700000000002)), ('A', 1309, u'NAG', 0.6679780851879388, (180.52700000000002, 241.68200000000002, 190.60899999999998)), ('A', 1311, u'NAG', 0.6979708917511623, (196.256, 231.54399999999998, 158.737)), ('E', 6, u'HIS', 0.8517713214769116, (197.101, 204.842, 276.97499999999997)), ('E', 20, u'ALA', 0.8525453943986648, (208.562, 194.034, 263.782)), ('E', 21, u'LYS', 0.8551646003728764, (210.373, 192.21399999999997, 261.02299999999997)), ('E', 30, u'PHE', 0.8860931796853727, (202.054, 191.893, 272.23199999999997)), ('E', 47, u'LYS', 0.8746202075536647, (202.854, 199.80200000000002, 285.14000000000004)), ('E', 48, u'LEU', 0.8636080043036473, (201.333, 201.72899999999998, 282.257)), ('E', 55, u'LEU', 0.8459146525029154, (207.903, 200.228, 273.862)), ('B', 40, u'ASP', 0.7604324715951205, (174.914, 205.129, 228.502)), ('B', 81, u'ASN', 0.7062186455136794, (161.33100000000002, 180.024, 241.864)), ('B', 90, u'VAL', 0.710853560806122, (171.889, 189.072, 234.77399999999997)), ('B', 111, u'ASP', 0.7607698019520298, (167.51399999999998, 185.256, 254.52800000000002)), ('B', 117, u'LEU', 0.6555118119414388, (167.066, 194.24299999999997, 247.431)), ('B', 134, u'GLN', 0.7397716763966757, (163.11499999999998, 187.654, 256.23099999999994)), ('B', 140, u'PHE', 0.7776406096589035, (155.611, 185.16, 246.091)), ('B', 166, u'CYS', 0.6500708386807335, (166.156, 199.843, 255.72299999999998)), ('B', 210, u'ILE', 0.7120041680738264, (154.54399999999998, 188.623, 220.124)), ('B', 223, u'LEU', 0.6808071412820016, (166.90200000000002, 197.63899999999998, 226.041)), ('B', 276, u'LEU', 0.75696045240655, (180.03, 197.43, 217.967)), ('B', 288, u'ALA', 0.7286497912324904, (174.955, 195.094, 216.708)), ('B', 289, u'VAL', 0.7509700498993718, (178.08, 192.965, 216.336)), ('B', 299, u'THR', 0.7332572031280653, (186.757, 191.642, 211.112)), ('B', 309, u'GLU', 0.726275812605448, (184.469, 193.959, 201.19899999999998)), ('B', 315, u'THR', 0.7171292179616665, (192.261, 191.284, 213.248)), ('B', 326, u'ILE', 0.7776980964806848, (210.56, 175.137, 235.38400000000001)), ('B', 336, u'CYS', 0.7690691010216549, (227.489, 173.518, 255.466)), ('B', 346, u'ARG', 0.8298060677260306, (231.866, 167.523, 272.914)), ('B', 361, u'CYS', 0.7958042574956605, (228.77899999999997, 176.44, 251.608)), ('B', 363, u'ALA', 0.7988486891788272, (223.465, 176.79399999999998, 254.6)), ('B', 372, u'ALA', 0.7670811245222414, (211.765, 168.454, 266.70599999999996)), ('B', 417, u'LYS', 0.8554156250995455, (225.678, 185.58, 285.002)), ('B', 423, u'TYR', 0.7920397933017657, (228.585, 184.88700000000003, 276.601)), ('B', 432, u'CYS', 0.7473238161452993, (219.107, 182.42800000000003, 265.559)), ('B', 444, u'LYS', 0.7952397951538899, (227.437, 162.108, 284.97099999999995)), ('B', 445, u'VAL', 0.7990287384370104, (226.641, 160.025, 287.98999999999995)), ('B', 459, u'SER', 0.861375029198158, (233.29299999999998, 194.429, 284.58799999999997)), ('B', 464, u'PHE', 0.8280094769433758, (230.925, 188.238, 271.453)), ('B', 475, u'ALA', 0.7801044042121381, (236.18200000000002, 191.102, 296.04)), ('B', 487, u'ASN', 0.7723063090719015, (237.448, 188.24099999999999, 299.691)), ('B', 501, u'ASN', 0.8039951596447829, (218.61399999999998, 166.85700000000003, 288.33099999999996)), ('B', 502, u'GLY', 0.8340837365659796, (215.309, 168.651, 287.803)), ('B', 513, u'LEU', 0.7745275007029483, (224.11499999999998, 181.106, 264.6)), ('B', 519, u'HIS', 0.8827999832164591, (230.429, 194.291, 252.291)), ('B', 523, u'THR', 0.8124122480074325, (227.518, 182.686, 249.38400000000001)), ('B', 546, u'LEU', 0.7851001806941537, (218.725, 183.51899999999998, 233.47299999999998)), ('B', 586, u'ASP', 0.7268597189346071, (218.178, 175.77599999999998, 222.303)), ('B', 609, u'ALA', 0.7251573431942333, (189.02100000000002, 181.266, 206.33200000000002)), ('B', 661, u'GLU', 0.7343659447907468, (194.09, 184.126, 188.641)), ('B', 666, u'ILE', 0.7351825226610647, (197.88000000000002, 185.17499999999998, 201.11299999999997)), ('B', 670, u'ILE', 0.7121268529057497, (199.198, 181.15200000000002, 197.584)), ('B', 713, u'ALA', 0.6633366731711967, (203.591, 186.58100000000002, 161.661)), ('B', 741, u'TYR', 0.6615892730712976, (193.772, 221.79299999999998, 218.17499999999998)), ('B', 749, u'CYS', 0.680723093382539, (197.125, 226.18200000000002, 228.02)), ('B', 753, u'LEU', 0.6436524146774556, (202.20399999999998, 225.78, 224.647)), ('B', 770, u'ILE', 0.6515252744290497, (201.38000000000002, 221.189, 201.49800000000002)), ('B', 777, u'ASN', 0.6082852431986272, (199.983, 220.118, 191.118)), ('B', 781, u'VAL', 0.6057599147820523, (198.695, 219.001, 185.067)), ('B', 784, u'GLN', 0.6312881164546033, (199.16299999999998, 223.124, 179.656)), ('B', 887, u'THR', 0.6368208152348649, (200.412, 221.634, 166.88500000000002)), ('B', 890, u'ALA', 0.6813488729151368, (204.212, 223.315, 170.107)), ('B', 906, u'PHE', 0.5361017077246802, (198.99200000000002, 205.984, 161.809)), ('B', 926, u'GLN', 0.7012187249270725, (185.665, 200.806, 166.317)), ('B', 940, u'SER', 0.7647047883748471, (179.08700000000002, 199.016, 185.944)), ('B', 952, u'VAL', 0.6873271162353459, (190.155, 210.525, 199.622)), ('B', 953, u'ASN', 0.7114685344427893, (189.814, 207.678, 202.094)), ('B', 957, u'GLN', 0.7298739259016005, (190.99, 208.626, 207.759)), ('B', 980, u'ILE', 0.7440411191664255, (190.57, 220.393, 234.053)), ('B', 996, u'LEU', 0.6901453513891962, (197.491, 216.92000000000002, 227.283)), ('B', 1010, u'GLN', 0.718296942040091, (202.41899999999998, 211.512, 207.412)), ('B', 1021, u'SER', 0.6220150627903, (201.553, 211.222, 190.661)), ('B', 1033, u'VAL', 0.588860960761609, (197.539, 214.45000000000002, 174.737)), ('B', 1049, u'LEU', 0.6128139936120008, (197.555, 206.99800000000002, 168.55700000000002)), ('B', 1051, u'SER', 0.5941459839300872, (194.503, 210.39800000000002, 174.118)), ('B', 1094, u'VAL', 0.6394104848106105, (209.62, 192.74899999999997, 155.198)), ('B', 1119, u'ASN', 0.6794028213190644, (210.565, 198.93, 147.146)), ('B', 1301, u'NAG', 0.7192876595892376, (175.96800000000002, 178.227, 222.90200000000002)), ('B', 1302, u'NAG', 0.7718667632996015, (148.58800000000002, 199.465, 243.86800000000002)), ('B', 1304, u'NAG', 0.8402599189112289, (226.95700000000002, 168.228, 237.465)), ('B', 1305, u'NAG', 0.7920081387104634, (222.4, 169.57, 262.087)), ('B', 1306, u'NAG', 0.7614154080299641, (177.81, 191.58100000000002, 193.635)), ('B', 1307, u'NAG', 0.802164610422091, (209.02100000000002, 175.54, 210.88800000000003)), ('B', 1308, u'NAG', 0.7567726914955755, (192.095, 168.664, 196.497)), ('B', 1310, u'NAG', 0.6795825913174353, (202.11299999999997, 178.108, 163.875)), ('F', 18, u'HIS', 0.8233122149239723, (224.08700000000002, 192.96800000000002, 291.339)), ('F', 19, u'PHE', 0.8409612112798521, (221.67499999999998, 194.816, 293.639)), ('F', 21, u'LYS', 0.8568386519620724, (224.265, 199.161, 296.09799999999996)), ('F', 43, u'ASN', 0.796239940092859, (229.67299999999997, 168.053, 301.402)), ('F', 45, u'ARG', 0.8008799970063034, (224.435, 169.86700000000002, 303.42299999999994)), ('F', 49, u'GLU', 0.8319439282277351, (221.258, 175.075, 303.176)), ('F', 56, u'LYS', 0.8203453850918415, (217.53, 184.24599999999998, 299.648)), ('F', 60, u'GLU', 0.83232816644434, (214.43200000000002, 189.608, 298.626)), ('F', 63, u'LEU', 0.7484940681632134, (214.72, 193.667, 295.53799999999995)), ('F', 64, u'SER', 0.7668335641078438, (211.83100000000002, 195.001, 297.72999999999996)), ('C', 97, u'LYS', 0.8386440651855536, (261.46599999999995, 174.874, 231.76299999999998)), ('C', 98, u'SER', 0.8345547074503067, (261.39599999999996, 173.48800000000003, 235.32800000000003)), ('C', 106, u'PHE', 0.6741592452100166, (248.102, 189.797, 246.721)), ('C', 117, u'LEU', 0.6014799967731623, (245.638, 186.349, 249.342)), ('C', 118, u'LEU', 0.619546787720376, (248.21499999999997, 183.617, 248.993)), ('C', 119, u'ILE', 0.6429816791103293, (248.009, 181.38600000000002, 245.939)), ('C', 143, u'VAL', 0.6967069559221509, (263.314, 172.399, 247.569)), ('C', 193, u'VAL', 0.6524193740700168, (245.102, 187.545, 234.329)), ('C', 201, u'PHE', 0.6902169429146247, (239.126, 187.83200000000002, 242.536)), ('C', 211, u'ASN', 0.8398963025898927, (260.20799999999997, 177.54, 221.469)), ('C', 214, u'ARG', 0.7627302076188571, (264.019, 185.654, 226.164)), ('C', 235, u'ILE', 0.6790537183175528, (244.253, 194.346, 246.718)), ('C', 277, u'LEU', 0.7292640255366235, (236.508, 190.137, 219.598)), ('C', 289, u'VAL', 0.7164705189471805, (241.471, 194.14299999999997, 217.712)), ('C', 290, u'ASP', 0.7121263544534248, (242.155, 196.909, 220.23399999999998)), ('C', 291, u'CYS', 0.7001465725762283, (239.835, 199.789, 219.18200000000002)), ('C', 315, u'THR', 0.7261546298883477, (235.10399999999998, 206.925, 213.256)), ('C', 319, u'ARG', 0.7731291767616127, (236.77399999999997, 218.71699999999998, 219.849)), ('C', 347, u'PHE', 0.7666495742959433, (227.512, 248.412, 271.944)), ('C', 348, u'ALA', 0.7606618914451623, (223.96200000000002, 248.24299999999997, 273.172)), ('C', 355, u'ARG', 0.8191834503244408, (219.516, 245.993, 265.146)), ('C', 357, u'ARG', 0.8510734154389415, (219.872, 246.766, 258.784)), ('C', 361, u'CYS', 0.8650737387862624, (225.64299999999997, 245.944, 249.404)), ('C', 381, u'GLY', 0.8275019051478032, (221.30100000000002, 226.282, 258.522)), ('C', 391, u'CYS', 0.7800995985761642, (222.21599999999998, 236.138, 248.254)), ('C', 408, u'ARG', 0.7755756114527922, (226.201, 229.90200000000002, 275.289)), ('C', 413, u'GLY', 0.7432634247649348, (216.768, 226.039, 271.29299999999995)), ('C', 423, u'TYR', 0.7530944042556007, (217.51, 238.035, 273.334)), ('C', 432, u'CYS', 0.822689132264034, (225.49200000000002, 233.21399999999997, 262.068)), ('C', 467, u'ASP', 0.7764862487972309, (209.873, 245.404, 273.561)), ('C', 474, u'GLN', 0.7645090001986623, (205.631, 242.266, 290.89)), ('C', 477, u'SER', 0.7747322197279664, (200.786, 239.295, 295.637)), ('C', 495, u'TYR', 0.7714815020389095, (226.71099999999998, 244.11399999999998, 284.67900000000003)), ('C', 525, u'CYS', 0.8401192636618514, (225.271, 239.232, 247.85500000000002)), ('C', 534, u'VAL', 0.7920055546953721, (242.66299999999998, 234.737, 229.07)), ('C', 538, u'CYS', 0.7588822625957151, (239.38200000000003, 227.48600000000002, 224.792)), ('C', 540, u'ASN', 0.7940632463155665, (235.11399999999998, 227.784, 230.42700000000002)), ('C', 574, u'ASP', 0.7002820922641759, (228.804, 235.82500000000002, 220.08)), ('C', 597, u'VAL', 0.6965932759689462, (239.937, 207.46200000000002, 208.297)), ('C', 620, u'VAL', 0.755305707908369, (244.91899999999998, 219.167, 215.963)), ('C', 668, u'ALA', 0.6973634434308248, (236.39800000000002, 220.38700000000003, 198.039)), ('C', 669, u'GLY', 0.7376453107102332, (237.985, 218.873, 194.91899999999998)), ('C', 671, u'CYS', 0.6617812118068268, (240.70899999999997, 212.945, 196.589)), ('C', 672, u'ALA', 0.7557358574742393, (243.192, 210.415, 197.944)), ('C', 711, u'SER', 0.6527754678377174, (235.21899999999997, 217.964, 158.505)), ('C', 718, u'PHE', 0.7108138146430119, (231.21699999999998, 199.185, 165.791)), ('C', 745, u'ASP', 0.7905003241117273, (203.48000000000002, 190.072, 229.072)), ('C', 781, u'VAL', 0.5940213630379686, (207.823, 195.664, 187.463)), ('C', 809, u'PRO', 0.7942101463597393, (216.24699999999999, 173.11299999999997, 183.12800000000001)), ('C', 814, u'LYS', 0.7499719129030978, (214.567, 177.344, 186.91299999999998)), ('C', 864, u'LEU', 0.64809064414935, (203.165, 187.16899999999998, 197.108)), ('C', 876, u'ALA', 0.625385134525771, (208.283, 184.79399999999998, 179.757)), ('C', 880, u'GLY', 0.6524216811394251, (208.88800000000003, 186.92600000000002, 174.30200000000002)), ('C', 897, u'PRO', 0.5918039379044278, (213.39200000000002, 185.132, 163.05700000000002)), ('C', 900, u'MET', 0.6309296992102417, (215.45100000000002, 189.641, 161.42000000000002)), ('C', 901, u'GLN', 0.5868906036424366, (214.316, 191.14899999999997, 164.676)), ('C', 948, u'LEU', 0.6113846347348156, (220.43200000000002, 195.591, 196.309)), ('C', 962, u'LEU', 0.6518720466953926, (214.52200000000002, 199.05700000000002, 216.84)), ('C', 968, u'SER', 0.7189816338381964, (217.093, 201.29399999999998, 227.02100000000002)), ('C', 990, u'GLU', 0.7448838309777992, (202.874, 203.724, 236.967)), ('C', 997, u'ILE', 0.6779273588884227, (206.07299999999998, 203.36200000000002, 227.166)), ('C', 1000, u'ARG', 0.7037493102718387, (209.418, 202.684, 223.258)), ('C', 1008, u'VAL', 0.6698965211185413, (207.91, 203.57299999999998, 211.13299999999998)), ('C', 1015, u'ALA', 0.6518522013907172, (209.447, 202.877, 201.137)), ('C', 1019, u'ARG', 0.6419285120473108, (208.592, 203.015, 195.138)), ('C', 1070, u'ALA', 0.6720443084471571, (234.136, 202.08700000000002, 167.127)), ('C', 1077, u'THR', 0.6456599417886634, (232.009, 217.056, 153.907)), ('C', 1094, u'VAL', 0.6264197115010995, (225.833, 212.85100000000003, 154.545)), ('C', 1095, u'PHE', 0.6289641474597829, (227.925, 213.8, 151.534)), ('C', 1301, u'NAG', 0.7470966681783145, (254.731, 202.86200000000002, 224.38200000000003)), ('C', 1306, u'NAG', 0.7968345618699374, (234.562, 243.198, 260.634)), ('C', 1307, u'NAG', 0.6678901057664921, (241.92200000000003, 193.903, 194.947)), ('C', 1308, u'NAG', 0.7423098485962656, (241.786, 226.132, 208.007)), ('C', 1311, u'NAG', 0.6530935313705667, (239.19, 209.74599999999998, 163.626)), ('G', 4, u'GLU', 0.8235022555116902, (231.58100000000002, 238.677, 290.202)), ('G', 19, u'PHE', 0.7649322886755009, (212.731, 225.672, 289.195)), ('G', 21, u'LYS', 0.7064641984448098, (207.623, 224.89700000000002, 291.43399999999997)), ('G', 40, u'TYR', 0.7887629584711987, (225.592, 244.88600000000002, 297.122)), ('G', 58, u'LEU', 0.8084366277089446, (218.463, 226.389, 297.72999999999996))]
data['rota'] = [('B', ' 814 ', 'LYS', 0.04997598221793202, (179.474, 221.887, 181.487)), ('C', ' 603 ', 'ASN', 0.09022259879715447, (243.36299999999994, 194.03600000000006, 201.222)), ('C', '1072 ', 'GLU', 0.19616724453949194, (236.30999999999995, 206.067, 162.785)), ('C', '1074 ', 'ASN', 0.0, (237.69099999999995, 212.005, 159.08800000000002))]
data['clusters'] = [('A', '1070', 1, 'Bond angle:N:CA:C\nBond angle:C:CA:CB', (205.463, 231.23999999999998, 163.01399999999998)), ('A', '1071', 1, 'C-beta\nBond angle:N:CA:CB\nBond angle:N:CA:C', (202.969, 232.82100000000003, 160.631)), ('A', '1072', 1, 'Dihedral angle:CB:CG:CD:OE1', (200.88500000000002, 230.266, 158.777)), ('A', '1109', 1, 'cablam Outlier', (207.0, 224.3, 156.8)), ('A', '1311', 1, 'smoc Outlier', (196.256, 231.54399999999998, 158.737)), ('A', '713', 1, 'smoc Outlier', (196.97, 225.376, 158.04899999999998)), ('A', '714', 1, 'smoc Outlier', (200.686, 225.093, 157.30800000000002)), ('A', '218', 2, 'cablam Outlier', (206.5, 262.6, 214.6)), ('A', '220', 2, 'cablam CA Geom Outlier', (211.5, 257.6, 215.6)), ('A', '222', 2, 'smoc Outlier', (214.57899999999998, 254.45200000000003, 220.95700000000002)), ('A', '33', 2, 'cablam Outlier', (205.7, 256.1, 216.9)), ('A', '34', 2, 'cablam CA Geom Outlier', (207.2, 257.0, 220.3)), ('A', '193', 3, 'smoc Outlier', (209.466, 254.841, 230.417)), ('A', '86', 3, 'cablam Outlier', (200.4, 253.6, 236.9)), ('A', '87', 3, 'cablam Outlier', (198.7, 250.4, 235.6)), ('A', '88', 3, 'cablam Outlier', (201.3, 248.1, 234.0)), ('A', '90', 3, 'smoc Outlier', (203.83700000000002, 254.46200000000002, 232.22)), ('A', '666', 4, 'cablam Outlier\nsmoc Outlier', (192.6, 233.8, 196.8)), ('A', '667', 4, 'cablam Outlier', (190.7, 230.6, 196.0)), ('A', '671', 4, 'smoc Outlier', (192.172, 236.289, 192.329)), ('A', '672', 4, 'smoc Outlier', (193.112, 239.842, 193.23999999999998)), ('A', '402', 5, 'smoc Outlier', (189.512, 210.463, 265.622)), ('A', '406', 5, 'smoc Outlier', (195.401, 211.17399999999998, 263.502)), ('A', '408', 5, 'Dihedral angle:CD:NE:CZ:NH1', (197.004, 213.58100000000002, 258.96299999999997)), ('A', '410', 5, 'smoc Outlier', (192.895, 210.893, 256.46)), ('A', '738', 6, 'smoc Outlier', (223.011, 215.14299999999997, 218.288)), ('A', '741', 6, 'smoc Outlier', (223.118, 219.906, 220.016)), ('A', '742', 6, 'smoc Outlier', (221.224, 218.569, 223.011)), ('A', '763', 6, 'smoc Outlier', (219.758, 211.005, 213.81)), ('A', '1049', 7, 'smoc Outlier', (216.39800000000002, 221.07299999999998, 168.52100000000002)), ('A', '1066', 7, 'smoc Outlier', (213.272, 224.94299999999998, 170.095)), ('A', '906', 7, 'smoc Outlier', (215.88600000000002, 220.108, 161.83)), ('A', '912', 7, 'smoc Outlier', (213.591, 218.976, 155.67899999999997)), ('A', '480', 8, 'smoc Outlier', (191.20299999999997, 182.17399999999998, 270.501)), ('A', '482', 8, 'smoc Outlier', (186.17299999999997, 184.13299999999998, 270.452)), ('A', '483', 8, 'smoc Outlier', (187.782, 184.26999999999998, 273.9)), ('A', '484', 8, 'cablam Outlier\nsmoc Outlier', (190.3, 186.8, 275.1)), ('A', '1077', 9, 'smoc Outlier', (193.599, 219.83200000000002, 151.46800000000002)), ('A', '1095', 9, 'smoc Outlier', (198.493, 217.583, 149.497)), ('A', '1104', 9, 'smoc Outlier', (202.61499999999998, 218.38700000000003, 147.98700000000002)), ('A', '379', 10, 'smoc Outlier', (191.029, 218.817, 248.655)), ('A', '432', 10, 'smoc Outlier', (187.751, 217.108, 250.346)), ('A', '433', 10, 'smoc Outlier', (188.672, 216.183, 253.904)), ('A', '320', 11, 'smoc Outlier', (183.76999999999998, 234.97299999999998, 217.01399999999998)), ('A', '538', 11, 'smoc Outlier', (177.70299999999997, 233.004, 220.33800000000002)), ('A', '590', 11, 'smoc Outlier', (181.407, 229.839, 217.117)), ('A', '797', 12, 'cablam Outlier\nsmoc Outlier', (230.2, 227.7, 163.8)), ('A', '898', 12, 'side-chain clash\nBond angle:CA:CB:CG', (227.955, 222.924, 163.503)), ('A', '899', 12, 'side-chain clash', (228.969, 223.248, 161.883)), ('A', '1012', 13, 'smoc Outlier', (214.99200000000002, 213.904, 204.995)), ('A', '770', 13, 'smoc Outlier', (221.39200000000002, 213.062, 203.33200000000002)), ('A', '774', 13, 'smoc Outlier', (224.13899999999998, 215.403, 197.629)), ('A', '517', 14, 'Bond angle:CB:CG:CD2\nBond length:CB:CG', (182.622, 213.10299999999998, 238.46200000000002)), ('A', '518', 14, 'smoc Outlier', (181.446, 210.52700000000002, 235.96)), ('A', '519', 14, 'smoc Outlier', (179.87800000000001, 210.416, 232.49)), ('A', '1030', 15, 'smoc Outlier', (221.151, 212.98000000000002, 179.047)), ('A', '1031', 15, 'smoc Outlier', (218.136, 213.196, 176.74099999999999)), ('A', '1034', 15, 'cablam Outlier', (223.3, 214.5, 174.9)), ('A', '958', 16, 'smoc Outlier', (214.95100000000002, 225.12, 208.97899999999998)), ('A', '962', 16, 'smoc Outlier', (216.38700000000003, 224.303, 214.93200000000002)), ('A', '965', 16, 'smoc Outlier', (214.74399999999997, 225.79899999999998, 219.88100000000003)), ('A', '1305', 17, 'smoc Outlier', (162.41299999999998, 220.731, 235.47299999999998)), ('A', '579', 17, 'cablam Outlier', (167.7, 221.2, 232.1)), ('A', '1306', 18, 'Bond angle:C8:C7:N2', (176.364, 222.92800000000003, 257.138)), ('A', '342', 18, 'smoc Outlier', (178.536, 218.94299999999998, 260.161)), ('A', '211', 19, 'smoc Outlier', (211.73899999999998, 273.005, 217.55700000000002)), ('A', '212', 19, 'smoc Outlier', (207.953, 272.78599999999994, 218.105)), ('A', '444', 20, 'smoc Outlier', (183.57399999999998, 214.154, 278.99399999999997)), ('A', '497', 20, 'smoc Outlier', (188.472, 211.70399999999998, 275.369)), ('A', '546', 21, 'smoc Outlier', (178.39600000000002, 220.721, 231.107)), ('A', '547', 21, 'smoc Outlier', (180.346, 223.65200000000002, 229.812)), ('A', '1054', 22, 'smoc Outlier', (224.72, 226.134, 182.48000000000002)), ('A', '1062', 22, 'smoc Outlier', (219.118, 224.47899999999998, 180.82100000000003)), ('A', '977', 23, 'smoc Outlier', (221.555, 223.32200000000003, 231.39700000000002)), ('A', '980', 23, 'smoc Outlier', (219.494, 223.929, 236.16899999999998)), ('A', '986', 24, 'side-chain clash', (220.568, 216.811, 243.113)), ('A', '987', 24, 'side-chain clash', (220.568, 216.811, 243.113)), ('A', '391', 25, 'smoc Outlier', (178.212, 219.554, 239.65)), ('A', '525', 25, 'smoc Outlier', (174.975, 220.924, 241.95000000000002)), ('A', '108', 26, 'cablam Outlier', (200.0, 253.3, 246.4)), ('A', '110', 26, 'Bond length:CB:CG', (201.006, 258.369, 248.062)), ('A', '276', 27, 'smoc Outlier', (209.39800000000002, 243.948, 215.336)), ('A', '277', 27, 'smoc Outlier', (212.516, 245.961, 216.129)), ('A', '574', 28, 'smoc Outlier', (176.784, 218.57, 219.515)), ('A', '586', 28, 'smoc Outlier', (172.11299999999997, 221.722, 218.64299999999997)), ('A', '1058', 29, 'cablam Outlier', (223.0, 224.1, 193.9)), ('A', '729', 29, 'smoc Outlier', (220.281, 219.42700000000002, 192.02)), ('A', '41', 30, 'cablam Outlier', (221.0, 245.0, 227.4)), ('A', '42', 30, 'smoc Outlier', (221.83200000000002, 243.039, 224.28)), ('E', '20', 1, 'smoc Outlier', (208.562, 194.034, 263.782)), ('E', '21', 1, 'smoc Outlier', (210.373, 192.21399999999997, 261.02299999999997)), ('E', '47', 2, 'smoc Outlier', (202.854, 199.80200000000002, 285.14000000000004)), ('E', '48', 2, 'smoc Outlier', (201.333, 201.72899999999998, 282.257)), ('B', '1306', 1, 'Bond angle:C8:C7:N2\nsmoc Outlier', (177.81, 191.58100000000002, 193.635)), ('B', '309', 1, 'smoc Outlier', (184.469, 193.959, 201.19899999999998)), ('B', '310', 1, 'cablam CA Geom Outlier', (186.4, 191.0, 200.0)), ('B', '599', 1, 'side-chain clash', (186.195, 189.194, 202.888)), ('B', '601', 1, 'side-chain clash\nbackbone clash', (179.753, 190.123, 201.241)), ('B', '602', 1, 'Ramachandran', (179.609, 189.983, 203.254)), ('B', '603', 1, 'side-chain clash\nbackbone clash', (179.753, 190.123, 201.241)), ('B', '604', 1, 'cablam Outlier', (178.7, 187.2, 198.8)), ('B', '336', 2, 'smoc Outlier', (227.489, 173.518, 255.466)), ('B', '359', 2, 'cablam CA Geom Outlier', (231.1, 180.1, 255.0)), ('B', '361', 2, 'smoc Outlier', (228.77899999999997, 176.44, 251.608)), ('B', '363', 2, 'smoc Outlier', (223.465, 176.79399999999998, 254.6)), ('B', '391', 2, 'backbone clash', (225.036, 184.165, 249.281)), ('B', '522', 2, 'backbone clash', (225.036, 184.165, 249.281)), ('B', '523', 2, 'smoc Outlier', (227.518, 182.686, 249.38400000000001)), ('B', '666', 3, 'cablam Outlier\nsmoc Outlier', (197.9, 185.2, 201.1)), ('B', '667', 3, 'cablam Outlier', (201.6, 185.1, 200.3)), ('B', '670', 3, 'smoc Outlier', (199.198, 181.15200000000002, 197.584)), ('B', '952', 4, 'smoc Outlier', (190.155, 210.525, 199.622)), ('B', '953', 4, 'smoc Outlier', (189.814, 207.678, 202.094)), ('B', '957', 4, 'smoc Outlier', (190.99, 208.626, 207.759)), ('B', '111', 5, 'cablam Outlier\nsmoc Outlier', (167.5, 185.3, 254.5)), ('B', '113', 5, 'cablam Outlier', (170.9, 188.7, 258.4)), ('B', '134', 5, 'smoc Outlier', (163.11499999999998, 187.654, 256.23099999999994)), ('B', '276', 6, 'smoc Outlier', (180.03, 197.43, 217.967)), ('B', '288', 6, 'smoc Outlier', (174.955, 195.094, 216.708)), ('B', '289', 6, 'smoc Outlier', (178.08, 192.965, 216.336)), ('B', '86', 7, 'cablam Outlier', (174.0, 186.8, 239.9)), ('B', '88', 7, 'cablam Outlier', (178.6, 189.9, 236.9)), ('B', '90', 7, 'smoc Outlier', (171.889, 189.072, 234.77399999999997)), ('B', '557', 8, 'side-chain clash', (222.645, 179.398, 218.741)), ('B', '574', 8, 'side-chain clash\nDihedral angle:CA:CB:CG:OD1', (220.10899999999998, 181.659, 222.091)), ('B', '586', 8, 'smoc Outlier', (218.178, 175.77599999999998, 222.303)), ('B', '777', 9, 'smoc Outlier', (199.983, 220.118, 191.118)), ('B', '781', 9, 'smoc Outlier', (198.695, 219.001, 185.067)), ('B', '784', 9, 'smoc Outlier', (199.16299999999998, 223.124, 179.656)), ('B', '1049', 10, 'smoc Outlier', (197.555, 206.99800000000002, 168.55700000000002)), ('B', '899', 10, 'side-chain clash', (197.936, 210.141, 167.523)), ('B', '906', 10, 'smoc Outlier', (198.99200000000002, 205.984, 161.809)), ('B', '887', 11, 'smoc Outlier', (200.412, 221.634, 166.88500000000002)), ('B', '890', 11, 'smoc Outlier', (204.212, 223.315, 170.107)), ('B', '891', 11, 'cablam Outlier', (203.0, 226.6, 168.7)), ('B', '1033', 12, 'smoc Outlier', (197.539, 214.45000000000002, 174.737)), ('B', '1034', 12, 'Bond angle:CD1:CG:CD2\ncablam Outlier', (199.636, 217.262, 173.289)), ('B', '1051', 12, 'smoc Outlier', (194.503, 210.39800000000002, 174.118)), ('B', '475', 13, 'smoc Outlier', (236.18200000000002, 191.102, 296.04)), ('B', '486', 13, 'cablam Outlier', (239.1, 186.2, 302.4)), ('B', '487', 13, 'smoc Outlier', (237.448, 188.24099999999999, 299.691)), ('B', '123', 14, 'cablam Outlier', (149.0, 196.8, 240.9)), ('B', '1302', 14, 'smoc Outlier', (148.58800000000002, 199.465, 243.86800000000002)), ('B', '299', 15, 'smoc Outlier', (186.757, 191.642, 211.112)), ('B', '315', 15, 'smoc Outlier', (192.261, 191.284, 213.248)), ('B', '986', 16, 'side-chain clash', (198.065, 228.083, 239.85)), ('B', '987', 16, 'side-chain clash', (198.065, 228.083, 239.85)), ('B', '797', 17, 'cablam Outlier', (185.1, 214.7, 162.2)), ('B', '898', 17, 'side-chain clash\nBond angle:CA:CB:CG', (190.29399999999998, 215.137, 161.95800000000003)), ('B', '423', 18, 'smoc Outlier', (228.585, 184.88700000000003, 276.601)), ('B', '464', 18, 'smoc Outlier', (230.925, 188.238, 271.453)), ('B', '444', 19, 'smoc Outlier', (227.437, 162.108, 284.97099999999995)), ('B', '445', 19, 'smoc Outlier', (226.641, 160.025, 287.98999999999995)), ('B', '220', 20, 'cablam CA Geom Outlier', (166.9, 192.2, 217.6)), ('B', '34', 20, 'cablam CA Geom Outlier', (169.2, 189.6, 222.5)), ('B', '432', 21, 'smoc Outlier', (219.107, 182.42800000000003, 265.559)), ('B', '513', 21, 'smoc Outlier', (224.11499999999998, 181.106, 264.6)), ('B', '501', 22, 'smoc Outlier', (218.61399999999998, 166.85700000000003, 288.33099999999996)), ('B', '502', 22, 'smoc Outlier', (215.309, 168.651, 287.803)), ('B', '749', 23, 'smoc Outlier', (197.125, 226.18200000000002, 228.02)), ('B', '753', 23, 'smoc Outlier', (202.20399999999998, 225.78, 224.647)), ('B', '940', 24, 'smoc Outlier', (179.08700000000002, 199.016, 185.944)), ('B', '942', 24, 'cablam Outlier', (182.6, 201.1, 191.0)), ('F', '56', 1, 'smoc Outlier', (217.53, 184.24599999999998, 299.648)), ('F', '60', 1, 'smoc Outlier', (214.43200000000002, 189.608, 298.626)), ('F', '63', 1, 'smoc Outlier', (214.72, 193.667, 295.53799999999995)), ('F', '64', 1, 'smoc Outlier', (211.83100000000002, 195.001, 297.72999999999996)), ('F', '18', 2, 'smoc Outlier', (224.08700000000002, 192.96800000000002, 291.339)), ('F', '19', 2, 'smoc Outlier', (221.67499999999998, 194.816, 293.639)), ('F', '21', 2, 'smoc Outlier', (224.265, 199.161, 296.09799999999996)), ('F', '43', 3, 'smoc Outlier', (229.67299999999997, 168.053, 301.402)), ('F', '45', 3, 'smoc Outlier', (224.435, 169.86700000000002, 303.42299999999994)), ('F', '49', 3, 'smoc Outlier', (221.258, 175.075, 303.176)), ('C', '1070', 1, 'smoc Outlier', (234.136, 202.08700000000002, 167.127)), ('C', '1071', 1, 'cablam Outlier', (236.9, 202.8, 164.6)), ('C', '1072', 1, 'Rotamer', (236.30999999999995, 206.067, 162.785)), ('C', '1074', 1, 'Rotamer\nBond angle:CA:CB:CG', (237.691, 212.005, 159.08800000000002)), ('C', '1077', 1, 'smoc Outlier', (232.009, 217.056, 153.907)), ('C', '1094', 1, 'smoc Outlier', (225.833, 212.85100000000003, 154.545)), ('C', '1095', 1, 'smoc Outlier', (227.925, 213.8, 151.534)), ('C', '1311', 1, 'Bond angle:C8:C7:N2\nsmoc Outlier', (239.19, 209.74599999999998, 163.626)), ('C', '711', 1, 'smoc Outlier', (235.21899999999997, 217.964, 158.505)), ('C', '718', 1, 'smoc Outlier', (231.21699999999998, 199.185, 165.791)), ('C', '106', 2, 'smoc Outlier', (248.102, 189.797, 246.721)), ('C', '108', 2, 'cablam Outlier', (248.0, 195.8, 250.8)), ('C', '117', 2, 'smoc Outlier', (245.638, 186.349, 249.342)), ('C', '118', 2, 'smoc Outlier', (248.21499999999997, 183.617, 248.993)), ('C', '119', 2, 'smoc Outlier', (248.009, 181.38600000000002, 245.939)), ('C', '235', 2, 'smoc Outlier', (244.253, 194.346, 246.718)), ('C', '86', 2, 'cablam Outlier', (248.3, 195.8, 241.3)), ('C', '88', 2, 'cablam Outlier', (243.3, 197.9, 238.2)), ('C', '666', 3, 'cablam Outlier', (237.7, 213.8, 200.6)), ('C', '667', 3, 'cablam Outlier', (235.9, 217.0, 199.6)), ('C', '668', 3, 'smoc Outlier', (236.39800000000002, 220.38700000000003, 198.039)), ('C', '669', 3, 'smoc Outlier', (237.985, 218.873, 194.91899999999998)), ('C', '671', 3, 'smoc Outlier', (240.70899999999997, 212.945, 196.589)), ('C', '672', 3, 'smoc Outlier', (243.192, 210.415, 197.944)), ('C', '797', 4, 'cablam Outlier', (218.7, 182.3, 166.8)), ('C', '897', 4, 'smoc Outlier', (213.39200000000002, 185.132, 163.05700000000002)), ('C', '898', 4, 'side-chain clash\nBond angle:CA:CB:CG', (215.767, 186.44299999999998, 165.666)), ('C', '899', 4, 'side-chain clash', (216.144, 185.326, 163.748)), ('C', '900', 4, 'smoc Outlier', (215.45100000000002, 189.641, 161.42000000000002)), ('C', '901', 4, 'smoc Outlier', (214.316, 191.14899999999997, 164.676)), ('C', '277', 5, 'smoc Outlier', (236.508, 190.137, 219.598)), ('C', '289', 5, 'smoc Outlier', (241.471, 194.14299999999997, 217.712)), ('C', '290', 5, 'smoc Outlier', (242.155, 196.909, 220.23399999999998)), ('C', '291', 5, 'smoc Outlier', (239.835, 199.789, 219.18200000000002)), ('C', '293', 5, 'cablam CA Geom Outlier', (245.4, 201.1, 219.2)), ('C', '361', 6, 'smoc Outlier', (225.64299999999997, 245.944, 249.404)), ('C', '391', 6, 'smoc Outlier', (222.21599999999998, 236.138, 248.254)), ('C', '525', 6, 'smoc Outlier', (225.271, 239.232, 247.85500000000002)), ('C', '527', 6, 'cablam Outlier', (232.1, 239.5, 246.8)), ('C', '986', 7, 'Bond angle:CA:C', (201.534, 200.545, 241.835)), ('C', '987', 7, 'Bond angle:N', (201.44299999999998, 204.448, 241.974)), ('C', '990', 7, 'smoc Outlier', (202.874, 203.724, 236.967)), ('C', '1307', 8, 'Bond angle:C8:C7:N2\nsmoc Outlier', (241.92200000000003, 193.903, 194.947)), ('C', '603', 8, 'Rotamer', (243.36299999999994, 194.03600000000006, 201.222)), ('C', '540', 9, 'smoc Outlier', (235.11399999999998, 227.784, 230.42700000000002)), ('C', '549', 9, 'cablam CA Geom Outlier', (232.6, 227.3, 226.6)), ('C', '347', 10, 'smoc Outlier', (227.512, 248.412, 271.944)), ('C', '348', 10, 'smoc Outlier', (223.96200000000002, 248.24299999999997, 273.172)), ('C', '1000', 11, 'smoc Outlier', (209.418, 202.684, 223.258)), ('C', '997', 11, 'smoc Outlier', (206.07299999999998, 203.36200000000002, 227.166)), ('C', '122', 12, 'Bond angle:C', (252.907, 172.984, 246.042)), ('C', '123', 12, 'Ramachandran\nBond angle:N:CA', (253.508, 170.506, 243.07899999999998)), ('C', '315', 13, 'smoc Outlier', (235.10399999999998, 206.925, 213.256)), ('C', '597', 13, 'smoc Outlier', (239.937, 207.46200000000002, 208.297)), ('C', '1015', 14, 'smoc Outlier', (209.447, 202.877, 201.137)), ('C', '1019', 14, 'smoc Outlier', (208.592, 203.015, 195.138)), ('C', '220', 15, 'cablam CA Geom Outlier', (247.0, 185.2, 219.6)), ('C', '34', 15, 'cablam CA Geom Outlier', (248.4, 188.8, 224.2)), ('C', '568', 16, 'Dihedral angle:CA:CB:CG:OD1', (223.20399999999998, 236.61599999999999, 216.804)), ('C', '574', 16, 'smoc Outlier', (228.804, 235.82500000000002, 220.08)), ('C', '744', 17, 'cablam Outlier', (205.0, 192.3, 226.5)), ('C', '745', 17, 'cablam Outlier\nsmoc Outlier', (203.5, 190.1, 229.1)), ('C', '97', 18, 'smoc Outlier', (261.46599999999995, 174.874, 231.76299999999998)), ('C', '98', 18, 'smoc Outlier', (261.39599999999996, 173.48800000000003, 235.32800000000003)), ('C', '809', 19, 'smoc Outlier', (216.24699999999999, 173.11299999999997, 183.12800000000001)), ('C', '814', 19, 'smoc Outlier', (214.567, 177.344, 186.91299999999998)), ('C', '876', 20, 'smoc Outlier', (208.283, 184.79399999999998, 179.757)), ('C', '880', 20, 'smoc Outlier', (208.88800000000003, 186.92600000000002, 174.30200000000002)), ('C', '1058', 21, 'cablam Outlier', (214.5, 192.2, 196.1)), ('C', '948', 21, 'smoc Outlier', (220.43200000000002, 195.591, 196.309)), ('C', '355', 22, 'smoc Outlier', (219.516, 245.993, 265.146)), ('C', '357', 22, 'smoc Outlier', (219.872, 246.766, 258.784)), ('G', '19', 1, 'smoc Outlier', (212.731, 225.672, 289.195)), ('G', '21', 1, 'smoc Outlier', (207.623, 224.89700000000002, 291.43399999999997)), ('D', '1', 1, 'Bond angle:C8:C7:N2', (209.555, 234.531, 154.127)), ('K', '2', 1, 'Bond angle:C8:C7:N2', (179.661, 182.536, 249.23399999999998)), ('L', '2', 1, 'Bond angle:C8:C7:N2', (183.092, 197.686, 163.506)), ('P', '1', 1, 'Bond angle:C8:C7:N2', (235.784, 196.195, 158.88400000000001)), ('P', '2', 1, 'Bond angle:C8:C7:N2', (234.38000000000002, 189.254, 167.39600000000002)), ('R', '1', 1, 'Bond length:C5:O5', (242.025, 209.459, 148.303))]
data['rama'] = [('B', ' 602 ', 'THR', 0.019479898531633927, (179.609, 189.983, 203.254)), ('B', ' 814 ', 'LYS', 0.007039647580268941, (179.474, 221.887, 181.487)), ('C', ' 123 ', 'ALA', 0.0055668756068999814, (253.50799999999998, 170.506, 243.07900000000004))]
data['cablam'] = [('A', '33', 'THR', 'check CA trace,carbonyls, peptide', 'turn\n-TT--', (205.7, 256.1, 216.9)), ('A', '41', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\n-SSEE', (221.0, 245.0, 227.4)), ('A', '86', 'PHE', 'check CA trace,carbonyls, peptide', ' \nEE-TT', (200.4, 253.6, 236.9)), ('A', '87', 'ASN', 'check CA trace,carbonyls, peptide', 'turn\nE-TTE', (198.7, 250.4, 235.6)), ('A', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\n-TTEE', (201.3, 248.1, 234.0)), ('A', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEES--', (200.0, 253.3, 246.4)), ('A', '218', 'GLN', 'check CA trace,carbonyls, peptide', ' \n-----', (206.5, 262.6, 214.6)), ('A', '231', 'ILE', ' beta sheet', ' \nEE---', (213.2, 247.9, 245.6)), ('A', '484', 'GLU', 'check CA trace,carbonyls, peptide', ' \nT--BT', (190.3, 186.8, 275.1)), ('A', '486', 'PHE', 'check CA trace,carbonyls, peptide', 'turn\n-BTTE', (197.0, 184.8, 276.5)), ('A', '579', 'PRO', 'check CA trace,carbonyls, peptide', 'turn\nE-TTT', (167.7, 221.2, 232.1)), ('A', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (192.6, 233.8, 196.8)), ('A', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (190.7, 230.6, 196.0)), ('A', '797', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\n--SSS', (230.2, 227.7, 163.8)), ('A', '890', 'ALA', 'check CA trace,carbonyls, peptide', 'bend\nGGSSS', (226.7, 207.5, 172.8)), ('A', '1034', 'LEU', 'check CA trace,carbonyls, peptide', 'bend\nIISS-', (223.3, 214.5, 174.9)), ('A', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (223.0, 224.1, 193.9)), ('A', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (194.0, 207.6, 136.3)), ('A', '1109', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\nTTS--', (207.0, 224.3, 156.8)), ('A', '34', 'ARG', 'check CA trace', ' \nTT---', (207.2, 257.0, 220.3)), ('A', '131', 'CYS', 'check CA trace', 'bend\nEES--', (209.8, 255.6, 252.4)), ('A', '220', 'PHE', 'check CA trace', ' \n-----', (211.5, 257.6, 215.6)), ('A', '293', 'LEU', 'check CA trace', 'bend\nTTS-H', (198.3, 248.1, 214.7)), ('A', '310', 'LYS', 'check CA trace', 'bend\n--SEE', (203.4, 240.8, 196.7)), ('A', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (181.5, 227.9, 224.1)), ('A', '1043', 'CYS', 'check CA trace', 'turn\nBTTBS', (212.6, 220.4, 177.2)), ('B', '86', 'PHE', 'check CA trace,carbonyls, peptide', ' \nEE-TT', (174.0, 186.8, 239.9)), ('B', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\n-TTEE', (178.6, 189.9, 236.9)), ('B', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEESSS', (173.9, 187.4, 249.3)), ('B', '111', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nSSSSS', (167.5, 185.3, 254.5)), ('B', '113', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nSSSS-', (170.9, 188.7, 258.4)), ('B', '123', 'ALA', 'check CA trace,carbonyls, peptide', 'turn\nEETTE', (149.0, 196.8, 240.9)), ('B', '484', 'GLU', 'check CA trace,carbonyls, peptide', ' \nT--BT', (242.4, 182.7, 297.2)), ('B', '486', 'PHE', 'check CA trace,carbonyls, peptide', 'turn\n-BTTE', (239.1, 186.2, 302.4)), ('B', '519', 'HIS', 'check CA trace,carbonyls, peptide', 'bend\n--SS-', (230.4, 194.3, 252.3)), ('B', '604', 'THR', 'check CA trace,carbonyls, peptide', 'turn\nTTT-S', (178.7, 187.2, 198.8)), ('B', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (197.9, 185.2, 201.1)), ('B', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (201.6, 185.1, 200.3)), ('B', '797', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\n--STT', (185.1, 214.7, 162.2)), ('B', '891', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nGTSS-', (203.0, 226.6, 168.7)), ('B', '942', 'PRO', ' alpha helix', 'turn\nH-TTT', (182.6, 201.1, 191.0)), ('B', '1034', 'LEU', ' alpha helix', 'bend\nIISS-', (199.6, 217.3, 173.3)), ('B', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'turn\nBTTBS', (199.9, 205.6, 177.6)), ('B', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (191.0, 215.4, 192.9)), ('B', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (221.1, 189.5, 139.5)), ('B', '1092', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (210.9, 199.7, 154.5)), ('B', '1109', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\nTTS--', (199.8, 195.4, 158.5)), ('B', '34', 'ARG', 'check CA trace', ' \nTT---', (169.2, 189.6, 222.5)), ('B', '220', 'PHE', 'check CA trace', ' \n-----', (166.9, 192.2, 217.6)), ('B', '293', 'LEU', 'check CA trace', 'bend\nTTS-H', (181.5, 185.7, 218.5)), ('B', '310', 'LYS', 'check CA trace', 'bend\n--SEE', (186.4, 191.0, 200.0)), ('B', '359', 'SER', 'check CA trace', ' \nEE-SS', (231.1, 180.1, 255.0)), ('B', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (209.9, 182.3, 228.0)), ('C', '86', 'PHE', 'check CA trace,carbonyls, peptide', ' \nEE-TT', (248.3, 195.8, 241.3)), ('C', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\n-TT-E', (243.3, 197.9, 238.2)), ('C', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEESS-', (248.0, 195.8, 250.8)), ('C', '113', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nSSSS-', (248.1, 193.8, 259.7)), ('C', '218', 'GLN', 'check CA trace,carbonyls, peptide', ' \n-----', (253.9, 186.8, 218.8)), ('C', '231', 'ILE', ' beta sheet', ' \nEE---', (236.6, 186.9, 249.1)), ('C', '484', 'GLU', 'check CA trace,carbonyls, peptide', ' \nT--BT', (210.3, 249.2, 294.6)), ('C', '486', 'PHE', 'check CA trace,carbonyls, peptide', 'turn\n-BTTE', (209.5, 244.0, 299.5)), ('C', '519', 'HIS', 'check CA trace,carbonyls, peptide', 'bend\n--SS-', (210.4, 236.3, 247.8)), ('C', '527', 'PRO', 'check CA trace,carbonyls, peptide', ' \nE----', (232.1, 239.5, 246.8)), ('C', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (237.7, 213.8, 200.6)), ('C', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (235.9, 217.0, 199.6)), ('C', '744', 'GLY', 'check CA trace,carbonyls, peptide', ' \nTT-S-', (205.0, 192.3, 226.5)), ('C', '745', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nT-S-H', (203.5, 190.1, 229.1)), ('C', '758', 'SER', 'check CA trace,carbonyls, peptide', 'turn\nG-THH', (195.1, 205.3, 218.6)), ('C', '797', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\n--SSS', (218.7, 182.3, 166.8)), ('C', '890', 'ALA', 'check CA trace,carbonyls, peptide', 'turn\nGGTSS', (201.5, 195.7, 172.0)), ('C', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (214.5, 192.2, 196.1)), ('C', '1071', 'GLN', 'check CA trace,carbonyls, peptide', 'bend\nE-SEE', (236.9, 202.8, 164.6)), ('C', '1083', 'HIS', 'check CA trace,carbonyls, peptide', 'bend\nEESSS', (225.0, 219.8, 139.7)), ('C', '1092', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (219.2, 210.2, 154.1)), ('C', '1109', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\nTTS--', (228.3, 203.8, 159.6)), ('C', '34', 'ARG', 'check CA trace', ' \nTT---', (248.4, 188.8, 224.2)), ('C', '220', 'PHE', 'check CA trace', ' \n-----', (247.0, 185.2, 219.6)), ('C', '293', 'LEU', 'check CA trace', 'bend\nTTSSH', (245.4, 201.1, 219.2)), ('C', '310', 'LYS', 'check CA trace', 'bend\n--SEE', (238.8, 200.9, 200.4)), ('C', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (232.6, 227.3, 226.6)), ('C', '1043', 'CYS', 'check CA trace', 'turn\nBTTBS', (219.1, 202.0, 179.1))]
handle_read_draw_probe_dots_unformatted("/home/ccpem/agnel/gisaid/countries_seq/structure_data/emdb/EMD-22534/7jzn/Model_validation_1/validation_cootdata/molprobity_probe7jzn_0.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
