# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  98 ', 'SER', 0.02505552471959866, (218.354, 163.028, 133.43)), ('A', ' 190 ', 'ARG', 0.001055661382355225, (212.146, 162.65799999999993, 140.187)), ('A', ' 231 ', 'ILE', 0.028032128777520295, (191.886, 163.52299999999994, 123.65100000000001)), ('B', ' 709 ', 'ASN', 0.028340828729840943, (134.043, 164.74199999999996, 216.691)), ('C', '  97 ', 'LYS', 0.03187261949931334, (127.40200000000004, 214.11599999999999, 141.974)), ('C', ' 102 ', 'ARG', 0.042635831257134514, (132.379, 211.19499999999996, 131.708)), ('C', ' 110 ', 'LEU', 0.017213002077444587, (146.514, 209.081, 122.546)), ('C', ' 131 ', 'CYS', 0.016640570350211464, (138.413, 204.12599999999995, 118.226)), ('C', '1041 ', 'ASP', 0.02375358574423124, (158.153, 171.47099999999995, 196.596))]
data['omega'] = [('C', ' 215 ', 'ASP', None, (138.497, 215.71299999999994, 148.19))]
data['rota'] = [('A', ' 126 ', 'VAL', 0.25557174055205617, (206.38799999999995, 168.197, 127.997)), ('A', ' 195 ', 'LYS', 0.04036213547102112, (197.768, 157.58499999999995, 135.138)), ('A', ' 223 ', 'LEU', 0.062320605165488444, (201.574, 165.55399999999995, 143.387)), ('A', ' 347 ', 'PHE', 0.1964906636218365, (145.035, 139.75299999999993, 106.865)), ('A', ' 382 ', 'VAL', 0.15605016526900758, (158.84899999999993, 145.537, 128.327)), ('A', ' 519 ', 'HIS', 0.09441713859316132, (155.918, 129.147, 136.361)), ('A', ' 587 ', 'ILE', 0.11668356389536655, (167.949, 129.644, 144.929)), ('A', ' 603 ', 'ASN', 0.15731563450139452, (194.402, 157.49099999999996, 169.148)), ('A', ' 821 ', 'LEU', 0.17409330813995683, (186.418, 174.324, 185.60200000000003)), ('A', ' 907 ', 'ASN', 0.10179447984266714, (169.563, 163.62799999999996, 213.335)), ('C', '  43 ', 'PHE', 0.1499188446126988, (130.523, 185.31699999999998, 149.378)), ('C', '  63 ', 'THR', 0.03559328078619912, (148.44, 212.094, 142.419)), ('C', ' 132 ', 'GLU', 0.12613423596621415, (141.214, 204.425, 115.659)), ('C', ' 224 ', 'GLU', 0.2864680913878094, (133.728, 195.32799999999995, 142.911)), ('C', ' 328 ', 'ARG', 0.2945713318062125, (181.393, 188.20999999999995, 133.412)), ('C', ' 414 ', 'GLN', 0.14952795572690114, (170.418, 153.472, 121.494)), ('C', ' 574 ', 'ASP', 0.1069573121238925, (181.612, 179.87899999999993, 147.216)), ('C', ' 907 ', 'ASN', 0.07010041443839907, (153.253, 166.30099999999993, 214.146))]
data['cbeta'] = [('A', ' 468 ', 'ILE', ' ', 0.30588409931766813, (132.792, 136.486, 114.514)), ('C', '  33 ', 'THR', ' ', 0.2511690980815258, (141.797, 202.30099999999996, 154.619)), ('C', ' 101 ', 'ILE', ' ', 0.2583649674896092, (134.76399999999995, 213.07299999999995, 135.885)), ('C', ' 130 ', 'VAL', ' ', 0.25500275811900375, (140.00099999999995, 199.919, 120.57800000000002)), ('C', ' 195 ', 'LYS', ' ', 0.25209646772396227, (144.537, 195.487, 136.813)), ('C', ' 745 ', 'ASP', ' ', 0.25085813714196814, (133.881, 157.92199999999994, 148.371))]
data['probe'] = [(' A 223  LEU  H  ', ' A 223  LEU HD12', -0.422, (200.41, 163.57, 142.812)), (' C 130  VAL HG22', ' C 168  PHE  H  ', -0.408, (138.41, 198.256, 118.893))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
