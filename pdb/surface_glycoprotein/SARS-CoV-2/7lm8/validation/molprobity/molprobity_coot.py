# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 147 ', 'PRO', None, (-14.915999999999997, 21.925, 18.822)), ('H', ' 149 ', 'PRO', None, (-16.747, 16.098, 19.442)), ('L', '   8 ', 'PRO', None, (-19.898, -5.237, -2.335)), ('L', '  95 ', 'PRO', None, (2.366, -2.88, 5.544999999999999)), ('L', ' 141 ', 'PRO', None, (-39.476, 4.569, 4.095)), ('M', ' 147 ', 'PRO', None, (-22.523999999999987, -81.86999999999999, 24.751999999999995)), ('M', ' 149 ', 'PRO', None, (-16.961, -79.482, 25.513)), ('N', '   8 ', 'PRO', None, (0.61, -64.635, 2.787)), ('N', ' 141 ', 'PRO', None, (5.592, -86.002, 6.412))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' M  83  LYS  HD3', ' M  85  SER  H  ', -1.146, (-28.087, -68.905, 15.102)), (' M  83  LYS  CD ', ' M  85  SER  H  ', -0.881, (-28.511, -69.713, 14.653)), (' M  83  LYS  HD3', ' M  85  SER  N  ', -0.86, (-27.458, -69.554, 15.46)), (' M 210  LYS  C  ', ' M 210  LYS  HD3', -0.698, (-6.143, -99.723, 33.476)), (' M  11  VAL  HB ', ' M 147  PRO  HG3', -0.693, (-23.142, -78.18, 25.384)), (' L  83  ILE HD11', ' L 105  GLU  HA ', -0.686, (-29.49, -1.398, 6.228)), (' N 197  THR HG21', ' N 620  HOH  O  ', -0.681, (-0.116, -97.784, -0.127)), (' L  39  ARG  NH1', ' L 402  HOH  O  ', -0.639, (-22.631, -4.78, 18.373)), (' M 210  LYS  NZ ', ' M 212  GLU  CG ', -0.616, (-3.481, -101.384, 33.793)), (' N 197  THR HG23', ' N 502  HOH  O  ', -0.595, (-1.922, -97.814, 2.668)), (' M 210  LYS  NZ ', ' M 211  VAL  O  ', -0.595, (-3.28, -100.448, 32.372)), (' M  94  ARG HH22', ' M 302  EDO  H21', -0.591, (-1.208, -55.126, 31.67)), (' A 388  ASN  HB3', ' A 528  LYS  HD3', -0.587, (17.459, -30.931, 22.708)), (' M  83  LYS  HE2', ' M  84  ALA  HB3', -0.582, (-29.567, -71.876, 14.756)), (' M 210  LYS  HZ2', ' M 212  GLU  CG ', -0.558, (-3.892, -101.922, 33.557)), (' L  24  GLN  NE2', ' L 403  HOH  O  ', -0.557, (-9.772, -12.648, -8.381)), (' M 210  LYS  NZ ', ' M 402  HOH  O  ', -0.556, (-1.681, -99.741, 33.805)), (' L  57  GLY  C  ', ' L 302  EDO  H12', -0.553, (-20.271, -12.974, 19.536)), (' A 603  EDO  H11', ' H  99  TYR  HA ', -0.549, (4.492, -16.4, 20.124)), (' N  21  ILE HG23', ' N 408  HOH  O  ', -0.535, (0.039, -62.441, 6.651)), (' A 381  GLY  H  ', ' A 603  EDO  H12', -0.535, (6.1, -16.808, 23.125)), (' M  83  LYS  HD3', ' M  85  SER  CB ', -0.531, (-27.689, -68.748, 14.551)), (' A 472  ILE HD12', ' A 484  GLU  HG2', -0.525, (-30.1, -28.022, 39.589)), (' N   6  GLN  HB3', ' N 408  HOH  O  ', -0.516, (-1.596, -62.525, 6.462)), (' M  83  LYS  CE ', ' M  85  SER  H  ', -0.516, (-28.771, -70.113, 15.05)), (' M 149  PRO  HG2', ' M 304  EDO  H22', -0.516, (-14.593, -78.487, 28.11)), (' M 201  LYS  HD2', ' M 304  EDO  H12', -0.513, (-15.292, -78.308, 31.943)), (' L 145  LYS  HB3', ' L 197  THR  OG1', -0.501, (-42.519, 15.683, 1.685)), (' A 493  GLN  NE2', ' A 494  SER  H  ', -0.488, (-24.745, -31.557, 28.775)), (' L  80  PRO  HA ', ' L 106  ILE  CD1', -0.482, (-32.155, -5.552, 10.161)), (' M 210  LYS  HZ2', ' M 211  VAL  C  ', -0.481, (-3.801, -100.691, 32.951)), (' M  33  TRP  HB2', ' M  95  ILE  HB ', -0.478, (-9.906, -51.596, 26.343)), (' M  83  LYS  CD ', ' M  85  SER  CB ', -0.471, (-27.874, -68.486, 14.233)), (' A 347  PHE  O  ', ' A 605  EDO  H22', -0.47, (-11.921, -37.989, 30.3)), (' M 100C TRP  HB2', ' N  91  SER  HB2', -0.469, (-7.266, -49.821, 18.289)), (' L  55  GLU  HG3', ' L  56  THR  N  ', -0.455, (-15.091, -14.31, 19.39)), (' L  94  PRO  HA ', ' L  95  PRO  C  ', -0.447, (1.218, -4.296, 6.696)), (' A 342  PHE  HB2', ' B   1  NAG  H82', -0.445, (2.764, -37.914, 24.81)), (' A 406  GLU  OE2', ' A 606  EDO  H12', -0.444, (-17.873, -24.722, 23.766)), (' M 210  LYS  HD3', ' M 211  VAL  N  ', -0.444, (-5.379, -99.132, 33.502)), (' M  52  TYR  HD1', ' M  54  GLU  HB2', -0.443, (-14.979, -46.135, 32.401)), (' M  84  ALA  HA ', ' M 111  VAL  HB ', -0.442, (-27.338, -72.342, 18.558)), (' A 346  ARG  CZ ', ' A 605  EDO  H21', -0.439, (-13.153, -40.623, 32.42)), (' A 493  GLN HE21', ' A 494  SER  H  ', -0.438, (-24.82, -31.803, 28.765)), (' M  83  LYS  HD3', ' M  85  SER  HB3', -0.438, (-27.78, -68.104, 15.268)), (' M 145  TYR  CE2', ' M 150  VAL HG13', -0.436, (-16.482, -84.782, 24.791)), (' L  35  TRP  CE2', ' L  73  PHE  HB2', -0.434, (-15.81, -11.009, 4.901)), (' A 365  TYR  CD2', ' A 387  LEU  HB3', -0.434, (11.668, -28.584, 25.005)), (' L 161  GLU  OE2', ' L 401  HOH  O  ', -0.43, (-36.211, 18.648, 4.433)), (' A 378  LYS  HE3', ' H  99  TYR  CZ ', -0.426, (-1.106, -20.093, 16.164)), (' M  94  ARG HH22', ' M 302  EDO  C2 ', -0.424, (-1.057, -54.464, 31.888)), (' A 528  LYS  HD2', ' A 528  LYS  N  ', -0.422, (19.592, -31.546, 24.528)), (' M 210  LYS  NZ ', ' M 211  VAL  C  ', -0.413, (-3.721, -100.202, 32.549)), (' H 143  LYS  NZ ', ' H 171  GLN  OE1', -0.412, (-27.186, 27.351, 15.519)), (' M 210  LYS  HZ2', ' M 212  GLU  CA ', -0.412, (-3.774, -101.231, 32.933)), (' M 210  LYS  HD2', ' M 212  GLU  CG ', -0.411, (-4.656, -101.804, 34.938)), (' L 149  LYS  HG2', ' L 154  LEU HD12', -0.409, (-45.641, 27.585, 4.008)), (' L  40  PRO  HB3', ' L 165  GLU  HG3', -0.407, (-24.602, 5.447, 12.22)), (' H  68  THR HG23', ' H 496  HOH  O  ', -0.402, (5.762, 11.896, 16.838)), (' M 149  PRO  HG2', ' M 304  EDO  C2 ', -0.401, (-14.655, -78.122, 28.566)), (' M  94  ARG  NH2', ' M 302  EDO  H21', -0.401, (-1.685, -55.004, 31.408))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
