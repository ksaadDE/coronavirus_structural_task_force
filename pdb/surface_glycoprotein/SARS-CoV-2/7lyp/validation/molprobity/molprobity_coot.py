# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 108 ', 'THR', 0.014044640934597369, (151.60300000000007, 201.35899999999998, 120.768)), ('A', ' 112 ', 'SER', 0.018998084330689925, (147.16600000000005, 206.683, 112.50299999999997)), ('A', ' 281 ', 'GLU', 0.042906487456080986, (130.411, 186.19, 156.09799999999998)), ('A', ' 330 ', 'PRO', 0.06405739951266982, (189.36900000000003, 184.31099999999995, 127.085)), ('A', ' 600 ', 'PRO', 0.08271146919479783, (154.76300000000003, 194.86299999999994, 171.276)), ('B', ' 101 ', 'ILE', 0.07800732120478107, (217.85000000000005, 159.417, 130.90399999999997)), ('B', ' 123 ', 'ALA', 0.02328927247506415, (218.856, 170.462, 126.33299999999998)), ('B', ' 142 ', 'GLY', 0.02682607473644481, (225.809, 160.271, 120.696)), ('B', ' 197 ', 'ILE', 0.04104522995075691, (192.52400000000006, 158.933, 130.864)), ('B', ' 198 ', 'ASP', 0.026329585055945733, (189.748, 157.23699999999997, 128.76599999999996)), ('B', ' 216 ', 'LEU', 0.01726283867676242, (213.796, 154.587, 147.427)), ('B', ' 571 ', 'ASP', 0.030360796407222387, (156.69000000000005, 136.254, 150.344)), ('B', ' 617 ', 'CYS', 0.03691327141203413, (185.085, 131.454, 160.572)), ('B', ' 659 ', 'SER', 0.017344683558813356, (187.835, 137.90499999999994, 182.189)), ('B', ' 813 ', 'SER', 0.034962575979743005, (183.90400000000005, 186.582, 182.65399999999997)), ('B', ' 891 ', 'GLY', 0.0877612843033686, (161.059, 180.996, 200.39899999999997)), ('C', ' 112 ', 'SER', 0.0003771299520034338, (130.598, 127.92, 114.59499999999998)), ('C', ' 198 ', 'ASP', 0.009597039722272006, (145.463, 137.25199999999995, 130.28799999999998)), ('C', ' 481 ', 'ASN', 0.022275743002474147, (163.93900000000005, 204.08999999999995, 103.895)), ('C', ' 571 ', 'ASP', 0.03650162417177373, (139.73000000000005, 173.747, 147.771)), ('C', ' 617 ', 'CYS', 0.03174870290590011, (120.38300000000002, 156.418, 163.02499999999998))]
data['omega'] = []
data['rota'] = [('A', ' 122 ', 'ASN', 0.22381610533059237, (128.725, 206.41499999999996, 129.91799999999998)), ('A', ' 194 ', 'PHE', 0.03115224201792564, (142.91000000000005, 198.064, 133.367)), ('A', ' 280 ', 'ASN', 0.18433767627865646, (133.52, 188.413, 155.528)), ('A', ' 301 ', 'CYS', 0.20912159898107738, (151.40600000000006, 187.925, 156.09599999999998)), ('A', ' 331 ', 'ASN', 0.02025387522880403, (191.08, 185.93799999999996, 124.09899999999999)), ('A', ' 332 ', 'ILE', 0.275380051525694, (189.845, 183.72999999999993, 121.19299999999997)), ('A', ' 369 ', 'TYR', 0.05581437829212976, (169.48900000000006, 176.023, 114.48299999999999)), ('A', ' 456 ', 'PHE', 0.147961274602742, (177.7, 141.227, 112.861)), ('A', ' 602 ', 'THR', 0.0771989077599915, (149.833, 195.67, 167.86299999999997)), ('A', ' 604 ', 'THR', 0.19622071742699754, (149.184, 199.262, 171.77899999999997)), ('A', ' 650 ', 'LEU', 0.0, (169.0, 196.04799999999997, 166.216)), ('A', ' 657 ', 'ASN', 0.033262055910208796, (171.43200000000004, 200.184, 180.047)), ('B', ' 604 ', 'THR', 0.0027198671887163073, (198.71, 154.296, 171.436)), ('B', ' 709 ', 'ASN', 0.017560069643443508, (171.07900000000006, 135.257, 211.589)), ('B', ' 710 ', 'ASN', 0.0033902909613260754, (172.906, 136.709, 214.65899999999993)), ('B', ' 900 ', 'MET', 0.016407835795608557, (175.623, 173.91699999999997, 211.349)), ('B', '1098 ', 'ASN', 0.01726679534317727, (181.727, 142.785, 221.529)), ('C', '  81 ', 'ASN', 0.29734522212076475, (118.87600000000003, 122.385, 129.83899999999997)), ('C', ' 198 ', 'ASP', 0.2360333262306461, (145.463, 137.25199999999995, 130.28799999999998)), ('C', ' 456 ', 'PHE', 0.011668467609031735, (162.159, 188.469, 111.391)), ('C', ' 501 ', 'TYR', 0.2680595668268836, (155.463, 170.84499999999994, 96.10899999999998)), ('C', ' 618 ', 'THR', 0.15141713018394662, (120.13300000000002, 157.96299999999994, 159.478)), ('C', ' 620 ', 'VAL', 0.0, (124.22900000000006, 152.99999999999994, 157.10399999999998)), ('C', ' 656 ', 'VAL', 0.026254437398165464, (120.99300000000002, 148.145, 179.366)), ('C', ' 658 ', 'ASN', 0.10729968863406228, (122.544, 148.43399999999994, 184.894)), ('C', ' 907 ', 'ASN', 0.15983603280967076, (160.395, 151.593, 211.045))]
data['cbeta'] = [('A', ' 617 ', 'CYS', ' ', 0.5001813985972869, (174.87000000000006, 197.669, 162.03699999999998)), ('A', ' 710 ', 'ASN', ' ', 0.301154143938978, (178.737, 182.069, 216.472)), ('B', ' 616 ', 'ASN', ' ', 0.27571815803716043, (180.416, 129.996, 161.061)), ('C', ' 617 ', 'CYS', ' ', 0.45437192898992745, (119.51800000000003, 155.775, 164.142)), ('C', ' 649 ', 'CYS', ' ', 0.5020737064800502, (123.77000000000005, 154.925, 164.941))]
data['probe'] = [(' A 808  ASP  O  ', ' A 814  LYS  HG2', -1.108, (127.125, 169.719, 191.125)), (' C1103  PHE  CD2', ' C1309  NAG  H83', -1.008, (142.023, 153.812, 224.627)), (' A 280  ASN HD21', ' A 282  ASN HD22', -0.952, (129.145, 190.98, 155.141)), (' C1097  SER  HA ', ' C1309  NAG  H81', -0.916, (140.611, 154.985, 223.609)), (' C 617  CYS  SG ', ' C 642  VAL HG12', -0.841, (120.119, 152.413, 164.882)), (' C1103  PHE  HD2', ' C1309  NAG  H83', -0.733, (142.704, 153.437, 224.618)), (' A 617  CYS  SG ', ' A 644  GLN  OE1', -0.724, (175.936, 195.742, 163.263)), (' C 644  GLN  OE1', ' C 649  CYS  HB2', -0.673, (122.703, 156.704, 165.525)), (' B1082  CYS  HB2', ' B1134  ASN  HA ', -0.659, (167.923, 139.106, 228.375)), (' A 807  PRO  HB2', ' A 814  LYS  HB3', -0.656, (129.855, 167.713, 191.508)), (' A 708  SER  HB3', ' A 711  SER  HB3', -0.654, (175.644, 184.662, 211.906)), (' C 617  CYS  SG ', ' C 642  VAL  CG1', -0.65, (120.064, 152.607, 164.142)), (' C 656  VAL HG12', ' C 695  TYR  HB3', -0.614, (123.908, 148.11, 180.077)), (' A 280  ASN  ND2', ' A 282  ASN HD22', -0.601, (129.818, 190.185, 155.631)), (' A 348  ALA  H  ', ' A 400  PHE  HA ', -0.54, (180.285, 158.699, 107.417)), (' C1103  PHE  HD2', ' C1309  NAG  C8 ', -0.535, (141.856, 153.281, 224.309)), (' A1076  THR  HB ', ' A1097  SER  HB3', -0.522, (172.52, 184.163, 220.772)), (' C1103  PHE  CD2', ' C1309  NAG  C8 ', -0.497, (141.674, 153.215, 224.836)), (' A 117  LEU HD23', ' A 130  VAL HG22', -0.492, (141.241, 197.923, 121.37)), (' C  28  TYR  HB2', ' C1301  NAG  H2 ', -0.483, (116.834, 130.069, 144.947)), (' A 280  ASN HD21', ' A 282  ASN  ND2', -0.469, (129.161, 190.201, 155.83)), (' A 650  LEU  HA ', ' A 650  LEU HD13', -0.468, (167.718, 194.943, 166.014)), (' B1100  THR HG23', ' B1309  NAG  HN2', -0.468, (185.253, 141.187, 225.431)), (' C 599  THR HG22', ' C 601  GLY  H  ', -0.466, (134.825, 138.339, 170.021)), (' A  64  TRP  CD1', ' A 266  TYR  CE2', -0.463, (143.769, 213.402, 142.959)), (' A 366  SER  HA ', ' A 369  TYR  CD2', -0.463, (170.927, 178.417, 116.752)), (' A 650  LEU HD21', ' A 666  ILE HD13', -0.462, (167.547, 193.481, 169.822)), (' A 280  ASN  C  ', ' A 282  ASN  H  ', -0.46, (131.455, 187.394, 154.566)), (' A 809  PRO  HA ', ' A 814  LYS  HE2', -0.459, (125.8, 168.4, 193.708)), (' C1097  SER  HA ', ' C1309  NAG  C8 ', -0.456, (140.092, 154.769, 223.849)), (' C1101  HIS  O  ', ' C1309  NAG  O7 ', -0.455, (139.335, 154.915, 225.758)), (' B1097  SER  HB2', ' B1102  TRP  CE2', -0.452, (175.923, 141.67, 222.965)), (' C1032  CYS  HG ', ' C1043  CYS  HG ', -0.45, (159.61, 151.049, 195.313)), (' C 710  ASN  HB3', ' C1306  NAG  H82', -0.449, (135.07, 166.122, 218.155)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.436, (176.392, 167.955, 122.845)), (' C 308  VAL HG22', ' C 602  THR HG23', -0.424, (137.286, 136.181, 166.888)), (' C 643  PHE  O  ', ' C 649  CYS  SG ', -0.418, (122.42, 153.501, 166.711)), (' A 611  LEU  HA ', ' A 649  CYS  O  ', -0.418, (168.218, 193.584, 163.864)), (' B 656  VAL HG11', ' B 693  ILE HD12', -0.418, (192.852, 138.903, 177.559)), (' C 874  THR HG21', ' C1055  SER  HB3', -0.417, (167.361, 139.271, 185.602)), (' A 350  VAL HG22', ' A 422  ASN  HB3', -0.416, (178.672, 152.232, 111.906)), (' C 616  ASN  C  ', ' C 618  THR  H  ', -0.415, (121.939, 157.518, 161.857)), (' C 801  ASN  ND2', ' C 803  SER  OG ', -0.413, (161.48, 128.83, 199.35)), (' A1032  CYS  HG ', ' A1043  CYS  HG ', -0.409, (153.325, 167.714, 195.229))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
