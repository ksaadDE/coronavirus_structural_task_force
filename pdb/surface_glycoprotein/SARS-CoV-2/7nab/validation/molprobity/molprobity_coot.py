# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 102 ', 'PRO', None, (-56.135999999999996, -13.857, -30.828000000000007)), ('A', ' 147 ', 'PRO', None, (-65.984, 8.103999999999997, -9.536)), ('A', ' 149 ', 'PRO', None, (-65.97499999999998, 8.099, -15.687000000000003)), ('B', '   8 ', 'PRO', None, (-37.0, 4.708, -31.977000000000007)), ('B', '  95 ', 'PRO', None, (-39.98400000000001, -14.967, -18.011)), ('B', ' 141 ', 'PRO', None, (-44.425999999999995, 21.107, -32.524)), ('H', ' 102 ', 'PRO', None, (-14.101, -13.897, -31.093)), ('H', ' 147 ', 'PRO', None, (-26.014, 8.144, -11.023)), ('H', ' 149 ', 'PRO', None, (-25.414000000000012, 8.400999999999996, -17.205)), ('L', '   8 ', 'PRO', None, (5.014999999999997, 4.903999999999998, -31.006000000000007)), ('L', '  95 ', 'PRO', None, (1.1859999999999982, -14.846, -17.320000000000004)), ('L', ' 141 ', 'PRO', None, (-2.3590000000000018, 21.053, -31.852000000000007))]
data['rota'] = [('H', ' 204 ', 'ASN', 0.2769377605095493, (-36.140000000000015, 11.218, -13.695000000000004)), ('L', '  78 ', 'LEU', 0.2820438734539929, (-4.995000000000001, 5.146, -43.848)), ('A', '  62 ', 'SER', 0.19264595077356095, (-43.75800000000002, -9.926, -10.626000000000003)), ('A', ' 129 ', 'LYS', 0.0, (-57.758999999999986, 41.00499999999999, -23.596)), ('A', ' 131 ', 'THR', 0.1450772944796271, (-56.723, 38.34299999999999, -27.739)), ('A', ' 151 ', 'THR', 0.20035305528335964, (-68.745, 14.044999999999996, -20.181)), ('B', '   2 ', 'ILE', 0.09467666339439126, (-35.101, -10.409, -21.23100000000001)), ('B', '  54 ', 'LEU', 0.27134869452373706, (-47.27000000000004, -11.358, -41.64000000000001)), ('B', ' 205 ', 'VAL', 0.14772327940828403, (-43.736, 33.800999999999995, -23.501)), ('D', '1146 ', 'ASP', 0.29645792219493494, (-65.413, -38.925, -25.784)), ('C', '1151 ', 'GLU', 0.2708012824114785, (-14.690000000000005, -36.811, -26.035))]
data['cbeta'] = [('A', '  55 ', 'SER', ' ', 0.2731091981713438, (-56.781, -25.787, -14.642))]
data['probe'] = [(' L  21  ILE HD11', ' L 102  THR  OG1', -1.094, (1.093, 3.142, -30.744)), (' L  21  ILE HD11', ' L 102  THR  CB ', -1.088, (0.743, 2.114, -31.163)), (' L  21  ILE  CD1', ' L 102  THR  CB ', -1.043, (0.023, 2.66, -32.051)), (' L  21  ILE  CD1', ' L 102  THR  HB ', -1.002, (-0.284, 2.299, -32.145)), (' L  21  ILE HD12', ' L 102  THR HG21', -0.991, (0.349, 3.147, -32.752)), (' L  21  ILE HD12', ' L 102  THR  CG2', -0.899, (-0.432, 3.637, -32.326)), (' L 185  ASP  HA ', ' L 188  LYS  HD2', -0.746, (-11.265, 31.345, 1.052)), (' L 149  LYS  NZ ', ' L 195  GLU  OE1', -0.733, (1.015, 32.565, -15.637)), (' L  21  ILE HD12', ' L 102  THR  CB ', -0.717, (-0.102, 2.864, -32.135)), (' A 131  THR  C  ', ' A 133  GLY  H  ', -0.697, (-57.694, 39.386, -29.984)), (' A 199  ASN HD21', ' A 206  LYS  HE2', -0.689, (-76.906, 13.331, -18.272)), (' B 183  LYS  NZ ', ' B 187  GLU  OE2', -0.67, (-59.974, 33.446, 0.601)), (' L  21  ILE  CD1', ' L 102  THR  CG2', -0.657, (0.656, 2.955, -31.858)), (' L  21  ILE  CD1', ' L 102  THR HG21', -0.649, (1.115, 3.098, -32.271)), (' B 188  LYS  HE3', ' B 432  HOH  O  ', -0.61, (-52.745, 33.57, 3.993)), (' D1146  ASP  N  ', ' D1146  ASP  OD1', -0.581, (-65.693, -40.686, -26.603)), (' A  66  HIS  HE1', ' A  86  ASP  OD2', -0.567, (-52.985, -5.956, -6.667)), (' L 166  GLN  HG3', ' L 173  TYR  CZ ', -0.549, (-8.009, 15.305, -31.505)), (' A  39  GLN HE22', ' B  38  GLN HE22', -0.527, (-51.043, -0.159, -25.087)), (' A 126  PRO  HD3', ' A 138  LEU  HB3', -0.526, (-64.311, 32.675, -22.093)), (' L 142  ARG  HG2', ' L 142  ARG HH11', -0.519, (-5.409, 16.262, -25.805)), (' A 178  LEU  HA ', ' A 431  HOH  O  ', -0.513, (-58.518, 17.707, -16.593)), (' A 193  THR HG23', ' A 210  LYS  HE3', -0.509, (-74.725, 32.918, -21.356)), (' A  87  THR HG23', ' A 110  THR  HA ', -0.503, (-58.191, 1.945, -11.514)), (' B 105  GLU  HG2', ' B 106  ILE  N  ', -0.502, (-48.099, 12.923, -35.018)), (' H  48  MET  HE1', ' H  80  LEU HD21', -0.499, (-13.829, -9.908, -14.186)), (' A 131  THR  C  ', ' A 133  GLY  N  ', -0.496, (-57.819, 39.602, -29.955)), (' H 193  THR HG23', ' H 210  LYS  HE3', -0.491, (-34.165, 32.866, -23.025)), (' A 151  THR HG22', ' A 199  ASN  HB3', -0.484, (-71.999, 13.972, -19.303)), (' L 182  SER  OG ', ' L 185  ASP  OD1', -0.473, (-13.381, 27.953, 1.627)), (' L  78  LEU HD11', ' L 104  LEU HD21', -0.471, (-3.766, 5.033, -38.989)), (' B 305  CIT  O2 ', ' B 305  CIT  O7 ', -0.471, (-74.604, 32.929, 0.4)), (' B 142  ARG  CZ ', ' B 163  VAL HG21', -0.451, (-48.218, 16.552, -23.461)), (' L 151  ASP  OD1', ' L 191  VAL HG12', -0.449, (-6.302, 38.486, -6.672)), (' L  24  ARG  HG2', ' L  70  ASP  OD1', -0.445, (11.224, -3.91, -29.781)), (' A 199  ASN  ND2', ' A 206  LYS  HE2', -0.443, (-76.792, 13.592, -18.054)), (' B 186  TYR  HA ', ' B 192  TYR  OH ', -0.435, (-52.165, 32.705, -4.091)), (' H 129  LYS  HB3', ' H 129  LYS  HE2', -0.433, (-12.95, 41.592, -22.765)), (' H  97  GLN  HB3', ' H 100F ARG  HG2', -0.423, (-5.818, -21.068, -27.589)), (' B 105  GLU  HG3', ' B 173  TYR  OH ', -0.423, (-48.3, 13.436, -32.191)), (' A 210  LYS  HE2', ' A 212  GLU  OE2', -0.421, (-74.498, 35.286, -18.853)), (' H 101  ASP  HA ', ' H 102  PRO  HA ', -0.417, (-12.557, -11.94, -31.217)), (' H 119  PRO  HB3', ' H 145  TYR  HB3', -0.417, (-26.399, 15.728, -11.878)), (' H  47  TRP  HE1', ' H  50  ILE HG23', -0.415, (-7.604, -15.437, -19.799)), (' L 124  GLN  HG2', ' L 129  THR  O  ', -0.414, (-21.334, 27.882, -6.252)), (' H 200  HIS  HB3', ' H 205  THR  OG1', -0.412, (-31.5, 14.036, -13.885)), (' H 126  PRO  HG2', ' H 213  PRO  HB3', -0.409, (-23.783, 36.889, -22.204))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
