# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('E', ' 371 ', 'SER', 0.027299982234599833, (-52.327549999999995, -25.40055, 16.16555)), ('E', ' 372 ', 'ALA', 0.016152006031237374, (-49.8096, -27.62475, 14.358660000000004))]
data['omega'] = [('A', ' 161 ', 'PRO', None, (-41.31986, -11.61373, -33.96356)), ('A', ' 163 ', 'PRO', None, (-37.93188999999999, -15.94088, -31.16581)), ('B', '   8 ', 'PRO', None, (-9.6054, -12.380530000000004, -17.3118)), ('B', ' 142 ', 'PRO', None, (-9.458689999999997, -21.17297, -37.42948)), ('H', ' 155 ', 'PRO', None, (-34.50598, -62.64378, 9.31228)), ('H', ' 157 ', 'PRO', None, (-35.00373, -64.36367, 15.20116)), ('L', '   8 ', 'PRO', None, (-20.8178, -46.46849, 39.02658)), ('L', ' 142 ', 'PRO', None, (-12.669160000000003, -60.898289999999996, 34.84822))]
data['rota'] = [('H', ' 108 ', 'PHE', 0.24009640989128114, (-43.40650999999998, -45.01918, 33.56317)), ('H', ' 217 ', 'LYS', 0.2113550841815354, (-25.290980000000012, -80.63429, 11.24478)), ('L', ' 182 ', 'LEU', 0.17540029519986078, (-12.590789999999998, -61.890930000000004, 4.640570000000002)), ('A', '  29 ', 'ILE', 0.2035626547122996, (-42.89523, -30.55947, -3.9267100000000004)), ('A', '  68 ', 'ARG', 0.0006025139420255716, (-42.46902999999998, -1.43785, -12.25465)), ('A', ' 113 ', 'LEU', 0.25866210530336686, (-27.4343, -17.69717, -5.61367)), ('A', ' 119 ', 'GLN', 0.19536105538982843, (-35.05789, -22.53194, -20.1088))]
data['cbeta'] = []
data['probe'] = [(' A  49  TRP  HE1', ' A  52  THR HG23', -0.71, (-34.371, -13.029, -7.413)), (' H  29  PHE  O  ', ' H  72  ARG  NH2', -0.606, (-56.16, -44.274, 28.35)), (' A  35  TYR  HB2', ' A 100  PRO  HG2', -0.606, (-35.576, -18.321, -3.743)), (' A 133  PRO  HB3', ' A 159  TYR  HB3', -0.573, (-40.363, -15.996, -39.996)), (' H  97  ALA  HB1', ' H 108  PHE  HB3', -0.57, (-43.637, -46.655, 30.822)), (' E 431  GLY  HA2', ' E 515  PHE  HD2', -0.567, (-45.332, -24.121, 32.927)), (' E 363  ALA  HB2', ' E 393  THR HG21', -0.553, (-55.892, -19.975, 31.646)), (' B 121  PRO  HD3', ' B 133  VAL HG22', -0.549, (-29.474, -17.424, -55.888)), (' B  37  GLN  HB2', ' B  47  LEU HD11', -0.54, (-19.04, -23.674, -15.361)), (' A  37  GLY  HA3', ' A  52  THR HG22', -0.539, (-35.478, -14.503, -7.474)), (' H  34  MET  HB3', ' H  79  LEU HD22', -0.534, (-49.815, -45.424, 25.572)), (' H 100  GLY  HA3', ' H 107  TYR  CZ ', -0.526, (-46.429, -43.111, 37.859)), (' H  39  GLN  HB2', ' H  45  LEU HD23', -0.522, (-35.017, -49.171, 25.957)), (' A   8  GLY  HA3', ' A  20  LEU HD23', -0.52, (-44.185, -14.494, -20.966)), (' H 124  THR HG22', ' H 155  PRO  HD3', -0.518, (-36.907, -62.672, 7.393)), (' H  83  MET  HB3', ' H  86  LEU HD21', -0.512, (-41.521, -46.409, 12.128)), (' A  68  ARG  NH1', ' A  85  SER  O  ', -0.511, (-41.455, -1.301, -17.189)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.509, (-34.617, -51.97, 39.686)), (' A 113  LEU HD23', ' B  91  TYR  CE1', -0.509, (-23.864, -18.021, -3.84)), (' L  39  LYS  HD3', ' L  84  ALA  HB2', -0.502, (-31.861, -57.85, 36.73)), (' A 157  LYS  NZ ', ' A 185  GLN  OE1', -0.498, (-34.17, -11.471, -46.707)), (' A  40  ARG  HB3', ' A  50  ILE HD11', -0.493, (-35.052, -9.75, -16.871)), (' L 109  ARG  NH1', ' L 110  THR  O  ', -0.491, (-13.334, -65.433, 38.521)), (' A  73  VAL HG22', ' A  80  PHE  HB3', -0.489, (-43.799, -17.434, -7.364)), (' E 379  CYS  SG ', ' E 384  PRO  HG3', -0.488, (-45.755, -28.917, 28.11)), (' H  11  VAL HG21', ' H 155  PRO  HG3', -0.484, (-37.754, -60.215, 9.49)), (' H 152  ASP  OD1', ' H 179  GLN  NE2', -0.484, (-23.547, -62.956, 6.377)), (' E 403  ARG  HG3', ' E 495  TYR  CE1', -0.477, (-30.399, -13.726, 16.5)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.474, (-39.522, -23.03, 19.668)), (' A 113  LEU HD23', ' B  91  TYR  CZ ', -0.47, (-23.894, -17.897, -2.902)), (' H   1  GLU  HG3', ' H  26  ALA  HB1', -0.47, (-55.286, -55.612, 36.626)), (' A  18  LEU  HB3', ' A  84  LEU  HB3', -0.468, (-42.513, -6.956, -18.175)), (' A  98  ALA  HB1', ' A 114  PHE  HB3', -0.464, (-31.564, -19.06, -10.149)), (' H 208  HIS  CD2', ' H 210  PRO  HD2', -0.464, (-35.831, -67.397, 11.449)), (' E 338  PHE  HE2', ' E 363  ALA  HB1', -0.463, (-55.013, -20.825, 29.175)), (' H 201  THR HG23', ' H 218  ARG  HE ', -0.462, (-22.588, -88.03, 14.992)), (' H   3  GLN  HB2', ' H  25  SER  HB2', -0.461, (-54.042, -56.382, 31.216)), (' E 339  GLY  O  ', ' E 343  ASN  HB2', -0.461, (-52.777, -13.955, 19.179)), (' B 137  LEU  HB2', ' B 176  LEU  HB3', -0.46, (-18.626, -19.918, -43.471)), (' B  35  TRP  CE2', ' B  73  LEU  HB2', -0.459, (-14.746, -18.583, -10.508)), (' L 106  GLU  OE1', ' L 174  TYR  OH ', -0.451, (-20.314, -59.201, 34.793)), (' E 457  ARG  NH1', ' E 459  SER  O  ', -0.449, (-25.743, -9.258, 34.522)), (' E 369  TYR  HB2', ' E 377  PHE  CE2', -0.446, (-48.98, -27.007, 22.992)), (' L  35  TRP  CE2', ' L  73  LEU  HB2', -0.441, (-31.282, -44.977, 41.886)), (' B 151  VAL  HB ', ' B 156  GLN HE21', -0.44, (-22.264, -8.791, -58.619)), (' A   6  GLU  OE1', ' A 120  GLY  N  ', -0.439, (-36.621, -20.185, -19.801)), (' A  49  TRP  NE1', ' A  52  THR HG23', -0.436, (-33.6, -12.535, -7.028)), (' A  12  VAL  O  ', ' A 125  VAL  HA ', -0.429, (-42.589, -5.013, -26.756)), (' B  33  LEU HD11', ' B  88  CYS  HB2', -0.427, (-17.985, -14.173, -8.529)), (' H  22  CYS  HB3', ' H  79  LEU  HB3', -0.426, (-50.709, -49.014, 23.296)), (' H 218  ARG  NH1', ' H 220  GLU  OE1', -0.424, (-18.234, -87.808, 12.093)), (' L  89  GLN  NE2', ' L  90  GLN  O  ', -0.422, (-37.476, -38.817, 32.675)), (' H  52  SER  O  ', ' H  72  ARG  NH1', -0.42, (-54.077, -41.111, 26.66)), (' E 412  PRO  HG3', ' E 429  PHE  HB3', -0.419, (-36.974, -24.059, 34.085)), (' H  11  VAL HG11', ' H 154  PHE  HE1', -0.414, (-36.35, -58.257, 7.493)), (' L 170  LYS  HB2', ' L 170  LYS  HE3', -0.412, (-24.853, -72.635, 35.202)), (' A  45  LYS  HA ', ' A  45  LYS  HD3', -0.412, (-23.575, -7.034, -22.964)), (' E 384  PRO  HG2', ' L  95  LEU HD11', -0.407, (-45.825, -31.067, 26.382)), (' H   7  SER  OG ', ' H  21  SER  OG ', -0.403, (-51.057, -55.446, 18.677))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
