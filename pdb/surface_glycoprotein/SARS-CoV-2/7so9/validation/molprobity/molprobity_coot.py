# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', '   8 ', 'PRO', None, (170.5050000000001, 250.281, 189.62)), ('B', '  95 ', 'PRO', None, (183.53400000000013, 239.394, 207.817)), ('D', '   8 ', 'PRO', None, (254.15, 191.588, 166.437)), ('G', '   8 ', 'PRO', None, (217.61200000000014, 261.1229999999998, 166.437)), ('I', '   8 ', 'PRO', None, (208.605, 159.338, 189.62)), ('I', '  95 ', 'PRO', None, (211.51900000000006, 176.065, 207.817)), ('L', '   8 ', 'PRO', None, (175.662, 194.713, 166.437)), ('N', '   8 ', 'PRO', None, (268.314, 237.805, 189.62)), ('N', '  95 ', 'PRO', None, (252.3710000000001, 231.965, 207.817))]
data['rota'] = [('A', ' 234 ', 'ASN', 0.2149924316267752, (175.146, 222.17199999999997, 209.86699999999996)), ('C', '  28 ', 'THR', 0.25135792147501784, (165.65600000000015, 236.289, 225.618)), ('F', ' 234 ', 'ASN', 0.21395764094755634, (230.628, 177.412, 209.86699999999996)), ('J', '  28 ', 'THR', 0.2514237578062621, (223.147, 162.13499999999996, 225.618)), ('K', ' 234 ', 'ASN', 0.2139909264441386, (241.65000000000015, 247.84, 209.86699999999996)), ('O', '  28 ', 'THR', 0.25133687945439176, (258.621, 249.0, 225.618))]
data['cbeta'] = []
data['probe'] = [(' H  55  SER  O  ', ' H  56  SER  OG ', -0.64, (188.647, 235.367, 183.369)), (' E  55  SER  O  ', ' E  56  SER  OG ', -0.625, (246.278, 229.635, 183.402)), (' M  55  SER  O  ', ' M  56  SER  OG ', -0.62, (212.314, 182.407, 183.361)), (' G  61  ASP  O  ', ' G  61  ASP  OD1', -0.575, (227.817, 243.907, 173.211)), (' L  61  ASP  O  ', ' L  61  ASP  OD1', -0.571, (185.521, 212.248, 173.191)), (' D  61  ASP  O  ', ' D  61  ASP  OD1', -0.563, (233.966, 190.935, 173.699)), (' K 898  PHE  N  ', ' K 899  PRO  CD ', -0.516, (211.356, 238.782, 297.116)), (' A 898  PHE  N  ', ' A 899  PRO  CD ', -0.515, (198.157, 200.499, 297.116)), (' F 898  PHE  N  ', ' F 899  PRO  CD ', -0.512, (238.068, 208.546, 296.868)), (' A 790  LYS  HE3', ' F 702  GLU  OE2', -0.504, (201.447, 186.281, 280.748)), (' A 702  GLU  OE2', ' K 790  LYS  HE3', -0.5, (197.241, 242.732, 281.096)), (' F 790  LYS  HE3', ' K 702  GLU  OE2', -0.49, (248.692, 218.045, 280.889)), (' F  44  ARG  O  ', ' F 283  GLY  HA2', -0.469, (243.455, 190.928, 237.756)), (' K  44  ARG  O  ', ' K 283  GLY  HA2', -0.46, (223.444, 251.755, 237.652)), (' A  44  ARG  O  ', ' A 283  GLY  HA2', -0.455, (180.888, 204.4, 237.694)), (' A1142  GLN  N  ', ' A1143  PRO  HD2', -0.45, (210.018, 221.538, 327.017)), (' F1142  GLN  N  ', ' F1143  PRO  HD2', -0.449, (214.108, 207.656, 327.185)), (' K1142  GLN  N  ', ' K1143  PRO  HD2', -0.449, (223.823, 217.917, 327.208)), (' O  63  SER  O  ', ' O  67  ARG  NH2', -0.438, (260.642, 221.199, 211.912)), (' K1041  ASP  OD2', ' K1045  LYS  NZ ', -0.436, (228.451, 222.736, 279.835)), (' A1041  ASP  OD2', ' A1045  LYS  NZ ', -0.435, (203.517, 223.348, 279.784)), (' K 620  VAL  N  ', ' K 621  PRO  HD2', -0.434, (254.814, 223.375, 243.247)), (' F 898  PHE  HB3', ' F 899  PRO  HD3', -0.432, (238.142, 207.149, 296.345)), (' A1092  GLU  O  ', ' A1107  ARG  NH1', -0.431, (210.212, 223.539, 302.62)), (' J  63  SER  O  ', ' J  67  ARG  NH2', -0.431, (198.416, 174.163, 211.656)), (' K1092  GLU  O  ', ' K1107  ARG  NH1', -0.429, (225.314, 216.644, 302.206)), (' K 792  PRO  HA ', ' K 793  PRO  HD3', -0.429, (201.383, 246.381, 289.005)), (' A 620  VAL  N  ', ' A 621  PRO  HD2', -0.427, (189.823, 245.932, 243.248)), (' C  63  SER  O  ', ' C  67  ARG  NH2', -0.426, (188.458, 251.659, 211.655)), (' F 620  VAL  N  ', ' F 621  PRO  HD2', -0.426, (202.786, 178.221, 243.32)), (' A 898  PHE  HB3', ' A 899  PRO  HD3', -0.424, (197.062, 200.937, 296.328)), (' D  59  ILE  HA ', ' D  60  PRO  HD3', -0.422, (233.959, 199.619, 169.58)), (' K 898  PHE  HB3', ' K 899  PRO  HD3', -0.421, (212.221, 239.619, 296.328)), (' F 294  ASP  HB2', ' F 295  PRO  HD2', -0.42, (219.512, 177.649, 245.442)), (' A1089  PHE  HA ', ' A1090  PRO  HD3', -0.42, (213.567, 230.383, 309.139)), (' F1092  GLU  O  ', ' F1107  ARG  NH1', -0.419, (211.798, 206.99, 302.214)), (' A 294  ASP  HB2', ' A 295  PRO  HD2', -0.419, (180.628, 231.452, 245.168)), (' F1041  ASP  OD2', ' F1045  LYS  NZ ', -0.416, (215.456, 201.45, 279.751)), (' K 294  ASP  HB2', ' K 295  PRO  HD2', -0.412, (247.158, 238.098, 245.371)), (' G  59  ILE  HA ', ' G  60  PRO  HD3', -0.411, (220.759, 239.665, 169.565)), (' B  43  ALA  HA ', ' B  44  PRO  HD3', -0.41, (167.722, 252.03, 210.648)), (' K 862  PRO  HA ', ' K 863  PRO  HD3', -0.409, (204.808, 237.901, 257.993)), (' B  50  ASP  O  ', ' B  51  ALA  HB3', -0.407, (167.596, 233.197, 198.728)), (' N  50  ASP  O  ', ' N  51  ALA  HB3', -0.406, (254.991, 249.037, 199.098)), (' A 806  LEU  HA ', ' A 807  PRO  HD3', -0.405, (195.065, 197.003, 281.318)), (' A1315  NAG  H82', ' A1315  NAG  O3 ', -0.404, (174.505, 222.04, 202.848)), (' K1315  NAG  H82', ' K1315  NAG  O3 ', -0.403, (241.81, 248.466, 202.889)), (' F1315  NAG  H82', ' F1315  NAG  O3 ', -0.402, (231.001, 177.275, 202.624))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
