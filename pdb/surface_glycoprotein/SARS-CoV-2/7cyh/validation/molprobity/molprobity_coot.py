# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('D', '  33 ', 'ILE', 0.00256301, (96.423, 106.13, 105.112)), ('D', ' 100 ', 'ILE', 0.005152552422954866, (107.30300000000005, 95.98699999999994, 117.664))]
data['omega'] = [('A', ' 384 ', 'PRO', None, (124.786, 97.606, 72.431)), ('D', '  58 ', 'GLY', None, (91.376, 87.964, 103.52900000000001)), ('D', '  93 ', 'GLN', None, (102.996, 97.85599999999997, 114.76)), ('E', '  56 ', 'SER', None, (121.743, 93.835, 100.721)), ('E', '  64 ', 'VAL', None, (120.013, 98.57499999999993, 122.672)), ('E', ' 106 ', 'THR', None, (104.37, 92.986, 104.56900000000002))]
data['rota'] = [('A', ' 350 ', 'VAL', 0.25405548144314666, (107.044, 108.88699999999997, 86.28300000000002)), ('A', ' 398 ', 'ASP', 0.07694513512563807, (114.304, 110.61999999999998, 80.329)), ('A', ' 515 ', 'PHE', 0.1535607907408319, (118.646, 109.33799999999998, 69.559))]
data['cbeta'] = []
data['probe'] = [(' A 452  LEU HD21', ' A 492  LEU  HB3', -0.955, (99.899, 111.247, 91.263)), (' E  52  SER  O  ', ' E  72  ARG  NH1', -0.793, (117.417, 90.436, 101.754)), (' A 457  ARG  NH1', ' A 459  SER  OG ', -0.779, (94.758, 110.245, 76.675)), (' E  19  ARG  HG2', ' E  82  GLN  HG2', -0.779, (127.487, 84.897, 113.373)), (' E   5  VAL  HB ', ' E  23  ALA  HB3', -0.764, (116.439, 75.459, 106.269)), (' A 437  ASN  HB3', ' A 508  TYR  HE1', -0.739, (116.283, 97.269, 91.889)), (' D 100  ILE  HB ', ' E  44  ARG HH12', -0.736, (106.825, 96.22, 119.994)), (' A 452  LEU HD12', ' A 494  SER  HB2', -0.708, (101.303, 109.467, 95.095)), (' E  30  THR  O  ', ' E  53  SER  OG ', -0.7, (114.382, 89.536, 96.839)), (' D   4  LEU HD11', ' D 102  GLY  HA2', -0.697, (101.085, 95.918, 120.544)), (' E  20  LEU  N  ', ' E  81  LEU  O  ', -0.697, (124.326, 82.876, 114.041)), (' A 393  THR  OG1', ' A 516  GLU  OE1', -0.688, (120.195, 113.864, 65.212)), (' D  20  LEU  H  ', ' D  76  LEU  HB3', -0.686, (89.683, 93.916, 118.725)), (' E  38  ARG  NH2', ' E  94  TYR  OH ', -0.685, (118.426, 88.085, 120.444)), (' D  57  GLN  HB3', ' D  58  GLY  HA3', -0.675, (93.244, 87.491, 104.168)), (' D   5  THR  O  ', ' D  23  ARG  N  ', -0.66, (96.805, 99.217, 121.261)), (' D   5  THR  N  ', ' D  23  ARG  O  ', -0.658, (99.942, 100.783, 121.704)), (' A 447  GLY  HA2', ' A 497  PHE  O  ', -0.656, (108.291, 103.005, 100.741)), (' D  22  CYS  O  ', ' D  73  ASP  HA ', -0.637, (94.77, 101.267, 118.754)), (' A 437  ASN  HB3', ' A 508  TYR  CE1', -0.632, (116.244, 96.972, 91.26)), (' D  57  GLN  HB3', ' D  58  GLY  CA ', -0.625, (93.104, 88.369, 104.089)), (' D  10  LEU HD12', ' D  20  LEU HD23', -0.624, (89.787, 92.9, 124.032)), (' E  40  ALA  HB3', ' E  43  LYS  HB2', -0.622, (110.01, 89.258, 126.128)), (' E  92  ALA  H  ', ' E 116  VAL  HB ', -0.616, (116.302, 82.846, 124.014)), (' E  37  VAL  O  ', ' E  95  TYR  N  ', -0.614, (112.579, 84.772, 115.908)), (' A 513  LEU  O  ', ' A 514  SER  OG ', -0.613, (115.483, 107.691, 73.841)), (' D   5  THR  HB ', ' D  23  ARG  HB2', -0.611, (97.919, 100.943, 123.465)), (' A 337  PRO  HD2', ' A 358  ILE HD12', -0.61, (124.25, 115.341, 78.83)), (' E  19  ARG  HE ', ' E  82  GLN HE21', -0.605, (130.13, 85.022, 112.776)), (' D  52  TYR  OH ', ' D  56  ASN  ND2', -0.598, (95.95, 93.968, 100.472)), (' E  38  ARG HH12', ' E  90  ASP  HA ', -0.597, (118.171, 88.627, 123.792)), (' A 458  LYS  HZ1', ' A 473  TYR  HD1', -0.597, (88.668, 111.695, 84.112)), (' D  15  GLY  HA2', ' D  80  SER  HA ', -0.596, (79.463, 83.119, 118.173)), (' A 349  SER  OG ', ' A 451  TYR  HA ', -0.594, (107.668, 109.619, 92.696)), (' A 505  TYR  CE2', ' E 101  TYR  HB3', -0.592, (104.767, 92.779, 95.974)), (' D  56  ASN  OD1', ' D  57  GLN  N  ', -0.591, (92.612, 91.717, 102.033)), (' E   6  GLU  OE1', ' E 114  THR  OG1', -0.586, (114.5, 77.188, 115.549)), (' E  14  PRO  HG3', ' E 118  VAL HG12', -0.585, (124.579, 84.057, 128.943)), (' A 338  PHE  HD2', ' A 368  LEU HD11', -0.584, (127.744, 108.341, 80.326)), (' D   2  ILE  N  ', ' D  93  GLN HE22', -0.583, (104.663, 104.349, 117.16)), (' A 435  ALA  HB2', ' A 510  VAL HG22', -0.583, (114.503, 100.433, 84.929)), (' A 402  ILE HD13', ' A 410  ILE HD12', -0.583, (110.026, 101.571, 84.046)), (' D   7  SER  O  ', ' D 105  THR  OG1', -0.577, (95.822, 93.134, 126.162)), (' A 512  VAL HG12', ' A 513  LEU  N  ', -0.575, (115.978, 106.366, 76.626)), (' A 437  ASN  HA ', ' A 508  TYR  HD1', -0.575, (115.772, 98.901, 90.85)), (' A 426  PRO  HG3', ' A 463  PRO  HB3', -0.575, (106.175, 107.376, 70.297)), (' E  22  CYS  HB2', ' E  36  TRP  CH2', -0.561, (117.02, 81.833, 110.373)), (' A 511  VAL HG12', ' A 512  VAL  O  ', -0.556, (117.845, 107.397, 79.884)), (' D  13  SER  N  ', ' D  16  GLU  OE1', -0.554, (83.369, 85.566, 125.285)), (' D  51  ILE HD12', ' D  56  ASN  O  ', -0.553, (91.7, 90.856, 105.42)), (' A 502  GLY  HA3', ' E 101  TYR  CD1', -0.552, (108.538, 91.085, 96.375)), (' A 454  ARG  NH2', ' A 467  ASP  O  ', -0.552, (99.603, 113.672, 83.954)), (' A 351  TYR  HD2', ' A 453  TYR  HA ', -0.551, (102.957, 109.436, 88.468)), (' D  42  LYS  HB2', ' D  45  GLN  HB3', -0.548, (98.885, 78.03, 117.241)), (' E 103  GLY  C  ', ' E 105  GLY  H  ', -0.547, (102.905, 96.415, 103.933)), (' A 338  PHE  CD2', ' A 368  LEU HD11', -0.542, (127.309, 107.631, 80.359)), (' D   9  THR  HA ', ' D 105  THR HG23', -0.541, (93.493, 90.93, 128.251)), (' E  53  SER  O  ', ' E  72  ARG  NH2', -0.539, (118.145, 89.747, 99.149)), (' A 422  ASN  N  ', ' A 422  ASN  OD1', -0.532, (101.873, 106.072, 82.161)), (' A 424  LYS  HG2', ' A 463  PRO  HA ', -0.527, (103.612, 107.232, 73.316)), (' D  40  GLN  HG3', ' D  87  ALA  HB3', -0.525, (95.47, 83.272, 118.16)), (' A 360  ASN  H  ', ' A 523  THR  HB ', -0.524, (126.397, 118.404, 70.543)), (' A 525  CYS  SG ', ' A 526  GLY  N  ', -0.524, (131.906, 110.567, 69.315)), (' D   2  ILE  N  ', ' D  26  GLU  OE1', -0.519, (104.675, 106.016, 118.281)), (' D  12  LEU  HB2', ' D 107  VAL HG13', -0.518, (87.315, 85.65, 124.028)), (' D  88  VAL HG13', ' D 105  THR  H  ', -0.517, (97.472, 89.147, 123.352)), (' E  91  THR HG23', ' E 116  VAL  O  ', -0.51, (117.436, 81.45, 126.131)), (' A 439  ASN  OD1', ' A 499  PRO  HA ', -0.509, (113.023, 99.435, 100.0)), (' E  76  LYS  O  ', ' E  78  THR  OG1', -0.509, (120.736, 78.464, 101.95)), (' E  65  THR  C  ', ' E  67  ARG  H  ', -0.508, (124.315, 94.842, 118.887)), (' A 503  VAL HG23', ' E  31  ASN  HA ', -0.506, (113.317, 89.319, 95.337)), (' D  51  ILE HG23', ' D  56  ASN  O  ', -0.505, (92.412, 92.065, 105.505)), (' E  32  TYR  CD2', ' E  98  ARG  HD2', -0.504, (109.034, 84.461, 100.44)), (' A 511  VAL HG12', ' A 512  VAL  N  ', -0.5, (117.393, 106.832, 80.677)), (' D  30  ASN  HB3', ' D  35  PHE  CE2', -0.499, (101.672, 105.071, 107.104)), (' E  98  ARG  HG2', ' E  99  PHE  O  ', -0.498, (107.679, 86.813, 102.637)), (' A 429  PHE  HE1', ' A 514  SER  HG ', -0.497, (114.621, 106.536, 73.086)), (' A 382  VAL HG21', ' A 387  LEU HD21', -0.497, (123.362, 102.635, 70.21)), (' D  11  SER  HA ', ' D 108  GLU  H  ', -0.497, (88.668, 85.865, 127.326)), (' A 339  GLY  O  ', ' A 343  ASN  HB2', -0.494, (125.993, 111.782, 88.353)), (' A 342  PHE  HE1', ' A 511  VAL HG11', -0.491, (120.046, 107.199, 81.969)), (' E  52  SER  OG ', ' E  53  SER  N  ', -0.491, (116.457, 93.237, 99.957)), (' E  50  GLU  O  ', ' E  58  THR  HA ', -0.49, (118.156, 94.305, 107.472)), (' A 398  ASP  N  ', ' A 398  ASP  OD1', -0.49, (115.433, 110.946, 78.797)), (' E   3  LYS  HB2', ' E  25  SER  O  ', -0.489, (110.076, 76.132, 101.634)), (' E  38  ARG  HD2', ' E  46  GLU  OE1', -0.488, (114.493, 91.129, 122.005)), (' E   3  LYS  HD2', ' E  26  GLY  HA3', -0.488, (108.536, 75.749, 99.619)), (' A 424  LYS  HB3', ' A 464  PHE  H  ', -0.487, (104.979, 107.995, 74.673)), (' D  92  GLN  HB3', ' D  93  GLN  O  ', -0.487, (103.443, 96.887, 112.612)), (' A 429  PHE  HE1', ' A 514  SER  OG ', -0.487, (114.506, 106.636, 72.969)), (' E  38  ARG  CG ', ' E  46  GLU  HB3', -0.487, (112.587, 90.231, 120.802)), (' A 338  PHE  O  ', ' A 341  VAL  N  ', -0.486, (123.719, 111.953, 84.999)), (' A 353  TRP  HE3', ' A 354  ASN  O  ', -0.485, (111.262, 112.947, 80.199)), (' E   5  VAL  N  ', ' E  23  ALA  O  ', -0.484, (113.958, 76.455, 106.654)), (' A 497  PHE  CE1', ' A 507  PRO  HB3', -0.484, (109.632, 102.372, 93.845)), (' D  62  PRO  HD2', ' D  65  PHE  CE2', -0.484, (90.498, 83.449, 110.34)), (' A 353  TRP  CD1', ' A 423  TYR  HD1', -0.479, (107.407, 109.676, 80.002)), (' A 412  PRO  HB3', ' A 427  ASP  HA ', -0.478, (108.703, 99.979, 70.527)), (' A 461  LEU HD22', ' A 465  GLU  HB3', -0.478, (100.788, 111.188, 76.539)), (' A 502  GLY  HA3', ' E 101  TYR  HD1', -0.478, (108.141, 91.555, 96.835)), (' A 424  LYS  CG ', ' A 463  PRO  HA ', -0.477, (104.269, 106.816, 73.298)), (' A 505  TYR  HD2', ' E 102  GLY  N  ', -0.471, (104.795, 94.734, 97.416)), (' E  83  MET  SD ', ' E  94  TYR  OH ', -0.471, (119.802, 86.763, 120.772)), (' A 393  THR HG22', ' A 522  ALA  HA ', -0.471, (124.02, 115.383, 65.451)), (' D  39  PHE  O  ', ' D  89  TYR  HA ', -0.469, (96.701, 87.91, 117.799)), (' E  52  SER  HB2', ' E  57  TYR  CB ', -0.468, (117.345, 96.243, 102.447)), (' A 376  THR  O  ', ' A 377  PHE  HB2', -0.467, (121.202, 96.563, 81.861)), (' A 404  GLY  HA2', ' A 508  TYR  CD2', -0.467, (112.061, 97.204, 88.92)), (' A 474  GLN HE21', ' A 477  SER  C  ', -0.465, (78.886, 112.34, 85.819)), (' A 452  LEU  HG ', ' A 493  GLN  O  ', -0.464, (100.78, 108.142, 92.758)), (' D  18  ALA  HB3', ' D  78  ILE HD12', -0.463, (87.766, 88.449, 118.337)), (' D  37  ASN  ND2', ' D  92  GLN  OE1', -0.461, (102.716, 94.116, 110.061)), (' E 105  GLY  HA3', ' E 106  THR  HA ', -0.458, (102.888, 93.137, 106.703)), (' E  50  GLU  O  ', ' E  51  ILE HD13', -0.457, (118.216, 93.452, 107.595)), (' D  12  LEU  N  ', ' D 108  GLU  O  ', -0.456, (86.816, 84.669, 127.837)), (' D 109  ILE HG22', ' D 110  LEU  O  ', -0.455, (84.262, 78.758, 128.341)), (' A 337  PRO  O  ', ' A 341  VAL HG23', -0.455, (123.687, 113.376, 82.8)), (' E  38  ARG  HB3', ' E  94  TYR  CD1', -0.455, (115.177, 86.612, 118.986)), (' D  38  TRP  HB3', ' D  50  LEU HD12', -0.454, (95.258, 89.51, 113.753)), (' E  93  VAL HG22', ' E 115  LEU HD23', -0.453, (112.541, 79.205, 123.092)), (' A 511  VAL HG12', ' A 512  VAL  H  ', -0.453, (116.848, 106.888, 80.679)), (' D  38  TRP  CZ3', ' D  91  CYS  HB3', -0.453, (95.904, 94.386, 116.69)), (' A 419  ALA  HA ', ' A 423  TYR  O  ', -0.45, (104.327, 103.88, 78.977)), (' A 394  ASN  O  ', ' A 515  PHE  HA ', -0.449, (119.316, 111.194, 69.947)), (' A 367  VAL HG13', ' A 368  LEU HD12', -0.448, (129.838, 106.376, 81.555)), (' E  29  PHE  CE2', ' E  72  ARG  HD2', -0.446, (117.739, 85.324, 101.605)), (' A 485  GLY  CA ', ' A 488  CYS  HB2', -0.444, (83.972, 112.004, 93.386)), (' D  29  ASP  OD1', ' D  35  PHE  N  ', -0.439, (97.786, 102.191, 108.418)), (' A 438  SER  HB3', ' A 509  ARG  HG3', -0.439, (116.615, 103.972, 92.395)), (' E 100  ARG  HG2', ' E 101  TYR  N  ', -0.438, (104.151, 90.005, 99.474)), (' D   3  VAL  HB ', ' D  25  SER  HB3', -0.437, (103.255, 105.249, 121.9)), (' A 408  ARG  O  ', ' A 414  GLN  HG3', -0.436, (107.601, 95.47, 78.717)), (' A 444  LYS  HG2', ' A 446  GLY  H  ', -0.435, (110.261, 105.601, 105.885)), (' A 402  ILE HD11', ' A 407  VAL HG22', -0.435, (111.491, 99.5, 85.085)), (' A 458  LYS  HG2', ' A 473  TYR  HE1', -0.434, (88.203, 109.366, 82.49)), (' E  73  ASP  OD2', ' E  76  LYS  HD2', -0.432, (125.657, 79.666, 100.917)), (' A 357  ARG  HB3', ' A 396  TYR  CE1', -0.431, (117.113, 117.658, 74.741)), (' A 353  TRP  HZ3', ' A 355  ARG  HB2', -0.43, (111.143, 114.163, 78.166)), (' D  49  LEU  O  ', ' D  50  LEU HD23', -0.43, (96.025, 85.619, 110.883)), (' E  99  PHE  CE1', ' E 107  VAL HG22', -0.429, (108.103, 90.934, 107.983)), (' E  52  SER  HB2', ' E  57  TYR  HB2', -0.429, (117.364, 96.116, 101.847)), (' D  41  GLN  O  ', ' D  87  ALA  HB1', -0.428, (97.351, 82.354, 120.318)), (' A 444  LYS  O  ', ' A 447  GLY  N  ', -0.427, (108.667, 104.181, 102.98)), (' E  63  THR  OG1', ' E  64  VAL  N  ', -0.425, (119.295, 98.084, 121.949)), (' D  66  SER  C  ', ' D  77  THR  HB ', -0.425, (86.796, 92.564, 112.31)), (' E  36  TRP  HA ', ' E  95  TYR  O  ', -0.424, (113.629, 85.857, 112.933)), (' D  25  SER  OG ', ' D  26  GLU  N  ', -0.424, (102.268, 107.928, 120.709)), (' E 103  GLY  C  ', ' E 105  GLY  N  ', -0.423, (102.441, 96.426, 104.228)), (' A 387  LEU  HA ', ' A 387  LEU HD23', -0.422, (126.687, 103.016, 69.077)), (' A 421  TYR  O  ', ' A 461  LEU  HG ', -0.421, (99.933, 108.318, 79.61)), (' A 357  ARG  O  ', ' A 358  ILE HD13', -0.42, (121.672, 116.745, 78.416)), (' D  50  LEU  O  ', ' D  51  ILE HD13', -0.42, (93.359, 88.825, 107.341)), (' D   4  LEU HD11', ' D 102  GLY  CA ', -0.419, (101.598, 95.323, 120.732)), (' A 505  TYR  HD2', ' E 102  GLY  H  ', -0.419, (105.409, 94.596, 97.695)), (' D  94  SER  C  ', ' D  96  GLU  H  ', -0.418, (106.055, 102.009, 110.713)), (' A 512  VAL  CG1', ' A 513  LEU  N  ', -0.416, (115.446, 105.837, 77.224)), (' D  53  ALA  C  ', ' D  55  SER  H  ', -0.415, (94.14, 96.723, 107.379)), (' A 403  ARG  HD2', ' A 505  TYR  CD1', -0.414, (105.07, 96.49, 93.032)), (' E  38  ARG  NE ', ' E  94  TYR  HE1', -0.413, (116.178, 88.046, 120.567)), (' D  35  PHE  O  ', ' D  53  ALA  HA ', -0.412, (97.136, 98.517, 109.055)), (' E  51  ILE HD11', ' E  70  ILE  HB ', -0.411, (120.37, 90.955, 108.541)), (' A 497  PHE  HA ', ' A 501  ASN HD21', -0.41, (107.484, 99.698, 98.443)), (' A 473  TYR  HB3', ' A 489  TYR  HB2', -0.409, (89.023, 109.62, 88.746)), (' A 418  ILE  CD1', ' A 422  ASN HD21', -0.409, (103.579, 104.437, 85.346)), (' A 497  PHE  CZ ', ' A 507  PRO  HB3', -0.409, (109.616, 102.828, 94.095)), (' A 418  ILE HD12', ' A 422  ASN HD21', -0.408, (104.124, 104.204, 85.199)), (' A 409  GLN  NE2', ' A 416  GLY  HA3', -0.408, (101.071, 97.428, 81.716)), (' A 378  LYS  O  ', ' A 379  CYS  SG ', -0.405, (120.633, 99.039, 75.693)), (' A 395  VAL  CG2', ' A 524  VAL HG21', -0.404, (123.495, 113.293, 71.636)), (' E  36  TRP  O  ', ' E  48  VAL  HB ', -0.404, (114.271, 89.556, 114.271)), (' D  78  ILE HG22', ' D  79  SER  N  ', -0.404, (84.162, 86.723, 115.481)), (' D  51  ILE  CG2', ' D  56  ASN  H  ', -0.403, (92.49, 93.583, 106.167)), (' E  12  VAL HG21', ' E  18  LEU  HB2', -0.403, (126.633, 81.185, 120.756)), (' D  52  TYR  CE2', ' D  57  GLN  HG2', -0.402, (96.256, 91.167, 103.22)), (' D  52  TYR  CD2', ' D  57  GLN  HG2', -0.402, (96.458, 91.14, 103.957)), (' A 376  THR  CG2', ' A 435  ALA  HB3', -0.401, (116.818, 97.762, 84.749)), (' A 394  ASN HD22', ' A 516  GLU  HB2', -0.401, (117.876, 112.792, 66.444)), (' A 417  LYS  NZ ', ' A 453  TYR  OH ', -0.4, (99.847, 101.419, 90.382))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
