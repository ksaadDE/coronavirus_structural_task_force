# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  98 ', 'SER', 0.037062819807188174, (127.005, 104.62800000000006, 136.169)), ('B', ' 418 ', 'ILE', 0.07670852956460865, (157.13, 181.647, 113.86300000000001)), ('C', ' 332 ', 'ILE', 0.04506325115652758, (192.347, 185.017, 122.857)), ('C', ' 338 ', 'PHE', 0.03246693996928954, (183.798, 176.985, 111.694)), ('C', ' 604 ', 'THR', 0.02618220413952897, (149.023, 197.696, 170.991)), ('C', ' 733 ', 'LYS', 0.027316727809716043, (142.325, 161.12199999999999, 165.85399999999998))]
data['omega'] = [('A', ' 523 ', 'THR', None, (157.97599999999989, 124.708, 124.488)), ('B', '  96 ', 'GLU', None, (127.373, 110.362, 140.755))]
data['rota'] = [('A', ' 275 ', 'PHE', 0.15596645877156431, (192.975, 157.175, 147.934)), ('A', ' 403 ', 'ARG', 0.03349700148986656, (147.303, 149.579, 103.633)), ('A', ' 762 ', 'GLN', 0.1807461408866953, (156.83599999999993, 174.1, 156.231)), ('B', ' 294 ', 'ASP', 0.10501385226886113, (130.296, 137.445, 154.769)), ('B', ' 571 ', 'ASP', 0.2287627201695077, (140.452, 174.105, 145.353)), ('C', ' 347 ', 'PHE', 0.2141640474094484, (184.506, 166.071, 104.402)), ('C', ' 564 ', 'GLN', 0.18813927428648425, (193.1329999999999, 177.82, 138.558)), ('C', ' 586 ', 'ASP', 0.2374875739284143, (189.137, 185.283, 146.774)), ('C', ' 732 ', 'THR', 0.22344526924372002, (142.187, 164.649, 167.42200000000003)), ('C', ' 978 ', 'ASN', 0.19139663646790409, (138.154, 165.517, 138.093))]
data['cbeta'] = [('A', ' 487 ', 'ASN', ' ', 0.2606242356987274, (123.655, 156.568, 108.528)), ('A', ' 773 ', 'GLU', ' ', 0.32683133656780344, (162.508, 173.379, 170.89299999999997)), ('C', ' 350 ', 'VAL', ' ', 0.26631111557194703, (179.119, 158.662, 108.762)), ('C', ' 773 ', 'GLU', ' ', 0.28793492302632595, (149.011, 154.798, 170.17399999999998)), ('C', '1058 ', 'HIS', ' ', 0.25929643656530055, (143.487, 166.949, 172.353))]
data['probe'] = [(' C 189  LEU  HB2', ' C 210  ILE HD12', -0.648, (133.169, 210.786, 146.533)), (' A 894  LEU HD13', ' C 715  PRO  HD3', -0.511, (165.088, 178.558, 203.406)), (' A 714  ILE HD12', ' A1096  VAL HG21', -0.505, (177.312, 145.067, 209.887)), (' A 712  ILE  CD1', ' A1094  VAL HG11', -0.481, (173.833, 143.103, 207.438)), (' C 903  ALA  HB2', ' C 917  TYR  CZ ', -0.479, (147.562, 166.175, 208.488)), (' B1032  CYS  HG ', ' B1043  CYS  HG ', -0.477, (160.99, 149.171, 190.094)), (' B 714  ILE  CD1', ' B1096  VAL HG21', -0.467, (144.882, 153.181, 210.253)), (' C 738  CYS  HG ', ' C 760  CYS  CB ', -0.439, (147.085, 154.307, 150.332)), (' B 714  ILE HD11', ' B1096  VAL HG21', -0.435, (144.838, 153.695, 210.554)), (' C 712  ILE HG21', ' C1096  VAL HG12', -0.42, (171.219, 178.002, 210.174)), (' A 495  TYR  CD2', ' A 497  PHE  CZ ', -0.412, (144.64, 147.287, 101.29)), (' B 391  CYS  SG ', ' B 522  ALA  HB1', -0.412, (130.502, 176.612, 129.025)), (' A  55  PHE  CE2', ' A 275  PHE  HB2', -0.41, (193.915, 157.971, 145.042))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
