# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', '  26 ', 'GLY', 0.03831846281899663, (25.69626, 88.50939, -11.99677)), ('C', '  56 ', 'SER', 0.005417295174340482, (12.290399999999995, 74.70208, -15.28193)), ('C', ' 103 ', 'PRO', 0.07343786653271472, (23.790419999999994, 76.33613, -28.31487)), ('C', ' 111 ', 'ASP', 0.03660925899387504, (31.448809999999987, 79.77575, -19.2941)), ('D', '  27 ', 'GLN', 0.005261579670104391, (37.123539999999984, 55.52093, -32.32855)), ('D', '  28 ', 'SER', 0.019068012535430657, (33.65466999999999, 57.031970000000015, -32.767469999999996)), ('D', '  31 ', 'SER', 0.010575058506364216, (32.310079999999985, 67.28067000000003, -33.36493)), ('D', '  69 ', 'THR', 0.0015661692680033596, (38.55164999999999, 62.38306000000001, -33.56952)), ('D', '  97 ', 'ILE', 0.0990426613542415, (30.06703999999999, 65.68288, -20.538389999999993)), ('H', '  26 ', 'GLY', 0.033415771126918056, (-30.520730000000007, -4.32184, -151.30079)), ('H', '  56 ', 'SER', 0.008774204293086818, (-38.209720000000026, 9.05016, -139.30702)), ('H', ' 103 ', 'PRO', 0.07147553324443551, (-20.96326000000002, 8.09882, -138.21038)), ('H', ' 111 ', 'ASP', 0.023014433490778242, (-21.69377, 4.7882, -150.05357)), ('L', '  27 ', 'GLN', 0.006490196447341538, (-9.241600000000005, 29.359730000000003, -144.50482)), ('L', '  28 ', 'SER', 0.017999980595784802, (-11.369920000000029, 27.79702000000001, -141.75686)), ('L', '  31 ', 'SER', 0.010164308963770826, (-11.576260000000019, 17.519250000000007, -140.45958)), ('L', '  69 ', 'THR', 0.000545464746167731, (-7.201760000000014, 22.54025, -144.6958)), ('L', '  97 ', 'ILE', 0.09416881854990465, (-22.211730000000024, 18.79478, -148.05348999999995))]
data['omega'] = [('A', ' 155 ', 'PRO', None, (-5.977190000000014, 23.74413000000001, -72.74905)), ('A', ' 157 ', 'PRO', None, (-11.053550000000026, 26.43239, -70.12292999999997)), ('B', '   8 ', 'PRO', None, (-8.925089999999999, 34.8801, -37.67644)), ('B', '  95 ', 'PRO', None, (9.23718999999999, 45.105920000000005, -49.6209)), ('B', ' 141 ', 'PRO', None, (-18.845870000000012, 21.906479999999995, -41.53611999999998)), ('C', ' 157 ', 'PRO', None, (40.079930000000004, 69.35098, 10.09443)), ('C', ' 159 ', 'PRO', None, (42.2503, 73.29702, 5.894099999999998)), ('D', '   8 ', 'PRO', None, (50.21925000000001, 64.62769, -23.4496)), ('D', '  95 ', 'PRO', None, (28.407299999999985, 58.61576, -22.28761)), ('D', ' 142 ', 'PRO', None, (64.50365, 66.39556, -12.862399999999997)), ('F', ' 155 ', 'PRO', None, (-13.786590000000011, 60.32874, -85.24561)), ('F', ' 157 ', 'PRO', None, (-18.98354, 57.06654, -83.89654)), ('G', '   8 ', 'PRO', None, (-39.355110000000025, 48.83641000000001, -108.6282)), ('G', '  95 ', 'PRO', None, (-17.49941000000002, 39.24248, -112.4894)), ('G', ' 141 ', 'PRO', None, (-44.928630000000005, 61.05991000000002, -98.62904)), ('H', ' 157 ', 'PRO', None, (-37.04195000000002, 15.23127, -176.55725)), ('H', ' 159 ', 'PRO', None, (-32.52616000000002, 11.42578, -175.07646999999994)), ('L', '   8 ', 'PRO', None, (-5.758310000000023, 20.455550000000006, -160.11805)), ('L', '  95 ', 'PRO', None, (-22.371220000000037, 25.83199, -145.65264)), ('L', ' 142 ', 'PRO', None, (-3.626430000000042, 18.4451, -178.33592))]
data['rota'] = [('B', '  33 ', 'LEU', 0.25461591875337297, (-2.538310000000008, 49.05211, -43.20592)), ('B', ' 105 ', 'ASP', 0.12852992100048674, (-18.973600000000005, 31.479270000000007, -44.40191)), ('H', '   2 ', 'VAL', 0.1698697019746792, (-27.39736000000004, -2.869880000000001, -152.43723)), ('H', '  57 ', 'GLU', 0.20335659099450878, (-39.532849999999996, 12.10366, -141.10653)), ('H', '  65 ', 'LEU', 0.049436000840510586, (-33.052550000000004, 25.0943, -153.08892)), ('H', '  83 ', 'LYS', 0.19784896778202196, (-40.217150000000004, 17.13796, -154.82679)), ('H', ' 121 ', 'VAL', 0.06544134985313074, (-37.05586, 20.76117, -168.01673)), ('L', ' 106 ', 'GLU', 0.07997105651111387, (-6.8246400000000165, 12.603170000000004, -169.1481)), ('E', ' 449 ', 'TYR', 0.001972289283003193, (-25.0959, 21.790200000000002, -133.26636)), ('F', ' 105 ', 'TYR', 0.11579248120553821, (-16.48103000000002, 30.50365, -106.72501)), ('F', ' 125 ', 'LYS', 0.2965991331766999, (-11.418520000000008, 65.90803, -83.07072)), ('G', ' 195 ', 'GLU', 0.17023911273502715, (-37.972560000000016, 76.3135, -100.72197)), ('G', ' 196 ', 'VAL', 0.07886830622269063, (-39.65125000000003, 72.94089, -100.11562)), ('C', '  64 ', 'SER', 0.286312308540033, (27.759199999999996, 57.07546000000001, -11.78688)), ('C', '  65 ', 'LEU', 0.08628254393557792, (25.974929999999997, 59.218820000000015, -9.20815)), ('C', ' 121 ', 'VAL', 0.1336585179927166, (33.55877999999999, 63.43281000000002, 4.0269)), ('D', ' 106 ', 'GLU', 0.0929121064272424, (55.61130999999999, 72.47681, -16.152729999999995)), ('I', ' 430 ', 'THR', 0.12204123488408865, (0.7201499999999896, 72.30171, -55.7141)), ('I', ' 449 ', 'TYR', 0.002043998593289958, (17.68305999999999, 62.43452, -29.182719999999996))]
data['cbeta'] = []
data['probe'] = [(' L  51  ALA  HB1', ' L  66  GLY  HA3', -0.742, (-7.271, 13.044, -145.099)), (' A  51  LEU HD22', ' A  55  GLY  HA2', -0.7, (10.372, 53.745, -64.345)), (' A  83  MET  HB3', ' A  86  LEU HD21', -0.68, (7.54, 36.523, -67.49)), (' L  68  GLY  O  ', ' L  70  ASP  N  ', -0.665, (-4.916, 21.333, -146.032)), (' A  50  VAL HG21', ' A 105  TYR  HB3', -0.665, (6.728, 52.195, -55.91)), (' D  51  ALA  HB1', ' D  66  GLY  HA3', -0.661, (37.615, 71.979, -33.626)), (' F  50  VAL HG21', ' F 105  TYR  HB3', -0.66, (-14.857, 33.14, -106.211)), (' F  51  LEU HD22', ' F  55  GLY  HA2', -0.654, (-6.676, 31.079, -103.906)), (' D  18  ARG HH21', ' D  74  THR HG21', -0.643, (50.98, 75.379, -32.71)), (' C  35  TYR  HB2', ' C 100  VAL  HB ', -0.627, (24.578, 75.022, -18.816)), (' I 340  GLU  OE1', ' I 356  LYS  NZ ', -0.627, (-7.017, 61.23, -38.619)), (' F  22  CYS  HB3', ' F  79  LEU  HB3', -0.623, (-11.241, 35.023, -94.295)), (' D  30  THR HG21', ' D  68  GLY  HA2', -0.623, (36.787, 65.064, -36.625)), (' H  35  TYR  HB2', ' H 100  VAL  HB ', -0.618, (-27.352, 9.572, -145.842)), (' L  18  ARG HH21', ' L  74  THR HG21', -0.617, (1.045, 9.865, -154.688)), (' E 466  ARG  NH2', ' F 104  TYR  OH ', -0.617, (-22.198, 26.474, -112.057)), (' C   2  VAL  HA ', ' C  26  GLY  HA3', -0.609, (26.965, 87.938, -12.816)), (' A  52  SER  O  ', ' A  72  ARG  NH1', -0.608, (7.399, 56.183, -63.463)), (' H  92  THR HG23', ' H 120  THR  HA ', -0.606, (-33.413, 19.142, -168.866)), (' I 383  SER  HB2', ' I 386  LYS  HG2', -0.605, (-6.092, 81.662, -53.918)), (' H   2  VAL  HA ', ' H  26  GLY  HA3', -0.601, (-29.264, -3.916, -152.294)), (' A  22  CYS  HB3', ' A  79  LEU  HB3', -0.6, (1.49, 49.911, -67.666)), (' E 383  SER  HB2', ' E 386  LYS  HG2', -0.595, (-24.726, 2.469, -99.548)), (' A  34  MET  HB3', ' A  79  LEU HD22', -0.59, (2.996, 50.578, -64.138)), (' G 105  ASP  OD1', ' G 106  ILE  N  ', -0.589, (-44.023, 52.788, -96.146)), (' L  30  THR HG21', ' L  68  GLY  HA2', -0.587, (-6.831, 19.974, -141.842)), (' H  41  GLN  NE2', ' L  38  GLN  OE1', -0.584, (-22.461, 12.336, -163.061)), (' F  83  MET  HB3', ' F  86  LEU HD21', -0.584, (-7.428, 48.732, -98.737)), (' A  67  ARG  NH1', ' A  85  SER  O  ', -0.58, (10.655, 32.794, -64.898)), (' D  68  GLY  O  ', ' D  70  ASP  N  ', -0.579, (40.901, 63.652, -34.078)), (' D  12  SER  HB3', ' D 108  LYS  HB2', -0.579, (60.482, 70.373, -19.384)), (' F  52  SER  O  ', ' F  72  ARG  NH1', -0.57, (-9.518, 28.419, -101.626)), (' H  18  LEU  HB2', ' H  87  VAL HG21', -0.566, (-38.811, 19.604, -161.589)), (' D 107  THR  O  ', ' D 167  GLN  NE2', -0.565, (60.08, 72.616, -14.479)), (' G  93  ASN  OD1', ' G  94  LEU  N  ', -0.559, (-18.357, 35.44, -113.937)), (' L 144  GLU  N  ', ' L 144  GLU  OE1', -0.556, (-7.326, 21.491, -176.27)), (' F  35  HIS  HB2', ' F  97  ALA  HB3', -0.553, (-18.053, 35.429, -100.117)), (' H  72  SER  OG ', ' H  81  SER  OG ', -0.553, (-42.127, 11.11, -150.97)), (' A 108  MET  HE3', ' B  96  LEU HD12', -0.552, (2.647, 47.836, -53.782)), (' A  89  GLU  N  ', ' A  89  GLU  OE1', -0.551, (5.968, 28.192, -61.344)), (' A  51  LEU HD13', ' A  72  ARG  HD2', -0.551, (8.416, 53.104, -65.486)), (' H  87  VAL HG12', ' H 121  VAL HG21', -0.55, (-37.742, 23.052, -165.146)), (' B  61  ARG  NH1', ' B  82  ASP  OD2', -0.548, (-21.989, 43.795, -45.104)), (' C 102  GLU  OE1', ' I 498  GLN  NE2', -0.547, (21.937, 70.975, -24.399)), (' F 108  MET  HE3', ' G  96  LEU HD12', -0.546, (-19.513, 37.068, -104.436)), (' E 340  GLU  OE1', ' E 356  LYS  NZ ', -0.546, (-35.91, 22.784, -109.744)), (' C  18  LEU  HB2', ' C  87  VAL HG21', -0.539, (27.247, 64.446, 0.572)), (' C  41  GLN  NE2', ' D  38  GLN  OE1', -0.539, (40.279, 71.639, -9.962)), (' B 120  PRO  HD3', ' B 132  VAL HG22', -0.538, (-9.413, 3.486, -58.672)), (' G  35  TRP  CE2', ' G  73  PHE  HB2', -0.534, (-36.706, 38.986, -106.541)), (' D  13  LEU  O  ', ' D 107  THR  HA ', -0.533, (58.558, 74.753, -18.978)), (' H  18  LEU HD11', ' H 119  VAL HG21', -0.532, (-36.151, 16.661, -163.114)), (' D 144  GLU  N  ', ' D 144  GLU  OE1', -0.532, (60.662, 63.011, -11.972)), (' F  89  GLU  N  ', ' F  89  GLU  OE1', -0.531, (-12.978, 55.961, -101.789)), (' F  34  MET  HB3', ' F  79  LEU HD22', -0.529, (-11.952, 33.629, -98.188)), (' G 187  GLU  OE1', ' G 211  ARG  NH1', -0.526, (-23.878, 89.995, -91.084)), (' F 127  PRO  HB3', ' F 153  TYR  HB3', -0.525, (-18.063, 66.307, -83.485)), (' D  24  ARG  HA ', ' D  70  ASP  HA ', -0.524, (41.48, 62.972, -30.885)), (' B  93  ASN  OD1', ' B  94  LEU  N  ', -0.524, (9.733, 48.799, -48.29)), (' H 129  PRO  HB3', ' H 155  TYR  HB3', -0.522, (-34.449, 14.582, -183.554)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.52, (-28.197, 15.221, -122.302)), (' C 106  THR HG21', ' D  31  SER  OG ', -0.519, (30.628, 66.576, -30.758)), (' I 498  GLN  HB2', ' I 501  TYR  CE1', -0.518, (19.676, 72.221, -26.899)), (' L  12  SER  HB3', ' L 108  LYS  HB2', -0.517, (-1.115, 15.124, -170.868)), (' C 178  ALA  HB2', ' C 188  LEU HD23', -0.513, (48.927, 69.464, 4.945)), (' C 129  PRO  HB3', ' C 155  TYR  HB3', -0.512, (47.132, 69.519, 12.769)), (' G  35  TRP  HB2', ' G  48  ILE  HB ', -0.512, (-34.553, 36.082, -103.631)), (' C  49  TRP  CE2', ' D  97  ILE HD12', -0.51, (26.845, 67.213, -17.327)), (' B 193  ALA  HB2', ' B 208  SER  HB3', -0.509, (-11.273, 0.548, -48.063)), (' F   7  SER  OG ', ' F  21  SER  OG ', -0.506, (-8.507, 39.275, -88.257)), (' A   1  GLN  N  ', ' I 519  HIS  O  ', -0.505, (-11.425, 60.042, -63.773)), (' F  35  HIS  NE2', ' F 105  TYR  O  ', -0.504, (-17.839, 33.07, -104.971)), (' F  67  ARG  NH1', ' F  85  SER  O  ', -0.503, (-6.741, 52.218, -102.491)), (' G  61  ARG  NH1', ' G  82  ASP  OD2', -0.501, (-44.07, 39.824, -95.037)), (' B  21  ILE HG21', ' B 102  THR HG21', -0.498, (-11.544, 37.066, -40.927)), (' C  72  SER  OG ', ' C  81  SER  OG ', -0.498, (17.633, 72.697, -4.671)), (' H  68  ARG HH22', ' H  91  ASP  CG ', -0.497, (-34.447, 23.933, -160.586)), (' L  24  ARG  HA ', ' L  70  ASP  HA ', -0.497, (-6.593, 21.944, -148.973)), (' B 136  LEU  HB2', ' B 175  LEU  HB3', -0.496, (-15.302, 15.933, -50.221)), (' D  38  GLN  O  ', ' D  84  ALA  HB1', -0.494, (46.251, 74.718, -14.154)), (' H 106  THR HG21', ' L  31  SER  OG ', -0.491, (-14.936, 18.056, -141.661)), (' E 490  PHE  CD1', ' E 491  PRO  HD2', -0.485, (-13.489, 30.452, -130.087)), (' C 178  ALA  HA ', ' C 188  LEU  HB3', -0.484, (50.63, 68.007, 4.418)), (' G 145  LYS  HB3', ' G 197  THR  OG1', -0.484, (-39.148, 69.647, -104.469)), (' H  73  ILE HG13', ' H  80  PHE  HB3', -0.479, (-37.496, 7.465, -148.123)), (' F 108  MET  HB3', ' F 111  TRP  HE1', -0.479, (-22.546, 35.588, -99.903)), (' H  49  TRP  CE2', ' L  97  ILE HD12', -0.478, (-26.196, 16.626, -148.254)), (' I 401  VAL HG22', ' I 509  ARG  HG2', -0.478, (7.732, 68.588, -35.288)), (' A 127  PRO  HB3', ' A 153  TYR  HB3', -0.477, (-9.959, 17.231, -71.375)), (' I 490  PHE  CD1', ' I 491  PRO  HD2', -0.477, (23.985, 53.835, -39.846)), (' H 178  ALA  HB2', ' H 188  LEU HD23', -0.475, (-27.588, 15.21, -179.463)), (' A  67  ARG  HG2', ' A  84  ASN  O  ', -0.475, (12.767, 34.982, -66.032)), (' F  60  TYR  CE2', ' F  70  ILE HG22', -0.471, (-7.3, 38.935, -104.79)), (' L  90  LEU  O  ', ' L  97  ILE  HA ', -0.47, (-20.246, 17.984, -147.752)), (' H   8  GLY  HA3', ' H  20  LEU HD23', -0.47, (-39.211, 10.74, -161.753)), (' F  51  LEU HD21', ' F  58  LYS  HG2', -0.47, (-5.85, 33.956, -104.983)), (' L  13  LEU  O  ', ' L 107  THR  HA ', -0.469, (-2.973, 10.545, -169.58)), (' C  92  THR HG23', ' C 120  THR  HA ', -0.466, (36.216, 65.695, 1.932)), (' F 173  THR HG23', ' F 188  SER  HB2', -0.465, (-29.614, 64.032, -82.85)), (' H  66  LYS  HA ', ' H  69  VAL HG12', -0.464, (-35.244, 23.319, -150.075)), (' A  36  TRP  NE1', ' A  81  LEU  HB2', -0.461, (5.065, 45.089, -65.958)), (' C  73  ILE HG13', ' C  80  PHE  HB3', -0.461, (18.818, 76.35, -9.805)), (' E 498  GLN  HB2', ' E 501  TYR  CE1', -0.46, (-24.845, 12.269, -136.739)), (' B  33  LEU HD11', ' B  88  CYS  HB2', -0.459, (-4.429, 44.506, -42.77)), (' H  53  ILE HD13', ' H  73  ILE  HB ', -0.457, (-38.136, 10.006, -146.543)), (' A  39  GLN  HB2', ' A  45  LEU HD23', -0.456, (-3.694, 38.513, -56.061)), (' H 122  SER  HB3', ' H 156  PHE  CZ ', -0.456, (-37.771, 20.606, -173.092)), (' B  47  LEU  HA ', ' B  58  VAL HG21', -0.453, (-13.708, 49.748, -48.679)), (' D 198  THR HG22', ' D 205  PRO  HB3', -0.452, (70.365, 55.609, -4.812)), (' L 198  THR HG22', ' L 205  PRO  HB3', -0.451, (-5.585, 28.893, -188.665)), (' G 108  ARG  HD3', ' G 109  THR  O  ', -0.451, (-49.567, 59.43, -94.383)), (' B  35  TRP  CZ3', ' B  88  CYS  HB3', -0.451, (-6.747, 42.506, -42.91)), (' F  67  ARG  HG2', ' F  84  ASN  O  ', -0.449, (-4.511, 49.882, -103.173)), (' F 127  PRO  HD2', ' F 213  THR HG21', -0.448, (-16.751, 66.74, -78.692)), (' D  90  LEU  O  ', ' D  97  ILE  HA ', -0.448, (31.144, 66.57, -22.175)), (' I 444  LYS  O  ', ' I 498  GLN  HG2', -0.445, (17.27, 69.003, -23.942)), (' D  65  SER  HB3', ' D  72  THR  HB ', -0.445, (45.378, 70.215, -32.893)), (' C   8  GLY  HA3', ' C  20  LEU HD23', -0.443, (27.077, 73.13, 0.814)), (' H 106  THR HG23', ' L  91  ARG  O  ', -0.443, (-18.366, 18.499, -142.236)), (' H  53  ILE  HB ', ' H  71  MET  HE2', -0.443, (-35.302, 12.88, -148.14)), (' B  35  TRP  HB2', ' B  48  ILE  HB ', -0.443, (-9.693, 48.171, -44.435)), (' D  66  GLY  HA2', ' D  71  PHE  CD2', -0.441, (39.432, 69.63, -32.504)), (' G 136  LEU  HB2', ' G 175  LEU  HB3', -0.438, (-36.825, 67.382, -94.392)), (' L 143  ARG  HB3', ' L 174  TYR  CD1', -0.438, (-9.2, 17.1, -176.448)), (' L   6  GLN  OE1', ' L  88  CYS  N  ', -0.438, (-13.284, 16.474, -155.528)), (' C  18  LEU HD11', ' C 119  VAL HG21', -0.437, (30.601, 67.827, -0.469)), (' H  11  LEU HD21', ' H 157  PRO  HG3', -0.437, (-37.992, 15.108, -173.056)), (' H 178  ALA  HA ', ' H 188  LEU  HB3', -0.437, (-25.764, 16.315, -180.629)), (' F 208  HIS  CD2', ' F 210  PRO  HD2', -0.437, (-16.548, 59.758, -80.496)), (' I 393  THR  HA ', ' I 522  ALA  HA ', -0.436, (-11.961, 64.36, -55.891)), (' B 103  LYS  HZ3', ' B 142  ARG  HD2', -0.436, (-14.606, 27.344, -47.724)), (' A 208  HIS  CD2', ' A 210  PRO  HD2', -0.435, (-11.093, 23.241, -74.076)), (' D  26  SER  O  ', ' D  28  SER  N  ', -0.435, (35.968, 57.498, -31.621)), (' C  55  TYR  HA ', ' C  73  ILE HD13', -0.435, (16.12, 76.776, -13.463)), (' E 473  TYR  CE2', ' E 475  ALA  HB2', -0.434, (-3.742, 26.275, -129.155)), (' A  60  TYR  CE2', ' A  70  ILE HG22', -0.434, (11.347, 46.09, -62.663)), (' H  61  TYR  HE2', ' H  71  MET  HG3', -0.434, (-36.012, 17.094, -148.84)), (' D  30  THR  CG2', ' D  68  GLY  HA2', -0.433, (36.273, 65.09, -35.777)), (' B  50  ASP  O  ', ' B  52  SER  N  ', -0.433, (-6.934, 53.33, -40.789)), (' G 108  ARG  NH1', ' G 109  THR  O  ', -0.433, (-50.195, 60.599, -93.534)), (' L  66  GLY  HA2', ' L  71  PHE  CD2', -0.431, (-7.281, 15.184, -145.991)), (' L  30  THR  CG2', ' L  68  GLY  HA2', -0.431, (-7.123, 19.947, -141.467)), (' A  73  ASP  OD1', ' A  75  SER  OG ', -0.431, (6.951, 56.942, -75.58)), (' C  71  MET  HB3', ' C  71  MET  HE2', -0.431, (20.215, 70.772, -9.69)), (' C 133  PRO  HD3', ' C 219  LYS  HE2', -0.43, (58.774, 71.364, 18.507)), (' H  37  GLY  HA2', ' H  52  SER  HA ', -0.429, (-31.017, 12.651, -149.303)), (' H 133  PRO  HD3', ' H 219  LYS  HE2', -0.428, (-30.398, 12.3, -195.75)), (' L  91  ARG  HG2', ' L  97  ILE HG12', -0.425, (-22.643, 16.969, -146.083)), (' F  36  TRP  CG ', ' F  81  LEU HD22', -0.424, (-11.644, 40.474, -98.968)), (' G  89  GLN  HB2', ' G  98  PHE  CD2', -0.423, (-26.232, 40.729, -104.673)), (' H  53  ILE HG13', ' H  59  ALA  HB2', -0.422, (-35.923, 13.426, -144.724)), (' E 525  CYS  HB3', ' E 526  GLY  H  ', -0.421, (-33.5, 12.085, -94.099)), (' E 444  LYS  O  ', ' E 498  GLN  HG2', -0.42, (-28.464, 14.896, -136.89)), (' B  35  TRP  CE2', ' B  73  PHE  HB2', -0.42, (-8.862, 44.676, -41.073)), (' L  50  ASP  O  ', ' L  52  SER  N  ', -0.419, (-9.607, 9.639, -144.877)), (' D  83  PHE  CD2', ' D 105  LEU  HG ', -0.418, (53.832, 74.66, -18.959)), (' E 497  PHE  N  ', ' E 501  TYR  HE2', -0.415, (-23.816, 14.074, -133.473)), (' G   6  GLN  NE2', ' G 102  THR  OG1', -0.414, (-35.073, 46.185, -106.049)), (' L  39  ARG  NH2', ' L  81  GLU  O  ', -0.414, (-11.451, 3.107, -164.344)), (' D   3  VAL  H  ', ' D  26  SER  HB3', -0.413, (36.246, 56.634, -26.416)), (' H  68  ARG  NH2', ' H  91  ASP  OD1', -0.413, (-33.765, 24.547, -159.77)), (' H  29  ILE  CG2', ' H  73  ILE HD11', -0.412, (-35.997, 6.012, -145.741)), (' I 498  GLN  HB2', ' I 501  TYR  CZ ', -0.411, (19.648, 71.738, -27.047)), (' B 115  VAL HG21', ' B 196  VAL HG11', -0.411, (-16.726, 9.979, -45.175)), (' L   4  MET  HB2', ' L   4  MET  HE2', -0.411, (-16.079, 22.973, -150.575)), (' C 106  THR HG23', ' D  91  ARG  O  ', -0.411, (28.84, 66.275, -27.763)), (' E 350  VAL HG22', ' E 422  ASN  HB3', -0.408, (-17.555, 19.991, -120.172)), (' C  35  TYR  CB ', ' C 100  VAL  HB ', -0.404, (23.961, 74.724, -18.286)), (' C  37  GLY  HA2', ' C  52  SER  HA ', -0.404, (24.086, 71.537, -13.657)), (' E 391  CYS  HA ', ' E 525  CYS  HA ', -0.404, (-30.332, 13.438, -94.851)), (' E 379  CYS  HA ', ' E 432  CYS  HA ', -0.402, (-22.144, 8.35, -107.171)), (' L  59  PRO  HB2', ' L  61  ARG  HG2', -0.402, (-5.191, 0.947, -157.242)), (' C 169  LEU HD21', ' C 192  VAL HG21', -0.401, (63.578, 80.325, 6.426)), (' L  82  ASP  O  ', ' L  86  TYR  OH ', -0.401, (-8.689, 7.876, -162.301)), (' H  87  VAL HG13', ' H  91  ASP  HB2', -0.401, (-35.679, 22.242, -162.848)), (' E 502  GLY  O  ', ' E 506  GLN  HG3', -0.4, (-24.156, 7.085, -131.714))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
