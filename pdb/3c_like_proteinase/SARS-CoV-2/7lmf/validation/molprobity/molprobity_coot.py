# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  23 ', 'GLY', 0.057183532977633574, (21.67083, 14.047370000000006, 41.7225)), ('A', ' 154 ', 'TYR', 0.018601534117791647, (-16.66824, 10.99896, 36.1204)), ('B', ' 154 ', 'TYR', 0.015571238162310203, (6.3512, 10.319810000000002, 20.14841))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 109  GLY  HA2', ' A 200  ILE HD13', -0.736, (-8.425, -8.65, 43.231)), (' A 166  GLU  OE1', ' B   1  SER  N  ', -0.729, (10.419, -5.56, 35.779)), (' A 226  THR HG22', ' A 228  ASN  H  ', -0.674, (-22.106, -22.038, 52.62)), (' B 245  ASP  O  ', ' B 249  ILE HG13', -0.59, (9.595, -8.335, 8.492)), (' A  68  VAL HG12', ' A  75  LEU HD13', -0.572, (9.157, 20.074, 37.241)), (' A 165  MET  HE2', ' A 167  LEU HD23', -0.57, (10.592, -5.874, 46.031)), (' B 154  TYR  H  ', ' B 305  PHE  HD1', -0.565, (5.578, 7.82, 20.608)), (' B  55  GLU  O  ', ' B  59  ILE HG12', -0.544, (-29.023, 12.041, -1.805)), (' A  17  MET  HE1', ' A  30  LEU HD13', -0.544, (0.334, 11.479, 38.6)), (' A 226  THR HG22', ' A 228  ASN  N  ', -0.543, (-21.569, -22.596, 52.595)), (' B  83  GLN  OE1', ' B  88  LYS  NZ ', -0.523, (-13.268, 12.636, 2.552)), (' A 165  MET  HE1', ' A 192  GLN  NE2', -0.517, (12.33, -4.841, 48.884)), (' A   1  SER  N  ', ' B 140  PHE  O  ', -0.507, (-20.644, -4.458, 21.677)), (' A  44  CYS  O  ', ' A 401  Y6G  N26', -0.502, (19.498, 6.638, 43.949)), (' B  17  MET  HE1', ' B  30  LEU HD13', -0.498, (-10.921, 11.211, 17.249)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.495, (-15.369, 6.237, 6.669)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.486, (4.753, 6.773, 49.793)), (' A 298  ARG  HG2', ' A 303  VAL  HB ', -0.469, (-18.191, 2.232, 33.091)), (' B  44  CYS  HB3', ' B  48  ASP  HB2', -0.469, (-30.642, 4.555, 8.645)), (' A 262  LEU  HA ', ' A 262  LEU HD23', -0.462, (-23.08, -19.717, 45.356)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.458, (0.983, 8.282, 29.931)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.455, (-7.591, 3.042, 18.41)), (' B 127  GLN  NE2', ' B 508  HOH  O  ', -0.454, (-0.648, -1.372, 19.355)), (' A  55  GLU  O  ', ' A  59  ILE HG12', -0.451, (18.562, 13.314, 57.611)), (' A   8  PHE  HE1', ' A 305  PHE  CZ ', -0.443, (-14.48, 4.766, 34.867)), (' B  44  CYS  O  ', ' B 401  Y6G  N26', -0.438, (-29.544, 6.083, 12.531)), (' A 276  MET  HE1', ' A 285  ALA  HA ', -0.436, (-9.85, -21.27, 29.024)), (' B 297  VAL  O  ', ' B 301  SER  HB3', -0.434, (11.564, -1.891, 23.381)), (' A 217 AARG  HB3', ' A 220  LEU HD12', -0.432, (-25.316, -20.275, 30.419)), (' A 127  GLN  O  ', ' B   4  ARG  NH2', -0.424, (-3.389, -5.207, 33.597)), (' A 209  TYR  O  ', ' A 213  ILE HG13', -0.414, (-22.836, -11.592, 32.194)), (' B 190  THR HG23', ' B 192  GLN  HG2', -0.414, (-24.142, -7.924, 5.34)), (' A  60  ARG  HB3', ' A  60  ARG  HE ', -0.412, (24.441, 14.837, 51.623)), (' A  66  PHE  CE1', ' A  87  LEU HD21', -0.411, (13.64, 14.648, 46.996)), (' B 140  PHE  HB3', ' B 144  SER  OG ', -0.41, (-19.169, 0.15, 20.086)), (' B 230  PHE  CD1', ' B 265  CYS  HB3', -0.408, (8.62, -22.385, 12.703)), (' A 285  ALA  HB2', ' B 286  LEU HD21', -0.402, (-7.107, -21.871, 25.965))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
