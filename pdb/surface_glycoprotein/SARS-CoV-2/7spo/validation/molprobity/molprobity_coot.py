# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('C', '  26 ', 'PRO', None, (-21.49774, -51.60979, 7.19782)), ('D', '  26 ', 'PRO', None, (25.682650000000002, 1.28617, -38.60967))]
data['rota'] = [('A', ' 354 ', 'ASN', 0.07238010461106156, (8.749230000000003, -32.93625, -0.41612)), ('D', '  40 ', 'ASN', 0.10918409668730825, (27.548970000000004, -2.1194300000000004, -43.08104999999998)), ('D', '  63 ', 'THR', 0.13874717800415767, (5.61393, -2.58127, -38.89396)), ('D', ' 108 ', 'THR', 0.28009293517968864, (25.10358, -24.06221, -52.10288)), ('D', ' 136 ', 'GLN', 0.2595109163284088, (16.535569999999993, 19.79256, -41.099009999999986))]
data['cbeta'] = []
data['probe'] = [(' C  93  THR HG22', ' C  95  ALA  H  ', -0.86, (-33.688, -38.819, 14.921)), (' A 378  LYS  HZ1', ' C  21  SER  N  ', -0.657, (-4.262, -50.934, 7.711)), (' D  58  LYS  HE3', ' D  65  TRP  CE2', -0.627, (10.276, -2.979, -40.857)), (' B 502  GLY  H  ', ' B 604 BEDO  C2 ', -0.59, (13.206, -2.294, -25.842)), (' C  47  ARG  HA ', ' C 120  MET  HE2', -0.578, (1.428, -56.946, 13.106)), (' C 114  HIS  ND1', ' C 120  MET  HE1', -0.533, (0.349, -59.913, 12.768)), (' D  22  VAL HG23', ' D 125  VAL HG13', -0.531, (22.396, -12.355, -41.212)), (' B 502  GLY  H  ', ' B 604 BEDO  H21', -0.515, (12.822, -1.597, -25.304)), (' B 502  GLY  H  ', ' B 604 BEDO  H22', -0.504, (13.141, -2.696, -25.836)), (' D  60  PRO  C  ', ' D  62  THR HG23', -0.498, (4.902, 3.902, -39.607)), (' C  65  TRP  CZ3', ' C 101  ILE HD13', -0.487, (-16.878, -40.398, 10.678)), (' D  75  VAL HG21', ' D  90  LYS  HE3', -0.475, (25.203, 6.105, -54.57)), (' D 118  GLN  HG2', ' D 120  MET  HE3', -0.458, (32.73, -23.439, -39.393)), (' D 104  ALA  O  ', ' D 124  HIS  HA ', -0.456, (20.449, -14.85, -45.356)), (' B 487  ASN  HA ', ' B 489  TYR  CE2', -0.455, (18.141, -17.38, -3.803)), (' D  93  THR  O  ', ' D 134  VAL HG21', -0.453, (15.62, 11.476, -44.543)), (' C 101  ILE HD12', ' C 129  GLY  HA2', -0.447, (-16.881, -43.917, 8.951)), (' D  52  ARG  HB3', ' D 105  TRP  HB2', -0.44, (20.927, -14.557, -50.675)), (' D  23  ASN  HB3', ' D  42  VAL HG13', -0.436, (28.576, -7.977, -38.304)), (' C  93  THR HG22', ' C  95  ALA  N  ', -0.435, (-32.785, -38.521, 15.067)), (' B 378  LYS  HZ1', ' D  21  SER  N  ', -0.435, (23.749, -16.074, -38.193)), (' D  58  LYS  HE2', ' D  63  THR  HA ', -0.431, (7.098, -2.845, -39.296)), (' C  47  ARG  HD2', ' C 116  TRP  CZ3', -0.429, (5.764, -54.332, 14.384)), (' D  58  LYS  CE ', ' D  63  THR  HA ', -0.429, (7.573, -2.431, -39.294)), (' B 367  VAL HG23', ' B 368  LEU HD22', -0.428, (5.734, -22.323, -47.489)), (' A 350  VAL  HA ', ' A 400  PHE  HB2', -0.418, (2.814, -36.451, -2.646)), (' C  22  VAL HG23', ' C 125  VAL HG13', -0.418, (-7.753, -49.507, 11.063)), (' D  37  LEU  O  ', ' D  88  ARG  HA ', -0.406, (24.782, 4.68, -47.356)), (' B 517  LEU  HA ', ' B 517  LEU HD23', -0.406, (14.565, -39.671, -42.652)), (' B 383  SER  HB2', ' B 386  LYS  HG3', -0.404, (20.571, -28.221, -50.987)), (' A 367  VAL HG23', ' A 368  LEU  N  ', -0.403, (1.618, -34.485, 18.807))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
