
from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

dict_residue_prop_objects = {}
class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)
        ##save property list frame object
        dict_residue_prop_objects[data_key] = list_obj
# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "clusters","rama", "rota", "cbeta", "probe", "smoc", "fdr",
               "fsc","diffmap","cablam",
               "jpred"]
  data_titles = { "clusters"  : "Outlier residue clusters",
                  "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes",
                  "smoc"  : "Local density fit (SMOC)",
                  "fdr": "Backbone position score (FDR)",
                  "fsc": "Local density fit (FSC)",
                  "diffmap": "Model-map difference",
                  "cablam": "Ca geometry (CaBLAM)",
                  "jpred":"SS prediction"}
  data_names = { "clusters"  : ["Chain","Residue","Cluster","Outlier types"],
                 "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"],
                 "smoc" : ["Chain", "Residue", "Name", "Score"],
                 "fdr" : ["Chain", "Residue", "Name", "Score"],
                 "fsc" : ["Chain", "Residue", "Name", "Score"],
                 "diffmap" : ["Chain", "Residue", "Name", "Score"],
                 "cablam" : ["Chain", "Residue","Name","recommendation","DSSP"],
                 "jpred" : ["Chain", "Residue","Name","predicted SS","current SS"]}
  if (gobject is not None) :
    data_types = {  "clusters" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_INT, gobject.TYPE_STRING,
                             gobject.TYPE_PYOBJECT],
                    "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "smoc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "fdr" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "fsc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "diffmap" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cablam" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT],
                   "jpred" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT]}
  else :
    data_types = dict([ (s, []) for s in ["clusters","rama","rota","cbeta","probe","smoc",
                                          "fdr","fsc","diffmap","cablam","jpred"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "Validation To-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    ##adding a column type for checkbox (bool) before atom coordinate
    if gobject is not None:
        column_types = column_types[:-1]+[bool]+[column_types[-1]]
    
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    ##add a cell for checkbox
    cell1 = gtk.CellRendererToggle()
    cell1.connect ("toggled", self.on_selected_toggled)
    column = gtk.TreeViewColumn('Dealt with',cell1,active=i+1)
    self.listctrl.append_column(column)
    #column.set_sort_column_id(i+1)
    #column.pack_start(cell1, True)
    
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      row = row[:-1] + (False,)+(row[-1],)
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()
  ##check box toggle
  def on_selected_toggled(self,renderer,path):
    if path is not None:
      model = self.listmodel.get_model()
      it = model.get_iter(path)
      #set toggle
      model[it][-2] = not model[it][-2]
      #set checkboxes for same residues in other lists
      try:
        chain = model[it][0]
        residue = model[it][1]
        for data_key in dict_residue_prop_objects:
          prop_obj = dict_residue_prop_objects[data_key]
          for row in prop_obj.listmodel.get_model():
            if data_key == 'probe':
              atom1_split = row[0].split()
              atom2_split = row[1].split()
              if atom1_split[0] == chain and atom1_split[1] == residue:
                row[-2] = model[it][-2]
              elif atom2_split[0] == chain and atom2_split[1] == residue:
                row[-2] = model[it][-2]
            elif row[0] == chain and row[1] == residue:
              row[-2] = model[it][-2]
      except IndexError: pass

  def check_chain_residue(self,chain,residue):
      pass
  
def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data
data = {}
data['rama'] = []
data['cbeta'] = []
data['fdr'] = []
data['fsc'] = []
data['diffmap'] = []
data['jpred'] = []
data['probe'] = [(' G  87  LEU  HB2', ' G 101  PHE  HB2', -0.709, (321.163, 282.911, 394.725)), (" 21239    U H5''", ' P 124  LYS  HD3', -0.708, (270.588, 240.898, 323.931)), (' U  54  VAL HG13', ' U  88  LEU  HB2', -0.707, (295.451, 267.93, 387.457)), (' G 223  GLU  OE1', ' G 225  LYS  NZ ', -0.687, (341.737, 311.647, 401.203)), (' D  52  PHE  HB3', ' U  80  PHE  HB3', -0.679, (290.604, 271.862, 360.788)), (" 21314    U  O2'", ' K   8  ARG  NH1', -0.674, (243.168, 274.247, 355.324)), (" 21228    A  H2'", ' 21229    G  C8 ', -0.662, (299.007, 236.14, 336.156)), (' T  76  THR HG22', ' T  94  ARG  HB3', -0.66, (293.095, 234.681, 369.698)), (' 21521    C  OP2', ' S 136  THR  OG1', -0.65, (282.173, 238.94, 331.855)), (' G 165  ILE HG13', ' G 177  TRP  HB2', -0.648, (326.838, 299.626, 399.148)), (' Q  51  LEU HD13', ' Q  81  ILE HG23', -0.641, (322.462, 244.688, 373.97)), (" 21588    A  H2'", ' 21589    A  C8 ', -0.625, (303.836, 241.783, 364.956)), (' Z  68  ILE  HB ', ' Z 109  TYR  HB2', -0.62, (330.166, 216.998, 359.342)), (' D  44  ARG  NH1', ' U  78  ASP  OD2', -0.618, (291.811, 272.833, 351.473)), (' G 166  VAL HG12', ' G 176  VAL HG22', -0.615, (332.751, 302.141, 396.92)), (" 21277    C  H2'", ' 21278    A  H8 ', -0.613, (246.131, 284.535, 344.591)), (' 21507    G  N2 ', ' F  86  THR  OG1', -0.607, (249.728, 255.711, 328.305)), (' F  71  ARG  NH2', ' F 148  ASN  OD1', -0.596, (332.503, 250.283, 349.186)), (' G 107  ASP  OD2', ' G 125  ARG  NH1', -0.59, (324.51, 287.825, 380.189)), (' P  41  GLN  HG3', ' P  84  ILE HD13', -0.585, (265.424, 229.595, 351.751)), (' M  52  LEU  HB2', ' M  76  LEU HD11', -0.579, (212.729, 274.194, 362.022)), (" 21446    A HO2'", ' 21447    G  H8 ', -0.571, (305.466, 272.06, 378.805)), (' F 128  ALA  HB3', ' M  44  LYS  HD3', -0.571, (224.966, 259.983, 368.184)), (' F 120  GLY  O  ', ' F 193  LYS  NZ ', -0.571, (341.18, 244.344, 340.635)), (' 21388    A  H61', ' D 161  GLY  HA3', -0.57, (305.258, 283.936, 356.161)), (' Z  54  THR HG21', ' Z  79  ILE HD11', -0.566, (323.628, 206.966, 349.266)), (' P 130  ARG  HD3', ' P 131  PRO  HD2', -0.566, (285.781, 242.996, 315.69)), (' F 107  LYS  HG2', ' F 115  SER  HB3', -0.565, (210.996, 253.503, 360.131)), (' F 121  CYS  HB3', ' F 126  CYS  HB2', -0.562, (229.049, 253.363, 364.099)), (' 21563    G  OP1', ' T 121  ARG  NH1', -0.56, (289.431, 232.056, 382.953)), (" 21228    A  H2'", ' 21229    G  H8 ', -0.558, (298.995, 235.512, 335.802)), (' G 233  GLY  HA3', ' G 252  THR HG21', -0.555, (347.083, 295.972, 378.077)), (' G 174  VAL  HB ', ' G 188  HIS  HB2', -0.544, (333.879, 305.778, 391.342)), (' G 162  ASN  ND2', ' G 178  ASN  OD1', -0.538, (329.083, 302.823, 406.556)), (" 21438    A  H2'", ' 21439    A  C8 ', -0.538, (308.015, 260.018, 401.382)), (' D  79  PHE  HE2', ' D  84  VAL HG13', -0.536, (269.718, 281.318, 374.345)), (' G  62  HIS  CE1', ' G  88  ARG  HG3', -0.535, (323.709, 278.203, 390.559)), (' M  52  LEU HD22', ' M  78  LYS  HE3', -0.535, (209.59, 275.917, 359.063)), (' D  19  ARG  HD2', ' D  32  ARG  HD3', -0.533, (277.101, 259.183, 358.663)), (' K  80  ARG  NH2', ' K  89  ILE  O  ', -0.529, (246.113, 292.021, 369.841)), (" 21463    U  H4'", " 21464    C H5''", -0.529, (338.802, 289.514, 352.065)), (' G 159  ASN  HB2', ' G 204  GLY  HA3', -0.528, (339.358, 298.092, 404.776)), (" 21536    G  H2'", ' 21537    A  C8 ', -0.528, (310.333, 228.044, 353.694)), (' G   3  GLU  HG3', ' G 314  ILE  HA ', -0.526, (362.757, 288.004, 394.436)), (" 21522    A  O2'", ' S 145  THR  O  ', -0.525, (288.469, 235.257, 321.478)), (" 21413    G  H2'", ' 21414    A  H8 ', -0.519, (304.531, 235.975, 401.292)), (" 21277    C  H2'", ' 21278    A  C8 ', -0.518, (246.177, 284.069, 344.021)), (' Q  16  LYS  HG3', ' Q  17  LYS  H  ', -0.517, (317.016, 253.449, 368.801)), (" 21217    A  H2'", ' 21218    C  C6 ', -0.517, (318.951, 262.905, 334.978)), (' 21447    G  OP1', ' U  87  ARG  NH2', -0.516, (298.769, 271.815, 378.455)), (' D  79  PHE  CE2', ' D  84  VAL HG13', -0.515, (269.987, 280.807, 373.904)), (' G 240  CYS  SG ', ' G 249  CYS  HB3', -0.512, (346.963, 291.203, 390.767)), (" 21415    C  O2'", ' T 132  ASP  OD2', -0.51, (309.76, 229.175, 394.465)), (" 21310    U H5''", ' F 130  VAL HG13', -0.504, (228.995, 257.483, 359.691)), (' G   3  GLU  OE1', ' G 245  ARG  NH2', -0.504, (358.989, 290.67, 395.943)), (' D 142  LEU HD12', ' D 148  LYS  HG3', -0.504, (285.918, 292.644, 334.389)), (" 21396    A  O2'", ' 21398    G  N7 ', -0.503, (317.014, 270.549, 382.201)), (" 21536    G  H2'", ' 21537    A  H8 ', -0.501, (310.208, 228.976, 353.56)), (' G 159  ASN  ND2', ' G 203  ASP  O  ', -0.499, (341.262, 299.339, 406.517)), (' C  21  THR HG22', ' C  68  LEU HD11', -0.498, (337.292, 267.697, 332.488)), (' F 106  TYR  OH ', ' M  43  ASP  OD2', -0.498, (219.627, 260.968, 362.982)), (' C  44  ARG  NH2', ' C  60  GLU  O  ', -0.497, (349.156, 254.681, 332.34)), (' D 226  GLN  HG2', ' G 186  THR HG23', -0.493, (331.803, 310.482, 398.272)), (' Z  47  LEU  HB2', ' Z  79  ILE HD13', -0.492, (321.163, 208.234, 348.486)), (' Q 100  VAL HG12', ' Q 101  ASP  H  ', -0.49, (337.55, 258.47, 392.642)), (" 21562    C  H2'", ' 21563    G  H8 ', -0.49, (285.44, 235.097, 382.221)), (' D  70  THR  HB ', ' D  86  LEU  HG ', -0.486, (268.045, 287.616, 371.56)), (' Q  81  ILE  O  ', ' Q  85  ARG  HG3', -0.481, (322.573, 248.041, 374.232)), (' S 125  HIS  CD2', ' S 131  VAL HG21', -0.481, (279.117, 226.888, 337.714)), (' 21286    G  O6 ', ' M  36  ARG  HB3', -0.478, (224.963, 267.509, 356.134)), (' U  51  LYS  HB2', ' U  90  ASP  HB2', -0.477, (295.57, 268.894, 394.512)), (" 21595    U  H2'", ' 21596    U  H6 ', -0.477, (311.578, 219.364, 362.181)), (" 21628    C  H2'", ' 21629    C  H6 ', -0.474, (287.057, 222.19, 356.326)), (' G 191  HIS  CG ', ' G 195  LEU HD21', -0.473, (336.223, 302.882, 385.268)), (" 21217    A  H2'", ' 21218    C  H6 ', -0.473, (318.324, 262.735, 334.818)), (" 21679    A  H2'", ' F  60  ARG  HD2', -0.472, (331.858, 263.827, 347.979)), (" 21407    U  H2'", ' 21408    U  C6 ', -0.472, (311.717, 254.661, 392.985)), (' G   5  MET  HE1', ' G 291  TRP  HH2', -0.471, (352.623, 288.509, 392.666)), (" 21546    G  H5'", ' Q  18  THR HG21', -0.471, (307.421, 254.506, 370.797)), (' S   5  ILE  HB ', ' Z  49  LEU  HB3', -0.471, (316.369, 202.374, 351.71)), (' M  81  ASP  HB2', ' M  84  LYS  HE2', -0.47, (214.994, 285.561, 353.344)), (' D  44  THR HG22', ' D  45  ARG  HG3', -0.47, (271.844, 283.88, 383.985)), (' T 124  THR HG22', ' T 125  PRO  HD2', -0.469, (298.605, 228.772, 396.328)), (' G 215  GLN  NE2', ' G 231  ASP  OD1', -0.469, (346.099, 303.8, 379.51)), (" 21628    C  H2'", ' 21629    C  C6 ', -0.469, (287.038, 222.435, 355.762)), (' D 163  PRO  O  ', ' D 167  TYR  HB2', -0.467, (299.921, 289.791, 359.624)), (' U  20  ILE HD12', ' U  98  VAL HG21', -0.466, (286.181, 273.471, 397.15)), (' 21227    G  C2 ', ' 21228    A  C8 ', -0.464, (303.758, 237.055, 335.537)), (' 21482    C  OP1', ' D  54  LYS  NZ ', -0.464, (297.238, 274.28, 352.98)), (' 21614    A  OP2', ' P  42  ARG  NH1', -0.464, (272.75, 226.302, 359.808)), (' F  32  ASP  O  ', ' F  36  GLN  HG3', -0.462, (348.028, 248.495, 351.158)), (' G 176  VAL  HB ', ' G 186  THR  HB ', -0.461, (331.461, 306.187, 397.609)), (' G  17  TRP  CE2', ' G 303  THR HG23', -0.461, (337.471, 282.685, 375.372)), (' S  34  LYS  HB3', ' S 100  ALA  HA ', -0.461, (289.958, 210.875, 343.467)), (' G  11  LEU  HB3', ' G  43  TRP  CZ3', -0.461, (344.083, 272.045, 386.775)), (' F  76  MET  HB3', ' F  89  THR HG23', -0.46, (324.912, 239.376, 354.824)), (' D  74  GLN  HB2', ' D  84  VAL HG21', -0.46, (266.014, 282.135, 373.951)), (' 21507    G  N1 ', ' F  88  PRO  O  ', -0.46, (246.991, 257.749, 327.315)), (" 21667    U  H2'", ' 21668    U  C6 ', -0.46, (295.815, 257.199, 352.34)), (' F  91  ARG  HD2', ' Z 103  HIS  CE1', -0.455, (321.11, 230.449, 362.259)), (' Z  58  LEU HD12', ' Z  62  VAL HG21', -0.455, (329.056, 210.038, 354.671)), (" 21595    U  H2'", ' 21596    U  C6 ', -0.454, (311.642, 219.69, 361.771)), (" 21413    G  H2'", ' 21414    A  C8 ', -0.452, (304.569, 236.202, 401.073)), (" 21499    U  H4'", ' D 176  LEU HD13', -0.452, (272.377, 285.053, 341.317)), (' G 171  ASP  N  ', ' G 171  ASP  OD1', -0.452, (327.674, 302.33, 384.415)), (' G 213  ASP  N  ', ' G 213  ASP  OD1', -0.45, (338.97, 301.773, 380.696)), (' D  62  LYS  HD3', ' K  96  ARG  HD2', -0.45, (258.031, 299.602, 373.605)), (" 21395    C  O2'", " 21396    A  H5'", -0.449, (320.802, 267.981, 377.158)), (' K  63  ALA  HB3', ' K  68  TYR  CE1', -0.448, (267.845, 279.64, 359.843)), (' K  63  ALA  HB3', ' K  68  TYR  HE1', -0.447, (267.799, 279.528, 359.589)), (' F  73  THR  O  ', ' F  89  THR HG21', -0.445, (325.013, 241.383, 355.567)), (" 21374    C  O2'", ' 21464    C  O2 ', -0.445, (332.638, 291.442, 348.34)), (" 21531    A  H2'", ' 21532    C  C6 ', -0.443, (306.68, 233.667, 343.154)), (' G  35  SER  OG ', ' G  36  ARG  N  ', -0.442, (334.393, 277.663, 382.007)), (' Z  73  VAL HG21', ' Z  88  LEU HD11', -0.441, (327.268, 213.632, 356.171)), (' 21648    G  N2 ', ' 21675    A  OP2', -0.44, (320.718, 251.878, 358.88)), (' Q 110  ASP  O  ', ' Q 114  GLN  HG2', -0.439, (338.584, 256.65, 375.121)), (" 21285    G  H5'", ' M  35  ILE HG22', -0.438, (220.574, 269.627, 353.6)), (' G 252  THR HG22', ' G 253  GLY  H  ', -0.436, (345.023, 292.843, 378.059)), (' P  75  VAL HG22', ' P  93  MET  HB3', -0.436, (251.968, 228.989, 335.435)), (" 21653    U  H2'", ' 21654    G  C8 ', -0.435, (303.912, 244.954, 358.729)), (' R  17  ILE HD12', ' R  57  LEU HD23', -0.435, (329.318, 296.082, 361.84)), (" 21278    A  H2'", ' 21279    C  C6 ', -0.434, (242.109, 285.872, 341.88)), (' G   5  MET  HB2', ' G 270  LEU HD21', -0.434, (355.921, 287.43, 386.45)), (" 21643    U  H2'", ' 21644    C  C6 ', -0.434, (310.539, 256.344, 339.398)), (" 21448    A  H2'", " 21449    G  O4'", -0.433, (311.002, 280.598, 380.11)), (' R  34  VAL  O  ', ' R  38  ILE HG12', -0.433, (321.949, 296.112, 372.407)), (' M  24  THR  HB ', ' M 115  GLY  HA3', -0.433, (227.808, 283.09, 371.94)), (' F  63  LYS  HD2', ' F  71  ARG HH12', -0.432, (331.868, 252.329, 352.003)), (' 21226    G  N1 ', ' 21639    G  OP2', -0.432, (311.407, 243.043, 331.346)), (' Q  72  VAL HG21', ' Q  84  ILE HD11', -0.431, (317.082, 246.11, 378.337)), (" 21454    A H5''", ' R   3  ARG  HD2', -0.431, (326.097, 280.1, 359.13)), (' G 152  SER  HB2', ' G 168  CYS  SG ', -0.43, (332.131, 296.461, 387.659)), (' D  23  GLU  HG2', ' K  64  TRP  CD1', -0.43, (274.822, 278.553, 357.133)), (" 21464    C  O3'", ' R  60  ARG  NH1', -0.428, (334.188, 291.389, 354.236)), (' G 249  CYS  SG ', ' G 289  LEU HD21', -0.427, (347.753, 290.135, 388.368)), (' P  18  ARG  NH1', ' S  88  LYS  O  ', -0.427, (273.163, 217.635, 352.175)), (" 21686    G  H2'", ' 21687    C  C6 ', -0.426, (312.899, 273.18, 330.449)), (' F 130  ARG  O  ', ' F 132  GLY  N  ', -0.425, (322.486, 254.247, 321.512)), (' C  55  VAL  HB ', ' F  34  SER  HA ', -0.425, (347.557, 252.9, 347.311)), (' G   5  MET  HE2', ' G 312  VAL HG22', -0.424, (355.513, 286.821, 392.388)), (' G  57  ARG  HD3', ' G  95  GLY  HA3', -0.424, (330.869, 267.558, 395.415)), (" 21678    A  O2'", " 21679    A  H5'", -0.424, (328.24, 262.171, 344.051)), (' U  20  ILE HG12', ' U 116  ILE HG13', -0.423, (284.226, 269.828, 396.473)), (' G 101  PHE  CE2', ' G 136  GLY  HA2', -0.423, (319.835, 282.787, 400.062)), (' P  57  LEU HD21', ' P  89  MET  HE2', -0.421, (255.688, 229.425, 349.093)), (' Q 113  ILE HG13', ' Q 120  LEU HD12', -0.42, (332.516, 258.386, 376.767)), (' F 102  LEU HD11', ' Z 100  VAL HG21', -0.417, (334.211, 222.493, 362.371)), (' 21521    C  H6 ', ' 21521    C  OP2', -0.417, (281.439, 239.874, 330.922)), (' F  40  ALA  HB1', ' F  45  TYR  CG ', -0.417, (338.897, 249.97, 360.295)), (' 21601    A  OP1', ' Z  43  LYS  NZ ', -0.416, (311.565, 219.18, 336.602)), (" 21320    G  H2'", " 21321    G  O4'", -0.416, (249.856, 284.085, 336.384)), (' F  42  LYS  HA ', ' F  42  LYS  HD3', -0.416, (344.32, 245.119, 362.187)), (' M  35  ILE  HB ', ' M  61  TYR  CZ ', -0.415, (218.098, 269.812, 355.821)), (" 21308    U  O2'", ' F 133  ALA  HB1', -0.415, (226.303, 250.889, 352.319)), (' P  62  LYS  NZ ', ' P  66  GLU  OE1', -0.414, (239.778, 230.778, 343.569)), (' 21617    G  N1 ', ' 21620    A  OP2', -0.414, (269.012, 237.933, 354.999)), (' M 101  ARG  HG3', ' M 102  LYS  N  ', -0.413, (228.742, 288.19, 346.972)), (' G  89  LEU  HB3', ' G  99  ARG  HB3', -0.413, (322.943, 277.985, 399.351)), (' M  72  HIS  O  ', ' M  74  ILE HG13', -0.411, (215.07, 267.719, 371.942)), (' M  24  THR HG21', ' M 117  GLU  HG3', -0.411, (226.842, 286.422, 372.854)), (' M  21  VAL HG21', ' M 124  ILE HD12', -0.41, (219.192, 283.094, 371.298)), (" 21221    G  O2'", ' 21676    U  O2 ', -0.409, (323.088, 250.583, 345.073)), (" 21272    C  H2'", ' 21273    C  C6 ', -0.409, (250.197, 263.653, 344.534)), (' K  83  LEU  HB2', ' K  85  LEU  HG ', -0.409, (242.441, 284.989, 367.521)), (' F 176  GLU  OE1', ' F 187  SER  HB2', -0.408, (334.195, 234.279, 343.447)), (' G 251  ALA  HB2', ' G 289  LEU HD22', -0.408, (345.017, 289.729, 386.492)), (" 21673    U  H2'", " 21674    G  O4'", -0.408, (316.996, 247.026, 359.604)), (' K  47  LYS  HA ', ' K  47  LYS  HD3', -0.406, (253.391, 274.928, 352.568)), (' 21441    U  O2 ', ' 21443    C  N4 ', -0.406, (308.971, 261.1, 388.707)), (' G  68  ASP  OD1', ' G  69  VAL  N  ', -0.406, (333.114, 284.025, 391.669)), (' D  67  ARG  HD2', ' K  93  THR  O  ', -0.405, (258.678, 292.056, 372.006)), (' K  14  LEU HD21', ' K  34  GLU  HG2', -0.405, (255.42, 276.105, 368.448)), (' F 102  LEU  HA ', ' F 102  LEU HD23', -0.405, (338.443, 223.912, 360.122)), (' D  16  ILE HD11', ' D  36  LEU HD23', -0.404, (280.998, 269.434, 363.358)), (' Q  21  ALA  HB2', ' Q  72  VAL HG13', -0.404, (316.218, 249.738, 377.939)), (' G 101  PHE  CD2', ' G 136  GLY  HA2', -0.403, (319.686, 282.86, 399.824)), (" 21438    A  H2'", ' 21439    A  H8 ', -0.403, (308.073, 260.722, 401.646)), (' D  42  THR HG22', ' D  44  THR  H  ', -0.403, (276.05, 281.906, 384.392)), (" 21221    G  H2'", ' 21222    G  C8 ', -0.402, (320.446, 250.645, 342.722)), (' F  80  GLY  HA2', ' F  83  ASN  OD1', -0.402, (314.867, 244.874, 349.512)), (' Z  79  ILE HG23', ' Z  83  LEU HD23', -0.402, (320.238, 209.001, 351.679)), (' D 113  LEU HD23', ' D 118  ALA  HB2', -0.402, (280.084, 302.449, 344.136)), (" 21644    C  H4'", ' Q 140  ARG  HB2', -0.401, (307.825, 258.713, 343.023)), (' Z  49  LEU  HA ', ' Z  49  LEU HD12', -0.401, (317.102, 205.735, 353.753)), (' F 107  LYS  HD3', ' F 117  LEU HD21', -0.4, (211.382, 252.549, 356.704))]
data['smoc'] = [('2', 1277, u'C', 0.7037689180556513, (248.48100000000002, 283.34200000000004, 345.57)), ('2', 1325, u'G', 0.5969536449706798, (264.628, 269.4, 339.45)), ('2', 1365, u'G', 0.7564140010606925, (332.312, 288.93799999999993, 337.441)), ('2', 1376, u'A', 0.731512098028824, (331.23099999999994, 297.33099999999996, 339.029)), ('2', 1385, u'G', 0.5536963125777676, (308.073, 287.29799999999994, 346.40099999999995)), ('2', 1386, u'A', 0.5577329814994133, (312.816, 284.545, 348.666)), ('2', 1389, u'C', 0.5802709571382335, (307.58599999999996, 283.578, 360.387)), ('2', 1397, u'U', 0.6056495991178095, (320.08299999999997, 264.862, 386.717)), ('2', 1420, u'G', 0.7144288591526717, (327.868, 229.202, 402.42599999999993)), ('2', 1426, u'U', 0.7135728760278586, (312.39, 237.084, 392.16)), ('2', 1439, u'A', 0.6867609895773831, (310.756, 261.08799999999997, 400.70599999999996)), ('2', 1462, u'U', 0.6840524594467455, (339.709, 290.65500000000003, 345.245)), ('2', 1467, u'C', 0.7147421439383129, (333.752, 277.839, 350.4359999999999)), ('2', 1474, u'A', 0.6045854568540676, (322.63, 267.024, 371.765)), ('2', 1475, u'G', 0.5875960141545685, (322.714, 269.40099999999995, 367.267)), ('2', 1532, u'C', 0.5453629298031072, (307.82599999999996, 232.131, 341.258)), ('2', 1542, u'C', 0.671339879556799, (310.76, 232.74599999999998, 373.457)), ('2', 1551, u'U', 0.6500851145610348, (278.219, 254.56, 374.20599999999996)), ('2', 1572, u'C', 0.7128496905693518, (275.256, 232.87800000000001, 376.20099999999996)), ('2', 1579, u'A', 0.6276157106969167, (288.229, 258.097, 378.97099999999995)), ('2', 1588, u'A', 0.5807743025693262, (301.65700000000004, 243.373, 366.749)), ('2', 1589, u'A', 0.5728545474881167, (304.13, 241.27599999999998, 362.559)), ('2', 1614, u'A', 0.6172359553932153, (277.641, 230.996, 361.327)), ('2', 1673, u'U', 0.5686361610404177, (314.25, 246.025, 361.022)), ('2', 2048, u'MG', -0.3461313070644047, (302.399, 246.343, 341.065)), ('2', 2049, u'MG', 0.10905179071030821, (322.92199999999997, 284.912, 340.2)), ('2', 2050, u'MG', 0.01138498131986286, (299.61400000000003, 250.278, 347.76)), ('2', 2051, u'MG', 0.34770007776722117, (273.25, 260.862, 334.222)), ('2', 2052, u'MG', 0.16409497198507186, (274.32, 241.911, 338.065)), ('2', 2053, u'MG', 0.11656969044194081, (263.49699999999996, 249.346, 346.565)), ('2', 2001, u'MG', 0.38332128665643744, (269.753, 250.561, 343.108)), ('2', 2002, u'MG', 0.33763637921580086, (308.878, 281.681, 353.752)), ('2', 2003, u'MG', 0.3578400427186048, (285.65900000000005, 278.83799999999997, 337.367)), ('2', 2005, u'MG', 0.23815379371858533, (307.01099999999997, 230.415, 363.815)), ('2', 2006, u'MG', 0.40455256744205975, (297.009, 251.012, 356.13)), ('2', 2009, u'MG', 0.24565927630886267, (264.32, 251.788, 343.204)), ('2', 2010, u'MG', 0.4762335953040318, (279.681, 246.23899999999998, 347.727)), ('2', 2011, u'MG', 0.5425511322038843, (288.445, 254.221, 346.90099999999995)), ('2', 2013, u'MG', -0.020868307751994507, (308.4309999999999, 252.024, 355.20799999999997)), ('2', 2015, u'MG', 0.42548512456479076, (291.599, 280.04, 340.2)), ('2', 2018, u'MG', 0.3472846452798757, (280.21799999999996, 274.324, 342.224)), ('2', 2019, u'MG', 0.5488335761015667, (320.15400000000005, 254.946, 335.72799999999995)), ('2', 2021, u'MG', 0.5705426117737425, (312.12, 265.566, 384.207)), ('2', 2022, u'MG', 0.2776631198276088, (299.75, 234.756, 351.0)), ('2', 2023, u'MG', 0.35096710044953616, (296.18, 257.345, 340.21)), ('2', 2026, u'MG', 0.5573535448594954, (287.709, 249.48600000000002, 358.58099999999996)), ('2', 2027, u'MG', 0.4110397232834256, (277.548, 226.788, 349.27799999999996)), ('2', 2029, u'MG', 0.47917824941978926, (313.561, 297.003, 332.641)), ('2', 2030, u'MG', 0.4692532440450294, (301.887, 221.38800000000003, 344.133)), ('2', 2032, u'MG', 0.24045681470552946, (291.99299999999994, 224.16899999999998, 352.27299999999997)), ('2', 2033, u'MG', 0.30027928145304345, (305.801, 220.32100000000003, 360.719)), ('2', 2034, u'MG', 0.5537951702117507, (304.967, 270.0, 335.96799999999996)), ('2', 2035, u'MG', 0.295504684111001, (307.79799999999994, 242.92700000000002, 336.828)), ('2', 2036, u'MG', 0.300742245546177, (308.881, 254.681, 358.58299999999997)), ('2', 2037, u'MG', 0.3095659145254728, (279.67400000000004, 262.632, 341.28)), ('2', 2038, u'MG', 0.17546685474429172, (267.907, 241.983, 346.459)), ('2', 2039, u'MG', 0.3268152905682355, (244.32000000000002, 267.066, 346.368)), ('2', 2040, u'MG', 0.4072593618312228, (313.289, 233.111, 358.559)), ('2', 2041, u'MG', 0.2870788401154064, (272.6, 276.48099999999994, 335.96999999999997)), ('2', 2043, u'MG', 0.4830061987030381, (320.76099999999997, 270.0, 329.407)), ('2', 2044, u'MG', 0.05949794092623006, (280.851, 240.586, 342.48199999999997)), ('2', 2045, u'MG', 0.40055325999806585, (254.88000000000002, 249.95200000000003, 344.832)), ('2', 2046, u'MG', 0.3263689276498233, (284.03799999999995, 255.939, 338.041)), ('2', 2047, u'MG', 0.34981846629094254, (292.72299999999996, 253.7, 329.49899999999997)), ('D', 12, u'VAL', 0.5365431118302757, (283.214, 270.302, 368.118)), ('D', 16, u'ILE', 0.5122531098232403, (279.41599999999994, 274.051, 365.003)), ('D', 19, u'ALA', 0.570751007895067, (279.385, 278.648, 362.91599999999994)), ('D', 23, u'GLU', 0.543240255902362, (275.748, 282.199, 359.254)), ('D', 34, u'TYR', 0.5839239066483991, (276.656, 293.024, 360.53)), ('D', 58, u'VAL', 0.6560166659922548, (269.26, 295.66700000000003, 364.73699999999997)), ('D', 61, u'GLU', 0.7380434034610921, (261.53, 300.187, 367.11)), ('D', 68, u'GLU', 0.6761634096706616, (262.404, 288.60900000000004, 367.83599999999996)), ('D', 72, u'VAL', 0.552118141316225, (264.04, 282.265, 367.29099999999994)), ('D', 84, u'VAL', 0.6274302135646713, (269.22799999999995, 283.86, 375.884)), ('D', 126, u'ILE', 0.6049515909431277, (289.98299999999995, 302.161, 354.084)), ('D', 135, u'GLU', 0.5865832282482766, (293.229, 295.306, 347.99099999999993)), ('D', 168, u'VAL', 0.6250326069337082, (295.59299999999996, 290.714, 357.252)), ('D', 197, u'LYS', 0.714208611168018, (292.597, 297.92799999999994, 370.10200000000003)), ('D', 206, u'ASP', 0.6381072765506547, (311.709, 291.171, 360.348)), ('D', 227, u'LYS', 0.6601997876246598, (325.97299999999996, 312.623, 399.319)), ('F', 19, u'LEU', 0.6188409044093541, (335.681, 238.924, 366.05400000000003)), ('F', 32, u'ASP', 0.5861699765892134, (348.517, 246.189, 348.802)), ('F', 35, u'LEU', 0.6061885113270848, (344.28, 249.606, 349.563)), ('F', 45, u'TYR', 0.6627215057985981, (338.892, 248.937, 363.887)), ('F', 70, u'GLU', 0.5236814373268698, (330.46099999999996, 245.076, 358.616)), ('F', 71, u'ARG', 0.566137441112904, (330.648, 246.29399999999998, 355.013)), ('F', 73, u'THR', 0.5257350929205233, (327.366, 242.24099999999999, 356.18)), ('F', 74, u'ASN', 0.5285699511679757, (325.695, 245.39600000000002, 354.85)), ('F', 78, u'MET', 0.539947359322242, (319.869, 241.541, 349.053)), ('F', 108, u'PRO', 0.5782705989284751, (339.23599999999993, 233.88700000000003, 357.697)), ('F', 115, u'ALA', 0.5433069974245206, (339.754, 238.053, 348.282)), ('F', 134, u'VAL', 0.05588700423833587, (328.23299999999995, 252.725, 322.967)), ('F', 148, u'ASN', 0.5683048889861952, (333.23099999999994, 248.63899999999998, 346.75)), ('F', 155, u'CYS', 0.570774180167647, (328.23599999999993, 239.03, 347.4309999999999)), ('F', 176, u'GLU', 0.528395573410129, (333.469, 232.27499999999998, 346.769)), ('F', 180, u'ALA', 0.5658439618951916, (338.81, 234.70899999999997, 345.22999999999996)), ('F', 199, u'VAL', 0.5983509650358383, (337.509, 245.353, 327.807)), ('F', 301, u'MG', 0.4297873904158456, (320.318, 226.816, 348.57)), ('K', 1, u'MET', 0.5809782320748303, (246.635, 272.23799999999994, 351.34000000000003)), ('K', 35, u'LEU', 0.6051361183526694, (253.206, 271.23699999999997, 368.574)), ('K', 37, u'ASP', 0.6110326403429504, (250.147, 266.4, 372.139)), ('K', 47, u'LYS', 0.6130364357431763, (252.687, 274.57099999999997, 354.09499999999997)), ('K', 62, u'PHE', 0.5453606732106041, (266.23699999999997, 280.27099999999996, 355.685)), ('K', 67, u'PHE', 0.5757414890734868, (262.85400000000004, 278.04, 358.258)), ('K', 69, u'TRP', 0.6042266450780165, (259.205, 283.16400000000004, 360.227)), ('K', 75, u'GLY', 0.6000226662878868, (249.60899999999998, 289.361, 359.724)), ('K', 89, u'ILE', 0.695621036484642, (245.76899999999998, 290.64400000000006, 373.183)), ('K', 96, u'ARG', 0.7050629577010866, (258.953, 295.294, 375.98999999999995)), ('M', 15, u'ASN', 0.5606515960550574, (213.031, 288.35900000000004, 365.73099999999994)), ('M', 22, u'LEU', 0.6101064462061773, (224.24899999999997, 282.89799999999997, 366.084)), ('M', 32, u'ALA', 0.5995511024718702, (225.593, 272.472, 363.03299999999996)), ('M', 51, u'VAL', 0.5712995510331463, (216.27399999999997, 277.02599999999995, 363.41999999999996)), ('M', 60, u'MET', 0.6127394104038828, (209.871, 265.89599999999996, 353.36400000000003)), ('M', 81, u'ASP', 0.5590289474546148, (213.728, 282.71099999999996, 353.95099999999996)), ('M', 85, u'LEU', 0.571890732732412, (219.12, 282.49699999999996, 357.47999999999996)), ('M', 96, u'ARG', 0.48449518323803065, (234.45100000000002, 296.46, 350.21299999999997)), ('M', 97, u'GLU', 0.4270870294075669, (231.312, 298.532, 350.803)), ('M', 101, u'ARG', 0.5261918476451293, (227.096, 289.668, 347.469)), ('M', 109, u'VAL', 0.603094299724833, (220.54299999999998, 275.013, 361.748)), ('M', 115, u'GLY', 0.6595413865564168, (227.32100000000003, 281.83599999999996, 373.552)), ('M', 116, u'LYS', 0.581892055702621, (228.094, 283.205, 377.017)), ('M', 117, u'GLU', 0.48112841486745034, (225.60899999999998, 286.064, 376.65500000000003)), ('M', 131, u'LYS', 0.40094161614713464, (205.154, 279.43699999999995, 373.41299999999995)), ('M', 132, u'LYS', 0.4307866875304636, (204.76299999999998, 276.67900000000003, 376.019)), ('P', 33, u'LEU', 0.6703297091691246, (262.094, 221.57, 357.518)), ('P', 42, u'ARG', 0.5904624343152292, (267.34000000000003, 227.899, 357.98999999999995)), ('P', 62, u'LYS', 0.7049388436290519, (244.05100000000002, 228.97299999999998, 345.904)), ('P', 79, u'HIS', 0.5993461235678508, (257.96999999999997, 240.333, 342.07099999999997)), ('P', 81, u'ARG', 0.5872242910087768, (262.66700000000003, 237.069, 343.628)), ('P', 93, u'MET', 0.594694154134584, (253.125, 227.877, 337.72599999999994)), ('P', 95, u'GLY', 0.576136832047706, (255.642, 234.106, 336.695)), ('P', 97, u'TYR', 0.5805520871808549, (259.49899999999997, 239.371, 337.40799999999996)), ('P', 107, u'ILE', 0.590044173180057, (258.177, 224.38200000000003, 340.207)), ('P', 128, u'HIS', 0.6699820693627639, (280.04400000000004, 239.635, 320.82)), ('P', 135, u'ALA', 0.4223860946862517, (289.65500000000003, 249.49200000000002, 320.759)), ('Q', 13, u'PHE', 0.5636262465011093, (319.01, 256.64300000000003, 381.41499999999996)), ('Q', 19, u'ALA', 0.4665639490391443, (313.519, 252.624, 373.587)), ('Q', 59, u'GLY', 0.6701752883581835, (336.93799999999993, 244.622, 383.329)), ('Q', 66, u'VAL', 0.6153441095454116, (328.324, 248.17, 392.46099999999996)), ('Q', 74, u'GLY', 0.4857247863076716, (309.646, 250.89100000000002, 374.264)), ('Q', 86, u'GLN', 0.5780427228669238, (324.388, 253.286, 376.965)), ('Q', 90, u'LYS', 0.5617996951734858, (326.514, 256.323, 381.683)), ('Q', 108, u'ILE', 0.6286526664909796, (336.71099999999996, 255.305, 382.28599999999994)), ('Q', 112, u'LEU', 0.5406285786084396, (334.57, 254.1, 376.64000000000004)), ('Q', 130, u'LYS', 0.4703910369105013, (304.979, 260.32599999999996, 355.605)), ('Q', 142, u'GLN', 0.5434115866139977, (304.242, 255.30100000000002, 340.087)), ('R', 6, u'THR', 0.5669750131604091, (320.107, 288.638, 354.09)), ('R', 28, u'PHE', 0.5672020396697478, (329.7, 286.626, 370.51)), ('R', 35, u'CYS', 0.5669841609142495, (321.98699999999997, 293.632, 371.14300000000003)), ('R', 48, u'ASN', 0.5792396697807404, (321.71, 285.501, 367.14400000000006)), ('R', 52, u'GLY', 0.5864236055418329, (327.16200000000003, 286.79099999999994, 364.90599999999995)), ('R', 64, u'GLY', 0.43545152274545085, (341.513, 297.395, 359.197)), ('R', 69, u'ILE', 0.5137255348906766, (330.358, 301.98999999999995, 357.98799999999994)), ('R', 71, u'ILE', 0.5607008787528385, (332.959, 305.242, 363.357)), ('R', 75, u'GLU', 0.5727827549332773, (337.29299999999995, 309.14900000000006, 361.73499999999996)), ('R', 78, u'ARG', 0.49790409078289866, (342.299, 308.89099999999996, 361.015)), ('S', 18, u'THR', 0.684571108982763, (295.97999999999996, 205.365, 342.49099999999993)), ('S', 22, u'GLY', 0.6494681196168711, (306.93799999999993, 204.787, 348.24)), ('S', 26, u'ILE', 0.6109694779092918, (303.43699999999995, 208.252, 354.608)), ('S', 40, u'TYR', 0.5213582582116063, (292.573, 214.38500000000002, 356.40099999999995)), ('S', 41, u'ALA', 0.5611850374101488, (295.66700000000003, 212.252, 355.79499999999996)), ('S', 47, u'LYS', 0.6319165169130977, (293.80400000000003, 207.433, 364.09299999999996)), ('S', 55, u'ARG', 0.6803284552938934, (308.29099999999994, 206.31, 354.348)), ('S', 88, u'LYS', 0.602753149165346, (274.64400000000006, 216.132, 354.462)), ('S', 110, u'ASP', 0.5876075661169123, (276.15200000000004, 218.032, 341.22499999999997)), ('S', 201, u'MG', 0.12220008836087269, (286.892, 237.256, 331.117)), ('S', 202, u'MG', 0.328475527413036, (294.845, 214.91899999999998, 347.187)), ('T', 11, u'GLN', 0.6026654877267743, (313.079, 229.854, 379.2)), ('T', 12, u'GLN', 0.5936736407766174, (312.91099999999994, 227.288, 376.381)), ('T', 44, u'GLU', 0.6074692220518866, (297.4359999999999, 225.317, 358.26099999999997)), ('T', 60, u'THR', 0.570954726487221, (300.656, 228.817, 380.16700000000003)), ('T', 76, u'THR', 0.5350616068048555, (294.40299999999996, 233.74499999999998, 373.074)), ('T', 85, u'ASN', 0.589087106253399, (295.27599999999995, 234.536, 353.19)), ('T', 86, u'GLY', 0.4914789631252204, (295.897, 233.73, 349.539)), ('T', 87, u'VAL', 0.5300304540646407, (296.448, 236.722, 347.27599999999995)), ('T', 96, u'SER', 0.584134988090616, (291.501, 229.10399999999998, 369.769)), ('T', 121, u'ARG', 0.6222198198000612, (293.673, 233.3, 386.877)), ('T', 131, u'LEU', 0.5411861851390849, (308.118, 226.10899999999998, 388.98699999999997)), ('T', 132, u'ASP', 0.6094486373463192, (311.018, 227.17499999999998, 391.21799999999996)), ('T', 144, u'LYS', 0.5984015232482627, (326.837, 220.06, 385.72499999999997)), ('T', 145, u'HIS', 0.4679151067360581, (327.214, 219.27599999999998, 382.013)), ('T', 201, u'MG', 0.2828994452077599, (302.4, 235.671, 368.802)), ('U', 32, u'LEU', 0.5946430854089918, (294.537, 278.48299999999995, 380.28)), ('U', 39, u'LEU', 0.6630125915281054, (293.284, 280.48499999999996, 390.71999999999997)), ('U', 54, u'VAL', 0.6246818322285882, (298.775, 268.93699999999995, 386.947)), ('U', 75, u'LYS', 0.5121293189505772, (295.84200000000004, 264.79499999999996, 344.684)), ('U', 78, u'ASP', 0.5534559882261187, (294.502, 269.564, 353.762)), ('U', 105, u'SER', 0.5350861967088112, (287.92499999999995, 282.92299999999994, 387.186)), ('U', 111, u'GLU', 0.5920175688168976, (285.744, 275.606, 380.62)), ('Z', 44, u'LEU', 0.6546676330096085, (318.092, 214.90800000000002, 340.49699999999996)), ('Z', 48, u'VAL', 0.6692631569817973, (315.97299999999996, 208.155, 350.36400000000003)), ('Z', 49, u'LEU', 0.6287699645133522, (317.20599999999996, 205.0, 352.15900000000005)), ('Z', 58, u'LEU', 0.6312077062475425, (329.419, 206.946, 354.27099999999996)), ('Z', 62, u'VAL', 0.6114173105264802, (332.818, 210.79, 355.111)), ('Z', 79, u'ILE', 0.6464187690844431, (321.47099999999995, 211.32700000000003, 349.051)), ('Z', 88, u'LEU', 0.6617599472009886, (325.40799999999996, 212.58700000000002, 360.393)), ('Z', 103, u'HIS', 0.6517235826093473, (322.037, 225.817, 364.072)), ('Z', 106, u'GLN', 0.6355409997360252, (323.389, 225.171, 359.319)), ('c', 14, u'VAL', 0.6107818925870406, (347.702, 261.754, 343.83)), ('c', 47, u'LYS', 0.608283305511512, (336.762, 256.49799999999993, 337.88599999999997)), ('c', 54, u'ASP', 0.5834203995256033, (345.356, 258.22099999999995, 347.21799999999996)), ('c', 63, u'ARG', 0.6331129771338753, (349.27299999999997, 257.111, 328.508)), ('c', 68, u'LEU', 0.5716937739476875, (340.683, 270.55400000000003, 330.49799999999993)), ('d', 6, u'LEU', 0.5604090638699677, (253.25, 252.756, 351.135)), ('d', 31, u'ILE', 0.5776997741616571, (282.448, 263.42999999999995, 357.505)), ('d', 39, u'CYS', 0.579036029580134, (280.334, 267.002, 353.612)), ('d', 41, u'GLN', 0.5299562577932951, (283.23599999999993, 270.99299999999994, 350.96799999999996)), ('d', 50, u'ILE', 0.48759717536429925, (284.631, 275.49699999999996, 363.959)), ('d', 52, u'PHE', 0.5321174730754283, (290.393, 273.465, 362.97299999999996)), ('d', 56, u'ASP', 0.346988060403416, (301.178, 271.209, 358.774)), ('f', 79, u'LYS', 0.30799012476631044, (268.309, 265.605, 326.043)), ('f', 83, u'LYS', 0.26410820917222905, (258.29699999999997, 258.134, 324.676)), ('f', 104, u'LYS', 0.6951727081469988, (216.509, 257.665, 353.103)), ('f', 107, u'LYS', 0.6293601250844701, (210.92600000000002, 256.363, 357.40999999999997)), ('f', 109, u'ASP', 0.4533567126351622, (204.27299999999997, 257.234, 359.262)), ('f', 119, u'ARG', 0.6875362192772516, (221.55800000000002, 250.39700000000002, 361.686)), ('g', 11, u'LEU', 0.6137962562014997, (346.068, 273.251, 385.12)), ('g', 19, u'THR', 0.5958845899701554, (336.05, 283.069, 384.64200000000005)), ('g', 41, u'ILE', 0.561833021686234, (336.361, 272.52099999999996, 389.42499999999995)), ('g', 50, u'THR', 0.7388530745599403, (353.83599999999996, 265.688, 385.345)), ('g', 79, u'LEU', 0.633252546684421, (329.191, 280.424, 396.65700000000004)), ('g', 80, u'SER', 0.5865045172997356, (328.577, 280.905, 392.947)), ('g', 88, u'ARG', 0.5876193729235034, (324.14200000000005, 278.539, 394.46299999999997)), ('g', 126, u'ASP', 0.6204285445894534, (319.034, 293.709, 385.78799999999995)), ('g', 130, u'LYS', 0.6786325315262639, (320.524, 292.453, 396.053)), ('g', 132, u'TRP', 0.7174016932780674, (320.64300000000003, 288.185, 401.048)), ('g', 143, u'GLN', 0.6797472234335513, (316.53799999999995, 300.29499999999996, 392.851)), ('g', 154, u'VAL', 0.5957608963079204, (330.405, 294.192, 393.91299999999995)), ('g', 160, u'SER', 0.68131756992599, (337.73499999999996, 297.597, 411.045)), ('g', 161, u'SER', 0.768669370106187, (335.829, 300.81, 410.241)), ('g', 228, u'TYR', 0.6535836468598213, (346.199, 307.79299999999995, 391.40299999999996)), ('g', 234, u'ASP', 0.5191238256109151, (344.063, 297.22299999999996, 376.212)), ('g', 249, u'CYS', 0.6261420174514837, (348.41099999999994, 293.097, 389.802)), ('g', 251, u'ALA', 0.6165578482509835, (345.19, 291.28999999999996, 384.15400000000005)), ('g', 277, u'THR', 0.3706592686726537, (352.559, 280.31, 362.867)), ('g', 287, u'THR', 0.5842837180967031, (340.19599999999997, 286.65200000000004, 382.41099999999994)), ('g', 292, u'SER', 0.604022281919976, (347.329, 282.34200000000004, 397.243))]
data['rota'] = [('D', '  84 ', 'VAL', 0.001600118637542035, (269.2279999999999, 283.85999999999996, 375.884)), ('D', '  93 ', 'THR', 0.2026172074063973, (286.44099999999986, 301.54, 363.694)), ('F', '  32 ', 'ASP', 0.18463593022651217, (348.5169999999999, 246.189, 348.802)), ('K', '  64 ', 'TRP', 0.025401420192361152, (271.5109999999999, 276.12, 356.97)), ('M', '  16 ', 'THR', 0.15815140851868698, (216.283, 290.36, 365.709)), ('P', ' 122 ', 'THR', 0.0631001501931634, (267.9689999999999, 239.187, 334.66)), ('Q', '  72 ', 'VAL', 0.1865289362040341, (313.7689999999999, 248.824, 379.67)), ('Q', ' 100 ', 'VAL', 0.18405842102235542, (335.1249999999999, 258.378, 393.398)), ('S', '  53 ', 'THR', 0.09412281552128633, (308.4449999999999, 209.319, 360.683)), ('S', ' 104 ', 'ASP', 0.25859854109860436, (284.6679999999999, 212.708, 340.051)), ('S', ' 117 ', 'ILE', 0.11905903738257954, (266.7999999999999, 222.453, 336.875)), ('S', ' 131 ', 'VAL', 0.03752423508558422, (280.1749999999999, 231.175, 338.832)), ('T', ' 124 ', 'THR', 0.004962164172931929, (298.9659999999999, 229.174, 393.811)), ('U', '  39 ', 'LEU', 0.2800127252523528, (293.2839999999999, 280.485, 390.72)), ('U', '  54 ', 'VAL', 0.006254039180930704, (298.77499999999986, 268.937, 386.947)), ('U', '  68 ', 'THR', 0.18011086627785095, (289.4389999999999, 270.065, 345.364)), ('Z', '  49 ', 'LEU', 0.07207100656227051, (317.2059999999999, 205.0, 352.159)), ('Z', ' 110 ', 'THR', 0.22511389882833377, (334.5769999999999, 217.796, 361.132)), ('c', '  29 ', 'GLN', 0.035348504218394076, (341.06099999999986, 264.572, 336.262)), ('c', '  32 ', 'VAL', 0.009159775369342045, (349.7499999999999, 261.93, 339.848)), ('f', ' 126 ', 'CYS', 0.012105804489692673, (229.69200000000004, 255.979, 365.809)), ('g', ' 113 ', 'PHE', 0.0297136933567966, (330.7809999999999, 287.076, 400.829)), ('g', ' 132 ', 'TRP', 0.05388453620345003, (320.64299999999986, 288.185, 401.048)), ('g', ' 165 ', 'ILE', 0.06508210475651631, (330.16899999999987, 297.891, 399.688)), ('g', ' 309 ', 'VAL', 0.26357986429386665, (350.48399999999987, 279.485, 388.046))]
data['clusters'] = [('2', '2001', 1, 'smoc Outlier', (269.753, 250.561, 343.108)), ('2', '2009', 1, 'smoc Outlier', (264.32, 251.788, 343.204)), ('2', '2053', 1, 'smoc Outlier', (263.49699999999996, 249.346, 346.565)), ('2', '2013', 2, 'smoc Outlier', (308.4309999999999, 252.024, 355.20799999999997)), ('2', '2036', 2, 'smoc Outlier', (308.881, 254.681, 358.58299999999997)), ('2', '1588', 3, 'smoc Outlier', (301.65700000000004, 243.373, 366.749)), ('2', '1589', 3, 'smoc Outlier', (304.13, 241.27599999999998, 362.559)), ('2', '1474', 4, 'smoc Outlier', (322.63, 267.024, 371.765)), ('2', '1475', 4, 'smoc Outlier', (322.714, 269.40099999999995, 367.267)), ('2', '1624', 5, "Dihedral angle:O4':C1':N1:C2", (277.90799999999996, 240.816, 351.48299999999995)), ('2', '2010', 5, 'smoc Outlier', (279.681, 246.23899999999998, 347.727)), ('2', '2003', 6, 'smoc Outlier', (285.65900000000005, 278.83799999999997, 337.367)), ('2', '2015', 6, 'smoc Outlier', (291.599, 280.04, 340.2)), ('2', '1362', 7, "Dihedral angle:O4':C1':N1:C2", (316.57099999999997, 295.02, 337.23499999999996)), ('2', '2029', 7, 'smoc Outlier', (313.561, 297.003, 332.641)), ('2', '1385', 8, 'smoc Outlier', (308.073, 287.29799999999994, 346.40099999999995)), ('2', '1386', 8, 'smoc Outlier', (312.816, 284.545, 348.666)), ('D', '176', 1, 'side-chain clash', (258.678, 292.056, 372.006)), ('D', '68', 1, 'smoc Outlier', (262.404, 288.60900000000004, 367.83599999999996)), ('D', '70', 1, 'side-chain clash', (268.045, 287.616, 371.56)), ('D', '72', 1, 'smoc Outlier', (264.04, 282.265, 367.29099999999994)), ('D', '74', 1, 'side-chain clash', (266.014, 282.135, 373.951)), ('D', '79', 1, 'side-chain clash', (269.987, 280.807, 373.904)), ('D', '84', 1, 'Rotamer\nside-chain clash\nsmoc Outlier', (266.014, 282.135, 373.951)), ('D', '86', 1, 'side-chain clash', (268.045, 287.616, 371.56)), ('D', '113', 2, 'side-chain clash', (280.084, 302.449, 344.136)), ('D', '116', 2, 'Dihedral angle:CD:NE:CZ:NH1', (285.132, 301.603, 339.53599999999994)), ('D', '117', 2, 'Dihedral angle:CD:NE:CZ:NH1', (283.724, 304.539, 341.515)), ('D', '118', 2, 'side-chain clash', (280.084, 302.449, 344.136)), ('D', '42', 3, 'side-chain clash', (276.05, 281.906, 384.392)), ('D', '44', 3, 'side-chain clash', (276.05, 281.906, 384.392)), ('D', '45', 3, 'side-chain clash', (271.844, 283.88, 383.985)), ('D', '142', 4, 'side-chain clash', (331.803, 310.482, 398.272)), ('D', '148', 4, 'side-chain clash', (331.803, 310.482, 398.272)), ('D', '227', 4, 'smoc Outlier', (325.97299999999996, 312.623, 399.319)), ('D', '163', 5, 'side-chain clash', (299.921, 289.791, 359.624)), ('D', '167', 5, 'side-chain clash', (299.921, 289.791, 359.624)), ('D', '168', 5, 'smoc Outlier', (295.59299999999996, 290.714, 357.252)), ('D', '12', 6, 'smoc Outlier', (283.214, 270.302, 368.118)), ('D', '16', 6, 'side-chain clash\nsmoc Outlier', (280.998, 269.434, 363.358)), ('D', '36', 6, 'side-chain clash', (280.998, 269.434, 363.358)), ('D', '197', 7, 'smoc Outlier', (292.597, 297.92799999999994, 370.10200000000003)), ('D', '198', 7, 'cablam Outlier', (292.9, 298.5, 366.3)), ('D', '54', 8, 'side-chain clash', (297.238, 274.28, 352.98)), ('D', '93', 8, 'Rotamer\nside-chain clash', (291.811, 272.833, 351.473)), ('D', '160', 9, 'cablam Outlier', (303.1, 284.5, 352.9)), ('D', '161', 9, 'side-chain clash', (305.258, 283.936, 356.161)), ('D', '19', 10, 'side-chain clash\nsmoc Outlier', (277.101, 259.183, 358.663)), ('D', '32', 10, 'side-chain clash', (277.101, 259.183, 358.663)), ('F', '130', 1, 'side-chain clash\nbackbone clash\nDihedral angle:CA:C', (324.23499999999996, 257.251, 322.14400000000006)), ('F', '131', 1, 'Dihedral angle:N:CA\ncablam Outlier', (321.399, 255.135, 323.519)), ('F', '132', 1, 'backbone clash', (322.486, 254.247, 321.512)), ('F', '134', 1, 'smoc Outlier', (328.23299999999995, 252.725, 322.967)), ('F', '135', 1, 'Dihedral angle:CD:NE:CZ:NH1', (331.917, 253.64499999999998, 322.70599999999996)), ('F', '70', 2, 'Dihedral angle:CB:CG:CD:OE1\nsmoc Outlier', (330.46099999999996, 245.076, 358.616)), ('F', '73', 2, 'side-chain clash\nsmoc Outlier', (325.013, 241.383, 355.567)), ('F', '74', 2, 'smoc Outlier', (325.695, 245.39600000000002, 354.85)), ('F', '76', 2, 'side-chain clash', (324.912, 239.376, 354.824)), ('F', '89', 2, 'side-chain clash', (325.013, 241.383, 355.567)), ('F', '107', 3, 'side-chain clash', (211.382, 252.549, 356.704)), ('F', '115', 3, 'side-chain clash\nsmoc Outlier', (210.996, 253.503, 360.131)), ('F', '117', 3, 'side-chain clash', (211.382, 252.549, 356.704)), ('F', '78', 4, 'smoc Outlier', (319.869, 241.541, 349.053)), ('F', '80', 4, 'side-chain clash', (314.867, 244.874, 349.512)), ('F', '83', 4, 'side-chain clash', (314.867, 244.874, 349.512)), ('F', '176', 5, 'side-chain clash\nDihedral angle:CB:CG:CD:OE1\nsmoc Outlier', (333.469, 232.27499999999998, 346.769)), ('F', '180', 5, 'smoc Outlier', (338.81, 234.70899999999997, 345.22999999999996)), ('F', '187', 5, 'side-chain clash', (334.195, 234.279, 343.447)), ('F', '32', 6, 'Rotamer\nside-chain clash\nsmoc Outlier', (348.028, 248.495, 351.158)), ('F', '35', 6, 'smoc Outlier', (344.28, 249.606, 349.563)), ('F', '36', 6, 'side-chain clash', (348.028, 248.495, 351.158)), ('F', '63', 7, 'side-chain clash', (331.868, 252.329, 352.003)), ('F', '71', 7, 'side-chain clash\nsmoc Outlier', (331.868, 252.329, 352.003)), ('F', '120', 8, 'side-chain clash', (341.18, 244.344, 340.635)), ('F', '193', 8, 'side-chain clash', (341.18, 244.344, 340.635)), ('F', '40', 9, 'side-chain clash', (338.897, 249.97, 360.295)), ('F', '45', 9, 'side-chain clash\nsmoc Outlier', (338.897, 249.97, 360.295)), ('F', '167', 10, 'cablam Outlier', (323.6, 224.3, 349.5)), ('F', '301', 10, 'smoc Outlier', (320.318, 226.816, 348.57)), ('F', '121', 11, 'side-chain clash', (229.049, 253.363, 364.099)), ('F', '126', 11, 'side-chain clash', (229.049, 253.363, 364.099)), ('F', '102', 12, 'side-chain clash', (338.443, 223.912, 360.122)), ('F', '34', 12, 'side-chain clash', (334.211, 222.493, 362.371)), ('K', '62', 1, 'smoc Outlier', (266.23699999999997, 280.27099999999996, 355.685)), ('K', '63', 1, 'side-chain clash\nDihedral angle:CA:C', (269.417, 279.245, 357.48299999999995)), ('K', '64', 1, 'Rotamer\nside-chain clash\nDihedral angle:CA:C\nDihedral angle:N:CA\ncablam Outlier', (271.51099999999997, 276.12, 356.96999999999997)), ('K', '65', 1, 'Dihedral angle:CD:NE:CZ:NH1\nDihedral angle:N:CA\nDihedral angle:CA:C', (268.46999999999997, 273.813, 357.127)), ('K', '66', 1, 'Dihedral angle:N:CA', (265.794, 275.757, 358.969)), ('K', '67', 1, 'smoc Outlier', (262.85400000000004, 278.04, 358.258)), ('K', '68', 1, 'side-chain clash', (267.799, 279.528, 359.589)), ('K', '69', 1, 'smoc Outlier', (259.205, 283.16400000000004, 360.227)), ('K', '14', 2, 'side-chain clash', (255.42, 276.105, 368.448)), ('K', '34', 2, 'side-chain clash', (255.42, 276.105, 368.448)), ('K', '35', 2, 'smoc Outlier', (253.206, 271.23699999999997, 368.574)), ('K', '37', 2, 'smoc Outlier', (250.147, 266.4, 372.139)), ('K', '83', 3, 'side-chain clash', (242.441, 284.989, 367.521)), ('K', '85', 3, 'side-chain clash', (242.441, 284.989, 367.521)), ('K', '80', 4, 'backbone clash', (246.113, 292.021, 369.841)), ('K', '89', 4, 'backbone clash\nsmoc Outlier', (246.113, 292.021, 369.841)), ('K', '1', 5, 'smoc Outlier', (246.635, 272.23799999999994, 351.34000000000003)), ('K', '8', 5, 'side-chain clash', (243.168, 274.247, 355.324)), ('M', '109', 1, 'smoc Outlier', (220.54299999999998, 275.013, 361.748)), ('M', '32', 1, 'smoc Outlier', (225.593, 272.472, 363.03299999999996)), ('M', '51', 1, 'smoc Outlier', (216.27399999999997, 277.02599999999995, 363.41999999999996)), ('M', '52', 1, 'side-chain clash', (209.59, 275.917, 359.063)), ('M', '76', 1, 'side-chain clash', (212.729, 274.194, 362.022)), ('M', '78', 1, 'side-chain clash', (209.59, 275.917, 359.063)), ('M', '115', 2, 'side-chain clash\nsmoc Outlier', (227.808, 283.09, 371.94)), ('M', '116', 2, 'smoc Outlier', (228.094, 283.205, 377.017)), ('M', '117', 2, 'side-chain clash\nsmoc Outlier', (226.842, 286.422, 372.854)), ('M', '22', 2, 'smoc Outlier', (224.24899999999997, 282.89799999999997, 366.084)), ('M', '24', 2, 'side-chain clash', (226.842, 286.422, 372.854)), ('M', '81', 3, 'side-chain clash\nsmoc Outlier', (214.994, 285.561, 353.344)), ('M', '84', 3, 'side-chain clash', (214.994, 285.561, 353.344)), ('M', '85', 3, 'smoc Outlier', (219.12, 282.49699999999996, 357.47999999999996)), ('M', '131', 4, 'smoc Outlier', (205.154, 279.43699999999995, 373.41299999999995)), ('M', '132', 4, 'smoc Outlier', (204.76299999999998, 276.67900000000003, 376.019)), ('M', '35', 5, 'side-chain clash', (218.098, 269.812, 355.821)), ('M', '61', 5, 'side-chain clash', (218.098, 269.812, 355.821)), ('M', '124', 6, 'side-chain clash', (219.192, 283.094, 371.298)), ('M', '21', 6, 'side-chain clash', (219.192, 283.094, 371.298)), ('M', '96', 7, 'smoc Outlier', (234.45100000000002, 296.46, 350.21299999999997)), ('M', '97', 7, 'smoc Outlier', (231.312, 298.532, 350.803)), ('M', '72', 8, 'side-chain clash', (215.07, 267.719, 371.942)), ('M', '74', 8, 'side-chain clash', (215.07, 267.719, 371.942)), ('M', '101', 9, 'backbone clash\nsmoc Outlier', (228.742, 288.19, 346.972)), ('M', '102', 9, 'backbone clash', (228.742, 288.19, 346.972)), ('M', '15', 10, 'smoc Outlier', (213.031, 288.35900000000004, 365.73099999999994)), ('M', '16', 10, 'Rotamer', (216.283, 290.36, 365.709)), ('P', '79', 1, 'smoc Outlier', (257.96999999999997, 240.333, 342.07099999999997)), ('P', '81', 1, 'smoc Outlier', (262.66700000000003, 237.069, 343.628)), ('P', '95', 1, 'smoc Outlier', (255.642, 234.106, 336.695)), ('P', '97', 1, 'smoc Outlier', (259.49899999999997, 239.371, 337.40799999999996)), ('P', '62', 2, 'side-chain clash\nsmoc Outlier', (239.778, 230.778, 343.569)), ('P', '66', 2, 'side-chain clash', (239.778, 230.778, 343.569)), ('P', '130', 3, 'side-chain clash', (285.781, 242.996, 315.69)), ('P', '131', 3, 'side-chain clash', (285.781, 242.996, 315.69)), ('P', '57', 4, 'side-chain clash', (255.688, 229.425, 349.093)), ('P', '89', 4, 'side-chain clash', (255.688, 229.425, 349.093)), ('P', '41', 5, 'side-chain clash', (265.424, 229.595, 351.751)), ('P', '84', 5, 'side-chain clash', (265.424, 229.595, 351.751)), ('P', '75', 6, 'side-chain clash', (273.163, 217.635, 352.175)), ('P', '93', 6, 'side-chain clash\nsmoc Outlier', (273.163, 217.635, 352.175)), ('Q', '16', 1, 'side-chain clash\nDihedral angle:CA:C', (317.464, 254.607, 371.239)), ('Q', '17', 1, 'side-chain clash\nDihedral angle:N:CA\ncablam Outlier', (314.809, 255.463, 368.615)), ('Q', '18', 1, 'side-chain clash\ncablam Outlier', (307.421, 254.506, 370.797)), ('Q', '19', 1, 'smoc Outlier', (313.519, 252.624, 373.587)), ('Q', '21', 1, 'side-chain clash', (316.218, 249.738, 377.939)), ('Q', '72', 1, 'Rotamer\nside-chain clash', (316.218, 249.738, 377.939)), ('Q', '74', 1, 'smoc Outlier', (309.646, 250.89100000000002, 374.264)), ('Q', '84', 1, 'side-chain clash', (317.082, 246.11, 378.337)), ('Q', '108', 2, 'smoc Outlier', (336.71099999999996, 255.305, 382.28599999999994)), ('Q', '110', 2, 'side-chain clash', (338.584, 256.65, 375.121)), ('Q', '112', 2, 'smoc Outlier', (334.57, 254.1, 376.64000000000004)), ('Q', '113', 2, 'side-chain clash', (332.516, 258.386, 376.767)), ('Q', '114', 2, 'side-chain clash', (338.584, 256.65, 375.121)), ('Q', '120', 2, 'side-chain clash', (332.516, 258.386, 376.767)), ('Q', '51', 3, 'side-chain clash', (322.462, 244.688, 373.97)), ('Q', '81', 3, 'side-chain clash', (322.573, 248.041, 374.232)), ('Q', '85', 3, 'side-chain clash', (322.573, 248.041, 374.232)), ('Q', '86', 3, 'smoc Outlier', (324.388, 253.286, 376.965)), ('Q', '90', 3, 'smoc Outlier', (326.514, 256.323, 381.683)), ('Q', '27', 4, 'cablam Outlier', (326.9, 250.1, 396.3)), ('Q', '29', 4, 'cablam Outlier', (329.1, 243.3, 395.1)), ('Q', '66', 4, 'smoc Outlier', (328.324, 248.17, 392.46099999999996)), ('Q', '100', 5, 'Rotamer\nside-chain clash', (337.55, 258.47, 392.642)), ('Q', '101', 5, 'side-chain clash', (337.55, 258.47, 392.642)), ('Q', '102', 5, 'Dihedral angle:CB:CG:CD:OE1', (337.64700000000005, 262.70599999999996, 388.97299999999996)), ('Q', '128', 6, 'Dihedral angle:CB:CG:CD:OE1', (310.53099999999995, 260.84000000000003, 359.22299999999996)), ('Q', '130', 6, 'smoc Outlier', (304.979, 260.32599999999996, 355.605)), ('Q', '140', 7, 'side-chain clash', (307.825, 258.713, 343.023)), ('Q', '142', 7, 'smoc Outlier', (304.242, 255.30100000000002, 340.087)), ('R', '69', 1, 'cablam Outlier\nsmoc Outlier', (330.4, 302.0, 358.0)), ('R', '71', 1, 'smoc Outlier', (332.959, 305.242, 363.357)), ('R', '75', 1, 'smoc Outlier', (337.29299999999995, 309.14900000000006, 361.73499999999996)), ('R', '78', 1, 'smoc Outlier', (342.299, 308.89099999999996, 361.015)), ('R', '34', 2, 'side-chain clash', (321.949, 296.112, 372.407)), ('R', '35', 2, 'smoc Outlier', (321.98699999999997, 293.632, 371.14300000000003)), ('R', '38', 2, 'side-chain clash', (321.949, 296.112, 372.407)), ('R', '28', 3, 'smoc Outlier', (329.7, 286.626, 370.51)), ('R', '48', 3, 'smoc Outlier', (321.71, 285.501, 367.14400000000006)), ('R', '52', 3, 'smoc Outlier', (327.16200000000003, 286.79099999999994, 364.90599999999995)), ('R', '17', 4, 'side-chain clash', (329.318, 296.082, 361.84)), ('R', '57', 4, 'side-chain clash', (329.318, 296.082, 361.84)), ('S', '100', 1, 'side-chain clash\nDihedral angle:N:CA\ncablam Outlier', (289.107, 209.395, 343.746)), ('S', '104', 1, 'Rotamer', (284.6679999999999, 212.708, 340.051)), ('S', '34', 1, 'side-chain clash', (289.958, 210.875, 343.467)), ('S', '99', 1, 'Dihedral angle:CA:C', (287.345, 209.61499999999998, 347.11400000000003)), ('S', '136', 2, 'side-chain clash', (282.173, 238.94, 331.855)), ('S', '139', 2, 'cablam CA Geom Outlier', (290.4, 238.8, 334.0)), ('S', '201', 2, 'smoc Outlier', (286.892, 237.256, 331.117)), ('S', '22', 3, 'smoc Outlier', (306.93799999999993, 204.787, 348.24)), ('S', '26', 3, 'smoc Outlier', (303.43699999999995, 208.252, 354.608)), ('S', '55', 3, 'smoc Outlier', (308.29099999999994, 206.31, 354.348)), ('S', '40', 4, 'smoc Outlier', (292.573, 214.38500000000002, 356.40099999999995)), ('S', '41', 4, 'smoc Outlier', (295.66700000000003, 212.252, 355.79499999999996)), ('S', '125', 5, 'side-chain clash', (316.369, 202.374, 351.71)), ('S', '131', 5, 'Rotamer\nside-chain clash', (316.369, 202.374, 351.71)), ('T', '85', 1, 'smoc Outlier', (295.27599999999995, 234.536, 353.19)), ('T', '86', 1, 'smoc Outlier', (295.897, 233.73, 349.539)), ('T', '87', 1, 'smoc Outlier', (296.448, 236.722, 347.27599999999995)), ('T', '76', 2, 'side-chain clash\nsmoc Outlier', (293.095, 234.681, 369.698)), ('T', '94', 2, 'side-chain clash', (293.095, 234.681, 369.698)), ('T', '96', 2, 'smoc Outlier', (291.501, 229.10399999999998, 369.769)), ('T', '11', 3, 'smoc Outlier', (313.079, 229.854, 379.2)), ('T', '12', 3, 'smoc Outlier', (312.91099999999994, 227.288, 376.381)), ('T', '144', 4, 'smoc Outlier', (326.837, 220.06, 385.72499999999997)), ('T', '145', 4, 'smoc Outlier', (327.214, 219.27599999999998, 382.013)), ('T', '131', 5, 'smoc Outlier', (308.118, 226.10899999999998, 388.98699999999997)), ('T', '132', 5, 'side-chain clash\nsmoc Outlier', (309.76, 229.175, 394.465)), ('T', '124', 6, 'Rotamer\nside-chain clash', (298.605, 228.772, 396.328)), ('T', '125', 6, 'side-chain clash', (298.605, 228.772, 396.328)), ('U', '116', 1, 'side-chain clash', (284.226, 269.828, 396.473)), ('U', '19', 1, 'Dihedral angle:CD:NE:CZ:NH1', (288.49699999999996, 267.58799999999997, 398.717)), ('U', '20', 1, 'side-chain clash', (284.226, 269.828, 396.473)), ('U', '98', 1, 'side-chain clash', (286.181, 273.471, 397.15)), ('U', '105', 2, 'smoc Outlier', (287.92499999999995, 282.92299999999994, 387.186)), ('U', '39', 2, 'Rotamer\nsmoc Outlier', (293.2839999999999, 280.485, 390.72)), ('U', '32', 3, 'smoc Outlier', (294.537, 278.48299999999995, 380.28)), ('U', '33', 3, 'Dihedral angle:CB:CG:CD:OE1', (297.806, 279.15900000000005, 382.10200000000003)), ('U', '54', 4, 'Rotamer\nside-chain clash\nsmoc Outlier', (295.451, 267.93, 387.457)), ('U', '88', 4, 'side-chain clash', (295.451, 267.93, 387.457)), ('U', '51', 5, 'side-chain clash', (295.57, 268.894, 394.512)), ('U', '90', 5, 'side-chain clash', (295.57, 268.894, 394.512)), ('Z', '100', 1, 'side-chain clash', (334.211, 222.493, 362.371)), ('Z', '109', 1, 'side-chain clash', (330.166, 216.998, 359.342)), ('Z', '110', 1, 'Rotamer', (334.5769999999999, 217.796, 361.132)), ('Z', '58', 1, 'side-chain clash\nsmoc Outlier', (329.056, 210.038, 354.671)), ('Z', '62', 1, 'side-chain clash\nsmoc Outlier', (329.056, 210.038, 354.671)), ('Z', '68', 1, 'side-chain clash', (330.166, 216.998, 359.342)), ('Z', '73', 1, 'side-chain clash', (327.268, 213.632, 356.171)), ('Z', '88', 1, 'side-chain clash\nsmoc Outlier', (327.268, 213.632, 356.171)), ('Z', '47', 2, 'side-chain clash', (321.163, 208.234, 348.486)), ('Z', '48', 2, 'smoc Outlier', (315.97299999999996, 208.155, 350.36400000000003)), ('Z', '49', 2, 'Rotamer\nside-chain clash\nsmoc Outlier', (317.102, 205.735, 353.753)), ('Z', '54', 2, 'side-chain clash', (323.628, 206.966, 349.266)), ('Z', '79', 2, 'side-chain clash\nsmoc Outlier', (320.238, 209.001, 351.679)), ('Z', '83', 2, 'side-chain clash', (320.238, 209.001, 351.679)), ('Z', '103', 3, 'side-chain clash\nsmoc Outlier', (321.11, 230.449, 362.259)), ('Z', '106', 3, 'smoc Outlier', (323.389, 225.171, 359.319)), ('Z', '43', 4, 'side-chain clash', (311.565, 219.18, 336.602)), ('Z', '44', 4, 'smoc Outlier', (318.092, 214.90800000000002, 340.49699999999996)), ('c', '14', 1, 'smoc Outlier', (347.702, 261.754, 343.83)), ('c', '32', 1, 'Rotamer', (349.7499999999999, 261.93, 339.848)), ('c', '33', 1, 'Dihedral angle:CB:CG:CD:OE1', (353.444, 261.46799999999996, 340.687)), ('c', '54', 1, 'smoc Outlier', (345.356, 258.22099999999995, 347.21799999999996)), ('c', '29', 2, 'Rotamer', (341.06099999999986, 264.572, 336.262)), ('c', '47', 2, 'smoc Outlier', (336.762, 256.49799999999993, 337.88599999999997)), ('c', '63', 2, 'smoc Outlier', (349.27299999999997, 257.111, 328.508)), ('c', '68', 2, 'smoc Outlier', (340.683, 270.55400000000003, 330.49799999999993)), ('d', '31', 1, 'smoc Outlier', (282.448, 263.42999999999995, 357.505)), ('d', '36', 1, 'cablam Outlier', (280.6, 266.7, 362.5)), ('d', '39', 1, 'smoc Outlier', (280.334, 267.002, 353.612)), ('d', '41', 1, 'smoc Outlier', (283.23599999999993, 270.99299999999994, 350.96799999999996)), ('d', '50', 2, 'smoc Outlier', (284.631, 275.49699999999996, 363.959)), ('d', '52', 2, 'smoc Outlier', (290.393, 273.465, 362.97299999999996)), ('f', '82', 1, 'cablam Outlier', (259.5, 261.7, 325.4)), ('f', '83', 1, 'cablam Outlier\nsmoc Outlier', (258.3, 258.1, 324.7)), ('f', '85', 1, 'cablam CA Geom Outlier', (252.7, 255.7, 325.0)), ('f', '86', 1, 'cablam CA Geom Outlier', (251.0, 253.6, 327.7)), ('f', '107', 2, 'smoc Outlier', (210.92600000000002, 256.363, 357.40999999999997)), ('f', '109', 2, 'smoc Outlier', (204.27299999999997, 257.234, 359.262)), ('f', '126', 3, 'Rotamer', (229.69200000000004, 255.979, 365.809)), ('f', '127', 3, 'cablam Outlier', (226.8, 255.5, 368.1)), ('g', '79', 1, 'smoc Outlier', (329.191, 280.424, 396.65700000000004)), ('g', '80', 1, 'smoc Outlier', (328.577, 280.905, 392.947)), ('g', '88', 1, 'smoc Outlier', (324.14200000000005, 278.539, 394.46299999999997)), ('g', '143', 2, 'smoc Outlier', (316.53799999999995, 300.29499999999996, 392.851)), ('g', '144', 2, 'cablam CA Geom Outlier', (317.7, 303.7, 394.1)), ('g', '145', 2, 'cablam Outlier', (319.5, 304.5, 390.8)), ('g', '154', 3, 'smoc Outlier', (330.405, 294.192, 393.91299999999995)), ('g', '165', 3, 'Rotamer', (330.16899999999987, 297.891, 399.688)), ('g', '190', 4, 'cablam Outlier', (336.7, 309.3, 386.3)), ('g', '192', 4, 'cablam Outlier', (335.9, 306.8, 380.0)), ('g', '130', 5, 'smoc Outlier', (320.524, 292.453, 396.053)), ('g', '132', 5, 'Rotamer\nsmoc Outlier', (320.64299999999986, 288.185, 401.048)), ('g', '249', 6, 'smoc Outlier', (348.41099999999994, 293.097, 389.802)), ('g', '251', 6, 'smoc Outlier', (345.19, 291.28999999999996, 384.15400000000005)), ('g', '160', 7, 'smoc Outlier', (337.73499999999996, 297.597, 411.045)), ('g', '161', 7, 'cablam CA Geom Outlier\nsmoc Outlier', (335.8, 300.8, 410.2)), ('g', '180', 8, 'cablam Outlier', (323.4, 298.1, 407.4)), ('g', '181', 8, 'cablam Outlier', (321.7, 301.2, 406.2)), ('g', '19', 9, 'smoc Outlier', (336.05, 283.069, 384.64200000000005)), ('g', '287', 9, 'smoc Outlier', (340.19599999999997, 286.65200000000004, 382.41099999999994)), ('g', '11', 10, 'smoc Outlier', (346.068, 273.251, 385.12)), ('g', '13', 10, 'cablam Outlier', (340.4, 270.5, 383.4))]
data['omega'] = [('F', '  79 ', 'HIS', None, (318.2769999999999, 240.07, 347.931)), ('Q', '  44 ', 'PRO', None, (317.8319999999999, 239.318, 371.44)), ('U', '  53 ', 'PRO', None, (299.0349999999999, 273.055, 389.434))]
data['cablam'] = [('D', '61', 'GLU', 'check CA trace,carbonyls, peptide', 'helix-3\nH-GGG', (261.5, 300.2, 367.1)), ('D', '143', 'ARG', 'check CA trace,carbonyls, peptide', 'bend\n-SSSS', (280.9, 294.4, 330.8)), ('D', '160', 'SER', 'check CA trace,carbonyls, peptide', 'bend\n--SSS', (303.1, 284.5, 352.9)), ('D', '198', 'ILE', 'check CA trace,carbonyls, peptide', 'bend\nSSSS-', (292.9, 298.5, 366.3)), ('F', '42', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\n--SGG', (343.4, 246.6, 362.2)), ('F', '52', 'SER', 'check CA trace,carbonyls, peptide', ' \nS----', (327.5, 249.0, 365.1)), ('F', '131', 'ALA', 'check CA trace,carbonyls, peptide', 'bend\nE-SS-', (321.4, 255.1, 323.5)), ('F', '167', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nSSS-H', (323.6, 224.3, 349.5)), ('K', '64', 'TRP', 'check CA trace,carbonyls, peptide', 'turn\nEETTE', (271.5, 276.1, 357.0)), ('M', '91', 'LEU', ' beta sheet', ' \nHT-EE', (228.2, 281.5, 355.1)), ('Q', '17', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nE-SS-', (314.8, 255.5, 368.6)), ('Q', '18', 'THR', 'check CA trace,carbonyls, peptide', 'bend\n-SS-E', (311.9, 255.0, 371.1)), ('Q', '27', 'ARG', 'check CA trace,carbonyls, peptide', 'strand\nEEESS', (326.9, 250.1, 396.3)), ('Q', '29', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\nESSS-', (329.1, 243.3, 395.1)), ('R', '69', 'ILE', 'check CA trace,carbonyls, peptide', ' \nSS---', (330.4, 302.0, 358.0)), ('S', '100', 'ALA', 'check CA trace,carbonyls, peptide', 'helix\n--HHH', (289.1, 209.4, 343.7)), ('S', '139', 'THR', 'check CA trace', 'bend\nSSS--', (290.4, 238.8, 334.0)), ('T', '119', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nSSSSE', (289.5, 238.5, 387.3)), ('d', '36', 'LEU', 'check CA trace,carbonyls, peptide', ' \nGG--E', (280.6, 266.7, 362.5)), ('d', '14', 'PHE', 'check CA trace', 'bend\n-SSSG', (271.3, 252.6, 358.1)), ('f', '82', 'LYS', ' beta sheet', ' \n-----', (259.5, 261.7, 325.4)), ('f', '83', 'LYS', ' beta sheet', ' \n-----', (258.3, 258.1, 324.7)), ('f', '127', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nSSSSS', (226.8, 255.5, 368.1)), ('f', '85', 'CYS', 'check CA trace', ' \n---SS', (252.7, 255.7, 325.0)), ('f', '86', 'THR', 'check CA trace', 'bend\n--SSS', (251.0, 253.6, 327.7)), ('g', '13', 'GLY', 'check CA trace,carbonyls, peptide', ' \nE---S', (340.4, 270.5, 383.4)), ('g', '61', 'GLY', 'check CA trace,carbonyls, peptide', ' \nE---S', (324.1, 272.6, 389.0)), ('g', '64', 'HIS', 'check CA trace,carbonyls, peptide', 'bend\n-SS-E', (324.2, 278.6, 382.1)), ('g', '145', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\n-SS--', (319.5, 304.5, 390.8)), ('g', '180', 'ALA', 'check CA trace,carbonyls, peptide', 'turn\nETTTT', (323.4, 298.1, 407.4)), ('g', '181', 'ASN', 'check CA trace,carbonyls, peptide', 'turn\nTTTTE', (321.7, 301.2, 406.2)), ('g', '190', 'GLY', 'check CA trace,carbonyls, peptide', ' \nEE--S', (336.7, 309.3, 386.3)), ('g', '192', 'THR', 'check CA trace,carbonyls, peptide', 'bend\n--SS-', (335.9, 306.8, 380.0)), ('g', '234', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\n-SS--', (344.1, 297.2, 376.2)), ('g', '144', 'ASP', 'check CA trace', 'bend\nE-SS-', (317.7, 303.7, 394.1)), ('g', '149', 'GLU', 'check CA trace', 'bend\n-SS-E', (323.7, 300.1, 383.1)), ('g', '161', 'SER', 'check CA trace', 'bend\nSSSS-', (335.8, 300.8, 410.2))]
handle_read_draw_probe_dots_unformatted("/home/ccpem/agnel/gisaid/countries_seq/structure_data/emdb/EMD-11322/6zol/Model_validation_1/validation_cootdata/molprobity_probe6zol_0.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
