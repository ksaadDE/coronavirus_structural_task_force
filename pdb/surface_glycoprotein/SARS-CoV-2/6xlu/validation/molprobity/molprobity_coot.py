# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 797 ', 'PHE', 0.015695883200377795, (164.72799999999995, 203.249, 138.069)), ('A', ' 839 ', 'ASP', 0.03848486605417911, (161.146, 212.225, 188.138)), ('A', ' 840 ', 'CYS', 0.012852855886279217, (161.754, 209.314, 190.637)), ('C', ' 840 ', 'CYS', 0.024562411950691972, (219.067, 197.873, 190.484))]
data['omega'] = [('B', ' 795 ', 'LYS', None, (181.41499999999994, 154.12500000000006, 140.63699999999997)), ('C', ' 626 ', 'ALA', None, (173.315, 223.925, 197.4)), ('C', ' 837 ', 'TYR', None, (217.551, 194.77300000000005, 184.37))]
data['rota'] = [('A', ' 525 ', 'CYS', 0.07073101387932948, (184.597, 156.627, 224.432)), ('A', ' 738 ', 'CYS', 0.24914780100379819, (181.096, 202.588, 193.571)), ('A', ' 904 ', 'TYR', 0.0032801123811877836, (176.45399999999995, 194.58500000000006, 134.45)), ('B', ' 614 ', 'ASP', 0.01149212304655482, (218.01299999999995, 187.725, 183.18)), ('B', ' 738 ', 'CYS', 0.25975947511445313, (176.458, 174.08100000000005, 193.554)), ('B', ' 904 ', 'TYR', 0.05923269180121885, (185.754, 174.052, 134.421)), ('B', ' 955 ', 'ASN', 0.0038757344556262716, (188.863, 170.623, 180.084)), ('C', ' 738 ', 'CYS', 0.23781745566014822, (203.472, 184.33600000000007, 193.526)), ('C', ' 904 ', 'TYR', 0.02410230505495069, (198.842, 192.397, 134.48499999999999)), ('C', ' 955 ', 'ASN', 0.0039944305051740955, (200.345, 196.798, 180.095))]
data['cbeta'] = []
data['probe'] = [(' B 901  GLN HE21', ' B 905  ARG  HE ', -0.708, (184.32, 170.24, 140.594)), (' A 391  CYS  HA ', ' A 525  CYS  HB3', -0.706, (185.108, 157.602, 221.509)), (' A 901  GLN HE21', ' A 905  ARG  HE ', -0.661, (174.316, 197.312, 140.671)), (' A 403  ARG HH12', ' B 372  ALA  HB1', -0.652, (202.827, 185.647, 242.545)), (' B1142  GLN HE22', ' C1145  LEU  HB2', -0.634, (189.556, 190.007, 102.566)), (' C  81  ASN HD21', ' C 242  LEU HD12', -0.631, (197.775, 242.394, 221.654)), (' A 372  ALA  HB1', ' C 403  ARG HH12', -0.631, (178.196, 173.657, 242.357)), (' B 299  THR HG22', ' B 315  THR HG21', -0.628, (211.697, 172.15, 186.289)), (' C 319  ARG  HD3', ' C 592  PHE  HB3', -0.628, (173.119, 212.727, 195.936)), (' C 625  HIS  HD2', ' C 628  GLN  HB2', -0.608, (176.685, 222.593, 199.998)), (' C 391  CYS  HA ', ' C 525  CYS  HB3', -0.598, (161.896, 203.203, 222.011)), (' C  65  PHE  O  ', ' C 264  ALA  N  ', -0.588, (197.962, 242.386, 211.926)), (' A 210  ILE HG13', ' A 212  LEU  H  ', -0.582, (130.952, 177.623, 202.148)), (' A  65  PHE  O  ', ' A 264  ALA  N  ', -0.569, (132.93, 169.005, 211.5)), (' C 125  ASN  ND2', ' C 172  SER  O  ', -0.566, (215.967, 228.067, 226.277)), (' B 122  ASN  OD1', ' B 125  ASN  N  ', -0.562, (213.903, 140.542, 226.353)), (' C 795  LYS  HD2', ' C 796  ASP  HB2', -0.558, (218.312, 197.852, 135.497)), (' A 420  ASP  OD2', ' A 460  ASN  ND2', -0.543, (207.93, 182.191, 228.262)), (' C 319  ARG  NH1', ' C 320  VAL  O  ', -0.541, (172.129, 214.616, 199.832)), (' B 143  VAL  HB ', ' B 245  HIS  HA ', -0.532, (229.945, 138.821, 226.372)), (' A1138  TYR  OH ', ' A1144  GLU  OE2', -0.531, (176.304, 180.47, 105.829)), (' B 142  GLY  HA3', ' B 156  GLU  HB2', -0.531, (228.272, 141.915, 231.52)), (' C 447  GLY  N  ', ' C 498  GLN  OE1', -0.528, (173.055, 179.641, 256.577)), (' B 310  LYS  HG3', ' B 600  PRO  HA ', -0.527, (213.406, 166.905, 175.399)), (' A 567  ARG  HD2', ' B  42  VAL HG11', -0.526, (192.661, 159.904, 205.2)), (' B 795  LYS  HD2', ' B 796  ASP  HB2', -0.524, (181.6, 154.124, 136.115)), (' C 916  LEU HD12', ' C 923  ILE HD13', -0.518, (200.659, 202.65, 134.301)), (' A 332  ILE HG22', ' A 362  VAL HG23', -0.516, (183.618, 151.161, 227.767)), (' A 630  THR HG22', ' A 632  THR  H  ', -0.513, (152.319, 164.361, 195.199)), (' B 128  ILE HD12', ' B 170  TYR  HD2', -0.512, (208.856, 151.324, 225.947)), (' B 916  LEU HD12', ' B 923  ILE HD13', -0.509, (193.218, 167.37, 134.349)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.507, (191.218, 219.899, 175.483)), (' B 129  LYS  HG2', ' B 169  GLU  HG3', -0.507, (211.131, 152.436, 233.957)), (' B 642  VAL HG22', ' B 651  ILE HG12', -0.503, (226.812, 178.005, 183.019)), (' C 139  PRO  HB3', ' C 159  VAL  HA ', -0.501, (197.985, 238.616, 231.324)), (' C 321  GLN  H  ', ' C 625  HIS  HB3', -0.5, (173.718, 219.013, 199.821)), (' B 332  ILE HG22', ' B 362  VAL HG23', -0.498, (219.772, 201.969, 227.54)), (' C 128  ILE HD12', ' C 170  TYR  HD2', -0.494, (207.429, 223.743, 226.157)), (' C 630  THR HG22', ' C 632  THR  H  ', -0.493, (185.208, 228.502, 195.289)), (' C 332  ILE HG22', ' C 362  VAL HG23', -0.493, (157.6, 207.766, 227.803)), (' A 844  ILE HD11', ' C 556  ASN  H  ', -0.489, (150.937, 206.611, 198.603)), (' C 833  PHE  HB3', ' C 860  VAL HG12', -0.488, (211.244, 191.207, 178.623)), (' B 599  THR HG22', ' B 608  VAL HG12', -0.482, (215.516, 168.118, 182.31)), (' A 366  SER  O  ', ' A 370  ASN  HB2', -0.48, (177.303, 166.757, 233.651)), (' B  81  ASN HD22', ' B 240  THR HG23', -0.477, (227.704, 152.008, 220.473)), (' A 128  ILE HD12', ' A 170  TYR  HD2', -0.475, (145.346, 185.967, 225.751)), (' C 245  HIS  HD2', ' C 246  ARG  HG2', -0.474, (204.439, 253.282, 225.789)), (' C 210  ILE HG12', ' C 212  LEU  H  ', -0.471, (207.452, 239.981, 202.205)), (' C 631  PRO  HA ', ' C 634  ARG  HG2', -0.47, (180.912, 229.826, 194.486)), (' A 129  LYS  NZ ', ' A 131  CYS  SG ', -0.469, (144.274, 178.926, 236.303)), (' B 245  HIS  HD2', ' B 246  ARG  HG2', -0.469, (235.975, 138.771, 226.137)), (' A 599  THR HG22', ' A 608  VAL HG12', -0.468, (156.4, 171.718, 182.275)), (' B  89  GLY  HA3', ' B 270  LEU HD12', -0.467, (215.309, 163.373, 213.449)), (' C  89  GLY  HA3', ' C 270  LEU HD12', -0.459, (193.394, 223.019, 213.544)), (' B 630  THR HG22', ' B 632  THR  H  ', -0.458, (223.885, 168.183, 195.379)), (' C 111  ASP  HB3', ' C 113  LYS  HG3', -0.457, (186.414, 230.76, 236.255)), (' A  99  ASN  HB3', ' A 102  ARG  NH2', -0.455, (129.577, 180.9, 221.32)), (' C  29  THR HG22', ' C  30  ASN  H  ', -0.455, (195.364, 237.904, 201.742)), (' A 916  LEU HD12', ' A 923  ILE HD13', -0.453, (166.688, 190.994, 134.402)), (' B  36  VAL HG11', ' B 220  PHE  CZ ', -0.453, (210.903, 155.649, 200.317)), (' B 567  ARG  HD2', ' C  42  VAL HG11', -0.451, (207.624, 205.438, 205.547)), (' B 619  GLU  O  ', ' B 623  ALA  N  ', -0.451, (224.903, 185.633, 191.636)), (' B 837  TYR  O  ', ' B 854  LYS  NZ ', -0.45, (176.219, 156.9, 189.059)), (' B 403  ARG HH12', ' C 372  ALA  HB1', -0.448, (179.672, 201.136, 242.865)), (' A  29  THR HG22', ' A  30  ASN  H  ', -0.446, (138.686, 168.677, 201.633)), (' C 619  GLU  O  ', ' C 623  ALA  N  ', -0.442, (169.345, 220.641, 191.575)), (' C  99  ASN  O  ', ' C 102  ARG  NH2', -0.441, (209.45, 240.444, 221.554)), (' C 420  ASP  OD2', ' C 460  ASN  ND2', -0.439, (172.203, 170.726, 228.247)), (' B 941  THR  OG1', ' B 942  ALA  N  ', -0.437, (202.261, 161.486, 163.375)), (' B1015  ALA  HA ', ' B1018  ILE HG22', -0.434, (184.307, 178.038, 173.318)), (' A 428  ASP  N  ', ' A 428  ASP  OD1', -0.432, (199.047, 173.938, 218.627)), (' B 808  ASP  HA ', ' B 809  PRO  HD3', -0.432, (182.173, 151.614, 152.004)), (' C 726  ILE HG13', ' C1061  VAL HG22', -0.431, (201.315, 200.816, 160.799)), (' C 319  ARG  O  ', ' C 625  HIS  ND1', -0.43, (175.85, 218.231, 198.152)), (' C 444  LYS  HG3', ' C 447  GLY  HA3', -0.429, (171.069, 180.946, 258.013)), (' C 599  THR HG22', ' C 608  VAL HG12', -0.423, (189.098, 221.108, 182.455)), (' B 319  ARG HH22', ' C 740  MET  HG3', -0.421, (210.666, 187.8, 197.454)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.421, (189.333, 223.329, 192.084)), (' A  81  ASN HD22', ' A 240  THR HG23', -0.42, (136.492, 169.672, 220.502)), (' B 211  ASN  HB2', ' B 212  LEU HD12', -0.419, (221.58, 142.757, 198.569)), (' C  68  ILE  HA ', ' C  68  ILE HD12', -0.418, (201.018, 251.016, 213.331)), (' B 592  PHE  HZ ', ' C 855  PHE  HA ', -0.417, (213.136, 191.638, 193.597)), (' C 318  PHE  HD2', ' C 595  VAL HG23', -0.413, (177.632, 216.12, 189.762)), (' A 855  PHE  HA ', ' C 592  PHE  HZ ', -0.411, (169.865, 207.342, 193.667)), (' B 210  ILE HG12', ' B 212  LEU  H  ', -0.411, (222.988, 142.826, 201.742)), (' A  33  THR  O  ', ' A  34  ARG  NE ', -0.409, (142.507, 177.547, 201.835)), (' C  53  ASP  HB2', ' C  55  PHE  CE2', -0.409, (195.873, 217.2, 205.567)), (' C 808  ASP  HA ', ' C 809  PRO  HD3', -0.408, (220.06, 200.433, 151.929)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.408, (154.344, 170.921, 192.101)), (' B 295  PRO  O  ', ' B 299  THR HG23', -0.407, (213.559, 170.28, 187.564)), (' B  33  THR  O  ', ' B  34  ARG  NE ', -0.405, (217.331, 153.219, 201.983)), (' A 642  VAL HG22', ' A 651  ILE HG12', -0.405, (159.019, 156.712, 183.176)), (' B  53  ASP  HB2', ' B  55  PHE  CE2', -0.404, (208.563, 164.421, 205.954)), (' C 642  VAL HG22', ' C 651  ILE HG12', -0.402, (174.897, 225.998, 183.208)), (' C 603  ASN HD21', ' C1306  NAG  C7 ', -0.401, (202.004, 219.082, 177.798)), (' A 808  ASP  HA ', ' A 809  PRO  HD3', -0.401, (158.766, 208.801, 151.944)), (' A 498  GLN  NE2', ' A 501  ASN  OD1', -0.4, (198.461, 184.187, 253.14))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
