# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 216  ASP  OD2', ' A 701  HOH  O  ', -0.848, (30.124, 18.099, 32.204)), (' A 298  ARG  NH1', ' A 704  HOH  O  ', -0.783, (17.231, 3.64, 19.746)), (' B 238  ASN  OD1', ' B 701  HOH  O  ', -0.728, (47.793, 21.373, 23.595)), (' A 132  PRO  O  ', ' A 703  HOH  O  ', -0.68, (2.851, 19.957, 21.546)), (' B 193  ALA  HA ', ' B 789  HOH  O  ', -0.653, (44.438, 7.307, 27.867)), (' B 270  GLU  OE2', ' B 703  HOH  O  ', -0.61, (43.874, 39.499, 14.302)), (' A  45  THR  O  ', ' A  49  MET  HG3', -0.588, (2.845, 25.003, -7.7)), (' A   5  LYS  HE2', ' A 709  HOH  O  ', -0.578, (18.407, 15.182, 17.762)), (' B 236  LYS  NZ ', ' B 708  HOH  O  ', -0.561, (55.132, 31.834, 19.058)), (' A   5  LYS  CE ', ' A 709  HOH  O  ', -0.552, (18.6, 15.471, 17.913)), (' A 298  ARG  NH1', ' A 714  HOH  O  ', -0.549, (17.231, 5.133, 19.812)), (' A   4  ARG HH12', ' B   5  LYS  NZ ', -0.549, (30.329, 14.673, 16.569)), (' B 207  TRP  NE1', ' B 702  HOH  O  ', -0.547, (30.752, 27.921, 15.713)), (' A  67  LEU HD12', ' A  74  GLN  NE2', -0.535, (9.816, 7.833, -15.961)), (' A 253  LEU  HG ', ' A 741  HOH  O  ', -0.53, (15.48, 5.508, 32.337)), (' B  52  PRO  HG2', ' B  54  TYR  CE2', -0.526, (47.299, -9.56, 21.512)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.518, (43.043, -4.286, 11.381)), (' B 108  PRO  HB3', ' B 132  PRO  HA ', -0.515, (44.112, 14.835, 15.102)), (' B  76  ARG  HG3', ' B  76  ARG HH11', -0.512, (29.932, -24.328, 5.094)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.51, (6.302, 13.566, -2.266)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.493, (-0.391, 12.601, 4.274)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.49, (8.598, -0.968, -4.29)), (' B  61  LYS  HE2', ' B 798  HOH  O  ', -0.481, (43.848, -19.78, 19.997)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.467, (8.406, -1.458, -4.518)), (' B  49  MET  HB2', ' B  49  MET  HE3', -0.463, (42.935, -9.447, 29.15)), (' A  67  LEU HD12', ' A  74  GLN HE21', -0.454, (9.226, 7.793, -16.201)), (' B  66  PHE  CE1', ' B  87  LEU HD21', -0.453, (40.047, -16.029, 13.564)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.449, (32.086, 4.564, 10.269)), (' A 186  VAL HG23', ' A 188  ARG  HG2', -0.444, (-1.219, 26.072, 3.624)), (' B  19  GLN  HG3', ' B 119  ASN  C  ', -0.433, (26.982, -11.094, 15.681)), (' A   4  ARG HH12', ' B   5  LYS  HZ1', -0.428, (30.203, 14.476, 16.47)), (' A 220  LEU  HA ', ' A 267  SER  OG ', -0.428, (21.925, 17.65, 40.505)), (' B 291  PHE  HZ ', ' B 299  GLN  NE2', -0.425, (26.604, 19.318, 7.863)), (' A 238  ASN  ND2', ' A 702  HOH  O  ', -0.423, (9.446, 28.639, 24.995)), (' A   6  MET  HE2', ' B 126  TYR  CD2', -0.423, (26.066, 6.181, 17.941)), (' A 131  ARG  HD3', ' A 137  LYS  HG3', -0.423, (12.826, 21.127, 17.343)), (' A 186  VAL HG21', ' A 188  ARG  HD3', -0.414, (-3.049, 26.717, 4.124)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.414, (24.015, 7.197, 19.264)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.411, (12.57, 9.372, 10.177)), (' B  55  GLU  O  ', ' B  59  ILE HG12', -0.407, (51.151, -18.163, 15.903)), (' B  14  GLU  HG2', ' B 122  PRO  HG2', -0.407, (23.119, -3.051, 9.777)), (' B 231  ASN  O  ', ' B 235  MET  HG3', -0.406, (50.533, 27.024, 15.97)), (' B  76  ARG  CG ', ' B  76  ARG HH11', -0.403, (29.936, -24.368, 5.837)), (' A 277  ASN  N  ', ' A 277  ASN HD22', -0.401, (25.625, 29.841, 35.108)), (' A 207  TRP  CE2', ' A 288  GLU  HB3', -0.4, (21.319, 17.673, 26.48)), (' B  76  ARG  CG ', ' B  76  ARG  NH1', -0.4, (30.001, -24.527, 5.943)), (' A 127  GLN  HG2', ' A 796  HOH  O  ', -0.4, (17.608, 10.25, 18.982))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
