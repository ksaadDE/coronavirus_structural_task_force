# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 123 ', 'SER', 0.08277926495222729, (159.5, 150.652, 124.28000000000002)), ('A', ' 341 ', 'LEU', 0.04430026755099788, (168.664, 145.652, 120.281)), ('A', ' 510 ', 'ILE', 0.016708193052865528, (150.899, 119.09, 133.776)), ('B', ' 123 ', 'SER', 0.08277926495222278, (150.652, 106.73999999999997, 124.28000000000002)), ('B', ' 341 ', 'LEU', 0.04430026755100882, (145.65199999999996, 97.57599999999996, 120.281)), ('B', ' 510 ', 'ILE', 0.016708193052864324, (119.09000000000003, 115.34099999999998, 133.776)), ('C', ' 123 ', 'SER', 0.08277926495223402, (115.58800000000004, 159.5, 124.28000000000002)), ('C', ' 341 ', 'LEU', 0.04430026755100288, (120.58800000000002, 168.664, 120.281)), ('C', ' 510 ', 'ILE', 0.016708193052868765, (147.15, 150.899, 133.776)), ('D', ' 123 ', 'SER', 0.08277926495225127, (106.73999999999997, 115.58799999999998, 124.28000000000002)), ('D', ' 341 ', 'LEU', 0.04430026755101769, (97.576, 120.58799999999994, 120.281)), ('D', ' 510 ', 'ILE', 0.016708193052865406, (115.34100000000004, 147.15, 133.776))]
data['cbeta'] = []
data['probe'] = [(' D 315  PHE  CB ', ' D 341  LEU HD22', -1.674, (100.022, 121.711, 115.795)), (' C 315  PHE  CB ', ' C 341  LEU HD22', -1.631, (121.989, 166.12, 115.894)), (' B 315  PHE  CB ', ' B 341  LEU HD22', -1.599, (144.578, 100.07, 115.816)), (' A 315  PHE  CB ', ' A 341  LEU HD22', -1.592, (166.218, 144.627, 115.795)), (' C 315  PHE  CB ', ' C 341  LEU  CD2', -1.344, (121.691, 166.899, 115.78)), (' A 315  PHE  CB ', ' A 341  LEU  CD2', -1.342, (166.854, 144.594, 115.748)), (' B 315  PHE  CB ', ' B 341  LEU  CD2', -1.335, (144.783, 99.381, 115.88)), (' D 315  PHE  CB ', ' D 341  LEU  CD2', -1.311, (99.31, 121.987, 115.715)), (' D 242  GLY  O  ', ' D 243  THR HG22', -1.256, (94.64, 141.038, 98.398)), (' A 242  GLY  O  ', ' A 243  THR HG22', -1.238, (171.6, 125.308, 98.398)), (' B 242  GLY  O  ', ' B 243  THR HG22', -1.224, (125.255, 94.693, 98.398)), (' C 242  GLY  O  ', ' C 243  THR HG22', -1.205, (140.985, 171.653, 98.398)), (' D 121  MET  CB ', ' D 340  LYS  HD3', -1.052, (99.873, 117.709, 125.49)), (' C 121  MET  CB ', ' C 340  LYS  HD3', -1.05, (117.722, 165.88, 125.433)), (' B 121  MET  CB ', ' B 340  LYS  HD3', -1.048, (149.076, 99.823, 124.993)), (' A 121  MET  CB ', ' A 340  LYS  HD3', -1.042, (165.971, 148.478, 125.399)), (' B 121  MET  CB ', ' B 340  LYS  CD ', -1.019, (148.567, 100.561, 125.448)), (' B 121  MET  HA ', ' B 340  LYS  HD2', -1.016, (150.734, 101.498, 125.21)), (' C 121  MET  CB ', ' C 340  LYS  CD ', -1.013, (117.3, 165.834, 124.857)), (' A 121  MET  CB ', ' A 340  LYS  CD ', -1.009, (165.76, 149.014, 124.857)), (' D 121  MET  CB ', ' D 340  LYS  CD ', -1.005, (100.607, 117.625, 125.517)), (' C 121  MET  HA ', ' C 340  LYS  HD2', -1.0, (115.559, 164.01, 125.888)), (' D 121  MET  HA ', ' D 340  LYS  HD2', -0.985, (101.795, 115.477, 125.21)), (' A 121  MET  HA ', ' A 340  LYS  HD2', -0.985, (164.325, 150.644, 125.219)), (' D 121  MET  CA ', ' D 340  LYS  HD2', -0.944, (101.625, 117.008, 125.958)), (' A 121  MET  CA ', ' A 340  LYS  HD2', -0.944, (164.802, 149.338, 126.058)), (' C 121  MET  CA ', ' C 340  LYS  HD2', -0.937, (116.815, 164.434, 126.078)), (' B 121  MET  CA ', ' B 340  LYS  HD2', -0.937, (149.389, 101.593, 126.095)), (' A 119  TYR  HA ', ' A 122  THR  OG1', -0.838, (161.891, 150.27, 130.58)), (' B 119  TYR  HA ', ' B 122  THR  OG1', -0.834, (149.848, 104.247, 130.081)), (' D 242  GLY  O  ', ' D 243  THR  CG2', -0.834, (93.962, 141.235, 99.633)), (' D 119  TYR  HA ', ' D 122  THR  OG1', -0.831, (104.322, 116.414, 130.092)), (' B 242  GLY  O  ', ' B 243  THR  CG2', -0.825, (125.009, 93.96, 99.63)), (' C 119  TYR  HA ', ' C 122  THR  OG1', -0.824, (115.922, 161.803, 130.544)), (' B 123  SER  OG ', ' B 314  LEU HD21', -0.818, (149.047, 104.855, 121.61)), (' A 123  SER  OG ', ' A 314  LEU HD21', -0.817, (160.866, 149.038, 122.04)), (' C 123  SER  OG ', ' C 314  LEU HD21', -0.814, (117.193, 161.499, 121.648)), (' D 123  SER  OG ', ' D 314  LEU HD21', -0.814, (104.798, 117.25, 121.64)), (' A 242  GLY  O  ', ' A 243  THR  CG2', -0.804, (172.19, 125.008, 99.69)), (' C 242  GLY  O  ', ' C 243  THR  CG2', -0.799, (141.33, 172.272, 99.693)), (' B 121  MET  CB ', ' B 340  LYS  HD2', -0.794, (149.434, 101.579, 125.356)), (' A 121  MET  CB ', ' A 340  LYS  HD2', -0.785, (164.715, 149.488, 125.332)), (' C 121  MET  CB ', ' C 340  LYS  HD2', -0.736, (116.466, 165.334, 126.117)), (' D 121  MET  CB ', ' D 340  LYS  HD2', -0.733, (101.367, 117.006, 125.958)), (' B 343  ARG  CB ', ' B 352  ILE HD12', -0.714, (152.432, 95.006, 123.019)), (' D 343  ARG  CB ', ' D 352  ILE HD12', -0.714, (94.963, 113.845, 123.023)), (' C 343  ARG  CB ', ' C 352  ILE HD12', -0.712, (113.639, 171.997, 123.102)), (' A 336  ILE  HB ', ' C 502  GLN HE22', -0.706, (154.931, 137.857, 118.32)), (' D 315  PHE  CB ', ' D 341  LEU HD21', -0.704, (99.035, 122.72, 116.429)), (' A 343  ARG  CB ', ' A 352  ILE HD12', -0.701, (171.664, 153.261, 123.307)), (' B 315  PHE  CB ', ' B 341  LEU HD21', -0.699, (143.479, 99.163, 116.1)), (' B 502  GLN HE22', ' D 336  ILE  HB ', -0.699, (111.309, 128.475, 118.32)), (' C 336  ILE  HB ', ' D 502  GLN HE22', -0.698, (128.69, 154.829, 118.926)), (' A 502  GLN HE22', ' B 336  ILE  HB ', -0.691, (137.811, 111.355, 118.32)), (' C 315  PHE  CB ', ' C 341  LEU HD21', -0.671, (122.945, 167.122, 116.472)), (' D 313  ASN  OD1', ' D 342  ILE HD12', -0.67, (98.318, 115.793, 116.981)), (' C 313  ASN  OD1', ' C 342  ILE HD12', -0.667, (115.777, 167.939, 116.958)), (' A 313  ASN  OD1', ' A 342  ILE HD12', -0.661, (168.518, 150.525, 117.143)), (' B 313  ASN  OD1', ' B 342  ILE HD12', -0.66, (150.571, 97.73, 117.096)), (' C 336  ILE  O  ', ' D 502  GLN  NE2', -0.656, (128.352, 156.407, 119.645)), (' B 502  GLN  NE2', ' D 336  ILE  O  ', -0.655, (109.876, 128.509, 119.594)), (' A 493  GLN  HG3', ' B 119  TYR  OH ', -0.655, (148.244, 108.929, 135.699)), (' B 493  GLN  HG3', ' D 119  TYR  OH ', -0.654, (108.789, 118.11, 135.691)), (' A 336  ILE  O  ', ' C 502  GLN  NE2', -0.65, (155.858, 137.641, 119.697)), (' A 119  TYR  OH ', ' C 493  GLN  HG3', -0.648, (157.234, 148.341, 135.756)), (' C 119  TYR  OH ', ' D 493  GLN  HG3', -0.648, (117.996, 157.382, 135.742)), (' A 502  GLN  NE2', ' B 336  ILE  O  ', -0.643, (137.561, 110.402, 119.751)), (' A 315  PHE  CB ', ' A 341  LEU HD21', -0.614, (167.012, 143.582, 115.914)), (' B 207  ASN  HB2', ' B 901  NAG  O7 ', -0.612, (103.879, 100.89, 106.765)), (' D 207  ASN  HB2', ' D 901  NAG  O7 ', -0.607, (100.463, 161.919, 106.646)), (' A 493  GLN  NE2', ' B 119  TYR  OH ', -0.603, (148.523, 108.06, 136.599)), (' A 119  TYR  OH ', ' C 493  GLN  NE2', -0.601, (158.544, 148.423, 137.035)), (' C 207  ASN  HB2', ' C 901  NAG  O7 ', -0.599, (161.902, 165.793, 106.707)), (' B 493  GLN  NE2', ' D 119  TYR  OH ', -0.599, (107.524, 117.24, 137.055)), (' C 119  TYR  OH ', ' D 493  GLN  NE2', -0.598, (117.164, 158.652, 137.087)), (' D 408  THR  O  ', ' D 412  ASN  ND2', -0.597, (87.315, 120.366, 118.849)), (' A 374  LEU  O  ', ' A 377  HIS  ND1', -0.596, (180.545, 133.343, 157.314)), (' A 207  ASN  HB2', ' A 901  NAG  O7 ', -0.596, (165.345, 103.957, 106.692)), (' D 374  LEU  O  ', ' D 377  HIS  ND1', -0.594, (86.278, 132.552, 156.9)), (' A 408  THR  O  ', ' A 412  ASN  ND2', -0.594, (179.074, 145.421, 119.052)), (' B 374  LEU  O  ', ' B 377  HIS  ND1', -0.592, (133.231, 85.98, 157.148)), (' B 408  THR  O  ', ' B 412  ASN  ND2', -0.591, (145.905, 86.914, 118.878)), (' C 374  LEU  O  ', ' C 377  HIS  ND1', -0.589, (132.99, 180.08, 157.132)), (' C 408  THR  O  ', ' C 412  ASN  ND2', -0.589, (120.378, 178.787, 118.873)), (' A 505  ASN  OD1', ' A 515  THR  OG1', -0.582, (143.412, 122.045, 130.965)), (' B 505  ASN  OD1', ' B 515  THR  OG1', -0.576, (122.011, 122.416, 130.945)), (' A 352  ILE HG13', ' A 353  VAL HG13', -0.573, (173.879, 154.153, 124.619)), (' C 505  ASN  OD1', ' C 515  THR  OG1', -0.573, (144.35, 143.989, 130.906)), (' D 352  ILE HG13', ' D 353  VAL HG13', -0.57, (91.852, 111.984, 124.883)), (' B 352  ILE HG13', ' B 353  VAL HG13', -0.569, (154.239, 91.837, 124.822)), (' D 505  ASN  OD1', ' D 515  THR  OG1', -0.568, (122.257, 144.546, 130.895)), (' C 352  ILE HG13', ' C 353  VAL HG13', -0.567, (112.249, 173.888, 124.568)), (' C 121  MET  HA ', ' C 340  LYS  CD ', -0.562, (115.698, 165.336, 125.457)), (' A 121  MET  HA ', ' A 340  LYS  CD ', -0.553, (165.251, 150.392, 125.415)), (' C 343  ARG  CB ', ' C 352  ILE  HB ', -0.543, (112.491, 170.707, 124.485)), (' B 343  ARG  CB ', ' B 352  ILE  HB ', -0.539, (153.26, 95.183, 124.309)), (' A 343  ARG  CB ', ' A 352  ILE  HB ', -0.538, (171.018, 153.281, 124.27)), (' D 343  ARG  CB ', ' D 352  ILE  HB ', -0.536, (95.516, 112.476, 124.413)), (' D 337  ARG HH11', ' D 436  THR HG21', -0.535, (105.398, 130.361, 124.042)), (' A 337  ARG HH11', ' A 436  THR HG21', -0.527, (161.005, 136.283, 124.185)), (' C 337  ARG HH11', ' C 436  THR HG21', -0.524, (130.526, 160.991, 124.201)), (' A 220  ILE HG12', ' B 310  ALA  HB2', -0.523, (153.688, 101.192, 109.894)), (' D 121  MET  HA ', ' D 340  LYS  CD ', -0.522, (100.955, 115.806, 125.431)), (' B 192  ASN  HB3', ' B 309  ASN  HB3', -0.518, (148.97, 106.376, 110.824)), (' D 192  ASN  HB3', ' D 309  ASN  HB3', -0.518, (106.151, 116.935, 111.07)), (' A 192  ASN  HB3', ' A 309  ASN  HB3', -0.516, (159.982, 149.33, 111.144)), (' A 310  ALA  HB2', ' C 220  ILE HG12', -0.516, (165.205, 153.392, 110.019)), (' B 337  ARG HH11', ' B 436  THR HG21', -0.515, (136.353, 105.516, 124.381)), (' B 123  SER  HG ', ' B 314  LEU HD21', -0.515, (149.467, 104.712, 122.02)), (' A 340  LYS  O  ', ' A 341  LEU  HB2', -0.514, (167.249, 146.674, 118.935)), (' D 340  LYS  O  ', ' D 341  LEU  HB2', -0.514, (99.125, 119.514, 118.827)), (' C 310  ALA  HB2', ' D 220  ILE HG12', -0.511, (112.522, 165.493, 109.592)), (' C 192  ASN  HB3', ' C 309  ASN  HB3', -0.509, (117.192, 159.844, 110.787)), (' B 220  ILE HG12', ' D 310  ALA  HB2', -0.509, (100.999, 112.371, 110.014)), (' D 303  ILE HG23', ' D 320  LEU  HB2', -0.507, (108.497, 135.552, 109.777)), (' B 194  LEU  HA ', ' B 307  VAL HG12', -0.506, (142.82, 103.669, 107.606)), (' B 303  ILE HG23', ' B 320  LEU  HB2', -0.505, (130.524, 108.45, 109.816)), (' A 303  ILE HG23', ' A 320  LEU  HB2', -0.505, (157.743, 130.617, 109.776)), (' C 340  LYS  O  ', ' C 341  LEU  HB2', -0.504, (119.489, 167.098, 118.799)), (' D 194  LEU  HA ', ' D 307  VAL HG12', -0.504, (103.682, 122.933, 107.549)), (' B 340  LYS  O  ', ' B 341  LEU  HB2', -0.504, (146.73, 98.858, 118.952)), (' A 194  LEU  HA ', ' A 307  VAL HG12', -0.502, (162.912, 142.823, 107.275)), (' C 303  ILE HG23', ' C 320  LEU  HB2', -0.502, (135.513, 158.082, 109.448)), (' C 194  LEU  HA ', ' C 307  VAL HG12', -0.501, (123.288, 162.501, 107.514)), (' A 244  ALA  HB2', ' A 272  LEU HD23', -0.498, (168.018, 125.245, 99.942)), (' B 371  ILE  O  ', ' B 375  HIS  N  ', -0.496, (137.214, 85.166, 155.473)), (' A 371  ILE  O  ', ' A 375  HIS  N  ', -0.495, (181.102, 137.188, 155.431)), (' C 371  ILE  O  ', ' C 375  HIS  N  ', -0.492, (129.003, 181.129, 155.49)), (' C 244  ALA  HB2', ' C 272  LEU HD23', -0.491, (141.506, 168.121, 99.935)), (' D 371  ILE  O  ', ' D 375  HIS  N  ', -0.491, (85.012, 128.948, 155.526)), (' B 314  LEU HD23', ' B 340  LYS  HA ', -0.49, (147.76, 102.074, 120.731)), (' B 244  ALA  HB2', ' B 272  LEU HD23', -0.488, (124.713, 97.978, 99.952)), (' D 244  ALA  HB2', ' D 272  LEU HD23', -0.486, (98.222, 141.028, 99.841)), (' A 314  LEU HD23', ' A 340  LYS  HA ', -0.485, (164.149, 147.69, 120.772)), (' A 123  SER  CB ', ' A 314  LEU HD11', -0.482, (159.928, 149.377, 121.351)), (' B 123  SER  CB ', ' B 314  LEU HD11', -0.482, (149.69, 106.334, 121.681)), (' C 123  SER  CB ', ' C 314  LEU HD11', -0.482, (116.64, 159.613, 121.279)), (' D 314  LEU HD23', ' D 340  LYS  HA ', -0.481, (102.07, 118.409, 120.789)), (' A 110  PHE  O  ', ' A 114  ILE HG22', -0.48, (167.097, 149.234, 141.702)), (' B 132  VAL  O  ', ' B 136  LEU  HB2', -0.478, (142.65, 114.732, 110.457)), (' D 110  PHE  O  ', ' D 114  ILE HG22', -0.477, (98.923, 116.522, 141.725)), (' D 132  VAL  O  ', ' D 136  LEU  HB2', -0.476, (114.66, 123.688, 110.033)), (' D 123  SER  CB ', ' D 314  LEU HD11', -0.475, (106.448, 116.777, 121.312)), (' D 118  THR HG22', ' D 442  ASN  HB3', -0.475, (100.984, 121.167, 134.134)), (' C 314  LEU HD23', ' C 340  LYS  HA ', -0.473, (118.35, 164.169, 120.836)), (' C 110  PHE  O  ', ' C 114  ILE HG22', -0.472, (116.356, 167.115, 141.788)), (' A 118  THR HG22', ' A 442  ASN  HB3', -0.472, (165.173, 144.636, 134.045)), (' B 110  PHE  O  ', ' B 114  ILE HG22', -0.47, (149.702, 98.907, 141.717)), (' A 132  VAL  O  ', ' A 136  LEU  HB2', -0.466, (151.46, 142.601, 110.478)), (' C 484  PHE  O  ', ' C 488  PHE  HB2', -0.465, (149.162, 144.885, 146.091)), (' C 118  THR HG22', ' C 442  ASN  HB3', -0.465, (121.621, 165.19, 134.083)), (' B 118  THR HG22', ' B 442  ASN  HB3', -0.465, (144.59, 100.825, 134.094)), (' C 132  VAL  O  ', ' C 136  LEU  HB2', -0.465, (123.59, 151.411, 110.456)), (' A 484  PHE  O  ', ' A 488  PHE  HB2', -0.462, (144.847, 117.489, 145.794)), (' B 560  ILE  CD1', ' D 560  ILE HD11', -0.462, (131.588, 132.814, 161.828)), (' D 484  PHE  O  ', ' D 488  PHE  HB2', -0.46, (121.378, 149.115, 146.122)), (' C 129  TYR  HE1', ' C 192  ASN HD22', -0.459, (119.457, 157.659, 111.562)), (' B 510  ILE HD12', ' B 511  LYS  HG3', -0.456, (120.584, 115.798, 130.222)), (' D 262  LEU HD11', ' D 331  ILE HD11', -0.455, (113.069, 147.618, 117.813)), (' B 484  PHE  O  ', ' B 488  PHE  HB2', -0.455, (117.09, 121.401, 146.097)), (' C 560  ILE HD11', ' D 560  ILE  CD1', -0.454, (132.362, 134.596, 161.724)), (' A 560  ILE HD11', ' C 560  ILE  CD1', -0.454, (134.525, 133.873, 161.782)), (' A 510  ILE HD12', ' A 511  LYS  HG3', -0.452, (150.833, 120.896, 130.267)), (' D 510  ILE HD12', ' D 511  LYS  HG3', -0.452, (115.841, 145.496, 130.192)), (' D 138  LEU  HA ', ' D 148  PHE  HB3', -0.451, (115.991, 133.671, 110.595)), (' C 262  LEU HD11', ' C 331  ILE HD11', -0.45, (147.709, 153.216, 117.617)), (' B 300  VAL HG12', ' B 323  GLU  HB3', -0.449, (121.13, 108.596, 114.672)), (' D 300  VAL HG12', ' D 323  GLU  HB3', -0.449, (108.618, 144.908, 114.619)), (' B 138  LEU  HA ', ' B 148  PHE  HB3', -0.449, (132.578, 116.062, 110.548)), (' A 300  VAL HG12', ' A 323  GLU  HB3', -0.448, (158.028, 121.373, 114.403)), (' C 138  LEU  HA ', ' C 148  PHE  HB3', -0.448, (133.226, 150.278, 110.426)), (' A 560  ILE  CD1', ' B 560  ILE HD11', -0.447, (133.463, 131.402, 161.737)), (' B 262  LEU HD11', ' B 331  ILE HD11', -0.446, (118.605, 113.053, 117.763)), (' B 493  GLN  CG ', ' D 119  TYR  OH ', -0.446, (108.704, 118.28, 136.754)), (' A 262  LEU HD11', ' A 331  ILE HD11', -0.446, (153.144, 118.331, 117.803)), (' D 129  TYR  HE1', ' D 192  ASN HD22', -0.444, (108.831, 119.3, 111.93)), (' C 510  ILE HD12', ' C 511  LYS  HG3', -0.444, (145.328, 150.816, 130.305)), (' D 198  PRO  HB3', ' D 305  PHE  CD1', -0.444, (104.247, 131.164, 106.797)), (' B 129  TYR  HE1', ' B 192  ASN HD22', -0.443, (146.783, 108.67, 111.543)), (' C 198  PRO  HB3', ' C 305  PHE  CD1', -0.442, (131.291, 162.385, 106.6)), (' A 198  PRO  HB3', ' A 305  PHE  CD1', -0.442, (162.007, 135.241, 106.618)), (' A 493  GLN  CG ', ' B 119  TYR  OH ', -0.442, (147.75, 108.601, 136.505)), (' A 119  TYR  OH ', ' C 493  GLN  CG ', -0.442, (157.659, 147.842, 136.662)), (' B 198  PRO  HB3', ' B 305  PHE  CD1', -0.441, (135.037, 104.353, 106.632)), (' A 138  LEU  HA ', ' A 148  PHE  HB3', -0.439, (150.207, 133.023, 110.473)), (' C 300  VAL HG12', ' C 323  GLU  HB3', -0.439, (144.883, 158.044, 114.454)), (' B 216  PHE  HB3', ' B 220  ILE HG21', -0.436, (96.976, 113.858, 109.74)), (' D 216  PHE  HB3', ' D 220  ILE HG21', -0.436, (113.881, 169.248, 109.736)), (' C 119  TYR  OH ', ' D 493  GLN  CG ', -0.434, (118.379, 157.685, 136.698)), (' A 129  TYR  HE1', ' A 192  ASN HD22', -0.43, (157.526, 146.732, 111.543)), (' C 216  PHE  HB3', ' C 220  ILE HG21', -0.429, (169.522, 152.07, 109.917)), (' A 216  PHE  HB3', ' A 220  ILE HG21', -0.429, (152.146, 96.648, 109.913)), (' B 493  GLN  NE2', ' D 446  LEU HD21', -0.429, (107.026, 118.705, 138.294)), (' A 446  LEU HD21', ' C 493  GLN  NE2', -0.424, (159.505, 147.211, 138.366)), (' C 446  LEU HD21', ' D 493  GLN  NE2', -0.421, (118.721, 159.303, 138.069)), (' A 493  GLN  NE2', ' B 446  LEU HD21', -0.419, (147.519, 106.969, 138.113)), (' B 121  MET  HA ', ' B 340  LYS  CD ', -0.415, (150.675, 100.992, 125.395)), (' D 341  LEU  HA ', ' D 341  LEU HD12', -0.412, (97.205, 122.254, 120.347)), (' C 560  ILE HD11', ' D 560  ILE HD13', -0.41, (132.434, 134.963, 162.245)), (' D 200  LEU HD23', ' D 303  ILE  HB ', -0.41, (105.528, 137.835, 106.405)), (' C 404  HIS  HD2', ' C 407  ARG HH21', -0.409, (119.728, 172.949, 127.731)), (' C 200  LEU HD23', ' C 303  ILE  HB ', -0.409, (137.66, 160.562, 106.787)), (' B 560  ILE HD13', ' D 560  ILE HD11', -0.407, (131.26, 132.419, 162.184)), (' A 200  LEU HD23', ' A 303  ILE  HB ', -0.407, (160.691, 128.265, 106.543)), (' B 200  LEU HD23', ' B 303  ILE  HB ', -0.407, (128.275, 105.521, 106.554)), (' A 560  ILE HD13', ' B 560  ILE HD11', -0.406, (133.806, 131.244, 162.223)), (' A 560  ILE HD11', ' C 560  ILE HD13', -0.404, (134.98, 133.788, 162.283)), (' D 298  THR  O  ', ' D 299  ARG  NH1', -0.404, (108.216, 152.637, 110.729))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
