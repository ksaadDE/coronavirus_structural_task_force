# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  30 ', 'SER', 0.012061361714815071, (-22.424760000000006, 92.56212, 30.717380000000006)), ('A', ' 228 ', 'LYS', 0.030184259427089504, (-79.22059, 65.95133, 14.43147)), ('B', ' 100 ', 'SER', 0.018060708006920067, (-38.508759999999995, 109.96602, 35.03638000000001)), ('H', ' 103 ', 'LEU', 0.010386258360885876, (-6.9129000000000005, 93.1441, 5.878680000000002)), ('L', '  30 ', 'SER', 0.03399960336136828, (-13.812540000000006, 80.01889000000001, 14.147160000000003))]
data['omega'] = [('A', ' 161 ', 'PRO', None, (-54.189589999999995, 73.95898999999997, 31.93126000000001)), ('A', ' 163 ', 'PRO', None, (-52.42684, 75.80061, 26.30598000000001)), ('B', '   8 ', 'PRO', None, (-56.20195999999999, 107.15625000000001, 17.441140000000008)), ('B', ' 148 ', 'PRO', None, (-67.78891000000002, 96.04236, 9.91346)), ('H', ' 155 ', 'PRO', None, (31.054350000000007, 66.03294, 20.33136)), ('H', ' 157 ', 'PRO', None, (28.623600000000003, 64.2558, 14.80228)), ('L', '   8 ', 'PRO', None, (-5.076879999999995, 59.994130000000006, 13.55783)), ('L', '  93 ', 'ASN', None, (-6.245509999999988, 85.95408, 17.04627)), ('L', ' 142 ', 'PRO', None, (2.736810000000003, 47.94093000000001, 13.027570000000004))]
data['rota'] = [('B', '  15 ', 'LEU', 0.1560874779277161, (-54.13713, 98.74148, 1.5133400000000004)), ('G', ' 332 ', 'HIS', 0.04792510146076071, (9.836890000000025, 111.06263, -2.6261900000000002)), ('G', ' 517 ', 'LEU', 0.29001242482608713, (-7.416579999999975, 120.79455, -0.8778900000000002)), ('A', '  65 ', 'ARG', 0.2877541896757827, (-42.32989, 97.12427000000001, 43.75189)), ('A', ' 232 ', 'LYS', 0.0, (-87.77607, 58.54363000000001, 12.251710000000003)), ('H', '  11 ', 'VAL', 0.2594850181942799, (26.74644, 75.52963, 21.90265)), ('H', '  27 ', 'HIS', 0.0042750442600579235, (7.104799999999997, 92.36244, 4.799030000000001)), ('H', '  32 ', 'TYR', 0.2953484302078946, (3.806840000000002, 91.9475, 11.14902)), ('H', '  33 ', 'TRP', 0.0, (3.927920000000001, 88.95389, 13.509880000000004)), ('H', '  46 ', 'GLU', 0.29672719682024884, (5.517899999999991, 74.29929, 20.484820000000006)), ('H', ' 106 ', 'LEU', 0.23249505931148914, (-3.8228000000000004, 86.64686, 8.82339)), ('H', ' 111 ', 'TRP', 0.07708279152998795, (9.482390000000002, 79.8735, 7.81328)), ('L', '  99 ', 'PHE', 0.17334030006362244, (-0.1107799999999901, 73.5146, 18.40599))]
data['cbeta'] = []
data['probe'] = [(' A  36  ARG  HG2', ' A  81  LEU HD22', -0.797, (-39.972, 89.442, 34.718)), (' L 106  ASP  OD2', ' L 174  TYR  OH ', -0.77, (6.566, 55.665, 9.638)), (' A  52  SER  HB3', ' A  57  ASN  HB2', -0.77, (-28.769, 100.649, 36.171)), (' L  12  SER  HB3', ' L 108  LYS  HA ', -0.703, (0.112, 51.767, 5.7)), (' B 100  SER  HB2', ' B 101  PRO  HD3', -0.687, (-41.216, 110.4, 34.268)), (' L  13  VAL HG13', ' L  17  GLU  HB2', -0.682, (-3.419, 56.142, 0.695)), (' A 102  PRO  HG3', ' G 455  LEU HD21', -0.68, (-24.358, 102.963, 29.162)), (' B 197  LYS  HA ', ' B 218  ARG  HB3', -0.677, (-87.638, 75.227, 25.134)), (' B   2  ILE  H  ', ' B 101  PRO  HG3', -0.658, (-43.917, 108.996, 34.343)), (' A  52  SER  O  ', ' A  72  ARG  NH1', -0.657, (-27.31, 95.504, 33.411)), (' G 357  ARG  NH1', ' G 608  SO4  O1 ', -0.656, (3.226, 118.373, 8.018)), (' H  51  ILE HD11', ' H  70  ILE HG13', -0.639, (9.542, 89.731, 21.467)), (' G 376  THR  HB ', ' G 435  ALA  HB3', -0.636, (-16.729, 100.629, 5.855)), (' L 143  ARG  NH1', ' L 143  ARG  O  ', -0.621, (6.439, 52.593, 17.592)), (' G 337  PRO  HB2', ' G 340  GLU  HG3', -0.615, (2.91, 102.493, 5.143)), (' A  50  LEU HD11', ' A 103  ALA  HB1', -0.61, (-32.315, 99.954, 32.056)), (' B  29  VAL HG13', ' B  98  PHE  HB2', -0.608, (-39.345, 111.45, 27.819)), (' B  43  GLN  HB2', ' B  53  LEU HD11', -0.606, (-44.564, 98.22, 13.891)), (' A 108  THR  HA ', ' A 111  ARG  HG2', -0.604, (-32.153, 109.791, 30.495)), (' G 345  THR  HA ', ' H 101  VAL HG21', -0.599, (-1.857, 93.027, 11.253)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.59, (2.512, 69.068, 4.556)), (' G 396  TYR  HB2', ' G 514  SER  HB2', -0.585, (-6.751, 113.812, 7.462)), (' A  28  THR  OG1', ' G 495  TYR  O  ', -0.585, (-19.097, 92.373, 23.295)), (' L 133  VAL  HB ', ' L 180  LEU  HB3', -0.578, (18.325, 47.579, 30.57)), (' H  25  SER  O  ', ' H  98  ARG  NH2', -0.572, (9.975, 89.773, 4.295)), (' A   2  VAL HG11', ' A 116  VAL HG21', -0.572, (-30.719, 92.031, 19.96)), (' A   6  GLU  HB2', ' A 121  THR HG23', -0.572, (-39.498, 83.446, 28.18)), (' L  54  ARG HH21', ' L  63  SER  HB3', -0.571, (-8.329, 69.736, -2.102)), (' A  31  ASN  ND2', ' G 494  SER  O  ', -0.568, (-19.09, 96.192, 25.831)), (' H 108  PRO  HG2', ' L  46  LEU HD22', -0.568, (0.703, 80.3, 6.31)), (' A 133  PRO  HB3', ' A 159  TYR  HB3', -0.565, (-60.186, 71.607, 28.094)), (' L  29  VAL HG11', ' L  90  GLN  HB2', -0.557, (-6.985, 78.063, 16.01)), (' H  99  HIS  CE1', ' H 108  PRO  HB3', -0.555, (0.78, 81.758, 10.09)), (' H  98  ARG  NH1', ' H 109  ASP  OD2', -0.55, (6.149, 87.995, 4.477)), (' A  29  PHE  C  ', ' A  31  ASN  H  ', -0.545, (-23.566, 93.011, 28.653)), (' A 105  VAL  HA ', ' A 111  ARG HH11', -0.541, (-32.706, 106.116, 33.385)), (' H  43  LYS  HG2', ' H  44  GLY  H  ', -0.533, (7.863, 67.404, 21.024)), (' B 100  SER  HB2', ' B 101  PRO  CD ', -0.531, (-40.622, 109.903, 34.246)), (' G 346  ARG  NH2', ' H  57  TYR  HB3', -0.53, (2.453, 94.731, 19.408)), (' H  22  CYS  SG ', ' H  34  ILE HD11', -0.527, (12.502, 85.846, 12.09)), (' B   4  LEU HD11', ' B  96  GLN  H  ', -0.525, (-43.745, 106.324, 26.317)), (' L  33  LEU HD11', ' L  88  CYS  HB2', -0.524, (-4.684, 72.769, 12.956)), (' A  12  VAL HG11', ' A  18  LEU  HB2', -0.523, (-44.403, 80.318, 39.582)), (' A  35  HIS  CE1', ' A  50  LEU HD13', -0.522, (-34.673, 99.088, 31.673)), (' H  98  ARG  HB3', ' H 109  ASP  OD1', -0.518, (6.123, 85.486, 7.013)), (' A  33  GLY  HA3', ' A 103  ALA  HB3', -0.514, (-29.879, 98.707, 31.202)), (' A  54  GLU  N  ', ' A  54  GLU  OE1', -0.51, (-23.95, 98.308, 35.33)), (' L  61  ARG  HB2', ' L  76  SER  O  ', -0.507, (-3.964, 64.465, -3.843)), (' A  12  VAL HG21', ' A  86  LEU HD13', -0.501, (-46.639, 82.461, 39.843)), (' A  47  TRP  HZ2', ' A  50  LEU  HB2', -0.501, (-37.28, 99.082, 34.446)), (' G 357  ARG  NH1', ' G 608  SO4  O3 ', -0.5, (2.577, 118.609, 9.296)), (' L   2  ILE HG23', ' L  27  GLN  HG2', -0.5, (-10.387, 76.464, 22.607)), (' G 431  GLY  HA2', ' G 515  PHE  CD2', -0.498, (-11.277, 113.042, 1.69)), (' A 166  VAL HG22', ' A 212  VAL HG22', -0.494, (-60.229, 70.81, 19.302)), (' G 455  LEU HD22', ' G 493  GLN  OE1', -0.493, (-21.82, 101.835, 27.93)), (' H   2  VAL HG12', ' H 110  TYR  HB2', -0.489, (9.089, 84.519, 3.184)), (' G 346  ARG HH22', ' H  55  ASP  HB3', -0.484, (2.725, 96.108, 18.77)), (' H  33  TRP  CE3', ' H  33  TRP  HA ', -0.483, (3.417, 89.786, 15.339)), (' H  40  MET  HB2', ' H  43  LYS  HB2', -0.483, (11.18, 67.389, 21.695)), (' G 490  PHE  CD1', ' G 491  PRO  HD2', -0.481, (-14.405, 105.36, 33.587)), (' G 346  ARG HH21', ' H  52  ASP  HB3', -0.477, (2.859, 94.464, 17.373)), (' H 102  ALA  O  ', ' H 104  THR  N  ', -0.474, (-7.626, 90.892, 5.065)), (' H  52  ASP  OD1', ' H  54  SER  OG ', -0.474, (4.329, 97.243, 14.393)), (' L  10  THR  OG1', ' L 144  GLU  OE2', -0.474, (0.813, 54.91, 14.416)), (' B   1  ASP  HA ', ' B 101  PRO  HG3', -0.473, (-44.301, 109.168, 35.367)), (' E   1  NAG  O5 ', ' H  28  ASN  ND2', -0.47, (-0.534, 93.14, 2.941)), (' A 157  LYS  NZ ', ' A 185  GLN  OE1', -0.469, (-68.283, 76.696, 30.511)), (' H 127  PRO  HB3', ' H 153  TYR  HB3', -0.468, (31.601, 58.304, 21.179)), (' B  40  ALA  HB2', ' B  97  TYR  HE2', -0.465, (-38.345, 105.219, 22.474)), (' A  83  MET  HE2', ' A  86  LEU HD21', -0.463, (-45.139, 86.398, 39.152)), (' B 152  LYS  HB3', ' B 204  THR  OG1', -0.46, (-76.294, 95.228, 18.076)), (' B  45  LYS  HG2', ' B  90  ALA  HB2', -0.459, (-48.708, 93.069, 13.141)), (' G 394  ASN  HB3', ' G 516  GLU  HB2', -0.458, (-4.346, 118.876, 3.967)), (' A 232  LYS  HA ', ' A 232  LYS  HD2', -0.457, (-87.097, 57.808, 10.865)), (' B 120  PRO  HB3', ' B 146  PHE  HB3', -0.456, (-71.215, 89.36, 10.846)), (' H  23  LYS  HG2', ' H  78  THR HG23', -0.454, (17.936, 90.143, 12.013)), (' A 109  ALA  HB2', ' B  31  TYR  HE2', -0.453, (-28.005, 114.002, 28.396)), (' G 350  VAL HG22', ' G 422  ASN  HB3', -0.452, (-14.982, 106.618, 19.301)), (' A  29  PHE  O  ', ' A  31  ASN  N  ', -0.452, (-23.806, 93.891, 29.261)), (' H   4  LEU  HA ', ' H  23  LYS  O  ', -0.449, (14.708, 87.29, 7.875)), (' A  34  MET  HB3', ' A  79  LEU HD22', -0.448, (-33.081, 91.538, 31.394)), (' A  85  SER  O  ', ' A  85  SER  OG ', -0.447, (-46.665, 88.375, 46.121)), (' L  10  THR HG22', ' L 104  LYS  HB3', -0.447, (3.156, 58.576, 12.412)), (' B 115  ARG  NH1', ' B 177  ASP  O  ', -0.446, (-62.354, 90.846, 3.447)), (' H 201  THR  HB ', ' H 218  LYS  HE3', -0.444, (36.344, 38.709, 13.997)), (' B   2  ILE  N  ', ' B 101  PRO  HG3', -0.443, (-44.476, 109.77, 34.388)), (' H  38  ARG  CZ ', ' H  40  MET  HE3', -0.443, (11.138, 72.372, 25.261)), (' G 431  GLY  HA2', ' G 515  PHE  HD2', -0.442, (-11.045, 113.707, 1.45)), (' G 384  PRO  HA ', ' G 387  LEU  HG ', -0.441, (-11.537, 109.775, -4.84)), (' L  19  ALA  HB3', ' L  75  ILE  HB ', -0.438, (-3.559, 61.876, 2.502)), (' B 147  TYR  CG ', ' B 148  PRO  HA ', -0.438, (-65.7, 95.61, 9.194)), (' A 165  THR  OG1', ' A 213  ASN  HB3', -0.436, (-53.536, 70.093, 19.61)), (' A 105  VAL  HA ', ' A 111  ARG  NH1', -0.435, (-33.336, 105.828, 33.371)), (' B  37  ASN  HB2', ' B  57  ALA  HB2', -0.434, (-39.325, 112.395, 19.743)), (' H  91  THR HG23', ' H 118  THR  HA ', -0.433, (21.532, 71.476, 22.452)), (' A 106  MET  HG3', ' G 487  ASN HD21', -0.433, (-28.626, 109.187, 40.42)), (' H 179  GLN  NE2', ' H 185  SER  OG ', -0.433, (25.551, 57.814, 26.504)), (' H   4  LEU  HG ', ' H 110  TYR  HD2', -0.432, (11.214, 84.174, 6.986)), (' G 346  ARG  NH1', ' H  55  ASP  OD2', -0.428, (0.9, 96.898, 19.398)), (' L 141  TYR  O  ', ' L 199  HIS  HE1', -0.423, (3.581, 45.451, 13.923)), (' H   4  LEU  HG ', ' H 110  TYR  CD2', -0.423, (11.216, 84.237, 6.795)), (' G 502  GLY  O  ', ' G 506  GLN  HG3', -0.423, (-21.464, 90.472, 14.005)), (' H  33  TRP  HA ', ' H  33  TRP  HE3', -0.422, (3.772, 89.829, 15.468)), (' H 192  VAL HG11', ' H 202  TYR  CE1', -0.421, (27.019, 39.064, 10.689)), (' B  24  LYS  HA ', ' B  75  THR  O  ', -0.42, (-48.446, 114.155, 23.177)), (' A  60  TYR  OH ', ' A 301  SO4  O2 ', -0.418, (-34.8, 94.169, 42.613)), (' A 228  LYS  NZ ', ' B 126  PRO  HG2', -0.417, (-80.427, 72.261, 18.23)), (' A 111  ARG  NH1', ' B  99  GLY  HA2', -0.414, (-35.19, 106.583, 32.674)), (' A  53  TYR  CD1', ' A 102  PRO  HB2', -0.414, (-24.689, 100.66, 31.954)), (' H  36  TRP  CE2', ' H  81  LEU  HB2', -0.414, (13.501, 84.241, 19.032)), (' G 387  LEU  HA ', ' G 387  LEU HD23', -0.413, (-9.467, 112.572, -5.131)), (' G 454  ARG  NH2', ' G 469  SER  O  ', -0.411, (-12.11, 108.804, 28.606)), (' A 164  VAL HG12', ' A 214  HIS  HB2', -0.408, (-56.394, 70.809, 25.248)), (' L  35  TRP  CE2', ' L  73  LEU  HB2', -0.408, (-5.637, 69.292, 8.034)), (' A 160  PHE  HA ', ' A 161  PRO  HA ', -0.407, (-56.028, 75.35, 31.402)), (' H 134  PRO  HG3', ' H 197  LEU HD22', -0.406, (27.077, 35.878, 17.029)), (' B   4  LEU HD11', ' B  96  GLN  N  ', -0.405, (-43.663, 106.573, 26.328)), (' A 168  TRP  CH2', ' A 210  CYS  HB3', -0.404, (-64.71, 70.023, 14.52)), (' G 396  TYR  O  ', ' G 513  LEU  HA ', -0.402, (-7.425, 110.282, 5.932)), (' B 168  GLU  HA ', ' B 183  SER  O  ', -0.402, (-68.365, 85.196, 22.679)), (' B   6  GLN  O  ', ' B 107  GLN  NE2', -0.401, (-54.859, 106.568, 22.95)), (' A   5  VAL HG23', ' A  23  ALA  HB3', -0.401, (-31.313, 81.803, 27.266)), (' L  33  LEU  HG ', ' L  34  ALA  N  ', -0.4, (-5.414, 75.327, 10.427))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
