# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 570  ALA  HB1', ' B 963  VAL HG11', -0.647, (215.418, 184.26, 219.376)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.638, (225.976, 178.716, 261.225)), (' B 901  GLN HE21', ' B 905  ARG HH21', -0.625, (208.084, 185.559, 171.061)), (' A 105  ILE  HB ', ' A 239  GLN  HB2', -0.612, (170.806, 157.952, 247.633)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.594, (235.294, 187.691, 246.06)), (' B  94  SER  HB3', ' B 190  ARG  HB2', -0.592, (250.743, 189.086, 235.883)), (' B 393  THR  HB ', ' B 522  ALA  HA ', -0.579, (203.93, 230.689, 246.003)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.576, (248.1, 180.734, 254.361)), (' A  94  SER  HB2', ' A 190  ARG  HB2', -0.573, (163.355, 160.172, 234.336)), (' B 418  ILE  HA ', ' B 422  ASN HD22', -0.564, (184.226, 213.804, 262.023)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.563, (171.372, 141.351, 239.437)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.558, (182.689, 229.093, 218.349)), (' C  94  SER  HB3', ' C 190  ARG  HB2', -0.555, (182.72, 249.041, 236.96)), (' B 317  ASN  ND2', ' C 737  ASP  OD2', -0.551, (218.279, 210.966, 219.909)), (' C 278  LYS  HE3', ' C 287  ASP  HB2', -0.549, (190.521, 236.15, 218.232)), (' C 127  VAL HG21', ' C1302  NAG  H62', -0.545, (188.314, 249.719, 256.516)), (' C 821  LEU HD11', ' C 939  SER  HB3', -0.543, (199.733, 231.617, 187.369)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.543, (233.824, 198.703, 217.853)), (' B 821  LEU HD11', ' B 939  SER  HB2', -0.543, (227.532, 183.733, 187.755)), (' B 762  GLN  OE1', ' B 765  ARG  NH1', -0.54, (189.535, 188.318, 214.244)), (' C 418  ILE  HA ', ' C 422  ASN HD22', -0.532, (194.856, 179.34, 261.269)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.532, (172.025, 184.142, 187.25)), (' A 544  ASN HD21', ' A 579  PRO  HB3', -0.527, (225.308, 172.377, 238.355)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.526, (261.838, 205.938, 242.612)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.526, (198.75, 166.377, 188.624)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.519, (181.278, 170.471, 217.568)), (' C 393  THR  HB ', ' C 522  ALA  HA ', -0.517, (170.67, 187.62, 245.391)), (' B 360  ASN  H  ', ' B 523  THR  HB ', -0.514, (205.45, 233.75, 251.249)), (' C 204  TYR  HA ', ' C 225  PRO  HA ', -0.51, (191.122, 238.287, 237.923)), (' C 323  THR  OG1', ' C 324  GLU  OE1', -0.509, (161.985, 210.979, 232.827)), (' B 193  VAL HG23', ' B 223  LEU HD22', -0.507, (240.82, 190.33, 233.522)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.504, (184.308, 166.349, 217.838)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.504, (229.626, 166.404, 284.727)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.503, (165.549, 248.33, 241.15)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.502, (256.717, 197.106, 234.037)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.502, (177.396, 228.703, 218.663)), (' B  93  ALA  HB3', ' B 266  TYR  HB2', -0.501, (248.918, 195.885, 233.402)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.501, (171.29, 145.448, 238.616)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.492, (181.669, 186.397, 183.035)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.491, (161.663, 250.46, 241.701)), (' B 276  LEU  HB3', ' B 289  VAL  HB ', -0.49, (232.012, 195.127, 218.943)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.485, (235.89, 204.132, 218.567)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.484, (213.195, 193.454, 144.283)), (' C 226  LEU  HG ', ' C 227  VAL HG23', -0.483, (192.901, 242.42, 242.972)), (' B  39  PRO  HG2', ' B  51  THR HG21', -0.482, (229.675, 190.749, 227.705)), (' B 377  PHE  HE2', ' B 384  PRO  HB3', -0.479, (208.926, 214.283, 255.126)), (' C 555  SER  HB3', ' C 586  ASP  HB2', -0.479, (160.438, 194.389, 225.411)), (' B 987  PRO  HG2', ' C 413  GLY  HA3', -0.477, (197.103, 187.562, 248.409)), (' B 724  THR HG23', ' B 934  ILE HD12', -0.472, (220.825, 190.522, 183.155)), (' B 357  ARG  NH1', ' B 396  TYR  OH ', -0.471, (196.245, 231.951, 251.01)), (' B  92  PHE  HB3', ' B 192  PHE  HB2', -0.471, (245.239, 191.774, 238.1)), (' C 916  LEU HD22', ' C 923  ILE HD13', -0.47, (199.914, 219.492, 163.603)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.466, (181.32, 225.751, 201.899)), (' B 995  ARG  NH2', ' C 994  ASP  OD2', -0.463, (206.078, 200.032, 233.97)), (' B 342  PHE  HB2', ' B1307  NAG  H82', -0.462, (206.416, 223.389, 265.323)), (' A1029  MET  O  ', ' A1033  VAL  HB ', -0.461, (186.648, 201.532, 180.708)), (' B 518  LEU HD21', ' B 546  LEU HD13', -0.46, (207.975, 223.948, 236.884)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.459, (258.58, 203.68, 241.551)), (' C 189  LEU  HB3', ' C 208  THR  HB ', -0.459, (185.001, 249.312, 230.332)), (' B  36  VAL HG23', ' B 222  ALA  HA ', -0.458, (239.357, 189.06, 226.86)), (' B 324  GLU  H  ', ' B 539  VAL HG12', -0.457, (226.268, 225.914, 232.897)), (' C 724  THR HG23', ' C 934  ILE HD12', -0.455, (197.232, 222.541, 182.966)), (' A 164  ASN  OD1', ' A 165  ASN  N  ', -0.454, (170.829, 165.03, 263.744)), (' B 592  PHE  HB3', ' C 740  MET  HE1', -0.452, (217.875, 217.249, 221.461)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.451, (194.885, 230.4, 232.617)), (' A 374  PHE  HA ', ' A 436  TRP  HB3', -0.449, (217.939, 166.246, 272.784)), (' C  36  VAL HG13', ' C 222  ALA  HA ', -0.448, (188.629, 238.892, 228.371)), (' A 569  ILE  HA ', ' B  47  VAL HG21', -0.447, (223.553, 184.581, 218.756)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.447, (186.495, 168.186, 208.279)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.444, (172.821, 180.685, 230.979)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.443, (229.213, 217.204, 189.636)), (' A  97  LYS  HG2', ' A 186  PHE  HD1', -0.441, (157.795, 152.474, 231.618)), (' A 756  TYR  OH ', ' A 994  ASP  OD1', -0.44, (194.998, 204.995, 232.106)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.439, (162.742, 171.714, 247.921)), (' B 866  THR  H  ', ' B 869  MET  HE3', -0.437, (205.685, 173.55, 195.064)), (' C 156  GLU  OE2', ' C 158  ARG  NH1', -0.436, (172.811, 257.057, 257.487)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.436, (199.324, 214.514, 143.774)), (' A  14  GLN  HB3', ' A 158  ARG  HE ', -0.436, (161.18, 148.811, 258.562)), (' B 156  GLU  OE2', ' B 246  ARG  NH2', -0.434, (263.646, 192.237, 255.087)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.433, (233.536, 204.77, 208.787)), (' A 528  LYS  HA ', ' A 528  LYS  HD3', -0.433, (218.209, 171.539, 247.741)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.432, (188.016, 191.819, 143.605)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.428, (223.741, 190.225, 182.776)), (' C  16  VAL  HB ', ' C 140  PHE  HZ ', -0.427, (169.703, 254.08, 256.299)), (' B1090  PRO  O  ', ' C 913  GLN  NE2', -0.427, (204.095, 209.462, 156.338)), (' A 895  GLN  NE2', ' C1074  ASN  OD1', -0.427, (176.021, 211.634, 163.136)), (' C 986  PRO  HA ', ' C 989  ALA  HB3', -0.426, (211.125, 207.972, 241.83)), (' C 360  ASN  H  ', ' C 523  THR  HB ', -0.425, (167.048, 187.213, 250.81)), (' A 393  THR  HA ', ' A 522  ALA  HA ', -0.422, (223.761, 184.264, 253.918)), (' C 128  ILE HD13', ' C 170  TYR  HD2', -0.422, (192.228, 242.844, 250.489)), (' A 278  LYS  HB2', ' A 278  LYS  HE3', -0.421, (173.339, 176.558, 216.338)), (' B  21  ARG HH21', ' B  79  PHE  HD2', -0.42, (258.948, 199.28, 248.203)), (' A 189  LEU  HB3', ' A 208  THR  HB ', -0.42, (161.493, 162.579, 228.095)), (' A 996  LEU  HA ', ' A 996  LEU HD23', -0.419, (188.821, 197.766, 230.777)), (' B 977  LEU HD22', ' B 993  ILE HG12', -0.416, (203.79, 185.684, 234.507)), (' A  93  ALA  HB3', ' A 266  TYR  HB2', -0.416, (169.816, 158.216, 231.984)), (' A  21  ARG HH21', ' A  79  PHE  HD2', -0.416, (167.426, 146.717, 245.668)), (' A 566  GLY  HA3', ' A 575  ALA  HB3', -0.415, (224.405, 175.635, 225.243)), (' A 117  LEU HD22', ' A 231  ILE HD13', -0.414, (171.659, 168.799, 248.599)), (' A 566  GLY  N  ', ' A 575  ALA  O  ', -0.412, (223.738, 176.145, 227.519)), (' B 885  GLY  HA2', ' B 901  GLN  NE2', -0.412, (207.535, 183.966, 170.699)), (' A 978  ASN  HB3', ' C 547  THR  HB ', -0.411, (175.315, 201.159, 236.152)), (' C 102  ARG  NH2', ' C 154  GLU  OE1', -0.411, (183.601, 256.652, 249.827)), (' C  14  GLN  HB3', ' C 158  ARG  HE ', -0.41, (172.282, 254.276, 261.09)), (' A 206  LYS  NZ ', ' A 224  GLU  OE2', -0.409, (161.584, 173.291, 228.719)), (' C1139  ASP  HB3', ' C1142  GLN  HB2', -0.409, (191.522, 201.765, 135.652)), (' B 132  GLU  OE1', ' B 165  ASN  ND2', -0.408, (237.522, 192.869, 265.309)), (' A 903  ALA  HB2', ' A 916  LEU HD12', -0.405, (183.583, 194.638, 161.211)), (' A 324  GLU  OE2', ' A 537  LYS  NZ ', -0.403, (209.034, 159.318, 231.244)), (' B 907  ASN  ND2', ' B 911  VAL  O  ', -0.402, (209.482, 194.856, 161.023)), (' A 189  LEU HD12', ' A 210  ILE HD13', -0.402, (162.729, 159.204, 227.041)), (' A 907  ASN HD21', ' A 913  GLN  HG3', -0.401, (189.893, 197.03, 159.316)), (' C 971  GLY  HA3', ' C 995  ARG HH21', -0.401, (196.809, 207.629, 234.911)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.4, (173.126, 149.311, 230.518))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
