# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 147 ', 'PRO', None, (-30.978999999999985, 23.83799999999999, 53.46000000000003)), ('H', ' 149 ', 'PRO', None, (-34.867000000000004, 22.065999999999992, 48.967)), ('L', '   8 ', 'PRO', None, (-22.607, 14.327000000000002, 20.244)), ('L', '  95 ', 'PRO', None, (-12.701000000000002, -0.36199999999999966, 36.445)), ('L', ' 141 ', 'PRO', None, (-31.562000000000005, 29.389, 19.908)), ('M', ' 147 ', 'PRO', None, (-67.525, -78.351, 88.78)), ('M', ' 149 ', 'PRO', None, (-62.876999999999995, -76.769, 84.98100000000005)), ('N', '   8 ', 'PRO', None, (-70.53799999999998, -70.28199999999998, 54.47200000000001)), ('N', '  95 ', 'PRO', None, (-82.41599999999994, -54.69599999999999, 68.41600000000001)), ('N', ' 141 ', 'PRO', None, (-61.339999999999954, -85.40899999999995, 56.36700000000001))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' H  35  ASN HD21', ' H  95  GLU  HG2', -0.769, (-23.064, -2.643, 38.077)), (' N  33  LEU HD22', ' N  71  PHE  CG ', -0.733, (-71.892, -56.513, 54.766)), (' L 142  ARG  NH1', ' L 401  HOH  O  ', -0.72, (-31.063, 23.548, 29.626)), (' L 212  GLY  H  ', ' L 302  PGE  H22', -0.705, (-30.727, 54.353, 41.435)), (' H  35  ASN  ND2', ' H  95  GLU  HG2', -0.677, (-23.316, -2.714, 38.074)), (' B 367  VAL HG23', ' B 368  LEU HD12', -0.606, (-38.353, -16.473, 71.592)), (' N  22  ASN  HB3', ' N  24  LYS  NZ ', -0.581, (-73.518, -64.78, 51.677)), (' H 119  PRO  HB3', ' H 145  TYR  HB3', -0.554, (-33.214, 30.661, 51.184)), (' L 108  ARG  NH1', ' L 109  THR  O  ', -0.552, (-37.171, 29.142, 17.513)), (' M  71  ARG  HB3', ' M  78  LEU HD12', -0.546, (-71.82, -48.056, 83.881)), (' N  37  GLN  HB2', ' N  47  LEU HD11', -0.538, (-61.192, -61.484, 61.697)), (' N 105  GLU  OE2', ' N 142  ARG  NH2', -0.533, (-63.285, -78.019, 62.322)), (' M  59  TYR  HB2', ' M  64  LYS  HG3', -0.533, (-84.359, -55.707, 78.549)), (' L 108  ARG  HD2', ' L 171  SER  HB2', -0.531, (-38.897, 25.586, 20.721)), (' N 148  TRP  HE1', ' N 177  SER  HG ', -0.531, (-70.34, -93.939, 69.654)), (' M 119  PRO  HB3', ' M 145  TYR  HB3', -0.526, (-64.858, -85.176, 87.189)), (' L  33  LEU HD22', ' L  71  PHE  CG ', -0.517, (-21.294, 0.903, 21.478)), (' M  82  MET  HE1', ' M 109  VAL HG21', -0.508, (-72.489, -63.645, 84.612)), (' N  33  LEU HD22', ' N  71  PHE  CD2', -0.507, (-72.909, -57.027, 55.121)), (' B 340  GLU  OE1', ' B 356  LYS  NZ ', -0.506, (-50.288, -13.375, 79.405)), (' A 485  GLY  H  ', ' A 488  CYS  HB2', -0.497, (-17.016, -13.351, 39.296)), (' B 431  GLY  HA2', ' B 515  PHE  CD2', -0.494, (-47.261, -16.482, 61.605)), (' N 145  LYS  HB3', ' N 197  THR  HB ', -0.491, (-70.332, -93.289, 58.725)), (' L 113  PRO  HB3', ' L 139  PHE  HB3', -0.49, (-33.822, 34.714, 24.172)), (' N 113  PRO  HB3', ' N 139  PHE  HB3', -0.483, (-60.013, -90.509, 61.178)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.477, (-48.94, -38.066, 27.199)), (' N  23  CYS  C  ', ' N  24  LYS  HD3', -0.477, (-74.755, -62.502, 53.351)), (' L 190  LYS  HD2', ' L 210  ASN  HB3', -0.472, (-26.851, 56.844, 37.304)), (' N 211  ARG HH22', ' N 302  EDO  H21', -0.471, (-73.258, -112.654, 78.988)), (' N 126  LYS  HA ', ' N 126  LYS  HD2', -0.454, (-69.353, -103.959, 90.801)), (' B 379  CYS  HA ', ' B 432  CYS  HA ', -0.454, (-45.475, -21.838, 61.222)), (' B 378  LYS  HG2', ' B 380  TYR  CZ ', -0.448, (-46.421, -26.46, 58.747)), (' H 193  THR HG23', ' H 210  LYS  HE2', -0.445, (-50.352, 43.769, 45.124)), (' N  22  ASN  CB ', ' N  24  LYS  NZ ', -0.443, (-72.848, -65.438, 52.111)), (' N 125  LEU  O  ', ' N 183  LYS  HD2', -0.442, (-71.133, -103.212, 87.83)), (' N  22  ASN  HB3', ' N  24  LYS  HZ2', -0.441, (-73.361, -64.54, 52.425)), (' H 216  CYS  HB3', ' L 214  CYS  HB2', -0.437, (-37.726, 57.923, 39.048)), (' L 302  PGE  H2 ', ' L 302  PGE  H52', -0.431, (-32.817, 52.398, 43.106)), (' H 142  VAL HG11', ' H 150  VAL HG11', -0.424, (-36.904, 30.277, 47.324)), (' N  22  ASN  HB3', ' N  24  LYS  HZ1', -0.423, (-73.348, -65.273, 51.655)), (' M 165  THR HG23', ' M 178  LEU HD21', -0.422, (-59.08, -84.84, 78.754)), (' M  35  ASN  ND2', ' M  95  GLU  OE1', -0.419, (-72.182, -52.432, 70.802)), (' L  13  VAL  HB ', ' L  78  LEU HD22', -0.417, (-34.571, 15.206, 17.801)), (' B 392  PHE  HD1', ' B 517  LEU  HG ', -0.416, (-48.956, -9.424, 59.379)), (' H  94  ARG  O  ', ' H 100  MET  HA ', -0.413, (-27.426, -3.666, 36.866)), (' N 125  LEU  HA ', ' N 125  LEU HD23', -0.405, (-69.634, -101.337, 85.314)), (' H 196  CYS  SG ', ' H 209  LYS  HB3', -0.403, (-42.351, 37.813, 47.188))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
