# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('C', '   8 ', 'PRO', None, (251.37599999999998, 193.033, 162.326)), ('D', '   8 ', 'PRO', None, (174.61799999999997, 182.6510000000001, 162.326)), ('L', '   8 ', 'PRO', None, (204.00600000000003, 254.316, 162.326))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A1142  GLN  N  ', ' A1143  PRO  CD ', -0.541, (217.062, 213.545, 321.271)), (' K1142  GLN  N  ', ' K1143  PRO  CD ', -0.538, (208.849, 201.993, 321.188)), (' B1142  GLN  N  ', ' B1143  PRO  CD ', -0.528, (203.275, 214.677, 321.187)), (' K  81  ASN  N  ', ' K  82  PRO  CD ', -0.508, (232.774, 158.409, 212.43)), (' A  96  GLU  OE2', ' A 190  ARG  NH2', -0.507, (231.877, 262.473, 217.431)), (' A  81  ASN  N  ', ' A  82  PRO  CD ', -0.507, (243.403, 255.56, 212.59)), (' B  81  ASN  N  ', ' B  82  PRO  CD ', -0.505, (153.886, 216.132, 212.444)), (' B  96  GLU  OE2', ' B 190  ARG  NH2', -0.503, (153.597, 202.681, 217.426)), (' K  96  GLU  OE2', ' K 190  ARG  NH2', -0.483, (244.396, 164.856, 217.512)), (' K 898  PHE  N  ', ' K 899  PRO  CD ', -0.477, (232.759, 206.224, 291.289)), (' B 898  PHE  N  ', ' B 899  PRO  CD ', -0.47, (195.338, 192.057, 291.373)), (' A 898  PHE  N  ', ' A 899  PRO  CD ', -0.467, (201.759, 231.693, 291.393)), (' B  81  ASN  N  ', ' B  82  PRO  HD3', -0.461, (153.349, 216.064, 212.468)), (' K  81  ASN  N  ', ' K  82  PRO  HD3', -0.456, (232.787, 158.012, 212.907)), (' A  81  ASN  N  ', ' A  82  PRO  HD3', -0.45, (243.767, 255.756, 212.841)), (' K 792  PRO  HA ', ' K 793  PRO  HD3', -0.44, (243.018, 212.897, 284.603)), (' B 862  PRO  HA ', ' B 863  PRO  HD3', -0.436, (200.055, 187.961, 252.775)), (' B  44  ARG  O  ', ' B 283  GLY  HA2', -0.435, (177.429, 193.668, 232.696)), (' A  44  ARG  O  ', ' A 283  GLY  HA2', -0.431, (212.183, 246.793, 232.825)), (' K  44  ARG  O  ', ' K 283  GLY  HA2', -0.425, (240.326, 189.856, 232.715)), (' A 986  PRO  N  ', ' A 987  PRO  CD ', -0.425, (197.383, 218.639, 211.343)), (' K 986  PRO  HB2', ' K 987  PRO  HD3', -0.423, (223.694, 218.034, 211.434)), (' K1090  PRO  HD3', ' K1095  PHE  CE2', -0.423, (201.702, 197.82, 303.443)), (' A 986  PRO  HB2', ' A 987  PRO  HD3', -0.422, (196.257, 217.732, 211.464)), (' K 986  PRO  N  ', ' K 987  PRO  CD ', -0.42, (223.891, 216.583, 211.214)), (' B 986  PRO  HB2', ' B 987  PRO  HD3', -0.42, (210.139, 194.247, 211.489)), (' A1090  PRO  HD3', ' A1095  PHE  CE2', -0.419, (224.605, 208.908, 303.495)), (' B1090  PRO  HD3', ' B1095  PHE  CE2', -0.416, (203.68, 223.289, 303.491)), (' A 210  ILE HG12', ' A 212  LEU  H  ', -0.416, (234.213, 263.003, 230.507)), (' K 862  PRO  HA ', ' K 863  PRO  HD3', -0.415, (234.118, 212.379, 252.826)), (' K  64  TRP  CH2', ' K 214  ARG  O  ', -0.414, (235.613, 157.107, 228.314)), (' B 210  ILE HG12', ' B 212  LEU  H  ', -0.414, (152.015, 204.507, 230.522)), (' B 986  PRO  N  ', ' B 987  PRO  CD ', -0.411, (208.716, 194.747, 211.229)), (' K 210  ILE HG12', ' K 212  LEU  H  ', -0.41, (243.769, 162.168, 230.739)), (' B  79  PHE  CZ ', ' B 242  LEU  HB2', -0.409, (149.374, 209.82, 211.035)), (' K  79  PHE  CZ ', ' K 242  LEU  HB2', -0.409, (240.441, 157.972, 211.217)), (' A  79  PHE  CZ ', ' A 242  LEU  HB2', -0.406, (240.077, 262.675, 211.063)), (' A  64  TRP  CH2', ' A 214  ARG  O  ', -0.404, (243.008, 258.528, 228.336)), (' B  64  TRP  CH2', ' B 214  ARG  O  ', -0.404, (151.579, 214.083, 228.645)), (' K 898  PHE  HB3', ' K 899  PRO  HD3', -0.403, (233.202, 205.308, 290.586)), (' C  44  ALA  HA ', ' C  45  PRO  HD3', -0.401, (238.851, 209.625, 159.863)), (' K 811  LYS  HA ', ' K 812  PRO  HD3', -0.401, (248.44, 203.465, 267.47))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
