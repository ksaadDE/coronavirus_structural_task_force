# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  80 ', 'LEU', 0.28875918224292124, (-22.477, 81.754, 47.127)), ('A', '  85 ', 'SER', 0.08534085819937887, (-29.359, 83.259, 52.222)), ('A', ' 162 ', 'LEU', 0.04541731283467736, (-27.592, 76.30600000000004, 67.574)), ('A', ' 200 ', 'LYS', 0.05714710596704103, (1.71, 72.39700000000003, 63.40899999999997)), ('A', ' 228 ', 'LYS', 0.13387540287521368, (-3.0290000000000017, 54.065, 83.182)), ('B', '  24 ', 'SER', 0.03585095305670626, (-1.136, 51.514, 13.886)), ('B', '  80 ', 'LEU', 0.10808441172157482, (5.084, 45.511, 38.382)), ('B', '  80 ', 'LEU', 0.20465217253391282, (5.088000000000001, 45.516, 38.375)), ('B', ' 295 ', 'GLU', 0.06042530236799328, (26.681999999999977, 65.264, 71.071)), ('C', '   3 ', 'ARG', 0.03176112038099635, (11.635999999999992, -4.554, 58.39)), ('C', '  51 ', 'GLU', 0.21654865030258807, (1.9109999999999996, 2.566, 59.083)), ('C', '  58 ', 'LEU', 0.12033510465477236, (10.75, 19.684999999999988, 53.055)), ('C', ' 126 ', 'LYS', 0.16429751492033048, (-10.647, 35.31300000000001, 48.86)), ('C', ' 133 ', 'GLN', 0.012842210334894534, (-8.268999999999993, 29.184000000000005, 50.813)), ('C', ' 190 ', 'LYS', 0.0, (-4.579, 76.477, 48.073))]
data['cbeta'] = []
data['probe'] = [(' C  83  TYR  OH ', ' C 146  ASN  ND2', -0.608, (-2.082, 23.219, 57.604)), (' C 181  CYS  HA ', ' C 238  GLU  O  ', -0.603, (-11.305, 47.716, 44.177)), (' C 222  ILE HG22', ' C 223  PRO  O  ', -0.6, (0.926, 67.154, 53.701)), (' B 136  TYR  CZ ', ' B 508  EDO  H21', -0.564, (22.989, 47.767, 50.231)), (' C 296 BTYR  CE1', ' C 300  ILE HD11', -0.56, (-14.752, 50.027, 70.316)), (' C 136  TYR  CE1', ' C 506  EDO  H11', -0.56, (-12.344, 33.574, 55.576)), (' A 157  LYS  NZ ', ' A 162  LEU  O  ', -0.558, (-25.026, 74.756, 65.26)), (' B 270  CYS  SG ', ' C 223  PRO  HG2', -0.535, (2.386, 67.339, 58.763)), (' B 136  TYR  CE2', ' B 508  EDO  H21', -0.535, (23.342, 46.799, 50.177)), (' A 296 ATYR  CE1', ' A 300  ILE HD11', -0.518, (-17.019, 82.521, 83.585)), (' C 136  TYR  C  ', ' C 136  TYR  CD2', -0.502, (-11.673, 29.573, 55.46)), (' B 120  LEU  O  ', ' B 508  EDO  H11', -0.499, (22.627, 48.489, 53.455)), (' B 212  SER  OG ', ' B 507  EDO  C2 ', -0.498, (21.08, 52.065, 75.9)), (' C 136  TYR  CG ', ' C 506  EDO  O2 ', -0.489, (-11.157, 32.344, 53.986)), (' B 226  CYS  SG ', ' B 227  GLY  N  ', -0.483, (1.323, 38.77, 88.478)), (' C  95  TYR  CD1', ' C 144  ALA  HB3', -0.467, (-9.241, 28.136, 65.325)), (' A 210 BTHR HG22', ' A 212  SER  H  ', -0.464, (-6.752, 74.445, 81.878)), (' B  80 BLEU  HA ', ' B  80 BLEU HD23', -0.463, (6.71, 45.457, 38.907)), (' C  75  THR  OG1', ' C 505  EDO  H21', -0.462, (10.693, 31.638, 47.142)), (' A   5  ILE HG13', ' A  21  VAL HG22', -0.457, (-31.153, 95.979, 32.799)), (' C 283  TYR  CE1', ' C 292  LYS  HD3', -0.454, (-25.599, 39.779, 72.243)), (' B 177 BASN  CG ', ' B 177  ASN  O  ', -0.452, (20.705, 36.821, 55.684)), (' B  11  VAL HG22', ' B 503   CL CL  ', -0.449, (10.37, 39.383, 32.09)), (' B 162 BLEU HD12', ' B 163  GLY  H  ', -0.447, (6.248, 58.682, 56.014)), (' B 166  ARG  HA ', ' B 243  MET  HE1', -0.447, (12.624, 50.367, 61.64)), (' B  95  TYR  CD1', ' B 144  ALA  HB3', -0.442, (18.724, 57.155, 45.196)), (' B 268  TYR  CE1', ' C 208  MET  HE3', -0.441, (-0.39, 54.641, 63.37)), (' C  10  THR  HA ', ' C 503   CL CL  ', -0.44, (3.359, 15.587, 49.705)), (' C 183  ARG  HD3', ' C 185  LEU HD21', -0.436, (-7.492, 56.76, 49.382)), (' B 212  SER  OG ', ' B 507  EDO  H21', -0.433, (21.406, 51.799, 76.35)), (' B 178  LEU  O  ', ' B 201  GLY  HA2', -0.429, (16.818, 35.545, 60.868)), (' C  15  ASN  O  ', ' C 503   CL CL  ', -0.424, (1.646, 15.412, 48.61)), (' A 296 ATYR  OH ', ' A 298  GLY  HA3', -0.419, (-19.141, 81.766, 84.823)), (' A 162 BLEU HD12', ' A 163  GLY  H  ', -0.419, (-25.677, 77.165, 68.9)), (' A 296 ATYR  CZ ', ' A 298  GLY  HA3', -0.415, (-18.868, 82.015, 85.134)), (' C 186  ASN HD21', ' C 194  GLN  HG3', -0.414, (-7.133, 67.3, 43.395)), (' B 270  CYS  SG ', ' C 223  PRO  CG ', -0.414, (1.621, 67.807, 58.556)), (' A  33  PRO  HB2', ' A  58  LEU  HG ', -0.413, (-26.953, 81.177, 41.173)), (' B 136  TYR  CE1', ' B 508  EDO  H21', -0.412, (22.673, 47.833, 50.467)), (' C 122  GLN  NE2', ' C 277  THR  OG1', -0.411, (-19.05, 41.095, 63.171)), (' C 191  THR  HB ', ' C 226  CYS  SG ', -0.41, (0.771, 75.481, 48.32)), (' C 166  ARG  HA ', ' C 243  MET  HE1', -0.408, (-5.061, 45.753, 60.409)), (' A  61  ASP  C  ', ' A  61  ASP  OD1', -0.407, (-16.775, 81.63, 33.933)), (' A 283  TYR  CD1', ' A 290  LEU HD11', -0.403, (-18.04, 95.294, 79.983)), (' B 125  LEU  HA ', ' B 125  LEU HD12', -0.403, (21.423, 41.492, 56.037)), (' A 166  ARG  HA ', ' A 243  MET  HE1', -0.401, (-13.408, 77.304, 70.047)), (' B 263  GLU  O  ', ' B 273  TYR  HA ', -0.4, (12.914, 61.799, 61.523))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
