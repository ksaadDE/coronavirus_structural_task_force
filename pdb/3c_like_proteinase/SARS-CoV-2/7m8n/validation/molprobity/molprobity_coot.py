# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.04790282995388266, (-3.967, 21.414, -16.345)), ('B', ' 154 ', 'TYR', 0.04985504832833099, (-14.340000000000005, -3.156, -2.792)), ('B', ' 256 ', 'GLN', 0.02827200622271914, (-11.504, -20.168, -16.185)), ('B', ' 277 ', 'ASN', 0.0030827679616584635, (11.675999999999995, -14.694, -31.272))]
data['omega'] = []
data['rota'] = [('A', '  24 ', 'THR', 0.0013479450899467338, (-32.857, -5.038, -20.979)), ('A', '  27 ', 'LEU', 0.29314954371804003, (-24.28800000000001, 0.566, -20.117)), ('A', '  74 ', 'GLN', 0.056859116393110934, (-32.021, 7.327, -9.404)), ('A', '  90 ', 'LYS', 0.027517578689089717, (-31.551, 15.763000000000002, -19.603)), ('B', '  47 ', 'GLU', 0.12223842424336567, (23.83, 18.517000000000003, 3.4519999999999995)), ('B', '  49 ', 'MET', 0.0, (21.141, 14.145, 3.4680000000000004)), ('B', '  57 ', 'LEU', 0.00337756967469755, (17.102, 16.895000000000003, 13.260999999999997)), ('B', '  69 ', 'GLN', 0.14184062932226352, (-0.864, 23.079000000000008, 1.917)), ('B', '  73 ', 'VAL', 0.064670110161727, (-5.59, 26.344, 2.111)), ('B', '  74 ', 'GLN', 0.24486215065095324, (-2.9379999999999993, 26.077, 4.811)), ('B', '  75 ', 'LEU', 2.1415117063730834e-05, (-3.299, 23.244, 7.322)), ('B', '  93 ', 'THR', 0.002638622812925137, (-8.585000000000004, 20.004, 10.419)), ('B', ' 110 ', 'GLN', 0.18192032348118406, (2.639, -8.040000000000001, -5.602)), ('B', ' 177 ', 'LEU', 0.16907018447343977, (2.9930000000000017, 3.644000000000003, 5.437000000000001)), ('B', ' 232 ', 'LEU', 0.1473592399644144, (15.394000000000007, -26.538000000000025, -11.697)), ('B', ' 236 ', 'LYS', 0.1017310060758433, (18.817000000000007, -21.497, -13.961000000000002)), ('B', ' 245 ', 'ASP', 0.003915286204841362, (0.9769999999999992, -21.762000000000008, -2.802)), ('B', ' 253 ', 'LEU', 0.0, (-7.229, -19.129, -13.798000000000002)), ('B', ' 257 ', 'THR', 0.01812930844334389, (-9.252, -21.590000000000014, -18.953)), ('B', ' 298 ', 'ARG', 0.1322749225186882, (-10.177, -8.685, -12.16))]
data['cbeta'] = []
data['probe'] = [(' B  13  VAL HG12', ' B  17  MET  HE2', -1.074, (-3.032, 10.099, -3.127)), (' B 257  THR HG22', ' B 259  ILE  H  ', -0.858, (-7.151, -23.584, -18.843)), (' B 224  THR HG22', ' B 225  THR  H  ', -0.834, (3.353, -31.349, -16.149)), (' B 107  GLN  HB2', ' B 110  GLN  NE2', -0.807, (3.707, -10.344, -2.16)), (' B 233  VAL HG21', ' B 269  LYS  HD2', -0.803, (12.675, -27.259, -18.069)), (' A  13  VAL HG12', ' A  17  MET  HE3', -0.784, (-14.955, 8.865, -16.241)), (' B  13  VAL HG12', ' B  17  MET  CE ', -0.763, (-2.693, 9.773, -3.646)), (' A  17  MET  HE1', ' A  30  LEU HD13', -0.763, (-16.982, 9.822, -18.219)), (' B  17  MET  HE1', ' B 148  VAL HG22', -0.754, (-0.385, 8.949, -2.779)), (' A  50  LEU  O  ', ' A 188  ARG  HD2', -0.751, (-27.22, -3.728, -40.107)), (' A 235  MET  HE3', ' A 639  HOH  O  ', -0.741, (6.555, 4.242, -49.649)), (' A  13  VAL  CG1', ' A  17  MET  HE3', -0.737, (-15.218, 9.674, -16.944)), (' A  24  THR HG23', ' A 579  HOH  O  ', -0.725, (-33.442, -4.759, -24.5)), (' A 188  ARG  HG2', ' A 190  THR  OG1', -0.722, (-24.719, -2.696, -40.232)), (' B  92  ASP  OD1', ' B  93  THR HG22', -0.712, (-6.448, 22.935, 9.987)), (' B 107  GLN  HB2', ' B 110  GLN HE22', -0.701, (3.115, -10.632, -1.057)), (' B 107  GLN  CB ', ' B 110  GLN HE22', -0.689, (3.952, -10.326, -0.952)), (' B  17  MET  HE3', ' B 507  HOH  O  ', -0.683, (-0.583, 10.136, -4.633)), (' B 245  ASP  N  ', ' B 245  ASP  OD1', -0.668, (2.234, -23.087, -2.153)), (' B 224  THR HG22', ' B 225  THR  N  ', -0.664, (4.06, -31.305, -16.182)), (' A 231  ASN  O  ', ' A 235  MET  HG3', -0.642, (7.533, 5.265, -46.555)), (' B  13  VAL  CG1', ' B  17  MET  HE2', -0.64, (-2.988, 8.836, -2.843)), (' B 257  THR HG23', ' B 259  ILE HG12', -0.636, (-6.906, -23.232, -20.395)), (' B  17  MET  HE1', ' B 148  VAL  CG2', -0.598, (-1.097, 8.276, -2.558)), (' A  92  ASP  OD1', ' A  93  THR HG23', -0.597, (-32.581, 16.034, -10.475)), (' A  17  MET  HE1', ' A  30  LEU  CD1', -0.594, (-18.03, 10.306, -17.864)), (' B 227  LEU HD11', ' B 247  VAL HG21', -0.593, (3.037, -26.346, -8.423)), (' B 236  LYS  HG3', ' B 237  TYR  CD1', -0.592, (17.458, -21.668, -17.514)), (' B  51  ASN  HA ', ' B 188  ARG  HD2', -0.59, (24.053, 10.206, 6.24)), (' A   4  ARG  NH2', ' A 505  HOH  O  ', -0.578, (4.167, -2.131, -14.786)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.555, (0.362, 3.617, -5.604)), (' B  67  LEU HD12', ' B  74  GLN  NE2', -0.541, (2.513, 27.582, 5.812)), (' A 301  SER  HB2', ' A 506  HOH  O  ', -0.536, (11.146, 17.501, -19.866)), (' B 227  LEU HD12', ' B 262  LEU HD21', -0.533, (4.175, -27.801, -10.702)), (' B 232  LEU HD22', ' B 575  HOH  O  ', -0.522, (14.163, -28.189, -8.612)), (' A 505  HOH  O  ', ' B   5  LYS  HD3', -0.519, (3.386, -2.76, -14.961)), (' B 257  THR HG22', ' B 259  ILE  N  ', -0.518, (-6.999, -24.131, -18.872)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.511, (-9.625, 8.097, -21.949)), (' B 190  THR  O  ', ' B 192  GLN  HG2', -0.502, (23.313, 4.803, -1.11)), (' B 253  LEU  O  ', ' B 257  THR  HB ', -0.498, (-7.685, -20.394, -16.709)), (' B  49  MET  HA ', ' B  49  MET  HE3', -0.497, (19.222, 13.964, 3.44)), (' B 107  GLN  H  ', ' B 110  GLN  NE2', -0.49, (3.153, -8.705, -0.975)), (' B  56  ASP  O  ', ' B  60  ARG  HG2', -0.49, (17.745, 18.733, 15.609)), (' B 107  GLN  CB ', ' B 110  GLN  NE2', -0.487, (4.129, -9.914, -1.253)), (' B 110  GLN  HG2', ' B 606  HOH  O  ', -0.485, (-0.195, -9.32, -4.505)), (' B 224  THR  CG2', ' B 225  THR  H  ', -0.485, (3.25, -30.988, -16.379)), (' A 152  ILE  O  ', ' A 152  ILE HG22', -0.483, (-5.812, 17.589, -16.448)), (' B  15  GLY  O  ', ' B  97  LYS  HE2', -0.477, (-8.546, 15.054, -0.507)), (' A 137  LYS  HE3', ' A 197  ASP  OD2', -0.475, (-3.649, -1.967, -33.788)), (' B 159  PHE  HB3', ' B 177  LEU HD13', -0.474, (0.18, 3.376, 2.072)), (' B  90  LYS  HE3', ' B 594  HOH  O  ', -0.471, (-2.948, 12.428, 17.601)), (' B 236  LYS  HE3', ' B 237  TYR  CZ ', -0.471, (18.766, -21.611, -19.402)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.469, (-0.743, 7.252, -32.868)), (' B  31  TRP  CD2', ' B  95  ASN  HB2', -0.468, (-7.105, 15.564, 4.801)), (' B 288  GLU  OE1', ' B 501  HOH  O  ', -0.462, (4.677, -6.991, -17.95)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.462, (6.214, -9.625, -8.732)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.461, (-7.099, 16.191, 5.333)), (' B  47  GLU  N  ', ' B  47  GLU  OE1', -0.454, (22.971, 20.024, 2.298)), (' A 126  TYR  CE2', ' B   6  MET  HE2', -0.452, (-8.344, -1.44, -18.911)), (' B 249  ILE HG22', ' B 293  PRO  HG2', -0.449, (-1.941, -16.141, -8.49)), (' B  62  SER  OG ', ' B  64  HIS  NE2', -0.448, (8.644, 25.707, 16.112)), (' B 257  THR  CG2', ' B 259  ILE HG12', -0.44, (-6.241, -22.926, -19.942)), (' B  86  VAL HG23', ' B 179  GLY  HA2', -0.44, (7.55, 5.49, 6.471)), (' A   5  LYS  HG2', ' A 127  GLN  HB3', -0.437, (-0.412, 3.901, -21.404)), (' B 232  LEU  HA ', ' B 232  LEU HD13', -0.435, (16.558, -26.337, -10.435)), (' B 126  TYR  HE1', ' B 128  CYS  HG ', -0.435, (5.194, 2.751, -10.987)), (' A  13  VAL HG13', ' A  17  MET  HE3', -0.432, (-15.417, 10.054, -16.694)), (' A 168  PRO  HD2', ' A 637  HOH  O  ', -0.429, (-14.401, -6.619, -37.467)), (' B 276  MET  O  ', ' B 278  GLY  N  ', -0.428, (9.975, -16.259, -31.993)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.428, (-39.32, 5.319, -33.294)), (' A  47  GLU  HG3', ' A  47  GLU  O  ', -0.423, (-34.502, -7.266, -34.137)), (' B  44  CYS  HB2', ' B  49  MET  HE1', -0.422, (16.77, 15.249, 3.921)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.42, (-16.747, -3.178, -19.845)), (' A 288  GLU  HG2', ' A 291  PHE  HE2', -0.42, (5.772, 3.382, -24.553)), (' A 126  TYR  CD2', ' B   6  MET  HE2', -0.417, (-7.982, -1.311, -18.752)), (' B  49  MET  CA ', ' B  49  MET  HE3', -0.416, (19.874, 14.334, 3.314)), (' A 198  THR  OG1', ' A 240  GLU  OE2', -0.415, (-0.703, 4.081, -40.141)), (' B 255  ALA  C  ', ' B 257  THR  H  ', -0.414, (-10.122, -22.125, -16.64)), (' B  13  VAL  CG1', ' B  17  MET  CE ', -0.412, (-2.749, 8.729, -3.098)), (' B 107  GLN  CG ', ' B 110  GLN HE22', -0.408, (3.455, -10.573, -0.302)), (' B 165  MET  HE3', ' B 401  YSP  C26', -0.408, (17.557, 8.589, -0.003)), (' B 255  ALA  O  ', ' B 257  THR  N  ', -0.406, (-10.785, -22.439, -16.91)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.406, (-5.171, 21.87, -18.032)), (' B 152  ILE  CD1', ' B 157  VAL HG22', -0.404, (-8.763, 3.104, -2.643)), (' B  50  LEU  O  ', ' B 188  ARG  HD2', -0.403, (24.685, 9.722, 5.135)), (' B 253  LEU  HA ', ' B 253  LEU HD12', -0.402, (-8.211, -17.842, -14.453))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
