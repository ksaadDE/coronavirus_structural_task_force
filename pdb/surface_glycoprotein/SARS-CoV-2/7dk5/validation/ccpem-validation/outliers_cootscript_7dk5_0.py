
from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

dict_residue_prop_objects = {}
class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)
        ##save property list frame object
        dict_residue_prop_objects[data_key] = list_obj
# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "clusters","rama", "rota", "cbeta", "probe", "smoc", "fdr",
               "fsc","diffmap","cablam",
               "jpred"]
  data_titles = { "clusters"  : "Outlier residue clusters",
                  "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes",
                  "smoc"  : "Local density fit (SMOC)",
                  "fdr": "Backbone position score (FDR)",
                  "fsc": "Local density fit (FSC)",
                  "diffmap": "Model-map difference",
                  "cablam": "Ca geometry (CaBLAM)",
                  "jpred":"SS prediction"}
  data_names = { "clusters"  : ["Chain","Residue","Cluster","Outlier types"],
                 "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"],
                 "smoc" : ["Chain", "Residue", "Name", "Score"],
                 "fdr" : ["Chain", "Residue", "Name", "Score"],
                 "fsc" : ["Chain", "Residue", "Name", "Score"],
                 "diffmap" : ["Chain", "Residue", "Name", "Score"],
                 "cablam" : ["Chain", "Residue","Name","recommendation","DSSP"],
                 "jpred" : ["Chain", "Residue","Name","predicted SS","current SS"]}
  if (gobject is not None) :
    data_types = {  "clusters" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_INT, gobject.TYPE_STRING,
                             gobject.TYPE_PYOBJECT],
                    "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "smoc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "fdr" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "fsc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "diffmap" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cablam" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT],
                   "jpred" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT]}
  else :
    data_types = dict([ (s, []) for s in ["clusters","rama","rota","cbeta","probe","smoc",
                                          "fdr","fsc","diffmap","cablam","jpred"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "Validation To-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    ##adding a column type for checkbox (bool) before atom coordinate
    if gobject is not None:
        column_types = column_types[:-1]+[bool]+[column_types[-1]]
    
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    ##add a cell for checkbox
    cell1 = gtk.CellRendererToggle()
    cell1.connect ("toggled", self.on_selected_toggled)
    column = gtk.TreeViewColumn('Dealt with',cell1,active=i+1)
    self.listctrl.append_column(column)
    #column.set_sort_column_id(i+1)
    #column.pack_start(cell1, True)
    
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      row = row[:-1] + (False,)+(row[-1],)
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()
  ##check box toggle
  def on_selected_toggled(self,renderer,path):
    if path is not None:
      model = self.listmodel.get_model()
      it = model.get_iter(path)
      #set toggle
      model[it][-2] = not model[it][-2]
      #set checkboxes for same residues in other lists
      try:
        chain = model[it][0]
        residue = model[it][1]
        for data_key in dict_residue_prop_objects:
          prop_obj = dict_residue_prop_objects[data_key]
          for row in prop_obj.listmodel.get_model():
            if data_key == 'probe':
              atom1_split = row[0].split()
              atom2_split = row[1].split()
              if atom1_split[0] == chain and atom1_split[1] == residue:
                row[-2] = model[it][-2]
              elif atom2_split[0] == chain and atom2_split[1] == residue:
                row[-2] = model[it][-2]
            elif row[0] == chain and row[1] == residue:
              row[-2] = model[it][-2]
      except IndexError: pass

  def check_chain_residue(self,chain,residue):
      pass
  
def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data
data = {}
data['rama'] = []
data['cbeta'] = []
data['fdr'] = []
data['fsc'] = []
data['diffmap'] = []
data['jpred'] = []
data['probe'] = [(' C 607  GLN  OE1', ' C 674  TYR  HE1', -0.774, (238.733, 180.017, 186.079)), (' A 607  GLN  OE1', ' A 674  TYR  HE1', -0.728, (166.697, 189.077, 185.8)), (' B 110  ILE  O  ', ' B 144  TYR  OH ', -0.72, (178.623, 162.246, 291.465)), (' B  94  GLN  NE2', ' B  96  ASN  OD1', -0.707, (211.109, 170.646, 286.965)), (' B 474  GLN  NE2', ' B 478  THR  O  ', -0.703, (182.93, 180.468, 245.157)), (' A 136  THR  OG1', ' A 139  MET  O  ', -0.703, (163.691, 138.731, 298.376)), (' C 439  ASN  O  ', ' C 443  SER  OG ', -0.688, (217.701, 210.669, 264.472)), (' C 909  ILE  O  ', ' C1108  ASN  ND2', -0.662, (212.417, 199.172, 149.249)), (' A 108  THR  OG1', ' A 234  ASN  O  ', -0.659, (163.852, 192.736, 235.686)), (' B 439  ASN  O  ', ' B 443  SER  OG ', -0.654, (193.401, 213.185, 261.954)), (' C 645  THR  OG1', ' C 648  GLY  O  ', -0.645, (239.446, 197.547, 190.11)), (' B 102  ARG  NH2', ' B 154  GLU  OE1', -0.641, (238.116, 251.08, 239.361)), (' B 560  LEU  O  ', ' B 577  ARG  NH1', -0.634, (167.588, 222.386, 218.215)), (' B 615  VAL  O  ', ' B 649  CYS  N  ', -0.629, (192.519, 237.491, 198.574)), (' A 398  ASP  OD2', ' A 423  TYR  OH ', -0.603, (207.03, 167.212, 252.347)), (' A 645  THR  OG1', ' A 648  GLY  O  ', -0.572, (181.223, 178.375, 188.6)), (' C 102  ARG  O  ', ' C 121  ASN  N  ', -0.56, (228.368, 151.695, 228.098)), (' B 738  CYS  SG ', ' B 764  ASN  ND2', -0.556, (224.36, 198.632, 201.68)), (' B  27  GLU  O  ', ' B  94  GLN  NE2', -0.555, (211.486, 172.123, 288.73)), (' C 105  ILE HD11', ' C 241  LEU HD21', -0.548, (233.848, 156.677, 232.313)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.546, (213.681, 241.949, 205.491)), (' A 102  ARG  O  ', ' A 121  ASN  N  ', -0.546, (147.857, 206.059, 232.816)), (' C 708  SER  OG ', ' C 711  SER  OG ', -0.544, (232.209, 205.114, 144.285)), (' C 318  PHE  N  ', ' C 593  GLY  O  ', -0.543, (234.095, 196.919, 202.142)), (' B 879  ALA  O  ', ' B 883  THR  OG1', -0.536, (228.76, 206.175, 155.268)), (' B1077  THR  OG1', ' B1078  ALA  N  ', -0.533, (195.204, 227.037, 140.299)), (' C 607  GLN  OE1', ' C 674  TYR  CE1', -0.509, (238.977, 179.892, 185.917)), (' B 868  GLU  N  ', ' B 868  GLU  OE1', -0.508, (233.862, 210.002, 176.614)), (' B 777  ASN  OD1', ' B1019  ARG  NH1', -0.505, (217.356, 201.711, 179.396)), (' B 280  ASN  OD1', ' B 283  GLY  N  ', -0.499, (236.095, 229.839, 208.392)), (' B 742  ILE  O  ', ' B1000  ARG  NH1', -0.496, (222.827, 207.092, 210.207)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.49, (156.479, 203.281, 206.959)), (' C 717  ASN  OD1', ' C 718  PHE  N  ', -0.484, (218.872, 188.042, 145.654)), (' C 596  SER  OG ', ' C 613  GLN  NE2', -0.484, (230.777, 195.824, 194.21)), (' C1028  LYS  O  ', ' C1032  CYS  N  ', -0.481, (202.187, 194.343, 162.633)), (' C 607  GLN  OE1', ' C 691  SER  HA ', -0.481, (240.134, 180.269, 186.284)), (' B  34  ARG  NH1', ' B 191  GLU  OE2', -0.467, (231.008, 246.119, 216.808)), (' A 473  TYR  O  ', ' B  32  TYR  OH ', -0.464, (219.442, 166.592, 276.532)), (' A 318  PHE  N  ', ' A 593  GLY  O  ', -0.461, (184.75, 183.807, 200.266)), (' B 167  THR  HG1', ' B 168  PHE  HD1', -0.461, (225.832, 232.81, 241.834)), (' A 607  GLN  OE1', ' A 674  TYR  CE1', -0.458, (166.257, 189.484, 185.34)), (' B1054  GLN  N  ', ' B1061  VAL  O  ', -0.458, (224.434, 214.305, 167.869)), (' B1028  LYS  O  ', ' B1032  CYS  N  ', -0.456, (215.051, 209.627, 163.405)), (' B 280  ASN  OD1', ' B 284  THR  N  ', -0.454, (235.168, 230.864, 209.19)), (' A 553  THR  O  ', ' A 586  ASP  N  ', -0.449, (196.607, 164.795, 205.606)), (' B  14  GLN  N  ', ' B 136  CYS  HG ', -0.448, (223.262, 254.589, 247.711)), (' B 112  SER  N  ', ' B 134  GLN  OE1', -0.447, (219.514, 244.62, 248.974)), (' A 328  ARG  NH2', ' A 580  GLN  OE1', -0.441, (193.938, 160.08, 219.266)), (' A 725  GLU  OE1', ' A1064  HIS  NE2', -0.44, (190.77, 211.555, 165.681)), (' B 717  ASN  OD1', ' B 718  PHE  N  ', -0.44, (215.199, 229.13, 148.37)), (' C 880  GLY  O  ', ' C 884  SER  N  ', -0.439, (192.878, 188.501, 153.441)), (' B 287  ASP  OD1', ' B 288  ALA  N  ', -0.439, (226.61, 238.742, 207.678)), (' C 802  PHE  CD1', ' C 805  ILE HD11', -0.437, (201.016, 180.747, 154.836)), (' C  14  GLN  N  ', ' C 136  CYS  HG ', -0.437, (239.506, 156.846, 241.015)), (' C  29  THR  OG1', ' C 215  ASP  OD2', -0.437, (241.653, 163.167, 209.011)), (' B 725  GLU  OE1', ' B1064  HIS  NE2', -0.434, (216.214, 216.857, 166.993)), (' B 880  GLY  O  ', ' B 884  SER  N  ', -0.432, (225.871, 205.883, 154.518)), (' A 409  GLN  N  ', ' A 409  GLN  OE1', -0.431, (198.752, 170.695, 262.932)), (' B 645  THR  OG1', ' B 648  GLY  O  ', -0.428, (193.574, 237.53, 194.532)), (' B  29  THR  OG1', ' B 215  ASP  OD2', -0.428, (222.675, 255.687, 215.313)), (' C 329  PHE  O  ', ' C 580  GLN  NE2', -0.427, (245.059, 214.305, 229.808)), (' C 287  ASP  OD1', ' C 288  ALA  N  ', -0.417, (225.196, 168.816, 202.197)), (' B 170  GLN  NE2', ' B 175  SER  O  ', -0.415, (180.078, 157.075, 290.292)), (' B 318  PHE  N  ', ' B 593  GLY  O  ', -0.413, (198.84, 232.434, 205.451)), (' A 877  LEU  O  ', ' A 881  THR  OG1', -0.413, (192.736, 223.168, 159.78)), (' B1076  THR  O  ', ' B1097  SER  N  ', -0.412, (199.257, 230.099, 138.546)), (' B 914  ASN  ND2', ' C1123  SER  OG ', -0.408, (215.293, 221.428, 137.764)), (' A 802  PHE  HD1', ' A 805  ILE HD11', -0.407, (183.707, 222.158, 157.662)), (' A 742  ILE  O  ', ' A1000  ARG  NH1', -0.405, (193.796, 216.828, 209.172))]
data['smoc'] = [('A', 15, u'CYS', 0.9586193468555148, (142.66, 187.117, 239.60399999999998)), ('A', 21, u'ARG', 0.9571581293795526, (135.866, 189.277, 227.541)), ('A', 46, u'SER', 0.9593634934427315, (172.43200000000002, 215.584, 202.95700000000002)), ('A', 47, u'VAL', 0.9638607058736658, (173.76399999999998, 212.228, 204.22)), ('A', 69, u'HIS', 0.9605848518389754, (133.446, 195.348, 225.042)), ('A', 112, u'SER', 0.9415145479679567, (156.86100000000002, 192.048, 245.13899999999998)), ('A', 113, u'LYS', 0.9150895877829425, (160.148, 190.098, 245.01299999999998)), ('A', 114, u'THR', 0.9376612385702816, (162.07899999999998, 192.93, 243.319)), ('A', 148, u'ASN', 0.949977437554005, (124.22, 209.283, 233.824)), ('A', 182, u'LYS', 0.9610552044375809, (133.181, 208.518, 220.993)), ('A', 183, u'GLN', 0.9481881883286207, (132.034, 206.49800000000002, 217.98000000000002)), ('A', 213, u'VAL', 0.9477613971951913, (139.446, 201.42700000000002, 210.345)), ('A', 214, u'ARG', 0.9484398324572294, (141.92700000000002, 198.575, 209.80100000000002)), ('A', 227, u'VAL', 0.9683266710391442, (161.38600000000002, 210.89600000000002, 228.983)), ('A', 281, u'GLU', 0.9539861229926836, (166.82700000000003, 219.05200000000002, 203.001)), ('A', 292, u'ALA', 0.9322323448046389, (168.73399999999998, 193.26, 205.86)), ('A', 294, u'ASP', 0.9041070235017143, (166.70999999999998, 190.515, 201.314)), ('A', 295, u'PRO', 0.9241811417316056, (170.002, 189.541, 199.598)), ('A', 298, u'GLU', 0.9403679314006629, (172.63299999999998, 192.93200000000002, 201.692)), ('A', 333, u'THR', 0.9386918536757324, (200.453, 156.532, 229.86200000000002)), ('A', 383, u'SER', 0.9562077262933555, (193.02700000000002, 173.477, 243.44)), ('A', 440, u'ASN', 0.9430088103932998, (191.99, 149.849, 260.42999999999995)), ('A', 444, u'LYS', 0.9416129572834926, (197.172, 146.74099999999999, 265.86)), ('A', 445, u'VAL', 0.9129910720177083, (196.38400000000001, 144.971, 269.126)), ('A', 465, u'GLU', 0.9633810809738242, (215.10399999999998, 169.292, 255.77499999999998)), ('A', 476, u'GLY', 0.9785601313151008, (221.23, 172.017, 281.84400000000005)), ('A', 477, u'SER', 0.9734191920520666, (224.873, 172.469, 282.78)), ('A', 481, u'ASN', 0.9784044304973111, (226.819, 161.556, 279.315)), ('A', 500, u'THR', 0.9407982265055596, (190.165, 152.07899999999998, 270.375)), ('A', 518, u'LEU', 0.923570365018966, (213.464, 174.44299999999998, 239.996)), ('A', 519, u'HIS', 0.9085838303644512, (215.82800000000003, 175.47899999999998, 237.207)), ('A', 531, u'THR', 0.9612176179989034, (189.084, 165.10399999999998, 221.86200000000002)), ('A', 532, u'ASN', 0.9589637587573195, (187.93200000000002, 162.83100000000002, 219.05100000000002)), ('A', 555, u'SER', 0.9369089497775698, (198.30700000000002, 161.295, 202.212)), ('A', 556, u'ASN', 0.9316931467179118, (201.379, 159.442, 200.94899999999998)), ('A', 569, u'ILE', 0.9418458216630421, (208.13, 174.04, 200.141)), ('A', 581, u'THR', 0.950590799994409, (197.865, 157.086, 216.323)), ('A', 582, u'LEU', 0.9561364926668938, (200.924, 156.725, 214.075)), ('A', 603, u'ASN', 0.9604053693695246, (167.477, 200.8, 186.11299999999997)), ('A', 616, u'ASN', 0.9338447677818564, (181.44, 173.342, 195.12800000000001)), ('A', 617, u'CYS', 0.9319474284958247, (177.73899999999998, 174.099, 195.497)), ('A', 618, u'THR', 0.9104359976234476, (177.42700000000002, 171.38100000000003, 198.153)), ('A', 619, u'GLU', 0.9245862138878815, (180.085, 173.09, 200.32100000000003)), ('A', 641, u'ASN', 0.9430756282612228, (169.0, 177.91299999999998, 189.879)), ('A', 642, u'VAL', 0.9476472527353456, (172.26399999999998, 176.27499999999998, 190.99)), ('A', 661, u'GLU', 0.9688801266570768, (178.04299999999998, 188.562, 173.847)), ('A', 662, u'CYS', 0.9758764432428045, (180.154, 188.286, 177.0)), ('A', 668, u'ALA', 0.9725838708693144, (186.435, 179.36700000000002, 181.379)), ('A', 689, u'SER', 0.9401188203319377, (161.092, 185.353, 181.198)), ('A', 701, u'ALA', 0.9590237409862343, (180.561, 185.937, 163.82600000000002)), ('A', 748, u'GLU', 0.9549496448959733, (196.26399999999998, 221.99200000000002, 218.345)), ('A', 751, u'ASN', 0.9553807587400952, (200.538, 223.33700000000002, 216.031)), ('A', 769, u'GLY', 0.954572019454837, (201.431, 220.853, 190.44899999999998)), ('A', 786, u'LYS', 0.9779140677914882, (202.075, 229.931, 165.91899999999998)), ('A', 810, u'SER', 0.9224263936407078, (177.35100000000003, 236.02100000000002, 165.161)), ('A', 811, u'LYS', 0.9405611793625629, (177.568, 233.97899999999998, 168.379)), ('A', 854, u'LYS', 0.9454013497078582, (181.829, 228.58200000000002, 197.814)), ('A', 894, u'LEU', 0.982924671283323, (200.58800000000002, 228.824, 152.501)), ('A', 895, u'GLN', 0.982916824245099, (197.165, 229.73299999999998, 151.118)), ('A', 913, u'GLN', 0.9836693275888416, (191.16, 213.863, 141.535)), ('A', 921, u'LYS', 0.961557109739838, (177.374, 216.561, 145.165)), ('A', 957, u'GLN', 0.9404580481718072, (185.236, 212.576, 193.465)), ('A', 986, u'PRO', 0.9466662696671716, (197.62, 217.107, 226.37)), ('A', 987, u'PRO', 0.9492848074116822, (200.82000000000002, 215.031, 225.967)), ('A', 991, u'VAL', 0.9534040243779777, (200.92800000000003, 211.507, 219.834)), ('A', 995, u'ARG', 0.959403027150819, (199.80200000000002, 209.393, 214.055)), ('A', 1071, u'GLN', 0.9644318650085196, (179.36800000000002, 198.681, 148.812)), ('A', 1084, u'ASP', 0.9065213532654325, (202.768, 188.272, 122.433)), ('A', 1099, u'GLY', 0.9500287187547511, (183.728, 188.201, 133.129)), ('A', 1127, u'ASP', 0.9224819158125663, (206.526, 182.32000000000002, 130.736)), ('A', 1146, u'ASP', 0.7615726242931029, (196.148, 208.029, 114.39)), ('C', 14, u'GLN', 0.9653151768859811, (240.025, 158.571, 242.252)), ('C', 15, u'CYS', 0.9644768428668367, (243.228, 158.88100000000003, 240.197)), ('C', 19, u'THR', 0.9702404680596014, (249.805, 152.298, 232.60999999999999)), ('C', 22, u'THR', 0.947714172094838, (252.224, 153.706, 224.803)), ('C', 46, u'SER', 0.9486754878055869, (212.737, 169.529, 198.26899999999998)), ('C', 87, u'ASN', 0.9722470624006018, (232.108, 174.24499999999998, 226.366)), ('C', 113, u'LYS', 0.9495898279259954, (232.08200000000002, 167.26299999999998, 244.489)), ('C', 149, u'ASN', 0.930722541531287, (237.55200000000002, 129.73499999999999, 229.27299999999997)), ('C', 174, u'PRO', 0.9212232619360927, (218.10399999999998, 145.787, 226.107)), ('C', 183, u'GLN', 0.9617327163661576, (242.45200000000003, 143.344, 215.995)), ('C', 184, u'GLY', 0.9566771686770056, (242.536, 144.94899999999998, 212.555)), ('C', 198, u'ASP', 0.9461494307073208, (220.36800000000002, 175.14299999999997, 229.39600000000002)), ('C', 226, u'LEU', 0.9748592994265698, (218.622, 159.18800000000002, 220.363)), ('C', 272, u'PRO', 0.9690828313941836, (226.86, 178.118, 216.147)), ('C', 281, u'GLU', 0.9499038037587303, (211.20399999999998, 164.375, 199.24399999999997)), ('C', 292, u'ALA', 0.9508842215057982, (232.17, 179.815, 206.768)), ('C', 294, u'ASP', 0.9387767288542639, (235.252, 179.289, 201.736)), ('C', 295, u'PRO', 0.9465466284217098, (234.448, 182.491, 199.77899999999997)), ('C', 322, u'PRO', 0.9626836918203638, (238.672, 201.166, 215.26999999999998)), ('C', 323, u'THR', 0.9596417948032254, (241.88600000000002, 199.61399999999998, 216.584)), ('C', 333, u'THR', 0.9678285598422424, (245.283, 214.004, 240.563)), ('C', 339, u'GLY', 0.9592331737062568, (233.17299999999997, 212.476, 251.92100000000002)), ('C', 367, u'VAL', 0.956253578457753, (232.35600000000002, 201.491, 245.339)), ('C', 373, u'SER', 0.9580216178668638, (226.373, 203.759, 253.836)), ('C', 378, u'LYS', 0.9725182400881229, (218.49, 204.46, 242.194)), ('C', 386, u'LYS', 0.971678237164885, (228.676, 202.40800000000002, 233.795)), ('C', 408, u'ARG', 0.9577879049271263, (208.012, 208.781, 247.389)), ('C', 440, u'ASN', 0.9658630276217908, (221.35100000000003, 208.664, 264.332)), ('C', 446, u'GLY', 0.8995482875123525, (213.18800000000002, 216.834, 271.747)), ('C', 460, u'ASN', 0.9665277433602658, (204.785, 226.108, 242.106)), ('C', 468, u'ILE', 0.9611260734348532, (215.161, 231.629, 251.288)), ('C', 485, u'GLY', 0.878434217693468, (194.65800000000002, 234.288, 261.066)), ('C', 486, u'PHE', 0.8943003484685865, (191.82800000000003, 233.334, 258.712)), ('C', 518, u'LEU', 0.9794702903982859, (226.82100000000003, 219.141, 227.24899999999997)), ('C', 527, u'PRO', 0.9710878352849658, (238.32600000000002, 206.031, 237.506)), ('C', 529, u'LYS', 0.9727184318118343, (242.74499999999998, 205.037, 232.761)), ('C', 536, u'ASN', 0.964447549258298, (247.08200000000002, 208.224, 210.95100000000002)), ('C', 553, u'THR', 0.9668128589858022, (245.168, 214.21599999999998, 211.084)), ('C', 557, u'LYS', 0.9646112767581235, (240.349, 224.23499999999999, 210.42000000000002)), ('C', 558, u'LYS', 0.9649991555861285, (240.732, 227.57299999999998, 212.23299999999998)), ('C', 582, u'LEU', 0.9685842704325216, (247.409, 223.11899999999997, 222.22)), ('C', 589, u'PRO', 0.9616227537569072, (236.77499999999998, 209.065, 207.94299999999998)), ('C', 603, u'ASN', 0.9571242774617329, (228.063, 175.002, 185.564)), ('C', 616, u'ASN', 0.9476421815995373, (243.04899999999998, 200.813, 195.64399999999998)), ('C', 620, u'VAL', 0.9282051054644104, (243.82800000000003, 195.664, 201.405)), ('C', 641, u'ASN', 0.9175792619836848, (250.442, 190.76399999999998, 191.122)), ('C', 661, u'GLU', 0.9686728177499367, (233.555, 190.289, 174.374)), ('C', 668, u'ALA', 0.9702882758722392, (234.725, 202.296, 183.04399999999998)), ('C', 676, u'THR', 0.9386086387037572, (240.569, 179.227, 178.623)), ('C', 703, u'ASN', 0.9599836395915103, (235.14299999999997, 199.47, 159.315)), ('C', 704, u'SER', 0.9603452988079877, (236.554, 201.947, 156.798)), ('C', 765, u'ARG', 0.9509774061569176, (191.975, 195.45200000000003, 192.961)), ('C', 780, u'GLU', 0.9693462415291377, (193.73899999999998, 194.889, 172.154)), ('C', 786, u'LYS', 0.9708065172955443, (184.594, 191.008, 165.22)), ('C', 810, u'SER', 0.9395184821942979, (192.46800000000002, 166.876, 161.399)), ('C', 811, u'LYS', 0.9525795431000302, (193.86100000000002, 167.61899999999997, 164.876)), ('C', 855, u'PHE', 0.9332845679662687, (196.26299999999998, 176.72299999999998, 198.475)), ('C', 860, u'VAL', 0.9448909222580659, (193.323, 179.617, 190.82200000000003)), ('C', 892, u'ALA', 0.9783936347076156, (185.16, 195.525, 155.01299999999998)), ('C', 932, u'GLY', 0.9543379833653006, (210.138, 174.64, 156.73399999999998)), ('C', 940, u'SER', 0.9385701573570739, (215.08800000000002, 170.912, 167.656)), ('C', 973, u'ILE', 0.9014571058147989, (208.407, 189.154, 217.923)), ('C', 974, u'SER', 0.9170348424687325, (206.712, 186.282, 216.067)), ('C', 983, u'ARG', 0.8717169964668755, (200.63, 185.485, 224.16299999999998)), ('C', 985, u'ASP', 0.8849590644531743, (198.435, 191.722, 225.929)), ('C', 1010, u'GLN', 0.9414558512404999, (209.27399999999997, 192.95600000000002, 191.186)), ('C', 1070, u'ALA', 0.9723391032875144, (221.661, 188.503, 149.806)), ('C', 1071, u'GLN', 0.9652536780751784, (224.312, 189.76299999999998, 147.35100000000003)), ('C', 1073, u'LYS', 0.967239352822661, (227.917, 194.77499999999998, 143.954)), ('C', 1074, u'ASN', 0.9716997176551889, (229.373, 198.21499999999997, 143.288)), ('C', 1084, u'ASP', 0.9473526298230532, (221.92700000000002, 216.71499999999997, 124.307)), ('C', 1101, u'HIS', 0.9624156012689333, (225.948, 200.536, 129.509)), ('C', 1127, u'ASP', 0.8945749589649825, (227.343, 223.01, 132.11299999999997)), ('C', 1128, u'VAL', 0.9158119234822331, (226.765, 223.687, 135.848)), ('C', 1146, u'ASP', 0.7574345583149703, (207.167, 204.184, 114.607)), ('a', 1, u'GLN', 0.9467360241993427, (201.24699999999999, 146.37, 274.34200000000004)), ('a', 15, u'SER', 0.9473389149068039, (213.708, 146.278, 309.018)), ('a', 42, u'GLY', 0.953427218314412, (199.6, 160.146, 303.224)), ('a', 74, u'SER', 0.9655892058039605, (218.542, 139.185, 280.622)), ('a', 75, u'LYS', 0.9694074949140505, (215.138, 138.44899999999998, 282.202)), ('a', 87, u'THR', 0.9466882397438254, (205.134, 149.811, 309.025)), ('a', 88, u'ASP', 0.9486717815123572, (204.423, 153.097, 307.207)), ('a', 121, u'THR', 0.9595827463321347, (197.191, 133.566, 308.46)), ('a', 132, u'SER', 0.9456281206099124, (163.846, 130.654, 306.3)), ('a', 138, u'SER', 0.9034915884487589, (161.212, 140.516, 295.29099999999994)), ('a', 152, u'GLU', 0.9575322839091978, (195.646, 141.915, 302.253)), ('a', 160, u'SER', 0.9306881311144796, (183.638, 131.508, 289.007)), ('a', 176, u'SER', 0.9537285770138184, (194.185, 143.401, 315.084)), ('a', 177, u'ASP', 0.9524127623584925, (196.914, 141.92700000000002, 312.84400000000005)), ('a', 202, u'ALA', 0.9465319997870699, (191.463, 134.423, 295.241)), ('a', 207, u'SER', 0.9443715413898197, (197.545, 132.292, 294.835)), ('b', 16, u'GLY', 0.9249692960483776, (178.954, 169.565, 281.274)), ('b', 17, u'GLN', 0.9277453749402222, (180.863, 172.131, 283.367)), ('b', 20, u'THR', 0.9576547058001882, (190.304, 173.94899999999998, 286.857)), ('b', 30, u'ASP', 0.9666105185700152, (214.52, 176.56, 280.158)), ('b', 71, u'SER', 0.9633920959726194, (203.71599999999998, 180.07, 283.252)), ('b', 72, u'ARG', 0.964455407886927, (207.30100000000002, 179.266, 284.26099999999997)), ('b', 161, u'ASN', 0.8819700015735407, (181.25, 150.542, 320.573)), ('b', 173, u'LYS', 0.9521760219476839, (183.376, 150.23, 286.632)), ('b', 206, u'THR', 0.9255779521164225, (164.22, 161.21299999999997, 303.16400000000004)), ('b', 207, u'SER', 0.9217016337308073, (162.771, 158.4, 305.28599999999994)), ('b', 208, u'PRO', 0.9434376831617578, (165.05200000000002, 156.47, 307.675)), ('B', 14, u'GLN', 0.9528766114654402, (221.23499999999999, 255.638, 247.909)), ('B', 15, u'CYS', 0.9500841951497639, (219.854, 258.48499999999996, 245.782)), ('B', 19, u'THR', 0.9588365078584321, (224.689, 268.28, 240.287)), ('B', 20, u'THR', 0.9552759333113744, (226.676, 268.79099999999994, 237.054)), ('B', 87, u'ASN', 0.9605687655752514, (213.417, 241.23899999999998, 230.177)), ('B', 113, u'LYS', 0.9393446902365589, (216.67299999999997, 240.34, 249.305)), ('B', 124, u'THR', 0.9558623774650347, (243.056, 246.02700000000002, 236.66)), ('B', 149, u'ASN', 0.9269130010942574, (248.76899999999998, 263.639, 244.045)), ('B', 155, u'SER', 0.9437904478426393, (238.446, 254.73999999999998, 246.7)), ('B', 183, u'GLN', 0.9612893807820257, (238.042, 264.58799999999997, 225.864)), ('B', 198, u'ASP', 0.9760604453011908, (218.442, 226.895, 230.608)), ('B', 271, u'GLN', 0.9670242277251665, (214.71699999999998, 239.73299999999998, 220.18)), ('B', 272, u'PRO', 0.9681509354244652, (214.40800000000002, 235.995, 219.33100000000002)), ('B', 281, u'GLU', 0.9474310759329173, (236.237, 227.80800000000002, 204.687)), ('B', 292, u'ALA', 0.9540418486221286, (212.661, 239.111, 209.656)), ('B', 293, u'LEU', 0.951172397697091, (214.066, 242.41299999999998, 208.341)), ('B', 294, u'ASP', 0.944022157369975, (212.007, 242.597, 205.13899999999998)), ('B', 295, u'PRO', 0.9524685139931178, (209.97299999999998, 240.238, 202.935)), ('B', 316, u'SER', 0.9603715351505276, (204.841, 232.18200000000002, 205.795)), ('B', 333, u'THR', 0.9433901810681773, (171.187, 232.255, 238.037)), ('B', 334, u'ASN', 0.947555514114054, (172.58700000000002, 230.11599999999999, 240.88500000000002)), ('B', 339, u'GLY', 0.9340739225617146, (180.17, 223.948, 250.371)), ('B', 373, u'SER', 0.9288955587408128, (193.16899999999998, 223.668, 251.284)), ('B', 385, u'THR', 0.9373846505964116, (191.586, 225.845, 234.348)), ('B', 386, u'LYS', 0.9433104934274331, (189.499, 224.999, 231.259)), ('B', 414, u'GLN', 0.9552420828489356, (192.955, 201.038, 236.629)), ('B', 415, u'THR', 0.9506870052711679, (193.003, 198.023, 238.93)), ('B', 416, u'GLY', 0.958641716219372, (193.297, 197.94, 242.7)), ('B', 439, u'ASN', 0.9020304680514016, (193.95200000000003, 214.343, 259.85900000000004)), ('B', 440, u'ASN', 0.858507714937434, (192.706, 217.278, 261.962)), ('B', 477, u'SER', 0.8445504261019282, (184.35700000000003, 180.889, 241.44899999999998)), ('B', 479, u'PRO', 0.8019524374067684, (180.577, 178.39600000000002, 245.589)), ('B', 532, u'ASN', 0.9696231992276707, (177.333, 239.127, 221.44899999999998)), ('B', 536, u'ASN', 0.9604155819033289, (180.68, 237.33100000000002, 208.062)), ('B', 558, u'LYS', 0.9760309271224261, (166.965, 223.22899999999998, 210.85500000000002)), ('B', 569, u'ILE', 0.9583085847641525, (181.526, 215.311, 205.60999999999999)), ('B', 603, u'ASN', 0.9637819693042101, (219.692, 241.931, 189.502)), ('B', 618, u'THR', 0.944828282436318, (189.553, 242.812, 204.677)), ('B', 620, u'VAL', 0.9450768190341202, (195.23499999999999, 241.471, 206.176)), ('B', 641, u'ASN', 0.9267647285603471, (195.36800000000002, 250.61599999999999, 196.835)), ('B', 657, u'ASN', 0.950003915646675, (193.95600000000002, 245.374, 181.918)), ('B', 658, u'ASN', 0.9616172670446815, (196.617, 244.835, 179.23999999999998)), ('B', 661, u'GLU', 0.9700500614030384, (203.225, 236.894, 179.111)), ('B', 662, u'CYS', 0.9708923428600437, (202.70899999999997, 235.009, 182.375)), ('B', 676, u'THR', 0.9541846944751801, (208.032, 249.354, 183.305)), ('B', 701, u'ALA', 0.9762720986070856, (197.82500000000002, 236.814, 168.82700000000003)), ('B', 706, u'ALA', 0.9726544096268834, (194.17499999999998, 235.98100000000002, 153.14299999999997)), ('B', 708, u'SER', 0.9729941050713439, (190.79399999999998, 233.22299999999998, 147.584)), ('B', 755, u'GLN', 0.9340234442670167, (216.347, 194.184, 213.34)), ('B', 766, u'ALA', 0.9622892955920084, (218.97, 198.35500000000002, 194.22)), ('B', 769, u'GLY', 0.9603234989894144, (220.82800000000003, 197.33200000000002, 189.91299999999998)), ('B', 770, u'ILE', 0.9642571977085963, (219.82100000000003, 200.795, 188.71599999999998)), ('B', 786, u'LYS', 0.9725041562253622, (228.374, 196.02200000000002, 165.82100000000003)), ('B', 810, u'SER', 0.9345637768166241, (244.065, 214.45200000000003, 166.379)), ('B', 811, u'LYS', 0.9449227927061561, (242.39000000000001, 215.20499999999998, 169.728)), ('B', 827, u'THR', 0.9505867758285519, (229.62, 221.55, 184.411)), ('B', 855, u'PHE', 0.9326102670891725, (233.89200000000002, 210.88000000000002, 201.097)), ('B', 893, u'ALA', 0.9799455956427344, (225.373, 199.236, 154.011)), ('B', 894, u'LEU', 0.9815774076547602, (224.80200000000002, 200.511, 150.45600000000002)), ('B', 921, u'LYS', 0.9568863652734901, (227.676, 225.23499999999999, 146.266)), ('B', 922, u'LEU', 0.9637230775239269, (224.894, 227.406, 147.706)), ('B', 925, u'ASN', 0.9629698790064405, (227.556, 227.156, 152.05800000000002)), ('B', 929, u'SER', 0.9634951845978666, (227.39200000000002, 228.349, 157.625)), ('B', 932, u'GLY', 0.9605848625632286, (229.324, 227.33, 162.032)), ('B', 943, u'SER', 0.9570655567628783, (222.608, 227.625, 178.297)), ('B', 957, u'GLN', 0.937518187671205, (220.343, 218.512, 194.622)), ('B', 960, u'ASN', 0.9353218692673532, (222.74899999999997, 217.10399999999998, 198.595)), ('B', 964, u'LYS', 0.9449501720681763, (220.955, 216.788, 204.621)), ('B', 971, u'GLY', 0.9474959022175358, (213.35000000000002, 212.872, 217.737)), ('B', 987, u'PRO', 0.9304829104492631, (217.959, 199.565, 226.599)), ('B', 1020, u'ALA', 0.9591173812179982, (211.17899999999997, 207.23, 178.38100000000003)), ('B', 1070, u'ALA', 0.9680276410036052, (213.201, 231.59, 152.284)), ('B', 1071, u'GLN', 0.9643007558718346, (211.342, 233.43200000000002, 149.48800000000003)), ('B', 1072, u'GLU', 0.9694784949263893, (207.60299999999998, 233.118, 148.824)), ('B', 1073, u'LYS', 0.9652673732040254, (205.292, 234.577, 146.19299999999998)), ('B', 1084, u'ASP', 0.9600092570510848, (189.102, 221.379, 124.726)), ('B', 1085, u'GLY', 0.9526679922676695, (186.518, 221.159, 127.521)), ('B', 1100, u'THR', 0.9485472300664426, (201.342, 234.974, 131.648)), ('B', 1101, u'HIS', 0.9641486797463611, (201.01899999999998, 231.178, 131.412)), ('B', 1127, u'ASP', 0.9158696594760474, (181.406, 221.844, 132.725)), ('B', 1128, u'VAL', 0.935802314278309, (181.21099999999998, 220.781, 136.409)), ('B', 1146, u'ASP', 0.7400074802684817, (207.52200000000002, 217.54299999999998, 114.556))]
data['rota'] = [('C', ' 417 ', 'LYS', 0.2684241204768678, (203.937, 218.73899999999995, 249.213)), ('a', '  71 ', 'LYS', 0.2107742530413635, (217.618, 146.471, 286.00200000000007)), ('a', ' 144 ', 'CYS', 0.012105804489692673, (180.59899999999993, 135.808, 301.883))]
data['clusters'] = [('A', '219', 1, 'backbone clash', (219.442, 166.592, 276.532)), ('A', '33', 1, 'backbone clash', (219.442, 166.592, 276.532)), ('A', '476', 1, 'smoc Outlier', (221.23, 172.017, 281.84400000000005)), ('A', '477', 1, 'smoc Outlier', (224.873, 172.469, 282.78)), ('A', '481', 1, 'cablam Outlier\nsmoc Outlier', (226.8, 161.6, 279.3)), ('A', '482', 1, 'cablam Outlier', (224.4, 159.8, 277.0)), ('A', '484', 1, 'cablam CA Geom Outlier', (218.5, 160.5, 280.0)), ('A', '487', 1, 'cablam Outlier', (217.3, 167.4, 283.3)), ('A', '488', 1, 'cablam Outlier', (218.2, 165.8, 280.0)), ('A', '292', 2, 'smoc Outlier', (168.73399999999998, 193.26, 205.86)), ('A', '293', 2, 'cablam CA Geom Outlier', (165.4, 192.9, 204.0)), ('A', '294', 2, 'smoc Outlier', (166.70999999999998, 190.515, 201.314)), ('A', '295', 2, 'smoc Outlier', (170.002, 189.541, 199.598)), ('A', '298', 2, 'smoc Outlier', (172.63299999999998, 192.93200000000002, 201.692)), ('A', '553', 3, 'backbone clash', (196.607, 164.795, 205.606)), ('A', '555', 3, 'smoc Outlier', (198.30700000000002, 161.295, 202.212)), ('A', '556', 3, 'smoc Outlier', (201.379, 159.442, 200.94899999999998)), ('A', '586', 3, 'backbone clash', (196.607, 164.795, 205.606)), ('A', '1043', 4, 'cablam Outlier', (192.7, 209.0, 162.6)), ('A', '1045', 4, 'cablam Outlier', (188.1, 205.2, 160.9)), ('A', '328', 4, 'side-chain clash', (190.77, 211.555, 165.681)), ('A', '580', 4, 'side-chain clash', (190.77, 211.555, 165.681)), ('A', '616', 5, 'smoc Outlier', (181.44, 173.342, 195.12800000000001)), ('A', '617', 5, 'smoc Outlier', (177.73899999999998, 174.099, 195.497)), ('A', '618', 5, 'smoc Outlier', (177.42700000000002, 171.38100000000003, 198.153)), ('A', '619', 5, 'smoc Outlier', (180.085, 173.09, 200.32100000000003)), ('A', '213', 6, 'smoc Outlier', (139.446, 201.42700000000002, 210.345)), ('A', '214', 6, 'cablam CA Geom Outlier\nsmoc Outlier', (141.9, 198.6, 209.8)), ('A', '215', 6, 'cablam CA Geom Outlier', (145.4, 197.4, 210.8)), ('A', '666', 7, 'cablam Outlier', (182.8, 184.5, 185.0)), ('A', '667', 7, 'cablam Outlier', (185.6, 182.2, 183.8)), ('A', '668', 7, 'smoc Outlier', (186.435, 179.36700000000002, 181.379)), ('A', '281', 8, 'smoc Outlier', (166.82700000000003, 219.05200000000002, 203.001)), ('A', '46', 8, 'smoc Outlier', (172.43200000000002, 215.584, 202.95700000000002)), ('A', '47', 8, 'smoc Outlier', (173.76399999999998, 212.228, 204.22)), ('A', '102', 9, 'backbone clash', (147.857, 206.059, 232.816)), ('A', '121', 9, 'backbone clash', (147.857, 206.059, 232.816)), ('A', '122', 9, 'cablam Outlier', (144.8, 208.9, 235.6)), ('A', '112', 10, 'smoc Outlier', (156.86100000000002, 192.048, 245.13899999999998)), ('A', '113', 10, 'smoc Outlier', (160.148, 190.098, 245.01299999999998)), ('A', '114', 10, 'smoc Outlier', (162.07899999999998, 192.93, 243.319)), ('A', '661', 11, 'smoc Outlier', (178.04299999999998, 188.562, 173.847)), ('A', '662', 11, 'smoc Outlier', (180.154, 188.286, 177.0)), ('A', '136', 12, 'backbone clash', (163.691, 138.731, 298.376)), ('A', '139', 12, 'backbone clash', (163.691, 138.731, 298.376)), ('A', '21', 13, 'smoc Outlier', (135.866, 189.277, 227.541)), ('A', '69', 13, 'smoc Outlier', (133.446, 195.348, 225.042)), ('A', '810', 14, 'smoc Outlier', (177.35100000000003, 236.02100000000002, 165.161)), ('A', '811', 14, 'smoc Outlier', (177.568, 233.97899999999998, 168.379)), ('A', '991', 15, 'smoc Outlier', (200.92800000000003, 211.507, 219.834)), ('A', '995', 15, 'smoc Outlier', (199.80200000000002, 209.393, 214.055)), ('A', '607', 16, 'side-chain clash', (166.257, 189.484, 185.34)), ('A', '674', 16, 'side-chain clash', (166.257, 189.484, 185.34)), ('A', '1098', 17, 'cablam Outlier', (183.4, 191.4, 135.2)), ('A', '1099', 17, 'smoc Outlier', (183.728, 188.201, 133.129)), ('A', '531', 18, 'smoc Outlier', (189.084, 165.10399999999998, 221.86200000000002)), ('A', '532', 18, 'smoc Outlier', (187.93200000000002, 162.83100000000002, 219.05100000000002)), ('A', '318', 19, 'backbone clash', (184.75, 183.807, 200.266)), ('A', '593', 19, 'backbone clash', (184.75, 183.807, 200.266)), ('A', '986', 20, 'smoc Outlier', (197.62, 217.107, 226.37)), ('A', '987', 20, 'smoc Outlier', (200.82000000000002, 215.031, 225.967)), ('A', '398', 21, 'side-chain clash', (207.03, 167.212, 252.347)), ('A', '423', 21, 'side-chain clash', (207.03, 167.212, 252.347)), ('A', '581', 22, 'smoc Outlier', (197.865, 157.086, 216.323)), ('A', '582', 22, 'smoc Outlier', (200.924, 156.725, 214.075)), ('A', '444', 23, 'smoc Outlier', (197.172, 146.74099999999999, 265.86)), ('A', '445', 23, 'smoc Outlier', (196.38400000000001, 144.971, 269.126)), ('A', '108', 24, 'backbone clash', (163.852, 192.736, 235.686)), ('A', '234', 24, 'backbone clash', (163.852, 192.736, 235.686)), ('A', '641', 25, 'smoc Outlier', (169.0, 177.91299999999998, 189.879)), ('A', '642', 25, 'smoc Outlier', (172.26399999999998, 176.27499999999998, 190.99)), ('A', '518', 26, 'smoc Outlier', (213.464, 174.44299999999998, 239.996)), ('A', '519', 26, 'smoc Outlier', (215.82800000000003, 175.47899999999998, 237.207)), ('A', '645', 27, 'backbone clash', (181.223, 178.375, 188.6)), ('A', '648', 27, 'backbone clash', (181.223, 178.375, 188.6)), ('A', '333', 28, 'cablam Outlier\nsmoc Outlier', (200.5, 156.5, 229.9)), ('A', '334', 28, 'cablam Outlier', (203.3, 156.3, 232.4)), ('A', '877', 29, 'side-chain clash', (192.736, 223.168, 159.78)), ('A', '881', 29, 'side-chain clash', (192.736, 223.168, 159.78)), ('A', '854', 30, 'smoc Outlier', (181.829, 228.58200000000002, 197.814)), ('A', '856', 30, 'cablam CA Geom Outlier', (182.9, 226.0, 202.8)), ('A', '182', 31, 'smoc Outlier', (133.181, 208.518, 220.993)), ('A', '183', 31, 'smoc Outlier', (132.034, 206.49800000000002, 217.98000000000002)), ('A', '748', 32, 'smoc Outlier', (196.26399999999998, 221.99200000000002, 218.345)), ('A', '751', 32, 'smoc Outlier', (200.538, 223.33700000000002, 216.031)), ('A', '148', 33, 'smoc Outlier', (124.22, 209.283, 233.824)), ('A', '150', 33, 'cablam Outlier', (129.1, 211.1, 234.2)), ('A', '231', 34, 'cablam Outlier', (166.0, 203.6, 236.9)), ('A', '232', 34, 'cablam Outlier', (168.6, 200.8, 236.8)), ('A', '894', 35, 'smoc Outlier', (200.58800000000002, 228.824, 152.501)), ('A', '895', 35, 'smoc Outlier', (197.165, 229.73299999999998, 151.118)), ('A', '802', 36, 'side-chain clash\nbackbone clash', (193.796, 216.828, 209.172)), ('A', '805', 36, 'side-chain clash\nbackbone clash', (193.796, 216.828, 209.172)), ('C', '480', 1, 'cablam Outlier', (196.7, 239.7, 256.2)), ('C', '481', 1, 'cablam Outlier', (199.9, 241.7, 255.9)), ('C', '482', 1, 'cablam Outlier', (202.0, 240.1, 258.7)), ('C', '484', 1, 'cablam CA Geom Outlier', (198.4, 235.1, 261.0)), ('C', '485', 1, 'cablam Outlier\nsmoc Outlier', (194.7, 234.3, 261.1)), ('C', '486', 1, 'smoc Outlier', (191.82800000000003, 233.334, 258.712)), ('C', '487', 1, 'cablam Outlier', (193.9, 230.9, 256.7)), ('C', '1070', 2, 'smoc Outlier', (221.661, 188.503, 149.806)), ('C', '1071', 2, 'smoc Outlier', (224.312, 189.76299999999998, 147.35100000000003)), ('C', '717', 2, 'backbone clash', (218.872, 188.042, 145.654)), ('C', '718', 2, 'backbone clash', (218.872, 188.042, 145.654)), ('C', '292', 3, 'smoc Outlier', (232.17, 179.815, 206.768)), ('C', '293', 3, 'cablam CA Geom Outlier', (233.8, 177.2, 204.6)), ('C', '294', 3, 'smoc Outlier', (235.252, 179.289, 201.736)), ('C', '295', 3, 'smoc Outlier', (234.448, 182.491, 199.77899999999997)), ('C', '666', 4, 'cablam Outlier', (233.4, 195.8, 185.8)), ('C', '667', 4, 'cablam Outlier', (233.2, 199.5, 185.1)), ('C', '668', 4, 'smoc Outlier', (234.725, 202.296, 183.04399999999998)), ('C', '136', 5, 'side-chain clash', (239.506, 156.846, 241.015)), ('C', '14', 5, 'side-chain clash\nsmoc Outlier', (239.506, 156.846, 241.015)), ('C', '15', 5, 'smoc Outlier', (243.228, 158.88100000000003, 240.197)), ('C', '607', 6, 'side-chain clash', (240.134, 180.269, 186.284)), ('C', '674', 6, 'side-chain clash', (238.977, 179.892, 185.917)), ('C', '691', 6, 'side-chain clash', (240.134, 180.269, 186.284)), ('C', '102', 7, 'backbone clash', (228.368, 151.695, 228.098)), ('C', '121', 7, 'backbone clash', (228.368, 151.695, 228.098)), ('C', '122', 7, 'cablam Outlier', (227.4, 147.3, 230.3)), ('C', '198', 8, 'smoc Outlier', (220.36800000000002, 175.14299999999997, 229.39600000000002)), ('C', '231', 8, 'cablam Outlier', (219.3, 167.0, 233.7)), ('C', '232', 8, 'cablam Outlier', (219.9, 170.6, 234.5)), ('C', '616', 9, 'smoc Outlier', (243.04899999999998, 200.813, 195.64399999999998)), ('C', '618', 9, 'cablam Outlier', (247.4, 199.7, 198.8)), ('C', '620', 9, 'smoc Outlier', (243.82800000000003, 195.664, 201.405)), ('C', '183', 10, 'smoc Outlier', (242.45200000000003, 143.344, 215.995)), ('C', '184', 10, 'smoc Outlier', (242.536, 144.94899999999998, 212.555)), ('C', '262', 10, 'cablam CA Geom Outlier', (240.5, 147.7, 218.1)), ('C', '215', 11, 'side-chain clash\ncablam CA Geom Outlier', (241.653, 163.167, 209.011)), ('C', '29', 11, 'side-chain clash', (241.653, 163.167, 209.011)), ('C', '322', 12, 'smoc Outlier', (238.672, 201.166, 215.26999999999998)), ('C', '323', 12, 'smoc Outlier', (241.88600000000002, 199.61399999999998, 216.584)), ('C', '1073', 13, 'smoc Outlier', (227.917, 194.77499999999998, 143.954)), ('C', '1074', 13, 'smoc Outlier', (229.373, 198.21499999999997, 143.288)), ('C', '287', 14, 'backbone clash', (225.196, 168.816, 202.197)), ('C', '288', 14, 'backbone clash', (225.196, 168.816, 202.197)), ('C', '281', 15, 'smoc Outlier', (211.20399999999998, 164.375, 199.24399999999997)), ('C', '46', 15, 'smoc Outlier', (212.737, 169.529, 198.26899999999998)), ('C', '810', 16, 'smoc Outlier', (192.46800000000002, 166.876, 161.399)), ('C', '811', 16, 'smoc Outlier', (193.86100000000002, 167.61899999999997, 164.876)), ('C', '408', 17, 'smoc Outlier', (208.012, 208.781, 247.389)), ('C', '410', 17, 'cablam Outlier', (210.9, 213.2, 245.5)), ('C', '1098', 18, 'cablam Outlier', (228.4, 197.8, 134.9)), ('C', '1101', 18, 'smoc Outlier', (225.948, 200.536, 129.509)), ('C', '708', 19, 'side-chain clash', (232.209, 205.114, 144.285)), ('C', '711', 19, 'side-chain clash', (232.209, 205.114, 144.285)), ('C', '272', 20, 'smoc Outlier', (226.86, 178.118, 216.147)), ('C', '54', 20, 'cablam Outlier', (225.8, 173.7, 217.1)), ('C', '1127', 21, 'smoc Outlier', (227.343, 223.01, 132.11299999999997)), ('C', '1128', 21, 'smoc Outlier', (226.765, 223.687, 135.848)), ('C', '318', 22, 'backbone clash', (234.095, 196.919, 202.142)), ('C', '593', 22, 'backbone clash', (234.095, 196.919, 202.142)), ('C', '596', 23, 'side-chain clash', (230.777, 195.824, 194.21)), ('C', '613', 23, 'side-chain clash', (230.777, 195.824, 194.21)), ('C', '703', 24, 'smoc Outlier', (235.14299999999997, 199.47, 159.315)), ('C', '704', 24, 'smoc Outlier', (236.554, 201.947, 156.798)), ('C', '983', 25, 'smoc Outlier', (200.63, 185.485, 224.16299999999998)), ('C', '985', 25, 'smoc Outlier', (198.435, 191.722, 225.929)), ('C', '87', 26, 'smoc Outlier', (232.108, 174.24499999999998, 226.366)), ('C', '88', 26, 'cablam Outlier', (228.9, 173.9, 224.3)), ('C', '536', 27, 'smoc Outlier', (247.08200000000002, 208.224, 210.95100000000002)), ('C', '553', 27, 'smoc Outlier', (245.168, 214.21599999999998, 211.084)), ('C', '527', 28, 'cablam Outlier\nsmoc Outlier', (238.3, 206.0, 237.5)), ('C', '529', 28, 'smoc Outlier', (242.74499999999998, 205.037, 232.761)), ('C', '329', 29, 'side-chain clash', (245.059, 214.305, 229.808)), ('C', '580', 29, 'side-chain clash', (245.059, 214.305, 229.808)), ('C', '439', 30, 'side-chain clash\nbackbone clash', (212.417, 199.172, 149.249)), ('C', '443', 30, 'side-chain clash\nbackbone clash', (212.417, 199.172, 149.249)), ('C', '105', 31, 'side-chain clash', (233.848, 156.677, 232.313)), ('C', '241', 31, 'side-chain clash', (233.848, 156.677, 232.313)), ('C', '33', 32, 'cablam Outlier', (231.6, 167.5, 206.0)), ('C', '34', 32, 'cablam CA Geom Outlier', (230.8, 165.5, 209.2)), ('C', '645', 33, 'backbone clash', (239.446, 197.547, 190.11)), ('C', '648', 33, 'backbone clash', (239.446, 197.547, 190.11)), ('C', '603', 34, 'smoc Outlier', (228.063, 175.002, 185.564)), ('C', '604', 34, 'cablam Outlier', (231.1, 176.8, 184.1)), ('C', '557', 35, 'smoc Outlier', (240.349, 224.23499999999999, 210.42000000000002)), ('C', '558', 35, 'smoc Outlier', (240.732, 227.57299999999998, 212.23299999999998)), ('C', '973', 36, 'smoc Outlier', (208.407, 189.154, 217.923)), ('C', '974', 36, 'smoc Outlier', (206.712, 186.282, 216.067)), ('C', '149', 37, 'smoc Outlier', (237.55200000000002, 129.73499999999999, 229.27299999999997)), ('C', '150', 37, 'cablam Outlier', (236.2, 133.1, 228.3)), ('C', '880', 38, 'backbone clash', (192.878, 188.501, 153.441)), ('C', '884', 38, 'backbone clash', (192.878, 188.501, 153.441)), ('C', '802', 39, 'side-chain clash', (201.016, 180.747, 154.836)), ('C', '805', 39, 'side-chain clash', (201.016, 180.747, 154.836)), ('a', '41', 1, 'cablam CA Geom Outlier', (201.2, 157.3, 301.3)), ('a', '42', 1, 'cablam Outlier\nsmoc Outlier', (199.6, 160.1, 303.2)), ('a', '43', 1, 'cablam CA Geom Outlier', (200.5, 163.0, 300.9)), ('a', '7', 2, 'cablam CA Geom Outlier', (205.0, 140.2, 291.3)), ('a', '8', 2, 'cablam Outlier', (207.4, 138.1, 293.4)), ('a', '9', 2, 'cablam CA Geom Outlier', (207.0, 139.7, 296.8)), ('a', '87', 3, 'smoc Outlier', (205.134, 149.811, 309.025)), ('a', '88', 3, 'smoc Outlier', (204.423, 153.097, 307.207)), ('a', '176', 4, 'cablam Outlier\nsmoc Outlier', (194.2, 143.4, 315.1)), ('a', '177', 4, 'cablam Outlier\nsmoc Outlier', (196.9, 141.9, 312.8)), ('a', '202', 5, 'smoc Outlier', (191.463, 134.423, 295.241)), ('a', '207', 5, 'smoc Outlier', (197.545, 132.292, 294.835)), ('a', '74', 6, 'smoc Outlier', (218.542, 139.185, 280.622)), ('a', '75', 6, 'smoc Outlier', (215.138, 138.44899999999998, 282.202)), ('a', '100', 7, 'cablam Outlier', (210.1, 161.6, 276.2)), ('a', '101', 7, 'cablam Outlier', (210.6, 164.4, 278.7)), ('a', '53', 8, 'cablam CA Geom Outlier', (218.2, 154.6, 279.8)), ('a', '54', 8, 'cablam Outlier', (220.9, 152.0, 280.7)), ('b', '27', 1, 'cablam CA Geom Outlier', (212.7, 174.8, 289.5)), ('b', '28', 1, 'cablam Outlier', (214.0, 174.2, 286.9)), ('b', '97', 1, 'cablam Outlier', (214.9, 168.5, 288.6)), ('b', '206', 2, 'smoc Outlier', (164.22, 161.21299999999997, 303.16400000000004)), ('b', '207', 2, 'smoc Outlier', (162.771, 158.4, 305.28599999999994)), ('b', '208', 2, 'smoc Outlier', (165.05200000000002, 156.47, 307.675)), ('b', '30', 3, 'smoc Outlier', (214.52, 176.56, 280.158)), ('b', '32', 3, 'cablam Outlier', (215.4, 173.0, 275.6)), ('b', '33', 3, 'cablam Outlier', (212.5, 175.3, 274.7)), ('b', '156', 4, 'cablam Outlier', (168.5, 147.7, 324.5)), ('b', '157', 4, 'cablam CA Geom Outlier', (170.1, 151.1, 324.0)), ('b', '71', 5, 'smoc Outlier', (203.71599999999998, 180.07, 283.252)), ('b', '72', 5, 'smoc Outlier', (207.30100000000002, 179.266, 284.26099999999997)), ('b', '16', 6, 'smoc Outlier', (178.954, 169.565, 281.274)), ('b', '17', 6, 'smoc Outlier', (180.863, 172.131, 283.367)), ('B', '474', 1, 'backbone clash', (182.93, 180.468, 245.157)), ('B', '477', 1, 'smoc Outlier', (184.35700000000003, 180.889, 241.44899999999998)), ('B', '478', 1, 'backbone clash', (182.93, 180.468, 245.157)), ('B', '479', 1, 'smoc Outlier', (180.577, 178.39600000000002, 245.589)), ('B', '480', 1, 'cablam Outlier', (180.6, 178.9, 249.4)), ('B', '482', 1, 'cablam Outlier', (177.3, 180.9, 253.7)), ('B', '484', 1, 'cablam CA Geom Outlier', (183.7, 180.6, 254.8)), ('B', '485', 1, 'cablam Outlier', (186.4, 178.5, 253.2)), ('B', '487', 1, 'cablam Outlier', (189.0, 182.1, 249.7)), ('B', '879', 2, 'side-chain clash', (228.76, 206.175, 155.268)), ('B', '880', 2, 'backbone clash', (225.871, 205.883, 154.518)), ('B', '883', 2, 'side-chain clash', (228.76, 206.175, 155.268)), ('B', '884', 2, 'backbone clash', (225.871, 205.883, 154.518)), ('B', '891', 2, 'cablam Outlier', (219.7, 196.5, 155.7)), ('B', '893', 2, 'smoc Outlier', (225.373, 199.236, 154.011)), ('B', '894', 2, 'smoc Outlier', (224.80200000000002, 200.511, 150.45600000000002)), ('B', '1070', 3, 'smoc Outlier', (213.201, 231.59, 152.284)), ('B', '1071', 3, 'smoc Outlier', (211.342, 233.43200000000002, 149.48800000000003)), ('B', '1072', 3, 'smoc Outlier', (207.60299999999998, 233.118, 148.824)), ('B', '1073', 3, 'smoc Outlier', (205.292, 234.577, 146.19299999999998)), ('B', '717', 3, 'backbone clash', (215.199, 229.13, 148.37)), ('B', '718', 3, 'backbone clash', (215.199, 229.13, 148.37)), ('B', '921', 4, 'smoc Outlier', (227.676, 225.23499999999999, 146.266)), ('B', '922', 4, 'smoc Outlier', (224.894, 227.406, 147.706)), ('B', '925', 4, 'smoc Outlier', (227.556, 227.156, 152.05800000000002)), ('B', '929', 4, 'smoc Outlier', (227.39200000000002, 228.349, 157.625)), ('B', '932', 4, 'smoc Outlier', (229.324, 227.33, 162.032)), ('B', '102', 5, 'side-chain clash', (238.116, 251.08, 239.361)), ('B', '122', 5, 'cablam Outlier', (238.8, 247.9, 239.5)), ('B', '124', 5, 'smoc Outlier', (243.056, 246.02700000000002, 236.66)), ('B', '154', 5, 'side-chain clash', (238.116, 251.08, 239.361)), ('B', '292', 6, 'smoc Outlier', (212.661, 239.111, 209.656)), ('B', '293', 6, 'cablam Outlier\nsmoc Outlier', (214.1, 242.4, 208.3)), ('B', '294', 6, 'side-chain clash\nsmoc Outlier', (213.681, 241.949, 205.491)), ('B', '295', 6, 'smoc Outlier', (209.97299999999998, 240.238, 202.935)), ('B', '110', 7, 'side-chain clash', (178.623, 162.246, 291.465)), ('B', '144', 7, 'side-chain clash', (178.623, 162.246, 291.465)), ('B', '170', 7, 'backbone clash', (180.078, 157.075, 290.292)), ('B', '175', 7, 'backbone clash', (180.078, 157.075, 290.292)), ('B', '615', 8, 'backbone clash', (192.519, 237.491, 198.574)), ('B', '645', 8, 'backbone clash', (193.574, 237.53, 194.532)), ('B', '648', 8, 'backbone clash', (193.574, 237.53, 194.532)), ('B', '649', 8, 'backbone clash', (192.519, 237.491, 198.574)), ('B', '167', 9, 'side-chain clash', (225.832, 232.81, 241.834)), ('B', '168', 9, 'side-chain clash', (225.832, 232.81, 241.834)), ('B', '231', 9, 'cablam Outlier', (223.2, 231.3, 238.0)), ('B', '232', 9, 'cablam Outlier', (219.5, 230.5, 237.3)), ('B', '766', 10, 'smoc Outlier', (218.97, 198.35500000000002, 194.22)), ('B', '769', 10, 'smoc Outlier', (220.82800000000003, 197.33200000000002, 189.91299999999998)), ('B', '770', 10, 'smoc Outlier', (219.82100000000003, 200.795, 188.71599999999998)), ('B', '136', 11, 'side-chain clash', (223.262, 254.589, 247.711)), ('B', '14', 11, 'side-chain clash\nsmoc Outlier', (223.262, 254.589, 247.711)), ('B', '15', 11, 'smoc Outlier', (219.854, 258.48499999999996, 245.782)), ('B', '112', 12, 'side-chain clash', (219.514, 244.62, 248.974)), ('B', '113', 12, 'smoc Outlier', (216.67299999999997, 240.34, 249.305)), ('B', '134', 12, 'side-chain clash', (219.514, 244.62, 248.974)), ('B', '27', 13, 'side-chain clash', (211.486, 172.123, 288.73)), ('B', '94', 13, 'side-chain clash', (211.486, 172.123, 288.73)), ('B', '96', 13, 'side-chain clash', (211.109, 170.646, 286.965)), ('B', '1043', 14, 'cablam Outlier', (212.6, 216.1, 164.3)), ('B', '287', 14, 'backbone clash\nside-chain clash', (216.214, 216.857, 166.993)), ('B', '288', 14, 'backbone clash\nside-chain clash', (216.214, 216.857, 166.993)), ('B', '280', 15, 'backbone clash', (235.168, 230.864, 209.19)), ('B', '281', 15, 'smoc Outlier', (236.237, 227.80800000000002, 204.687)), ('B', '284', 15, 'backbone clash', (235.168, 230.864, 209.19)), ('B', '1098', 16, 'cablam Outlier', (202.4, 234.2, 137.1)), ('B', '1100', 16, 'smoc Outlier', (201.342, 234.974, 131.648)), ('B', '1101', 16, 'smoc Outlier', (201.01899999999998, 231.178, 131.412)), ('B', '414', 17, 'smoc Outlier', (192.955, 201.038, 236.629)), ('B', '415', 17, 'cablam CA Geom Outlier\nsmoc Outlier', (193.0, 198.0, 238.9)), ('B', '416', 17, 'smoc Outlier', (193.297, 197.94, 242.7)), ('B', '439', 18, 'side-chain clash\nsmoc Outlier', (193.401, 213.185, 261.954)), ('B', '440', 18, 'smoc Outlier', (192.706, 217.278, 261.962)), ('B', '443', 18, 'side-chain clash', (193.401, 213.185, 261.954)), ('B', '957', 19, 'smoc Outlier', (220.343, 218.512, 194.622)), ('B', '960', 19, 'smoc Outlier', (222.74899999999997, 217.10399999999998, 198.595)), ('B', '964', 19, 'smoc Outlier', (220.955, 216.788, 204.621)), ('B', '215', 20, 'side-chain clash\ncablam CA Geom Outlier', (222.675, 255.687, 215.313)), ('B', '29', 20, 'side-chain clash', (222.675, 255.687, 215.313)), ('B', '666', 21, 'cablam Outlier', (198.9, 234.6, 190.7)), ('B', '667', 21, 'cablam Outlier', (196.1, 232.0, 190.3)), ('B', '661', 22, 'smoc Outlier', (203.225, 236.894, 179.111)), ('B', '662', 22, 'smoc Outlier', (202.70899999999997, 235.009, 182.375)), ('B', '738', 23, 'side-chain clash', (224.36, 198.632, 201.68)), ('B', '764', 23, 'side-chain clash', (224.36, 198.632, 201.68)), ('B', '19', 24, 'smoc Outlier', (224.689, 268.28, 240.287)), ('B', '20', 24, 'smoc Outlier', (226.676, 268.79099999999994, 237.054)), ('B', '183', 25, 'smoc Outlier', (238.042, 264.58799999999997, 225.864)), ('B', '262', 25, 'cablam CA Geom Outlier', (234.4, 261.2, 227.7)), ('B', '1127', 26, 'smoc Outlier', (181.406, 221.844, 132.725)), ('B', '1128', 26, 'smoc Outlier', (181.21099999999998, 220.781, 136.409)), ('B', '318', 27, 'backbone clash\nside-chain clash', (215.293, 221.428, 137.764)), ('B', '593', 27, 'backbone clash\nside-chain clash', (215.293, 221.428, 137.764)), ('B', '191', 28, 'side-chain clash', (231.008, 246.119, 216.808)), ('B', '34', 28, 'side-chain clash\ncablam CA Geom Outlier', (231.008, 246.119, 216.808)), ('B', '618', 29, 'cablam Outlier\nsmoc Outlier', (189.6, 242.8, 204.7)), ('B', '620', 29, 'smoc Outlier', (195.23499999999999, 241.471, 206.176)), ('B', '271', 30, 'smoc Outlier', (214.71699999999998, 239.73299999999998, 220.18)), ('B', '272', 30, 'smoc Outlier', (214.40800000000002, 235.995, 219.33100000000002)), ('B', '87', 31, 'smoc Outlier', (213.417, 241.23899999999998, 230.177)), ('B', '88', 31, 'cablam CA Geom Outlier', (215.1, 238.8, 227.7)), ('B', '385', 32, 'smoc Outlier', (191.586, 225.845, 234.348)), ('B', '386', 32, 'smoc Outlier', (189.499, 224.999, 231.259)), ('B', '149', 33, 'smoc Outlier', (248.76899999999998, 263.639, 244.045)), ('B', '150', 33, 'cablam Outlier', (246.5, 261.6, 241.9)), ('B', '603', 34, 'smoc Outlier', (219.692, 241.931, 189.502)), ('B', '604', 34, 'cablam Outlier', (216.4, 243.3, 188.1)), ('B', '333', 35, 'smoc Outlier', (171.187, 232.255, 238.037)), ('B', '334', 35, 'smoc Outlier', (172.58700000000002, 230.11599999999999, 240.88500000000002)), ('B', '560', 36, 'side-chain clash', (167.588, 222.386, 218.215)), ('B', '577', 36, 'side-chain clash', (167.588, 222.386, 218.215)), ('B', '1084', 37, 'cablam Outlier\nsmoc Outlier', (189.1, 221.4, 124.7)), ('B', '1085', 37, 'smoc Outlier', (186.518, 221.159, 127.521)), ('B', '657', 38, 'smoc Outlier', (193.95600000000002, 245.374, 181.918)), ('B', '658', 38, 'smoc Outlier', (196.617, 244.835, 179.23999999999998)), ('B', '810', 39, 'smoc Outlier', (244.065, 214.45200000000003, 166.379)), ('B', '811', 39, 'smoc Outlier', (242.39000000000001, 215.20499999999998, 169.728)), ('B', '1057', 40, 'cablam Outlier', (227.7, 214.0, 178.7)), ('B', '1058', 40, 'cablam Outlier', (225.1, 211.3, 179.6))]
data['omega'] = [('a', ' 151 ', 'PRO', None, (198.06399999999994, 138.489, 304.854)), ('a', ' 153 ', 'PRO', None, (195.65099999999995, 141.944, 299.786)), ('a', ' 193 ', 'PRO', None, (166.745, 129.667, 297.411)), ('b', '   8 ', 'PRO', None, (193.096, 172.78000000000006, 293.645)), ('b', '  28 ', 'SER', None, (213.277, 173.251, 287.696)), ('b', '  81 ', 'PRO', None, (184.8, 169.129, 278.413)), ('b', '  99 ', 'PRO', None, (213.92, 165.46000000000006, 292.975)), ('b', ' 145 ', 'PRO', None, (174.75399999999993, 160.03800000000004, 296.527))]
data['cablam'] = [('A', '122', 'ASN', 'check CA trace,carbonyls, peptide', ' \nEE-SS', (144.8, 208.9, 235.6)), ('A', '150', 'LYS', 'check CA trace,carbonyls, peptide', ' \nSS-TT', (129.1, 211.1, 234.2)), ('A', '231', 'ILE', ' beta sheet', ' \nEE---', (166.0, 203.6, 236.9)), ('A', '232', 'GLY', ' beta sheet', ' \nE----', (168.6, 200.8, 236.8)), ('A', '333', 'THR', 'check CA trace,carbonyls, peptide', ' \n---SB', (200.5, 156.5, 229.9)), ('A', '334', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\n--SB-', (203.3, 156.3, 232.4)), ('A', '481', 'ASN', 'check CA trace,carbonyls, peptide', ' \n---SS', (226.8, 161.6, 279.3)), ('A', '482', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\n--SS-', (224.4, 159.8, 277.0)), ('A', '487', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\n-SS--', (217.3, 167.4, 283.3)), ('A', '488', 'CYS', 'check CA trace,carbonyls, peptide', ' \nSS---', (218.2, 165.8, 280.0)), ('A', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (182.8, 184.5, 185.0)), ('A', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (185.6, 182.2, 183.8)), ('A', '699', 'LEU', 'check CA trace,carbonyls, peptide', ' \nB---E', (184.2, 184.8, 169.8)), ('A', '745', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nSSS-H', (188.9, 224.0, 212.6)), ('A', '783', 'ALA', ' three-ten', 'turn\nHTTTS', (199.9, 225.3, 171.8)), ('A', '1034', 'LEU', 'check CA trace,carbonyls, peptide', 'bend\nIISS-', (198.5, 218.6, 160.2)), ('A', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'bend\nTTSSS', (192.7, 209.0, 162.6)), ('A', '1045', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nSSSSE', (188.1, 205.2, 160.9)), ('A', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (189.1, 220.9, 179.3)), ('A', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSS-', (202.8, 188.3, 122.4)), ('A', '1092', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (199.4, 202.0, 139.7)), ('A', '1098', 'ASN', 'check CA trace,carbonyls, peptide', ' \nEE-SS', (183.4, 191.4, 135.2)), ('A', '34', 'ARG', 'check CA trace', ' \nSS--E', (157.1, 201.9, 211.7)), ('A', '88', 'ASP', 'check CA trace', 'bend\n-SSEE', (165.7, 193.6, 224.1)), ('A', '214', 'ARG', 'check CA trace', 'bend\nESSSS', (141.9, 198.6, 209.8)), ('A', '215', 'ASP', 'check CA trace', 'bend\nSSSS-', (145.4, 197.4, 210.8)), ('A', '262', 'ALA', 'check CA trace', 'bend\n--SEE', (136.7, 201.7, 221.4)), ('A', '293', 'LEU', 'check CA trace', 'bend\nS-SSH', (165.4, 192.9, 204.0)), ('A', '484', 'GLU', 'check CA trace', ' \nSS--S', (218.5, 160.5, 280.0)), ('A', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (192.7, 175.4, 210.8)), ('A', '797', 'PHE', 'check CA trace', 'bend\n--SSS', (184.6, 226.1, 149.1)), ('A', '856', 'ASN', 'check CA trace', 'bend\n--SS-', (182.9, 226.0, 202.8)), ('A', '1123', 'SER', 'check CA trace', ' \nEE-S-', (208.9, 194.0, 132.0)), ('A', '1134', 'ASN', 'check CA trace', ' \n-----', (196.3, 187.2, 127.8)), ('C', '33', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nESS--', (231.6, 167.5, 206.0)), ('C', '54', 'LEU', 'check CA trace,carbonyls, peptide', 'bend\nESSB-', (225.8, 173.7, 217.1)), ('C', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\n-SSEE', (228.9, 173.9, 224.3)), ('C', '122', 'ASN', 'check CA trace,carbonyls, peptide', ' \nEE-SS', (227.4, 147.3, 230.3)), ('C', '150', 'LYS', 'check CA trace,carbonyls, peptide', ' \nSS-TT', (236.2, 133.1, 228.3)), ('C', '231', 'ILE', ' beta sheet', ' \nEE---', (219.3, 167.0, 233.7)), ('C', '232', 'GLY', ' beta sheet', ' \nE----', (219.9, 170.6, 234.5)), ('C', '310', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\n--SEE', (227.7, 184.0, 185.8)), ('C', '410', 'ILE', 'check CA trace,carbonyls, peptide', 'bend\nTTSST', (210.9, 213.2, 245.5)), ('C', '480', 'CYS', 'check CA trace,carbonyls, peptide', ' \n----S', (196.7, 239.7, 256.2)), ('C', '481', 'ASN', 'check CA trace,carbonyls, peptide', ' \n---SS', (199.9, 241.7, 255.9)), ('C', '482', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\n--SS-', (202.0, 240.1, 258.7)), ('C', '485', 'GLY', 'check CA trace,carbonyls, peptide', ' \nS--SS', (194.7, 234.3, 261.1)), ('C', '487', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\n-SS--', (193.9, 230.9, 256.7)), ('C', '527', 'PRO', 'check CA trace,carbonyls, peptide', 'bend\nB-S--', (238.3, 206.0, 237.5)), ('C', '547', 'THR', ' beta sheet', 'strand\nTEEEE', (233.3, 211.0, 221.4)), ('C', '604', 'THR', 'check CA trace,carbonyls, peptide', 'turn\nTTT--', (231.1, 176.8, 184.1)), ('C', '618', 'THR', 'check CA trace,carbonyls, peptide', 'turn\n-TT--', (247.4, 199.7, 198.8)), ('C', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (233.4, 195.8, 185.8)), ('C', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (233.2, 199.5, 185.1)), ('C', '745', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\n-SS-H', (192.4, 183.1, 210.0)), ('C', '758', 'SER', 'check CA trace,carbonyls, peptide', 'bend\nT-SHH', (192.1, 200.0, 201.8)), ('C', '797', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\n--STT', (197.4, 180.0, 147.5)), ('C', '1034', 'LEU', 'check CA trace,carbonyls, peptide', 'bend\nIISS-', (197.5, 193.9, 159.6)), ('C', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (199.1, 182.9, 177.2)), ('C', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (221.9, 216.7, 124.3)), ('C', '1092', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (212.6, 207.9, 141.4)), ('C', '1098', 'ASN', 'check CA trace,carbonyls, peptide', ' \nEE-SS', (228.4, 197.8, 134.9)), ('C', '34', 'ARG', 'check CA trace', ' \nSS---', (230.8, 165.5, 209.2)), ('C', '214', 'ARG', 'check CA trace', 'bend\nE-SSS', (242.7, 155.9, 208.3)), ('C', '215', 'ASP', 'check CA trace', 'bend\n-SSS-', (241.5, 159.2, 209.8)), ('C', '262', 'ALA', 'check CA trace', 'bend\n--SEE', (240.5, 147.7, 218.1)), ('C', '293', 'LEU', 'check CA trace', 'bend\nTTS-H', (233.8, 177.2, 204.6)), ('C', '484', 'GLU', 'check CA trace', ' \nSS--S', (198.4, 235.1, 261.0)), ('C', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (235.6, 207.5, 215.5)), ('a', '8', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nEES--', (207.4, 138.1, 293.4)), ('a', '42', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\n-SSSS', (199.6, 160.1, 303.2)), ('a', '54', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\n-SSS-', (220.9, 152.0, 280.7)), ('a', '56', 'ASN', 'check CA trace,carbonyls, peptide', ' \nSS-EE', (222.7, 155.5, 286.7)), ('a', '100', 'GLY', 'check CA trace,carbonyls, peptide', 'turn\nE-TTS', (210.1, 161.6, 276.2)), ('a', '101', 'ALA', 'check CA trace,carbonyls, peptide', 'turn\n-TTS-', (210.6, 164.4, 278.7)), ('a', '138', 'SER', 'check CA trace,carbonyls, peptide', 'bend\n-SS-E', (161.2, 140.5, 295.3)), ('a', '176', 'SER', 'check CA trace,carbonyls, peptide', 'bend\nE-SSS', (194.2, 143.4, 315.1)), ('a', '177', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\n-SSSE', (196.9, 141.9, 312.8)), ('a', '7', 'SER', 'check CA trace', 'strand\n-EES-', (205.0, 140.2, 291.3)), ('a', '9', 'PRO', 'check CA trace', ' \nES---', (207.0, 139.7, 296.8)), ('a', '41', 'PRO', 'check CA trace', 'bend\nS-SSS', (201.2, 157.3, 301.3)), ('a', '43', 'LYS', 'check CA trace', 'bend\nSSSS-', (200.5, 163.0, 300.9)), ('a', '53', 'ARG', 'check CA trace', 'bend\nE-SSS', (218.2, 154.6, 279.8)), ('a', '192', 'TRP', 'check CA trace', 'turn\nGGTTS', (168.5, 130.6, 295.9)), ('b', '28', 'SER', 'check CA trace,carbonyls, peptide', ' \n-S---', (214.0, 174.2, 286.9)), ('b', '32', 'TYR', 'check CA trace,carbonyls, peptide', 'bend\n-SSS-', (215.4, 173.0, 275.6)), ('b', '33', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nSSS--', (212.5, 175.3, 274.7)), ('b', '55', 'ALA', 'check CA trace,carbonyls, peptide', 'turn\nETTTE', (201.4, 170.9, 278.9)), ('b', '61', 'GLY', 'check CA trace,carbonyls, peptide', 'turn\n-TTS-', (195.0, 156.5, 275.9)), ('b', '87', 'ALA', 'check CA trace,carbonyls, peptide', ' \nT--EE', (186.1, 160.9, 288.2)), ('b', '97', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\n-SSSS', (214.9, 168.5, 288.6)), ('b', '142', 'ASN', 'check CA trace,carbonyls, peptide', 'strand\nEEEEB', (174.5, 150.7, 295.0)), ('b', '156', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\n-SSS-', (168.5, 147.7, 324.5)), ('b', '7', 'SER', 'check CA trace', 'beta bridge\n--B-S', (195.4, 173.1, 294.5)), ('b', '27', 'GLU', 'check CA trace', 'bend\n--S--', (212.7, 174.8, 289.5)), ('b', '67', 'SER', 'check CA trace', 'strand\nTEEEE', (194.1, 170.9, 277.8)), ('b', '104', 'SER', 'check CA trace', 'bend\n--S-E', (199.3, 167.1, 296.5)), ('b', '157', 'SER', 'check CA trace', 'bend\nSSS--', (170.1, 151.1, 324.0)), ('B', '33', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nESS--', (224.0, 245.2, 211.7)), ('B', '122', 'ASN', 'check CA trace,carbonyls, peptide', ' \nEE-SS', (238.8, 247.9, 239.5)), ('B', '150', 'LYS', 'check CA trace,carbonyls, peptide', ' \nSS-TT', (246.5, 261.6, 241.9)), ('B', '231', 'ILE', ' beta sheet', ' \nEE---', (223.2, 231.3, 238.0)), ('B', '232', 'GLY', ' beta sheet', ' \nE----', (219.5, 230.5, 237.3)), ('B', '293', 'LEU', 'check CA trace,carbonyls, peptide', 'bend\nTTS-H', (214.1, 242.4, 208.3)), ('B', '310', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\n--SEE', (212.2, 236.2, 189.3)), ('B', '480', 'CYS', 'check CA trace,carbonyls, peptide', ' \n---SS', (180.6, 178.9, 249.4)), ('B', '482', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\n-SSS-', (177.3, 180.9, 253.7)), ('B', '485', 'GLY', 'check CA trace,carbonyls, peptide', ' \nS--SS', (186.4, 178.5, 253.2)), ('B', '487', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\n-SS--', (189.0, 182.1, 249.7)), ('B', '547', 'THR', ' beta sheet', 'strand\nTEEEE', (185.1, 225.1, 220.6)), ('B', '604', 'THR', 'check CA trace,carbonyls, peptide', 'turn\nTTT--', (216.4, 243.3, 188.1)), ('B', '618', 'THR', 'check CA trace,carbonyls, peptide', 'turn\n-TT--', (189.6, 242.8, 204.7)), ('B', '666', 'ILE', 'check CA trace,carbonyls, peptide', ' \nEE-SS', (198.9, 234.6, 190.7)), ('B', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nE-SSS', (196.1, 232.0, 190.3)), ('B', '699', 'LEU', 'check CA trace,carbonyls, peptide', ' \nB----', (197.3, 233.1, 174.8)), ('B', '745', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nSSS-H', (231.1, 203.5, 211.6)), ('B', '758', 'SER', 'check CA trace,carbonyls, peptide', 'bend\nT-SHH', (218.1, 193.2, 205.0)), ('B', '891', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nHHSS-', (219.7, 196.5, 155.7)), ('B', '1034', 'LEU', 'check CA trace,carbonyls, peptide', 'bend\nIISS-', (218.2, 206.5, 160.2)), ('B', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'bend\nTTSSS', (212.6, 216.1, 164.3)), ('B', '1057', 'PRO', 'check CA trace,carbonyls, peptide', 'turn\nEETTE', (227.7, 214.0, 178.7)), ('B', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (225.1, 211.3, 179.6)), ('B', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (189.1, 221.4, 124.7)), ('B', '1092', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (201.7, 215.2, 141.3)), ('B', '1098', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\nEESSS', (202.4, 234.2, 137.1)), ('B', '34', 'ARG', 'check CA trace', ' \nSS---', (225.3, 245.1, 215.3)), ('B', '88', 'ASP', 'check CA trace', 'bend\n-SS-E', (215.1, 238.8, 227.7)), ('B', '214', 'ARG', 'check CA trace', 'bend\nESSSS', (228.7, 259.8, 215.5)), ('B', '215', 'ASP', 'check CA trace', 'bend\nSSSS-', (226.1, 257.3, 216.6)), ('B', '262', 'ALA', 'check CA trace', 'bend\n--SEE', (234.4, 261.2, 227.7)), ('B', '415', 'THR', 'check CA trace', ' \nT--SH', (193.0, 198.0, 238.9)), ('B', '484', 'GLU', 'check CA trace', ' \nSS--S', (183.7, 180.6, 254.8)), ('B', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (187.3, 229.2, 215.1)), ('B', '797', 'PHE', 'check CA trace', 'bend\n--STT', (231.4, 214.9, 150.3))]
handle_read_draw_probe_dots_unformatted("/home/ccpem/agnel/gisaid/countries_seq/structure_data/emdb/EMD-30703/7dk5/Model_validation_1/validation_cootdata/molprobity_probe7dk5_0.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
