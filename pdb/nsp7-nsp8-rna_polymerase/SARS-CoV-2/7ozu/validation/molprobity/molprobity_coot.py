# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (94.69500000000009, 117.635, 117.843)), ('B', ' 183 ', 'PRO', None, (116.545, 103.91399999999999, 125.78099999999999))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 330  VAL HG21', ' B 120  ILE HD11', -0.807, (106.615, 129.56, 111.963)), (' A 358  ASP  HB2', ' A 534  ASN HD21', -0.795, (90.734, 131.567, 103.141)), (' A 426  LYS  NZ ', ' A 886  GLN  OE1', -0.73, (83.305, 66.635, 120.48)), (' A 514  LEU HD21', ' B  83  VAL HG21', -0.713, (83.296, 119.542, 121.81)), (' A 398  VAL HG21', ' A 666  MET  HE1', -0.684, (107.172, 118.471, 111.577)), (' A 242  MET  HG2', ' A 463  MET  HE2', -0.681, (111.237, 112.807, 83.968)), (' A 531  THR HG21', ' A 567  THR HG21', -0.677, (88.059, 120.337, 104.794)), (' C  47  GLU  OE2', ' C  51  LYS  NZ ', -0.675, (116.377, 79.939, 121.567)), (' A 714  LYS  NZ ', ' A 773  GLN  O  ', -0.671, (105.978, 86.737, 72.2)), (' A 468  GLN  HA ', ' A 731  LEU HD11', -0.662, (103.086, 106.001, 78.986)), (' B 132  ILE HG21', ' B 138  TYR  HB2', -0.661, (123.824, 108.298, 123.475)), (' A 606  TYR  HE1', ' A 614  LEU HD21', -0.642, (90.232, 82.193, 87.696)), (' A 746  TYR  OH ', ' A 750  ARG  NH2', -0.618, (85.959, 97.64, 82.046)), (' B 103  LEU HD23', ' B 106  ILE HD11', -0.605, (110.234, 132.41, 114.213)), (' A 225  THR HG22', ' A 226  THR  H  ', -0.598, (114.697, 124.621, 57.896)), (' A 892  HIS  HD1', ' A 916  TRP  HZ3', -0.597, (71.967, 75.536, 122.782)), (' A 726  ARG  NH1', ' A 744  GLU  OE1', -0.575, (92.89, 100.488, 67.411)), (' B 157  GLN  HG3', ' B 189  LEU HD23', -0.567, (119.151, 123.367, 130.848)), (' A 691  ASN  HB3', ' A 759  SER  O  ', -0.557, (95.457, 98.654, 97.592)), (' A 493  VAL HG21', ' A 570  GLN  HG2', -0.557, (79.828, 115.771, 103.814)), (' A 206  THR  OG1', ' A 209  ASN  OD1', -0.553, (118.335, 106.481, 68.609)), (' A 755  MET  HG2', ' A 764  VAL HG22', -0.551, (94.396, 91.018, 86.567)), (' A 372  LEU HD12', ' B  87  MET  HE1', -0.546, (87.781, 124.203, 117.245)), (' A 350  GLU  HG3', ' A 632  ILE HD11', -0.541, (102.417, 115.253, 94.725)), (' A 476  VAL HG22', ' A 696  ILE HG22', -0.535, (94.356, 100.583, 86.155)), (' A 614  LEU  HB2', ' A 802  GLU  HB3', -0.532, (95.193, 79.825, 88.896)), (' A 715  ILE  O  ', ' A 721  ARG  NH2', -0.528, (104.16, 88.746, 63.584)), (' A 291  ASP  OD1', ' A 735  ARG  NH2', -0.525, (107.006, 118.019, 73.631)), (' A 343  SER  OG ', ' A 377  ASP  OD2', -0.522, (97.944, 126.485, 109.047)), (' A 382  ALA  HB3', ' B 117  LEU HD11', -0.522, (105.295, 123.961, 114.253)), (' A 885  LEU HD22', ' A 916  TRP  HA ', -0.521, (76.003, 74.553, 116.052)), (' A 200  GLY  O  ', ' A 225  THR  N  ', -0.52, (117.752, 120.919, 58.673)), (' A 818  MET  HE1', ' A 868  PRO  O  ', -0.52, (84.697, 73.283, 103.095)), (' A 131  LEU HD13', ' A 247  LEU HD23', -0.519, (117.646, 102.288, 88.046)), (' B  90  MET  SD ', ' B  94  MET  HE2', -0.517, (96.964, 124.189, 121.798)), (' A 726  ARG  NH2', ' A 744  GLU  OE2', -0.517, (93.721, 97.994, 67.66)), (' C   7  LYS  NZ ', ' C  40  LEU  O  ', -0.516, (105.84, 79.24, 118.188)), (' A 495  VAL HG21', ' A 498  LEU HD21', -0.516, (78.7, 110.789, 112.264)), (' A 836  ARG  NH1', ' A 840  ALA  HB2', -0.515, (91.068, 84.743, 114.283)), (' P   9    C  O2 ', ' T  15    G  N2 ', -0.512, (74.046, 95.29, 119.613)), (' A 498  LEU  HB3', ' A 513  ARG  HB2', -0.509, (79.353, 110.622, 117.959)), (' A 197  ARG  NE ', ' A 289  TYR  OH ', -0.505, (118.263, 124.923, 70.642)), (' A 684  ASP  O  ', " T   9  7OK  O2'", -0.503, (89.402, 105.537, 105.584)), (' A 836  ARG HH12', ' A 840  ALA  HB2', -0.502, (90.748, 84.676, 114.682)), (' C  23  GLU  HA ', ' C  29  TRP  HB2', -0.491, (108.465, 96.032, 131.07)), (' A 668  MET  HE3', ' A 671  GLY  HA2', -0.491, (103.389, 113.482, 121.526)), (' C  14  LEU HD22', ' C  36  HIS  CG ', -0.487, (105.596, 87.379, 125.489)), (' A 209  ASN  ND2', ' A 218  ASP  OD2', -0.486, (121.738, 105.553, 66.61)), (' A 318  SER  OG ', ' A 349  ARG  O  ', -0.482, (109.422, 119.498, 95.161)), (' A 819  LEU HD11', ' A 826  TYR  HB3', -0.482, (82.484, 73.662, 90.488)), (' C  17  LEU  HG ', ' C  59  LEU HD12', -0.48, (106.142, 86.046, 134.745)), (' A 601  MET  O  ', ' A 605  VAL HG23', -0.479, (85.661, 87.103, 89.326)), (' A 311  ALA  O  ', ' A 315  VAL HG23', -0.479, (106.838, 115.225, 91.581)), (' A 605  VAL HG12', ' A 765  CYS  HB2', -0.473, (90.084, 85.526, 85.979)), (' B  87  MET  O  ', ' B  91  LEU  HG ', -0.472, (92.364, 126.573, 121.712)), (' A 612  PRO  HB2', ' A 805  LEU HD11', -0.472, (90.325, 80.122, 83.429)), (' A 726  ARG  HA ', ' A 729  GLU  HG3', -0.469, (100.291, 103.542, 67.57)), (' A 388  LEU HD22', ' A 672  SER  HB3', -0.467, (109.482, 114.428, 118.883)), (' B 159  VAL HG22', ' B 186  VAL HG23', -0.467, (121.308, 114.741, 129.062)), (' A 831  TYR  HB3', ' A 868  PRO  HB2', -0.466, (86.142, 76.592, 103.391)), (' A 371  LEU  HB3', ' B  87  MET  HE2', -0.465, (88.598, 125.676, 118.543)), (' A 654  ARG  O  ', ' A 658  GLU  HG3', -0.452, (92.439, 116.728, 98.287)), (' A 785  VAL  HA ', ' A 788  TYR  CE1', -0.452, (108.219, 98.828, 86.089)), (' C   3  MET  HG3', ' C   7  LYS  HE2', -0.45, (105.07, 75.849, 119.694)), (' A 769  THR  O  ', ' A 773  GLN  HG3', -0.45, (101.363, 83.331, 73.914)), (' A 592  SER  O  ', ' A 597  GLY  HA3', -0.449, (79.668, 87.152, 97.654)), (' A 445  ASP  N  ', ' A 445  ASP  OD1', -0.447, (108.528, 96.383, 122.648)), (' A 140  ASP  O  ', ' A 143  LYS  N  ', -0.446, (125.421, 92.795, 84.751)), (' A 855  MET  HE3', ' A 859  PHE  HE2', -0.445, (84.369, 81.426, 123.795)), (' A 299  VAL HG22', ' A 652  PHE  CE2', -0.445, (97.814, 125.887, 93.8)), (' A 830  PRO  O  ', ' A 868  PRO  HG2', -0.444, (84.301, 78.853, 103.423)), (' A 258  ASP  OD2', ' A 263  LYS  NZ ', -0.443, (133.215, 126.372, 92.529)), (' B 139  LYS  HA ', ' B 143  ASP  HB3', -0.443, (130.213, 111.177, 123.235)), (' A 254  GLU  OE1', ' A 285  ARG  NH2', -0.442, (121.699, 123.345, 89.028)), (' A 736  ASP  N  ', ' A 736  ASP  OD1', -0.439, (97.185, 114.446, 72.006)), (' A 816  HIS  O  ', ' A 830  PRO  HA ', -0.437, (87.655, 79.494, 99.784)), (' A 333  ILE  HB ', ' A 361  LEU  HB2', -0.434, (97.026, 138.381, 111.047)), (' B 177  SER  OG ', ' B 178  PRO  HD3', -0.433, (128.014, 99.162, 128.872)), (' A 331  ARG  NH2', ' B 114  CYS  SG ', -0.432, (102.486, 135.141, 104.28)), (' A 404  ASN  N  ', ' A 404  ASN  OD1', -0.432, (107.572, 114.711, 129.01)), (' A 858  ARG  HG3', " P  12    A  H5'", -0.432, (84.526, 87.28, 118.722)), (' A 388  LEU HD23', ' A 397  SER  HB3', -0.43, (111.802, 115.305, 116.345)), (' A 818  MET  HE3', ' A 829  LEU HD23', -0.428, (83.337, 74.488, 100.784)), (' A 627  PRO  HD2', ' A 630  LEU HD12', -0.427, (103.507, 104.003, 93.441)), (' A 260  ASP  OD2', ' A 262  THR  OG1', -0.425, (135.116, 119.648, 93.858)), (' A 545  LYS  HD3', ' A 555  ARG  NH1', -0.425, (96.593, 96.082, 112.629)), (' A 122  TYR  CE2', ' A 141  THR HG23', -0.423, (125.041, 95.195, 79.524)), (' A 136  GLU  HA ', ' A 139  CYS  SG ', -0.421, (118.781, 89.973, 88.71)), (' A 603  LYS  HA ', ' A 603  LYS  HD2', -0.421, (83.356, 81.97, 87.031)), (' A 790  ASN  HB3', ' A 792  VAL HG22', -0.42, (107.72, 98.572, 95.107)), (' A 636  LEU HD21', ' A 655  LEU HD22', -0.42, (95.614, 116.912, 91.553)), (" P  12    A  H2'", ' P  13    G  C8 ', -0.418, (85.745, 89.336, 112.235)), (' A 619  TYR  HE1', ' A 786  LEU HD11', -0.418, (102.914, 96.363, 92.711)), (' A 268  TRP  CD1', ' A 322  PRO  HD3', -0.414, (118.855, 124.338, 99.981)), (' B 159  VAL HG11', ' B 172  ILE HD11', -0.413, (122.69, 110.688, 130.441)), (' C  49  PHE  O  ', ' C  53  VAL HG23', -0.408, (112.411, 75.898, 130.176)), (' A 783  LYS  HB2', ' A 794  MET  HE2', -0.407, (107.814, 90.291, 90.867)), (' A 422  PHE  O  ', ' A 426  LYS  HG2', -0.406, (87.897, 69.271, 122.915)), (' A 576  LEU  HG ', ' A 689  TYR  CE1', -0.404, (85.819, 104.287, 99.491)), (" P  12    A  H2'", ' P  13    G  H8 ', -0.402, (85.741, 89.109, 112.656)), (' A 576  LEU HD21', ' A 686  THR HG22', -0.401, (87.14, 107.637, 100.327)), (' A 291  ASP  CG ', ' A 735  ARG HH22', -0.4, (107.142, 119.035, 73.189)), (' C  13  LEU  HA ', ' C  13  LEU HD23', -0.4, (102.967, 82.808, 133.462)), (' A 494  ILE  O  ', ' A 573  GLN  NE2', -0.4, (78.621, 108.762, 105.123))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
