# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 360 ', 'ASN', 0.01658063907687802, (100.355, 7.842, -44.44200000000001)), ('H', ' 100 ', 'GLY', 0.024633795371084555, (52.218999999999994, -0.034999999999999996, -39.32700000000001)), ('H', ' 126 ', 'PRO', 0.033576185760368554, (7.386, 23.408, -15.608))]
data['omega'] = [('H', ' 147 ', 'PRO', None, (33.114, 12.71199999999999, -6.673)), ('H', ' 149 ', 'PRO', None, (30.871000000000002, 9.468, -11.440000000000001)), ('L', '   8 ', 'PRO', None, (37.209, 19.893, -42.04500000000002)), ('L', '  96 ', 'PRO', None, (58.07099999999999, 12.376, -28.816000000000003)), ('L', ' 142 ', 'PRO', None, (20.894, 22.341999999999995, -36.844))]
data['rota'] = []
data['cbeta'] = [('C', ' 340 ', 'GLU', ' ', 0.4310958317490564, (88.81699999999995, 10.945, -52.46600000000001))]
data['probe'] = [(' L  27  GLN  NE2', ' L 301  HOH  O  ', -1.067, (61.779, 21.792, -41.301)), (' H 193  THR HG23', ' H 210  ARG  HE ', -0.899, (3.951, 12.937, -8.462)), (' C 367  VAL  O  ', ' C 371  SER  N  ', -0.719, (88.385, 24.761, -46.771)), (' C 395  VAL HG23', ' C 524  VAL HG21', -0.713, (95.12, 10.555, -39.788)), (' L 144  GLU  OE1', ' L 303  HOH  O  ', -0.678, (25.739, 24.788, -38.072)), (' H 128  SER  O  ', ' H 301  HOH  O  ', -0.66, (1.622, 28.34, -14.926)), (' H 169  VAL HG21', ' L 161  GLN  HB3', -0.643, (28.996, 24.706, -17.712)), (' C 338  PHE  HE1', ' C 358  ILE HD13', -0.642, (90.971, 11.779, -44.292)), (' C 385  THR HG23', ' C 386  LYS  HG3', -0.641, (92.381, 26.904, -33.422)), (' L  40  LYS  NZ ', ' L 302  HOH  O  ', -0.636, (32.098, 0.627, -35.989)), (' C 403  ARG  HD2', ' C 505  TYR  HA ', -0.627, (63.256, 15.273, -42.526)), (' C 360  ASN HD22', ' C 523  THR  HB ', -0.597, (101.761, 6.693, -42.493)), (' H   4  LEU HD22', ' H  22  CYS  SG ', -0.596, (49.934, -1.886, -23.24)), (' L 214  GLU  N  ', ' L 308  HOH  O  ', -0.588, (6.711, 33.741, -8.89)), (' C 335  LEU HD23', ' C 362  VAL HG13', -0.575, (99.896, 16.553, -48.006)), (' L  46  ARG  NH2', ' L 307  HOH  O  ', -0.563, (35.808, 0.88, -39.467)), (' L 146  LYS  NZ ', ' L 310  HOH  O  ', -0.553, (26.363, 34.45, -26.08)), (' H 201  LYS  HB2', ' H 202  PRO  HD3', -0.514, (29.486, 6.56, -7.79)), (' C 383  SER  O  ', ' C 387  LEU  HB2', -0.497, (91.257, 21.973, -35.256)), (' H  12  ILE HG21', ' H  82C LEU HD13', -0.49, (47.421, 12.191, -10.086)), (' H 133  GLY  N  ', ' H 307  HOH  O  ', -0.487, (-0.418, 26.357, -25.477)), (' H  11  LEU HD21', ' H 147  PRO  HG3', -0.485, (36.027, 10.661, -7.035)), (' L  28  SER  OG ', ' L 304  HOH  O  ', -0.484, (56.659, 18.263, -48.55)), (' H  20  LEU  HG ', ' H  82  MET  HE2', -0.456, (49.212, 7.253, -14.302)), (' L 181  THR  O  ', ' L 182  LEU HD23', -0.452, (24.412, 33.801, -11.596)), (' H 193  THR HG23', ' H 210  ARG  NE ', -0.449, (4.782, 12.511, -7.87)), (' C 338  PHE  CE1', ' C 358  ILE HD13', -0.447, (90.641, 12.258, -44.337)), (' C 360  ASN  ND2', ' C 523  THR  HB ', -0.441, (101.127, 6.286, -42.511)), (' H   4  LEU HD21', ' H  27  PHE  HZ ', -0.433, (51.159, -3.627, -25.736)), (' C 357  ARG  HG3', ' C 396  TYR  CE1', -0.427, (91.073, 3.531, -40.367)), (' L  18  ARG  HG3', ' L  77  SER  HA ', -0.418, (33.735, 8.236, -50.608)), (' C 421  TYR  OH ', ' H  52  TYR  HB3', -0.416, (64.666, 2.026, -29.172)), (' C 350  VAL  HA ', ' C 400  PHE  HB2', -0.414, (74.484, 6.739, -42.821)), (' L 126  LEU  O  ', ' L 184  LYS  HD2', -0.411, (18.069, 31.15, -0.553)), (' C 336  CYS  SG ', ' C 363  ALA  HB2', -0.409, (95.706, 13.951, -44.304)), (' C 380  TYR  O  ', ' C 430  THR  HA ', -0.402, (87.288, 14.768, -29.602))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
