# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 110 ', 'LEU', 0.03846358014515372, (148.67099999999994, 205.151, 118.187)), ('A', ' 600 ', 'PRO', 0.031543308474783406, (154.233, 193.944, 170.89499999999998)), ('B', ' 138 ', 'ASP', 0.03432004489089472, (217.0069999999999, 156.654, 118.381)), ('B', ' 197 ', 'ILE', 0.033281369252883775, (191.828, 158.538, 129.359)), ('B', ' 198 ', 'ASP', 0.015654969806219148, (189.797, 157.431, 126.233)), ('B', ' 600 ', 'PRO', 0.0384241776826485, (192.59899999999996, 151.235, 169.507)), ('B', ' 744 ', 'GLY', 0.054936362913697044, (168.633, 179.486, 146.115)), ('C', ' 112 ', 'SER', 0.0008370123804032706, (129.822, 127.199, 113.32499999999999)), ('C', ' 536 ', 'ASN', 0.03499022195236644, (118.414, 166.153, 150.46899999999997)), ('C', ' 582 ', 'LEU', 0.036198955767448804, (119.811, 180.1729999999999, 139.341))]
data['omega'] = []
data['rota'] = [('A', '  96 ', 'GLU', 0.26393528774317043, (133.10399999999998, 212.867, 139.26)), ('A', ' 233 ', 'ILE', 0.02434088751059651, (146.90099999999993, 193.0319999999999, 120.61999999999999)), ('A', ' 347 ', 'PHE', 0.2189193845965014, (180.508, 161.763, 102.961)), ('A', ' 602 ', 'THR', 0.006932387674579096, (148.91599999999994, 194.452, 167.371)), ('A', ' 603 ', 'ASN', 0.04397786899538717, (146.217, 196.3039999999999, 169.39299999999997)), ('A', ' 604 ', 'THR', 0.2313577370353195, (149.036, 197.929, 171.457)), ('A', ' 617 ', 'CYS', 0.06041658456964878, (175.011, 197.128, 160.742)), ('A', '1118 ', 'ASP', 0.0467745302427231, (166.3349999999999, 165.60699999999989, 228.39199999999997)), ('B', ' 458 ', 'LYS', 0.13208795678481328, (143.3489999999999, 138.698, 84.448)), ('B', ' 605 ', 'SER', 0.13249751549907604, (198.903, 152.118, 167.12499999999997)), ('B', ' 617 ', 'CYS', 0.12339774332634042, (185.301, 131.772, 158.957)), ('B', ' 649 ', 'CYS', 0.21235575423345282, (184.58399999999992, 135.367, 162.496)), ('B', ' 657 ', 'ASN', 0.21060192503352632, (191.28099999999998, 133.5609999999999, 178.144)), ('B', ' 709 ', 'ASN', 0.04894485725304783, (172.24, 134.772, 211.972)), ('B', ' 710 ', 'ASN', 0.042588006375609874, (174.568, 136.234, 214.67)), ('B', ' 820 ', 'ASP', 0.20463434590674112, (187.08699999999988, 176.753, 183.083)), ('C', ' 332 ', 'ILE', 0.03973974714684862, (120.9740000000001, 175.443, 125.04199999999999)), ('C', ' 602 ', 'THR', 0.005334781807668026, (135.955, 133.221, 169.141)), ('C', ' 604 ', 'THR', 0.008159601566148922, (132.958, 132.231, 173.76899999999998)), ('C', ' 617 ', 'CYS', 0.07322877645492554, (121.29900000000009, 155.083, 162.818)), ('C', ' 619 ', 'GLU', 0.03807077271462635, (121.90400000000011, 156.704, 157.914)), ('C', ' 649 ', 'CYS', 0.0, (124.9560000000001, 153.88, 166.093)), ('C', '1092 ', 'GLU', 0.19439575843900828, (155.35099999999989, 159.516, 218.489))]
data['cbeta'] = [('A', ' 571 ', 'ASP', ' ', 0.27384357224550815, (179.45899999999997, 170.171, 143.978)), ('A', ' 649 ', 'CYS', ' ', 0.2824583903645171, (172.807, 195.183, 162.783)), ('C', ' 198 ', 'ASP', ' ', 0.35589710213628994, (145.89199999999997, 137.542, 130.225)), ('C', ' 487 ', 'ASN', ' ', 0.29877474419017513, (170.649, 194.33899999999988, 105.20199999999998))]
data['probe'] = [(' B 617  CYS  SG ', ' B 642  VAL  CG1', -0.84, (189.186, 133.488, 160.507)), (' A 617  CYS  SG ', ' A 642  VAL  CG1', -0.794, (172.661, 199.29, 162.143)), (' A 617  CYS  SG ', ' A 642  VAL HG12', -0.701, (173.331, 199.713, 163.062)), (' B 617  CYS  SG ', ' B 642  VAL HG11', -0.654, (189.334, 132.496, 160.463)), (' C 599  THR HG22', ' C 601  GLY  H  ', -0.632, (134.691, 137.452, 169.951)), (' C 617  CYS  SG ', ' C 642  VAL  CG1', -0.595, (120.847, 151.165, 164.315)), (' A1032  CYS  CB ', ' A1043  CYS  HG ', -0.576, (152.847, 165.772, 194.828)), (' B1032  CYS  HG ', ' B1043  CYS  HG ', -0.551, (170.086, 163.958, 193.628)), (' A 122  ASN  ND2', ' A 124  THR  OG1', -0.533, (124.254, 205.232, 123.163)), (' B1032  CYS  SG ', ' B1043  CYS  SG ', -0.532, (170.958, 164.542, 193.459)), (' C1032  CYS  SG ', ' C1043  CYS  SG ', -0.494, (160.689, 151.005, 194.402)), (' A 117  LEU HD23', ' A 130  VAL HG22', -0.487, (140.67, 196.739, 120.291)), (' C 617  CYS  SG ', ' C 642  VAL HG11', -0.471, (120.384, 151.395, 164.084)), (' B1032  CYS  CB ', ' B1043  CYS  HG ', -0.464, (170.562, 165.382, 193.501)), (' B 617  CYS  SG ', ' B 642  VAL HG13', -0.458, (189.009, 133.682, 160.766)), (' A1032  CYS  HB2', ' A1043  CYS  HG ', -0.45, (152.993, 165.56, 194.818)), (' A1032  CYS  HG ', ' A1043  CYS  HB3', -0.447, (153.02, 167.768, 195.537)), (' A1032  CYS  HG ', ' A1043  CYS  CB ', -0.436, (153.503, 168.001, 195.356)), (' A1028  LYS  O  ', ' A1032  CYS  HB3', -0.419, (151.138, 163.952, 193.507)), (' B1032  CYS  HG ', ' B1043  CYS  CB ', -0.418, (170.793, 163.57, 194.079)), (' B  28  TYR  HB3', ' B  61  ASN  OD1', -0.418, (209.544, 145.768, 143.097)), (' A1082  CYS  CB ', ' A1126  CYS  HG ', -0.414, (182.254, 172.189, 227.498)), (' A 710  ASN  HB3', ' A1305  NAG  H82', -0.413, (180.726, 181.162, 216.467)), (' B1032  CYS  HG ', ' B1043  CYS  HB2', -0.41, (170.758, 163.489, 194.338)), (' A 234  ASN  HB2', ' C 465  GLU  OE2', -0.41, (151.992, 192.975, 120.79)), (' A  44  ARG  O  ', ' A 283  GLY  HA2', -0.408, (133.009, 184.984, 150.442)), (' A 382  VAL HG11', ' A 387  LEU HD23', -0.407, (173.436, 173.468, 123.608)), (' A1076  THR  HB ', ' A1097  SER  HB3', -0.406, (173.56, 183.741, 220.926)), (' C 710  ASN  HB3', ' C1305  NAG  H82', -0.405, (137.649, 164.645, 218.861))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
