# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (43.089, -22.22, 59.71600000000001)), ('B', ' 146 ', 'PRO', None, (-18.497000000000003, 18.555, 11.99))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 374  HIS  NE2', ' A 402  GLU  OE2', -0.814, (23.11, -23.075, 49.398)), (' B 201  ASP  HA ', ' B 204  ARG  HE ', -0.809, (-12.649, -7.709, -10.859)), (' A 457  GLU  HG2', ' A 513  ILE  HB ', -0.774, (29.647, -35.033, 38.662)), (' A  30  ASP  O  ', ' A  34  HIS  ND1', -0.685, (3.161, -44.77, 60.137)), (' D  17  LEU  HA ', ' D  44  VAL  HB ', -0.679, (43.734, 41.951, -4.244)), (' D  24  PHE  HE1', ' D 193  VAL HG11', -0.648, (33.346, 31.826, -6.585)), (' A 291  ILE HD12', ' A 366  MET  HE1', -0.635, (27.534, -6.638, 47.866)), (' B 477  TRP  NE1', ' B 499  ASP  OD2', -0.633, (-27.117, 0.326, 2.862)), (' A 245  ARG  NH2', ' A 603  PHE  O  ', -0.62, (44.944, -16.551, 25.884)), (' B 144  LEU  HA ', ' B 148  LEU  HB2', -0.614, (-23.039, 13.876, 10.263)), (' B 121  ASN  HA ', ' B 124  SER  HB3', -0.613, (-16.704, 14.675, -6.36)), (' D  32  VAL HG13', ' D 104  ASN HD22', -0.608, (23.928, 21.652, -17.278)), (' D  19  PRO  O  ', ' D  38  LYS  NZ ', -0.603, (35.954, 38.383, -9.293)), (' B 326  GLY  O  ', ' B 330  ASN  ND2', -0.602, (6.76, 22.749, 3.571)), (' A 419  LYS  NZ ', ' A 430  GLU  OE2', -0.597, (20.636, 0.945, 43.561)), (' A 288  LYS  HG3', ' A 289  PRO  HD2', -0.591, (31.795, 3.868, 41.631)), (' B 389  PRO  HG2', ' B 392  LEU  HB2', -0.587, (10.135, 3.621, -11.68)), (' D  72  LEU HD22', ' D  73  CYS  H  ', -0.584, (52.828, 29.481, -4.862)), (' B 208  GLU  OE1', ' B 219  ARG  HD2', -0.583, (-5.555, -8.118, -15.089)), (' G   1  NAG  H62', ' G   2  NAG  HN2', -0.582, (20.631, 1.793, -16.146)), (' D  16  ASN  ND2', ' D  42  ASN  O  ', -0.575, (44.715, 43.2, -9.863)), (' B 233  ILE HD13', ' B 450  LEU HD13', -0.573, (-10.389, -10.212, 8.972)), (' A 351  LEU HD13', ' A 355  ASP  OD1', -0.571, (14.915, -29.076, 64.965)), (' A  52  THR  O  ', ' A 340  GLN  NE2', -0.568, (27.51, -25.247, 72.255)), (' A 419  LYS  HD3', ' A 426  PRO  HA ', -0.566, (20.407, 4.168, 47.245)), (' B 323  MET  HE1', ' B 379  ILE HG21', -0.559, (6.272, 13.056, 5.777)), (' A 524  GLN  HG2', ' A 583  PRO  HG2', -0.557, (17.571, -21.757, 32.512)), (' B 581  VAL HG12', ' B 585  LEU HD13', -0.551, (-7.121, -14.928, 10.67)), (' B 204  ARG  HD2', ' B 223  ILE HD11', -0.55, (-11.911, -9.519, -8.621)), (' B 573  VAL HG13', ' B 574  VAL HG13', -0.544, (7.219, -9.742, 4.681)), (' A 291  ILE HG13', ' A 292  ASP  H  ', -0.543, (29.835, -4.196, 48.571)), (' B  45  LEU  O  ', ' B  49  ASN  ND2', -0.542, (-1.14, 24.915, -4.096)), (' B  90  ASN  HB3', ' B  93  VAL HG22', -0.541, (13.373, -2.291, -19.7)), (' C  75  THR  HA ', ' C 204  ALA  HA ', -0.538, (-32.126, -33.165, 79.533)), (' B 111  ASP  HA ', ' B 114  LYS  HB2', -0.537, (-18.483, 15.002, -22.606)), (' B  21  ILE HG21', ' B  84  PRO  HD2', -0.536, (8.763, -0.685, -30.438)), (' B 227  GLU  OE2', ' B 458  LYS  NZ ', -0.535, (-17.513, -13.729, -3.112)), (' B 285  PHE  HB2', ' B 437  ASN HD21', -0.535, (-9.684, -4.202, 32.134)), (' B 245  ARG  NH2', ' B 605  GLY  O  ', -0.535, (-25.67, -12.756, 17.235)), (' D  75  THR  O  ', ' D 205  THR  OG1', -0.534, (47.889, 34.716, -11.684)), (' D 120  SER  OG ', ' D 124  ASP  OD2', -0.529, (20.15, 29.898, -5.946)), (' B 353  LYS  NZ ', ' D 178  GLY  O  ', -0.528, (12.469, 22.193, -9.541)), (' C  94  PRO  HG3', ' C 111  PHE  HB3', -0.526, (-20.091, -32.561, 63.994)), (' A  81  GLN HE22', ' F   1  NAG  H82', -0.525, (17.121, -53.93, 47.612)), (' A 333  LEU  O  ', ' A 362  THR  OG1', -0.524, (24.89, -15.318, 64.068)), (' B 520  LEU HD22', ' B 579  MET  HE2', -0.524, (-5.668, -11.768, 3.927)), (' C  69  LEU  O  ', ' C  69  LEU HD23', -0.522, (-27.812, -22.706, 74.62)), (' A  31  LYS  NZ ', ' C 175  TYR  OH ', -0.521, (4.471, -52.247, 64.529)), (' A 294  THR HG23', ' A 365  THR  HA ', -0.52, (30.501, -7.229, 57.47)), (' A 269  ASP  OD1', ' A 272  GLY  N  ', -0.519, (41.523, -23.04, 44.159)), (' B  63  ASN  O  ', ' B  67  ASP  N  ', -0.518, (-7.615, 19.893, -15.213)), (' B 538  PRO  HD2', ' B 541  LYS  HD3', -0.516, (3.855, -10.878, 25.257)), (' B 185  VAL HG23', ' B 186  LEU HD12', -0.515, (-23.731, 4.531, -18.57)), (' B 457  GLU  OE1', ' B 513  ILE  N  ', -0.514, (-12.001, -2.507, -1.417)), (' B 116  LEU HD21', ' B 187  LYS  HE2', -0.511, (-16.123, 7.322, -13.712)), (' B 192  ARG  NE ', ' B 197  GLU  O  ', -0.511, (-17.4, -6.109, -17.855)), (' A 293  VAL HG21', ' A 423  LEU  HB3', -0.502, (23.293, -2.597, 53.732)), (' B  34  HIS  ND1', ' D 135  TYR  OH ', -0.501, (15.187, 17.061, -16.371)), (' G   1  NAG  H62', ' G   2  NAG  N2 ', -0.497, (20.232, 2.205, -15.484)), (' A 313  LYS  HA ', ' A 316  VAL HG22', -0.496, (9.256, -11.413, 55.91)), (' B  47  SER  O  ', ' B  51  ASN  ND2', -0.495, (-6.963, 19.645, -3.127)), (' D  57  SER  N  ', ' D 117  ALA  O  ', -0.492, (27.274, 25.597, 0.562)), (' B 116  LEU HD11', ' B 187  LYS  HG2', -0.491, (-18.015, 5.764, -14.562)), (' C 134  LEU HD12', ' C 174  LEU  HB3', -0.491, (-0.834, -47.749, 72.042)), (' C  23  VAL HG22', ' C  38  LYS  HE2', -0.489, (-15.088, -34.802, 82.961)), (' C  63  GLY  HA3', ' C 112  THR  HA ', -0.488, (-24.428, -29.736, 67.252)), (' C 202  ALA  HB1', ' C 203  PRO  HD2', -0.488, (-35.044, -37.643, 80.22)), (' A 177  ARG  NH1', ' A 495  GLU  O  ', -0.487, (49.825, -41.739, 42.312)), (' D  93  ALA  HB3', ' D  96  GLN  HG3', -0.486, (32.169, 14.063, -8.381)), (' C  83  VAL HG22', ' C 191  ARG  HG2', -0.486, (-3.974, -33.735, 76.606)), (' A 113  SER  O  ', ' A 117  ASN  ND2', -0.48, (32.535, -49.967, 56.393)), (' B 223  ILE  H  ', ' B 223  ILE HD12', -0.479, (-10.61, -12.34, -6.503)), (' D  43  CYS  H  ', ' D 206  VAL HG22', -0.478, (46.916, 38.843, -9.234)), (' A 578  ASN  OD1', ' A 579  MET  N  ', -0.478, (18.001, -30.721, 31.927)), (' B 545  SER  HB2', ' B 802  NAG  H82', -0.475, (10.034, 1.932, 21.32)), (' A 249  MET  HG2', ' A 256  ILE  HB ', -0.472, (51.523, -13.513, 32.665)), (' A 490  PRO  HA ', ' A 612  PRO  HG2', -0.472, (54.505, -24.496, 37.187)), (' C  23  VAL HG11', ' C  79  ALA  HB1', -0.471, (-15.634, -33.328, 79.901)), (' B 184  VAL HG11', ' B 470  LYS  HZ1', -0.47, (-25.873, -0.778, -13.141)), (' D  18  CYS  HA ', ' D  43  CYS  HB2', -0.47, (41.824, 40.177, -7.889)), (' A 168  TRP  O  ', ' A 172  VAL HG22', -0.47, (48.818, -32.111, 51.495)), (' A 530  CYS  HA ', ' A 533  ALA  HB3', -0.469, (10.588, -11.527, 39.378)), (' B 499  ASP  N  ', ' B 500  PRO  HD2', -0.469, (-27.36, 3.148, 0.342)), (' C  63  GLY  HA3', ' C 112  THR HG23', -0.468, (-25.649, -28.835, 67.6)), (' D 200  LEU  HB2', ' D 202  ALA  HB2', -0.468, (52.192, 29.784, -17.334)), (' A 300  GLN  HB3', ' A 302  TRP  CD1', -0.468, (22.876, -1.767, 61.246)), (' B 132  VAL HG21', ' B 148  LEU HD11', -0.467, (-27.201, 14.566, 9.839)), (' A  41  TYR  HH ', ' C 182  THR  HG1', -0.467, (12.519, -31.264, 69.699)), (' D 120  SER  HB3', ' D 191  ARG  HG2', -0.466, (21.813, 30.129, -4.05)), (' A 360  MET  HE2', ' A 362  THR HG22', -0.466, (25.985, -16.114, 59.774)), (' B 453  THR HG22', ' B 512  PHE  HE2', -0.466, (-13.975, -1.329, 5.116)), (' A 402  GLU  HB3', ' A 518  ARG  HG3', -0.462, (23.207, -25.959, 44.896)), (' C  61  CYS  HA ', ' C 114  CYS  HA ', -0.461, (-18.581, -27.153, 69.596)), (' A  54  ILE  HB ', ' A 341  LYS  HG3', -0.46, (33.231, -27.866, 70.962)), (' A 180  TYR  HA ', ' A 183  TYR  HB3', -0.459, (40.572, -44.311, 48.184)), (' A 152  MET  HE2', ' A 270  MET  HA ', -0.458, (46.355, -22.742, 46.689)), (' B 177  ARG  HB3', ' B 178  PRO  HD3', -0.456, (-31.32, 7.762, -6.284)), (' D  65  SER  HB3', ' D  66  PRO  HD2', -0.454, (41.54, 21.83, 2.512)), (' B 134  ASN  HB3', ' B 137  ASN  O  ', -0.451, (-34.093, 22.47, 13.496)), (' D  56  PHE  HA ', ' D 118  TRP  HB3', -0.451, (27.107, 28.143, 0.422)), (' A 109  SER  OG ', ' A 112  LYS  HG2', -0.45, (34.244, -57.961, 53.286)), (' D 149  ASP  OD1', ' D 151  SER  HB3', -0.449, (25.208, 21.607, -27.82)), (' B 449  THR  O  ', ' B 453  THR HG23', -0.447, (-14.163, -3.685, 7.039)), (' D  19  PRO  HG2', ' D  38  LYS  HZ3', -0.445, (37.643, 39.056, -10.766)), (' B 215  TYR  CZ ', ' B 568  LEU HD13', -0.444, (10.236, -13.958, -5.619)), (' B 239  HIS  CE1', ' B 596  LYS  HG2', -0.444, (-16.614, -18.653, 21.232)), (' B 294  THR HG23', ' B 365  THR  HA ', -0.442, (-8.547, 11.739, 22.77)), (' B 432  ASN  N  ', ' B 432  ASN  OD1', -0.442, (-3.918, -10.372, 34.14)), (' A  31  LYS  HD2', ' C 171  TYR  CD1', -0.441, (4.899, -52.898, 61.412)), (' D  35  TRP  CZ3', ' D  37  ARG  HB2', -0.44, (34.118, 28.506, -17.591)), (' D 104  ASN HD21', ' D 136  ARG  H  ', -0.44, (22.309, 20.305, -18.529)), (' B 134  ASN  OD1', ' B 136  ASP  N  ', -0.439, (-36.348, 19.969, 14.816)), (' B 269  ASP  OD1', ' B 272  GLY  N  ', -0.437, (-19.961, 3.117, 11.199)), (' D  61  CYS  SG ', ' D  66  PRO  HD3', -0.437, (39.59, 23.293, 0.444)), (' A 499  ASP  N  ', ' A 500  PRO  HD2', -0.437, (45.681, -35.986, 43.32)), (' C  70  ASN  N  ', ' C  70  ASN  OD1', -0.435, (-26.038, -20.005, 77.934)), (' B 315  PHE  HD1', ' B 320  LEU HD12', -0.434, (9.722, 4.95, 10.113)), (' B 382  ASP  HA ', ' B 385  TYR  CZ ', -0.434, (6.149, 6.725, -1.724)), (' A 114  LYS  NZ ', ' A 118  THR  OG1', -0.434, (38.068, -49.685, 60.937)), (' B 317  SER  HB2', ' B 546  ASN  H  ', -0.432, (13.199, 3.609, 18.474)), (' B  64  ASN  O  ', ' B  68  LYS  HG2', -0.432, (-4.821, 22.519, -16.863)), (' A 382  ASP  HA ', ' A 385  TYR  CZ ', -0.43, (12.944, -29.726, 53.213)), (' B  88  ILE HD13', ' B  94  LYS  HD3', -0.43, (7.046, -3.492, -23.085)), (' D  24  PHE  CE1', ' D 193  VAL HG11', -0.43, (32.97, 31.468, -6.161)), (' D  74  PHE  HB2', ' D 199  LEU  HB3', -0.429, (49.856, 27.928, -10.554)), (' A 322  ASN HD22', ' A 702  NAG  C7 ', -0.428, (5.647, -13.783, 61.213)), (' B  59  VAL HG13', ' B  60  GLN  N  ', -0.428, (-11.905, 26.301, -9.603)), (' B 177  ARG  O  ', ' B 181  GLU  HG3', -0.427, (-29.084, 5.254, -8.899)), (' B 398  GLU  HB2', ' B 514  ARG  HG2', -0.426, (-6.146, 0.261, -2.09)), (' D  88  GLU  OE1', ' D 177  TYR  OH ', -0.425, (20.696, 19.755, -12.501)), (' D 167  GLY  H  ', ' D 170  CYS  HB2', -0.424, (11.791, 14.495, -32.644)), (' C  44  VAL HG13', ' C 208  GLY  HA2', -0.424, (-26.761, -23.656, 85.799)), (' C 168  LEU  H  ', ' C 168  LEU HD12', -0.424, (6.816, -61.722, 59.88)), (' D 110  ASP  N  ', ' D 110  ASP  OD1', -0.424, (42.578, 13.969, -13.716)), (' B 119  ILE  HA ', ' B 122  THR  HG1', -0.423, (-21.992, 14.498, -10.766)), (' B 142  LEU  HG ', ' B 147  GLY  HA3', -0.423, (-22.827, 18.42, 13.37)), (' B 547  SER  O  ', ' B 547  SER  OG ', -0.423, (14.101, -1.987, 15.584)), (' A 346  PRO  HG3', ' A 360  MET  HG3', -0.422, (27.574, -19.877, 58.962)), (' D  92  ILE HG23', ' D 107  LEU HD11', -0.421, (31.93, 20.443, -10.861)), (' C  42  ASN  H  ', ' C 205  THR  HB ', -0.421, (-29.449, -33.663, 85.049)), (' B 245  ARG  HD3', ' B 258  PRO  HA ', -0.419, (-28.234, -10.616, 21.5)), (' A 527  GLU  O  ', ' A 531  GLN  HB2', -0.419, (11.896, -15.328, 34.68)), (' B 230  PHE  O  ', ' B 234  LYS  HG3', -0.419, (-15.003, -15.351, 8.235)), (' B 501  ALA  O  ', ' B 507  SER  HB3', -0.419, (-21.239, 8.718, -0.922)), (' A  54  ILE HD12', ' A 341  LYS  HE2', -0.418, (34.001, -27.857, 68.834)), (' A 341  LYS  HB2', ' A 341  LYS  HE3', -0.417, (34.893, -24.955, 69.8)), (' D  37  ARG  HE ', ' D  78  TYR  HB3', -0.417, (37.935, 28.768, -15.298)), (' B  98  GLN  HA ', ' B 101  GLN  HB2', -0.416, (1.23, 0.161, -21.266)), (' A 458  LYS  HA ', ' A 461  TRP  HB2', -0.416, (33.881, -38.41, 35.383)), (' D 136  ARG  NH2', ' D 149  ASP  OD1', -0.414, (25.422, 21.941, -26.156)), (' D  35  TRP  HZ3', ' D  37  ARG  HB2', -0.413, (34.408, 28.454, -17.27)), (' B  71  ALA  O  ', ' B  75  GLU  HG2', -0.413, (-2.027, 15.602, -23.408)), (' B  84  PRO  O  ', ' B  88  ILE HD11', -0.411, (7.024, -3.156, -26.62)), (' A 549  GLU  N  ', ' A 549  GLU  OE1', -0.411, (3.066, -12.607, 43.428)), (' B 327  PHE  O  ', ' B 331  SER  OG ', -0.41, (3.48, 20.118, 7.423)), (' A 450  LEU  HB2', ' A 451  PRO  HD3', -0.41, (32.627, -23.436, 34.722)), (' B  22  GLU  OE2', ' B  89  GLN  HG3', -0.41, (15.048, -5.093, -23.06)), (' B 519  THR  O  ', ' B 522  GLN  HG2', -0.41, (-3.238, -6.568, 9.41)), (' A 108  LEU  HG ', ' A 112  LYS  HG3', -0.408, (33.192, -55.446, 51.55)), (' A 423  LEU  HA ', ' A 423  LEU HD23', -0.407, (21.821, -0.237, 56.167)), (' D  82  PHE  CE2', ' D 192  VAL HG11', -0.405, (27.383, 24.3, -10.786)), (' D  43  CYS  O  ', ' D 206  VAL HG13', -0.405, (46.788, 38.612, -6.63)), (' B 315  PHE  HE1', ' B 408  MET  HE3', -0.403, (6.801, 3.718, 9.756)), (' C  31  SER  HB2', ' C 134  LEU  O  ', -0.403, (-3.416, -42.719, 73.573)), (' B  59  VAL HG13', ' B  60  GLN  H  ', -0.403, (-12.102, 26.924, -9.686)), (' A 284  PRO  HG2', ' A 436  ILE HG22', -0.402, (34.337, -5.331, 35.431)), (' B 318  VAL HG23', ' B 320  LEU  HG ', -0.402, (12.443, 3.766, 10.634)), (' B 180  TYR  HA ', ' B 183  TYR  HB3', -0.402, (-23.184, 6.105, -9.989)), (' B  93  VAL  O  ', ' B  97  LEU  HG ', -0.401, (8.318, 0.419, -19.996)), (' D  32  VAL  HB ', ' D  82  PHE  CD2', -0.4, (26.141, 24.379, -14.011)), (' D  24  PHE  HE2', ' D  50  LEU  HG ', -0.4, (34.647, 32.641, -2.209)), (' B 215  TYR  CD1', ' B 577  LYS  HD3', -0.4, (6.767, -15.721, -5.458)), (' D 117  ALA  HA ', ' D 191  ARG  O  ', -0.4, (27.247, 26.688, -4.783)), (' B  25  ALA  O  ', ' B  29  LEU  HG ', -0.4, (10.54, 4.704, -21.865))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
