# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 277 ', 'ARG', 0.07351183092317433, (-43.11012000000002, 31.17633, -30.462289999999992)), ('B', ' 277 ', 'ARG', 0.08473516904859915, (-27.76185, 16.0658, -6.09825)), ('C', ' 271 ', 'THR', 0.11214279277783111, (-11.736460000000003, 22.02321, -32.21225)), ('C', ' 277 ', 'ARG', 0.07638131048353539, (-5.682210000000002, 26.47778, -30.45241)), ('D', ' 277 ', 'ARG', 0.06520036822308584, (9.87447, 11.456450000000002, -6.04375)), ('D', ' 280 ', 'GLU', 0.05809358805578169, (12.287650000000003, 19.40462, -8.94401)), ('D', ' 281 ', 'GLN', 0.026683081676625506, (10.80367, 20.08894, -12.3761)), ('E', ' 277 ', 'ARG', 0.06182825902864094, (-50.6411, -22.27403, -23.04398999999999)), ('E', ' 303 ', 'GLN', 0.0, (-43.23499, -34.91541000000001, -8.941429999999999)), ('F', ' 277 ', 'ARG', 0.0002787978906859579, (-36.44075000000001, -8.44352, 3.62666)), ('H', ' 271 ', 'THR', 0.02649551490403919, (2.4724500000000007, -17.75744, 7.98165)), ('H', ' 277 ', 'ARG', 0.012661396408818122, (3.11554, -12.43741, 3.25517)), ('I', ' 112 ', 'ARG', 0.17174329274871847, (-37.05997000000003, 38.675820000000016, -3.76798)), ('J', ' 112 ', 'ARG', 0.013587340971350068, (0.7819800000000005, 33.92467, -3.7283799999999996)), ('J', ' 118 ', 'GLN', 0.0, (8.18313, 49.11173000000001, -8.5536)), ('J', ' 126 ', 'SER', 0.09677033490965277, (-8.629120000000007, 62.974470000000025, -23.20906999999999)), ('J', ' 134 ', 'HIS', 0.044682889998753986, (3.8525800000000023, 72.08271, -21.87291999999999)), ('L', '  -1 ', 'MET', 0.11289248294464728, (14.061220000000008, 4.72796, -21.68716)), ('G', ' 277 ', 'ARG', 0.06039304517723863, (-11.03196, -27.47348, -22.43748))]
data['cbeta'] = []
data['probe'] = [(' H 270  VAL HG21', ' H 295  GLY  HA3', -0.793, (-4.08, -20.115, 9.343)), (' H 358  ASP  HB3', ' H 361  LYS  HE3', -0.746, (-2.336, -4.748, -0.51)), (' G 338  LYS  HE3', ' H 328  GLY  HA3', -0.738, (12.009, -27.65, -8.55)), (' B 276  ARG HH22', ' D 347  LYS  H  ', -0.697, (-16.738, 12.737, -4.396)), (' E 341  ASP  OD2', ' E 401  HOH  O  ', -0.693, (-24.843, -28.414, -7.199)), (' E 300  HIS  ND1', ' E 303  GLN  OE1', -0.675, (-42.864, -39.201, -12.35)), (' E 285  ASN  ND2', ' E 402  HOH  O  ', -0.667, (-41.573, -20.059, -20.261)), (' L  72  ARG  HB2', ' L  79  VAL HG22', -0.666, (2.267, -14.803, -27.279)), (' F 277  ARG  HB3', ' F 360  TYR  HB3', -0.661, (-37.592, -6.134, 3.88)), (' I  72  ARG  HB2', ' I  79  VAL HG22', -0.658, (-30.475, 42.105, -21.057)), (' F 339  LEU  O  ', ' F 401  HOH  O  ', -0.656, (-59.879, -8.367, -9.888)), (' C 297  ASP  OD2', ' C 401  HOH  O  ', -0.654, (-11.806, 10.095, -39.911)), (' H 288  ASP  HA ', ' H 363  PHE  HZ ', -0.649, (-3.172, -9.445, 7.525)), (' J  72  ARG  HB2', ' J  79  VAL HG22', -0.643, (7.091, 37.317, -21.068)), (' J 129  ALA  HA ', ' J 132  HIS  HD2', -0.639, (-2.212, 66.075, -20.217)), (' G 269  ASN  HB2', ' G 292  ILE  O  ', -0.639, (-15.94, -36.254, -18.517)), (' K  30  SER  OG ', ' K 201  HOH  O  ', -0.616, (-30.986, -1.264, -16.848)), (' K  72  ARG  HB2', ' K  79  VAL HG22', -0.614, (-36.415, -9.683, -27.336)), (' J  83  MET  HE2', ' J  86  LEU HD21', -0.596, (-3.608, 50.195, -20.994)), (' F 280  GLU  HB2', ' F 283  GLN  HB2', -0.583, (-33.001, -10.388, -1.33)), (' L  29  ASP  O  ', ' L  54  ARG  NH2', -0.579, (6.761, -11.542, -15.859)), (' H 271  THR  HB ', ' H 292  ILE HG23', -0.567, (1.263, -15.676, 9.562)), (' E 313  ALA  O  ', ' E 317  MET  HG2', -0.564, (-41.483, -18.209, -1.346)), (' J 129  ALA  HA ', ' J 132  HIS  CD2', -0.563, (-1.74, 65.912, -19.68)), (' L  30  SER  OG ', ' L 201  HOH  O  ', -0.556, (7.474, -5.715, -17.338)), (' F 289  GLN  NE2', ' F 364  PRO  HD2', -0.539, (-38.276, -1.78, 12.216)), (' E 303  GLN  H  ', ' E 303  GLN HE21', -0.506, (-44.947, -36.47, -9.396)), (' A 272  GLN  O  ', ' A 401  HOH  O  ', -0.504, (-54.093, 24.774, -29.663)), (' C 364  PRO  HD3', ' C 404  HOH  O  ', -0.503, (-2.971, 29.948, -42.562)), (' F 289  GLN HE22', ' F 364  PRO  HD2', -0.502, (-38.285, -1.638, 12.961)), (' D 360  TYR  HA ', ' D 363  PHE  CD2', -0.502, (8.282, 10.241, -0.576)), (' E 313  ALA  HB1', ' E 317  MET  HE3', -0.501, (-41.078, -20.813, -0.323)), (' A 270  VAL  HB ', ' A 292  ILE  HA ', -0.496, (-45.469, 23.968, -34.653)), (' E 303  GLN  N  ', ' E 303  GLN HE21', -0.495, (-44.889, -36.416, -8.894)), (' L  91  THR HG23', ' L 123  THR  HA ', -0.495, (-7.501, -0.893, -43.919)), (' I  13  GLN  NE2', ' I 205  HOH  O  ', -0.494, (-42.798, 66.169, -29.964)), (' A 313  ALA  O  ', ' A 317  MET  HG2', -0.489, (-32.343, 14.43, -16.99)), (' I 112  ARG  HA ', ' I 112  ARG HH11', -0.487, (-36.852, 37.201, -2.258)), (' F 298  TYR  CE2', ' F 300  HIS  HB2', -0.486, (-52.552, -9.317, 8.845)), (' G 287  GLY  HA2', ' G 291  LEU HD23', -0.479, (-7.619, -34.224, -17.524)), (' A 306  GLN HE22', ' K 118  GLN HE21', -0.477, (-29.763, 9.902, -32.654)), (' I  91  THR HG23', ' I 123  THR  HA ', -0.476, (-42.532, 61.716, -15.566)), (' K  54  ARG  HA ', ' K  54  ARG  HD3', -0.475, (-35.033, -12.158, -17.798)), (' I 126  SER  HA ', ' I 239  HOH  O  ', -0.475, (-47.704, 65.787, -22.995)), (' A 298  TYR  CE2', ' A 300  HIS  HB2', -0.473, (-36.936, 18.408, -39.369)), (' H 271  THR  OG1', ' H 292  ILE HD12', -0.473, (0.843, -15.11, 7.528)), (' K   9  GLY  O  ', ' K 202  HOH  O  ', -0.472, (-35.464, -1.643, -43.794)), (' E 287  GLY  HA2', ' E 291  LEU HD23', -0.471, (-47.708, -29.145, -18.34)), (' C 312  SER  HA ', ' D 401  ACT  H3 ', -0.468, (1.893, 5.479, -13.834)), (' G 319  ARG  HD3', ' L 102  TRP  CE3', -0.466, (-2.497, -11.416, -8.409)), (' H 360  TYR  HA ', ' H 363  PHE  CD2', -0.457, (0.472, -7.876, 6.972)), (' J  13  GLN  HG2', ' J 126  SER  HA ', -0.455, (-7.215, 62.581, -24.145)), (' F 288  ASP  O  ', ' F 292  ILE HG12', -0.453, (-42.359, -8.314, 8.978)), (' G 331  LEU HD13', ' H 353  LEU HD13', -0.449, (-12.684, -13.737, -2.835)), (' D 301  TRP  CZ3', ' D 401  ACT  H2 ', -0.448, (-0.034, 5.187, -11.989)), (' H 288  ASP  O  ', ' H 292  ILE HG12', -0.446, (-2.912, -12.595, 9.019)), (' H 270  VAL HG21', ' H 295  GLY  CA ', -0.444, (-4.55, -19.718, 9.849)), (' C 298  TYR  CE2', ' C 300  HIS  HB2', -0.443, (0.7, 13.445, -39.214)), (' E 294  GLN  NE2', ' E 298  TYR  HA ', -0.439, (-51.494, -37.437, -16.71)), (' K 125  SER  HB2', ' K 128  ALA  HB3', -0.437, (-47.399, 2.755, -51.68)), (' J  91  THR HG23', ' J 123  THR  HA ', -0.433, (-4.568, 57.113, -15.538)), (' K  99  ASN  HB3', ' K 113  TYR  HA ', -0.432, (-39.34, 2.14, -19.476)), (' H 277  ARG  HD2', ' H 292  ILE HD11', -0.429, (-0.272, -13.737, 6.303)), (' J 112  ARG  HA ', ' J 112  ARG  NH1', -0.426, (1.038, 32.887, -2.383)), (' B 302  PRO  HB3', ' K 112  ARG  CZ ', -0.426, (-46.668, 4.913, -13.839)), (' J  27  ARG  HA ', ' J  27  ARG  HD2', -0.425, (19.234, 32.543, -11.732)), (' D 503  HOH  O  ', ' H 279  PRO  HG3', -0.425, (4.775, -5.219, -1.606)), (' D 271  THR HG23', ' D 292  ILE HG23', -0.424, (9.405, 4.473, -5.622)), (' G 317  MET  HG2', ' H 274  PHE  HB3', -0.423, (2.113, -20.899, 1.436)), (' B 341  ASP  HA ', ' B 346  PHE  CG ', -0.421, (-53.958, 20.835, -7.863)), (' E 294  GLN HE21', ' E 298  TYR  HA ', -0.42, (-51.871, -37.216, -16.621)), (' D 280  GLU  HG3', ' D 535  HOH  O  ', -0.42, (13.635, 21.582, -10.374)), (' G 270  VAL  HB ', ' G 292  ILE  HA ', -0.419, (-13.674, -33.864, -18.271)), (' F 287  GLY  HA2', ' F 291  LEU HD23', -0.418, (-45.219, -9.144, 5.759)), (' I  11  LEU  HG ', ' I 123  THR  HB ', -0.417, (-39.544, 64.14, -17.097)), (' K  91  THR HG23', ' K 123  THR  HA ', -0.416, (-45.25, 3.879, -43.862)), (' L  82  GLU  HB2', ' L 300  HOH  O  ', -0.415, (-1.773, -16.623, -36.27)), (' F 303  GLN  N  ', ' F 303  GLN  OE1', -0.414, (-56.588, -13.261, 6.929)), (' C 317  MET  HB2', ' C 317  MET  HE3', -0.412, (6.232, 11.41, -17.235)), (' H 291  LEU HD12', ' H 295  GLY  HA2', -0.411, (-6.124, -18.565, 9.315)), (' E 341  ASP  N  ', ' E 341  ASP  OD1', -0.41, (-28.786, -29.951, -5.56)), (' H 285  ASN  HB2', ' H 360  TYR  HE2', -0.409, (-0.157, -9.791, -0.112)), (' J  80  TYR  OH ', ' J 201  HOH  O  ', -0.407, (12.538, 44.466, -24.744)), (' L  82  GLU  HG3', ' L 303  HOH  O  ', -0.407, (-3.143, -16.024, -39.823)), (' J 112  ARG  HA ', ' J 112  ARG HH11', -0.405, (1.145, 32.794, -2.433)), (' E 269  ASN  HB2', ' E 292  ILE  O  ', -0.402, (-56.251, -30.488, -19.296)), (' I   6  ALA  HA ', ' I  21  SER  O  ', -0.4, (-29.163, 51.566, -15.966))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
