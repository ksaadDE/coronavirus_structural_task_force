# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (90.308, 113.568, 115.66699999999997)), ('B', ' 183 ', 'PRO', None, (112.63000000000001, 101.924, 124.669))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 884  TYR  O  ', ' A 888  ILE HD12', -0.762, (77.932, 72.114, 119.614)), (' A 819  LEU HD11', ' A 826  TYR  HB3', -0.731, (78.555, 66.017, 92.604)), (' A 223  ILE  O  ', ' A 223  ILE HG13', -0.716, (110.853, 108.516, 55.29)), (' B 120  ILE  O  ', ' B 124  THR  HB ', -0.714, (106.5, 125.656, 112.81)), (' C  35  LEU HD11', ' C  55  LEU HD13', -0.67, (107.024, 82.819, 129.338)), (' D 103  LEU  O  ', ' D 107  ILE HG13', -0.646, (106.63, 73.383, 139.991)), (' A 149  TYR  HE2', ' A 212  LEU HD13', -0.631, (124.298, 96.418, 79.753)), (' A 272  LYS  HE3', ' A 275  PHE  CE1', -0.625, (110.7, 123.373, 93.597)), (' C  28  LEU HD12', ' C  31  GLN HE21', -0.612, (110.78, 89.691, 133.061)), (' A 858  ARG  O  ', ' A 862  LEU HD12', -0.611, (80.784, 79.711, 117.246)), (' A 606  TYR  CE2', ' A 805  LEU HD22', -0.606, (85.516, 72.538, 87.353)), (' D  92  PHE  HA ', ' D  95  LEU  HB2', -0.601, (99.265, 74.923, 138.54)), (' A 531  THR HG21', ' A 567  THR HG21', -0.6, (83.259, 114.555, 102.12)), (' A 333  ILE HG22', ' A 361  LEU  HA ', -0.59, (91.571, 133.026, 105.503)), (' B 159  VAL HG22', ' B 186  VAL HG22', -0.59, (117.596, 111.949, 126.288)), (' A 290  TRP  HE1', ' A 309  HIS  CE1', -0.586, (101.28, 111.035, 77.306)), (' D 166  ILE HG22', ' D 168  GLN  OE1', -0.584, (133.495, 82.812, 151.723)), (' A 309  HIS  HD2', ' A 466  ILE HG12', -0.581, (100.511, 107.784, 79.837)), (' D  94  MET  O  ', ' D  98  LEU HD12', -0.577, (98.932, 70.96, 134.886)), (' C  49  PHE  O  ', ' C  53  VAL HG23', -0.575, (110.202, 74.569, 131.862)), (' A 601  MET  O  ', ' A 605  VAL HG23', -0.574, (81.849, 80.443, 90.131)), (' C  13  LEU HD22', ' C  52  MET  HE1', -0.568, (103.064, 77.963, 133.551)), (' A 271  LEU  N  ', ' A 271  LEU HD12', -0.562, (110.434, 127.635, 103.084)), (' A 527  LEU  O  ', ' A 531  THR HG23', -0.547, (81.612, 117.471, 101.476)), (' A 605  VAL HG22', ' A 756  MET  HB2', -0.545, (84.126, 81.942, 89.739)), (' C  17  LEU HD22', ' C  22  VAL HG21', -0.539, (104.557, 88.528, 135.563)), (' A 136  GLU  N  ', ' A 136  GLU  OE2', -0.539, (112.406, 83.514, 89.475)), (' A 419  PHE  HA ', ' A 887  TYR  HE2', -0.535, (83.649, 72.569, 126.188)), (' A 660  ALA  O  ', ' A 665  GLU  HB3', -0.531, (94.928, 110.858, 103.703)), (' A 856  ILE  O  ', ' A 860  VAL HG23', -0.528, (75.014, 78.685, 119.661)), (' A 472  VAL  O  ', ' A 476  VAL HG23', -0.525, (91.193, 96.783, 82.584)), (' A 200  GLY  HA2', ' A 230  GLY  N  ', -0.518, (111.977, 115.452, 59.207)), (' A 413  GLY  HA2', ' A 546  TYR  OH ', -0.515, (92.401, 87.102, 124.867)), (' A 380  MET  HA ', ' A 380  MET  HE3', -0.507, (95.577, 124.177, 114.732)), (' A 855  MET  HE2', ' A 859  PHE  CE2', -0.506, (81.309, 78.061, 123.491)), (' A 820  VAL HG21', ' A 829  LEU HD12', -0.504, (78.403, 67.825, 100.575)), (' A 816  HIS  O  ', ' A 830  PRO  HA ', -0.503, (84.435, 74.097, 101.044)), (' A 128  VAL  O  ', ' A 132  ARG  HG3', -0.501, (111.138, 94.633, 81.072)), (' A 380  MET  HE1', ' B  98  LEU HD22', -0.501, (95.937, 126.634, 115.459)), (' A 755  MET  HG2', ' A 764  VAL HG12', -0.498, (90.225, 84.168, 86.652)), (' A 855  MET  HE1', ' A 858  ARG  HD3', -0.498, (82.287, 80.748, 121.733)), (' A 341  VAL HG21', ' B 103  LEU HD21', -0.49, (99.884, 128.609, 112.112)), (' A 567  THR  HB ', ' A 654  ARG HH12', -0.489, (82.456, 112.829, 100.3)), (' A 707  LEU  O  ', ' A 710  THR HG22', -0.488, (101.191, 86.734, 72.204)), (' A 615  MET  HE2', ' A 764  VAL HG21', -0.486, (94.422, 81.051, 86.844)), (' D 186  VAL  O  ', ' D 186  VAL HG12', -0.485, (124.297, 79.056, 144.564)), (' B 161  ASP  HA ', ' B 184  LEU HD23', -0.485, (114.361, 105.34, 128.644)), (' A 128  VAL HG12', ' A 132  ARG  HD3', -0.485, (109.76, 95.468, 79.362)), (' A 848  VAL HG23', ' A 854  LEU  HB3', -0.485, (79.204, 85.654, 124.497)), (' C  54  SER  O  ', ' C  58  VAL HG23', -0.483, (110.024, 82.957, 134.05)), (' A 689  TYR  O  ', ' A 693  VAL HG23', -0.479, (87.569, 96.771, 93.182)), (' D 147  PHE  HB2', ' D 156  ILE HD11', -0.476, (125.178, 74.908, 143.615)), (' A 614  LEU  HB2', ' A 802  GLU  HB3', -0.475, (91.9, 73.306, 89.988)), (' A 710  THR  CG2', ' A 715  ILE HD11', -0.472, (101.476, 84.439, 70.555)), (' A 203  GLY  HA3', ' A 222  PHE  CD1', -0.472, (112.359, 105.574, 60.958)), (' A 420  TYR  O  ', ' A 424  VAL HG22', -0.472, (88.994, 68.727, 127.408)), (' A 468  GLN  O  ', ' A 472  VAL HG23', -0.47, (96.416, 97.455, 79.963)), (' A 330  VAL  HA ', ' A 342  VAL  O  ', -0.47, (96.673, 125.728, 105.379)), (' A 186  LEU HD11', ' A 241  LEU HD21', -0.468, (114.582, 104.97, 79.22)), (' A 419  PHE  HA ', ' A 887  TYR  CE2', -0.467, (83.159, 72.558, 126.092)), (' A 379  ALA  HA ', ' B 117  LEU HD13', -0.467, (98.071, 121.767, 109.303)), (' A 545  LYS  HB2', ' A 557  VAL HG23', -0.466, (92.614, 95.208, 114.183)), (' A 272  LYS  HE3', ' A 275  PHE  CD1', -0.465, (110.647, 122.943, 93.424)), (' A 494  ILE  O  ', ' A 573  GLN  NE2', -0.465, (74.52, 102.726, 103.641)), (' A 192  PHE  HZ ', ' A 219  PHE  HE1', -0.461, (118.834, 106.382, 63.97)), (' A 401  LEU  N  ', ' A 401  LEU HD23', -0.46, (101.333, 115.168, 117.924)), (' A  41  LYS  HD2', ' A  41  LYS  N  ', -0.46, (102.578, 90.835, 58.11)), (' A 367  SER  OG ', ' A 368  PHE  N  ', -0.46, (77.988, 124.99, 111.526)), (' A 818  MET  HE1', ' A 868  PRO  O  ', -0.459, (81.313, 68.091, 105.234)), (' D 120  ILE  N  ', ' D 120  ILE HD12', -0.459, (115.249, 81.24, 136.816)), (' A 268  TRP  CZ3', ' A 272  LYS  HE2', -0.458, (113.08, 124.673, 93.284)), (' C  28  LEU HD12', ' C  31  GLN  NE2', -0.457, (111.482, 89.917, 132.702)), (' A 606  TYR  HE2', ' A 805  LEU HD22', -0.457, (85.418, 71.998, 87.812)), (' D 162  ALA  HB2', ' D 183  PRO  HG2', -0.456, (119.918, 88.047, 153.74)), (' A 372  LEU  HG ', ' A 563  CYS  SG ', -0.453, (83.771, 116.298, 109.906)), (' C   6  VAL HG22', ' D  98  LEU HD23', -0.453, (102.596, 71.137, 130.44)), (' A 887  TYR  O  ', ' A 891  LEU  HG ', -0.452, (76.766, 73.861, 125.389)), (' A 196  MET  HE2', ' A 232  PRO  HB3', -0.446, (112.563, 110.239, 65.475)), (' D 156  ILE  H  ', ' D 156  ILE HD12', -0.446, (127.664, 75.424, 142.642)), (' A 602  LEU  O  ', ' A 606  TYR  HD1', -0.446, (81.664, 76.504, 88.687)), (' A 572  HIS  O  ', ' A 576  LEU  HG ', -0.446, (79.507, 102.107, 96.627)), (' A 531  THR  O  ', ' A 657  ASN  ND2', -0.444, (86.243, 116.905, 97.625)), (' A 415  PHE  CZ ', ' A 417  LYS  HA ', -0.444, (89.662, 75.326, 129.848)), (' D 147  PHE  HB3', ' D 154  TRP  HB2', -0.444, (123.387, 74.972, 141.171)), (' A 200  GLY  HA2', ' A 230  GLY  CA ', -0.442, (111.981, 114.941, 59.185)), (' D 124  THR  O  ', ' D 124  THR HG22', -0.442, (125.372, 82.544, 129.244)), (' D 110  ALA  HB1', ' D 115  VAL HG12', -0.441, (109.055, 80.265, 145.905)), (' A 612  PRO  HG2', ' A 805  LEU  CD1', -0.44, (87.294, 71.777, 84.261)), (' D 159  VAL  O  ', ' D 166  ILE HG12', -0.439, (129.788, 84.984, 148.782)), (' A  98  LYS  O  ', ' A 117  GLN  HB3', -0.439, (130.694, 100.982, 64.005)), (' A 696  ILE  O  ', ' A 700  VAL HG23', -0.438, (91.875, 91.861, 84.719)), (' A 488  ILE HD11', ' A 493  VAL HG22', -0.438, (73.357, 107.444, 100.468)), (' B  83  VAL  O  ', ' B  87  MET  HG3', -0.438, (82.077, 119.516, 118.966)), (' A 515  TYR  O  ', ' A 519  MET  HG3', -0.438, (76.395, 113.832, 112.755)), (' A 887  TYR  CE1', ' A 891  LEU HD21', -0.437, (79.236, 74.553, 126.699)), (' A 710  THR HG23', ' A 715  ILE HD11', -0.437, (101.607, 84.075, 70.127)), (' A 388  LEU HD12', ' A 389  LEU  N  ', -0.436, (110.424, 112.543, 117.074)), (' B 132  ILE HG21', ' B 138  TYR  HB2', -0.432, (119.699, 106.348, 122.229)), (' A 578  SER  O  ', ' A 582  THR HG23', -0.426, (74.942, 94.148, 91.822)), (' C  35  LEU  O  ', ' C  39  ILE HG23', -0.424, (107.307, 79.993, 125.087)), (' C  13  LEU HD23', ' C  55  LEU HD23', -0.424, (103.719, 80.651, 132.107)), (' A 204  VAL HG22', ' A 233  VAL  HB ', -0.424, (107.374, 105.215, 65.482)), (' A 203  GLY  HA3', ' A 222  PHE  HD1', -0.422, (112.253, 105.587, 60.725)), (' A 602  LEU HD21', ' A 809  PRO  HD3', -0.421, (85.481, 75.34, 93.3)), (' A 205  LEU  HB3', ' A 216  TRP  CH2', -0.421, (114.637, 104.343, 69.402)), (' D  93  THR  O  ', ' D  97  LYS  HG3', -0.42, (95.67, 69.727, 137.561)), (' A 478  LYS  HA ', ' A 478  LYS  HD3', -0.42, (82.487, 96.518, 79.99)), (' A 544  LEU HD23', ' A 556  THR HG22', -0.418, (98.443, 97.035, 115.144)), (' C  10  SER  HB2', ' C  39  ILE HD11', -0.414, (103.112, 78.353, 127.557)), (' C  14  LEU HD22', ' C  36  HIS  CG ', -0.413, (101.876, 84.598, 126.431)), (' B  91  LEU  O  ', ' B  95  LEU HD13', -0.413, (92.181, 126.751, 118.678)), (' C  10  SER  CB ', ' C  39  ILE HD11', -0.412, (102.677, 78.448, 127.649)), (' A 758  LEU HD23', ' A 759  SER  H  ', -0.412, (87.149, 89.516, 98.511)), (' B 115  VAL  HB ', ' B 119  ILE HD11', -0.412, (105.534, 126.667, 105.028)), (' A 268  TRP  CD1', ' A 322  PRO  HD3', -0.41, (113.433, 119.819, 96.597)), (' A 128  VAL  CG1', ' A 132  ARG  HD3', -0.408, (110.248, 96.048, 79.605)), (' A 132  ARG HH12', ' A 240  LEU  HA ', -0.407, (106.563, 98.434, 78.725)), (' A 606  TYR  O  ', ' A 609  VAL HG23', -0.403, (84.044, 77.702, 82.495)), (' A  42  VAL HG23', ' A 712  GLY  HA3', -0.401, (104.024, 86.534, 65.548)), (' A 519  MET  HB3', ' A 519  MET  HE2', -0.4, (75.817, 116.395, 109.31))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
