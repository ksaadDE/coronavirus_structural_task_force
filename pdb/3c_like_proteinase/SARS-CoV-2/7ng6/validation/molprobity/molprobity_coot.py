# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 169 ', 'THR', 0.002301611599958768, (-15.988000000000003, -18.212999999999997, -25.533)), ('B', ' 169 ', 'THR', 0.004897375328339007, (14.346999999999985, -18.276999999999997, -5.079))]
data['omega'] = []
data['rota'] = [('A', '  47 ', 'GLU', 0.1204919285803172, (-34.02599999999997, -2.875, -31.778)), ('A', '  49 ', 'MET', 0.037802346681423425, (-28.256999999999994, -4.118000000000018, -33.844)), ('A', '  74 ', 'GLN', 0.2538094624913294, (-18.737000000000005, 18.49799999999999, -20.706)), ('A', ' 102 ', 'LYS', 0.22735679192971292, (0.9459999999999962, 7.374999999999984, -33.179)), ('A', ' 152 ', 'ILE', 0.2760037283374791, (4.707999999999998, 2.9389999999999894, -24.948)), ('A', ' 171 ', 'VAL', 0.14648950049743914, (-13.276999999999997, -13.875000000000005, -27.001999999999995)), ('A', ' 279 ', 'ARG', 0.0026391276810759116, (6.885999999999999, -29.411, -12.759999999999998)), ('B', '  51 ', 'ASN', 0.24303997293200638, (26.67799999999996, -4.619999999999993, 8.787)), ('B', '  73 ', 'VAL', 0.14851821702185403, (13.549, 18.755999999999982, -12.861)), ('B', ' 236 ', 'LYS', 0.007255882634213385, (-2.51, -31.985999999999997, 3.605)), ('B', ' 303 ', 'VAL', 0.05842046208567668, (-15.738999999999987, -0.6180000000000074, -10.806999999999999))]
data['cbeta'] = []
data['probe'] = [(' A 169  THR  O  ', ' A 169  THR HG22', -0.773, (-13.33, -17.99, -25.078)), (' B 168  PRO  O  ', ' B 169  THR  OG1', -0.673, (14.183, -17.971, -3.065)), (' B 100  LYS  NZ ', ' B 501  HOH  O  ', -0.659, (-12.416, 12.602, 0.06)), (' B 224  THR HG22', ' B 225  THR  H  ', -0.58, (-19.987, -29.398, 1.421)), (' B 224  THR HG23', ' B 263  ASP  OD1', -0.574, (-22.088, -28.078, -0.915)), (' A 169  THR  CG2', ' A 169  THR  O  ', -0.562, (-13.989, -18.377, -25.095)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.544, (10.343, 1.853, 5.347)), (' A 285  ALA  HB3', ' B 285  ALA  HB3', -0.54, (-0.909, -25.978, -15.632)), (' B 188  ARG  HG3', ' B 614  HOH  O  ', -0.519, (20.408, -4.037, 7.829)), (' B  19  GLN  NE2', ' B  69  GLN  OE1', -0.516, (17.548, 11.666, -12.509)), (' B  50  LEU HD12', ' B 190  THR HG22', -0.512, (25.505, -10.137, 6.631)), (' A 131  ARG  HD3', ' A 137  LYS  HD3', -0.51, (-5.561, -15.365, -26.873)), (' B  50  LEU  CD1', ' B 190  THR HG22', -0.491, (25.871, -9.936, 6.457)), (' B 188  ARG HH21', ' B 190  THR HG21', -0.489, (23.55, -9.621, 9.527)), (' A 126  TYR  CE2', ' B   6  MET  HE2', -0.478, (-8.342, -5.925, -17.647)), (' B  47  GLU  HG2', ' B  47  GLU  O  ', -0.476, (32.749, -3.63, 2.999)), (' B  68  VAL HG12', ' B  75  LEU HD12', -0.471, (13.512, 15.115, -6.28)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.464, (-3.956, -1.423, -25.053)), (' B 110  GLN  HG3', ' B 609  HOH  O  ', -0.464, (-5.395, -6.404, 3.22)), (' B  58  LEU HD22', ' B  82  MET  HE3', -0.461, (18.958, 8.001, 8.011)), (' B 168  PRO  O  ', ' B 169  THR  CB ', -0.452, (14.501, -18.455, -3.306)), (' B  47  GLU  HG3', ' B 675  HOH  O  ', -0.439, (34.697, -4.994, 0.769)), (' B  59  ILE HD12', ' B  60  ARG  HG3', -0.424, (27.942, 11.011, 11.065)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.422, (-2.799, -14.294, -0.039)), (' A 131  ARG  HG2', ' A 135  THR  O  ', -0.41, (-6.021, -13.009, -29.485)), (' A 126  TYR  CD2', ' B   6  MET  HE2', -0.407, (-7.902, -5.946, -17.35)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.406, (-16.428, -2.491, -19.805)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.406, (-19.227, 5.741, -34.541)), (' A  74  GLN  N  ', ' A 814  HOH  O  ', -0.402, (-18.508, 19.522, -18.271)), (' B 224  THR HG22', ' B 225  THR  N  ', -0.4, (-20.307, -29.831, 1.657))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
