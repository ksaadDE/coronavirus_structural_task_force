# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('C', '  95 ', 'PRO', None, (172.2689999999999, 226.888, 245.412))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 379  CYS  HA ', ' A 432  CYS  HB2', -0.759, (182.494, 203.17, 216.256)), (' A 379  CYS  HA ', ' A 432  CYS  CB ', -0.748, (182.357, 202.761, 215.548)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.742, (172.236, 213.297, 220.509)), (' B  98  ASP  OD1', ' B  99  ARG  N  ', -0.708, (174.019, 233.903, 229.376)), (' A 433  VAL HG22', ' A 512  VAL HG22', -0.7, (178.267, 206.197, 220.796)), (' A 346  ARG  NH2', ' B  98  ASP  OD2', -0.693, (174.974, 230.351, 228.841)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.679, (173.364, 205.68, 233.397)), (' C  18  ARG  HA ', ' C  75  ILE  O  ', -0.665, (180.28, 257.548, 242.269)), (' C  18  ARG  NH1', ' C  20  THR  OG1', -0.648, (182.295, 254.003, 246.242)), (' B  29  ILE  H  ', ' B  29  ILE HD12', -0.634, (165.443, 230.083, 220.949)), (' B  13  LYS  HA ', ' B  13  LYS  HE3', -0.631, (142.313, 229.47, 244.788)), (' B  34  TRP  CH2', ' B  97  ARG  HD2', -0.622, (166.859, 233.414, 225.436)), (' C   6  GLN HE21', ' C  99  GLY  HA3', -0.62, (172.13, 241.898, 247.644)), (' A 454  ARG  NH2', ' A 469  SER  O  ', -0.613, (163.628, 211.502, 234.763)), (' B  41  PRO  O  ', ' B  43  LYS  NZ ', -0.606, (157.905, 241.529, 250.687)), (' B  67  VAL HG12', ' B  82  LEU HD13', -0.601, (157.782, 224.7, 241.592)), (' B  96  ALA  HB1', ' B 109  PHE  HB3', -0.597, (168.383, 236.295, 233.85)), (' A 345  THR  O  ', ' A 509  ARG  NH2', -0.591, (181.26, 222.749, 225.679)), (' A 444  LYS  HD3', ' B 105  TRP  CD1', -0.581, (182.763, 225.739, 234.268)), (' C  37  GLN  HG2', ' C  47  LEU HD21', -0.58, (171.133, 248.285, 235.942)), (' C  29  ILE HD12', ' C  92  ASP  HB3', -0.578, (180.285, 231.578, 244.181)), (' A 393  THR HG21', ' A 518  LEU  H  ', -0.575, (167.881, 203.683, 205.944)), (' B   4  LEU HD21', ' B  95  CYS  HB3', -0.57, (160.74, 235.147, 230.587)), (' A 448  ASN  OD1', ' A 449  TYR  N  ', -0.566, (178.538, 221.913, 237.453)), (' A 394  ASN  HB2', ' A 516  GLU  OE2', -0.565, (168.182, 206.839, 208.982)), (' B  34  TRP  CD2', ' B  78  PHE  HZ ', -0.561, (164.511, 230.309, 227.058)), (' A 382  VAL HG21', ' A 386  LYS  HD2', -0.559, (183.072, 198.411, 205.825)), (' B  97  ARG  HG2', ' B  98  ASP  O  ', -0.553, (170.622, 234.366, 227.756)), (' A 378  LYS  O  ', ' A 432  CYS  HB2', -0.551, (183.172, 203.293, 217.331)), (' B  37  ILE HD11', ' B 112  TRP  HE1', -0.537, (165.417, 237.936, 237.849)), (' B  51  ILE HG13', ' B  57  THR HG22', -0.535, (165.149, 221.611, 231.706)), (' A 379  CYS  HA ', ' A 432  CYS  HB3', -0.534, (181.82, 202.315, 215.969)), (' C  90  GLN HE21', ' C  97  THR HG23', -0.531, (174.142, 231.425, 245.358)), (' A 490  PHE  CD2', ' B  64  ARG  HD2', -0.53, (167.257, 216.996, 242.432)), (' C  18  ARG  HG3', ' C  76  SER  HA ', -0.519, (182.796, 257.548, 242.061)), (' C  33  LEU HD13', ' C  71  PHE  CD1', -0.518, (181.008, 239.45, 244.702)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.518, (178.017, 203.571, 212.681)), (' C  35  TRP  CH2', ' C  88  CYS  HB3', -0.517, (176.798, 243.109, 244.838)), (' B  21  THR  HA ', ' B  78  PHE  O  ', -0.506, (155.605, 229.048, 229.642)), (' C   3  GLN  HB2', ' C  26  SER  HB3', -0.503, (177.349, 233.582, 253.514)), (' C  19  VAL HG22', ' C  75  ILE  HB ', -0.502, (177.088, 255.696, 242.707)), (' C  30  THR  OG1', ' C  31  ASN  N  ', -0.497, (185.906, 234.237, 240.467)), (' A 457  ARG  NH1', ' A 460  ASN  O  ', -0.496, (164.428, 201.549, 232.082)), (' B  22  CYS  HB3', ' B  78  PHE  HB2', -0.496, (159.157, 230.536, 229.207)), (' A 471  GLU  N  ', ' A 471  GLU  OE1', -0.494, (160.037, 212.516, 238.116)), (' C  24  GLN  NE2', ' C  25  ALA  O  ', -0.493, (181.384, 236.582, 253.319)), (' B  34  TRP  CG ', ' B  78  PHE  HZ ', -0.493, (165.189, 229.903, 227.513)), (' C  78  LEU  O  ', ' C  79  GLN  NE2', -0.488, (174.856, 262.323, 238.085)), (' C  70  ASP  N  ', ' C  70  ASP  OD1', -0.488, (186.281, 239.781, 248.689)), (' B  13  LYS  O  ', ' B  16  GLU  HG2', -0.486, (145.56, 226.53, 243.702)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.482, (174.153, 211.663, 210.105)), (' B  13  LYS  NZ ', ' B 122  SER  HA ', -0.479, (140.83, 231.918, 246.723)), (' A 444  LYS  HD3', ' B 105  TRP  NE1', -0.478, (182.82, 226.3, 234.42)), (' A 395  VAL HG22', ' A 515  PHE  HD1', -0.478, (175.423, 207.718, 209.4)), (' A 335  LEU HD23', ' A 362  VAL HG13', -0.477, (180.24, 216.937, 202.013)), (' B   6  GLU  OE2', ' B  95  CYS  N  ', -0.476, (160.564, 236.246, 233.377)), (' A 487  ASN  HA ', ' A 489  TYR  CZ ', -0.474, (166.927, 206.581, 251.112)), (' C  90  GLN  OE1', ' C  92  ASP  N  ', -0.471, (177.692, 231.064, 242.19)), (' A 410  ILE  H  ', ' A 410  ILE HD12', -0.469, (180.065, 204.423, 227.665)), (' A 450  ASN  OD1', ' B  50  TYR  OH ', -0.466, (173.667, 223.512, 234.238)), (' A 403  ARG  HD2', ' A 505  TYR  HA ', -0.465, (185.19, 210.888, 237.054)), (' A 393  THR  CG2', ' A 518  LEU  H  ', -0.463, (167.916, 204.204, 206.092)), (' C   4  MET  HA ', ' C   4  MET  HE2', -0.462, (177.121, 236.687, 249.455)), (' B  34  TRP  CG ', ' B  78  PHE  CZ ', -0.459, (164.665, 229.57, 227.737)), (' C   6  GLN  NE2', ' C 101  GLY  H  ', -0.456, (171.158, 242.956, 248.12)), (' C  36  TYR  HD1', ' C  46  LEU  HA ', -0.455, (172.26, 242.813, 235.789)), (' C  84  ALA  HB3', ' C  86  TYR  CE1', -0.454, (169.453, 251.538, 241.249)), (' A 490  PHE  CE2', ' B  64  ARG  HD2', -0.451, (167.011, 217.262, 242.066)), (' B 108  GLY  HA3', ' C  34  ASN  ND2', -0.451, (175.528, 237.082, 235.488)), (' A 411  ALA  HB3', ' A 414  GLN  HG3', -0.447, (179.982, 198.646, 226.366)), (' A 349  SER  HB2', ' A 452  LEU  H  ', -0.446, (174.188, 216.297, 233.789)), (' B  38  ARG  NH2', ' B  89  ASP  HA ', -0.444, (156.512, 231.68, 246.521)), (' A 378  LYS  HB2', ' A 378  LYS  HE2', -0.444, (186.424, 202.908, 221.584)), (' C  89  GLN  HG3', ' C  98  PHE  CE1', -0.441, (170.873, 236.008, 241.359)), (' A 485  GLY  N  ', ' A 488  CYS  HB2', -0.44, (162.709, 211.542, 251.097)), (' A 453  TYR  CE1', ' A 493  GLN  HB3', -0.438, (175.21, 211.733, 239.947)), (' B 120  VAL  O  ', ' B 120  VAL HG13', -0.438, (148.786, 232.374, 247.483)), (' A 418  ILE  HA ', ' A 422  ASN  ND2', -0.437, (173.767, 206.332, 233.425)), (' A 461  LEU HD22', ' A 465  GLU  HB3', -0.436, (165.625, 204.758, 227.998)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.435, (181.488, 217.154, 227.027)), (' A 441  LEU  HB3', ' B 103  SER  OG ', -0.433, (184.674, 223.985, 228.092)), (' B  16  GLU  O  ', ' B  85  VAL HG22', -0.432, (148.951, 224.967, 244.187)), (' A 502  GLY  O  ', ' A 506  GLN  HG3', -0.431, (190.534, 213.056, 236.144)), (' B  34  TRP  CZ2', ' B  97  ARG  HD2', -0.43, (167.115, 232.894, 225.647)), (' B   1  GLN  OE1', ' B   3  GLN  NE2', -0.43, (163.618, 243.92, 222.832)), (' B 101  TYR  O  ', ' B 102  SER  OG ', -0.429, (179.152, 231.411, 229.622)), (' B  29  ILE  CD1', ' B  76  ASN  HB2', -0.429, (162.57, 229.866, 221.209)), (' B 102  SER  OG ', ' B 107  ASP  OD1', -0.427, (178.786, 231.637, 231.338)), (' C   2  ILE  HB ', ' C  97  THR HG21', -0.426, (174.884, 231.662, 247.76)), (' A 405  ASP  O  ', ' A 408  ARG  NH1', -0.424, (184.693, 203.101, 233.261)), (' B  38  ARG  NH2', ' B  89  ASP  OD1', -0.424, (156.923, 230.721, 246.506)), (' B  35  SER  OG ', ' B  47  TRP  NE1', -0.423, (167.456, 230.201, 237.561)), (' A 403  ARG HH11', ' A 505  TYR  HA ', -0.421, (185.714, 210.013, 237.271)), (' C  39  LYS  NZ ', ' C  81  GLU  O  ', -0.417, (167.951, 254.767, 236.927)), (' C  67  SER  OG ', ' C  68  GLY  N  ', -0.417, (189.037, 237.3, 244.892)), (' A 431  GLY  HA2', ' A 515  PHE  HD2', -0.412, (177.714, 203.621, 212.247)), (' B  34  TRP  CD2', ' B  78  PHE  CZ ', -0.411, (164.506, 230.282, 227.836)), (' C   7  SER  HB3', ' C   8  PRO  HD3', -0.409, (177.532, 247.827, 252.068)), (' A 439  ASN  ND2', ' A 499  PRO  O  ', -0.407, (191.753, 218.529, 235.527)), (' B  29  ILE  HA ', ' B  34  TRP  HE1', -0.406, (167.235, 229.482, 224.611)), (' A 498  GLN  H  ', ' A 501  ASN  ND2', -0.404, (186.609, 217.408, 239.389)), (' A 448  ASN  HB3', ' A 497  PHE  HB2', -0.403, (182.272, 219.579, 236.807)), (' B  37  ILE  CD1', ' B 112  TRP  HE1', -0.403, (165.842, 237.665, 238.061)), (' B  92  VAL HG12', ' B 117  MET  HA ', -0.402, (153.94, 239.5, 239.718)), (' C  33  LEU HD21', ' C  88  CYS  HB2', -0.402, (177.395, 241.087, 243.993))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
