# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '   5 ', 'LYS', 0.024337633782367266, (-2.615, -4.233000000000003, -19.345))]
data['omega'] = []
data['rota'] = [('A', '  25 ', 'THR', 0.2793067078458432, (-12.523999999999992, -20.836, 1.334)), ('A', '  60 ', 'ARG', 0.0, (-14.726, -21.421, 16.94)), ('A', '  69 ', 'GLN', 0.01985650570758255, (1.008, -22.984, 1.8680000000000003)), ('A', '  93 ', 'THR', 0.13173245243414997, (8.764, -19.842000000000013, 10.551)), ('A', ' 196 ', 'THR', 0.028306845342740417, (-20.321999999999985, 8.795, -8.143)), ('A', ' 216 ', 'ASP', 0.132825050895468, (2.906, 16.267, -27.846)), ('A', ' 229 ', 'ASP', 0.05587197496552086, (-11.804999999999993, 30.399, -12.533)), ('A', ' 238 ', 'ASN', 0.1618921406021158, (-16.937, 16.160999999999998, -12.516)), ('A', ' 263 ', 'ASP', 0.19118284551138567, (-0.9950000000000004, 27.986000000000004, -18.192)), ('A', ' 279 ', 'ARG', 0.00020502682464126464, (-6.342, 14.372, -32.116)), ('A', ' 303 ', 'VAL', 0.05689149165986394, (14.875, 5.956, -10.787)), ('B', '  47 ', 'GLU', 0.2574248824744073, (32.295, 7.924, -32.904)), ('B', '  47 ', 'GLU', 0.2593415779625197, (32.295, 7.924, -32.904)), ('B', '  49 ', 'MET', 0.010878364080859248, (28.414, 4.45, -33.861)), ('B', '  49 ', 'MET', 0.010878364080859248, (28.414, 4.45, -33.861)), ('B', '  72 ', 'ASN', 0.23643037294406888, (27.343999999999987, -5.014, -5.045)), ('B', ' 169 ', 'THR', 0.23810203637751082, (10.067999999999996, 8.613, -34.112)), ('B', ' 188 ', 'ARG', 0.1616169640954522, (24.785999999999987, 1.8990000000000014, -36.248)), ('B', ' 188 ', 'ARG', 0.16265471901880185, (24.785999999999987, 1.8990000000000014, -36.247)), ('B', ' 190 ', 'THR', 0.008087669993983582, (22.231999999999992, 5.35, -39.857)), ('B', ' 190 ', 'THR', 0.008087669993983582, (22.231999999999992, 5.35, -39.857)), ('B', ' 192 ', 'GLN', 0.05685757392341428, (16.760999999999985, 3.754999999999999, -40.52)), ('B', ' 196 ', 'THR', 0.10120000596164187, (4.464999999999999, 2.558, -41.528))]
data['cbeta'] = [('A', ' 224 ', 'THR', ' ', 0.25678162226073364, (-2.286, 32.44800000000002, -17.954)), ('B', ' 154 ', 'TYR', ' ', 0.268225730609797, (4.214, -23.22, -16.128))]
data['probe'] = [(' A  86  VAL HG13', ' A 179  GLY  HA2', -0.698, (-7.728, -5.043, 6.994)), (' B 273  GLN  NE2', ' B 801  HOH  O  ', -0.633, (-20.667, 0.803, -44.087)), (' A  86  VAL HG13', ' A 179  GLY  CA ', -0.628, (-6.849, -5.313, 7.53)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.59, (21.841, -10.27, -30.211)), (' B 110  GLN HE21', ' B 111  THR  H  ', -0.586, (2.001, -11.523, -27.523)), (' A  82  MET  HE3', ' A 739  HOH  O  ', -0.581, (-12.407, -7.507, 13.484)), (' A   6  MET  O  ', ' A 601  DMS  H12', -0.57, (4.564, 2.67, -12.248)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.559, (0.203, -7.205, -32.78)), (' A   1  SER  N  ', ' B 140  PHE  O  ', -0.525, (13.129, 6.709, -23.967)), (' A 260  ALA  O  ', ' A 263  ASP  HB2', -0.516, (1.002, 27.157, -17.443)), (' A 145  CYS  SG ', ' A 750  HOH  O  ', -0.513, (-11.39, -13.142, -3.052)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.492, (-0.271, -3.008, -5.554)), (' A 199  THR HG21', ' A 239  TYR  CZ ', -0.49, (-10.665, 14.778, -16.192)), (' A  17  MET  HE2', ' A 117  CYS  SG ', -0.458, (-0.492, -12.218, -4.412)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.452, (9.527, -12.585, 5.626)), (' A 228  ASN  H  ', ' A 228  ASN  ND2', -0.45, (-9.079, 31.452, -8.342)), (' B 213  ILE HG22', ' B 214  ASN HD22', -0.445, (-15.329, -10.79, -19.527)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.445, (9.981, -8.292, -21.628)), (' B  43 CILE HD13', ' B  57  LEU  CB ', -0.441, (34.316, -2.954, -30.897)), (' B  43 DILE HD13', ' B  57  LEU  CB ', -0.44, (34.315, -2.955, -30.897)), (' B 114  VAL  O  ', ' B 125  VAL  HA ', -0.437, (8.421, -3.997, -17.415)), (' A  82  MET  CE ', ' A 739  HOH  O  ', -0.432, (-12.324, -7.728, 14.136)), (' A 254  SER  OG ', ' A 260  ALA  HA ', -0.432, (4.489, 26.349, -14.477)), (' B 212  VAL  O  ', ' B 215  GLY  N  ', -0.424, (-19.717, -9.064, -21.403)), (' B   8  PHE  CE1', ' B 152  ILE  O  ', -0.413, (3.465, -16.043, -17.713)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.41, (-6.316, 9.846, -8.342)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.408, (13.033, -4.495, -12.805)), (' B 215  GLY  HA2', ' B 305  PHE  O  ', -0.407, (-21.764, -9.537, -20.796)), (' A  27  LEU  C  ', ' A  27  LEU HD12', -0.405, (-6.39, -16.53, 0.666)), (' A   5  LYS  HD3', ' A 715  HOH  O  ', -0.402, (-3.159, 2.316, -14.361)), (' A 126  TYR  HE1', ' A 128  CYS  HG ', -0.4, (-5.467, -2.109, -10.89))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
