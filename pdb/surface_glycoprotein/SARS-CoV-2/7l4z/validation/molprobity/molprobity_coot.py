# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = [('S', '   1 ', 'DTY', ' ', 2.395379380371461, (16.10069, -66.70276, -35.58286)), ('T', '   1 ', 'DTY', ' ', 2.428598343859344, (21.852119999999992, -70.61716, -140.11063)), ('R', '   1 ', 'DTY', ' ', 2.353791955373182, (8.033239999999967, -118.31470999999998, -46.67888)), ('U', '   1 ', 'DTY', ' ', 2.3853963379429346, (-11.310819999999994, -26.96359, -129.80056)), ('V', '   1 ', 'DTY', ' ', 2.4386423528150014, (7.943209999999999, -125.17938, -151.55986))]
data['probe'] = [(' A 379  CYS  HB2', ' A 384  PRO  HD3', -0.796, (-8.422, -114.785, -67.772)), (' E 431  GLY  HA3', ' E 513  LEU  O  ', -0.72, (5.853, -116.164, -129.544)), (' B 431  GLY  HA3', ' B 513  LEU  O  ', -0.69, (15.771, -74.025, -58.763)), (' C 371  SER  HB2', ' C 374  PHE  HE1', -0.685, (-10.571, -39.694, -102.968)), (' D 418  ILE  HA ', ' D 422  ASN HD22', -0.659, (19.712, -63.419, -99.391)), (' D 401  VAL HG22', ' D 509  ARG  HG2', -0.657, (19.973, -76.561, -104.483)), (' D 472  ILE HG22', ' D 490  PHE  HA ', -0.631, (31.478, -61.565, -89.743)), (' E 389  ASP  HB3', ' V  10  ASN  HB2', -0.621, (-3.368, -115.771, -144.597)), (' C 395  VAL HG21', ' U   6  VAL HG11', -0.618, (-14.092, -26.411, -114.57)), (' E 524  VAL HG23', ' V  14  ARG  HB2', -0.607, (1.664, -117.968, -149.111)), (' A 359  SER  OG ', ' A 360  ASN  OD1', -0.605, (12.394, -121.478, -58.628)), (' A 331  ASN  H  ', ' R   0  ACE  H2 ', -0.597, (8.637, -112.878, -48.758)), (' A 473  TYR  CE2', ' A 475  ALA  HB2', -0.587, (1.66, -135.028, -97.219)), (' A 345  THR  O  ', ' A 509  ARG  NH2', -0.587, (11.161, -109.482, -82.242)), (' D 365  TYR  HD2', ' D 388  ASN  HA ', -0.585, (11.822, -73.568, -125.871)), (' D 421  TYR  HA ', ' D 461  LEU HD13', -0.583, (22.943, -57.816, -101.457)), (' D 472  ILE  HA ', ' D 491  PRO  HD3', -0.578, (31.167, -59.488, -91.278)), (' A 457  ARG  NE ', ' A 467  ASP  OD2', -0.577, (6.373, -133.266, -86.327)), (' A 473  TYR  HE2', ' A 475  ALA  HB2', -0.566, (0.894, -135.042, -96.921)), (' C 474  GLN  HB3', ' C 480  CYS  SG ', -0.562, (-19.338, -5.599, -77.582)), (' D 379  CYS  HB2', ' D 384  PRO  HD3', -0.561, (7.056, -68.035, -118.472)), (' D 457  ARG  NE ', ' D 467  ASP  OD2', -0.56, (28.394, -57.663, -100.985)), (' C 497  PHE  HB3', ' C 507  PRO  HD3', -0.56, (-10.272, -32.637, -84.97)), (' B 449  TYR  CZ ', ' D 455  LEU HD21', -0.56, (20.596, -61.653, -89.208)), (' C 389  ASP  HA ', ' U  10  ASN  HB2', -0.552, (-17.842, -37.348, -119.816)), (' B 521  PRO  HG2', ' B 524  VAL  HB ', -0.55, (12.349, -72.428, -38.965)), (' A 354  ASN HD21', ' A 356  LYS  HE2', -0.547, (13.698, -117.634, -74.562)), (' C 524  VAL HG13', ' U  14  ARG  HB2', -0.545, (-17.18, -34.335, -125.95)), (' C 366  SER  HA ', ' C 369  TYR  CZ ', -0.544, (-15.372, -40.875, -110.957)), (' D 342  PHE  CE1', ' D 511  VAL HG11', -0.543, (18.438, -74.698, -114.491)), (' E 347  PHE  CE2', ' E 399  SER  HB2', -0.541, (0.807, -125.557, -120.812)), (' E 438  SER  HB3', ' E 509  ARG  HG3', -0.539, (-5.61, -123.591, -116.059)), (' D 342  PHE  HE1', ' D 511  VAL HG11', -0.539, (18.848, -74.231, -114.389)), (' A 383  SER  HG ', ' A 385  THR  HG1', -0.536, (-11.524, -111.822, -63.527)), (' D 519  HIS  ND1', ' D 526  GLY  O  ', -0.536, (10.632, -62.752, -132.084)), (' A 449  TYR  CZ ', ' E 455  LEU HD21', -0.533, (9.374, -115.01, -100.132)), (' A 342  PHE  CE1', ' A 511  VAL HG21', -0.532, (4.883, -112.296, -73.414)), (' B 401  VAL HG22', ' B 509  ARG  HG2', -0.532, (14.915, -63.11, -72.281)), (' E 403  ARG  HB2', ' E 495  TYR  HE1', -0.53, (0.734, -117.85, -108.426)), (' B 377  PHE  CD1', ' B 434  ILE HG12', -0.528, (8.147, -69.754, -62.26)), (' A 472  ILE HG13', ' A 489  TYR  O  ', -0.528, (7.984, -132.946, -98.454)), (' D 457  ARG  HD3', ' D 461  LEU HD11', -0.527, (25.663, -57.509, -101.272)), (' D 353  TRP  CZ2', ' D 466  ARG  HB2', -0.524, (26.874, -63.071, -108.911)), (' A 365  TYR  HA ', ' A 368  LEU HD13', -0.523, (1.295, -109.586, -65.669)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.519, (-1.873, -124.269, -115.904)), (' B 331  ASN  HB3', ' S   0  ACE  H2 ', -0.518, (13.984, -63.372, -37.703)), (' B 422  ASN HD21', ' B 454  ARG  H  ', -0.517, (24.982, -71.676, -77.168)), (' C 448  ASN  OD1', ' C 450  ASN  ND2', -0.513, (-2.565, -25.672, -84.81)), (' C 350  VAL  HA ', ' C 400  PHE  HB2', -0.509, (-12.381, -23.237, -93.862)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.505, (0.872, -124.879, -87.347)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.505, (8.083, -120.507, -75.192)), (' A 350  VAL  HA ', ' A 400  PHE  HB2', -0.504, (5.72, -119.627, -82.514)), (' A 377  PHE  CD1', ' A 434  ILE HG12', -0.504, (-2.402, -111.728, -71.796)), (' A 421  TYR  HA ', ' A 461  LEU HD13', -0.502, (1.458, -130.864, -85.595)), (' C 377  PHE  HD2', ' C 434  ILE HG23', -0.502, (-15.767, -36.302, -102.755)), (' A 354  ASN  ND2', ' A 356  LYS  HE2', -0.502, (13.639, -117.531, -74.638)), (' E 475  ALA  HB3', ' E 489  TYR  HE2', -0.499, (17.891, -114.404, -96.573)), (' B 447  GLY  HA2', ' B 497  PHE  O  ', -0.498, (14.839, -60.001, -84.84)), (' D 389  ASP  HB3', ' T  10  ASN  HB2', -0.497, (8.443, -73.81, -131.241)), (' E 421  TYR  CD1', ' E 457  ARG  HB3', -0.492, (15.704, -115.244, -108.379)), (' T   9  TYR  O  ', ' T  13  ILE HG12', -0.49, (12.591, -77.608, -133.892)), (' A 341  VAL HG12', ' A 342  PHE  HD1', -0.484, (7.207, -111.959, -73.364)), (' D 384  PRO  HA ', ' D 387  LEU  HB2', -0.483, (8.076, -70.678, -122.178)), (' A 360  ASN  OD1', ' R   4  GLY  HA2', -0.483, (11.729, -121.252, -57.044)), (' U   6  VAL  O  ', ' U   6  VAL HG13', -0.482, (-14.605, -27.732, -116.921)), (' B 438  SER  HB3', ' B 509  ARG  HG3', -0.481, (12.08, -62.628, -72.904)), (' D 341  VAL HG12', ' D 342  PHE  HD1', -0.481, (20.371, -76.409, -113.646)), (' D 350  VAL HG22', ' D 422  ASN  HB3', -0.48, (21.977, -64.893, -101.955)), (' A 403  ARG  HB2', ' A 495  TYR  HE1', -0.479, (0.25, -116.744, -90.342)), (' C 498  GLN  H  ', ' C 501  ASN  ND2', -0.476, (-10.739, -32.986, -81.07)), (' E 421  TYR  HA ', ' E 461  LEU HD13', -0.476, (14.486, -115.588, -111.928)), (' B 377  PHE  HD1', ' B 434  ILE HG12', -0.474, (8.091, -69.498, -62.249)), (' A 474  GLN  HB3', ' A 480  CYS  SG ', -0.474, (7.059, -138.517, -99.626)), (' B 389  ASP  HB3', ' S  10  ASN  HB2', -0.472, (4.215, -70.688, -45.831)), (' B 364  ASP  O  ', ' B 367  VAL HG12', -0.471, (6.592, -62.87, -54.438)), (' A 406  GLU  OE1', ' A 495  TYR  OH ', -0.471, (0.676, -119.424, -88.409)), (' E 418  ILE HG23', ' E 422  ASN  HB2', -0.471, (8.296, -117.087, -112.37)), (' D 366  SER  HA ', ' D 369  TYR  CE2', -0.471, (8.12, -78.3, -122.406)), (' D 377  PHE  CD1', ' D 434  ILE HG12', -0.471, (11.019, -74.075, -114.682)), (' D 403  ARG  HB2', ' D 495  TYR  HE1', -0.469, (17.019, -70.108, -96.198)), (' U   9  TYR  O  ', ' U  13  ILE HG12', -0.466, (-12.295, -38.095, -122.331)), (' D 532  ASN  O  ', ' D 533  LEU HD12', -0.466, (-7.339, -56.45, -131.024)), (' B 456  PHE  CE1', ' B 491  PRO  HA ', -0.464, (31.101, -73.743, -83.416)), (' E 374  PHE  HA ', ' E 436  TRP  HB3', -0.464, (-7.853, -119.2, -121.59)), (' C 345  THR HG22', ' C 346  ARG  HG3', -0.462, (0.737, -27.873, -94.053)), (' E 487  ASN  HA ', ' E 489  TYR  CZ ', -0.462, (16.676, -115.998, -94.294)), (' B 490  PHE  CD1', ' B 491  PRO  HD2', -0.462, (33.969, -69.355, -82.719)), (' C 353  TRP  CD1', ' C 423  TYR  HD1', -0.461, (-15.685, -19.554, -97.041)), (' A 453  TYR  HB3', ' A 495  TYR  CE2', -0.458, (3.894, -120.506, -89.553)), (' E 532  ASN  O  ', ' E 533  LEU HD23', -0.458, (2.103, -92.118, -143.895)), (' E 457  ARG  NE ', ' E 467  ASP  OD2', -0.457, (18.167, -119.354, -110.721)), (' B 332  ILE HD11', ' S   3  ALA  HA ', -0.455, (19.207, -64.131, -41.45)), (' E 418  ILE  O  ', ' E 422  ASN  N  ', -0.453, (10.572, -115.995, -112.284)), (' C 395  VAL HG22', ' C 515  PHE  HB3', -0.452, (-16.768, -25.311, -112.032)), (' A 389  ASP  HB3', ' R  10  ASN  HB2', -0.449, (-3.08, -110.416, -54.9)), (' B 418  ILE HG23', ' B 422  ASN  HB2', -0.447, (22.414, -73.888, -74.071)), (' D 521  PRO  HG2', ' D 524  VAL  HB ', -0.447, (14.712, -67.675, -137.189)), (' A 442  ASP  OD1', ' A 451  TYR  OH ', -0.447, (9.796, -111.419, -85.112)), (' B 472  ILE HD12', ' B 482  GLY  HA2', -0.447, (40.222, -67.44, -84.472)), (' A 365  TYR  CE2', ' A 392  PHE  HE2', -0.445, (0.1, -115.028, -61.402)), (' C 521  PRO  HB2', ' C 524  VAL  HB ', -0.444, (-18.392, -30.577, -127.432)), (' D 409  GLN  HB3', ' D 419  ALA  HB2', -0.443, (14.665, -61.803, -102.447)), (' A 457  ARG  HD3', ' A 461  LEU HD11', -0.443, (3.515, -132.322, -85.404)), (' A 472  ILE HD11', ' A 488  CYS  HB3', -0.442, (8.831, -134.658, -101.401)), (' D 431  GLY  HA2', ' D 515  PHE  CE1', -0.442, (14.353, -65.654, -119.274)), (' B 449  TYR  CE2', ' D 456  PHE  HZ ', -0.441, (21.182, -59.396, -88.133)), (' A 403  ARG  HB2', ' A 495  TYR  CE1', -0.44, (0.813, -116.866, -90.154)), (' E 353  TRP  CZ2', ' E 466  ARG  HB2', -0.439, (13.614, -122.422, -119.21)), (' S   9  TYR  O  ', ' S  13  ILE HG12', -0.439, (5.774, -65.178, -43.576)), (' E 425  LEU HD21', ' E 512  VAL HG11', -0.438, (6.884, -116.1, -123.357)), (' C 440  ASN  N  ', ' C 440  ASN  OD1', -0.438, (-6.135, -38.0, -89.319)), (' E 366  SER  HA ', ' E 369  TYR  CE2', -0.434, (-8.239, -117.924, -135.907)), (' A 384  PRO  HA ', ' A 387  LEU  HB2', -0.434, (-5.605, -113.435, -63.806)), (' E 447  GLY  HA2', ' E 497  PHE  O  ', -0.433, (-5.827, -126.016, -103.12)), (' C 403  ARG  HG3', ' C 495  TYR  CD1', -0.433, (-14.8, -27.372, -85.1)), (' D 457  ARG  HD3', ' D 461  LEU  CD1', -0.433, (25.17, -56.941, -101.247)), (' R  12  TRP  O  ', ' R  16  NH2  N  ', -0.431, (4.627, -110.931, -49.088)), (' V   9  TYR  O  ', ' V  13  ILE HG12', -0.43, (-3.868, -121.681, -145.926)), (' V  12  TRP  O  ', ' V  16  NH2  N  ', -0.43, (-0.028, -123.339, -149.556)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.429, (6.017, -112.517, -82.151)), (' D 414  GLN  O  ', ' D 424  LYS  NZ ', -0.428, (14.168, -56.954, -104.651)), (' C 421  TYR  HA ', ' C 461  LEU HD13', -0.425, (-21.423, -15.304, -91.263)), (' B 374  PHE  HA ', ' B 436  TRP  HB3', -0.424, (6.795, -65.893, -68.11)), (' D 388  ASN  O  ', ' T   8  GLY  HA3', -0.423, (12.965, -73.384, -128.89)), (' A 362  VAL  HA ', ' R   7  TYR  O  ', -0.421, (5.202, -113.594, -57.515)), (' D 355  ARG  NE ', ' D 398  ASP  OD1', -0.421, (24.764, -66.716, -113.939)), (' E 392  PHE  O  ', ' V   5  VAL HG23', -0.42, (8.621, -120.756, -140.896)), (' C 425  LEU HD21', ' C 512  VAL HG11', -0.42, (-19.483, -24.143, -101.869)), (' B 461  LEU  HA ', ' B 461  LEU HD23', -0.419, (30.463, -78.903, -70.098)), (' D 474  GLN  HB3', ' D 480  CYS  SG ', -0.419, (31.58, -53.531, -86.828)), (' C 417  LYS  H  ', ' C 417  LYS  HG3', -0.419, (-24.308, -24.065, -85.895)), (' C 365  TYR  CD2', ' C 387  LEU  HG ', -0.418, (-17.218, -34.196, -112.462)), (' E 524  VAL HG13', ' E 525  CYS  SG ', -0.417, (5.846, -117.158, -147.7)), (' C 519  HIS  CG ', ' C 527  PRO  HG3', -0.417, (-26.446, -28.729, -122.745)), (' C 364  ASP  O  ', ' C 367  VAL HG12', -0.413, (-10.366, -37.341, -110.843)), (' B 334  ASN  O  ', ' B 362  VAL HG12', -0.412, (12.916, -60.363, -46.55)), (' A 449  TYR  CE1', ' E 455  LEU HD21', -0.412, (9.041, -115.447, -99.638)), (' B 473  TYR  CZ ', ' B 475  ALA  HB2', -0.411, (37.839, -80.114, -86.995)), (' E 411  ALA  HB3', ' E 414  GLN  HG3', -0.41, (4.72, -107.834, -118.536)), (' C 498  GLN  H  ', ' C 501  ASN HD21', -0.41, (-10.413, -32.654, -80.557)), (' B 400  PHE  CE1', ' B 510  VAL  HB ', -0.41, (16.678, -69.603, -69.603)), (' E 455  LEU HD22', ' E 493  GLN  NE2', -0.409, (7.823, -117.803, -100.454)), (' B 347  PHE  CE2', ' B 509  ARG  HB3', -0.408, (14.222, -63.316, -69.001)), (' B 474  GLN  O  ', ' B 476  GLY  N  ', -0.407, (41.246, -77.7, -89.643)), (' D 472  ILE HD12', ' D 480  CYS  HB3', -0.407, (33.718, -56.433, -86.245)), (' E 337  PRO  HB2', ' E 340  GLU  HG2', -0.406, (0.372, -131.805, -130.259)), (' A 398  ASP  O  ', ' A 511  VAL  HA ', -0.403, (4.431, -117.374, -75.281)), (' E 398  ASP  O  ', ' E 511  VAL  HA ', -0.403, (2.6, -121.588, -122.621)), (' E 398  ASP  OD2', ' E 423  TYR  OH ', -0.403, (8.28, -119.051, -123.232)), (' D 392  PHE  O  ', ' T   6  VAL  N  ', -0.403, (20.549, -68.535, -128.975)), (' C 476  GLY  H  ', ' C 487  ASN  HB3', -0.403, (-22.785, -9.118, -73.833)), (' D 393  THR HG23', ' D 516  GLU  HB3', -0.4, (20.426, -61.987, -126.056)), (' B 454  ARG  HA ', ' B 492  LEU HD23', -0.4, (28.11, -70.772, -79.302))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
