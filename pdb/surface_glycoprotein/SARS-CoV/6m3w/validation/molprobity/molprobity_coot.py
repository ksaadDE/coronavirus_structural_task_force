# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', '1093 ', 'SER', None, (0.9060000000000002, -14.794999999999996, -91.396)), ('A', '1116 ', 'ASN', None, (16.879, -5.4049999999999985, -61.90499999999999)), ('A', '1125 ', 'PRO', None, (14.679, -0.389, -38.275)), ('B', '1093 ', 'SER', None, (-13.271999999999997, 6.578, -91.38199999999999)), ('B', '1116 ', 'ASN', None, (-13.1, -11.962, -61.89799999999999)), ('B', '1125 ', 'PRO', None, (-7.643, -12.570999999999998, -38.271)), ('C', '1093 ', 'SER', None, (12.328999999999999, 8.254, -91.373)), ('C', '1116 ', 'ASN', None, (-3.942000000000001, 17.207, -61.908)), ('C', '1125 ', 'PRO', None, (-7.172, 12.758, -38.283))]
data['rota'] = [('A', ' 731 ', 'CYS', 0.17570255595886908, (-13.223, -3.283999999999999, -19.683)), ('A', ' 973 ', 'VAL', 0.22893937537271253, (-3.116, -3.4019999999999992, -14.391999999999998)), ('B', ' 731 ', 'CYS', 0.17565088673063894, (3.795, 13.039999999999997, -19.675)), ('B', ' 973 ', 'VAL', 0.23103914650205448, (-1.353, 4.341999999999997, -14.383999999999999)), ('C', ' 731 ', 'CYS', 0.17471800113602506, (9.523, -9.76, -19.660999999999998)), ('C', ' 973 ', 'VAL', 0.22883784305818677, (4.461, -1.0069999999999995, -14.379))]
data['cbeta'] = []
data['probe'] = [(' C1071  PHE  HB2', ' C1103  PHE  HB2', -0.676, (-5.198, 15.483, -87.615)), (' B1071  PHE  HB2', ' B1103  PHE  HB2', -0.67, (-11.019, -12.343, -87.618)), (' A1071  PHE  HB2', ' A1103  PHE  HB2', -0.657, (15.695, -2.914, -87.904)), (' A1148  LEU HD23', ' A1151  ILE HG13', -0.65, (10.839, -1.846, 20.463)), (' B1148  LEU HD23', ' B1151  ILE HG13', -0.648, (-6.904, -8.6, 20.485)), (' C1034  PHE  HB2', ' C1045  LEU  HB3', -0.646, (15.084, -13.11, -71.802)), (' A1133  GLU  HG3', ' C 982  ARG HH21', -0.645, (14.815, -2.055, -26.077)), (' C1148  LEU HD23', ' C1151  ILE HG13', -0.643, (-4.534, 10.671, 20.483)), (' A 924  SER  HB2', ' B1165  ILE HG23', -0.643, (-4.617, 8.08, 55.752)), (' A 922  THR  OG1', ' C1167  ARG  NH1', -0.64, (4.685, 9.555, 59.682)), (' A1034  PHE  HB2', ' A1045  LEU  HB3', -0.639, (-18.999, -6.429, -71.914)), (' B1034  PHE  HB2', ' B1045  LEU  HB3', -0.639, (3.959, 19.51, -71.87)), (' B 958  VAL HG11', ' C 959  LEU HD21', -0.637, (5.679, 0.156, 6.37)), (' A1165  ILE HG23', ' C 924  SER  HB2', -0.621, (-4.384, -8.496, 55.625)), (' C1164  GLU  O  ', ' C1168  LEU  HB2', -0.613, (7.378, 3.778, 58.377)), (' A1164  GLU  O  ', ' A1168  LEU  HB2', -0.607, (-0.367, -8.145, 58.218)), (' B1164  GLU  O  ', ' B1168  LEU  HB2', -0.606, (-7.079, 4.729, 58.457)), (' B 741  PHE  HA ', ' B 744  GLN HE21', -0.598, (11.225, 2.41, -31.153)), (' B1087  THR HG22', ' B1094  PRO  HA ', -0.597, (-15.112, 2.546, -92.063)), (' C 741  PHE  HA ', ' C 744  GLN HE21', -0.597, (-3.013, -10.433, -31.103)), (' B1167  ARG  NH1', ' C 922  THR  OG1', -0.596, (-10.682, -0.562, 59.918)), (' C1087  THR HG22', ' C1094  PRO  HA ', -0.596, (9.67, 11.914, -92.058)), (' A 944  LEU  O  ', ' A 948  LEU  HB2', -0.59, (-4.505, 3.259, 23.877)), (' C 944  LEU  O  ', ' C 948  LEU  HB2', -0.589, (-0.521, -5.55, 23.853)), (' A 947  GLN  HB3', ' C1151  ILE HG12', -0.586, (-5.613, 8.276, 21.763)), (' A1087  THR HG22', ' A1094  PRO  HA ', -0.584, (4.979, -14.066, -91.509)), (' A 918  GLU  OE2', ' C1167  ARG  NH1', -0.583, (5.345, 11.13, 60.784)), (' B 944  LEU  O  ', ' B 948  LEU  HB2', -0.58, (5.203, 1.884, 23.471)), (' B1130  PHE  O  ', ' B1134  LEU  HB2', -0.578, (-10.617, -12.34, -19.813)), (' A 741  PHE  HA ', ' A 744  GLN HE21', -0.574, (-7.624, 8.477, -31.074)), (' B 924  SER  HB2', ' C1165  ILE HG23', -0.573, (9.6, -0.061, 55.961)), (' A 744  GLN HE22', ' C1127  LEU HD21', -0.569, (-6.43, 11.016, -30.459)), (' C1130  PHE  O  ', ' C1134  LEU  HB2', -0.565, (-5.576, 15.321, -19.813)), (' B1164  GLU  HG2', ' C 926  ALA  HB2', -0.564, (-7.733, -0.346, 54.142)), (' A1130  PHE  O  ', ' A1134  LEU  HB2', -0.564, (16.009, -3.014, -19.827)), (' A 958  VAL HG11', ' B 959  LEU HD21', -0.554, (-2.771, 5.425, 6.62)), (' B 944  LEU  O  ', ' B 948  LEU  CB ', -0.551, (4.675, 2.678, 23.818)), (' A 694  ILE HD12', ' A1059  THR HG21', -0.55, (9.29, -15.919, -80.814)), (' B 694  ILE HD12', ' B1059  THR HG21', -0.549, (-18.303, 0.063, -80.347)), (' B 982  ARG  NH2', ' C1128  ASP  O  ', -0.548, (-4.075, 15.093, -27.067)), (' C 694  ILE HD12', ' C1059  THR HG21', -0.547, (8.801, 16.048, -80.768)), (' A 944  LEU  O  ', ' A 948  LEU  CB ', -0.547, (-4.737, 2.708, 23.782)), (' A 688  ALA  HB2', ' C1045  LEU HD21', -0.545, (18.626, -14.272, -73.33)), (' C 944  LEU  O  ', ' C 948  LEU  CB ', -0.545, (-0.417, -5.433, 23.329)), (' B 978  LEU HD11', ' C1133  GLU  HB3', -0.544, (-6.974, 11.627, -23.386)), (' A 959  LEU HD21', ' C 958  VAL HG11', -0.531, (-3.371, -5.288, 6.607)), (' C 973  VAL  O  ', ' C 977  ARG  NH1', -0.526, (4.625, 0.717, -16.834)), (' A1127  LEU HD13', ' C 982  ARG  HG3', -0.525, (11.106, -3.6, -29.048)), (' A 973  VAL  O  ', ' A 977  ARG  NH1', -0.524, (-1.805, -4.303, -16.859)), (' B1012  SER  HB3', ' C1023  ASP  HB2', -0.519, (9.694, 4.104, -71.862)), (' B 973  VAL  O  ', ' B 977  ARG  NH1', -0.515, (-2.871, 3.638, -16.747)), (' A 982  ARG  NH2', ' B1128  ASP  O  ', -0.51, (-11.063, -11.22, -26.968)), (' A 978  LEU HD11', ' B1133  GLU  HB3', -0.502, (-6.623, -11.301, -23.316)), (' C1152  SER  OG ', ' C1153  GLY  N  ', -0.502, (2.142, 8.964, 23.363)), (' C 708  VAL HG22', ' C1043  VAL HG22', -0.5, (15.73, -11.759, -62.575)), (' B 913  ILE HD13', ' B 916  ILE HD12', -0.499, (2.035, -1.818, 70.886)), (' A 913  ILE HD13', ' A 916  ILE HD12', -0.499, (0.242, 2.722, 71.207)), (' B1152  SER  OG ', ' B1153  GLY  N  ', -0.499, (-8.789, -2.707, 23.283)), (' B 708  VAL HG22', ' B1043  VAL HG22', -0.498, (2.154, 18.989, -62.423)), (' B1107  ASN  ND2', ' B1109  ASP  OD2', -0.498, (-17.606, -23.587, -82.748)), (' A 982  ARG  HG3', ' B1127  LEU HD13', -0.497, (-8.337, -8.18, -29.414)), (' A1107  ASN  ND2', ' A1109  ASP  OD2', -0.496, (29.234, -3.436, -82.73)), (' C1107  ASN  ND2', ' C1109  ASP  OD2', -0.495, (-11.806, 27.279, -82.633)), (' A1012  SER  HB3', ' B1023  ASP  HB2', -0.495, (-8.711, 6.338, -71.941)), (' A 708  VAL HG22', ' A1043  VAL HG22', -0.493, (-18.183, -7.693, -62.525)), (' C 692  ASN  O  ', ' C1059  THR  N  ', -0.492, (11.218, 20.035, -83.344)), (' A1060  ALA  HB3', ' A1077  PHE  HB2', -0.49, (14.413, -14.935, -86.628)), (' A 933  VAL HG21', ' C1159  VAL HG23', -0.49, (2.553, 8.108, 44.052)), (' A 982  ARG HH21', ' B1133  GLU  HG3', -0.489, (-8.801, -11.768, -25.662)), (' A1152  SER  OG ', ' A1153  GLY  N  ', -0.488, (6.616, -6.639, 23.37)), (' A 926  ALA  HB2', ' C1164  GLU  HG2', -0.488, (3.439, 6.328, 53.941)), (' C 913  ILE HD13', ' C 916  ILE HD12', -0.486, (-2.69, -0.833, 70.916)), (' A1116  ASN  HA ', ' C 708  VAL  HB ', -0.486, (15.984, -7.429, -60.783)), (' B1060  ALA  HB3', ' B1077  PHE  HB2', -0.485, (-19.716, -4.778, -86.699)), (' C 699  ASN  HB2', ' C1053  GLN  HB3', -0.482, (22.595, 5.912, -85.775)), (' B 692  ASN  O  ', ' B1059  THR  N  ', -0.48, (-23.117, -0.229, -83.45)), (' B 699  ASN  HB2', ' B1053  GLN  HB3', -0.478, (-16.095, 16.593, -85.656)), (' A 692  ASN  O  ', ' A1059  THR  N  ', -0.477, (11.764, -19.853, -83.458)), (' A1167  ARG  NH1', ' B 922  THR  OG1', -0.474, (5.758, -9.038, 60.083)), (' C1060  ALA  HB3', ' C1077  PHE  HB2', -0.474, (5.638, 19.465, -86.758)), (' A1149  GLY  O  ', ' A1152  SER  OG ', -0.473, (6.677, -6.66, 22.426)), (' A 913  ILE HG23', ' B1175  LEU HD22', -0.473, (-2.398, 5.037, 71.104)), (' B1015  VAL  O  ', ' C1089  ARG  NH2', -0.472, (9.071, 11.396, -77.303)), (' A 728  SER  O  ', ' A 731  CYS  N  ', -0.472, (-14.856, -4.167, -18.677)), (' A 699  ASN  HB2', ' A1053  GLN  HB3', -0.471, (-6.725, -22.33, -86.077)), (' A1120  TYR  O  ', ' C 996  ARG  NH2', -0.471, (11.834, -3.767, -50.147)), (' A1164  GLU  HG2', ' B 926  ALA  HB2', -0.47, (3.758, -6.221, 54.001)), (' A1127  LEU HD21', ' B 744  GLN HE22', -0.47, (12.669, -0.007, -30.3)), (' B 712  SER  OG ', ' B1040  HIS  ND1', -0.469, (8.904, 15.465, -53.1)), (' A1133  GLU  HB3', ' C 978  LEU HD11', -0.467, (13.099, -0.041, -23.348)), (' B 718  VAL HG21', ' B 989  TYR  HE2', -0.466, (3.525, 12.345, -38.631)), (' A 747  ARG  HD3', ' C1125  PRO  HG2', -0.464, (-10.937, 12.882, -38.006)), (' A 718  VAL HG21', ' A 989  TYR  HE2', -0.461, (-12.897, -2.95, -38.747)), (' C 718  VAL HG21', ' C 989  TYR  HE2', -0.461, (9.269, -9.615, -38.532)), (' B 728  SER  O  ', ' B 731  CYS  N  ', -0.455, (3.929, 14.924, -18.77)), (' B 710  PRO  HA ', ' B1041  GLY  HA2', -0.455, (5.141, 14.856, -58.14)), (' A1045  LEU HD21', ' B 688  ALA  HB2', -0.454, (-21.716, -9.291, -73.693)), (' A 710  PRO  HA ', ' A1041  GLY  HA2', -0.454, (-15.133, -3.216, -57.922)), (' C1023  ASP  OD1', ' C1028  GLY  N  ', -0.453, (13.588, 1.598, -74.327)), (' A1015  VAL  O  ', ' B1089  ARG  NH2', -0.453, (-14.818, 1.977, -77.286)), (' C 712  SER  OG ', ' C1040  HIS  ND1', -0.447, (9.19, -15.386, -53.134)), (' A 927  LEU HD23', ' A 930  LEU HD12', -0.447, (0.126, 2.199, 50.151)), (' C 710  PRO  HA ', ' C1041  GLY  HA2', -0.446, (10.537, -11.795, -58.193)), (' C 927  LEU HD23', ' C 930  LEU HD12', -0.446, (-1.839, -1.243, 50.53)), (' A1151  ILE HG12', ' B 947  GLN  HB3', -0.446, (9.787, 0.82, 22.311)), (' B 927  LEU HD23', ' B 930  LEU HD12', -0.446, (2.08, -0.927, 50.42)), (' B 941  LEU HD23', ' C1156  ALA  HB2', -0.445, (2.39, 5.365, 33.583)), (' B1128  ASP  N  ', ' B1128  ASP  OD1', -0.444, (-10.469, -13.702, -28.394)), (' A1167  ARG  NH1', ' B 918  GLU  OE2', -0.444, (6.75, -10.205, 60.895)), (' B1090  ASN  HB2', ' C1073  ARG HH12', -0.442, (-7.327, 6.928, -85.417)), (' C1038  ALA  HB2', ' C1043  VAL HG23', -0.441, (14.732, -14.339, -61.55)), (' C1128  ASP  N  ', ' C1128  ASP  OD1', -0.44, (-6.767, 15.768, -28.402)), (' B1038  ALA  HB2', ' B1043  VAL HG23', -0.44, (5.287, 19.752, -61.605)), (' C 728  SER  O  ', ' C 731  CYS  N  ', -0.439, (11.125, -10.603, -18.946)), (' C1123  LEU  HA ', ' C1123  LEU HD23', -0.436, (-8.143, 13.345, -42.263)), (' A1038  ALA  HB2', ' A1043  VAL HG23', -0.434, (-20.068, -5.091, -61.352)), (' B1023  ASP  OD1', ' B1028  GLY  N  ', -0.431, (-8.022, 10.941, -74.254)), (' A1123  LEU  HA ', ' A1123  LEU HD23', -0.43, (15.715, -0.069, -42.495)), (' A 920  LEU  HA ', ' A 920  LEU HD23', -0.429, (-0.258, 3.922, 60.789)), (' B 906  ALA  O  ', ' B 910  ASN  HB2', -0.428, (6.296, -4.493, 78.905)), (' B1151  ILE HG12', ' C 947  GLN  HB3', -0.428, (-4.573, -8.977, 22.202)), (' A 906  ALA  O  ', ' A 910  ASN  HB2', -0.427, (0.881, 7.354, 79.233)), (' A 929  LYS  HE2', ' C1161  ILE  HB ', -0.426, (5.381, 9.892, 48.717)), (' C1124  GLN  H  ', ' C1124  GLN  HG2', -0.425, (-5.036, 12.758, -41.318)), (' A1090  ASN  HB2', ' B1073  ARG HH12', -0.422, (-2.138, -10.147, -85.25)), (' C 906  ALA  O  ', ' C 910  ASN  HB2', -0.421, (-6.96, -3.261, 78.847)), (' A 741  PHE  O  ', ' A 745  LEU  HB2', -0.42, (-8.881, 5.183, -33.598)), (' B 982  ARG  HG3', ' C1127  LEU HD13', -0.42, (-2.888, 11.4, -29.356)), (' A1068  LYS  N  ', ' A1108  CYS  SG ', -0.419, (26.078, -8.453, -87.733)), (' C1068  LYS  N  ', ' C1108  CYS  SG ', -0.419, (-5.956, 26.529, -87.761)), (' B1068  LYS  N  ', ' B1108  CYS  SG ', -0.418, (-20.522, -18.211, -87.377)), (' A1128  ASP  N  ', ' A1128  ASP  OD1', -0.418, (16.998, -2.08, -28.003)), (' A 712  SER  OG ', ' A1040  HIS  ND1', -0.414, (-17.763, -0.019, -52.977)), (' A1159  VAL HG23', ' B 933  VAL HG21', -0.414, (6.059, -6.201, 43.733)), (' B 741  PHE  O  ', ' B 745  LEU  HB2', -0.412, (9.15, 4.946, -33.238)), (' C 744  GLN  H  ', ' C 744  GLN  HG2', -0.412, (-2.519, -12.884, -32.526)), (' A 929  LYS  HD3', ' C1161  ILE HG21', -0.411, (4.326, 8.756, 50.188)), (' A 927  LEU  HA ', ' A 927  LEU HD23', -0.41, (-0.752, 3.469, 50.584)), (' C 741  PHE  O  ', ' C 745  LEU  HB2', -0.41, (-0.161, -10.451, -33.238)), (' B1013  GLU  OE2', ' C1021  ARG  NE ', -0.409, (3.618, 0.88, -72.095)), (' A1023  ASP  OD1', ' A1028  GLY  N  ', -0.409, (-5.393, -12.548, -74.503)), (' C1032  MET  HB3', ' C1032  MET  HE2', -0.408, (10.245, -12.034, -79.918)), (' B 702  ILE HG13', ' C1110  VAL  HA ', -0.407, (-6.529, 23.552, -78.872)), (' C 930  LEU  HA ', ' C 930  LEU HD23', -0.406, (-4.785, -1.688, 46.057)), (' C 973  VAL HG13', ' C 977  ARG  NH1', -0.405, (3.297, 1.391, -15.402)), (' B1018  GLN  HA ', ' B1030  HIS  CE1', -0.405, (3.499, 9.906, -77.942)), (' A1124  GLN  H  ', ' A1124  GLN  HG2', -0.405, (13.588, -2.2, -41.365)), (' A 941  LEU HD23', ' B1156  ALA  HB2', -0.405, (-5.448, -0.456, 33.591)), (' C1018  GLN  HA ', ' C1030  HIS  CE1', -0.404, (7.321, -7.948, -77.687)), (' A1110  VAL  HA ', ' C 702  ILE HG13', -0.404, (23.474, -6.115, -79.187)), (' A 728  SER  O  ', ' A 728  SER  OG ', -0.404, (-15.139, -6.072, -19.099)), (' B1152  SER  O  ', ' B1154  ILE  N  ', -0.402, (-8.48, -3.6, 26.65)), (' B1127  LEU HD21', ' C 744  GLN HE22', -0.402, (-6.248, -10.884, -30.286)), (' B 920  LEU  HA ', ' B 920  LEU HD23', -0.402, (3.627, -1.708, 60.724)), (' A1152  SER  O  ', ' A1154  ILE  N  ', -0.402, (7.386, -5.522, 26.641)), (' C 697  PRO  HB3', ' C1051  PRO  HB3', -0.401, (17.56, 6.032, -81.758)), (' A1018  GLN  HA ', ' A1030  HIS  CE1', -0.401, (-10.588, -2.198, -77.735)), (' C 920  LEU  HA ', ' C 920  LEU HD23', -0.401, (-3.308, -2.373, 60.718)), (' A 973  VAL HG13', ' A 977  ARG  NH1', -0.4, (-0.423, -3.613, -15.818)), (' A 924  SER  HB3', ' B1168  LEU HD23', -0.4, (-3.787, 6.176, 57.305)), (' A1118  THR  OG1', ' C 710  PRO  HD2', -0.4, (10.446, -6.015, -58.633))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
