# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('F', '  79 ', 'HIS', None, (318.2769999999999, 240.07, 347.93100000000004)), ('Q', '  44 ', 'PRO', None, (317.8319999999999, 239.31800000000007, 371.44)), ('U', '  53 ', 'PRO', None, (299.0349999999999, 273.055, 389.434))]
data['rota'] = [('D', '  84 ', 'VAL', 0.0016121504025644524, (269.2279999999999, 283.86, 375.884)), ('D', '  93 ', 'THR', 0.20007788494291984, (286.44099999999986, 301.54, 363.69400000000013)), ('F', '  32 ', 'ASP', 0.1834328950924219, (348.5169999999999, 246.189, 348.802)), ('K', '  64 ', 'TRP', 0.02561869162992106, (271.5109999999999, 276.1200000000001, 356.97000000000014)), ('M', '  16 ', 'THR', 0.14170055902371545, (216.283, 290.36, 365.7090000000001)), ('P', ' 122 ', 'THR', 0.06166404427687801, (267.9689999999999, 239.187, 334.6600000000001)), ('Q', '  72 ', 'VAL', 0.1879314899879123, (313.7689999999999, 248.824, 379.67000000000013)), ('Q', ' 100 ', 'VAL', 0.1854423989004908, (335.1249999999999, 258.378, 393.398)), ('S', '  53 ', 'THR', 0.09277947141656312, (308.4449999999999, 209.319, 360.683)), ('S', ' 104 ', 'ASP', 0.2597877036937462, (284.6679999999999, 212.708, 340.051)), ('S', ' 117 ', 'ILE', 0.1202593102449935, (266.7999999999999, 222.45300000000003, 336.875)), ('S', ' 131 ', 'VAL', 0.03780638799071312, (280.1749999999999, 231.175, 338.8320000000001)), ('T', ' 124 ', 'THR', 0.00500629730994306, (298.9659999999999, 229.174, 393.811)), ('U', '  39 ', 'LEU', 0.28009581054645893, (293.2839999999999, 280.485, 390.72000000000014)), ('U', '  54 ', 'VAL', 0.006301065150182694, (298.77499999999986, 268.937, 386.9470000000001)), ('U', '  68 ', 'THR', 0.1812862981478625, (289.4389999999999, 270.065, 345.3640000000001)), ('Z', '  49 ', 'LEU', 0.0691729736389353, (317.2059999999999, 205.0, 352.1590000000001)), ('Z', ' 110 ', 'THR', 0.21025246298809097, (334.5769999999999, 217.796, 361.132)), ('c', '  29 ', 'GLN', 0.03640322284130235, (341.06099999999986, 264.572, 336.26200000000006)), ('c', '  32 ', 'VAL', 0.009228649854784846, (349.7499999999999, 261.93, 339.84800000000007)), ('f', ' 126 ', 'CYS', 0.012204796803416684, (229.69200000000004, 255.979, 365.8090000000001)), ('g', ' 113 ', 'PHE', 0.029919686208363744, (330.7809999999999, 287.076, 400.829)), ('g', ' 132 ', 'TRP', 0.055460178614414005, (320.64299999999986, 288.185, 401.0480000000001)), ('g', ' 165 ', 'ILE', 0.06399068237984583, (330.16899999999987, 297.891, 399.688)), ('g', ' 309 ', 'VAL', 0.26668871447092, (350.48399999999987, 279.485, 388.0460000000001))]
data['cbeta'] = []
data['probe'] = [(' g  87  LEU  HB2', ' g 101  PHE  HB2', -0.709, (321.163, 282.911, 394.725)), (" 21239    U H5''", ' P 124  LYS  HD3', -0.708, (270.588, 240.898, 323.931)), (' U  54  VAL HG13', ' U  88  LEU  HB2', -0.707, (295.451, 267.93, 387.457)), (' g 223  GLU  OE1', ' g 225  LYS  NZ ', -0.687, (341.737, 311.647, 401.203)), (' U  80  PHE  HB3', ' d  52  PHE  HB3', -0.679, (290.604, 271.862, 360.788)), (" 21314    U  O2'", ' K   8  ARG  NH1', -0.674, (243.168, 274.247, 355.324)), (" 21228    A  H2'", ' 21229    G  C8 ', -0.662, (299.007, 236.14, 336.156)), (' T  76  THR HG22', ' T  94  ARG  HB3', -0.66, (293.095, 234.681, 369.698)), (' 21521    C  OP2', ' S 136  THR  OG1', -0.65, (282.173, 238.94, 331.855)), (' g 165  ILE HG13', ' g 177  TRP  HB2', -0.648, (326.838, 299.626, 399.148)), (' Q  51  LEU HD13', ' Q  81  ILE HG23', -0.641, (322.462, 244.688, 373.97)), (" 21588    A  H2'", ' 21589    A  C8 ', -0.625, (303.836, 241.783, 364.956)), (' Z  68  ILE  HB ', ' Z 109  TYR  HB2', -0.62, (330.166, 216.998, 359.342)), (' U  78  ASP  OD2', ' d  44  ARG  NH1', -0.618, (291.811, 272.833, 351.473)), (' g 166  VAL HG12', ' g 176  VAL HG22', -0.615, (332.751, 302.141, 396.92)), (" 21277    C  H2'", ' 21278    A  H8 ', -0.613, (246.131, 284.535, 344.591)), (' 21507    G  N2 ', ' f  86  THR  OG1', -0.607, (249.728, 255.711, 328.305)), (' F  71  ARG  NH2', ' F 148  ASN  OD1', -0.596, (332.503, 250.283, 349.186)), (' g 107  ASP  OD2', ' g 125  ARG  NH1', -0.59, (324.51, 287.825, 380.189)), (' P  41  GLN  HG3', ' P  84  ILE HD13', -0.585, (265.424, 229.595, 351.751)), (' M  52  LEU  HB2', ' M  76  LEU HD11', -0.579, (212.729, 274.194, 362.022)), (" 21446    A HO2'", ' 21447    G  H8 ', -0.571, (305.466, 272.06, 378.805)), (' F 120  GLY  O  ', ' F 193  LYS  NZ ', -0.571, (341.18, 244.344, 340.635)), (' M  44  LYS  HD3', ' f 128  ALA  HB3', -0.571, (224.966, 259.983, 368.184)), (' 21388    A  H61', ' D 161  GLY  HA3', -0.57, (305.258, 283.936, 356.161)), (' Z  54  THR HG21', ' Z  79  ILE HD11', -0.566, (323.628, 206.966, 349.266)), (' P 130  ARG  HD3', ' P 131  PRO  HD2', -0.566, (285.781, 242.996, 315.69)), (' f 107  LYS  HG2', ' f 115  SER  HB3', -0.565, (210.996, 253.503, 360.131)), (' f 121  CYS  HB3', ' f 126  CYS  HB2', -0.562, (229.049, 253.363, 364.099)), (' 21563    G  OP1', ' T 121  ARG  NH1', -0.56, (289.431, 232.056, 382.953)), (" 21228    A  H2'", ' 21229    G  H8 ', -0.558, (298.995, 235.512, 335.802)), (' g 233  GLY  HA3', ' g 252  THR HG21', -0.555, (347.083, 295.972, 378.077)), (' g 174  VAL  HB ', ' g 188  HIS  HB2', -0.544, (333.879, 305.778, 391.342)), (' g 162  ASN  ND2', ' g 178  ASN  OD1', -0.538, (329.083, 302.823, 406.556)), (" 21438    A  H2'", ' 21439    A  C8 ', -0.538, (308.015, 260.018, 401.382)), (' D  79  PHE  HE2', ' D  84  VAL HG13', -0.536, (269.718, 281.318, 374.345)), (' g  62  HIS  CE1', ' g  88  ARG  HG3', -0.535, (323.709, 278.203, 390.559)), (' M  52  LEU HD22', ' M  78  LYS  HE3', -0.535, (209.59, 275.917, 359.063)), (' d  19  ARG  HD2', ' d  32  ARG  HD3', -0.533, (277.101, 259.183, 358.663)), (' K  80  ARG  NH2', ' K  89  ILE  O  ', -0.529, (246.113, 292.021, 369.841)), (" 21463    U  H4'", " 21464    C H5''", -0.529, (338.802, 289.514, 352.065)), (' g 159  ASN  HB2', ' g 204  GLY  HA3', -0.528, (339.358, 298.092, 404.776)), (" 21536    G  H2'", ' 21537    A  C8 ', -0.528, (310.333, 228.044, 353.694)), (' g   3  GLU  HG3', ' g 314  ILE  HA ', -0.526, (362.757, 288.004, 394.436)), (" 21522    A  O2'", ' S 145  THR  O  ', -0.525, (288.469, 235.257, 321.478)), (" 21413    G  H2'", ' 21414    A  H8 ', -0.519, (304.531, 235.975, 401.292)), (" 21277    C  H2'", ' 21278    A  C8 ', -0.518, (246.177, 284.069, 344.021)), (' Q  16  LYS  HG3', ' Q  17  LYS  H  ', -0.517, (317.016, 253.449, 368.801)), (" 21217    A  H2'", ' 21218    C  C6 ', -0.517, (318.951, 262.905, 334.978)), (' 21447    G  OP1', ' U  87  ARG  NH2', -0.516, (298.769, 271.815, 378.455)), (' D  79  PHE  CE2', ' D  84  VAL HG13', -0.515, (269.987, 280.807, 373.904)), (' g 240  CYS  SG ', ' g 249  CYS  HB3', -0.512, (346.963, 291.203, 390.767)), (" 21415    C  O2'", ' T 132  ASP  OD2', -0.51, (309.76, 229.175, 394.465)), (' g   3  GLU  OE1', ' g 245  ARG  NH2', -0.504, (358.989, 290.67, 395.943)), (' D 142  LEU HD12', ' D 148  LYS  HG3', -0.504, (285.918, 292.644, 334.389)), (" 21310    U H5''", ' f 130  VAL HG13', -0.504, (228.995, 257.483, 359.691)), (" 21396    A  O2'", ' 21398    G  N7 ', -0.503, (317.014, 270.549, 382.201)), (" 21536    G  H2'", ' 21537    A  H8 ', -0.501, (310.208, 228.976, 353.56)), (' g 159  ASN  ND2', ' g 203  ASP  O  ', -0.499, (341.262, 299.339, 406.517)), (' M  43  ASP  OD2', ' f 106  TYR  OH ', -0.498, (219.627, 260.968, 362.982)), (' c  21  THR HG22', ' c  68  LEU HD11', -0.498, (337.292, 267.697, 332.488)), (' c  44  ARG  NH2', ' c  60  GLU  O  ', -0.497, (349.156, 254.681, 332.34)), (' D 226  GLN  HG2', ' g 186  THR HG23', -0.493, (331.803, 310.482, 398.272)), (' Z  47  LEU  HB2', ' Z  79  ILE HD13', -0.492, (321.163, 208.234, 348.486)), (' Q 100  VAL HG12', ' Q 101  ASP  H  ', -0.49, (337.55, 258.47, 392.642)), (" 21562    C  H2'", ' 21563    G  H8 ', -0.49, (285.44, 235.097, 382.221)), (' D  70  THR  HB ', ' D  86  LEU  HG ', -0.486, (268.045, 287.616, 371.56)), (' Q  81  ILE  O  ', ' Q  85  ARG  HG3', -0.481, (322.573, 248.041, 374.232)), (' S 125  HIS  CD2', ' S 131  VAL HG21', -0.481, (279.117, 226.888, 337.714)), (' 21286    G  O6 ', ' M  36  ARG  HB3', -0.478, (224.963, 267.509, 356.134)), (' U  51  LYS  HB2', ' U  90  ASP  HB2', -0.477, (295.57, 268.894, 394.512)), (" 21595    U  H2'", ' 21596    U  H6 ', -0.477, (311.578, 219.364, 362.181)), (" 21628    C  H2'", ' 21629    C  H6 ', -0.474, (287.057, 222.19, 356.326)), (' g 191  HIS  CG ', ' g 195  LEU HD21', -0.473, (336.223, 302.882, 385.268)), (" 21217    A  H2'", ' 21218    C  H6 ', -0.473, (318.324, 262.735, 334.818)), (" 21679    A  H2'", ' F  60  ARG  HD2', -0.472, (331.858, 263.827, 347.979)), (" 21407    U  H2'", ' 21408    U  C6 ', -0.472, (311.717, 254.661, 392.985)), (" 21546    G  H5'", ' Q  18  THR HG21', -0.471, (307.421, 254.506, 370.797)), (' S   5  ILE  HB ', ' Z  49  LEU  HB3', -0.471, (316.369, 202.374, 351.71)), (' g   5  MET  HE1', ' g 291  TRP  HH2', -0.471, (352.623, 288.509, 392.666)), (' M  81  ASP  HB2', ' M  84  LYS  HE2', -0.47, (214.994, 285.561, 353.344)), (' D  44  THR HG22', ' D  45  ARG  HG3', -0.47, (271.844, 283.88, 383.985)), (' T 124  THR HG22', ' T 125  PRO  HD2', -0.469, (298.605, 228.772, 396.328)), (' g 215  GLN  NE2', ' g 231  ASP  OD1', -0.469, (346.099, 303.8, 379.51)), (" 21628    C  H2'", ' 21629    C  C6 ', -0.469, (287.038, 222.435, 355.762)), (' D 163  PRO  O  ', ' D 167  TYR  HB2', -0.467, (299.921, 289.791, 359.624)), (' U  20  ILE HD12', ' U  98  VAL HG21', -0.466, (286.181, 273.471, 397.15)), (' 21227    G  C2 ', ' 21228    A  C8 ', -0.464, (303.758, 237.055, 335.537)), (' 21482    C  OP1', ' d  54  LYS  NZ ', -0.464, (297.238, 274.28, 352.98)), (' 21614    A  OP2', ' P  42  ARG  NH1', -0.464, (272.75, 226.302, 359.808)), (' F  32  ASP  O  ', ' F  36  GLN  HG3', -0.462, (348.028, 248.495, 351.158)), (' S  34  LYS  HB3', ' S 100  ALA  HA ', -0.461, (289.958, 210.875, 343.467)), (' g  17  TRP  CE2', ' g 303  THR HG23', -0.461, (337.471, 282.685, 375.372)), (' g  11  LEU  HB3', ' g  43  TRP  CZ3', -0.461, (344.083, 272.045, 386.775)), (' g 176  VAL  HB ', ' g 186  THR  HB ', -0.461, (331.461, 306.187, 397.609)), (' F  76  MET  HB3', ' F  89  THR HG23', -0.46, (324.912, 239.376, 354.824)), (' D  74  GLN  HB2', ' D  84  VAL HG21', -0.46, (266.014, 282.135, 373.951)), (' 21507    G  N1 ', ' f  88  PRO  O  ', -0.46, (246.991, 257.749, 327.315)), (" 21667    U  H2'", ' 21668    U  C6 ', -0.46, (295.815, 257.199, 352.34)), (' F  91  ARG  HD2', ' Z 103  HIS  CE1', -0.455, (321.11, 230.449, 362.259)), (' Z  58  LEU HD12', ' Z  62  VAL HG21', -0.455, (329.056, 210.038, 354.671)), (" 21595    U  H2'", ' 21596    U  C6 ', -0.454, (311.642, 219.69, 361.771)), (" 21413    G  H2'", ' 21414    A  C8 ', -0.452, (304.569, 236.202, 401.073)), (' g 171  ASP  N  ', ' g 171  ASP  OD1', -0.452, (327.674, 302.33, 384.415)), (" 21499    U  H4'", ' D 176  LEU HD13', -0.452, (272.377, 285.053, 341.317)), (' g 213  ASP  N  ', ' g 213  ASP  OD1', -0.45, (338.97, 301.773, 380.696)), (' D  62  LYS  HD3', ' K  96  ARG  HD2', -0.45, (258.031, 299.602, 373.605)), (" 21395    C  O2'", " 21396    A  H5'", -0.449, (320.802, 267.981, 377.158)), (' K  63  ALA  HB3', ' K  68  TYR  CE1', -0.448, (267.845, 279.64, 359.843)), (' K  63  ALA  HB3', ' K  68  TYR  HE1', -0.447, (267.799, 279.528, 359.589)), (' F  73  THR  O  ', ' F  89  THR HG21', -0.445, (325.013, 241.383, 355.567)), (" 21374    C  O2'", ' 21464    C  O2 ', -0.445, (332.638, 291.442, 348.34)), (" 21531    A  H2'", ' 21532    C  C6 ', -0.443, (306.68, 233.667, 343.154)), (' g  35  SER  OG ', ' g  36  ARG  N  ', -0.442, (334.393, 277.663, 382.007)), (' Z  73  VAL HG21', ' Z  88  LEU HD11', -0.441, (327.268, 213.632, 356.171)), (' 21648    G  N2 ', ' 21675    A  OP2', -0.44, (320.718, 251.878, 358.88)), (' Q 110  ASP  O  ', ' Q 114  GLN  HG2', -0.439, (338.584, 256.65, 375.121)), (" 21285    G  H5'", ' M  35  ILE HG22', -0.438, (220.574, 269.627, 353.6)), (' g 252  THR HG22', ' g 253  GLY  H  ', -0.436, (345.023, 292.843, 378.059)), (' P  75  VAL HG22', ' P  93  MET  HB3', -0.436, (251.968, 228.989, 335.435)), (" 21653    U  H2'", ' 21654    G  C8 ', -0.435, (303.912, 244.954, 358.729)), (' R  17  ILE HD12', ' R  57  LEU HD23', -0.435, (329.318, 296.082, 361.84)), (" 21278    A  H2'", ' 21279    C  C6 ', -0.434, (242.109, 285.872, 341.88)), (" 21643    U  H2'", ' 21644    C  C6 ', -0.434, (310.539, 256.344, 339.398)), (' g   5  MET  HB2', ' g 270  LEU HD21', -0.434, (355.921, 287.43, 386.45)), (" 21448    A  H2'", " 21449    G  O4'", -0.433, (311.002, 280.598, 380.11)), (' R  34  VAL  O  ', ' R  38  ILE HG12', -0.433, (321.949, 296.112, 372.407)), (' M  24  THR  HB ', ' M 115  GLY  HA3', -0.433, (227.808, 283.09, 371.94)), (' F  63  LYS  HD2', ' F  71  ARG HH12', -0.432, (331.868, 252.329, 352.003)), (' 21226    G  N1 ', ' 21639    G  OP2', -0.432, (311.407, 243.043, 331.346)), (' Q  72  VAL HG21', ' Q  84  ILE HD11', -0.431, (317.082, 246.11, 378.337)), (" 21454    A H5''", ' R   3  ARG  HD2', -0.431, (326.097, 280.1, 359.13)), (' g 152  SER  HB2', ' g 168  CYS  SG ', -0.43, (332.131, 296.461, 387.659)), (' D  23  GLU  HG2', ' K  64  TRP  CD1', -0.43, (274.822, 278.553, 357.133)), (" 21464    C  O3'", ' R  60  ARG  NH1', -0.428, (334.188, 291.389, 354.236)), (' g 249  CYS  SG ', ' g 289  LEU HD21', -0.427, (347.753, 290.135, 388.368)), (' P  18  ARG  NH1', ' S  88  LYS  O  ', -0.427, (273.163, 217.635, 352.175)), (" 21686    G  H2'", ' 21687    C  C6 ', -0.426, (312.899, 273.18, 330.449)), (' F  34  SER  HA ', ' c  55  VAL  HB ', -0.425, (347.557, 252.9, 347.311)), (' F 130  ARG  O  ', ' F 132  GLY  N  ', -0.425, (322.486, 254.247, 321.512)), (' g   5  MET  HE2', ' g 312  VAL HG22', -0.424, (355.513, 286.821, 392.388)), (" 21678    A  O2'", " 21679    A  H5'", -0.424, (328.24, 262.171, 344.051)), (' g  57  ARG  HD3', ' g  95  GLY  HA3', -0.424, (330.869, 267.558, 395.415)), (' U  20  ILE HG12', ' U 116  ILE HG13', -0.423, (284.226, 269.828, 396.473)), (' g 101  PHE  CE2', ' g 136  GLY  HA2', -0.423, (319.835, 282.787, 400.062)), (' P  57  LEU HD21', ' P  89  MET  HE2', -0.421, (255.688, 229.425, 349.093)), (' Q 113  ILE HG13', ' Q 120  LEU HD12', -0.42, (332.516, 258.386, 376.767)), (' F 102  LEU HD11', ' Z 100  VAL HG21', -0.417, (334.211, 222.493, 362.371)), (' 21521    C  H6 ', ' 21521    C  OP2', -0.417, (281.439, 239.874, 330.922)), (' F  40  ALA  HB1', ' F  45  TYR  CG ', -0.417, (338.897, 249.97, 360.295)), (' 21601    A  OP1', ' Z  43  LYS  NZ ', -0.416, (311.565, 219.18, 336.602)), (" 21320    G  H2'", " 21321    G  O4'", -0.416, (249.856, 284.085, 336.384)), (' F  42  LYS  HA ', ' F  42  LYS  HD3', -0.416, (344.32, 245.119, 362.187)), (' M  35  ILE  HB ', ' M  61  TYR  CZ ', -0.415, (218.098, 269.812, 355.821)), (" 21308    U  O2'", ' f 133  ALA  HB1', -0.415, (226.303, 250.889, 352.319)), (' 21617    G  N1 ', ' 21620    A  OP2', -0.414, (269.012, 237.933, 354.999)), (' P  62  LYS  NZ ', ' P  66  GLU  OE1', -0.414, (239.778, 230.778, 343.569)), (' M 101  ARG  HG3', ' M 102  LYS  N  ', -0.413, (228.742, 288.19, 346.972)), (' g  89  LEU  HB3', ' g  99  ARG  HB3', -0.413, (322.943, 277.985, 399.351)), (' M  72  HIS  O  ', ' M  74  ILE HG13', -0.411, (215.07, 267.719, 371.942)), (' M  24  THR HG21', ' M 117  GLU  HG3', -0.411, (226.842, 286.422, 372.854)), (' M  21  VAL HG21', ' M 124  ILE HD12', -0.41, (219.192, 283.094, 371.298)), (" 21221    G  O2'", ' 21676    U  O2 ', -0.409, (323.088, 250.583, 345.073)), (" 21272    C  H2'", ' 21273    C  C6 ', -0.409, (250.197, 263.653, 344.534)), (' K  83  LEU  HB2', ' K  85  LEU  HG ', -0.409, (242.441, 284.989, 367.521)), (' F 176  GLU  OE1', ' F 187  SER  HB2', -0.408, (334.195, 234.279, 343.447)), (" 21673    U  H2'", " 21674    G  O4'", -0.408, (316.996, 247.026, 359.604)), (' g 251  ALA  HB2', ' g 289  LEU HD22', -0.408, (345.017, 289.729, 386.492)), (' K  47  LYS  HA ', ' K  47  LYS  HD3', -0.406, (253.391, 274.928, 352.568)), (' 21441    U  O2 ', ' 21443    C  N4 ', -0.406, (308.971, 261.1, 388.707)), (' g  68  ASP  OD1', ' g  69  VAL  N  ', -0.406, (333.114, 284.025, 391.669)), (' D  67  ARG  HD2', ' K  93  THR  O  ', -0.405, (258.678, 292.056, 372.006)), (' K  14  LEU HD21', ' K  34  GLU  HG2', -0.405, (255.42, 276.105, 368.448)), (' F 102  LEU  HA ', ' F 102  LEU HD23', -0.405, (338.443, 223.912, 360.122)), (' Q  21  ALA  HB2', ' Q  72  VAL HG13', -0.404, (316.218, 249.738, 377.939)), (' D  16  ILE HD11', ' d  36  LEU HD23', -0.404, (280.998, 269.434, 363.358)), (" 21438    A  H2'", ' 21439    A  H8 ', -0.403, (308.073, 260.722, 401.646)), (' D  42  THR HG22', ' D  44  THR  H  ', -0.403, (276.05, 281.906, 384.392)), (' g 101  PHE  CD2', ' g 136  GLY  HA2', -0.403, (319.686, 282.86, 399.824)), (" 21221    G  H2'", ' 21222    G  C8 ', -0.402, (320.446, 250.645, 342.722)), (' F  80  GLY  HA2', ' F  83  ASN  OD1', -0.402, (314.867, 244.874, 349.512)), (' Z  79  ILE HG23', ' Z  83  LEU HD23', -0.402, (320.238, 209.001, 351.679)), (' D 113  LEU HD23', ' D 118  ALA  HB2', -0.402, (280.084, 302.449, 344.136)), (" 21644    C  H4'", ' Q 140  ARG  HB2', -0.401, (307.825, 258.713, 343.023)), (' Z  49  LEU  HA ', ' Z  49  LEU HD12', -0.401, (317.102, 205.735, 353.753)), (' f 107  LYS  HD3', ' f 117  LEU HD21', -0.4, (211.382, 252.549, 356.704))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
