# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 103 ', 'THR', 0.010225539837086534, (-40.371, 2.93654, 102.892)), ('A', ' 115 ', 'ASP', 0.01963555505835036, (-33.511799999999994, -1.5265200000000005, 116.34725)), ('B', ' 153 ', 'ASP', 0.018685570221003547, (-14.847730000000007, -49.498910000000016, 139.18873))]
data['omega'] = [('A', ' 161 ', 'PRO', None, (-41.26638999999999, -30.496460000000006, 124.86422)), ('A', ' 163 ', 'PRO', None, (-38.43366, -25.04029, 125.77323)), ('B', ' 143 ', 'PRO', None, (-9.76394, -24.789, 124.60053000000002)), ('H', ' 151 ', 'PRO', None, (-101.21034, -31.26097, 82.90531)), ('H', ' 153 ', 'PRO', None, (-96.17153, -34.71593, 83.78942)), ('L', '   8 ', 'PRO', None, (-68.24799000000003, -25.30162, 71.08163)), ('L', ' 141 ', 'PRO', None, (-76.81099000000003, -39.82555, 62.021950000000004))]
data['rota'] = [('A', '  51 ', 'VAL', 0.12156040422276852, (-45.83877999999999, -5.42086, 108.2723)), ('A', '  89 ', 'GLU', 0.10955805871840682, (-38.22610999999999, -27.106340000000007, 108.78827000000001)), ('A', '  98 ', 'ARG', 0.0, (-38.93835999999999, -3.07136, 115.05098000000001)), ('B', '  74 ', 'ILE', 0.11155783181867286, (-13.908140000000003, -3.4418200000000008, 113.84483)), ('B', ' 146 ', 'VAL', 0.1481308609670125, (-13.44827, -32.45804, 125.18374)), ('H', ' 103 ', 'ASP', 0.12825271917271852, (-68.60865, -22.81762000000001, 92.63705)), ('L', ' 155 ', 'GLN', 0.05217822666597374, (-98.08247, -30.22829000000001, 54.223009999999995))]
data['cbeta'] = []
data['probe'] = [(' B  38  ARG  NH2', ' B  80  GLY  O  ', -0.728, (-18.692, -9.046, 122.513)), (' A 133  PRO  HB3', ' A 159  TYR  HB3', -0.669, (-38.9, -31.779, 131.962)), (' H  11  LEU HD22', ' H 151  PRO  HG3', -0.662, (-100.341, -29.083, 85.208)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.651, (-68.331, -31.898, 83.376)), (' H 123  PRO  HB3', ' H 149  TYR  HB3', -0.644, (-103.165, -36.467, 77.748)), (' L 185  ASP  OD1', ' L 188  LYS  NZ ', -0.627, (-110.128, -30.234, 54.571)), (' A  83  MET  HB3', ' A  86  LEU HD21', -0.608, (-46.674, -21.703, 110.696)), (' A  54  ASN  ND2', ' E 346  ARG  O  ', -0.606, (-50.029, 1.614, 103.605)), (' H 172  ALA  HB2', ' H 182  LEU HD23', -0.592, (-95.596, -36.151, 75.968)), (' L  61  ARG HH11', ' L  79  GLN  HG3', -0.584, (-63.388, -41.58, 81.336)), (' H 130  PRO  HG3', ' H 142  LEU HD23', -0.558, (-98.704, -54.282, 66.641)), (' B  18  ALA  HB3', ' B  74  ILE HG23', -0.553, (-12.992, -6.778, 113.063)), (' A  34  MET  HB3', ' A  79  LEU HD22', -0.552, (-43.89, -6.403, 113.801)), (' A  98  ARG  NH1', ' A 115  ASP  OD2', -0.549, (-35.141, 1.699, 117.588)), (' A  72  ARG  O  ', ' E 466  ARG  NH2', -0.548, (-54.154, -4.885, 111.92)), (' A 195  VAL HG21', ' B 137  LEU HD13', -0.546, (-23.875, -29.063, 137.811)), (' A  53  TRP  HZ3', ' E 356  LYS  HD2', -0.545, (-51.044, 6.97, 109.861)), (' E 350  VAL HG22', ' E 422  ASN  HB3', -0.534, (-62.562, -5.637, 103.885)), (' H  29  VAL HG13', ' H  34  MET  HG3', -0.529, (-78.694, -23.151, 103.335)), (' A  58  ILE HG22', ' E 346  ARG  HE ', -0.515, (-44.854, -4.037, 101.845)), (' A 214  HIS  ND1', ' A 217  SER  OG ', -0.513, (-43.729, -29.869, 131.02)), (' L  48  ILE HG12', ' L  54  LEU  HA ', -0.511, (-60.428, -29.879, 87.968)), (' A  67  ARG HH12', ' A  87  LYS  HG2', -0.507, (-44.134, -25.542, 106.538)), (' H 172  ALA  HA ', ' H 182  LEU  HB3', -0.507, (-94.91, -36.615, 73.939)), (' H 103  ASP  N  ', ' H 103  ASP  OD1', -0.503, (-67.814, -21.661, 93.771)), (' A   1  GLN  O  ', ' A  26  GLY  HA3', -0.497, (-41.414, 1.743, 125.796)), (' A  47  TRP  CG ', ' B  97  VAL  HB ', -0.489, (-36.693, -10.185, 106.098)), (' A 177  VAL HG22', ' A 196  VAL HG22', -0.488, (-26.925, -21.205, 141.346)), (' H  68  THR  HB ', ' H  81  GLN  HB2', -0.483, (-89.798, -15.264, 99.179)), (' A 138  LEU HD21', ' A 155  LEU  HB2', -0.482, (-29.369, -33.941, 139.017)), (' A  11  LEU  HB2', ' A 161  PRO  HG3', -0.478, (-43.164, -28.712, 122.103)), (' L 197  THR HG22', ' L 204  PRO  HB3', -0.477, (-86.211, -37.819, 50.644)), (' B   4  LEU HD11', ' B  89  VAL HG22', -0.474, (-28.38, -8.305, 102.194)), (' A 173  LEU HD21', ' A 196  VAL HG11', -0.473, (-27.54, -20.771, 144.909)), (' L  32  TYR  HB3', ' L  91  LEU  HB2', -0.473, (-64.453, -17.145, 89.258)), (' A  87  LYS  HG3', ' A  89  GLU  HG2', -0.468, (-41.143, -26.795, 106.668)), (' H  12  ILE HG21', ' H  85  LEU HD13', -0.465, (-96.216, -20.954, 90.302)), (' A 103  THR  OG1', ' A 104  PHE  N  ', -0.462, (-40.628, 1.236, 104.047)), (' A 149  THR  HA ', ' A 199  PRO  HA ', -0.456, (-18.457, -22.698, 149.634)), (' E 412  PRO  HG3', ' E 429  PHE  HB3', -0.454, (-72.25, 6.069, 105.517)), (' L  29  ILE HG21', ' L  90  GLN  HG3', -0.453, (-66.122, -14.338, 85.103)), (' H 214  LYS  NZ ', ' H 216  GLU  OE2', -0.451, (-106.626, -58.426, 71.865)), (' B 151  LYS  HD3', ' B 156  PRO  HA ', -0.448, (-14.215, -47.196, 132.091)), (' L 166  GLN  HG3', ' L 173  TYR  CZ ', -0.446, (-78.044, -38.949, 69.506)), (' B  60  ARG  NH1', ' B  74  ILE HD11', -0.445, (-13.976, -3.307, 118.922)), (' A  29  PHE  O  ', ' A  72  ARG  NH2', -0.443, (-46.64, -0.012, 114.761)), (' E 366  SER  HA ', ' E 369  TYR  CZ ', -0.441, (-59.552, 21.774, 98.711)), (' B  53  ARG  HD3', ' B  61  PHE  O  ', -0.437, (-18.707, 2.398, 114.637)), (' A  91  THR HG23', ' A 124  THR  HA ', -0.435, (-39.64, -26.83, 116.972)), (' A  52  SER  O  ', ' A  72  ARG  NH1', -0.428, (-46.825, -1.455, 111.006)), (' H 127  PRO  HD3', ' H 213  LYS  HE2', -0.425, (-107.105, -47.2, 71.496)), (' A 102  GLY  O  ', ' A 104  PHE  N  ', -0.421, (-40.027, 2.163, 105.072)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.416, (-54.571, 0.221, 97.692)), (' H 150  PHE  HA ', ' H 151  PRO  HA ', -0.416, (-100.325, -30.565, 80.76)), (' E 501  ASN  HB3', ' E 505  TYR  HB2', -0.415, (-58.965, -8.35, 87.111)), (' L  23  CYS  HB2', ' L  35  TRP  CH2', -0.414, (-65.852, -23.196, 78.764)), (' A   3  GLN  HA ', ' A 116  TYR  CE2', -0.412, (-38.073, -4.739, 124.203)), (' L 108  ARG  HB2', ' L 108  ARG  HE ', -0.41, (-72.316, -46.183, 65.217)), (' A 185  GLN  HA ', ' B 162  GLU  HG2', -0.403, (-29.121, -38.436, 125.331)), (' A  51  VAL HG12', ' A  72  ARG  HD2', -0.401, (-47.73, -3.853, 110.773)), (' A  47  TRP  CD2', ' B  97  VAL  HB ', -0.4, (-37.642, -9.511, 105.389))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
