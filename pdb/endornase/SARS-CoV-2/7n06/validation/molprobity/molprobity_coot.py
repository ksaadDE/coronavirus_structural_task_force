# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('D', ' 201 ', 'LEU', 0.03409074607734336, (116.04618, 112.91839, 145.72477)), ('E', ' 201 ', 'LEU', 0.03364162873784039, (106.59818000000003, 92.39639000000005, 145.71477)), ('F', ' 201 ', 'LEU', 0.03309149867980697, (93.53117999999996, 110.83739, 145.7137700000001))]
data['omega'] = []
data['rota'] = [('A', '  37 ', 'ASP', 0.023311447493765156, (130.45018, 100.46839000000003, 100.48177000000005)), ('A', ' 115 ', 'THR', 0.005882570440142637, (96.51817999999994, 67.18339000000002, 111.06877)), ('A', ' 150 ', 'LYS', 0.0356526222402734, (98.93318, 57.68239000000002, 86.77777)), ('A', ' 189 ', 'GLN', 0.05358776494522171, (85.86518, 66.12839, 88.37277000000002)), ('A', ' 233 ', 'PHE', 0.1564863787110405, (77.93518, 94.47639, 70.28377000000003)), ('A', ' 265 ', 'GLU', 0.06723262106571219, (91.32217999999995, 106.67639, 83.15477000000006)), ('A', ' 266 ', 'LEU', 0.08320700852273802, (90.83317999999994, 103.27939, 84.83177000000006)), ('A', ' 314 ', 'VAL', 0.007471898895938937, (62.904180000000046, 86.71439000000005, 78.03877000000003)), ('A', ' 336 ', 'ASP', 0.1278939016806371, (62.12518000000004, 92.45439000000002, 71.47377000000006)), ('B', '  37 ', 'ASP', 0.023238273446626146, (97.12117999999994, 129.55539000000005, 100.48477)), ('B', ' 115 ', 'THR', 0.005796317307741789, (142.91518, 116.81339, 111.06577000000006)), ('B', ' 150 ', 'LYS', 0.03596084728361917, (149.93118, 123.65139, 86.77177000000002)), ('B', ' 189 ', 'GLN', 0.053187659595990984, (149.15018, 108.11139000000001, 88.36977)), ('B', ' 233 ', 'PHE', 0.15523711257783324, (128.56218, 87.06739000000003, 70.28777)), ('B', ' 265 ', 'GLU', 0.0682700609491469, (111.30517999999998, 92.56339000000001, 83.16077000000003)), ('B', ' 266 ', 'LEU', 0.08363566460375187, (114.49218, 93.83839, 84.83677000000006)), ('B', ' 314 ', 'VAL', 0.0074762017095535704, (142.80218, 77.93239, 78.04077000000001)), ('B', ' 336 ', 'ASP', 0.1255699902776954, (138.21918, 74.38739, 71.47777000000005)), ('C', '  37 ', 'ASP', 0.023085590991320477, (88.59117999999994, 86.14639, 100.48677000000006)), ('C', ' 115 ', 'THR', 0.006069274598730173, (76.73317999999995, 132.17739, 111.06677000000002)), ('C', ' 150 ', 'LYS', 0.036567717505039454, (67.30118, 134.83438999999993, 86.77377)), ('C', ' 189 ', 'GLN', 0.05328557545728094, (81.15018, 141.92639, 88.37077000000005)), ('C', ' 233 ', 'PHE', 0.1557343751214985, (109.66718000000002, 134.61639, 70.28577000000001)), ('C', ' 265 ', 'GLU', 0.06749742340910353, (113.53518, 116.92438999999999, 83.15977)), ('C', ' 266 ', 'LEU', 0.0833778921058431, (110.83818000000004, 119.04639, 84.83577000000001)), ('C', ' 314 ', 'VAL', 0.007440706953490852, (110.46018, 151.51638999999997, 78.03877000000003)), ('C', ' 336 ', 'ASP', 0.12619202177781477, (115.82118000000001, 149.31939, 71.47577000000005)), ('D', ' 115 ', 'THR', 0.19196726290393284, (144.54918, 102.92739, 112.59177000000005)), ('D', ' 224 ', 'GLU', 0.03153442176325883, (125.71318000000008, 127.57139000000001, 164.16177)), ('D', ' 251 ', 'LEU', 0.28336006156810717, (122.87618000000009, 121.24839, 146.22177000000008)), ('D', ' 265 ', 'GLU', 0.26514933625837567, (108.3431800000001, 119.00939000000002, 140.61977)), ('E', ' 115 ', 'THR', 0.19176145565083275, (83.67217999999994, 72.70139, 112.60077000000005)), ('E', ' 224 ', 'GLU', 0.0316091459801054, (114.46418000000003, 76.70139000000005, 164.15077000000005)), ('E', ' 251 ', 'LEU', 0.2822241114031165, (110.39718000000003, 82.31539000000005, 146.21177)), ('E', ' 265 ', 'GLU', 0.2648666632217289, (115.72118000000003, 96.02039, 140.60377)), ('F', ' 115 ', 'THR', 0.190342750708675, (87.94517999999994, 140.54439, 112.60177000000006)), ('F', ' 224 ', 'GLU', 0.031674399470196096, (76.00217999999994, 111.87139000000005, 164.1467700000001)), ('F', ' 251 ', 'LEU', 0.28253586218276244, (82.90117999999998, 112.58839000000005, 146.2087700000001)), ('F', ' 265 ', 'GLU', 0.26587402001311655, (92.10817999999995, 101.12539000000005, 140.60077000000013))]
data['cbeta'] = []
data['probe'] = [(' G 400    A  N7 ', ' G 501  HOH  O  ', -0.711, (77.089, 106.068, 88.454)), (' I 400    A  N7 ', ' I 501  HOH  O  ', -0.699, (120.206, 129.583, 88.404)), (' H 400    A  N7 ', ' H 501  HOH  O  ', -0.699, (118.871, 80.464, 88.487)), (' A   4  GLU  OE1', ' A 401  HOH  O  ', -0.698, (119.196, 87.676, 111.065)), (' B   4  GLU  OE1', ' B 401  HOH  O  ', -0.697, (113.865, 126.365, 111.096)), (' D  92  ASP  OD1', ' D 401  HOH  O  ', -0.685, (117.745, 101.602, 128.377)), (' F  92  ASP  OD1', ' F 401  HOH  O  ', -0.681, (102.455, 117.924, 128.445)), (' C   4  GLU  OE1', ' C 401  HOH  O  ', -0.68, (82.821, 102.164, 111.162)), (' E  92  ASP  OD1', ' E 401  HOH  O  ', -0.667, (95.97, 96.524, 128.368)), (' C 403  HOH  O  ', ' G 400    A  N6 ', -0.658, (77.434, 106.161, 91.575)), (' A 401  HOH  O  ', ' D   4  GLU  OE1', -0.65, (117.814, 87.379, 111.937)), (' C 401  HOH  O  ', ' E   4  GLU  OE1', -0.64, (83.545, 103.684, 111.859)), (' B 404  HOH  O  ', ' I 400    A  N6 ', -0.634, (120.087, 129.192, 91.572)), (' B 401  HOH  O  ', ' F   4  GLU  OE1', -0.632, (115.127, 125.446, 111.747)), (' A 403  HOH  O  ', ' H 400    A  N6 ', -0.621, (118.565, 80.778, 91.661)), (' E   0  GLU  OE2', ' E   2  SER  OG ', -0.606, (79.497, 102.356, 114.049)), (' F   0  GLU  OE2', ' F   2  SER  OG ', -0.604, (115.785, 129.271, 114.016)), (' C  40  ASP  OD1', ' C 402  HOH  O  ', -0.603, (92.235, 93.779, 105.611)), (' B  40  ASP  OD1', ' B 402  HOH  O  ', -0.598, (101.878, 122.672, 105.591)), (' A  40  ASP  OD1', ' A 402  HOH  O  ', -0.595, (122.457, 99.78, 105.763)), (' E 267  GLU  HB3', ' E 280  PHE  HB3', -0.574, (116.474, 92.218, 134.253)), (' D 267  GLU  HB3', ' D 280  PHE  HB3', -0.572, (111.199, 122.079, 134.257)), (' F 267  GLU  HB3', ' F 280  PHE  HB3', -0.571, (88.478, 102.233, 134.23)), (' D   0  GLU  OE2', ' D   2  SER  OG ', -0.57, (120.794, 84.404, 114.108)), (' F 268  ASP  OD1', ' F 402  HOH  O  ', -0.564, (88.195, 109.675, 132.604)), (' E 128  VAL  HB ', ' E 131  GLN  HG3', -0.557, (78.396, 82.088, 128.817)), (' F 128  VAL  HB ', ' F 131  GLN  HG3', -0.548, (98.179, 140.393, 128.583)), (' D 128  VAL  HB ', ' D 131  GLN  HG3', -0.547, (139.011, 93.709, 128.733)), (' B  81  ALA  O  ', ' B 403  HOH  O  ', -0.545, (131.457, 117.389, 101.604)), (' A 403  HOH  O  ', ' B 291  CYS  SG ', -0.537, (118.128, 82.006, 91.002)), (' E 213  ASP  OD2', ' E 226  TYR  OH ', -0.53, (104.821, 79.96, 162.49)), (' D 268  ASP  OD1', ' D 402  HOH  O  ', -0.518, (117.838, 117.984, 132.459)), (' D 213  ASP  OD2', ' D 226  TYR  OH ', -0.512, (127.452, 117.556, 161.853)), (' C  27  ILE HD12', ' E  27  ILE HD12', -0.506, (90.978, 103.923, 112.011)), (' B 267  GLU  HB3', ' B 280  PHE  HB3', -0.504, (114.592, 90.779, 88.794)), (' A 267  GLU  HB3', ' A 280  PHE  HB3', -0.504, (87.686, 104.551, 88.782)), (' C 267  GLU  HB3', ' C 280  PHE  HB3', -0.502, (113.344, 121.2, 88.843)), (' B  27  ILE HD12', ' F  27  ILE HD12', -0.5, (111.323, 118.378, 111.965)), (' A  27  ILE HD12', ' D  27  ILE HD12', -0.497, (113.763, 93.647, 111.942)), (' B 404  HOH  O  ', ' C 291  CYS  SG ', -0.496, (119.941, 127.847, 90.885)), (' A 291  CYS  SG ', ' C 403  HOH  O  ', -0.489, (78.77, 106.133, 91.024)), (' C 201  LEU  HA ', ' C 201  LEU HD23', -0.485, (103.58, 119.612, 77.397)), (' E 219  MET  HG3', ' E 238  TYR  CE1', -0.48, (116.268, 82.562, 156.899)), (' E 268  ASP  OD1', ' E 402  HOH  O  ', -0.478, (110.239, 88.337, 132.583)), (' D 149  VAL HG11', ' D 152  LEU HD12', -0.476, (149.064, 100.806, 133.514)), (' E 149  VAL HG11', ' E 152  LEU HD12', -0.476, (79.614, 69.974, 133.46)), (' F 149  VAL HG11', ' F 152  LEU HD12', -0.475, (87.634, 145.387, 133.455)), (' D 219  MET  HG3', ' D 238  TYR  CE1', -0.474, (119.774, 126.187, 156.97)), (' A 401  HOH  O  ', ' D   2  SER  HB2', -0.473, (119.475, 86.761, 112.018)), (' F 219  MET  HG3', ' F 238  TYR  CE1', -0.47, (80.292, 107.438, 157.058)), (' A   2  SER  HB2', ' A 401  HOH  O  ', -0.467, (118.7, 86.459, 111.622)), (' B 291  CYS  SG ', ' H 501  HOH  O  ', -0.466, (118.557, 82.037, 89.316)), (' D 314  VAL HG11', ' D 317  LYS  HB3', -0.465, (135.629, 137.532, 141.603)), (' F 314  VAL HG11', ' F 317  LYS  HB3', -0.463, (62.337, 115.444, 141.448)), (' E 314  VAL HG11', ' E 317  LYS  HB3', -0.463, (118.569, 63.174, 141.829)), (' C 401  HOH  O  ', ' E   2  SER  HB2', -0.461, (82.316, 102.396, 112.042)), (' B 401  HOH  O  ', ' F   2  SER  HB2', -0.458, (114.41, 126.912, 111.965)), (' B   2  SER  HB2', ' B 401  HOH  O  ', -0.457, (114.996, 126.495, 111.536)), (' C 219  MET  HG3', ' C 238  TYR  CE2', -0.453, (110.336, 129.776, 66.894)), (' B  24  PRO  HB2', ' F 105  MET  SD ', -0.452, (103.545, 126.333, 108.545)), (' E 235  HIS  O  ', ' E 248  GLY  HA3', -0.452, (118.693, 81.226, 147.796)), (' B 201  LEU  HA ', ' B 201  LEU HD23', -0.452, (118.693, 99.847, 77.479)), (' B 219  MET  HG3', ' B 238  TYR  CE2', -0.452, (124.427, 88.871, 66.74)), (' D 235  HIS  O  ', ' D 248  GLY  HA3', -0.45, (119.5, 129.106, 147.881)), (' A 219  MET  HG3', ' A 238  TYR  CE2', -0.45, (81.419, 97.562, 66.561)), (' A  24  PRO  HB2', ' D 105  MET  SD ', -0.447, (124.672, 96.677, 108.387)), (' C  24  PRO  HB2', ' E 105  MET  SD ', -0.444, (87.795, 93.023, 108.276)), (' F 335  LYS  HB2', ' F 335  LYS  HE3', -0.443, (63.216, 105.588, 147.213)), (' A 291  CYS  SG ', ' G 501  HOH  O  ', -0.443, (78.6, 105.62, 89.314)), (' A 201  LEU  HA ', ' A 201  LEU HD23', -0.442, (93.437, 96.767, 77.316)), (' F 235  HIS  O  ', ' F 248  GLY  HA3', -0.442, (77.604, 105.938, 147.813)), (' C   2  SER  HB2', ' C 401  HOH  O  ', -0.441, (82.322, 103.234, 111.563)), (' C 336  ASP  N  ', ' C 336  ASP  OD1', -0.434, (116.948, 148.79, 72.773)), (' A 336  ASP  N  ', ' A 336  ASP  OD1', -0.432, (61.525, 93.803, 72.733)), (' F 213  ASP  OD2', ' F 226  TYR  OH ', -0.431, (83.771, 118.713, 162.595)), (' B 336  ASP  N  ', ' B 336  ASP  OD1', -0.429, (137.37, 73.631, 72.857)), (' E 341  THR HG21', " K 401    U  H1'", -0.428, (121.944, 75.336, 143.006)), (' F 341  THR HG21', " L 401    U  H1'", -0.427, (71.279, 106.449, 143.094)), (' E 266  LEU HD22', ' E 279  TYR  HB3', -0.427, (113.866, 89.765, 138.447)), (' D 266  LEU HD22', ' D 279  TYR  HB3', -0.425, (114.73, 120.603, 138.493)), (' D 335  LYS  HB2', ' D 335  LYS  HE3', -0.425, (126.436, 141.489, 147.404)), (' F 266  LEU HD22', ' F 279  TYR  HB3', -0.423, (87.74, 105.698, 138.83)), (' D 201  LEU  HA ', ' D 201  LEU HD23', -0.422, (116.931, 114.071, 146.628)), (' C 150  LYS  HB3', ' C 150  LYS  HE2', -0.422, (65.461, 135.718, 88.658)), (' D 331  MET  HG2', ' D 345  LYS  HE3', -0.417, (129.305, 131.434, 136.469)), (' E 314  VAL  O  ', ' E 334  CYS  HB2', -0.415, (121.213, 65.467, 146.311)), (' F 314  VAL  O  ', ' F 334  CYS  HB2', -0.415, (62.684, 111.751, 145.964)), (' E   9  ASN  HB3', ' E  16  PHE  HA ', -0.415, (80.821, 100.067, 124.502)), (' D 314  VAL  O  ', ' D 334  CYS  HB2', -0.413, (132.259, 139.161, 145.979)), (' A 200  ASN HD21', ' A 203  GLU  HB2', -0.412, (100.445, 94.23, 77.966)), (' E  62  ARG  HA ', ' E  85  VAL  HB ', -0.412, (87.53, 91.111, 125.552)), (' F 331  MET  HG2', ' F 345  LYS  HE3', -0.412, (70.564, 113.074, 136.76)), (' A 105  MET  HE2', ' D  26  SER  OG ', -0.41, (105.992, 87.639, 114.273)), (' F  62  ARG  HA ', ' F  85  VAL  HB ', -0.41, (102.222, 127.932, 125.87)), (' E 331  MET  HG2', ' E 345  LYS  HE3', -0.41, (116.172, 71.384, 136.751)), (' D  62  ARG  HA ', ' D  85  VAL  HB ', -0.409, (126.482, 96.866, 125.86)), (' C 200  ASN HD21', ' C 203  GLU  HB2', -0.408, (98.159, 115.408, 78.354)), (' F   9  ASN  HB3', ' F  16  PHE  HA ', -0.407, (112.666, 129.422, 124.67)), (' F 250  HIS  NE2', " L 402    A  O5'", -0.407, (76.17, 107.333, 143.527)), (' F 167  THR HG21', ' F 198  SER  HB2', -0.406, (93.583, 122.179, 141.742)), (' B 105  MET  HE2', ' F  26  SER  OG ', -0.405, (120.052, 114.812, 114.163)), (' A 150  LYS  HB3', ' A 150  LYS  HE2', -0.404, (99.275, 55.596, 88.792)), (' D   9  ASN  HB3', ' D  16  PHE  HA ', -0.404, (122.35, 86.72, 124.659)), (' E 190  LEU  HA ', ' E 190  LEU HD23', -0.403, (92.858, 67.612, 134.778)), (' E 167  THR HG21', ' E 198  SER  HB2', -0.403, (97.072, 86.512, 141.791)), (' C 105  MET  SD ', ' E  24  PRO  HB2', -0.403, (85.683, 113.422, 114.91)), (' F 201  LEU HD21', ' F 255  LEU  HB2', -0.402, (89.2, 109.368, 145.88)), (' E 201  LEU HD21', ' E 255  LEU  HB2', -0.4, (110.284, 89.063, 145.892)), (' A 105  MET  SD ', ' D  24  PRO  HB2', -0.4, (108.611, 84.162, 115.178)), (' B 105  MET  SD ', ' F  24  PRO  HB2', -0.4, (121.779, 118.835, 114.535))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
