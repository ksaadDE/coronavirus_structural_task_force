# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('C', ' 225 ', 'MET', 0.1443536474391285, (7.526000000000001, -24.86000000000001, -12.921000000000003)), ('C', ' 536 ', 'LYS', 0.0, (3.639, 6.583, -26.619)), ('C', ' 600 ', 'LYS', 0.27856446628574283, (-0.753, -15.358000000000002, 3.268))]
data['cbeta'] = []
data['probe'] = [(' B  48  LEU HD12', ' C 576  LYS  HE2', -0.708, (-4.743, -9.749, -39.481)), (' C 527  LEU HD13', ' C 558  ARG  HG2', -0.651, (8.073, -1.613, -12.61)), (' C 358  LEU  O  ', ' C 366  ARG  NH1', -0.628, (-8.338, -23.964, -58.171)), (' C 110  SER  HA ', ' C 113  ARG  HD2', -0.608, (5.33, -40.367, 23.914)), (' B  74  ILE HG12', ' C 598  ALA  HB2', -0.602, (1.898, -10.851, -3.247)), (' C 409  GLN  OE1', ' C 440  GLN  NE2', -0.556, (10.368, -11.569, -44.526)), (' C 543  LYS  HD3', ' C 574  LEU HD21', -0.543, (-8.112, -2.179, -30.838)), (' C 314  ILE HG23', ' C 335  ARG  HG3', -0.54, (-16.637, -11.962, -46.043)), (' B  72  THR HG21', ' C 594  GLN  OE1', -0.531, (4.848, -11.717, -8.136)), (' C 164  GLU  OE2', ' C 192  ARG  NH1', -0.522, (2.254, -37.813, -3.126)), (' C 349  LYS  NZ ', ' C 377  TYR  OH ', -0.509, (-7.069, -26.788, -42.399)), (' C 556  VAL HG13', ' C 561  MET  HE1', -0.507, (3.323, -9.819, -11.496)), (' C 370  LEU HD21', ' C 392  MET  HE2', -0.505, (-3.182, -26.215, -50.595)), (' C 551  MET  HG2', ' C 567  MET  HE2', -0.504, (-0.075, 0.03, -19.749)), (' C 186  TYR  HE1', ' C 188  LYS  HE3', -0.501, (8.473, -31.496, 2.863)), (' C 244  TYR  OH ', ' C 343  GLY  O  ', -0.492, (-10.201, -14.69, -34.088)), (' C 299  LEU  O  ', ' C 303  GLN  HG2', -0.492, (-15.979, -2.59, -57.233)), (' B  72  THR HG23', ' B  75  ALA  H  ', -0.491, (6.916, -11.466, -6.239)), (' C 356  ILE  HA ', ' C 366  ARG  HG2', -0.472, (-6.972, -24.193, -53.47)), (' C 320  GLU  O  ', ' C 324  GLU  N  ', -0.471, (-21.663, -16.59, -56.707)), (' C 156  TYR  CZ ', ' C 178  LYS  HG2', -0.466, (-3.832, -32.186, 10.784)), (' C 268  ILE  O  ', ' C 701  HOH  O  ', -0.464, (-7.668, -9.114, -57.572)), (' C 298  TYR  HB2', ' C 320  GLU  HG3', -0.461, (-17.566, -11.032, -56.113)), (' C 573  ASN  ND2', ' C 711  HOH  O  ', -0.436, (-11.841, -5.533, -22.058)), (' C 336  ALA  HB2', ' C 351  ASP  HB2', -0.433, (-12.235, -17.535, -46.696)), (' C 249  PRO  HB2', ' C 342  ILE  HB ', -0.426, (-14.127, -8.557, -36.733)), (' C 237  LYS  HA ', ' C 237  LYS  HD3', -0.426, (-6.855, -20.933, -24.57)), (' C 118  LYS  HB3', ' C 118  LYS  HE3', -0.423, (7.971, -41.457, 12.709)), (' C 514  VAL HG11', ' C 546  PHE  HD1', -0.42, (4.873, -4.567, -28.58)), (' C 425  ASP  OD2', ' C 441  LYS  NZ ', -0.419, (21.159, -16.642, -50.385)), (' C 535  SER  O  ', ' C 539  GLU  HG2', -0.416, (0.517, 6.832, -26.006)), (' C 314  ILE  H  ', ' C 314  ILE HD12', -0.406, (-16.458, -7.131, -44.915)), (' C 483  ALA  HB2', ' C 498  MET  HB2', -0.405, (18.03, -0.612, -34.21)), (' C 240  ALA  O  ', ' C 244  TYR  HB2', -0.402, (-11.98, -17.42, -27.554)), (' C 349  LYS  HD3', ' C 376  MET  HE1', -0.4, (-8.588, -23.12, -41.162))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
