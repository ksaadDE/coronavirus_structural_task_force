# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  53 ', 'VAL', 0.0, (107.90004, 125.04553000000001, 141.82793))]
data['omega'] = [('A', ' 145 ', 'PRO', None, (119.99308999999997, 104.35564, 166.69058)), ('B', ' 112 ', 'PRO', None, (125.57407, 129.09070000000003, 141.84119)), ('B', ' 157 ', 'PRO', None, (143.18992, 127.20905, 168.5085)), ('B', ' 159 ', 'PRO', None, (141.68365, 123.13754000000002, 163.60468)), ('C', ' 147 ', 'PRO', None, (110.41279, 108.54371, 91.86122)), ('D', ' 162 ', 'PRO', None, (141.87235, 110.27751999999998, 82.62449)), ('D', ' 164 ', 'PRO', None, (136.68698, 111.67292999999997, 79.20544))]
data['rota'] = [('A', '  29 ', 'VAL', 0.26798106581207065, (103.92145999999994, 132.40479, 148.67821000000004)), ('B', '  11 ', 'VAL', 0.21640244135857495, (139.05655, 132.79717, 164.80064)), ('B', ' 148 ', 'LEU', 0.28082363300221974, (145.50929, 102.21394, 172.1296)), ('E', ' 430 ', 'THR', 0.17045282489355726, (126.231, 162.11361, 105.79052)), ('E', ' 433 ', 'VAL', 0.23546026564233083, (132.12638999999987, 155.0633, 110.38209)), ('E', ' 478 ', 'THR', 0.2235801843729365, (105.24205999999998, 151.18211, 142.43944)), ('E', ' 524 ', 'VAL', 0.292786624493552, (138.99933, 172.84446, 106.51754)), ('C', '  29 ', 'ILE', 0.23410236271790733, (119.91187999999998, 133.51653, 113.17682000000002)), ('C', '  97 ', 'LEU', 0.25831007480590534, (135.71280999999988, 131.8506, 116.92995000000005)), ('D', '  91 ', 'THR', 0.166019673742995, (138.82287999999997, 118.73063999999997, 94.23208)), ('D', ' 208 ', 'THR', 0.2892303124633684, (127.92136, 88.12891000000002, 66.76786))]
data['cbeta'] = []
data['probe'] = [(' A  19  THR HG22', ' A  76  THR HG22', -0.81, (103.99, 114.515, 148.129)), (' A  52  ASP  O  ', ' A  54  SER  N  ', -0.809, (109.012, 124.004, 139.114)), (' D  91  THR  HA ', ' D 124  VAL  O  ', -0.793, (139.298, 119.353, 92.387)), (' D  52  SER  HB3', ' D 106  VAL HG23', -0.764, (135.068, 141.431, 102.603)), (' D 136  VAL HG21', ' D 213  VAL HG21', -0.678, (137.915, 98.226, 75.723)), (' A  14  PRO  HA ', ' A  80  LEU  HB2', -0.668, (112.437, 104.594, 150.054)), (' C  85  GLU  HA ', ' C 109  VAL  O  ', -0.654, (112.841, 120.539, 91.126)), (' A 171  GLN HE21', ' A 177  ALA  HB2', -0.648, (130.931, 106.176, 165.514)), (' D 216  LYS  HG3', ' D 217  PRO  HD3', -0.645, (140.672, 110.629, 75.663)), (' A 134  ALA  HB3', ' A 184  LEU  O  ', -0.642, (142.306, 113.744, 187.391)), (' D 136  VAL HG22', ' D 157  VAL HG12', -0.632, (135.969, 99.187, 77.704)), (' D 101  GLU  HB2', ' D 104  ASP  HB2', -0.63, (128.489, 145.268, 101.908)), (' D 155  CYS  SG ', ' D 195  SER  OG ', -0.625, (130.113, 98.66, 75.374)), (' A  65  SER  HG ', ' A  76  THR  HG1', -0.614, (106.755, 115.316, 144.141)), (' C 119  PRO  HB3', ' C 145  PHE  HB3', -0.614, (113.119, 101.685, 88.886)), (' D 214  ASN  OD1', ' D 221  LYS  HD2', -0.612, (138.452, 103.148, 69.094)), (' C   6  GLN  NE2', ' C  90  CYS  SG ', -0.603, (118.9, 126.468, 103.316)), (' D 132  LYS  HE2', ' D 190  LEU HD21', -0.6, (144.325, 104.07, 86.951)), (' D  52  SER  OG ', ' D  57  SER  OG ', -0.597, (136.739, 143.684, 104.103)), (' A  53  VAL HG11', ' A  68  LYS  HB2', -0.597, (103.755, 125.425, 143.736)), (' A   6  GLN  NE2', ' A 105  THR  OG1', -0.594, (111.481, 121.657, 155.732)), (' E 452  LEU HD23', ' E 494  SER  HB3', -0.587, (130.155, 148.027, 132.341)), (' C 121  VAL HG11', ' C 201  VAL HG11', -0.584, (115.841, 96.782, 91.937)), (' C 203  HIS  O  ', ' C 204  GLU  HG3', -0.583, (110.121, 102.53, 95.647)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.579, (134.164, 148.954, 111.502)), (' F   1  NAG  H61', ' F   2  NAG  N2 ', -0.573, (152.529, 153.476, 112.179)), (' E 358  ILE  HB ', ' E 395  VAL HG13', -0.567, (137.22, 167.729, 111.987)), (' A 124  PRO  HD3', ' A 136  LEU  HG ', -0.563, (140.161, 107.546, 184.169)), (' B  76  ILE HG23', ' B  78  THR HG23', -0.562, (138.503, 141.473, 143.758)), (' A  52  ASP  C  ', ' A  54  SER  H  ', -0.562, (109.116, 125.392, 139.524)), (' E 418  ILE  HA ', ' E 422  ASN HD22', -0.56, (122.641, 151.084, 122.512)), (' B 154  ASP  HA ', ' B 185  LEU  HB3', -0.559, (142.093, 122.973, 175.931)), (' C 150  VAL HG22', ' C 203  HIS  HB2', -0.542, (114.378, 102.507, 93.705)), (' C  25  SER  OG ', ' C  26  SER  N  ', -0.535, (122.341, 129.357, 117.493)), (' C  13  ALA  H  ', ' C  16  GLN  NE2', -0.535, (101.408, 118.672, 95.003)), (' B  40  ALA  HB3', ' B  43  GLN  HB2', -0.531, (122.623, 127.659, 163.344)), (' C 142  ILE HD12', ' C 201  VAL HG21', -0.515, (116.684, 99.501, 91.837)), (' A  20  ILE HD12', ' A  75  LEU HD23', -0.514, (110.98, 117.644, 150.71)), (' C 168  THR HG22', ' D 184  VAL  HB ', -0.513, (128.764, 105.29, 89.34)), (' D  98  LYS  HG2', ' D 117  VAL HG22', -0.512, (128.783, 140.23, 92.067)), (' D  31  ASP  HA ', ' D  53  TRP  HD1', -0.507, (135.429, 149.206, 96.975)), (' A 201  HIS  O  ', ' A 204  SER  OG ', -0.504, (120.01, 99.975, 174.038)), (' C 125  PRO  HA ', ' C 138  LEU HD23', -0.503, (129.081, 89.5, 89.633)), (' B 205  ILE HG12', ' B 220  LYS  HG2', -0.496, (157.138, 105.869, 168.983)), (' A  23  THR  HA ', ' A  72  THR HG22', -0.49, (102.032, 126.392, 153.682)), (' A  56  ARG  NH2', ' A  62  ASP  OD2', -0.488, (110.756, 113.721, 135.565)), (' A  63  ARG  NH1', ' A  84  ASP  OD2', -0.485, (115.372, 109.045, 146.816)), (' B  47  TRP  HZ2', ' B  50  TRP  HD1', -0.484, (119.038, 139.864, 150.004)), (' D 166  THR  OG1', ' D 214  ASN  HB2', -0.484, (135.676, 106.39, 71.848)), (' C 131  LEU HD12', ' C 188  PRO  HB3', -0.483, (137.661, 85.612, 89.594)), (' C 126  PRO  HG3', ' C 137  THR  H  ', -0.482, (133.385, 90.397, 88.952)), (' D 139  LEU HD11', ' D 156  LEU  HB2', -0.474, (130.427, 95.782, 81.886)), (' B 210  HIS  CD2', ' B 212  PRO  HD2', -0.473, (146.844, 123.958, 165.177)), (' C 154  TRP  CD1', ' C 184  LEU HD13', -0.458, (128.189, 95.348, 96.98)), (' B 155  TYR  OH ', ' B 158  GLU  OE2', -0.457, (140.279, 119.793, 168.053)), (' B 213  SER  O  ', ' B 213  SER  OG ', -0.457, (151.722, 125.835, 168.655)), (' B  38  ARG HH21', ' B  64  PHE  HZ ', -0.457, (122.193, 135.834, 161.828)), (' A 185  THR HG23', ' A 188  GLN  H  ', -0.456, (141.45, 113.938, 193.317)), (' D 134  PRO  HB3', ' D 160  TYR  HB3', -0.454, (139.593, 103.261, 81.115)), (' C 126  PRO  HD3', ' C 138  LEU HD23', -0.452, (130.117, 89.043, 89.788)), (' C 154  TRP  CD1', ' C 165  VAL HG12', -0.451, (127.76, 96.801, 98.005)), (' C 154  TRP  HD1', ' C 165  VAL HG12', -0.448, (127.263, 96.741, 97.89)), (' D  61  ALA  HB3', ' D  64  VAL HG22', -0.447, (138.522, 127.513, 104.648)), (' D 156  LEU HD12', ' D 193  LEU  O  ', -0.444, (131.645, 99.206, 82.996)), (' A 166  THR  HB ', ' B 179  VAL HG23', -0.444, (132.229, 116.758, 173.182)), (' D 105  SER  OG ', ' D 106  VAL  N  ', -0.439, (134.11, 142.343, 106.448)), (' C  63  ARG  NH1', ' C  84  ASP  OD2', -0.438, (107.387, 128.207, 90.539)), (' A 171  GLN  NE2', ' A 177  ALA  HB2', -0.437, (131.431, 106.041, 165.508)), (' B  51  ILE HD12', ' B  70  LEU  HB3', -0.437, (127.973, 144.286, 150.001)), (' C 141  LEU HD11', ' D 181  PHE  CE1', -0.434, (122.988, 100.081, 82.491)), (' A 123  PRO  HB3', ' A 210  VAL HG21', -0.432, (141.168, 103.336, 183.922)), (' D  51  ILE HG21', ' D  72  ARG  HD2', -0.429, (139.985, 141.644, 97.704)), (' B  35  HIS  CD2', ' B  99  GLY  HA3', -0.428, (121.248, 136.319, 144.845)), (' B 136  PRO  HD3', ' B 148  LEU  HB3', -0.427, (147.667, 100.898, 173.84)), (' E 352  ALA  HB1', ' E 466  ARG HH21', -0.424, (130.052, 160.683, 128.456)), (' A 117  PRO  HB3', ' A 143  PHE  HB3', -0.423, (126.099, 102.398, 170.191)), (' D 225  LYS  HB2', ' D 225  LYS  HE2', -0.421, (135.223, 87.969, 70.522)), (' C  51  TYR  CD2', ' D 113  ASN  HA ', -0.421, (119.282, 141.815, 99.238)), (' A  51  PHE  O  ', ' A  52  ASP  HB2', -0.42, (112.065, 126.053, 138.888)), (' B 133  PRO  HD3', ' B 219  LYS  HE2', -0.42, (152.301, 110.765, 176.346)), (' A 194  SER  HB2', ' A 211  ALA  HB2', -0.419, (138.251, 99.344, 189.902)), (' E 353  TRP  HZ3', ' E 355  ARG  HE ', -0.419, (129.71, 163.747, 119.846)), (' C  44  THR HG22', ' C  45  ALA  H  ', -0.417, (124.124, 128.588, 86.286)), (' D  52  SER  O  ', ' D  52  SER  OG ', -0.416, (137.104, 144.969, 102.733)), (' E 365  TYR  HD1', ' E 368  LEU HD12', -0.415, (140.094, 160.835, 106.783)), (' D  51  ILE HG13', ' D  58  ILE HG12', -0.415, (141.242, 140.41, 102.287)), (' C  15  GLY  HA2', ' C  79  GLY  HA2', -0.413, (100.145, 125.351, 92.086)), (' D  22  CYS  HB3', ' D  79  LEU  HG ', -0.413, (139.083, 137.081, 91.296)), (' C  91  GLN HE21', ' C 101  TYR  HD2', -0.413, (127.344, 134.804, 103.833)), (' C 153  ALA  HB3', ' C 200  GLN HE21', -0.412, (120.155, 96.695, 100.519)), (' C 123  LEU HD12', ' C 199  CYS  SG ', -0.411, (122.196, 91.929, 92.479)), (' E 393  THR HG21', ' E 518  LEU  HB2', -0.411, (128.99, 174.613, 108.836)), (' C  44  THR HG22', ' C  45  ALA  N  ', -0.408, (124.279, 128.365, 86.734)), (' B 100  SER  OG ', ' B 101  ARG  N  ', -0.408, (118.377, 138.001, 139.426)), (' A  18  ILE HD12', ' A 107  LEU HD11', -0.407, (111.289, 111.186, 153.344)), (' F   1  NAG  H61', ' F   2  NAG  HN2', -0.407, (153.496, 153.568, 112.068)), (' C 138  LEU HD11', ' C 197  TYR  HD2', -0.405, (129.402, 88.331, 94.722)), (' A  29  VAL HG12', ' A  68  LYS  HE2', -0.404, (102.828, 129.756, 146.593)), (' D  31  ASP  HA ', ' D  53  TRP  CD1', -0.404, (135.499, 149.643, 97.542)), (' A  12  GLY  HA3', ' A  18  ILE HD11', -0.404, (109.403, 108.453, 154.117)), (' B 103  ASP  OD2', ' B 105  ASN  HB2', -0.404, (114.143, 139.682, 134.053)), (' C  40  GLN  O  ', ' C  86  ALA  HB1', -0.403, (118.463, 124.286, 91.135)), (' D  18  LEU  HA ', ' D  18  LEU HD23', -0.402, (148.632, 126.341, 90.792)), (' B 110  PHE  O  ', ' B 113  TRP  NE1', -0.402, (122.289, 127.818, 146.132)), (' B 134  LEU HD11', ' B 151  LEU  HB2', -0.402, (143.743, 110.405, 174.838)), (' C 121  VAL  HA ', ' C 141  LEU  O  ', -0.401, (118.18, 96.171, 87.684)), (' E 351  TYR  HB3', ' E 453  TYR  HA ', -0.401, (126.71, 152.243, 127.945))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
