# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  46 ', 'PRO', 0.028470110493482775, (86.19, -3.205, 20.466))]
data['omega'] = []
data['rota'] = [('B', ' 191 ', 'THR', 0.13173484620845635, (63.14, -61.27099999999999, -20.609)), ('B', ' 269 ', 'GLN', 0.1511969729092898, (69.317, -42.011, 17.787))]
data['cbeta'] = [('A', ' 268 ', 'TYR', ' ', 0.287692310362289, (64.691, -32.81399999999999, 14.034)), ('B', ' 268 ', 'TYR', ' ', 0.42729930329696675, (69.53799999999998, -42.69199999999999, 13.174))]
data['probe'] = [(' A  41  VAL  HA ', ' A  44  ILE HD12', -0.777, (52.019, -67.113, 12.582)), (' B 215  GLN  HG2', ' B 634  HOH  O  ', -0.769, (77.751, -59.446, -3.605)), (' B  63  THR  O  ', ' B  67  GLU  HG3', -0.744, (85.627, -10.605, -2.903)), (' A  87  LEU  HG ', ' A  91  LYS  HE2', -0.709, (46.593, -52.651, 8.866)), (' A  48  ASN  ND2', ' A 501  HOH  O  ', -0.708, (44.091, -77.816, 12.582)), (' B 194  GLN HE22', ' B 315  LYS  HE2', -0.692, (75.294, -60.391, -22.407)), (' A  47  HIS  HB3', ' A 408  SO4  O1 ', -0.634, (43.084, -74.255, 12.664)), (' B  40  ASP  OD1', ' B  42  THR HG22', -0.624, (79.457, -12.543, 17.431)), (' B  61  ASP  OD1', ' B  62  ASP  N  ', -0.599, (80.709, -5.985, -2.23)), (' B  13  ASN  HB2', ' B  56  TYR  OH ', -0.58, (90.53, -17.637, 6.966)), (' B 194  GLN  NE2', ' B 315  LYS  HE2', -0.551, (74.632, -60.45, -22.324)), (' B  45  LYS  O  ', ' B  47  HIS  N  ', -0.531, (86.832, -4.025, 22.111)), (' A 238  GLU  OE2', ' A 309  SER  OG ', -0.529, (48.231, -21.085, -17.782)), (' B 240  PRO  HA ', ' B 307  GLU  O  ', -0.52, (92.389, -45.729, -9.358)), (' A   4  THR  HA ', ' A  21  VAL  O  ', -0.505, (48.732, -79.065, 3.467)), (' A   4  THR HG23', ' A  20  VAL HG13', -0.502, (47.554, -79.246, 0.415)), (' A 196  GLN  HG3', ' A 641  HOH  O  ', -0.497, (64.372, -15.473, -19.718)), (' B 314  ILE HG22', ' B 315  LYS  HG3', -0.496, (79.467, -61.222, -20.514)), (' A 140  ARG HH22', ' A 410  GOL  H32', -0.486, (38.703, -33.997, -3.177)), (' B   4  THR  HA ', ' B  21  VAL  O  ', -0.484, (89.057, 3.335, 16.537)), (' B  33  PRO  HA ', ' B  42  THR  HB ', -0.481, (79.174, -10.291, 15.041)), (' B 147  PHE  CE2', ' B 151  ILE HD11', -0.48, (87.231, -33.588, 5.79)), (' B  61  ASP  O  ', ' B  65  ARG  HG3', -0.477, (79.357, -9.29, -1.254)), (' B  63  THR  HA ', ' B  66  VAL HG12', -0.465, (83.944, -9.522, -4.849)), (' A  98  VAL HG11', ' A 285  ILE HG23', -0.464, (40.737, -30.628, 12.912)), (' B  65  ARG  HG3', ' B  65  ARG HH11', -0.454, (78.236, -9.612, -0.657)), (' B 274  LYS  HE2', ' B 286  ASP  OD2', -0.449, (85.366, -48.569, 19.01)), (' A 264  TYR  OH ', ' A 271  GLY  HA3', -0.449, (59.07, -31.062, 16.028)), (' B  27  TYR  HA ', ' B  30  GLN  NE2', -0.446, (82.637, -3.617, 15.549)), (' B  65  ARG  HG3', ' B  65  ARG  NH1', -0.445, (78.174, -9.61, -1.074)), (' A  42  THR  HB ', ' A  43  LYS  HD3', -0.445, (57.505, -65.964, 11.315)), (' B 301  THR HG23', ' B 302  ASP  OD1', -0.442, (79.502, -47.117, 6.092)), (' B 138  ARG  HG2', ' B 138  ARG HH11', -0.441, (97.509, -25.306, 9.066)), (' B  56  TYR  CD2', ' B  84  MET  HE3', -0.441, (86.031, -16.988, 9.25)), (' A  95  TYR  CD1', ' A 144  ALA  HB3', -0.437, (42.838, -41.854, 9.164)), (' B  10  THR HG21', ' B  13  ASN  HA ', -0.435, (91.493, -13.864, 6.278)), (' A 263  GLU  O  ', ' A 273  TYR  HA ', -0.432, (53.355, -28.255, 13.169)), (' A 215  GLN  HG2', ' A 630  HOH  O  ', -0.431, (58.965, -12.335, 0.262)), (' B  63  THR  O  ', ' B  66  VAL HG12', -0.423, (84.025, -10.133, -3.681)), (' A  13  ASN  HB2', ' A  56  TYR  OH ', -0.42, (45.935, -57.469, 0.034)), (' B  27  TYR  CE2', ' B  46  PRO  HA ', -0.419, (86.346, -4.669, 19.569)), (' A  26  THR  OG1', ' A  29  GLN  HG3', -0.416, (58.443, -72.922, 9.262)), (' A 119  THR HG21', ' A 304  PHE  CZ ', -0.409, (50.145, -29.46, 1.692)), (' A   4  THR  N  ', ' A  23  MET  HG2', -0.409, (48.259, -80.587, 6.279)), (' A 267  ASN  OD1', ' A 269  GLN  N  ', -0.409, (64.209, -32.162, 17.977)), (' B 264  TYR  OH ', ' B 271  GLY  HA3', -0.408, (74.681, -44.732, 15.53)), (' B  39  ALA  O  ', ' B  41  VAL HG23', -0.404, (84.903, -13.932, 17.737)), (' B 255  HIS  NE2', ' B 279  LYS  O  ', -0.404, (97.608, -55.723, 5.81)), (' A   6  LYS  HB2', ' A   6  LYS  HE3', -0.403, (41.412, -75.542, -0.459))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
