# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('E', ' 146 ', 'PRO', None, (219.439, 141.185, 279.0610000000001))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A  46  SER  HA ', ' A 279  TYR  O  ', -0.651, (198.853, 235.879, 176.592)), (' C  46  SER  HA ', ' C 279  TYR  O  ', -0.644, (231.761, 183.507, 176.672)), (' B 105  ILE  HB ', ' B 239  GLN  HB2', -0.636, (170.195, 160.294, 207.961)), (' C 901  GLN HE21', ' C 905  ARG HH21', -0.59, (207.801, 185.652, 131.813)), (' C 821  LEU HD11', ' C 939  SER  HB2', -0.576, (227.668, 184.375, 148.397)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.568, (163.448, 252.854, 199.825)), (' A  51  THR  O  ', ' A 274  THR  HA ', -0.566, (188.003, 227.761, 186.62)), (' C 201  PHE  HB3', ' C 229  LEU  HB2', -0.566, (235.607, 187.61, 205.943)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.559, (171.197, 216.995, 148.786)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.557, (156.202, 167.75, 211.836)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.554, (256.444, 197.6, 194.109)), (' C  26  PRO  HB3', ' C  65  PHE  HE1', -0.551, (253.022, 205.297, 199.216)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.55, (171.212, 143.263, 200.966)), (' A 278  LYS  HE3', ' A 287  ASP  HB2', -0.546, (191.208, 237.364, 176.335)), (' A 699  LEU HD11', ' B 869  MET  HB3', -0.542, (174.551, 208.8, 150.629)), (' C 418  ILE  HA ', ' C 422  ASN HD22', -0.538, (185.768, 214.834, 221.717)), (' A 143  VAL  HA ', ' A 154  GLU  HA ', -0.533, (182.642, 264.112, 208.131)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.532, (181.46, 170.57, 177.3)), (' E 152  MET  O  ', ' E 161  ARG  NH1', -0.531, (208.221, 139.442, 286.793)), (' E 261  CYS  HB2', ' E 488  VAL  HB ', -0.529, (201.002, 149.731, 298.753)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.526, (234.274, 199.216, 177.924)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.526, (261.611, 205.549, 203.189)), (' C 659  SER  HB3', ' C 698  SER  HB3', -0.525, (229.471, 217.477, 149.705)), (' B 125  ASN HD22', ' B 171  VAL HG13', -0.524, (154.523, 171.647, 208.426)), (' B 821  LEU HD11', ' B 939  SER  HB3', -0.52, (172.438, 184.281, 147.849)), (' C 393  THR  HB ', ' C 522  ALA  HA ', -0.52, (204.17, 231.759, 205.379)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.52, (199.808, 231.728, 147.683)), (' B 156  GLU  OE2', ' B 158  ARG  NH1', -0.517, (157.52, 150.914, 214.758)), (' C 105  ILE  O  ', ' C 238  PHE  HA ', -0.517, (244.276, 196.652, 208.183)), (' C 762  GLN  OE1', ' C 765  ARG  NH1', -0.517, (189.83, 188.759, 174.766)), (' C 127  VAL HG21', ' C1302  NAG  H62', -0.514, (247.432, 180.03, 214.035)), (' C 323  THR  OG1', ' C 324  GLU  OE1', -0.513, (228.195, 227.454, 192.304)), (' E  20  THR HG23', ' E  23  GLU  H  ', -0.505, (218.815, 194.04, 260.358)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.504, (183.298, 230.462, 177.635)), (' B1048  HIS  HA ', ' B1066  THR HG22', -0.504, (190.241, 190.817, 135.106)), (' C 599  THR  HB ', ' C 608  VAL HG12', -0.503, (234.213, 205.51, 168.561)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.5, (186.894, 167.936, 168.15)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.498, (178.081, 229.789, 177.989)), (' A 916  LEU HD22', ' A 923  ILE HD13', -0.498, (199.547, 219.511, 123.622)), (' A 142  GLY  HA3', ' A 156  GLU  HB3', -0.497, (179.058, 261.441, 210.28)), (' A  34  ARG  NH2', ' A 221  SER  OG ', -0.497, (186.66, 246.461, 185.221)), (' E 260  GLY  HA3', ' E 612  PRO  HD3', -0.497, (196.841, 146.91, 300.944)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.494, (167.397, 251.385, 199.202)), (' B 128  ILE HD13', ' B 170  TYR  HD2', -0.493, (161.242, 173.743, 205.808)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.492, (167.593, 152.009, 192.102)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.491, (236.151, 204.431, 178.624)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.488, (184.318, 166.415, 177.571)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.488, (178.685, 227.026, 168.159)), (' A  46  SER  CA ', ' A 279  TYR  O  ', -0.487, (199.717, 235.524, 176.877)), (' E  33  ASN  O  ', ' E  37  GLU  HB2', -0.486, (222.971, 173.341, 257.908)), (' E 201  ASP  OD2', ' E 219  ARG  NH1', -0.486, (211.606, 178.724, 284.182)), (' C 193  VAL HG23', ' C 223  LEU HD22', -0.486, (240.837, 190.953, 193.835)), (' A 127  VAL HG21', ' A1302  NAG  H62', -0.485, (191.458, 253.651, 212.792)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.484, (171.344, 147.187, 199.924)), (' E 252  TYR  HB3', ' E 255  TYR  HD2', -0.483, (201.058, 136.068, 296.203)), (' A  93  ALA  HB3', ' A 266  TYR  HB2', -0.482, (178.469, 246.406, 191.639)), (' E 455  MET  HG2', ' E 480  MET  HE2', -0.481, (204.856, 161.226, 293.289)), (' A 985  ASP  N  ', ' A 985  ASP  OD1', -0.48, (209.843, 210.978, 206.112)), (' B 192  PHE  HA ', ' B 204  TYR  O  ', -0.48, (166.892, 168.84, 194.928)), (' B1074  ASN  OD1', ' C 895  GLN  NE2', -0.479, (202.136, 173.24, 123.849)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.477, (168.957, 247.54, 191.392)), (' A 540  ASN  OD1', ' A 549  THR  OG1', -0.475, (171.165, 206.205, 191.344)), (' A1040  VAL HG21', ' B1035  GLY  HA3', -0.475, (190.944, 203.096, 135.279)), (' A  36  VAL HG13', ' A 222  ALA  HA ', -0.474, (189.31, 240.634, 185.736)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.473, (213.422, 193.275, 104.613)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.473, (196.036, 232.887, 190.439)), (' E 117  ASN  O  ', ' E 121  ASN  ND2', -0.472, (230.173, 162.753, 281.803)), (' A1143  PRO  HA ', ' A1146  ASP  HB2', -0.471, (193.859, 205.452, 90.262)), (' B 669  GLY  HA2', ' B 697  MET  HE3', -0.471, (202.826, 171.842, 156.309)), (' B 175  PHE  O  ', ' B 207  HIS  NE2', -0.47, (157.772, 167.638, 195.102)), (' C 125  ASN HD22', ' C 171  VAL HG13', -0.47, (245.659, 177.587, 210.832)), (' A 103  GLY  HA3', ' A 119  ILE  O  ', -0.469, (185.333, 249.868, 206.319)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.468, (258.157, 203.586, 201.964)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.467, (213.191, 196.057, 135.753)), (' B  94  SER  HB2', ' B 190  ARG  HB2', -0.467, (162.945, 161.172, 194.069)), (' C  36  VAL HG23', ' C 222  ALA  HA ', -0.466, (239.899, 189.098, 186.908)), (' B  48  LEU  HB3', ' B 276  LEU HD11', -0.465, (177.365, 179.591, 176.968)), (' C 377  PHE  HE2', ' C 384  PRO  HB3', -0.465, (209.615, 215.408, 215.525)), (' A1074  ASN  OD1', ' B 895  GLN  NE2', -0.462, (176.219, 211.502, 123.331)), (' C 331  ASN  HB3', ' C 580  GLN HE21', -0.462, (217.761, 238.767, 205.186)), (' A1035  GLY  HA3', ' C1040  VAL HG21', -0.461, (208.063, 205.998, 135.431)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.46, (225.064, 184.031, 214.138)), (' C  93  ALA  HB3', ' C 266  TYR  HB2', -0.46, (249.274, 195.989, 193.405)), (' E  91  LEU HD11', ' E 212  VAL HG22', -0.46, (204.465, 183.744, 267.735)), (' B  38  TYR  HB2', ' B 225  PRO  HD3', -0.459, (167.705, 176.992, 190.269)), (' B 398  ASP  OD2', ' B 423  TYR  OH ', -0.458, (224.341, 181.37, 231.754)), (' B 411  ALA  HB3', ' B 414  GLN  HG3', -0.456, (213.043, 180.27, 237.43)), (' E  29  LEU  O  ', ' E  33  ASN  ND2', -0.455, (220.01, 180.077, 259.1)), (' C 434  ILE  O  ', ' C 510  VAL  HA ', -0.454, (200.159, 217.238, 222.88)), (' E 297  MET  HB3', ' E 302  TRP  HB2', -0.454, (204.883, 137.673, 257.352)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.452, (194.689, 246.417, 206.729)), (' E 183  TYR  OH ', ' E 509  ASP  OD1', -0.452, (219.626, 165.374, 284.769)), (' B 126  VAL HG23', ' B 174  PRO  HA ', -0.451, (155.859, 168.282, 202.043)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.451, (197.016, 213.118, 135.314)), (' B  40  ASP  N  ', ' B  40  ASP  OD1', -0.45, (172.235, 180.608, 189.954)), (' A 994  ASP  OD2', ' C 995  ARG  NH2', -0.449, (206.373, 200.263, 194.352)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.446, (173.589, 252.128, 191.986)), (' C  46  SER  CA ', ' C 279  TYR  O  ', -0.446, (230.994, 182.912, 176.976)), (' B 193  VAL  HB ', ' B 204  TYR  HB2', -0.445, (170.127, 170.667, 194.204)), (' C  27  ALA  HB3', ' C  64  TRP  HB3', -0.445, (254.788, 203.255, 193.915)), (' A  89  GLY  HA3', ' A 270  LEU HD12', -0.444, (183.208, 234.687, 197.109)), (' C 276  LEU  HB3', ' C 289  VAL  HB ', -0.443, (232.501, 195.771, 179.203)), (' A  48  LEU  HB3', ' A 276  LEU HD11', -0.441, (192.953, 228.965, 178.123)), (' C  39  PRO  HG2', ' C  51  THR HG21', -0.441, (230.189, 190.974, 188.015)), (' C 127  VAL HG22', ' C 171  VAL HG22', -0.44, (245.024, 179.628, 212.348)), (' A 229  LEU  HG ', ' A 231  ILE HG23', -0.44, (192.112, 239.002, 207.96)), (' B 566  GLY  N  ', ' B 575  ALA  O  ', -0.439, (223.836, 176.825, 187.459)), (' A 192  PHE  HA ', ' A 204  TYR  O  ', -0.438, (187.8, 244.022, 195.201)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.437, (217.837, 189.561, 136.573)), (' B 176  LEU HD22', ' B 190  ARG  HG2', -0.437, (159.971, 163.548, 196.046)), (' E 524  GLN  HB3', ' E 574  VAL HG11', -0.437, (194.32, 166.235, 270.184)), (' A  52  GLN  HB2', ' A 274  THR HG22', -0.437, (187.778, 224.508, 187.423)), (' B 518  LEU HD23', ' B 520  ALA  H  ', -0.436, (225.268, 190.967, 214.84)), (' A1107  ARG HH22', ' B 907  ASN HD22', -0.436, (190.895, 199.248, 120.506)), (' B 189  LEU  HB3', ' B 208  THR  HB ', -0.436, (161.69, 162.916, 187.227)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.436, (199.876, 220.46, 136.046)), (' A  97  LYS  HG2', ' A 186  PHE  HD1', -0.435, (178.726, 259.168, 191.509)), (' C 720  ILE HG13', ' C 923  ILE HG23', -0.434, (219.745, 190.859, 128.397)), (' B 422  ASN  ND2', ' B 454  ARG  O  ', -0.434, (225.602, 182.599, 246.072)), (' B 357  ARG  NH1', ' C 167  THR  O  ', -0.434, (232.837, 184.149, 217.791)), (' E 505  HIS  HE2', ' E 515  TYR  HH ', -0.434, (212.756, 156.945, 277.639)), (' E  39  LEU  HA ', ' E  39  LEU HD23', -0.433, (230.283, 168.842, 260.494)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.433, (201.992, 212.519, 222.604)), (' B 444  LYS  HG3', ' B 447  GLY  H  ', -0.432, (233.976, 162.806, 249.729)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.432, (188.331, 191.586, 104.447)), (' A 598  ILE HG23', ' A 664  ILE HG21', -0.431, (178.37, 221.737, 163.367)), (' C 360  ASN  H  ', ' C 523  THR  HB ', -0.431, (205.653, 235.07, 210.083)), (' B 164  ASN  OD1', ' B 165  ASN  N  ', -0.431, (168.897, 169.387, 222.841)), (' B 790  LYS  HB3', ' B 790  LYS  HE2', -0.43, (168.666, 206.111, 137.644)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.43, (180.004, 183.95, 142.912)), (' B 598  ILE HG23', ' B 664  ILE HG21', -0.429, (191.665, 170.71, 163.202)), (' B 521  PRO  HB3', ' C 200  TYR  HE1', -0.428, (226.669, 186.902, 207.601)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.427, (181.398, 226.681, 161.414)), (' A 717  ASN  ND2', ' A1071  GLN  OE1', -0.426, (187.533, 223.476, 124.027)), (' B 756  TYR  OH ', ' B 994  ASP  OD1', -0.426, (195.18, 205.261, 192.338)), (' A 195  LYS  O  ', ' A 201  PHE  HA ', -0.426, (188.901, 235.961, 202.873)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.425, (229.322, 178.548, 231.329)), (' E 535  HIS  NE2', ' E 538  PRO  O  ', -0.424, (185.978, 153.855, 265.285)), (' B  97  LYS  HG2', ' B 186  PHE  HD1', -0.424, (158.126, 152.811, 191.581)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.423, (182.51, 189.818, 136.35)), (' B 724  THR HG23', ' B 934  ILE HD12', -0.422, (181.913, 185.989, 143.349)), (' B 396  TYR  HB2', ' B 514  SER  HB3', -0.422, (224.639, 182.245, 226.013)), (' E 307  ILE HG23', ' E 369  PHE  HD1', -0.421, (205.258, 144.9, 258.988)), (' E 505  HIS  NE2', ' E 515  TYR  OH ', -0.42, (212.318, 157.124, 277.55)), (' A1086  LYS  HB2', ' A1086  LYS  HE2', -0.419, (186.11, 193.684, 102.769)), (' A 189  LEU  HB3', ' A 208  THR  HB ', -0.419, (186.111, 251.357, 187.201)), (' C 934  ILE  HA ', ' C 934  ILE HD13', -0.418, (224.198, 190.545, 143.172)), (' E 169  ARG HH22', ' E 271  TRP  HA ', -0.418, (211.792, 149.617, 289.436)), (' C 885  GLY  HA2', ' C 901  GLN  NE2', -0.418, (207.461, 183.99, 131.162)), (' E 177  ARG  HB2', ' E 498  CYS  HB2', -0.417, (220.684, 156.59, 296.472)), (' C 756  TYR  OH ', ' C 994  ASP  OD1', -0.416, (197.22, 193.836, 192.488)), (' B  93  ALA  HB3', ' B 266  TYR  HB2', -0.416, (169.694, 158.967, 191.711)), (' E 555  PHE  HA ', ' E 558  LEU  HB2', -0.416, (202.389, 166.78, 258.357)), (' C  97  LYS  HG2', ' C 186  PHE  HD1', -0.415, (260.666, 189.157, 194.484)), (' E 610  TRP  HE3', ' E 614  ALA  HB3', -0.415, (203.891, 146.623, 307.031)), (' B 330  PRO  HA ', ' B 579  PRO  HB2', -0.415, (226.154, 170.641, 200.399)), (' C 191  GLU  O  ', ' C 205  SER  HA ', -0.414, (243.529, 187.39, 195.058)), (' C  52  GLN  OE1', ' C 274  THR  OG1', -0.414, (226.94, 200.18, 186.799)), (' C1086  LYS  HB2', ' C1086  LYS  HE2', -0.411, (202.545, 215.104, 102.692)), (' B 907  ASN HD21', ' B 913  GLN  HG3', -0.41, (189.689, 196.912, 119.331)), (' C 229  LEU  HB3', ' C 231  ILE HG23', -0.409, (235.101, 187.123, 208.224)), (' E 292  ASP  HA ', ' E 366  MET  HE2', -0.409, (199.433, 139.323, 266.889)), (' A 913  GLN  H  ', ' A 913  GLN  HG2', -0.409, (201.546, 210.917, 118.466)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.408, (197.249, 222.808, 143.278)), (' B 996  LEU  HA ', ' B 996  LEU HD23', -0.408, (189.136, 198.25, 191.214)), (' E 237  TYR  OH ', ' E 485  VAL  O  ', -0.408, (198.913, 152.551, 290.561)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.408, (199.536, 214.372, 103.987)), (' B 139  PRO  HB3', ' B 159  VAL  HA ', -0.408, (165.108, 157.684, 212.682)), (' C 724  THR HG23', ' C 934  ILE HD12', -0.406, (221.363, 191.061, 143.685)), (' A 144  TYR  N  ', ' A 153  MET  O  ', -0.406, (181.486, 266.594, 207.797)), (' E 597  ASP  HA ', ' E 600  LYS  HE3', -0.406, (178.833, 146.598, 287.145)), (' B1040  VAL HG21', ' C1035  GLY  HA3', -0.405, (201.657, 190.071, 135.576)), (' C 736  VAL HG22', ' C 858  LEU HD23', -0.405, (206.446, 184.056, 176.483)), (' B1029  MET  HB2', ' B1029  MET  HE2', -0.405, (186.252, 200.989, 146.051)), (' C 866  THR  H  ', ' C 869  MET  HE3', -0.404, (206.151, 173.798, 155.425)), (' E 505  HIS  CD2', ' E 515  TYR  HH ', -0.404, (212.725, 157.648, 278.639)), (' C 123  ALA  HB3', ' C1302  NAG  H82', -0.404, (255.489, 177.926, 211.104)), (' B  27  ALA  HB3', ' B  64  TRP  HB3', -0.404, (173.117, 150.381, 191.942)), (' A 226  LEU  HG ', ' A 227  VAL HG23', -0.403, (194.306, 245.517, 199.794)), (' C 105  ILE  HB ', ' C 239  GLN  HB3', -0.403, (247.571, 196.78, 209.824)), (' B 203  ILE  HB ', ' B 227  VAL HG12', -0.402, (165.701, 173.151, 200.398)), (' B 903  ALA  HB2', ' B 916  LEU HD12', -0.401, (183.791, 194.548, 121.625)), (' B 914  ASN  ND2', ' B1111  GLU  OE2', -0.401, (189.086, 187.86, 114.92)), (' C  94  SER  HB3', ' C 190  ARG  HB2', -0.4, (250.834, 188.994, 196.242))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
