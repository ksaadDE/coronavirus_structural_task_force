# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 334 ', 'ASN', 0.0, (137.893, 124.22300000000003, 73.06)), ('A', ' 539 ', 'VAL', 0.0017055526035228761, (116.76400000000002, 126.38700000000001, 50.553))]
data['omega'] = [('A', ' 324 ', 'GLU', None, (111.26500000000004, 120.05800000000005, 57.61099999999999)), ('A', ' 396 ', 'TYR', None, (133.852, 136.02899999999994, 86.536)), ('A', ' 529 ', 'LYS', None, (125.41500000000003, 122.111, 71.942)), ('A', ' 531 ', 'THR', None, (124.53000000000004, 118.87600000000003, 66.065)), ('H', ' 147 ', 'PRO', None, (94.56600000000002, 90.103, 87.039)), ('H', ' 149 ', 'PRO', None, (94.668, 91.877, 93.28)), ('L', '   8 ', 'PRO', None, (127.133, 91.752, 105.286)), ('L', '  95 ', 'PRO', None, (127.332, 106.93000000000002, 83.178)), ('L', ' 141 ', 'PRO', None, (117.101, 78.01200000000001, 108.90599999999999))]
data['rota'] = []
data['cbeta'] = [('A', ' 437 ', 'ASN', ' ', 0.28341703359996073, (131.672, 117.242, 101.526))]
data['probe'] = [(' A 437  ASN  HB3', ' L  32  TYR  OH ', -1.099, (130.685, 116.517, 99.748)), (' A 372  ALA  O  ', ' H 100D ARG  NH2', -1.029, (128.216, 113.142, 93.027)), (' A 378  LYS  CE ', ' H  99  ARG  O  ', -0.841, (120.027, 125.425, 96.66)), (' A 370  ASN  OD1', ' H  58  TYR  OH ', -0.785, (123.571, 116.479, 83.89)), (' L   5  THR  OG1', ' L  24  ARG  O  ', -0.762, (131.384, 97.52, 97.248)), (' A 378  LYS  HE2', ' H  99  ARG  O  ', -0.744, (120.164, 124.415, 97.129)), (' A 437  ASN  CB ', ' L  32  TYR  OH ', -0.711, (131.608, 116.57, 100.607)), (' H  94  ARG  NH1', ' H 101  ASP  OD2', -0.709, (112.511, 115.553, 101.708)), (' L 124  GLN  OE1', ' L 131  SER  N  ', -0.7, (97.931, 70.037, 87.823)), (' A 462  LYS  N  ', ' A 465  GLU  OE2', -0.698, (132.095, 144.895, 101.103)), (' L  75  ILE HG21', ' L  78  LEU HD23', -0.692, (118.927, 97.313, 114.906)), (' A 437  ASN  OD1', ' L  32  TYR  OH ', -0.661, (130.998, 115.238, 100.359)), (' L  37  GLN  CB ', ' L  47  LEU HD11', -0.652, (115.485, 101.947, 106.357)), (' A 417  LYS  NZ ', ' A 454  ARG  O  ', -0.646, (134.457, 136.129, 111.142)), (' H 156  SER  N  ', ' H 197  ASN  OD1', -0.643, (85.0, 81.836, 104.863)), (' A 378  LYS  NZ ', ' H  99  ARG  O  ', -0.614, (119.026, 125.565, 97.831)), (' H 206  LYS  NZ ', ' H 208  ASP  OD2', -0.604, (82.312, 83.569, 99.395)), (' A 465  GLU  N  ', ' A 465  GLU  OE1', -0.603, (133.986, 142.978, 98.428)), (' A 344  ALA  O  ', ' A 509  ARG  NH2', -0.59, (141.786, 122.263, 95.161)), (' A 437  ASN  HB3', ' L  32  TYR  HH ', -0.589, (131.487, 116.263, 99.907)), (' H 193  THR  OG1', ' H 210  ARG  NE ', -0.578, (82.745, 70.876, 104.691)), (' L 108  ARG  NH1', ' L 109  THR  O  ', -0.569, (114.368, 77.532, 115.798)), (' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.562, (128.321, 133.331, 75.592)), (' A 439  ASN  ND2', ' A 506  GLN  OE1', -0.559, (135.885, 115.801, 107.678)), (' H 181  VAL HG21', ' L 135  LEU HD11', -0.551, (101.132, 74.939, 103.202)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.549, (115.792, 101.773, 106.854)), (' L  33  LEU HD21', ' L  88  CYS  HB2', -0.533, (124.897, 102.583, 101.163)), (' H  95  ASP  OD1', ' H  96  LEU  N  ', -0.531, (116.064, 115.18, 97.979)), (' A 518  LEU  O  ', ' A 518  LEU HD12', -0.531, (131.656, 146.391, 81.724)), (' L  38  GLN  O  ', ' L  85  VAL HG12', -0.528, (112.198, 95.992, 103.731)), (' A 360  ASN  H  ', ' A 524  VAL HG21', -0.527, (135.453, 135.084, 76.904)), (' L  61  ARG  NH2', ' L  79  GLU  OE2', -0.516, (114.006, 101.356, 117.019)), (' L  31  THR HG22', ' L  50  ASP  O  ', -0.51, (128.63, 111.821, 104.387)), (' A 437  ASN  ND2', ' L  31  THR  OG1', -0.507, (132.13, 114.758, 102.952)), (' A 372  ALA  C  ', ' H 100D ARG HH22', -0.506, (128.304, 113.868, 93.081)), (' A 349  SER  OG ', ' A 452  LEU  O  ', -0.501, (140.628, 131.618, 106.076)), (' L 186  TYR  OH ', ' L 212  GLY  O  ', -0.492, (95.677, 59.552, 87.78)), (' A 336  CYS  HB2', ' A 337  PRO  HD2', -0.49, (138.93, 128.215, 79.646)), (' A 405  ASP  N  ', ' A 405  ASP  OD1', -0.488, (129.123, 124.72, 109.464)), (' H 154  TRP  HE1', ' H 163  VAL HG13', -0.485, (95.104, 80.044, 106.134)), (' L 106  ILE HG22', ' L 107  LYS  O  ', -0.485, (114.59, 85.033, 116.752)), (' A 385  THR  CG2', ' H  55  THR HG22', -0.48, (116.607, 124.107, 81.753)), (' H   6  GLU  OE1', ' H 105  ARG  N  ', -0.479, (102.572, 105.973, 96.821)), (' L 103  ARG  NH1', ' L 105  GLU  OE2', -0.477, (114.73, 86.931, 105.805)), (' A 538  CYS  SG ', ' A 539  VAL HG13', -0.475, (117.038, 125.501, 47.573)), (' A 344  ALA  HB3', ' A 347  PHE  CE1', -0.472, (141.626, 124.798, 93.761)), (' H  17  SER  OG ', ' H  82  MET  O  ', -0.471, (103.106, 105.655, 77.085)), (' A 435  ALA  HB2', ' A 510  VAL HG23', -0.463, (130.511, 126.206, 97.9)), (' A 378  LYS  HD3', ' H  99  ARG  O  ', -0.463, (119.336, 125.411, 96.428)), (' L 118  PHE  HB2', ' L 133  VAL HG13', -0.462, (100.292, 70.3, 97.478)), (' L   8  PRO  HD2', ' L  11  LEU HD21', -0.457, (125.202, 91.825, 107.492)), (' A 378  LYS  CD ', ' H  99  ARG  O  ', -0.457, (119.682, 125.803, 96.676)), (' H 155  ASN  HB2', ' H 158  ALA  HB3', -0.454, (86.304, 79.998, 109.846)), (' A 339  GLY  HA2', ' C   1  NAG  H82', -0.454, (137.258, 121.189, 87.041)), (' A 538  CYS  SG ', ' A 539  VAL  N  ', -0.452, (117.458, 125.07, 48.917)), (' L  79  GLU  N  ', ' L  79  GLU  OE1', -0.451, (114.462, 97.675, 117.825)), (' L 201  LEU HD22', ' L 205  VAL HG21', -0.446, (113.638, 66.227, 107.573)), (' A 329  PHE  O  ', ' A 331  ASN  N  ', -0.445, (128.768, 123.997, 63.282)), (' A 393  THR HG22', ' A 517  LEU HD13', -0.443, (129.441, 140.499, 78.754)), (' H  17  SER  OG ', ' H  81  GLN  OE1', -0.442, (102.624, 106.606, 77.532)), (' A 437  ASN  CB ', ' L  32  TYR  HH ', -0.439, (131.701, 116.229, 100.775)), (' A 372  ALA  C  ', ' H 100D ARG  NH2', -0.438, (128.212, 113.668, 93.05)), (' H 102  LEU HD23', ' H 103  TRP  N  ', -0.435, (107.878, 109.888, 100.789)), (' H  20  LEU  CD2', ' H 107  THR HG21', -0.431, (101.881, 104.393, 89.133)), (' L  37  GLN  HB3', ' L  47  LEU HD11', -0.43, (114.946, 102.448, 107.133)), (' L 151  ASP  OD1', ' L 189  HIS  NE2', -0.429, (108.354, 55.16, 87.558)), (' H  18  LEU  O  ', ' H  82  MET  HE2', -0.427, (102.972, 104.929, 81.336)), (' H  62  SER  O  ', ' H  66  ARG  NH2', -0.426, (113.391, 101.145, 79.231)), (' A 501  ASN  O  ', ' A 506  GLN  NE2', -0.421, (133.342, 114.918, 110.579)), (' H   2  VAL  O  ', ' H   2  VAL HG23', -0.421, (104.472, 114.69, 105.413)), (' A 538  CYS  O  ', ' A 540  ASN  N  ', -0.419, (116.709, 124.792, 52.167)), (' A 395  VAL  O  ', ' A 395  VAL HG12', -0.418, (132.483, 133.126, 85.832)), (' A 385  THR HG23', ' H  55  THR HG22', -0.418, (117.053, 124.34, 81.773)), (' A 383  SER  OG ', ' H  55  THR  CB ', -0.417, (115.861, 124.887, 84.333)), (' A 426  PRO  O  ', ' A 429  PHE  HB2', -0.416, (124.248, 139.004, 95.285)), (' L  29  VAL  O  ', ' L  29  VAL HG22', -0.404, (130.743, 110.41, 97.608)), (' H  20  LEU  CD1', ' H  82  MET  HE1', -0.403, (103.095, 105.009, 84.032)), (' C   1  NAG  O4 ', ' C   2  NAG  O7 ', -0.403, (135.944, 112.67, 87.808)), (' L  61  ARG HH11', ' L  75  ILE HG23', -0.402, (118.322, 100.37, 115.587))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
