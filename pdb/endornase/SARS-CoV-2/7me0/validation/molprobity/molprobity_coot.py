# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  22 ', 'VAL', 0.007826652249678462, (122.96400000000001, 88.5, 112.694)), ('A', '  69 ', 'VAL', 0.22455004243928411, (126.90100000000008, 117.69699999999999, 126.15200000000002)), ('A', '  91 ', 'ASP', 0.009898816937425423, (118.123, 110.72299999999998, 121.671)), ('A', ' 148 ', 'VAL', 0.12048444274361783, (149.493, 116.704, 131.426)), ('A', ' 165 ', 'VAL', 0.02083378791817709, (122.83900000000004, 108.85900000000001, 133.604)), ('A', ' 175 ', 'GLN', 0.10138968063146891, (136.024, 114.83300000000001, 137.469)), ('A', ' 189 ', 'LEU', 0.02287804723727051, (139.631, 128.84000000000003, 130.715)), ('A', ' 200 ', 'LEU', 0.0741384048756281, (113.4190000000001, 117.38000000000001, 139.571)), ('A', ' 219 ', 'ASP', 0.18806583550630274, (110.7500000000001, 132.373, 156.93)), ('A', ' 220 ', 'GLU', 0.26870846376465973, (113.09800000000011, 130.29600000000002, 159.094)), ('A', ' 281 ', 'THR', 0.002029358733267121, (101.587, 125.06200000000005, 135.323)), ('A', ' 314 ', 'VAL', 0.17100311327887474, (118.0580000000001, 149.977, 139.599)), ('A', ' 345 ', 'LEU', 0.08178249101203003, (115.89500000000011, 134.81500000000003, 127.942)), ('B', '  34 ', 'LYS', 0.29032787595741755, (94.715, 123.6, 98.4)), ('B', '  44 ', 'GLU', 0.003395018871209343, (107.39199999999994, 114.783, 95.618)), ('B', '  75 ', 'LEU', 0.004732053281414796, (135.919, 120.43799999999999, 87.655)), ('B', ' 113 ', 'GLU', 0.051019971605932246, (133.08, 133.632, 104.344)), ('B', ' 148 ', 'VAL', 0.20528341498143224, (136.893, 138.55199999999996, 81.29700000000001)), ('B', ' 165 ', 'VAL', 0.03587804725640643, (116.73700000000002, 119.38, 79.126)), ('B', ' 189 ', 'LEU', 0.01866162907039599, (142.465, 123.922, 81.997)), ('B', ' 192 ', 'THR', 0.10609339796547074, (139.617, 118.05499999999999, 76.249)), ('B', ' 200 ', 'LEU', 0.17416042292046205, (119.47699999999999, 106.949, 73.155)), ('B', ' 218 ', 'MET', 0.003029624363295587, (128.776, 98.162, 58.344)), ('B', ' 219 ', 'ASP', 0.0037257480828399372, (131.28, 97.347, 55.611)), ('B', ' 232 ', 'PHE', 0.1452583657583557, (135.066, 99.17100000000002, 64.818)), ('B', ' 281 ', 'THR', 0.029724735875431115, (120.15, 92.85500000000003, 77.391)), ('B', ' 314 ', 'VAL', 0.046301811678646825, (149.907, 94.57, 73.147)), ('B', ' 330 ', 'MET', 0.22867419047981288, (142.058, 99.82100000000001, 77.849)), ('C', '  16 ', 'ASP', 0.014846837200765928, (79.857, 96.081, 92.243)), ('C', '  69 ', 'VAL', 0.22342241426388867, (85.815, 117.689, 86.555)), ('C', '  91 ', 'ASP', 0.009636290624373422, (94.60999999999994, 110.709, 91.085)), ('C', ' 148 ', 'VAL', 0.15968921078077905, (63.146, 116.738, 81.29600000000002)), ('C', ' 165 ', 'VAL', 0.022410644504000144, (89.91599999999994, 108.85, 79.116)), ('C', ' 175 ', 'GLN', 0.1062032882461301, (76.71299999999994, 114.81999999999998, 75.269)), ('C', ' 189 ', 'LEU', 0.015585185293585612, (73.13, 128.84, 81.961)), ('C', ' 192 ', 'THR', 0.16469813281961557, (79.499, 129.32999999999996, 76.178)), ('C', ' 200 ', 'LEU', 0.0, (99.53, 117.319, 73.111)), ('C', ' 202 ', 'GLU', 0.06672601047726505, (97.93999999999994, 112.6360000000001, 70.217)), ('C', ' 218 ', 'MET', 0.00044113772267374065, (102.264, 129.94900000000004, 58.437)), ('C', ' 219 ', 'ASP', 0.023424059069355702, (101.744, 132.471, 55.64)), ('C', ' 227 ', 'LEU', 0.10622235475334013, (93.98, 136.575, 59.931)), ('C', ' 232 ', 'PHE', 0.21636582177698574, (98.299, 134.754, 64.8)), ('C', ' 281 ', 'THR', 0.002907709397606179, (111.15, 125.06499999999998, 77.407)), ('C', ' 293 ', 'SER', 0.2816575180707341, (98.822, 129.988, 79.776)), ('C', ' 314 ', 'VAL', 0.006547821588588744, (95.017, 149.919, 73.183)), ('D', '  44 ', 'GLU', 0.0, (99.61799999999995, 101.296, 117.171)), ('D', ' 128 ', 'ASP', 0.210595820627757, (86.654, 71.677, 124.252)), ('D', ' 148 ', 'VAL', 0.10185292365700967, (93.77, 63.893, 131.4)), ('D', ' 165 ', 'VAL', 0.031005935539665123, (100.304, 90.88, 133.635)), ('D', ' 189 ', 'LEU', 0.01840381119385246, (109.16000000000005, 66.25599999999997, 130.712)), ('D', ' 192 ', 'THR', 0.26955384394810605, (112.813, 71.61600000000004, 136.467)), ('D', ' 200 ', 'LEU', 0.06058163076188863, (112.40500000000002, 95.065, 139.621)), ('D', ' 218 ', 'MET', 0.002677874228170427, (124.71400000000001, 90.96300000000004, 154.3)), ('D', ' 219 ', 'ASP', 0.00534353418939198, (126.66100000000006, 89.24700000000001, 157.069)), ('D', ' 232 ', 'PHE', 0.16172424586732767, (126.87800000000004, 85.117, 147.916)), ('D', ' 233 ', 'GLU', 0.1484650273333683, (128.419, 88.53900000000002, 148.57)), ('D', ' 260 ', 'GLU', 0.004785060457790909, (118.72, 101.55100000000004, 148.636)), ('D', ' 281 ', 'THR', 0.028713787412394144, (124.94300000000004, 101.178, 135.341)), ('D', ' 311 ', 'LEU', 0.11939273106490898, (133.23, 72.48500000000003, 145.269)), ('D', ' 314 ', 'VAL', 0.14260731488585202, (138.295, 74.522, 139.59)), ('E', '  22 ', 'VAL', 0.007654897474840896, (113.58200000000005, 129.66300000000004, 112.697)), ('E', '  38 ', 'VAL', 0.026254437398165464, (121.81, 120.38, 115.948)), ('E', '  91 ', 'ASP', 0.021747965260953996, (96.72399999999995, 114.359, 121.652)), ('E', ' 148 ', 'VAL', 0.15712307342591322, (75.85700000000001, 138.552, 131.432)), ('E', ' 165 ', 'VAL', 0.03339488892749287, (95.988, 119.37, 133.624)), ('E', ' 189 ', 'LEU', 0.021962566443140197, (70.249, 123.962, 130.701)), ('E', ' 192 ', 'THR', 0.19343294305773237, (73.06200000000001, 118.13000000000001, 136.491)), ('E', ' 202 ', 'GLU', 0.19179156721506474, (96.73099999999995, 110.48400000000002, 142.471)), ('E', ' 218 ', 'MET', 0.00059547157683598, (83.91599999999998, 98.12400000000005, 154.326)), ('E', ' 219 ', 'ASP', 0.005617792737572986, (81.419, 97.32600000000001, 157.079)), ('E', ' 220 ', 'GLU', 0.026364710791088177, (82.209, 100.39500000000002, 159.189)), ('E', ' 232 ', 'PHE', 0.28563694325835987, (77.826, 99.21800000000002, 147.951)), ('E', ' 291 ', 'VAL', 0.004664228395963734, (84.56, 96.14999999999999, 129.716)), ('E', ' 293 ', 'SER', 0.17661654189637274, (82.11699999999995, 101.13700000000001, 132.951)), ('E', ' 314 ', 'VAL', 0.13846341172035453, (62.944, 94.558, 139.511)), ('E', ' 338 ', 'VAL', 0.006301065150182694, (69.287, 96.595, 144.89600000000002)), ('F', '  22 ', 'VAL', 0.00945159699767828, (130.135, 100.94800000000002, 100.046)), ('F', '  38 ', 'VAL', 0.022315969132291148, (126.21699999999998, 112.76399999999998, 96.807)), ('F', '  44 ', 'GLU', 0.0006960747211621649, (113.142, 101.30500000000004, 95.607)), ('F', ' 128 ', 'ASP', 0.12762080351307553, (126.072, 71.65100000000002, 88.492)), ('F', ' 148 ', 'VAL', 0.1635622977100595, (118.96999999999998, 63.867, 81.248)), ('F', ' 149 ', 'LYS', 0.2816118277376131, (119.58099999999999, 60.14900000000001, 81.572)), ('F', ' 162 ', 'LEU', 0.27089245526859385, (116.043, 87.283, 80.771)), ('F', ' 165 ', 'VAL', 0.03862850281033235, (112.428, 90.87000000000002, 79.109)), ('F', ' 189 ', 'LEU', 0.018164687266214917, (103.584, 66.26200000000003, 82.019)), ('F', ' 219 ', 'ASP', 0.0, (86.235, 89.18500000000002, 55.535)), ('F', ' 260 ', 'GLU', 0.07865062843149932, (94.65499999999994, 101.64400000000003, 64.052)), ('F', ' 280 ', 'ILE', 0.07733654972693463, (89.12999999999994, 97.887, 78.494)), ('F', ' 293 ', 'SER', 0.1468764148520297, (89.716, 87.992, 79.776)), ('F', ' 314 ', 'VAL', 0.14045165100528892, (74.334, 74.787, 73.128)), ('F', ' 318 ', 'VAL', 0.003150532575091347, (85.76399999999998, 73.047, 77.422))]
data['cbeta'] = []
data['probe'] = [(' B  10  VAL  HA ', ' C 269  ILE HD11', -0.712, (101.612, 126.265, 90.94)), (' B 269  ILE HD11', ' F  10  VAL  HA ', -0.71, (126.605, 100.323, 91.095)), (' D  10  VAL  HA ', ' E 269  ILE HD11', -0.698, (86.398, 101.127, 121.12)), (' B 266  GLU  HB3', ' B 279  PHE  HB3', -0.696, (120.714, 97.132, 83.083)), (' D 218  MET  HE1', ' D 233  GLU  HB3', -0.695, (128.356, 89.096, 150.468)), (' A 269  ILE HD11', ' E  10  VAL  HA ', -0.686, (111.676, 126.184, 121.21)), (' D 266  GLU  HB3', ' D 279  PHE  HB3', -0.676, (121.651, 98.562, 128.73)), (' C  10  VAL  HA ', ' F 269  ILE HD11', -0.664, (91.539, 91.8, 90.971)), (' A  10  VAL  HA ', ' D 269  ILE HD11', -0.664, (121.392, 91.835, 120.918)), (' C 212  ASP  OD2', ' C 225  TYR  OH ', -0.658, (90.843, 125.552, 55.824)), (' E 266  GLU  HB3', ' E 279  PHE  HB3', -0.648, (91.87, 97.108, 128.748)), (' C 266  GLU  HB3', ' C 279  PHE  HB3', -0.647, (107.264, 123.887, 83.099)), (' A 212  ASP  OD2', ' A 225  TYR  OH ', -0.646, (121.148, 125.602, 156.204)), (' D 212  ASP  OD2', ' D 225  TYR  OH ', -0.627, (115.568, 83.733, 156.255)), (' F 212  ASP  OD2', ' F 225  TYR  OH ', -0.625, (97.156, 83.428, 55.874)), (' B 212  ASP  OD2', ' B 225  TYR  OH ', -0.618, (130.865, 109.996, 55.832)), (' C 135  ARG  NH2', ' C 149  LYS  O  ', -0.617, (60.722, 118.537, 84.254)), (' E 135  ARG  NH2', ' E 149  LYS  O  ', -0.613, (72.748, 140.362, 128.087)), (' E 212  ASP  OD2', ' E 225  TYR  OH ', -0.612, (82.299, 109.646, 156.289)), (' F 135  ARG  NH2', ' F 149  LYS  O  ', -0.603, (118.723, 60.898, 84.234)), (' F 266  GLU  HB3', ' F 279  PHE  HB3', -0.602, (90.749, 98.35, 83.287)), (' D 165  VAL HG22', ' D 167  LEU HD23', -0.599, (98.269, 89.211, 136.119)), (' C 208  GLN  NE2', ' C 212  ASP  OD1', -0.599, (92.184, 122.294, 54.782)), (' F 165  VAL HG22', ' F 167  LEU HD23', -0.593, (114.084, 89.734, 76.429)), (' B 218  MET  HE1', ' B 233  GLU  HB3', -0.585, (132.505, 95.968, 61.238)), (' C 165  VAL HG22', ' C 167  LEU HD23', -0.582, (88.105, 108.033, 76.426)), (' C 146  GLY  O  ', ' C 177  ASN  ND2', -0.581, (68.24, 116.677, 77.115)), (' A 165  VAL HG22', ' A 167  LEU HD23', -0.58, (124.76, 107.575, 135.911)), (' B 135  ARG  NH2', ' B 149  LYS  O  ', -0.579, (139.6, 140.3, 84.19)), (' B 334  LYS  NZ ', ' B 335  ASP  OD2', -0.579, (147.862, 87.577, 65.712)), (' F 318  VAL HG13', ' F 329  PHE  HB2', -0.574, (86.465, 76.525, 76.042)), (' E 218  MET  HE1', ' E 233  GLU  HB3', -0.573, (80.219, 95.9, 150.646)), (' A 266  GLU  HB3', ' A 279  PHE  HB3', -0.572, (105.677, 123.674, 128.652)), (' B 208  GLN  NE2', ' B 212  ASP  OD1', -0.567, (127.423, 110.759, 54.962)), (' B 245  LEU  HB3', ' B 289  LYS  HB2', -0.564, (127.244, 92.88, 76.89)), (' F 245  LEU  HB3', ' F 289  LYS  HB2', -0.563, (83.931, 95.244, 76.459)), (' A 135  ARG  NH2', ' A 149  LYS  O  ', -0.561, (152.784, 118.648, 127.941)), (' B 165  VAL HG22', ' B 167  LEU HD23', -0.56, (116.857, 121.39, 76.387)), (' E 165  VAL HG22', ' E 167  LEU HD23', -0.559, (96.002, 121.752, 135.823)), (' E 208  GLN  NE2', ' E 212  ASP  OD1', -0.554, (85.535, 110.906, 157.16)), (' F 219  ASP  N  ', ' F 219  ASP  OD1', -0.553, (86.263, 90.907, 56.275)), (' A 146  GLY  O  ', ' A 177  ASN  ND2', -0.551, (144.43, 116.926, 135.27)), (' C 245  LEU  HB3', ' C 289  LYS  HB2', -0.549, (107.695, 131.27, 76.894)), (' D 146  GLY  O  ', ' D 177  ASN  ND2', -0.54, (96.244, 68.71, 135.488)), (' E 333  CYS  HA ', ' E 338  VAL  HA ', -0.537, (67.834, 95.932, 143.41)), (' A 220  GLU  O  ', ' A 223  GLU  HG2', -0.537, (115.55, 131.62, 159.06)), (' B 146  GLY  O  ', ' B 177  ASN  ND2', -0.536, (134.318, 134.075, 77.227)), (' E 245  LEU  HB3', ' E 289  LYS  HB2', -0.533, (85.943, 92.414, 136.148)), (' A 127  VAL  HB ', ' A 130  GLN  HG3', -0.531, (142.072, 109.053, 122.893)), (' D 135  ARG  NH2', ' D 149  LYS  O  ', -0.528, (93.802, 60.159, 127.924)), (' B  90  ARG  NH2', ' B  93  PRO  O  ', -0.527, (121.993, 116.718, 93.968)), (' C 127  VAL  HB ', ' C 130  GLN  HG3', -0.527, (70.662, 108.911, 89.124)), (' C 218  MET  HE1', ' C 233  GLU  HB3', -0.525, (102.264, 134.393, 61.273)), (' D 208  GLN  NE2', ' D 212  ASP  OD1', -0.524, (112.959, 86.126, 157.282)), (' F 218  MET  O  ', ' F 222  ILE HG12', -0.524, (87.496, 87.425, 58.113)), (' A 208  GLN  NE2', ' A 212  ASP  OD1', -0.52, (121.051, 122.028, 157.331)), (' A 128  ASP  N  ', ' A 128  ASP  OD1', -0.518, (144.642, 105.53, 123.928)), (' E 146  GLY  O  ', ' E 177  ASN  ND2', -0.516, (78.823, 133.921, 135.416)), (' B 192  THR  OG1', ' B 193  TYR  O  ', -0.515, (137.158, 116.969, 76.753)), (' A 334  LYS  NZ ', ' A 335  ASP  OD2', -0.509, (111.363, 149.956, 147.376)), (' F 127  VAL  HB ', ' F 130  GLN  HG3', -0.509, (121.891, 73.791, 89.37)), (' A  90  ARG  NH2', ' A  93  PRO  O  ', -0.508, (122.761, 115.103, 118.528)), (' E  65  PRO  O  ', ' E 126  ARG  NH2', -0.506, (88.981, 129.356, 129.819)), (' B 127  VAL  HB ', ' B 130  GLN  HG3', -0.499, (126.431, 135.946, 89.14)), (' E 127  VAL  HB ', ' E 130  GLN  HG3', -0.497, (86.198, 135.986, 122.902)), (' A 218  MET  O  ', ' A 222  ILE HG12', -0.496, (112.66, 132.116, 153.901)), (' F 195  THR HG22', ' F 197  SER  H  ', -0.494, (101.94, 84.702, 75.757)), (' A 218  MET  SD ', ' A 233  GLU  HG3', -0.493, (110.25, 133.789, 151.441)), (' D 218  MET  O  ', ' D 222  ILE HG12', -0.493, (125.1, 88.182, 154.37)), (' E 192  THR  OG1', ' E 193  TYR  O  ', -0.493, (75.666, 116.759, 135.565)), (' A 199  ASN  OD1', ' A 201  GLN  NE2', -0.493, (113.286, 113.318, 137.365)), (' F 280  ILE HD13', ' F 292  CYS  HB3', -0.492, (89.378, 93.178, 78.254)), (' F  65  PRO  O  ', ' F 126  ARG  NH2', -0.49, (117.994, 80.069, 82.909)), (' C  12  LYS  HD2', ' C  18  GLN  HG3', -0.489, (80.916, 90.946, 91.541)), (' C 218  MET  O  ', ' C 222  ILE HG12', -0.489, (99.941, 131.971, 57.853)), (' D 233  GLU  CD ', ' D 233  GLU  H  ', -0.485, (129.125, 86.402, 149.388)), (' F 218  MET  HG2', ' F 237  TYR  CE1', -0.483, (88.595, 91.447, 61.006)), (' C 212  ASP  HA ', ' C 215  GLU  HG2', -0.481, (95.723, 122.402, 56.177)), (' A 234  HIS  O  ', ' A 247  GLY  HA3', -0.481, (110.428, 133.872, 141.727)), (' E 218  MET  O  ', ' E 222  ILE HG12', -0.478, (81.18, 98.986, 154.585)), (' B 219  ASP  N  ', ' B 219  ASP  OD1', -0.475, (129.851, 96.452, 56.073)), (' C 308  SER  O  ', ' C 308  SER  OG ', -0.475, (83.492, 139.867, 69.245)), (' A 245  LEU  HB3', ' A 289  LYS  HB2', -0.474, (104.537, 131.211, 135.662)), (' B 218  MET  HB3', ' B 218  MET  HE2', -0.473, (130.447, 96.145, 58.879)), (' F 162  LEU  O  ', ' F 165  VAL HG13', -0.473, (115.677, 90.245, 79.724)), (' D 205  PRO  HG3', ' D 214  LEU HD12', -0.473, (111.107, 90.659, 149.786)), (' C 264  GLU  HB2', ' C 281  THR HG23', -0.472, (110.985, 122.175, 78.624)), (' A 330  MET  HG2', ' A 344  LYS  HG2', -0.471, (117.536, 140.043, 131.615)), (' E 220  GLU  O  ', ' E 223  GLU  HG2', -0.47, (79.932, 101.772, 159.058)), (' D 127  VAL  HB ', ' D 130  GLN  HG3', -0.468, (90.946, 74.005, 123.068)), (' E 195  THR HG22', ' E 197  SER  H  ', -0.468, (85.149, 113.621, 136.491)), (' E 219  ASP  N  ', ' E 219  ASP  OD1', -0.467, (83.039, 96.744, 157.005)), (' E 332  TRP  O  ', ' E 339  GLU  N  ', -0.467, (70.152, 95.386, 142.72)), (' C 142  LEU  HB3', ' C 179  TYR  HB2', -0.467, (69.672, 119.828, 85.551)), (' C 234  HIS  O  ', ' C 247  GLY  HA3', -0.463, (102.503, 134.034, 70.912)), (' F 265  LEU HD23', ' F 280  ILE HG13', -0.462, (92.153, 96.895, 77.48)), (' D  90  ARG  NH2', ' D  93  PRO  O  ', -0.461, (105.744, 87.79, 118.521)), (' E 234  HIS  O  ', ' E 247  GLY  HA3', -0.46, (80.326, 96.124, 142.183)), (' D 220  GLU  O  ', ' D 223  GLU  HG2', -0.46, (123.699, 85.997, 159.032)), (' B  65  PRO  O  ', ' B 126  ARG  NH2', -0.459, (123.305, 129.638, 82.786)), (' D 218  MET  HG2', ' D 237  TYR  CE1', -0.457, (124.367, 91.509, 151.3)), (' D 200  LEU  HA ', ' D 200  LEU HD23', -0.455, (113.363, 94.021, 140.574)), (' A 264  GLU  HB2', ' A 281  THR HG23', -0.455, (101.775, 122.105, 133.987)), (' A 232  PHE  HZ ', ' A 303  VAL HG12', -0.454, (120.667, 131.814, 148.034)), (' D 162  LEU  O  ', ' D 165  VAL HG13', -0.454, (97.323, 90.592, 133.156)), (' A 111  PRO  HG2', ' A 133  LEU HD13', -0.453, (143.111, 112.524, 116.585)), (' D 192  THR  OG1', ' D 193  TYR  O  ', -0.453, (112.388, 74.54, 135.48)), (' F  12  LYS  HD2', ' F  18  GLN  HG3', -0.452, (132.214, 91.825, 91.093)), (' B 234  HIS  O  ', ' B 247  GLY  HA3', -0.452, (132.113, 95.811, 70.416)), (' F 234  HIS  O  ', ' F 247  GLY  HA3', -0.451, (84.407, 89.243, 70.471)), (' F 300  ASP  N  ', ' F 300  ASP  OD1', -0.451, (98.056, 80.582, 64.364)), (' C 192  THR  OG1', ' C 193  TYR  O  ', -0.45, (81.79, 127.679, 77.016)), (' F 318  VAL HG11', ' F 341  PHE  HE1', -0.45, (85.697, 75.888, 73.921)), (' A 289  LYS  HB3', ' A 292  CYS  SG ', -0.449, (106.784, 129.973, 134.238)), (' C 218  MET  HG2', ' C 237  TYR  CE1', -0.449, (102.244, 129.506, 61.237)), (' B 212  ASP  HA ', ' B 215  GLU  HG2', -0.448, (125.205, 107.321, 56.369)), (' A 299  LEU  O  ', ' A 303  VAL HG13', -0.447, (122.418, 130.063, 147.795)), (' D 195  THR HG22', ' D 197  SER  H  ', -0.446, (110.813, 84.391, 136.688)), (' E 218  MET  HG2', ' E 237  TYR  CE1', -0.445, (84.514, 98.275, 151.468)), (' F 111  PRO  HG2', ' F 133  LEU HD13', -0.445, (119.615, 71.241, 95.798)), (' B 218  MET  HG2', ' B 237  TYR  CE1', -0.444, (128.042, 98.786, 61.207)), (' D 218  MET  HB3', ' D 218  MET  HE2', -0.444, (127.378, 90.671, 153.597)), (' F 298  LEU  HB3', ' F 301  ASP  OD1', -0.444, (99.909, 79.083, 68.145)), (' E 125  GLY  HA3', ' E 144  THR HG22', -0.443, (81.512, 135.165, 128.615)), (' A 143  ILE  HA ', ' A 177  ASN  O  ', -0.442, (140.182, 117.659, 130.616)), (' F  90  ARG  NH2', ' F  93  PRO  O  ', -0.441, (107.424, 87.491, 94.143)), (' D   8  ASN  HB3', ' D  15  PHE  HA ', -0.441, (86.237, 91.752, 118.888)), (' F   8  ASN  HB3', ' F  15  PHE  HA ', -0.441, (126.752, 92.108, 93.885)), (' D 260  GLU  H  ', ' D 260  GLU  HG3', -0.441, (118.925, 99.094, 147.734)), (' F 212  ASP  HA ', ' F 215  GLU  HG2', -0.441, (97.817, 89.636, 56.418)), (' E 212  ASP  HA ', ' E 215  GLU  HG2', -0.44, (87.217, 107.5, 156.112)), (' A 212  ASP  HA ', ' A 215  GLU  HG2', -0.439, (116.754, 121.922, 156.309)), (' F 208  GLN  NE2', ' F 212  ASP  OD1', -0.438, (99.554, 85.97, 54.772)), (' C 218  MET  HB3', ' C 218  MET  HE2', -0.438, (103.129, 132.398, 58.899)), (' A 162  LEU  O  ', ' A 165  VAL HG13', -0.437, (124.852, 106.435, 132.833)), (' D 234  HIS  O  ', ' D 247  GLY  HA3', -0.437, (128.107, 89.139, 141.755)), (' C 111  PRO  HG2', ' C 133  LEU HD13', -0.437, (69.363, 112.39, 95.81)), (' B 220  GLU  O  ', ' B 223  GLU  HG2', -0.435, (133.071, 101.677, 53.193)), (' E 162  LEU  O  ', ' E 165  VAL HG13', -0.435, (97.296, 122.053, 133.072)), (' D 142  LEU  HB3', ' D 179  TYR  HB2', -0.435, (99.501, 67.943, 126.7)), (' A 232  PHE  CZ ', ' A 303  VAL HG12', -0.435, (120.583, 132.166, 148.296)), (' D 298  LEU  HB3', ' D 301  ASP  OD1', -0.434, (113.014, 78.671, 144.593)), (' B 268  PHE  CD1', ' B 269  ILE HG12', -0.433, (125.26, 101.168, 88.634)), (' B 162  LEU  O  ', ' B 165  VAL HG13', -0.432, (115.535, 122.054, 79.621)), (' E 268  PHE  CD1', ' E 269  ILE HG12', -0.432, (87.631, 100.774, 124.222)), (' B  12  LYS  HD2', ' B  18  GLN  HG3', -0.43, (105.896, 136.264, 91.414)), (' A 217  ALA  HB3', ' A 220  GLU  HG3', -0.43, (110.406, 128.31, 158.499)), (' E 322  ILE  O  ', ' E 325  THR HG22', -0.429, (76.257, 113.939, 130.995)), (' A 311  LEU  HA ', ' A 311  LEU HD12', -0.428, (121.472, 145.651, 144.162)), (' B 235  ILE HG13', ' B 236  VAL HG23', -0.428, (134.659, 100.689, 68.225)), (' F 315  SER  HB2', ' F 332  TRP  CZ3', -0.428, (74.656, 78.124, 76.68)), (' F 224  ARG  O  ', ' F 226  LYS  NZ ', -0.426, (90.957, 79.199, 53.776)), (' C 162  LEU  O  ', ' C 165  VAL HG13', -0.426, (87.884, 106.358, 79.891)), (' A  65  PRO  O  ', ' A 126  ARG  NH2', -0.425, (135.027, 109.51, 129.955)), (' F 220  GLU  O  ', ' F 223  GLU  HG2', -0.425, (88.959, 85.659, 53.334)), (' B 276  LYS  HB3', ' B 276  LYS  HE3', -0.425, (125.38, 105.208, 82.182)), (' F 173  LYS  HA ', ' F 173  LYS  HD3', -0.424, (119.353, 78.868, 72.837)), (' E 156  GLY  O  ', ' E 175  GLN  NE2', -0.423, (80.444, 125.055, 138.758)), (' F 142  LEU  HB3', ' F 179  TYR  HB2', -0.421, (113.307, 67.989, 85.839)), (' D 111  PRO  HG2', ' D 133  LEU HD13', -0.419, (93.052, 71.291, 116.856)), (' B 322  ILE  O  ', ' B 325  THR HG22', -0.419, (136.502, 113.844, 81.705)), (' D  65  PRO  O  ', ' D 126  ARG  NH2', -0.418, (94.725, 79.995, 129.963)), (' B 125  GLY  HA3', ' B 144  THR HG22', -0.414, (131.045, 135.114, 83.895)), (' A   8  ASN  HB3', ' A  15  PHE  HA ', -0.412, (129.03, 96.257, 118.924)), (' C 143  ILE  HA ', ' C 177  ASN  O  ', -0.412, (72.492, 117.372, 82.465)), (' E  90  ARG  NH2', ' E  93  PRO  O  ', -0.411, (90.342, 116.666, 118.417)), (' D 268  PHE  CD1', ' D 269  ILE HG12', -0.411, (120.275, 92.651, 124.143)), (' E 218  MET  HB3', ' E 218  MET  HE2', -0.41, (82.231, 96.052, 153.8)), (' D 173  LYS  HA ', ' D 173  LYS  HD3', -0.409, (93.349, 78.921, 139.877)), (' C  65  PRO  O  ', ' C 126  ARG  NH2', -0.409, (77.684, 109.584, 82.759)), (' C 125  GLY  HA3', ' C 144  THR HG22', -0.409, (69.058, 113.021, 84.259)), (' A 142  LEU  HB3', ' A 179  TYR  HB2', -0.408, (143.177, 119.999, 126.847)), (' A 212  ASP  O  ', ' A 216  LEU  HB2', -0.406, (115.285, 124.487, 155.683)), (' C 219  ASP  N  ', ' C 219  ASP  OD1', -0.405, (103.022, 131.114, 55.697)), (' B   8  ASN  HB3', ' B  15  PHE  HA ', -0.404, (108.921, 131.068, 93.831)), (' E  64  LYS  HA ', ' E  64  LYS  HD3', -0.404, (95.145, 130.947, 130.162)), (' D 313  VAL  O  ', ' D 333  CYS  HB2', -0.403, (136.129, 74.664, 142.303)), (' F 192  THR  OG1', ' F 193  TYR  O  ', -0.403, (100.23, 74.481, 77.176)), (' F 125  GLY  HA3', ' F 144  THR HG22', -0.403, (118.937, 70.488, 84.043)), (' A 125  GLY  HA3', ' A 144  THR HG22', -0.403, (143.698, 113.253, 128.871)), (' E 313  VAL  O  ', ' E 333  CYS  HB2', -0.402, (63.73, 96.309, 142.052)), (' F 268  PHE  CD1', ' F 269  ILE HG12', -0.402, (92.146, 92.868, 88.458)), (' A 192  THR  OG1', ' A 193  TYR  O  ', -0.401, (130.89, 127.653, 135.544)), (' E 148  VAL HG21', ' E 151  LEU HD12', -0.401, (74.246, 135.941, 128.221)), (' B 218  MET  O  ', ' B 222  ILE HG12', -0.401, (131.843, 99.263, 58.354)), (' C   8  ASN  HB3', ' C  15  PHE  HA ', -0.401, (83.584, 96.214, 93.894)), (' B 300  ASP  N  ', ' B 300  ASP  OD1', -0.4, (132.865, 112.084, 64.325)), (' B 210  GLU  OE2', ' B 298  LEU HD12', -0.4, (129.484, 112.846, 65.884)), (' D 216  LEU HD21', ' D 224  ARG  CZ ', -0.4, (118.436, 86.941, 159.634))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
