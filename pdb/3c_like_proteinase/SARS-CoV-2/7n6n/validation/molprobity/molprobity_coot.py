# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 137 ', 'LYS', 0.03929102876136882, (9.062, 7.349, 15.326)), ('B', ' 303 ', 'VAL', 0.027235181154204504, (7.484000000000002, 24.495, 28.255))]
data['omega'] = [('A', ' 271 ', 'LEU', None, (2.6469999999999994, -16.20999999999999, 18.575999999999997))]
data['rota'] = []
data['cbeta'] = [('B', ' 279 ', 'ARG', ' ', 0.33468133430045854, (-1.313999999999993, -0.8779999999999998, 32.507))]
data['probe'] = [(' A  97  LYS  CE ', ' A  97  LYS  NZ ', -1.5, (39.051, 12.991, 6.36)), (' A  97  LYS  CD ', ' A  97  LYS  NZ ', -1.146, (39.074, 14.048, 5.562)), (' A  37  TYR  HE2', ' A  88  LYS  HZ3', -0.925, (21.187, 17.927, -4.266)), (' A  97  LYS  HD3', ' A  97  LYS  NZ ', -0.84, (39.655, 13.541, 5.4)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.786, (9.311, -1.952, 7.909)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.781, (31.899, 3.336, 15.388)), (' A  97  LYS  CD ', ' A  97  LYS  HZ3', -0.767, (39.796, 14.763, 5.52)), (' A 127  GLN  O  ', ' B   4  ARG  NH2', -0.744, (15.181, 4.332, 15.62)), (' A   4  ARG  NH1', ' B 137  LYS  O  ', -0.743, (23.192, -2.994, 26.089)), (' A  51  ASN  HA ', ' A 188  ARG  HD3', -0.718, (0.656, 26.391, 3.742)), (' A 231  ASN  O  ', ' A 235  MET  HG2', -0.706, (-2.76, -12.799, 5.672)), (' A 243  THR HG23', ' A 246  HIS  H  ', -0.68, (9.244, -11.482, -0.387)), (' A  55  GLU  O  ', ' A  59  ILE HG13', -0.676, (9.805, 33.329, -6.137)), (' B 229  ASP  OD2', ' B 269  LYS  NZ ', -0.674, (3.889, 5.376, 51.577)), (' B  81  SER  O  ', ' B  88  LYS  N  ', -0.647, (50.395, 0.708, 28.045)), (' A 245  ASP  O  ', ' A 249  ILE HD12', -0.643, (12.995, -11.922, 0.177)), (' A  52  PRO  HD3', ' A 188  ARG  HG3', -0.64, (2.418, 25.89, 4.687)), (' A  37  TYR  HE2', ' A  88  LYS  NZ ', -0.639, (20.758, 17.923, -4.852)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.625, (21.421, 4.441, 36.103)), (' A  39  PRO  HG2', ' A 145  SER  HB3', -0.623, (14.662, 21.338, 7.494)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.615, (13.989, 17.816, -1.196)), (' A   4  ARG  HG2', ' B 139  SER  HB2', -0.596, (23.865, -4.372, 21.854)), (' A 198  THR HG21', ' A 240  GLU  HB3', -0.588, (0.733, -4.899, 6.901)), (' B   8  PHE  HB3', ' B 152  ILE HD12', -0.581, (29.024, 12.091, 20.798)), (' A 165  MET  HB3', ' C  -1  LEU HD23', -0.572, (7.837, 20.88, 8.455)), (' B 129  ALA  HB3', ' B 290  GLU  HG2', -0.57, (20.784, 2.018, 31.461)), (' B 108  PRO  HA ', ' B 130  MET  HB3', -0.565, (25.973, 3.356, 36.104)), (' B 146  GLY  HA2', ' B 162  MET  HE2', -0.565, (40.128, -1.184, 24.314)), (' A 243  THR HG22', ' A 246  HIS  ND1', -0.555, (7.772, -9.785, 1.122)), (' A 146  GLY  HA2', ' A 162  MET  HE2', -0.554, (18.219, 19.047, 6.259)), (' A 235  MET  SD ', ' A 241  PRO  HG3', -0.553, (-1.717, -10.102, 3.863)), (' B 130  MET  HE3', ' B 134  PHE  HA ', -0.551, (28.537, -1.113, 36.358)), (' A  53  ASN HD22', ' A  56  ASP  HB2', -0.546, (5.479, 34.841, -2.768)), (' B  37  TYR  CD2', ' B  88  LYS  HG2', -0.544, (47.368, 3.907, 28.047)), (' A  30  LEU HD22', ' A 148  VAL HG11', -0.542, (21.762, 15.082, 4.001)), (' A 133  ASN  ND2', ' A 194  ALA  HB1', -0.542, (0.863, 7.667, 10.074)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.541, (42.569, -0.216, 32.07)), (' B  27  LEU HD13', ' B  39  PRO  HD2', -0.535, (42.016, -4.268, 24.19)), (' A  97  LYS  HD3', ' A  97  LYS  HZ3', -0.532, (39.43, 14.372, 5.32)), (' A   8  PHE  HB3', ' A 152  ILE HD12', -0.526, (26.938, 4.042, 9.157)), (' B 222  ARG  NH1', ' B 223  PHE  HE1', -0.521, (-6.591, 8.831, 47.693)), (' A  53  ASN  ND2', ' A  56  ASP  OD2', -0.517, (4.476, 35.05, -3.754)), (' B  10  SER  O  ', ' B  14  GLU  HG3', -0.516, (33.472, 8.234, 16.016)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.513, (25.804, 14.432, 14.034)), (' A 108  PRO  HB3', ' A 132  PRO  HA ', -0.512, (6.168, 1.769, 4.787)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.509, (13.923, 17.357, 14.665)), (' A 169  THR  OG1', ' A 171  VAL HG22', -0.499, (2.028, 11.026, 14.37)), (' A 129  ALA  HB2', ' A 290  GLU  HG2', -0.495, (11.933, 0.777, 12.588)), (' B  52  PRO  HD2', ' B 188  ARG  HD2', -0.493, (44.185, -14.765, 36.871)), (' B 111  THR HG22', ' B 129  ALA  HB2', -0.493, (21.966, 5.064, 30.734)), (' A  49  MET  HA ', ' A  52  PRO  HG3', -0.489, (4.462, 28.442, 5.44)), (' B  83  GLN  HG2', ' B  84  ASN  ND2', -0.488, (46.144, 1.715, 36.569)), (' B  81  SER  N  ', ' B  88  LYS  O  ', -0.487, (52.714, 0.995, 27.692)), (' A  41  HIS  CE1', ' C  -1  LEU HD22', -0.485, (10.122, 22.646, 7.203)), (' A 133  ASN  HB3', ' A 197  ASP  HB3', -0.485, (1.332, 4.076, 8.458)), (' A  83  GLN  OE1', ' A  88  LYS  HE2', -0.482, (17.563, 18.654, -6.318)), (' B  82  MET  HG3', ' B  86  VAL  O  ', -0.482, (48.193, -1.789, 31.335)), (' A 232  LEU  O  ', ' A 235  MET  HB2', -0.474, (-4.695, -12.128, 7.35)), (' B  37  TYR  O  ', ' B 162  MET  HE1', -0.473, (42.816, 0.543, 24.273)), (' B 233  VAL HG13', ' B 237  TYR  HE2', -0.466, (7.353, -1.873, 47.427)), (' A  53  ASN  ND2', ' A  56  ASP  HB2', -0.464, (5.073, 34.244, -2.863)), (' A 140  PHE  O  ', ' B   1  SER  N  ', -0.461, (10.527, 17.033, 18.815)), (' B 201  THR HG21', ' B 230  PHE  HE2', -0.456, (12.763, 4.581, 43.989)), (' A 163  HIS  NE2', ' C   0  GLN  OE1', -0.455, (11.155, 16.791, 13.184)), (' A 111  THR  OG1', ' A 295  ASP  OD2', -0.454, (17.866, -1.291, 9.736)), (' A  32  LEU HD13', ' A 101  TYR  CD2', -0.452, (26.279, 13.375, -1.421)), (' B  27  LEU  HB2', ' B 145  SER  O  ', -0.449, (40.131, -5.812, 21.954)), (' A 129  ALA  CB ', ' A 290  GLU  HG2', -0.446, (11.94, 1.06, 12.202)), (' A 106  ILE HG23', ' A 160  CYS  HB2', -0.444, (16.453, 6.21, 2.234)), (' B 114  VAL HG11', ' B 140  PHE  CZ ', -0.443, (29.901, -1.212, 24.06)), (' A  57  LEU  O  ', ' A  61  LYS  HG2', -0.441, (13.422, 34.469, -0.423)), (' B 225  THR HG22', ' B 226  THR  O  ', -0.439, (7.988, 8.642, 50.58)), (' B 167  LEU HD12', ' B 171  VAL HG23', -0.438, (27.743, -8.9, 33.509)), (' B 228  ASN  O  ', ' B 232  LEU  HG ', -0.437, (11.063, 3.692, 53.998)), (' B 218  TRP  CZ3', ' B 276  MET  HG2', -0.431, (-0.723, 0.097, 36.193)), (' A 243  THR HG22', ' A 246  HIS  CG ', -0.428, (8.328, -10.101, 1.551)), (' B  27  LEU HD21', ' B  42  VAL  HB ', -0.426, (44.436, -7.509, 24.236)), (' B 213  ILE HD13', ' B 300  CYS  SG ', -0.426, (8.632, 15.399, 29.053)), (' B  36  VAL  O  ', ' B  88  LYS  HA ', -0.425, (48.337, 1.76, 25.478)), (' A  70  ALA  O  ', ' A  73  VAL HG22', -0.422, (33.684, 26.042, 8.616)), (' A 245  ASP  C  ', ' A 249  ILE HD12', -0.422, (12.346, -11.514, 0.195)), (' B  81  SER  HB3', ' B  88  LYS  HB2', -0.419, (51.299, 2.864, 28.8)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.416, (30.95, 4.857, 24.986)), (' A  80  HIS  HB3', ' A  89  LEU HD23', -0.414, (21.0, 29.14, -2.843)), (' B 163  HIS  NE2', ' B 172  HIS  HB3', -0.414, (31.265, -6.174, 27.682)), (' B 112  PHE  HZ ', ' B 136  ILE HG21', -0.414, (29.099, 0.582, 30.101)), (' B  33  ASP  O  ', ' B  95  ASN  N  ', -0.413, (49.421, 9.817, 18.295)), (' B 232  LEU  HA ', ' B 235  MET  HE1', -0.412, (12.514, -0.343, 53.307)), (' A 245  ASP  O  ', ' A 248  ASP  N  ', -0.412, (12.871, -13.962, 0.664)), (' A 165  MET  CE ', ' A 185  PHE  HB3', -0.41, (4.114, 16.315, 6.205)), (' B 225  THR  O  ', ' B 262  LEU  HB3', -0.41, (6.519, 12.019, 49.125)), (' B 100  LYS  HB2', ' B 156  CYS  HA ', -0.409, (37.559, 17.896, 23.665)), (' B  90  LYS  HA ', ' B  90  LYS  HD3', -0.409, (53.064, 5.225, 23.852)), (' A 235  MET  HB3', ' A 235  MET  HE3', -0.409, (-5.028, -8.984, 5.872)), (' B  32  LEU HD13', ' B 101  TYR  CE2', -0.406, (43.574, 10.27, 25.969)), (' B 302  GLY  O  ', ' B 303  VAL  HB ', -0.406, (6.406, 22.876, 26.871)), (' B  92  ASP  OD1', ' B  93  THR  N  ', -0.405, (54.915, 6.658, 15.585)), (' B 218  TRP  CZ2', ' B 279  ARG  HB2', -0.403, (-0.211, 0.418, 33.248)), (' B 211  ALA  HB1', ' B 216  ASP  HB2', -0.403, (2.805, 7.462, 30.343)), (' B  57  LEU  HA ', ' B  57  LEU HD23', -0.402, (54.068, -13.916, 31.121)), (' B 264  MET  HB3', ' B 264  MET  HE3', -0.402, (6.686, 9.076, 39.888)), (' B 276  MET  HE2', ' B 279  ARG  HG2', -0.402, (-2.953, -1.436, 35.225))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
