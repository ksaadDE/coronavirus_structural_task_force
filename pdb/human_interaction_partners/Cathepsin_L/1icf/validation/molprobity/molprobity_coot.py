# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 174 ', 'SER', 0.023651608224432567, (31.40099999999999, -11.556, 51.323))]
data['omega'] = []
data['rota'] = [('A', '   3 ', 'ARG', 0.004187018848982659, (22.238, -3.88, 52.048)), ('A', '   4 ', 'SER', 0.01719977468738712, (21.408, -5.869, 48.942)), ('A', '   8 ', 'ARG', 0.04170092814607989, (15.785999999999998, -10.485999999999999, 39.055)), ('A', '  40 ', 'ARG', 0.0, (5.02, -4.339, 39.63)), ('A', '  41 ', 'LYS', 0.25829317350812003, (1.647999999999998, -2.943, 38.582)), ('A', '  87 ', 'GLU', 0.01050530553690035, (6.367000000000004, -10.880999999999998, 20.066)), ('A', '  95 ', 'GLU', 0.21863832625285706, (15.09, 1.6789999999999996, 11.455)), ('A', ' 103 ', 'LYS', 0.0, (-4.364000000000002, -4.002, 19.348)), ('A', ' 109 ', 'ASP', 0.2347534066742996, (3.2389999999999985, 5.195000000000002, 30.811)), ('A', ' 110 ', 'THR', 0.021758937509730458, (2.1030000000000024, 8.338, 32.62699999999999)), ('A', ' 118 ', 'GLN', 0.0, (23.888999999999996, 11.419, 43.146999999999984)), ('A', ' 124 ', 'LYS', 0.00036542587928595845, (17.119999999999994, 4.776, 47.172)), ('A', ' 144 ', 'LEU', 0.0217949599501428, (34.396000000000015, -4.695999999999998, 26.063)), ('A', ' 147 ', 'LYS', 0.0, (34.143, -11.079, 32.291)), ('A', ' 148 ', 'GLU', 0.01114487422061811, (33.773, -11.117000000000003, 36.074)), ('A', ' 156 ', 'CYS', 0.07630130085582644, (35.798, 6.513, 32.857)), ('A', ' 159 ', 'GLU', 0.02237471791833037, (30.05900000000001, 13.609, 32.409)), ('A', ' 173 ', 'GLU', 0.02483995203826554, (31.036999999999992, -9.009, 48.467)), ('A', ' 174 ', 'SER', 0.0026513542248470605, (31.40099999999999, -11.556, 51.323)), ('B', ' 181 ', 'LYS', 0.05109854621886975, (30.305000000000003, -2.387, 46.53)), ('B', ' 184 ', 'LEU', 0.05444594800427326, (24.149999999999995, -4.884, 39.176)), ('B', ' 211 ', 'ILE', 0.19598833114836603, (26.052, 5.849, 36.504)), ('C', '   3 ', 'ARG', 0.03343618639837044, (5.094000000000001, -13.102, -23.225999999999992)), ('C', '  87 ', 'GLU', 0.00548248190270558, (-15.842999999999998, -4.330999999999999, 4.998)), ('C', ' 103 ', 'LYS', 0.0, (-27.031999999999993, -10.181, 3.93)), ('C', ' 109 ', 'ASP', 0.15363251619115137, (-18.273, -20.129, -6.189)), ('C', ' 110 ', 'THR', 0.021758937509730458, (-19.369, -23.145999999999997, -8.219)), ('C', ' 117 ', 'LYS', 0.1979365304924222, (1.8090000000000004, -29.952, -11.684)), ('C', ' 118 ', 'GLN', 0.0037416561867983883, (3.687, -28.268999999999995, -14.561)), ('C', ' 144 ', 'LEU', 0.24616380835839985, (12.179000000000002, -13.107, 4.385999999999998)), ('C', ' 147 ', 'LYS', 0.08275042419924675, (13.749000000000004, -6.812, -1.741)), ('C', ' 156 ', 'CYS', 0.08796017277690509, (13.852, -24.487, -2.084)), ('C', ' 159 ', 'GLU', 0.023739410092192718, (7.383, -30.956, -2.676)), ('C', ' 174 ', 'SER', 0.016843911809709667, (13.584, -5.757999999999998, -19.275)), ('D', ' 181 ', 'LYS', 0.20075843831385584, (11.616, -15.132000000000001, -16.593)), ('D', ' 184 ', 'LEU', 0.07032017930489937, (4.58, -12.210999999999999, -10.442999999999996)), ('I', ' 213 ', 'ARG', 0.14470865270018496, (31.377999999999997, 10.563, 19.383)), ('I', ' 247 ', 'THR', 0.19808085946244114, (40.285, -3.7099999999999995, 12.948)), ('I', ' 256 ', 'SER', 0.19051563075189426, (49.355, 3.334, 15.589)), ('J', ' 201 ', 'VAL', 0.1441194103926018, (6.784999999999997, -33.497, 11.465)), ('J', ' 204 ', 'ILE', 0.06498925580370515, (1.870000000000001, -32.427, 8.910999999999996)), ('J', ' 211 ', 'SER', 0.23626545338105553, (0.8740000000000001, -24.656999999999993, 9.426)), ('J', ' 247 ', 'THR', 0.03837355138517258, (15.078000000000001, -14.261, 18.548)), ('J', ' 256 ', 'SER', 0.0013399975614447612, (23.560000000000006, -22.101000000000003, 18.347)), ('J', ' 257 ', 'GLU', 0.21470400419721344, (23.385, -25.917, 18.708)), ('J', ' 258 ', 'SER', 0.037594713357918315, (23.959, -28.281, 21.683999999999994))]
data['cbeta'] = [('A', ' 109 ', 'ASP', ' ', 0.5306905595843265, (4.790000000000001, 5.235, 30.952)), ('B', ' 180 ', 'ASN', ' ', 0.2723111234579209, (33.78599999999999, -3.956, 49.085)), ('C', ' 109 ', 'ASP', ' ', 0.2632211695983168, (-16.773, -20.294999999999998, -5.8))]
data['probe'] = [(' C 150  ILE HD13', ' D 179  ASN  O  ', -1.1, (14.603, -12.483, -14.177)), (' D 179  ASN  HB2', ' D 230  HOH  O  ', -0.952, (17.196, -18.32, -13.725)), (' D 180  ASN  HB3', ' D 233  HOH  O  ', -0.918, (17.008, -12.419, -18.936)), (' A 150  ILE HD13', ' B 179  ASN  O  ', -0.826, (33.289, -3.833, 44.096)), (' A 160  ASP  HB3', ' I 316  HOH  O  ', -0.761, (31.263, 11.581, 26.026)), (' C 150  ILE HD11', ' C 173  GLU  CG ', -0.684, (13.642, -10.928, -14.663)), (' C  48  LEU  O  ', ' C  86  GLU  HG2', -0.681, (-11.961, -8.934, 2.134)), (' I 215  LYS  HB3', ' I 223  LEU HD12', -0.658, (39.799, 9.695, 21.794)), (' A   6  ASP  OD1', ' A   8  ARG  HD3', -0.646, (18.928, -9.584, 39.438)), (' B 195  MET  HE1', ' B 200  LYS  HE3', -0.645, (28.062, -10.393, 38.818)), (' C 150  ILE HD11', ' C 173  GLU  HG3', -0.642, (14.119, -11.227, -13.923)), (' D 195  MET  HE1', ' D 200  LYS  HE3', -0.638, (8.641, -6.536, -9.836)), (' C 160  ASP  HB3', ' J 279  HOH  O  ', -0.631, (7.376, -28.111, 3.303)), (' J 236  CYS  H  ', ' J 247  THR  CG2', -0.626, (14.565, -17.608, 17.604)), (' A   3  ARG  HB3', ' A 172  PHE  HE1', -0.625, (24.565, -5.623, 51.94)), (' C 150  ILE  CD1', ' C 173  GLU  HG3', -0.618, (14.635, -11.325, -13.928)), (' A  48  LEU  O  ', ' A  86  GLU  HG2', -0.607, (10.041, -5.71, 23.311)), (' I 256  SER  HB2', ' I 368  HOH  O  ', -0.605, (51.865, 4.11, 14.696)), (' I 235  TRP  HB2', ' I 247  THR HG23', -0.593, (39.36, -0.628, 13.636)), (' A 110  THR HG22', ' B 219  THR  OG1', -0.591, (4.007, 8.721, 35.046)), (' I 195  THR  O  ', ' I 199  GLU  HG3', -0.577, (37.469, 20.118, 13.665)), (' B 180  ASN  OD1', ' B 181  LYS  N  ', -0.576, (32.12, -1.873, 48.163)), (' J 204  ILE  HB ', ' J 213  ARG  HD3', -0.575, (4.707, -31.128, 8.286)), (' A  41  LYS  HE3', ' B 220  VAL  OXT', -0.564, (0.094, 1.822, 35.487)), (' J 236  CYS  H  ', ' J 247  THR HG21', -0.562, (14.832, -18.089, 18.141)), (' I 236  CYS  H  ', ' I 247  THR  CG2', -0.557, (40.786, -0.345, 13.596)), (' A  16  VAL  HB ', ' B 191  GLU  HG3', -0.54, (21.102, -12.265, 27.944)), (' C 110  THR HG22', ' D 219  THR  OG1', -0.536, (-17.518, -23.802, -10.941)), (' C  41  LYS  HE3', ' D 220  VAL  OXT', -0.536, (-20.404, -16.938, -12.101)), (' J 215  LYS  HB3', ' J 223  LEU HD12', -0.536, (15.477, -27.621, 9.541)), (' C 150  ILE HG21', ' D 179  ASN  N  ', -0.534, (14.362, -15.232, -12.202)), (' B 185  VAL HG21', ' B 201  MET  HG3', -0.529, (26.803, -1.235, 35.87)), (' C 145  PHE  O  ', ' C 147  LYS  HD2', -0.526, (15.655, -8.296, 1.115)), (' C 150  ILE HG12', ' D 182  TYR  HB3', -0.523, (12.118, -13.017, -12.466)), (' A  95  GLU  HG3', ' A 303  HOH  O  ', -0.511, (18.501, 2.493, 10.51)), (' C  52  ASN  C  ', ' C  52  ASN HD22', -0.51, (-15.759, -16.86, 6.827)), (' I 256  SER  CB ', ' I 368  HOH  O  ', -0.505, (51.926, 3.431, 15.13)), (' A  37  GLN  HB3', ' B 220  VAL HG21', -0.5, (5.499, 0.81, 36.111)), (' J 204  ILE  HB ', ' J 213  ARG  CD ', -0.496, (4.817, -31.151, 8.519)), (' C 124  LYS  HD3', ' C 234  HOH  O  ', -0.493, (-6.031, -22.728, -20.536)), (' C 137  ASP  OD2', ' C 140  HIS  HE1', -0.486, (12.38, -24.214, 0.799)), (' A   8  ARG  NH1', ' B 184  LEU HD11', -0.486, (22.153, -10.163, 39.552)), (' C   5  VAL  O  ', ' C 169  GLY  HA3', -0.483, (1.351, -11.557, -15.237)), (' A 137  ASP  OD2', ' A 140  HIS  HE1', -0.482, (34.98, 6.446, 29.59)), (' A   7  TRP  CE2', ' A 130  GLY  HA2', -0.48, (13.325, -2.999, 41.894)), (' J 196  LYS  O  ', ' J 200  GLU  HG3', -0.476, (8.028, -33.322, 17.25)), (' J 236  CYS  H  ', ' J 247  THR HG23', -0.474, (14.815, -17.337, 17.117)), (' I 196  LYS  O  ', ' I 200  GLU  HG3', -0.469, (35.436, 16.452, 13.198)), (' C 150  ILE HD11', ' C 173  GLU  HG2', -0.466, (13.265, -10.612, -14.351)), (' A 299  HOH  O  ', ' D 192  GLU  HG2', -0.463, (5.596, -0.204, 4.675)), (' A  58  GLY  N  ', ' A  59  PRO  CD ', -0.459, (9.676, 9.887, 16.546)), (' J 235  TRP  HB2', ' J 247  THR  CG2', -0.458, (13.682, -16.939, 17.635)), (' A 146  TYR  CZ ', ' B 199  VAL HG23', -0.456, (31.28, -6.674, 34.496)), (' A 117  LYS  HA ', ' B 212  ALA  O  ', -0.452, (22.884, 11.421, 38.716)), (' A 158  SER  HB2', ' A 159  GLU  OE1', -0.451, (31.857, 12.814, 35.663)), (' B 202  ALA  HB1', ' B 205  ARG  HG3', -0.451, (34.021, 1.896, 42.373)), (' A 147  LYS  HB2', ' A 147  LYS  HE3', -0.45, (37.294, -11.895, 32.191)), (' J 252  HIS  CE1', ' J 329  HOH  O  ', -0.449, (23.949, -15.379, 6.949)), (' C  77  VAL  HB ', ' C 109  ASP  OD2', -0.442, (-16.383, -20.658, -2.592)), (' C 153  GLU  H  ', ' D 208  HIS  CE1', -0.441, (15.306, -20.604, -5.268)), (' A 153  GLU  H  ', ' B 208  HIS  CE1', -0.441, (35.951, 2.786, 36.367)), (' A 141  GLU  HB3', ' A 145  PHE  CZ ', -0.441, (40.167, -3.247, 25.739)), (' I 236  CYS  H  ', ' I 247  THR HG21', -0.441, (40.78, 0.02, 13.942)), (' C  58  GLY  N  ', ' C  59  PRO  CD ', -0.438, (-15.355, -25.466, 8.951)), (' D 185  VAL HG21', ' D 201  MET  HG3', -0.438, (5.772, -16.213, -7.089)), (' D 184  LEU  HA ', ' D 184  LEU HD23', -0.433, (5.815, -11.185, -9.837)), (' C 144  LEU HD23', ' J 287  HOH  O  ', -0.432, (13.941, -14.535, 8.904)), (' J 235  TRP  HB2', ' J 247  THR HG23', -0.431, (13.878, -16.907, 17.153)), (' C 146  TYR  CZ ', ' D 199  VAL HG23', -0.426, (10.873, -10.981, -4.933)), (' A 146  TYR  CE2', ' B 199  VAL HG23', -0.421, (30.97, -6.711, 33.989)), (' I 235  TRP  HB2', ' I 247  THR  CG2', -0.421, (39.245, -0.615, 13.404)), (' A 161  MET  CE ', ' B 213  SER  HB2', -0.42, (25.555, 10.92, 33.193)), (' I 236  CYS  H  ', ' I 247  THR HG23', -0.419, (40.302, -0.735, 14.137)), (' A 161  MET  HE3', ' B 213  SER  HB2', -0.416, (25.502, 10.593, 33.658)), (' C 117  LYS  H  ', ' C 117  LYS  HG2', -0.411, (0.178, -31.715, -11.29)), (' D 201  MET  HB3', ' D 201  MET  HE3', -0.41, (9.094, -18.198, -7.073)), (' A 131  PRO  HA ', ' A 167  VAL  O  ', -0.407, (16.751, -1.612, 38.183)), (' A  77  VAL HG12', ' A 109  ASP  H  ', -0.406, (3.194, 4.47, 27.996)), (' I 204  ILE  HB ', ' I 213  ARG  HG3', -0.405, (29.59, 13.89, 20.629)), (' C 146  TYR  CE2', ' D 199  VAL HG23', -0.403, (10.402, -11.174, -4.331)), (' I 194  LEU  HB3', ' I 199  GLU  HG2', -0.401, (36.498, 22.64, 14.632)), (' A 115  ILE HD12', ' B 216  SER  HA ', -0.401, (15.765, 7.927, 37.238))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
