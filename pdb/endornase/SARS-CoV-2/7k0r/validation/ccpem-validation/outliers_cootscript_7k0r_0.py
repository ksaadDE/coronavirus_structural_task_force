
from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

dict_residue_prop_objects = {}
class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)
        ##save property list frame object
        dict_residue_prop_objects[data_key] = list_obj
# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "clusters","rama", "rota", "cbeta", "probe", "smoc", "fdr",
               "fsc","diffmap","cablam",
               "jpred"]
  data_titles = { "clusters"  : "Outlier residue clusters",
                  "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes",
                  "smoc"  : "Local density fit (SMOC)",
                  "fdr": "Backbone position score (FDR)",
                  "fsc": "Local density fit (FSC)",
                  "diffmap": "Model-map difference",
                  "cablam": "Ca geometry (CaBLAM)",
                  "jpred":"SS prediction"}
  data_names = { "clusters"  : ["Chain","Residue","Cluster","Outlier types"],
                 "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"],
                 "smoc" : ["Chain", "Residue", "Name", "Score"],
                 "fdr" : ["Chain", "Residue", "Name", "Score"],
                 "fsc" : ["Chain", "Residue", "Name", "Score"],
                 "diffmap" : ["Chain", "Residue", "Name", "Score"],
                 "cablam" : ["Chain", "Residue","Name","recommendation","DSSP"],
                 "jpred" : ["Chain", "Residue","Name","predicted SS","current SS"]}
  if (gobject is not None) :
    data_types = {  "clusters" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_INT, gobject.TYPE_STRING,
                             gobject.TYPE_PYOBJECT],
                    "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "smoc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "fdr" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "fsc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "diffmap" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cablam" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT],
                   "jpred" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT]}
  else :
    data_types = dict([ (s, []) for s in ["clusters","rama","rota","cbeta","probe","smoc",
                                          "fdr","fsc","diffmap","cablam","jpred"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "Validation To-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    ##adding a column type for checkbox (bool) before atom coordinate
    if gobject is not None:
        column_types = column_types[:-1]+[bool]+[column_types[-1]]
    
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    ##add a cell for checkbox
    cell1 = gtk.CellRendererToggle()
    cell1.connect ("toggled", self.on_selected_toggled)
    column = gtk.TreeViewColumn('Dealt with',cell1,active=i+1)
    self.listctrl.append_column(column)
    #column.set_sort_column_id(i+1)
    #column.pack_start(cell1, True)
    
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      row = row[:-1] + (False,)+(row[-1],)
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()
  ##check box toggle
  def on_selected_toggled(self,renderer,path):
    if path is not None:
      model = self.listmodel.get_model()
      it = model.get_iter(path)
      #set toggle
      model[it][-2] = not model[it][-2]
      #set checkboxes for same residues in other lists
      try:
        chain = model[it][0]
        residue = model[it][1]
        for data_key in dict_residue_prop_objects:
          prop_obj = dict_residue_prop_objects[data_key]
          for row in prop_obj.listmodel.get_model():
            if data_key == 'probe':
              atom1_split = row[0].split()
              atom2_split = row[1].split()
              if atom1_split[0] == chain and atom1_split[1] == residue:
                row[-2] = model[it][-2]
              elif atom2_split[0] == chain and atom2_split[1] == residue:
                row[-2] = model[it][-2]
            elif row[0] == chain and row[1] == residue:
              row[-2] = model[it][-2]
      except IndexError: pass

  def check_chain_residue(self,chain,residue):
      pass
  
def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data
data = {}
data['rama'] = []
data['cbeta'] = []
data['fdr'] = []
data['fsc'] = []
data['diffmap'] = []
data['jpred'] = []
data['rota'] = [('A', '   2 ', 'SER', 0.14125222267739737, (149.163, 171.426, 145.236)), ('A', ' 245 ', 'GLN', 0.019219145977837467, (168.23999999999995, 128.309, 117.246)), ('A', ' 314 ', 'VAL', 0.06262148948504478, (191.447, 136.351, 113.545)), ('B', '   2 ', 'SER', 0.14147055405013456, (124.85500000000006, 136.615, 145.12999999999997)), ('B', ' 245 ', 'GLN', 0.019029142231407236, (152.371, 174.877, 117.106)), ('B', ' 314 ', 'VAL', 0.06256225964805966, (133.69999999999993, 190.847, 113.456)), ('C', '   2 ', 'SER', 0.14100190099020074, (167.041, 132.667, 145.14)), ('C', ' 245 ', 'GLN', 0.01900722843235829, (120.20600000000005, 137.88100000000003, 117.109)), ('C', ' 314 ', 'VAL', 0.06257794871187693, (115.50599999999999, 113.781, 113.36)), ('D', '   2 ', 'SER', 0.1405962918279652, (144.495, 171.465, 148.663)), ('D', ' 245 ', 'GLN', 0.019095958692134866, (125.54300000000005, 128.335, 176.719)), ('D', ' 314 ', 'VAL', 0.06263500088586171, (102.35400000000004, 136.376, 180.53)), ('E', '   2 ', 'SER', 0.14156728162740956, (169.32699999999997, 136.644, 148.694)), ('E', ' 245 ', 'GLN', 0.01917597029797311, (141.58, 174.815, 176.615)), ('E', ' 314 ', 'VAL', 0.06251513276102806, (160.18199999999993, 190.85, 180.32799999999997)), ('F', '   2 ', 'SER', 0.14141348799432144, (126.89400000000003, 132.907, 148.791)), ('F', ' 245 ', 'GLN', 0.018969298443700627, (173.815, 137.73900000000003, 176.747)), ('F', ' 314 ', 'VAL', 0.06241592180221292, (178.385, 113.59800000000003, 180.388))]
data['clusters'] = [('A', '235', 1, 'side-chain clash', (174.928, 134.993, 113.23)), ('A', '248', 1, 'backbone clash', (173.534, 134.233, 114.722)), ('A', '250', 1, 'side-chain clash', (174.844, 139.219, 115.923)), ('A', '290', 1, 'side-chain clash', (172.411, 134.672, 116.322)), ('A', '331', 1, 'side-chain clash\nsmoc Outlier', (180.882, 140.019, 115.732)), ('A', '342', 1, 'side-chain clash', (180.882, 140.019, 115.732)), ('A', '343', 1, 'side-chain clash', (174.844, 139.219, 115.923)), ('A', '401', 1, 'side-chain clash\nsmoc Outlier', (174.835, 134.272, 122.214)), ('A', '402', 1, 'side-chain clash\nbackbone clash\nsmoc Outlier', (173.534, 134.233, 114.722)), ('A', '1', 2, 'smoc Outlier', (151.924, 173.95100000000002, 144.57299999999998)), ('A', '2', 2, 'Rotamer', (149.163, 171.426, 145.236)), ('A', '228', 2, 'side-chain clash', (146.896, 172.233, 146.617)), ('A', '308', 2, 'side-chain clash', (146.896, 172.233, 146.617)), ('A', '4', 2, 'side-chain clash', (145.314, 168.981, 144.758)), ('A', '100', 3, 'smoc Outlier', (166.084, 170.221, 140.797)), ('A', '102', 3, 'cablam Outlier', (160.5, 170.7, 140.3)), ('A', '110', 3, 'smoc Outlier', (165.876, 174.447, 143.978)), ('A', '81', 3, 'smoc Outlier', (167.935, 167.70999999999998, 134.934)), ('A', '314', 4, 'Rotamer\nside-chain clash', (188.507, 136.214, 112.63)), ('A', '316', 4, 'cablam CA Geom Outlier', (187.4, 135.9, 117.4)), ('A', '317', 4, 'smoc Outlier', (187.82000000000002, 139.3, 118.99700000000001)), ('A', '334', 4, 'side-chain clash', (188.507, 136.214, 112.63)), ('A', '160', 5, 'smoc Outlier', (166.21299999999997, 163.002, 115.729)), ('A', '166', 5, 'smoc Outlier', (157.555, 160.575, 119.589)), ('A', '167', 5, 'smoc Outlier', (161.03, 160.17, 118.13199999999999)), ('A', '169', 5, 'smoc Outlier', (163.529, 164.23999999999998, 112.706)), ('A', '146', 6, 'smoc Outlier', (170.225, 174.71599999999998, 118.91400000000002)), ('A', '177', 6, 'Dihedral angle:CA:C', (171.465, 169.73, 118.79)), ('A', '178', 6, 'Dihedral angle:N:CA', (175.02, 170.66299999999998, 119.504)), ('A', '269', 7, 'side-chain clash', (165.976, 141.713, 129.205)), ('A', '270', 7, 'side-chain clash', (165.976, 141.713, 129.205)), ('A', '271', 7, 'smoc Outlier', (162.178, 147.24299999999997, 128.623)), ('A', '219', 8, 'side-chain clash', (171.051, 139.097, 101.981)), ('A', '220', 8, 'smoc Outlier', (172.42800000000003, 137.917, 96.861)), ('A', '238', 8, 'side-chain clash', (171.051, 139.097, 101.981)), ('A', '297', 9, 'smoc Outlier', (169.686, 150.05800000000002, 114.692)), ('A', '298', 9, 'smoc Outlier', (172.515, 151.564, 112.723)), ('A', '303', 9, 'smoc Outlier', (177.184, 149.48100000000002, 109.58)), ('A', '201', 10, 'side-chain clash', (163.053, 143.468, 113.066)), ('A', '255', 10, 'side-chain clash', (163.053, 143.468, 113.066)), ('A', '199', 11, 'side-chain clash', (167.635, 152.468, 107.05)), ('A', '211', 11, 'side-chain clash', (167.635, 152.468, 107.05)), ('A', '157', 12, 'side-chain clash', (147.138, 161.168, 146.985)), ('A', '176', 12, 'side-chain clash\nsmoc Outlier', (147.138, 161.168, 146.985)), ('A', '133', 13, 'side-chain clash', (177.054, 182.425, 129.276)), ('A', '136', 13, 'side-chain clash', (177.054, 182.425, 129.276)), ('A', '321', 14, 'smoc Outlier', (182.73399999999998, 151.14299999999997, 118.09100000000001)), ('A', '322', 14, 'smoc Outlier', (181.863, 154.534, 119.506)), ('A', '10', 15, 'smoc Outlier', (146.091, 168.60399999999998, 133.409)), ('A', '11', 15, 'smoc Outlier', (142.35100000000003, 168.86700000000002, 132.82700000000003)), ('A', '239', 16, 'side-chain clash', (167.319, 137.1, 110.418)), ('A', '249', 16, 'side-chain clash\ncablam Outlier\nsmoc Outlier', (167.319, 137.1, 110.418)), ('A', '78', 17, 'smoc Outlier', (173.536, 162.718, 132.89000000000001)), ('A', '79', 17, 'smoc Outlier', (172.37800000000001, 162.29299999999998, 136.48700000000002)), ('A', '64', 18, 'smoc Outlier', (156.976, 168.721, 126.17799999999998)), ('A', '65', 18, 'smoc Outlier', (159.567, 170.183, 123.806)), ('B', '248', 1, 'backbone clash', (144.417, 176.386, 114.651)), ('B', '250', 1, 'side-chain clash', (139.415, 175.418, 115.973)), ('B', '290', 1, 'side-chain clash', (144.98, 174.859, 116.421)), ('B', '331', 1, 'side-chain clash', (135.967, 179.935, 115.643)), ('B', '342', 1, 'side-chain clash', (135.967, 179.935, 115.643)), ('B', '343', 1, 'side-chain clash', (139.415, 175.418, 115.973)), ('B', '401', 1, 'side-chain clash', (143.64, 177.34, 122.336)), ('B', '402', 1, 'side-chain clash\nbackbone clash', (144.417, 176.386, 114.651)), ('B', '311', 2, 'side-chain clash\nsmoc Outlier', (129.427, 190.87, 110.65)), ('B', '312', 2, 'smoc Outlier', (132.07299999999998, 187.16, 109.292)), ('B', '313', 2, 'side-chain clash', (129.427, 190.87, 110.65)), ('B', '314', 2, 'Rotamer\nside-chain clash', (135.392, 188.44, 112.55)), ('B', '316', 2, 'cablam CA Geom Outlier', (136.2, 187.5, 117.3)), ('B', '334', 2, 'side-chain clash', (135.392, 188.44, 112.55)), ('B', '157', 3, 'side-chain clash', (117.654, 159.554, 115.457)), ('B', '176', 3, 'side-chain clash\nsmoc Outlier', (117.654, 159.554, 115.457)), ('B', '177', 3, 'Dihedral angle:CA:C', (114.99600000000001, 156.738, 118.718)), ('B', '178', 3, 'Dihedral angle:N:CA\nsmoc Outlier', (112.397, 159.334, 119.44000000000001)), ('B', '1', 4, 'smoc Outlier', (121.28, 137.722, 144.475)), ('B', '2', 4, 'Rotamer', (124.85500000000006, 136.615, 145.12999999999997)), ('B', '235', 4, 'side-chain clash', (125.754, 134.2, 146.929)), ('B', '4', 4, 'side-chain clash', (128.963, 134.614, 144.658)), ('B', '100', 5, 'smoc Outlier', (117.338, 151.83100000000002, 140.71699999999998)), ('B', '102', 5, 'cablam Outlier', (119.8, 146.8, 140.2)), ('B', '83', 5, 'smoc Outlier', (116.11, 149.162, 136.26899999999998)), ('B', '99', 5, 'smoc Outlier', (121.015, 152.60299999999998, 140.303)), ('B', '199', 6, 'side-chain clash', (132.022, 162.018, 107.366)), ('B', '206', 6, 'smoc Outlier', (132.695, 159.141, 104.74300000000001)), ('B', '211', 6, 'side-chain clash', (132.022, 162.018, 107.366)), ('B', '219', 7, 'side-chain clash', (141.274, 171.52, 102.038)), ('B', '220', 7, 'smoc Outlier', (141.918, 173.653, 96.74300000000001)), ('B', '238', 7, 'side-chain clash\nsmoc Outlier', (141.274, 171.52, 102.038)), ('B', '265', 8, 'smoc Outlier', (149.69, 160.84, 117.99100000000001)), ('B', '280', 8, 'smoc Outlier', (147.21399999999997, 166.64299999999997, 122.962)), ('B', '282', 8, 'smoc Outlier', (151.78, 165.612, 118.006)), ('B', '201', 9, 'side-chain clash', (141.643, 162.414, 112.929)), ('B', '255', 9, 'side-chain clash', (141.643, 162.414, 112.929)), ('B', '243', 10, 'smoc Outlier', (154.76999999999998, 175.875, 112.51100000000001)), ('B', '245', 10, 'Rotamer', (152.371, 174.877, 117.106)), ('B', '194', 11, 'side-chain clash\nsmoc Outlier', (122.125, 173.313, 109.959)), ('B', '305', 11, 'side-chain clash\nsmoc Outlier', (122.125, 173.313, 109.959)), ('B', '133', 12, 'side-chain clash', (101.235, 154.655, 129.413)), ('B', '136', 12, 'side-chain clash', (101.235, 154.655, 129.413)), ('B', '239', 13, 'side-chain clash', (145.112, 170.081, 109.989)), ('B', '249', 13, 'side-chain clash\ncablam Outlier', (145.112, 170.081, 109.989)), ('B', '19', 14, 'smoc Outlier', (119.88, 132.006, 135.835)), ('B', '20', 14, 'smoc Outlier', (120.15899999999999, 129.94899999999998, 138.996)), ('B', '228', 15, 'side-chain clash', (131.242, 177.039, 101.951)), ('B', '308', 15, 'side-chain clash', (131.242, 177.039, 101.951)), ('B', '269', 16, 'side-chain clash\nbackbone clash', (130.893, 130.733, 130.211)), ('B', '270', 16, 'side-chain clash\nbackbone clash', (130.893, 130.733, 130.211)), ('B', '53', 17, 'smoc Outlier', (132.65800000000002, 142.933, 143.803)), ('B', '57', 17, 'smoc Outlier', (127.866, 143.009, 139.52100000000002)), ('C', '235', 1, 'side-chain clash', (122.576, 128.837, 113.08)), ('C', '248', 1, 'backbone clash', (122.911, 130.212, 114.796)), ('C', '250', 1, 'side-chain clash', (126.273, 126.59, 115.607)), ('C', '290', 1, 'side-chain clash', (123.576, 131.145, 116.154)), ('C', '331', 1, 'side-chain clash\nsmoc Outlier', (123.937, 121.027, 115.529)), ('C', '342', 1, 'side-chain clash', (123.937, 121.027, 115.529)), ('C', '343', 1, 'side-chain clash', (126.273, 126.59, 115.607)), ('C', '401', 1, 'side-chain clash\nsmoc Outlier', (122.005, 129.124, 122.112)), ('C', '402', 1, 'side-chain clash\nbackbone clash\nsmoc Outlier', (122.911, 130.212, 114.796)), ('C', '201', 2, 'side-chain clash', (136.338, 134.79, 112.972)), ('C', '251', 2, 'smoc Outlier', (133.38400000000001, 127.65799999999999, 112.593)), ('C', '252', 2, 'smoc Outlier', (136.41, 129.912, 112.774)), ('C', '255', 2, 'side-chain clash', (136.338, 134.79, 112.972)), ('C', '296', 2, 'smoc Outlier', (135.30100000000002, 125.64999999999999, 116.90100000000001)), ('C', '297', 2, 'smoc Outlier', (138.288, 125.71000000000001, 114.553)), ('C', '1', 3, 'smoc Outlier', (167.839, 129.012, 144.471)), ('C', '2', 3, 'Rotamer', (167.041, 132.667, 145.14)), ('C', '228', 3, 'side-chain clash', (168.922, 134.627, 146.789)), ('C', '3', 3, 'smoc Outlier', (164.80800000000002, 135.447, 143.839)), ('C', '308', 3, 'side-chain clash', (168.922, 134.627, 146.789)), ('C', '4', 3, 'side-chain clash', (167.065, 137.24, 144.648)), ('C', '157', 4, 'side-chain clash', (150.663, 114.644, 115.434)), ('C', '176', 4, 'side-chain clash\nsmoc Outlier', (150.663, 114.644, 115.434)), ('C', '177', 4, 'Dihedral angle:CA:C', (154.399, 114.282, 118.647)), ('C', '178', 4, 'Dihedral angle:N:CA', (153.42000000000002, 110.738, 119.354)), ('C', '314', 5, 'Rotamer\nside-chain clash', (116.859, 116.661, 112.111)), ('C', '316', 5, 'cablam CA Geom Outlier', (117.2, 117.5, 117.2)), ('C', '334', 5, 'side-chain clash', (116.859, 116.661, 112.111)), ('C', '268', 6, 'smoc Outlier', (136.107, 136.365, 125.012)), ('C', '269', 6, 'side-chain clash', (132.54, 133.266, 128.923)), ('C', '270', 6, 'side-chain clash\nsmoc Outlier', (130.893, 130.733, 130.211)), ('C', '15', 7, 'smoc Outlier', (164.71299999999997, 133.121, 131.24499999999998)), ('C', '17', 7, 'smoc Outlier', (169.126, 129.186, 132.73299999999998)), ('C', '18', 7, 'smoc Outlier', (170.80700000000002, 127.975, 135.907)), ('C', '199', 8, 'side-chain clash', (141.554, 126.165, 106.907)), ('C', '211', 8, 'side-chain clash', (141.554, 126.165, 106.907)), ('C', '133', 9, 'side-chain clash', (162.747, 103.076, 128.988)), ('C', '136', 9, 'side-chain clash\nsmoc Outlier', (162.747, 103.076, 128.988)), ('C', '219', 10, 'side-chain clash', (128.543, 129.852, 102.006)), ('C', '238', 10, 'side-chain clash', (128.543, 129.852, 102.006)), ('C', '27', 11, 'smoc Outlier', (158.9, 144.206, 144.52200000000002)), ('C', '31', 11, 'smoc Outlier', (155.343, 143.971, 139.782)), ('C', '210', 12, 'smoc Outlier', (138.575, 123.424, 100.318)), ('C', '301', 12, 'smoc Outlier', (137.596, 119.315, 105.15599999999999)), ('C', '244', 13, 'smoc Outlier', (118.893, 141.20499999999998, 115.8)), ('C', '245', 13, 'Rotamer\nsmoc Outlier', (120.20600000000005, 137.88100000000003, 117.109)), ('C', '108', 14, 'smoc Outlier', (154.77899999999997, 118.769, 145.875)), ('C', '109', 14, 'smoc Outlier', (157.761, 116.49100000000001, 145.208)), ('C', '239', 15, 'side-chain clash', (127.969, 134.071, 109.932)), ('C', '249', 15, 'side-chain clash\ncablam Outlier', (127.969, 134.071, 109.932)), ('C', '55', 16, 'smoc Outlier', (154.748, 133.622, 139.907)), ('C', '56', 16, 'smoc Outlier', (157.976, 135.298, 138.839)), ('D', '311', 1, 'side-chain clash\nsmoc Outlier', (100.157, 140.037, 183.125)), ('D', '313', 1, 'side-chain clash', (100.157, 140.037, 183.125)), ('D', '314', 1, 'Rotamer\nside-chain clash', (105.479, 136.084, 181.801)), ('D', '316', 1, 'cablam CA Geom Outlier', (106.4, 135.9, 176.6)), ('D', '334', 1, 'side-chain clash', (105.479, 136.084, 181.801)), ('D', '335', 1, 'smoc Outlier', (106.728, 131.96800000000002, 184.49200000000002)), ('D', '336', 1, 'smoc Outlier', (104.285, 131.75, 187.40200000000002)), ('D', '146', 2, 'smoc Outlier', (123.553, 174.74299999999997, 175.083)), ('D', '157', 2, 'side-chain clash\nsmoc Outlier', (120.906, 166.284, 178.212)), ('D', '176', 2, 'side-chain clash', (120.906, 166.284, 178.212)), ('D', '177', 2, 'Dihedral angle:CA:C', (122.313, 169.756, 175.21099999999998)), ('D', '178', 2, 'Dihedral angle:N:CA', (118.755, 170.69, 174.51299999999998)), ('D', '235', 3, 'side-chain clash', (119.068, 133.991, 180.362)), ('D', '248', 3, 'backbone clash', (120.589, 134.412, 178.59)), ('D', '290', 3, 'side-chain clash', (120.981, 134.882, 176.98)), ('D', '401', 3, 'side-chain clash', (118.809, 134.294, 171.698)), ('D', '402', 3, 'side-chain clash\nbackbone clash\nsmoc Outlier', (120.589, 134.412, 178.59)), ('D', '239', 4, 'side-chain clash', (126.144, 137.344, 183.389)), ('D', '249', 4, 'side-chain clash\ncablam Outlier', (126.144, 137.344, 183.389)), ('D', '257', 4, 'smoc Outlier', (130.967, 142.95800000000003, 187.917)), ('D', '258', 4, 'smoc Outlier', (131.924, 139.624, 186.399)), ('D', '250', 5, 'side-chain clash', (125.043, 141.467, 163.695)), ('D', '269', 5, 'side-chain clash', (127.803, 141.335, 164.889)), ('D', '270', 5, 'side-chain clash', (127.803, 141.335, 164.889)), ('D', '343', 5, 'side-chain clash', (125.043, 141.467, 163.695)), ('D', '79', 6, 'smoc Outlier', (121.319, 162.329, 157.51399999999998)), ('D', '80', 6, 'smoc Outlier', (124.061, 164.94299999999998, 157.154)), ('D', '81', 6, 'smoc Outlier', (125.769, 167.74499999999998, 159.04899999999998)), ('D', '82', 6, 'smoc Outlier', (125.754, 171.46200000000002, 158.295)), ('D', '10', 7, 'smoc Outlier', (147.62, 168.636, 160.475)), ('D', '13', 7, 'smoc Outlier', (147.797, 172.559, 164.23)), ('D', '6', 7, 'smoc Outlier', (145.474, 170.032, 154.755)), ('D', '7', 7, 'smoc Outlier', (148.67399999999998, 168.189, 155.61899999999997)), ('D', '199', 8, 'side-chain clash', (125.761, 152.53, 186.574)), ('D', '207', 8, 'smoc Outlier', (127.17299999999999, 156.39200000000002, 188.816)), ('D', '211', 8, 'side-chain clash', (125.761, 152.53, 186.574)), ('D', '228', 9, 'side-chain clash', (113.259, 145.626, 191.697)), ('D', '229', 9, 'smoc Outlier', (113.21000000000001, 139.107, 194.218)), ('D', '308', 9, 'side-chain clash', (113.259, 145.626, 191.697)), ('D', '243', 10, 'smoc Outlier', (125.923, 125.751, 181.30700000000002)), ('D', '244', 10, 'smoc Outlier', (127.76100000000001, 125.529, 178.02100000000002)), ('D', '245', 10, 'Rotamer\nsmoc Outlier', (125.54300000000005, 128.335, 176.719)), ('D', '201', 11, 'side-chain clash', (130.942, 143.862, 180.899)), ('D', '255', 11, 'side-chain clash', (130.942, 143.862, 180.899)), ('D', '152', 12, 'smoc Outlier', (110.733, 176.108, 171.092)), ('D', '153', 12, 'smoc Outlier', (110.298, 173.555, 173.839)), ('D', '194', 13, 'side-chain clash', (111.624, 155.235, 184.016)), ('D', '305', 13, 'side-chain clash', (111.624, 155.235, 184.016)), ('D', '331', 14, 'side-chain clash\nsmoc Outlier', (113.152, 139.63, 178.167)), ('D', '342', 14, 'side-chain clash', (113.152, 139.63, 178.167)), ('D', '133', 15, 'side-chain clash', (116.721, 182.747, 164.394)), ('D', '136', 15, 'side-chain clash', (116.721, 182.747, 164.394)), ('D', '219', 16, 'side-chain clash', (122.799, 139.142, 191.222)), ('D', '238', 16, 'side-chain clash', (122.799, 139.142, 191.222)), ('D', '161', 17, 'smoc Outlier', (128.92000000000002, 163.87800000000001, 174.817)), ('D', '162', 17, 'smoc Outlier', (131.815, 162.89600000000002, 172.602)), ('D', '171', 18, 'smoc Outlier', (132.864, 169.804, 183.77299999999997)), ('D', '173', 18, 'smoc Outlier', (132.843, 172.268, 178.944)), ('D', '231', 19, 'side-chain clash', (108.588, 141.976, 187.625)), ('D', '312', 19, 'side-chain clash', (108.588, 141.976, 187.625)), ('D', '202', 20, 'smoc Outlier', (137.509, 147.86100000000002, 181.695)), ('D', '203', 20, 'smoc Outlier', (136.917, 151.312, 183.19)), ('D', '27', 21, 'side-chain clash', (147.138, 161.168, 146.985)), ('D', '52', 21, 'smoc Outlier', (142.591, 157.87800000000001, 150.85700000000003)), ('D', '1', 22, 'smoc Outlier', (141.737, 173.99, 149.34)), ('D', '2', 22, 'Rotamer\nside-chain clash', (146.896, 172.233, 146.617)), ('D', '115', 23, 'smoc Outlier', (117.02199999999999, 172.52700000000002, 147.61499999999998)), ('D', '116', 23, 'smoc Outlier', (119.0, 169.285, 147.525)), ('D', '93', 24, 'smoc Outlier', (135.005, 156.778, 159.541)), ('D', '94', 24, 'smoc Outlier', (132.67899999999997, 159.726, 158.984)), ('D', '295', 25, 'smoc Outlier', (123.96600000000001, 144.142, 175.997)), ('D', '296', 25, 'smoc Outlier', (122.55199999999999, 147.531, 176.945)), ('E', '235', 1, 'side-chain clash', (149.794, 177.599, 180.291)), ('E', '248', 1, 'backbone clash', (149.373, 175.727, 178.835)), ('E', '250', 1, 'side-chain clash', (154.281, 175.057, 177.913)), ('E', '290', 1, 'side-chain clash', (149.61, 175.47, 176.674)), ('E', '331', 1, 'side-chain clash', (157.646, 179.676, 177.962)), ('E', '342', 1, 'side-chain clash', (157.646, 179.676, 177.962)), ('E', '343', 1, 'side-chain clash', (154.281, 175.057, 177.913)), ('E', '401', 1, 'side-chain clash', (150.057, 177.528, 171.649)), ('E', '402', 1, 'side-chain clash\nbackbone clash\nsmoc Outlier', (149.373, 175.727, 178.835)), ('E', '144', 2, 'smoc Outlier', (180.71099999999998, 156.995, 169.46800000000002)), ('E', '145', 2, 'smoc Outlier', (182.941, 154.911, 171.677)), ('E', '157', 2, 'side-chain clash', (176.995, 160.007, 178.287)), ('E', '176', 2, 'side-chain clash', (176.995, 160.007, 178.287)), ('E', '177', 2, 'Dihedral angle:CA:C', (179.02200000000002, 156.805, 175.137)), ('E', '178', 2, 'Dihedral angle:N:CA', (181.61499999999998, 159.41, 174.424)), ('E', '311', 3, 'side-chain clash', (164.315, 190.842, 183.266)), ('E', '313', 3, 'side-chain clash', (164.315, 190.842, 183.266)), ('E', '314', 3, 'Rotamer\nside-chain clash', (158.406, 188.215, 181.581)), ('E', '316', 3, 'cablam CA Geom Outlier', (157.7, 187.5, 176.5)), ('E', '334', 3, 'side-chain clash', (158.406, 188.215, 181.581)), ('E', '102', 4, 'cablam Outlier', (174.4, 146.8, 153.7)), ('E', '81', 4, 'smoc Outlier', (175.525, 154.753, 158.99)), ('E', '83', 4, 'smoc Outlier', (177.997, 149.22299999999998, 157.584)), ('E', '84', 4, 'smoc Outlier', (174.90800000000002, 148.947, 159.77299999999997)), ('E', '199', 5, 'side-chain clash', (162.176, 162.537, 186.545)), ('E', '211', 5, 'side-chain clash', (162.176, 162.537, 186.545)), ('E', '300', 5, 'smoc Outlier', (163.078, 167.813, 186.944)), ('E', '200', 6, 'smoc Outlier', (157.004, 157.375, 178.947)), ('E', '202', 6, 'smoc Outlier', (152.466, 154.686, 181.667)), ('E', '203', 6, 'smoc Outlier', (155.74899999999997, 153.472, 183.16299999999998)), ('E', '228', 7, 'side-chain clash', (163.053, 177.399, 191.599)), ('E', '229', 7, 'smoc Outlier', (157.112, 180.15200000000002, 194.068)), ('E', '308', 7, 'side-chain clash', (163.053, 177.399, 191.599)), ('E', '201', 8, 'side-chain clash\nsmoc Outlier', (152.037, 162.693, 180.819)), ('E', '255', 8, 'side-chain clash', (152.037, 162.693, 180.819)), ('E', '133', 9, 'side-chain clash', (192.737, 155.406, 164.499)), ('E', '136', 9, 'side-chain clash', (192.737, 155.406, 164.499)), ('E', '219', 10, 'side-chain clash\nsmoc Outlier', (152.461, 171.803, 191.246)), ('E', '238', 10, 'side-chain clash\nsmoc Outlier', (152.461, 171.803, 191.246)), ('E', '137', 11, 'smoc Outlier', (190.138, 159.85800000000003, 157.997)), ('E', '138', 11, 'smoc Outlier', (186.54299999999998, 160.73399999999998, 157.21499999999997)), ('E', '171', 12, 'smoc Outlier', (173.777, 147.696, 183.74899999999997)), ('E', '173', 12, 'smoc Outlier', (175.91299999999998, 146.455, 178.92200000000003)), ('E', '26', 13, 'smoc Outlier', (155.90200000000002, 134.296, 149.79299999999998)), ('E', '33', 13, 'smoc Outlier', (155.502, 134.98700000000002, 154.65)), ('E', '49', 14, 'smoc Outlier', (157.71299999999997, 153.448, 152.20399999999998)), ('E', '51', 14, 'smoc Outlier', (159.607, 148.01899999999998, 148.685)), ('E', '69', 15, 'smoc Outlier', (168.607, 157.04399999999998, 170.311)), ('E', '70', 15, 'smoc Outlier', (167.6, 158.342, 166.904)), ('E', '2', 16, 'Rotamer\nside-chain clash', (168.922, 134.627, 146.789)), ('E', '4', 16, 'side-chain clash', (165.224, 134.519, 149.189)), ('E', '269', 17, 'side-chain clash', (152.085, 166.179, 164.726)), ('E', '270', 17, 'side-chain clash', (152.085, 166.179, 164.726)), ('E', '239', 18, 'side-chain clash', (148.704, 170.134, 183.37)), ('E', '249', 18, 'side-chain clash\ncablam Outlier', (148.704, 170.134, 183.37)), ('F', '235', 1, 'side-chain clash', (172.036, 129.285, 180.408)), ('F', '248', 1, 'backbone clash', (170.808, 130.71, 178.826)), ('F', '250', 1, 'side-chain clash', (167.84, 126.236, 177.88)), ('F', '290', 1, 'side-chain clash', (170.162, 130.809, 176.502)), ('F', '331', 1, 'side-chain clash', (170.049, 121.25, 178.092)), ('F', '342', 1, 'side-chain clash', (170.049, 121.25, 178.092)), ('F', '343', 1, 'side-chain clash', (167.84, 126.236, 177.88)), ('F', '401', 1, 'side-chain clash', (171.634, 128.956, 171.456)), ('F', '402', 1, 'side-chain clash\nbackbone clash', (170.808, 130.71, 178.826)), ('F', '1', 2, 'smoc Outlier', (126.077, 129.254, 149.447)), ('F', '10', 2, 'smoc Outlier', (127.826, 136.948, 160.627)), ('F', '11', 2, 'backbone clash', (125.043, 141.467, 163.695)), ('F', '13', 2, 'smoc Outlier', (124.346, 135.126, 164.38000000000002)), ('F', '2', 2, 'Rotamer\nside-chain clash', (125.754, 134.2, 146.929)), ('F', '4', 2, 'side-chain clash', (127.157, 137.441, 149.263)), ('F', '7', 2, 'smoc Outlier', (127.67599999999999, 138.11599999999999, 155.778)), ('F', '201', 3, 'side-chain clash', (158.085, 134.66, 180.89)), ('F', '251', 3, 'smoc Outlier', (160.58800000000002, 127.573, 181.248)), ('F', '252', 3, 'smoc Outlier', (157.57399999999998, 129.845, 181.08200000000002)), ('F', '255', 3, 'side-chain clash', (158.085, 134.66, 180.89)), ('F', '295', 3, 'smoc Outlier', (160.88500000000002, 128.512, 176.001)), ('F', '296', 3, 'smoc Outlier', (158.651, 125.59400000000001, 176.936)), ('F', '146', 4, 'smoc Outlier', (134.542, 112.938, 175.06)), ('F', '157', 4, 'side-chain clash', (143.231, 114.643, 178.366)), ('F', '176', 4, 'side-chain clash', (143.231, 114.643, 178.366)), ('F', '177', 4, 'Dihedral angle:CA:C', (139.484, 114.342, 175.183)), ('F', '178', 4, 'Dihedral angle:N:CA', (140.442, 110.795, 174.459)), ('F', '180', 4, 'smoc Outlier', (142.88000000000002, 107.76400000000001, 168.814)), ('F', '311', 5, 'side-chain clash\nsmoc Outlier', (176.324, 109.991, 183.235)), ('F', '313', 5, 'side-chain clash', (176.324, 109.991, 183.235)), ('F', '314', 5, 'Rotamer\nside-chain clash', (177.225, 116.306, 181.294)), ('F', '316', 5, 'cablam CA Geom Outlier', (176.7, 117.4, 176.5)), ('F', '334', 5, 'side-chain clash', (177.225, 116.306, 181.294)), ('F', '337', 5, 'smoc Outlier', (178.147, 115.74300000000001, 187.765)), ('F', '78', 6, 'smoc Outlier', (146.583, 116.066, 161.07899999999998)), ('F', '80', 6, 'smoc Outlier', (142.73899999999998, 118.36999999999999, 157.14299999999997)), ('F', '81', 6, 'smoc Outlier', (139.465, 118.44600000000001, 159.048)), ('F', '96', 6, 'smoc Outlier', (144.79, 123.612, 157.525)), ('F', '269', 7, 'side-chain clash', (161.195, 132.907, 164.808)), ('F', '270', 7, 'side-chain clash\nsmoc Outlier', (161.195, 132.907, 164.808)), ('F', '271', 7, 'smoc Outlier', (154.363, 133.606, 165.38000000000002)), ('F', '227', 8, 'smoc Outlier', (166.23299999999998, 119.24600000000001, 196.947)), ('F', '228', 8, 'side-chain clash', (164.883, 118.397, 191.7)), ('F', '308', 8, 'side-chain clash', (164.883, 118.397, 191.7)), ('F', '199', 9, 'side-chain clash', (152.276, 126.049, 186.34)), ('F', '211', 9, 'side-chain clash', (152.276, 126.049, 186.34)), ('F', '133', 10, 'side-chain clash', (131.023, 103.082, 164.272)), ('F', '136', 10, 'side-chain clash\nsmoc Outlier', (131.023, 103.082, 164.272)), ('F', '219', 11, 'side-chain clash', (165.979, 130.213, 191.541)), ('F', '238', 11, 'side-chain clash', (165.979, 130.213, 191.541)), ('F', '239', 12, 'side-chain clash', (166.131, 133.8, 183.677)), ('F', '249', 12, 'side-chain clash\ncablam Outlier', (166.131, 133.8, 183.677)), ('F', '194', 13, 'side-chain clash', (157.175, 112.351, 183.858)), ('F', '305', 13, 'side-chain clash', (157.175, 112.351, 183.858)), ('F', '109', 14, 'smoc Outlier', (136.08100000000002, 116.67799999999998, 148.63899999999998)), ('F', '114', 14, 'smoc Outlier', (136.406, 110.029, 148.847)), ('F', '265', 15, 'smoc Outlier', (160.303, 142.39700000000002, 175.88100000000003)), ('F', '282', 15, 'smoc Outlier', (165.483, 141.835, 175.859))]
data['probe'] = [(' C 235  HIS  NE2', ' C 402  PO4  O1 ', -0.827, (122.576, 128.837, 113.08)), (' E 235  HIS  NE2', ' E 402  PO4  O3 ', -0.826, (149.794, 177.599, 180.291)), (' D 235  HIS  NE2', ' D 402  PO4  O3 ', -0.822, (119.068, 133.991, 180.362)), (' A 235  HIS  NE2', ' A 402  PO4  O1 ', -0.819, (174.928, 134.993, 113.23)), (' F 235  HIS  NE2', ' F 402  PO4  O3 ', -0.816, (172.036, 129.285, 180.408)), (' B 235  HIS  NE2', ' B 402  PO4  O1 ', -0.798, (143.271, 177.367, 113.112)), (' B   2  SER  HB2', ' F   2  SER  HB2', -0.696, (125.754, 134.2, 146.929)), (' F 290  LYS  NZ ', ' F 402  PO4  O4 ', -0.686, (170.162, 130.809, 176.502)), (' A 290  LYS  NZ ', ' A 402  PO4  O3 ', -0.685, (172.411, 134.672, 116.322)), (' C 290  LYS  NZ ', ' C 402  PO4  O3 ', -0.684, (123.576, 131.145, 116.154)), (' B 290  LYS  NZ ', ' B 402  PO4  O3 ', -0.684, (144.98, 174.859, 116.421)), (' D 290  LYS  NZ ', ' D 402  PO4  O4 ', -0.675, (120.981, 134.882, 176.98)), (' E 290  LYS  NZ ', ' E 402  PO4  O4 ', -0.671, (149.61, 175.47, 176.674)), (' D 157  GLY  O  ', ' D 176  GLN  NE2', -0.567, (120.906, 166.284, 178.212)), (' B 157  GLY  O  ', ' B 176  GLN  NE2', -0.557, (117.654, 159.554, 115.457)), (' C 199  ARG HH12', ' C 211  GLU  CD ', -0.539, (141.554, 126.165, 106.907)), (' F 157  GLY  O  ', ' F 176  GLN  NE2', -0.539, (143.231, 114.643, 178.366)), (' C 157  GLY  O  ', ' C 176  GLN  NE2', -0.536, (150.663, 114.644, 115.434)), (' E 199  ARG HH12', ' E 211  GLU  CD ', -0.534, (162.176, 162.537, 186.545)), (' D 199  ARG HH12', ' D 211  GLU  CD ', -0.533, (125.761, 152.53, 186.574)), (' E 248  GLY  H  ', ' E 402  PO4  P  ', -0.531, (149.373, 175.727, 178.835)), (' B 199  ARG HH12', ' B 211  GLU  CD ', -0.529, (132.022, 162.018, 107.366)), (' F 199  ARG HH12', ' F 211  GLU  CD ', -0.528, (152.276, 126.049, 186.34)), (' C 248  GLY  H  ', ' C 402  PO4  P  ', -0.528, (122.911, 130.212, 114.796)), (' B 311  ASP  OD1', ' B 313  SER  OG ', -0.527, (129.427, 190.87, 110.65)), (' F 248  GLY  H  ', ' F 402  PO4  P  ', -0.526, (170.808, 130.71, 178.826)), (' B 248  GLY  H  ', ' B 402  PO4  P  ', -0.526, (144.417, 176.386, 114.651)), (' A 199  ARG HH12', ' A 211  GLU  CD ', -0.525, (167.635, 152.468, 107.05)), (' F 219  MET  HG3', ' F 238  TYR  CE2', -0.523, (165.979, 130.213, 191.541)), (' D 248  GLY  H  ', ' D 402  PO4  P  ', -0.523, (120.589, 134.412, 178.59)), (' A 248  GLY  H  ', ' A 402  PO4  P  ', -0.523, (173.534, 134.233, 114.722)), (' D 219  MET  HG3', ' D 238  TYR  CE2', -0.521, (122.799, 139.142, 191.222)), (' A 219  MET  HG3', ' A 238  TYR  CE2', -0.521, (171.051, 139.097, 101.981)), (' B 219  MET  HG3', ' B 238  TYR  CE2', -0.521, (141.274, 171.52, 102.038)), (' C 219  MET  HG3', ' C 238  TYR  CE2', -0.52, (128.543, 129.852, 102.006)), (' E 219  MET  HG3', ' E 238  TYR  CE2', -0.518, (152.461, 171.803, 191.246)), (' A 157  GLY  O  ', ' A 176  GLN  NE2', -0.517, (173.307, 166.354, 115.396)), (' A  27  ILE HD12', ' D  27  ILE HD12', -0.513, (147.138, 161.168, 146.985)), (' E 157  GLY  O  ', ' E 176  GLN  NE2', -0.512, (176.995, 160.007, 178.287)), (' C 228  LEU HD23', ' C 308  LYS  HE3', -0.505, (129.125, 118.116, 101.847)), (' F 228  LEU HD23', ' F 308  LYS  HE3', -0.505, (164.883, 118.397, 191.7)), (' D 228  LEU HD23', ' D 308  LYS  HE3', -0.501, (113.259, 145.626, 191.697)), (' B 228  LEU HD23', ' B 308  LYS  HE3', -0.5, (131.242, 177.039, 101.951)), (' A 228  LEU HD23', ' A 308  LYS  HE3', -0.5, (181.032, 145.854, 102.095)), (' A   2  SER  HB2', ' D   2  SER  HB2', -0.499, (146.896, 172.233, 146.617)), (' E 228  LEU HD23', ' E 308  LYS  HE3', -0.498, (163.053, 177.399, 191.599)), (' C   2  SER  HB2', ' E   2  SER  HB2', -0.497, (168.922, 134.627, 146.789)), (' B 194  TYR  OH ', ' B 305  GLU  OE1', -0.49, (122.125, 173.313, 109.959)), (' A 239  GLY  HA3', ' A 249  LEU HD13', -0.483, (167.319, 137.1, 110.418)), (' D 311  ASP  OD1', ' D 313  SER  OG ', -0.482, (100.157, 140.037, 183.125)), (' C 239  GLY  HA3', ' C 249  LEU HD13', -0.482, (127.969, 134.071, 109.932)), (' C 331  MET  O  ', ' C 342  PHE  HA ', -0.482, (123.937, 121.027, 115.529)), (' D 331  MET  O  ', ' D 342  PHE  HA ', -0.48, (113.152, 139.63, 178.167)), (' F 239  GLY  HA3', ' F 249  LEU HD13', -0.48, (166.131, 133.8, 183.677)), (' B 331  MET  O  ', ' B 342  PHE  HA ', -0.473, (135.967, 179.935, 115.643)), (' E 239  GLY  HA3', ' E 249  LEU HD13', -0.472, (148.704, 170.134, 183.37)), (' E 331  MET  O  ', ' E 342  PHE  HA ', -0.472, (157.646, 179.676, 177.962)), (' D 239  GLY  HA3', ' D 249  LEU HD13', -0.472, (126.144, 137.344, 183.389)), (' D 194  TYR  OH ', ' D 305  GLU  OE1', -0.47, (111.624, 155.235, 184.016)), (' A 331  MET  O  ', ' A 342  PHE  HA ', -0.469, (180.882, 140.019, 115.732)), (' F 331  MET  O  ', ' F 342  PHE  HA ', -0.466, (170.049, 121.25, 178.092)), (' F 311  ASP  OD1', ' F 313  SER  OG ', -0.463, (176.324, 109.991, 183.235)), (' B 239  GLY  HA3', ' B 249  LEU HD13', -0.46, (145.112, 170.081, 109.989)), (' E 133  ASP  OD2', ' E 136  ARG  NH1', -0.458, (192.737, 155.406, 164.499)), (' D 133  ASP  OD2', ' D 136  ARG  NH1', -0.458, (116.721, 182.747, 164.394)), (' B 133  ASP  OD2', ' B 136  ARG  NH1', -0.458, (101.235, 154.655, 129.413)), (' F 133  ASP  OD2', ' F 136  ARG  NH1', -0.454, (131.023, 103.082, 164.272)), (' C 133  ASP  OD2', ' C 136  ARG  NH1', -0.454, (162.747, 103.076, 128.988)), (' A 133  ASP  OD2', ' A 136  ARG  NH1', -0.452, (177.054, 182.425, 129.276)), (' B 201  LEU  HA ', ' B 201  LEU HD23', -0.445, (139.758, 159.476, 112.194)), (' C 201  LEU  HA ', ' C 201  LEU HD23', -0.44, (139.842, 134.455, 112.239)), (' E 201  LEU  HA ', ' E 201  LEU HD23', -0.437, (154.337, 159.999, 181.106)), (' D 269  PHE  CD2', ' D 270  ILE HG13', -0.432, (127.803, 141.335, 164.889)), (' E 311  ASP  OD1', ' E 313  SER  OG ', -0.431, (164.315, 190.842, 183.266)), (' A 269  PHE  CD2', ' A 270  ILE HG13', -0.43, (165.976, 141.713, 129.205)), (' E 269  PHE  CD2', ' E 270  ILE HG13', -0.43, (152.085, 166.179, 164.726)), (' A   4  GLU  N  ', ' A   4  GLU  OE1', -0.429, (145.314, 168.981, 144.758)), (' C 269  PHE  CD2', ' C 270  ILE HG13', -0.427, (132.54, 133.266, 128.923)), (' B 250  HIS  CD2', ' B 343  TYR  HB3', -0.426, (139.415, 175.418, 115.973)), (' C 314  VAL  O  ', ' C 334  CYS  HB2', -0.425, (116.859, 116.661, 112.111)), (' F 314  VAL  O  ', ' F 334  CYS  HB2', -0.425, (177.225, 116.306, 181.294)), (' B 314  VAL  O  ', ' B 334  CYS  HB2', -0.425, (135.392, 188.44, 112.55)), (' B 269  PHE  CD2', ' B 270  ILE HG13', -0.425, (142.274, 166.478, 128.924)), (' F 250  HIS  CD2', ' F 343  TYR  HB3', -0.424, (167.84, 126.236, 177.88)), (' F 269  PHE  CD2', ' F 270  ILE HG13', -0.423, (161.195, 132.907, 164.808)), (' D 314  VAL  O  ', ' D 334  CYS  HB2', -0.423, (105.479, 136.084, 181.801)), (' C   4  GLU  N  ', ' C   4  GLU  OE1', -0.422, (167.065, 137.24, 144.648)), (' A 250  HIS  CD2', ' A 343  TYR  HB3', -0.422, (174.844, 139.219, 115.923)), (' F   4  GLU  N  ', ' F   4  GLU  OE1', -0.42, (127.157, 137.441, 149.263)), (' E   4  GLU  N  ', ' E   4  GLU  OE1', -0.419, (165.224, 134.519, 149.189)), (' E 250  HIS  CD2', ' E 343  TYR  HB3', -0.418, (154.281, 175.057, 177.913)), (' D 201  LEU HD21', ' D 255  LEU  HB3', -0.417, (130.942, 143.862, 180.899)), (' D 250  HIS  CD2', ' D 343  TYR  HB3', -0.417, (118.508, 139.215, 177.966)), (' D 270  ILE HD11', ' F  11  VAL  O  ', -0.416, (125.043, 141.467, 163.695)), (' E 314  VAL  O  ', ' E 334  CYS  HB2', -0.416, (158.406, 188.215, 181.581)), (' B  11  VAL  O  ', ' C 270  ILE HD11', -0.415, (130.893, 130.733, 130.211)), (' B 201  LEU HD21', ' B 255  LEU  HB3', -0.415, (141.643, 162.414, 112.929)), (' A 314  VAL  O  ', ' A 334  CYS  HB2', -0.415, (188.507, 136.214, 112.63)), (' A 201  LEU HD21', ' A 255  LEU  HB3', -0.415, (163.053, 143.468, 113.066)), (' E 201  LEU HD21', ' E 255  LEU  HB3', -0.413, (152.037, 162.693, 180.819)), (' C 250  HIS  CD2', ' C 343  TYR  HB3', -0.411, (126.273, 126.59, 115.607)), (" C 401  U5P  C5'", ' C 401  U5P  H6 ', -0.41, (122.005, 129.124, 122.112)), (" B 401  U5P  C5'", ' B 401  U5P  H6 ', -0.41, (143.64, 177.34, 122.336)), (" F 401  U5P  C5'", ' F 401  U5P  H6 ', -0.408, (171.634, 128.956, 171.456)), (' F 194  TYR  OH ', ' F 305  GLU  OE1', -0.408, (157.175, 112.351, 183.858)), (" D 401  U5P  C5'", ' D 401  U5P  H6 ', -0.407, (118.809, 134.294, 171.698)), (' B   4  GLU  N  ', ' B   4  GLU  OE1', -0.407, (128.963, 134.614, 144.658)), (' F 201  LEU  HA ', ' F 201  LEU HD23', -0.407, (154.123, 134.247, 181.386)), (' F 201  LEU HD21', ' F 255  LEU  HB3', -0.406, (158.085, 134.66, 180.89)), (" E 401  U5P  C5'", ' E 401  U5P  H6 ', -0.405, (150.057, 177.528, 171.649)), (' C 201  LEU HD21', ' C 255  LEU  HB3', -0.405, (136.338, 134.79, 112.972)), (" A 401  U5P  C5'", ' A 401  U5P  H6 ', -0.403, (174.835, 134.272, 122.214)), (' D 231  TYR  CE1', ' D 312  LEU HD11', -0.4, (108.588, 141.976, 187.625))]
data['cablam'] = [('A', '102', 'VAL', 'check CA trace,carbonyls, peptide', 'bend\nESS-T', (160.5, 170.7, 140.3)), ('A', '249', 'LEU', 'check CA trace,carbonyls, peptide', ' \nB---B', (169.7, 138.8, 112.8)), ('A', '316', 'SER', 'check CA trace', 'strand\nSSEEE', (187.4, 135.9, 117.4)), ('B', '102', 'VAL', 'check CA trace,carbonyls, peptide', 'bend\nESS-T', (119.8, 146.8, 140.2)), ('B', '249', 'LEU', 'check CA trace,carbonyls, peptide', ' \nB---B', (142.5, 170.8, 112.6)), ('B', '316', 'SER', 'check CA trace', 'strand\nSSEEE', (136.2, 187.5, 117.3)), ('C', '102', 'VAL', 'check CA trace,carbonyls, peptide', 'bend\nESS-T', (160.7, 123.2, 140.1)), ('C', '249', 'LEU', 'check CA trace,carbonyls, peptide', ' \nB---B', (128.6, 131.3, 112.6)), ('C', '316', 'SER', 'check CA trace', 'strand\nSSEEE', (117.2, 117.5, 117.2)), ('D', '102', 'VAL', 'check CA trace,carbonyls, peptide', 'bend\nESS-T', (133.2, 170.7, 153.7)), ('D', '249', 'LEU', 'check CA trace,carbonyls, peptide', ' \nB---B', (124.1, 138.9, 181.2)), ('D', '316', 'SER', 'check CA trace', 'strand\nSSEEE', (106.4, 135.9, 176.6)), ('E', '102', 'VAL', 'check CA trace,carbonyls, peptide', 'bend\nESS-T', (174.4, 146.8, 153.7)), ('E', '249', 'LEU', 'check CA trace,carbonyls, peptide', ' \nB---B', (151.4, 170.8, 181.1)), ('E', '316', 'SER', 'check CA trace', 'strand\nSSEEE', (157.7, 187.5, 176.5)), ('F', '102', 'VAL', 'check CA trace,carbonyls, peptide', 'bend\nESS-T', (133.2, 123.4, 153.7)), ('F', '249', 'LEU', 'check CA trace,carbonyls, peptide', ' \nB---B', (165.4, 131.2, 181.2)), ('F', '316', 'SER', 'check CA trace', 'strand\nSSEEE', (176.7, 117.4, 176.5))]
data['smoc'] = [('A', 1, u'MET', 0.8575009993549829, (151.924, 173.95100000000002, 144.57299999999998)), ('A', 10, u'VAL', 0.8889360896872989, (146.091, 168.60399999999998, 133.409)), ('A', 11, u'VAL', 0.8827382571184379, (142.35100000000003, 168.86700000000002, 132.82700000000003)), ('A', 19, u'GLN', 0.8823376952282658, (147.68200000000002, 178.033, 135.934)), ('A', 64, u'ILE', 0.9015415792692493, (156.976, 168.721, 126.17799999999998)), ('A', 65, u'LYS', 0.8923648331318084, (159.567, 170.183, 123.806)), ('A', 69, u'GLU', 0.8698291806119703, (166.442, 160.595, 123.601)), ('A', 78, u'VAL', 0.876364424441279, (173.536, 162.718, 132.89000000000001)), ('A', 79, u'ASP', 0.8838618466110598, (172.37800000000001, 162.29299999999998, 136.48700000000002)), ('A', 81, u'ALA', 0.807628140041886, (167.935, 167.70999999999998, 134.934)), ('A', 92, u'ASP', 0.8528422635307674, (156.77499999999998, 155.11299999999997, 131.569)), ('A', 100, u'ILE', 0.8665768904944828, (166.084, 170.221, 140.797)), ('A', 105, u'MET', 0.8779366133086501, (159.023, 165.445, 147.49)), ('A', 110, u'LYS', 0.8789398515263668, (165.876, 174.447, 143.978)), ('A', 138, u'ALA', 0.876528403221209, (178.64, 174.23299999999998, 136.71899999999997)), ('A', 146, u'GLU', 0.8555594883832793, (170.225, 174.71599999999998, 118.91400000000002)), ('A', 152, u'LEU', 0.8813629348659351, (183.026, 176.07899999999998, 122.96400000000001)), ('A', 160, u'GLN', 0.8950918229089626, (166.21299999999997, 163.002, 115.729)), ('A', 166, u'VAL', 0.8764271487499995, (157.555, 160.575, 119.589)), ('A', 167, u'THR', 0.861631743669354, (161.03, 160.17, 118.13199999999999)), ('A', 169, u'ILE', 0.8648637563691506, (163.529, 164.23999999999998, 112.706)), ('A', 176, u'GLN', 0.8808691144871186, (169.42700000000002, 168.54299999999998, 115.807)), ('A', 220, u'ASP', 0.8534110431223774, (172.42800000000003, 137.917, 96.861)), ('A', 229, u'GLU', 0.8201589363326924, (180.653, 139.089, 99.809)), ('A', 242, u'SER', 0.8626167395444169, (167.091, 127.16499999999999, 109.205)), ('A', 249, u'LEU', 0.8729888810413529, (169.708, 138.83800000000002, 112.754)), ('A', 271, u'PRO', 0.8540895113661733, (162.178, 147.24299999999997, 128.623)), ('A', 297, u'ASP', 0.8868575139181365, (169.686, 150.05800000000002, 114.692)), ('A', 298, u'LEU', 0.872929903268676, (172.515, 151.564, 112.723)), ('A', 303, u'PHE', 0.8649356075490315, (177.184, 149.48100000000002, 109.58)), ('A', 310, u'GLN', 0.8537835988135722, (187.73299999999998, 145.52200000000002, 110.616)), ('A', 317, u'LYS', 0.8706523861959435, (187.82000000000002, 139.3, 118.99700000000001)), ('A', 321, u'VAL', 0.8792348755120071, (182.73399999999998, 151.14299999999997, 118.09100000000001)), ('A', 322, u'THR', 0.8921556970627602, (181.863, 154.534, 119.506)), ('A', 331, u'MET', 0.8659947367642588, (181.894, 140.26, 118.891)), ('A', 340, u'GLU', 0.8468395524408915, (181.31, 134.131, 110.483)), ('A', 401, u'U5P', 0.8762869514783214, (173.836, 135.901, 118.287)), ('A', 402, u'PO4', 0.8669698982287342, (174.02200000000002, 132.68, 115.11)), ('B', 1, u'MET', 0.8078432876026851, (121.28, 137.722, 144.475)), ('B', 19, u'GLN', 0.8897013637796564, (119.88, 132.006, 135.835)), ('B', 20, u'GLN', 0.8423652174235932, (120.15899999999999, 129.94899999999998, 138.996)), ('B', 28, u'ILE', 0.8839558882634648, (142.542, 139.07, 144.57299999999998)), ('B', 37, u'ASP', 0.8584724003548899, (138.598, 122.848, 135.566)), ('B', 47, u'LYS', 0.8821156845095126, (138.947, 149.783, 136.344)), ('B', 53, u'ASN', 0.8930769706164027, (132.65800000000002, 142.933, 143.803)), ('B', 57, u'GLU', 0.8904353368154764, (127.866, 143.009, 139.52100000000002)), ('B', 65, u'LYS', 0.8715533317045441, (120.62599999999999, 146.237, 123.71600000000001)), ('B', 72, u'ILE', 0.8808803392808988, (123.49600000000001, 162.13, 124.573)), ('B', 83, u'ASN', 0.8699002795317328, (116.11, 149.162, 136.26899999999998)), ('B', 87, u'TRP', 0.887271334271707, (127.821, 150.89200000000002, 130.97)), ('B', 97, u'ILE', 0.90185502625226, (126.763, 156.65800000000002, 139.984)), ('B', 99, u'THR', 0.8918600145359653, (121.015, 152.60299999999998, 140.303)), ('B', 100, u'ILE', 0.8871667683341189, (117.338, 151.83100000000002, 140.71699999999998)), ('B', 113, u'THR', 0.9006450161991589, (108.229, 155.803, 141.596)), ('B', 139, u'ARG', 0.8931482907105216, (108.354, 164.17899999999997, 137.73499999999999)), ('B', 148, u'SER', 0.870587815125756, (105.195, 157.008, 118.592)), ('B', 152, u'LEU', 0.8882534013608453, (103.687, 163.506, 122.922)), ('B', 171, u'GLU', 0.9036060884995358, (120.242, 147.646, 110.09)), ('B', 176, u'GLN', 0.8905972588873313, (117.04400000000001, 155.58, 115.73)), ('B', 178, u'ASN', 0.8818673879536827, (112.397, 159.334, 119.44000000000001)), ('B', 189, u'GLN', 0.8625335638365355, (110.10199999999999, 170.502, 123.59100000000001)), ('B', 192, u'GLU', 0.8604544057635924, (116.396, 171.561, 117.01700000000001)), ('B', 194, u'TYR', 0.8795190323307075, (122.694, 168.806, 114.97)), ('B', 206, u'PRO', 0.8960251545814774, (132.695, 159.141, 104.74300000000001)), ('B', 220, u'ASP', 0.8571011627011065, (141.918, 173.653, 96.74300000000001)), ('B', 238, u'TYR', 0.8781954083398972, (142.754, 170.472, 106.82799999999999)), ('B', 243, u'HIS', 0.8962493325994533, (154.76999999999998, 175.875, 112.51100000000001)), ('B', 251, u'LEU', 0.8429507321218436, (136.969, 168.455, 112.62299999999999)), ('B', 263, u'PRO', 0.8805329437026349, (150.28, 159.28, 111.12799999999999)), ('B', 265, u'GLU', 0.8587747356972354, (149.69, 160.84, 117.99100000000001)), ('B', 271, u'PRO', 0.8897084643153819, (139.117, 160.07399999999998, 128.501)), ('B', 280, u'PHE', 0.8807140331989431, (147.21399999999997, 166.64299999999997, 122.962)), ('B', 282, u'THR', 0.8915844939904979, (151.78, 165.612, 118.006)), ('B', 285, u'GLN', 0.8948345830221264, (155.879, 164.07399999999998, 110.106)), ('B', 301, u'ASP', 0.8716924257166183, (127.61, 168.917, 105.21700000000001)), ('B', 305, u'GLU', 0.8587645134104228, (125.82, 174.76999999999998, 106.91600000000001)), ('B', 311, u'ASP', 0.8117725946736467, (128.394, 186.686, 110.079)), ('B', 312, u'LEU', 0.8335500561866439, (132.07299999999998, 187.16, 109.292)), ('B', 345, u'LYS', 0.8849799908068868, (135.70399999999998, 175.24099999999999, 123.015)), ('C', 1, u'MET', 0.7711198931942151, (167.839, 129.012, 144.471)), ('C', 3, u'LEU', 0.8731395962383635, (164.80800000000002, 135.447, 143.839)), ('C', 15, u'HIS', 0.8939922331647734, (164.71299999999997, 133.121, 131.24499999999998)), ('C', 17, u'ASP', 0.8969876749910503, (169.126, 129.186, 132.73299999999998)), ('C', 18, u'GLY', 0.8796358092073814, (170.80700000000002, 127.975, 135.907)), ('C', 27, u'ILE', 0.8727149363569111, (158.9, 144.206, 144.52200000000002)), ('C', 31, u'THR', 0.8726102524469682, (155.343, 143.971, 139.782)), ('C', 49, u'THR', 0.8740808547581289, (146.69899999999998, 134.43200000000002, 141.58200000000002)), ('C', 55, u'ALA', 0.8849274391427122, (154.748, 133.622, 139.907)), ('C', 56, u'PHE', 0.8979807565856006, (157.976, 135.298, 138.839)), ('C', 69, u'GLU', 0.870977028277651, (149.01899999999998, 123.205, 123.46900000000001)), ('C', 81, u'ALA', 0.8857937432437377, (154.409, 118.32, 134.79899999999998)), ('C', 89, u'TYR', 0.8759644306529176, (149.88600000000002, 131.976, 127.637)), ('C', 97, u'ILE', 0.8722420053324286, (148.66, 124.476, 139.95100000000002)), ('C', 108, u'ILE', 0.8818789052229585, (154.77899999999997, 118.769, 145.875)), ('C', 109, u'ALA', 0.8604049166737521, (157.761, 116.49100000000001, 145.208)), ('C', 113, u'THR', 0.8897115067650647, (158.533, 108.76100000000001, 141.505)), ('C', 136, u'ARG', 0.8907812673479727, (157.162, 103.166, 131.974)), ('C', 153, u'GLN', 0.8849783888111439, (151.64899999999997, 101.988, 120.051)), ('C', 171, u'GLU', 0.8878252983430147, (159.73399999999998, 123.36, 110.05799999999999)), ('C', 176, u'GLN', 0.8798443985165457, (154.4, 116.646, 115.669)), ('C', 189, u'GLN', 0.8893111604733198, (144.82800000000003, 103.224, 123.46900000000001)), ('C', 210, u'MET', 0.8906736737438935, (138.575, 123.424, 100.318)), ('C', 229, u'GLU', 0.8012113687246623, (123.31, 121.763, 99.647)), ('C', 244, u'SER', 0.8894546573459859, (118.893, 141.20499999999998, 115.8)), ('C', 245, u'GLN', 0.8326331625467446, (120.206, 137.88100000000003, 117.109)), ('C', 251, u'LEU', 0.8696065910907282, (133.38400000000001, 127.65799999999999, 112.593)), ('C', 252, u'LEU', 0.8825197277841116, (136.41, 129.912, 112.774)), ('C', 261, u'GLU', 0.8621143701887948, (135.14399999999998, 141.753, 104.568)), ('C', 268, u'ASP', 0.8764568160531916, (136.107, 136.365, 125.012)), ('C', 270, u'ILE', 0.8772594269503239, (135.999, 132.98100000000002, 129.54)), ('C', 296, u'ILE', 0.8691454490533479, (135.30100000000002, 125.64999999999999, 116.90100000000001)), ('C', 297, u'ASP', 0.8963026136525315, (138.288, 125.71000000000001, 114.553)), ('C', 301, u'ASP', 0.8733321164249515, (137.596, 119.315, 105.15599999999999)), ('C', 321, u'VAL', 0.8464125462283462, (132.668, 113.87599999999999, 117.924)), ('C', 331, u'MET', 0.8751289069171936, (123.67899999999999, 120.068, 118.726)), ('C', 345, u'LYS', 0.8669549633725205, (128.094, 123.17299999999999, 122.96400000000001)), ('C', 401, u'U5P', 0.8410850426798774, (123.958, 129.227, 118.13799999999999)), ('C', 402, u'PO4', 0.850774364914468, (121.083, 130.689, 114.96100000000001)), ('D', 1, u'MET', 0.8086573059942899, (141.737, 173.99, 149.34)), ('D', 6, u'VAL', 0.8724680883880197, (145.474, 170.032, 154.755)), ('D', 7, u'ALA', 0.8603336020033361, (148.67399999999998, 168.189, 155.61899999999997)), ('D', 10, u'VAL', 0.8846686197163434, (147.62, 168.636, 160.475)), ('D', 13, u'LYS', 0.9151135118598694, (147.797, 172.559, 164.23)), ('D', 42, u'GLU', 0.8579715375190432, (152.753, 158.591, 158.592)), ('D', 52, u'VAL', 0.873741745389282, (142.591, 157.87800000000001, 150.85700000000003)), ('D', 63, u'ASN', 0.8903394291065938, (134.57, 168.42100000000002, 164.655)), ('D', 74, u'ASN', 0.8725808697575311, (121.37899999999999, 158.024, 164.165)), ('D', 79, u'ASP', 0.8815139220474414, (121.319, 162.329, 157.51399999999998)), ('D', 80, u'ILE', 0.8708747080846552, (124.061, 164.94299999999998, 157.154)), ('D', 81, u'ALA', 0.8717508992296824, (125.769, 167.74499999999998, 159.04899999999998)), ('D', 82, u'ALA', 0.8667543697555781, (125.754, 171.46200000000002, 158.295)), ('D', 93, u'ALA', 0.86896897869198, (135.005, 156.778, 159.541)), ('D', 94, u'PRO', 0.8813866909473197, (132.67899999999997, 159.726, 158.984)), ('D', 115, u'THR', 0.8879477006571403, (117.02199999999999, 172.52700000000002, 147.61499999999998)), ('D', 116, u'ILE', 0.8928114156337517, (119.0, 169.285, 147.525)), ('D', 129, u'ASP', 0.8998811414992641, (126.67299999999999, 181.353, 164.57)), ('D', 137, u'ASN', 0.8966736726021431, (114.013, 177.818, 158.099)), ('D', 146, u'GLU', 0.877193711388854, (123.553, 174.74299999999997, 175.083)), ('D', 152, u'LEU', 0.8817140038597058, (110.733, 176.108, 171.092)), ('D', 153, u'GLN', 0.8333141566072682, (110.298, 173.555, 173.839)), ('D', 157, u'GLY', 0.8838138579482706, (119.595, 165.304, 176.011)), ('D', 161, u'ALA', 0.870710092074602, (128.92000000000002, 163.87800000000001, 174.817)), ('D', 162, u'SER', 0.8947179756743342, (131.815, 162.89600000000002, 172.602)), ('D', 171, u'GLU', 0.8979511043166247, (132.864, 169.804, 183.77299999999997)), ('D', 173, u'VAL', 0.8957913589112766, (132.843, 172.268, 178.944)), ('D', 189, u'GLN', 0.8624649286487844, (107.932, 167.039, 170.423)), ('D', 192, u'GLU', 0.881493793621747, (110.238, 161.059, 176.97)), ('D', 202, u'GLN', 0.8873088873082828, (137.509, 147.86100000000002, 181.695)), ('D', 203, u'GLU', 0.8885003167015281, (136.917, 151.312, 183.19)), ('D', 207, u'ARG', 0.864241997756261, (127.17299999999999, 156.39200000000002, 188.816)), ('D', 229, u'GLU', 0.8112301869030064, (113.21000000000001, 139.107, 194.218)), ('D', 243, u'HIS', 0.8418579286306804, (125.923, 125.751, 181.30700000000002)), ('D', 244, u'SER', 0.8635377458123035, (127.76100000000001, 125.529, 178.02100000000002)), ('D', 245, u'GLN', 0.832409424215558, (125.543, 128.335, 176.71899999999997)), ('D', 257, u'LYS', 0.8913157085830892, (130.967, 142.95800000000003, 187.917)), ('D', 258, u'ARG', 0.906641337703616, (131.924, 139.624, 186.399)), ('D', 264, u'PHE', 0.8816166704968199, (136.14299999999997, 136.99, 179.496)), ('D', 271, u'PRO', 0.8831290038567918, (131.554, 147.27399999999997, 165.324)), ('D', 295, u'VAL', 0.8860607251396408, (123.96600000000001, 144.142, 175.997)), ('D', 296, u'ILE', 0.8456641644372365, (122.55199999999999, 147.531, 176.945)), ('D', 311, u'ASP', 0.8529327235235236, (103.286, 143.05, 183.916)), ('D', 327, u'GLU', 0.8661423692648066, (111.884, 152.55800000000002, 170.815)), ('D', 331, u'MET', 0.8244826908913069, (111.88199999999999, 140.287, 175.14299999999997)), ('D', 335, u'LYS', 0.84595469429293, (106.728, 131.96800000000002, 184.49200000000002)), ('D', 336, u'ASP', 0.8337350499254647, (104.285, 131.75, 187.40200000000002)), ('D', 345, u'LYS', 0.8418396844811247, (116.774, 142.548, 170.893)), ('D', 402, u'PO4', 0.8270755879108637, (119.771, 132.70499999999998, 178.88400000000001)), ('E', 26, u'SER', 0.8311800105022602, (155.90200000000002, 134.296, 149.79299999999998)), ('E', 33, u'TYR', 0.8354010965871161, (155.502, 134.98700000000002, 154.65)), ('E', 45, u'GLU', 0.8480361510370621, (154.79899999999998, 143.495, 157.61499999999998)), ('E', 49, u'THR', 0.8481453362053287, (157.71299999999997, 153.448, 152.20399999999998)), ('E', 51, u'PRO', 0.8539308176544347, (159.607, 148.01899999999998, 148.685)), ('E', 69, u'GLU', 0.8564162321990721, (168.607, 157.04399999999998, 170.311)), ('E', 70, u'VAL', 0.8849820384451068, (167.6, 158.342, 166.904)), ('E', 81, u'ALA', 0.8097573111500772, (175.525, 154.753, 158.99)), ('E', 83, u'ASN', 0.854419050111603, (177.997, 149.22299999999998, 157.584)), ('E', 84, u'THR', 0.8445922649908922, (174.90800000000002, 148.947, 159.77299999999997)), ('E', 129, u'ASP', 0.8412950637211231, (186.847, 147.164, 164.53)), ('E', 137, u'ASN', 0.8864564608064416, (190.138, 159.85800000000003, 157.997)), ('E', 138, u'ALA', 0.8828463342137619, (186.54299999999998, 160.73399999999998, 157.21499999999997)), ('E', 144, u'ILE', 0.8572764261745083, (180.71099999999998, 156.995, 169.46800000000002)), ('E', 145, u'THR', 0.8604750692541397, (182.941, 154.911, 171.677)), ('E', 152, u'LEU', 0.879341634876725, (190.323, 163.612, 170.97299999999998)), ('E', 171, u'GLU', 0.8726864692586775, (173.777, 147.696, 183.74899999999997)), ('E', 173, u'VAL', 0.890840570602592, (175.91299999999998, 146.455, 178.92200000000003)), ('E', 200, u'ASN', 0.8769036887249885, (157.004, 157.375, 178.947)), ('E', 201, u'LEU', 0.8767294322676331, (153.689, 158.10399999999998, 180.621)), ('E', 202, u'GLN', 0.8417584658463656, (152.466, 154.686, 181.667)), ('E', 203, u'GLU', 0.8565520841186901, (155.74899999999997, 153.472, 183.16299999999998)), ('E', 215, u'LEU', 0.863761616537348, (155.208, 162.65800000000002, 192.634)), ('E', 219, u'MET', 0.8740100269122255, (151.577, 170.782, 194.534)), ('E', 225, u'ARG', 0.8742664145876267, (160.12, 172.895, 199.672)), ('E', 229, u'GLU', 0.8534464354229231, (157.112, 180.15200000000002, 194.068)), ('E', 238, u'TYR', 0.893143339478137, (151.17499999999998, 170.444, 186.92700000000002)), ('E', 300, u'LEU', 0.8860134900668207, (163.078, 167.813, 186.944)), ('E', 307, u'ILE', 0.8495286952141797, (164.072, 178.086, 184.602)), ('E', 345, u'LYS', 0.8210859769376573, (158.266, 175.236, 170.76399999999998)), ('E', 402, u'PO4', 0.8205718762183485, (148.26, 177.623, 178.758)), ('F', 1, u'MET', 0.8104125859637795, (126.077, 129.254, 149.447)), ('F', 7, u'ALA', 0.8394143045080904, (127.67599999999999, 138.11599999999999, 155.778)), ('F', 10, u'VAL', 0.8855701526255185, (127.826, 136.948, 160.627)), ('F', 13, u'LYS', 0.8750143679670579, (124.346, 135.126, 164.38000000000002)), ('F', 20, u'GLN', 0.8568444572147562, (118.784, 132.148, 154.937)), ('F', 50, u'LEU', 0.8949636315452069, (143.89600000000002, 133.441, 150.912)), ('F', 78, u'VAL', 0.8646037930147985, (146.583, 116.066, 161.07899999999998)), ('F', 80, u'ILE', 0.8518304259664923, (142.73899999999998, 118.36999999999999, 157.14299999999997)), ('F', 81, u'ALA', 0.8664578838836517, (139.465, 118.44600000000001, 159.048)), ('F', 92, u'ASP', 0.8719965516410308, (144.846, 134.38600000000002, 162.444)), ('F', 96, u'HIS', 0.8686143590308196, (144.79, 123.612, 157.525)), ('F', 109, u'ALA', 0.8529077866868792, (136.08100000000002, 116.67799999999998, 148.63899999999998)), ('F', 114, u'GLU', 0.861118592433645, (136.406, 110.029, 148.847)), ('F', 125, u'ASP', 0.867543330755763, (135.46800000000002, 114.79, 165.79299999999998)), ('F', 136, u'ARG', 0.8739036519571711, (136.631, 103.296, 161.817)), ('F', 146, u'GLU', 0.8902217284059973, (134.542, 112.938, 175.06)), ('F', 150, u'LYS', 0.8845149340006035, (134.118, 100.51400000000001, 171.611)), ('F', 168, u'LEU', 0.8888442743614212, (140.903, 126.889, 179.005)), ('F', 180, u'TYR', 0.8793605713444623, (142.88000000000002, 107.76400000000001, 168.814)), ('F', 203, u'GLU', 0.8538323864882547, (148.24299999999997, 136.134, 183.28)), ('F', 227, u'LYS', 0.8467323939906782, (166.23299999999998, 119.24600000000001, 196.947)), ('F', 251, u'LEU', 0.834948349655683, (160.58800000000002, 127.573, 181.248)), ('F', 252, u'LEU', 0.8722975867482885, (157.57399999999998, 129.845, 181.08200000000002)), ('F', 265, u'GLU', 0.8943888304893822, (160.303, 142.39700000000002, 175.88100000000003)), ('F', 270, u'ILE', 0.8433609519674147, (157.969, 132.98000000000002, 164.329)), ('F', 271, u'PRO', 0.8233241132052694, (154.363, 133.606, 165.38000000000002)), ('F', 282, u'THR', 0.8901352504994688, (165.483, 141.835, 175.859)), ('F', 295, u'VAL', 0.8680485302510267, (160.88500000000002, 128.512, 176.001)), ('F', 296, u'ILE', 0.8586581318680434, (158.651, 125.59400000000001, 176.936)), ('F', 301, u'ASP', 0.865146208965925, (156.344, 119.224, 188.66)), ('F', 309, u'SER', 0.859748428972321, (165.439, 111.339, 185.258)), ('F', 311, u'ASP', 0.8335576944389553, (172.141, 111.065, 183.77399999999997)), ('F', 326, u'THR', 0.868979948115476, (155.96200000000002, 114.486, 169.762)), ('F', 337, u'GLY', 0.8293423226498914, (178.147, 115.74300000000001, 187.765)), ('F', 345, u'LYS', 0.8400827051546859, (165.83100000000002, 123.1, 170.848))]
handle_read_draw_probe_dots_unformatted("/home/ccpem/agnel/gisaid/countries_seq/structure_data/emdb/EMD-22610/7k0r/Model_validation_1/validation_cootdata/molprobity_probe7k0r_0.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
