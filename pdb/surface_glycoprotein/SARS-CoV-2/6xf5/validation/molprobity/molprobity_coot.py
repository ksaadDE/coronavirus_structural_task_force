# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 517 ', 'LEU', 0.0038641224546801523, (220.674, 215.717, 266.341)), ('A', ' 752 ', 'LEU', 0.17218078367208353, (246.082, 244.992, 255.82200000000003)), ('A', ' 760 ', 'CYS', 0.06629180189223112, (245.808, 244.485, 243.64800000000005)), ('A', '1128 ', 'VAL', 0.07280822281461077, (221.136, 214.208, 175.27100000000002)), ('A', '1145 ', 'LEU', 0.030620280112838703, (228.77900000000005, 235.73599999999993, 151.37000000000003)), ('B', ' 517 ', 'LEU', 0.0026854913525351043, (259.775, 232.456, 266.246)), ('B', ' 620 ', 'VAL', 0.14806729070720911, (255.74199999999993, 203.635, 240.73900000000003)), ('B', ' 760 ', 'CYS', 0.04881918721366674, (222.284, 240.103, 243.74900000000005)), ('C', ' 516 ', 'GLU', 0.033909555442694375, (223.089, 257.502, 269.178)), ('C', ' 517 ', 'LEU', 0.01615354614121662, (225.418, 258.209, 266.209)), ('C', ' 524 ', 'VAL', 0.07050140038711657, (227.618, 266.632, 272.812)), ('C', ' 620 ', 'VAL', 0.135384319942104, (252.79099999999994, 268.949, 240.73600000000005)), ('C', '1144 ', 'GLU', 0.22252411715259107, (240.111, 238.781, 155.253)), ('C', '1147 ', 'SER', 0.21694903001327542, (241.574, 237.826, 151.11300000000003))]
data['cbeta'] = [('A', '1143 ', 'PRO', ' ', 0.3438100816098096, (226.04099999999994, 239.345, 155.73200000000003))]
data['probe'] = [(' A 490  PHE  HE2', ' A 492  LEU  HB2', -0.617, (242.642, 206.786, 292.399)), (' C 490  PHE  HE2', ' C 492  LEU  HB2', -0.615, (206.907, 243.619, 292.347)), (' C 126  VAL  H  ', ' C 172  SER  HB2', -0.615, (286.967, 240.46, 270.663)), (' B1028  LYS  O  ', ' B1032  CYS  HB3', -0.612, (226.291, 229.416, 203.92)), (' A1028  LYS  O  ', ' A1032  CYS  HB3', -0.608, (234.334, 245.898, 203.528)), (' C1028  LYS  O  ', ' C1032  CYS  HB3', -0.608, (245.166, 231.069, 203.525)), (' B 490  PHE  HE2', ' B 492  LEU  HB2', -0.607, (256.322, 256.453, 292.877)), (' B 236  THR  OG1', ' B 237  ARG  NH1', -0.604, (240.852, 193.835, 272.723)), (' C 330  PRO  HB3', ' C1305  NAG  H82', -0.602, (228.206, 274.925, 268.102)), (' B 805  ILE HD12', ' B 878  LEU HD11', -0.601, (216.416, 221.262, 200.656)), (' A 126  VAL  H  ', ' A 172  SER  HB2', -0.601, (205.705, 277.992, 270.627)), (' B 126  VAL  H  ', ' B 172  SER  HB2', -0.6, (213.477, 188.485, 270.666)), (' B 381  GLY  HA3', ' B 430  THR  HA ', -0.598, (252.251, 234.087, 269.692)), (' C 236  THR  OG1', ' C 237  ARG  NH1', -0.597, (268.208, 261.469, 272.816)), (' A 805  ILE HD12', ' A 878  LEU HD11', -0.596, (232.656, 258.863, 200.595)), (' A 330  PRO  HB3', ' A1305  NAG  H82', -0.596, (204.747, 210.16, 268.384)), (' C 381  GLY  HA3', ' C 430  THR  HA ', -0.595, (228.215, 250.867, 269.67)), (' C 805  ILE HD12', ' C 878  LEU HD11', -0.595, (257.357, 226.489, 200.406)), (' B 330  PRO  HB3', ' B1305  NAG  H82', -0.588, (272.688, 221.441, 268.28)), (' A 381  GLY  HA3', ' A 430  THR  HA ', -0.58, (225.754, 221.553, 269.645)), (' A 917  TYR  HB3', ' C1129  VAL HG12', -0.579, (228.463, 254.274, 177.918)), (' C 125  ASN  ND2', ' C1302  NAG  O7 ', -0.571, (292.3, 240.888, 274.563)), (' A 125  ASN  ND2', ' A1302  NAG  O7 ', -0.561, (202.274, 281.779, 274.418)), (' B 125  ASN  ND2', ' B1302  NAG  O7 ', -0.557, (211.932, 183.656, 274.489)), (' C 726  ILE HG12', ' C1061  VAL HG22', -0.555, (254.938, 234.0, 211.912)), (' B 726  ILE HG12', ' B1061  VAL HG22', -0.551, (223.739, 219.005, 212.029)), (' A1148  PHE  HA ', ' A1151  GLU  HB2', -0.55, (230.65, 238.052, 145.632)), (' A 726  ILE HG12', ' A1061  VAL HG22', -0.549, (226.867, 253.167, 211.853)), (' B 352  ALA  HA ', ' B 466  ARG  HE ', -0.538, (261.524, 247.791, 284.937)), (' A 880  GLY  O  ', ' A 884  SER  OG ', -0.537, (241.733, 254.962, 195.574)), (' C 352  ALA  HA ', ' C 466  ARG  HE ', -0.534, (211.55, 251.777, 284.964)), (' C 350  VAL HG11', ' C 418  ILE HD12', -0.534, (217.515, 243.219, 286.76)), (' C 422  ASN  ND2', ' C 454  ARG  O  ', -0.532, (213.246, 241.3, 285.544)), (' C1139  ASP  O  ', ' C1143  PRO  HD2', -0.532, (239.902, 243.589, 158.776)), (' A 352  ALA  HA ', ' A 466  ARG  HE ', -0.531, (233.145, 207.04, 285.349)), (' C 557  LYS  NZ ', ' C 574  ASP  OD2', -0.53, (228.573, 268.288, 246.376)), (' A 422  ASN  ND2', ' A 454  ARG  O  ', -0.527, (241.477, 213.424, 285.556)), (' B 422  ASN  ND2', ' B 454  ARG  O  ', -0.526, (251.546, 251.795, 285.439)), (' B 880  GLY  O  ', ' B 884  SER  OG ', -0.524, (214.936, 231.094, 195.649)), (' A 350  VAL HG11', ' A 418  ILE HD12', -0.523, (237.537, 215.452, 286.983)), (' A 792  PRO  HG3', ' C 707  TYR  HB3', -0.523, (241.143, 264.423, 191.331)), (' A 557  LYS  NZ ', ' A 574  ASP  OD2', -0.522, (210.289, 213.09, 246.562)), (' B 350  VAL HG11', ' B 418  ILE HD12', -0.52, (251.067, 247.023, 286.806)), (' A 780  GLU  O  ', ' A 784  GLN  NE2', -0.514, (242.827, 247.606, 209.942)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.514, (229.398, 269.553, 210.654)), (' B 557  LYS  NZ ', ' B 574  ASP  OD2', -0.514, (267.392, 224.905, 246.498)), (' B 780  GLU  O  ', ' B 784  GLN  NE2', -0.508, (221.086, 235.61, 209.879)), (' B 411  ALA  HB3', ' B 414  GLN  HG3', -0.507, (244.861, 241.416, 277.443)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.506, (267.933, 223.662, 210.585)), (' B 342  PHE  HB2', ' B1306  NAG  H82', -0.505, (259.784, 227.962, 287.417)), (' B 490  PHE  CE2', ' B 492  LEU  HB2', -0.504, (256.451, 256.706, 292.448)), (' C 411  ALA  HB3', ' C 414  GLN  HG3', -0.501, (225.63, 240.077, 277.665)), (' C 770  ILE  O  ', ' C 774  GLN  HG2', -0.5, (243.246, 223.75, 225.581)), (' B 707  TYR  HB3', ' C 792  PRO  HG3', -0.5, (257.667, 215.947, 191.334)), (' B 826  VAL  HB ', ' B1057  PRO  HG2', -0.5, (218.549, 217.392, 219.135)), (' B 770  ILE  O  ', ' B 774  GLN  HG2', -0.5, (221.486, 234.079, 225.405)), (' C 342  PHE  HB2', ' C1306  NAG  H82', -0.499, (229.987, 260.068, 287.573)), (' C 780  GLU  O  ', ' C 784  GLN  NE2', -0.498, (242.194, 223.034, 209.938)), (' C 490  PHE  CE2', ' C 492  LEU  HB2', -0.498, (206.619, 242.964, 292.638)), (' A 826  VAL  HB ', ' A1057  PRO  HG2', -0.496, (227.867, 258.978, 219.369)), (' C1029  MET  HE2', ' C1053  PRO  HB3', -0.495, (249.981, 226.046, 206.375)), (' B1029  MET  HE2', ' B1053  PRO  HB3', -0.495, (220.169, 226.943, 206.438)), (' C 738  CYS  SG ', ' C 739  THR  N  ', -0.495, (242.971, 220.086, 244.852)), (' C 826  VAL  HB ', ' C1057  PRO  HG2', -0.493, (259.499, 230.22, 219.413)), (' A 707  TYR  HB3', ' B 792  PRO  HG3', -0.493, (207.696, 225.3, 191.529)), (' A 411  ALA  HB3', ' A 414  GLN  HG3', -0.493, (235.852, 224.289, 277.525)), (' A 986  PRO  HA ', ' A 989  ALA  HB3', -0.492, (241.763, 248.65, 264.154)), (' A 342  PHE  HB2', ' A1306  NAG  H82', -0.492, (216.276, 218.278, 287.562)), (' A1029  MET  HE2', ' A1053  PRO  HB3', -0.49, (235.846, 252.928, 206.293)), (' A 770  ILE  O  ', ' A 774  GLN  HG2', -0.49, (241.67, 248.226, 225.625)), (' A  37  TYR  HB3', ' A 223  LEU  HB3', -0.489, (207.784, 264.511, 255.279)), (' B 976  VAL HG12', ' B 979  ASP  H  ', -0.486, (218.046, 223.905, 257.695)), (' A 976  VAL HG12', ' A 979  ASP  H  ', -0.484, (234.359, 256.375, 258.127)), (' C 444  LYS  H  ', ' C 448  ASN  HB2', -0.484, (220.055, 247.396, 302.741)), (' C 976  VAL HG12', ' C 979  ASP  H  ', -0.484, (254.09, 225.851, 258.108)), (' C  92  PHE  HE1', ' C 265  TYR  HB2', -0.483, (282.83, 256.698, 260.619)), (' A 490  PHE  CE2', ' A 492  LEU  HB2', -0.482, (243.24, 206.705, 292.687)), (' B  37  TYR  HB3', ' B 223  LEU  HB3', -0.481, (224.114, 196.485, 255.11)), (' C 886  TRP  HB3', ' C1035  GLY  HA2', -0.481, (243.856, 226.469, 195.689)), (' A  34  ARG  HG3', ' A 216  LEU HD21', -0.481, (197.061, 265.405, 250.256)), (' C 784  GLN  OE1', ' C1030  SER  OG ', -0.48, (241.151, 224.496, 206.376)), (' B 444  LYS  H  ', ' B 448  ASN  HB2', -0.479, (253.306, 242.422, 303.06)), (' A 984  LEU HD13', ' A 988  GLU  HB2', -0.479, (236.293, 247.5, 266.379)), (' C  34  ARG  HG3', ' C 216  LEU HD21', -0.479, (280.274, 253.343, 250.502)), (' B 738  CYS  SG ', ' B 739  THR  N  ', -0.478, (218.468, 236.91, 244.582)), (' A  92  PHE  HE1', ' A 265  TYR  HB2', -0.478, (192.872, 266.161, 260.661)), (' C 393  THR  HA ', ' C 522  ALA  HA ', -0.477, (224.415, 265.442, 267.764)), (' B 784  GLN  OE1', ' B1030  SER  OG ', -0.477, (222.655, 235.683, 206.64)), (' C  37  TYR  HB3', ' C 223  LEU  HB3', -0.477, (274.795, 244.835, 255.101)), (' A 886  TRP  HB3', ' A1035  GLY  HA2', -0.473, (238.8, 247.05, 196.122)), (' A 444  LYS  H  ', ' A 448  ASN  HB2', -0.473, (232.652, 216.656, 302.98)), (' B 945  LEU HD23', ' B 948  LEU HD12', -0.472, (222.511, 218.395, 216.698)), (' A 303  LEU HD12', ' A 308  VAL HG22', -0.472, (211.819, 251.401, 233.588)), (' B  34  ARG  HG3', ' B 216  LEU HD21', -0.47, (228.554, 187.655, 250.386)), (' C 303  LEU HD12', ' C 308  VAL HG22', -0.47, (261.041, 247.864, 233.57)), (' A 784  GLN  OE1', ' A1030  SER  OG ', -0.468, (241.997, 246.341, 206.705)), (' A 743  CYS  HB3', ' A 749  CYS  HB3', -0.468, (243.422, 251.642, 253.055)), (' A 945  LEU HD23', ' A 948  LEU HD12', -0.467, (227.207, 255.151, 216.63)), (' B 886  TRP  HB3', ' B1035  GLY  HA2', -0.462, (223.681, 232.612, 196.113)), (' B 457  ARG  NH2', ' B 467  ASP  OD1', -0.462, (258.462, 255.95, 280.145)), (' B  92  PHE  O  ', ' B 192  PHE  N  ', -0.462, (226.382, 189.48, 259.011)), (' B 303  LEU HD12', ' B 308  VAL HG22', -0.46, (233.343, 206.584, 233.764)), (' C 945  LEU HD23', ' C 948  LEU HD12', -0.46, (256.53, 232.826, 216.615)), (' C  35  GLY  HA3', ' C  56  LEU  HB3', -0.46, (273.448, 252.093, 252.813)), (' B  92  PHE  HE1', ' B 265  TYR  HB2', -0.459, (230.129, 183.275, 260.621)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.459, (250.577, 235.822, 166.409)), (' B 666  ILE HD11', ' B 672  ALA  HB2', -0.458, (247.005, 204.627, 224.932)), (' B  35  GLY  HA3', ' B  56  LEU  HB3', -0.458, (231.242, 194.274, 253.028)), (' C 231  ILE HD12', ' C 233  ILE HD12', -0.458, (271.729, 249.424, 275.41)), (' A 457  ARG  NH2', ' A 467  ASP  OD1', -0.458, (241.669, 205.269, 280.221)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.456, (228.214, 222.497, 166.851)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.456, (227.571, 248.212, 166.318)), (' C 666  ILE HD11', ' C 672  ALA  HB2', -0.455, (255.805, 260.723, 225.001)), (' C 457  ARG  NH2', ' C 467  ASP  OD1', -0.455, (206.358, 244.752, 280.039)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.451, (256.139, 235.242, 198.736)), (' B1145  LEU  HG ', ' C1148  PHE  CD1', -0.451, (236.62, 233.066, 150.331)), (' A  92  PHE  HD2', ' A 104  TRP  HE1', -0.45, (197.467, 265.356, 264.051)), (' C 449  TYR  O  ', ' C 494  SER  OG ', -0.448, (213.006, 244.88, 298.334)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.448, (224.534, 217.761, 198.43)), (' B 564  GLN  NE2', ' B 577  ARG  O  ', -0.447, (269.791, 223.707, 260.122)), (' A  35  GLY  HA3', ' A  56  LEU  HB3', -0.447, (201.917, 260.124, 252.928)), (' C  80  ASP  O  ', ' C 265  TYR  OH ', -0.445, (284.706, 262.0, 265.262)), (' A 456  PHE  HB2', ' A 491  PRO  HA ', -0.445, (247.445, 208.868, 288.087)), (' C 564  GLN  NE2', ' C 577  ARG  O  ', -0.445, (228.443, 271.527, 259.888)), (' B  80  ASP  O  ', ' B 265  TYR  OH ', -0.445, (234.093, 179.551, 265.172)), (' C  92  PHE  HD2', ' C 104  TRP  HE1', -0.445, (280.231, 253.45, 264.064)), (' A  92  PHE  O  ', ' A 192  PHE  N  ', -0.444, (200.098, 266.341, 258.984)), (' A 231  ILE HD12', ' A 233  ILE HD12', -0.444, (205.157, 259.967, 274.957)), (' A 127  VAL HG13', ' A 171  VAL HG22', -0.443, (204.505, 275.413, 277.028)), (' B 449  TYR  O  ', ' B 494  SER  OG ', -0.442, (254.731, 250.137, 298.396)), (' A 273  ARG  HB2', ' A 275  PHE  HE1', -0.441, (206.347, 253.136, 251.483)), (' A 564  GLN  NE2', ' A 577  ARG  O  ', -0.44, (208.081, 211.363, 260.113)), (' B 350  VAL HG12', ' B 422  ASN  HB3', -0.44, (253.431, 247.477, 285.665)), (' A 449  TYR  O  ', ' A 494  SER  OG ', -0.439, (238.234, 210.963, 298.579)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.439, (225.211, 253.547, 198.711)), (' B 127  VAL HG13', ' B 171  VAL HG22', -0.438, (216.73, 188.572, 277.068)), (' B 231  ILE HD12', ' B 233  ILE HD12', -0.438, (229.397, 197.082, 274.993)), (' B  92  PHE  HD2', ' B 104  TRP  HE1', -0.437, (228.555, 187.697, 264.112)), (' C 412  PRO  HB3', ' C 427  ASP  HA ', -0.437, (223.408, 243.262, 270.512)), (' C 431  GLY  HA2', ' C 515  PHE  CD2', -0.435, (228.378, 254.206, 273.682)), (' C 880  GLY  O  ', ' C 884  SER  OG ', -0.435, (249.226, 219.937, 195.793)), (' A 666  ILE HD11', ' A 672  ALA  HB2', -0.435, (202.916, 240.705, 224.791)), (' C 456  PHE  HB2', ' C 491  PRO  HA ', -0.432, (206.037, 238.505, 288.363)), (' C 743  CYS  HB3', ' C 749  CYS  HB3', -0.431, (245.894, 220.73, 253.211)), (' C 127  VAL HG13', ' C 171  VAL HG22', -0.43, (285.241, 242.626, 276.825)), (' B 456  PHE  HB2', ' B 491  PRO  HA ', -0.429, (252.529, 259.164, 287.977)), (' B 273  ARG  HB2', ' B 275  PHE  HE1', -0.429, (235.032, 201.649, 251.511)), (' A 448  ASN  HB3', ' A 497  PHE  HB2', -0.429, (233.736, 216.561, 300.654)), (' C  92  PHE  O  ', ' C 192  PHE  N  ', -0.429, (279.899, 250.613, 258.872)), (' B 902  MET  HB3', ' B 916  LEU  CD2', -0.428, (222.553, 221.827, 186.41)), (' B 448  ASN  HB3', ' B 497  PHE  HB2', -0.426, (252.342, 243.55, 300.327)), (' B 759  PHE  O  ', ' B 762  GLN  HG2', -0.426, (225.208, 241.407, 241.565)), (' C 350  VAL HG12', ' C 422  ASN  HB3', -0.426, (216.143, 245.062, 285.564)), (' A  80  ASP  O  ', ' A 265  TYR  OH ', -0.426, (187.782, 264.821, 265.323)), (' A 350  VAL HG12', ' A 422  ASN  HB3', -0.423, (236.751, 214.018, 285.612)), (' A 804  GLN  O  ', ' A 816  SER  OG ', -0.423, (228.951, 263.705, 204.964)), (' C 273  ARG  HB2', ' C 275  PHE  HE1', -0.422, (264.905, 252.079, 251.482)), (' C 330  PRO  HG3', ' C 579  PRO  HB2', -0.421, (229.502, 272.868, 265.943)), (' B 330  PRO  HG3', ' B 579  PRO  HB2', -0.42, (270.736, 221.927, 265.916)), (' B 804  GLN  O  ', ' B 816  SER  OG ', -0.42, (213.938, 215.9, 205.242)), (' A 330  PRO  HG3', ' A 579  PRO  HB2', -0.42, (206.15, 211.539, 266.368)), (' C 138  ASP  N  ', ' C 138  ASP  OD1', -0.419, (286.872, 264.574, 276.517)), (' C 738  CYS  HB2', ' C 760  CYS  HB2', -0.419, (240.876, 223.277, 243.392)), (' B  60  SER  OG ', ' B  61  ASN  N  ', -0.418, (239.334, 190.008, 251.432)), (' B 367  VAL HG23', ' B 368  LEU HD12', -0.417, (258.07, 223.536, 284.234)), (' C 462  LYS  O  ', ' C 465  GLU  HB2', -0.417, (212.253, 246.987, 275.312)), (' C 222  ALA  HB2', ' C 285  ILE  HB ', -0.416, (274.793, 241.789, 248.947)), (' B 391  CYS  HA ', ' B 525  CYS  HA ', -0.416, (263.42, 224.2, 270.275)), (' C 137  ASN  N  ', ' C 137  ASN  OD1', -0.416, (285.977, 264.702, 279.025)), (' C 902  MET  HB3', ' C 916  LEU  CD2', -0.416, (253.729, 231.134, 186.849)), (' A1102  TRP  HB2', ' A1135  ASN  ND2', -0.415, (215.345, 231.729, 169.481)), (' A 392  PHE  CD2', ' A 515  PHE  HB3', -0.415, (219.046, 217.215, 271.322)), (' A 391  CYS  HA ', ' A 525  CYS  HA ', -0.415, (211.685, 216.845, 270.318)), (' A 212  LEU  HA ', ' A 212  LEU HD12', -0.414, (189.169, 274.613, 246.819)), (' C1102  TRP  HB2', ' C1135  ASN  ND2', -0.414, (242.01, 254.636, 169.106)), (' A 137  ASN  N  ', ' A 137  ASN  OD1', -0.414, (184.714, 264.562, 279.302)), (' B  33  THR  OG1', ' B 219  GLY  O  ', -0.414, (227.396, 190.5, 245.747)), (' B 138  ASP  N  ', ' B 138  ASP  OD1', -0.413, (234.826, 176.349, 276.646)), (' C 448  ASN  HB3', ' C 497  PHE  HB2', -0.413, (219.909, 246.072, 300.291)), (' A  56  LEU HD12', ' A  57  PRO  HD2', -0.412, (199.434, 256.053, 254.15)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.412, (278.292, 250.86, 245.686)), (' C 804  GLN  O  ', ' C 816  SER  OG ', -0.412, (262.995, 226.55, 205.137)), (' B 222  ALA  HB2', ' B 285  ILE  HB ', -0.412, (220.996, 197.85, 249.174)), (' A 222  ALA  HB2', ' A 285  ILE  HB ', -0.411, (210.036, 266.651, 249.231)), (' B1102  TRP  HB2', ' B1135  ASN  ND2', -0.411, (248.762, 220.075, 169.153)), (' B 137  ASN  N  ', ' B 137  ASN  OD1', -0.411, (235.379, 177.03, 279.177)), (' A 367  VAL HG23', ' A 368  LEU HD12', -0.41, (214.082, 221.751, 283.985)), (' C 401  VAL HG22', ' C 509  ARG  HG2', -0.409, (224.1, 251.126, 292.648)), (' B1145  LEU  HA ', ' B1145  LEU HD12', -0.409, (234.605, 231.637, 152.684)), (' A 389  ASP  HA ', ' A 528  LYS  HE2', -0.409, (208.242, 223.798, 270.178)), (' A 138  ASP  N  ', ' A 138  ASP  OD1', -0.409, (184.409, 265.432, 276.502)), (' C 913  GLN  H  ', ' C 913  GLN  HG2', -0.408, (246.903, 234.141, 180.357)), (' C1028  LYS  O  ', ' C1032  CYS  CB ', -0.407, (244.968, 231.232, 203.532)), (' B 431  GLY  HA2', ' B 515  PHE  CD2', -0.407, (255.596, 231.988, 273.645)), (' B  92  PHE  CE1', ' B 265  TYR  HB2', -0.406, (229.857, 183.706, 260.988)), (' C  60  SER  OG ', ' C  61  ASN  N  ', -0.406, (272.787, 261.511, 251.229)), (' A 611  LEU HD22', ' A 666  ILE HG23', -0.406, (205.704, 237.146, 228.52)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.406, (287.112, 261.266, 256.092)), (' A 366  SER  HA ', ' A 369  TYR  HD2', -0.406, (212.11, 226.774, 280.294)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.405, (227.531, 217.916, 292.684)), (' A  92  PHE  CE1', ' A 265  TYR  HB2', -0.405, (193.027, 266.37, 260.919)), (' B 611  LEU HD22', ' B 666  ILE HG23', -0.405, (248.685, 208.916, 228.899)), (' B1089  PHE  HB3', ' C 913  GLN HE21', -0.405, (247.675, 231.407, 177.302)), (' C  92  PHE  CE1', ' C 265  TYR  HB2', -0.404, (282.938, 256.564, 260.862)), (' C 391  CYS  HA ', ' C 525  CYS  HA ', -0.404, (231.159, 265.478, 270.671)), (' B 818  ILE  O  ', ' B 822  LEU  HG ', -0.403, (217.89, 215.228, 211.317)), (' A  60  SER  OG ', ' A  61  ASN  N  ', -0.403, (194.182, 254.833, 251.252)), (' B 898  PHE  HZ ', ' B1050  MET  HE1', -0.402, (219.842, 222.21, 194.505)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.402, (187.033, 267.166, 255.79)), (' C 364  ASP  N  ', ' C 364  ASP  OD1', -0.402, (235.197, 265.114, 279.653)), (' B  56  LEU HD12', ' B  57  PRO  HD2', -0.402, (235.501, 193.921, 254.032)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.401, (200.463, 264.807, 245.871)), (' C 358  ILE  HB ', ' C 395  VAL HG13', -0.401, (224.465, 262.711, 277.372)), (' C 367  VAL HG23', ' C 368  LEU HD12', -0.401, (234.229, 260.791, 283.913)), (' B 369  TYR  OH ', ' B 384  PRO  O  ', -0.4, (253.215, 222.659, 275.75)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.4, (269.2, 233.237, 262.824)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.4, (216.446, 207.172, 262.882))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
