# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (95.6170000000001, 117.414, 118.15200000000002)), ('B', ' 183 ', 'PRO', None, (117.47700000000002, 103.39799999999997, 125.18900000000002))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 468  GLN  HA ', ' A 731  LEU HD11', -0.781, (102.796, 105.804, 78.525)), (' A 531  THR HG21', ' A 567  THR HG21', -0.727, (88.564, 120.152, 105.121)), (' A 350  GLU  HG3', ' A 632  ILE HD11', -0.724, (102.66, 114.892, 94.689)), (' A 371  LEU HD21', ' B  88  GLN  HG3', -0.703, (88.927, 129.52, 121.269)), (' A 506  PHE  HB3', ' A 515  TYR  HE2', -0.703, (89.697, 116.575, 117.899)), (' A 631  ARG  NH1', ' A 635  SER  OG ', -0.677, (95.348, 110.166, 96.738)), (' A 726  ARG  NH1', ' A 744  GLU  OE1', -0.669, (92.495, 100.984, 67.896)), (' A 332  LYS  NZ ', ' B 104  ASN  OD1', -0.669, (107.139, 138.167, 117.24)), (' A 914  ARG HH21', ' A 920  PHE  HE2', -0.665, (71.539, 82.197, 112.577)), (' A 380  MET  HB3', ' B  94  MET  HE3', -0.657, (100.22, 125.95, 119.397)), (' B 103  LEU HD23', ' B 106  ILE HD11', -0.648, (110.517, 132.274, 114.228)), (' A 225  THR HG22', ' A 226  THR  H  ', -0.641, (113.821, 124.298, 58.114)), (' A 714  LYS  NZ ', ' A 773  GLN  O  ', -0.635, (105.208, 86.782, 72.272)), (' P   6    C  N3 ', ' T  18    G  N1 ', -0.632, (64.752, 98.309, 112.877)), (' A 494  ILE  O  ', ' A 573  GLN  NE2', -0.625, (79.741, 108.685, 105.455)), (' A 372  LEU HD12', ' B  87  MET  HE1', -0.615, (88.75, 123.05, 116.865)), (' A 350  GLU  HG2', ' A 351  LEU  HG ', -0.607, (102.106, 118.157, 95.22)), (' A 506  PHE  HB3', ' A 515  TYR  CE2', -0.597, (88.871, 116.525, 118.229)), (' A 809  PRO  HD2', ' A 817  THR HG21', -0.594, (89.422, 80.026, 93.316)), (' A 691  ASN  HB3', ' A 759  SER  O  ', -0.59, (95.617, 98.604, 97.72)), (' C   1  SER  OG ', ' C   2  LYS  N  ', -0.589, (103.894, 68.67, 121.565)), (' A 844  VAL HG11', ' A 849  LYS  HB2', -0.588, (88.148, 87.0, 124.419)), (' A 710  THR  OG1', ' A 774  GLY  O  ', -0.578, (104.611, 91.288, 74.307)), (' A  32  TYR  HD2', ' A  47  LYS  HB3', -0.575, (116.654, 91.132, 73.007)), (' A 514  LEU HD11', ' B  79  LYS  HB3', -0.575, (80.799, 118.418, 123.598)), (' A 476  VAL HG22', ' A 696  ILE HG22', -0.574, (93.937, 101.093, 86.192)), (' A 576  LEU HD21', ' A 686  THR HG22', -0.569, (87.249, 107.544, 100.292)), (' A 726  ARG  NH2', ' A 744  GLU  OE2', -0.569, (93.16, 98.888, 67.774)), (' A 834  PRO  HG2', ' A 877  TYR  CD1', -0.567, (93.072, 72.752, 107.535)), (' A 819  LEU HD11', ' A 826  TYR  HB3', -0.566, (81.828, 73.284, 90.316)), (' A 206  THR  OG1', ' A 209  ASN  OD1', -0.564, (117.689, 106.498, 68.68)), (' B 132  ILE HG21', ' B 138  TYR  HB2', -0.56, (125.132, 107.943, 123.04)), (' A 715  ILE  O  ', ' A 721  ARG  NH2', -0.55, (103.116, 89.192, 63.249)), (' A 796  GLU  HA ', ' A 799  CYS  SG ', -0.549, (106.529, 85.308, 92.423)), (' A 462  THR  HB ', ' A 627  PRO  HB3', -0.548, (107.399, 106.799, 93.16)), (" P  12    A  H2'", ' P  13    G  C8 ', -0.543, (85.725, 89.053, 111.912)), (' A 452  ASP  OD1', ' A 624  ARG  NH2', -0.539, (105.448, 100.313, 110.628)), (' P   6    C  O2 ', ' T  18    G  N2 ', -0.528, (64.677, 100.555, 112.857)), (' B 159  VAL HG22', ' B 186  VAL HG23', -0.528, (122.125, 114.048, 128.601)), (' A 270  LEU  HG ', ' B 119  ILE HD12', -0.527, (115.91, 127.129, 108.876)), (' C   7  LYS  NZ ', ' C  40  LEU  O  ', -0.523, (106.71, 78.77, 117.677)), (' A 606  TYR  HE1', ' A 614  LEU HD21', -0.522, (90.257, 82.341, 87.505)), (' A 127  LEU HD13', ' A 145  ILE HG21', -0.517, (123.616, 100.707, 83.647)), (" P  12    A  H2'", ' P  13    G  H8 ', -0.514, (86.226, 89.218, 112.297)), (' A 755  MET  HG2', ' A 764  VAL HG22', -0.512, (94.272, 90.925, 86.633)), (' A 209  ASN  HB3', ' A 218  ASP  HB2', -0.508, (121.763, 107.89, 67.688)), (' A 197  ARG  HG2', ' A 197  ARG HH11', -0.506, (117.21, 127.171, 68.543)), (' A 368  PHE  HD1', ' B  84  THR HG22', -0.505, (84.642, 125.396, 119.408)), (' A 836  ARG  NH1', ' A 840  ALA  HB2', -0.503, (91.861, 84.605, 114.224)), (' A 818  MET  HE3', ' A 820  VAL HG11', -0.502, (83.814, 73.153, 99.498)), (' B 103  LEU  O  ', ' B 107  ILE HG12', -0.498, (110.136, 135.853, 113.676)), (' A 623  ASP  N  ', ' A 623  ASP  OD1', -0.497, (102.892, 99.233, 102.924)), (' B 157  GLN  HG3', ' B 189  LEU  HG ', -0.497, (119.397, 123.032, 130.65)), (' A 444  GLN  NE2', ' A 552  ASN  O  ', -0.496, (106.361, 92.097, 116.784)), (' A 712  GLY  HA2', ' A 715  ILE HD12', -0.496, (104.544, 92.041, 68.325)), (' A 503  GLY  HA3', ' A 561  SER  HA ', -0.495, (93.44, 113.541, 114.773)), (' B 171  GLU  HG2', ' B 180  LEU HD21', -0.493, (125.481, 104.889, 133.528)), (' B 143  ASP  OD1', ' B 144  GLY  N  ', -0.492, (131.233, 115.105, 124.016)), (' A 605  VAL HG12', ' A 765  CYS  HB2', -0.491, (89.745, 85.749, 86.319)), (' A 601  MET  O  ', ' A 605  VAL HG23', -0.488, (85.645, 86.992, 89.406)), (' A 682  SER  O  ', ' T   8    G  N2 ', -0.488, (94.202, 101.86, 108.222)), (' C  17  LEU HD22', ' C  22  VAL HG21', -0.485, (108.574, 89.902, 134.682)), (' C  17  LEU  HG ', ' C  59  LEU HD12', -0.483, (107.363, 85.441, 134.316)), (' A 291  ASP  OD2', ' A 735  ARG  NH2', -0.482, (105.68, 118.004, 72.751)), (' A 837  ILE  O  ', ' A 884  TYR  OH ', -0.479, (89.526, 79.178, 115.64)), (' A 388  LEU HD12', ' A 400  ALA  HB2', -0.477, (111.466, 115.904, 121.204)), (' A 335  VAL  O  ', ' A 338  VAL HG12', -0.474, (95.557, 137.84, 120.716)), (' P   6    C  N4 ', ' T  18    G  O6 ', -0.473, (65.662, 96.397, 112.653)), (' A 892  HIS  CD2', ' A 912  THR  HG1', -0.47, (72.163, 78.31, 123.232)), (' A 836  ARG HH12', ' A 840  ALA  HB2', -0.466, (91.678, 84.849, 114.406)), (' A 760  ASP  HB2', " P  15    G  O3'", -0.464, (94.938, 94.711, 100.252)), (' A 761  ASP  OD2', ' A 813  CYS  N  ', -0.464, (93.349, 87.373, 99.064)), (' A 225  THR HG22', ' A 226  THR  N  ', -0.463, (114.515, 124.529, 58.285)), (' A 601  MET  HE2', ' A 756  MET  SD ', -0.462, (86.45, 88.344, 93.678)), (' A 197  ARG  NE ', ' A 289  TYR  OH ', -0.462, (117.403, 125.127, 70.958)), (' A 254  GLU  OE2', ' A 286  TYR  OH ', -0.458, (122.473, 119.743, 87.943)), (' C  22  VAL HG13', ' C  28  LEU HD23', -0.458, (111.663, 92.354, 134.27)), (' A 915  TYR  O  ', ' A 921  TYR  OH ', -0.456, (76.543, 77.685, 114.805)), (' C  13  LEU  HA ', ' C  16  VAL HG22', -0.453, (103.893, 84.018, 132.981)), (' A 612  PRO  HG2', ' A 805  LEU HD11', -0.45, (89.652, 79.045, 82.693)), (' A 532  LYS  HD3', ' A 650  HIS  HB3', -0.45, (86.248, 123.515, 95.639)), (' A 890  LYS  HB3', ' A 890  LYS  HE3', -0.448, (82.993, 73.054, 124.702)), (' A 238  TYR  O  ', ' A 242  MET  HG3', -0.447, (111.471, 110.795, 81.584)), (' A 684  ASP  OD1', ' A 685  ALA  N  ', -0.446, (91.559, 108.709, 104.721)), (' A 171  ILE HD12', ' A 174  VAL  HB ', -0.446, (124.051, 98.662, 94.549)), (' A 606  TYR  CE1', ' A 805  LEU HD22', -0.446, (89.39, 80.641, 86.83)), (' A 450  ILE  HA ', ' A 450  ILE HD12', -0.442, (109.199, 105.431, 115.79)), (' A 299  VAL HG22', ' A 652  PHE  CE2', -0.442, (97.923, 125.836, 94.316)), (' A 830  PRO  O  ', ' A 868  PRO  HG3', -0.442, (85.027, 78.694, 103.422)), (' A 396  PHE  HB3', ' A 675  VAL HG22', -0.441, (111.248, 114.698, 108.373)), (' B 145  THR HG23', ' B 146  THR HG23', -0.441, (130.111, 121.655, 128.466)), (' A 749  LEU  O  ', ' A 753  PHE  N  ', -0.44, (92.195, 90.906, 79.94)), (' A 818  MET  HE1', ' A 868  PRO  O  ', -0.439, (84.762, 73.117, 102.673)), (' A 654  ARG  O  ', ' A 658  GLU  OE1', -0.439, (92.642, 117.268, 98.749)), (' A 472  VAL HG22', ' A 700  VAL HG12', -0.438, (98.588, 101.202, 82.048)), (' A 291  ASP  N  ', ' A 291  ASP  OD1', -0.437, (108.125, 119.531, 75.207)), (' C  14  LEU HD22', ' C  36  HIS  CG ', -0.436, (106.52, 86.816, 125.058)), (' B 101  ASP  OD1', ' B 102  ALA  N  ', -0.435, (113.147, 135.329, 120.665)), (' A 389  LEU  HB3', ' B 130  VAL HG22', -0.435, (119.183, 115.906, 119.551)), (' A 758  LEU  O  ', ' A 760  ASP  N  ', -0.435, (93.762, 95.423, 98.067)), (' A 540  THR HG22', ' A 560  VAL  HA ', -0.434, (95.745, 111.608, 110.966)), (' A 834  PRO  HG2', ' A 877  TYR  CE1', -0.434, (93.72, 72.888, 107.774)), (' A 124  MET  O  ', ' A 128  VAL HG23', -0.433, (119.493, 103.737, 79.311)), (' A 147  VAL HG21', ' A 154  ASP  OD1', -0.429, (131.697, 92.501, 88.495)), (' A 323  PRO  HB3', ' A 349  ARG HH22', -0.429, (113.948, 117.107, 103.15)), (' A 205  LEU HD12', ' A 234  VAL HG12', -0.428, (115.791, 114.749, 72.541)), (' A 689  TYR  O  ', ' A 693  VAL HG23', -0.427, (91.452, 103.667, 94.068)), (' A 608  ASP  OD1', ' A 751  LYS  NZ ', -0.426, (86.637, 86.784, 74.701)), (' A 867  TYR  N  ', ' A 868  PRO  HD2', -0.426, (83.346, 77.235, 107.213)), (' B 116  PRO  HB2', ' B 119  ILE HG12', -0.425, (111.41, 126.405, 107.965)), (' A 439  HIS  HB3', ' A 548  ILE HG23', -0.425, (97.012, 84.725, 114.907)), (' A 887  TYR  CZ ', ' A 891  LEU HD11', -0.424, (84.376, 77.095, 124.598)), (' A 123  THR  HA ', ' A 211  ASP  HA ', -0.424, (125.562, 104.062, 75.111)), (' A 120  THR  OG1', ' A 122  TYR  O  ', -0.423, (128.309, 102.29, 75.605)), (' A 597  GLY  O  ', ' A 601  MET  HG3', -0.422, (81.715, 87.054, 94.578)), (' A 603  LYS  HA ', ' A 603  LYS  HD2', -0.42, (83.191, 81.45, 87.141)), (' A 350  GLU  N  ', ' A 350  GLU  OE1', -0.417, (105.605, 117.433, 96.565)), (' A 480  PHE  CZ ', ' A 693  VAL HG22', -0.417, (90.748, 103.556, 91.248)), (' A 544  LEU HD23', ' A 556  THR HG22', -0.416, (103.203, 100.447, 115.395)), (' A 844  VAL  CG1', ' A 849  LYS  HB2', -0.414, (88.831, 87.284, 124.327)), (" P  13    G  H2'", ' P  14    U  C6 ', -0.414, (88.43, 89.639, 108.231)), (' A 818  MET  HE1', ' A 871  LYS  HB2', -0.413, (84.448, 71.826, 101.294)), (' A 350  GLU  HG3', ' A 632  ILE  CD1', -0.413, (102.476, 115.074, 94.464)), (' A 631  ARG HH12', ' A 635  SER  HG ', -0.41, (94.332, 110.991, 97.487)), (' A 840  ALA  O  ', ' A 858  ARG  NH1', -0.41, (89.533, 84.058, 119.036)), (' A 224  GLN HE21', ' A 225  THR  H  ', -0.41, (117.473, 121.907, 58.092)), (' B 161  ASP  N  ', ' B 161  ASP  OD1', -0.408, (117.706, 107.068, 132.326)), (' A  38  TYR  OH ', ' A 729  GLU  OE1', -0.407, (103.17, 106.588, 65.323)), (' A 270  LEU  O  ', ' B 119  ILE HG13', -0.407, (114.156, 127.895, 107.827)), (' A 470  LEU  O  ', ' A 473  VAL HG12', -0.406, (97.244, 108.884, 82.205)), (' A 859  PHE  CZ ', ' A 887  TYR  HE2', -0.406, (86.011, 78.805, 122.593)), (' A 756  MET  O  ', ' A 762  ALA  HA ', -0.403, (92.757, 91.026, 92.966)), (' B  80  ARG  O  ', ' B  84  THR HG23', -0.401, (82.739, 125.038, 122.06)), (' C   8  CYS  O  ', ' C  12  VAL HG13', -0.401, (100.577, 80.199, 127.941)), (' A 409  THR  OG1', ' C  23  GLU  OE1', -0.401, (104.127, 97.505, 128.185)), (' A 197  ARG  HG2', ' A 197  ARG  NH1', -0.4, (117.777, 126.953, 68.74)), (' A 242  MET  SD ', ' A 463  MET  HE2', -0.4, (110.323, 112.737, 84.385))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
