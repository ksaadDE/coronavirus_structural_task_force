# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('E', ' 393 ', 'THR', 0.049323589925000515, (-3.87711, 1.83613, -48.48563)), ('H', '  66 ', 'THR', 0.04928262295873808, (-13.52246, 47.437320000000014, -74.49754))]
data['omega'] = [('C', ' 108 ', 'PRO', None, (-49.34648, 8.054280000000004, -89.09242)), ('C', ' 153 ', 'PRO', None, (-72.91115, 30.505749999999995, -92.06373)), ('C', ' 155 ', 'PRO', None, (-72.66471, 25.720670000000005, -96.0331)), ('D', ' 145 ', 'PRO', None, (-54.7858, 24.027990000000006, -118.4298)), ('H', ' 115 ', 'PRO', None, (-33.39776, 51.23545, -57.2126)), ('H', ' 160 ', 'PRO', None, (-18.902850000000008, 73.91698, -68.11021)), ('H', ' 162 ', 'PRO', None, (-24.19152, 71.323, -66.20429)), ('L', '   8 ', 'PRO', None, (-43.83568, 52.60322, -82.02807)), ('L', '  95 ', 'PRO', None, (-24.652780000000007, 41.12209, -72.86251000000001)), ('L', ' 141 ', 'PRO', None, (-49.87133, 73.82858, -80.86384))]
data['rota'] = [('H', '  73 ', 'VAL', 0.0712756383668595, (-16.71412, 49.04895, -54.306850000000004)), ('L', '  33 ', 'LEU', 0.21824553812174854, (-38.58876, 42.00204, -70.22167)), ('L', '  91 ', 'LEU', 0.0, (-33.24967, 40.78084, -68.62025)), ('L', ' 197 ', 'THR', 0.07717386604813235, (-46.90807, 83.55660000000003, -85.78591)), ('E', ' 392 ', 'PHE', 0.2653938364027163, (-2.55836, 3.56124, -45.36074000000001)), ('C', '  50 ', 'TRP', 0.06439804324131118, (-45.25168, 18.55848, -80.45859000000002)), ('C', ' 101 ', 'GLU', 0.14212105429347344, (-40.04751, 12.330040000000004, -82.73242)), ('D', '  18 ', 'ILE', 0.09450237154709894, (-39.85893, 15.993860000000005, -112.49685)), ('D', '  68 ', 'LYS', 0.28451263594871845, (-30.10222, 16.36585, -100.88634))]
data['cbeta'] = []
data['probe'] = [(' L 145  LYS  HB3', ' L 197  THR HG22', -0.794, (-44.703, 81.829, -87.948)), (' L  90  GLN HE21', ' L  93  SER  H  ', -0.77, (-30.346, 38.878, -71.491)), (' H 202  LEU  O  ', ' H 401  HOH  O  ', -0.751, (-42.04, 93.684, -58.347)), (' C  69  THR  OG1', ' C  84  ARG  NH2', -0.73, (-51.698, 26.575, -73.275)), (' L  99  GLY  O  ', ' L 301  HOH  O  ', -0.708, (-32.852, 52.307, -76.484)), (' H  31  SER  HA ', ' H 301  PG0  H41', -0.678, (-27.815, 42.528, -49.14)), (' L 178  THR  O  ', ' L 302  HOH  O  ', -0.63, (-29.773, 85.12, -80.319)), (' H  13  LYS  HB2', ' H  16  GLU  HG3', -0.613, (-8.079, 65.423, -69.955)), (' H  68  ARG  NH2', ' H  91  ASP  OD2', -0.609, (-14.298, 56.756, -74.238)), (' C  99  ASP  OD1', ' C 601  HOH  O  ', -0.593, (-41.923, 13.245, -86.134)), (' D 136  LEU HD22', ' D 182  LEU HD23', -0.592, (-66.041, 46.143, -111.432)), (' C 125  PRO  HB3', ' C 151  TYR  HB3', -0.589, (-75.837, 33.603, -98.152)), (' E 403  ARG  HG2', ' E 505  TYR  HA ', -0.588, (-27.207, 25.731, -56.253)), (' L  90  GLN  NE2', ' L  93  SER  H  ', -0.581, (-30.319, 39.421, -71.808)), (' H 156  LYS  NZ ', ' H 184  GLN  OE1', -0.574, (-25.13, 84.764, -75.494)), (' L  90  GLN  NE2', ' L  93  SER  O  ', -0.569, (-29.591, 39.899, -71.937)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.568, (-43.172, 54.705, -67.894)), (' E 439  ASN  O  ', ' E 443  SER  OG ', -0.555, (-19.504, 33.812, -56.603)), (' D 117  PRO  HB3', ' D 143  PHE  HB3', -0.523, (-60.385, 28.841, -119.137)), (' C  50  TRP  NE1', ' C 101  GLU  OE1', -0.476, (-42.454, 14.016, -79.371)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.473, (-18.259, 20.41, -47.515)), (' H   8  GLY  HA3', ' H  20  LEU HD23', -0.46, (-18.194, 62.385, -60.658)), (' L 210  ASN  HB2', ' L 213  GLU  HB2', -0.453, (-38.519, 103.627, -76.73)), (' H  68  ARG HH22', ' H  91  ASP  CG ', -0.452, (-15.397, 56.497, -73.813)), (' L  18  ARG  HG3', ' L  76  SER  HA ', -0.451, (-55.54, 52.095, -72.955)), (' C 102  LEU  HA ', ' C 102  LEU HD23', -0.446, (-36.544, 14.081, -84.246)), (' E 379  CYS  SG ', ' E 384  PRO  HG3', -0.445, (-12.689, 13.63, -39.883)), (' L 120  PRO  HD3', ' L 132  VAL HG22', -0.441, (-32.031, 93.954, -75.94)), (' D  14  PRO  HD3', ' D 110  LEU  O  ', -0.439, (-49.664, 14.816, -119.117)), (' C  67  ARG  NH2', ' C  90  ASP  OD1', -0.434, (-54.114, 32.229, -84.172)), (' H 101  ILE HG21', ' H 112  TRP  CE2', -0.423, (-35.902, 43.19, -60.077)), (' C 190  VAL HG11', ' C 200  TYR  CE1', -0.419, (-82.843, 28.494, -119.201)), (' E 438  SER  HB3', ' E 509  ARG  HG3', -0.417, (-15.021, 26.807, -54.063)), (' H   6  GLU  HB3', ' H  97  CYS  SG ', -0.415, (-24.559, 57.881, -58.579)), (' C 205  ASN  ND2', ' C 207  LYS  HE3', -0.409, (-81.875, 22.798, -97.745)), (' L  48  ILE HD13', ' L  54  LEU  HA ', -0.409, (-46.218, 46.782, -63.787)), (' C   2  VAL HG13', ' C  27  TYR  CD1', -0.408, (-51.567, 4.361, -84.391)), (' L 105  GLU  HG2', ' L 106  ILE  N  ', -0.405, (-47.731, 65.135, -76.344)), (' C  33  GLY  O  ', ' C  99  ASP  N  ', -0.404, (-46.246, 11.13, -83.231)), (' E 338  PHE  HE2', ' E 363  ALA  HB1', -0.401, (-1.303, 14.798, -45.979)), (' C 165  LEU HD21', ' C 188  VAL HG21', -0.401, (-81.036, 26.451, -116.681)), (' H  40  ARG  HB3', ' H  50  ILE HD11', -0.4, (-22.701, 55.026, -69.5))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
