# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  99 ', 'ILE', 0.11180180390583738, (94.274, 131.201, 115.44)), ('A', ' 229 ', 'LEU', 0.01212379527180547, (138.25900000000004, 150.21199999999996, 120.661)), ('B', '  99 ', 'ILE', 0.11254279247638954, (162.54700000000005, 125.62199999999996, 115.44)), ('B', ' 229 ', 'LEU', 0.012105352699282756, (118.55800000000005, 106.61299999999997, 120.644))]
data['cbeta'] = []
data['probe'] = [(' A1000  EUJ  H6 ', ' A1000  EUJ  O11', -0.755, (106.485, 141.061, 146.343)), (' B1000  EUJ  H6 ', ' B1000  EUJ  O11', -0.754, (149.816, 115.718, 146.456)), (' B1000  EUJ  H27', ' B1000  EUJ  O12', -0.697, (148.155, 114.373, 143.556)), (' A1000  EUJ  H27', ' A1000  EUJ  O12', -0.693, (108.701, 142.086, 143.996)), (' A 210  ARG HH11', ' A1000  EUJ  H19', -0.668, (111.774, 145.124, 139.332)), (' B 210  ARG HH11', ' B1000  EUJ  H19', -0.658, (145.146, 111.672, 139.386)), (' A 185  ARG  HD2', ' A 188  ARG  HD2', -0.646, (96.614, 141.305, 117.956)), (' B 185  ARG  HD2', ' B 188  ARG  HD2', -0.644, (160.837, 115.788, 117.631)), (' A 442  ALA  HB2', ' A 557  ARG HH11', -0.603, (111.907, 94.803, 128.277)), (' B 442  ALA  HB2', ' B 557  ARG HH11', -0.596, (144.914, 161.611, 128.282)), (' B 210  ARG  NH1', ' B1000  EUJ  H19', -0.592, (145.215, 110.994, 139.429)), (' A 210  ARG  NH1', ' A1000  EUJ  H19', -0.575, (111.473, 145.876, 139.539)), (' B 344  MET  SD ', ' B 361  ASN  ND2', -0.564, (170.057, 130.502, 171.67)), (' A 344  MET  SD ', ' A 361  ASN  ND2', -0.56, (86.324, 126.667, 171.272)), (' B 446  LEU HD11', ' B 552  VAL  HA ', -0.551, (142.914, 156.021, 121.036)), (' B 114  ARG  NH2', ' B 637  ASP  OD2', -0.546, (152.497, 122.428, 104.629)), (' A 114  ARG  NH2', ' A 637  ASP  OD2', -0.542, (104.232, 134.478, 104.729)), (' B 574  GLY  O  ', ' B 578  ASN  ND2', -0.54, (143.145, 135.16, 140.976)), (' B  59  TYR  OH ', ' B 330  ARG  NH2', -0.54, (152.325, 134.279, 155.003)), (' A 574  GLY  O  ', ' A 578  ASN  ND2', -0.539, (113.568, 122.069, 141.195)), (' A 446  LEU HD11', ' A 552  VAL  HA ', -0.536, (113.576, 101.108, 120.929)), (' A 477  ILE HD13', ' A 512  LEU  HB3', -0.534, (103.505, 96.043, 120.28)), (' A  59  TYR  OH ', ' A 330  ARG  NH2', -0.527, (104.543, 122.808, 154.557)), (' B 477  ILE HD13', ' B 512  LEU  HB3', -0.525, (153.378, 160.861, 120.428)), (' A 381  GLU  OE2', ' A 384  ARG  NH1', -0.523, (90.846, 108.816, 165.882)), (' A 690  LEU HD21', ' B 690  LEU HD21', -0.516, (128.569, 128.753, 133.502)), (' A  57  ILE HD13', ' A 371  LEU HD13', -0.495, (96.415, 120.5, 155.763)), (' B 381  GLU  OE2', ' B 384  ARG  NH1', -0.495, (166.22, 148.146, 166.043)), (' B 586  LEU  HB2', ' B 685  TRP  HE1', -0.49, (143.95, 126.538, 129.466)), (' A 362  LEU  HA ', ' A 365  VAL HG12', -0.488, (90.371, 122.112, 167.247)), (' B  57  ILE HD13', ' B 371  LEU HD13', -0.485, (160.244, 136.76, 155.797)), (' A  62  ILE HD11', ' A 333  GLY  HA2', -0.483, (98.202, 132.039, 159.86)), (' A 586  LEU  HB2', ' A 685  TRP  HE1', -0.482, (112.867, 130.316, 129.449)), (' B 362  LEU  HA ', ' B 365  VAL HG12', -0.478, (166.615, 134.612, 166.807)), (' B 593  PHE  O  ', ' B 673  TYR  OH ', -0.477, (146.634, 117.397, 117.562)), (' B  62  ILE HD11', ' B 333  GLY  HA2', -0.474, (158.332, 125.009, 160.136)), (' A 623  CYS  HB3', ' B 623  CYS  HB3', -0.471, (127.992, 128.278, 98.933)), (' A 593  PHE  O  ', ' A 673  TYR  OH ', -0.463, (110.223, 139.375, 117.597)), (' A1000  EUJ  H17', ' A1000  EUJ  H33', -0.461, (106.269, 143.508, 138.2)), (' A 435  ASP  OD1', ' A 487  LYS  NZ ', -0.46, (107.752, 93.569, 136.86)), (' B 666  SER  O  ', ' B 666  SER  OG ', -0.46, (143.431, 110.706, 107.501)), (' A 586  LEU HD13', ' A 685  TRP  CE2', -0.452, (114.052, 130.31, 127.638)), (' B 586  LEU HD13', ' B 685  TRP  CE2', -0.451, (142.746, 126.478, 127.616)), (' A 666  SER  O  ', ' A 666  SER  OG ', -0.451, (113.39, 146.109, 107.446)), (' B1000  EUJ  H17', ' B1000  EUJ  H33', -0.448, (150.355, 113.204, 138.117)), (' B 700  LYS  HA ', ' B 700  LYS  HD3', -0.447, (135.453, 136.366, 152.573)), (' B 446  LEU  HG ', ' B 555  PHE  HD1', -0.447, (140.746, 157.32, 123.86)), (' A 108  THR  OG1', ' A 109  ALA  N  ', -0.445, (106.37, 125.115, 105.216)), (' B 192  PRO  HB3', ' B 588  VAL HG22', -0.445, (152.304, 119.962, 129.286)), (' A1000  EUJ  H9 ', ' A1000  EUJ  P1 ', -0.444, (107.884, 141.319, 145.19)), (' B 108  THR  OG1', ' B 109  ALA  N  ', -0.441, (150.681, 131.335, 105.383)), (' A 192  PRO  HB3', ' A 588  VAL HG22', -0.441, (104.716, 136.715, 129.655)), (' B 207  LYS  NZ ', ' B1000  EUJ  O53', -0.439, (146.068, 116.859, 147.365)), (' B 301  LEU  HA ', ' B 301  LEU HD23', -0.435, (121.857, 124.296, 127.574)), (' A 446  LEU  HG ', ' A 555  PHE  HD1', -0.432, (116.31, 99.832, 124.139)), (' A 464  ARG  HE ', ' A 465  ASP  H  ', -0.431, (115.463, 92.958, 102.038)), (' A 653  ASN HD22', ' B 274  ASN  H  ', -0.428, (124.175, 125.821, 113.526)), (' B 485  LEU  HA ', ' B 485  LEU HD12', -0.428, (159.779, 166.618, 132.621)), (' B 440  LEU  HA ', ' B 440  LEU HD23', -0.427, (138.77, 165.428, 129.158)), (' A 274  ASN  H  ', ' B 653  ASN HD22', -0.427, (133.02, 131.188, 113.392)), (' B 366  LEU  O  ', ' B 376  LYS  NZ ', -0.427, (167.008, 139.059, 159.792)), (' B 464  ARG  HE ', ' B 465  ASP  H  ', -0.426, (141.747, 163.993, 101.887)), (' B 332  LEU  HA ', ' B 332  LEU HD23', -0.425, (153.961, 123.643, 163.53)), (' A 273  ASN  N  ', ' A 273  ASN  OD1', -0.423, (131.656, 134.651, 113.374)), (' A 638  ASP  N  ', ' A 638  ASP  OD1', -0.423, (103.751, 133.14, 110.417)), (' B 513  LEU  HA ', ' B 513  LEU HD12', -0.422, (156.828, 163.175, 120.225)), (' B 129  GLU  OE1', ' B 187  ARG  NE ', -0.419, (165.173, 115.698, 121.66)), (' A 700  LYS  HA ', ' A 700  LYS  HD3', -0.418, (121.032, 120.474, 152.954)), (' A 379  MET  HB2', ' A 379  MET  HE3', -0.417, (97.514, 115.499, 161.677)), (' B 638  ASP  N  ', ' B 638  ASP  OD1', -0.413, (153.099, 124.085, 110.239)), (' A 327  LEU  HA ', ' A 327  LEU HD23', -0.412, (107.393, 126.258, 157.898)), (' A  93  ILE  HA ', ' A  93  ILE HD13', -0.411, (93.153, 134.454, 125.506)), (' A 176  LEU  HA ', ' A 176  LEU HD12', -0.41, (85.643, 144.704, 115.887)), (' A 129  GLU  OE1', ' A 187  ARG  NE ', -0.409, (91.651, 141.071, 121.534)), (' B 623  CYS  HA ', ' B 628  GLN  HG3', -0.408, (130.896, 127.027, 97.765)), (' A 230  PHE  HD2', ' A 295  PHE  HD1', -0.406, (138.393, 142.767, 120.558)), (' B 341  LEU  HA ', ' B 341  LEU HD23', -0.404, (167.274, 127.168, 169.126)), (' B 212  SER  HB3', ' B 314  GLN  HG3', -0.402, (135.251, 117.279, 140.649)), (' B 273  ASN  N  ', ' B 273  ASN  OD1', -0.401, (125.425, 121.697, 113.233)), (' B1000  EUJ  O12', ' B1000  EUJ  O6 ', -0.401, (148.528, 116.136, 145.069))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
