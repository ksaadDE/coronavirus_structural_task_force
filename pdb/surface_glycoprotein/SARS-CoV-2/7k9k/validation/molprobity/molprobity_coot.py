# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('L', '   8 ', 'PRO', None, (207.624, 127.757, 118.114)), ('L', '  95 ', 'PRO', None, (192.531, 146.545, 120.891))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 377  PHE  HE2', ' A 384  PRO  HB3', -0.899, (181.875, 159.607, 139.14)), (' A 406  GLU  HG2', ' A 418  ILE HG13', -0.861, (164.1, 146.387, 129.274)), (' H  45  LEU HD21', ' L  44  PRO  HG3', -0.742, (197.395, 138.28, 106.654)), (' H 107  PHE  O  ', ' H 110  TRP  NE1', -0.709, (190.803, 136.722, 105.528)), (' L  33  ILE  HB ', ' L  51  ALA  HB2', -0.688, (191.013, 130.313, 118.566)), (' A 377  PHE  CE2', ' A 384  PRO  HB3', -0.687, (182.241, 159.25, 138.674)), (' A 421  TYR  CD1', ' A 457  ARG  HB3', -0.678, (160.2, 137.013, 134.964)), (' L   2  ILE HG21', ' L  29  ILE HD11', -0.675, (194.33, 138.325, 124.115)), (' H   6  GLN HE22', ' H  96  CYS  H  ', -0.674, (194.006, 144.095, 100.247)), (' H  40  ARG  HD2', ' H  43  GLN HE22', -0.663, (209.089, 145.145, 108.251)), (' H  20  MET  HE3', ' H  81  MET  HE3', -0.635, (196.337, 150.884, 102.869)), (' A 455  LEU  N  ', ' A 491  PRO  O  ', -0.613, (161.042, 136.075, 128.353)), (' A 497  PHE  CE2', ' A 507  PRO  HB3', -0.587, (170.641, 147.53, 120.872)), (' A 355  ARG  HG3', ' A 355  ARG HH11', -0.57, (179.924, 140.53, 138.276)), (' H 105  ARG  O  ', ' L  34  HIS  NE2', -0.56, (187.588, 135.661, 114.224)), (' L  37  GLN HE21', ' L  45  ARG  HD3', -0.546, (195.331, 128.874, 102.47)), (' A 407  VAL HG11', ' A 508  TYR  HD2', -0.546, (170.752, 153.168, 128.301)), (' A 367  VAL HG13', ' A 368  LEU HD12', -0.527, (189.735, 154.735, 132.299)), (' A 424  LYS  HZ2', ' A 463  PRO  HG3', -0.526, (168.156, 141.463, 144.974)), (' H  14  PRO  HD3', ' H 119  SER  O  ', -0.523, (211.376, 158.179, 97.062)), (' A 426  PRO  HG3', ' A 463  PRO  HB3', -0.518, (171.402, 141.698, 144.622)), (' A 365  TYR  HD2', ' A 387  LEU  HB3', -0.514, (187.544, 155.278, 141.487)), (' A 405  ASP  O  ', ' A 408  ARG  HG2', -0.512, (164.242, 153.858, 131.612)), (' A 437  ASN  HA ', ' A 508  TYR  CD1', -0.502, (173.068, 153.905, 123.933)), (' A 355  ARG  HG3', ' A 355  ARG  NH1', -0.5, (179.58, 140.324, 138.281)), (' A 495  TYR  HB3', ' A 497  PHE  CE1', -0.492, (166.988, 145.264, 120.805)), (' A 358  ILE  HB ', ' A 395  VAL HG13', -0.492, (187.581, 144.446, 139.535)), (' A 365  TYR  CD2', ' A 387  LEU  HB3', -0.49, (187.282, 155.052, 141.271)), (' H  66  SER  OG ', ' H  67  GLU  OE1', -0.489, (200.578, 159.056, 112.723)), (' A 404  GLY  N  ', ' A 504  GLY  O  ', -0.481, (166.576, 152.175, 124.677)), (' H  39  GLN  O  ', ' H  92  ALA  HB1', -0.478, (203.866, 146.257, 104.443)), (' H  51  ILE HD13', ' H  72  VAL HG23', -0.476, (184.987, 153.685, 105.579)), (' A 425  LEU  H  ', ' A 425  LEU HD12', -0.471, (168.879, 145.86, 139.74)), (' H  36  TRP  CE3', ' H  81  MET  HE2', -0.47, (194.353, 149.997, 103.581)), (' L   4  LEU HD23', ' L  25  ALA  HA ', -0.469, (197.728, 135.734, 123.617)), (' H  19  LYS  NZ ', ' H  80  TYR  HD2', -0.469, (189.629, 157.9, 98.522)), (' A 457  ARG HH12', ' A 461  LEU HD21', -0.469, (165.672, 134.579, 137.206)), (' H  40  ARG  HB3', ' H  43  GLN  NE2', -0.467, (207.767, 144.409, 108.156)), (' A 338  PHE  HB3', ' B   1  NAG  H81', -0.467, (188.911, 150.689, 131.121)), (' H  10  GLU  N  ', ' H  10  GLU  OE1', -0.466, (200.565, 150.98, 94.093)), (' H  40  ARG  NE ', ' H  89  GLU  O  ', -0.454, (208.706, 148.795, 106.561)), (' H  98  ARG  NH2', ' H 108  ASP  OD2', -0.453, (183.01, 135.404, 105.546)), (' A 418  ILE  O  ', ' A 422  ASN  HB2', -0.448, (165.995, 142.355, 133.401)), (' H  19  LYS  NZ ', ' H  80  TYR  CD2', -0.447, (189.868, 157.199, 98.326)), (' H   6  GLN  HG3', ' H 113  GLY  H  ', -0.446, (195.608, 142.921, 97.287)), (' H  21  SER  HB2', ' H  80  TYR  CE1', -0.444, (189.748, 153.245, 96.873)), (' A 336  CYS  HA ', ' A 361  CYS  HB2', -0.441, (194.742, 145.91, 136.786)), (' H  79  ALA  O  ', ' H  80  TYR  HD1', -0.435, (188.511, 152.229, 99.384)), (' L   7  SER  HB2', ' L   8  PRO  HA ', -0.433, (208.925, 129.735, 118.996)), (' L   9  ALA  O  ', ' L 103  LYS  N  ', -0.422, (208.431, 129.541, 111.623)), (' L  89  GLN  NE2', ' L  91  SER  OG ', -0.422, (190.454, 138.741, 115.475)), (' H  27  TYR  CE2', ' H  32  TYR  HB2', -0.421, (180.617, 142.027, 104.031)), (' H   2  VAL HG23', ' H  27  TYR  CD1', -0.421, (181.54, 140.152, 99.872)), (' H   4  LEU HD23', ' H  24  ALA  HA ', -0.421, (185.288, 143.712, 97.92)), (' H   6  GLN  HG2', ' H 112  GLN  H  ', -0.42, (193.904, 142.547, 96.566)), (' L  73  LEU HD23', ' L  74  SER  N  ', -0.42, (196.855, 122.254, 114.353)), (' A 404  GLY  HA2', ' A 508  TYR  CD2', -0.42, (169.739, 153.575, 126.405)), (' L  37  GLN  HB3', ' L  47  LEU HD11', -0.415, (196.864, 127.624, 107.374)), (' A 334  ASN  O  ', ' A 362  VAL HG12', -0.414, (198.166, 148.339, 138.271)), (' B   4  FUC  O4 ', ' H  60  TYR  O  ', -0.414, (193.577, 151.898, 118.208)), (' H  21  SER  HB2', ' H  80  TYR  CD1', -0.411, (189.823, 153.237, 97.476)), (' A 362  VAL  O  ', ' A 362  VAL HG13', -0.411, (196.423, 150.57, 138.159)), (' A 338  PHE  HE2', ' A 363  ALA  HB1', -0.408, (190.315, 150.431, 137.922)), (' H  86  LEU HD13', ' H 118  VAL HG22', -0.404, (205.606, 155.271, 100.599)), (' H  65  ARG  HB3', ' H  65  ARG  NH1', -0.403, (194.397, 158.464, 115.789)), (' A 340  GLU  OE1', ' L  27  GLN  HG2', -0.403, (192.299, 140.683, 129.53)), (' H  17  SER  OG ', ' H  83  LEU  O  ', -0.402, (198.968, 159.573, 101.507)), (' A 403  ARG  HB2', ' A 406  GLU  OE1', -0.401, (165.235, 148.98, 126.568)), (' H  35  THR HG21', ' H 107  PHE  CZ ', -0.401, (190.55, 142.955, 110.821))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
