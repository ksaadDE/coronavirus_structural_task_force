# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.02812247442862681, (-5.467, -25.54299999999999, 19.287)), ('B', ' 154 ', 'TYR', 0.03195116790992351, (17.565000000000005, -25.470999999999986, 36.479))]
data['omega'] = []
data['rota'] = [('A', '   1 ', 'SER', 0.1265103499811184, (-9.176000000000002, -8.058, 33.971)), ('A', '  22 ', 'CYS', 0.13115446463934963, (30.01500000000001, -28.042999999999978, 13.517999999999999)), ('A', ' 270 ', 'GLU', 0.16508726604209017, (-5.276, 13.608, 18.177)), ('B', '  22 ', 'CYS', 0.07238718585967764, (-17.895, -27.804999999999986, 42.209))]
data['cbeta'] = []
data['probe'] = [(' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.651, (23.356, -24.866, 7.226)), (' A   7  ALA  HA ', ' A 127  GLN  HG2', -0.63, (3.755, -14.523, 23.101)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.622, (15.908, -21.451, 5.944)), (' B 233  VAL HG11', ' B 269  LYS  HG3', -0.591, (15.97, 13.168, 42.81)), (' A 241  PRO  HD2', ' A 596  HOH  O  ', -0.564, (0.256, 0.462, 4.526)), (' A 110  GLN  HG3', ' A 535  HOH  O  ', -0.545, (0.434, -12.932, 9.354)), (' B  40  ARG  HA ', ' B  87  LEU  HG ', -0.545, (-10.57, -24.789, 48.031)), (' A 285  ALA  HB3', ' B 285  ALA  HB3', -0.54, (6.03, 6.586, 27.473)), (' A 235  MET  HA ', ' A 235  MET  HE2', -0.527, (1.568, 7.389, 5.837)), (' B 235  MET  HA ', ' B 235  MET  HE2', -0.51, (10.647, 6.99, 49.462)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.508, (-3.842, -21.383, 49.13)), (' A 168  PRO  HG3', ' A 610  HOH  O  ', -0.506, (26.008, -4.242, 11.911)), (' A   6  MET  O  ', ' A 127  GLN  HG3', -0.498, (1.796, -13.47, 23.558)), (' A 217  ARG  HD2', ' A 449  HOH  O  ', -0.496, (-14.765, 2.673, 28.678)), (' B 279  ARG  NH2', ' B 412  HOH  O  ', -0.481, (16.388, 9.084, 22.685)), (' A  76  ARG  HD3', ' A 530  HOH  O  ', -0.462, (25.686, -43.561, 11.528)), (' A 298  ARG  NH2', ' A 410  HOH  O  ', -0.46, (-1.453, -16.277, 23.481)), (' A   7  ALA  HA ', ' A 127  GLN  CG ', -0.455, (3.29, -14.311, 23.111)), (' B  78  ILE HG13', ' B  90  LYS  HD3', -0.45, (-6.706, -39.536, 48.795)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.442, (3.809, -17.837, 37.314)), (' B 221  ASN  ND2', ' B 270  GLU  HG3', -0.424, (20.999, 13.966, 36.773)), (' A 213  ILE HG21', ' A 300  CYS  HB3', -0.423, (-11.655, -6.694, 26.111)), (' A 141  LEU HD23', ' B   1  SER  OG ', -0.421, (22.745, -10.28, 23.983)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.418, (2.823, -5.353, 12.756)), (' A 279  ARG  NH2', ' A 422  HOH  O  ', -0.418, (-4.811, 9.471, 34.623)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.414, (-0.03, -22.61, 29.879)), (' B  76  ARG  HD3', ' B 562  HOH  O  ', -0.413, (-13.651, -43.459, 44.095)), (' B  67  LEU  HA ', ' B  67  LEU HD23', -0.412, (-15.32, -34.843, 39.964)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.411, (-5.441, -11.838, 40.072)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.408, (17.442, -11.571, 15.5)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.4, (2.142, -35.238, 39.426))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
