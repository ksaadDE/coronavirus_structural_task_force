# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  24 ', 'THR', 0.11152799234353497, (4.146, -21.368000000000006, 33.107)), ('A', '  47 ', 'GLU', 0.07274889893923439, (7.429000000000001, -33.577, 32.186)), ('A', '  50 ', 'LEU', 0.0670164197260104, (5.137, -38.068, 28.375)), ('A', '  75 ', 'LEU', 0.06651481192803589, (-11.394999999999996, -12.176000000000004, 32.1)), ('A', '  78 ', 'ILE', 0.0021167073114164527, (-15.995000000000006, -18.775, 37.089)), ('A', '  97 ', 'LYS', 0.09146686079620577, (-17.953, -9.478, 19.304)), ('A', ' 130 ', 'MET', 0.003351733921285736, (-7.022, -31.385, 5.424)), ('A', ' 141 ', 'LEU', 0.017811182913745664, (5.904, -22.293000000000003, 15.513)), ('A', ' 152 ', 'ILE', 0.07738107060485894, (-17.266, -18.31500000000001, 6.116)), ('A', ' 166 ', 'GLU', 0.007577141538262029, (3.4350000000000014, -30.134999999999998, 15.757)), ('A', ' 169 ', 'THR', 0.1722634198312983, (7.865000000000003, -34.414, 10.345999999999998)), ('A', ' 190 ', 'THR', 0.16405673696039713, (4.967, -40.041, 22.287)), ('A', ' 212 ', 'VAL', 0.10317844410795596, (-10.931000000000001, -26.196, -19.631)), ('A', ' 214 ', 'ASN', 0.19330678085883438, (-10.820000000000004, -20.995, -18.695)), ('A', ' 220 ', 'LEU', 0.09834126111765734, (-7.002000000000003, -33.408, -23.317)), ('A', ' 222 ', 'ARG', 0.0, (-9.479, -38.822, -26.957)), ('A', ' 232 ', 'LEU', 0.0, (-5.012, -49.243000000000016, -10.485)), ('A', ' 235 ', 'MET', 0.20493488318345546, (-2.366, -46.097000000000016, -6.831)), ('B', '  27 ', 'LEU', 0.21928641178903285, (-16.69, -0.6510000000000002, -7.641)), ('B', '  50 ', 'LEU', 0.12211611367509281, (-11.787, 4.927000000000001, -25.224)), ('B', '  56 ', 'ASP', 0.08370023750161683, (-14.124, 17.587, -18.453)), ('B', '  59 ', 'ILE', 0.010766483585147164, (-17.003, 19.077000000000005, -13.933)), ('B', '  67 ', 'LEU', 0.2535881658793677, (-24.092, 6.48, -4.264)), ('B', '  72 ', 'ASN', 0.12746790640100658, (-26.967, -0.845, 4.797)), ('B', ' 102 ', 'LYS', 0.02716986701258895, (-0.18200000000000008, 5.6110000000000015, 6.523)), ('B', ' 121 ', 'SER', 0.16132685143978867, (-17.891, -6.735000000000001, 0.24599999999999997)), ('B', ' 153 ', 'ASP', 0.015814659106371073, (2.9390000000000005, -2.761, 11.558)), ('B', ' 181 ', 'PHE', 0.2826399696265143, (0.3580000000000001, 4.344, -11.287)), ('B', ' 224 ', 'THR', 0.22586497803943115, (31.684, -19.164000000000005, -3.96)), ('B', ' 227 ', 'LEU', 0.09926420226978447, (28.754, -10.443, -8.316)), ('B', ' 244 ', 'GLN', 0.04730876627735384, (25.550000000000004, -4.429, -3.093)), ('B', ' 279 ', 'ARG', 0.15743112671098897, (15.138000000000003, -32.952, -5.967)), ('B', ' 282 ', 'LEU', 0.0, (10.975, -26.869000000000003, 1.007)), ('B', ' 286 ', 'LEU', 0.20300596638953844, (10.147, -24.513, -8.108))]
data['cbeta'] = []
data['probe'] = [(' A   6  MET  HE3', ' B 124  GLY  HA3', -0.706, (-11.072, -13.53, -1.295)), (' A   4  ARG  HB2', ' B 139  SER  HB2', -0.691, (-6.11, -15.844, -7.508)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.651, (-8.843, -33.17, 0.053)), (' A 152  ILE HD13', ' A 157  VAL HG22', -0.562, (-17.314, -16.388, 9.55)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.558, (9.847, -8.495, -6.176)), (' B   4  ARG  O  ', ' B 299  GLN  NE2', -0.556, (5.259, -18.894, 5.251)), (' A 105  ARG  NH1', ' A 176  ASP  OD2', -0.546, (-13.457, -34.04, 15.426)), (' B 140  PHE  HB2', ' B 172  HIS  NE2', -0.534, (-8.194, -9.287, -11.187)), (' A 140  PHE  HB2', ' A 172  HIS  NE2', -0.533, (2.566, -25.726, 12.81)), (' B 233  VAL HG21', ' B 269  LYS  HE3', -0.527, (27.693, -18.387, -13.716)), (' A 221  ASN  HB2', ' A 222 AARG  NH2', -0.504, (-5.147, -39.117, -26.129)), (' A  36  VAL  HB ', ' A  89  LEU  HB2', -0.489, (-11.903, -20.404, 28.975)), (' A 167  LEU  HB2', ' A 171  VAL  O  ', -0.489, (3.177, -33.216, 12.702)), (' A  52  PRO  HD2', ' A 188  ARG  HG2', -0.488, (0.051, -38.51, 27.725)), (' B 111  THR HG22', ' B 129  ALA  HB2', -0.487, (5.72, -10.367, -2.612)), (' A  41  HIS  ND1', ' A  41  HIS  O  ', -0.486, (-0.776, -27.721, 25.833)), (' A 138  GLY  HA2', ' B   4  ARG  HG3', -0.483, (1.313, -24.337, 6.203)), (' B 279  ARG  HA ', ' B 279  ARG  HE ', -0.468, (14.991, -34.206, -4.841)), (' B 176  ASP  OD1', ' B 180  ASN  N  ', -0.458, (-0.521, 6.977, -7.063)), (' B  21  THR  HB ', ' B  67  LEU  HB2', -0.453, (-23.938, 4.312, -6.177)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.452, (-8.473, -34.158, 17.86)), (' B 221  ASN  OD1', ' B 401  HOH  O  ', -0.451, (28.368, -22.809, -3.039)), (' A 222 AARG  NH2', ' A 407  HOH  O  ', -0.444, (-3.214, -39.985, -26.513)), (' B 152  ILE HG22', ' B 153  ASP  O  ', -0.444, (0.407, -4.544, 12.012)), (' B  40  ARG  HD3', ' B  85  CYS  HA ', -0.44, (-7.529, 9.774, -12.149)), (' A 248  ASP  OD1', ' A 401  HOH  O  ', -0.44, (-22.395, -41.198, -10.211)), (' B 276  MET  O  ', ' B 279  ARG  HB2', -0.438, (17.122, -31.809, -7.291)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.438, (-12.297, -8.319, 2.642)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.434, (-1.567, 3.991, -10.969)), (' B  10  SER  O  ', ' B  14  GLU  HG3', -0.434, (-10.487, -7.002, 6.925)), (' A 118 ATYR  OH ', ' A 141  LEU  HG ', -0.434, (4.663, -19.434, 14.234)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.43, (-7.559, -27.875, 0.934)), (' A 166  GLU  HA ', ' A 172  HIS  HD2', -0.43, (2.771, -28.669, 14.374)), (' B 282  LEU  HA ', ' B 282  LEU HD12', -0.425, (11.402, -27.178, 2.661)), (' A  10  SER  O  ', ' A  14  GLU  HG3', -0.425, (-9.88, -11.936, 12.05)), (' B  40  ARG  CD ', ' B  85  CYS  HA ', -0.42, (-7.941, 9.501, -12.592)), (' B  61  LYS  HA ', ' B  61  LYS  HD3', -0.417, (-22.125, 14.476, -13.079)), (' B  55  GLU  CD ', ' B  55  GLU  H  ', -0.417, (-9.575, 15.89, -17.71)), (' B  87  LEU  HA ', ' B  87  LEU HD23', -0.416, (-11.339, 11.723, -7.373)), (' A 108  PRO  HA ', ' A 130  MET  HG2', -0.416, (-9.309, -34.016, 5.409)), (' B 227  LEU  HA ', ' B 227  LEU HD12', -0.415, (27.273, -11.029, -7.624)), (' B 141  LEU  HA ', ' B 141  LEU HD12', -0.41, (-12.452, -11.655, -12.645)), (' A 259  ILE HG22', ' A 263  ASP  HB3', -0.406, (-13.679, -35.999, -20.397)), (' B 177  LEU  HA ', ' B 177  LEU HD13', -0.4, (-5.17, 5.125, -3.141))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
