# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  16 ', 'LYS', 0.009320489230665214, (26.845, -26.592, -5.108)), ('A', '  16 ', 'LYS', 0.009414677267773472, (15.206999999999997, -26.629, -3.332)), ('A', '  16 ', 'LYS', 0.0093436735400466, (18.368, -17.764, -0.654)), ('A', '  25 ', 'GLY', 0.036066272380387024, (33.914, -33.306, 0.931)), ('A', '  16 ', 'LYS', 0.009289341532930019, (21.121, -27.916, -12.552)), ('A', '  16 ', 'LYS', 0.009042638169702976, (17.957, -17.218, 6.887)), ('A', '  16 ', 'LYS', 0.009281447756961457, (16.808, -32.472, -2.574)), ('A', '  24 ', 'GLY', 0.09350650137585792, (26.824, -45.98100000000001, -3.519)), ('A', '  25 ', 'GLY', 0.04095500928580139, (30.164, -45.40300000000001, -1.838)), ('A', '  64 ', 'GLY', 0.031057764350785617, (16.625000000000007, -48.099, -25.703)), ('A', '  16 ', 'LYS', 0.009522119267922078, (9.600999999999997, -29.838000000000008, -9.177)), ('A', '  16 ', 'LYS', 0.00935357855628208, (19.326, -26.332000000000008, -7.246)), ('A', '  34 ', 'SER', 0.0030218490621855346, (46.115, -54.710000000000015, -1.831)), ('A', '  16 ', 'LYS', 0.00930839180004939, (14.444999999999997, -15.459, 2.068)), ('A', '  16 ', 'LYS', 0.009411550447763841, (18.619, -24.132, 1.808)), ('A', '  34 ', 'SER', 0.0032484399999999996, (36.247, -49.586, -4.979)), ('A', '  64 ', 'GLY', 0.0715060870104701, (19.153999999999993, -85.871, -39.539)), ('A', '  16 ', 'LYS', 0.00934663987256811, (20.769999999999992, -15.139, -7.953)), ('A', '  33 ', 'PRO', 0.00452052, (35.483, -46.50100000000001, -4.129)), ('A', '  33 ', 'PRO', 0.00452052, (36.56899999999999, -52.084, -1.525)), ('A', '  52 ', 'VAL', 0.09115516119570943, (27.964, -80.046, -25.874)), ('A', '  52 ', 'VAL', 0.052639105446740844, (25.493, -77.267, -20.906)), ('A', '  16 ', 'LYS', 0.009501159732965362, (18.953999999999994, -19.68, 2.318)), ('A', '  33 ', 'PRO', 0.00452052, (41.826, -50.426, -0.417)), ('A', '  16 ', 'LYS', 0.009317392682306108, (17.218, -27.684, -0.644)), ('A', '  16 ', 'LYS', 0.009352398490389822, (14.075999999999999, -22.573000000000008, 4.866)), ('A', '  52 ', 'VAL', 0.0077499914791032565, (29.113, -73.80600000000003, -26.823)), ('A', '  15 ', 'TYR', 0.009704579858439909, (17.221, -23.913, 1.8790000000000002)), ('A', '  34 ', 'SER', 0.003042255059065178, (33.675, -53.618000000000016, -3.655)), ('A', '   2 ', 'ARG', 0.0298747375581773, (9.222, -27.025, 6.459))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'LYS', 0.0, (17.549, -27.695000000000007, -4.343)), ('A', '  19 ', 'THR', 0.15478923106338133, (35.149999999999984, -27.94, -1.822)), ('A', '  36 ', 'LEU', 0.0010736006711169986, (28.382999999999992, -53.81800000000001, -4.024)), ('A', '  37 ', 'LYS', 0.0, (27.315999999999992, -55.320000000000014, -7.352)), ('A', '  40 ', 'LYS', 0.13620472111500515, (20.214, -59.297, -10.301)), ('A', '  53 ', 'THR', 0.014808594733144725, (19.345999999999993, -72.562, -24.032)), ('A', '  61 ', 'LYS', 0.0, (23.042999999999992, -85.648, -27.495)), ('A', '  17 ', 'THR', 0.0013599335943581536, (13.368, -28.938, -5.731)), ('A', '  19 ', 'THR', 0.16433317606733105, (18.073999999999998, -33.34, -3.666)), ('A', '  20 ', 'LEU', 0.01883445586850401, (21.18, -31.87, -2.037)), ('A', '  32 ', 'LEU', 0.231016780623894, (37.85499999999999, -47.381, 2.044)), ('A', '  37 ', 'LYS', 0.15833809089360967, (41.09199999999997, -59.17500000000001, -8.383)), ('A', '  61 ', 'LYS', 0.0, (10.285, -78.74500000000003, -28.243)), ('A', '   2 ', 'ARG', 0.030415852396622207, (2.089999999999999, -10.952, -1.493)), ('A', '  12 ', 'LYS', 0.007926845780343484, (11.424, -24.573, -1.204)), ('A', '  17 ', 'THR', 0.061849479308423556, (19.35, -27.477000000000004, -5.722)), ('A', '  20 ', 'LEU', 0.05444969951770569, (28.145999999999994, -25.855000000000008, -8.674)), ('A', '  23 ', 'PHE', 0.26486228835470854, (33.792, -25.424000000000007, -6.489)), ('A', '  47 ', 'LEU', 0.07747680624406209, (24.029, -70.249, -12.533)), ('A', '  12 ', 'LYS', 0.1980820821908642, (10.474, -18.621, -3.091)), ('A', '  17 ', 'THR', 0.2849321608732175, (21.119, -20.38800000000001, -0.7850000000000003)), ('A', '  21 ', 'LYS', 0.0, (31.951, -36.603000000000016, -12.764)), ('A', '  42 ', 'SER', 0.2926600320064578, (32.639999999999986, -61.95600000000002, -3.077)), ('A', '  53 ', 'THR', 0.08157693907745599, (18.977999999999994, -58.63200000000001, -19.953)), ('A', '   5 ', 'ARG', 3.794575851897474e-05, (7.531, 1.01, 0.405)), ('A', '  12 ', 'LYS', 0.0, (13.864999999999997, -9.847, 3.55)), ('A', '  20 ', 'LEU', 0.25615966841030247, (23.904999999999994, -26.078000000000007, 5.992)), ('A', '  34 ', 'SER', 0.2561446235256718, (28.281, -53.616000000000014, -6.508)), ('A', '  40 ', 'LYS', 0.10942383667168194, (29.444, -65.266, -16.96)), ('A', '  41 ', 'ARG', 0.05310806829671211, (32.969999999999985, -64.386, -15.837)), ('A', '  53 ', 'THR', 0.27556636906588045, (26.46699999999999, -81.827, -29.956)), ('A', '  61 ', 'LYS', 0.00014400260606192272, (23.268, -94.585, -25.916)), ('A', '   2 ', 'ARG', 0.03337900486775095, (-1.067, -11.646000000000004, -12.176)), ('A', '  13 ', 'GLN', 0.02929273496424064, (9.388999999999996, -28.832000000000008, -6.617)), ('A', '  19 ', 'THR', 0.14039405470768723, (20.041999999999994, -39.902, 1.562)), ('A', '  21 ', 'LYS', 0.0, (24.554, -42.91, -0.154)), ('A', '  32 ', 'LEU', 0.1144539103228668, (40.953999999999986, -52.883, -6.749)), ('A', '  37 ', 'LYS', 0.0019740706807300583, (43.193, -62.247, -12.117000000000003)), ('A', '  42 ', 'SER', 0.2652045919644161, (37.59899999999999, -71.21, -10.965)), ('A', '  51 ', 'LYS', 0.0004093624385906821, (22.242, -68.791, -13.169000000000004)), ('A', '  16 ', 'LYS', 0.0, (9.600999999999997, -29.838000000000008, -9.177)), ('A', '  17 ', 'THR', 0.0013599335943581536, (8.266, -32.905, -7.366)), ('A', '  21 ', 'LYS', 0.0029835849118696554, (14.667, -39.14, -17.607000000000003)), ('A', '  23 ', 'PHE', 0.09851471243906068, (17.726, -34.95500000000001, -17.929)), ('A', '  27 ', 'ASN', 0.178613991889336, (25.478999999999992, -36.29100000000001, -10.227)), ('A', '  31 ', 'ILE', 0.015462186861663067, (33.696, -36.385, -11.434)), ('A', '  34 ', 'SER', 0.19958579948730648, (35.556, -44.34600000000001, -6.215000000000001)), ('A', '  47 ', 'LEU', 0.0, (26.96699999999999, -71.75, -7.779)), ('A', '  53 ', 'THR', 0.09751774374958559, (26.926999999999992, -75.16800000000003, -19.306)), ('A', '   5 ', 'ARG', 0.01275997387445747, (1.23, -17.734, -9.502)), ('A', '  15 ', 'TYR', 0.22833912440349302, (18.718999999999994, -23.20200000000001, -5.171)), ('A', '  30 ', 'GLN', 0.05993754612762591, (39.36999999999998, -50.99600000000001, 1.993)), ('A', '  34 ', 'SER', 0.15600326248610966, (46.115, -54.710000000000015, -1.831)), ('A', '  43 ', 'PHE', 0.27774124633038644, (35.807, -66.9, -13.682)), ('A', '  51 ', 'LYS', 0.0007056685374191258, (24.746, -66.995, -19.443)), ('A', '  61 ', 'LYS', 0.018242364939347333, (10.071, -70.227, -25.579000000000004)), ('A', '  14 ', 'MET', 0.2640121418998613, (10.911999999999997, -11.154000000000003, 4.856)), ('A', '  16 ', 'LYS', 0.0, (14.444999999999997, -15.459, 2.068)), ('A', '  20 ', 'LEU', 0.0, (18.593999999999994, -27.235, 5.022)), ('A', '  31 ', 'ILE', 0.005688848614227026, (32.44, -44.613, -6.222)), ('A', '  54 ', 'LEU', 0.039605144499878515, (25.097999999999992, -87.864, -33.379)), ('A', '  12 ', 'LYS', 0.0, (13.416999999999993, -15.009000000000004, 2.901)), ('A', '  20 ', 'LEU', 0.05619330061821838, (26.555, -27.562, -3.306000000000001)), ('A', '  30 ', 'GLN', 0.010145008528050812, (33.664, -41.47900000000001, -7.711)), ('A', '  34 ', 'SER', 0.014783951275338875, (36.247, -49.586, -4.979)), ('A', '  47 ', 'LEU', 0.07525360174494752, (23.024, -74.007, -12.246000000000002)), ('A', '  50 ', 'ASN', 0.08166185921543205, (21.34, -77.18, -16.774)), ('A', '  51 ', 'LYS', 0.141116160208416, (21.607, -75.71200000000003, -20.273)), ('A', '  12 ', 'LYS', 0.0, (11.49, -16.058, -6.335000000000001)), ('A', '  22 ', 'TYR', 0.2924143666758655, (31.311999999999994, -23.969, -5.028)), ('A', '  36 ', 'LEU', 0.177829466842397, (30.193, -54.73000000000001, -2.446)), ('A', '  51 ', 'LYS', 0.0, (22.517, -75.133, -19.646)), ('A', '   2 ', 'ARG', 0.027280912802017224, (1.392, -4.163, -5.9)), ('A', '   6 ', 'GLU', 0.02740256965834412, (2.371, -8.109, 1.4660000000000002)), ('A', '  12 ', 'LYS', 0.21782594446805958, (13.132, -10.856, -1.03)), ('A', '  17 ', 'THR', 0.17233935555457025, (22.442999999999994, -16.715, -1.301)), ('A', '  30 ', 'GLN', 0.020089052312170765, (35.798, -43.131, -1.041)), ('A', '  47 ', 'LEU', 0.2648247373607585, (32.11199999999999, -77.34000000000003, -19.316)), ('A', '  50 ', 'ASN', 0.22605541245816183, (32.69999999999999, -77.95000000000003, -24.61)), ('A', '  61 ', 'LYS', 0.0, (16.101999999999993, -87.951, -33.561)), ('A', '  17 ', 'THR', 0.19336693705761418, (18.368, -23.259, -6.504)), ('A', '  32 ', 'LEU', 0.025257276119126273, (40.27, -49.906, -10.396)), ('A', '  34 ', 'SER', 0.11003104459592723, (37.90799999999999, -53.311000000000014, -5.584)), ('A', '  37 ', 'LYS', 0.0, (32.677, -57.588000000000015, -5.165)), ('A', '  39 ', 'THR', 0.1445063890966846, (30.097, -61.60800000000001, -7.666)), ('A', '  40 ', 'LYS', 0.2850613002108019, (32.03199999999998, -62.93700000000001, -4.673)), ('A', '  56 ', 'ASP', 0.021416100143006517, (21.599999999999994, -77.98000000000003, -23.023)), ('A', '  19 ', 'THR', 0.2557004958268259, (24.328, -26.464000000000006, -0.484)), ('A', '  32 ', 'LEU', 0.1646440673200626, (38.414999999999985, -50.799000000000014, 1.277)), ('A', '  37 ', 'LYS', 0.0, (40.31999999999999, -61.012000000000015, -7.417)), ('A', '  47 ', 'LEU', 0.04895209272399608, (26.275999999999993, -71.493, -15.229)), ('A', '  48 ', 'LEU', 0.21841013734736395, (27.228, -70.45300000000003, -18.763)), ('A', '  62 ', 'GLN', 0.27386922562142707, (13.704999999999997, -88.10600000000002, -32.135)), ('A', '   2 ', 'ARG', 0.111435542871225, (4.076, -30.403, -3.328)), ('A', '  19 ', 'THR', 0.1863314829661564, (27.152, -26.908, -7.453)), ('A', '  27 ', 'ASN', 0.2278785203463718, (36.51999999999999, -41.54, -10.169)), ('A', '  31 ', 'ILE', 0.0790657607592483, (36.14, -49.635, -11.783000000000001)), ('A', '  32 ', 'LEU', 0.11630519631097483, (38.263, -51.387, -9.158)), ('A', '  34 ', 'SER', 0.11005222445819944, (37.026, -57.029, -5.517)), ('A', '  37 ', 'LYS', 0.0004800532146897551, (30.466, -60.332, -2.5630000000000006)), ('A', '  40 ', 'LYS', 0.19920147289844317, (21.943999999999992, -63.16600000000001, -2.018)), ('A', '  42 ', 'SER', 0.1348474947592567, (27.427, -65.765, -1.145)), ('A', '  62 ', 'GLN', 0.267054623641724, (14.947, -70.823, -28.912)), ('A', '  12 ', 'LYS', 0.2529459686362718, (12.382999999999996, -20.405, -2.249)), ('A', '  16 ', 'LYS', 0.18658053501274233, (17.218, -27.684, -0.644)), ('A', '  31 ', 'ILE', 0.005688848614227028, (39.57199999999999, -44.429000000000016, 3.4490000000000007)), ('A', '  32 ', 'LEU', 0.05188157383202006, (38.408, -47.972, 4.198)), ('A', '  36 ', 'LEU', 0.0, (31.40299999999999, -56.187, -3.848)), ('A', '  37 ', 'LYS', 0.015897564194102768, (30.226, -55.580000000000005, -7.414000000000001)), ('A', '  53 ', 'THR', 0.10458905631161806, (24.765, -76.662, -23.436)), ('A', '  17 ', 'THR', 0.0013599335943581536, (13.635, -23.673, 8.481)), ('A', '  19 ', 'THR', 0.16119838468149048, (18.014999999999993, -28.449, 6.324)), ('A', '  20 ', 'LEU', 0.04884343591774774, (18.42, -30.328000000000007, 3.042)), ('A', '  34 ', 'SER', 0.08636314315905828, (39.149, -52.75500000000002, -1.259)), ('A', '  41 ', 'ARG', 0.10167149391161155, (35.35, -67.877, -11.299)), ('A', '  51 ', 'LYS', 0.2335147478667169, (31.21099999999999, -71.373, -28.862)), ('A', '  53 ', 'THR', 0.2940678618205395, (25.71, -72.826, -28.206)), ('A', '  60 ', 'MET', 0.17691074635490586, (13.735999999999997, -74.99000000000001, -26.03)), ('A', '  61 ', 'LYS', 0.15892863447915795, (12.903, -76.738, -22.755)), ('A', '  12 ', 'LYS', 0.19845092524257324, (13.163, -19.229, -1.444)), ('A', '  17 ', 'THR', 0.1515147644970901, (16.614, -27.561, -2.389)), ('A', '  19 ', 'THR', 0.28553836738051086, (22.247, -30.729, -1.965)), ('A', '  20 ', 'LEU', 0.2210394281574677, (19.144, -32.507, -3.261)), ('A', '  32 ', 'LEU', 0.03685502609053579, (28.767999999999994, -54.471, -6.46)), ('A', '  34 ', 'SER', 0.05428624412188813, (33.675, -53.618000000000016, -3.655)), ('A', '  47 ', 'LEU', 0.08862499770141258, (37.482, -75.64100000000003, -19.913)), ('A', '  53 ', 'THR', 0.2362403605833819, (24.639, -77.815, -20.951)), ('A', '  12 ', 'LYS', 0.06765188073572513, (17.947, -30.97500000000001, -9.036)), ('A', '  32 ', 'LEU', 0.26815393089854916, (34.992, -43.985, -4.633)), ('A', '  37 ', 'LYS', 0.15103099385017632, (35.02099999999999, -57.125, -6.278)), ('A', '  39 ', 'THR', 0.25550524251695794, (35.052, -63.04300000000001, -7.825)), ('A', '  43 ', 'PHE', 0.08728682404690094, (27.574, -64.026, -8.315)), ('A', '  62 ', 'GLN', 0.01867045271132801, (13.84, -79.543, -27.636))]
data['cbeta'] = []
data['probe'] = [(' A  36  LEU  C  ', ' A  36  LEU HD22', -0.681, (28.334, -53.641, -6.498)), (' A  17  THR  N  ', ' A  18  PRO  CD ', -0.642, (29.62, -27.361, -4.312)), (' A   4  THR  O  ', ' A   7  VAL HG13', -0.516, (8.026, -19.758, -4.897)), (' A  17  THR  N  ', ' A  18  PRO  HD3', -0.514, (28.673, -27.614, -3.814)), (' A  20  LEU HD22', ' A  24  GLY  HA3', -0.514, (36.783, -30.335, 2.615)), (' A  36  LEU  N  ', ' A  36  LEU HD13', -0.447, (29.912, -53.006, -4.287)), (' A  36  LEU  CD1', ' A  36  LEU  N  ', -0.447, (29.654, -52.368, -4.241)), (' A  36  LEU  O  ', ' A  36  LEU HD22', -0.443, (28.571, -52.999, -6.501))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
