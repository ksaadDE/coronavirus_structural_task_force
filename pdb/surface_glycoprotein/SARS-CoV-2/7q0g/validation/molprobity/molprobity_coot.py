# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 152 ', 'PRO', None, (-25.94247, 0.69108, 138.6109)), ('A', ' 154 ', 'PRO', None, (-20.58988, 0.9872000000000001, 135.71864)), ('B', '   8 ', 'PRO', None, (-10.95521, -24.738889999999998, 115.14543)), ('B', ' 143 ', 'PRO', None, (-3.29382, -23.760249999999992, 130.62232)), ('H', ' 151 ', 'PRO', None, (2.680119999999999, 8.007139999999998, 33.16539)), ('H', ' 153 ', 'PRO', None, (6.12939, 4.51134, 36.84143)), ('L', '   8 ', 'PRO', None, (14.81891, 14.51032, 65.69322)), ('L', '  95 ', 'PRO', None, (-7.25171, 6.14647, 63.99533)), ('L', ' 141 ', 'PRO', None, (30.077319999999993, 16.504949999999994, 51.36525))]
data['rota'] = [('E', ' 362 ', 'VAL', 0.07698849750461952, (-38.37807, -7.783489999999997, 93.02435)), ('H', '   6 ', 'GLU', 0.08657070093770934, (1.1899399999999993, -6.2226799999999995, 45.01747)), ('L', ' 152 ', 'ASN', 0.13416115655241587, (29.190190000000012, 34.03977, 30.7863)), ('B', '  34 ', 'LEU', 0.16599167535394657, (-20.40552, -15.884700000000002, 104.0354)), ('B', '  79 ', 'LEU', 0.08403444610843538, (-0.41509, -13.074929999999997, 113.59337)), ('B', ' 125 ', 'GLU', 0.23781145993902134, (-18.781659999999995, -7.441759999999998, 158.42428)), ('A', '  32 ', 'SER', 0.14992339581171246, (-32.784099999999995, -4.5835599999999985, 102.39123)), ('A', ' 143 ', 'LEU', 0.21799146436781605, (-5.647559999999999, -10.380599999999996, 149.49118)), ('A', ' 196 ', 'THR', 0.14284878541975612, (4.71632, -3.8840399999999997, 157.16498))]
data['cbeta'] = []
data['probe'] = [(' H  86  ARG HH22', ' H 402  GOL  H2 ', -0.779, (-13.713, 12.43, 50.382)), (' B 110  ARG  NH2', ' B 401  GOL  O1 ', -0.704, (4.441, -17.701, 133.105)), (' A  89  GLU  OE2', ' A 401  HOH  O  ', -0.687, (-34.795, -15.898, 134.487)), (' E 391  CYS  HB3', ' E 522  ALA  HB1', -0.656, (-43.582, -8.291, 84.791)), (' B  19  ALA  HB2', ' B  79  LEU HD21', -0.628, (-2.824, -16.925, 113.583)), (' B   4  MET  HE3', ' B  23  CYS  SG ', -0.628, (-19.604, -20.732, 108.321)), (' A  38  ARG  NH1', ' A  46  GLU  OE1', -0.615, (-29.311, -15.65, 122.005)), (' B 140  ASN HD22', ' B 401  GOL  H31', -0.602, (1.523, -14.689, 136.742)), (' A 302  TAR  O2 ', ' A 302  TAR  O4 ', -0.59, (-22.728, -2.168, 122.009)), (' B 212  ASN  HB2', ' B 215  GLU  HG3', -0.553, (-11.069, -24.666, 161.27)), (' H 168  HIS  CE1', ' L 301  GOL  H11', -0.543, (25.301, 6.786, 42.907)), (' E 444  LYS  HG3', ' E 448  ASN  HB2', -0.543, (-3.071, -7.215, 89.159)), (' H 138  GLY  O  ', ' H 403  GOL  O2 ', -0.536, (39.461, 5.504, 34.228)), (' E 457  ARG HH22', ' E 703  GOL  H2 ', -0.529, (-17.087, -18.74, 66.619)), (' B 212  ASN  HB2', ' B 215  GLU  CG ', -0.528, (-11.236, -23.982, 161.801)), (' L 191  VAL HG22', ' L 210  ASN  OD1', -0.527, (32.371, 28.445, 23.466)), (' H  30  SER  HA ', ' H  71  ARG  HD2', -0.513, (-8.505, -13.181, 54.953)), (' L   4  MET  HE3', ' L  23  CYS  SG ', -0.492, (5.066, 9.177, 68.222)), (' A  38  ARG  NE ', ' A 407  HOH  O  ', -0.491, (-31.827, -12.971, 124.16)), (' L 150  VAL  CG2', ' L 155  GLN  HG3', -0.489, (22.213, 30.183, 29.932)), (' H  11  LEU  HB2', ' H 151  PRO  HG3', -0.486, (-0.744, 6.68, 34.888)), (' H   2  VAL HG12', ' H 106  ILE HD13', -0.485, (6.263, -12.122, 54.027)), (' H  35  SER  OG ', ' H 401  GOL  O1 ', -0.484, (-1.117, -1.464, 58.34)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.48, (-19.222, 1.83, 82.327)), (' H  86  ARG  NH2', ' H 402  GOL  H2 ', -0.479, (-14.004, 12.2, 49.835)), (' A 132  SER  CB ', ' A 135  SER  HB3', -0.476, (-4.325, -18.215, 153.833)), (' H  18  LEU  HB3', ' H  82  MET  HE3', -0.474, (-6.992, 2.481, 42.96)), (' A  12  LYS  HE2', ' A  17  SER  O  ', -0.465, (-39.538, -2.16, 128.144)), (' H  90  THR HG23', ' H 114  THR  HA ', -0.459, (-0.655, 9.343, 41.543)), (' H 102  PRO  HG3', ' L  49  TYR  CZ ', -0.457, (7.388, -8.835, 70.177)), (' A   2  VAL  HA ', ' A  25  SER  O  ', -0.456, (-26.834, 4.813, 104.889)), (' A  73  ASP  OD1', ' A  75  SER  OG ', -0.454, (-43.328, 5.053, 107.953)), (' H 131  SER  OG ', ' H 218  LYS  HE3', -0.454, (35.079, 13.995, 22.82)), (' E 392  PHE  CD1', ' E 515  PHE  HB3', -0.451, (-36.634, -5.843, 80.771)), (' L  35  TRP  CE2', ' L  73  PHE  HB2', -0.449, (12.456, 5.015, 68.218)), (' E 475  ALA  HB1', ' H  32  ASN HD21', -0.445, (-2.096, -15.882, 60.074)), (' E 391  CYS  CB ', ' E 522  ALA  HB1', -0.444, (-43.579, -7.657, 85.013)), (' E 363  ALA  O  ', ' E 526  GLY  HA2', -0.434, (-37.969, -3.262, 91.346)), (' B  83  ASP  O  ', ' B  87  TYR  OH ', -0.429, (-7.012, -12.003, 115.252)), (' H 182  LEU  C  ', ' H 182  LEU HD12', -0.424, (16.482, 10.094, 33.571)), (' B  48  LEU HD23', ' B  59  ILE HD12', -0.423, (-11.209, -6.686, 109.756)), (' H  20  LEU  HG ', ' H  82  MET  HE2', -0.417, (-5.915, 0.648, 44.762)), (' A 302  TAR  O11', ' A 302  TAR  O3 ', -0.411, (-21.188, 0.352, 124.112)), (' B 186  ALA  O  ', ' B 190  LYS  HG3', -0.411, (-27.017, -23.045, 159.339)), (' A  36  TRP  CE2', ' A  81  MET  HB2', -0.411, (-34.928, -5.126, 116.611)), (' L 167  ASP  OD2', ' L 169  LYS  HB3', -0.408, (27.78, 2.746, 47.587))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
