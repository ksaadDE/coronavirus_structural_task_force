# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 215 ', 'ASP', 0.033319349275710584, (236.185, 268.88900000000007, 203.88299999999995)), ('B', ' 215 ', 'ASP', 0.03333389912293024, (252.598, 175.387, 203.88299999999995)), ('C', ' 215 ', 'ASP', 0.03328847312425696, (163.419, 207.92299999999997, 203.882))]
data['omega'] = []
data['rota'] = [('A', ' 312 ', 'ILE', 0.024829444768765526, (232.6570000000001, 240.14499999999995, 227.47)), ('A', ' 331 ', 'ASN', 0.0, (255.968, 220.30199999999994, 182.41099999999994)), ('A', ' 525 ', 'CYS', 0.06158919729564353, (246.448, 218.955, 182.17699999999996)), ('A', ' 563 ', 'GLN', 0.2877405472566017, (250.335, 208.576, 195.085)), ('A', ' 878 ', 'LEU', 0.055589891328072, (200.50700000000012, 233.11, 257.465)), ('A', ' 916 ', 'LEU', 0.19308672507365957, (213.11500000000007, 235.945, 275.48699999999997)), ('A', '1039 ', 'ARG', 0.20956857766396936, (219.82700000000008, 221.97999999999993, 259.185)), ('B', ' 312 ', 'ILE', 0.024781608022578238, (229.468, 192.813, 227.47)), ('B', ' 331 ', 'ASN', 0.0, (200.626, 182.539, 182.414)), ('B', ' 525 ', 'CYS', 0.06148878125593623, (204.218, 191.45699999999994, 182.179)), ('B', ' 563 ', 'GLN', 0.28627740997057055, (193.287, 193.27999999999994, 195.08799999999997)), ('B', ' 878 ', 'LEU', 0.05585743205619679, (239.44800000000006, 224.17799999999994, 257.46199999999993)), ('B', ' 916 ', 'LEU', 0.19296853253127857, (235.60300000000004, 211.842, 275.485)), ('B', '1039 ', 'ARG', 0.20704027330532612, (220.15100000000007, 213.008, 259.184)), ('C', ' 312 ', 'ILE', 0.024842948414635694, (190.077, 219.239, 227.469)), ('C', ' 331 ', 'ASN', 0.0, (195.6030000000001, 249.35099999999994, 182.41099999999994)), ('C', ' 525 ', 'CYS', 0.06173304847919103, (201.5300000000001, 241.78, 182.17599999999993)), ('C', ' 563 ', 'GLN', 0.2885106851850348, (208.57500000000007, 250.33499999999995, 195.08399999999997)), ('C', ' 878 ', 'LEU', 0.055631665278589676, (212.2460000000001, 194.913, 257.46199999999993)), ('C', ' 916 ', 'LEU', 0.19223335936860833, (203.48700000000002, 204.41400000000004, 275.4839999999999)), ('C', '1039 ', 'ARG', 0.20643727711759535, (212.22500000000005, 217.20999999999998, 259.18299999999994))]
data['cbeta'] = []
data['probe'] = [(' C  67  ALA  O  ', ' C 262  ALA  HA ', -0.746, (156.892, 204.962, 191.92)), (' A  67  ALA  O  ', ' A 262  ALA  HA ', -0.736, (237.517, 275.935, 191.727)), (' B  67  ALA  O  ', ' B 262  ALA  HA ', -0.729, (258.045, 170.69, 191.727)), (' B 588  THR HG21', ' C 841  LEU HD12', -0.601, (208.204, 184.527, 209.861)), (' A 588  THR HG21', ' B 841  LEU HD12', -0.596, (250.424, 225.942, 209.934)), (' C 391  CYS  HA ', ' C 525  CYS  HA ', -0.587, (202.42, 240.89, 183.099)), (' B 391  CYS  HA ', ' B 525  CYS  HA ', -0.582, (204.19, 192.965, 183.483)), (' A 841  LEU HD12', ' C 588  THR HG21', -0.577, (194.137, 241.765, 209.716)), (' A 370  ASN  HB3', ' C 455  LEU HD21', -0.571, (238.584, 229.531, 163.039)), (' A 391  CYS  HA ', ' A 525  CYS  HA ', -0.568, (245.048, 218.79, 183.124)), (' B 922  LEU HD11', ' T   1  NAG  H5 ', -0.563, (241.581, 201.542, 271.569)), (' C 331  ASN  N  ', ' C 331  ASN  OD1', -0.557, (195.938, 249.858, 184.159)), (' C 777  ASN  OD1', ' C1019 BARG  NH1', -0.556, (220.805, 206.346, 239.541)), (' A 331  ASN  N  ', ' A 331  ASN  OD1', -0.553, (256.421, 219.723, 183.944)), (' B 153  MET  HE1', ' B1307  NAG  H4 ', -0.552, (273.463, 176.782, 174.152)), (' A 153  MET  HE1', ' A1307  NAG  H4 ', -0.552, (224.653, 286.324, 174.212)), (' A 922  LEU HD11', ' J   1  NAG  H5 ', -0.551, (218.644, 245.873, 271.419)), (' C 153  MET  HE1', ' C1307  NAG  H4 ', -0.549, (154.351, 189.753, 174.296)), (' A  21  ARG  NH1', ' A  79  PHE  O  ', -0.548, (243.181, 270.599, 184.845)), (' A 455  LEU HD21', ' B 370  ASN  HB3', -0.546, (216.794, 192.872, 163.048)), (' C 922  LEU HD11', ' d   1  NAG  H5 ', -0.546, (192.075, 204.207, 271.389)), (' A 787  GLN  OE1', ' C 703  ASN  ND2', -0.54, (189.553, 224.415, 258.477)), (' C 354  ASN  O  ', ' C 398  ASP  HA ', -0.538, (218.86, 241.044, 171.28)), (' B 455  LEU HD21', ' C 370  ASN  HB3', -0.538, (196.325, 230.29, 163.327)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.537, (237.534, 204.003, 171.022)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.537, (196.152, 206.709, 171.317)), (' B 777  ASN  OD1', ' B1019 BARG  NH1', -0.536, (225.252, 225.845, 239.556)), (' B 331  ASN  N  ', ' B 331  ASN  OD1', -0.536, (199.866, 182.491, 184.024)), (' B1048  HIS  HA ', ' B1066  THR HG22', -0.535, (229.432, 211.195, 260.991)), (' g   2  NAG  H3 ', ' g   2  NAG  H83', -0.534, (201.919, 245.574, 297.244)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.533, (216.877, 231.256, 260.71)), (' M   2  NAG  H3 ', ' M   2  NAG  H83', -0.532, (249.312, 216.321, 297.486)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.531, (205.549, 209.871, 260.839)), (' C  21  ARG  NH1', ' C  79  PHE  O  ', -0.531, (158.489, 213.213, 184.845)), (' B  21  ARG  NH1', ' B  79  PHE  O  ', -0.531, (250.531, 168.558, 184.813)), (' W   2  NAG  H3 ', ' W   2  NAG  H83', -0.527, (200.702, 190.292, 297.571)), (' B 703  ASN  ND2', ' C 787  GLN  OE1', -0.519, (225.188, 189.649, 258.467)), (' A 703  ASN  ND2', ' B 787  GLN  OE1', -0.518, (237.456, 238.039, 258.983)), (' A 777  ASN  OD1', ' A1019 BARG  NH1', -0.498, (206.028, 220.064, 239.709)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.496, (226.835, 213.951, 169.028)), (' B 716  THR  N  ', ' B1071  GLN  O  ', -0.491, (230.389, 197.525, 273.693)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.49, (215.552, 227.437, 169.098)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.487, (209.651, 210.913, 169.064)), (' A  96  GLU  OE2', ' A 101  ILE  N  ', -0.487, (230.46, 270.964, 188.434)), (' C 216  LEU HD12', ' C 217  PRO  HD2', -0.479, (168.647, 204.704, 202.002)), (' A 108  THR HG22', ' A 109  THR HG23', -0.475, (241.225, 249.53, 177.089)), (' A 216  LEU HD12', ' A 217  PRO  HD2', -0.471, (230.764, 265.847, 202.064)), (' C 716  THR  N  ', ' C1071  GLN  O  ', -0.471, (193.74, 216.131, 273.628)), (' B  96  GLU  OE2', ' B 101  ILE  N  ', -0.47, (257.392, 179.208, 188.425)), (' B 108  THR HG22', ' B 109  THR HG23', -0.469, (233.41, 180.894, 177.011)), (' C 280  ASN HD22', ' C1312  NAG  H83', -0.469, (184.588, 192.239, 210.671)), (' A1130  ILE HD11', ' B 921  LYS  NZ ', -0.467, (246.744, 213.229, 278.733)), (' B 216  LEU HD12', ' B 217  PRO  HD2', -0.466, (252.661, 181.623, 202.064)), (' B1130  ILE HD11', ' C 921  LYS  NZ ', -0.465, (199.538, 194.093, 278.775)), (' A 312  ILE HD11', ' A 596  SER  HB3', -0.464, (236.408, 238.462, 225.495)), (' A 280  ASN HD22', ' A1312  NAG  H83', -0.462, (212.027, 258.299, 210.806)), (' C 108  THR HG22', ' C 109  THR HG23', -0.461, (177.623, 221.707, 176.592)), (' B 280  ASN HD22', ' B1312  NAG  H83', -0.46, (255.948, 201.527, 210.929)), (' C 312  ILE HD11', ' C 596  SER  HB3', -0.457, (189.726, 223.32, 225.951)), (' A 921  LYS  NZ ', ' C1130  ILE HD11', -0.457, (206.453, 244.814, 278.569)), (' B 641  ASN  HB3', ' B 653  ALA  O  ', -0.455, (229.802, 176.91, 228.797)), (' A 641  ASN  HB3', ' A 653  ALA  O  ', -0.453, (246.355, 248.143, 228.697)), (' C 641  ASN  HB3', ' C 653  ALA  O  ', -0.453, (176.107, 227.057, 228.837)), (' A 716  THR  N  ', ' A1071  GLN  O  ', -0.452, (228.224, 238.434, 273.597)), (' C  78  ARG  HA ', ' C  78  ARG  HD2', -0.45, (155.474, 214.739, 189.665)), (' B 312  ILE HD11', ' B 596  SER  HB3', -0.45, (226.09, 190.485, 225.496)), (' A 370  ASN  N  ', ' A 370  ASN  OD1', -0.448, (238.966, 226.053, 164.59)), (' A 763  LEU HD22', ' A1008  VAL HG21', -0.446, (207.903, 220.29, 219.39)), (' B 763  LEU HD22', ' B1008  VAL HG21', -0.44, (224.471, 224.263, 218.964)), (' A 185  ASN  HB2', ' A 212  LEU  O  ', -0.44, (231.049, 276.579, 201.904)), (' C 477  SER  O  ', ' C 478  THR  OG1', -0.44, (255.137, 237.077, 166.266)), (' A 477  SER  O  ', ' A 478  THR  OG1', -0.437, (215.57, 174.707, 166.386)), (' A 580  GLN  HB3', ' A 580  GLN HE21', -0.436, (259.02, 222.002, 187.933)), (' C 580  GLN  HB3', ' C 580  GLN HE21', -0.434, (192.5, 251.135, 187.988)), (' B  14  GLN  O  ', ' B 158  ARG  HD3', -0.433, (253.452, 171.834, 171.057)), (' C 763  LEU HD22', ' C1008  VAL HG21', -0.433, (219.549, 207.729, 219.321)), (' A 105  ILE HD11', ' A 239  GLN HE21', -0.432, (238.18, 261.242, 179.719)), (' B 185  ASN  HB2', ' B 212  LEU  O  ', -0.431, (261.762, 175.822, 201.972)), (' C  14  GLN  O  ', ' C 158  ARG  HD3', -0.431, (159.822, 209.071, 171.074)), (' C 185  ASN  HB2', ' C 212  LEU  O  ', -0.43, (159.273, 199.693, 201.987)), (' B 101  ILE HG13', ' B 242  LEU  CD2', -0.43, (253.516, 177.147, 187.892)), (' A 101  ILE HG13', ' A 242  LEU  CD2', -0.429, (234.236, 268.774, 187.927)), (' B 833  PHE  HE2', ' B 860  VAL HG12', -0.427, (239.996, 225.147, 228.357)), (' C 105  ILE HD11', ' C 239  GLN HE21', -0.427, (169.058, 213.501, 179.719)), (' A  14  GLN  O  ', ' A 158  ARG  HD3', -0.425, (238.606, 271.649, 171.396)), (' C 101  ILE HG13', ' C 242  LEU  CD2', -0.424, (164.678, 206.069, 188.244)), (' B 477  SER  O  ', ' B 478  THR  OG1', -0.423, (181.525, 240.308, 166.296)), (' A1116  THR  HB ', ' A1140  PRO  HD3', -0.422, (224.479, 223.374, 294.796)), (' B 105  ILE HD11', ' B 239  GLN HE21', -0.42, (245.176, 177.089, 179.927)), (' A 833  PHE  HE2', ' A 860  VAL HG12', -0.419, (199.433, 233.12, 228.384)), (' B  29  THR  OG1', ' B  30  ASN  N  ', -0.419, (246.115, 176.498, 204.622)), (' C1116  THR  HB ', ' C1140  PRO  HD3', -0.418, (208.65, 220.467, 294.814)), (' A  29  THR  OG1', ' A  30  ASN  N  ', -0.418, (238.702, 262.731, 204.538)), (' C 833  PHE  HE2', ' C 860  VAL HG12', -0.418, (213.014, 194.252, 228.104)), (' B  29  THR HG23', ' B  62  VAL HG23', -0.418, (245.678, 177.066, 201.015)), (' C 808  ASP  HA ', ' C 809  PRO  HD3', -0.415, (204.596, 184.021, 254.664)), (' C  29  THR HG23', ' C  62  VAL HG23', -0.414, (168.088, 213.003, 201.366)), (' B1130  ILE HD11', ' C 921  LYS  HZ2', -0.413, (199.153, 194.686, 278.792)), (' B1116  THR  HB ', ' B1140  PRO  HD3', -0.413, (219.125, 208.232, 294.374)), (' A1130  ILE HD11', ' B 921  LYS  HZ1', -0.412, (246.923, 213.421, 278.742)), (' B  78  ARG  HA ', ' B  78  ARG  HD2', -0.411, (250.666, 164.991, 189.68)), (' B 206  LYS  HB3', ' B 223  LEU HD22', -0.411, (251.892, 191.505, 197.915)), (' B 100  ILE HD11', ' B 245  HIS  HE1', -0.41, (262.169, 173.926, 187.429)), (' C 100  ILE HD11', ' C 245  HIS  HE1', -0.409, (157.388, 200.311, 187.437)), (' B 312  ILE HD12', ' B 598  ILE HG13', -0.409, (228.429, 189.485, 227.377)), (' B 518  LEU HD22', ' B 546  LEU  HB2', -0.408, (205.782, 195.045, 192.542)), (' A 206  LYS  HB3', ' A 223  LEU HD22', -0.408, (222.389, 260.588, 197.969)), (' A 981  LEU  HA ', ' A 981  LEU HD23', -0.407, (203.784, 227.254, 194.015)), (' C 206  LYS  HB3', ' C 223  LEU HD22', -0.406, (177.581, 200.083, 197.874)), (' A  29  THR HG23', ' A  62  VAL HG23', -0.406, (238.14, 262.432, 201.219)), (' C 312  ILE HD12', ' C 598  ILE HG13', -0.406, (188.036, 221.889, 227.132)), (' B 642  VAL HG22', ' B 651  ILE HG12', -0.405, (225.509, 177.229, 223.412)), (' C  96  GLU  OE2', ' C 101  ILE  N  ', -0.404, (164.786, 201.946, 188.463)), (' C 642  VAL HG22', ' C 651  ILE HG12', -0.404, (178.212, 230.659, 223.461)), (' C  29  THR  OG1', ' C  30  ASN  N  ', -0.401, (167.48, 213.157, 204.634)), (' B1073  LYS  HE2', ' B1075  PHE  CZ ', -0.401, (227.476, 194.199, 279.329)), (' A 642  VAL HG22', ' A 651  ILE HG12', -0.4, (248.364, 244.464, 222.848)), (' C 981  LEU  HA ', ' C 981  LEU HD23', -0.4, (216.179, 200.376, 193.838))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
