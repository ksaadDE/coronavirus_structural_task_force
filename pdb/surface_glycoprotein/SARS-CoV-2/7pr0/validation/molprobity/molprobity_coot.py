# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 160 ', 'ASP', 0.04352435688799937, (-98.69013000000002, 81.31148, -41.87814999999999)), ('G', ' 165 ', 'PRO', 0.03507184889348352, (-81.29176000000002, 24.158690000000007, 20.91739)), ('H', ' 160 ', 'ASP', 0.04956569189519722, (-12.748260000000005, 55.41734000000002, -20.42922))]
data['omega'] = [('B', '   8 ', 'PRO', None, (-65.36024, 85.26920000000003, -56.66366999999999)), ('B', ' 100 ', 'PRO', None, (-56.79513000000002, 86.76364, -30.40855)), ('B', ' 148 ', 'PRO', None, (-78.0108, 79.04261000000002, -64.69683)), ('C', ' 163 ', 'PRO', None, (-94.00280000000002, 76.81564, -34.9696)), ('C', ' 165 ', 'PRO', None, (-90.63611, 72.61323000000003, -38.11884)), ('F', '   8 ', 'PRO', None, (-112.28729000000001, 34.9012, 18.88051)), ('F', ' 100 ', 'PRO', None, (-96.90085000000003, 57.62516, 14.176879999999997)), ('F', ' 148 ', 'PRO', None, (-109.40745000000003, 18.75924, 21.56032)), ('G', ' 163 ', 'PRO', None, (-76.78403000000003, 26.76977, 25.42573)), ('G', ' 165 ', 'PRO', None, (-80.40854000000002, 25.28826, 20.62034)), ('H', ' 163 ', 'PRO', None, (-22.000760000000007, 56.03061000000001, -18.50412)), ('H', ' 165 ', 'PRO', None, (-23.57436, 50.06557, -17.92991)), ('L', '   8 ', 'PRO', None, (-13.846250000000005, 34.30967, 9.83967)), ('L', ' 100 ', 'PRO', None, (-34.56917, 50.68202, 17.67249)), ('L', ' 148 ', 'PRO', None, (-5.988240000000002, 29.90582, -4.3169))]
data['rota'] = [('H', ' 109 ', 'VAL', 0.08432910959754263, (-38.833950000000016, 49.58397, 20.78262)), ('A', ' 382 ', 'VAL', 0.12306930690846453, (-49.96105, 36.71255, -27.04034)), ('A', ' 511 ', 'VAL', 0.13243575048569803, (-52.841920000000016, 52.841000000000015, -29.16679)), ('C', ' 102 ', 'ILE', 0.022092167242138003, (-51.66194000000001, 77.814, -26.67005)), ('D', ' 333 ', 'THR', 0.11835020369901655, (-76.80667, 25.864089999999994, -12.3442)), ('D', ' 382 ', 'VAL', 0.15352764698972488, (-79.80415, 42.09379000000001, -30.14336)), ('D', ' 472 ', 'ILE', 0.08018909313372563, (-82.10377, 72.67978, -3.5538)), ('D', ' 511 ', 'VAL', 0.09553309442388803, (-86.51406, 46.29455000000001, -15.77068)), ('F', '  39 ', 'ASP', 0.06314395267959935, (-104.32611000000003, 46.58035000000002, 9.88517)), ('G', '  51 ', 'ILE', 0.07320363062300843, (-87.52453000000003, 56.12064, 12.52991)), ('G', ' 102 ', 'ILE', 0.23381163686425807, (-94.08616000000004, 59.43638, 3.5831)), ('G', ' 133 ', 'LYS', 0.0923093548893972, (-73.66444000000003, 23.71304, 29.5212)), ('G', ' 221 ', 'THR', 0.2581214217611757, (-72.10112, 15.094790000000003, 23.297219999999996))]
data['cbeta'] = []
data['probe'] = [(' A 418  ILE  HA ', ' A 422  ASN HD22', -0.692, (-44.109, 60.122, -19.977)), (' G  52  SER  HB2', ' G 103  THR HG21', -0.67, (-89.482, 60.403, 8.039)), (' L 168  GLU  HB2', ' L 182  LEU HD11', -0.669, (-5.994, 42.562, -10.281)), (' C 179  VAL  O  ', ' C 180  HIS  ND1', -0.664, (-88.874, 69.06, -57.499)), (' G  93  VAL HG22', ' G 124  THR HG22', -0.663, (-85.729, 34.59, 17.012)), (' E 418  ILE  HA ', ' E 422  ASN HD22', -0.662, (-63.297, 38.952, 12.183)), (' B 168  GLU  HB2', ' B 182  LEU HD11', -0.656, (-87.809, 83.683, -55.527)), (' H 143  SER  H  ', ' H 146  SER  HB3', -0.65, (1.724, 36.775, -26.781)), (' E 403  ARG  NH2', ' E 405  ASP  OD2', -0.645, (-58.611, 29.318, 19.166)), (' G  57  THR HG21', ' G 108  SER  HB3', -0.615, (-91.581, 63.246, 12.572)), (' G  67  ARG  NH2', ' G  90  ASP  OD2', -0.605, (-84.15, 45.429, 28.079)), (' C  93  VAL HG22', ' C 124  THR HG22', -0.602, (-79.472, 75.78, -36.743)), (' H  30  SER  O  ', ' H  53  SER  OG ', -0.601, (-47.834, 49.959, 10.815)), (' G  83  MET  HB3', ' G  86  LEU HD21', -0.594, (-81.143, 45.293, 23.555)), (' B  37  TYR  HD2', ' B  97  LEU  HA ', -0.587, (-52.197, 87.574, -37.799)), (' E 346  ARG  NH2', ' H 117  ASP  OD1', -0.579, (-40.812, 40.853, 7.796)), (' B  66  ARG  NH1', ' B  87  ASP  OD2', -0.572, (-61.701, 68.537, -55.347)), (' F  29  LEU  HA ', ' F  97  LEU HD22', -0.561, (-108.658, 55.591, 15.404)), (' H 148  SER  OG ', ' H 149  GLY  N  ', -0.56, (1.167, 27.833, -22.392)), (' L 129  ASP  HA ', ' L 132  LEU  HB2', -0.557, (0.774, 53.475, -29.672)), (' D 418  ILE  HA ', ' D 422  ASN HD22', -0.551, (-86.979, 61.575, -15.006)), (' H  34  MET  HB3', ' H  79  LEU HD22', -0.549, (-39.237, 51.259, 5.106)), (' H  91  THR HG23', ' H 126  THR  HA ', -0.545, (-23.648, 55.515, -7.996)), (' G  83  MET  HE2', ' G  86  LEU HD21', -0.542, (-81.52, 44.502, 23.843)), (' A 389  ASP  HA ', ' D 521  PRO  HG3', -0.532, (-60.806, 32.94, -32.351)), (' C 157  LEU HD22', ' C 159  LYS  HB2', -0.53, (-100.054, 80.245, -47.863)), (' F 120  PRO  HB3', ' F 146  PHE  HB3', -0.527, (-104.243, 13.27, 24.353)), (' F 191  ALA  O  ', ' F 195  LYS  HG2', -0.524, (-87.039, 13.248, 49.855)), (' G   4  LEU HD21', ' G  34  MET  HE1', -0.522, (-87.374, 47.239, 6.461)), (' F 168  GLU  HB2', ' F 182  LEU HD11', -0.521, (-97.57, 21.075, 29.427)), (' F 156  LYS  HB3', ' F 159  ASN  HA ', -0.521, (-102.033, 12.202, 44.846)), (' E 384  PRO  HA ', ' E 387  LEU  HG ', -0.52, (-64.048, 22.286, -8.388)), (' H 157  LEU HD22', ' H 159  LYS  HB2', -0.52, (-8.47, 50.695, -22.184)), (' C  34  MET  HB3', ' C  79  LEU HD22', -0.517, (-65.055, 76.497, -26.853)), (' A 518  LEU HD12', ' A 520  ALA  HB2', -0.513, (-63.46, 30.134, -21.209)), (' D 434  ILE  HB ', ' D 511  VAL HG22', -0.513, (-87.5, 43.894, -17.647)), (' G  91  THR HG23', ' G 126  THR  HA ', -0.508, (-83.308, 35.28, 24.245)), (' B  88  VAL HG21', ' B 113  ILE HD11', -0.506, (-71.617, 70.193, -56.733)), (' L 196  HIS  O  ', ' L 218  ARG  HD2', -0.504, (10.552, 52.466, -22.776)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.5, (-45.457, 51.493, -33.276)), (' E 445  VAL HG21', ' L  58  ASN  CG ', -0.5, (-35.752, 31.939, 18.062)), (' B   3  VAL HG12', ' B  26  SER  HB3', -0.498, (-61.43, 96.205, -45.692)), (' F  64  PRO  HG2', ' F  66  ARG HH21', -0.498, (-104.226, 32.756, -0.451)), (' A 341  VAL HG22', ' A 356  LYS  HD2', -0.497, (-62.017, 55.041, -29.617)), (' G 166  VAL HG12', ' G 216  HIS  HD2', -0.497, (-78.581, 20.813, 22.983)), (' A 384  PRO  HA ', ' A 387  LEU  HG ', -0.495, (-52.665, 38.71, -32.377)), (' A 403  ARG  HE ', ' A 405  ASP  HB2', -0.495, (-37.918, 61.164, -29.131)), (' G   3  GLN  O  ', ' G   4  LEU HD12', -0.494, (-85.326, 44.802, 2.593)), (' B  88  VAL HG13', ' B 111  VAL  O  ', -0.492, (-71.445, 73.816, -55.37)), (' A 403  ARG  NH2', ' A 405  ASP  OD2', -0.49, (-35.617, 62.814, -29.569)), (' G 216  HIS  CE1', ' G 218  PRO  HG2', -0.487, (-74.905, 23.423, 23.299)), (' G 168  VAL HG23', ' G 214  VAL HG22', -0.48, (-81.915, 12.907, 22.544)), (' G  30  SER  O  ', ' G  53  SER  OG ', -0.48, (-86.387, 58.526, 2.755)), (' A 519  HIS  HB2', ' E 392  PHE  HB2', -0.48, (-62.727, 31.685, -15.405)), (' L  42  LEU HD13', ' L  91  TYR  CZ ', -0.478, (-24.052, 32.398, 3.076)), (' F  40  TRP  CD2', ' F  78  LEU  HG ', -0.474, (-108.388, 41.23, 10.478)), (' C  30  SER  O  ', ' C  53  SER  OG ', -0.474, (-56.189, 74.143, -21.851)), (' L 220  GLU  HG2', ' L 221  CYS  H  ', -0.473, (10.192, 40.978, -29.274)), (' B  59  ARG  NH1', ' B  65  ASP  HA ', -0.467, (-52.06, 68.611, -51.662)), (' B 149  ARG  HB2', ' B 180  TYR  CE2', -0.466, (-78.005, 77.864, -59.031)), (' G  36  TRP  HD1', ' G  70  ILE HD12', -0.464, (-85.799, 50.71, 15.318)), (' B  23  CYS  HB2', ' B  40  TRP  CH2', -0.464, (-60.443, 84.3, -49.933)), (' H  70  ILE HD11', ' H  79  LEU HD11', -0.461, (-38.79, 54.535, 5.058)), (' L 194  GLU  HG2', ' L 218  ARG  NH2', -0.461, (8.37, 55.039, -26.923)), (' G  60  TYR  CE1', ' G  70  ILE HG22', -0.459, (-85.192, 54.363, 18.585)), (' D 379  CYS  HA ', ' D 432  CYS  HA ', -0.459, (-84.208, 45.034, -25.621)), (' C  91  THR HG23', ' C 126  THR  HA ', -0.458, (-83.886, 80.874, -33.825)), (' C  83  MET  HE2', ' C  86  LEU HD21', -0.456, (-78.707, 83.544, -27.293)), (' G 133  LYS  HD3', ' G 191  LEU HD21', -0.456, (-76.493, 23.602, 33.02)), (' B 191  ALA  O  ', ' B 195  LYS  HG2', -0.456, (-108.063, 96.835, -54.175)), (' A 396  TYR  HB2', ' A 514  SER  HB2', -0.456, (-57.253, 47.293, -22.039)), (' A 440  ASN  N  ', ' A 440  ASN  OD1', -0.455, (-48.56, 63.179, -41.1)), (' A 521  PRO  HG3', ' E 389  ASP  HA ', -0.453, (-62.661, 23.466, -18.56)), (' G  51  ILE HG22', ' G  52  SER  O  ', -0.453, (-85.995, 57.314, 10.12)), (' L 194  GLU  HG2', ' L 218  ARG HH21', -0.453, (7.797, 54.756, -26.702)), (' H  29  PHE  CE1', ' H  34  MET  HE3', -0.452, (-43.909, 48.813, 4.379)), (' A 339  GLY  O  ', ' A 343  ASN  HB2', -0.451, (-60.63, 56.982, -38.12)), (' H  83  MET  HB3', ' H  86  LEU HD21', -0.45, (-29.493, 61.211, -2.063)), (' B 127  PRO  HB2', ' B 132  LEU  HG ', -0.45, (-106.782, 85.021, -54.366)), (' A 346  ARG  NH2', ' C 117  ASP  OD1', -0.449, (-58.05, 72.117, -33.11)), (' E 440  ASN  N  ', ' E 440  ASN  OD1', -0.445, (-44.797, 26.636, 9.69)), (' A 518  LEU HD21', ' E 518  LEU HD13', -0.445, (-66.509, 33.835, -20.122)), (' G  34  MET  SD ', ' G  98  SER  HB2', -0.444, (-88.519, 49.946, 6.301)), (' F  88  VAL HG21', ' F 113  ILE HD11', -0.444, (-103.661, 23.425, 9.85)), (' B  42  LEU HD13', ' B  91  TYR  CZ ', -0.442, (-65.483, 74.1, -50.34)), (' E 350  VAL  HA ', ' E 400  PHE  HB2', -0.44, (-56.832, 38.077, 6.68)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.439, (-49.127, 43.743, -28.36)), (' A 385  THR HG23', ' A 386  LYS  HG3', -0.439, (-50.91, 32.988, -34.017)), (' H  83  MET  HE2', ' H  86  LEU HD21', -0.437, (-28.957, 60.451, -2.303)), (' C  67  ARG  NH2', ' C  90  ASP  OD2', -0.436, (-79.158, 88.965, -28.592)), (' F  23  CYS  HB2', ' F  40  TRP  CH2', -0.43, (-109.467, 41.997, 14.822)), (' F  40  TRP  CE2', ' F  78  LEU  HG ', -0.429, (-108.928, 41.005, 10.444)), (' B 173  GLN  HG3', ' B 180  TYR  CZ ', -0.429, (-77.351, 74.86, -57.59)), (' F 127  PRO  HD3', ' F 139  VAL HG22', -0.428, (-90.298, 10.442, 38.989)), (' E 396  TYR  HB2', ' E 514  SER  HB2', -0.428, (-63.722, 36.368, -6.257)), (' E 386  LYS  O  ', ' E 390  LEU  HG ', -0.425, (-65.968, 23.059, -13.325)), (' L 173  GLN  HG3', ' L 180  TYR  CZ ', -0.424, (-13.459, 32.784, -6.011)), (' B 144  ASN  ND2', ' C 199  THR HG21', -0.424, (-91.431, 71.656, -63.153)), (' A 338  PHE  CD2', ' A 368  LEU HD21', -0.423, (-59.192, 47.035, -35.303)), (' B  66  ARG  HD2', ' B  82  ARG  O  ', -0.422, (-59.823, 67.767, -57.283)), (' D 385  THR HG23', ' D 386  LYS  HG3', -0.422, (-82.786, 34.907, -32.806)), (' H  18  LEU HD23', ' H  86  LEU HD11', -0.42, (-29.865, 61.991, -5.091)), (' A 350  VAL  HA ', ' A 400  PHE  HB2', -0.419, (-50.491, 60.0, -24.702)), (' C  29  PHE  CE1', ' C  34  MET  HE3', -0.418, (-62.65, 72.39, -25.256)), (' D 440  ASN  N  ', ' D 440  ASN  OD1', -0.418, (-101.261, 45.638, -9.723)), (' F   2  ILE HG23', ' F  27  GLN  HG2', -0.418, (-108.39, 53.266, 21.263)), (' G  51  ILE HG13', ' G  70  ILE HD13', -0.418, (-85.729, 53.777, 14.143)), (' B  40  TRP  CD2', ' B  78  LEU  HG ', -0.417, (-59.32, 79.895, -50.015)), (' G  12  VAL HG13', ' G 127  VAL HG22', -0.417, (-79.451, 39.777, 26.096)), (' L  71  GLY  HA3', ' L  76  PHE  HA ', -0.413, (-22.636, 32.859, 19.84)), (' D 384  PRO  HA ', ' D 387  LEU  HG ', -0.412, (-83.23, 38.189, -27.285)), (' A 444  LYS  HG3', ' C 114  TYR  CG ', -0.412, (-51.842, 73.187, -35.933)), (' F  30  LEU HD23', ' F  31  HIS  O  ', -0.408, (-112.753, 59.177, 10.132)), (' D 350  VAL HG22', ' D 422  ASN  HB3', -0.407, (-85.554, 58.089, -13.18)), (' H   4  LEU HD22', ' H  22  CYS  SG ', -0.407, (-41.178, 48.07, 0.517)), (' C  18  LEU HD23', ' C  86  LEU HD11', -0.407, (-81.56, 82.348, -25.344)), (' L  40  TRP  CE2', ' L  78  LEU  HG ', -0.405, (-24.083, 33.392, 12.184)), (' L  40  TRP  CD2', ' L  78  LEU  HG ', -0.404, (-24.29, 33.461, 11.912)), (' G 184  ALA  HA ', ' G 194  LEU  HB3', -0.402, (-87.415, 21.277, 25.554)), (' D 396  TYR  O  ', ' D 513  LEU  HA ', -0.4, (-80.297, 44.229, -17.711)), (' L  59  ARG  HD3', ' L  67  PHE  O  ', -0.4, (-30.766, 25.414, 10.551)), (' E 371  SER  C  ', ' E 373  SER  H  ', -0.4, (-51.493, 19.32, -1.567))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
