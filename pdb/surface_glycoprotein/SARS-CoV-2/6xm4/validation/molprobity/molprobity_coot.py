# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 844 ', 'ILE', 0.09750312802149819, (156.173, 156.278, 192.108)), ('B', '1143 ', 'PRO', 0.0440615808599262, (177.759, 191.47500000000005, 274.09)), ('C', ' 590 ', 'CYS', 0.04847375835091278, (219.528, 183.021, 180.436))]
data['omega'] = [('B', ' 362 ', 'VAL', None, (189.81399999999994, 226.42100000000005, 150.867)), ('C', ' 216 ', 'LEU', None, (224.807, 226.52000000000007, 178.243))]
data['rota'] = [('A', ' 118 ', 'LEU', 0.14938817070913984, (200.31999999999994, 143.90800000000002, 148.954)), ('A', ' 166 ', 'CYS', 0.06672006869111934, (199.508, 151.085, 139.359)), ('A', ' 393 ', 'THR', 0.07257589273141662, (158.85599999999994, 176.985, 157.212)), ('B', ' 402 ', 'ILE', 0.10661686399991356, (186.708, 224.808, 122.247)), ('B', ' 493 ', 'GLN', 0.1570604713181537, (194.808, 226.25500000000005, 112.23200000000001)), ('B', ' 493 ', 'GLN', 0.22498705097339675, (194.80499999999995, 226.25200000000007, 112.233)), ('C', '  90 ', 'VAL', 0.25295835660561666, (216.834, 217.893, 166.233)), ('C', ' 233 ', 'ILE', 0.18184661120936016, (208.546, 214.98100000000002, 152.15)), ('C', ' 432 ', 'CYS', 0.012204796803416684, (199.574, 175.908, 148.972)), ('C', ' 581 ', 'THR', 0.2172959691161555, (227.21499999999995, 166.078, 164.525)), ('C', ' 622 ', 'VAL', 0.292282837699272, (226.761, 192.44, 181.663))]
data['cbeta'] = []
data['probe'] = [(' B 448  ASN  HB3', ' B 497  PHE  HB2', -0.707, (186.651, 234.923, 116.174)), (' B 367  VAL  HA ', ' B 371  SER  HB2', -0.635, (176.319, 229.324, 141.579)), (' A 328  ARG  NH2', ' A 531  THR  O  ', -0.615, (159.999, 156.123, 161.493)), (' C 777  ASN  OD1', ' C1019  ARG  NH1', -0.607, (179.04, 194.367, 209.516)), (' B 352  ALA  HA ', ' B 466  ARG  HD3', -0.605, (200.563, 223.734, 125.812)), (' A 131  CYS  HA ', ' A 166  CYS  HB3', -0.6, (199.094, 149.095, 140.547)), (' C 422  ASN HD21', ' C 454  ARG  H  ', -0.595, (186.547, 162.937, 138.08)), (' B 452  LEU HD21', ' B 492  LEU  HB3', -0.592, (198.424, 227.103, 114.751)), (' B 350  VAL HG12', ' B 400  PHE  HB2', -0.59, (191.561, 224.298, 124.474)), (' B 707  TYR  HB3', ' C 792  PRO  HG2', -0.588, (175.618, 213.422, 237.381)), (' C 133  PHE  HD2', ' C 162  SER  H  ', -0.587, (215.956, 229.873, 145.036)), (' C 901  GLN HE21', ' C 905  ARG  HE ', -0.581, (184.05, 202.091, 236.334)), (' C 212  LEU HD23', ' C 214  ARG  H  ', -0.579, (228.927, 231.464, 179.5)), (' A 642  VAL HG22', ' A 651  ILE HG12', -0.578, (174.494, 146.569, 193.526)), (' C 447  GLY  N  ', ' C 449  TYR  HH ', -0.575, (188.526, 170.071, 120.119)), (' A  99  ASN  HB3', ' A 102  ARG HH12', -0.567, (211.106, 133.076, 156.621)), (' B 134  GLN  O  ', ' B 160  TYR  OH ', -0.561, (131.937, 195.216, 147.292)), (' B 605  SER  OG ', ' B 606  ASN  N  ', -0.561, (149.13, 198.954, 199.229)), (' B 454  ARG  NH1', ' B 469  SER  O  ', -0.559, (202.07, 221.756, 117.157)), (' C 134  GLN  H  ', ' C 162  SER  HB3', -0.558, (218.144, 227.986, 142.734)), (' B 474  GLN  NE2', ' B 478  THR  O  ', -0.557, (207.149, 216.131, 103.336)), (' B 424  LYS  HB3', ' B 463  PRO  HA ', -0.557, (196.518, 211.765, 127.181)), (' B 546  LEU HD21', ' B 573  THR HG21', -0.555, (186.854, 217.451, 175.414)), (' A 518  LEU HD23', ' A 519  HIS  HB2', -0.554, (160.042, 180.326, 165.272)), (' B 777  ASN  OD1', ' B1019  ARG  NH1', -0.552, (183.846, 174.929, 208.826)), (' A 940  SER  OG ', ' A 941  THR  N  ', -0.549, (204.528, 156.743, 214.958)), (' C 494  SER  OG ', ' C 495  TYR  N  ', -0.546, (186.196, 165.374, 127.972)), (' A  99  ASN  O  ', ' A 102  ARG  NH1', -0.541, (209.258, 133.068, 155.849)), (' B 415  THR  OG1', ' B 416  GLY  N  ', -0.539, (189.048, 211.037, 119.418)), (' A 716  THR  OG1', ' A1071  GLN  O  ', -0.537, (188.735, 160.019, 243.906)), (' A 901  GLN HE21', ' A 905  ARG  HE ', -0.534, (202.839, 180.109, 236.006)), (' C 277  LEU HD22', ' C 285  ILE HD13', -0.533, (206.339, 218.815, 180.028)), (' A 352  ALA  HA ', ' A 466  ARG  HD2', -0.532, (160.267, 195.548, 141.813)), (' A 553  THR  HB ', ' A 586  ASP  HB3', -0.529, (160.446, 160.609, 177.775)), (' C 106  PHE  HB2', ' C 117  LEU  HB3', -0.528, (213.829, 221.367, 154.484)), (' C 605  SER  OG ', ' C 606  ASN  N  ', -0.528, (220.419, 211.092, 199.195)), (' B 457  ARG  NH1', ' B 459  SER  O  ', -0.528, (200.227, 212.249, 118.019)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.527, (177.597, 185.527, 222.513)), (' C 122  ASN  HB3', ' C 125  ASN  H  ', -0.524, (211.007, 239.268, 156.093)), (' A 357  ARG  NH1', ' A 359  SER  OG ', -0.524, (153.757, 178.975, 151.226)), (' A 128  ILE  HB ', ' A 170  TYR  HB3', -0.524, (206.696, 149.459, 148.952)), (' C 349  SER  OG ', ' C 452  LEU  O  ', -0.524, (190.008, 163.517, 133.782)), (' B 226  LEU HD12', ' B 227  VAL HG22', -0.521, (141.731, 181.683, 161.822)), (' A 443  SER  OG ', ' A 444  LYS  N  ', -0.521, (174.085, 190.696, 123.403)), (' C 273  ARG  NH2', ' C 290  ASP  OD2', -0.519, (215.438, 209.856, 179.981)), (' C1103  PHE  HZ ', ' T   1  NAG  H62', -0.518, (208.91, 194.442, 260.668)), (' B 136  CYS  SG ', ' B 137  ASN  N  ', -0.518, (129.227, 201.243, 149.27)), (' A 106  PHE  HB2', ' A 117  LEU  HB3', -0.518, (196.593, 146.911, 150.974)), (' A 707  TYR  HB3', ' B 792  PRO  HG3', -0.518, (168.757, 162.155, 236.921)), (' B  34  ARG  NH2', ' B 217  PRO  O  ', -0.517, (137.713, 190.1, 181.731)), (' C 530  SER  OG ', ' C 531  THR  N  ', -0.517, (226.333, 176.663, 160.778)), (' B 310  LYS  HG3', ' B 600  PRO  HA ', -0.516, (157.11, 197.779, 203.416)), (' A 454  ARG  NH2', ' A 467  ASP  O  ', -0.514, (161.082, 202.665, 142.952)), (' A  34  ARG  NH2', ' A 191  GLU  OE2', -0.513, (204.639, 142.492, 172.95)), (' B 406  GLU  OE2', ' B 495  TYR  OH ', -0.513, (186.888, 223.862, 118.161)), (' A 333  THR  OG1', ' A 334  ASN  OD1', -0.511, (153.118, 168.571, 147.012)), (' C 457  ARG  NH1', ' C 467  ASP  OD1', -0.508, (185.22, 155.874, 144.967)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.507, (218.065, 208.439, 186.73)), (' B 403  ARG  HA ', ' B 507  PRO  HA ', -0.506, (182.644, 227.188, 120.126)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.506, (177.965, 153.478, 215.628)), (' A 737  ASP  OD2', ' C 319  ARG  NH2', -0.503, (210.191, 189.59, 182.97)), (' A 383  SER  OG ', ' B 985  ASP  OD1', -0.502, (178.673, 175.27, 156.655)), (' A 552  LEU HD23', ' A 585  LEU HD11', -0.498, (161.016, 159.128, 170.101)), (' C 136  CYS  SG ', ' C 160  TYR  OH ', -0.498, (224.184, 227.631, 147.201)), (' B 402  ILE HG23', ' B 406  GLU  HG2', -0.494, (185.244, 221.858, 120.881)), (' B 454  ARG  NH2', ' B 467  ASP  O  ', -0.494, (201.078, 220.942, 120.919)), (' C 381  GLY  HA3', ' C 430  THR HG23', -0.493, (200.132, 175.176, 156.921)), (' B 409  GLN  HG3', ' B 419  ALA  H  ', -0.492, (188.732, 214.525, 120.695)), (' A 553  THR  O  ', ' A 586  ASP  N  ', -0.49, (159.233, 160.767, 175.284)), (' B1141  LEU HD13', ' C1141  LEU HD11', -0.489, (187.381, 187.909, 270.149)), (' A 719  THR  HA ', ' A 926  GLN HE22', -0.486, (197.056, 162.8, 236.824)), (' B 456  PHE  HB2', ' B 491  PRO  HA ', -0.484, (198.872, 220.366, 111.07)), (' B 444  LYS  HG2', ' B 448  ASN  HB2', -0.484, (186.832, 238.287, 116.599)), (' B 433  VAL HG22', ' B 512  VAL HG13', -0.483, (187.961, 218.543, 132.385)), (' B 901  GLN HE21', ' B 905  ARG  HE ', -0.483, (174.706, 175.016, 236.177)), (' B 452  LEU  HA ', ' B 494  SER  HA ', -0.48, (193.859, 228.632, 115.828)), (' B 716  THR  OG1', ' B1071  GLN  O  ', -0.479, (163.992, 197.496, 244.596)), (' A 110  LEU  HB3', ' A 135  PHE  HD2', -0.478, (192.346, 140.131, 146.113)), (' B 127  VAL HG12', ' B 171  VAL HG12', -0.477, (134.966, 179.393, 151.664)), (' C 108  THR  OG1', ' C 234  ASN  O  ', -0.477, (214.058, 214.118, 151.766)), (' A 335  LEU HD12', ' A 336  CYS  H  ', -0.475, (160.816, 169.282, 143.7)), (' B 940  SER  OG ', ' B 941  THR  N  ', -0.474, (152.779, 184.964, 215.004)), (' A 457  ARG  NH2', ' A 459  SER  O  ', -0.472, (165.658, 206.289, 149.49)), (' C 719  THR  HA ', ' C 926  GLN HE22', -0.472, (201.943, 206.306, 237.542)), (' A 852  ALA  O  ', ' A 856  ASN  ND2', -0.471, (208.222, 176.899, 183.605)), (' C 318  PHE  HZ ', ' C 615  VAL HG21', -0.47, (219.718, 188.325, 187.803)), (' A  65  PHE  O  ', ' A 264  ALA  N  ', -0.469, (198.038, 130.465, 164.477)), (' A 231  ILE HD12', ' A 233  ILE HG12', -0.468, (195.63, 152.013, 150.282)), (' C 625  HIS  HB2', ' C 629  LEU HD13', -0.468, (221.248, 199.384, 179.333)), (' B 442  ASP  O  ', ' B 448  ASN  ND2', -0.466, (186.452, 235.662, 118.844)), (' C  83  VAL HG11', ' C 237  ARG HH21', -0.465, (224.633, 216.477, 152.7)), (' B  37  TYR  OH ', ' B  54  LEU  O  ', -0.464, (150.506, 190.843, 170.91)), (' C 168  PHE  HZ ', ' C 231  ILE  HA ', -0.463, (204.233, 220.502, 152.718)), (' A 437  ASN  HA ', ' A 508  TYR  HA ', -0.462, (175.441, 186.476, 134.399)), (' A 476  GLY  H  ', ' A 487  ASN  HB3', -0.46, (168.611, 220.463, 141.459)), (' B 424  LYS  HG3', ' B 461  LEU  HB2', -0.459, (197.448, 212.626, 124.308)), (' A 448  ASN  OD1', ' A 450  ASN  ND2', -0.458, (166.492, 192.998, 125.519)), (' A 298  GLU  HG2', ' A 315  THR  HB ', -0.456, (186.118, 158.245, 186.645)), (' A 984  LEU  O  ', ' C 386  LYS  NZ ', -0.455, (205.971, 185.237, 160.359)), (' C 574  ASP  N  ', ' C 574  ASP  OD1', -0.454, (213.219, 170.507, 176.343)), (' B  66  HIS  HD2', ' B  68  ILE HG12', -0.454, (123.926, 202.902, 169.476)), (' C 491  PRO  HG2', ' C 492  LEU HD12', -0.452, (183.69, 156.064, 135.022)), (' A 117  LEU HD22', ' A 231  ILE HD13', -0.451, (198.338, 150.099, 151.581)), (' A 604  THR  HA ', ' A1306  NAG  H82', -0.449, (197.419, 147.605, 201.702)), (' B 581  THR  O  ', ' B 583  GLU  N  ', -0.447, (185.589, 231.723, 173.06)), (' C 858  LEU HD13', ' C 959  LEU HD22', -0.447, (184.488, 204.934, 190.408)), (' C 444  LYS  H  ', ' C 447  GLY  HA2', -0.446, (192.065, 171.219, 121.192)), (' C 825  LYS  NZ ', ' C 940  SER  O  ', -0.445, (199.494, 214.475, 214.454)), (' C 599  THR HG22', ' C 608  VAL HG12', -0.445, (216.82, 205.404, 196.462)), (' C 318  PHE  CZ ', ' C 615  VAL HG21', -0.442, (219.528, 188.604, 187.943)), (' C 659  SER  HB3', ' C 698  SER  HB2', -0.44, (221.424, 193.489, 216.125)), (' C 642  VAL HG22', ' C 651  ILE HG12', -0.438, (227.779, 195.39, 193.992)), (' A 743  CYS  HB3', ' A 749  CYS  HB3', -0.438, (205.056, 188.906, 173.941)), (' B 403  ARG  NH2', ' B 405  ASP  OD2', -0.437, (181.024, 222.704, 115.685)), (' B 234  ASN  N  ', ' B 234  ASN  OD1', -0.437, (149.552, 196.805, 152.485)), (' B 361  CYS  HB2', ' B 524  VAL HG23', -0.437, (191.243, 224.386, 148.018)), (' A 134  GLN  O  ', ' A 160  TYR  OH ', -0.436, (195.783, 137.593, 141.421)), (' A 452  LEU HD12', ' A 492  LEU  HB3', -0.435, (164.887, 202.898, 133.681)), (' C 581  THR  O  ', ' C 583  GLU  N  ', -0.435, (225.286, 165.448, 167.425)), (' B 332  ILE HG23', ' B 362  VAL HG21', -0.433, (187.04, 228.532, 153.962)), (' A 618  THR  OG1', ' A 619  GLU  OE1', -0.433, (164.197, 150.588, 189.924)), (' A  37  TYR  OH ', ' A  54  LEU  O  ', -0.433, (195.954, 153.833, 168.068)), (' B 763  LEU HD22', ' B1008  VAL HG21', -0.432, (183.92, 176.857, 189.381)), (' A 551  VAL  HB ', ' A 588  THR HG23', -0.432, (166.737, 159.73, 177.842)), (' B 133  PHE  HE1', ' B 162  SER  H  ', -0.431, (133.163, 189.413, 146.156)), (' B 293  LEU  O  ', ' B 632  THR  OG1', -0.431, (150.004, 202.971, 185.632)), (' A 384  PRO  HA ', ' A 387  LEU HD12', -0.43, (173.671, 174.254, 151.097)), (' B 280  ASN HD21', ' B1302  NAG  H82', -0.429, (146.076, 174.697, 186.015)), (' B 708  SER  OG ', ' B 709  ASN  N  ', -0.428, (176.474, 213.288, 245.379)), (' A 985  ASP  OD2', ' C 383  SER  OG ', -0.428, (203.905, 185.925, 154.972)), (' C 743  CYS  HB3', ' C 749  CYS  HB3', -0.425, (176.397, 200.992, 173.777)), (' C 186  PHE  HB3', ' C 187  LYS  H  ', -0.424, (223.197, 237.656, 174.199)), (' A 193  VAL  HB ', ' A 204  TYR  HB2', -0.424, (201.362, 149.609, 165.454)), (' B 659  SER  HB3', ' B 698  SER  HB2', -0.422, (162.723, 210.035, 216.524)), (' B 713  ALA  HB3', ' C 894  LEU  HB3', -0.421, (171.893, 202.513, 241.068)), (' C 112  SER  O  ', ' C 112  SER  OG ', -0.421, (216.99, 219.309, 140.224)), (' A 904  TYR  OH ', ' C1093  GLY  O  ', -0.42, (200.73, 183.624, 248.896)), (' C 188  ASN  HA ', ' C 209  PRO  HA ', -0.419, (218.546, 236.053, 176.582)), (' B 846  ALA  HB3', ' B 849  LEU  HG ', -0.417, (160.097, 160.008, 186.661)), (' A 128  ILE HD13', ' A 229  LEU HD11', -0.417, (204.759, 149.972, 152.539)), (' B1142  GLN  NE2', ' B1146  ASP  OD2', -0.415, (184.01, 192.483, 277.152)), (' C 902  MET  HB3', ' C 916  LEU HD11', -0.414, (189.964, 204.555, 241.692)), (' C 947  LYS  HB3', ' C 947  LYS  HE2', -0.413, (194.175, 199.782, 210.415)), (' B 357  ARG  HE ', ' B 394  ASN  ND2', -0.412, (199.303, 220.949, 144.402)), (' A 666  ILE HD11', ' A 672  ALA  HB2', -0.41, (181.202, 153.21, 202.546)), (' C 518  LEU HD21', ' C 546  LEU HD12', -0.408, (210.326, 173.492, 167.023)), (' B 121  ASN  HB3', ' B 126  VAL HG12', -0.405, (133.044, 182.296, 158.691)), (' A 138  ASP  N  ', ' A 138  ASP  OD1', -0.405, (193.448, 129.938, 147.473)), (' C 501  ASN  HB3', ' C 505  TYR  HB2', -0.404, (185.764, 178.07, 127.508)), (' A 391  CYS  HB3', ' A 522  ALA  HB1', -0.402, (160.202, 171.81, 157.713)), (' C 442  ASP  HB3', ' C 451  TYR  HE2', -0.401, (194.763, 169.659, 128.39))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
