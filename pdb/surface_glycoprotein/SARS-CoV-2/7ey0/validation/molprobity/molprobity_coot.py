# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '   7 ', 'PRO', 0.05899198012516998, (225.723, 277.5879999999999, 291.275)), ('B', '  38 ', 'PRO', 0.035447701602348336, (211.524, 273.998, 283.609)), ('B', ' 100 ', 'GLY', 0.03453790926141509, (225.411, 270.182, 286.791))]
data['omega'] = [('H', ' 102 ', 'TYR', None, (230.592, 230.675, 289.757)), ('L', '   8 ', 'PRO', None, (250.347, 219.60199999999995, 302.54)), ('R', ' 380 ', 'TYR', None, (232.8210000000001, 226.1449999999998, 257.106))]
data['rota'] = [('B', '  10 ', 'SER', 0.02987620059467822, (220.841, 285.851, 286.319)), ('B', '  31 ', 'VAL', 0.003127019590465352, (232.35399999999998, 270.868, 276.026)), ('B', '  38 ', 'PRO', 0.01899982677459449, (211.524, 273.998, 283.609)), ('B', '  39 ', 'ARG', 0.06230765963018661, (210.53699999999998, 270.288, 283.642)), ('B', '  40 ', 'GLN', 0.0, (211.451, 269.06, 280.142)), ('B', '  42 ', 'PRO', 0.011648869910901702, (217.31599999999997, 268.82299999999987, 278.354)), ('B', '  43 ', 'VAL', 0.03448015835215831, (218.068, 269.924, 274.744)), ('B', '  47 ', 'TYR', 0.0032947643602938633, (228.66, 271.114, 270.322)), ('B', '  59 ', 'ARG', 0.10016648987056968, (223.112, 284.636, 270.189)), ('B', '  61 ', 'SER', 0.07811619467899542, (228.328, 280.751, 271.08)), ('B', '  72 ', 'ILE', 0.2608582944026788, (227.586, 283.532, 275.592)), ('B', '  74 ', 'SER', 0.010642402048688382, (222.93899999999996, 288.265, 273.817)), ('B', '  86 ', 'CYS', 0.06658192723989487, (227.93, 270.658, 280.042)), ('B', '  87 ', 'GLN', 0.006334358826470965, (228.95200000000014, 267.16099999999994, 278.787)), ('B', '  88 ', 'VAL', 0.006498403374522528, (232.70800000000014, 266.786, 278.587)), ('B', '  91 ', 'ARG', 0.0, (238.40200000000013, 259.94499999999994, 277.466)), ('B', '  92 ', 'SER', 0.05407082246345408, (240.33700000000013, 258.8639999999999, 280.582)), ('B', '  94 ', 'ASP', 0.1923142292460934, (235.30600000000015, 256.976, 278.687)), ('B', '  95 ', 'GLN', 0.0, (231.93100000000015, 258.147, 280.072)), ('B', ' 102 ', 'THR', 0.028081442437206564, (223.744, 276.6789999999999, 286.318))]
data['cbeta'] = [('B', '  42 ', 'PRO', ' ', 0.31027076442496293, (218.403, 268.06099999999986, 279.08)), ('B', '  87 ', 'GLN', ' ', 0.29161022648420293, (228.15600000000015, 266.45, 277.719)), ('B', '  95 ', 'GLN', ' ', 0.32611058488108763, (231.6190000000001, 257.637, 281.47)), ('B', '  96 ', 'PRO', ' ', 0.40172955989731557, (228.6230000000001, 261.39, 279.576)), ('B', '  98 ', 'PHE', ' ', 0.4858546502602226, (226.45500000000007, 265.917, 283.008))]
data['probe'] = [(' N 167  THR  HB ', ' R 357  ARG  NH2', -1.153, (219.4, 243.842, 252.974)), (' B   5  GLN  NE2', ' B  21  CYS  SG ', -1.142, (230.493, 273.684, 282.791)), (' B   5  GLN  CD ', ' B  21  CYS  HA ', -1.002, (231.085, 274.952, 283.464)), (' B   5  GLN  NE2', ' B  21  CYS  HA ', -0.992, (231.533, 273.914, 283.739)), (' B   5  GLN HE22', ' B  21  CYS  CA ', -0.981, (231.156, 274.539, 282.533)), (' B   5  GLN  OE1', ' B  21  CYS  HA ', -0.958, (230.92, 275.107, 283.112)), (' B   5  GLN HE22', ' B  21  CYS  CB ', -0.942, (230.916, 274.445, 282.529)), (' B   5  GLN  HG3', ' B 101  GLY  HA2', -0.887, (227.854, 273.175, 285.225)), (' N 131  CYS  HA ', ' N 166  CYS  HB3', -0.859, (212.567, 247.861, 254.523)), (' N 167  THR  CB ', ' R 357  ARG  NH2', -0.841, (218.418, 244.761, 252.927)), (' A  91  THR HG22', ' A 118  VAL  H  ', -0.838, (212.21, 256.373, 293.688)), (' B  34  TYR  HE2', ' B  87  GLN  HB2', -0.838, (226.889, 266.93, 276.982)), (' L  91  THR HG22', ' L  97  THR HG22', -0.834, (233.706, 221.216, 287.18)), (' B   4  PRO  O  ', ' B   5  GLN  HG2', -0.807, (230.615, 272.859, 285.511)), (' N  28  TYR  HB2', ' N  64  TRP  HB3', -0.807, (190.13, 258.73, 231.415)), (' B  18  ARG  HD2', ' B  70  THR HG21', -0.792, (230.162, 284.191, 278.511)), (' H   6  GLU  OE2', ' H 111  GLY  N  ', -0.783, (224.757, 208.846, 298.372)), (' B  46  MET  HE2', ' B  62  GLY  HA3', -0.773, (230.544, 276.72, 272.058)), (' B   5  GLN  NE2', ' B  21  CYS  CA ', -0.773, (231.008, 274.711, 282.913)), (' R 377  PHE  HD1', ' R 434  ILE HG22', -0.729, (237.252, 233.896, 260.441)), (' B   5  GLN  NE2', ' B  86  CYS  SG ', -0.723, (229.827, 272.586, 282.82)), (' N  83  VAL HG11', ' N 237  ARG  HE ', -0.714, (196.804, 247.99, 246.974)), (' R 383  SER  HB3', ' R 386  LYS  HG2', -0.709, (236.521, 227.196, 248.913)), (' L  38  GLN  NE2', ' L  42  LYS  O  ', -0.693, (231.998, 211.063, 302.499)), (' B   5  GLN  CG ', ' B 101  GLY  HA2', -0.689, (227.88, 273.945, 285.009)), (' H  28  ILE  HA ', ' H  76  ASN HD21', -0.675, (212.233, 218.724, 291.362)), (' H  82  MET  HB3', ' H  85  LEU HD21', -0.672, (226.384, 200.767, 285.682)), (' L   6  GLN HE21', ' L 100  GLY  HA3', -0.671, (242.188, 218.318, 295.895)), (' N 167  THR  HB ', ' R 357  ARG HH22', -0.669, (219.398, 244.382, 252.742)), (' A 108  ASP  OD1', ' A 109  ILE  N  ', -0.667, (219.678, 263.664, 269.618)), (' N 106  PHE  HB3', ' N 235  ILE HD12', -0.666, (205.403, 247.287, 243.978)), (' N 106  PHE  CD1', ' N 238  PHE  HB2', -0.659, (203.016, 250.666, 242.42)), (' H  20  LEU HD21', ' H 114  VAL HG21', -0.658, (224.879, 202.319, 290.892)), (' A  54  ASN  OD1', ' A  74  ASN  ND2', -0.652, (222.577, 247.396, 265.728)), (' H  11  LEU HD11', ' H 117  SER  HB3', -0.649, (229.789, 191.593, 293.511)), (' L  92  ASP  OD1', ' L  93  THR  N  ', -0.641, (237.241, 224.094, 280.342)), (' A  29  PHE  O  ', ' A  72  ARG  NH2', -0.63, (221.43, 252.15, 266.453)), (' N 126  VAL  HB ', ' N 174  PRO  HA ', -0.626, (214.972, 260.914, 241.933)), (' A  35  HIS  CG ', ' A 107  PHE  HE1', -0.623, (224.588, 258.859, 275.659)), (' B  34  TYR  CE2', ' B  87  GLN  HB2', -0.621, (226.449, 267.212, 276.778)), (' B  31  VAL HG23', ' B  86  CYS  HB3', -0.618, (229.94, 271.236, 278.797)), (' B  18  ARG HH11', ' B  72  ILE HD13', -0.618, (230.743, 284.997, 276.851)), (' R 474  GLN  NE2', ' R 476  GLY  O  ', -0.617, (210.795, 226.419, 291.37)), (' H  66  ARG  NH2', ' H  89  ASP  OD2', -0.617, (232.051, 201.262, 284.29)), (' A 100  PHE  CE1', ' A 108  ASP  HB3', -0.612, (223.327, 265.532, 268.322)), (' A 106  ALA  HB2', ' B  32  HIS  CG ', -0.608, (229.129, 267.115, 272.795)), (' R 469  SER  OG ', ' R 471  GLU  OE1', -0.605, (212.567, 236.14, 281.203)), (' L   6  GLN HE22', ' L  87  TYR  HA ', -0.6, (240.768, 217.766, 297.967)), (' L  89  GLN  HG2', ' L  90  HIS  N  ', -0.599, (236.893, 221.977, 290.526)), (' N  57  PRO  HB2', ' N  60  SER  HB2', -0.596, (196.963, 247.481, 223.718)), (' L  61  ARG  O  ', ' L  76  ASN  ND2', -0.595, (239.28, 230.547, 310.155)), (' N  37  TYR  OH ', ' N  54  LEU  O  ', -0.591, (208.041, 244.635, 228.462)), (' B   4  PRO  O  ', ' B   5  GLN  CG ', -0.59, (230.088, 273.175, 285.296)), (' R 403  ARG  HD3', ' R 505  TYR  HD1', -0.585, (237.857, 231.411, 281.28)), (' R 433  VAL HG22', ' R 512  VAL HG22', -0.582, (230.93, 232.614, 264.459)), (' B  84  TYR  O  ', ' B 101  GLY  HA3', -0.576, (224.671, 273.87, 283.541)), (' B  19  ILE  H  ', ' B  70  THR HG23', -0.574, (229.116, 282.096, 279.488)), (' B  19  ILE HD12', ' B 102  THR HG22', -0.572, (224.372, 278.568, 283.446)), (' B   5  GLN  CB ', ' B 101  GLY  HA2', -0.571, (227.715, 274.399, 285.533)), (' L  36  TYR  HB3', ' L  44  PRO  HB3', -0.57, (233.341, 217.806, 299.441)), (' L  63  SER  OG ', ' L  74  THR  OG1', -0.569, (241.668, 230.722, 307.151)), (' H  72  ASP  OD2', ' H  75  LYS  NZ ', -0.566, (209.179, 209.814, 285.736)), (' B   3  LEU  HB3', ' B  99  GLY  HA3', -0.566, (230.526, 268.843, 285.095)), (' H  61  ASP  HA ', ' H  64  LYS  HZ3', -0.562, (235.255, 210.379, 278.265)), (' H  61  ASP  OD1', ' H  62  SER  N  ', -0.56, (237.375, 209.384, 281.688)), (' A  12  VAL HG21', ' A  18  LEU HD22', -0.559, (210.336, 250.377, 288.728)), (' R 355  ARG  HG3', ' R 355  ARG HH11', -0.553, (222.641, 237.471, 263.569)), (' B   5  GLN  OE1', ' B  21  CYS  CA ', -0.553, (230.781, 275.119, 282.892)), (' N 131  CYS  CA ', ' N 166  CYS  HB3', -0.552, (211.988, 248.531, 254.331)), (' R 354  ASN  OD1', ' R 355  ARG  N  ', -0.552, (224.207, 243.135, 265.597)), (' R 464  PHE  HZ ', ' R 514  SER  HG ', -0.548, (224.87, 232.559, 261.136)), (' N 280  ASN  O  ', ' N 281  GLU  HG2', -0.548, (220.047, 255.062, 213.047)), (' R 409  GLN  HA ', ' R 414  GLN  HG2', -0.542, (231.411, 224.356, 271.049)), (' A  99  ASP  N  ', ' A  99  ASP  OD1', -0.542, (223.861, 259.327, 270.742)), (' R 455  LEU HD22', ' R 493  GLN  HB2', -0.542, (226.173, 233.945, 285.759)), (' L  37  GLN HE22', ' L  39  LYS  HE2', -0.537, (233.377, 217.995, 309.083)), (' H  33  TYR  CE2', ' H 100  PRO  HB3', -0.537, (225.8, 225.531, 284.727)), (' A  82  GLN  NE2', ' A  84  ASN  OD1', -0.531, (216.706, 243.427, 286.974)), (' N  91  TYR  OH ', ' N 191  GLU  OE1', -0.528, (203.429, 257.649, 227.632)), (' A  34  MET  HB3', ' A  79  LEU HD22', -0.527, (219.519, 253.627, 273.943)), (' N 105  ILE HD11', ' N 241  LEU HD12', -0.526, (204.016, 257.686, 248.5)), (' H  61  ASP  HA ', ' H  64  LYS  NZ ', -0.52, (235.511, 210.501, 278.099)), (' B   5  GLN  NE2', ' B  21  CYS  CB ', -0.52, (230.598, 273.92, 282.73)), (' N 277  LEU HD13', ' N 285  ILE HD13', -0.516, (212.563, 247.637, 220.508)), (' R 418  ILE  HA ', ' R 422  ASN HD22', -0.515, (226.626, 230.691, 276.009)), (' N 231  ILE HG22', ' N 233  ILE HG12', -0.513, (211.259, 244.627, 246.48)), (' H   4  LEU HD11', ' H  27  PHE  CD2', -0.512, (218.65, 219.302, 295.356)), (' L   8  PRO  HG2', ' L  11  LEU HD11', -0.51, (249.794, 219.399, 305.456)), (' N  38  TYR  O  ', ' N  40  ASP  N  ', -0.508, (214.23, 245.959, 227.04)), (' H  32  ASN  ND2', ' R 475  ALA  O  ', -0.506, (216.684, 224.187, 291.308)), (' A  38  ARG  NE ', ' A  46  GLU  OE1', -0.506, (221.708, 258.782, 288.273)), (' N 168  PHE  CE2', ' N 229  LEU HD23', -0.505, (216.569, 250.055, 244.866)), (' A  54  ASN  O  ', ' R 354  ASN  ND2', -0.504, (227.145, 245.434, 266.637)), (' A 106  ALA  HA ', ' B  87  GLN  OE1', -0.501, (227.848, 263.975, 275.141)), (' A  39  GLN  HB2', ' A  45  LEU HD23', -0.499, (218.768, 265.015, 284.183)), (' A  54  ASN  HB3', ' R 354  ASN  ND2', -0.498, (226.518, 245.041, 265.436)), (' H  18  LEU HD13', ' H 114  VAL HG13', -0.497, (226.026, 199.333, 290.741)), (' H  36  TRP  HD1', ' H  69  ILE HD12', -0.497, (224.526, 211.823, 286.739)), (' N  83  VAL  CG1', ' N 237  ARG  HE ', -0.496, (196.184, 248.337, 246.763)), (' N 130  VAL  O  ', ' N 130  VAL HG13', -0.494, (212.719, 247.243, 251.759)), (' L  83  PHE  HD1', ' L 105  VAL HG12', -0.492, (241.874, 217.059, 312.331)), (' R 401  VAL HG22', ' R 509  ARG  HG2', -0.492, (234.953, 240.805, 271.999)), (' L  63  SER  HG ', ' L  74  THR  HG1', -0.49, (242.31, 230.671, 307.384)), (' A 105  ASP  OD1', ' A 106  ALA  N  ', -0.49, (229.437, 263.735, 272.133)), (' H   2  VAL HG22', ' H  26  GLU  HB3', -0.489, (215.401, 221.707, 298.626)), (' R 379  CYS  HA ', ' R 380  TYR  CD1', -0.489, (232.838, 226.405, 259.337)), (' N 168  PHE  HE2', ' N 229  LEU HD23', -0.487, (216.119, 250.494, 244.639)), (' L  33  LEU  HA ', ' L  89  GLN  O  ', -0.486, (238.595, 224.781, 292.264)), (' H  18  LEU HD23', ' H  19  ARG  N  ', -0.485, (221.539, 200.313, 288.481)), (' N 106  PHE  HB2', ' N 117  LEU  HB3', -0.482, (206.983, 249.104, 245.057)), (' R 403  ARG  HD3', ' R 505  TYR  CD1', -0.481, (238.306, 231.316, 281.533)), (' L  24  ARG HH11', ' L  70  HIS  HB2', -0.48, (251.262, 228.146, 294.901)), (' R 355  ARG  HG3', ' R 355  ARG  NH1', -0.48, (222.174, 238.015, 263.32)), (' H 102  TYR  O  ', ' H 104  TYR  HD1', -0.479, (230.19, 227.545, 291.704)), (' R 431  GLY  HA2', ' R 515  PHE  CE2', -0.475, (229.791, 232.082, 255.153)), (' R 342  PHE  CD2', ' R 434  ILE HD11', -0.474, (236.364, 239.533, 261.907)), (' R 342  PHE  CE2', ' R 434  ILE HD11', -0.473, (236.058, 239.08, 261.681)), (' H   3  GLN  H  ', ' H  25  SER  HB2', -0.471, (215.19, 217.057, 299.669)), (' R 392  PHE  CG ', ' R 515  PHE  HB3', -0.471, (226.545, 233.438, 251.703)), (' R 355  ARG  HG3', ' R 398  ASP  OD1', -0.47, (223.487, 237.954, 263.839)), (' B  91  ARG  HB2', ' B  91  ARG  HE ', -0.468, (240.077, 261.74, 276.394)), (' R 457  ARG  NH1', ' R 459  SER  O  ', -0.467, (216.071, 227.649, 275.79)), (' H  82  MET  HE2', ' H  85  LEU HD22', -0.467, (228.327, 200.372, 287.011)), (' H  13  GLN  NE2', ' H 117  SER  O  ', -0.466, (229.173, 189.319, 290.956)), (' R 357  ARG  HG3', ' R 396  TYR  CE1', -0.465, (220.553, 240.198, 257.956)), (' N 125  ASN HD21', ' N 171  VAL HG13', -0.464, (219.49, 261.249, 247.723)), (' N  84  LEU  HB2', ' N 238  PHE  CE1', -0.463, (197.336, 250.597, 240.101)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.462, (236.114, 221.704, 304.881)), (' N  40  ASP  OD1', ' N 204  TYR  OH ', -0.462, (213.424, 245.902, 230.813)), (' R 379  CYS  HB2', ' R 432  CYS  HB3', -0.462, (232.236, 229.426, 257.724)), (' H  67  PHE  CD1', ' H  82  MET  HA ', -0.462, (226.594, 202.95, 283.947)), (' N  83  VAL HG11', ' N 237  ARG HH21', -0.459, (195.099, 248.769, 247.513)), (' A  54  ASN  HB3', ' R 354  ASN HD21', -0.458, (226.526, 245.055, 265.182)), (' A  16  ARG  HD3', ' A  17  SER  H  ', -0.456, (211.95, 243.21, 291.919)), (' A   2  VAL  HA ', ' A  26  GLY  HA3', -0.456, (212.583, 260.107, 264.062)), (' A   9  GLY  HA3', ' A 114  THR  HB ', -0.455, (208.527, 255.67, 284.177)), (' R 452  LEU HD23', ' R 494  SER  HA ', -0.454, (228.801, 239.372, 283.377)), (' R 454  ARG  NH2', ' R 469  SER  O  ', -0.45, (217.685, 236.618, 279.919)), (' R 377  PHE  HE2', ' R 384  PRO  HB3', -0.449, (239.055, 230.657, 255.196)), (' B   4  PRO  C  ', ' B   5  GLN  HG2', -0.448, (230.27, 273.072, 286.465)), (' H   4  LEU HD21', ' H  34  MET  HE1', -0.448, (220.471, 216.892, 293.221)), (' R 447  GLY  N  ', ' R 498  GLN  OE1', -0.447, (238.921, 243.283, 286.819)), (' L  28  SER  HA ', ' L  68  GLY  O  ', -0.447, (246.483, 228.894, 288.245)), (' A  98  LYS  NZ ', ' A 108  ASP  OD2', -0.446, (221.271, 262.115, 267.376)), (' N  44  ARG  HG2', ' N  45  SER  N  ', -0.445, (222.284, 248.375, 218.215)), (' A  53  TRP  CE3', ' A  54  ASN  HB2', -0.445, (227.087, 248.234, 264.619)), (' B  99  GLY  O  ', ' B 100  GLY  C  ', -0.445, (226.469, 271.231, 285.748)), (' A   2  VAL HG11', ' A 109  ILE HD13', -0.444, (215.574, 263.442, 266.491)), (' H 106  ASP  HA ', ' L  46  LEU HD22', -0.444, (228.061, 224.123, 297.49)), (' H   6  GLU  HG2', ' H 112  THR HG23', -0.442, (222.381, 206.547, 297.132)), (' H  28  ILE  O  ', ' H  28  ILE HG13', -0.442, (214.221, 222.009, 289.269)), (' L  19  VAL  HB ', ' L  75  ILE  HB ', -0.441, (243.49, 224.229, 310.17)), (' R 347  PHE  HB2', ' R 401  VAL HG23', -0.439, (232.982, 242.26, 271.964)), (' A  71  ILE HG21', ' R 468  ILE HG21', -0.437, (217.986, 242.792, 276.154)), (' H  22  CYS  HB3', ' H  78  LEU  HB3', -0.437, (219.05, 212.258, 290.67)), (' R 349  SER  HB2', ' R 452  LEU  H  ', -0.435, (228.038, 240.078, 278.084)), (' A  47  TRP  CZ3', ' B  95  GLN  HB3', -0.433, (230.099, 256.76, 281.439)), (' B  12  ALA  HB3', ' B  15  LYS  HE2', -0.432, (220.728, 292.99, 282.383)), (' A  52  SER  HB3', ' A  55  SER  HB2', -0.432, (228.612, 249.603, 270.052)), (' H  99  LEU HD12', ' H 106  ASP  HB2', -0.431, (225.63, 225.492, 294.595)), (' R 497  PHE  CE2', ' R 507  PRO  HB3', -0.43, (236.749, 239.372, 277.656)), (' N 175  PHE  CD1', ' N 226  LEU HD21', -0.43, (213.919, 257.724, 237.571)), (' H 104  TYR  CE2', ' L  46  LEU HD21', -0.43, (228.809, 226.163, 296.912)), (' N 167  THR  HA ', ' R 357  ARG HH21', -0.429, (219.028, 245.394, 253.883)), (' N 126  VAL HG12', ' N 172  SER  O  ', -0.428, (217.543, 260.479, 243.137)), (' A  49  SER  OG ', ' A  50  GLY  N  ', -0.427, (224.603, 252.405, 279.426)), (' R 490  PHE  CD1', ' R 491  PRO  HD2', -0.425, (218.993, 237.328, 286.387)), (' L  17  ASP  OD1', ' L  18  ARG  N  ', -0.425, (247.792, 226.291, 314.488)), (' H  32  ASN  OD1', ' H  97  ARG  HD3', -0.424, (220.781, 223.471, 291.685)), (' B   3  LEU  HB3', ' B  99  GLY  CA ', -0.424, (229.924, 268.614, 285.323)), (' B  37  LYS  O  ', ' B  38  PRO  C  ', -0.423, (211.608, 272.53, 282.467)), (' B   4  PRO  O  ', ' B   5  GLN  NE2', -0.423, (231.005, 273.042, 284.758)), (' L  63  SER  O  ', ' L  74  THR  OG1', -0.423, (242.17, 230.418, 305.562)), (' A  60  TYR  HA ', ' A  64  VAL HG23', -0.421, (225.971, 251.661, 285.407)), (' R 431  GLY  HA3', ' R 514  SER  HA ', -0.421, (227.558, 232.399, 257.513)), (' N 106  PHE  CE1', ' N 238  PHE  HB2', -0.42, (202.93, 250.911, 242.43)), (' A   6  GLU  N  ', ' A   6  GLU  OE1', -0.418, (210.57, 257.564, 276.203)), (' H  39  GLN  HB2', ' H  45  LEU HD23', -0.418, (233.943, 210.692, 296.644)), (' L  15  VAL HG23', ' L  80  PRO  HD3', -0.417, (240.42, 220.511, 319.092)), (' B  73  ILE HD13', ' B 104  LEU HD22', -0.417, (221.742, 282.742, 279.544)), (' N 108  THR HG22', ' N 236  THR HG23', -0.416, (202.409, 241.205, 245.906)), (' R 379  CYS  HB3', ' R 432  CYS  HB2', -0.416, (234.257, 229.874, 259.79)), (' H  28  ILE  HA ', ' H  76  ASN  ND2', -0.416, (212.069, 218.813, 291.116)), (' R 442  ASP  O  ', ' R 448  ASN  ND2', -0.412, (236.754, 245.089, 279.495)), (' H   6  GLU  HA ', ' H  22  CYS  HA ', -0.412, (218.832, 209.42, 294.304)), (' N 128  ILE  HB ', ' N 170  TYR  HB3', -0.411, (216.08, 253.554, 245.522)), (' H  29  VAL  O  ', ' H  71  ARG  NH1', -0.411, (217.423, 219.092, 285.335)), (' N  65  PHE  CE2', ' N  84  LEU HD11', -0.411, (194.559, 253.784, 238.057)), (' H   7  SER  HA ', ' H 112  THR HG21', -0.41, (220.892, 204.834, 296.436)), (' L   6  GLN  NE2', ' L  88  CYS  H  ', -0.409, (241.52, 218.677, 296.915)), (' R 353  TRP  CE2', ' R 466  ARG  HB3', -0.408, (220.832, 236.155, 269.959)), (' B  19  ILE HD12', ' B 102  THR  CG2', -0.407, (224.986, 278.654, 283.955)), (' N 167  THR  HB ', ' R 357  ARG  CZ ', -0.406, (218.535, 243.424, 253.816)), (' H   3  GLN  N  ', ' H   3  GLN  OE1', -0.406, (215.689, 217.663, 301.206)), (' B  45  VAL HG21', ' B  71  LEU  CD2', -0.405, (223.869, 277.046, 275.485)), (' N 191  GLU  OE2', ' N 223  LEU HD21', -0.404, (207.345, 257.305, 226.666)), (' N  38  TYR  HA ', ' N  39  PRO  HD3', -0.404, (213.882, 248.256, 223.501)), (' H  54  GLY  N  ', ' R 421  TYR  OH ', -0.403, (219.789, 223.755, 280.397)), (' L  11  LEU HD23', ' L  19  VAL HG13', -0.403, (246.594, 221.403, 309.146)), (' N 106  PHE  HE2', ' N 201  PHE  CZ ', -0.403, (207.773, 249.974, 240.333)), (' H  33  TYR  HD2', ' H  98  PHE  CD2', -0.401, (226.138, 223.154, 286.329)), (' H  33  TYR  HD2', ' H  98  PHE  HD2', -0.4, (225.934, 222.64, 286.718)), (' N  63  THR  HG1', ' N  65  PHE  HE2', -0.4, (194.607, 253.961, 235.594))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
