# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  65 ', 'LYS', 0.02350365130438025, (-45.07609999999999, 19.933249999999994, -13.452370000000004))]
data['cbeta'] = []
data['probe'] = [(' B 392  PHE  HA ', ' B 517  LEU HD13', -0.858, (-31.911, 50.606, -61.918)), (' A 109  ASP  O  ', ' A 110  TYR  CD1', -0.809, (-28.952, 5.049, -32.3)), (' B 461  LEU HD22', ' B 465  GLU  HB3', -0.804, (-39.829, 37.458, -43.891)), (' A  55  GLY  H  ', ' A  72  ARG HH12', -0.728, (-29.94, 28.261, -20.761)), (' B 392  PHE  HA ', ' B 517  LEU  CD1', -0.667, (-32.095, 51.532, -62.318)), (' B 412  PRO  HG3', ' B 429  PHE  HB3', -0.615, (-34.192, 35.621, -57.669)), (' B 472  ILE  H  ', ' B 472  ILE HD12', -0.606, (-42.553, 33.671, -26.254)), (' A   4  LEU HD11', ' A  98  VAL HG23', -0.606, (-28.087, 14.432, -26.938)), (' B 364  ASP  O  ', ' B 367  VAL HG22', -0.584, (-16.051, 46.483, -59.703)), (' B 360  ASN  H  ', ' B 523  THR  HB ', -0.582, (-27.384, 57.239, -56.519)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.577, (-36.21, 59.08, -59.047)), (' B 386  LYS  O  ', ' B 390  LEU  CD2', -0.574, (-24.975, 45.597, -67.416)), (' A 109  ASP  O  ', ' A 110  TYR  HD1', -0.559, (-30.107, 5.225, -31.386)), (' B 390  LEU  N  ', ' B 390  LEU HD22', -0.553, (-25.813, 47.172, -67.402)), (' B 467  ASP  OD1', ' B 469  SER  OG ', -0.546, (-40.823, 38.313, -34.952)), (' A  88  PRO  HA ', ' A 119  VAL  HB ', -0.543, (-44.331, 4.367, -9.997)), (' B 393  THR  O  ', ' B 523  THR  OG1', -0.535, (-30.318, 55.14, -57.127)), (' B 359  SER  HA ', ' B 524  VAL HG23', -0.523, (-26.817, 54.627, -56.009)), (' B 352  ALA  O  ', ' B 466  ARG  NH2', -0.521, (-30.105, 41.477, -39.177)), (' A  27  PHE  CZ ', ' A  98  VAL HG21', -0.508, (-26.118, 16.757, -27.294)), (' A  59  ARG  HB3', ' B 485  GLY  O  ', -0.503, (-42.043, 22.782, -22.452)), (' A 106  TYR  CD2', ' A 108  TYR  HA ', -0.491, (-27.885, 12.745, -33.163)), (' A  20  LEU HD22', ' A 115  THR HG21', -0.472, (-32.151, 7.592, -15.385)), (' B 393  THR HG21', ' B 518  LEU HD12', -0.464, (-36.176, 54.595, -57.03)), (' B 502  GLY  O  ', ' B 506  GLN  HG3', -0.459, (-17.503, 22.819, -43.197)), (' B 395  VAL HG22', ' B 515  PHE  HD1', -0.459, (-28.668, 47.559, -57.461)), (' B 356  LYS  HB2', ' B 356  LYS  HE3', -0.445, (-24.986, 47.369, -44.655)), (' B 386  LYS  O  ', ' B 390  LEU HD23', -0.443, (-24.884, 45.363, -66.704)), (' A 106  TYR  CE2', ' A 108  TYR  HD1', -0.443, (-29.74, 13.015, -32.058)), (' B 347  PHE  CE2', ' B 509  ARG  HB3', -0.429, (-20.32, 37.625, -44.793)), (' B 411  ALA  HB3', ' B 414  GLN  HG3', -0.428, (-32.405, 29.486, -54.213)), (' B 452  LEU HD23', ' B 494  SER  HA ', -0.423, (-27.566, 29.791, -32.713)), (' A  28  PRO  O  ', ' A  31  VAL HG22', -0.422, (-24.371, 23.386, -26.411)), (' A  83  MET  HE1', ' A 117  VAL HG21', -0.419, (-37.051, 8.266, -13.346)), (' A  86  LEU  HA ', ' A  86  LEU HD23', -0.413, (-42.686, 10.638, -9.01)), (' B 506  GLN  HB3', ' B 507  PRO  HD2', -0.406, (-17.128, 27.09, -41.794)), (' A 106  TYR  O  ', ' A 107  HIS  HB2', -0.405, (-24.128, 9.876, -33.445)), (' B 401  VAL HG22', ' B 509  ARG  HG2', -0.402, (-20.274, 35.561, -42.477)), (' B 490  PHE  CD1', ' B 491  PRO  HD2', -0.401, (-37.165, 31.696, -28.128))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
