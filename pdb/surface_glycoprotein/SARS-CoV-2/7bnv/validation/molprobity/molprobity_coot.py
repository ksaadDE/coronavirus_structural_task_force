# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 161 ', 'PRO', None, (17.02837, -42.41913, 14.85961)), ('H', ' 163 ', 'PRO', None, (19.886250000000015, -37.807480000000005, 18.16223)), ('L', '   8 ', 'PRO', None, (44.62561, -19.94813, 5.17832)), ('L', '  96 ', 'PRO', None, (20.81009, -9.423840000000007, -6.452149999999998)), ('L', ' 144 ', 'PRO', None, (49.269850000000005, -32.59736000000003, 20.38774))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' L  24  ARG  HE ', ' L  71  GLU  HG3', -0.775, (44.203, -12.924, -2.63)), (' L  24  ARG  HE ', ' L  71  GLU  CG ', -0.734, (44.269, -13.012, -2.858)), (' A 377  PHE  CD1', ' A 434  ILE HG12', -0.618, (1.231, 14.792, 5.531)), (' L  11  LEU HD22', ' L  13  LEU  HG ', -0.611, (47.38, -19.317, 13.931)), (' L 148  LYS  HB3', ' L 200  THR  HB ', -0.607, (51.329, -43.164, 15.076)), (' A 403  ARG  NH1', ' A 702  HOH  O  ', -0.594, (13.15, 19.619, -13.657)), (' L 182  LEU HD22', ' L 184  LEU  HG ', -0.591, (37.179, -56.219, 13.828)), (' L  14  SER  N  ', ' L  17  GLU  OE1', -0.588, (48.603, -19.053, 18.895)), (' H 162  GLU  HG2', ' H 163  PRO  HA ', -0.557, (22.473, -38.434, 17.733)), (' L  29  VAL HG13', ' L  93  ASP  HB2', -0.541, (31.825, -9.205, -5.508)), (' H  91  THR HG23', ' H 124  THR  HA ', -0.537, (20.291, -36.115, 7.294)), (' A 357  ARG  NH2', ' A 394  ASN  OD1', -0.525, (12.532, 2.854, 17.097)), (' L 111  ARG  NH1', ' L 175  THR HG23', -0.525, (45.579, -30.148, 27.37)), (' A 382  VAL HG21', ' A 387  LEU HD13', -0.522, (-1.943, 7.667, 12.344)), (' H  18  LEU  HB2', ' H  86  LEU HD11', -0.517, (11.633, -33.868, 3.299)), (' L 111  ARG  NH1', ' L 175  THR  CG2', -0.515, (45.949, -30.619, 27.26)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.513, (2.072, 6.413, 9.55)), (' A 366  SER  H  ', ' A 388  ASN HD21', -0.508, (-2.448, 16.412, 16.247)), (' H  59  ARG  NH1', ' L  96  PRO  HG2', -0.496, (17.264, -10.854, -7.398)), (' L 152  LYS  HB2', ' L 196  ALA  HB3', -0.488, (47.863, -55.802, 18.37)), (' H 198  VAL HG22', ' H 199  PRO  HD2', -0.485, (37.542, -42.295, 40.092)), (' H 206  GLN  HG3', ' H 208  TYR  CE1', -0.481, (31.85, -44.17, 40.917)), (' L 184  LEU HD13', ' L 188  ASP  OD2', -0.481, (37.913, -59.815, 12.99)), (' A 389  ASP  N  ', ' A 389  ASP  OD1', -0.481, (-5.137, 9.919, 18.751)), (' H 162  GLU  OE2', ' H 182  ALA  HB3', -0.475, (26.281, -39.732, 16.055)), (' A 412  PRO  HG3', ' A 429  PHE  HB3', -0.473, (2.233, 2.517, 1.461)), (' H 179  THR HG23', ' H 194  SER  HB2', -0.465, (28.939, -40.935, 26.206)), (' L  24  ARG  NE ', ' L  71  GLU  HG3', -0.453, (44.1, -13.731, -2.004)), (' H 173  LEU  CD2', ' H 196  VAL HG21', -0.45, (32.921, -39.738, 35.585)), (' A 377  PHE  HA ', ' A 433  VAL  O  ', -0.45, (1.112, 14.362, 2.712)), (' L 124  SER  O  ', ' L 126  GLU  N  ', -0.447, (28.72, -59.556, 27.23)), (' L 189  TYR  O  ', ' L 195  TYR  OH ', -0.444, (38.563, -62.376, 18.159)), (' L 186  LYS  O  ', ' L 190  GLU  HG3', -0.443, (34.217, -65.507, 17.807)), (' L  34  LEU HD13', ' L  72  PHE  CD1', -0.441, (36.829, -10.242, -0.918)), (' L  55  ARG  HD3', ' L  63  PHE  O  ', -0.439, (36.941, -5.611, 13.735)), (' L  63  PHE  CD1', ' L  76  ILE HG12', -0.437, (38.509, -11.681, 14.073)), (' H 136  PHE  CE2', ' L 127  GLN  HG3', -0.436, (26.866, -55.261, 21.827)), (' L 125  ASP  O  ', ' L 129  LYS  HG3', -0.425, (26.773, -62.334, 25.362)), (' H  27  TYR  CZ ', ' H  98  ARG  HD2', -0.424, (14.376, -10.231, 9.507)), (' H 173  LEU HD21', ' H 196  VAL HG21', -0.421, (33.508, -39.7, 35.375)), (' L 111  ARG HH11', ' L 175  THR HG23', -0.42, (45.394, -29.966, 27.378)), (' A 398  ASP  O  ', ' A 511  VAL  HA ', -0.419, (10.155, 13.1, 4.579)), (' A 365  TYR  CD2', ' A 387  LEU  HG ', -0.417, (0.072, 11.14, 14.929)), (' A 366  SER  OG ', ' A 388  ASN  ND2', -0.416, (-4.089, 16.34, 16.504)), (' H 137  PRO  HD2', ' L 124  SER  CB ', -0.413, (29.723, -55.057, 28.291)), (' A 390  LEU HD12', ' A 391  CYS  H  ', -0.413, (-1.35, 3.857, 19.076)), (' L   2  ILE HG12', ' L  27  GLN  HB2', -0.412, (34.287, -13.18, -10.388)), (' H 200  SER  HA ', ' H 203  LEU HD13', -0.411, (40.052, -47.457, 39.903)), (' L 111  ARG  CG ', ' L 112  THR  N  ', -0.41, (49.292, -27.228, 25.517)), (' H 168  TRP  CH2', ' H 210  CYS  HB3', -0.405, (28.802, -44.904, 32.032)), (' A 480  CYS  O  ', ' A 483  VAL HG12', -0.401, (32.741, 1.43, -21.294)), (' L 152  LYS  HB3', ' L 155  ASN  HA ', -0.4, (49.599, -57.541, 15.585))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
