# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' E 261  CYS  HB2', ' E 488  VAL HG13', -0.643, (244.423, 234.859, 300.195)), (' E 165  TRP  HA ', ' E 270  MET  HE1', -0.633, (242.204, 249.296, 291.7)), (' B 406  GLU  HG3', ' B 418  ILE HG13', -0.6, (209.163, 234.958, 245.809)), (' E 476  LYS  HG3', ' E 480  MET  HE2', -0.567, (228.75, 234.606, 299.929)), (' E 406  GLU  HG3', ' E 518  ARG  HD3', -0.566, (235.476, 231.144, 274.301)), (' E 365  THR HG22', ' E 367  ASP  H  ', -0.543, (248.152, 240.79, 268.248)), (' E 529  LEU HD11', ' E 554  LEU HD13', -0.539, (233.803, 222.428, 265.161)), (' E 108  LEU HD23', ' E 112  LYS  HB3', -0.53, (208.577, 248.09, 288.708)), (' E 142  LEU HD13', ' E 146  PRO  HB2', -0.527, (244.343, 257.15, 279.23)), (' B 454  ARG  NH2', ' B 467  ASP  O  ', -0.525, (195.48, 240.267, 245.474)), (' E 420  SER  HB2', ' E 704  NAG  H83', -0.519, (249.173, 223.948, 257.504)), (' B 402  ILE HD12', ' B 406  GLU  HG2', -0.519, (211.325, 234.9, 244.39)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.501, (217.223, 234.747, 237.038)), (' E 134  ASN  HB3', ' E 137  ASN  HB2', -0.499, (247.02, 262.647, 293.194)), (' E 392  LEU  HA ', ' E 562  LYS  HB2', -0.481, (216.298, 229.781, 267.932)), (' E 557  MET  HG2', ' E 569  ALA  HB1', -0.48, (224.263, 222.069, 268.1)), (' E 177  ARG  NH1', ' E 495  GLU  O  ', -0.476, (227.954, 247.307, 301.426)), (' E 381  TYR  HD1', ' E 558  LEU  HG ', -0.475, (227.77, 228.158, 264.851)), (' E 332  MET  HE3', ' E 359  LEU  HG ', -0.463, (233.761, 249.607, 263.506)), (' E 169  ARG  NH2', ' E 270  MET  O  ', -0.461, (239.468, 245.306, 290.492)), (' E 169  ARG  NH1', ' E 502  SER  OG ', -0.449, (235.565, 245.68, 291.194)), (' E 455  MET  HE2', ' E 481  LYS  HB2', -0.447, (235.945, 236.322, 296.068)), (' E 130  GLY  HA3', ' E 168  TRP  HZ3', -0.438, (235.524, 255.185, 286.96)), (' E 249  MET  HE1', ' E 258  PRO  HG3', -0.436, (257.346, 232.21, 300.765)), (' B 418  ILE  HA ', ' B 422  ASN HD22', -0.436, (203.973, 234.443, 246.637)), (' E 326  GLY  HA2', ' E 329  GLU  HG2', -0.434, (229.099, 244.503, 250.6)), (' B 455  LEU HD22', ' B 493  GLN  HG3', -0.428, (203.541, 239.659, 255.419)), (' E 119  ILE  O  ', ' E 123  MET  HG2', -0.427, (221.514, 251.667, 287.379)), (' B 416  GLY  O  ', ' B 420  ASP  N  ', -0.423, (203.437, 229.604, 246.755)), (' E 326  GLY  O  ', ' E 330  ASN  ND2', -0.421, (228.686, 245.259, 252.987)), (' E 208  GLU  OE2', ' E 210  ASN  ND2', -0.418, (211.168, 224.307, 281.468)), (' E 574  VAL HG23', ' E 576  ALA  H  ', -0.413, (228.664, 214.876, 273.491)), (' E 307  ILE HG23', ' E 369  PHE  HD1', -0.41, (244.754, 238.036, 260.83)), (' E 174  LYS  HE2', ' E 496  THR  HB ', -0.41, (231.132, 253.154, 302.545)), (' E 554  LEU  HG ', ' E 558  LEU HD13', -0.408, (230.454, 224.452, 263.624)), (' E 322  ASN  N  ', ' E 322  ASN  OD1', -0.407, (231.987, 231.203, 251.349)), (' E 528  ALA  HB2', ' E 574  VAL HG12', -0.406, (232.646, 217.056, 270.929)), (' B 384  PRO  HA ', ' B 387  LEU HD12', -0.406, (215.965, 230.228, 223.228)), (' E 335  ASP  HA ', ' E 336  PRO  HD3', -0.404, (238.504, 253.231, 262.664)), (' E 347  THR  OG1', ' E 349  TRP  NE1', -0.402, (230.007, 245.511, 266.432)), (' E 300  GLN  HB3', ' E 302  TRP  CD1', -0.401, (253.445, 239.599, 256.173))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
