# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('C', ' 175 ', 'PRO', None, (27.885999999999996, -26.41, -8.478)), ('C', ' 177 ', 'PRO', None, (23.813, -30.299, -5.997)), ('E', ' 373 ', 'SER', None, (-21.97200000000002, -36.823999999999984, -27.270000000000003)), ('E', ' 503 ', 'VAL', None, (-26.15, -20.716, -21.676))]
data['rota'] = [('C', '  19 ', 'LEU', 0.0005040357781214878, (9.381, -37.308, -21.303)), ('C', '  26 ', 'VAL', 0.01614435291327437, (24.38899999999999, -22.567, -19.615)), ('C', '  32 ', 'LEU', 0.10380647732684176, (19.303, -24.265, -24.766)), ('C', '  35 ', 'SER', 0.026625392370359314, (12.363999999999992, -31.442, -25.667)), ('C', '  63 ', 'SER', 0.14316354304361484, (4.5809999999999995, -20.684, -23.48)), ('C', '  78 ', 'VAL', 0.14319022203120552, (10.326999999999995, -14.393, -22.596)), ('C', ' 135 ', 'THR', 0.0, (14.271999999999991, -30.714, -16.569)), ('C', ' 144 ', 'THR', 0.008159601566148922, (32.21, -25.878, -10.591)), ('C', ' 178 ', 'VAL', 0.14978697937944938, (25.141999999999992, -30.705, -1.21)), ('C', ' 179 ', 'THR', 0.06673934081479929, (24.58899999999999, -33.75, 1.019)), ('C', ' 210 ', 'VAL', 0.08363889870993213, (21.386999999999993, -30.246, 15.312)), ('C', ' 211 ', 'THR', 0.1874821628626399, (19.57799999999999, -29.784, 18.64)), ('C', ' 217 ', 'LEU', 0.07593770296937176, (24.734, -37.011, 24.868000000000002)), ('C', ' 219 ', 'THR', 0.09032872760392495, (30.996, -35.906, 24.722)), ('C', ' 229 ', 'LYS', 0.0, (29.528999999999993, -34.582, -5.649)), ('C', ' 237 ', 'LYS', 0.032731906134893816, (34.072, -31.15, 10.657)), ('L', '   5 ', 'THR', 0.0003223061407488368, (-7.203, -15.604, -8.908)), ('L', '  10 ', 'SER', 0.2718243007016697, (-2.327000000000003, -21.116, 4.282)), ('L', '  14 ', 'SER', 0.09792722801351209, (-5.844000000000004, -32.463, 10.681)), ('L', '  26 ', 'SER', 0.06596484026599035, (-11.638999999999998, -12.006, -11.577)), ('L', '  29 ', 'ILE', 0.2451931140460655, (-14.353999999999994, -16.192, -15.851999999999999)), ('L', '  45 ', 'LYS', 0.0, (-1.7840000000000031, -32.212, -10.825)), ('L', '  48 ', 'ILE', 0.06614997776099872, (-10.892000000000007, -30.333, -10.829)), ('L', '  60 ', 'SER', 0.027781829905066363, (-13.714000000000006, -38.577999999999996, -4.945)), ('L', '  72 ', 'THR', 0.02507604758792474, (-14.101, -23.282999999999998, -3.4870000000000005)), ('L', '  74 ', 'THR', 0.03793682781528201, (-13.406000000000002, -28.973, -0.607)), ('L', ' 104 ', 'GLU', 0.0782194751235291, (-0.5079999999999987, -27.732, 6.405)), ('L', ' 109 ', 'VAL', 0.003150532575091347, (0.9599999999999984, -22.83, 18.768)), ('L', ' 141 ', 'ARG', 0.22197048011440998, (5.211999999999993, -20.479, 10.277)), ('L', ' 186 ', 'GLU', 0.15360965194533435, (35.163, -4.056, 13.057000000000002)), ('L', ' 188 ', 'HIS', 0.08465020549154392, (30.477, -4.427, 15.976000000000003)), ('E', ' 334 ', 'ASN', 0.14506248007562045, (-14.085999999999995, -46.996, -47.812)), ('E', ' 354 ', 'ASN', 0.18145942528190012, (-19.046000000000003, -24.133, -45.31)), ('E', ' 359 ', 'SER', 0.05641379191906476, (-19.13, -39.143, -52.112)), ('E', ' 367 ', 'VAL', 0.2961931507472906, (-21.22, -44.351, -34.952)), ('E', ' 368 ', 'LEU', 0.08659537636137964, (-21.983000000000004, -40.728, -35.845)), ('E', ' 369 ', 'TYR', 0.15186910214433244, (-24.54300000000001, -40.612, -33.036)), ('E', ' 382 ', 'VAL', 0.00945159699767828, (-35.56899999999998, -39.808, -42.97)), ('E', ' 386 ', 'LYS', 0.1206353885125043, (-32.815, -46.334, -41.343)), ('E', ' 387 ', 'LEU', 0.0, (-30.032999999999998, -44.558, -43.19)), ('E', ' 390 ', 'LEU', 0.0, (-29.925000000000004, -46.387, -47.459)), ('E', ' 427 ', 'ASP', 0.0012696408360805338, (-39.46300000000001, -27.365999999999993, -46.427)), ('E', ' 428 ', 'ASP', 0.18240504669417842, (-38.208, -30.192, -48.683)), ('E', ' 445 ', 'VAL', 0.03780638799071312, (-12.496000000000002, -14.508, -21.5)), ('E', ' 498 ', 'GLN', 0.11083472315851048, (-17.546999999999997, -15.308, -23.53)), ('E', ' 519 ', 'HIS', 0.09258395316970691, (-31.058000000000003, -38.75599999999999, -61.15999999999999)), ('E', ' 528 ', 'HIS', 0.05477957633372323, (-26.012, -52.579, -44.155))]
data['cbeta'] = []
data['probe'] = [(' E 403  ARG  HG2', ' E 505  TYR  HA ', -0.792, (-25.43, -17.48, -27.379)), (' L   3  GLN  HA ', ' L  96  PRO  HD2', -0.784, (-1.925, -14.116, -13.437)), (' E 485  GLY  H  ', ' E 488  CYS  HB2', -0.76, (-24.347, 4.543, -43.363)), (' C 213  PRO  HD2', ' C 217  LEU HD22', -0.725, (20.372, -35.002, 22.494)), (' L 144  LYS  HB2', ' L 196  THR  HB ', -0.684, (8.53, -10.513, 13.634)), (' L 107  ARG  NH1', ' L 108  THR  O  ', -0.68, (2.56, -26.038, 18.45)), (' C 164  ALA  HB2', ' C 214  SER  HB3', -0.656, (23.391, -28.162, 25.061)), (' L 182  LYS  HA ', ' L 185  TYR  HB3', -0.625, (34.313, -8.134, 9.854)), (' C 196  ALA  HB2', ' C 206  LEU HD23', -0.608, (21.94, -25.794, -0.229)), (' C  23  GLY  H  ', ' C 135  THR HG21', -0.598, (16.697, -31.138, -20.153)), (' L 145  VAL HG12', ' L 195  VAL HG22', -0.594, (13.954, -14.625, 15.081)), (' C 196  ALA  HA ', ' C 206  LEU  HB3', -0.593, (21.204, -23.998, 1.314)), (' E 502  GLY  H  ', ' E 506  GLN HE21', -0.57, (-22.405, -19.633, -21.228)), (' L  20  THR HG22', ' L  74  THR  HB ', -0.561, (-15.14, -27.221, 0.837)), (' L 154  GLN HE21', ' L 157  ASN HD21', -0.561, (22.717, -4.671, 8.418)), (' E 485  GLY  N  ', ' E 488  CYS  HB2', -0.557, (-24.131, 5.335, -43.0)), (' L   4  MET  HG2', ' L  95  PRO  HB3', -0.555, (-4.861, -14.539, -15.18)), (' E 500  THR HG21', ' L  28  GLY  HA2', -0.543, (-17.501, -12.895, -16.906)), (' C  65  ILE HG13', ' C  72  THR HG22', -0.542, (2.438, -23.055, -31.487)), (' E 371  SER  OG ', ' E 601  NAG  H83', -0.538, (-18.478, -39.015, -34.582)), (' L 107  ARG  HD3', ' L 139  TYR  HB2', -0.537, (2.75, -26.057, 15.769)), (' L  39  LYS  HD3', ' L  84  ALA  HB2', -0.533, (1.282, -32.22, -2.124)), (' C 223  ILE HD12', ' C 236  ASP  HB3', -0.528, (33.472, -36.234, 9.809)), (' E 340  GLU  O  ', ' E 344  ALA  HB2', -0.524, (-13.199, -30.652, -40.688)), (' L 135  LEU HD11', ' L 145  VAL HG11', -0.524, (14.911, -16.14, 13.181)), (' C 154  PRO  HG3', ' C 239  VAL HG12', -0.521, (30.209, -26.882, 17.411)), (' E 391  CYS  HB3', ' E 522  ALA  HB1', -0.517, (-26.708, -45.418, -52.851)), (' C 170  VAL HG11', ' C 178  VAL HG11', -0.515, (26.664, -28.509, 1.386)), (' C 108  TYR  O  ', ' C 134  GLY  HA2', -0.512, (10.535, -30.408, -16.833)), (' C 181  SER  HB2', ' C 225  ASN  HB2', -0.504, (27.803, -37.145, 6.415)), (' E 364  ASP  O  ', ' E 367  VAL HG22', -0.495, (-21.117, -44.052, -38.525)), (' E 480  CYS  O  ', ' E 483  VAL HG22', -0.492, (-21.773, 6.839, -47.943)), (' L 130  SER  HA ', ' L 178  LEU  O  ', -0.486, (26.667, -13.359, 7.945)), (' C 147  PRO  HB3', ' C 173  TYR  HB3', -0.484, (29.88, -25.857, -1.501)), (' C  41  PHE  CE2', ' C 112  LYS  HD2', -0.483, (-1.738, -35.523, -25.287)), (' L 150  ASP  HA ', ' L 190  VAL  HB ', -0.481, (25.147, -2.443, 18.423)), (' E 383  SER  HB3', ' E 386  LYS  HD3', -0.479, (-36.307, -44.43, -40.821)), (' C 161  GLY  O  ', ' C 214  SER  OG ', -0.476, (22.274, -28.282, 28.201)), (' C 169  LEU HD23', ' C 171  LYS  HB2', -0.475, (29.002, -21.478, 5.209)), (' E 336  CYS  SG ', ' E 363  ALA  HB2', -0.471, (-20.932, -42.492, -45.512)), (' L 144  LYS  O  ', ' L 195  VAL  HA ', -0.469, (11.844, -12.472, 14.556)), (' L 149  VAL HG13', ' L 191  TYR  HE1', -0.465, (26.657, -4.147, 14.134)), (' L  45  LYS  HA ', ' L  45  LYS  HD2', -0.461, (-1.477, -32.43, -12.503)), (' E 518  LEU  O  ', ' E 520  ALA  N  ', -0.457, (-29.557, -39.794, -59.815)), (' C  97  MET  HE2', ' C 100  LEU HD21', -0.455, (15.712, -20.811, -21.221)), (' L 129  ALA  N  ', ' L 180  LEU  O  ', -0.455, (32.188, -11.43, 7.027)), (' C 194  PHE  CZ ', ' L 175  SER  HB3', -0.453, (17.871, -22.223, 9.45)), (' C 171  LYS  HG2', ' C 172  ASP  OD2', -0.449, (30.741, -19.079, 1.68)), (' E 364  ASP  OD1', ' E 367  VAL HG13', -0.445, (-21.521, -46.535, -36.998)), (' C 212  VAL HG21', ' C 222  TYR  OH ', -0.443, (25.006, -34.621, 21.453)), (' C  65  ILE HD11', ' C  69  GLY  HA2', -0.443, (2.337, -25.251, -33.008)), (' C 112  LYS  O  ', ' C 128  PHE  HA ', -0.443, (-3.167, -30.498, -20.106)), (' E 350  VAL  HA ', ' E 400  PHE  HB2', -0.443, (-22.193, -20.907, -39.853)), (' L 169  ASP  OD1', ' L 171  THR  OG1', -0.442, (9.003, -29.331, 14.399)), (' E 431  GLY  HA2', ' E 515  PHE  CD2', -0.44, (-30.435, -36.507, -44.486)), (' L 187  LYS  HB3', ' L 187  LYS  HE3', -0.439, (30.321, -1.337, 11.725)), (' E 354  ASN  O  ', ' E 398  ASP  HA ', -0.439, (-21.458, -26.955, -44.666)), (' C 209  VAL HG21', ' L 134  LEU HD13', -0.436, (20.034, -24.049, 12.682)), (' C  48  MET  HB3', ' C  48  MET  HE3', -0.436, (2.699, -29.742, -24.655)), (' L  45  LYS  HE2', ' L  46  LEU  H  ', -0.435, (-3.71, -33.163, -13.166)), (' E 427  ASP  N  ', ' E 427  ASP  OD1', -0.433, (-39.086, -25.542, -46.79)), (' C 129  ASP  OD1', ' C 130  TYR  N  ', -0.432, (-2.858, -34.124, -19.015)), (' C 188  THR  O  ', ' C 191  VAL HG22', -0.429, (17.851, -36.217, 12.373)), (' L 139  TYR  HB3', ' L 140  PRO  HD3', -0.427, (2.915, -22.744, 16.15)), (' L 189  LYS  HA ', ' L 189  LYS  HD3', -0.424, (29.715, -7.719, 19.216)), (' C  16  VAL  HB ', ' C 130  TYR  CE2', -0.421, (-1.456, -39.526, -19.719)), (' L   4  MET  HE3', ' L  26  SER  HB3', -0.421, (-9.282, -12.175, -13.154)), (' E 332  PRO  HB2', ' E 333  THR  H  ', -0.418, (-16.468, -47.618, -51.084)), (' E 412  PRO  HB3', ' E 426  PRO  O  ', -0.418, (-37.351, -27.466, -44.798)), (' C 171  LYS  NZ ', ' L 130  SER  HB3', -0.417, (28.482, -15.965, 5.692)), (' L  38  GLN  O  ', ' L  84  ALA  HB1', -0.416, (1.193, -29.792, -3.24)), (' L 135  LEU HD13', ' L 174  LEU HD22', -0.416, (14.387, -17.47, 11.449)), (' E 458  LYS  HA ', ' E 458  LYS  HD2', -0.416, (-34.354, -5.272, -47.636)), (' L 140  PRO  HD2', ' L 197  HIS  HE1', -0.414, (4.827, -20.149, 16.56)), (' E 347  PHE  CD2', ' E 509  ARG  HG2', -0.413, (-18.309, -25.734, -35.918)), (' L 169  ASP  O  ', ' L 171  THR HG23', -0.412, (5.825, -29.818, 15.636)), (' E 454  ARG  NH2', ' E 469  SER  O  ', -0.411, (-22.571, -10.263, -46.748)), (' E 502  GLY  N  ', ' E 506  GLN HE21', -0.41, (-23.0, -19.439, -20.966)), (' E 368  LEU  HA ', ' E 368  LEU HD23', -0.408, (-20.461, -39.866, -35.73)), (' L 135  LEU  HB2', ' L 174  LEU  HB3', -0.407, (13.594, -19.659, 12.558)), (' E 338  PHE  HE2', ' E 363  ALA  HB1', -0.406, (-21.752, -41.621, -43.054)), (' E 394  ASN  HB2', ' E 516  GLU  OE1', -0.405, (-25.852, -35.474, -54.685)), (' E 384  PRO  HA ', ' E 387  LEU  CD2', -0.404, (-30.689, -42.063, -39.991)), (' L 140  PRO  HD2', ' L 197  HIS  CE1', -0.403, (4.578, -20.239, 16.086))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
