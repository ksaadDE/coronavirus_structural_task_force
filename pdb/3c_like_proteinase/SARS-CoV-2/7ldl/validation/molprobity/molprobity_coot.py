# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('C', '  55 ', 'GLU', 0.2988934944358819, (61.09609012625708, -1.0766204653788074, -37.89412160505054))]
data['cbeta'] = [('C', '  49 ', 'MET', ' ', 0.4942082449045114, (51.55676595554242, -10.942602767303963, -36.096755555417865)), ('C', '  55 ', 'GLU', ' ', 0.4550557776265301, (62.64882738056598, -0.9580055878735791, -37.79222059025883)), ('C', ' 249 ', 'ILE', ' ', 0.4678509034460661, (44.499173389586346, 12.728377339711766, -1.4204703585240432)), ('D', ' 294 ', 'PHE', ' ', 0.39202176232199054, (19.631979068075857, -9.590984663999059, -26.336145053959672))]
data['probe'] = [(' C  55  GLU  CB ', ' C  55  GLU  CG ', -1.512, (62.972, 0.71, -37.846)), (' C 249  ILE  CD1', ' C 249  ILE  CG1', -1.47, (45.31, 13.866, -2.41)), (' D 145  CYS  SG ', ' D 401  XV4  C12', -1.333, (14.546, 15.684, -10.765)), (' C 145  CYS  SG ', ' C 401  XV4  C12', -1.326, (44.061, -5.196, -31.356)), (' C 286  LEU HD21', ' D 285  ALA  HB2', -0.907, (32.718, -11.614, -4.094)), (' C 145  CYS  SG ', ' C 401  XV4  C04', -0.811, (44.402, -6.945, -30.592)), (' C 249  ILE  CB ', ' C 249  ILE  CD1', -0.742, (45.252, 13.202, -2.35)), (' D 123  SER  OG ', ' D 501  HOH  O  ', -0.737, (28.343, 12.468, -12.411)), (' C  74  GLN  N  ', ' C 504  HOH  O  ', -0.728, (36.431, 8.989, -47.816)), (' D 145  CYS  SG ', ' D 401  XV4  C04', -0.725, (14.936, 14.773, -8.939)), (' C  44  CYS  HB3', ' C  49  MET  HB2', -0.723, (51.527, -9.594, -37.73)), (' C  74  GLN  NE2', ' C 508  HOH  O  ', -0.706, (43.26, 5.1, -49.488)), (' C 300  CYS  O  ', ' C 502  HOH  O  ', -0.706, (28.591, 13.08, -2.042)), (' C 226  THR HG23', ' C 229  ASP  H  ', -0.704, (49.666, 1.033, 12.795)), (' C  10  SER  HB2', ' C 115  LEU HD13', -0.662, (32.557, 6.687, -25.862)), (' D  46  SER  O  ', ' D 502  HOH  O  ', -0.656, (8.797, 22.105, -1.8)), (' C 243  THR  OG1', ' C 245  ASP  HB2', -0.637, (50.891, 7.744, 0.147)), (' C  55  GLU  CA ', ' C  55  GLU  CG ', -0.625, (61.733, -0.209, -37.608)), (' C 263  ASP  OD2', ' C 503  HOH  O  ', -0.61, (36.348, 7.809, 13.663)), (' C  55  GLU  CB ', ' C  55  GLU  CD ', -0.603, (63.677, 0.394, -37.86)), (' C  86  VAL HG13', ' C 179  GLY  HA2', -0.602, (51.858, 3.513, -28.712)), (' C 300  CYS  HB3', ' C 502  HOH  O  ', -0.59, (28.042, 12.496, -1.813)), (' D 245  ASP  O  ', ' D 249  ILE HG12', -0.584, (11.927, -16.292, -24.256)), (' D  34  ASP  OD2', ' D  90  LYS  HE3', -0.577, (7.189, 22.361, -33.126)), (' D 228  ASN  ND2', ' D 509  HOH  O  ', -0.57, (5.828, -24.675, -13.134)), (' D 113  SER  O  ', ' D 149  GLY  HA2', -0.557, (19.509, 5.667, -20.149)), (' C  31  TRP  CD2', ' C  95  ASN  HB2', -0.556, (39.865, 13.587, -37.917)), (' C 249  ILE HG23', ' C 544  HOH  O  ', -0.554, (41.937, 14.187, -2.64)), (' D  86  VAL HG13', ' D 179  GLY  HA2', -0.553, (6.323, 11.327, -18.61)), (' D 166  GLU  O  ', ' D 401  XV4  N31', -0.552, (12.47, 10.396, -3.096)), (' C 145  CYS  SG ', ' C 401  XV4  N03', -0.55, (44.769, -6.962, -30.085)), (' D 145  CYS  SG ', ' D 401  XV4  C05', -0.547, (14.829, 13.921, -9.599)), (' C 145  CYS  SG ', ' C 401  XV4  C05', -0.542, (43.272, -6.099, -29.534)), (' C  61  LYS  NZ ', ' C 512  HOH  O  ', -0.538, (51.042, -4.221, -46.799)), (' C   6 AMET  HE1', ' D 501  HOH  O  ', -0.536, (28.152, 11.596, -11.745)), (' C 145  CYS  CB ', ' C 401  XV4  C12', -0.524, (43.316, -4.991, -31.347)), (' C 217  ARG  HB3', ' C 220  LEU HD12', -0.513, (28.675, 3.484, 9.916)), (' D 305  PHE  O  ', ' D 306  GLN  HB2', -0.507, (26.424, 2.099, -36.888)), (' D 186  VAL HG23', ' D 188  ARG  HG2', -0.496, (3.335, 11.572, -5.636)), (' D 145  CYS  CB ', ' D 401  XV4  C12', -0.492, (14.678, 15.897, -10.812)), (' D 227  LEU  CD1', ' D 242  LEU HD23', -0.484, (12.536, -22.75, -16.74)), (' C  27  LEU HD13', ' C  39  PRO  HD2', -0.47, (44.855, -0.27, -34.244)), (' C   8  PHE  HE1', ' C 305  PHE  CZ ', -0.468, (34.09, 13.585, -15.431)), (' C 249  ILE  CG2', ' C 544  HOH  O  ', -0.465, (41.829, 13.928, -2.626)), (' D 231  ASN  O  ', ' D 235  MET  HG2', -0.462, (8.868, -21.562, -7.119)), (' C 286  LEU HD21', ' D 285  ALA  CB ', -0.46, (31.988, -11.752, -3.644)), (' C  27  LEU HD21', ' C  42  VAL  HB ', -0.459, (46.452, -2.058, -36.476)), (' C 188  ARG  HD3', ' C 548  HOH  O  ', -0.453, (57.856, -11.069, -26.859)), (' C  49  MET  HG3', ' C 401  XV4  C17', -0.452, (50.8, -9.675, -33.573)), (' D  27  LEU HD13', ' D  39  PRO  HD2', -0.448, (12.962, 18.289, -15.741)), (' D  49  MET  HG3', ' D 189  GLN  HG3', -0.447, (7.734, 19.18, -2.598)), (' D   5  LYS  HB2', ' D   5  LYS  HE3', -0.446, (27.611, -5.107, -14.858)), (' C  86  VAL HG13', ' C 179  GLY  CA ', -0.446, (52.171, 3.832, -28.331)), (' C  31  TRP  CE2', ' C  95  ASN  HB2', -0.445, (40.048, 14.052, -37.601)), (' D 132  PRO  HD2', ' D 197  ASP  OD1', -0.436, (12.711, -6.236, -8.357)), (' D  76  ARG  HG2', ' D  76  ARG  NH1', -0.435, (13.037, 33.911, -27.198)), (' D 165  MET  HE2', ' D 192  GLN  NE2', -0.433, (6.59, 9.726, -4.884)), (' D 100  LYS  HA ', ' D 100  LYS  HD2', -0.43, (15.398, 9.171, -36.185)), (' C 115  LEU  O  ', ' C 505  HOH  O  ', -0.426, (36.755, 3.249, -27.814)), (' C  73  VAL HG13', ' C 504  HOH  O  ', -0.425, (36.543, 10.562, -47.065)), (' D 298  ARG  HG3', ' D 303  VAL  HB ', -0.424, (26.157, -6.091, -29.27)), (' D  68  VAL HG12', ' D  75  LEU HD12', -0.42, (15.917, 24.984, -25.029)), (' C 109  GLY  HA2', ' C 200  ILE HD13', -0.42, (43.91, 1.249, -8.471)), (' C 176  ASP  HB2', ' C 523  HOH  O  ', -0.42, (49.259, 7.92, -22.715)), (' D 127  GLN  HG2', ' D 576  HOH  O  ', -0.416, (23.65, -3.476, -18.671)), (' D 247  VAL HG22', ' D 261  VAL HG11', -0.412, (14.839, -22.54, -19.879)), (' C   5  LYS  HE3', ' C 291  PHE  CZ ', -0.411, (32.055, 0.737, -8.984)), (' C 282  LEU  HA ', ' C 282  LEU HD23', -0.411, (25.514, 0.417, -1.603)), (' C  50  LEU  O  ', ' C  50  LEU HD23', -0.41, (57.18, -14.6, -32.275)), (' C 122  PRO  HD2', ' D 306  GLN  OE1', -0.41, (30.617, 4.378, -33.585)), (' C 104  VAL  O  ', ' C 160  CYS  HA ', -0.408, (46.888, 8.491, -20.985)), (' D 130  MET  HE3', ' D 182  TYR  CD1', -0.407, (9.931, 0.923, -16.187)), (' D 155  ASP  N  ', ' D 155  ASP  OD1', -0.406, (20.142, 2.832, -35.867)), (' D 276  MET  HE1', ' D 285  ALA  HA ', -0.4, (30.287, -14.634, -6.006)), (' D 276  MET  HE2', ' D 279  ARG  O  ', -0.4, (31.397, -15.971, -5.172))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
