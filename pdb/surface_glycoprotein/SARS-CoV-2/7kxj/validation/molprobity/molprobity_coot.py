# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 337 ', 'PRO', 0.01247787427879089, (156.119, 196.571, 198.217)), ('C', ' 525 ', 'CYS', 0.019512088735749587, (242.661, 185.54700000000005, 202.06900000000002)), ('C', ' 535 ', 'LYS', 0.036135699856957276, (246.155, 189.39600000000004, 223.72700000000003))]
data['omega'] = [('H', ' 162 ', 'PRO', None, (214.01300000000006, 235.789, 125.05600000000001)), ('H', ' 164 ', 'PRO', None, (210.24900000000005, 237.97500000000005, 130.136)), ('I', ' 162 ', 'PRO', None, (168.887, 186.484, 126.302)), ('I', ' 164 ', 'PRO', None, (170.498, 183.286, 131.746)), ('J', ' 162 ', 'PRO', None, (231.891, 206.865, 123.886)), ('J', ' 164 ', 'PRO', None, (236.24, 203.994, 128.25400000000002)), ('L', '   8 ', 'PRO', None, (203.474, 223.25300000000004, 155.715)), ('L', ' 115 ', 'PRO', None, (227.44899999999998, 226.75, 154.141)), ('L', ' 161 ', 'PRO', None, (190.492, 223.48200000000006, 145.424)), ('M', '   8 ', 'PRO', None, (184.099, 196.199, 155.806)), ('M', ' 115 ', 'PRO', None, (163.546, 207.84200000000007, 151.536)), ('M', ' 161 ', 'PRO', None, (195.356, 186.54000000000002, 147.728)), ('N', '   8 ', 'PRO', None, (246.348, 215.46300000000005, 155.44800000000004)), ('N', ' 115 ', 'PRO', None, (223.125, 209.75800000000007, 153.635)), ('N', ' 161 ', 'PRO', None, (258.336, 217.26, 143.079))]
data['rota'] = [('B', '  61 ', 'ASN', 0.20297513184179689, (202.919, 158.416, 221.781)), ('B', ' 335 ', 'LEU', 0.0026511905498750226, (154.13000000000002, 191.775, 202.385)), ('B', ' 657 ', 'ASN', 0.0014289263046192192, (184.1200000000001, 168.286, 254.505)), ('B', ' 717 ', 'ASN', 0.008477113749196259, (209.916, 177.531, 284.915)), ('C', ' 616 ', 'ASN', 0.04736275657186022, (245.71400000000006, 199.73, 235.76200000000003)), ('I', '  23 ', 'CYS', 0.054916525016432675, (153.614, 189.2, 144.333)), ('I', ' 104 ', 'CYS', 0.07659388531941869, (158.861, 191.917, 147.025))]
data['cbeta'] = [('A', ' 331 ', 'ASN', ' ', 0.2881569245684024, (216.50400000000008, 250.35500000000005, 213.192)), ('A', ' 562 ', 'PHE', ' ', 0.2660746833828025, (225.49400000000006, 242.15700000000007, 226.42499999999998))]
data['probe'] = [(' C  27  ALA  HB1', ' C5002  NAG  H2 ', -0.646, (254.889, 225.826, 223.619)), (' C  61  ASN  O  ', ' C5002  NAG  H82', -0.599, (249.496, 228.023, 224.567)), (' C 417  LYS  NZ ', ' N  66  ASP  OD1', -0.568, (237.233, 194.294, 165.782)), (' L 142  ASP  N  ', ' L 142  ASP  OD1', -0.545, (192.661, 224.835, 112.583)), (' C 202  LYS  NZ ', ' C 228  ASP  OD1', -0.521, (228.434, 235.27, 215.996)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.516, (232.948, 179.719, 256.52)), (' A 854  LYS  NZ ', ' B 568  ASP  OD2', -0.514, (178.645, 195.146, 234.731)), (' C 452  LEU  HB3', ' C 492  LEU  HB3', -0.51, (223.576, 191.574, 170.168)), (' A 977  LEU HD11', ' A 993  ILE HG12', -0.505, (195.917, 195.426, 215.753)), (' A 571  ASP  OD2', ' C 964  LYS  NZ ', -0.505, (219.051, 226.262, 229.095)), (' N 163  GLU  OE2', ' N 165  LYS  NZ ', -0.496, (250.272, 224.452, 143.505)), (' A  43  PHE  CE2', ' B 563  GLN  HB2', -0.489, (164.83, 200.908, 228.267)), (' N  39  VAL  H  ', ' N  57  ALA  H  ', -0.489, (235.055, 202.844, 161.841)), (' H   6  GLU  CD ', ' H   6  GLU  H  ', -0.467, (220.083, 243.616, 143.298)), (' I 216  LYS  N  ', ' I 217  PRO  CD ', -0.466, (168.648, 179.245, 127.611)), (' L 165  LYS  NZ ', ' L 181  GLU  OE2', -0.466, (201.049, 216.609, 134.344)), (' N 169  LYS  NZ ', ' N 215  GLU  OE1', -0.457, (255.78, 235.124, 134.763)), (' C 347  PHE  CD1', ' C 401  VAL  HB ', -0.457, (231.497, 184.19, 174.871)), (' C 133  PHE  HB2', ' C 135  PHE  CE1', -0.455, (245.103, 238.338, 201.891)), (' B 349  SER  HB3', ' B 351  TYR  CE2', -0.453, (155.875, 200.748, 176.158)), (' H 216  LYS  N  ', ' H 217  PRO  CD ', -0.453, (209.481, 242.039, 125.309)), (' A 563  GLN  HB3', ' C  41  LYS  O  ', -0.452, (222.239, 240.002, 226.628)), (' B  55  PHE  HB2', ' B 275  PHE  CE1', -0.448, (210.098, 169.688, 224.425)), (' A 489  TYR  O  ', ' A 490  PHE  C  ', -0.448, (232.017, 233.952, 168.815)), (' A 964  LYS  NZ ', ' B 571  ASP  OD2', -0.446, (180.838, 204.477, 230.405)), (' C 347  PHE  CE1', ' C 401  VAL  HB ', -0.445, (231.827, 184.428, 174.309)), (' B  57  PRO  HA ', ' B 290  ASP  OD2', -0.444, (206.932, 166.516, 226.753)), (' A 725  GLU  OE1', ' A1028  LYS  NZ ', -0.442, (196.496, 204.801, 264.715)), (' A1043  CYS  H  ', ' A1048  HIS  CE1', -0.441, (197.491, 205.668, 271.905)), (' B 329  PHE  CG ', ' B 330  PRO  HD2', -0.436, (166.443, 193.33, 212.241)), (' B1043  CYS  HB2', ' B1048  HIS  CE1', -0.434, (212.914, 190.735, 270.253)), (' B 389  ASP  N  ', ' B 389  ASP  OD1', -0.434, (171.485, 191.969, 204.058)), (' J 216  LYS  N  ', ' J 217  PRO  CD ', -0.433, (236.822, 201.447, 122.928)), (' C 660  TYR  CD1', ' C 695  TYR  CD2', -0.43, (247.373, 206.468, 256.928)), (' N 184  THR HG22', ' N 194  SER  H  ', -0.429, (252.048, 214.295, 134.119)), (' H  38  SER  HG ', ' H  40  HIS  CE1', -0.423, (228.136, 236.503, 154.521)), (' A  30  ASN  C  ', ' A  30  ASN  OD1', -0.421, (156.759, 229.661, 229.429)), (' C1043  CYS  H  ', ' C1048  HIS  CE1', -0.417, (216.993, 210.548, 271.585)), (' B 516  GLU  HG3', ' B 518  LEU  H  ', -0.414, (170.349, 204.964, 198.886)), (' B 989  ALA  O  ', ' B 993  ILE HG12', -0.414, (218.159, 203.596, 212.737)), (' C 881  THR  O  ', ' C 905  ARG  NH2', -0.414, (208.783, 220.937, 279.176)), (' A 202  LYS  NZ ', ' A 228  ASP  OD1', -0.414, (166.979, 209.629, 214.647)), (' A  61  ASN  N  ', ' A  61  ASN  OD1', -0.414, (162.727, 231.815, 227.365)), (' J 115  MET  O  ', ' N  52  LEU HD22', -0.41, (233.723, 196.488, 152.436)), (' J  52  TRP  CH2', ' N 114  TYR  CD2', -0.409, (221.447, 204.963, 151.76)), (' B 400  PHE  CD2', ' B 400  PHE  N  ', -0.409, (158.684, 195.598, 183.645)), (' C 380  TYR  CD1', ' C 380  TYR  N  ', -0.408, (246.544, 193.133, 183.902)), (' C 789  TYR  H  ', ' C 876  ALA  CB ', -0.408, (199.192, 226.657, 270.856)), (' N 184  THR  CG2', ' N 194  SER  H  ', -0.406, (252.51, 214.224, 134.219)), (' A 438  SER  HB3', ' A 509  ARG  HG2', -0.405, (218.955, 250.402, 182.096)), (' A 733  LYS  NZ ', ' A 775  ASP  OD1', -0.404, (195.981, 188.323, 248.869)), (' C 392  PHE  CD2', ' C 515  PHE  HB3', -0.403, (241.647, 192.939, 195.506)), (' B 351  TYR  CD2', ' B 351  TYR  N  ', -0.4, (158.951, 201.378, 176.987)), (' B 449  TYR  CD2', ' B 494  SER  HB3', -0.4, (150.148, 194.741, 168.814))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
