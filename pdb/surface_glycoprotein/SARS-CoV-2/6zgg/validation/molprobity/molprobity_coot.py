# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 164 ', 'ASN', 0.03165389575447638, (253.70400000000012, 238.40200000000004, 269.447)), ('A', ' 293 ', 'LEU', 0.044084187330407844, (240.94000000000005, 242.49899999999994, 222.801)), ('A', ' 478 ', 'THR', 0.040453382683673274, (176.67700000000005, 198.946, 265.48099999999994)), ('A', ' 603 ', 'ASN', 0.03949085181489097, (248.35300000000007, 235.91899999999995, 204.723)), ('A', '1128 ', 'VAL', 0.03602327584511262, (201.26100000000008, 238.78, 150.379)), ('B', '  87 ', 'ASN', 0.030200666698486808, (177.2470000000001, 227.433, 242.469)), ('B', ' 329 ', 'PHE', 0.0, (189.00600000000009, 188.92499999999995, 242.984)), ('B', ' 478 ', 'THR', 0.029143696588880386, (216.627, 179.678, 304.617)), ('B', ' 483 ', 'VAL', 0.06525704484376782, (208.615, 173.77599999999995, 303.623)), ('B', '1128 ', 'VAL', 0.059800748044851575, (203.406, 194.512, 149.626)), ('B', '1139 ', 'ASP', 0.09060192258169208, (204.877, 213.947, 136.951)), ('C', ' 247 ', 'SER', 0.04864652797769063, (212.46000000000006, 140.08199999999994, 249.926)), ('C', ' 478 ', 'THR', 0.04034271545237646, (224.20500000000015, 255.15700000000007, 268.742)), ('C', ' 483 ', 'VAL', 0.032388927525236255, (232.42700000000005, 251.71, 275.867)), ('C', ' 496 ', 'GLY', 0.09703522924639282, (226.185, 226.51, 279.152)), ('C', '1079 ', 'PRO', 0.011925084480970799, (234.278, 209.664, 152.391))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'GLN', 0.0, (264.105, 249.29000000000005, 265.771)), ('A', ' 156 ', 'GLU', 0.10721948642285412, (270.615, 245.576, 258.906)), ('A', ' 166 ', 'CYS', 0.23551014930128997, (252.73600000000013, 233.16400000000002, 265.284)), ('A', ' 206 ', 'LYS', 0.0, (259.867, 231.278, 236.446)), ('A', ' 212 ', 'LEU', 0.23977904358000998, (269.973, 242.96099999999996, 227.377)), ('A', ' 356 ', 'LYS', 0.2951253890010824, (195.81500000000014, 236.511, 261.29)), ('A', ' 417 ', 'LYS', 0.07782954025343274, (196.70500000000007, 212.21199999999993, 261.174)), ('A', ' 462 ', 'LYS', 0.021365903253633863, (190.49100000000007, 220.38399999999993, 252.097)), ('A', ' 597 ', 'VAL', 0.1963386384627897, (234.27200000000008, 240.738, 211.37699999999998)), ('A', ' 786 ', 'LYS', 0.0227587247934682, (228.05800000000002, 195.19599999999997, 181.083)), ('A', ' 814 ', 'LYS', 0.02072640667917579, (245.605, 201.881, 185.44)), ('B', ' 120 ', 'VAL', 0.1568818394077211, (173.56800000000015, 245.808, 252.70599999999996)), ('B', ' 231 ', 'ILE', 0.08366910250034262, (186.29200000000012, 235.878, 253.63699999999994)), ('B', ' 301 ', 'CYS', 0.06408737192812833, (189.641, 228.66699999999997, 219.12199999999999)), ('B', ' 312 ', 'ILE', 0.23611589735142327, (188.591, 220.588, 206.534)), ('B', ' 417 ', 'LYS', 0.07563131572211149, (202.166, 192.916, 287.609)), ('B', ' 738 ', 'CYS', 0.12204796075820923, (221.696, 230.914, 221.499)), ('B', ' 786 ', 'LYS', 0.023759471711845132, (227.20100000000005, 237.51999999999995, 181.891)), ('B', ' 901 ', 'GLN', 0.22432562418245017, (213.11900000000009, 234.561, 164.578)), ('B', ' 947 ', 'LYS', 0.0, (203.124, 229.383, 195.935)), ('C', ' 156 ', 'GLU', 0.08583495913216593, (212.54500000000007, 150.97999999999996, 256.743)), ('C', ' 187 ', 'LYS', 0.024532493372476486, (209.22700000000003, 153.216, 230.099)), ('C', ' 210 ', 'ILE', 0.09982789070017023, (208.759, 156.69999999999993, 226.281)), ('C', ' 424 ', 'LYS', 0.0, (231.35500000000005, 228.31499999999997, 256.256)), ('C', ' 597 ', 'VAL', 0.12564804570506324, (228.547, 186.426, 209.719)), ('C', ' 738 ', 'CYS', 0.16319907485257107, (199.36900000000003, 212.68699999999995, 221.422)), ('C', ' 864 ', 'LEU', 0.2604630775962407, (191.44500000000002, 210.00899999999993, 197.824)), ('C', '1045 ', 'LYS', 0.0, (217.148, 200.829, 176.841))]
data['cbeta'] = []
data['probe'] = [(' C 139  PRO  HA ', ' C 158  ARG  O  ', -0.788, (217.576, 157.262, 255.506)), (' A 139  PRO  HA ', ' A 158  ARG  O  ', -0.744, (262.909, 247.81, 257.366)), (' A 559  PHE  HB2', ' A 577  ARG HH21', -0.694, (197.07, 252.363, 234.586)), (' B 474  GLN  NE2', ' B 480  CYS  SG ', -0.666, (213.567, 179.748, 299.456)), (' C 391  CYS  HA ', ' C 525  CYS  HA ', -0.665, (244.803, 207.409, 247.886)), (' A 391  CYS  HA ', ' A 525  CYS  HA ', -0.655, (208.156, 243.078, 249.01)), (' C 763  LEU HD22', ' C1008  VAL HG21', -0.642, (206.101, 214.555, 214.73)), (' C1031  GLU  OE1', ' C1039  ARG  NH1', -0.632, (213.377, 214.035, 180.384)), (' B 291  CYS  HA ', ' B 297  SER  HB3', -0.612, (184.007, 228.442, 220.641)), (' C  89  GLY  HA2', ' C 194  PHE  O  ', -0.6, (215.907, 175.714, 238.981)), (' A  89  GLY  HA2', ' A 194  PHE  O  ', -0.6, (247.906, 237.007, 241.789)), (' C 593  GLY  HA2', ' C 614  ASP  HB2', -0.598, (238.259, 195.163, 214.525)), (' B 763  LEU HD22', ' B1008  VAL HG21', -0.596, (220.043, 224.107, 215.123)), (' C1056  ALA  HB2', ' C1061  VAL HG23', -0.583, (202.196, 199.113, 188.314)), (' A 983  ARG  HG3', ' A 984  LEU  HG ', -0.579, (231.544, 210.12, 242.849)), (' A  30  ASN  ND2', ' A  31  SER  O  ', -0.576, (253.031, 245.532, 224.866)), (' B 139  PRO  HA ', ' B 158  ARG  O  ', -0.575, (163.683, 241.058, 256.984)), (' B 126  VAL  HB ', ' B 172  SER  HB3', -0.574, (179.925, 250.819, 251.009)), (' B 742  ILE  O  ', ' B1000  ARG  NH1', -0.572, (216.23, 231.311, 227.883)), (' A 593  GLY  HA2', ' A 614  ASP  HB2', -0.572, (221.503, 244.957, 215.546)), (' B 318  PHE  H  ', ' B 594  GLY  HA2', -0.569, (187.172, 211.943, 217.665)), (' C 742  ILE  O  ', ' C1000  ARG  NH1', -0.568, (201.158, 207.528, 227.527)), (' A1031  GLU  OE1', ' A1039  ARG  NH1', -0.562, (218.781, 215.44, 180.555)), (' C 206  LYS  NZ ', ' C 221  SER  OG ', -0.56, (205.85, 167.621, 226.644)), (' B 426  PRO  HG3', ' B 463  PRO  HB3', -0.56, (207.579, 192.149, 272.567)), (' B 203  ILE  HB ', ' B 227  VAL HG12', -0.559, (182.821, 243.262, 245.274)), (' A 357  ARG HH12', ' A 394  ASN HD22', -0.559, (195.83, 238.875, 250.765)), (' C 983  ARG  HG3', ' C 984  LEU  HG ', -0.559, (204.549, 202.434, 242.72)), (' A 117  LEU HD13', ' A 130  VAL HG22', -0.553, (252.606, 233.207, 255.057)), (' C 777  ASN  OD1', ' C1019  ARG  NH1', -0.552, (203.892, 216.112, 194.727)), (' C  30  ASN  ND2', ' C  31  SER  O  ', -0.551, (223.029, 166.694, 223.423)), (' B 567  ARG  NH2', ' B 571  ASP  O  ', -0.55, (202.793, 193.907, 224.992)), (' C  48  LEU  HB3', ' C 276  LEU HD11', -0.55, (210.872, 184.714, 218.104)), (' C 216  LEU HD12', ' C 217  PRO  HD2', -0.548, (217.005, 161.088, 228.086)), (' C  52  GLN  NE2', ' C 274  THR  OG1', -0.546, (218.507, 186.524, 227.388)), (' B  34  ARG  NH2', ' B 217  PRO  O  ', -0.545, (173.233, 244.334, 225.599)), (' C 929  SER  OG ', ' C 933  LYS  NZ ', -0.545, (208.797, 185.424, 171.549)), (' A 929  SER  OG ', ' A 933  LYS  NZ ', -0.545, (245.353, 226.749, 172.411)), (' B 598  ILE  HB ', ' B 609  ALA  HB3', -0.54, (181.142, 220.106, 206.834)), (' A 822  LEU HD13', ' A1061  VAL HG21', -0.54, (238.984, 215.04, 187.245)), (' C 457  ARG  NH1', ' C 459  SER  OG ', -0.537, (231.612, 240.215, 257.484)), (' B  30  ASN  ND2', ' B  31  SER  O  ', -0.533, (170.53, 235.476, 223.879)), (' A 417  LYS  H  ', ' A 417  LYS  HD3', -0.532, (198.996, 211.324, 262.367)), (' B 957  GLN  OE1', ' C 765  ARG  NH1', -0.531, (201.882, 225.983, 213.351)), (' A1039  ARG  NH2', ' B1031  GLU  OE2', -0.528, (217.289, 218.962, 181.299)), (' B  56  LEU HD12', ' B  57  PRO  HD2', -0.525, (177.317, 231.753, 230.99)), (' A 355  ARG  HE ', ' A 396  TYR  HB3', -0.523, (196.189, 233.411, 256.439)), (' A 762  GLN  HG2', ' A 765  ARG HH21', -0.521, (214.261, 201.938, 214.322)), (' B1056  ALA  HB2', ' B1061  VAL HG23', -0.519, (207.242, 236.706, 189.63)), (' B  37  TYR  HB3', ' B 223  LEU  HB2', -0.519, (183.33, 241.3, 233.727)), (' C 762  GLN  OE1', ' C 765  ARG  NH2', -0.518, (203.656, 223.708, 214.798)), (' C 295  PRO  HB2', ' C 608  VAL HG21', -0.515, (227.284, 181.997, 211.493)), (' C 401  VAL HG22', ' C 509  ARG  HG2', -0.514, (234.81, 218.894, 270.952)), (' B 122  ASN  ND2', ' B 154  GLU  OE1', -0.513, (168.519, 251.433, 255.094)), (' C 642  VAL HG22', ' C 651  ILE HG12', -0.511, (240.664, 182.368, 209.238)), (' C 185  ASN  ND2', ' C 211  ASN  OD1', -0.51, (210.92, 150.022, 226.071)), (' A 189  LEU HD22', ' A 217  PRO  HG2', -0.51, (262.736, 239.203, 230.363)), (' B1054  GLN  HB2', ' B1061  VAL  HB ', -0.51, (207.228, 236.755, 185.495)), (' A 300  LYS  NZ ', ' A 306  PHE  O  ', -0.508, (245.128, 233.415, 212.554)), (' B 189  LEU  HB2', ' B 210  ILE HD13', -0.506, (170.011, 248.087, 231.738)), (' C 442  ASP  OD1', ' C 509  ARG  NH2', -0.506, (235.851, 217.628, 275.129)), (' A 558  LYS  HA ', ' A 584  ILE HG13', -0.505, (199.419, 254.144, 231.281)), (' B 642  VAL HG22', ' B 651  ILE HG12', -0.504, (174.943, 212.177, 210.669)), (' A 203  ILE  HB ', ' A 227  VAL HG12', -0.503, (254.626, 229.828, 245.863)), (' A1074  ASN  OD1', ' B 895  GLN  NE2', -0.502, (225.225, 242.44, 162.057)), (' C 117  LEU HD13', ' C 130  VAL HG22', -0.5, (209.116, 173.131, 252.566)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.499, (201.729, 226.898, 270.69)), (' A 412  PRO  HB3', ' A 429  PHE  HB3', -0.499, (203.115, 223.332, 251.144)), (' B 523  THR HG23', ' B 524  VAL HG23', -0.499, (198.576, 182.707, 254.696)), (' A 742  ILE  O  ', ' A1000  ARG  NH1', -0.498, (229.956, 206.446, 227.48)), (' B 444  LYS  HG2', ' B 446  GLY  H  ', -0.498, (180.313, 176.454, 290.373)), (' B 599  THR HG22', ' B 608  VAL HG12', -0.497, (181.706, 225.624, 209.776)), (' A 130  VAL  O  ', ' A 167  THR  OG1', -0.496, (250.661, 232.903, 260.802)), (' A  32  PHE  HD2', ' A 216  LEU HD23', -0.496, (257.336, 243.736, 226.743)), (' C1036  GLN  NE2', ' C1048  HIS  O  ', -0.495, (210.962, 206.321, 169.665)), (' A 189  LEU  HB2', ' A 210  ILE HD13', -0.495, (264.957, 239.264, 231.803)), (' B1031  GLU  OE1', ' B1039  ARG  NH1', -0.494, (214.628, 219.787, 180.552)), (' A 805  ILE HD12', ' A 878  LEU HD11', -0.491, (239.315, 210.385, 176.368)), (' B 401  VAL HG22', ' B 509  ARG  HG2', -0.49, (188.413, 183.808, 278.84)), (' A 108  THR  HA ', ' A 236  THR  HB ', -0.489, (245.233, 244.286, 253.069)), (' C 203  ILE  HB ', ' C 227  VAL HG12', -0.486, (206.834, 172.484, 241.919)), (' C1054  GLN  HB2', ' C1061  VAL  HB ', -0.486, (202.295, 198.925, 184.827)), (' A1035  GLY  HA3', ' C1040  VAL HG21', -0.485, (222.466, 209.594, 172.617)), (' C 854  LYS  HG2', ' C 859  THR  HA ', -0.484, (194.401, 203.548, 213.186)), (' B 902  MET  HG3', ' B 916  LEU HD11', -0.482, (206.45, 232.999, 163.261)), (' B 391  CYS  SG ', ' B 392  PHE  N  ', -0.481, (197.883, 190.334, 254.412)), (' B  99  ASN HD22', ' B 177  MET  HB3', -0.48, (168.688, 254.096, 245.76)), (' C1076  THR  OG1', ' C1097  SER  OG ', -0.48, (233.802, 198.708, 150.018)), (' B1116  THR  OG1', ' B1119  ASN  OD1', -0.48, (205.925, 216.865, 143.888)), (' C  17  ASN HD21', ' C 137  ASN  HB3', -0.477, (225.759, 157.709, 256.854)), (' C 902  MET  HE3', ' C 906  PHE  HE1', -0.475, (207.72, 199.844, 165.367)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.474, (224.262, 183.172, 200.955)), (' A 701  ALA  HB3', ' B 787  GLN HE22', -0.473, (229.825, 242.909, 178.278)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.473, (239.752, 238.016, 202.663)), (' A 390  LEU HD11', ' B 983  ARG  HA ', -0.472, (211.967, 235.687, 245.698)), (' C 985  ASP  HB2', ' C 987  PRO  HD2', -0.472, (202.356, 211.183, 246.339)), (' A 331  ASN  ND2', ' A 530  SER  OG ', -0.471, (209.657, 254.965, 249.002)), (' B  96  GLU  HG2', ' B 263  ALA  HB1', -0.471, (165.234, 247.132, 239.539)), (' B 912  THR HG23', ' B1106  GLN HE22', -0.47, (204.678, 222.536, 156.906)), (' B 452  LEU HD13', ' B 492  LEU  HB3', -0.465, (198.662, 178.29, 290.13)), (' C 393  THR  HB ', ' C 516  GLU  HB2', -0.465, (243.265, 215.916, 246.567)), (' C 907  ASN HD21', ' C 913  GLN HE21', -0.465, (207.132, 208.102, 157.766)), (' A 433  VAL HG22', ' A 512  VAL HG22', -0.464, (203.782, 226.34, 258.915)), (' A1082  CYS  HB2', ' A1132  ILE HD11', -0.463, (208.52, 238.443, 145.903)), (' A 314  GLN  NE2', ' A 596  SER  OG ', -0.463, (227.829, 240.031, 211.234)), (' A 964  LYS  HB2', ' A 964  LYS  HZ2', -0.463, (233.998, 218.261, 219.965)), (' B  89  GLY  HA2', ' B 194  PHE  O  ', -0.462, (180.417, 233.539, 240.677)), (' A 100  ILE HG13', ' A 262  ALA  H  ', -0.46, (269.626, 246.397, 241.855)), (' A  39  PRO  HG3', ' A  51  THR HG21', -0.46, (244.02, 227.048, 230.587)), (' A 983  ARG  HA ', ' C 390  LEU HD11', -0.46, (236.043, 208.087, 244.808)), (' B 145  TYR  HB3', ' B 247  SER  HA ', -0.459, (154.549, 256.825, 251.785)), (' A 444  LYS  HG2', ' A 446  GLY  H  ', -0.458, (200.1, 220.99, 286.879)), (' C 342  PHE  HZ ', ' C 513  LEU HD11', -0.458, (238.217, 212.165, 260.269)), (' B 762  GLN  HA ', ' B 765  ARG  HE ', -0.458, (228.1, 223.54, 214.428)), (' B 985  ASP  HB2', ' B 987  PRO  HD2', -0.458, (221.065, 229.046, 246.247)), (' B 559  PHE  HB2', ' B 577  ARG HH21', -0.457, (193.588, 179.886, 228.83)), (' B 231  ILE HD12', ' B 233  ILE  H  ', -0.455, (185.095, 232.718, 252.853)), (' B 560  LEU  O  ', ' B 577  ARG  NH2', -0.455, (194.554, 178.609, 230.513)), (' A 676  THR  H  ', ' A 690  GLN HE22', -0.454, (244.492, 247.629, 196.126)), (' B 353  TRP  HB3', ' B 400  PHE  HB3', -0.453, (196.479, 183.895, 277.979)), (' A  97  LYS  HB3', ' A 186  PHE  HA ', -0.453, (271.239, 242.732, 234.606)), (' A1125  ASN HD22', ' A1127  ASP  H  ', -0.448, (201.003, 238.169, 145.656)), (' B 329  PHE  HD2', ' B 528  LYS  HE3', -0.448, (190.177, 192.788, 244.681)), (' C  28  TYR  HB3', ' C  61  ASN HD21', -0.448, (230.502, 165.055, 229.569)), (' C1062  PHE  HB3', ' C1064  HIS  CE1', -0.447, (207.94, 203.112, 181.146)), (' A 742  ILE  HA ', ' A1000  ARG HH11', -0.445, (228.88, 207.377, 226.539)), (' B 222  ALA  HB2', ' B 285  ILE  HB ', -0.445, (186.558, 243.941, 227.833)), (' B 206  LYS  HE2', ' B 223  LEU  HA ', -0.444, (182.02, 245.77, 233.337)), (' A 985  ASP  N  ', ' A 985  ASP  OD1', -0.443, (228.024, 206.148, 245.695)), (' C1106  GLN  HG3', ' C1108  ASN  H  ', -0.442, (220.286, 202.806, 157.882)), (' A 342  PHE  HZ ', ' A 513  LEU HD11', -0.44, (206.296, 234.825, 261.341)), (' C 115  GLN  HA ', ' C 131  CYS  O  ', -0.439, (213.745, 174.03, 258.703)), (' B 983  ARG  HG3', ' B 984  LEU  HG ', -0.439, (212.111, 231.209, 243.682)), (' B 433  VAL HG22', ' B 512  VAL HG22', -0.437, (195.807, 191.773, 272.998)), (' C 874  THR HG21', ' C1055  SER  HB3', -0.435, (196.625, 202.401, 185.922)), (' B 415  THR  OG1', ' B 416  GLY  N  ', -0.434, (203.014, 198.45, 286.371)), (' B 777  ASN  OD1', ' B1019  ARG  NH1', -0.432, (221.569, 226.149, 195.023)), (' B 986  PRO  N  ', ' B 987  PRO  HD2', -0.43, (221.121, 228.904, 245.233)), (' A1010  GLN  NE2', ' B 762  GLN  OE1', -0.429, (224.624, 218.923, 214.076)), (' C 521  PRO  HG3', ' C 564  GLN  HB2', -0.428, (250.402, 213.937, 239.91)), (' A 905  ARG  NH1', ' A1049  LEU  O  ', -0.428, (228.53, 213.572, 170.57)), (' C 379  CYS  HA ', ' C 432  CYS  HA ', -0.428, (231.925, 213.58, 254.744)), (' C 131  CYS  HA ', ' C 166  CYS  HA ', -0.427, (209.598, 172.683, 260.724)), (' B 886  TRP  HZ3', ' B 901  GLN  HG2', -0.427, (214.68, 232.906, 166.773)), (' A1033  VAL HG22', ' A1051  SER  HB2', -0.426, (230.429, 212.431, 177.595)), (' B 902  MET  HE3', ' B 906  PHE  HE1', -0.426, (204.409, 231.554, 165.858)), (' C 858  LEU HD13', ' C 959  LEU HD22', -0.426, (201.653, 203.016, 214.536)), (' B 424  LYS  NZ ', ' B 425  LEU  O  ', -0.425, (206.682, 195.378, 276.523)), (' C 778  THR  HB ', ' C 865  LEU HD12', -0.424, (196.291, 210.038, 193.342)), (' A 778  THR HG22', ' A 865  LEU HD12', -0.424, (230.813, 201.386, 192.178)), (' A 495  TYR  HB3', ' A 496  GLY  H  ', -0.423, (198.912, 217.283, 275.575)), (' B 353  TRP  HZ3', ' B 355  ARG  HB2', -0.422, (201.043, 182.281, 272.669)), (' B 353  TRP  HH2', ' B 355  ARG HH21', -0.422, (203.667, 184.061, 272.625)), (' A1052  PHE  HB2', ' A1063  LEU  HB2', -0.422, (236.505, 213.829, 178.18)), (' C 717  ASN  OD1', ' C 718  PHE  N  ', -0.422, (216.374, 191.505, 162.94)), (' B 143  VAL HG21', ' B 179  LEU HD13', -0.421, (163.925, 253.876, 250.677)), (' C  25  PRO  HA ', ' C  26  PRO  HD3', -0.421, (233.159, 157.995, 239.836)), (' A 578  ASP  OD2', ' A 581  THR  N  ', -0.42, (204.8, 256.927, 241.034)), (' B 119  ILE HG23', ' B 128  ILE HG12', -0.42, (178.484, 244.494, 251.311)), (' A 457  ARG  NH1', ' A 460  ASN  O  ', -0.419, (187.051, 215.654, 256.303)), (' A 788  ILE  HB ', ' C 702  GLU  HA ', -0.419, (235.549, 193.247, 178.607)), (' A 762  GLN  HG2', ' A 765  ARG  NH2', -0.418, (214.132, 201.531, 214.602)), (' A 862  PRO  HA ', ' A 863  PRO  HD3', -0.418, (235.931, 201.793, 202.734)), (' B 437  ASN  ND2', ' B 506  GLN  OE1', -0.418, (180.576, 189.78, 283.37)), (' A 391  CYS  SG ', ' A 525  CYS  N  ', -0.417, (206.236, 244.271, 249.277)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.415, (195.305, 216.379, 262.744)), (' B 117  LEU HD13', ' B 130  VAL HG22', -0.413, (181.121, 238.545, 255.13)), (' A 127  VAL HG12', ' A 129  LYS  HG3', -0.412, (260.154, 233.162, 258.327)), (' C 139  PRO  HB2', ' C 241  LEU HD21', -0.412, (216.735, 160.387, 253.772)), (' A1105  THR  OG1', ' A1106  GLN  N  ', -0.411, (224.429, 229.899, 154.636)), (' C1105  THR  OG1', ' C1106  GLN  N  ', -0.411, (221.471, 202.821, 153.801)), (' B 379  CYS  HA ', ' B 432  CYS  HA ', -0.41, (194.415, 195.814, 267.919)), (' C 976  VAL HG12', ' C 979  ASP  H  ', -0.41, (199.365, 201.168, 235.646)), (' B  28  TYR  HB3', ' B  61  ASN HD21', -0.41, (164.48, 229.81, 228.6)), (' C 490  PHE  HE1', ' C 492  LEU  HB2', -0.409, (233.631, 237.957, 273.129)), (' C 970  PHE  HB2', ' C 996  LEU HD23', -0.408, (209.68, 206.011, 231.037)), (' A 328  ARG  NH1', ' A 531  THR  O  ', -0.408, (212.33, 256.92, 243.506)), (' C 821  LEU HD21', ' C 939  SER  HB3', -0.407, (201.844, 186.279, 185.439)), (' A 206  LYS  HZ3', ' A 224  GLU  H  ', -0.406, (257.176, 228.41, 235.577)), (' A 541  PHE  HB2', ' A 543  PHE  HE2', -0.405, (212.488, 249.701, 237.395)), (' B1033  VAL HG22', ' B1051  SER  HB2', -0.405, (211.822, 231.45, 178.503)), (' A1040  VAL HG21', ' B1035  GLY  HA3', -0.405, (218.588, 225.938, 174.273)), (' A 442  ASP  OD2', ' A 451  TYR  OH ', -0.404, (198.44, 227.234, 276.119)), (' C 205  SER  HB3', ' C 226  LEU HD22', -0.401, (206.302, 168.315, 238.888)), (' B 905  ARG  NH1', ' B1036  GLN  HB2', -0.401, (213.755, 227.68, 170.505)), (' B 127  VAL HG12', ' B 129  LYS  HG3', -0.401, (177.952, 245.467, 257.962)), (' A 415  THR  OG1', ' A 416  GLY  N  ', -0.4, (200.025, 211.459, 256.653)), (' A 457  ARG  NH1', ' A 459  SER  OG ', -0.4, (186.242, 214.767, 255.75)), (' C 393  THR HG23', ' C 522  ALA  HB2', -0.4, (246.985, 215.388, 247.003)), (' A 763  LEU HD22', ' A1008  VAL HG21', -0.4, (221.067, 207.867, 214.741))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
