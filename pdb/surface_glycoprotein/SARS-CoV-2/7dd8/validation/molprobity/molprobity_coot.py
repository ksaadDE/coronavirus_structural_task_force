# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 527 ', 'PRO', 0.07592785260903327, (223.441, 221.65, 209.182))]
data['omega'] = [('A', ' 153 ', 'PRO', None, (239.288, 200.374, 150.239)), ('A', ' 155 ', 'PRO', None, (236.498, 197.655, 155.335)), ('A', ' 195 ', 'PRO', None, (251.71, 169.48799999999994, 154.484)), ('A', ' 220 ', 'ASP', None, (259.798, 178.37099999999995, 148.54)), ('B', '  95 ', 'PRO', None, (222.208, 214.933, 172.278)), ('B', ' 141 ', 'PRO', None, (251.81, 189.00599999999997, 179.677))]
data['rota'] = [('A', '   2 ', 'VAL', 0.03361733880560916, (212.37, 193.686, 163.79)), ('A', ' 180 ', 'LEU', 0.17513735834761715, (247.63700000000003, 201.686, 151.94599999999997)), ('A', ' 183 ', 'LEU', 0.07729984840860012, (246.141, 192.712, 156.76)), ('B', '  19 ', 'VAL', 0.19417092605162528, (234.311, 194.004, 189.966)), ('B', '  88 ', 'CYS', 0.22085910372420828, (227.33800000000002, 204.14699999999996, 180.717)), ('B', '  92 ', 'ASN', 0.1442658467229769, (217.055, 211.12099999999998, 178.506)), ('B', ' 108 ', 'ARG', 0.2604315444207391, (246.40800000000004, 183.469, 184.88099999999997)), ('B', ' 117 ', 'ILE', 0.1977836932970322, (259.597, 183.68299999999996, 161.71999999999997)), ('C', '  33 ', 'THR', 0.21746505756422407, (264.963, 205.48899999999995, 232.292)), ('C', ' 159 ', 'VAL', 0.011136248032610803, (275.92, 201.636, 200.747)), ('C', ' 197 ', 'ILE', 0.09115785063150654, (262.321, 220.393, 214.10999999999999)), ('C', ' 203 ', 'ILE', 0.10959616502359629, (272.367, 214.722, 217.017)), ('C', ' 208 ', 'THR', 0.19941260511520822, (280.224, 204.484, 228.466)), ('C', ' 312 ', 'ILE', 0.08315535893690201, (247.09200000000007, 216.851, 250.062)), ('C', ' 362 ', 'VAL', 0.008185717032921811, (213.365, 221.684, 204.654)), ('C', ' 382 ', 'VAL', 0.29440765086962795, (227.587, 221.69299999999998, 191.036)), ('C', ' 387 ', 'LEU', 0.1353941502890945, (225.29200000000006, 220.66299999999995, 197.737)), ('C', ' 531 ', 'THR', 0.0027198671887163073, (218.549, 213.884, 213.539)), ('C', ' 546 ', 'LEU', 0.2514681779503035, (225.042, 228.884, 222.27199999999993)), ('C', ' 599 ', 'THR', 0.21693793188841812, (251.21400000000006, 210.38, 248.981)), ('C', ' 912 ', 'THR', 0.18862153286854935, (249.838, 226.72500000000002, 298.373)), ('C', ' 973 ', 'ILE', 0.2073468589102765, (256.864, 238.012, 219.68699999999998)), ('C', '1104 ', 'VAL', 0.039863831309944385, (240.578, 219.90700000000007, 304.76)), ('D', '  29 ', 'THR', 0.19718448477399556, (281.269, 282.5880000000001, 238.68199999999996)), ('D', '  33 ', 'THR', 0.1418007993489439, (269.2079999999999, 280.552, 243.36499999999995)), ('D', ' 150 ', 'LYS', 0.25019166894262534, (273.28899999999993, 315.367, 224.71599999999998)), ('D', ' 159 ', 'VAL', 0.007026932095333569, (272.943, 297.025, 214.245)), ('D', ' 197 ', 'ILE', 0.09046677084483805, (261.321, 274.336, 222.414)), ('D', ' 208 ', 'THR', 0.19323628262679157, (263.439, 295.297, 240.87699999999995)), ('D', ' 312 ', 'ILE', 0.12546682083227034, (265.6029999999999, 258.105, 256.672)), ('D', ' 332 ', 'ILE', 0.07213429329349416, (287.321, 239.89299999999997, 209.352)), ('D', ' 387 ', 'LEU', 0.08831366232446153, (271.576, 246.45, 212.321)), ('D', ' 401 ', 'VAL', 0.272997502561511, (260.366, 238.056, 190.021)), ('D', ' 483 ', 'VAL', 0.20973529771262017, (248.372, 214.708, 178.972)), ('D', ' 488 ', 'CYS', 0.012591297597196736, (242.48800000000003, 218.989, 185.882)), ('D', ' 492 ', 'LEU', 0.28413870662251306, (251.74300000000002, 226.341, 184.665)), ('D', '1104 ', 'VAL', 0.015878164282011532, (255.88600000000005, 240.16400000000002, 307.244)), ('E', '  29 ', 'THR', 0.1915273770262166, (195.413, 258.29400000000004, 231.773)), ('E', '  33 ', 'THR', 0.16463381056793908, (202.14200000000014, 247.88199999999998, 235.93099999999998)), ('E', ' 150 ', 'LYS', 0.2526163485989824, (174.18000000000006, 239.029, 209.22199999999998)), ('E', ' 159 ', 'VAL', 0.006939111065800877, (191.91100000000006, 249.098, 203.88299999999995)), ('E', ' 197 ', 'ILE', 0.09028502394588743, (215.3930000000001, 247.911, 216.804)), ('E', ' 203 ', 'ILE', 0.09084488392350655, (205.26900000000006, 241.016, 218.418)), ('E', ' 208 ', 'THR', 0.18948343400452408, (192.84900000000007, 236.564, 229.20999999999995)), ('E', ' 312 ', 'ILE', 0.16518187443167887, (220.408, 252.46, 254.257)), ('E', ' 332 ', 'ILE', 0.07452040125770844, (234.429, 288.74300000000005, 215.116)), ('E', ' 387 ', 'LEU', 0.08682853507793142, (236.023, 271.19700000000006, 215.174)), ('E', ' 401 ', 'VAL', 0.2998643114694434, (252.775, 269.94000000000005, 194.992)), ('E', ' 483 ', 'VAL', 0.20452399284296113, (280.88200000000006, 272.097, 189.73)), ('E', ' 488 ', 'CYS', 0.013829842702007194, (278.845, 263.918, 194.80599999999998)), ('E', ' 492 ', 'LEU', 0.2821160484953331, (268.209, 268.74100000000004, 192.188)), ('E', ' 738 ', 'CYS', 0.2528176467039302, (242.00300000000004, 229.921, 235.09199999999998)), ('E', '1104 ', 'VAL', 0.017451287649297723, (230.88500000000005, 242.86200000000002, 306.8))]
data['cbeta'] = []
data['probe'] = [(' D1106  GLN HE21', ' D1109  PHE  HB3', -0.594, (252.397, 246.828, 299.487)), (' E 886  TRP  HB3', ' E 905  ARG HH22', -0.59, (237.093, 224.997, 284.012)), (' D 903  ALA  HB1', ' D 913  GLN  HB2', -0.568, (241.933, 249.618, 299.103)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.565, (211.957, 216.226, 182.273)), (' C1047  TYR  HB2', ' C1067  TYR  HB3', -0.561, (249.958, 224.281, 286.515)), (' D  66  HIS  HB2', ' D  78  ARG  HE ', -0.56, (283.495, 293.621, 232.068)), (' D 886  TRP  HB3', ' D 905  ARG HH22', -0.559, (236.212, 249.225, 287.235)), (' B 128  GLY  HA2', ' B 183  LYS  HD2', -0.557, (261.683, 192.986, 143.42)), (' E1047  TYR  HB2', ' E1067  TYR  HB3', -0.557, (229.024, 237.924, 286.683)), (' C1107  ARG HH22', ' E 907  ASN HD22', -0.554, (237.224, 228.546, 294.889)), (' E1106  GLN HE21', ' E1109  PHE  HB3', -0.54, (228.447, 237.994, 297.307)), (' E  66  HIS  HB2', ' E  78  ARG  HE ', -0.539, (186.171, 256.468, 222.523)), (' B  21  ILE  HB ', ' B  73  LEU  HB3', -0.537, (230.092, 198.089, 186.101)), (' B 113  PRO  HB3', ' B 139  PHE  HB3', -0.535, (253.614, 184.726, 173.186)), (' E 903  ALA  HB1', ' E 913  GLN  HB2', -0.526, (231.227, 228.122, 296.04)), (' E  35  GLY  HA3', ' E  56  LEU  HB3', -0.525, (204.829, 249.177, 229.369)), (' D  35  GLY  HA3', ' D  56  LEU  HB3', -0.517, (267.862, 279.508, 236.396)), (' C 396  TYR  HB2', ' C 514  SER  HB2', -0.517, (215.388, 230.846, 190.423)), (' C 457  ARG  NH1', ' C 460  ASN  O  ', -0.507, (216.155, 239.835, 171.828)), (' D 905  ARG  O  ', ' D1036  GLN  NE2', -0.506, (244.059, 246.595, 291.007)), (' E 418  ILE HG22', ' E 422  ASN HD22', -0.504, (259.294, 264.376, 198.021)), (' C 129  LYS  HG2', ' C 169  GLU  HG3', -0.501, (280.831, 215.161, 201.87)), (' C 792  PRO  HG3', ' D 707  TYR  HB3', -0.501, (273.3, 236.703, 290.049)), (' C 856  ASN  ND2', ' D 570  ALA  O  ', -0.501, (266.41, 238.848, 234.9)), (' D 796  ASP  N  ', ' D 796  ASP  OD1', -0.501, (233.05, 265.472, 295.564)), (' D 332  ILE HG22', ' D 362  VAL HG21', -0.5, (284.607, 241.681, 207.82)), (' E 398  ASP  HB2', ' E 512  VAL  HB ', -0.5, (251.588, 270.944, 204.985)), (' D 329  PHE  O  ', ' D 580  GLN  NE2', -0.499, (286.576, 240.133, 217.301)), (' D 398  ASP  HB2', ' D 512  VAL  HB ', -0.496, (262.407, 235.823, 199.686)), (' C 745  ASP  OD1', ' D 319  ARG  NH2', -0.494, (271.347, 248.864, 232.857)), (' E1028  LYS  NZ ', ' E1042  PHE  O  ', -0.494, (235.04, 238.421, 274.064)), (' B 108  ARG  NH1', ' B 170  ASP  O  ', -0.493, (244.865, 181.681, 178.455)), (' D1010  GLN  O  ', ' D1014  ARG  NH1', -0.491, (245.756, 252.035, 251.218)), (' C 128  ILE  HB ', ' C 170  TYR  HB3', -0.489, (279.529, 215.55, 207.309)), (' C 278  LYS  HB2', ' C 306  PHE  HE2', -0.488, (266.258, 215.801, 239.794)), (' D  34  ARG  HG3', ' D 216  LEU HD21', -0.487, (272.146, 285.079, 239.442)), (' D 108  THR  HB ', ' D 114  THR HG21', -0.484, (270.728, 280.302, 210.248)), (' A  20  LEU HD12', ' A  80  LEU HD23', -0.484, (224.963, 207.337, 157.29)), (' A 173  PRO  HD3', ' B 164  THR HG22', -0.482, (244.525, 190.868, 166.146)), (' D1047  TYR  HB2', ' D1067  TYR  HB3', -0.481, (251.23, 249.089, 288.95)), (' B 155  ARG  NH2', ' B 185  GLU  OE2', -0.48, (265.957, 198.228, 156.255)), (' E 596  SER  OG ', ' E 613  GLN  NE2', -0.48, (224.359, 257.937, 250.305)), (' E 365  TYR  HA ', ' E 368  LEU HD13', -0.479, (234.572, 274.717, 206.58)), (' E 796  ASP  N  ', ' E 796  ASP  OD1', -0.479, (222.458, 213.269, 287.687)), (' C 566  GLY  HA2', ' E  43  PHE  H  ', -0.478, (215.795, 229.958, 229.945)), (' E  34  ARG  HG3', ' E 216  LEU HD21', -0.478, (197.518, 249.044, 231.284)), (' C 599  THR  HB ', ' C 608  VAL HG12', -0.477, (251.617, 209.658, 246.315)), (' E 345  THR  O  ', ' E 509  ARG  NH2', -0.475, (248.099, 277.832, 190.668)), (' B 106  ILE  H  ', ' B 166  GLN HE22', -0.475, (242.083, 188.404, 180.789)), (' E 329  PHE  O  ', ' E 580  GLN  NE2', -0.475, (232.84, 286.426, 222.576)), (' C 905  ARG  O  ', ' C1036  GLN  NE2', -0.474, (251.196, 231.469, 289.516)), (' C 146  HIS  HB2', ' C 247  SER  HA ', -0.474, (285.475, 184.102, 207.977)), (' C 598  ILE  HB ', ' C 609  ALA  HB3', -0.474, (246.141, 209.336, 248.182)), (' C  99  ASN  ND2', ' C 178  ASP  O  ', -0.473, (285.452, 198.67, 217.06)), (' E 108  THR  HB ', ' E 114  THR HG21', -0.473, (207.943, 255.825, 204.755)), (' D 365  TYR  HA ', ' D 368  LEU HD13', -0.472, (274.448, 248.11, 203.545)), (' E 442  ASP  OD1', ' E 509  ARG  NH2', -0.472, (249.552, 275.863, 190.115)), (' D 442  ASP  OD1', ' D 509  ARG  NH2', -0.471, (266.988, 239.978, 184.979)), (' D 244  LEU  HA ', ' D 260  ALA  HA ', -0.469, (279.996, 302.678, 225.814)), (' D 119  ILE HG23', ' D 128  ILE HG12', -0.468, (262.244, 292.662, 220.131)), (' D 596  SER  OG ', ' D 613  GLN  NE2', -0.467, (268.108, 253.303, 251.046)), (' C 280  ASN HD21', ' C 284  THR  HB ', -0.467, (276.916, 214.903, 237.791)), (' E 531  THR  OG1', ' E 532  ASN  N  ', -0.467, (224.401, 284.452, 225.86)), (' C 213  VAL HG12', ' C 214  ARG  HG3', -0.465, (272.17, 187.154, 227.96)), (' E 119  ILE HG23', ' E 128  ILE HG12', -0.465, (199.871, 240.805, 209.929)), (' D 128  ILE  HB ', ' D 170  TYR  HB3', -0.465, (258.164, 292.527, 217.877)), (' D  81  ASN  ND2', ' D 138  ASP  OD1', -0.464, (280.844, 293.676, 219.693)), (' E  24  LEU HD12', ' E  78  ARG  HD3', -0.463, (185.29, 261.32, 222.481)), (' E 905  ARG  O  ', ' E1036  GLN  NE2', -0.463, (234.485, 232.791, 288.558)), (' D 531  THR  OG1', ' D 532  ASN  N  ', -0.462, (289.328, 247.528, 222.215)), (' E 244  LEU  HA ', ' E 260  ALA  HA ', -0.462, (181.467, 250.406, 214.118)), (' D 741  TYR  OH ', ' D 962  LEU  O  ', -0.461, (243.088, 259.329, 239.411)), (' E 741  TYR  OH ', ' E 962  LEU  O  ', -0.461, (233.62, 235.384, 235.342)), (' A 125  PRO  HB3', ' A 151  TYR  HB3', -0.461, (243.7, 194.509, 149.342)), (' D 418  ILE HG22', ' D 422  ASN HD22', -0.46, (252.771, 234.396, 192.879)), (' E 289  VAL HG11', ' E 300  LYS  HB2', -0.459, (213.526, 246.77, 242.983)), (' D 865  LEU HD13', ' D 873  TYR  HE2', -0.459, (229.729, 257.623, 268.529)), (' C 189  LEU HD22', ' C 210  ILE HD13', -0.459, (275.069, 200.504, 228.6)), (' E 781  VAL HG22', ' E1026  ALA  HB2', -0.459, (240.088, 229.281, 267.119)), (' C 379  CYS  HA ', ' C 432  CYS  HA ', -0.457, (219.996, 220.962, 187.433)), (' E 128  ILE  HB ', ' E 170  TYR  HB3', -0.457, (202.231, 237.681, 207.35)), (' D 345  THR  O  ', ' D 509  ARG  NH2', -0.456, (269.339, 239.768, 185.335)), (' D 781  VAL HG22', ' D1026  ALA  HB2', -0.455, (236.854, 248.369, 269.812)), (' E  81  ASN  ND2', ' E 138  ASP  OD1', -0.455, (189.824, 256.459, 210.6)), (' E 206  LYS  HB2', ' E 223  LEU  HA ', -0.454, (201.275, 238.552, 226.734)), (' C 204  TYR  HB3', ' C 223  LEU  HB3', -0.453, (272.819, 213.064, 223.117)), (' B  24  LYS  NZ ', ' B  70  ASP  OD1', -0.453, (231.215, 209.833, 192.627)), (' D 906  PHE  HE2', ' D 916  LEU  HB2', -0.452, (245.443, 253.109, 297.561)), (' C 329  PHE  HB2', ' C 527  PRO  HG3', -0.452, (220.136, 221.829, 211.968)), (' C 317  ASN  HA ', ' C 594  GLY  HA2', -0.452, (241.411, 218.906, 238.668)), (' D 289  VAL HG11', ' D 300  LYS  HB2', -0.451, (263.153, 269.562, 248.118)), (' D  24  LEU HD12', ' D  78  ARG  HD3', -0.451, (287.651, 292.218, 231.044)), (' C 596  SER  OG ', ' C 613  GLN  NE2', -0.45, (241.722, 217.558, 245.15)), (' D 726  ILE  HB ', ' D 947  LYS  HD2', -0.45, (249.417, 256.3, 269.322)), (' A  90  THR HG23', ' A 116  THR  HA ', -0.45, (236.983, 205.674, 156.818)), (' A 219  ARG  HA ', ' A 220  ASP  HA ', -0.449, (258.838, 176.33, 147.24)), (' D 117  LEU HD22', ' D 231  ILE HD13', -0.448, (262.741, 284.583, 217.841)), (' E 129  LYS  HG2', ' E 169  GLU  HG3', -0.448, (200.708, 238.568, 201.906)), (' C  48  LEU HD11', ' C 276  LEU  HB3', -0.447, (263.102, 217.99, 237.896)), (' E 332  ILE HG22', ' E 362  VAL HG21', -0.445, (234.547, 285.692, 213.217)), (' E 906  PHE  HB3', ' E 911  VAL  HB ', -0.444, (231.233, 233.689, 293.66)), (' C  99  ASN  HB2', ' C 179  LEU  HG ', -0.444, (283.881, 197.93, 214.72)), (' E 763  LEU HD22', ' E1008  VAL HG21', -0.444, (244.043, 235.366, 241.828)), (' C 547  THR  OG1', ' E 978  ASN  ND2', -0.444, (230.827, 227.457, 221.638)), (' C 564  GLN  H  ', ' E  41  LYS  HB3', -0.444, (212.703, 230.087, 224.693)), (' D 294  ASP  N  ', ' D 294  ASP  OD1', -0.443, (270.996, 269.38, 246.712)), (' C 757  GLY  HA3', ' D 965  GLN HE22', -0.443, (249.903, 257.815, 235.897)), (' A  66  ARG  HD2', ' A  84  SER  HB2', -0.442, (230.006, 220.322, 156.105)), (' E 289  VAL HG13', ' E 297  SER  HB3', -0.441, (211.42, 248.186, 242.022)), (' C 195  LYS  HE3', ' C 202  LYS  HD2', -0.441, (266.866, 218.893, 218.933)), (' E 433  VAL HG22', ' E 512  VAL HG22', -0.441, (249.239, 267.252, 204.958)), (' C1076  THR  HB ', ' C1097  SER  HB3', -0.44, (235.234, 211.605, 302.353)), (' E 117  LEU HD22', ' E 231  ILE HD13', -0.44, (207.263, 245.349, 209.874)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.44, (254.077, 208.618, 236.491)), (' D 598  ILE HD11', ' D 611  LEU HD22', -0.44, (272.145, 255.922, 256.218)), (' D  18  LEU HD11', ' D 244  LEU HD21', -0.44, (282.537, 300.211, 221.033)), (' C 102  ARG HH21', ' C 122  ASN  HA ', -0.439, (283.24, 201.934, 207.638)), (' D 982  SER  HB3', ' E 390  LEU HD11', -0.439, (237.613, 269.008, 218.775)), (' B   6  GLN  HA ', ' B  23  CYS  HA ', -0.438, (232.633, 206.117, 184.93)), (' A  14  PRO  HA ', ' A  85  VAL HG23', -0.438, (234.764, 214.13, 152.709)), (' D  25  PRO  HA ', ' D  26  PRO  HD3', -0.437, (289.48, 284.438, 228.855)), (' E  18  LEU HD11', ' E 244  LEU HD21', -0.437, (183.242, 254.65, 210.093)), (' D 433  VAL HG22', ' D 512  VAL HG22', -0.436, (260.486, 239.48, 200.221)), (' E 980  ILE HG23', ' E 984  LEU HD12', -0.435, (236.924, 237.896, 216.221)), (' C 734  THR HG21', ' C 959  LEU HD21', -0.435, (261.918, 239.8, 247.269)), (' E 106  PHE  HB2', ' E 117  LEU  HB3', -0.435, (204.388, 248.019, 209.071)), (' C  35  GLY  HA3', ' C  56  LEU  HB3', -0.435, (264.235, 208.94, 226.339)), (' C1105  THR  OG1', ' C1109  PHE  O  ', -0.435, (245.065, 219.835, 299.592)), (' C 666  ILE HD11', ' C 672  ALA  HB2', -0.434, (243.709, 208.606, 253.006)), (' D  58  PHE  HB2', ' D 293  LEU HD22', -0.434, (271.053, 274.101, 243.636)), (' E  58  PHE  HB2', ' E 293  LEU HD22', -0.433, (206.853, 252.664, 238.278)), (' D 129  LYS  HG2', ' D 169  GLU  HG3', -0.432, (259.27, 294.835, 212.759)), (' C 108  THR  O  ', ' C 236  THR  OG1', -0.431, (259.548, 209.803, 203.851)), (' E 666  ILE HD11', ' E 672  ALA  HB2', -0.43, (216.427, 259.19, 259.447)), (' C 428  ASP  N  ', ' C 428  ASP  OD1', -0.43, (226.329, 232.708, 185.432)), (' E 359  SER  OG ', ' E 394  ASN  OD1', -0.429, (248.611, 282.579, 214.19)), (' D 763  LEU HD22', ' D1008  VAL HG21', -0.428, (237.747, 249.051, 243.166)), (' D 120  VAL HG11', ' D 159  VAL HG21', -0.428, (269.448, 295.942, 216.102)), (' D 906  PHE  HB3', ' D 911  VAL  HB ', -0.427, (247.239, 247.088, 295.817)), (' C 206  LYS  HB2', ' C 223  LEU  HA ', -0.426, (274.938, 211.241, 226.002)), (' C 317  ASN  ND2', ' E 737  ASP  OD2', -0.426, (241.614, 223.872, 236.092)), (' C 448  ASN  HB3', ' C 497  PHE  HB2', -0.426, (199.128, 218.52, 171.572)), (' D 204  TYR  HB3', ' D 223  LEU  HB3', -0.425, (260.783, 285.882, 233.805)), (' D 106  PHE  HB2', ' D 117  LEU  HB3', -0.424, (266.294, 285.612, 217.015)), (' E 295  PRO  HG2', ' E 608  VAL HG21', -0.423, (211.309, 256.47, 248.282)), (' E 728  PRO  HB2', ' E1018  ILE HG23', -0.423, (234.21, 233.774, 259.996)), (' C 318  PHE  N  ', ' C 593  GLY  O  ', -0.423, (240.099, 217.304, 236.904)), (' C1106  GLN  HG3', ' C1108  ASN  H  ', -0.422, (244.572, 222.432, 296.291)), (' E 362  VAL  HB ', ' E 527  PRO  HD3', -0.422, (235.189, 282.28, 212.933)), (' C 356  LYS  HE3', ' C 358  ILE HD11', -0.422, (206.136, 226.631, 195.868)), (' C  91  TYR  OH ', ' C 191  GLU  OE1', -0.422, (270.09, 207.097, 225.412)), (' C  18  LEU HD11', ' C 244  LEU HD21', -0.421, (274.554, 190.572, 204.688)), (' C 864  LEU  O  ', ' D 669  GLY  N  ', -0.421, (271.441, 246.604, 262.795)), (' E 792  PRO  O  ', ' E 795  LYS  NZ ', -0.42, (223.393, 211.165, 280.9)), (' E 214  ARG  HA ', ' E 214  ARG  HD3', -0.42, (185.47, 253.106, 234.563)), (' E 598  ILE HD11', ' E 611  LEU HD22', -0.418, (219.5, 259.249, 254.665)), (' D  40  ASP  N  ', ' D  40  ASP  OD1', -0.416, (253.329, 276.729, 234.007)), (' E 120  VAL HG11', ' E 159  VAL HG21', -0.414, (194.121, 246.189, 205.714)), (' D 193  VAL HG23', ' D 223  LEU HD22', -0.414, (263.565, 284.633, 233.39)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.413, (245.252, 280.102, 220.229)), (' C 454  ARG  NH2', ' C 469  SER  O  ', -0.413, (205.153, 238.412, 172.694)), (' C 985  ASP  O  ', ' C 989  ALA  N  ', -0.413, (258.797, 249.533, 216.598)), (' C 763  LEU HD22', ' C1008  VAL HG21', -0.411, (253.444, 247.392, 244.027)), (' E 880  GLY  O  ', ' E 884  SER  OG ', -0.41, (235.788, 217.914, 281.432)), (' D  68  ILE  HA ', ' D  68  ILE HD12', -0.41, (282.591, 299.925, 231.939)), (' C 435  ALA  HB2', ' C 510  VAL  HA ', -0.41, (210.942, 219.154, 182.875)), (' C 905  ARG HH11', ' C1036  GLN  HB2', -0.409, (254.343, 235.009, 287.185)), (' E 599  THR  HB ', ' E 608  VAL HG12', -0.409, (212.381, 253.087, 251.851)), (' C 106  PHE  HB2', ' C 117  LEU  HB3', -0.409, (269.558, 211.849, 206.348)), (' D 432  CYS  SG ', ' D 433  VAL  N  ', -0.409, (262.266, 243.608, 203.142)), (' D 599  THR  HB ', ' D 608  VAL HG12', -0.408, (270.195, 265.5, 255.554)), (' E 559  PHE  HE2', ' E 585  LEU  H  ', -0.408, (237.986, 284.793, 236.453)), (' A  51  ILE HG13', ' A  57  THR HG22', -0.408, (214.045, 213.225, 160.493)), (' E 193  VAL HG23', ' E 223  LEU HD22', -0.408, (203.462, 242.829, 224.74)), (' C 475  ALA  HB3', ' C 487  ASN  HB3', -0.407, (207.461, 240.577, 156.484)), (' E  40  ASP  N  ', ' E  40  ASP  OD1', -0.406, (214.567, 236.938, 226.945)), (' C 117  LEU HD22', ' C 231  ILE HG21', -0.406, (271.044, 215.852, 206.988)), (' E 426  PRO  HG3', ' E 463  PRO  HB3', -0.406, (257.821, 267.004, 213.419)), (' D 289  VAL HG13', ' D 297  SER  HB3', -0.406, (265.351, 270.942, 247.533)), (' C 394  ASN HD22', ' C 516  GLU  HG3', -0.405, (219.832, 234.664, 194.843)), (' D1088  HIS  HB3', ' D1120  THR  HB ', -0.404, (253.385, 229.775, 308.942)), (' C 280  ASN  OD1', ' C 284  THR  N  ', -0.404, (276.138, 217.224, 237.438)), (' D 295  PRO  HG2', ' D 608  VAL HG21', -0.402, (273.046, 265.55, 251.864)), (' D 359  SER  OG ', ' D 394  ASN  OD1', -0.402, (274.757, 230.824, 206.738)), (' B  77  ASN  OD1', ' B  79  GLN  NE2', -0.401, (231.655, 182.08, 187.35)), (' C1104  VAL HG13', ' C1113  GLN  HB2', -0.401, (243.174, 220.738, 306.684)), (' D 195  LYS  HE3', ' D 202  LYS  HD2', -0.401, (259.321, 278.231, 227.531)), (' C 108  THR  OG1', ' C 234  ASN  O  ', -0.401, (262.696, 213.987, 203.304)), (' A 144  LEU  HB2', ' A 187  VAL HG12', -0.401, (247.726, 178.358, 158.644))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
