# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (-59.594, 20.933, -41.521))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 360  ASN  H  ', ' B 523  THR  HB ', -0.817, (-132.293, 14.491, -14.736)), (' B 350  VAL HG11', ' B 402  ILE HG23', -0.811, (-108.26, 25.717, -20.427)), (' A 644  ARG  NH1', ' A 667  GLU  OE1', -0.777, (-40.313, 44.719, -46.46)), (' A 619  LYS  HD2', ' A 725  LEU HD23', -0.744, (-25.963, 45.724, -31.244)), (' A 249  MET  HG2', ' A 256  ILE HD11', -0.738, (-34.877, 22.829, -23.953)), (' A 177  ARG  NH1', ' A 497  TYR  O  ', -0.718, (-51.483, 44.28, -37.34)), (' A 249  MET  CG ', ' A 256  ILE HD11', -0.674, (-35.12, 22.732, -23.958)), (' A 246  THR  HA ', ' A 249  MET  HE3', -0.647, (-35.95, 21.821, -20.854)), (' A  91  SER  HB3', ' A 211  TRP  CH2', -0.644, (-83.977, 41.479, -7.022)), (' B 350  VAL HG12', ' B 400  PHE  HB2', -0.641, (-111.356, 25.161, -20.903)), (' A 482  ARG  HB3', ' A 608  THR HG23', -0.622, (-40.827, 38.504, -23.585)), (' A 114  GLN  O  ', ' A 118  THR  OG1', -0.61, (-72.217, 45.876, -43.661)), (' A 103  SER  HB3', ' A 106  SER  HB2', -0.609, (-80.434, 49.736, -29.027)), (' A 108  LEU HD11', ' A 190  MET  HB2', -0.606, (-71.915, 50.264, -32.875)), (' A 468  ILE HD13', ' A 476  THR HG21', -0.601, (-50.438, 46.524, -25.854)), (' A 144  LEU  HA ', ' A 148  LEU  HB2', -0.599, (-55.085, 25.505, -40.637)), (' A 267  LEU  HA ', ' A 278  LEU HD11', -0.576, (-46.308, 23.095, -26.826)), (' A 218  SER  HB3', ' A 221  GLN  HB2', -0.571, (-66.34, 46.329, -9.636)), (' A 233  ILE HD13', ' A 450  LEU HD13', -0.562, (-55.452, 29.997, -13.73)), (' A 293  VAL HG23', ' A 297  MET  HE2', -0.562, (-64.695, 4.767, -22.099)), (' A 457  GLU  OE2', ' A 460  ARG  NH2', -0.56, (-62.555, 38.546, -25.383)), (' A 666  VAL HG12', ' A 667  GLU  H  ', -0.56, (-38.816, 42.438, -50.887)), (' A 518  ARG  O  ', ' A 522  GLN  HG3', -0.556, (-65.074, 26.655, -14.464)), (' B 362  VAL HG23', ' B 526  GLY  HA2', -0.554, (-128.102, 5.224, -13.589)), (' B 393  THR HG23', ' B 517  LEU  HA ', -0.553, (-130.052, 17.779, -6.379)), (' A 208  GLU  HB2', ' A 219  ARG  HG2', -0.55, (-70.355, 45.359, -14.747)), (' B 393  THR  HA ', ' B 523  THR  H  ', -0.535, (-132.117, 16.176, -9.898)), (' A 302  TRP  CZ2', ' A 423  LEU HD11', -0.529, (-70.109, 0.708, -19.48)), (' A 690  ASN  OD1', ' A 692  SER  OG ', -0.529, (-36.679, 26.095, -43.197)), (' A 457  GLU  HG2', ' A 512  PHE  HB3', -0.526, (-60.624, 37.158, -23.466)), (' A 361  CYS  HB3', ' A 363  LYS  NZ ', -0.523, (-70.178, 11.995, -34.945)), (' B 350  VAL HG11', ' B 402  ILE  CG2', -0.518, (-107.653, 25.869, -20.067)), (' A 133  CYS  HA ', ' A 141  CYS  HA ', -0.515, (-51.613, 26.087, -49.402)), (' B 393  THR  N  ', ' B 516  GLU  O  ', -0.515, (-128.887, 16.981, -8.326)), (' A 511  SER  O  ', ' A 514  ARG  NH1', -0.511, (-66.251, 34.72, -24.934)), (' B 401  VAL HG22', ' B 509  ARG  HG2', -0.507, (-109.003, 19.842, -24.498)), (' A 256  ILE  C  ', ' A 256  ILE HD12', -0.506, (-34.684, 25.479, -25.242)), (' A 121  ASN  O  ', ' A 125  THR HG23', -0.505, (-67.517, 36.336, -43.684)), (' B 350  VAL HG12', ' B 400  PHE  CD1', -0.498, (-110.654, 24.975, -20.23)), (' A 184  VAL HG22', ' A 464  PHE  HE1', -0.498, (-61.741, 45.782, -30.463)), (' B 393  THR HG21', ' B 518  LEU  H  ', -0.497, (-131.523, 19.411, -5.795)), (' A 628  LEU HD21', ' A 679  ILE HD11', -0.495, (-36.264, 59.441, -30.96)), (' B 360  ASN  N  ', ' B 523  THR  HB ', -0.49, (-132.547, 13.984, -14.679)), (' B 362  VAL  CG2', ' B 527  PRO  HD2', -0.487, (-128.576, 3.4, -13.518)), (' A 347  THR  HG1', ' A 349  TRP  HE1', -0.483, (-77.134, 21.714, -30.502)), (' B 474  GLN  HB2', ' B 480  CYS  SG ', -0.48, (-107.462, 50.938, -22.527)), (' A 535  HIS  CD2', ' A 542  CYS  HB2', -0.478, (-62.884, 14.307, -3.241)), (' B 344  ALA  HB3', ' B 347  PHE  HE1', -0.478, (-114.785, 16.8, -26.267)), (' B 393  THR  OG1', ' B 516  GLU  HG2', -0.473, (-130.052, 19.754, -8.785)), (' A 116  LEU HD11', ' A 187  LYS  HD3', -0.471, (-68.673, 45.562, -34.104)), (' A 520  ILE HD12', ' A 581  VAL HG23', -0.47, (-58.103, 30.662, -10.0)), (' A  21  THR  O  ', ' A  25  VAL HG13', -0.467, (-93.721, 49.727, -15.058)), (' A 184  VAL HG22', ' A 464  PHE  CE1', -0.465, (-61.723, 46.149, -30.07)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.465, (-132.16, 15.595, -8.563)), (' A  80  ALA  O  ', ' A 101  GLN  NE2', -0.461, (-87.101, 50.685, -20.074)), (' A  25  VAL HG12', ' A  83  TYR  CG ', -0.46, (-92.475, 49.792, -17.492)), (' A 261  CYS  HB2', ' A 488  VAL  HB ', -0.459, (-40.091, 33.655, -25.626)), (' A 156  LYS  HB2', ' A 156  LYS  HE3', -0.459, (-41.854, 14.697, -33.853)), (' A 397  ASN  OD1', ' A 399  GLY  N  ', -0.458, (-70.051, 33.071, -16.386)), (' B 366  SER  O  ', ' B 370  ASN  HB2', -0.458, (-114.887, 2.41, -14.54)), (' A 145  GLU  HA ', ' A 146  PRO  HA ', -0.455, (-58.801, 21.774, -39.247)), (' A 446  ILE HD13', ' A 523  PHE  HZ ', -0.454, (-59.6, 21.436, -14.121)), (' A 542  CYS  SG ', ' A 543  ASP  N  ', -0.452, (-65.78, 13.521, -5.621)), (' A 315  PHE  CD2', ' A 380  GLN  HG3', -0.448, (-78.069, 16.558, -14.855)), (' A 474  MET  HE1', ' A 499  ASP  HB2', -0.444, (-50.379, 39.352, -33.332)), (' B 406  GLU  HB3', ' B 418  ILE HG13', -0.443, (-104.493, 27.131, -16.679)), (' A 478  TRP  CZ3', ' A 481  LYS  HD3', -0.44, (-46.975, 35.674, -29.082)), (' A 190  MET  O  ', ' A 194  ASN  ND2', -0.433, (-73.928, 51.324, -27.698)), (' A  86  GLU  N  ', ' A  86  GLU  OE1', -0.432, (-85.021, 54.291, -13.144)), (' A 414  THR HG21', ' A 542  CYS  O  ', -0.432, (-64.299, 11.917, -8.504)), (' A 370  LEU  O  ', ' A 409  SER  OG ', -0.43, (-67.979, 15.359, -19.338)), (' B 418  ILE HD13', ' B 422  ASN HD22', -0.426, (-106.414, 30.693, -18.168)), (' A 180  TYR  HA ', ' A 183  TYR  HB3', -0.426, (-61.897, 44.838, -36.497)), (' A 493  HIS  ND1', ' A 499  ASP  OD2', -0.426, (-47.8, 37.956, -35.09)), (' A 309  LYS  HE2', ' A 328  TRP  CZ2', -0.424, (-82.362, 8.104, -21.79)), (' A 157  ASP  HB3', ' A 160  GLU  HB3', -0.422, (-42.895, 19.641, -38.93)), (' A 478  TRP  HB3', ' A 489  GLU  OE1', -0.421, (-43.801, 39.051, -29.454)), (' A 245  ARG  NH2', ' A 603  PHE  O  ', -0.42, (-37.103, 27.694, -15.872)), (' A 295  ASN  O  ', ' A 299  ASN  ND2', -0.418, (-63.247, -3.374, -25.566)), (' A 211  TRP  N  ', ' A 216  ASN  OD1', -0.418, (-76.363, 45.208, -5.953)), (' A  70  SER  O  ', ' A  74  GLU  HG2', -0.417, (-84.877, 42.828, -32.563)), (' A 360  MET  SD ', ' A 362  THR  OG1', -0.415, (-73.189, 11.917, -28.334)), (' B 518  LEU  C  ', ' B 520  ALA  H  ', -0.413, (-133.948, 20.281, -5.032)), (' B 357  ARG  HG3', ' B 396  TYR  CE1', -0.413, (-127.233, 22.392, -15.465)), (' A 455  MET  HG3', ' A 484  ILE HD12', -0.409, (-50.378, 39.224, -21.147)), (' A 168  TRP  HE1', ' A 502  SER  HB3', -0.409, (-55.115, 32.4, -36.903)), (' A 477  TRP  CZ3', ' A 500  PRO  HB3', -0.408, (-54.369, 39.169, -29.101)), (' A 249  MET  HE1', ' A 258  PRO  HB3', -0.407, (-32.986, 24.431, -20.487)), (' B 334  ASN  O  ', ' B 362  VAL HG12', -0.405, (-129.724, 6.283, -18.175)), (' B 379  CYS  HA ', ' B 432  CYS  HA ', -0.405, (-113.847, 15.715, -8.289)), (' A  60  GLN  O  ', ' A  64  ASN  N  ', -0.404, (-85.407, 32.694, -42.409)), (' A 168  TRP  NE1', ' A 502  SER  HB3', -0.403, (-54.802, 32.416, -37.136)), (' B 387  LEU HD12', ' B 390  LEU HD12', -0.402, (-121.983, 10.505, -5.346)), (' A 523  PHE  HA ', ' A 526  GLN  HB3', -0.401, (-63.798, 22.106, -8.361)), (' B 344  ALA  HB3', ' B 347  PHE  CE1', -0.4, (-114.975, 17.722, -26.667)), (' A 415  PRO  HB3', ' A 428  PHE  CE2', -0.4, (-58.96, 3.676, -11.086))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
