# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 105  ILE  HB ', ' A 239  GLN  HB2', -0.632, (170.61, 158.012, 247.707)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.631, (225.949, 178.6, 261.2)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.622, (235.789, 187.077, 246.259)), (' B 901  GLN HE21', ' B 905  ARG HH21', -0.614, (207.73, 185.851, 171.246)), (' B 393  THR  HB ', ' B 522  ALA  HA ', -0.598, (203.624, 230.963, 245.863)), (' B  94  SER  HB3', ' B 190  ARG  HB2', -0.582, (250.995, 189.18, 235.965)), (' A 570  ALA  HB1', ' B 963  VAL HG11', -0.58, (215.188, 184.482, 219.556)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.574, (248.154, 180.365, 254.711)), (' A  94  SER  HB2', ' A 190  ARG  HB2', -0.568, (163.192, 159.938, 234.381)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.567, (229.011, 217.215, 189.139)), (' B 144  TYR  O  ', ' B 153  MET  N  ', -0.567, (266.736, 182.081, 249.305)), (' B  93  ALA  HB3', ' B 266  TYR  HB2', -0.564, (249.427, 196.016, 233.317)), (' C 278  LYS  HE3', ' C 287  ASP  HB2', -0.554, (191.0, 236.443, 217.938)), (' B 762  GLN  OE1', ' B 765  ARG  NH1', -0.554, (189.543, 188.34, 214.423)), (' B 418  ILE  HA ', ' B 422  ASN HD22', -0.554, (184.234, 213.706, 262.031)), (' C 206  LYS  HB2', ' C 223  LEU  HA ', -0.547, (189.664, 242.797, 232.173)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.547, (182.484, 229.665, 218.171)), (' B 987  PRO  HG2', ' C 413  GLY  HA3', -0.544, (196.94, 187.453, 248.451)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.543, (229.551, 166.441, 284.699)), (' B 360  ASN  H  ', ' B 523  THR  HB ', -0.542, (205.334, 233.885, 251.351)), (' C 226  LEU  HG ', ' C 227  VAL HG23', -0.539, (193.366, 242.479, 242.796)), (' C 418  ILE  HA ', ' C 422  ASN HD22', -0.537, (194.917, 179.216, 261.259)), (' B 821  LEU HD11', ' B 939  SER  HB2', -0.535, (227.319, 183.792, 187.725)), (' C 393  THR  HB ', ' C 522  ALA  HA ', -0.522, (170.66, 187.484, 245.567)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.52, (170.965, 141.245, 239.076)), (' C 821  LEU HD11', ' C 939  SER  HB3', -0.519, (199.484, 231.751, 187.45)), (' C 117  LEU HD22', ' C 231  ILE HD13', -0.519, (185.447, 235.475, 250.195)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.519, (234.313, 199.541, 217.784)), (' C 360  ASN  H  ', ' C 523  THR  HB ', -0.514, (166.902, 187.393, 250.945)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.514, (181.191, 169.962, 217.328)), (' A 544  ASN HD21', ' A 579  PRO  HB3', -0.509, (225.225, 172.395, 238.082)), (' B 907  ASN  ND2', ' B 911  VAL  O  ', -0.508, (209.784, 194.837, 160.886)), (' C 323  THR  OG1', ' C 324  GLU  OE1', -0.506, (161.783, 210.709, 232.571)), (' B 317  ASN  ND2', ' C 737  ASP  OD2', -0.5, (218.023, 211.501, 219.988)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.495, (177.37, 229.355, 218.057)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.493, (199.446, 166.212, 188.51)), (' C  94  SER  HB3', ' C 190  ARG  HB2', -0.492, (182.811, 249.073, 236.918)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.49, (184.064, 165.948, 217.332)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.488, (172.083, 183.959, 187.41)), (' B  92  PHE  HB3', ' B 192  PHE  HB2', -0.487, (245.43, 191.87, 238.233)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.486, (256.607, 197.51, 233.889)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.485, (162.433, 171.897, 248.066)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.482, (236.209, 204.518, 218.372)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.48, (165.263, 248.677, 240.77)), (' B 756  TYR  OH ', ' B 994  ASP  OD1', -0.473, (197.049, 193.123, 232.023)), (' B 995  ARG  NH2', ' C 994  ASP  OD2', -0.472, (206.022, 200.24, 234.113)), (' B 130  VAL  HB ', ' B 168  PHE  HB3', -0.471, (236.276, 186.484, 255.179)), (' B 357  ARG  NH1', ' B 396  TYR  OH ', -0.468, (196.147, 231.269, 250.897)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.467, (181.12, 225.862, 201.835)), (' A 127  VAL HG21', ' A1302  NAG  H62', -0.466, (157.749, 165.379, 253.258)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.466, (161.777, 250.554, 241.947)), (' C 204  TYR  HA ', ' C 225  PRO  HA ', -0.463, (191.294, 238.966, 237.752)), (' A  14  GLN  HB3', ' A 158  ARG  HE ', -0.463, (160.845, 148.611, 258.331)), (' B  39  PRO  HG2', ' B  51  THR HG21', -0.462, (230.115, 190.904, 227.579)), (' B 193  VAL HG23', ' B 223  LEU HD22', -0.461, (240.865, 190.621, 234.063)), (' B 276  LEU  HB3', ' B 289  VAL  HB ', -0.461, (232.434, 195.624, 218.992)), (' B 866  THR  H  ', ' B 869  MET  HE3', -0.459, (205.861, 173.636, 195.056)), (' B 324  GLU  H  ', ' B 539  VAL HG12', -0.455, (225.886, 226.336, 232.55)), (' C 128  ILE HD13', ' C 170  TYR  HD2', -0.455, (192.195, 243.013, 250.461)), (' A 189  LEU HD12', ' A 210  ILE HD13', -0.455, (162.355, 158.688, 226.867)), (' A 374  PHE  HA ', ' A 436  TRP  HB3', -0.454, (218.137, 166.231, 272.706)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.453, (213.477, 193.523, 143.625)), (' C  36  VAL HG13', ' C 222  ALA  HA ', -0.451, (188.452, 239.08, 228.082)), (' A  39  PRO  HG3', ' A  51  THR HG21', -0.45, (175.791, 177.314, 227.799)), (' A 756  TYR  OH ', ' A 994  ASP  OD1', -0.449, (194.692, 204.957, 232.152)), (' B  39  PRO  HG3', ' B  55  PHE  HZ ', -0.447, (231.86, 191.781, 228.955)), (' C 328  ARG HH21', ' C 580  GLN HE21', -0.447, (158.136, 196.831, 240.814)), (' A 164  ASN  OD1', ' A 165  ASN  N  ', -0.446, (170.199, 165.269, 263.701)), (' C 916  LEU HD22', ' C 923  ILE HD13', -0.445, (199.832, 219.648, 163.494)), (' C 555  SER  HB3', ' C 586  ASP  HB2', -0.445, (160.257, 194.297, 225.382)), (' B  36  VAL HG23', ' B 222  ALA  HA ', -0.444, (239.654, 189.159, 226.864)), (' A1029  MET  O  ', ' A1033  VAL  HB ', -0.444, (186.647, 201.558, 180.641)), (' B  16  VAL  HB ', ' B 140  PHE  HZ ', -0.443, (260.77, 195.674, 255.932)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.441, (194.936, 230.972, 232.54)), (' B 156  GLU  OE2', ' B 158  ARG  NH1', -0.44, (262.338, 191.438, 256.884)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.436, (172.851, 180.272, 230.796)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.436, (186.434, 167.87, 208.093)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.435, (181.462, 186.286, 183.138)), (' B 105  ILE  HB ', ' B 239  GLN  HB3', -0.435, (247.605, 196.171, 249.691)), (' B 132  GLU  OE1', ' B 165  ASN  ND2', -0.434, (237.52, 192.531, 265.357)), (' A 903  ALA  HB2', ' A 916  LEU HD12', -0.432, (183.589, 194.61, 161.126)), (' A 907  ASN HD21', ' A 913  GLN  HG3', -0.432, (189.971, 197.051, 158.948)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.431, (223.991, 190.416, 182.673)), (' C 776  LYS  NZ ', ' C 780  GLU  OE2', -0.431, (213.176, 202.267, 193.727)), (' C  14  GLN  HB3', ' C 158  ARG  HE ', -0.429, (172.376, 254.363, 261.106)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.429, (170.851, 145.647, 238.746)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.428, (233.785, 205.268, 208.651)), (' B 328  ARG  HA ', ' B 328  ARG  HD2', -0.427, (218.66, 232.978, 241.515)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.427, (188.1, 191.786, 143.83)), (' A  97  LYS  HG2', ' A 186  PHE  HD1', -0.426, (158.009, 152.383, 231.447)), (' A 528  LYS  HA ', ' A 528  LYS  HD3', -0.426, (218.321, 171.546, 247.586)), (' B 518  LEU HD21', ' B 546  LEU HD13', -0.423, (208.03, 224.519, 236.908)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.423, (258.56, 203.637, 241.943)), (' A  93  ALA  HB3', ' A 266  TYR  HB2', -0.423, (169.683, 157.993, 231.782)), (' A 895  GLN  NE2', ' C1074  ASN  OD1', -0.423, (175.917, 211.572, 162.924)), (' B  21  ARG HH21', ' B  79  PHE  HD2', -0.422, (259.069, 199.074, 248.299)), (' A1139  ASP  HB3', ' A1142  GLN  HB2', -0.422, (203.084, 191.314, 135.942)), (' A 776  LYS  NZ ', ' A 780  GLU  OE2', -0.421, (191.119, 210.385, 193.365)), (' A 996  LEU  HA ', ' A 996  LEU HD23', -0.421, (188.758, 197.759, 230.921)), (' C 902  MET  HE3', ' C1049  LEU HD13', -0.419, (199.967, 217.111, 169.129)), (' B  14  GLN  HB3', ' B 158  ARG  HE ', -0.419, (259.452, 192.682, 261.067)), (' C 986  PRO  HA ', ' C 989  ALA  HB3', -0.417, (211.181, 208.23, 241.894)), (' C 659  SER  HB3', ' C 698  SER  HB3', -0.416, (171.209, 217.258, 188.885)), (' B 977  LEU HD22', ' B 993  ILE HG12', -0.415, (203.841, 185.796, 234.685)), (' A 393  THR  HA ', ' A 522  ALA  HA ', -0.414, (223.86, 184.193, 253.921)), (' A 357  ARG  NH1', ' B 166  CYS  O  ', -0.414, (234.865, 185.125, 262.119)), (' B 327  VAL  HA ', ' B 542  ASN  HB3', -0.412, (218.119, 227.542, 240.797)), (' A 117  LEU HD22', ' A 231  ILE HD13', -0.412, (171.519, 168.962, 248.598)), (' A 326  ILE HG21', ' A 533  LEU HD12', -0.412, (217.63, 165.359, 234.035)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.411, (199.303, 214.629, 143.491)), (' C1139  ASP  HB3', ' C1142  GLN  HB2', -0.411, (191.471, 201.791, 135.441)), (' B 885  GLY  HA2', ' B 901  GLN  NE2', -0.411, (207.269, 184.001, 170.583)), (' C  31  SER  HB3', ' C  60  SER  H  ', -0.411, (175.625, 237.355, 226.728)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.409, (197.154, 213.087, 174.871)), (' B1139  ASP  HB3', ' B1142  GLN  HB2', -0.408, (206.448, 206.52, 135.586)), (' A 618  THR  OG1', ' A 619  GLU  OE1', -0.407, (208.577, 160.639, 215.747)), (' B1086  LYS  HB2', ' B1086  LYS  HE2', -0.406, (202.282, 215.503, 142.27)), (' C  83  VAL HG12', ' C 237  ARG  HG2', -0.405, (171.662, 237.563, 248.652)), (' C 724  THR HG23', ' C 934  ILE HD12', -0.404, (197.029, 222.889, 182.995)), (' A 278  LYS  HB2', ' A 278  LYS  HE3', -0.404, (173.097, 176.183, 216.438)), (' B 724  THR HG23', ' B 934  ILE HD12', -0.403, (221.207, 190.929, 183.229)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.403, (225.829, 170.258, 278.172)), (' A 381  GLY  HA3', ' A 430  THR  HA ', -0.403, (213.154, 183.51, 265.106)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.402, (186.096, 170.637, 201.325)), (' A1029  MET  HB2', ' A1029  MET  HE2', -0.4, (185.907, 200.796, 185.588)), (' C  16  VAL  HB ', ' C 140  PHE  HZ ', -0.4, (169.843, 254.249, 255.826))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
