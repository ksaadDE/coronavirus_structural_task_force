# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (181.554, 153.811, 157.20399999999998))]
data['rota'] = [('A', ' 141 ', 'CYS', 0.028778172032460674, (187.40999999999988, 144.799, 156.525)), ('A', ' 228 ', 'HIS', 0.03350610491392331, (183.046, 180.622, 130.038))]
data['cbeta'] = []
data['probe'] = [(' E 431  GLY  HA3', ' E 513  LEU  O  ', -1.091, (121.757, 181.151, 150.708)), (' A 119  ILE HD11', ' A 179  LEU  HB3', -0.879, (178.574, 146.915, 133.782)), (' E 379  CYS  HB3', ' E 432  CYS  HA ', -0.822, (125.797, 183.452, 152.953)), (' E 391  CYS  HA ', ' E 525  CYS  HB3', -0.785, (110.927, 184.666, 159.018)), (' A 169  ARG  NH1', ' A 270  MET  SD ', -0.74, (189.851, 156.954, 146.062)), (' A 476  LYS  O  ', ' A 479  GLU  HB2', -0.739, (192.835, 162.965, 130.228)), (' A 221  GLN  NE2', ' A 225  ASP  OD1', -0.729, (176.423, 180.939, 126.845)), (' A 511  SER  OG ', ' A 514  ARG  NH2', -0.724, (170.597, 164.959, 137.752)), (' A  20  THR  O  ', ' A  24  GLN  NE2', -0.704, (140.941, 168.322, 119.002)), (' A  55  THR  OG1', ' A  58  ASN  ND2', -0.683, (158.442, 148.315, 157.739)), (' A 177  ARG  NH1', ' A 495  GLU  O  ', -0.671, (189.686, 151.142, 130.818)), (' A 457  GLU  HG2', ' A 512  PHE  HB3', -0.67, (178.575, 165.812, 136.33)), (' A  47  SER  O  ', ' A  51  ASN  ND2', -0.668, (160.887, 156.406, 152.099)), (' A 539  LEU HD23', ' A 587  TYR  HB2', -0.668, (179.078, 187.838, 147.112)), (' A  30  ASP  OD2', ' E 417  LYS  NZ ', -0.663, (139.563, 170.717, 134.269)), (' E 393  THR HG21', ' E 518  LEU  H  ', -0.658, (107.252, 184.388, 148.945)), (' A 394  ASN  OD1', ' A 395  GLY  N  ', -0.65, (161.782, 171.393, 139.945)), (' A 229  THR HG21', ' A 579  MET  HG2', -0.644, (177.738, 180.539, 134.537)), (' A 208  GLU  OE1', ' A 219  ARG  NH1', -0.624, (167.172, 169.954, 123.105)), (' E 438  SER  OG ', ' E 442  ASP  OD2', -0.622, (134.541, 165.561, 156.811)), (' A 279  TYR  OH ', ' A 290  ASN  ND2', -0.618, (186.985, 178.106, 161.71)), (' A 346  PRO  HB3', ' A 360  MET  HG3', -0.618, (168.773, 165.834, 158.197)), (' A 529  LEU HD11', ' A 554  LEU HD22', -0.616, (166.586, 185.246, 147.747)), (' E 367  VAL  O  ', ' E 371  SER  OG ', -0.616, (126.642, 178.408, 166.144)), (' A 172  VAL HG13', ' A 176  LEU HD13', -0.608, (182.794, 149.758, 140.838)), (' A 312  GLU  O  ', ' A 316  VAL HG23', -0.607, (159.712, 181.854, 160.036)), (' A 460  ARG HH21', ' A 506  VAL HG22', -0.598, (180.198, 160.378, 136.745)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.597, (134.239, 177.413, 155.22)), (' A 468  ILE HD12', ' A 469  PRO  HD2', -0.595, (190.264, 158.787, 122.632)), (' A 144  LEU  HA ', ' A 148  LEU  HB2', -0.593, (185.757, 153.309, 152.207)), (' A 118  THR  O  ', ' A 122  THR HG23', -0.586, (173.408, 144.399, 136.769)), (' E 442  ASP  O  ', ' E 448  ASN  ND2', -0.586, (136.714, 160.14, 153.735)), (' A 472  GLN  HG3', ' A 475  LYS  HD3', -0.579, (194.745, 157.126, 125.372)), (' A  53  ASN  O  ', ' A  58  ASN  ND2', -0.578, (159.197, 150.093, 157.847)), (' A 540  HIS  CD2', ' A 541  LYS  HG3', -0.57, (181.723, 189.397, 156.006)), (' E 335  LEU HD13', ' E 362  VAL HG13', -0.566, (111.953, 177.341, 166.271)), (' E 349  SER  OG ', ' E 452  LEU  O  ', -0.563, (131.494, 163.706, 145.361)), (' A 591  LEU  O  ', ' A 595  LEU  HG ', -0.562, (192.712, 185.083, 149.168)), (' A 111  ASP  OD1', ' A 112  LYS  N  ', -0.562, (166.751, 144.215, 124.627)), (' E 416  GLY  O  ', ' E 420  ASP  N  ', -0.562, (133.377, 175.682, 138.043)), (' A 245  ARG  NH2', ' A 603  PHE  O  ', -0.559, (202.512, 177.161, 142.726)), (' E 417  LYS  O  ', ' E 422  ASN  ND2', -0.554, (133.414, 171.087, 139.312)), (' E 379  CYS  CB ', ' E 432  CYS  HA ', -0.554, (125.65, 184.181, 153.246)), (' A 182  GLU  O  ', ' A 186  LEU  HG ', -0.544, (175.264, 149.208, 126.748)), (' A 529  LEU HD22', ' A 550  ALA  HB1', -0.544, (166.437, 188.902, 149.072)), (' E 440  ASN  HB2', ' E 441  LEU HD12', -0.541, (135.08, 164.212, 161.896)), (' A 134  ASN  ND2', ' A 136  ASP  HB2', -0.535, (196.855, 143.49, 157.63)), (' A  34  HIS  CE1', ' E 455  LEU HD11', -0.529, (140.197, 167.342, 137.066)), (' A 181  GLU  O  ', ' A 185  VAL HG23', -0.526, (179.412, 150.857, 125.862)), (' A 307  ILE HG23', ' A 369  PHE  HD1', -0.523, (169.051, 175.134, 164.566)), (' E 398  ASP  OD2', ' E 423  TYR  OH ', -0.523, (123.248, 175.188, 146.984)), (' A 174  LYS  HA ', ' A 496  THR  O  ', -0.521, (188.686, 148.211, 135.372)), (' A 177  ARG  NH2', ' A 470  LYS  O  ', -0.518, (188.676, 152.513, 127.919)), (' A  38  ASP  O  ', ' A  42  GLN  HG2', -0.517, (148.212, 158.018, 145.337)), (' E 502  GLY  O  ', ' E 506  GLN  HG3', -0.513, (144.505, 169.455, 154.685)), (' A 543  ASP  OD1', ' A 544  ILE  N  ', -0.51, (170.041, 187.844, 156.753)), (' A 131  LYS  HB3', ' A 143  LEU HD23', -0.51, (181.879, 146.626, 152.103)), (' A 524  GLN  HG2', ' A 583  PRO  HG2', -0.509, (175.718, 186.748, 140.063)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.509, (131.651, 167.331, 154.255)), (' A 199  TYR  HB3', ' A 464  PHE  CD2', -0.507, (175.448, 160.255, 127.785)), (' E 403  ARG  HG2', ' E 505  TYR  HA ', -0.505, (142.111, 169.531, 149.993)), (' A 492  PRO  HD3', ' A 613  TYR  CG ', -0.499, (202.633, 156.063, 139.054)), (' A  92  THR  O  ', ' A  96  GLN  HG3', -0.499, (152.433, 172.189, 130.375)), (' A 477  TRP  HD1', ' A 478  TRP  CD1', -0.499, (191.727, 159.497, 135.747)), (' A 125  THR  O  ', ' A 129  THR HG22', -0.498, (177.622, 145.948, 146.297)), (' A 192  ARG  NH1', ' A 197  GLU  O  ', -0.498, (174.075, 160.623, 119.296)), (' A 169  ARG  NH2', ' A 270  MET  O  ', -0.493, (190.245, 159.419, 145.338)), (' A 264  ALA  HA ', ' A 267  LEU HD23', -0.49, (194.432, 164.953, 145.857)), (' A 165  TRP  CH2', ' A 490  PRO  HD2', -0.486, (196.344, 158.473, 142.493)), (' E 394  ASN  OD1', ' E 516  GLU  HB3', -0.482, (111.453, 180.694, 148.734)), (' A 503  LEU  O  ', ' A 507  SER  OG ', -0.481, (179.07, 155.538, 141.876)), (' A 480  MET  O  ', ' A 484  ILE  N  ', -0.481, (192.681, 170.07, 134.439)), (' E 387  LEU  HA ', ' E 390  LEU HD12', -0.48, (117.063, 188.69, 157.994)), (' A 199  TYR  HD2', ' A 464  PHE  CE2', -0.479, (175.027, 159.4, 129.519)), (' A 343  VAL  O  ', ' A 343  VAL HG13', -0.478, (167.319, 157.245, 155.588)), (' A 288  LYS  HD2', ' A 289  PRO  HD2', -0.477, (191.15, 184.179, 167.979)), (' A 520  LEU  HA ', ' A 520  LEU HD23', -0.475, (177.954, 180.869, 141.569)), (' A 114  LYS  O  ', ' A 118  THR  OG1', -0.474, (168.86, 143.454, 133.194)), (' A 431  ASP  H  ', ' A 434  THR HG22', -0.471, (187.008, 189.423, 162.764)), (' E 358  ILE  HB ', ' E 395  VAL  HB ', -0.47, (114.316, 176.992, 154.996)), (' A 144  LEU HD12', ' A 168  TRP  CZ2', -0.469, (184.027, 153.456, 147.69)), (' A 470  LYS  HA ', ' A 470  LYS  HD3', -0.466, (185.747, 154.66, 125.222)), (' A 285  PHE  CE2', ' A 433  GLU  HA ', -0.466, (192.462, 186.475, 160.079)), (' A 446  ILE  O  ', ' A 449  THR HG22', -0.464, (182.541, 174.226, 145.251)), (' A  57  GLU  CD ', ' A  57  GLU  H  ', -0.464, (157.295, 143.679, 157.027)), (' A 568  LEU  O  ', ' A 571  GLU  HG3', -0.464, (163.492, 186.244, 134.447)), (' E 516  GLU  HG3', ' E 518  LEU HD13', -0.463, (110.052, 182.604, 146.261)), (' A 176  LEU  HA ', ' A 179  LEU HD12', -0.463, (180.982, 147.03, 136.417)), (' A 199  TYR  CE1', ' A 202  TYR  HD2', -0.463, (169.344, 160.101, 128.566)), (' A 493  HIS  ND1', ' A 499  ASP  OD2', -0.462, (192.804, 154.84, 139.206)), (' A  19  SER  N  ', ' A  23  GLU  OE2', -0.461, (137.786, 171.526, 120.228)), (' A 252  TYR  HB3', ' A 255  TYR  HD2', -0.46, (203.254, 164.469, 152.921)), (' E 362  VAL HG23', ' E 526  GLY  HA3', -0.459, (111.208, 181.766, 164.974)), (' E 424  LYS  HB3', ' E 463  PRO  HA ', -0.458, (123.799, 177.613, 139.47)), (' E 351  TYR  HE2', ' E 452  LEU  HB2', -0.457, (130.938, 161.676, 143.345)), (' A 333  LEU  O  ', ' A 362  THR HG22', -0.456, (166.103, 166.123, 165.144)), (' A 134  ASN HD22', ' A 136  ASP  HB2', -0.455, (196.714, 143.892, 157.443)), (' A 553  LYS  HE3', ' A 573  VAL HG13', -0.452, (166.676, 188.656, 143.314)), (' A 396  ALA  HB3', ' A 400  PHE  CD2', -0.45, (164.315, 177.788, 138.22)), (' A 207  TYR  HD2', ' A 222  LEU HD22', -0.449, (172.475, 172.592, 130.66)), (' A 171  GLU  CD ', ' A 172  VAL HG23', -0.449, (184.94, 148.415, 144.978)), (' A 144  LEU HD12', ' A 168  TRP  CE2', -0.448, (184.542, 153.51, 147.692)), (' A 245  ARG  O  ', ' A 249  MET  HG3', -0.448, (202.721, 172.686, 149.373)), (' A 557  MET  HG2', ' A 569  ALA  HB1', -0.446, (162.462, 182.496, 138.786)), (' A 485  VAL  O  ', ' A 485  VAL HG12', -0.446, (192.15, 169.772, 141.579)), (' A 183  TYR  OH ', ' A 187  LYS  HE3', -0.444, (171.543, 154.577, 132.407)), (' E 411  ALA  O  ', ' E 414  GLN  HG2', -0.444, (132.139, 183.02, 143.769)), (' A 148  LEU HD23', ' A 151  ILE HD12', -0.444, (189.711, 152.84, 155.014)), (' A 594  TRP  O  ', ' A 598  GLN  HG2', -0.444, (196.963, 186.403, 151.578)), (' A 381  TYR  CD1', ' A 558  LEU HD22', -0.444, (161.656, 178.731, 145.38)), (' A 524  GLN  OE1', ' A 580  ASN  N  ', -0.443, (175.611, 184.171, 136.488)), (' A 450  LEU HD11', ' A 519  THR HG21', -0.442, (180.861, 177.504, 142.385)), (' E 424  LYS  HA ', ' E 424  LYS  HD2', -0.441, (128.283, 177.928, 139.776)), (' A 481  LYS  HB3', ' A 487  VAL  HB ', -0.44, (193.237, 166.272, 139.285)), (' E 355  ARG  NH1', ' E 398  ASP  OD1', -0.438, (120.002, 173.729, 147.184)), (' A 323  MET  HE3', ' A 376  MET  HG3', -0.437, (160.856, 175.408, 156.87)), (' E 426  PRO  HB2', ' E 428  ASP  OD1', -0.437, (121.591, 184.302, 141.199)), (' A 108  LEU HD11', ' A 190  MET  HA ', -0.436, (167.411, 153.91, 124.195)), (' A 455  MET  HB3', ' A 455  MET  HE3', -0.436, (186.708, 167.841, 137.695)), (' A 209  VAL HG11', ' A 565  PRO  HB3', -0.433, (162.986, 179.635, 128.577)), (' A 521  TYR  HE1', ' A 579  MET  HB2', -0.43, (173.676, 180.156, 135.889)), (' A 145  GLU  HA ', ' A 146  PRO  HA ', -0.429, (182.084, 155.94, 155.933)), (' E 359  SER  HA ', ' E 524  VAL HG22', -0.429, (109.678, 177.726, 156.406)), (' A 459  TRP  CG ', ' A 477  TRP  HE3', -0.428, (186.954, 161.729, 133.239)), (' E 425  LEU  HA ', ' E 425  LEU HD23', -0.428, (124.859, 179.356, 143.823)), (' A  25  ALA  HB1', ' A  97  LEU HD11', -0.425, (148.48, 168.337, 124.841)), (' A 267  LEU HD12', ' A 275  TRP  NE1', -0.424, (190.707, 168.912, 147.108)), (' A 271  TRP  HE1', ' A 502  SER  HG ', -0.422, (186.28, 156.544, 143.625)), (' A 181  GLU  OE1', ' A 470  LYS  HB3', -0.421, (185.1, 151.522, 126.296)), (' A 444  LEU  HA ', ' A 444  LEU HD23', -0.421, (188.563, 175.319, 149.71)), (' E 334  ASN  O  ', ' E 362  VAL HG12', -0.421, (109.763, 176.571, 165.336)), (' A 262  LEU HD12', ' A 263  PRO  HD2', -0.42, (199.434, 167.066, 146.618)), (' E 454  ARG  NH2', ' E 469  SER  O  ', -0.42, (127.559, 163.043, 136.096)), (' A 116  LEU HD21', ' A 186  LEU  HB3', -0.42, (170.755, 150.042, 127.157)), (' E 347  PHE  CD2', ' E 509  ARG  HD3', -0.417, (129.547, 167.105, 156.707)), (' A 269  ASP  OD1', ' A 270  MET  N  ', -0.417, (186.819, 161.382, 149.581)), (' A 144  LEU HD11', ' A 271  TRP  HH2', -0.417, (184.424, 156.119, 148.268)), (' A  86  GLN  NE2', ' A  87  GLU  HG2', -0.416, (150.966, 169.51, 114.641)), (' E 431  GLY  HA2', ' E 515  PHE  CE1', -0.416, (120.07, 183.347, 153.227)), (' A 198  ASP  N  ', ' A 198  ASP  OD1', -0.415, (174.168, 163.117, 122.545)), (' A 456  LEU HD22', ' A 512  PHE  CD2', -0.415, (180.515, 164.681, 138.326)), (' A 225  ASP  OD2', ' A 578  ASN  ND2', -0.414, (174.371, 181.506, 129.45)), (' A 316  VAL HG22', ' A 322  ASN  HB3', -0.414, (156.316, 181.571, 159.459)), (' A 403  ALA  O  ', ' A 407  ILE HG23', -0.414, (170.833, 179.769, 147.682)), (' E 351  TYR  CE2', ' E 452  LEU  HB2', -0.413, (130.592, 161.758, 143.095)), (' A 578  ASN  OD1', ' A 579  MET  N  ', -0.413, (173.973, 182.138, 132.699)), (' A 284  PRO  HD2', ' A 437  ASN  OD1', -0.413, (192.091, 181.076, 159.405)), (' E 403  ARG  HG2', ' E 404  GLY  H  ', -0.412, (140.801, 170.851, 150.257)), (' A 557  MET  HB3', ' A 557  MET  HE3', -0.411, (163.077, 183.271, 143.207)), (' A 199  TYR  HD2', ' A 464  PHE  HE2', -0.409, (174.99, 159.625, 130.029)), (' A 171  GLU  OE1', ' A 172  VAL HG23', -0.408, (185.064, 147.991, 145.192)), (' A 318  VAL  O  ', ' A 551  GLY  HA3', -0.408, (160.723, 187.972, 152.716)), (' A 302  TRP  CH2', ' A 423  LEU HD13', -0.407, (170.628, 179.305, 169.805)), (' A 477  TRP  CE2', ' A 500  PRO  HG3', -0.406, (187.262, 159.906, 136.476)), (' A 475  LYS  O  ', ' A 479  GLU  HG3', -0.405, (195.138, 161.465, 130.165)), (' A 237  TYR  CE1', ' A 451  PRO  HG2', -0.405, (189.306, 174.278, 141.891)), (' A 383  MET  HB3', ' A 383  MET  HE2', -0.404, (154.176, 176.586, 151.599)), (' A 594  TRP  CH2', ' A 598  GLN  HG3', -0.404, (197.356, 184.377, 153.867)), (' A 327  PHE  O  ', ' A 331  SER  OG ', -0.402, (157.272, 167.798, 161.462)), (' E 438  SER  O  ', ' E 438  SER  OG ', -0.401, (135.641, 165.897, 157.797)), (' A 538  PRO  HG2', ' A 541  LYS  HD3', -0.401, (182.449, 192.67, 155.644)), (' E 353  TRP  CZ2', ' E 466  ARG  HB3', -0.401, (122.114, 170.089, 142.271)), (' A 116  LEU HD22', ' A 186  LEU HD13', -0.401, (171.468, 148.216, 128.236)), (' A 169  ARG  HD3', ' A 493  HIS  HE1', -0.4, (192.819, 155.877, 141.608))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
