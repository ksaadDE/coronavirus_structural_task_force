# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('D', ' 151 ', 'PRO', None, (206.007, 188.30700000000007, 277.345)), ('D', ' 153 ', 'PRO', None, (212.009, 186.46200000000005, 277.3110000000001)), ('E', '   8 ', 'PRO', None, (221.259, 157.40700000000007, 270.8820000000001)), ('E', ' 141 ', 'PRO', None, (220.131, 161.66400000000004, 291.72000000000014)), ('F', ' 151 ', 'PRO', None, (207.133, 211.01000000000005, 277.289)), ('F', ' 153 ', 'PRO', None, (205.73, 217.13100000000006, 277.266)), ('G', '   8 ', 'PRO', None, (226.2800000000001, 239.68200000000004, 270.8920000000001)), ('G', ' 141 ', 'PRO', None, (223.16600000000005, 236.51900000000012, 291.72500000000014)), ('H', ' 151 ', 'PRO', None, (187.143, 200.23200000000008, 277.868)), ('H', ' 153 ', 'PRO', None, (182.536, 195.97700000000006, 277.7570000000001)), ('I', '   8 ', 'PRO', None, (152.86199999999997, 202.63600000000008, 270.89600000000013)), ('I', ' 141 ', 'PRO', None, (156.797, 201.50200000000012, 291.773))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 105  ILE  HB ', ' B 239  GLN  HB2', -0.607, (249.657, 194.17, 205.141)), (' F  17  SER  HA ', ' F  82  MET  O  ', -0.603, (205.102, 210.374, 259.456)), (' B 357  ARG  NH1', ' C 167  THR  O  ', -0.602, (197.417, 240.932, 213.898)), (' C 105  ILE  HB ', ' C 239  GLN  HB2', -0.602, (179.769, 246.077, 205.035)), (' E   6  GLN  NE2', ' E  88  CYS  SG ', -0.599, (221.63, 163.708, 264.431)), (' D  17  SER  HA ', ' D  82  MET  O  ', -0.598, (207.059, 190.595, 259.222)), (' G   6  GLN  NE2', ' G  88  CYS  SG ', -0.598, (220.249, 236.701, 263.906)), (' H 146  VAL HG11', ' H 154  VAL HG11', -0.597, (183.938, 195.837, 285.976)), (' H  90  THR  HA ', ' H 113  VAL  O  ', -0.596, (181.251, 200.729, 268.06)), (' D 146  VAL HG11', ' D 154  VAL HG11', -0.594, (211.392, 187.529, 285.516)), (' A 167  THR  O  ', ' C 357  ARG  NH1', -0.594, (165.785, 177.244, 213.903)), (' I   6  GLN  NE2', ' I  88  CYS  SG ', -0.593, (158.714, 198.908, 264.405)), (' A 105  ILE  HB ', ' A 239  GLN  HB2', -0.592, (169.929, 159.886, 205.206)), (' A 357  ARG  NH1', ' B 167  THR  O  ', -0.592, (236.755, 181.87, 213.97)), (' F  90  THR  HA ', ' F 113  VAL  O  ', -0.58, (210.242, 215.493, 268.007)), (' F 146  VAL HG11', ' F 154  VAL HG11', -0.576, (205.385, 215.768, 285.766)), (' D  90  THR  HA ', ' D 113  VAL  O  ', -0.573, (208.486, 183.302, 268.105)), (' H  17  SER  HA ', ' H  82  MET  O  ', -0.569, (188.845, 198.395, 259.584)), (' F  29  VAL HG13', ' F  34  MET  HG3', -0.568, (197.161, 228.7, 256.597)), (' D  29  VAL HG13', ' D  34  MET  HG3', -0.567, (226.161, 188.599, 256.725)), (' H  29  VAL HG13', ' H  34  MET  HG3', -0.561, (177.434, 182.806, 257.092)), (' G 120  PRO  HD3', ' G 132  VAL HG22', -0.56, (215.772, 213.3, 300.861)), (' E 120  PRO  HD3', ' E 132  VAL HG22', -0.559, (203.538, 179.704, 300.838)), (' A 127  VAL HG21', ' A1302  NAG  H62', -0.557, (156.567, 166.173, 208.945)), (' I 120  PRO  HD3', ' I 132  VAL HG22', -0.553, (180.99, 206.473, 301.278)), (' E  83  VAL HG23', ' E 105  GLU  HA ', -0.549, (224.529, 165.501, 280.319)), (' C 127  VAL HG21', ' C1302  NAG  H62', -0.548, (192.402, 254.558, 208.981)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.545, (251.104, 179.03, 209.451)), (' A  94  SER  HB2', ' A 190  ARG  HB2', -0.534, (163.052, 160.206, 190.878)), (' I  83  VAL HG23', ' I 105  GLU  HA ', -0.532, (158.721, 196.057, 280.475)), (' G  83  VAL HG23', ' G 105  GLU  HA ', -0.531, (217.492, 237.78, 280.367)), (' B 821  LEU HD11', ' B 939  SER  HB3', -0.529, (227.745, 184.105, 144.571)), (' C 821  LEU HD11', ' C 939  SER  HB3', -0.529, (200.408, 232.143, 144.817)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.527, (172.114, 184.311, 144.624)), (' G  15  PRO  HB3', ' G 106  ILE HD11', -0.523, (216.42, 246.029, 283.739)), (' B 442  ASP  O  ', ' B 448  ASN  ND2', -0.523, (214.05, 251.121, 238.725)), (' E  15  PRO  HB3', ' E 106  ILE HD11', -0.521, (231.662, 162.719, 283.765)), (' H  28  THR  O  ', ' H  32  ASN  ND2', -0.521, (174.097, 177.803, 256.018)), (' B1048  HIS  HA ', ' B1066  THR HG22', -0.519, (213.344, 195.894, 132.174)), (' B  94  SER  HB2', ' B 190  ARG  HB2', -0.517, (253.036, 187.806, 191.062)), (' I  15  PRO  HB3', ' I 106  ILE HD11', -0.514, (151.644, 190.672, 283.84)), (' C 442  ASP  O  ', ' C 448  ASN  ND2', -0.513, (148.545, 186.577, 238.911)), (' F  28  THR  O  ', ' F  32  ASN  ND2', -0.511, (194.075, 233.69, 255.872)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.51, (196.735, 213.45, 132.212)), (' A 393  THR  HA ', ' A 522  ALA  HA ', -0.509, (227.902, 182.218, 210.403)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.507, (181.159, 169.983, 174.142)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.507, (183.449, 231.25, 174.115)), (' B 139  PRO  HB3', ' B 159  VAL  HA ', -0.505, (255.268, 191.915, 209.663)), (' C  94  SER  HB2', ' C 190  ARG  HB2', -0.504, (183.656, 251.54, 191.187)), (' C 358  ILE  HB ', ' C 395  VAL  HB ', -0.503, (163.755, 185.999, 217.205)), (' C 393  THR  HA ', ' C 522  ALA  HA ', -0.502, (170.569, 184.792, 210.405)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.502, (177.972, 230.303, 174.355)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.499, (201.423, 232.747, 210.892)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.497, (235.447, 199.183, 174.192)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.497, (230.704, 175.643, 217.176)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.496, (171.628, 142.468, 197.865)), (' A 139  PRO  HB3', ' A 159  VAL  HA ', -0.494, (165.048, 156.212, 209.982)), (' C  27  ALA  HB3', ' C  64  TRP  HB3', -0.494, (169.372, 247.996, 189.087)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.494, (189.923, 190.88, 131.906)), (' D  28  THR  O  ', ' D  32  ASN  ND2', -0.493, (231.973, 188.225, 255.775)), (' C 474  GLN  NE2', ' C 478  THR  O  ', -0.493, (172.433, 167.246, 254.749)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.493, (237.388, 203.872, 174.459)), (' B 358  ILE  HB ', ' B 395  VAL  HB ', -0.492, (205.846, 238.837, 217.232)), (' C 128  ILE HD13', ' C 170  TYR  HD2', -0.492, (195.325, 247.242, 203.368)), (' D  51  ILE HD13', ' D  71  ARG  HG3', -0.491, (222.535, 189.823, 252.357)), (' B  27  ALA  HB3', ' B  64  TRP  HB3', -0.491, (256.739, 202.008, 188.939)), (' C 139  PRO  HB3', ' C 159  VAL  HA ', -0.491, (179.505, 252.15, 210.052)), (' F  51  ILE HD13', ' F  71  ARG  HG3', -0.489, (197.915, 224.804, 252.06)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.489, (187.987, 192.034, 101.159)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.488, (199.021, 214.384, 101.142)), (' A 675  GLN  O  ', ' A 691  SER  N  ', -0.486, (187.127, 158.741, 155.621)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.486, (184.801, 165.762, 174.332)), (' I 147  GLN  HB2', ' I 195  GLU  HB2', -0.485, (167.137, 212.438, 300.564)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.484, (263.99, 204.288, 197.832)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.484, (161.149, 172.714, 203.393)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.484, (200.582, 165.79, 146.301)), (' A 474  GLN  NE2', ' A 478  THR  O  ', -0.482, (241.628, 192.694, 255.213)), (' B 474  GLN  NE2', ' B 478  THR  O  ', -0.482, (185.683, 240.012, 254.717)), (' E 147  GLN  HB2', ' E 195  GLU  HB2', -0.482, (205.592, 165.077, 300.227)), (' C 675  GLN  O  ', ' C 691  SER  N  ', -0.481, (170.571, 231.622, 156.087)), (' I  35  TRP  HB2', ' I  48  ILE HG12', -0.479, (155.789, 189.542, 264.618)), (' B 675  GLN  O  ', ' B 691  SER  N  ', -0.478, (241.97, 209.766, 156.098)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.478, (173.19, 149.809, 189.006)), (' G 147  GLN  HB2', ' G 195  GLU  HB2', -0.478, (227.507, 222.224, 300.219)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.477, (164.248, 253.256, 197.831)), (' E  35  TRP  HB2', ' E  48  ILE HG12', -0.477, (230.675, 166.576, 264.751)), (' B 189  LEU  HB3', ' B 208  THR  HB ', -0.477, (252.519, 186.112, 184.279)), (' A 156  GLU  OE2', ' A 158  ARG  NH1', -0.476, (158.525, 148.762, 211.275)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.476, (237.21, 162.308, 238.733)), (' C 189  LEU  HB3', ' C 208  THR  HB ', -0.476, (185.781, 252.482, 184.277)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.474, (213.037, 193.646, 101.191)), (' A 189  LEU  HB3', ' A 208  THR  HB ', -0.473, (161.732, 161.84, 184.046)), (' B 128  ILE HD13', ' B 170  TYR  HD2', -0.47, (243.251, 180.454, 203.378)), (' C 156  GLU  OE2', ' C 158  ARG  NH1', -0.47, (176.809, 261.485, 211.761)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.469, (229.323, 217.115, 146.051)), (' G  35  TRP  HB2', ' G  48  ILE HG12', -0.467, (213.396, 243.671, 264.645)), (' C1029  MET  HB2', ' C1029  MET  HE2', -0.466, (207.572, 211.649, 142.561)), (' B 156  GLU  OE2', ' B 158  ARG  NH1', -0.464, (265.065, 189.531, 211.328)), (' A 412  PRO  HG3', ' A 429  PHE  HB3', -0.464, (219.346, 180.145, 228.429)), (' B  14  GLN  HB3', ' B 158  ARG  HE ', -0.464, (262.298, 190.386, 216.036)), (' A  14  GLN  HB3', ' A 158  ARG  HE ', -0.462, (160.628, 150.725, 216.027)), (' B 412  PRO  HG3', ' B 429  PHE  HB3', -0.462, (207.152, 226.542, 228.15)), (' C 192  PHE  HA ', ' C 204  TYR  O  ', -0.46, (188.994, 244.653, 192.053)), (' B 164  ASN  OD1', ' B 165  ASN  N  ', -0.459, (243.104, 188.747, 220.051)), (' B 192  PHE  HA ', ' B 204  TYR  O  ', -0.458, (244.291, 187.075, 192.036)), (' A 192  PHE  HA ', ' A 204  TYR  O  ', -0.458, (166.919, 167.675, 191.975)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.458, (173.713, 252.35, 189.179)), (' C 659  SER  HB3', ' C 698  SER  HB3', -0.457, (170.509, 216.805, 146.075)), (' C 164  ASN  OD1', ' C 165  ASN  N  ', -0.457, (188.138, 243.118, 220.143)), (' C  14  GLN  HB3', ' C 158  ARG  HE ', -0.456, (177.211, 258.756, 216.036)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.455, (258.481, 196.14, 189.244)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.453, (167.764, 251.434, 196.712)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.452, (167.794, 151.012, 189.143)), (' A 566  GLY  N  ', ' A 575  ALA  O  ', -0.451, (225.008, 176.051, 183.684)), (' A1074  ASN  OD1', ' B 895  GLN  NE2', -0.451, (201.846, 173.33, 120.337)), (' B1074  ASN  OD1', ' C 895  GLN  NE2', -0.449, (222.168, 214.95, 120.322)), (' A 756  TYR  OH ', ' A 994  ASP  OD1', -0.447, (195.622, 205.362, 189.389)), (' B 756  TYR  OH ', ' B 994  ASP  OD1', -0.447, (197.72, 193.396, 189.269)), (' F 125  VAL HG12', ' F 213  LYS  HD2', -0.447, (201.989, 213.537, 294.035)), (' F  72  HIS  HB2', ' F  79  TYR  HE2', -0.446, (192.39, 219.988, 256.609)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.446, (171.798, 146.376, 196.861)), (' A 164  ASN  OD1', ' A 165  ASN  N  ', -0.442, (169.147, 168.146, 220.235)), (' E  48  ILE HG22', ' E  54  ARG  HA ', -0.442, (236.066, 167.643, 264.727)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.441, (197.008, 233.866, 186.463)), (' H  39  GLN  HB2', ' H  45  LEU HD23', -0.441, (170.705, 196.412, 267.342)), (' D  72  HIS  HB2', ' D  79  TYR  HE2', -0.441, (221.448, 196.697, 256.36)), (' C 756  TYR  OH ', ' C 994  ASP  OD1', -0.44, (206.893, 201.411, 189.241)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.44, (260.535, 201.882, 196.977)), (' D 125  VAL HG12', ' D 213  LYS  HD2', -0.439, (211.108, 191.24, 293.737)), (' G  46  LEU HD23', ' G  55  GLU  HG3', -0.439, (205.308, 242.084, 263.167)), (' G  48  ILE HG22', ' G  54  ARG  HA ', -0.438, (209.561, 247.268, 264.555)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.437, (182.242, 189.84, 133.134)), (' B  40  ASP  N  ', ' B  40  ASP  OD1', -0.436, (231.117, 185.693, 186.784)), (' E  46  LEU HD23', ' E  55  GLU  HG3', -0.436, (233.949, 174.657, 263.481)), (' F  40  ALA  HB3', ' F  43  LYS  HB3', -0.435, (217.692, 223.02, 268.23)), (' D 172  ALA  HB2', ' D 182  LEU HD23', -0.435, (210.663, 182.414, 283.843)), (' H  72  HIS  HB2', ' H  79  TYR  HE2', -0.434, (186.747, 182.598, 256.845)), (' C 907  ASN HD21', ' C 913  GLN  HG3', -0.433, (202.754, 210.323, 116.415)), (' C 724  THR HG23', ' C 934  ILE HD12', -0.433, (197.392, 222.659, 140.457)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.432, (181.5, 186.449, 140.524)), (' H 172  ALA  HB2', ' H 182  LEU HD23', -0.432, (179.263, 199.469, 284.045)), (' C 412  PRO  HG3', ' C 429  PHE  HB3', -0.431, (173.269, 192.924, 228.67)), (' H 125  VAL HG12', ' H 213  LYS  HD2', -0.431, (186.791, 194.463, 294.274)), (' B1029  MET  HB2', ' B1029  MET  HE2', -0.43, (206.008, 187.296, 142.883)), (' I  48  ILE HG22', ' I  54  ARG  HA ', -0.43, (154.542, 184.366, 264.539)), (' D  40  ALA  HB3', ' D  43  LYS  HB3', -0.43, (211.033, 173.133, 268.174)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.429, (199.763, 220.711, 133.202)), (' F 172  ALA  HB2', ' F 182  LEU HD23', -0.427, (209.889, 218.039, 283.755)), (' D 130  PRO  HG2', ' D 217  PRO  HB3', -0.427, (216.751, 185.749, 306.052)), (' A1029  MET  HB2', ' A1029  MET  HE2', -0.426, (186.016, 201.03, 142.87)), (' C 566  GLY  N  ', ' C 575  ALA  O  ', -0.426, (166.807, 190.357, 183.577)), (' F  39  GLN  HB2', ' F  45  LEU HD23', -0.425, (212.102, 227.675, 266.888)), (' C 418  ILE  HA ', ' C 422  ASN  HB2', -0.423, (165.974, 186.063, 239.379)), (' H  40  ALA  HB3', ' H  43  LYS  HB3', -0.423, (172.073, 203.419, 268.438)), (' F 130  PRO  HG2', ' F 217  PRO  HB3', -0.422, (203.902, 221.556, 305.959)), (' B 907  ASN HD21', ' B 913  GLN  HG3', -0.422, (207.951, 192.379, 116.148)), (' A 907  ASN HD21', ' A 913  GLN  HG3', -0.421, (189.762, 197.118, 116.243)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.42, (172.007, 180.155, 186.724)), (' A 565  PHE  HD1', ' A 576  VAL HG23', -0.42, (224.109, 174.622, 187.942)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.42, (217.738, 189.623, 133.057)), (' C 722  VAL  HA ', ' C1064  HIS  O  ', -0.42, (197.599, 219.356, 134.827)), (' I 131  SER  HA ', ' I 179  LEU  O  ', -0.418, (180.836, 208.577, 296.593)), (' I  46  LEU HD23', ' I  55  GLU  HG3', -0.417, (161.085, 183.285, 263.371)), (' C 278  LYS  HB2', ' C 278  LYS  HE3', -0.417, (192.428, 235.139, 172.447)), (' H 130  PRO  HG2', ' H 217  PRO  HB3', -0.417, (178.966, 192.353, 306.592)), (' G  30  SER  OG ', ' G  31  SER  N  ', -0.416, (217.137, 244.65, 251.406)), (' G 151  ASP  OD2', ' G 189  HIS  ND1', -0.416, (225.539, 208.515, 306.868)), (' B 566  GLY  N  ', ' B 575  ALA  O  ', -0.415, (208.258, 233.737, 183.644)), (' A 418  ILE  HA ', ' A 422  ASN  HB2', -0.415, (229.49, 177.486, 239.015)), (' A  37  TYR  OH ', ' A  54  LEU  O  ', -0.414, (176.599, 172.44, 189.606)), (' E  30  SER  OG ', ' E  31  SER  N  ', -0.414, (230.144, 162.771, 251.38)), (' B 565  PHE  HD1', ' B 576  VAL HG23', -0.413, (209.938, 233.597, 187.994)), (' B 105  ILE  O  ', ' B 238  PHE  HA ', -0.413, (246.893, 195.401, 204.011)), (' C 276  LEU  HB3', ' C 289  VAL  HB ', -0.412, (187.741, 231.238, 175.428)), (' B 278  LYS  HB2', ' B 278  LYS  HE3', -0.412, (234.446, 189.196, 172.045)), (' A 722  VAL  HA ', ' A1064  HIS  O  ', -0.412, (184.47, 188.259, 134.739)), (' A 105  ILE  O  ', ' A 238  PHE  HA ', -0.412, (172.182, 161.881, 204.063)), (' C  97  LYS  HG2', ' C 186  PHE  HD1', -0.411, (178.839, 260.231, 188.751)), (' D  39  GLN  HB2', ' D  45  LEU HD23', -0.411, (217.694, 175.953, 267.156)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.411, (224.065, 190.444, 139.678)), (' B 724  THR HG23', ' B 934  ILE HD12', -0.41, (220.957, 190.785, 140.488)), (' B 722  VAL  HA ', ' B1064  HIS  O  ', -0.41, (217.952, 192.437, 134.774)), (' C 105  ILE  O  ', ' C 238  PHE  HA ', -0.409, (180.579, 242.821, 204.167)), (' C 599  THR  HB ', ' C 608  VAL HG12', -0.408, (178.306, 227.293, 165.17)), (' C  50  SER  HB2', ' C 304  LYS  HE3', -0.408, (192.087, 226.723, 176.883)), (' B 418  ILE  HA ', ' B 422  ASN  HB2', -0.408, (205.036, 236.575, 239.156)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.407, (234.495, 205.163, 165.152)), (' A 996  LEU  HA ', ' A 996  LEU HD23', -0.405, (189.434, 198.113, 188.208)), (' C 565  PHE  HD1', ' C 576  VAL HG23', -0.405, (165.937, 191.823, 188.018)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.405, (187.212, 167.825, 164.855)), (' F 214  LYS  NZ ', ' I 184  ALA  HB2', -0.404, (192.196, 216.248, 301.752)), (' B  97  LYS  HG2', ' B 186  PHE  HD1', -0.404, (262.755, 188.185, 188.66)), (' A 895  GLN  NE2', ' C1074  ASN  OD1', -0.403, (175.866, 211.667, 120.253)), (' B 903  ALA  HB2', ' B 916  LEU HD12', -0.402, (212.458, 188.321, 118.45)), (' B 900  MET  HB3', ' B 900  MET  HE2', -0.401, (207.72, 184.259, 117.774)), (' A  97  LYS  HG2', ' A 186  PHE  HD1', -0.4, (158.39, 151.402, 188.138)), (' H  51  ILE HD13', ' H  71  ARG  HG3', -0.4, (180.202, 185.136, 252.716)), (' A  50  SER  HB2', ' A 304  LYS  HE3', -0.4, (180.848, 179.755, 176.842)), (' B 276  LEU  HB3', ' B 289  VAL  HB ', -0.4, (233.082, 195.37, 174.871)), (' E 131  SER  HA ', ' E 179  LEU  O  ', -0.4, (201.864, 179.24, 295.533))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
