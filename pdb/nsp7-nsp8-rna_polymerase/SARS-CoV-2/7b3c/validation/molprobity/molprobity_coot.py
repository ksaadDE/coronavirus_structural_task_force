# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (92.81600000000006, 116.51899999999999, 118.49300000000001)), ('B', ' 183 ', 'PRO', None, (115.547, 103.69099999999997, 125.24800000000002))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B  83  VAL HG12', ' B  87  MET  HE2', -0.8, (83.934, 121.697, 120.831)), (' A 682  SER  O  ', ' P  15    G  N2 ', -0.725, (91.867, 101.758, 107.341)), (' A 676  LYS  NZ ', ' A 681  SER  OG ', -0.724, (97.889, 108.318, 105.78)), (' A 631  ARG  NH2', ' A 684  ASP  OD2', -0.713, (92.081, 108.63, 100.398)), (' A 503  GLY  O  ', ' A 507  ASN  N  ', -0.707, (89.814, 112.816, 119.276)), (' A 684  ASP  OD1', ' A 685  ALA  N  ', -0.676, (89.249, 107.602, 102.787)), (' A 368  PHE  O  ', ' A 372  LEU HD12', -0.676, (83.261, 123.677, 115.32)), (' B  77  GLU  N  ', ' B  77  GLU  OE1', -0.675, (71.877, 119.115, 122.727)), (' A 368  PHE  CE2', ' A 372  LEU HD11', -0.667, (81.484, 121.186, 116.067)), (' A 388  LEU HD12', ' A 400  ALA  HB2', -0.639, (108.654, 115.985, 121.205)), (' A 242  MET  SD ', ' A 463  MET  HE2', -0.625, (109.049, 112.919, 83.841)), (' A 452  ASP  OD1', ' A 556  THR HG23', -0.625, (102.557, 99.803, 112.028)), (' A 820  VAL HG22', ' A 829  LEU HD13', -0.622, (81.519, 73.758, 96.812)), (' A 846  ASP  OD1', ' A 847  ILE  N  ', -0.595, (89.318, 89.501, 127.854)), (' A 878  ALA  O  ', ' A 882  HIS  ND1', -0.58, (85.142, 67.011, 110.485)), (' A 876  GLU  O  ', ' A 880  VAL HG23', -0.577, (90.435, 69.291, 110.25)), (' A 431  GLU  OE2', ' A 432  GLY  N  ', -0.576, (104.568, 65.283, 114.779)), (' A 128  VAL HG21', ' A 207  LEU  CD2', -0.573, (116.051, 105.884, 78.591)), (' A 318  SER  OG ', ' A 349  ARG  O  ', -0.573, (107.261, 119.453, 95.281)), (' A 144  GLU  O  ', ' A 148  THR HG23', -0.564, (129.944, 98.449, 83.159)), (' A 483  TYR  HE1', ' A 582  THR HG21', -0.561, (80.522, 98.492, 90.306)), (' A 910  ASP  OD1', ' A 911  ASN  N  ', -0.554, (64.75, 75.303, 120.037)), (' C  38  ASP  OD2', ' C  51  LYS  NZ ', -0.554, (115.072, 81.726, 120.754)), (' A 687  THR  O  ', ' A 691  ASN  ND2', -0.551, (93.641, 101.294, 99.884)), (' A 827  VAL HG13', ' A 829  LEU  CD1', -0.531, (80.57, 74.457, 95.746)), (' A 368  PHE  CD2', ' A 372  LEU HD11', -0.53, (81.494, 121.592, 115.835)), (' A 507  ASN  ND2', ' A 541  GLN  OE1', -0.519, (94.247, 110.561, 119.503)), (' A 531  THR HG21', ' A 567  THR HG21', -0.519, (85.901, 119.435, 104.984)), (' A 845  ASP  OD2', ' A 849  LYS  NZ ', -0.515, (88.347, 89.501, 120.441)), (' A 304  ASP  OD2', ' A 651  ARG  NH2', -0.514, (88.563, 115.892, 87.379)), (' B 159  VAL HG13', ' B 186  VAL HG22', -0.504, (119.666, 112.132, 128.63)), (' A 211  ASP  OD1', ' A 215  ASN  N  ', -0.503, (126.609, 111.316, 74.499)), (' A 564  SER  O  ', ' A 568  ASN  ND2', -0.501, (87.751, 113.295, 104.865)), (' A 487  CYS  SG ', ' A 642  HIS  CE1', -0.493, (80.543, 115.956, 95.089)), (' A 499  ASP  OD1', ' A 513  ARG  NH1', -0.482, (78.629, 104.725, 120.649)), (' A 331  ARG  NH2', ' B 114  CYS  SG ', -0.481, (99.657, 135.284, 104.631)), (' A 267  LYS  HA ', ' A 267  LYS  HE2', -0.479, (121.234, 126.309, 104.372)), (' C   3  MET  O  ', ' C   6  VAL HG12', -0.474, (105.341, 73.609, 122.54)), (' A 665  GLU  N  ', ' A 665  GLU  OE1', -0.466, (99.732, 113.026, 105.864)), (' B 141  THR  OG1', ' B 142  CYS  N  ', -0.465, (123.821, 114.197, 120.823)), (' C  14  LEU HD22', ' C  36  HIS  CG ', -0.461, (105.514, 86.41, 125.029)), (' A 601  MET  HE3', ' A 756  MET  HE3', -0.46, (86.106, 87.802, 93.828)), (' A 401  LEU HD12', ' A 668  MET  HE2', -0.456, (100.293, 115.763, 119.682)), (' A 845  ASP  OD1', ' A 846  ASP  N  ', -0.455, (90.196, 90.107, 123.927)), (' C   3  MET  O  ', ' C   7  LYS  HG3', -0.454, (104.136, 74.628, 121.27)), (' A 820  VAL  CG2', ' A 829  LEU HD13', -0.454, (81.365, 73.116, 97.033)), (' C   5  ASP  OD1', ' C   6  VAL  N  ', -0.454, (103.761, 72.48, 125.296)), (' A 867  TYR  O  ', ' A 870  THR HG22', -0.454, (82.637, 71.352, 104.947)), (' C  36  HIS  O  ', ' C  40  LEU HD13', -0.442, (106.434, 83.649, 122.089)), (' A 695  ASN  ND2', ' A 760  ASP  O  ', -0.435, (95.964, 94.056, 94.261)), (' A  40  ASP  OD1', ' A  41  LYS  N  ', -0.435, (106.021, 100.322, 58.334)), (' A 911  ASN  OD1', ' A 914  ARG  NH2', -0.433, (67.551, 78.664, 115.803)), (' A 514  LEU HD21', ' B  83  VAL  CG2', -0.433, (81.908, 116.8, 123.316)), (' C  20  LEU  HG ', ' C  20  LEU  O  ', -0.432, (104.777, 91.977, 138.449)), (' A 819  LEU HD13', ' A 828  TYR  CE1', -0.432, (85.164, 74.185, 90.417)), (' A 598  TRP  O  ', ' A 602  LEU HD23', -0.43, (83.983, 82.424, 92.997)), (' A 260  ASP  HB3', ' A 263  LYS  HZ2', -0.429, (130.005, 123.626, 93.708)), (' B 132  ILE HG21', ' B 138  TYR  HB2', -0.429, (123.005, 108.803, 123.425)), (' A 796  GLU  N  ', ' A 796  GLU  OE1', -0.429, (109.625, 86.57, 92.744)), (' B  83  VAL HG12', ' B  87  MET  CE ', -0.428, (83.693, 121.808, 120.836)), (' A 440  PHE  CB ', ' C  40  LEU HD23', -0.424, (101.476, 83.112, 119.089)), (' A 367  SER  N  ', ' A 370  GLU  OE2', -0.424, (83.209, 131.014, 116.35)), (' A 504  PHE  CE1', ' A 668  MET  HE1', -0.423, (97.91, 115.717, 120.057)), (' A 368  PHE  HD1', ' B  84  THR HG22', -0.422, (81.132, 124.016, 119.881)), (' A 828  TYR  C  ', ' A 829  LEU HD12', -0.421, (82.216, 76.429, 95.841)), (' A 200  GLY  O  ', ' A 225  THR  N  ', -0.419, (114.961, 122.727, 58.795)), (' B 103  LEU  O  ', ' B 107  ILE HG12', -0.417, (105.844, 135.905, 114.257)), (' B 101  ASP  N  ', ' B 101  ASP  OD1', -0.415, (108.374, 135.679, 122.707)), (' A 605  VAL HG21', ' A 756  MET  SD ', -0.415, (87.391, 86.499, 90.144)), (' A 369  LYS  HZ3', ' A 373  VAL HG21', -0.415, (86.294, 126.093, 109.47)), (' A 480  PHE  CZ ', ' A 693  VAL HG22', -0.413, (89.076, 102.414, 90.852)), (' A 470  LEU  O  ', ' A 473  VAL HG12', -0.412, (95.7, 108.619, 82.413)), (' A 223  ILE  O  ', ' A 223  ILE HG13', -0.411, (113.467, 119.072, 59.091)), (' A 143  LYS  O  ', ' A 147  VAL HG23', -0.408, (128.146, 96.295, 87.251)), (' B 123  THR  O  ', ' B 123  THR HG22', -0.408, (113.493, 131.294, 116.703)), (' A 128  VAL HG21', ' A 207  LEU HD23', -0.406, (116.481, 106.127, 78.707)), (' A 484  ASP  OD2', ' A 485  GLY  N  ', -0.405, (77.132, 108.901, 90.577)), (' A 878  ALA  HB1', ' A 882  HIS  HE1', -0.402, (84.884, 66.417, 108.287)), (' A  38  TYR  OH ', ' A 729  GLU  HG2', -0.401, (101.897, 106.408, 65.517))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
