# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 362 ', 'VAL', None, (179.509, 153.902, 136.576)), ('B', ' 905 ', 'ARG', None, (186.18299999999988, 172.90999999999997, 227.87))]
data['rota'] = [('A', ' 524 ', 'VAL', 0.28125942062752235, (176.50800000000004, 157.263, 140.833))]
data['cbeta'] = []
data['probe'] = [(' C 336  CYS  H  ', ' C 363  ALA  HB2', -0.663, (217.674, 199.732, 132.586)), (' A 403  ARG  HG3', ' A 405  ASP  H  ', -0.633, (175.952, 184.708, 123.435)), (' C 546  LEU HD11', ' C 573  THR HG21', -0.586, (214.884, 197.851, 157.807)), (' A 106  PHE  HB2', ' A 117  LEU  HB3', -0.573, (228.842, 170.31, 140.198)), (' C  65  PHE  O  ', ' C 264  ALA  N  ', -0.568, (185.016, 246.971, 156.677)), (' B 814  LYS  HE3', ' B 872  GLN  HG2', -0.55, (194.493, 155.585, 206.764)), (' A 329  PHE  O  ', ' A 580  GLN  NE2', -0.543, (184.138, 147.437, 146.493)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.541, (209.934, 186.088, 216.87)), (' A 525  CYS  SG ', ' A 526  GLY  N  ', -0.538, (181.907, 156.913, 142.611)), (' B 624  ILE HD11', ' B 637  SER  HB3', -0.534, (148.159, 183.109, 175.218)), (' C 971  GLY  HA3', ' C 995  ARG HH21', -0.529, (184.931, 196.534, 158.055)), (' C 398  ASP  HB2', ' C 512  VAL  HB ', -0.528, (207.777, 185.185, 132.462)), (' A  57  PRO  HG3', ' A 273  ARG  HE ', -0.528, (218.016, 165.353, 161.483)), (' B 319  ARG  HE ', ' C 740  MET  HE2', -0.519, (161.948, 191.948, 169.49)), (' B 971  GLY  O  ', ' B 995  ARG  NH1', -0.516, (181.312, 180.409, 154.563)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.516, (149.943, 159.606, 142.334)), (' A1047  TYR  HB2', ' A1067  TYR  HB3', -0.513, (202.354, 180.383, 222.628)), (' B 707  TYR  HB3', ' C 792  PRO  HG2', -0.51, (160.544, 196.386, 225.542)), (' B  37  TYR  OH ', ' B 195  LYS  NZ ', -0.507, (159.328, 163.54, 157.016)), (' B1017  GLU  OE1', ' C1019  ARG  NH1', -0.499, (181.222, 182.626, 192.959)), (' C1103  PHE  HZ ', ' P   1  NAG  H62', -0.498, (196.831, 207.549, 248.183)), (' C 318  PHE  HZ ', ' C 615  VAL HG21', -0.497, (207.08, 213.293, 176.286)), (' C 577  ARG  HD3', ' C 582  LEU HD22', -0.495, (227.526, 198.303, 153.03)), (' A 193  VAL  HB ', ' A 204  TYR  HB2', -0.494, (227.825, 175.808, 154.408)), (' A 318  PHE  HZ ', ' A 615  VAL HG11', -0.492, (200.404, 156.379, 174.925)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.492, (178.219, 168.031, 217.239)), (' B 106  PHE  HD2', ' B 117  LEU HD23', -0.486, (151.162, 159.189, 144.585)), (' B 717  ASN  HB3', ' B1070  ALA  HB3', -0.485, (166.868, 173.361, 229.099)), (' A 715  PRO  HA ', ' A1072  GLU  HA ', -0.484, (205.564, 169.275, 229.328)), (' B  64  TRP  HD1', ' B 266  TYR  HE1', -0.48, (137.233, 156.033, 162.223)), (' C 976  VAL HG12', ' C 979  ASP  H  ', -0.47, (169.114, 200.291, 156.853)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.462, (182.212, 152.793, 205.319)), (' B 828  LEU  HB2', ' B 949  GLN HE22', -0.46, (176.206, 165.001, 189.464)), (' A 802  PHE  HD1', ' A 805  ILE HD11', -0.46, (212.877, 194.234, 217.478)), (' B  91  TYR  OH ', ' B 191  GLU  OE1', -0.46, (148.963, 155.476, 162.87)), (' C 985  ASP  O  ', ' C 989  ALA  HB2', -0.452, (173.311, 192.296, 149.525)), (' B1030  SER  HA ', ' B1034  LEU HD12', -0.443, (193.92, 174.577, 212.259)), (' B 624  ILE HD12', ' B 633  TRP  HE1', -0.443, (150.185, 181.799, 173.868)), (' C  64  TRP  HE1', ' C  66  HIS  CE1', -0.442, (187.904, 249.697, 158.494)), (' B 666  ILE HD11', ' B 672  ALA  HB2', -0.441, (154.647, 182.341, 191.478)), (' B 540  ASN  ND2', ' B 549  THR  OG1', -0.44, (158.321, 197.461, 161.548)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.438, (177.953, 205.055, 218.445)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.438, (153.95, 185.242, 205.151)), (' A 522  ALA  HB1', ' A 525  CYS  HB2', -0.438, (178.801, 156.069, 145.192)), (' B 385  THR HG23', ' B 386  LYS  HG3', -0.437, (159.892, 198.787, 136.476)), (' B 108  THR HG22', ' B 109  THR HG23', -0.435, (145.541, 169.446, 138.585)), (' C  54  LEU HD12', ' C 195  LYS  HD2', -0.435, (182.78, 222.118, 155.738)), (' C 804  GLN  NE2', ' O   1  NAG  O6 ', -0.433, (166.266, 212.847, 216.679)), (' A 402  ILE HG23', ' A 404  GLY  H  ', -0.432, (174.933, 181.598, 124.514)), (' B 198  ASP  N  ', ' B 198  ASP  OD1', -0.432, (161.741, 167.581, 147.057)), (' C 763  LEU HD22', ' C1008  VAL HG21', -0.431, (177.53, 187.527, 177.455)), (' C  44  ARG  HB2', ' C 279  TYR  CD2', -0.431, (170.626, 218.819, 171.002)), (' C 106  PHE  HB2', ' C 117  LEU  HB3', -0.429, (178.735, 231.605, 143.375)), (' C 353  TRP  H  ', ' C 466  ARG HH12', -0.429, (211.641, 177.65, 128.274)), (' B 763  LEU HD22', ' B1008  VAL HG21', -0.428, (192.549, 178.787, 176.245)), (' C 462  LYS  HB2', ' C 465  GLU  HB2', -0.425, (209.059, 172.029, 138.773)), (' A 743  CYS  HB3', ' A 749  CYS  HB3', -0.424, (197.903, 202.468, 161.934)), (' A 565  PHE  HA ', ' A 576  VAL  HA ', -0.423, (177.877, 153.237, 159.067)), (' A 280  ASN  OD1', ' A 284  THR  N  ', -0.421, (227.854, 186.166, 167.864)), (' A 461  LEU HD23', ' A 465  GLU  HB3', -0.421, (161.856, 178.808, 138.295)), (' B 314  GLN  NE2', ' B 316  SER  O  ', -0.42, (162.164, 183.685, 177.094)), (' A 945  LEU HD23', ' A 948  LEU HD12', -0.419, (210.329, 189.179, 198.564)), (' A 402  ILE HG22', ' A 510  VAL HG21', -0.416, (174.555, 178.059, 125.912)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.415, (180.498, 177.278, 128.618)), (' B 615  VAL HG12', ' B 617  CYS  H  ', -0.415, (150.148, 192.892, 179.637)), (' C 802  PHE  HD1', ' C 805  ILE HD11', -0.415, (169.644, 203.433, 218.396)), (' A 594  GLY  H  ', ' A 613  GLN  HB2', -0.414, (199.366, 161.011, 177.373)), (' C1086  LYS  HD3', ' C1122  VAL HG11', -0.413, (204.924, 185.195, 250.133)), (' C 862  PRO  HA ', ' C 863  PRO  HD3', -0.412, (164.216, 194.844, 190.511)), (' C  89  GLY  HA3', ' C 270  LEU HD12', -0.411, (184.217, 226.766, 155.568)), (' C 985  ASP  O  ', ' C 989  ALA  CB ', -0.41, (173.233, 191.779, 149.28)), (' B1116  THR HG22', ' B1138  TYR  HB3', -0.41, (176.879, 185.718, 252.696)), (' A 206  LYS  HB3', ' A 223  LEU  HG ', -0.409, (233.126, 176.757, 158.891)), (' A 763  LEU HD22', ' A1008  VAL HG21', -0.409, (192.754, 195.977, 177.233)), (' B 725  GLU  OE1', ' B1064  HIS  NE2', -0.408, (180.621, 174.822, 210.035)), (' B  83  VAL HG11', ' B 237  ARG HH11', -0.408, (139.858, 165.823, 143.56)), (' B 383  SER  HA ', ' B 384  PRO  HD3', -0.407, (162.147, 199.099, 130.19)), (' C 743  CYS  HB3', ' C 749  CYS  HB3', -0.406, (168.914, 189.457, 161.467)), (' C  84  LEU HD22', ' C 267  VAL HG21', -0.406, (187.303, 237.893, 152.612)), (' A 326  ILE  HA ', ' A 326  ILE HD12', -0.405, (193.0, 149.672, 151.08)), (' B 197  ILE HD11', ' B 200  TYR  HB2', -0.405, (162.807, 163.273, 148.354)), (' B 316  SER  OG ', ' B 317  ASN  N  ', -0.404, (160.287, 182.849, 173.88)), (' A  41  LYS  H  ', ' A  41  LYS  HD2', -0.403, (219.283, 187.026, 155.655)), (' A 120  VAL HG12', ' A 241  LEU HD11', -0.403, (239.221, 170.834, 139.911)), (' B 742  ILE  O  ', ' B1000  ARG  NH1', -0.402, (189.11, 171.776, 163.416)), (' A 280  ASN  ND2', ' A 284  THR  OG1', -0.402, (229.695, 185.03, 169.047)), (' B 605  SER  OG ', ' B 606  ASN  N  ', -0.402, (151.193, 168.182, 187.568)), (' C 193  VAL HG23', ' C 223  LEU HD22', -0.401, (177.765, 231.233, 160.014))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
