# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  32 ', 'PHE', 0.012536543185428779, (208.89, 155.72500000000002, 153.212)), ('A', ' 115 ', 'GLN', 0.0394544546655451, (208.015, 161.258, 118.085)), ('A', ' 218 ', 'GLN', 0.030062093734916653, (212.222, 159.43, 155.38099999999997)), ('A', ' 477 ', 'SER', 0.031062468301909736, (119.18000000000004, 156.44, 117.595)), ('A', ' 812 ', 'PRO', 0.04480394884924903, (189.69, 188.09000000000003, 181.667)), ('B', '  81 ', 'ASN', 0.039940101647034695, (121.312, 119.827, 130.389)), ('B', '  97 ', 'LYS', 0.04950136750826005, (131.185, 107.75, 140.028)), ('B', ' 123 ', 'ALA', 0.025934152068865617, (137.386, 112.38400000000003, 134.73699999999997)), ('B', ' 418 ', 'ILE', 0.04675383094266806, (158.973, 184.636, 116.10299999999998)), ('B', ' 463 ', 'PRO', 0.049173952561247895, (153.29199999999997, 187.556, 126.802)), ('B', ' 604 ', 'THR', 0.027304829439852973, (135.729, 133.275, 172.852)), ('B', ' 709 ', 'ASN', 0.01111218467819667, (137.737, 166.942, 212.57999999999998)), ('B', ' 812 ', 'PRO', 0.09082727270992912, (173.341, 126.059, 180.87599999999998)), ('B', ' 886 ', 'TRP', 0.02474622991799718, (172.963, 149.57, 200.12599999999995)), ('C', '  97 ', 'LYS', 0.03423070339405365, (129.97799999999995, 216.831, 141.601)), ('C', ' 123 ', 'ALA', 0.016693840784154645, (129.99299999999994, 209.18, 136.12999999999997)), ('C', ' 393 ', 'THR', 0.003444066579660539, (189.57, 175.644, 131.62999999999997)), ('C', ' 457 ', 'ARG', 0.02064045914624964, (186.425, 142.769, 115.28399999999998)), ('C', ' 458 ', 'LYS', 0.013210621176057641, (187.521, 141.814, 118.86399999999999)), ('C', ' 460 ', 'ASN', 0.03670672424955482, (184.208, 147.664, 121.92599999999997)), ('C', ' 469 ', 'SER', 0.01749440815882114, (193.352, 148.93500000000003, 114.76699999999998)), ('C', ' 487 ', 'ASN', 0.03574257116014183, (185.471, 134.21300000000005, 108.967)), ('C', ' 491 ', 'PRO', 0.05901588298537366, (188.688, 146.107, 108.648)), ('C', ' 635 ', 'VAL', 0.0582469734873022, (165.08, 205.444, 156.307)), ('C', '1041 ', 'ASP', 0.031517325470729426, (161.98999999999995, 172.874, 194.338))]
data['omega'] = [('B', ' 392 ', 'PHE', None, (134.105, 177.288, 132.073)), ('C', ' 131 ', 'CYS', None, (142.066, 203.40500000000003, 119.776)), ('C', ' 449 ', 'TYR', None, (182.199, 154.628, 100.23399999999998)), ('C', ' 621 ', 'PRO', None, (175.645, 198.971, 156.085)), ('C', '1104 ', 'VAL', None, (169.547, 176.80800000000002, 221.93899999999994))]
data['rota'] = [('A', '  28 ', 'TYR', 0.07565360348760058, (216.011, 148.379, 146.19399999999996)), ('A', '  96 ', 'GLU', 0.0891842478777908, (223.817, 164.803, 142.56199999999998)), ('A', ' 105 ', 'ILE', 0.09872350017192559, (213.04499999999993, 159.422, 127.77799999999998)), ('A', ' 116 ', 'SER', 0.19264487968079558, (208.72999999999993, 159.575, 121.478)), ('A', ' 130 ', 'VAL', 0.00984549753393522, (208.325, 164.468, 121.34799999999998)), ('A', ' 294 ', 'ASP', 0.15278605571391773, (197.422, 149.517, 157.16299999999998)), ('A', ' 333 ', 'THR', 0.03027660985658225, (166.26599999999996, 123.293, 122.239)), ('A', ' 422 ', 'ASN', 0.2686049426185556, (138.93899999999996, 146.724, 116.97299999999997)), ('A', ' 445 ', 'VAL', 0.1799665190013195, (148.582, 145.742, 93.58299999999998)), ('A', ' 461 ', 'LEU', 0.09884114179292926, (137.454, 147.093, 122.30799999999998)), ('A', ' 472 ', 'ILE', 0.10308156956045297, (124.129, 147.796, 111.873)), ('A', ' 518 ', 'LEU', 0.09523542336959821, (157.053, 134.96200000000005, 135.25399999999996)), ('A', ' 529 ', 'LYS', 0.01883317586829361, (173.63299999999995, 127.369, 127.477)), ('A', ' 578 ', 'ASP', 0.26447106138490195, (166.52099999999993, 123.14400000000003, 138.683)), ('A', ' 606 ', 'ASN', 0.09893250175184376, (200.69499999999996, 152.211, 164.39599999999993)), ('A', ' 641 ', 'ASN', 0.05845540201554096, (197.78799999999995, 135.003, 163.773)), ('A', ' 739 ', 'THR', 0.12796577411873034, (165.87199999999996, 180.071, 152.739)), ('A', ' 786 ', 'LYS', 0.24251486698078764, (167.57799999999995, 185.281, 191.466)), ('A', ' 867 ', 'ASP', 0.28945726873293015, (180.347, 183.354, 179.195)), ('A', ' 886 ', 'TRP', 0.0643842839549931, (170.218, 175.462, 201.69599999999997)), ('A', ' 926 ', 'GLN', 0.0, (191.38299999999995, 165.658, 202.908)), ('A', ' 985 ', 'ASP', 0.0009884885686813453, (167.20799999999994, 177.576, 131.165)), ('A', '1084 ', 'ASP', 0.26170556499078895, (165.601, 141.476, 231.269)), ('A', '1092 ', 'GLU', 0.07260789828167434, (169.398, 154.133, 215.94499999999994)), ('A', '1096 ', 'VAL', 0.039153767698049964, (177.956, 144.774, 217.13899999999995)), ('A', '1106 ', 'GLN', 0.06876712411792567, (175.793, 154.543, 213.28899999999993)), ('B', ' 112 ', 'SER', 0.015299223486224365, (126.86700000000003, 125.072, 117.93599999999998)), ('B', ' 115 ', 'GLN', 0.02449462994289342, (132.598, 129.841, 119.015)), ('B', ' 116 ', 'SER', 0.015227130418836958, (131.579, 128.23000000000005, 122.33)), ('B', ' 120 ', 'VAL', 0.23361464299140347, (133.782, 115.963, 127.15299999999999)), ('B', ' 126 ', 'VAL', 0.13606024610764664, (139.581, 115.31100000000004, 128.974)), ('B', ' 166 ', 'CYS', 0.2549302952364058, (136.817, 125.08, 113.655)), ('B', ' 167 ', 'THR', 0.052354970190354094, (139.297, 127.02700000000003, 115.857)), ('B', ' 201 ', 'PHE', 0.2832050748906302, (140.529, 130.22200000000007, 130.572)), ('B', ' 294 ', 'ASP', 0.12130080102913306, (131.83, 140.228, 158.343)), ('B', ' 319 ', 'ARG', 0.027568525093236346, (130.32899999999995, 157.578, 154.205)), ('B', ' 351 ', 'TYR', 0.13689724718167945, (152.772, 188.957, 114.997)), ('B', ' 392 ', 'PHE', 0.07953109008302948, (134.896, 178.486, 132.394)), ('B', ' 453 ', 'TYR', 0.0026911753231062857, (156.886, 188.512, 112.125)), ('B', ' 505 ', 'TYR', 0.1751759300588048, (158.787, 175.238, 104.319)), ('B', ' 523 ', 'THR', 0.2025884885213478, (129.83099999999993, 181.411, 129.974)), ('B', ' 574 ', 'ASP', 0.010070565637567069, (132.62999999999994, 175.617, 150.799)), ('B', ' 603 ', 'ASN', 0.27432060573963657, (138.985, 132.051, 171.12599999999995)), ('B', ' 760 ', 'CYS', 0.12204796075820923, (174.207, 156.298, 153.59599999999998)), ('B', ' 779 ', 'GLN', 0.010577129516118314, (176.008, 149.022, 181.793)), ('B', ' 786 ', 'LYS', 0.22975568612051445, (182.496, 146.94, 190.277)), ('B', ' 873 ', 'TYR', 0.1697717890849215, (175.546, 140.547, 187.03199999999995)), ('B', ' 886 ', 'TRP', 0.13284122064434656, (172.963, 149.57, 200.12599999999995)), ('B', '1092 ', 'GLU', 0.0, (156.594, 160.735, 216.62199999999996)), ('B', '1106 ', 'GLN', 0.24650100885036286, (152.704, 155.253, 215.46799999999996)), ('B', '1118 ', 'ASP', 0.23109200774019337, (159.043, 160.286, 226.70399999999995)), ('B', '1125 ', 'ASN', 0.005524870946728104, (149.441, 176.601, 227.236)), ('C', '  88 ', 'ASP', 0.28076237231594514, (154.372, 200.008, 136.82399999999998)), ('C', ' 286 ', 'THR', 0.19321863381289414, (138.451, 195.864, 154.645)), ('C', ' 309 ', 'GLU', 0.12588299179533943, (152.741, 190.489, 170.869)), ('C', ' 324 ', 'GLU', 0.007094815711493895, (177.17399999999995, 196.004, 140.884)), ('C', ' 328 ', 'ARG', 0.18852259893171094, (185.864, 190.043, 134.977)), ('C', ' 383 ', 'SER', 0.07203800351728784, (171.53, 175.229, 127.32799999999997)), ('C', ' 391 ', 'CYS', 0.21182825474780143, (183.955, 180.118, 131.514)), ('C', ' 393 ', 'THR', 0.0024659505530115083, (189.57, 175.644, 131.62999999999997)), ('C', ' 443 ', 'SER', 0.07532894371566917, (178.73, 161.619, 99.25999999999999)), ('C', ' 457 ', 'ARG', 0.006236322413887112, (186.425, 142.769, 115.28399999999998)), ('C', ' 461 ', 'LEU', 0.020984409888067313, (185.111, 151.269, 123.08699999999997)), ('C', ' 466 ', 'ARG', 0.14540539956129006, (190.54699999999994, 156.725, 118.97899999999997)), ('C', ' 519 ', 'HIS', 0.08174150892230067, (188.203, 175.576, 138.633)), ('C', ' 523 ', 'THR', 0.05716115140088336, (190.966, 179.648, 129.242)), ('C', ' 586 ', 'ASP', 0.14475700660950871, (189.351, 187.792, 148.552)), ('C', ' 592 ', 'PHE', 0.15576079962320888, (174.314, 190.331, 156.612)), ('C', ' 619 ', 'GLU', 0.10014345307068542, (179.34099999999995, 199.505, 158.71399999999997)), ('C', ' 636 ', 'TYR', 0.11113900597117882, (165.933, 205.334, 159.96899999999997)), ('C', ' 734 ', 'THR', 0.062189076293042926, (143.596, 163.12, 167.382)), ('C', ' 760 ', 'CYS', 0.11415927379410327, (149.613, 155.021, 154.775)), ('C', ' 868 ', 'GLU', 0.18537069256628347, (133.10099999999994, 165.33, 183.51999999999998)), ('C', ' 906 ', 'PHE', 0.2836469534359044, (155.04599999999996, 170.737, 208.833)), ('C', ' 907 ', 'ASN', 0.2406454627252876, (157.039, 167.78, 210.236)), ('C', '1096 ', 'VAL', 0.0426557690798287, (172.808, 180.796, 218.607))]
data['cbeta'] = [('A', ' 773 ', 'GLU', ' ', 0.2693000789684178, (164.255, 175.263, 174.969)), ('B', ' 234 ', 'ASN', ' ', 0.25539083392441697, (133.661, 138.268, 123.803)), ('B', ' 489 ', 'TYR', ' ', 0.27733213129721956, (166.253, 196.842, 107.092)), ('C', '  88 ', 'ASP', ' ', 0.25979469105507225, (155.238, 199.136, 137.765)), ('C', ' 391 ', 'CYS', ' ', 0.3677258827808189, (184.785, 181.122, 130.736)), ('C', ' 448 ', 'ASN', ' ', 0.5478802558980176, (181.467, 158.379, 100.11699999999998)), ('C', ' 457 ', 'ARG', ' ', 0.32458889776247235, (187.32299999999995, 143.89, 114.702)), ('C', ' 619 ', 'GLU', ' ', 0.2508303708698138, (180.016, 198.221, 158.183)), ('C', ' 620 ', 'VAL', ' ', 0.25198922728570344, (174.903, 198.855, 159.877)), ('C', ' 635 ', 'VAL', ' ', 0.30142869448656906, (165.782, 206.312, 155.24399999999997)), ('C', ' 773 ', 'GLU', ' ', 0.2814111696018918, (150.554, 157.33, 174.209))]
data['probe'] = [(' B 655  HIS  NE2', ' B1305  NAG  H82', -0.606, (121.241, 153.192, 178.248)), (' A1116  THR HG22', ' A1138  TYR  HB3', -0.517, (173.917, 152.553, 228.204)), (' B 655  HIS  CE1', ' B1305  NAG  H82', -0.508, (121.143, 153.78, 178.187)), (' B1043  CYS  HB2', ' B1048  HIS  CG ', -0.505, (160.344, 150.731, 196.561)), (' B 655  HIS  NE2', ' B1305  NAG  C8 ', -0.486, (120.248, 153.409, 178.102)), (' C 519  HIS  CE1', ' C 567  ARG  HE ', -0.483, (186.64, 176.488, 143.177)), (' A 422  ASN  ND2', ' A 454  ARG  H  ', -0.473, (137.799, 148.767, 113.71)), (' A 478  LYS  HE2', ' A 488  CYS  SG ', -0.472, (117.32, 152.976, 111.041)), (' C1043  CYS  HB2', ' C1048  HIS  CG ', -0.469, (155.895, 170.11, 197.439)), (' B 655  HIS  NE2', ' B1305  NAG  C7 ', -0.466, (120.272, 152.78, 177.933)), (' A1097  SER  HB2', ' A1102  TRP  CD2', -0.46, (177.991, 142.241, 220.537)), (' B 461  LEU  HA ', ' N   1  NAG  H83', -0.457, (156.979, 193.062, 122.225)), (' B 391  CYS  HB2', ' B 525  CYS  HA ', -0.454, (131.855, 175.403, 129.504)), (' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.454, (163.856, 132.544, 127.757)), (' C1043  CYS  HB3', ' C1048  HIS  CD2', -0.448, (154.668, 170.334, 196.747)), (' B 643  PHE  CZ ', ' B 655  HIS  ND1', -0.445, (123.498, 152.472, 176.249)), (' A1028  LYS  HG2', ' A1042  PHE  CE2', -0.441, (170.754, 164.934, 190.945)), (' B 353  TRP  CD1', ' B 423  TYR  CE1', -0.438, (150.218, 185.882, 118.558)), (' B 454  ARG  HG2', ' B 454  ARG HH11', -0.437, (157.24, 194.98, 114.314)), (' C1097  SER  HB2', ' C1102  TRP  CD2', -0.435, (175.157, 181.993, 222.223)), (' C 391  CYS  HB2', ' C 525  CYS  HA ', -0.43, (184.855, 180.881, 128.998)), (' C 391  CYS  HA ', ' C 392  PHE  CD2', -0.427, (183.831, 178.554, 130.909)), (' B 319  ARG  HG3', ' B 319  ARG HH11', -0.425, (133.301, 158.025, 154.23)), (' B1081  ILE HG22', ' B1095  PHE  CE2', -0.424, (148.922, 165.282, 223.548)), (' C 391  CYS  CB ', ' C 525  CYS  HA ', -0.423, (184.852, 181.249, 129.447)), (' B 980  ILE  H  ', ' B 980  ILE HD12', -0.419, (164.594, 145.31, 138.888)), (' A  55  PHE  CD2', ' A 275  PHE  CD1', -0.417, (197.34, 158.38, 147.001)), (' B 421  TYR  CE1', ' B 460  ASN  HA ', -0.406, (161.35, 191.655, 121.35)), (' C 490  PHE  CD1', ' C 491  PRO  HD2', -0.405, (191.128, 144.743, 106.346)), (' C 421  TYR  CE1', ' C 456  PHE  HA ', -0.402, (182.707, 145.396, 117.869)), (' B 112  SER  HB2', ' B 135  PHE  CG ', -0.401, (126.907, 122.322, 118.342))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
