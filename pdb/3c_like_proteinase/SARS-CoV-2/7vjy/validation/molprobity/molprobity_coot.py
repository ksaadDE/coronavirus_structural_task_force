# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   6 ', 'MET', 0.0397503543197134, (2.168999999999999, -2.642, -4.517999999999999)), ('A', '   6 ', 'MET', 0.019477696574324313, (2.085999999999999, -2.654, -4.475)), ('A', ' 154 ', 'TYR', 0.01588862232048043, (10.615, -14.531999999999993, -9.518)), ('A', ' 277 ', 'ASN', 0.00028258199999999997, (1.8349999999999993, 24.054, -5.072)), ('A', ' 277 ', 'ASN', 0.0005500960974547896, (1.8349999999999993, 24.054, -5.072))]
data['omega'] = [('A', ' 277 ', 'ASN', None, (2.125999999999999, 22.632999999999992, -5.185)), ('A', ' 277 ', 'ASN', None, (2.125999999999999, 22.632999999999992, -5.185))]
data['rota'] = [('A', '   6 ', 'MET', 0.06048109773976432, (2.168999999999999, -2.642, -4.517999999999999)), ('A', '   6 ', 'MET', 0.053548713837410535, (2.085999999999999, -2.654, -4.475)), ('A', '  34 ', 'ASP', 0.27702902989768613, (14.305000000000005, -26.955, 10.272)), ('A', '  73 ', 'VAL', 0.062141305048145766, (0.4990000000000001, -27.82899999999999, 15.585)), ('A', '  87 ', 'LEU', 0.03325736937689801, (17.623, -16.705999999999996, 18.022)), ('A', ' 165 ', 'MET', 0.0, (11.845000000000002, -2.857999999999999, 18.159)), ('A', ' 165 ', 'MET', 0.02971854198657493, (11.870999999999999, -2.8609999999999993, 18.196)), ('A', ' 189 ', 'GLN', 0.1427990173567174, (14.438, -0.6780000000000002, 25.884)), ('A', ' 220 ', 'LEU', 0.28885115085128843, (8.605999999999996, 18.544, -16.907)), ('A', ' 276 ', 'MET', 0.0, (4.06, 21.356, -5.955)), ('A', ' 276 ', 'MET', 0.03018156737983437, (4.135999999999998, 21.473, -6.008)), ('A', ' 298 ', 'ARG', 0.19473010980419586, (8.477999999999998, -3.9369999999999994, -12.436))]
data['cbeta'] = []
data['probe'] = [(' A  21  THR  HG1', ' A  26  THR  HG1', -0.962, (4.199, -17.609, 23.589)), (' A 279  ARG  HE ', ' A 280  THR  H  ', -0.796, (-1.248, 18.015, -8.826)), (' A 226  THR HG23', ' A 229  ASP  H  ', -0.718, (25.528, 20.519, -11.628)), (' A   5  LYS  O  ', ' A 401  HOH  O  ', -0.704, (4.98, -0.811, -5.52)), (' A 262  LEU  HB2', ' A 427  HOH  O  ', -0.663, (21.664, 14.141, -18.162)), (' A 245  ASP  OD1', ' A 402  HOH  O  ', -0.652, (28.076, 4.019, -11.874)), (' A 197  ASP  OD2', ' A 403  HOH  O  ', -0.625, (12.22, 9.268, 7.175)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.589, (4.104, -13.659, 9.239)), (' A 201  THR  H  ', ' A 240  GLU  HG2', -0.578, (17.535, 10.006, -2.328)), (' A 279  ARG  HE ', ' A 280  THR  N  ', -0.57, (-1.611, 17.985, -8.167)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.567, (2.272, -6.612, 15.277)), (' A 201  THR  H  ', ' A 240  GLU  CG ', -0.533, (18.481, 10.232, -2.721)), (' A 279  ARG  HA ', ' A 279  ARG  NE ', -0.529, (-2.099, 19.892, -8.452)), (' A 145  CYS  SG ', ' A 459  HOH  O  ', -0.51, (7.555, -5.657, 19.247)), (' A   5  LYS  HA ', ' A 291  PHE  CZ ', -0.497, (3.505, 2.11, -4.759)), (' A  36  VAL HG21', ' A  68  VAL HG11', -0.485, (9.243, -22.882, 15.243)), (' A 256  GLN  OE1', ' A 404  HOH  O  ', -0.483, (9.802, 0.704, -18.838)), (' A 102  LYS  HG3', ' A 104  VAL HG13', -0.461, (18.79, -13.044, -0.361)), (' A 226  THR  CG2', ' A 229  ASP  HB2', -0.458, (25.225, 21.62, -12.159)), (' A  83  GLN  O  ', ' A  86  VAL HG12', -0.458, (21.113, -14.324, 14.908)), (' A  22  CYS  SG ', ' A  61  LYS  HE2', -0.453, (13.079, -18.436, 27.753)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.446, (9.71, -1.709, 13.617)), (' A 276 AMET  O  ', ' A 277  ASN  HB2', -0.444, (2.815, 23.756, -6.957)), (' A 165 AMET  HB2', ' A 165 AMET  HE3', -0.442, (14.198, -3.699, 18.601)), (' A 200  ILE  HA ', ' A 240  GLU  HG2', -0.437, (17.402, 9.34, -1.412)), (' A  22  CYS  HB2', ' A  42  VAL HG22', -0.437, (10.503, -16.66, 24.168)), (' A 165 BMET  HB3', ' A 165 BMET  HE3', -0.436, (13.022, -0.816, 19.63)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.425, (8.79, -7.675, 4.076)), (' A 114  VAL  O  ', ' A 125  VAL  HA ', -0.419, (2.699, -6.87, 4.578)), (' A  63  ASN  OD1', ' A  80  HIS  ND1', -0.418, (18.42, -25.273, 23.186)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.417, (19.493, -5.627, 13.57)), (' A 276 AMET  HE3', ' A 281  ILE HD12', -0.415, (4.917, 15.791, -7.643)), (' A 212  VAL HG22', ' A 220  LEU HD21', -0.411, (6.978, 13.554, -17.245)), (' A 187  ASP  N  ', ' A 187  ASP  OD1', -0.408, (19.228, -5.171, 21.084)), (' A  19  GLN  O  ', ' A  68  VAL  HA ', -0.405, (6.361, -21.182, 18.327)), (' A   6 BMET  HB3', ' A   6 BMET  HE3', -0.404, (3.087, -4.403, -6.399)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.4, (8.096, -25.083, 8.916))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
