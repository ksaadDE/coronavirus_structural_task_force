# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', ' 109 ', 'ASN', 0.03443141504246399, (227.674, 182.274, 168.116)), ('N', ' 165 ', 'ASN', 0.02980261974311816, (219.538, 179.988, 175.081))]
data['omega'] = [('L', '   8 ', 'PRO', None, (249.355, 158.482, 167.186)), ('R', ' 380 ', 'TYR', None, (228.831, 205.917, 170.43400000000003)), ('R', ' 433 ', 'VAL', None, (232.433, 200.765, 166.59300000000002))]
data['rota'] = [('R', ' 334 ', 'ASN', 0.020977585139080844, (240.27099999999996, 185.939, 182.759))]
data['cbeta'] = []
data['probe'] = [(' N  28  TYR  HB2', ' N  64  TRP  HB3', -0.808, (208.859, 161.224, 205.984)), (' L  30  SER  HA ', ' L  68  GLY  H  ', -0.749, (243.971, 176.311, 168.397)), (' N  83  VAL HG11', ' N 237  ARG  HE ', -0.708, (207.062, 171.861, 189.426)), (' R 334  ASN  N  ', ' R 334  ASN HD22', -0.705, (238.998, 186.851, 183.99)), (' L  31  ARG  NH2', ' R 340  GLU  OE1', -0.705, (237.661, 181.468, 170.264)), (' L  95  PRO  HB2', ' L  96  PRO  HD2', -0.7, (245.366, 176.555, 148.703)), (' N 106  PHE  HB3', ' N 235  ILE HD12', -0.674, (215.272, 177.272, 190.258)), (' N 106  PHE  CD1', ' N 238  PHE  HB2', -0.663, (214.461, 173.405, 192.466)), (' R 409  GLN  HA ', ' R 414  GLN  HG2', -0.632, (226.257, 204.662, 155.81)), (' R 393  THR  HB ', ' R 516  GLU  HG3', -0.623, (222.836, 192.675, 179.374)), (' N 126  VAL  HB ', ' N 174  PRO  HA ', -0.62, (230.714, 169.245, 192.125)), (' N  57  PRO  HB2', ' N  60  SER  HB2', -0.599, (210.647, 175.371, 212.212)), (' H  98  ARG  NH2', ' H 117  ASP  OD2', -0.59, (224.798, 170.039, 156.173)), (' R 334  ASN  N  ', ' R 334  ASN  ND2', -0.583, (238.956, 186.329, 184.223)), (' H 110  TYR  HD2', ' R 466  ARG HH11', -0.577, (224.639, 185.265, 161.674)), (' H  35  ASN HD21', ' H 116  PHE  HE1', -0.576, (234.545, 170.938, 151.514)), (' H  68  PHE  CZ ', ' H  83  MET  HE3', -0.57, (240.287, 163.684, 137.877)), (' H  83  MET  HE2', ' H  86  LEU HD21', -0.569, (240.068, 162.366, 135.806)), (' R 409  GLN  NE2', ' R 416  GLY  HA3', -0.559, (224.345, 203.34, 151.106)), (' R 433  VAL HG12', ' R 512  VAL HG22', -0.551, (230.081, 198.78, 164.018)), (' N 280  ASN  O  ', ' N 281  GLU  HG2', -0.549, (236.343, 180.559, 218.788)), (' N  38  TYR  O  ', ' N  40  ASP  N  ', -0.549, (224.837, 184.486, 205.749)), (' N 105  ILE HD11', ' N 241  LEU HD12', -0.537, (218.301, 167.106, 187.216)), (' N  40  ASP  OD1', ' N 204  TYR  OH ', -0.532, (223.253, 183.746, 202.46)), (' N 277  LEU HD13', ' N 285  ILE HD13', -0.531, (224.77, 182.946, 212.606)), (' N  37  TYR  OH ', ' N  54  LEU  O  ', -0.522, (218.262, 182.661, 205.619)), (' N 231  ILE HG22', ' N 233  ILE HG12', -0.518, (218.507, 182.207, 187.232)), (' R 497  PHE  CE2', ' R 507  PRO  HB3', -0.514, (238.247, 193.758, 150.242)), (' H  35  ASN  ND2', ' H 116  PHE  HE1', -0.502, (235.008, 170.803, 151.275)), (' L  11  LEU HD21', ' L  19  ALA  HB1', -0.501, (241.619, 154.82, 172.563)), (' R 350  VAL HG21', ' R 418  ILE HD12', -0.498, (227.154, 194.682, 153.81)), (' N  91  TYR  OH ', ' N 191  GLU  OE1', -0.497, (220.827, 169.209, 207.69)), (' H 110  TYR  HB2', ' R 355  ARG  HB3', -0.491, (226.474, 185.773, 164.895)), (' L  30  SER  HB2', ' L  67  PHE  CE1', -0.491, (242.695, 179.223, 168.911)), (' N 130  VAL  O  ', ' N 130  VAL HG13', -0.488, (220.699, 179.917, 182.169)), (' N 106  PHE  HB2', ' N 117  LEU  HB3', -0.48, (217.119, 176.206, 189.341)), (' H  34  MET  O  ', ' H  51  ILE HG22', -0.476, (231.623, 172.936, 145.697)), (' L  21  LEU HD22', ' L 103  THR HG21', -0.475, (243.578, 157.789, 167.174)), (' H 111  ARG  NE ', ' H 113  ASP  OD1', -0.475, (232.204, 177.138, 163.563)), (' N  83  VAL HG11', ' N 237  ARG HH21', -0.471, (206.388, 170.641, 189.606)), (' N 125  ASN HD21', ' N 171  VAL HG13', -0.469, (233.559, 170.839, 185.279)), (' L  95  PRO  HB2', ' L  96  PRO  CD ', -0.466, (245.112, 176.271, 149.068)), (' H  49  SER  OG ', ' H  50  TYR  N  ', -0.465, (236.411, 171.852, 143.918)), (' R 406  GLU  OE2', ' R 418  ILE HG12', -0.464, (227.669, 197.893, 150.979)), (' L  11  LEU  HB3', ' L 105  VAL HG12', -0.462, (242.466, 153.171, 168.566)), (' L  63  THR  O  ', ' L  73  LEU HD12', -0.462, (236.605, 163.313, 171.291)), (' H  52  GLY  HA3', ' H  57  ALA  HB3', -0.461, (232.094, 179.599, 145.721)), (' N  84  LEU  HB2', ' N 238  PHE  CE1', -0.46, (210.719, 171.079, 196.776)), (' H  28  ARG  NH1', ' R 469  SER  OG ', -0.46, (215.912, 180.161, 152.679)), (' L  33  LEU HD11', ' L  88  CYS  HB2', -0.459, (242.004, 167.251, 162.754)), (' H 110  TYR  HB3', ' R 466  ARG  NH1', -0.458, (225.803, 183.864, 162.251)), (' R 377  PHE  CD2', ' R 434  ILE HG22', -0.458, (237.387, 201.477, 167.425)), (' R 409  GLN HE22', ' R 416  GLY  HA3', -0.458, (224.407, 202.834, 150.834)), (' R 405  ASP  OD1', ' R 408  ARG  NH1', -0.456, (231.917, 206.11, 150.03)), (' L  39  ARG  HD2', ' L  81  GLU  OE2', -0.456, (230.759, 151.075, 161.398)), (' L  34  ALA  O  ', ' L  88  CYS  HA ', -0.454, (239.301, 165.966, 161.783)), (' R 375  SER  O  ', ' R 375  SER  OG ', -0.452, (240.492, 204.625, 159.206)), (' H 118  ILE  O  ', ' H 118  ILE HG13', -0.451, (225.883, 165.314, 152.919)), (' R 461  LEU HD22', ' R 465  GLU  OE1', -0.45, (216.726, 191.28, 156.778)), (' N  83  VAL  CG1', ' N 237  ARG  HE ', -0.45, (207.67, 171.647, 190.234)), (' N  44  ARG  HG2', ' N  45  SER  N  ', -0.447, (234.308, 187.046, 213.021)), (' R 342  PHE  CE1', ' R 434  ILE HD11', -0.442, (238.203, 195.813, 166.326)), (' R 398  ASP  OD2', ' R 423  TYR  OH ', -0.442, (226.049, 194.035, 164.573)), (' R 380  TYR  C  ', ' R 382  VAL  H  ', -0.442, (227.954, 205.981, 172.821)), (' H  35  ASN  HB3', ' H  50  TYR  HA ', -0.435, (234.565, 172.475, 147.145)), (' L  61  ARG  NH1', ' L  82  ASP  OD2', -0.435, (230.563, 153.965, 170.6)), (' L  83  PHE  CZ ', ' L 107  ILE HG12', -0.434, (237.213, 146.164, 169.536)), (' R 403  ARG  HD3', ' R 505  TYR  CD1', -0.433, (234.629, 200.494, 145.673)), (' N 175  PHE  CD1', ' N 226  LEU HD21', -0.431, (228.158, 172.677, 196.376)), (' N 126  VAL HG12', ' N 172  SER  O  ', -0.426, (231.741, 171.356, 190.697)), (' H 108  GLY  O  ', ' H 109  ASN  C  ', -0.425, (226.061, 182.02, 167.25)), (' R 336  CYS  SG ', ' R 363  ALA  HB2', -0.425, (235.949, 190.864, 177.748)), (' L  95  PRO  CB ', ' L  96  PRO  HD2', -0.424, (245.184, 176.868, 149.091)), (' L  18  ARG  HA ', ' L  76  SER  HA ', -0.424, (235.902, 155.556, 176.814)), (' N 108  THR HG22', ' N 236  THR HG23', -0.423, (209.307, 180.842, 189.601)), (' L  83  PHE  HA ', ' L 105  VAL HG23', -0.421, (238.093, 151.131, 166.486)), (' R 342  PHE  CD1', ' R 434  ILE HD11', -0.415, (238.675, 195.518, 166.187)), (' H 110  TYR  CD2', ' R 466  ARG  HD3', -0.412, (223.376, 185.527, 162.206)), (' H  79  LEU HD23', ' H  80  TYR  N  ', -0.411, (229.268, 169.044, 140.42)), (' R 433  VAL  O  ', ' R 433  VAL HG23', -0.41, (233.246, 202.079, 164.085)), (' N 128  ILE  HB ', ' N 170  TYR  HB3', -0.408, (227.102, 176.263, 188.024)), (' R 410  ILE HD11', ' R 418  ILE HG21', -0.408, (227.661, 197.719, 156.144)), (' N 106  PHE  CE1', ' N 238  PHE  HB2', -0.407, (214.827, 173.13, 193.648)), (' N  65  PHE  CE2', ' N  84  LEU HD11', -0.407, (209.6, 167.263, 199.515)), (' H   4  LEU HD12', ' H  96  CYS  SG ', -0.407, (226.723, 165.174, 146.563)), (' H  45  LEU HD11', ' L  44  PRO  HG2', -0.407, (236.147, 160.111, 154.152)), (' R 453  TYR  CD1', ' R 495  TYR  CE1', -0.407, (230.223, 193.84, 147.455)), (' L  24  ARG  HD3', ' L  70  GLU  OE1', -0.406, (250.333, 168.53, 170.21)), (' N 191  GLU  OE2', ' N 223  LEU HD21', -0.406, (224.108, 171.837, 208.181)), (' H  36  TRP  HE1', ' H  79  LEU HD21', -0.406, (231.066, 169.195, 142.344)), (' L  11  LEU HD23', ' L 105  VAL HG12', -0.404, (241.843, 153.675, 169.361)), (' H   6  GLU  HG2', ' H  22  CYS  HB3', -0.403, (228.167, 162.838, 143.278)), (' N 106  PHE  HE2', ' N 201  PHE  CZ ', -0.402, (218.947, 176.287, 194.494)), (' N 271  GLN  HA ', ' N 272  PRO  HD3', -0.401, (209.872, 182.417, 206.432)), (' R 466  ARG HH21', ' R 468  ILE HD11', -0.4, (224.157, 182.976, 157.891)), (' H  13  LYS  HB3', ' H  13  LYS  HE2', -0.4, (243.539, 154.338, 126.818))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
