# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('AA', ' 154 ', 'TYR', 0.03725854017312903, (10.66758, -12.00116, -9.54743))]
data['omega'] = []
data['rota'] = [('AA', '  27 ', 'LEU', 0.25227984377871593, (5.797240000000001, -10.238579999999999, 19.36064)), ('AA', '  47 ', 'GLU', 0.2599343435904082, (11.190619999999996, -2.56341, 33.27581)), ('AA', ' 165 ', 'MET', 0.03793851323645584, (11.325609999999998, 0.5175499999999998, 18.2602)), ('AA', ' 286 ', 'LEU', 0.25136095845000184, (3.96197, 18.218389999999996, -1.58741))]
data['cbeta'] = [('AA', '   4 ', 'ARG', 'B', 0.37741143626598767, (-0.8759799999999993, 4.00324, -6.63198))]
data['probe'] = [('AA 165 BMET  CE ', 'AA 401  CB1  C9 ', -1.01, (10.949, -1.256, 23.314)), ('AA 165 BMET  HE3', 'AA 401  CB1  N6 ', -0.859, (11.251, -0.068, 22.341)), ('AA  55 BGLU  OE2', 'AA 505  HOH  O  ', -0.793, (24.909, -8.878, 23.238)), ('AA 165 BMET  CE ', 'AA 401  CB1  N6 ', -0.76, (11.63, -0.101, 22.716)), ('AA 165 BMET  HE3', 'AA 401  CB1  C9 ', -0.66, (10.778, -1.041, 23.256)), ('AA 165 BMET  CG ', 'AA 401  CB1  C8 ', -0.66, (12.566, 1.558, 21.306)), ('AA 165 BMET  HE2', 'AA 401  CB1  C9 ', -0.649, (12.338, -0.17, 23.609)), ('AA   1  SER  HB3', 'AA 753  HOH  O  ', -0.637, (-1.317, 3.967, -18.9)), ('AA 165 BMET  HE1', 'AA 401  CB1  C9 ', -0.613, (12.062, -1.409, 23.345)), ('AA 118  TYR  CE1', 'AA 144  SER  HB3', -0.607, (2.054, -3.59, 15.352)), ('AA 244  GLN  NE2', 'AA 508  HOH  O  ', -0.591, (28.045, 15.068, -14.109)), ('AA  96  PRO  O  ', 'AA 408  DMS  H23', -0.586, (7.161, -23.953, 0.899)), ('AA 165 BMET  HG3', 'AA 401  CB1  C8 ', -0.578, (12.132, 1.305, 21.37)), ('AA  86  VAL HG12', 'AA 162 BMET  HE1', -0.577, (15.819, -9.047, 14.654)), ('AA 294 BPHE  HE2', 'AA 626  HOH  O  ', -0.551, (17.64, 3.989, -7.124)), ('AA 298  ARG  HG3', 'AA 303  VAL  HB ', -0.526, (8.26, -4.082, -12.444)), ('AA 189  GLN HE21', 'AA 401  CB1  H72', -0.52, (10.715, 0.828, 26.139)), ('AA  86  VAL HG13', 'AA 179  GLY  HA2', -0.518, (18.597, -8.469, 14.27)), ('AA  31  TRP  CD2', 'AA  95  ASN  HB2', -0.516, (8.371, -21.804, 8.917)), ('AA 165 AMET  HE1', 'AA 186  VAL  O  ', -0.513, (17.316, 1.915, 20.309)), ('AA 154  TYR  O  ', 'AA 305  PHE  HB3', -0.509, (7.762, -12.107, -8.015)), ('AA 210  ALA  HB2', 'AA 296  VAL HG13', -0.492, (7.188, 7.585, -12.297)), ('AA 165 BMET  CE ', 'AA 401  CB1  H91', -0.488, (12.205, -1.009, 24.157)), ('AA 189  GLN  NE2', 'AA 401  CB1  H72', -0.483, (10.389, 1.353, 26.681)), ('AA 140  PHE  HB3', 'AA 144  SER  OG ', -0.481, (4.709, -1.51, 15.098)), ('AA 115  LEU HD11', 'AA 122  PRO  HB3', -0.48, (0.183, -9.445, 6.568)), ('AA   5  LYS  NZ ', 'AA 509  HOH  O  ', -0.48, (6.104, 8.829, -1.182)), ('AA 153  ASP  O  ', 'AA 154  TYR  HB3', -0.476, (12.592, -12.325, -9.082)), ('AA  49  MET  HE2', 'AA 401  CB1  H91', -0.474, (12.823, -1.397, 24.649)), ('AA  49  MET  HE2', 'AA 165 BMET  HE1', -0.473, (12.721, -1.837, 23.588)), ('AA 152  ILE  O  ', 'AA 305  PHE  CE2', -0.452, (9.912, -7.84, -7.531)), ('AA  86  VAL HG12', 'AA 162 BMET  CE ', -0.452, (15.392, -8.844, 14.46)), ('AA  31  TRP  CE2', 'AA  95  ASN  HB2', -0.444, (8.807, -22.175, 8.62)), ('AA 148  VAL HG12', 'AA 162 BMET  HG3', -0.439, (11.645, -8.454, 10.912)), ('AA 113  SER  O  ', 'AA 149  GLY  HA2', -0.432, (8.888, -4.501, 4.052)), ('AA 118  TYR  CZ ', 'AA 144  SER  HB3', -0.432, (1.584, -3.547, 15.265)), ('AA  40  ARG  HA ', 'AA  87  LEU  HG ', -0.427, (16.29, -11.805, 20.479)), ('AA 294 BPHE  CD2', 'AA 294 BPHE  N  ', -0.427, (14.888, 2.804, -9.305)), ('AA 121  SER  HA ', 'AA 122  PRO  HD3', -0.421, (-0.495, -13.257, 10.765)), ('AA  98  THR  O  ', 'AA 408  DMS  H12', -0.42, (8.977, -21.653, -0.276)), ('AA 276 AMET  HE2', 'AA 279  ARG  O  ', -0.418, (0.35, 21.22, -5.607)), ('AA 282  LEU  HA ', 'AA 282  LEU HD23', -0.418, (-0.475, 12.429, -10.502)), ('AA 153  ASP  O  ', 'AA 154  TYR  CB ', -0.416, (12.351, -12.24, -9.078)), ('AA 165 BMET  HE2', 'AA 401  CB1  H91', -0.402, (12.188, -0.294, 24.167))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
