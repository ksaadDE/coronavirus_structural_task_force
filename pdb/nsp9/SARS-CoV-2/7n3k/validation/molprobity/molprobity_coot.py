# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', '  -1 ', 'PRO', 0.06641579581973936, (-80.953, 28.244000000000018, -46.611))]
data['omega'] = []
data['rota'] = [('B', '  59 ', 'SER', 0.004698399197921947, (-40.625, 31.981, -33.788)), ('B', '  62 ', 'THR', 0.20597513175243748, (-45.17099999999999, 36.654, -31.533000000000005)), ('B', '  68 ', 'GLU', 0.1952296731365337, (-51.65399999999997, 17.388000000000016, -31.091000000000005)), ('C', '  36 ', 'LYS', 0.19540720435442813, (-70.868, 14.523000000000005, -57.044)), ('C', '  77 ', 'THR', 0.0031908989402829697, (-68.97599999999994, -6.408000000000002, -32.561)), ('D', '   2 ', 'ASN', 0.016571147909981234, (-56.946, 2.45, -29.371)), ('D', '  55 ', 'ARG', 0.23723310677865542, (-78.97499999999998, 27.593000000000004, -17.277)), ('D', '  58 ', 'LYS', 5.311786864050861e-06, (-74.412, 22.899000000000004, -10.15)), ('D', '  60 ', 'ASP', 0.005649712036738114, (-74.56, 19.839, -5.407000000000001)), ('D', '  64 ', 'THR', 0.0013479450899467338, (-75.691, 27.728, -11.241000000000001)), ('E', '  78 ', 'ASP', 0.28442987455448, (-55.001999999999995, -16.725000000000005, -3.652)), ('H', ' 110 ', 'VAL', 0.03479341872919464, (-42.07099999999999, -17.251, -8.602)), ('H', ' 113 ', 'GLN', 0.0, (-44.620000000000005, -21.06, -0.598))]
data['cbeta'] = [('B', '  79 ', 'THR', ' ', 0.35673760242359326, (-34.008, 9.956000000000007, -14.29))]
data['probe'] = [(' B  73  CYS  SG ', ' B 201  ODN  H19', -1.664, (-44.865, 5.939, -29.702)), (' F  73  CYS  SG ', ' F 201  ODN  C14', -1.475, (-86.589, -12.463, -15.181)), (' C  73  CYS  SG ', ' C 201  ODN  H19', -1.467, (-59.552, 4.742, -34.354)), (' B  73  CYS  SG ', ' B 201  ODN  C14', -1.384, (-44.979, 4.538, -30.035)), (' C  73  CYS  SG ', ' C 201  ODN  C14', -1.138, (-58.454, 4.224, -34.126)), (' D   3  GLU  HG3', ' D  -2  GLY  HA3', -1.057, (-57.058, 0.051, -24.825)), (' B  73  CYS  HG ', ' B 201  ODN  H19', -1.005, (-43.993, 4.384, -29.77)), (' F  29  LEU HD23', ' F  45  LEU HD23', -0.831, (-79.021, -22.237, -20.95)), (' F  73  CYS  SG ', ' F 201  ODN  C13', -0.796, (-87.961, -13.133, -14.071)), (' A  60  ASP  HB2', ' A  62  THR HG23', -0.789, (-33.121, -24.767, -47.017)), (' D  97  LEU  HG ', ' D 101  MET  HE2', -0.75, (-65.67, 12.475, -30.985)), (' G 112  LEU  H  ', ' G 112  LEU HD12', -0.725, (-28.115, -7.374, -11.962)), (' C  73  CYS  HG ', ' C 201  ODN  H19', -0.719, (-60.549, 4.749, -33.536)), (' D  52  LYS  NZ ', ' D  68  GLU  OE2', -0.713, (-74.291, 35.17, -27.494)), (' H  52  LYS  NZ ', ' H  68  GLU  OE2', -0.7, (-32.396, -42.972, -16.51)), (' B  20  GLN  N  ', ' B  20  GLN  OE1', -0.698, (-56.895, 22.41, -25.409)), (' D  75  PHE  HB2', ' D 112  LEU HD21', -0.689, (-82.838, 17.262, -39.41)), (' B  70  GLU  HG3', ' B  99  ARG HH12', -0.688, (-47.155, 10.159, -34.452)), (' G  10  ARG  HB2', ' G  32  TYR  CZ ', -0.684, (-29.043, -11.415, 7.891)), (' C  73  CYS  HA ', ' C 201  ODN  H18', -0.683, (-58.481, 2.94, -33.338)), (' F  70  GLU  HG3', ' F  99  ARG HH12', -0.678, (-88.885, -18.126, -9.449)), (' B  55  ARG  HG3', ' B  66  TYR  HE1', -0.668, (-50.296, 26.423, -26.03)), (' A  51  LEU  HB2', ' A  89  TYR  CZ ', -0.655, (-23.671, -1.108, -53.593)), (' A  55  ARG  HD3', ' A  66  TYR  CZ ', -0.649, (-26.736, -15.791, -55.568)), (' E  70  GLU  HG3', ' E  99  ARG HH12', -0.645, (-76.294, -9.583, 6.424)), (' D  75  PHE  HD2', ' D 112  LEU  HG ', -0.643, (-83.233, 15.34, -37.845)), (' H  58  LYS  HD2', ' H  62  THR HG23', -0.643, (-29.467, -31.738, -35.829)), (' F  76  VAL  HB ', ' F 113  GLN  HB2', -0.636, (-78.599, -9.162, -24.823)), (' E  55  ARG  HD3', ' E  66  TYR  HE1', -0.616, (-67.889, 7.367, 11.505)), (' E   3  GLU  HB2', ' E  -2  GLY  HA3', -0.613, (-87.151, -4.935, -18.921)), (' C   4  LEU  HB2', ' D  75  PHE  HB3', -0.606, (-81.771, 18.176, -38.778)), (' C  10  ARG  HB2', ' C  32  TYR  CZ ', -0.606, (-71.693, 3.405, -51.459)), (' C  78  ASP  HB2', ' C 111  ARG HH21', -0.605, (-73.519, -8.126, -30.868)), (' B  29  LEU HD23', ' B  45  LEU HD23', -0.603, (-36.494, 14.249, -22.573)), (' G  67  THR HG21', ' G  91  ILE HD12', -0.599, (-16.168, -14.846, 3.887)), (' A   1  ASN  HA ', ' A  -2  GLY  H  ', -0.591, (-46.515, -3.737, -27.099)), (' C  73  CYS  HB2', ' C  88  LEU  HB3', -0.59, (-61.423, 1.628, -35.86)), (' C  70  GLU  HG2', ' C  92  LYS  HG2', -0.589, (-54.371, 8.649, -41.034)), (' C  78  ASP  CB ', ' C 111  ARG HH21', -0.584, (-73.693, -8.615, -31.079)), (' A  73  CYS  SG ', ' A 201  ODN  O3 ', -0.584, (-30.084, 6.332, -48.25)), (' F  73  CYS  SG ', ' F 201  ODN  H17', -0.584, (-87.903, -13.887, -14.104)), (' B  45  LEU HD11', ' B  75  PHE  HZ ', -0.583, (-38.225, 9.809, -22.675)), (' F  -6  VAL HG12', ' F 101  MET  SD ', -0.58, (-73.834, -18.232, -3.339)), (' A   0  GLY  HA3', ' D   0  GLY  N  ', -0.568, (-52.415, -0.805, -25.491)), (' E 112  LEU  H  ', ' E 112  LEU HD12', -0.562, (-64.034, -18.043, -5.432)), (' D  49  GLN  HB3', ' D  87  TYR  CZ ', -0.556, (-86.01, 27.737, -35.045)), (' E  55  ARG  HD3', ' E  66  TYR  CE1', -0.555, (-68.097, 7.502, 11.449)), (' A   3  GLU  HB2', ' A  -2  GLY  HA3', -0.551, (-45.913, -2.197, -24.324)), (' E 101  MET  O  ', ' E 105  SER  HB2', -0.547, (-73.041, -10.734, -7.83)), (' B  69  LEU  HB3', ' B  89  TYR  HB3', -0.544, (-47.747, 13.326, -28.254)), (' A   8  ALA  HA ', ' A  -8  LEU HD23', -0.538, (-29.436, -3.404, -30.737)), (' F 201  ODN  H12', ' F 201  ODN  H2 ', -0.536, (-90.358, -12.216, -7.063)), (' H  75  PHE  HD2', ' H 112  LEU HD22', -0.536, (-41.081, -23.002, -6.383)), (' H  75  PHE  CD2', ' H 112  LEU HD22', -0.535, (-41.337, -22.798, -7.113)), (' D  19 ATHR  OG1', ' D  20  GLN  N  ', -0.534, (-79.707, 36.702, -20.654)), (' F  95  ASN  OD1', ' F  98  ASN  ND2', -0.531, (-81.304, -20.221, -2.102)), (' A   6  PRO  HG3', ' B 112  LEU HD22', -0.528, (-35.024, 1.212, -26.129)), (' E  51  LEU  HB2', ' E  89  TYR  CZ ', -0.526, (-65.897, -6.576, 9.622)), (' E  72  PRO  HB3', ' E  89  TYR  CE2', -0.524, (-67.335, -8.955, 9.186)), (' B  48  LEU HD12', ' B  51  LEU HD21', -0.521, (-49.781, 15.72, -18.952)), (' C   8  ALA  HA ', ' C  -8  LEU  HA ', -0.517, (-75.536, 7.634, -43.368)), (' G  31  TYR  HE2', ' G  45  LEU HD22', -0.517, (-25.663, -7.43, -2.326)), (' D  12  MET  HB3', ' D  32  TYR  HE2', -0.516, (-79.371, 14.937, -17.593)), (' C  99  ARG  NH1', ' C 201  ODN  O4 ', -0.514, (-57.052, 9.252, -36.374)), (' H 102  VAL  O  ', ' H 106  LEU  HB2', -0.513, (-34.931, -21.069, -10.565)), (' A  79  THR HG23', ' A  82  GLY  H  ', -0.511, (-8.708, 5.94, -41.311)), (' A  55  ARG  HD3', ' A  66  TYR  CE2', -0.508, (-26.48, -15.158, -55.711)), (' A  58  LYS  HD2', ' A  65  ILE HD11', -0.508, (-34.39, -18.459, -48.656)), (' B  75  PHE  HE2', ' B  77  THR HG23', -0.507, (-35.598, 6.789, -21.58)), (' E  -8  LEU  N  ', ' E 105  SER  OG ', -0.506, (-71.189, -8.535, -10.051)), (' B  45  LEU HD11', ' B  75  PHE  CZ ', -0.504, (-38.074, 9.275, -22.68)), (' C  49  GLN  HG2', ' C  87  TYR  CZ ', -0.504, (-56.366, -5.83, -35.003)), (' F  52  LYS  HG2', ' F  52  LYS  O  ', -0.504, (-95.867, -23.76, -15.335)), (' A  72  PRO  HB3', ' A  89  TYR  CE1', -0.503, (-24.994, 1.487, -52.552)), (' D  11  GLN  HB2', ' D  29  LEU HD11', -0.5, (-83.294, 14.2, -21.949)), (' C  58  LYS  HD2', ' C  63  GLY  HA3', -0.498, (-56.255, 6.822, -62.451)), (' E 107  ALA  HA ', ' E 112  LEU HD11', -0.496, (-66.069, -16.561, -5.103)), (' C  73  CYS  SG ', ' C 201  ODN  C13', -0.496, (-58.572, 4.705, -34.361)), (' G  72  PRO  HB3', ' G  89  TYR  CZ ', -0.495, (-14.224, -6.83, -4.933)), (' D 101  MET  O  ', ' D 105  SER  HB3', -0.495, (-73.552, 10.932, -31.997)), (' H  19  THR  OG1', ' H  20  GLN  N  ', -0.495, (-37.846, -44.989, -22.807)), (' D  41  VAL HG21', ' D  56  PHE  CE2', -0.492, (-74.641, 22.563, -19.243)), (' E  94  LEU HD23', ' E  99  ARG  HG2', -0.492, (-76.674, -8.663, 1.517)), (' F  75  PHE  HE2', ' F  77  THR HG23', -0.491, (-78.112, -14.889, -21.604)), (' B  20  GLN  HB3', ' B  66  TYR  CE2', -0.49, (-54.883, 25.529, -26.677)), (' B  83  PRO  HG3', ' G 111  ARG  NH2', -0.487, (-34.222, 1.201, -11.746)), (' E  55  ARG  HB2', ' E  66  TYR  CE1', -0.487, (-68.705, 6.242, 11.393)), (' A  42  LEU  O  ', ' A  91  ILE HG12', -0.487, (-31.991, -3.444, -45.939)), (' G  49  GLN  HG2', ' G  87  TYR  CZ ', -0.485, (-13.556, -2.145, -8.081)), (' F   7  VAL  HB ', ' F  -7  GLU  HG2', -0.484, (-72.578, -23.995, -6.051)), (' E   3  GLU  OE2', ' F  74  ARG  HD3', -0.483, (-86.949, -8.307, -22.89)), (' E  84  LYS  HG2', ' E  86  LYS  HD3', -0.483, (-57.106, -10.791, 1.303)), (' E  67  THR HG21', ' E  91  ILE HD12', -0.482, (-74.403, -1.019, 6.081)), (' H  90  PHE  CE1', ' H  99  ARG  HA ', -0.482, (-29.68, -25.788, -11.349)), (' H  11  GLN  HB2', ' H  29  LEU HD11', -0.481, (-41.226, -22.349, -21.15)), (' H  12  MET  HB3', ' H  32  TYR  HE2', -0.481, (-37.643, -23.225, -25.905)), (' D 106  LEU  O  ', ' D 110  VAL HG22', -0.48, (-81.759, 11.617, -35.029)), (' B  75  PHE  CE2', ' B  77  THR HG23', -0.48, (-35.837, 6.776, -21.252)), (' H  73  CYS  HA ', ' H 201  ODN  H18', -0.478, (-35.938, -32.046, -6.073)), (' A  -6  VAL HG22', ' B 107  ALA  HB2', -0.478, (-34.586, 2.01, -29.764)), (' G   3  GLU  OE2', ' H  74  ARG  HD3', -0.475, (-42.641, -31.557, -1.542)), (' H  25  ASP  N  ', ' H  25  ASP  OD1', -0.475, (-47.167, -36.698, -25.586)), (' C  79  THR HG21', ' C  84  LYS  HE3', -0.474, (-67.847, -10.272, -37.848)), (' D   3  GLU  HG3', ' D  -2  GLY  CA ', -0.472, (-57.863, 0.431, -24.602)), (' D  -9  ALA  HB2', ' D 106  LEU HD13', -0.47, (-77.956, 11.981, -29.068)), (' A  49  GLN  HG2', ' A  50  ASP  H  ', -0.469, (-22.566, 2.278, -56.374)), (' B  79  THR HG22', ' B  80  PRO  HD2', -0.469, (-32.602, 11.929, -13.913)), (' B  72  PRO  HB3', ' B  89  TYR  CE2', -0.469, (-48.264, 10.185, -24.763)), (' B  84  LYS  HD2', ' B  86  LYS  HE2', -0.467, (-37.99, 10.7, -15.268)), (' E  68  GLU  OE2', ' E  92  LYS  HE2', -0.464, (-76.095, -5.65, 14.274)), (' F  55  ARG  HG3', ' F  66  TYR  HE1', -0.463, (-91.972, -35.088, -16.961)), (' G 102  VAL  O  ', ' G 106  LEU  HB2', -0.462, (-27.589, -12.67, -6.385)), (' A   0  GLY  HA3', ' D   0  GLY  H  ', -0.461, (-52.771, -1.186, -25.507)), (' F  10  ARG  HB2', ' F  32  TYR  CZ ', -0.459, (-74.921, -31.169, -13.506)), (' A   4  LEU  HG ', ' B  73  CYS  HB3', -0.458, (-41.959, 3.837, -26.846)), (' G  55  ARG  HD3', ' G  66  TYR  CE1', -0.458, (-11.207, -7.264, 12.096)), (' B  73  CYS  HG ', ' B 201  ODN  C14', -0.457, (-44.215, 3.943, -29.547)), (' G   4  LEU  HB2', ' H  75  PHE  HB3', -0.457, (-39.287, -25.977, -4.312)), (' B  73  CYS  HB2', ' B  88  LEU  HB3', -0.456, (-42.497, 6.804, -26.941)), (' F  77  THR  HA ', ' F 111  ARG  O  ', -0.455, (-75.692, -12.475, -23.491)), (' G  41  VAL HG21', ' G  56  PHE  CZ ', -0.454, (-19.641, -12.149, 7.246)), (' D  25  ASP  N  ', ' D  25  ASP  OD1', -0.453, (-89.213, 28.801, -17.285)), (' H  75  PHE  CE1', ' H  86  LYS  HB2', -0.452, (-43.248, -26.384, -9.427)), (' C  84  LYS  HD2', ' C  86  LYS  HD3', -0.452, (-64.996, -9.054, -37.467)), (' D  84  LYS  HA ', ' D  84  LYS  HD2', -0.451, (-93.653, 19.31, -34.93)), (' F  44  LEU HD22', ' F  69  LEU HD11', -0.45, (-88.463, -24.488, -16.903)), (' B   9  LEU  O  ', ' B -10  ALA  HB3', -0.45, (-30.975, 16.775, -28.372)), (' C  75  PHE  CD2', ' C 112  LEU HD23', -0.449, (-66.29, -1.545, -32.931)), (' F  16  ALA  CB ', ' F  51  LEU HD13', -0.449, (-89.742, -24.993, -21.023)), (' A   0  GLY  HA3', ' D  -1  PRO  HB2', -0.447, (-52.595, -2.108, -24.603)), (' H  18  THR  OG1', ' H  19  THR  N  ', -0.447, (-40.884, -44.519, -19.252)), (' B 202  SO4  O1 ', ' C  52  LYS  NZ ', -0.445, (-45.046, 5.394, -44.468)), (' H  -8  LEU  N  ', ' H 105  SER  OG ', -0.444, (-33.491, -16.719, -13.454)), (' F  72  PRO  HB3', ' F  89  TYR  CE1', -0.444, (-90.017, -18.151, -18.561)), (' F  -6  VAL  N  ', ' F  -7  GLU  HG3', -0.442, (-72.917, -21.83, -4.707)), (' D 201  ODN  H27', ' D 201  ODN  H29', -0.442, (-73.227, 25.382, -40.315)), (' G  72  PRO  HB3', ' G  89  TYR  CE1', -0.442, (-14.159, -7.657, -4.821)), (' C 107  ALA  HA ', ' C 112  LEU  CD1', -0.44, (-71.092, 1.73, -31.745)), (' C  48  LEU HD12', ' C  51  LEU HD21', -0.44, (-55.799, -6.032, -43.812)), (' B 201  ODN  H12', ' B 201  ODN  H2 ', -0.439, (-49.05, 3.779, -36.224)), (' E  73  CYS  HA ', ' E 201  ODN  H18', -0.438, (-69.217, -15.491, 6.842)), (' E  97  LEU HD22', ' F 201  ODN  H8 ', -0.437, (-85.502, -11.104, -6.306)), (' F  -5  LEU  HA ', ' F  -5  LEU HD23', -0.436, (-73.718, -21.445, 0.844)), (' E 112  LEU HD13', ' F   6  PRO  HG3', -0.436, (-65.9, -19.474, -4.552)), (' B  -7  GLU  HB2', ' B 101  MET  HE3', -0.435, (-33.298, 12.56, -37.704)), (' C  60  ASP  HB2', ' C  62  THR  OG1', -0.434, (-58.852, 6.769, -65.914)), (' C  13  SER  HB3', ' C  26  ASP  OD2', -0.431, (-63.398, -6.278, -52.624)), (' B   7  VAL HG12', ' B   8  ALA  O  ', -0.43, (-29.929, 18.436, -34.789)), (' C  -5  LEU HD23', ' C  -6  VAL  O  ', -0.43, (-72.754, 15.884, -43.452)), (' A  10  ARG  HB2', ' A  32  TYR  CZ ', -0.429, (-26.998, -11.15, -36.916)), (' E  32  TYR  HA ', ' E  40  PHE  O  ', -0.429, (-73.749, 0.647, -2.455)), (' C  97  LEU  O  ', ' C 101  MET  HG3', -0.428, (-68.353, 14.373, -37.802)), (' A  24  THR  OG1', ' A  25  ASP  N  ', -0.427, (-17.607, -13.249, -55.14)), (' E  43  ALA  HB1', ' E  89  TYR  O  ', -0.427, (-70.707, -6.98, 2.702)), (' G  69  LEU  HA ', ' G  69  LEU HD23', -0.426, (-14.063, -13.015, 0.649)), (' A  32  TYR  HA ', ' A  40  PHE  O  ', -0.425, (-31.408, -8.229, -40.461)), (' F  16  ALA  HB3', ' F  51  LEU HD13', -0.425, (-89.728, -24.567, -21.134)), (' C 201  ODN  H11', ' C 201  ODN  H4 ', -0.425, (-57.593, 11.552, -34.209)), (' A -10  ALA  HB3', ' A 109  THR HG21', -0.424, (-22.373, 1.264, -32.422)), (' C   6  PRO  HG2', ' D 112  LEU  HB3', -0.424, (-81.624, 12.661, -40.656)), (' E  75  PHE  HB2', ' E 112  LEU HD23', -0.424, (-64.398, -16.991, -0.407)), (' A   8  ALA  CA ', ' A  -8  LEU HD23', -0.424, (-29.436, -3.761, -30.375)), (' H  49  GLN  HB3', ' H  87  TYR  CZ ', -0.423, (-43.77, -34.88, -8.084)), (' F 201  ODN  H11', ' F 201  ODN  H4 ', -0.423, (-88.746, -14.051, -6.777)), (' F  58  LYS  HG3', ' F  63  GLY  H  ', -0.423, (-88.403, -41.781, -10.808)), (' C  51  LEU HD12', ' C  89  TYR  CE1', -0.423, (-57.306, -1.959, -41.497)), (' E   3  GLU  HB3', ' E  -3  GLN  O  ', -0.422, (-85.354, -4.66, -18.044)), (' G  73  CYS  HB2', ' G  88  LEU  HB3', -0.421, (-19.59, -9.754, -7.434)), (' H  31  TYR  HE2', ' H  45  LEU HD22', -0.421, (-39.173, -23.984, -14.533)), (' D  72  PRO  HB3', ' D  89  TYR  CZ ', -0.42, (-80.904, 26.652, -31.688)), (' D  68  GLU  HB3', ' D  92  LYS  HD2', -0.419, (-71.63, 31.301, -26.118)), (' A 106  LEU  O  ', ' A 110  VAL HG22', -0.419, (-23.407, 6.326, -36.372)), (' A  84  LYS  HG2', ' A  86  LYS  HD3', -0.419, (-15.138, 2.745, -44.347)), (' F  45  LEU HD11', ' F  75  PHE  HZ ', -0.419, (-80.079, -17.241, -20.601)), (' G  77  THR  HA ', ' G 111  ARG  O  ', -0.419, (-28.185, -2.825, -11.844)), (' H  48  LEU  HA ', ' H  48  LEU HD23', -0.418, (-46.743, -35.619, -12.272)), (' A  97  LEU HD22', ' B 201  ODN  C5 ', -0.417, (-43.842, 2.926, -37.22)), (' G   8  ALA  HA ', ' G  -8  LEU  HA ', -0.417, (-33.357, -14.951, 0.37)), (' G  97  LEU  O  ', ' G 101  MET  HG3', -0.417, (-26.34, -21.776, -5.25)), (' C  75  PHE  HB3', ' D   4  LEU  HB2', -0.416, (-64.065, -0.037, -30.738)), (' A  51  LEU HD12', ' A  89  TYR  CE2', -0.415, (-22.89, -1.969, -51.453)), (' F  10  ARG  HB2', ' F  32  TYR  CE1', -0.414, (-75.292, -30.654, -13.734)), (' C  69  LEU  HA ', ' C  69  LEU HD23', -0.413, (-55.989, 5.411, -43.607)), (' E 111  ARG  HA ', ' E 111  ARG  HD3', -0.412, (-63.104, -18.635, -8.013)), (' C  73  CYS  CA ', ' C 201  ODN  H18', -0.411, (-58.682, 2.53, -33.513)), (' C  -6  VAL  N  ', ' C  -7  GLU  HG3', -0.411, (-73.26, 13.059, -42.798)), (' A  -6  VAL  CG2', ' B 107  ALA  HB2', -0.41, (-34.588, 2.383, -29.981)), (' E  55  ARG  HB2', ' E  66  TYR  HE1', -0.41, (-68.169, 6.315, 11.603)), (' E  51  LEU  HB2', ' E  89  TYR  CE2', -0.409, (-66.463, -6.359, 10.247)), (' G   6  PRO  HG3', ' H 112  LEU HD12', -0.409, (-38.305, -21.417, -3.411)), (' B  25  ASP  N  ', ' B  25  ASP  OD1', -0.408, (-48.68, 24.058, -16.993)), (' H  -8  LEU  HB2', ' H 105  SER  OG ', -0.408, (-32.913, -15.607, -13.321)), (' A  49  GLN  HA ', ' A  89  TYR  OH ', -0.407, (-22.145, 1.179, -53.765)), (' D  75  PHE  CD2', ' D 112  LEU  HG ', -0.407, (-82.979, 15.514, -37.073)), (' D  48  LEU  HA ', ' D  48  LEU HD23', -0.404, (-88.644, 27.873, -30.548)), (' E  49  GLN  HG2', ' E  49  GLN  O  ', -0.404, (-64.36, -10.714, 12.983)), (' A  73  CYS  HA ', ' A 201  ODN  H18', -0.404, (-27.561, 8.235, -49.679)), (' H  84  LYS  HA ', ' H  84  LYS  HD2', -0.403, (-51.489, -26.777, -8.306)), (' E 201  ODN  H6 ', ' F  -4  PHE  HE2', -0.402, (-76.087, -16.994, 4.77)), (' C  45  LEU  HA ', ' C  45  LEU HD12', -0.402, (-62.996, -1.316, -39.998)), (' C   3  GLU  O  ', ' C  -4  PHE  HA ', -0.401, (-77.622, 21.042, -42.504)), (' C  75  PHE  CZ ', ' C  86  LYS  HB2', -0.4, (-64.747, -3.956, -35.922))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
