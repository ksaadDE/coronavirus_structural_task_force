# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 215 ', 'ASP', None, (253.05700000000002, 171.525, 203.869)), ('B', ' 146 ', 'PRO', None, (195.947, 127.536, 297.255))]
data['rota'] = [('C', ' 166 ', 'CYS', 0.017918047127152135, (206.02400000000011, 237.333, 238.226)), ('A', ' 525 ', 'CYS', 0.0, (221.26, 216.776, 228.788)), ('B', ' 133 ', 'CYS', 0.01890925317734722, (195.555, 122.73000000000003, 310.134)), ('D', ' 391 ', 'CYS', 0.0, (212.722, 167.09499999999997, 231.383))]
data['cbeta'] = []
data['probe'] = [(' A 755  GLN  O  ', ' D 968  SER  OG ', -0.719, (186.512, 189.781, 206.602)), (' D 326  ILE HD12', ' D 539  VAL HG21', -0.717, (201.815, 157.291, 209.04)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.711, (220.441, 221.435, 164.417)), (' A 968  SER  OG ', ' C 755  GLN  O  ', -0.709, (209.843, 186.552, 206.857)), (' C 216  LEU  O  ', ' C 218  GLN  NE2', -0.707, (196.522, 248.714, 201.514)), (' D 907  ASN  ND2', ' D 913  GLN  OE1', -0.662, (188.024, 196.009, 136.853)), (' A 731  MET  N  ', ' A 774  GLN  OE1', -0.645, (200.31, 179.992, 178.08)), (' C 711  SER  OG ', ' D 895  GLN  NE2', -0.639, (176.557, 210.154, 140.23)), (' D 811  LYS  NZ ', ' D 820  ASP  OD2', -0.622, (164.547, 199.727, 165.164)), (' B 269  ASP  OD1', ' B 272  GLY  N  ', -0.619, (189.564, 140.442, 304.132)), (' A 854  LYS  N  ', ' A 858  LEU HD12', -0.616, (204.023, 174.05, 194.486)), (' A1011  GLN  OE1', ' A1014  ARG  NH1', -0.611, (204.382, 183.769, 186.467)), (' A 902  MET  HE3', ' A 916  LEU HD11', -0.609, (208.792, 176.833, 141.382)), (' D 125  ASN  ND2', ' D 172  SER  O  ', -0.604, (145.84, 185.96, 223.95)), (' C 280  ASN  OD1', ' C 284  THR  N  ', -0.598, (212.919, 233.441, 199.083)), (' C1040  VAL  O  ', ' D1030  SER  OG ', -0.595, (193.544, 202.634, 157.502)), (' A 965  GLN  NE2', ' A1003  SER  OG ', -0.584, (204.918, 185.768, 200.271)), (' D 212  LEU HD11', ' D 215  ASP  HA ', -0.584, (148.543, 162.772, 205.096)), (' C 136  CYS  SG ', ' C 137  ASN  N  ', -0.57, (192.898, 252.603, 234.549)), (' C 106  PHE  O  ', ' C 117  LEU  N  ', -0.568, (199.532, 240.12, 229.934)), (' B 190  MET  O  ', ' B 194  ASN  ND2', -0.566, (214.025, 159.037, 301.325)), (' C 731  MET  N  ', ' C 774  GLN  OE1', -0.559, (211.112, 203.067, 178.203)), (' A 280  ASN  OD1', ' A 284  THR  N  ', -0.557, (226.128, 163.299, 198.045)), (' C 324  GLU  OE2', ' C 537  LYS  NZ ', -0.556, (164.733, 220.394, 209.426)), (' A 310  LYS  HG3', ' A 664  ILE HD11', -0.552, (230.442, 187.648, 177.566)), (' C 393  THR  O  ', ' C 523  THR  OG1', -0.551, (162.627, 191.451, 234.273)), (' C 725  GLU  OE2', ' C1028  LYS  NZ ', -0.546, (200.523, 206.184, 163.091)), (' C  99  ASN  ND2', ' C 178  ASP  O  ', -0.543, (209.815, 257.33, 215.033)), (' A1040  VAL  O  ', ' C1030  SER  OG ', -0.541, (208.408, 195.52, 157.516)), (' B 117  ASN  OD1', ' B 121  ASN  ND2', -0.531, (214.404, 142.143, 298.892)), (' C 105  ILE HD11', ' C 241  LEU HD21', -0.529, (198.549, 248.606, 228.945)), (' D 708  SER  OG ', ' D 711  SER  OG ', -0.528, (195.6, 165.603, 138.55)), (' A 740  MET  SD ', ' D 319  ARG  NH1', -0.522, (194.445, 170.654, 203.763)), (' A  42  VAL HG13', ' A  44  ARG  CZ ', -0.514, (218.068, 167.602, 203.749)), (' A 517  LEU HD23', ' C 983  ARG  CZ ', -0.513, (212.022, 211.524, 220.576)), (' A 973  ILE  N  ', ' A 992  GLN  OE1', -0.512, (205.63, 185.445, 216.27)), (' C 501  ASN  O  ', ' C 506  GLN  NE2', -0.509, (151.567, 214.99, 264.275)), (' A 105  ILE HD11', ' A 241  LEU HD21', -0.509, (245.726, 168.954, 227.9)), (' B 417  HIS  N  ', ' B 543  ASP  OD2', -0.504, (175.015, 147.057, 276.318)), (' A 354  ASN  OD1', ' A 399  SER  OG ', -0.495, (205.613, 219.892, 242.722)), (' D1135  ASN  OD1', ' D1136  THR  N  ', -0.494, (197.303, 175.185, 119.737)), (' D 731  MET  N  ', ' D 774  GLN  OE1', -0.491, (185.884, 200.903, 178.675)), (' C 132  GLU  O  ', ' C 134  GLN  NE2', -0.486, (199.084, 243.578, 240.494)), (' C 598  ILE HG23', ' C 664  ILE HG21', -0.485, (186.546, 223.46, 180.962)), (' A  42  VAL HG13', ' A  44  ARG  NH2', -0.484, (217.809, 167.482, 204.482)), (' C 105  ILE  CD1', ' C 241  LEU HD21', -0.482, (198.419, 248.404, 228.497)), (' B  47  SER  HG ', ' B 349  TRP  HH2', -0.482, (207.003, 140.868, 283.421)), (' C 738  CYS  SG ', ' C 739  THR  N  ', -0.48, (216.059, 196.415, 200.251)), (' C 701  ALA  O  ', ' D 787  GLN  NE2', -0.479, (180.047, 217.414, 157.098)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.473, (189.602, 231.158, 196.12)), (' A 474  GLN  NE2', ' A 478  LYS  O  ', -0.468, (170.514, 221.3, 240.696)), (' D 105  ILE  CD1', ' D 241  LEU HD21', -0.468, (153.548, 168.301, 228.474)), (' D 689  SER  O  ', ' D 689  SER  OG ', -0.467, (168.552, 156.655, 176.334)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.462, (239.08, 171.955, 198.634)), (' A 780  GLU  O  ', ' A 784  GLN  NE2', -0.461, (193.939, 181.446, 164.372)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.461, (199.428, 240.936, 198.683)), (' A 394  ASN  ND2', ' C 200  TYR  OH ', -0.458, (208.752, 224.468, 226.194)), (' B 499  ASP  O  ', ' B 502  SER  OG ', -0.457, (197.439, 140.516, 308.656)), (' A  43  PHE  O  ', ' D 563  GLN  NE2', -0.455, (219.996, 163.195, 202.819)), (' D 280  ASN  OD1', ' D 284  THR  N  ', -0.454, (158.162, 187.254, 198.316)), (' C 748  GLU  N  ', ' C 748  GLU  OE2', -0.454, (220.211, 197.897, 214.278)), (' A 383  SER  N  ', ' C 983  ARG  O  ', -0.454, (213.561, 205.352, 225.31)), (' B 389  PRO  O  ', ' B 393  ARG  N  ', -0.453, (206.663, 159.891, 278.561)), (' B  31  LYS  NZ ', ' B  35  GLU  OE2', -0.452, (223.985, 159.364, 276.756)), (' D  14  GLN  NE2', ' D 161  SER  OG ', -0.452, (148.936, 165.368, 240.28)), (' B 590  PRO  O  ', ' B 593  THR  OG1', -0.451, (166.046, 151.031, 295.582)), (' C 777  ASN  OD1', ' C1019  ARG  NH1', -0.449, (210.638, 195.829, 173.121)), (' B 536  GLU  N  ', ' B 536  GLU  OE2', -0.444, (169.691, 158.077, 279.701)), (' A 704  SER  O  ', ' A 704  SER  OG ', -0.443, (231.067, 203.609, 148.669)), (' A 614  GLY  N  ', ' A 647  ALA  O  ', -0.442, (227.615, 204.182, 187.716)), (' C1089  PHE  O  ', ' C1121  PHE  N  ', -0.436, (187.778, 196.12, 128.023)), (' A  43  PHE  CD2', ' D 560  LEU HD12', -0.435, (224.915, 162.668, 204.771)), (' B 443  ALA  O  ', ' B 447  VAL  N  ', -0.433, (180.229, 147.671, 297.858)), (' D 212  LEU HD11', ' D 215  ASP  CA ', -0.432, (149.003, 163.017, 205.107)), (' A 105  ILE  CD1', ' A 241  LEU HD21', -0.425, (245.316, 169.261, 227.925)), (' D 100  ILE  O  ', ' D 243  ALA  N  ', -0.424, (145.646, 166.322, 221.89)), (' A  86  PHE  N  ', ' A 236  THR  O  ', -0.422, (239.535, 180.821, 222.917)), (' A 334  ASN  O  ', ' A 362  VAL  N  ', -0.421, (223.339, 222.157, 232.686)), (' B 457  GLU  OE2', ' B 513  ILE  N  ', -0.42, (196.429, 152.638, 300.062)), (' D 474  GLN  NE2', ' D 478  LYS  O  ', -0.419, (231.532, 176.496, 277.285)), (' C 666  ILE HD11', ' C 672  ALA  HB2', -0.417, (181.974, 223.259, 180.096)), (' A 563  GLN  O  ', ' A 577  ARG  NE ', -0.416, (221.294, 229.534, 212.388)), (' B  19  SER  N  ', ' D 475  ALA  O  ', -0.415, (223.716, 178.269, 275.987)), (' D 212  LEU HD12', ' D 217  PRO  HD3', -0.414, (148.942, 165.615, 203.66)), (' B 107  VAL HG21', ' B 193  ALA  HB3', -0.413, (216.65, 159.5, 302.92)), (' A 496  GLY  O  ', ' A 501  ASN  ND2', -0.413, (194.933, 206.835, 255.575)), (' C 880  GLY  O  ', ' C 884  SER  N  ', -0.412, (217.449, 204.255, 148.919)), (' D 584  ILE  C  ', ' D 585  LEU HD12', -0.409, (211.813, 154.251, 204.894)), (' D  14  GLN HE21', ' D 161  SER  HG ', -0.409, (150.075, 165.245, 240.279)), (' A 310  LYS  CG ', ' A 664  ILE HD11', -0.409, (230.055, 187.3, 177.707)), (' A 554  GLU  O  ', ' A 556  ASN  ND2', -0.408, (229.212, 224.821, 199.95)), (' D 374  PHE  CB ', ' D 434  ILE HD11', -0.407, (207.225, 154.239, 247.376)), (' A 280  ASN  ND2', ' A 284  THR  OG1', -0.406, (228.623, 162.748, 196.967)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.405, (235.578, 185.355, 195.086)), (' A 815  ARG  NH2', ' A 820  ASP  OD1', -0.403, (210.251, 162.446, 169.359)), (' C 326  ILE HD12', ' C 539  VAL HG21', -0.403, (165.211, 211.744, 209.737)), (' B 268  GLY  O  ', ' B 277  ASN  ND2', -0.403, (186.136, 135.158, 300.012))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
