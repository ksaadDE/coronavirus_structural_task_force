# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (125.4530000000002, 151.522, 152.74700000000013)), ('A', ' 607 ', 'SER', None, (122.13700000000014, 119.42099999999999, 117.374)), ('B', ' 183 ', 'PRO', None, (147.72000000000006, 139.647, 161.97))]
data['rota'] = [('A', ' 330 ', 'VAL', 0.23102602690593185, (134.361, 164.953, 144.359)), ('A', ' 495 ', 'VAL', 0.20910171226106192, (111.67700000000015, 141.517, 142.79800000000012)), ('A', ' 758 ', 'LEU', 0.10252768072091757, (124.75700000000016, 128.701, 131.043)), ('A', ' 761 ', 'ASP', 0.11497121552792408, (129.58100000000002, 126.549, 131.753))]
data['cbeta'] = []
data['probe'] = [(' C  68  ILE HG13', ' G 111  ARG  HG2', -0.622, (137.761, 112.153, 184.26)), (' A 758  LEU HD13', ' A 813  CYS  SG ', -0.61, (124.101, 125.469, 133.909)), (' G  84  THR  OG1', ' G  85  SER  N  ', -0.608, (125.455, 121.269, 175.447)), (' A 128  VAL HG22', ' A 244  ILE HG13', -0.606, (152.061, 141.205, 118.978)), (' B 100  ASN  O  ', ' B 104  ASN  ND2', -0.595, (137.571, 173.566, 154.992)), (' A 892  HIS  HE2', ' A 912  THR  HG1', -0.585, (103.494, 111.774, 154.515)), (' A 107  ASP  OD2', ' A 110  MET  N  ', -0.584, (172.687, 133.774, 84.601)), (' A 726  ARG  NH2', ' A 744  GLU  OE2', -0.566, (130.563, 133.804, 102.15)), (' A 614  LEU  HB2', ' A 802  GLU  HB3', -0.557, (131.78, 114.984, 123.93)), (' A  74  ARG  HE ', ' A 113  HIS  HE1', -0.553, (170.949, 133.76, 94.665)), (' A 335  VAL  O  ', ' A 338  VAL  HB ', -0.549, (123.885, 171.733, 154.526)), (' G 141  THR  HB ', ' G 147  PHE  HE1', -0.548, (153.816, 110.182, 180.999)), (' A 885  LEU HD22', ' A 916  TRP  HA ', -0.547, (110.553, 107.333, 148.847)), (' G 173  SER  H  ', ' G 176  ASN  HB2', -0.544, (161.807, 112.49, 194.048)), (' C  60  LEU HD12', ' G 106  ILE HG22', -0.538, (143.71, 114.347, 175.229)), (' A   5  GLN  O  ', ' A   9  ASN  ND2', -0.525, (183.428, 134.832, 99.164)), (' A 421  ASP  HA ', ' A 424  VAL HG22', -0.522, (125.455, 105.09, 160.864)), (' C  16  VAL HG11', ' G  91  LEU HD22', -0.519, (133.763, 118.061, 170.916)), (' A 568  ASN  OD1', ' A 654  ARG  NH2', -0.516, (121.657, 149.686, 135.595)), (' A 575  LEU HD13', ' A 641  LYS  HG3', -0.514, (117.395, 142.191, 124.899)), (' P1201  1RP  H11', " P1201  1RP  O5'", -0.511, (129.405, 130.475, 139.761)), (' A 824  ASP  N  ', ' A 824  ASP  OD1', -0.509, (108.308, 104.117, 126.441)), (' A 105  ARG HH21', ' A 107  ASP  HB2', -0.508, (175.007, 131.88, 84.114)), (' A 333  ILE HD12', ' A 361  LEU  HA ', -0.506, (126.952, 171.772, 144.902)), (' A  74  ARG  HE ', ' A 113  HIS  CE1', -0.501, (170.812, 134.464, 94.435)), (' A 332  LYS  HB2', ' B 107  ILE HD13', -0.499, (134.493, 170.515, 148.779)), (' A 694  PHE  HZ ', ' A 790  ASN HD21', -0.498, (137.505, 134.76, 130.344)), (' A 304  ASP  N  ', ' A 304  ASP  OD1', -0.497, (127.722, 151.695, 119.362)), (' A 623  ASP  N  ', ' A 623  ASP  OD1', -0.494, (135.662, 134.54, 138.524)), (' P1201  1RP  NAA', ' T  10    U  O4 ', -0.492, (125.747, 132.532, 146.089)), (' A 647  SER  OG ', ' A 648  LEU  N  ', -0.486, (120.793, 159.287, 123.127)), (' A 720  VAL HG11', ' A 775  LEU HD13', -0.485, (136.784, 125.029, 106.221)), (' A 541  GLN HE21', ' A 668  MET  HE2', -0.484, (130.1, 146.441, 155.484)), (' B 100  ASN  HB3', ' B 104  ASN HD21', -0.482, (136.346, 173.445, 155.685)), (' A 304  ASP  HB2', ' A 636  LEU HD13', -0.481, (129.035, 149.529, 122.528)), (' A 330  VAL HG21', ' B 117  LEU HD13', -0.48, (135.433, 161.738, 147.292)), (' G 128  LEU  O  ', ' G 187  THR  HA ', -0.478, (157.427, 119.432, 177.27)), (' A 569  ARG  O  ', ' A 573  GLN  HB2', -0.472, (114.577, 145.1, 135.355)), (' A 239  SER  OG ', ' A 465  ASP  OD1', -0.47, (142.674, 144.324, 115.682)), (' A 269  ASP  HB3', ' A 272  LYS  HB2', -0.468, (147.574, 166.991, 138.843)), (' G 161  ASP  HA ', ' G 184  LEU  HB2', -0.464, (156.952, 120.453, 188.638)), (' G  95  LEU HD13', ' G 107  ILE HD11', -0.463, (137.895, 111.86, 172.583)), (' A 836  ARG HH12', ' A 840  ALA  HB2', -0.46, (124.023, 118.791, 149.512)), (' A 795  SER  OG ', ' A 798  LYS  NZ ', -0.457, (143.957, 123.939, 134.365)), (' A 696  ILE HG23', ' A 755  MET  HE1', -0.451, (128.595, 131.622, 121.066)), (' A 837  ILE HG21', ' A 866  ALA  HB2', -0.449, (120.834, 112.485, 146.376)), (' A 291  ASP  N  ', ' A 291  ASP  OD1', -0.447, (143.027, 155.045, 111.172)), (' A 417  LYS  HD2', ' G  90  MET  HE3', -0.446, (127.04, 112.683, 166.854)), (' P1201  1RP  CAO', ' T  10    U  H3 ', -0.441, (125.933, 134.159, 144.867)), (' A 402  THR  OG1', ' A 403  ASN  N  ', -0.441, (136.657, 151.882, 163.387)), (' G 100  ASN  HB3', ' G 103  LEU HD12', -0.44, (141.746, 107.294, 167.812)), (' A 755  MET  HG2', ' A 764  VAL HG12', -0.436, (129.705, 125.619, 121.896)), (' B 159  VAL HG22', ' B 186  VAL HG22', -0.436, (151.473, 149.209, 165.575)), (' A 603  LYS  HA ', ' A 603  LYS  HD2', -0.434, (119.633, 116.053, 120.918)), (' A 303  ASP  N  ', ' A 303  ASP  OD1', -0.434, (129.129, 155.22, 117.888)), (' G  92  PHE  HA ', ' G  95  LEU  HB2', -0.434, (134.303, 111.226, 172.362)), (' G  87  MET  HA ', ' G  90  MET  HG2', -0.432, (127.157, 116.709, 170.277)), (' C  16  VAL HG21', ' G  88  GLN  HG2', -0.43, (131.685, 119.846, 173.695)), (' A 611  ASN  ND2', ' A 769  THR  OG1', -0.428, (133.211, 115.775, 109.372)), (' A 874  ASN  HB3', ' A 877  TYR  HB2', -0.428, (126.396, 103.763, 141.083)), (' A 846  ASP  HB3', ' A 849  LYS  HG3', -0.427, (119.208, 124.197, 159.803)), (' A 657  ASN  O  ', ' A 661  GLN  HB2', -0.425, (127.177, 151.112, 138.127)), (' G 177  SER  O  ', ' G 182  TRP  NE1', -0.423, (155.298, 115.68, 195.745)), (' C  49  PHE  HZ ', ' G  98  LEU HD22', -0.42, (139.077, 106.693, 163.951)), (' G 134  ASP  O  ', ' G 137  THR  OG1', -0.42, (151.273, 111.811, 188.594)), (' A 924  MET  HB3', ' A 924  MET  HE3', -0.418, (111.149, 116.477, 138.994)), (' B  75  ARG  HA ', ' B  75  ARG  HD2', -0.416, (101.81, 151.343, 157.272)), (' A 322  PRO  O  ', ' A 325  SER  OG ', -0.415, (145.298, 158.419, 138.281)), (' G 106  ILE HD11', ' G 150  ALA  HB2', -0.414, (149.366, 112.329, 173.139)), (' A 468  GLN  NE2', ' A 705  ASN  OD1', -0.413, (141.301, 136.364, 116.9)), (' A 790  ASN  HB3', ' A 792  VAL HG22', -0.412, (142.001, 134.054, 130.559)), (' C  16  VAL  HA ', ' C  19  GLN  HG2', -0.412, (131.505, 123.423, 170.5)), (' A 836  ARG  NH1', ' A 840  ALA  HB2', -0.411, (124.16, 118.678, 149.448)), (' B 100  ASN  HB3', ' B 104  ASN  ND2', -0.411, (136.439, 173.445, 155.713)), (' A 757  ILE HD13', ' A 762  ALA  CB ', -0.407, (129.24, 127.334, 126.56)), (' A 838  LEU  HA ', ' A 838  LEU HD23', -0.406, (123.762, 111.179, 151.536)), (' G 132  ILE  HB ', ' G 184  LEU HD23', -0.406, (154.286, 115.949, 187.048)), (' A  82  HIS  NE2', ' A 222  PHE  O  ', -0.406, (156.093, 149.441, 94.331)), (' G 147  PHE  HB3', ' G 154  TRP  O  ', -0.403, (159.411, 111.311, 176.627)), (' A 754  SER  O  ', ' A 764  VAL  HA ', -0.403, (128.339, 123.177, 121.436)), (' A  10  ARG  HA ', ' A  10  ARG  HD2', -0.402, (180.284, 141.437, 97.54)), (' A 208  ASP  N  ', ' A 208  ASP  OD1', -0.401, (154.91, 140.9, 108.38)), (' A 833  ASP  OD2', ' A 835  SER  OG ', -0.4, (131.025, 113.531, 145.425)), (' A 750  ARG  HB3', ' A 750  ARG  HE ', -0.4, (122.287, 127.657, 114.035))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
