# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 111  ASP  OD2', ' A 113  LYS  NZ ', -1.105, (262.205, 235.201, 213.326)), (' A 149  ASN  OD1', ' A 151  SER  OG ', -0.861, (269.057, 270.521, 217.85)), (' L  15  PRO  O  ', ' L  17  GLN  NE2', -0.832, (322.989, 262.542, 218.693)), (' A  21  ARG  O  ', ' A  23  GLN  NE2', -0.824, (280.915, 237.022, 231.043)), (' H  69  GLN  O  ', ' H  72  GLN  OE1', -0.701, (289.224, 287.754, 201.97)), (' A  63  THR  HG1', ' A  65  PHE  HE1', -0.662, (267.289, 239.073, 239.133)), (' L 108  ASP  N  ', ' L 115  HIS  O  ', -0.62, (293.087, 282.753, 215.201)), (' H  95  ARG  NE ', ' H  97  GLU  OE2', -0.601, (296.371, 283.308, 189.412)), (' A 249  LEU HD22', ' H 111  ARG  NH1', -0.593, (285.175, 268.861, 224.081)), (' H 116  ASP  HB3', ' H 117  PRO  HD3', -0.588, (290.969, 263.308, 213.885)), (' A  91  TYR  OH ', ' A 191  GLU  OE1', -0.576, (258.068, 247.687, 245.191)), (' A 156  GLU  O  ', ' A 159  VAL HG22', -0.538, (265.127, 251.768, 217.767)), (' L  83  SER  OG ', ' L  86  SER  OG ', -0.533, (307.666, 282.087, 224.62)), (' A 108  THR HG23', ' A 109  THR  H  ', -0.529, (258.051, 235.713, 220.143)), (' L  41  TRP  CD1', ' L  89  LEU HD21', -0.514, (304.378, 271.587, 219.855)), (' H  11  GLU  OE2', ' H  19  VAL HG23', -0.514, (287.783, 270.038, 190.042)), (' L  83  SER  HG ', ' L  86  SER  HG ', -0.513, (307.741, 281.943, 225.177)), (' A 249  LEU HD21', ' H 110  VAL  CG2', -0.51, (282.347, 268.31, 222.65)), (' A 246  ARG  NH2', ' H  36  GLU  OE2', -0.504, (277.246, 259.85, 216.292)), (' A 150  LYS  HD3', ' A 150  LYS  N  ', -0.501, (272.499, 274.803, 218.923)), (' A 159  VAL HG23', ' A 160  TYR  HD1', -0.499, (263.629, 249.77, 217.679)), (' L 108  ASP  OD1', ' L 110  SER  HB3', -0.499, (293.123, 287.673, 214.681)), (' A  30  ASN  O  ', ' A  30  ASN  OD1', -0.494, (264.196, 241.209, 251.932)), (' L  94  LEU HD22', ' L 126  VAL HG21', -0.493, (319.106, 262.472, 214.043)), (' A 179  LEU HD21', ' A 207  HIS  HB3', -0.49, (257.711, 258.798, 243.01)), (' A  21  ARG  HG2', ' A  21  ARG HH11', -0.486, (285.232, 240.794, 227.383)), (' A 257  GLY  O  ', ' A 259  THR HG23', -0.484, (281.364, 255.961, 225.466)), (' A 169  GLU  OE1', ' A 171  VAL HG23', -0.481, (250.061, 257.687, 220.177)), (' H 116  ASP  HB3', ' H 117  PRO  CD ', -0.477, (291.098, 263.517, 213.815)), (' L 116  TRP  CD1', ' L 118  PHE  CE2', -0.475, (295.171, 276.122, 211.087)), (' A 124  THR  O  ', ' A 125  ASN  OD1', -0.47, (254.814, 264.011, 226.241)), (' A 151  SER  OG ', ' A 153  MET  HE2', -0.469, (268.713, 269.49, 218.092)), (' A 145  TYR  CE2', ' A 147  LYS  HA ', -0.467, (275.56, 270.429, 217.402)), (' H  81  ASP  OD2', ' H  84  THR  N  ', -0.465, (273.797, 262.603, 201.402)), (' L  41  TRP  CE2', ' L  89  LEU HD21', -0.465, (305.332, 272.633, 219.668)), (' H  94  LEU HD13', ' H 126  VAL HG11', -0.463, (291.86, 274.906, 188.083)), (' L  99  GLU  OE2', ' L 124  LEU  O  ', -0.463, (315.351, 266.586, 209.147)), (' H  84  THR  C  ', ' H  85  ASP  OD2', -0.462, (277.054, 260.248, 203.502)), (' A 179  LEU HD12', ' A 187  LYS  O  ', -0.461, (261.872, 260.715, 245.273)), (' A 199  GLY  O  ', ' A 200  TYR  HD2', -0.46, (242.329, 241.711, 227.508)), (' H  29  THR HG23', ' H  36  GLU  HG3', -0.458, (276.982, 262.631, 214.427)), (' A 186  PHE  HE1', ' A 213  VAL  HA ', -0.457, (271.027, 254.148, 250.204)), (' A 206  LYS  HD2', ' A 207  HIS  H  ', -0.456, (253.79, 256.095, 244.211)), (' H   3  GLN  HA ', ' H   3  GLN  OE1', -0.454, (289.39, 256.989, 208.932)), (' H  84  THR  O  ', ' H  85  ASP  OD2', -0.453, (277.35, 260.027, 203.339)), (' A  71  SER  HB3', ' A  78  ARG HH22', -0.453, (285.795, 247.958, 235.97)), (' A 137  ASN  OD1', ' A 138  ASP  OD2', -0.452, (272.948, 241.228, 221.218)), (' L 113  SER  O  ', ' L 115  HIS  CD2', -0.448, (291.384, 286.293, 211.681)), (' L  14  ALA  HB3', ' L  17  GLN  OE1', -0.446, (324.655, 264.854, 217.258)), (' L  27  SER  O  ', ' L  36  ASN  OD1', -0.444, (297.138, 286.418, 222.768)), (' L  99  GLU  HA ', ' L  99  GLU  OE2', -0.442, (314.732, 265.042, 209.079)), (' L  18  LYS  NZ ', ' L  92  THR HG22', -0.44, (315.301, 265.229, 225.115)), (' L  41  TRP  CH2', ' L 104  CYS  HB3', -0.44, (305.096, 275.527, 217.249)), (' H  19  VAL HG12', ' H  91  LEU  HB3', -0.44, (287.718, 275.707, 192.946)), (' L  14  ALA  O  ', ' L  17  GLN  OE1', -0.439, (322.957, 264.845, 217.652)), (' H  13  LYS  NZ ', ' H  19  VAL  HA ', -0.435, (286.382, 272.188, 189.142)), (' L   4  VAL HG23', ' L  24  SER  O  ', -0.434, (304.718, 283.117, 216.623)), (' A  30  ASN  OD1', ' A  32  PHE  CE1', -0.43, (264.228, 241.902, 253.446)), (' A  96  GLU  HA ', ' A  96  GLU  OE1', -0.429, (268.582, 255.247, 239.366)), (' H  84  THR  O  ', ' H  84  THR HG22', -0.428, (276.861, 260.302, 201.407)), (' A 149  ASN  C  ', ' A 149  ASN  OD1', -0.427, (270.456, 272.807, 217.95)), (' A 106  PHE  HB3', ' A 235  ILE HD12', -0.426, (255.533, 241.385, 226.442)), (' H  30  LEU  O  ', ' H  30  LEU HD23', -0.426, (278.938, 266.319, 210.195)), (' H  95  ARG  HB3', ' H  95  ARG  NH1', -0.424, (293.949, 282.648, 189.534)), (' H  65  THR  O  ', ' H  66  ILE HD13', -0.422, (281.098, 281.509, 208.933)), (' L  37  ASN  O  ', ' L  80  LYS  NZ ', -0.421, (298.115, 279.936, 224.662)), (' A 210  ILE HG12', ' A 211  ASN  N  ', -0.419, (264.95, 255.393, 251.515)), (' A  19  THR HG22', ' A  21  ARG HH21', -0.418, (280.479, 240.406, 225.613)), (' L  94  LEU HD23', ' L  95  GLN  N  ', -0.416, (316.85, 261.413, 215.702)), (' A 131  CYS  HA ', ' A 166  CYS  HA ', -0.411, (253.081, 246.507, 214.203)), (' A 212  LEU HD21', ' A 215  ASP  HB3', -0.409, (268.29, 248.789, 252.674)), (' L  41  TRP  CG ', ' L  89  LEU HD21', -0.407, (304.871, 271.68, 219.78)), (' A 170  TYR  CD1', ' A 171  VAL  N  ', -0.407, (248.468, 256.732, 223.51)), (' L  57  ASN  HB2', ' L  65  ASN  OD1', -0.407, (300.708, 272.135, 227.915)), (' A 108  THR HG23', ' A 109  THR  N  ', -0.406, (258.219, 235.217, 220.626)), (' H  71  PHE  O  ', ' H  72  GLN  C  ', -0.406, (285.813, 284.625, 199.261)), (' H  80  GLU  N  ', ' H  80  GLU  OE2', -0.404, (276.381, 271.493, 203.24)), (' L  55  TYR  HD1', ' L  56  ASP  OD2', -0.404, (294.144, 269.171, 223.663)), (' L  29  ASN  OD1', ' L 108  ASP  OD2', -0.4, (296.765, 285.822, 215.521))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
