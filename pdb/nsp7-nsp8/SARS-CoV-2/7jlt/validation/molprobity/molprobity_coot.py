# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', ' 183 ', 'PRO', None, (59.72900000000001, 10.31, -0.428)), ('D', ' 183 ', 'PRO', None, (5.378000000000005, -10.249999999999996, 40.821))]
data['rota'] = [('B', ' 124 ', 'THR', 0.2431002285437736, (41.063, 27.935999999999996, 10.927)), ('B', ' 177 ', 'SER', 0.11073336060733749, (60.56600000000001, 15.949000000000002, -10.017)), ('D', ' 172 ', 'ILE', 0.07351837522993773, (-0.9500000000000028, -20.552, 37.576))]
data['cbeta'] = []
data['probe'] = [(' B 179  ASN  ND2', ' B 201  HOH  O  ', -0.735, (66.879, 14.088, -12.548)), (' C   3  MET  HE3', ' C   7  LYS  HE3', -0.697, (29.834, -12.126, 11.658)), (' A 101  HOH  O  ', ' B 120  ILE  N  ', -0.694, (42.86, 15.045, 12.059)), (' C  67  ASP  HB3', ' C  70  LYS  HB3', -0.69, (14.825, 4.258, 30.669)), (' B  90  MET  HE3', ' C   7  LYS  HD2', -0.668, (31.969, -9.557, 11.532)), (' C   7  LYS  HE2', ' C  39  ILE  O  ', -0.663, (31.473, -12.535, 13.953)), (' D 148  THR  O  ', ' D 201  HOH  O  ', -0.663, (8.45, -16.515, 24.402)), (' D 100  ASN  OD1', ' D 103  LEU HD13', -0.635, (18.492, -11.45, 17.08)), (' C  22  VAL HG22', ' C  62  MET  HE1', -0.632, (27.642, -5.113, 33.203)), (' C  58  VAL  O  ', ' C  62  MET  HG3', -0.625, (23.284, -6.574, 31.947)), (' A  54  SER  HA ', ' A 101  HOH  O  ', -0.617, (41.766, 14.499, 12.015)), (' C  56  LEU HD23', ' D 106  ILE HD11', -0.614, (18.773, -9.051, 22.537)), (' A  66  VAL HG12', ' B  88  GLN  OE1', -0.614, (44.201, -1.36, 11.657)), (' C  44  ASP  OD1', ' C  47  GLU  HG3', -0.607, (27.986, -19.366, 12.722)), (' A  56  LEU  HG ', ' A  60  LEU HD21', -0.603, (40.636, 7.299, 8.692)), (' B 111  ARG  HA ', ' B 207  HOH  O  ', -0.597, (47.205, 2.41, 1.176)), (' C  62  MET  O  ', ' C 101  HOH  O  ', -0.596, (19.39, -3.56, 33.237)), (' C  76  LEU  O  ', ' C  79  ARG  HG3', -0.589, (9.477, 10.152, 18.043)), (' A  76  LEU  O  ', ' A  79  ARG  HG3', -0.584, (36.692, -10.05, -2.941)), (' D 156  ILE HG23', ' D 186  VAL HG13', -0.57, (9.703, -21.671, 34.412)), (' D 175  ASP  OD1', ' D 202  HOH  O  ', -0.558, (-12.246, -17.321, 39.06)), (' A   2  LYS  O  ', ' A   6  VAL HG23', -0.549, (26.021, 8.844, 9.713)), (' B 121  PRO  HD2', ' B 154  TRP  CH2', -0.543, (43.891, 20.137, 8.978)), (' A  28  LEU HD11', ' A  58  VAL HG13', -0.541, (45.466, 9.882, 17.835)), (' D 132  ILE HD13', ' D 186  VAL HG23', -0.529, (8.538, -17.504, 35.158)), (' B 156  ILE HG23', ' B 186  VAL HG13', -0.527, (52.762, 21.989, 1.88)), (' A  56  LEU  O  ', ' A  60  LEU HD22', -0.523, (42.075, 7.575, 10.628)), (' B 132  ILE HD13', ' B 186  VAL HG23', -0.522, (53.444, 18.076, 0.362)), (' A   7  LYS  HE2', ' A  39  ILE  O  ', -0.522, (27.308, 12.545, 17.356)), (' D 159  VAL HG22', ' D 186  VAL HG22', -0.519, (7.864, -20.267, 35.995)), (' A  56  LEU  HG ', ' A  60  LEU  CD2', -0.514, (41.452, 7.772, 9.006)), (' C  31  GLN  NE2', ' C 102  HOH  O  ', -0.513, (27.557, -17.327, 30.724)), (' C  49  PHE  O  ', ' C  53  VAL HG23', -0.508, (21.195, -14.31, 19.425)), (' D 133  PRO  HA ', ' D 183  PRO  HB3', -0.507, (6.337, -9.779, 37.135)), (' C   3  MET  CE ', ' C   7  LYS  HE3', -0.501, (30.271, -13.032, 11.619)), (' B 160  VAL HG22', ' B 185  ILE  HB ', -0.501, (58.37, 17.048, 4.811)), (' D 114  CYS  HA ', ' D 131  VAL  O  ', -0.499, (10.029, -11.324, 32.854)), (' A  68  ILE  H  ', ' A  68  ILE HD12', -0.493, (47.187, 1.066, 5.446)), (' A  71  LEU  O  ', ' A  75  MET  HG2', -0.486, (40.136, -5.728, 3.703)), (' B 133  PRO  HA ', ' B 183  PRO  HB3', -0.483, (56.463, 10.144, -0.534)), (' C  22  VAL  CG2', ' C  62  MET  HE1', -0.479, (27.802, -4.469, 32.952)), (' D  89  THR  O  ', ' D  93  THR HG23', -0.477, (19.782, 3.98, 18.893)), (' C  68  ILE HD11', ' D  92  PHE  CE2', -0.476, (16.831, -1.543, 25.177)), (' D 158  GLN  HG3', ' D 166  ILE HD11', -0.474, (10.755, -24.213, 42.241)), (' B 125  ALA  C  ', ' B 189  LEU HD12', -0.462, (46.796, 27.016, 10.805)), (' C   2  LYS  O  ', ' C   6  VAL HG23', -0.462, (24.55, -9.252, 11.544)), (' A 101  HOH  O  ', ' B 119  ILE HG23', -0.459, (42.773, 14.631, 13.373)), (' D 136  ASN  HA ', ' D 139  LYS  HD2', -0.456, (-1.559, -13.23, 29.209)), (' B 156  ILE HG12', ' B 186  VAL HG11', -0.451, (51.154, 21.467, 1.436)), (' B 159  VAL HG22', ' B 186  VAL HG22', -0.449, (54.843, 20.758, 0.529)), (' A  14  LEU HD22', ' A  36  HIS  CG ', -0.449, (35.33, 7.334, 22.057)), (' C  16  VAL HG21', ' D  91  LEU HD22', -0.447, (24.892, -0.267, 23.89)), (' A  32  CYS  SG ', ' A  58  VAL HG11', -0.444, (43.151, 8.703, 18.5)), (' B 107  ILE  O  ', ' B 111  ARG  HG3', -0.44, (42.888, 4.788, 1.548)), (' A   3  MET  HE1', ' A  44  ASP  C  ', -0.437, (25.116, 16.109, 12.832)), (' D 146  THR HG21', ' D 153  LEU HD12', -0.437, (8.186, -24.831, 23.615)), (' D 146  THR  CG2', ' D 153  LEU HD12', -0.436, (8.367, -24.769, 23.764)), (' B  86  ALA  O  ', ' B  89  THR HG22', -0.436, (36.602, -7.275, 10.791)), (' C  68  ILE HD11', ' D  92  PHE  CZ ', -0.433, (17.637, -1.67, 25.307)), (' C  53  VAL HG22', ' D 103  LEU HD12', -0.431, (19.229, -12.82, 19.955)), (' B 135  TYR  CE2', ' B 174  MET  HG3', -0.429, (54.434, 16.583, -13.364)), (' D  86  ALA  O  ', ' D  90  MET  HE2', -0.428, (23.625, 7.218, 20.917)), (' B 121  PRO  HB2', ' B 126  ALA  HB3', -0.424, (43.812, 22.625, 12.622)), (' C  68  ILE  HA ', ' C  68  ILE HD12', -0.422, (15.91, 0.677, 27.592)), (' B  90  MET  HE3', ' C   7  LYS  CD ', -0.418, (32.281, -9.411, 12.227)), (' B 121  PRO  HD2', ' B 154  TRP  HH2', -0.418, (43.442, 19.996, 9.179)), (' C  79  ARG  HG3', ' C  79  ARG HH21', -0.41, (8.37, 10.396, 17.388)), (' C  58  VAL HG22', ' D 119  ILE HG12', -0.407, (25.435, -11.678, 30.549)), (' B 185  ILE HD13', ' B 185  ILE HG21', -0.407, (56.928, 15.783, 7.301)), (' B 161  ASP  OD1', ' B 165  LYS  N  ', -0.405, (64.977, 18.029, 2.988)), (' C  15  SER  O  ', ' C  18  GLN  HB3', -0.405, (31.775, 0.397, 27.372)), (' C   7  LYS  HD3', ' C  40  LEU  HA ', -0.404, (32.943, -10.4, 14.378)), (' D 177  SER  HA ', ' D 180  LEU  CD1', -0.401, (-2.802, -16.401, 39.443))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
