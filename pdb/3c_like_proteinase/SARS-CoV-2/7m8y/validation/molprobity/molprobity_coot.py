# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.043213835289612895, (-15.527999999999988, -38.08599999999999, 31.421))]
data['omega'] = []
data['rota'] = [('A', '  24 ', 'THR', 0.1110175925073969, (-10.41499999999999, -39.53899999999999, -7.375)), ('A', '  49 ', 'MET', 0.0, (-19.490999999999982, -28.97, -7.189)), ('A', '  87 ', 'LEU', 0.03512145807905778, (-22.707, -40.435, 3.643)), ('A', '  90 ', 'LYS', 0.18455710782184048, (-21.555999999999994, -49.751, 6.475)), ('A', ' 216 ', 'ASP', 0.13147798992775653, (-6.32, -10.117, 36.771)), ('A', ' 232 ', 'LEU', 0.0990962534531238, (-28.727999999999994, -1.586, 25.35))]
data['cbeta'] = []
data['probe'] = [(' A 165  MET  HE1', ' A 187  ASP  HA ', -1.069, (-21.574, -27.472, -0.016)), (' A  49  MET  HA ', ' A  49  MET  HE3', -0.977, (-20.222, -30.144, -6.677)), (' A 298  ARG  HG3', ' A 303  VAL HG22', -0.944, (-12.904, -29.831, 32.759)), (' A 264  MET  HA ', ' A 264  MET  HE3', -0.847, (-17.871, -7.102, 35.622)), (' A 264  MET  CE ', ' A 267  SER  HB2', -0.816, (-16.301, -6.908, 34.739)), (' A 222  ARG  HG3', ' A 587  HOH  O  ', -0.663, (-14.771, 2.061, 40.001)), (' A 264  MET  HE3', ' A 267  SER  HB2', -0.619, (-17.327, -6.829, 35.481)), (' A  49  MET  CE ', ' A  49  MET  HA ', -0.616, (-19.703, -29.989, -5.442)), (' A  44  CYS  SG ', ' A  49  MET  HE1', -0.59, (-20.31, -32.521, -5.378)), (' A  69  GLN  HG2', ' A  71  GLY  O  ', -0.584, (-5.097, -47.148, 5.334)), (' A 276  MET  HE2', ' A 287  LEU HD23', -0.58, (-11.145, -7.645, 26.752)), (' A 276  MET  HE2', ' A 287  LEU  CD2', -0.556, (-11.236, -6.652, 26.587)), (' A 305  PHE  O  ', ' A 306  GLN  HG3', -0.53, (-9.022, -39.343, 30.948)), (' A 137  LYS  HE2', ' A 629  HOH  O  ', -0.527, (-15.402, -14.76, 11.406)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.505, (-8.951, -37.693, 12.178)), (' A 165  MET  CE ', ' A 187  ASP  HA ', -0.5, (-21.208, -27.652, 1.216)), (' A  70  ALA  HB3', ' A  73  VAL  HB ', -0.498, (-8.328, -49.494, 9.096)), (' A 221  ASN  ND2', ' A 270  GLU  HG3', -0.493, (-16.778, -0.209, 34.995)), (' A 288  GLU  HG2', ' A 291  PHE  HE2', -0.486, (-10.352, -16.794, 25.451)), (' A 264  MET  CE ', ' A 267  SER  CB ', -0.483, (-16.163, -6.16, 35.195)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.481, (-13.987, -30.926, 17.149)), (' A 301  SER  HB3', ' A 663  HOH  O  ', -0.48, (-13.313, -25.169, 39.539)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.474, (-24.386, -34.82, 7.582)), (' A  25  THR HG23', ' A 401  YTM  O4 ', -0.468, (-11.856, -35.208, -3.04)), (' A 288  GLU  HG2', ' A 291  PHE  CE2', -0.468, (-10.299, -17.231, 25.642)), (' A 106  ILE HG23', ' A 160  CYS  HB2', -0.443, (-22.013, -29.946, 18.65)), (' A  60  ARG  HD2', ' A 538  HOH  O  ', -0.44, (-26.371, -41.17, -12.929)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.435, (-5.707, -35.741, 15.069)), (' A 154  TYR  H  ', ' A 305  PHE  HD1', -0.433, (-15.327, -36.083, 30.98)), (' A   8  PHE  HE1', ' A 305  PHE  CZ ', -0.426, (-13.581, -32.218, 29.34)), (' A 154  TYR  N  ', ' A 305  PHE  HD1', -0.425, (-15.345, -36.21, 30.728)), (' A 190  THR  O  ', ' A 192  GLN  HG3', -0.425, (-22.878, -20.365, -1.718)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.424, (-13.813, -48.255, 12.89)), (' A 264  MET  HE2', ' A 267  SER  HB2', -0.422, (-16.619, -6.961, 34.487)), (' A 221  ASN HD22', ' A 270  GLU  HG3', -0.404, (-16.758, 0.203, 34.768)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.402, (-13.995, -48.932, 12.861)), (' A  49  MET  HE2', ' A 401  YTM CL1 ', -0.402, (-19.733, -29.174, -3.455)), (' A 239  TYR  CZ ', ' A 272  LEU HD21', -0.4, (-17.925, -6.217, 24.129))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
