# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('D', '  30 ', 'PRO', 0.0916796444762341, (12.809000000000001, 31.294, 28.117999999999988)), ('E', '  71 ', 'VAL', 0.059016793268158, (15.74, 50.965, 47.902))]
data['omega'] = [('A', ' 210 ', 'PRO', None, (2.615000000000004, 0.23900000000000002, 47.237)), ('B', '  32 ', 'PRO', None, (9.249000000000002, 23.246, 64.855)), ('E', '   6 ', 'PRO', None, (22.58500000000002, 62.068000000000026, 37.522999999999996)), ('E', '  79 ', 'PRO', None, (38.466, 53.771, 37.40299999999999)), ('E', ' 152 ', 'PRO', None, (29.829999999999973, 68.105, 23.193))]
data['rota'] = [('A', ' 195 ', 'SER', 0.09565054068959943, (-5.208999999999995, -8.331000000000007, 82.63)), ('A', ' 196 ', 'ASP', 0.07551814650086408, (-6.752999999999999, -11.672, 83.572)), ('D', '  29 ', 'SER', 0.03315036098973694, (13.600000000000001, 27.847, 29.533)), ('D', '  52 ', 'ARG', 0.15986093359732859, (-1.3379999999999992, 36.085, 25.31299999999999)), ('D', ' 192 ', 'ILE', 0.0, (9.576999999999998, 65.819, -8.349)), ('D', ' 194 ', 'GLU', 0.14200286669313011, (6.559, 69.621, -10.666)), ('D', ' 195 ', 'ASP', 0.022362932563174693, (8.739, 71.231, -7.880999999999998)), ('E', '  60 ', 'LYS', 0.2939811334584952, (34.564, 44.478, 38.57))]
data['cbeta'] = [('D', '  67 ', 'THR', ' ', 0.25734145722675256, (14.276999999999996, 29.53400000000001, 18.308))]
data['probe'] = [(' E  53  VAL  O  ', ' E 301  HOH  O  ', -0.952, (22.899, 35.556, 40.972)), (' D  30  PRO  HB2', ' D  88  LEU HD21', -0.855, (13.274, 32.485, 26.371)), (' D 189  ASN  ND2', ' D 301  HOH  O  ', -0.814, (19.48, 66.278, -2.822)), (' B  20  SER  O  ', ' B 101  HOH  O  ', -0.789, (18.959, -8.92, 59.22)), (' E 134  GLU  OE1', ' E 302  HOH  O  ', -0.779, (8.418, 79.415, 4.25)), (' D 148  LYS  H  ', ' D 148  LYS  HD2', -0.768, (26.693, 66.941, -3.624)), (' A 320  HOH  O  ', ' B   0  MET  HE1', -0.763, (10.891, 28.777, 64.109)), (' D  26  TYR  O  ', ' D 302  HOH  O  ', -0.73, (16.295, 27.949, 24.05)), (' A 181  ARG  NH1', ' A 183  ASP  OD2', -0.73, (8.009, -3.239, 46.415)), (' E  55  ASP  OD2', ' E 303  HOH  O  ', -0.727, (28.536, 39.265, 42.565)), (' B  99  MET  OXT', ' B 102  HOH  O  ', -0.719, (4.835, 0.57, 66.776)), (' D  30  PRO  CB ', ' D  88  LEU HD21', -0.711, (13.948, 32.344, 26.115)), (' E 120  VAL  O  ', ' E 227  ARG  NH2', -0.709, (34.704, 74.289, 23.796)), (' B  14  PRO  O  ', ' B 103  HOH  O  ', -0.709, (14.217, -10.54, 61.258)), (' D  53  GLU  OE1', ' D 303  HOH  O  ', -0.693, (-0.339, 43.865, 28.038)), (' D 139  ASP  OD1', ' D 304  HOH  O  ', -0.688, (3.326, 59.399, -0.576)), (' B  17  ASN HD21', ' B  74  GLU  HB2', -0.668, (16.329, -13.101, 72.649)), (' D 116  ASP  OD1', ' D 305  HOH  O  ', -0.666, (3.57, 72.938, -5.65)), (' A  32  GLN HE21', ' A  48  ARG  HG3', -0.636, (17.232, 11.681, 47.876)), (' E  20  TRP  CH2', ' E  22  ASN  HB2', -0.627, (16.22, 58.682, 43.379)), (' A 267  PRO  HB2', ' A 268  LYS  HE2', -0.627, (-7.789, -12.248, 44.73)), (' D 110  PRO  HG3', ' D 159  VAL HG11', -0.626, (4.916, 62.685, 7.638)), (' D   1  GLN  HG3', ' D  26  TYR  CE1', -0.62, (19.92, 32.146, 27.946)), (' A 240  THR  OG1', ' A 241  PHE  N  ', -0.617, (7.298, -1.976, 52.881)), (' B  17  ASN  ND2', ' B  74  GLU  HB2', -0.604, (16.955, -13.104, 73.073)), (' A   6  ARG  HD3', ' A 113  TYR  HE1', -0.574, (2.444, 17.146, 44.725)), (' D   8  LYS  HB2', ' D 309  HOH  O  ', -0.573, (20.199, 47.273, 10.341)), (' E 110  ARG  NH2', ' E 309  HOH  O  ', -0.564, (28.23, 60.268, 23.923)), (' B  77  GLU  OE1', ' B 104  HOH  O  ', -0.563, (14.348, -2.546, 76.207)), (' A 137  ASP  N  ', ' A 137  ASP  OD1', -0.558, (-2.212, 35.133, 55.298)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.555, (3.082, 25.099, 53.63)), (' E 173  ASP  OD1', ' E 193  ARG  NH2', -0.553, (15.021, 68.608, 10.559)), (' B  17  ASN  OD1', ' B  97  ARG  NH2', -0.552, (16.549, -11.026, 70.079)), (' E 223  TRP  HB2', ' E 229  LYS  HD3', -0.54, (36.143, 75.881, 33.182)), (' E 154  HIS  HB3', ' E 215  TYR  HB2', -0.539, (24.224, 68.028, 26.98)), (' B  58  LYS  H  ', ' B  58  LYS  HE2', -0.538, (0.631, 15.457, 53.866)), (' E  68  LEU HD12', ' E  69  LYS  HZ1', -0.531, (23.912, 52.429, 51.87)), (' A 220  ASP  OD1', ' A 301  HOH  O  ', -0.531, (-18.699, -12.677, 66.005)), (' A 235  PRO  HG2', ' B  65  LEU HD22', -0.527, (11.797, 4.949, 57.27)), (' D  32  LEU HD13', ' D  62  LEU HD13', -0.527, (9.282, 33.012, 22.235)), (' E  12  GLU  O  ', ' E  15  GLN  HB2', -0.524, (37.258, 61.656, 33.983)), (' B  58  LYS  CE ', ' B  58  LYS  H  ', -0.517, (1.042, 15.342, 53.39)), (' E 173  ASP  HB2', ' E 190  LEU  CD1', -0.515, (17.992, 68.239, 14.493)), (' E 217  LEU HD22', ' E 230  PRO  HD2', -0.508, (33.507, 73.758, 29.787)), (' A  32  GLN  NE2', ' A  48  ARG  HG3', -0.503, (17.031, 11.487, 48.809)), (' D  18  VAL  CG2', ' D  76  ALA  HB2', -0.503, (3.05, 49.07, 9.713)), (' D  19  GLU  OE2', ' D  21  LYS  NZ ', -0.5, (8.671, 38.454, 8.272)), (' D  80  ASP  O  ', ' D 106  LEU HD23', -0.497, (6.383, 52.244, 15.103)), (' E  13  LYS  HD2', ' E  82  LEU HD13', -0.497, (40.357, 57.81, 27.225)), (' B  54  LEU  HA ', ' B  64  LEU HD21', -0.496, (14.706, 15.132, 57.453)), (' A  11  SER  HA ', ' A  21  ARG  O  ', -0.496, (17.02, 25.887, 54.397)), (' D 161  ASP  OD2', ' D 163  ARG  NH1', -0.495, (-0.162, 64.824, 14.862)), (' E 122  PRO  HD3', ' E 230  PRO  HB3', -0.493, (31.364, 75.707, 25.793)), (' D  18  VAL HG23', ' D  76  ALA  HB2', -0.493, (2.658, 48.901, 9.705)), (' A 155  GLN HE21', ' D  48  ARG HH21', -0.49, (6.708, 34.658, 31.747)), (' D   1  GLN  N  ', ' D   1  GLN  OE1', -0.489, (22.33, 33.284, 26.915)), (' A 260  HIS  HA ', ' A 270  LEU  O  ', -0.484, (-8.701, -8.348, 56.086)), (' E  12  GLU  HB2', ' E  15  GLN  NE2', -0.484, (38.828, 64.929, 33.746)), (' A 214  THR  HB ', ' A 262  GLN  HB2', -0.483, (-7.855, -1.36, 53.02)), (' D 160  LEU  HB3', ' E 171  CYS  HB2', -0.481, (8.033, 69.392, 11.372)), (' A 119  ASP  O  ', ' B   1  ILE HG22', -0.481, (4.762, 27.423, 61.682)), (' E 153  ASP  O  ', ' E 154  HIS  HD2', -0.481, (25.274, 64.503, 23.956)), (' D   1  GLN  HG2', ' D 323  HOH  O  ', -0.48, (18.859, 35.488, 29.032)), (' E  19  PHE  HD2', ' E  75  LEU HD23', -0.479, (26.437, 53.992, 36.329)), (' E  19  PHE  CD1', ' E 109  THR HG21', -0.476, (25.394, 58.953, 35.244)), (' D   1  GLN  HG3', ' D  26  TYR  CD1', -0.475, (19.666, 32.406, 27.475)), (' A  95  VAL HG13', ' A 116  TYR  CZ ', -0.472, (9.012, 29.906, 51.257)), (' A 250  PRO  HB3', ' A 316  HOH  O  ', -0.472, (-13.627, -8.61, 79.295)), (' E  55  ASP  HB3', ' E  60  LYS  HE2', -0.471, (30.372, 40.237, 39.752)), (' E 222  GLU  CD ', ' E 222  GLU  H  ', -0.471, (38.694, 70.292, 35.544)), (' A  95  VAL  CG1', ' A 116  TYR  OH ', -0.47, (10.245, 30.321, 51.56)), (' D  78  GLU  OE1', ' D 110  PRO  HB3', -0.469, (2.623, 60.708, 9.119)), (' A  95  VAL HG11', ' A 116  TYR  OH ', -0.466, (10.608, 30.67, 51.576)), (' D 145  SER  HB2', ' D 189  ASN  HB3', -0.465, (20.156, 63.188, -2.637)), (' E  61  ASP  N  ', ' E  61  ASP  OD1', -0.462, (36.539, 45.445, 36.625)), (' E 184  ASN  N  ', ' E 184  ASN  OD1', -0.461, (38.04, 63.475, 14.72)), (' A 207  SER  HA ', ' A 240  THR  OG1', -0.458, (7.618, -3.935, 53.111)), (' D 152  VAL HG22', ' D 176  SER  HB2', -0.455, (26.537, 74.985, 1.578)), (' A  44  ARG  NH2', ' A  61  ASP  OD1', -0.452, (27.056, 18.323, 37.269)), (' E  72  ASP  OD1', ' E 304  HOH  O  ', -0.451, (19.188, 53.957, 49.371)), (' D 126  LYS  HB3', ' D 126  LYS  HE3', -0.451, (20.89, 86.703, 13.717)), (' B   1  ILE HD11', ' B   3  ARG  NH1', -0.451, (0.515, 23.692, 62.759)), (' A  81  LEU HD13', ' A 118  TYR  CD1', -0.445, (8.383, 33.116, 55.641)), (' E  45  ILE HD13', ' E  65  ALA  HB3', -0.445, (25.875, 46.449, 41.365)), (' A  33  PHE  CD2', ' A  34  VAL HG13', -0.444, (15.464, 12.475, 41.453)), (' B   1  ILE HD11', ' B   3  ARG HH11', -0.444, (0.714, 23.612, 62.946)), (' A 189  MET  HB2', ' A 189  MET  HE3', -0.443, (-3.76, -10.916, 62.856)), (' A  98  MET  HB3', ' A  98  MET  HE3', -0.441, (3.478, 21.784, 48.623)), (' E  11  ILE HD13', ' E  17  VAL  HB ', -0.44, (32.721, 60.098, 35.236)), (' A  55  GLU  OE2', ' A 302  HOH  O  ', -0.44, (16.137, 9.315, 33.919)), (' A 133  TRP  HB2', ' A 144  LYS  HG3', -0.439, (-2.809, 35.069, 45.123)), (' A 271  THR  O  ', ' A 272  LEU HD23', -0.438, (-6.829, -12.769, 56.951)), (' E 118  LYS  HA ', ' E 118  LYS  HD3', -0.432, (38.799, 72.792, 27.255)), (' B  81  ARG  HB2', ' B  92  ILE HD13', -0.431, (16.123, 8.42, 75.021)), (' D   7  GLU  HA ', ' D   7  GLU  OE1', -0.431, (17.897, 44.459, 9.304)), (' E 180  GLN  HA ', ' E 180  GLN  NE2', -0.428, (33.102, 68.551, 7.825)), (' E 131  SER  O  ', ' E 135  ILE HG12', -0.428, (6.449, 83.278, 3.087)), (' A 108  ARG  HA ', ' A 169  ARG HH21', -0.428, (-0.487, 12.337, 30.897)), (' E  42  LYS  HB2', ' E 373  HOH  O  ', -0.427, (24.382, 44.994, 25.472)), (' E  78  GLN  HA ', ' E  79  PRO  HA ', -0.424, (37.192, 55.779, 38.002)), (' E  52  VAL HG11', ' E  55  ASP  CG ', -0.415, (27.24, 41.139, 42.032)), (' E 110  ARG  HA ', ' E 110  ARG  HD2', -0.411, (24.217, 58.736, 27.624)), (' B  51  HIS  HA ', ' B  65  LEU  O  ', -0.41, (17.357, 8.56, 59.343)), (' A  97  ARG HH11', ' A 114  HIS  CE1', -0.407, (6.962, 27.867, 43.854)), (' E 130  PRO  HD2', ' E 201  TRP  CZ2', -0.406, (8.567, 85.363, 9.454)), (' D   9  LEU HD12', ' D  10  LEU  N  ', -0.405, (13.816, 51.178, 10.005)), (' D  42  ARG  NH2', ' E 107  PRO  HG3', -0.405, (12.613, 59.777, 34.135)), (' D 132  VAL HG11', ' E 146  LEU HD11', -0.404, (19.844, 77.306, 8.328)), (' A 102  ASP  HB2', ' A 111  ARG  HG2', -0.403, (-3.201, 15.411, 40.525)), (' E 207  HIS  NE2', ' E 238  GLU  OE1', -0.402, (11.477, 87.765, 21.782)), (' A   6  ARG  HD3', ' A 113  TYR  CE1', -0.402, (2.259, 17.025, 44.953)), (' D 126  LYS  HD2', ' D 127  SER  HB3', -0.4, (23.642, 88.648, 13.463)), (' E  19  PHE  CD2', ' E  75  LEU HD23', -0.4, (26.618, 54.416, 36.35)), (' D  12  VAL  O  ', ' D 108  VAL  HA ', -0.4, (6.125, 53.9, 7.548)), (' A 218  GLN  HG2', ' A 223  ASP  HA ', -0.4, (-15.865, -3.511, 60.826))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
