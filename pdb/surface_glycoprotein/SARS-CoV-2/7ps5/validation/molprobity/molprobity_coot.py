# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('E', ' 479 ', 'PRO', 0.033231651933423305, (5.97655, 31.983149999999988, 8.83486)), ('L', '  52 ', 'ALA', 0.022821353868819352, (5.37974, 28.21354, -4.8661)), ('L', '  95 ', 'SER', 0.005796960362525604, (-9.0063, 31.84733, 4.54698)), ('L', ' 139 ', 'ASN', 0.044223046876001496, (-11.1002, 10.86307, -35.02192))]
data['omega'] = [('H', ' 157 ', 'PRO', None, (-29.22947, 3.537749999999999, -12.52758)), ('H', ' 159 ', 'PRO', None, (-23.3186, 2.31979, -14.02728)), ('L', '   8 ', 'PRO', None, (-2.2465099999999993, 27.516139999999993, -21.043260000000004)), ('L', ' 142 ', 'PRO', None, (-7.08296, 19.22043, -33.26934))]
data['rota'] = [('H', '  72 ', 'ARG', 0.22246076642321255, (-14.325399999999997, 16.60674, 13.054850000000002)), ('L', '  33 ', 'TYR', 0.11453845807097061, (0.8888799999999999, 29.45253999999999, -0.9088700000000002)), ('L', '  92 ', 'TYR', 0.04036736910320358, (-4.43934, 28.325349999999993, -0.07664)), ('E', ' 480 ', 'CYS', 0.02516982211326252, (3.06777, 34.43259, 8.966920000000002)), ('E', ' 489 ', 'TYR', 0.20432899553175649, (-3.16602, 29.224380000000004, 14.076540000000001))]
data['cbeta'] = []
data['probe'] = [(' L  30  SER  HB2', ' L  94  SER  HB2', -0.696, (-4.802, 34.858, 1.197)), (' H 210  HIS  HD1', ' H 213  SER  HG ', -0.686, (-29.996, -1.801, -16.382)), (' L  40  LYS  NZ ', ' L  82  GLU  O  ', -0.673, (0.711, 10.397, -16.433)), (' L  38  GLN  HB2', ' L  48  LEU HD11', -0.63, (1.032, 17.283, -12.124)), (' H 205  ILE HG13', ' H 220  LYS  HG2', -0.623, (-26.864, -8.255, -34.949)), (' H  44  ARG  NH1', ' H  45  LEU  O  ', -0.619, (-12.331, 23.854, -9.404)), (' H 207  ASN  ND2', ' H 218  ASP  OD1', -0.605, (-24.235, -8.699, -27.719)), (' E 377  PHE  HE2', ' E 384  PRO  HB3', -0.6, (-4.088, 10.821, 50.465)), (' L  94  SER  O  ', ' L  96  LEU  N  ', -0.582, (-9.405, 31.986, 1.861)), (' H 169  LEU HD21', ' H 192  VAL HG21', -0.567, (-16.749, -2.339, -35.391)), (' L   3  VAL  HB ', ' L  26  SER  HB3', -0.565, (-9.077, 36.899, -9.777)), (' H 129  PRO  HB3', ' H 155  TYR  HB3', -0.561, (-30.298, 2.551, -20.496)), (' E 360  ASN  H  ', ' E 523  THR  HB ', -0.56, (5.658, 29.014, 56.9)), (' A   3  BMA  O2 ', ' A   4  MAN  H2 ', -0.551, (19.839, 16.985, 8.342)), (' L 121  PRO  HD3', ' L 133  VAL HG22', -0.54, (-33.366, 12.429, -35.92)), (' E 479  PRO  O  ', ' L  31  ARG  HD3', -0.525, (3.653, 32.424, 6.742)), (' E 490  PHE  CD1', ' E 491  PRO  HD2', -0.524, (-3.083, 32.377, 19.069)), (' L   6  GLN  HG3', ' L 101  PRO  HD2', -0.515, (-6.174, 27.712, -14.03)), (' E 334  ASN  N  ', ' E 334  ASN  OD1', -0.509, (-1.615, 30.308, 62.972)), (' L  33  TYR  HB3', ' L  92  TYR  CD1', -0.5, (-1.114, 27.912, -0.336)), (' L  29  VAL HG23', ' L  69  GLY  O  ', -0.496, (0.447, 35.704, -5.942)), (' E 455  LEU HD21', ' H  54  GLY  HA3', -0.495, (-5.934, 22.351, 17.257)), (' L  34  LEU HD13', ' L  72  PHE  CG ', -0.487, (1.54, 30.959, -8.585)), (' E 387  LEU  HA ', ' E 390  LEU HD12', -0.486, (2.903, 13.764, 56.02)), (' L  49  ILE HD13', ' L  55  ARG  HA ', -0.483, (7.838, 20.294, -6.199)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.468, (-9.108, 14.313, 40.505)), (' H  60  TYR  HE1', ' H  70  ILE HG13', -0.466, (-17.763, 23.049, 5.764)), (' H 205  ILE  CG1', ' H 220  LYS  HG2', -0.462, (-26.472, -8.493, -34.356)), (' L 159  ASN  HB3', ' L 181  THR  O  ', -0.461, (-34.474, 17.691, -27.776)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.459, (-12.44, 23.892, 37.882)), (' E 486  PHE  HD2', ' L  33  TYR  CE2', -0.455, (-0.542, 27.097, 4.124)), (' E 486  PHE  HD2', ' L  33  TYR  HE2', -0.443, (-0.522, 27.281, 4.602)), (' H 162  VAL  HA ', ' H 207  ASN  O  ', -0.438, (-22.297, -3.657, -24.713)), (' H  50  TRP  CD1', ' H  59  ASN  HB2', -0.434, (-11.295, 27.482, 5.359)), (' H  71  ASN  OD1', ' H  80  TYR  HB2', -0.433, (-18.177, 15.812, 10.82)), (' H  30  ILE HG12', ' H  74  MET  HE3', -0.426, (-6.151, 15.885, 17.851)), (' H 161  THR HG23', ' H 209  ASN  HB3', -0.42, (-22.419, -4.726, -20.007)), (' E 502  GLY  O  ', ' E 506  GLN  HG3', -0.416, (-18.963, 15.752, 30.679)), (' L 159  ASN  O  ', ' L 180  LEU HD12', -0.413, (-31.368, 18.827, -29.406)), (' L   4  LEU  HA ', ' L   4  LEU HD12', -0.408, (-5.853, 32.38, -9.924)), (' H   6  GLU  H  ', ' H 115  GLN HE22', -0.408, (-12.348, 6.359, 1.561)), (' L  92  TYR  HA ', ' L  97  PHE  CD1', -0.404, (-6.426, 28.408, 0.56)), (' L  50  TYR  O  ', ' L  54  SER  HB2', -0.403, (6.48, 24.027, -2.222)), (' H 196  SER  HA ', ' H 199  LEU HD23', -0.4, (-19.494, -0.155, -45.991))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
