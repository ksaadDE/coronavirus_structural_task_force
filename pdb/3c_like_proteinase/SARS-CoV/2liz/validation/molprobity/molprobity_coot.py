# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'GLY', 0.029395059837382255, (0.056, -8.693, -9.742)), ('A', ' 294 ', 'PHE', 0.04683519248396049, (-10.264, 8.07, 2.527)), ('A', ' 302 ', 'GLY', 0.08711265423132634, (-23.603000000000005, 16.804999999999993, 11.011)), ('A', ' 303 ', 'VAL', 0.00449244751276865, (-14.072, 15.601, 4.466)), ('A', ' 188 ', 'ARG', 0.04831841387478263, (9.558, -5.677999999999998, -18.191)), ('A', ' 298 ', 'ARG', 0.022254484304583187, (-17.39, 13.128999999999996, 2.615)), ('A', ' 294 ', 'PHE', 0.04720735935998437, (-11.632, 7.873, 2.322)), ('A', ' 198 ', 'THR', 0.009777862963570121, (-0.24199999999999997, -8.264999999999997, -2.452)), ('A', ' 222 ', 'ARG', 0.038633083369409384, (-20.738, -9.034999999999997, 14.519000000000002)), ('A', ' 295 ', 'ASP', 0.021776685659841487, (-11.875, 11.440999999999997, 1.523)), ('A', ' 303 ', 'VAL', 0.0036857833859414526, (-15.092, 16.918, 7.870000000000001)), ('A', ' 197 ', 'ASP', 0.024436365983539748, (2.279, -8.663, -5.743)), ('A', ' 195 ', 'GLY', 0.04646966589222071, (4.734, -11.495999999999997, -8.571)), ('A', ' 198 ', 'THR', 0.02642054418622125, (-0.398, -8.587999999999996, -2.782)), ('A', ' 194 ', 'ALA', 0.04674750627983761, (1.4, -13.085, -10.021)), ('A', ' 303 ', 'VAL', 0.06807938870299451, (-15.646, 18.259, 4.198)), ('A', ' 188 ', 'ARG', 0.0017157771326331123, (16.914, -10.23, 3.412)), ('A', ' 217 ', 'ARG', 0.0005049169483031465, (-23.732, -6.084999999999998, 4.129)), ('A', ' 296 ', 'VAL', 0.050836727054735985, (-13.683, 11.015, 3.941)), ('A', ' 298 ', 'ARG', 0.008042476153960535, (-18.049, 13.114, 6.515)), ('A', ' 303 ', 'VAL', 0.03164208520402523, (-21.765, 15.775999999999998, 0.388)), ('A', ' 224 ', 'THR', 0.011725686780166084, (-14.357, -8.897000000000004, 16.067)), ('A', ' 298 ', 'ARG', 0.02025049138922138, (-18.534, 11.171999999999997, 1.003)), ('A', ' 294 ', 'PHE', 0.02005948571615827, (-10.775, 7.756, 2.966)), ('A', ' 303 ', 'VAL', 0.0026957988657213645, (-22.533, 16.566, 8.788)), ('A', ' 188 ', 'ARG', 0.002623793126554785, (15.009, -20.88899999999999, -10.81)), ('A', ' 294 ', 'PHE', 0.028496467043705852, (-10.596, 9.039, 2.671)), ('A', ' 217 ', 'ARG', 0.01621256099923094, (-23.956, -6.023999999999998, 4.603)), ('A', ' 302 ', 'GLY', 0.028461629021107507, (-18.367, 14.671000000000001, 7.267000000000001)), ('A', ' 198 ', 'THR', 0.009142486651732241, (-0.5929999999999997, -8.743, -2.642)), ('A', ' 297 ', 'VAL', 0.00256301, (-17.332, 8.956999999999999, 0.807)), ('A', ' 303 ', 'VAL', 0.07586946044981555, (-17.211, 16.62, 4.836)), ('A', ' 217 ', 'ARG', 0.03494362460742548, (-23.702, -6.156, 4.229)), ('A', ' 222 ', 'ARG', 0.008378686167505358, (-21.232, -9.666, 14.566999999999998)), ('A', ' 296 ', 'VAL', 0.08671054251247069, (-14.417, 10.424, 2.172))]
data['omega'] = []
data['rota'] = [('A', ' 220 ', 'LEU', 0.05229676701742369, (-20.799, -8.425999999999997, 8.093)), ('A', ' 282 ', 'LEU', 0.1340495213494259, (-21.661, -3.6899999999999995, -5.218)), ('A', ' 296 ', 'VAL', 0.0, (-17.065, 7.283999999999999, 1.651)), ('A', ' 282 ', 'LEU', 0.09673541141828759, (-20.908, -2.925, -5.304)), ('A', ' 238 ', 'ASN', 0.0002176531490286355, (-0.674, -12.740999999999996, 0.182)), ('A', ' 276 ', 'MET', 0.23772274963250614, (-19.268, -15.536999999999999, -0.381)), ('A', ' 276 ', 'MET', 0.03324822746059537, (-17.317, -14.829, -0.544)), ('A', ' 304 ', 'THR', 0.07100661347690558, (-13.588, 16.931, 11.466)), ('A', ' 238 ', 'ASN', 0.0, (-2.022, -12.501, -0.344)), ('A', ' 256 ', 'GLN', 0.0800225099784374, (-20.737, 6.238, 8.404)), ('A', ' 292 ', 'THR', 0.2601691385191619, (-9.881, 5.051999999999998, -0.986)), ('A', ' 220 ', 'LEU', 0.04598818662776563, (-21.880000000000006, -8.276999999999996, 8.157)), ('A', ' 268 ', 'LEU', 0.14875317658819995, (-13.025, -9.311, 5.58)), ('A', ' 238 ', 'ASN', 0.0008641910172754433, (-0.9669999999999999, -12.698999999999996, 0.164)), ('A', ' 274 ', 'ASN', 0.021592020958920953, (-15.365, -19.125, 3.108)), ('A', ' 297 ', 'VAL', 0.18725435321263328, (-18.375, 8.389, 0.07)), ('A', ' 274 ', 'ASN', 0.03813004336278345, (-15.093, -18.991999999999994, 2.57)), ('A', ' 198 ', 'THR', 0.16039398161571045, (-0.4720000000000001, -8.654, -3.056)), ('A', ' 238 ', 'ASN', 0.1784361713421951, (-1.493, -12.722, -0.188)), ('A', ' 282 ', 'LEU', 0.2023354863664913, (-21.603, -3.4789999999999996, -5.339)), ('A', ' 190 ', 'THR', 0.2989573773505597, (16.169, -7.898999999999997, -7.073)), ('A', ' 220 ', 'LEU', 0.10817504818010097, (-21.045, -8.193, 8.537)), ('A', ' 274 ', 'ASN', 0.17471299298855952, (-14.978, -19.235999999999994, 3.105)), ('A', ' 214 ', 'ASN', 0.017744457270570207, (-24.905000000000005, 1.054, -0.682)), ('A', ' 270 ', 'GLU', 0.15830795941726106, (-14.888, -14.340999999999992, 6.753)), ('A', ' 202 ', 'LEU', 0.16794449321266836, (-7.081000000000002, -1.249, 3.6880000000000006)), ('A', ' 282 ', 'LEU', 0.28286803115777526, (-21.575, -3.432, -5.161)), ('A', ' 286 ', 'ILE', 0.047896292389561786, (-16.811, -10.54, -6.996)), ('A', ' 208 ', 'LEU', 0.04750752545609059, (-16.629, -3.258, 2.059)), ('A', ' 306 ', 'GLN', 0.0, (-11.374, 15.365, 1.7750000000000001)), ('A', ' 304 ', 'THR', 0.08308771241005238, (-20.403, 10.802, -3.7269999999999994))]
data['cbeta'] = [('A', ' 238 ', 'ASN', ' ', 0.2960400749063225, (-0.983, -12.54, -1.547)), ('A', ' 238 ', 'ASN', ' ', 0.3350342726070982, (0.10400000000000002, -13.223999999999997, -1.07)), ('A', ' 303 ', 'VAL', ' ', 0.27265328790288007, (-14.712, 14.994999999999997, 3.193)), ('A', ' 303 ', 'VAL', ' ', 0.2554796190536609, (-17.726, 16.498, 14.718)), ('A', ' 222 ', 'ARG', ' ', 0.302380697621032, (-22.135, -8.963000000000003, 15.177)), ('A', ' 295 ', 'ASP', ' ', 0.3072452042758923, (-10.772, 12.071, 0.652)), ('A', ' 238 ', 'ASN', ' ', 0.287615340636784, (-1.877, -12.84, -1.853)), ('A', ' 299 ', 'GLN', ' ', 0.2627722616838254, (-20.526, 15.754999999999999, 5.309)), ('A', ' 238 ', 'ASN', ' ', 0.349287981111516, (-0.275, -13.081999999999999, -1.174)), ('A', ' 224 ', 'THR', ' ', 0.27167645577594596, (-14.26, -7.988999999999999, 17.311)), ('A', ' 238 ', 'ASN', ' ', 0.29880682967019206, (-0.997, -13.087999999999996, -1.607)), ('A', ' 303 ', 'VAL', ' ', 0.2590639936615538, (-23.799, 16.505999999999997, 7.902999999999999)), ('A', ' 297 ', 'VAL', ' ', 0.27801837638700655, (-18.302, 7.889, 1.37)), ('A', ' 303 ', 'VAL', ' ', 0.2695562532175416, (-17.474, 17.147, 3.401)), ('A', ' 222 ', 'ARG', ' ', 0.2538903018209852, (-22.6, -10.196, 15.009999999999998))]
data['probe'] = []
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
