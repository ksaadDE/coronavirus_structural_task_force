# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 329 ', 'PHE', 0.0, (211.71700000000016, 237.51699999999994, 173.465))]
data['omega'] = []
data['rota'] = [('C', ' 774 ', 'GLN', 0.2503973006269048, (197.12599999999998, 216.96599999999992, 217.79600000000002))]
data['cbeta'] = []
data['probe'] = [(' B 730  SER  HA ', ' B 774  GLN  OE1', -0.885, (190.07, 195.585, 219.174)), (' B 965  GLN HE21', ' C 758  SER  HB2', -0.629, (190.608, 205.193, 195.459)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.608, (153.158, 230.32, 179.909)), (' B 701  ALA  HB3', ' C 787  GLN  HG3', -0.604, (185.719, 228.258, 237.169)), (' A 724  THR  HB ', ' A 934  ILE HD11', -0.594, (209.383, 183.304, 236.356)), (' A 106  PHE  HB2', ' A 117  LEU  HB3', -0.584, (204.868, 157.86, 167.205)), (' C  48  LEU  HB3', ' C 276  LEU HD11', -0.579, (224.809, 222.617, 200.188)), (' C 724  THR  HB ', ' C 934  ILE HD11', -0.574, (214.781, 221.724, 234.812)), (' C 193  VAL  HB ', ' C 204  TYR  HB2', -0.57, (235.542, 229.256, 181.569)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.561, (166.072, 221.14, 163.094)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.56, (212.184, 221.864, 242.476)), (' B 596  SER  HB2', ' B 611  LEU  HB3', -0.55, (186.417, 227.229, 206.752)), (' B 571  ASP  OD1', ' C  44  ARG  NH1', -0.55, (217.425, 225.293, 192.82)), (' A 736  VAL HG11', ' A1004  LEU HD11', -0.545, (215.675, 197.186, 201.58)), (' C 106  PHE  HB2', ' C 117  LEU  HB3', -0.541, (239.787, 225.299, 166.813)), (' C1106  GLN HE21', ' C1109  PHE  HB2', -0.535, (214.074, 212.014, 260.135)), (' C1028  LYS  NZ ', ' C1042  PHE  O  ', -0.535, (207.976, 210.617, 235.009)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.533, (210.074, 185.875, 244.111)), (' A 737  ASP  OD2', ' C 317  ASN  ND2', -0.531, (225.525, 200.282, 199.784)), (' B 734  THR HG22', ' B 860  VAL HG22', -0.527, (185.056, 192.44, 208.194)), (' B 319  ARG  NH2', ' B 593  GLY  O  ', -0.523, (194.055, 227.08, 198.034)), (' C 804  GLN  OE1', ' C 935  GLN  NE2', -0.52, (214.035, 233.138, 235.856)), (' B1125  ASN  ND2', ' B1127  ASP  OD1', -0.517, (213.294, 227.199, 271.096)), (' B 563  GLN  NE2', ' C  40  ASP  O  ', -0.516, (224.844, 230.584, 186.285)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.516, (255.255, 228.691, 184.027)), (' B 126  VAL  HB ', ' B 172  SER  HB3', -0.515, (154.768, 210.483, 164.589)), (' C 391  CYS  HA ', ' C 525  CYS  HA ', -0.514, (226.348, 180.606, 171.863)), (' C 354  ASN  HB2', ' C 399  SER  HB2', -0.513, (212.828, 175.559, 154.188)), (' B1142  GLN  HA ', ' B1145  LEU  HB2', -0.511, (196.628, 212.753, 287.609)), (' B 716  THR HG21', ' B1073  LYS  HD3', -0.508, (182.262, 223.618, 257.49)), (' C 356  LYS  HB3', ' C 397  ALA  HB3', -0.508, (216.672, 174.995, 158.893)), (' A  54  LEU HD12', ' A 195  LYS  HE3', -0.507, (203.126, 167.191, 180.45)), (' A 356  LYS  HB2', ' A 397  ALA  HB3', -0.506, (178.095, 202.901, 155.24)), (' A 300  LYS  NZ ', ' A 306  PHE  O  ', -0.505, (204.573, 168.18, 208.229)), (' A 769  GLY  O  ', ' A 773  GLU  HB2', -0.499, (215.376, 205.029, 215.876)), (' A1005  GLN  OE1', ' C1002  GLN  NE2', -0.498, (207.09, 203.493, 198.027)), (' B 528  LYS  NZ ', ' B 529  LYS  O  ', -0.498, (206.826, 236.764, 170.45)), (' C 742  ILE  O  ', ' C1000  ARG  NH1', -0.497, (202.764, 217.36, 189.491)), (' B 379  CYS  HA ', ' B 432  CYS  HA ', -0.497, (208.805, 227.23, 148.436)), (' A1106  GLN HE21', ' A1109  PHE  HB3', -0.495, (199.012, 189.795, 260.012)), (' B 246  ARG  NH2', ' B 254  SER  OG ', -0.491, (145.945, 233.444, 156.885)), (' C 206  LYS  NZ ', ' C 222  ALA  O  ', -0.49, (236.306, 235.335, 189.518)), (' C 971  GLY  HA3', ' C 995  ARG HH22', -0.489, (210.531, 206.409, 184.285)), (' B 567  ARG  NH2', ' B 571  ASP  O  ', -0.488, (213.188, 224.014, 192.717)), (' C  39  PRO  HB3', ' C  51  THR HG21', -0.488, (225.006, 222.735, 189.231)), (' B 273  ARG  HD3', ' B 292  ALA  HB3', -0.487, (176.344, 223.752, 190.683)), (' C 818  ILE  O  ', ' C 822  LEU  HB2', -0.486, (212.052, 228.357, 229.078)), (' A1074  ASN  OD1', ' B 895  GLN  NE2', -0.484, (183.393, 183.31, 255.237)), (' C 128  ILE  HB ', ' C 170  TYR  HB3', -0.483, (235.724, 235.058, 165.632)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.483, (179.462, 207.962, 249.837)), (' C  37  TYR  HB2', ' C 223  LEU HD12', -0.483, (234.84, 228.847, 186.39)), (' B1115  ILE HG22', ' B1137  VAL HG13', -0.482, (197.29, 218.668, 273.394)), (' A 129  LYS  HG2', ' A 169  GLU  HG3', -0.482, (214.421, 154.757, 160.553)), (' C 736  VAL HG11', ' C1004  LEU HD11', -0.481, (201.549, 215.622, 200.312)), (' A 319  ARG HH21', ' B 740  MET  HE3', -0.477, (186.853, 184.006, 198.305)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.477, (187.477, 204.322, 146.081)), (' A1040  VAL HG21', ' B1035  GLY  HA3', -0.477, (193.752, 197.36, 243.594)), (' A 189  LEU  HB3', ' A 208  THR  HB ', -0.477, (213.221, 150.278, 189.273)), (' C 448  ASN  HB3', ' C 497  PHE  HB2', -0.475, (206.139, 181.498, 140.117)), (' B 742  ILE  O  ', ' B1000  ARG  NH1', -0.474, (190.412, 192.755, 190.044)), (' A1047  TYR  HB2', ' A1067  TYR  HB3', -0.474, (201.366, 190.55, 249.072)), (' C 598  ILE  HB ', ' C 609  ALA  HB3', -0.472, (235.982, 208.161, 213.948)), (' B 128  ILE  HB ', ' B 170  TYR  HB3', -0.47, (160.724, 211.791, 161.812)), (' C 329  PHE  O  ', ' C 580  GLN  NE2', -0.47, (236.729, 176.731, 175.334)), (' C 784  GLN  HB3', ' C1034  LEU HD11', -0.468, (194.607, 217.904, 236.395)), (' B 986  PRO  HA ', ' B 989  ALA  HB3', -0.468, (194.758, 190.452, 177.075)), (' A 778  THR HG22', ' A 865  LEU HD12', -0.466, (221.515, 198.242, 226.813)), (' B 818  ILE  O  ', ' B 822  LEU  HB2', -0.465, (174.527, 200.423, 228.818)), (' B 763  LEU HD22', ' B1008  VAL HG21', -0.464, (197.921, 194.113, 203.454)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.464, (223.906, 226.866, 187.144)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.462, (212.347, 189.878, 154.966)), (' A 853  GLN  NE2', ' A 960  ASN  OD1', -0.457, (216.269, 185.471, 206.283)), (' A1076  THR  OG1', ' A1097  SER  OG ', -0.457, (182.142, 186.612, 266.3)), (' A  41  LYS  HG3', ' C 562  PHE  HD1', -0.456, (218.876, 169.243, 182.936)), (' C 189  LEU  HB3', ' C 208  THR  HB ', -0.455, (245.024, 236.721, 187.876)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.454, (207.705, 233.12, 139.899)), (' C 738  CYS  HB3', ' C 760  CYS  HB2', -0.454, (196.037, 213.94, 197.306)), (' B  40  ASP  N  ', ' B  40  ASP  OD1', -0.454, (172.003, 206.904, 184.246)), (' A 391  CYS  HA ', ' A 525  CYS  HA ', -0.453, (176.357, 191.774, 168.713)), (' B 189  LEU  HB2', ' B 210  ILE HD13', -0.45, (150.726, 221.425, 183.418)), (' B  52  GLN  OE1', ' B 274  THR  OG1', -0.448, (180.168, 217.153, 188.644)), (' A 457  ARG  NH1', ' A 459  SER  OG ', -0.447, (188.374, 225.161, 159.729)), (' C 191  GLU  HB2', ' C 206  LYS  HB3', -0.447, (239.767, 233.889, 185.137)), (' B  37  TYR  H  ', ' B  55  PHE  HE2', -0.446, (167.578, 214.841, 185.566)), (' B 165  ASN  N  ', ' B 165  ASN  OD1', -0.446, (167.785, 219.028, 148.721)), (' C  18  LEU  HB2', ' C  21  ARG  HD2', -0.446, (262.851, 227.128, 166.899)), (' A 669  GLY  HA2', ' A 697  MET  HE3', -0.446, (184.88, 181.159, 222.989)), (' A 139  PRO  HB2', ' A 241  LEU HD21', -0.445, (202.856, 145.974, 166.393)), (' B1029  MET  O  ', ' B1033  VAL  HB ', -0.442, (190.02, 196.649, 237.558)), (' B 784  GLN  HB3', ' B1034  LEU HD11', -0.442, (192.212, 191.853, 237.358)), (' A 814  LYS  HA ', ' A 814  LYS  HD3', -0.438, (230.169, 185.944, 235.536)), (' B  99  ASN  OD1', ' B 190  ARG  NH2', -0.438, (147.883, 218.482, 173.377)), (' A 375  SER  O  ', ' C 408  ARG  NH2', -0.437, (197.415, 194.302, 154.111)), (' A 965  GLN HE21', ' A1003  SER  HB3', -0.436, (208.561, 192.831, 196.794)), (' C 108  THR HG22', ' C 109  THR HG23', -0.434, (242.632, 215.007, 162.562)), (' C 443  SER  HB3', ' C 499  PRO  HD3', -0.434, (209.001, 185.543, 137.111)), (' B 388  ASN  HA ', ' B 527  PRO  HD2', -0.433, (209.23, 234.214, 161.208)), (' B 903  ALA  HB2', ' B 916  LEU HD22', -0.432, (182.34, 202.462, 255.906)), (' B 393  THR HG21', ' B 520  ALA  HB3', -0.432, (222.013, 223.247, 160.915)), (' C 386  LYS  HB2', ' C 386  LYS  HE3', -0.431, (223.609, 193.006, 172.298)), (' B1128  VAL HG11', ' C 918  GLU  HG3', -0.431, (212.482, 223.597, 265.632)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.431, (191.384, 205.625, 234.693)), (' B 719  THR HG23', ' B1070  ALA  HB2', -0.43, (179.537, 217.342, 247.48)), (' C 976  VAL HG12', ' C 979  ASP  H  ', -0.43, (206.403, 221.892, 182.336)), (' C  25  PRO  HA ', ' C  26  PRO  HD3', -0.43, (261.056, 217.946, 178.978)), (' C 822  LEU HD11', ' C1061  VAL HG21', -0.429, (210.867, 223.92, 228.912)), (' A 323  THR  OG1', ' A 537  LYS  NZ ', -0.429, (177.402, 172.851, 185.479)), (' C 273  ARG  NH2', ' C 292  ALA  O  ', -0.428, (236.857, 213.573, 195.905)), (' C 719  THR HG23', ' C1070  ALA  HB2', -0.428, (222.079, 216.415, 249.621)), (' B 540  ASN  OD1', ' B 549  THR  OG1', -0.428, (200.674, 230.753, 183.526)), (' C 457  ARG  NH1', ' C 459  SER  OG ', -0.428, (191.694, 172.45, 161.793)), (' C 415  THR  OG1', ' C 416  GLY  N  ', -0.425, (195.107, 187.833, 160.262)), (' C 401  VAL HG22', ' C 509  ARG  HG2', -0.425, (212.187, 181.293, 148.724)), (' C 776  LYS  HZ2', ' C1019  ARG HH22', -0.425, (192.512, 210.798, 223.219)), (' B 610  VAL  HB ', ' B 651  ILE HG13', -0.424, (182.204, 232.397, 204.257)), (' B1037  SER  OG ', ' B1043  CYS  SG ', -0.424, (192.947, 204.596, 240.418)), (' B 417  LYS  NZ ', ' B 454  ARG  O  ', -0.423, (220.336, 224.753, 127.739)), (' B 704  SER  HB2', ' C 790  LYS  HE2', -0.422, (191.758, 235.56, 241.0)), (' A 822  LEU HD11', ' A1061  VAL HG21', -0.42, (213.925, 185.362, 231.308)), (' B 523  THR HG23', ' B 524  VAL HG23', -0.42, (222.281, 232.05, 161.672)), (' A  58  PHE  HD2', ' A 290  ASP  HB2', -0.418, (200.667, 164.929, 197.255)), (' B 317  ASN  HA ', ' B 594  GLY  HA2', -0.418, (190.644, 225.825, 198.938)), (' B 424  LYS  NZ ', ' B 425  LEU  O  ', -0.417, (217.018, 217.062, 141.155)), (' A 427  ASP  N  ', ' A 427  ASP  OD1', -0.416, (191.342, 210.852, 170.165)), (' A 862  PRO  HG3', ' C 647  ALA  HA ', -0.416, (229.868, 195.739, 215.197)), (' A  56  LEU  HA ', ' A  56  LEU HD12', -0.415, (199.959, 162.031, 187.902)), (' B 642  VAL HG22', ' B 651  ILE HG22', -0.414, (183.074, 237.901, 204.617)), (' A 957  GLN  OE1', ' B 765  ARG  NH1', -0.413, (206.762, 187.072, 207.229)), (' B 389  ASP  N  ', ' B 389  ASP  OD1', -0.413, (206.79, 229.605, 162.79)), (' B 202  LYS  HE3', ' B 204  TYR  HE1', -0.412, (168.205, 211.428, 176.33)), (' B 805  ILE  HB ', ' B1054  GLN HE22', -0.411, (177.523, 197.692, 236.392)), (' C 758  SER  HA ', ' C 761  THR HG22', -0.411, (189.482, 209.558, 197.688)), (' A 128  ILE  HB ', ' A 170  TYR  HB3', -0.411, (215.513, 156.992, 166.262)), (' A  22  THR  OG1', ' A  76  THR  O  ', -0.411, (193.628, 131.887, 177.274)), (' C  68  ILE  HA ', ' C 262  ALA  HA ', -0.411, (260.264, 233.957, 179.503)), (' A 596  SER  HG ', ' A 613  GLN HE21', -0.41, (189.41, 180.131, 207.518)), (' C  37  TYR  HD1', ' C 223  LEU  HB2', -0.41, (233.413, 230.942, 186.497)), (' C1091  ARG  HE ', ' C1121  PHE  HB3', -0.41, (203.0, 199.546, 268.722)), (' A 763  LEU HD22', ' A1008  VAL HG21', -0.41, (212.114, 202.105, 203.996)), (' A 246  ARG  HE ', ' A 258  TRP  HB3', -0.409, (204.01, 132.259, 169.163)), (' B 111  ASP  N  ', ' B 111  ASP  OD1', -0.409, (169.117, 229.552, 154.794)), (' B 822  LEU HD11', ' B1061  VAL HG21', -0.408, (179.661, 201.951, 228.421)), (' B1105  THR  OG1', ' B1109  PHE  O  ', -0.408, (188.556, 217.599, 260.346)), (' A 353  TRP  HZ3', ' A 355  ARG  HD3', -0.408, (179.293, 209.357, 157.872)), (' B 656  VAL HG21', ' B 693  ILE HD12', -0.403, (179.63, 235.522, 220.338)), (' B 985  ASP  HA ', ' B 986  PRO  HD3', -0.403, (192.831, 187.984, 173.939)), (' A 111  ASP  N  ', ' A 111  ASP  OD1', -0.402, (195.893, 155.468, 159.044)), (' C 990  GLU  O  ', ' C 994  ASP  HB2', -0.402, (200.048, 208.613, 181.947)), (' A 442  ASP  OD1', ' A 509  ARG  NH2', -0.402, (186.304, 202.023, 141.78)), (' B 753  LEU HD12', ' B 756  TYR  HB2', -0.401, (200.298, 189.703, 192.628)), (' C 916  LEU HD12', ' C 923  ILE HD12', -0.401, (211.607, 221.793, 255.097)), (' A  79  PHE  HE1', ' A 242  LEU  HB2', -0.401, (203.196, 140.619, 173.999)), (' A 612  TYR  HB2', ' A 649  CYS  HB3', -0.4, (181.644, 174.379, 206.374))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
