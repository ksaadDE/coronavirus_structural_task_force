# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 109 ', 'SER', 0.02294001371191271, (-45.727, -7.577, -12.89)), ('A', ' 494 ', 'ASP', 0.0005142580590680691, (-46.541000000000025, 18.056, -34.149)), ('B', ' 382 ', 'VAL', 0.00256301, (-28.28, -62.36900000000001, -42.992000000000004))]
data['omega'] = [('A', ' 146 ', 'PRO', None, (-50.42, -3.822, -50.125))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 291  ILE HD11', ' A 415  PRO  HG3', -0.967, (-25.152, -5.644, -64.623)), (' B 458  LYS  NZ ', ' B 701  HOH  O  ', -0.958, (-27.092, -41.622, -9.392)), (' A  74  LYS  HE2', ' A1003  NAG  H83', -0.958, (-39.601, -16.122, -11.388)), (' A  90  ASN  OD1', ' A1002  NAG  O5 ', -0.945, (-17.464, -28.71, -23.684)), (' A 246  ALA  HA ', ' A 249  MET  HE3', -0.925, (-29.522, 18.385, -59.351)), (' A 293  VAL HG23', ' A 297  MET  HE3', -0.901, (-35.433, -8.934, -62.67)), (' A 245  ARG  HB2', ' A 262  LEU HD21', -0.864, (-31.209, 15.032, -53.425)), (' B 382  VAL HG21', ' B 387  LEU HD21', -0.837, (-32.075, -63.36, -42.051)), (' A 388  GLN  HG3', ' A 389  PRO  HD2', -0.825, (-25.027, -25.692, -30.691)), (' A 474  MET  HE1', ' A 499  ASP  HB2', -0.82, (-42.228, 11.438, -37.012)), (' A 291  ILE HD11', ' A 415  PRO  CG ', -0.801, (-25.054, -6.61, -65.355)), (' A 285  PHE  HB3', ' A1102  HOH  O  ', -0.776, (-25.094, 4.156, -70.948)), (' A 229  THR HG23', ' A 516  TYR  OH ', -0.776, (-20.439, 2.676, -40.287)), (' A 253  PRO  O  ', ' A 254  SER  HB3', -0.755, (-42.048, 22.594, -59.952)), (' B 391  CYS  HB3', ' B 522  ALA  HB1', -0.747, (-36.533, -74.026, -38.326)), (' A 174  LYS  HE2', ' A 496  THR  OG1', -0.74, (-50.798, 14.859, -35.052)), (' A  74  LYS  HE2', ' A1003  NAG  C8 ', -0.708, (-39.236, -15.742, -10.556)), (' A 454  TYR  OH ', ' A 458  LYS  HE3', -0.697, (-25.259, 9.176, -34.284)), (' A 293  VAL HG23', ' A 297  MET  CE ', -0.696, (-35.268, -10.164, -62.481)), (' A  74  LYS  CE ', ' A1003  NAG  H83', -0.69, (-39.334, -15.678, -11.368)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.689, (-36.741, -77.726, -29.913)), (' A 291  ILE  CD1', ' A 415  PRO  HG3', -0.674, (-25.963, -5.472, -65.007)), (' A 402  GLU  C  ', ' A 518  ARG  HG3', -0.668, (-27.321, -9.361, -42.97)), (' A 494  ASP  HB3', ' A 496  THR  H  ', -0.655, (-47.907, 16.029, -32.91)), (' A 102  GLN  HB3', ' A 194  ASN  OD1', -0.652, (-31.987, -10.237, -17.845)), (' A  90  ASN  HA ', ' A1002  NAG  O7 ', -0.65, (-15.429, -25.785, -22.234)), (' A  74  LYS  CE ', ' A1003  NAG  C8 ', -0.647, (-39.381, -15.279, -11.075)), (' A  78  THR HG21', ' A1003  NAG  HN2', -0.647, (-36.575, -16.432, -10.435)), (' A 457  GLU  HG2', ' A 512  PHE  HB3', -0.644, (-31.635, 1.173, -36.007)), (' A 187  LYS  NZ ', ' A 509  ASP  OD2', -0.638, (-39.93, -5.264, -27.255)), (' A 284  PRO  HD2', ' A 437  ASN  OD1', -0.637, (-26.23, 3.857, -65.423)), (' A  31  LYS  HG3', ' B 489  TYR  CD1', -0.633, (-33.642, -32.081, -15.524)), (' A 477  TRP  CE3', ' A 500  PRO  HG3', -0.625, (-38.287, 8.497, -35.575)), (' A 332  MET  SD ', ' A 336  PRO  HG3', -0.622, (-50.578, -15.751, -46.862)), (' B 364  ASP  CG ', ' B 367  VAL HG13', -0.621, (-43.666, -63.894, -48.998)), (' A  32  PHE  CE2', ' A 391  LEU HD11', -0.621, (-32.673, -22.714, -23.597)), (' A 474  MET  CE ', ' A 499  ASP  H  ', -0.62, (-43.112, 11.201, -36.284)), (' A 238  GLU  HG2', ' A 604  VAL HG12', -0.619, (-21.183, 15.842, -50.673)), (' A  74  LYS  O  ', ' A  78  THR HG23', -0.619, (-35.986, -18.276, -13.477)), (' A 284  PRO  HB3', ' A 594  TRP  CH2', -0.612, (-23.888, 8.094, -63.984)), (' B 391  CYS  HB3', ' B 522  ALA  CB ', -0.597, (-35.859, -74.581, -37.787)), (' A 125  THR  O  ', ' A 129  THR  HB ', -0.596, (-53.246, -3.545, -38.386)), (' A 233  ILE HD13', ' A 450  LEU HD13', -0.59, (-22.222, 2.64, -45.145)), (' A  98  GLN  HA ', ' A 101  GLN  HG2', -0.588, (-25.228, -16.2, -18.617)), (' B 364  ASP  O  ', ' B 367  VAL HG22', -0.584, (-43.453, -62.487, -46.528)), (' A  80  ALA  HB1', ' A  97  LEU HD23', -0.58, (-28.047, -21.294, -16.491)), (' B 395  VAL HG23', ' B 524  VAL HG11', -0.58, (-39.007, -67.889, -35.744)), (' A 474  MET  HE1', ' A 499  ASP  CB ', -0.568, (-42.237, 10.994, -37.444)), (' A 318  VAL  O  ', ' A 551  GLY  HA3', -0.563, (-21.021, -23.748, -51.173)), (' B 481  ASN  O  ', ' B 483  VAL HG23', -0.56, (-38.039, -37.036, -2.746)), (' A  25  ALA  HB1', ' A  97  LEU HD11', -0.556, (-24.459, -24.825, -16.858)), (' B 474  GLN  OE1', ' B 479  PRO  HA ', -0.551, (-29.58, -37.871, -3.709)), (' A 187  LYS  HD2', ' A 199  TYR  CZ ', -0.548, (-37.924, -3.889, -25.706)), (' B 381  GLY  HA3', ' B 430  THR  HB ', -0.542, (-27.475, -62.418, -38.192)), (' A 144  LEU  HA ', ' A 148  LEU  HB2', -0.536, (-49.392, 1.306, -47.499)), (' A 288  LYS  NZ ', ' A 433  GLU  OE1', -0.534, (-22.401, 2.61, -72.872)), (' B 417  LYS  HE3', ' B 455  LEU HD12', -0.533, (-31.719, -37.155, -22.922)), (' A 226  VAL  O  ', ' A 229  THR HG22', -0.53, (-19.729, 3.53, -37.906)), (' A 515  TYR  HD1', ' A 518  ARG  NH2', -0.527, (-30.847, -5.303, -42.82)), (' A  32  PHE  HE2', ' A 391  LEU HD11', -0.523, (-32.473, -22.884, -23.604)), (' A  78  THR  CG2', ' A1003  NAG  HN2', -0.518, (-36.011, -16.615, -10.867)), (' A 514  ARG  HG3', ' A 515  TYR  N  ', -0.518, (-30.125, -4.932, -38.956)), (' A 420  SER  HB2', ' A1004  NAG  C6 ', -0.516, (-24.783, -18.9, -65.488)), (' A  32  PHE  HE2', ' A 391  LEU  CD1', -0.514, (-32.164, -22.645, -24.066)), (' A 296  ALA  O  ', ' A 300  GLN  HG3', -0.511, (-38.772, -11.787, -68.781)), (' A 459  TRP  O  ', ' A 463  VAL HG23', -0.503, (-34.513, 8.455, -29.685)), (' A 388  GLN  HG3', ' A 389  PRO  CD ', -0.502, (-25.446, -26.062, -30.007)), (' A 390  PHE  HD1', ' A 391  LEU HD12', -0.499, (-31.667, -22.415, -25.605)), (' A 555  PHE  O  ', ' A 559  ARG  HG2', -0.494, (-21.017, -24.338, -41.365)), (' A 237  TYR  CE1', ' A 451  PRO  HG2', -0.491, (-26.677, 8.166, -46.557)), (' A 233  ILE  CD1', ' A 450  LEU HD13', -0.489, (-21.677, 2.976, -44.485)), (' A 416  LYS  HE3', ' A 541  LYS  O  ', -0.48, (-18.762, -11.369, -61.778)), (' A 343  VAL HG23', ' A1108  HOH  O  ', -0.48, (-45.093, -10.657, -41.663)), (' A 351  LEU  H  ', ' A 351  LEU HD12', -0.475, (-39.833, -22.227, -38.084)), (' A 287  GLN  CD ', ' A1102  HOH  O  ', -0.472, (-25.824, 4.957, -72.253)), (' A 515  TYR  CD1', ' A 518  ARG  NH2', -0.47, (-31.209, -5.42, -43.34)), (' A 245  ARG  NH2', ' A 260  GLY  N  ', -0.469, (-30.128, 20.85, -50.669)), (' B 417  LYS  HE3', ' B 455  LEU  CD1', -0.468, (-31.646, -36.785, -22.656)), (' A 291  ILE HD11', ' A 415  PRO  CB ', -0.467, (-25.228, -6.784, -65.617)), (' A 139  GLN  HA ', ' A 139  GLN  OE1', -0.464, (-64.311, 3.608, -47.648)), (' A 288  LYS  NZ ', ' A 431  ASP  OD2', -0.458, (-21.895, 0.598, -73.227)), (' B 405  ASP  OD1', ' B 406  GLU  HG3', -0.457, (-33.56, -38.457, -32.94)), (' A 454  TYR  CZ ', ' A 458  LYS  HE3', -0.456, (-24.955, 8.917, -34.675)), (' A  32  PHE  CE2', ' A 391  LEU  CD1', -0.456, (-32.051, -23.046, -23.343)), (' B 431  GLY  HA2', ' B 515  PHE  CE1', -0.455, (-32.616, -61.052, -37.839)), (' A 536  GLU  HG2', ' A 537  GLY  H  ', -0.452, (-12.082, -11.369, -61.921)), (' A 381  TYR  CD2', ' A 404  VAL HG21', -0.45, (-26.095, -16.505, -41.782)), (' A 388  GLN  CG ', ' A 389  PRO  HD2', -0.446, (-24.823, -25.878, -30.827)), (' A  90  ASN  HB3', ' A  93  VAL  HB ', -0.442, (-18.647, -25.719, -20.675)), (' A 450  LEU  HB2', ' A 451  PRO  HD3', -0.441, (-25.465, 4.726, -45.321)), (' A 457  GLU  HA ', ' A 457  GLU  OE1', -0.439, (-32.376, 2.195, -33.315)), (' A 402  GLU  O  ', ' A 518  ARG  HG3', -0.438, (-27.73, -9.039, -43.189)), (' A 420  SER  HB2', ' A1004  NAG  H61', -0.437, (-25.284, -19.1, -64.807)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.437, (-40.567, -55.433, -29.183)), (' A 536  GLU  N  ', ' A 536  GLU  OE1', -0.435, (-12.034, -14.387, -61.078)), (' A 332  MET  CE ', ' A 336  PRO  HG3', -0.433, (-51.295, -16.092, -46.187)), (' B 383  SER  O  ', ' B 387  LEU  HG ', -0.431, (-32.736, -62.988, -44.67)), (' A 320  LEU  HB3', ' A 321  PRO  HD2', -0.43, (-27.346, -25.858, -47.752)), (' B 367  VAL  O  ', ' B 371  SER  HB3', -0.429, (-44.912, -57.395, -47.291)), (' B 336  CYS  SG ', ' B 363  ALA  HB2', -0.429, (-43.348, -66.779, -39.563)), (' A  38  ASP  OD1', ' A 353  LYS  NZ ', -0.429, (-42.435, -30.928, -29.66)), (' B 435  ALA  HA ', ' B 509  ARG  O  ', -0.429, (-40.303, -48.194, -38.043)), (' A  74  LYS  CE ', ' A1003  NAG  H81', -0.428, (-40.105, -15.235, -10.525)), (' A 259  ILE HG22', ' A 603  PHE  CG ', -0.427, (-25.599, 24.101, -53.726)), (' A 384  ALA  O  ', ' A 559  ARG  HA ', -0.427, (-24.636, -24.881, -38.587)), (' A 431  ASP  HB3', ' A 433  GLU  H  ', -0.425, (-19.681, 0.292, -70.373)), (' A  90  ASN  ND2', ' A1002  NAG  O7 ', -0.424, (-15.955, -26.122, -23.155)), (' A 420  SER  HB2', ' A1004  NAG  H62', -0.423, (-24.913, -19.106, -65.752)), (' A 543  ASP  OD1', ' A 545  SER  OG ', -0.422, (-23.756, -16.908, -58.829)), (' A 187  LYS  HD2', ' A 199  TYR  CE1', -0.422, (-37.87, -4.086, -24.866)), (' A  74  LYS  HE3', ' A1003  NAG  C8 ', -0.422, (-39.538, -14.861, -10.771)), (' A 390  PHE  HD1', ' A 391  LEU  CD1', -0.421, (-32.002, -22.455, -25.192)), (' A 492  PRO  HD3', ' A 613  TYR  CD2', -0.421, (-43.984, 22.412, -42.899)), (' A 237  TYR  CZ ', ' A 451  PRO  HG2', -0.42, (-27.33, 8.945, -46.533)), (' A 396  ALA  HB3', ' A 400  PHE  CD2', -0.418, (-21.669, -14.203, -36.681)), (' A 545  SER  O  ', ' A 546  ASN  HB2', -0.418, (-20.637, -21.351, -59.848)), (' B 431  GLY  HA2', ' B 515  PHE  HE1', -0.417, (-33.174, -61.026, -37.828)), (' A 513  ILE  HA ', ' A 513  ILE HD12', -0.415, (-28.257, 0.001, -36.937)), (' A 225  ASP  O  ', ' A 229  THR  HB ', -0.415, (-17.727, 1.879, -36.882)), (' A 477  TRP  CD2', ' A 500  PRO  HG3', -0.414, (-38.307, 9.385, -35.772)), (' B 381  GLY  O  ', ' B 382  VAL HG13', -0.412, (-27.383, -63.608, -41.055)), (' A 291  ILE  CG1', ' A 415  PRO  HG3', -0.411, (-26.256, -5.359, -64.312)), (' B 381  GLY  C  ', ' B 382  VAL HG13', -0.411, (-27.852, -63.414, -40.806)), (' A 585  LEU  HA ', ' A 585  LEU HD23', -0.41, (-17.228, 2.301, -49.578)), (' B 399  SER  HA ', ' B 510  VAL  O  ', -0.41, (-40.897, -51.883, -32.751)), (' A  50  TYR  CE1', ' A  54  ILE HG23', -0.41, (-53.275, -9.852, -35.321)), (' A 229  THR HG23', ' A 516  TYR  HH ', -0.409, (-20.238, 2.806, -40.452)), (' A 206  ASP  OD2', ' A 398  GLU  HG2', -0.409, (-27.123, -8.668, -32.523)), (' A 343  VAL  O  ', ' A 343  VAL HG23', -0.408, (-46.295, -10.492, -41.731)), (' A 351  LEU  N  ', ' A 351  LEU HD12', -0.406, (-39.918, -21.826, -37.764)), (' A 456  LEU  C  ', ' A 456  LEU HD23', -0.406, (-33.687, 3.892, -35.391)), (' A 474  MET  HE1', ' A 499  ASP  H  ', -0.404, (-42.512, 10.749, -36.303)), (' A 557  MET  HB3', ' A 557  MET  HE3', -0.404, (-20.029, -18.417, -41.918)), (' A 471  ASP  HA ', ' A 495  GLU  HG3', -0.404, (-43.461, 16.842, -28.002))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
