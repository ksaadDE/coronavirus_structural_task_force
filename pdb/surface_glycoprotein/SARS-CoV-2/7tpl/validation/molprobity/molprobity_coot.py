# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  54 ', 'LEU', 0.03166668782796357, (139.926, 135.025, 141.462)), ('B', '  81 ', 'ASN', 0.04322165329548285, (123.33900000000004, 119.55, 132.346)), ('B', '  83 ', 'VAL', 0.07692747834867263, (124.42600000000007, 125.522, 128.549)), ('B', ' 115 ', 'GLN', 0.02515064287162894, (134.198, 126.76100000000001, 119.222)), ('B', ' 139 ', 'PRO', 0.04797111097338505, (124.58900000000004, 118.418, 124.79799999999999)), ('B', ' 353 ', 'TRP', 0.0051180711600738275, (147.79199999999994, 187.113, 113.299)), ('B', ' 457 ', 'ARG', 0.017412958962213745, (165.74099999999996, 191.872, 115.30699999999999)), ('B', ' 517 ', 'LEU', 0.04678615959286744, (139.65499999999994, 178.237, 131.915)), ('B', ' 709 ', 'ASN', 0.02483413614076677, (136.81599999999995, 164.822, 216.379)), ('B', ' 835 ', 'LYS', 0.04497263503070444, (171.632, 143.57200000000006, 156.482)), ('B', ' 852 ', 'ALA', 0.00829977320585685, (174.956, 133.716, 161.059)), ('B', ' 853 ', 'GLN', 0.023031826726284666, (178.186, 134.779, 162.815)), ('B', ' 858 ', 'LEU', 0.018605561305668324, (170.013, 136.811, 163.447)), ('B', ' 941 ', 'THR', 0.03812513597554631, (151.68299999999994, 133.43000000000004, 183.85899999999998)), ('C', ' 293 ', 'LEU', 0.027293897649974, (155.98299999999995, 198.106, 154.997)), ('C', ' 317 ', 'ASN', 0.024742786880859662, (162.00199999999995, 189.474, 153.6)), ('C', ' 457 ', 'ARG', 0.005621656364909532, (190.29899999999998, 147.212, 118.149)), ('C', ' 487 ', 'ASN', 0.026309619034647208, (188.302, 141.65, 112.426)), ('C', ' 587 ', 'ILE', 0.060067410926561676, (185.36399999999995, 187.514, 145.856)), ('C', ' 617 ', 'CYS', 0.03507808374060981, (176.45499999999996, 198.049, 164.478)), ('C', ' 625 ', 'HIS', 0.04039929105131243, (169.14599999999993, 201.739, 154.602)), ('C', ' 627 ', 'ASP', 0.02653554170781285, (166.62499999999997, 197.86200000000005, 156.73)), ('C', ' 628 ', 'GLN', 0.03676864998489414, (169.67399999999995, 195.81500000000005, 155.344)), ('C', ' 630 ', 'THR', 0.011473469308219058, (169.693, 200.786, 150.639)), ('C', ' 635 ', 'VAL', 0.0065834089784653355, (163.95999999999995, 202.733, 157.699)), ('C', ' 812 ', 'PRO', 0.05237304966167161, (126.775, 170.574, 187.468)), ('C', ' 891 ', 'GLY', 0.011292964063867974, (146.96999999999994, 150.092, 203.659))]
data['omega'] = [('B', '  91 ', 'TYR', None, (134.784, 127.737, 139.843)), ('B', ' 200 ', 'TYR', None, (142.995, 131.68800000000002, 126.44))]
data['rota'] = [('A', ' 738 ', 'CYS', 0.06270452079696474, (165.96399999999994, 177.913, 155.222)), ('A', ' 739 ', 'THR', 0.008159601566148922, (165.12099999999995, 180.262, 152.296)), ('A', ' 886 ', 'TRP', 0.0054481068218592546, (169.2299999999999, 174.475, 204.96499999999997)), ('A', '1045 ', 'LYS', 0.16527712135866163, (179.55999999999995, 157.338, 198.146)), ('B', '  63 ', 'THR', 0.026012777537912368, (124.65000000000006, 126.739, 141.338)), ('B', ' 104 ', 'TRP', 0.006545903620649536, (132.04, 118.78600000000003, 130.014)), ('B', ' 116 ', 'SER', 0.05471545236084008, (133.956, 124.27700000000003, 122.135)), ('B', ' 239 ', 'GLN', 0.03918232463250546, (127.61300000000004, 122.066, 129.832)), ('B', ' 294 ', 'ASP', 0.11687085342265004, (132.978, 140.243, 157.494)), ('B', ' 453 ', 'TYR', 0.24242077875405305, (156.91299999999998, 188.484, 108.376)), ('B', ' 460 ', 'ASN', 0.046506060228644064, (161.61399999999995, 190.516, 121.22199999999997)), ('B', ' 472 ', 'ILE', 0.20182007497730456, (160.69299999999996, 201.714, 110.036)), ('B', ' 493 ', 'GLN', 0.2066635816344625, (160.22699999999995, 190.555, 103.97799999999998)), ('B', ' 524 ', 'VAL', 0.09328889751909464, (132.09299999999993, 177.145, 125.53099999999999)), ('B', ' 615 ', 'VAL', 0.2616551808336854, (128.921, 158.664, 164.249)), ('B', ' 634 ', 'ARG', 0.1019868843129566, (124.83000000000006, 144.211, 156.931)), ('B', ' 740 ', 'MET', 0.2624767185456072, (174.326, 147.3, 151.441)), ('B', ' 760 ', 'CYS', 0.058319745497557494, (174.521, 157.067, 154.483)), ('B', ' 814 ', 'LYS', 0.0, (174.45099999999994, 131.876, 189.052)), ('B', ' 840 ', 'CYS', 0.22483962463105445, (179.425, 133.602, 159.153)), ('B', ' 843 ', 'ASP', 0.0769044215734, (183.335, 135.85200000000006, 160.861)), ('B', ' 844 ', 'ILE', 0.010348257149181512, (183.32, 135.295, 157.027)), ('B', ' 847 ', 'ARG', 4.04637879838039e-05, (173.59, 133.984, 152.787)), ('B', ' 935 ', 'GLN', 0.12181312898100063, (157.16699999999994, 131.981, 192.33)), ('C', '  64 ', 'TRP', 0.0035635404083182386, (146.463, 214.53400000000005, 141.929)), ('C', ' 112 ', 'SER', 0.060005677056515556, (146.46599999999995, 205.654, 117.17)), ('C', ' 294 ', 'ASP', 0.04806304829558204, (157.75499999999994, 198.499, 158.398)), ('C', ' 323 ', 'THR', 0.008159601566148922, (173.09899999999993, 194.98700000000005, 146.361)), ('C', ' 466 ', 'ARG', 0.03045687890865429, (192.39999999999998, 161.92200000000003, 117.904)), ('C', ' 540 ', 'ASN', 0.1454317431951334, (179.66199999999995, 192.48900000000006, 140.855)), ('C', ' 549 ', 'THR', 0.07381767471812528, (179.28799999999995, 187.93, 143.477)), ('C', ' 578 ', 'ASP', 0.0003403072289973216, (190.077, 188.12, 137.422)), ('C', ' 603 ', 'ASN', 0.10837440132908938, (147.21599999999992, 194.917, 172.117)), ('C', ' 613 ', 'GLN', 0.28743712390886134, (172.68599999999995, 189.663, 163.963)), ('C', ' 619 ', 'GLU', 0.22804557913935808, (179.54499999999993, 197.20300000000003, 159.599)), ('C', ' 634 ', 'ARG', 0.06006119266475748, (161.78199999999995, 205.224, 155.673)), ('C', ' 646 ', 'ARG', 0.027246063085691274, (177.4279999999999, 191.58, 172.40199999999996)), ('C', ' 760 ', 'CYS', 0.20579030439087112, (150.309, 154.58900000000006, 155.099)), ('C', ' 907 ', 'ASN', 0.1381984182218568, (156.47299999999996, 166.60600000000005, 214.56299999999996)), ('C', ' 948 ', 'LEU', 0.1535566627645483, (147.9739999999999, 173.517, 179.982)), ('C', '1072 ', 'GLU', 0.16803702717326782, (163.92899999999992, 185.823, 214.02399999999997)), ('C', '1125 ', 'ASN', 1.3306148729033774e-05, (185.64299999999994, 166.91800000000006, 229.33999999999997))]
data['cbeta'] = [('A', ' 745 ', 'ASP', ' ', 0.26262738624193277, (169.73099999999994, 185.218, 148.039)), ('B', ' 195 ', 'LYS', ' ', 0.2609624282262688, (140.114, 131.33100000000005, 135.914)), ('C', ' 457 ', 'ARG', ' ', 0.2832302945710151, (190.563, 148.72, 118.39899999999999)), ('C', ' 582 ', 'LEU', ' ', 0.25207658464261057, (195.274, 189.08300000000006, 135.237)), ('C', ' 587 ', 'ILE', ' ', 0.2745184737180981, (185.373, 186.9, 144.444)), ('C', ' 622 ', 'VAL', ' ', 0.275464855174705, (170.27599999999995, 200.16, 159.609)), ('C', ' 624 ', 'ILE', ' ', 0.2755294001053826, (174.17299999999994, 202.518, 154.253)), ('C', ' 625 ', 'HIS', ' ', 0.30780900263885275, (168.90699999999995, 203.073, 153.867)), ('C', ' 629 ', 'LEU', ' ', 0.27153822831797875, (169.10699999999994, 196.304, 150.759)), ('C', ' 635 ', 'VAL', ' ', 0.26008538963226585, (165.13499999999993, 202.348, 156.774))]
data['probe'] = [(' C 629  LEU  HG ', ' C 630  THR  H  ', -0.507, (168.994, 198.621, 149.53)), (' C 293  LEU  HG ', ' C 294  ASP  H  ', -0.49, (155.207, 199.374, 157.056)), (' C 473  TYR  CE2', ' C 491  PRO  HA ', -0.469, (190.406, 147.125, 111.054)), (' B 748  GLU  CD ', ' B 748  GLU  H  ', -0.462, (175.872, 149.249, 139.424)), (' A1045  LYS  HA ', ' A1045  LYS  HE3', -0.457, (178.724, 156.251, 197.462)), (' C 424  LYS  H  ', ' C 461  LEU HD23', -0.447, (186.79, 157.845, 120.302)), (' B  37  TYR  CE1', ' B 193  VAL HG11', -0.447, (140.978, 129.386, 141.883)), (' C 541  PHE  CD1', ' C 543  PHE  CD2', -0.442, (184.116, 187.272, 138.79)), (' A1083  HIS  CG ', ' A1084  ASP  H  ', -0.435, (167.551, 142.627, 235.766)), (' C 350  VAL HG23', ' C 400  PHE  CD1', -0.426, (182.459, 161.053, 112.375)), (' C 431  GLY  HA2', ' C 515  PHE  CE2', -0.423, (178.236, 172.305, 123.934)), (' C 429  PHE  CZ ', ' C 431  GLY  HA3', -0.41, (179.296, 168.58, 123.037)), (' B 235  ILE  N  ', ' B 235  ILE HD12', -0.409, (137.113, 129.485, 126.709)), (' B 391  CYS  CB ', ' B 525  CYS  HA ', -0.407, (132.27, 173.546, 127.718))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
