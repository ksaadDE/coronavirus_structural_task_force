# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 335 ', 'LEU', 0.04577668747448945, (24.778269999999985, -24.64492, 57.48256)), ('A', ' 387 ', 'LEU', 0.20757925871831978, (24.00598, -15.80854, 70.64361000000001)), ('A', ' 415 ', 'THR', 0.05604722701185094, (24.32095, 11.04351, 62.02728000000001)), ('A', ' 430 ', 'THR', 0.08389704035619767, (17.39442, -5.88135, 66.53342000000002)), ('A', ' 441 ', 'LEU', 0.04987917022560002, (42.40587, -5.922680000000003, 50.42452)), ('A', ' 468 ', 'ILE', 0.047297332716099934, (21.36975, 4.749030000000003, 43.90084000000001)), ('A', ' 517 ', 'LEU', 0.012676347441775496, (10.94072, -11.42208, 64.27339)), ('B', ' 430 ', 'THR', 0.09460799282346462, (34.739499999999985, 13.83397, 15.01816)), ('B', ' 455 ', 'LEU', 0.24788433157455358, (41.26852, -6.5362699999999965, -1.55538)), ('C', '  11 ', 'LEU', 0.0, (35.73966, 2.72684, -31.79542)), ('C', '  12 ', 'VAL', 0.07242975990737735, (32.05335, 2.9066199999999984, -32.7287)), ('D', '  12 ', 'VAL', 0.04334893492866578, (26.42606, -0.7271399999999996, 18.61791)), ('D', '  69 ', 'VAL', 0.038134007528055215, (42.36848, 3.6977499999999983, 28.37237)), ('D', ' 110 ', 'GLN', 0.0, (27.71206, 14.2231, 32.24929000000001)), ('D', ' 112 ', 'THR', 0.008877635411188526, (27.10657999999998, 8.9276, 27.73758000000001))]
data['cbeta'] = []
data['probe'] = [(' C  70  SER  HB3', ' C  79  SER  HB2', -0.752, (26.95, -14.586, -26.404)), (' D  70  SER  HB3', ' D  79  SER  HB2', -0.74, (42.304, 7.248, 24.216)), (' F   2  NAG  H3 ', ' F   2  NAG  H83', -0.632, (8.029, 9.554, 9.624)), (' E   2  NAG  H3 ', ' E   2  NAG  H83', -0.622, (38.574, -22.562, 60.713)), (' C  82  MET  HB3', ' C  85  LEU HD21', -0.601, (27.261, -2.153, -27.14)), (' A 493  GLN HE22', ' D 106  ASP  H  ', -0.584, (35.557, 14.083, 44.802)), (' D  29  PHE  O  ', ' D  71  ARG  NH2', -0.58, (46.189, 14.236, 34.008)), (' C  30  LYS  HG2', ' C  73  ASN  HB3', -0.578, (28.892, -25.25, -20.23)), (' D  30  LYS  HG2', ' D  73  ASN  HB3', -0.567, (49.85, 15.916, 30.146)), (' C  39  GLN  HB2', ' C  45  LEU HD23', -0.561, (35.482, -0.463, -14.464)), (' B 350  VAL HG22', ' B 422  ASN  HB3', -0.558, (36.071, 0.339, 1.292)), (' C  12  VAL HG11', ' C  85  LEU HD12', -0.551, (29.18, 0.888, -30.774)), (' D  90  THR HG23', ' D 115  THR  HA ', -0.545, (23.086, -0.202, 25.648)), (' C  29  PHE  O  ', ' C  71  ARG  NH2', -0.543, (30.194, -21.378, -16.518)), (' D  82  MET  HB3', ' D  85  LEU HD21', -0.542, (33.27, -1.152, 24.101)), (' B 493  GLN HE22', ' C 106  ASP  H  ', -0.541, (37.722, -13.453, -6.29)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.539, (24.579, -6.306, 66.552)), (' B 379  CYS  HA ', ' B 432  CYS  HA ', -0.523, (29.606, 8.802, 15.618)), (' C  96  MET  HG3', ' C 108  TRP  CE2', -0.517, (36.135, -9.777, -11.356)), (' C   5  VAL  HB ', ' C  23  ALA  HB3', -0.514, (39.962, -14.988, -23.953)), (' A 362  VAL HG13', ' A 526  GLY  HA3', -0.506, (22.052, -24.269, 63.467)), (' D   6  GLU  N  ', ' D 110  GLN  OE1', -0.504, (31.081, 15.277, 28.141)), (' A 468  ILE  H  ', ' A 468  ILE HD13', -0.502, (19.134, 3.832, 44.044)), (' C  90  THR HG23', ' C 115  THR  HA ', -0.5, (34.498, 5.397, -25.798)), (' A 350  VAL HG22', ' A 422  ASN  HB3', -0.492, (26.057, 4.454, 52.598)), (' B 492  LEU HD12', ' C  45  LEU HD12', -0.488, (36.436, -2.912, -10.33)), (' A 439  ASN  O  ', ' A 443  SER  HB3', -0.487, (44.423, -1.811, 51.413)), (' D   5  VAL  HB ', ' D  23  ALA  HB3', -0.483, (35.066, 17.459, 27.052)), (' B 454  ARG  NH2', ' B 467  ASP  O  ', -0.483, (40.884, 1.944, -5.833)), (' B 493  GLN HE22', ' C 106  ASP  N  ', -0.47, (37.299, -13.697, -6.301)), (' D 101  SER  HB2', ' D 104  GLU  HG2', -0.47, (42.359, 18.637, 45.104)), (' A 393  THR  O  ', ' A 523  THR  OG1', -0.469, (13.475, -17.62, 58.215)), (' A 365  TYR  HA ', ' A 368  LEU HD23', -0.461, (28.395, -17.411, 63.714)), (' B 335  LEU  H  ', ' B 335  LEU HD23', -0.445, (13.981, 21.471, 5.266)), (' B 439  ASN  O  ', ' B 443  SER  HB3', -0.439, (19.17, -9.142, 0.508)), (' A 393  THR  HA ', ' A 522  ALA  HA ', -0.434, (11.416, -17.496, 61.471)), (' C  51  ILE HD13', ' C  71  ARG  HB2', -0.432, (25.336, -16.819, -20.043)), (' B 386  LYS  O  ', ' B 388  ASN  N  ', -0.432, (22.287, 16.605, 19.292)), (' B 392  PHE  CE1', ' B 515  PHE  HB3', -0.431, (30.997, 18.64, 14.134)), (' D  92  VAL HG22', ' D 113  GLN  HG2', -0.43, (22.83, 6.122, 29.191)), (' D  34  MET  HE2', ' D  78  VAL HG21', -0.427, (39.989, 12.244, 32.512)), (' C  92  VAL HG22', ' C 113  GLN  HG2', -0.425, (39.606, 1.249, -21.767)), (' E   1  NAG  H4 ', ' E   2  NAG  N2 ', -0.425, (37.966, -20.739, 57.899)), (' B 374  PHE  HA ', ' B 436  TRP  HB3', -0.418, (19.891, 0.712, 10.801)), (' B 476  GLY  H  ', ' B 487  ASN  HB3', -0.415, (53.824, -10.865, -7.579)), (' D  96  MET  SD ', ' D 106  ASP  HB3', -0.415, (36.147, 11.681, 41.047)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.414, (29.974, 26.13, 9.751)), (' B 396  TYR  HB2', ' B 514  SER  HB2', -0.408, (32.313, 14.647, 6.158)), (' A 409  GLN  HB3', ' A 419  ALA  HB2', -0.406, (25.851, 7.136, 60.519)), (' A 374  PHE  HA ', ' A 436  TRP  HB3', -0.405, (36.816, -7.356, 62.019)), (' C  34  MET  HE2', ' C  78  VAL HG21', -0.404, (32.473, -15.294, -18.77)), (' B 501  ASN  HB3', ' B 505  TYR  HB2', -0.403, (26.682, -14.176, 4.821)), (' D  12  VAL HG11', ' D  85  LEU HD12', -0.403, (29.624, -1.635, 20.681)), (' C  40  VAL  HB ', ' C  43  GLN  HG2', -0.4, (33.83, 6.273, -15.423))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
