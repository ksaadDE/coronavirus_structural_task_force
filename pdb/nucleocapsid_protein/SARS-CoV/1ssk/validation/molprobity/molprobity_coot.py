# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   4 ', 'SER', 0.013663089669820903, (-7.524000000000002, 19.406, 14.832999999999997)), ('A', '   7 ', 'HIS', 0.012560584177671358, (-8.46, 27.868, 19.929999999999993)), ('A', '  17 ', 'ARG', 0.015505446973821085, (-4.201000000000001, 41.29099999999998, 28.133)), ('A', '  21 ', 'MET', 0.019676084016219904, (-12.013, 45.65099999999999, 30.459999999999994)), ('A', '  29 ', 'SER', 0.0005542688953308097, (-28.501000000000005, 46.878999999999984, 34.835)), ('A', '  31 ', 'PHE', 0.03163453223699158, (-33.579, 46.731, 36.828)), ('A', '  38 ', 'GLY', 0.03855611630865855, (-37.55300000000001, 67.142, 43.607)), ('A', '  43 ', 'ARG', 0.0012734792645686809, (-35.589, 57.166, 50.413)), ('A', '  51 ', 'PRO', 0.01699778879963166, (-39.485, 47.38899999999999, 45.593)), ('A', '  57 ', 'GLY', 0.0912271025417195, (-33.489, 37.883999999999986, 47.94)), ('A', '  81 ', 'GLU', 0.04906387152013021, (-28.115, 65.96199999999997, 31.27)), ('A', '  92 ', 'GLY', 0.09422326353250068, (-28.886, 39.36, 50.780999999999985)), ('A', '  95 ', 'PRO', 0.01256882723003538, (-24.682, 37.477, 45.882)), ('A', ' 103 ', 'ALA', 0.038831094034555445, (-23.057000000000006, 51.385, 54.66299999999998)), ('A', ' 121 ', 'LYS', 0.0006092754904464446, (-30.166, 33.281, 45.873)), ('A', ' 123 ', 'HIS', 0.0003009501190059661, (-28.556000000000008, 35.342, 39.691999999999986)), ('A', ' 129 ', 'PRO', 0.04788778113204079, (-27.144, 42.34899999999998, 25.954)), ('A', ' 130 ', 'ASN', 0.0041124115312135825, (-28.337, 38.871999999999986, 24.956)), ('A', ' 133 ', 'ALA', 0.008494321652536224, (-34.041, 43.192, 29.492)), ('A', ' 136 ', 'VAL', 0.00512602, (-37.48100000000001, 46.90999999999998, 36.499)), ('A', ' 137 ', 'LEU', 0.005322259855134931, (-38.706, 47.268999999999984, 40.09099999999999)), ('A', ' 140 ', 'PRO', 0.02230555383499659, (-46.219, 47.548, 45.992999999999995)), ('A', ' 144 ', 'THR', 0.0032220986035872623, (-44.977, 55.796, 47.272)), ('A', ' 146 ', 'PRO', 0.004334056162242285, (-40.92, 61.204, 48.802)), ('A', ' 147 ', 'LYS', 0.002560837127334757, (-41.492, 64.932, 48.143999999999984)), ('A', ' 151 ', 'ALA', 0.01626614609540845, (-40.878, 56.10499999999999, 40.0)), ('A', ' 156 ', 'GLY', 0.07953677386115256, (-44.465, 51.944, 28.589))]
data['omega'] = []
data['rota'] = [('A', '   3 ', 'SER', 0.1946357953456672, (-6.78, 18.686000000000007, 11.172999999999996)), ('A', '   5 ', 'HIS', 0.009216609977051352, (-7.602, 23.195, 15.15)), ('A', '   8 ', 'HIS', 0.16664749310861132, (-7.229, 31.365, 19.077)), ('A', '  10 ', 'HIS', 0.037091097612728496, (-1.2520000000000004, 32.32499999999999, 17.909)), ('A', '  14 ', 'LEU', 0.02990666643979492, (2.4450000000000007, 35.615, 26.162)), ('A', '  17 ', 'ARG', 0.10270133062405011, (-4.201000000000001, 41.29099999999998, 28.133)), ('A', '  21 ', 'MET', 0.0, (-12.013, 45.65099999999999, 30.459999999999994)), ('A', '  27 ', 'THR', 0.008159601566148922, (-23.869000000000007, 43.186, 33.831999999999994)), ('A', '  31 ', 'PHE', 0.022990279839098602, (-33.579, 46.731, 36.828)), ('A', '  32 ', 'THR', 0.0, (-34.601, 50.38599999999999, 36.776)), ('A', '  34 ', 'LEU', 0.1503587668745273, (-35.999, 55.933, 40.65699999999998)), ('A', '  35 ', 'THR', 0.06118765004840215, (-35.48999999999999, 59.350999999999985, 39.055)), ('A', '  41 ', 'GLU', 0.1494385423980577, (-32.781, 62.42, 47.933)), ('A', '  43 ', 'ARG', 0.0012919557687263662, (-35.589, 57.166, 50.413)), ('A', '  46 ', 'ARG', 0.15012334283728074, (-41.766, 53.170999999999985, 55.476)), ('A', '  50 ', 'VAL', 0.007351242675213143, (-37.32, 48.293, 48.628)), ('A', '  54 ', 'THR', 0.0017341489399391285, (-38.279, 39.328, 41.568)), ('A', '  56 ', 'SER', 0.07050780046683079, (-32.93800000000002, 39.01099999999999, 44.363)), ('A', '  66 ', 'ARG', 0.011658790422175625, (-26.636, 54.16599999999998, 43.867)), ('A', '  70 ', 'ARG', 0.2894665665727771, (-25.613, 60.065, 33.107)), ('A', '  71 ', 'ARG', 0.09787841390499136, (-24.84, 62.805, 30.584999999999994)), ('A', '  79 ', 'MET', 0.0, (-25.997, 69.114, 27.18)), ('A', '  80 ', 'LYS', 0.012921716481110476, (-29.401, 67.74199999999998, 28.166)), ('A', '  96 ', 'GLU', 0.10197170290001055, (-21.962, 39.891, 47.05999999999999)), ('A', ' 105 ', 'LYS', 0.0, (-23.07700000000001, 57.232, 52.246)), ('A', ' 108 ', 'ILE', 0.05552888376656921, (-26.243, 56.149999999999984, 48.52)), ('A', ' 111 ', 'VAL', 0.003150532575091347, (-32.817000000000014, 50.114, 52.977)), ('A', ' 118 ', 'ASN', 0.24566987491209197, (-30.459, 36.115, 55.055)), ('A', ' 121 ', 'LYS', 0.0, (-30.166, 33.281, 45.873)), ('A', ' 122 ', 'ASP', 0.00030042607487472324, (-27.824, 35.003, 43.413)), ('A', ' 124 ', 'ILE', 0.005082675360704312, (-29.652, 38.89199999999999, 38.876)), ('A', ' 126 ', 'THR', 0.07365438697504402, (-26.806, 41.369, 35.007)), ('A', ' 131 ', 'ASN', 0.055674776282807294, (-29.935, 37.378, 28.064)), ('A', ' 137 ', 'LEU', 0.03583905934905927, (-38.706, 47.268999999999984, 40.09099999999999)), ('A', ' 141 ', 'GLN', 0.18004301176113213, (-49.593, 49.18999999999998, 46.613)), ('A', ' 144 ', 'THR', 0.0027198671887163073, (-44.977, 55.796, 47.272)), ('A', ' 145 ', 'LEU', 0.031750245991164674, (-42.30699999999999, 58.415, 46.545)), ('A', ' 152 ', 'GLU', 0.006046112486496054, (-38.26200000000001, 53.812, 38.441)), ('A', ' 155 ', 'ARG', 0.0, (-40.942, 52.613, 29.816999999999993))]
data['cbeta'] = []
data['probe'] = [(' A  89  TYR  CE2', ' A  91  LEU HD21', -0.809, (-25.267, 44.822, 46.728)), (' A  32  THR HG23', ' A 136  VAL HG12', -0.803, (-36.323, 49.226, 34.62)), (' A 100  PRO  HG2', ' A 103  ALA  HB2', -0.798, (-21.831, 49.308, 54.044)), (' A 139  LEU HD13', ' A 143  THR  O  ', -0.752, (-43.186, 53.403, 45.74)), (' A 100  PRO  CG ', ' A 103  ALA  HB2', -0.751, (-21.091, 48.917, 54.145)), (' A  42  LEU HD23', ' A  43  ARG  N  ', -0.728, (-34.835, 57.226, 48.461)), (' A  42  LEU  O  ', ' A 109  VAL HG21', -0.701, (-32.713, 58.115, 48.991)), (' A  31  PHE  N  ', ' A 134  ALA  HB1', -0.698, (-33.084, 46.086, 34.575)), (' A 151  ALA  HB1', ' A 152  GLU  OE2', -0.68, (-42.17, 53.927, 39.258)), (' A 139  LEU HD22', ' A 143  THR  CG2', -0.651, (-41.924, 51.227, 46.986)), (' A 145  LEU HD12', ' A 149  PHE  O  ', -0.649, (-42.165, 59.778, 42.084)), (' A  32  THR HG23', ' A 136  VAL  CG1', -0.641, (-36.385, 49.314, 34.119)), (' A  32  THR  CG2', ' A 136  VAL HG12', -0.624, (-36.898, 50.03, 34.956)), (' A  99  LEU HD23', ' A 110  TRP  HZ2', -0.611, (-23.252, 48.87, 50.601)), (' A  72  VAL HG11', ' A  82  LEU HD13', -0.593, (-29.084, 60.789, 27.999)), (' A  14  LEU HD23', ' A  15  VAL  N  ', -0.569, (2.977, 37.395, 28.022)), (' A 145  LEU  N  ', ' A 145  LEU HD23', -0.567, (-43.32, 57.23, 45.739)), (' A  99  LEU HD23', ' A 110  TRP  CZ2', -0.564, (-23.996, 48.467, 50.828)), (' A 144  THR  C  ', ' A 145  LEU HD23', -0.562, (-43.575, 56.127, 46.068)), (' A  44  PHE  CE2', ' A 139  LEU HD21', -0.56, (-39.636, 52.431, 45.304)), (' A  72  VAL HG21', ' A  80  LYS  HE2', -0.552, (-30.497, 63.963, 26.544)), (' A  44  PHE  HE2', ' A 139  LEU HD11', -0.552, (-39.955, 53.662, 44.809)), (' A  72  VAL  CG1', ' A  82  LEU HD13', -0.525, (-29.038, 61.263, 28.191)), (' A 139  LEU HD22', ' A 143  THR HG21', -0.521, (-41.556, 50.828, 47.697)), (' A  42  LEU  C  ', ' A  42  LEU HD23', -0.505, (-34.265, 56.834, 48.266)), (' A  89  TYR  HE2', ' A  91  LEU HD21', -0.501, (-24.95, 45.454, 47.744)), (' A  64  TYR  CE2', ' A  89  TYR  CD2', -0.495, (-25.584, 47.958, 46.739)), (' A  72  VAL HG23', ' A  80  LYS  HG3', -0.494, (-28.594, 65.119, 26.161)), (' A  32  THR  OG1', ' A 136  VAL HG12', -0.491, (-36.873, 49.43, 36.045)), (' A  44  PHE  CE2', ' A 139  LEU HD11', -0.473, (-40.011, 53.657, 45.058)), (' A  44  PHE  CE1', ' A  65  TYR  CZ ', -0.473, (-35.218, 52.23, 46.271)), (' A  63  GLY  HA2', ' A  91  LEU HD12', -0.471, (-28.449, 46.094, 49.729)), (' A 139  LEU HD22', ' A 143  THR HG22', -0.467, (-41.625, 51.746, 47.53)), (' A  62  ILE HD12', ' A 101  TYR  CD1', -0.461, (-28.513, 44.197, 54.209)), (' A  91  LEU HD12', ' A 110  TRP  CZ3', -0.453, (-26.975, 46.563, 50.631)), (' A  86  TRP  CD1', ' A  86  TRP  N  ', -0.449, (-31.47, 57.55, 41.547)), (' A  32  THR  CB ', ' A 136  VAL HG12', -0.448, (-36.375, 49.928, 35.689)), (' A  86  TRP  CZ3', ' A 109  VAL HG23', -0.448, (-29.686, 57.719, 48.211)), (' A  31  PHE  CD2', ' A 137  LEU HD23', -0.447, (-35.485, 47.958, 40.029)), (' A  52  ILE HG22', ' A  53  ASN  O  ', -0.439, (-41.207, 41.796, 43.063)), (' A  31  PHE  CE2', ' A 137  LEU  HB3', -0.426, (-36.652, 46.821, 41.172)), (' A  32  THR  HB ', ' A 152  GLU  HB2', -0.422, (-37.395, 51.78, 37.525)), (' A  51  PRO  HB3', ' A 137  LEU  HB2', -0.422, (-39.113, 48.271, 42.487)), (' A  30  TRP  CD1', ' A  30  TRP  O  ', -0.418, (-32.825, 42.835, 36.842)), (' A  33  ALA  HB2', ' A  87  TYR  CD1', -0.409, (-31.309, 52.905, 37.765)), (' A 101  TYR  OH ', ' A 112  ALA  HB1', -0.409, (-32.066, 44.818, 56.598)), (' A 128  ASN  O  ', ' A 130  ASN  N  ', -0.407, (-27.904, 40.548, 27.073)), (' A  30  TRP  CZ3', ' A 133  ALA  O  ', -0.405, (-33.05, 41.027, 31.991)), (' A  56  SER  HB3', ' A  90  TYR  CG ', -0.403, (-30.794, 41.252, 43.748)), (' A 146  PRO  HB2', ' A 149  PHE  CE1', -0.402, (-38.31, 62.6, 47.561)), (' A  36  GLN  HG3', ' A 149  PHE  CE2', -0.402, (-35.029, 62.454, 45.138))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
