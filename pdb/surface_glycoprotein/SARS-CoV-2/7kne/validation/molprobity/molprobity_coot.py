# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('C', ' 658 ', 'ASN', 0.07305660354850556, (243.718, 210.235, 175.17600000000004)), ('B', ' 523 ', 'THR', 0.07765042793215546, (215.75700000000006, 179.44799999999998, 234.398))]
data['cbeta'] = []
data['probe'] = [(' C1302  NAG  H3 ', ' C1302  NAG  H83', -1.149, (226.661, 222.591, 126.579)), (' C1302  NAG  C8 ', ' C1302  NAG  H3 ', -1.011, (226.336, 220.997, 126.508)), (' B 707  TYR  HB2', ' C 883  THR HG23', -0.997, (205.813, 174.11, 150.385)), (' B 707  TYR  HB2', ' C 883  THR  CG2', -0.995, (205.352, 174.082, 150.669)), (' C1302  NAG  C3 ', ' C1302  NAG  H83', -0.888, (227.066, 221.954, 126.551)), (' B 705  VAL  CG2', ' C 883  THR HG21', -0.822, (204.627, 174.37, 151.918)), (' B 707  TYR  CB ', ' C 883  THR HG23', -0.803, (206.265, 174.229, 150.22)), (' D 108  LEU HD23', ' D 112  LYS  HG3', -0.764, (211.121, 165.85, 307.881)), (' C 319  ARG  NH1', ' C 590  CYS  SG ', -0.742, (228.161, 217.922, 205.591)), (' B1006  THR  O  ', ' B1009  THR  OG1', -0.711, (196.893, 202.908, 193.247)), (' A 756  TYR  OH ', ' A 994  ASP  OD1', -0.704, (207.257, 203.102, 212.615)), (' B 707  TYR  CG ', ' C 883  THR HG23', -0.701, (207.215, 174.67, 150.616)), (' C 951  VAL  O  ', ' C 955  ASN  ND2', -0.7, (211.071, 188.972, 185.496)), (' A 908  GLY  O  ', ' A1038  LYS  NZ ', -0.69, (207.433, 206.152, 147.606)), (' B 705  VAL HG21', ' C 883  THR  CG2', -0.685, (203.911, 175.013, 152.084)), (' D 503  LEU HD23', ' D 505  HIS  H  ', -0.68, (191.243, 154.795, 301.501)), (' D 508  ASN  ND2', ' D 508  ASN  O  ', -0.679, (199.248, 157.064, 298.076)), (' D 107  VAL HG23', ' D 108  LEU HD12', -0.674, (209.989, 170.96, 305.375)), (' A1019  ARG  NH1', ' C1017  GLU  OE1', -0.669, (211.563, 200.335, 179.548)), (' A 420  ASP  OD2', ' A 460  ASN  ND2', -0.661, (189.129, 184.916, 232.454)), (' B 676  THR  O  ', ' B 690  GLN  N  ', -0.657, (175.458, 168.599, 175.643)), (' B 705  VAL HG23', ' C 883  THR HG21', -0.653, (204.081, 174.121, 151.974)), (' C 905  ARG  NH1', ' C1049  LEU  O  ', -0.652, (211.188, 189.687, 154.486)), (' C 964  LYS  O  ', ' C 967  SER  OG ', -0.65, (212.011, 189.886, 206.982)), (' D 544  ILE  O  ', ' D 547  SER  OG ', -0.649, (174.023, 164.786, 272.723)), (' C1028  LYS  NZ ', ' C1042  PHE  O  ', -0.643, (212.439, 195.841, 165.051)), (' D 177  ARG  NH2', ' D 181  GLU  OE1', -0.643, (199.308, 157.21, 319.381)), (' C  28  TYR  HB2', ' C1309  NAG  H82', -0.64, (251.733, 194.753, 215.707)), (' A 357  ARG  NH2', ' A 358  ILE  O  ', -0.633, (166.288, 201.368, 227.94)), (' C 736  VAL  O  ', ' C 764  ASN  ND2', -0.628, (195.577, 187.263, 196.413)), (' A 299  THR HG22', ' A 597  VAL HG21', -0.627, (191.116, 230.692, 189.246)), (' A 951  VAL  O  ', ' A 955  ASN  ND2', -0.623, (210.092, 216.665, 184.049)), (' D 334  THR HG22', ' D 335  ASP  H  ', -0.619, (193.758, 138.383, 277.865)), (' C 493  GLN  NE2', ' C 494  SER  O  ', -0.616, (184.681, 223.482, 251.944)), (' A 729  VAL HG12', ' A1059  GLY  HA2', -0.613, (215.037, 213.944, 174.114)), (' C 570  ALA  O  ', ' C 572  THR HG23', -0.611, (213.171, 221.902, 206.085)), (' B 802  PHE  HD1', ' B 805  ILE HD11', -0.61, (181.196, 204.128, 153.408)), (' B 642  VAL HG12', ' B 651  ILE HG22', -0.609, (187.396, 165.629, 190.528)), (' B 705  VAL  CG2', ' C 883  THR  CG2', -0.609, (204.45, 174.849, 151.939)), (' A 725  GLU  OE1', ' A1064  HIS  NE2', -0.601, (208.358, 214.888, 163.376)), (' A1302  NAG  C1 ', ' A1302  NAG  H82', -0.6, (183.544, 204.988, 123.06)), (' B 957  GLN  OE1', ' C 765  ARG  NH1', -0.599, (187.963, 195.367, 190.591)), (' C 619  GLU  N  ', ' C 619  GLU  OE2', -0.599, (237.418, 217.355, 201.24)), (' D 208  GLU  OE2', ' D 210  ASN  ND2', -0.597, (195.212, 181.974, 298.425)), (' C1135  ASN  OD1', ' C1136  THR  N  ', -0.595, (226.11, 209.104, 124.446)), (' B 153  MET  N  ', ' B 153  MET  SD ', -0.593, (132.896, 176.513, 225.486)), (' A 374  PHE  HB3', ' A 434  ILE HD11', -0.59, (181.257, 209.583, 240.392)), (' C 658  ASN  C  ', ' C 658  ASN HD22', -0.588, (243.625, 208.802, 176.25)), (' A 493  GLN  NE2', ' A 494  SER  O  ', -0.588, (185.061, 187.734, 253.544)), (' B 985  ASP  N  ', ' B 988  GLU  OE2', -0.585, (186.114, 212.226, 223.299)), (' C 405  ASP  N  ', ' C 504  GLY  O  ', -0.582, (192.902, 214.018, 248.583)), (' B 371  SER  HG ', ' B 373  SER  HG ', -0.58, (204.931, 160.486, 248.614)), (' A1096  VAL  O  ', ' A1103  PHE  N  ', -0.58, (194.555, 214.284, 129.114)), (' C 395  VAL  O  ', ' C 395  VAL HG12', -0.577, (207.982, 229.627, 234.009)), (' A 328  ARG  NH1', ' A 580  GLN  OE1', -0.575, (158.558, 216.622, 215.612)), (' A 371  SER  OG ', ' A 373  SER  OG ', -0.574, (176.998, 212.901, 244.355)), (' A1135  ASN  OD1', ' A1136  THR  N  ', -0.573, (192.707, 209.126, 121.075)), (' D 574  VAL HG23', ' D 576  ALA  H  ', -0.571, (175.307, 178.162, 287.813)), (' A 763  LEU HD11', ' A1005  GLN  NE2', -0.57, (209.791, 203.263, 199.311)), (' A 514  SER  OG ', ' A 516  GLU  OE2', -0.569, (177.643, 198.967, 226.573)), (' B1039  ARG  NH2', ' C1031  GLU  OE2', -0.566, (203.143, 198.478, 162.46)), (' A 619  GLU  N  ', ' A 619  GLU  OE2', -0.564, (171.654, 228.371, 193.856)), (' B 393  THR  HB ', ' B 523  THR  HB ', -0.562, (215.368, 180.38, 236.27)), (' D 520  LEU HD12', ' D 521  TYR  CD1', -0.56, (180.091, 169.969, 292.161)), (' C 729  VAL HG22', ' C1059  GLY  HA2', -0.556, (208.713, 186.724, 175.102)), (' A 414  GLN  NE2', ' A 415  THR  O  ', -0.553, (194.818, 192.676, 234.146)), (' A 697  MET  SD ', ' A 698  SER  N  ', -0.553, (185.85, 224.254, 167.564)), (' B 707  TYR  CD1', ' C 883  THR HG23', -0.553, (206.862, 174.69, 150.24)), (' C 290  ASP  OD1', ' C 291  CYS  N  ', -0.551, (232.787, 194.128, 206.042)), (' A1302  NAG  C1 ', ' A1302  NAG  C8 ', -0.55, (182.737, 204.558, 122.617)), (' A 369  TYR  OH ', ' A 384  PRO  O  ', -0.547, (178.933, 213.845, 230.286)), (' A 377  PHE  HD1', ' A 434  ILE HD13', -0.547, (180.978, 209.589, 237.314)), (' A1118  ASP  OD2', ' A1119  ASN  N  ', -0.546, (204.135, 204.106, 127.218)), (' A 309  GLU  O  ', ' A 313  TYR  OH ', -0.541, (197.194, 229.711, 183.595)), (' D 453  THR HG23', ' D 512  PHE  CE2', -0.537, (185.436, 159.69, 301.207)), (' C 474  GLN  NE2', ' C 478  THR  O  ', -0.534, (166.699, 231.235, 239.528)), (' C 436  TRP  O  ', ' C 509  ARG  N  ', -0.533, (201.319, 219.86, 247.825)), (' C 722  VAL HG23', ' C 934  ILE HD11', -0.531, (223.046, 185.211, 163.446)), (' C 365  TYR  H  ', ' C 387  LEU HD13', -0.53, (216.707, 222.599, 235.724)), (' D 511  SER  OG ', ' D 514  ARG  NH2', -0.527, (192.621, 164.439, 296.322)), (' A 703  ASN  ND2', ' B 787  GLN  OE1', -0.525, (188.215, 222.852, 152.42)), (' A 436  TRP  O  ', ' A 509  ARG  N  ', -0.524, (180.971, 203.148, 245.949)), (' C 187  LYS  N  ', ' C 210  ILE  O  ', -0.523, (251.486, 171.843, 212.559)), (' D 174  LYS  NZ ', ' D 496  THR  OG1', -0.523, (196.999, 148.116, 321.197)), (' A1053  PRO  O  ', ' A1054  GLN  NE2', -0.52, (220.113, 218.487, 164.043)), (' B  31  SER  O  ', ' B  59  PHE  N  ', -0.52, (166.72, 173.56, 201.502)), (' A 659  SER  OG ', ' A 696  THR  O  ', -0.519, (182.877, 227.992, 168.792)), (' B 395  VAL  O  ', ' B 395  VAL HG12', -0.518, (215.174, 174.648, 243.949)), (' C 796  ASP  N  ', ' C 796  ASP  OD1', -0.517, (213.317, 170.094, 150.249)), (' D 315  PHE  CE2', ' D 408  MET  HE1', -0.515, (183.261, 158.153, 276.023)), (' B 300  LYS  NZ ', ' B 306  PHE  O  ', -0.515, (173.306, 183.951, 189.174)), (' D 453  THR HG23', ' D 512  PHE  CD2', -0.515, (185.799, 160.173, 300.995)), (' B 707  TYR  HB2', ' C 883  THR HG21', -0.513, (205.144, 173.96, 151.773)), (' B 405  ASP  N  ', ' B 504  GLY  O  ', -0.513, (203.409, 167.549, 266.39)), (' C 735  SER  OG ', ' C 859  THR  OG1', -0.51, (198.337, 182.783, 193.437)), (' B 969  ASN  OD1', ' B 972  ALA  N  ', -0.506, (188.433, 201.73, 213.66)), (' C 970  PHE  O  ', ' C 995  ARG  NE ', -0.505, (205.02, 199.012, 214.709)), (' A 765  ARG  O  ', ' A 769  GLY  N  ', -0.504, (217.262, 201.498, 190.014)), (' D 553  LYS  HD2', ' D 573  VAL HG12', -0.502, (178.255, 174.211, 280.545)), (' A 290  ASP  OD1', ' A 291  CYS  N  ', -0.497, (192.906, 236.315, 199.718)), (' A 106  PHE  O  ', ' A 117  LEU  N  ', -0.497, (195.425, 249.296, 229.37)), (' B 902  MET  HE1', ' B1050  MET  HE2', -0.497, (188.064, 200.539, 149.773)), (' B  91  TYR  OH ', ' B 191  GLU  OE1', -0.497, (158.527, 178.574, 206.793)), (' A 287  ASP  N  ', ' A 287  ASP  OD1', -0.494, (205.488, 241.48, 196.654)), (' B1090  PRO  O  ', ' C 913  GLN  NE2', -0.494, (211.868, 189.439, 137.031)), (' B 760  CYS  HA ', ' B 763  LEU HD12', -0.494, (196.023, 214.076, 197.782)), (' C 328  ARG  NH1', ' C 580  GLN  OE1', -0.493, (229.454, 233.88, 222.569)), (' A 442  ASP  OD2', ' A 509  ARG  NH2', -0.49, (175.05, 200.855, 249.665)), (' D 108  LEU HD23', ' D 112  LYS  CG ', -0.488, (211.272, 166.725, 308.296)), (' D 373  HIS  HA ', ' D 376  MET  HE2', -0.487, (183.651, 154.148, 277.991)), (' C1302  NAG  C3 ', ' C1302  NAG  C8 ', -0.485, (227.512, 221.755, 127.184)), (' A 865  LEU HD23', ' C 697  MET  HE3', -0.485, (228.732, 209.875, 176.308)), (' C 514  SER  OG ', ' C 516  GLU  OE2', -0.485, (204.325, 226.031, 228.296)), (' A 112  SER  O  ', ' A1311  NAG  O3 ', -0.483, (192.122, 245.028, 240.446)), (' A 230  PRO  O  ', ' C 396  TYR  OH ', -0.481, (204.112, 237.536, 228.478)), (' C 410  ILE  O  ', ' C 410  ILE HG23', -0.48, (196.803, 218.832, 237.321)), (' B1082  CYS  SG ', ' B1132  ILE HG21', -0.477, (216.698, 179.633, 131.052)), (' A 334  ASN  OD1', ' A 335  LEU  N  ', -0.476, (158.952, 209.826, 231.649)), (' B 705  VAL HG21', ' C 883  THR HG22', -0.476, (204.3, 175.494, 152.003)), (' A 866  THR HG23', ' A 868  GLU  H  ', -0.475, (228.652, 216.927, 176.983)), (' C 299  THR HG22', ' C 597  VAL HG21', -0.474, (231.335, 198.029, 195.01)), (' D 120  LEU HD13', ' D 123  MET  HE3', -0.474, (203.233, 156.592, 304.026)), (' C 805  ILE HG23', ' C 806  LEU HD22', -0.474, (214.004, 176.427, 160.947)), (' A 571  ASP  OD2', ' B 967  SER  OG ', -0.474, (180.164, 201.658, 204.874)), (' A 720  ILE HD11', ' A 923  ILE HD11', -0.473, (211.198, 220.051, 147.076)), (' D 556  ASN  OD1', ' D 557  MET  N  ', -0.473, (182.818, 174.394, 278.44)), (' B 802  PHE  CD1', ' B 805  ILE HD11', -0.473, (181.315, 204.353, 153.391)), (' A 214  ARG  NE ', ' A 214  ARG  O  ', -0.471, (190.683, 262.332, 203.706)), (' C 327  VAL HG11', ' C 528  LYS  HD2', -0.471, (225.757, 224.835, 225.65)), (' B 707  TYR  CB ', ' C 883  THR  CG2', -0.47, (206.041, 173.665, 151.276)), (' C 210  ILE HG22', ' C 212  LEU  H  ', -0.47, (251.698, 174.426, 210.068)), (' D 188  ASN  ND2', ' D 464  PHE  O  ', -0.468, (197.419, 169.983, 311.403)), (' A 569  ILE  O  ', ' A 572  THR HG22', -0.468, (175.452, 204.92, 200.732)), (' A 553  THR  O  ', ' A 586  ASP  N  ', -0.467, (162.503, 212.461, 201.525)), (' A 138  ASP  N  ', ' A 138  ASP  OD1', -0.466, (186.324, 263.802, 231.21)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.465, (206.216, 210.921, 163.338)), (' B  40  ASP  N  ', ' B  40  ASP  OD1', -0.464, (168.451, 193.481, 208.089)), (' C1106  GLN  NE2', ' C1111  GLU  OE2', -0.463, (221.352, 195.687, 139.751)), (' A 909  ILE HD12', ' A1047  TYR  HB3', -0.463, (205.912, 211.85, 150.297)), (' B 705  VAL HG21', ' C 883  THR HG21', -0.461, (204.23, 174.724, 152.988)), (' A 712  ILE HD13', ' B 896  ILE HD12', -0.461, (191.032, 211.468, 141.035)), (' C 316  SER  OG ', ' C 317  ASN  N  ', -0.46, (226.854, 204.559, 202.063)), (' B 117  LEU HD23', ' B 233  ILE HD11', -0.459, (163.155, 182.741, 228.496)), (' D 334  THR HG22', ' D 335  ASP  N  ', -0.459, (193.971, 138.775, 278.108)), (' B 341  VAL HG13', ' B 342  PHE  HD2', -0.458, (214.359, 166.453, 248.562)), (' D 112  LYS  HE2', ' D 186  LEU HD13', -0.457, (209.239, 165.103, 312.671)), (' C 578  ASP  OD2', ' C 581  THR  OG1', -0.455, (227.851, 237.154, 217.935)), (' C 725  GLU  OE2', ' C1064  HIS  NE2', -0.454, (214.425, 192.43, 165.284)), (' B1096  VAL  O  ', ' B1103  PHE  N  ', -0.453, (202.94, 180.871, 131.802)), (' C1100  THR HG22', ' C1303  NAG  H81', -0.453, (236.961, 204.98, 129.741)), (' B 276  LEU HD23', ' B 306  PHE  HE1', -0.453, (172.964, 186.859, 194.99)), (' A 376  THR  O  ', ' A 376  THR HG22', -0.452, (185.429, 206.511, 238.972)), (' B 357  ARG  NH2', ' C 167  THR  OG1', -0.446, (225.928, 179.745, 242.621)), (' B 137  ASN  OD1', ' B 138  ASP  N  ', -0.445, (151.304, 166.032, 231.98)), (' B 765  ARG  O  ', ' B 769  GLY  N  ', -0.444, (196.516, 216.775, 187.064)), (' D 436  ILE HD11', ' D 594  TRP  CE3', -0.444, (160.649, 152.544, 295.586)), (' D 508  ASN  C  ', ' D 508  ASN HD22', -0.444, (199.094, 157.169, 299.451)), (' B 360  ASN  N  ', ' B 524  VAL HG11', -0.442, (219.352, 174.501, 236.046)), (' B 327  VAL HG13', ' B 542  ASN  O  ', -0.442, (207.093, 170.812, 220.497)), (' C 777  ASN  O  ', ' C 781  VAL HG12', -0.442, (201.906, 187.489, 172.588)), (' B 713  ALA  HB3', ' C 894  LEU  HB3', -0.44, (199.909, 180.187, 146.999)), (' D 520  LEU HD12', ' D 521  TYR  HD1', -0.44, (179.915, 169.734, 292.072)), (' A 767  LEU HD21', ' A1008  VAL HG22', -0.44, (212.254, 206.84, 194.255)), (' A 721  SER  O  ', ' A1066  THR  OG1', -0.438, (207.024, 219.931, 155.292)), (' B 436  TRP  O  ', ' B 509  ARG  N  ', -0.437, (207.946, 164.486, 258.036)), (' C 973  ILE HD11', ' C 984  LEU HD11', -0.436, (203.946, 190.798, 222.962)), (' D 168  TRP  O  ', ' D 172  VAL HG12', -0.435, (194.123, 144.735, 309.907)), (' B 311  GLY  C  ', ' B 664  ILE HD11', -0.434, (185.444, 180.697, 183.233)), (' C 658  ASN  C  ', ' C 658  ASN  ND2', -0.434, (243.607, 208.615, 176.009)), (' D 315  PHE  CZ ', ' D 408  MET  HE1', -0.433, (183.189, 158.457, 276.764)), (' A 760  CYS  HA ', ' A 763  LEU HD12', -0.433, (212.68, 202.976, 200.062)), (' B 323  THR  OG1', ' B 324  GLU  OE1', -0.432, (195.804, 165.48, 212.714)), (' A 316  SER  OG ', ' A 317  ASN  N  ', -0.431, (186.928, 224.579, 197.105)), (' A 289  VAL HG11', ' A 300  LYS  HE3', -0.431, (200.065, 237.193, 193.907)), (' D 525  PHE  O  ', ' D 529  LEU HD13', -0.43, (176.081, 168.205, 281.599)), (' A 866  THR HG22', ' A 869  MET  HE1', -0.429, (229.967, 214.891, 177.392)), (' B 725  GLU  OE1', ' B1064  HIS  NE2', -0.428, (192.482, 197.618, 162.694)), (' B  53  ASP  OD2', ' B 195  LYS  NZ ', -0.428, (169.723, 187.615, 212.429)), (' B1114  ILE  H  ', ' B1114  ILE HD12', -0.426, (199.673, 186.582, 126.311)), (' C 669  GLY  HA2', ' C 697  MET  HE1', -0.425, (230.849, 211.186, 178.634)), (' B 650  LEU  H  ', ' B 650  LEU HD23', -0.424, (190.578, 168.719, 187.409)), (' D 311  ALA  HB1', ' D 376  MET  SD ', -0.423, (184.618, 154.402, 274.989)), (' D 166  GLU  N  ', ' D 166  GLU  OE1', -0.423, (186.561, 140.97, 313.877)), (' B 642  VAL  CG1', ' B 651  ILE HG22', -0.423, (187.584, 165.134, 191.117)), (' C 979  ASP  OD2', ' C 980  ILE  N  ', -0.423, (204.27, 186.33, 218.982)), (' B 822  LEU HD21', ' B1061  VAL HG21', -0.423, (182.659, 201.154, 168.235)), (' D  19  SER  N  ', ' D  23  GLU  OE2', -0.422, (212.532, 193.476, 281.2)), (' D 144  LEU  HA ', ' D 148  LEU HD23', -0.422, (192.031, 139.591, 300.608)), (' C 393  THR HG21', ' C 520  ALA  HB3', -0.422, (209.903, 232.856, 223.845)), (' C 866  THR HG23', ' C 868  GLU  H  ', -0.422, (204.128, 173.52, 176.688)), (' A 729  VAL HG21', ' A 781  VAL HG11', -0.42, (216.726, 209.798, 173.106)), (' A 374  PHE  CB ', ' A 434  ILE HD11', -0.42, (180.989, 210.028, 240.837)), (' B 988  GLU  O  ', ' B 991  VAL HG12', -0.42, (191.222, 210.023, 221.06)), (' A 108  THR  OG1', ' A 234  ASN  O  ', -0.42, (191.117, 243.345, 229.102)), (' C 654  GLU  N  ', ' C 654  GLU  OE1', -0.418, (245.056, 205.55, 187.893)), (' A 172  SER  OG ', ' A 173  GLN  N  ', -0.418, (212.054, 252.327, 222.881)), (' C 460  ASN  OD1', ' C 461  LEU  N  ', -0.417, (184.888, 225.671, 230.804)), (' C 329  PHE  O  ', ' C 580  GLN  NE2', -0.417, (226.414, 233.492, 225.146)), (' B 287  ASP  N  ', ' B 287  ASP  OD2', -0.415, (165.909, 187.019, 193.99)), (' A 673  SER  OG ', ' A 675  GLN  NE2', -0.415, (189.16, 234.021, 172.463)), (' B 805  ILE HD12', ' B 878  LEU HD11', -0.415, (182.031, 205.481, 156.477)), (' A 273  ARG  NH2', ' A 290  ASP  OD2', -0.415, (191.12, 239.417, 201.613)), (' C 874  THR  O  ', ' C 878  LEU HD23', -0.414, (208.327, 178.835, 163.979)), (' D 259  ILE HD12', ' D 612  PRO  CG ', -0.414, (163.485, 149.118, 319.859)), (' C 720  ILE HD12', ' C 923  ILE HG13', -0.414, (222.312, 186.159, 150.609)), (' C 900  MET  N  ', ' C 900  MET  SD ', -0.413, (211.333, 181.71, 142.935)), (' D 291  ILE HG23', ' D 424  LEU HD13', -0.412, (167.986, 144.734, 279.273)), (' A 485  GLY  N  ', ' A 488  CYS  SG ', -0.412, (186.855, 169.55, 251.594)), (' B 950  ASP  O  ', ' B 953  ASN  N  ', -0.41, (184.465, 198.652, 182.559)), (' B 391  CYS  SG ', ' B 524  VAL  O  ', -0.41, (212.722, 176.133, 235.674)), (' A 914  ASN  OD1', ' A 915  VAL  N  ', -0.409, (209.937, 216.256, 137.302)), (' B 733  LYS  NZ ', ' B 775  ASP  OD2', -0.409, (188.117, 217.058, 180.096)), (' B 713  ALA  HB2', ' C 895  GLN  CD ', -0.409, (200.623, 176.668, 146.449)), (' A 393  THR  OG1', ' A 394  ASN  N  ', -0.407, (169.523, 200.508, 223.83)), (' B 882  ILE HG13', ' B 883  THR HG23', -0.407, (183.502, 211.29, 149.993)), (' D 308  PHE  CE2', ' D 333  LEU HD11', -0.406, (191.139, 147.991, 274.167)), (' C 737  ASP  OD1', ' C 739  THR HG22', -0.405, (194.04, 183.81, 201.984)), (' B1062  PHE  O  ', ' B1063  LEU HD22', -0.405, (185.147, 199.698, 161.804)), (' C 767  LEU HD21', ' C1008  VAL HG22', -0.403, (199.686, 192.827, 194.22)), (' D 433  GLU  HA ', ' D 436  ILE HG22', -0.403, (160.507, 149.438, 290.224)), (' B1119  ASN  OD1', ' B1120  THR HG23', -0.402, (208.156, 189.191, 130.021)), (' D 583  PRO  O  ', ' D 584  LEU HD12', -0.402, (171.802, 167.829, 291.34)), (' C 765  ARG  O  ', ' C 769  GLY  N  ', -0.4, (193.224, 190.692, 188.444)), (' B 622  VAL  O  ', ' B 622  VAL HG22', -0.4, (189.595, 166.865, 204.232)), (' C 969  ASN  ND2', ' C 972  ALA  O  ', -0.4, (209.332, 194.934, 217.346)), (' B 467  ASP  N  ', ' B 467  ASP  OD1', -0.4, (219.753, 182.246, 262.433))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
