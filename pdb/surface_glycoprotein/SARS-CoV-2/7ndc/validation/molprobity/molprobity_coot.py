# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('E', '   8 ', 'PRO', None, (264.302, 150.244, 172.44)), ('G', '   8 ', 'PRO', None, (143.99099999999999, 239.29199999999997, 172.58)), ('L', '   8 ', 'PRO', None, (280.8199999999999, 299.37599999999986, 172.975))]
data['rota'] = [('A', ' 367 ', 'VAL', 0.17090299490073188, (215.14900000000006, 251.63599999999997, 191.662)), ('B', ' 367 ', 'VAL', 0.17075723047293714, (255.8, 231.012, 191.604)), ('C', ' 367 ', 'VAL', 0.17060211451630425, (217.70099999999994, 206.03899999999993, 191.641)), ('D', '  12 ', 'VAL', 0.16024001083089953, (285.226, 177.10899999999998, 159.059)), ('E', '  14 ', 'SER', 0.2552339386716947, (249.952, 154.044, 166.527)), ('E', '  34 ', 'LEU', 0.21393715687386383, (268.073, 160.636, 185.33800000000002)), ('F', '  12 ', 'VAL', 0.15998965347612282, (155.9789999999999, 207.425, 159.186)), ('G', '  14 ', 'SER', 0.25322171314415787, (154.737, 249.54599999999996, 166.688)), ('G', '  34 ', 'LEU', 0.21398248534407302, (150.8669999999999, 230.63499999999993, 185.479)), ('H', '  12 ', 'VAL', 0.1597942246768288, (247.382, 304.2119999999999, 158.934)), ('L', '  14 ', 'SER', 0.25272268454054486, (284.769, 285.0509999999999, 167.1)), ('L', '  34 ', 'LEU', 0.21363318258707975, (269.67899999999986, 297.45, 185.653))]
data['cbeta'] = []
data['probe'] = [(' B 147  LYS  NZ ', ' H  57  ASN  OD1', -0.829, (247.665, 305.506, 190.561)), (' A 147  LYS  NZ ', ' F  57  ASN  OD1', -0.703, (155.051, 207.613, 190.687)), (' C 557  LYS  NZ ', ' C 574  ASP  OD2', -0.627, (204.982, 205.095, 228.774)), (' B 564  GLN  NE2', ' B 577  ARG  O  ', -0.625, (265.836, 219.974, 215.507)), (' C 564  GLN  NE2', ' C 577  ARG  O  ', -0.624, (203.572, 202.718, 215.948)), (' A 564  GLN  NE2', ' A 577  ARG  O  ', -0.622, (219.29, 265.934, 215.763)), (' A1028  LYS  O  ', ' A1032  CYS  CB ', -0.622, (223.235, 221.513, 270.98)), (' B1028  LYS  O  ', ' B1032  CYS  CB ', -0.621, (225.647, 239.323, 270.928)), (' A 273  ARG  NH1', ' A 290  ASP  OD2', -0.619, (192.209, 233.329, 226.383)), (' B 273  ARG  NH1', ' B 290  ASP  OD2', -0.615, (250.815, 260.135, 226.412)), (' C 273  ARG  NH1', ' C 290  ASP  OD2', -0.614, (245.137, 195.349, 226.284)), (' C1028  LYS  O  ', ' C1032  CYS  CB ', -0.614, (240.319, 227.845, 271.313)), (' A 557  LYS  NZ ', ' A 574  ASP  OD2', -0.612, (220.627, 262.905, 229.121)), (' B 557  LYS  NZ ', ' B 574  ASP  OD2', -0.611, (263.033, 220.485, 228.804)), (' B 252  GLY  HA3', ' L  33  TYR  OH ', -0.609, (262.914, 297.532, 193.869)), (' E  38  GLN  HB2', ' E  48  LEU HD11', -0.593, (259.942, 164.062, 174.862)), (' C 193  VAL HG23', ' C 223  LEU HD22', -0.591, (258.206, 196.65, 218.474)), (' D  83  MET  HB3', ' D  86  LEU HD21', -0.589, (285.535, 174.461, 167.196)), (' L  38  GLN  HB2', ' L  48  LEU HD11', -0.586, (270.971, 288.788, 175.155)), (' A 193  VAL HG23', ' A 223  LEU HD22', -0.585, (186.672, 221.282, 218.437)), (' B 736  VAL HG22', ' B 858  LEU  HG ', -0.583, (219.586, 243.755, 236.331)), (' G  38  GLN  HB2', ' G  48  LEU HD11', -0.578, (157.707, 236.018, 175.318)), (' C1028  LYS  O  ', ' C1032  CYS  HB2', -0.578, (239.335, 228.236, 270.89)), (' B 193  VAL HG23', ' B 223  LEU HD22', -0.578, (243.67, 270.729, 218.42)), (' H  83  MET  HB3', ' H  86  LEU HD21', -0.573, (249.379, 305.841, 167.15)), (' A 736  VAL HG22', ' A 858  LEU  HG ', -0.572, (222.701, 214.096, 236.517)), (' C 736  VAL HG22', ' C 858  LEU  HG ', -0.571, (246.387, 231.309, 236.491)), (' F  83  MET  HB3', ' F  86  LEU HD21', -0.571, (154.029, 208.657, 167.665)), (' B 197  ILE HG22', ' B 198  ASP  H  ', -0.57, (241.342, 257.503, 208.544)), (' B1028  LYS  O  ', ' B1032  CYS  HB2', -0.568, (226.141, 239.085, 271.381)), (' A1028  LYS  O  ', ' A1032  CYS  HB2', -0.567, (223.444, 221.854, 270.884)), (' A 197  ILE HG22', ' A 198  ASP  H  ', -0.566, (199.504, 225.851, 208.588)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.557, (228.578, 241.892, 188.316)), (' C 197  ILE HG22', ' C 198  ASP  H  ', -0.555, (247.758, 205.389, 208.605)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.555, (218.936, 222.361, 188.011)), (' B 898  PHE  HZ ', ' B1050  MET  HE1', -0.544, (224.352, 249.585, 281.422)), (' A 516  GLU  OE2', ' B 200  TYR  OH ', -0.543, (232.98, 259.908, 204.714)), (' B 132  GLU  N  ', ' B 164  ASN  O  ', -0.542, (247.201, 270.625, 191.067)), (' C 132  GLU  N  ', ' C 164  ASN  O  ', -0.541, (256.286, 193.669, 191.113)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.54, (240.824, 224.271, 188.374)), (' C 898  PHE  HZ ', ' C1050  MET  HE1', -0.54, (249.392, 224.29, 281.445)), (' H 110  MET  HE1', ' L  98  PHE  HZ ', -0.538, (261.641, 297.486, 178.118)), (' A 898  PHE  HZ ', ' A1050  MET  HE1', -0.535, (214.666, 215.502, 281.274)), (' A 132  GLU  N  ', ' A 164  ASN  O  ', -0.532, (185.009, 224.3, 191.216)), (' D 110  MET  HE1', ' E  98  PHE  HZ ', -0.531, (271.628, 168.035, 178.119)), (' F 110  MET  HE1', ' G  98  PHE  HZ ', -0.531, (155.308, 223.492, 178.21)), (' H  12  VAL HG21', ' H  18  LEU  HB2', -0.527, (245.953, 303.009, 162.538)), (' D  12  VAL HG21', ' D  18  LEU  HB2', -0.522, (284.812, 178.936, 162.694)), (' D  47  TRP  HB2', ' E  98  PHE  HE1', -0.52, (275.253, 166.199, 177.061)), (' F  17  SER  OG ', ' F  82  GLN  NE2', -0.519, (156.823, 202.613, 168.491)), (' H  17  SER  OG ', ' H  82  GLN  NE2', -0.519, (242.974, 305.466, 168.141)), (' A 393  THR HG21', ' A 520  ALA  HB3', -0.519, (228.931, 261.938, 209.665)), (' H  47  TRP  HB2', ' L  98  PHE  HE1', -0.519, (261.461, 300.39, 177.23)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.518, (228.759, 264.772, 210.611)), (' D  17  SER  OG ', ' D  82  GLN  NE2', -0.517, (289.022, 180.166, 167.998)), (' C 393  THR HG21', ' C 520  ALA  HB3', -0.515, (201.878, 212.89, 209.602)), (' A 976  VAL HG12', ' A 979  ASP  H  ', -0.513, (217.45, 212.764, 217.031)), (' A 102  ARG  HG3', ' A 141  LEU HD12', -0.513, (171.938, 217.023, 204.596)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.513, (216.171, 222.962, 308.316)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.512, (259.939, 212.514, 210.598)), (' C 102  ARG  HG3', ' C 141  LEU HD12', -0.512, (269.355, 185.85, 205.033)), (' A  19  THR  H  ', ' A 255  SER  HB2', -0.511, (161.977, 231.639, 200.865)), (' F  47  TRP  HB2', ' G  98  PHE  HE1', -0.511, (152.395, 221.802, 177.057)), (' B 976  VAL HG12', ' B 979  ASP  H  ', -0.511, (221.07, 248.682, 217.388)), (' B 215  ASP  N  ', ' B 215  ASP  OD1', -0.51, (255.891, 281.456, 227.445)), (' B1103  PHE  HZ ', ' R   1  NAG  H62', -0.51, (247.162, 243.417, 306.127)), (' C 109  THR  OG1', ' C 111  ASP  OD1', -0.51, (248.846, 187.29, 194.622)), (' C  19  THR  H  ', ' C 255  SER  HB2', -0.51, (261.955, 169.697, 200.849)), (' F  12  VAL HG21', ' F  18  LEU  HB2', -0.51, (157.703, 206.9, 162.822)), (' A1103  PHE  HZ ', ' M   1  NAG  H62', -0.509, (208.637, 237.549, 306.307)), (' B1039  ARG  HE ', ' C1031  GLU  CD ', -0.509, (232.448, 231.724, 271.612)), (' C 976  VAL HG12', ' C 979  ASP  H  ', -0.508, (250.269, 227.568, 216.989)), (' B 102  ARG  HG3', ' B 141  LEU HD12', -0.507, (247.515, 285.619, 204.475)), (' A1031  GLU  CD ', ' C1039  ARG  HE ', -0.507, (229.969, 225.527, 271.688)), (' B  19  THR  H  ', ' B 255  SER  HB2', -0.507, (264.991, 287.552, 200.812)), (' C1103  PHE  HZ ', ' W   1  NAG  H62', -0.507, (233.177, 207.419, 306.282)), (' B 393  THR HG21', ' B 520  ALA  HB3', -0.505, (257.324, 214.167, 209.463)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.504, (230.682, 244.402, 308.404)), (' C 520  ALA  HB1', ' C 521  PRO  HD2', -0.503, (199.605, 211.229, 210.759)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.501, (242.075, 221.585, 308.789)), (' A1039  ARG  HE ', ' B1031  GLU  CD ', -0.5, (226.2, 231.432, 271.565)), (' L  49  ILE HD13', ' L  55  ARG  HA ', -0.499, (271.588, 287.13, 184.373)), (' G  49  ILE HD13', ' G  55  ARG  HA ', -0.499, (159.445, 237.448, 184.378)), (' E  49  ILE HD13', ' E  55  ARG  HA ', -0.498, (257.873, 164.419, 184.268)), (' A 374  PHE  HA ', ' A 436  TRP  HB3', -0.495, (224.766, 245.148, 184.852)), (' B 374  PHE  HA ', ' B 436  TRP  HB3', -0.494, (245.421, 225.954, 184.759)), (' C 215  ASP  N  ', ' C 215  ASP  OD1', -0.493, (261.196, 180.51, 228.005)), (' C 374  PHE  HA ', ' C 436  TRP  HB3', -0.492, (218.903, 217.598, 185.205)), (' A  18  LEU HD11', ' A 258  TRP  CD1', -0.49, (161.514, 226.985, 202.737)), (' A 519  HIS  HE1', ' B  42  VAL HG22', -0.489, (228.205, 259.917, 219.784)), (' C  18  LEU HD11', ' C 258  TRP  CD1', -0.488, (265.78, 171.825, 202.716)), (' C1028  LYS  O  ', ' C1032  CYS  HB3', -0.488, (240.543, 227.975, 271.319)), (' B 331  ASN  ND2', ' B 331  ASN  O  ', -0.488, (273.3, 221.438, 204.674)), (' B 578  ASP  HB3', ' B 581  THR  O  ', -0.488, (271.372, 221.886, 216.383)), (' A 565  PHE  HD1', ' A 576  VAL HG12', -0.488, (220.772, 261.118, 218.679)), (' C 578  ASP  HB3', ' C 581  THR  O  ', -0.487, (201.587, 197.083, 216.346)), (' B1028  LYS  O  ', ' B1032  CYS  HB3', -0.487, (225.497, 239.852, 271.415)), (' A1028  LYS  O  ', ' A1032  CYS  HB3', -0.485, (222.912, 220.872, 271.589)), (' A 331  ASN  ND2', ' A 331  ASN  O  ', -0.484, (214.6, 271.673, 204.607)), (' B  18  LEU HD11', ' B 258  TRP  CD1', -0.483, (261.376, 290.126, 202.868)), (' C 331  ASN  ND2', ' C 331  ASN  O  ', -0.483, (201.057, 195.404, 204.704)), (' C 147  LYS  NZ ', ' D  57  ASN  OD1', -0.481, (285.878, 175.822, 190.646)), (' A 215  ASP  N  ', ' A 215  ASP  OD1', -0.479, (171.39, 226.893, 227.95)), (' B 565  PHE  HD1', ' B 576  VAL HG12', -0.479, (261.195, 221.291, 218.807)), (' C 565  PHE  HD1', ' C 576  VAL HG12', -0.478, (206.784, 205.819, 218.899)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.478, (226.684, 245.07, 198.02)), (' A1097  SER  HB2', ' A1102  TRP  CD2', -0.473, (212.752, 245.359, 302.002)), (' A 578  ASP  HB3', ' A 581  THR  O  ', -0.473, (215.352, 270.135, 216.415)), (' C1097  SER  HB2', ' C1102  TRP  CD2', -0.47, (224.079, 207.301, 302.324)), (' B 379  CYS  HA ', ' B 432  CYS  HA ', -0.469, (243.814, 224.467, 198.156)), (' C 379  CYS  HA ', ' C 432  CYS  HA ', -0.469, (218.024, 219.764, 198.136)), (' A 328  ARG  NH2', ' A 531  THR  O  ', -0.468, (208.369, 265.831, 212.114)), (' B1091  ARG  NH1', ' B1120  THR  O  ', -0.464, (236.261, 228.485, 304.037)), (' B  18  LEU HD12', ' B 255  SER  HA ', -0.464, (262.858, 289.333, 200.691)), (' C1091  ARG  NH1', ' C1120  THR  O  ', -0.463, (225.215, 224.577, 304.041)), (' B 172  SER  OG ', ' B 173  GLN  N  ', -0.463, (233.523, 278.256, 207.342)), (' B  92  PHE  O  ', ' B 192  PHE  N  ', -0.46, (246.375, 274.556, 216.741)), (' B1097  SER  HB2', ' B1102  TRP  CD2', -0.459, (251.624, 236.014, 302.205)), (' A1091  ARG  NH1', ' A1120  THR  O  ', -0.459, (227.621, 235.914, 304.227)), (' A 656  VAL HG12', ' A 658  ASN  H  ', -0.458, (193.122, 249.028, 259.201)), (' A 336  CYS  HB2', ' A 363  ALA  HB2', -0.456, (221.492, 259.387, 195.383)), (' A 172  SER  OG ', ' A 173  GLN  N  ', -0.455, (185.012, 208.464, 207.324)), (' C 656  VAL HG12', ' C 658  ASN  H  ', -0.454, (231.018, 188.438, 259.223)), (' C  18  LEU HD12', ' C 255  SER  HA ', -0.453, (264.463, 171.23, 200.844)), (' B  27  ALA  HB3', ' B  64  TRP  HB3', -0.452, (261.48, 277.551, 220.492)), (' A 198  ASP  OD1', ' A 199  GLY  N  ', -0.45, (199.347, 224.838, 205.436)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.45, (171.585, 233.427, 220.625)), (' B 656  VAL HG12', ' B 658  ASN  H  ', -0.45, (264.49, 251.4, 259.151)), (' B 198  ASP  OD1', ' B 199  GLY  N  ', -0.449, (240.262, 258.102, 205.21)), (' A  18  LEU HD12', ' A 255  SER  HA ', -0.448, (161.705, 228.708, 200.799)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.445, (184.445, 224.165, 231.244)), (' C 172  SER  OG ', ' C 173  GLN  N  ', -0.445, (269.718, 201.651, 207.485)), (' C 336  CYS  HB2', ' C 363  ALA  HB2', -0.445, (208.246, 207.523, 195.513)), (' C  92  PHE  O  ', ' C 192  PHE  N  ', -0.444, (260.274, 192.42, 216.875)), (' B 770  ILE  O  ', ' B 774  GLN  HG2', -0.443, (218.324, 238.379, 249.049)), (' C 715  PRO  HB3', ' C1069  PRO  HB3', -0.441, (235.488, 210.18, 286.206)), (' C  27  ALA  HB3', ' C  64  TRP  HB3', -0.44, (255.094, 177.449, 220.516)), (' B 336  CYS  HB2', ' B 363  ALA  HB2', -0.44, (259.398, 221.736, 195.266)), (' C 770  ILE  O  ', ' C 774  GLN  HG2', -0.44, (243.136, 234.801, 249.415)), (' A 566  GLY  HA2', ' B  43  PHE  HB3', -0.437, (225.405, 263.084, 224.063)), (' H  12  VAL HG11', ' H  86  LEU HD12', -0.437, (247.965, 305.623, 162.773)), (' D  12  VAL HG11', ' D  86  LEU HD12', -0.437, (286.298, 176.187, 162.655)), (' A 770  ILE  O  ', ' A 774  GLN  HG2', -0.436, (227.22, 215.409, 249.259)), (' B 715  PRO  HB3', ' B1069  PRO  HB3', -0.434, (243.545, 244.425, 286.143)), (' H  47  TRP  HB2', ' L  98  PHE  CE1', -0.433, (261.677, 300.538, 177.237)), (' B 519  HIS  HE1', ' C  42  VAL HG22', -0.433, (256.62, 215.719, 219.869)), (' A 143  VAL HG12', ' A 152  TRP  HE3', -0.433, (162.833, 211.941, 202.719)), (' F   5  VAL HG23', ' F  23  ALA  HB3', -0.432, (171.163, 214.257, 172.526)), (' C 195  LYS  HE2', ' C 204  TYR  HE1', -0.431, (254.243, 201.793, 214.589)), (' A 458  LYS  HA ', ' A 458  LYS  HD3', -0.429, (257.158, 243.011, 194.308)), (' C 143  VAL HG12', ' C 152  TRP  HE3', -0.429, (277.845, 180.746, 202.54)), (' B 421  TYR  CD1', ' B 457  ARG  HB3', -0.429, (231.2, 203.604, 193.126)), (' A 195  LYS  HE2', ' A 204  TYR  HE1', -0.429, (193.418, 222.513, 214.675)), (' F  47  TRP  HB2', ' G  98  PHE  CE1', -0.428, (151.989, 222.055, 177.318)), (' B 195  LYS  HE2', ' B 204  TYR  HE1', -0.427, (241.53, 264.471, 214.512)), (' F  44  GLY  HA2', ' G  88  TYR  OH ', -0.427, (151.504, 228.263, 168.972)), (' A 715  PRO  HB3', ' A1069  PRO  HB3', -0.427, (209.526, 234.47, 286.494)), (' D  44  GLY  HA2', ' E  88  TYR  OH ', -0.427, (270.204, 162.33, 168.81)), (' C 421  TYR  CD1', ' C 457  ARG  HB3', -0.427, (206.671, 240.88, 193.054)), (' B 987  PRO  HG3', ' C 427  ASP  OD2', -0.426, (217.044, 233.913, 205.398)), (' F  12  VAL HG11', ' F  86  LEU HD12', -0.426, (154.53, 207.02, 162.724)), (' B 146  HIS  CE1', ' B 148  ASN  HB2', -0.425, (240.898, 298.661, 191.621)), (' C 146  HIS  CE1', ' C 148  ASN  HB2', -0.425, (283.746, 185.192, 191.755)), (' A 421  TYR  CD1', ' A 457  ARG  HB3', -0.424, (250.792, 243.825, 193.083)), (' B 858  LEU HD21', ' B 962  LEU HD23', -0.424, (222.434, 244.324, 235.605)), (' A 987  PRO  HG3', ' B 427  ASP  OD2', -0.423, (232.463, 216.556, 205.452)), (' B 930  ALA  O  ', ' B 934  ILE HG12', -0.423, (232.804, 255.354, 273.12)), (' D   5  VAL HG23', ' D  23  ALA  HB3', -0.423, (271.498, 186.584, 172.24)), (' H  91  THR HG23', ' H 120  THR  HA ', -0.423, (255.158, 301.761, 159.957)), (' A 146  HIS  CE1', ' A 148  ASN  HB2', -0.422, (163.841, 204.512, 191.773)), (' A 930  ALA  O  ', ' A 934  ILE HG12', -0.421, (205.796, 219.433, 273.237)), (' H   5  VAL HG23', ' H  23  ALA  HB3', -0.42, (245.741, 287.591, 172.036)), (' C 502  GLY  O  ', ' C 506  GLN  HG3', -0.42, (220.918, 229.483, 176.781)), (' B 143  VAL HG12', ' B 152  TRP  HE3', -0.42, (247.652, 296.195, 202.42)), (' C 930  ALA  O  ', ' C 934  ILE HG12', -0.419, (250.292, 214.095, 273.208)), (' C 858  LEU HD21', ' C 962  LEU HD23', -0.419, (245.502, 228.443, 235.722)), (' A  92  PHE  O  ', ' A 192  PHE  N  ', -0.419, (182.122, 221.661, 216.81)), (' D  47  TRP  HB2', ' E  98  PHE  CE1', -0.418, (274.834, 166.029, 177.115)), (' B 502  GLY  O  ', ' B 506  GLN  HG3', -0.417, (233.843, 222.118, 176.746)), (' C 328  ARG  NH2', ' C 531  THR  O  ', -0.416, (208.748, 193.56, 212.052)), (' A 502  GLY  O  ', ' A 506  GLN  HG3', -0.415, (233.926, 237.139, 176.73)), (' B 977  LEU HD11', ' B 993  ILE HG12', -0.415, (219.191, 240.795, 217.942)), (' H  44  GLY  HA2', ' L  88  TYR  OH ', -0.414, (267.513, 298.051, 169.005)), (' C 977  LEU HD11', ' C 993  ILE HG12', -0.413, (244.508, 232.95, 217.879)), (' D  91  THR HG23', ' D 120  THR  HA ', -0.413, (279.336, 171.96, 159.796)), (' F  91  THR HG23', ' F 120  THR  HA ', -0.412, (154.431, 215.434, 160.132)), (' C 148  ASN  O  ', ' C 149  ASN  HB2', -0.412, (284.478, 186.555, 195.08)), (' B 318  PHE  N  ', ' B 593  GLY  O  ', -0.411, (254.615, 242.276, 234.066)), (' B 148  ASN  O  ', ' B 149  ASN  HB2', -0.411, (239.064, 298.271, 195.184)), (' A1073  LYS  HB2', ' A1075  PHE  CE2', -0.411, (206.246, 239.134, 293.774)), (' B 980  ILE HG23', ' B 984  LEU HD12', -0.411, (222.625, 242.039, 212.38)), (' B  57  PRO  O  ', ' B  60  SER  HB2', -0.41, (253.217, 265.517, 225.009)), (' F  83  MET  HE2', ' F  86  LEU HD21', -0.41, (153.942, 209.858, 167.028)), (' A  57  PRO  O  ', ' A  60  SER  HB2', -0.41, (186.44, 232.467, 224.902)), (' A 858  LEU HD21', ' A 962  LEU HD23', -0.41, (220.441, 216.024, 235.549)), (' B1073  LYS  HB2', ' B1075  PHE  CE2', -0.409, (249.441, 244.742, 293.893)), (' C 980  ILE HG23', ' C 984  LEU HD12', -0.408, (243.835, 229.403, 212.353)), (' D  83  MET  HE2', ' D  86  LEU HD21', -0.406, (284.597, 173.978, 166.855)), (' C1073  LYS  HB2', ' C1075  PHE  CE2', -0.406, (233.0, 204.647, 293.695)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.404, (256.884, 193.035, 231.14)), (' C 453  TYR  CZ ', ' C 493  GLN  HB3', -0.404, (209.449, 238.397, 182.22)), (' C 104  TRP  CD1', ' C 240  THR HG23', -0.404, (260.187, 187.429, 209.712)), (' A 977  LEU HD11', ' A 993  ILE HG12', -0.403, (225.296, 215.362, 217.878)), (' H  83  MET  HE2', ' H  86  LEU HD21', -0.403, (250.169, 305.175, 166.857)), (' A 148  ASN  O  ', ' A 149  ASN  HB2', -0.403, (165.204, 203.411, 195.327)), (' A1138  TYR  OH ', ' A1143  PRO  HG3', -0.402, (218.954, 232.646, 316.695)), (' F  27  PHE  CE2', ' F  29  PHE  HA ', -0.401, (169.152, 216.848, 183.051)), (' A 453  TYR  CZ ', ' A 493  GLN  HB3', -0.401, (247.593, 242.813, 182.093))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
