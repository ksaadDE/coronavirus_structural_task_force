# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (66.40599999999998, 95.48999999999998, 88.83))]
data['rota'] = [('A', ' 133 ', 'CYS', 0.0689584825438849, (57.136, 92.92299999999999, 97.955)), ('A', ' 142 ', 'LEU', 0.0007563287224590252, (60.226, 93.665, 92.367)), ('A', ' 153 ', 'GLU', 0.27722308013525493, (71.34799999999997, 102.722, 96.025)), ('A', ' 166 ', 'GLU', 0.21689372684731206, (63.93899999999999, 93.00599999999997, 105.12)), ('A', ' 208 ', 'GLU', 0.2585777830500725, (99.14700000000002, 78.29899999999998, 101.31199999999998)), ('A', ' 251 ', 'THR', 0.22925079036105522, (69.48599999999998, 112.95099999999998, 106.632)), ('A', ' 261 ', 'CYS', 0.2985791264607711, (76.41999999999997, 101.94499999999998, 115.262)), ('A', ' 276 ', 'THR', 0.2925197899762112, (80.22899999999997, 105.05199999999999, 97.71)), ('A', ' 283 ', 'VAL', 0.2713038477862448, (80.62899999999998, 115.287, 101.41799999999999)), ('A', ' 287 ', 'GLN', 0.2874331430299365, (79.835, 123.84799999999998, 97.22099999999999)), ('A', ' 324 ', 'THR', 0.29775040441139355, (97.879, 94.10899999999997, 70.37099999999998)), ('A', ' 334 ', 'THR', 0.18676970575364207, (81.208, 100.04399999999997, 71.69)), ('A', ' 343 ', 'VAL', 0.21672683342520788, (75.056, 91.561, 78.34599999999999)), ('A', ' 360 ', 'MET', 0.2718708838381933, (82.66999999999999, 96.941, 77.88299999999998)), ('A', ' 365 ', 'THR', 0.20773585805766542, (81.801, 109.93899999999996, 80.531)), ('A', ' 371 ', 'THR', 0.20500113437899764, (87.01999999999997, 101.96399999999997, 84.446)), ('A', ' 401 ', 'HIS', 0.13978654224017736, (94.832, 91.005, 89.4)), ('A', ' 410 ', 'LEU', 0.209979778544985, (94.294, 105.50999999999998, 90.922)), ('A', ' 439 ', 'LEU', 0.19015186234465656, (89.92399999999998, 111.43699999999997, 99.66699999999999)), ('A', ' 440 ', 'LEU', 0.29355365878993395, (86.59699999999997, 111.20799999999997, 101.509)), ('A', ' 463 ', 'VAL', 0.20515527519948054, (80.978, 78.41899999999997, 110.30599999999997)), ('A', ' 512 ', 'PHE', 0.2950719027580829, (85.43799999999997, 86.79499999999999, 99.77499999999998)), ('A', ' 555 ', 'LEU', 0.2918147163024977, (106.32600000000001, 94.344, 85.12399999999998)), ('A', ' 571 ', 'GLU', 0.24467521410105225, (108.60500000000002, 91.36899999999997, 98.207)), ('A', ' 572 ', 'HIS', 0.2265237461806583, (109.852, 92.02999999999999, 94.665)), ('A', ' 593 ', 'THR', 0.2654109102166413, (93.933, 114.345, 110.32999999999998)), ('B', ' 338 ', 'PHE', 0.1662080379718807, (110.71600000000002, 80.16399999999997, 43.569)), ('B', ' 340 ', 'GLU', 0.27925343709475886, (106.356, 76.68099999999997, 43.92799999999999)), ('B', ' 350 ', 'VAL', 0.29461648233707904, (106.525, 71.075, 61.014)), ('B', ' 358 ', 'ILE', 0.14783578406013226, (116.73300000000002, 73.40899999999998, 43.846)), ('B', ' 364 ', 'ASP', 0.13972921640021638, (117.93200000000002, 86.46499999999997, 43.013)), ('B', ' 373 ', 'SER', 0.2787067716993028, (106.16700000000002, 90.83500000000001, 52.738)), ('B', ' 385 ', 'THR', 0.26570917491495066, (123.15400000000002, 91.33100000000002, 51.776)), ('B', ' 387 ', 'LEU', 0.12697104540412715, (123.84800000000001, 88.01500000000001, 47.93199999999999)), ('B', ' 395 ', 'VAL', 0.13134723627343697, (119.72800000000001, 75.038, 47.831999999999994)), ('B', ' 432 ', 'CYS', 0.012204796803416684, (118.54600000000002, 81.951, 56.532)), ('B', ' 481 ', 'ASN', 0.18024876542225798, (100.67700000000002, 47.351, 73.58299999999998)), ('B', ' 503 ', 'VAL', 0.16590379728620366, (100.269, 87.107, 67.206)), ('B', ' 506 ', 'GLN', 0.24115210375481821, (99.09300000000002, 83.011, 65.277)), ('B', ' 512 ', 'VAL', 0.15595446968114662, (114.29700000000001, 78.09, 55.841))]
data['cbeta'] = []
data['probe'] = [(' B 379  CYS  HA ', ' B 432  CYS  HB3', -0.761, (119.614, 83.94, 56.475)), (' A 177  ARG  NH2', ' A 495  GLU  O  ', -0.742, (68.63, 79.877, 110.265)), (' A  95  ARG  NH2', ' A 209  GLU  OE1', -0.699, (103.277, 80.057, 96.701)), (' A 245  ARG  NH2', ' A 260  GLY  O  ', -0.698, (78.202, 105.17, 116.466)), (' B 386  LYS  H  ', ' B 386  LYS  HD2', -0.69, (123.514, 93.249, 48.882)), (' A 245  ARG  NH1', ' A 603  PHE  O  ', -0.688, (81.289, 108.029, 116.851)), (' A 457  GLU  HG2', ' A 513  ILE  HB ', -0.68, (88.31, 85.95, 102.76)), (' A 344  CYS  HA ', ' A 359  LYS  HE3', -0.671, (78.856, 92.789, 77.981)), (' A 460  ARG  NH2', ' A 510  TYR  O  ', -0.651, (82.325, 83.664, 99.607)), (' A 133  CYS  HB3', ' A 141  CYS  HA ', -0.639, (56.669, 92.609, 95.676)), (' A  88  ILE HD13', ' A  97  LEU HD13', -0.635, (104.72, 66.124, 90.25)), (' A 201  ASP  OD1', ' A 219  ARG  NE ', -0.617, (93.986, 73.742, 104.718)), (' A  41  TYR  OH ', ' B 500  THR  OG1', -0.61, (91.261, 83.152, 68.417)), (' B 454  ARG  NH2', ' B 467  ASP  O  ', -0.61, (107.606, 62.006, 63.129)), (' A  30  GLU  OE1', ' B 417  LYS  NZ ', -0.61, (108.531, 68.835, 76.291)), (' B 349  SER  HB3', ' B 452  LEU  H  ', -0.603, (101.707, 69.189, 60.828)), (' A 294  THR HG23', ' A 365  THR  HA ', -0.6, (81.479, 111.588, 80.295)), (' B 501  ASN  O  ', ' B 506  GLN  NE2', -0.599, (97.041, 86.074, 65.72)), (' A 152  MET  O  ', ' A 161  ARG  NH2', -0.599, (70.732, 102.349, 99.373)), (' A 131  LYS  HG2', ' A 143  LEU  HG ', -0.596, (62.126, 89.161, 90.701)), (' B 364  ASP  N  ', ' B 364  ASP  OD1', -0.593, (117.064, 84.993, 41.367)), (' A 252  TYR  HB3', ' A 255  ARG  HB2', -0.592, (67.31, 108.449, 110.225)), (' A 574  VAL HG23', ' A 576  GLU  H  ', -0.586, (107.859, 94.939, 100.281)), (' A  42  GLN  OE1', ' B 498  GLN  NE2', -0.584, (89.219, 76.86, 68.114)), (' A 177  ARG  NH1', ' A 470  LYS  O  ', -0.578, (71.635, 77.248, 111.818)), (' A 595  LEU  O  ', ' A 599  ASN  ND2', -0.569, (86.893, 112.851, 112.679)), (' B 462  LYS  HB2', ' B 465  GLU  HB2', -0.563, (119.3, 63.674, 61.695)), (' A 353  LYS  HB3', ' B 505  TYR  CG ', -0.561, (98.005, 81.228, 71.162)), (' A 402  GLU  HB3', ' A 518  ARG  HG3', -0.547, (92.28, 93.127, 93.523)), (' A 490  PRO  HA ', ' A 612  PRO  HG2', -0.545, (67.819, 98.528, 112.912)), (' B 391  CYS  HB3', ' B 522  ALA  HB1', -0.537, (129.126, 77.702, 42.253)), (' B 367  VAL  O  ', ' B 371  SER  OG ', -0.534, (110.184, 90.973, 46.581)), (' A 108  LEU HD11', ' A 190  MET  HB2', -0.534, (82.84, 67.09, 98.055)), (' A 208  GLU  HB2', ' A 219  ARG  HG2', -0.534, (97.389, 76.965, 102.511)), (' B 392  PHE  N  ', ' B 524  VAL  O  ', -0.528, (125.964, 78.862, 43.883)), (' A 356  PHE  HB3', ' A 379  ILE HD12', -0.525, (93.565, 91.416, 76.744)), (' B 408  ARG  NH2', ' B 414  GLN  OE1', -0.524, (114.932, 80.154, 71.007)), (' A 414  THR HG22', ' A 416  ASN  H  ', -0.524, (96.814, 114.881, 88.707)), (' A 351  LEU  HB2', ' A 355  ASP  HB3', -0.524, (91.181, 85.811, 72.709)), (' B 379  CYS  CA ', ' B 432  CYS  HB3', -0.524, (119.385, 84.842, 57.136)), (' B 385  THR  OG1', ' B 386  LYS  N  ', -0.516, (124.189, 91.963, 49.804)), (' B 439  ASN  ND2', ' B 499  PRO  O  ', -0.513, (93.668, 85.801, 62.656)), (' B 443  SER  HB3', ' B 507  PRO  HG3', -0.513, (96.237, 80.427, 61.162)), (' A 450  LEU HD21', ' A 519  THR  HB ', -0.507, (91.126, 96.15, 101.274)), (' B 418  ILE  HA ', ' B 422  ASN  HB2', -0.502, (110.042, 71.591, 66.267)), (' A 357  ARG HH12', ' B 500  THR HG21', -0.502, (88.034, 85.851, 68.48)), (' A 184  VAL HG22', ' A 464  PHE  HE1', -0.501, (79.246, 76.15, 104.29)), (' A 417  HIS  HB2', ' A 543  ASP  OD2', -0.501, (98.205, 111.254, 86.347)), (' A 133  CYS  HB3', ' A 141  CYS  CA ', -0.499, (56.098, 93.172, 95.552)), (' A 368  ASP  HA ', ' A 371  THR HG22', -0.499, (84.337, 103.258, 82.122)), (' A  48  TRP  CZ3', ' A 359  LYS  HB2', -0.498, (83.684, 91.213, 75.346)), (' A 303  ASP  N  ', ' A 303  ASP  OD1', -0.497, (85.976, 109.792, 70.637)), (' B 411  ALA  HB3', ' B 414  GLN  HG3', -0.496, (117.189, 79.692, 67.704)), (' B 493  GLN  NE2', ' B 494  SER  O  ', -0.496, (97.615, 69.971, 68.739)), (' A 404  VAL  O  ', ' A 408  MET  HG2', -0.493, (96.175, 98.79, 87.169)), (' A 355  ASP  OD2', ' B 500  THR  OG1', -0.492, (91.784, 84.509, 68.596)), (' A 529  LEU HD11', ' A 554  LEU HD13', -0.492, (103.134, 98.343, 90.263)), (' A  48  TRP  HZ3', ' A 359  LYS  HB2', -0.49, (83.961, 91.103, 75.661)), (' A 381  TYR  HD1', ' A 401  HIS  HA ', -0.482, (96.154, 91.25, 88.355)), (' A 524  GLN  HB3', ' A 574  VAL HG11', -0.481, (103.0, 96.585, 98.723)), (' A 400  PHE  O  ', ' A 404  VAL HG23', -0.481, (97.15, 92.769, 90.36)), (' A 153  GLU  OE1', ' A 154  ASN  ND2', -0.478, (72.162, 105.583, 92.69)), (' B 405  ASP  N  ', ' B 405  ASP  OD1', -0.477, (105.047, 81.325, 69.231)), (' A 132  ALA  HB3', ' A 148  LEU HD11', -0.474, (63.006, 92.81, 96.979)), (' B 350  VAL HG22', ' B 422  ASN  HB3', -0.468, (108.95, 70.367, 63.737)), (' A 458  LYS  HD3', ' A 480  MET  HE3', -0.465, (84.437, 87.466, 112.489)), (' A 385  TYR  OH ', ' A 401  HIS  NE2', -0.464, (95.326, 87.421, 85.137)), (' B 398  ASP  HB2', ' B 512  VAL HG13', -0.461, (113.933, 74.825, 56.006)), (' A 292  ASP  OD1', ' A 294  THR  OG1', -0.461, (81.686, 113.175, 83.787)), (' A 493  HIS  ND1', ' A 499  ASP  OD2', -0.46, (68.695, 89.382, 108.836)), (' A 248  LEU HD11', ' A 278  LEU HD21', -0.459, (75.565, 106.525, 105.533)), (' A 332  MET  HE1', ' A 344  CYS  HB3', -0.456, (78.463, 94.58, 75.893)), (' B 475  ALA  HB3', ' B 487  ASN  HB3', -0.455, (105.231, 57.278, 80.647)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.454, (109.939, 84.71, 60.319)), (' A 293  VAL HG22', ' A 366  MET  HG3', -0.454, (86.644, 112.249, 83.956)), (' A 562  LYS  HB2', ' A 562  LYS  HE2', -0.454, (98.738, 81.148, 89.24)), (' A  37  GLU  OE1', ' A 393  ARG  NH1', -0.453, (98.352, 78.378, 77.1)), (' A 315  PHE  HD2', ' A 320  LEU HD12', -0.452, (100.233, 99.21, 82.201)), (' B 385  THR  OG1', ' B 386  LYS  HD2', -0.449, (124.769, 92.84, 49.731)), (' B 350  VAL  O  ', ' B 353  TRP  HD1', -0.449, (109.029, 68.988, 60.599)), (' B 334  ASN  HB2', ' B 362  VAL HG12', -0.448, (119.917, 81.443, 35.664)), (' B 358  ILE  HB ', ' B 395  VAL HG13', -0.446, (117.668, 75.63, 45.198)), (' A 526  GLN  O  ', ' A 530  CYS  N  ', -0.444, (104.226, 104.371, 93.91)), (' A 459  TRP  N  ', ' A 480  MET  HE1', -0.439, (83.213, 85.977, 110.791)), (' B 454  ARG  NH1', ' B 491  PRO  HB2', -0.439, (106.149, 61.446, 67.098)), (' B 503  VAL  HA ', ' B 506  GLN  HB2', -0.437, (99.496, 86.148, 66.012)), (' A  29  LEU HD11', ' A  97  LEU  HG ', -0.437, (103.04, 68.48, 87.282)), (' A 144  LEU  O  ', ' A 149  ASP  N  ', -0.436, (67.89, 96.176, 93.433)), (' A 381  TYR  CD1', ' A 401  HIS  HA ', -0.435, (96.576, 90.971, 88.157)), (' B 394  ASN  HB2', ' B 516  GLU  OE1', -0.435, (122.003, 70.988, 47.31)), (' A 423  LEU  HA ', ' A 423  LEU HD12', -0.431, (90.382, 116.93, 77.863)), (' B 517  LEU  HA ', ' B 517  LEU HD23', -0.431, (128.208, 74.55, 47.124)), (' B 401  VAL HG22', ' B 509  ARG  HG2', -0.429, (102.777, 78.189, 56.613)), (' A 237  TYR  OH ', ' A 485  VAL  O  ', -0.429, (81.595, 99.419, 109.89)), (' A 532  ILE  O  ', ' A 534  LYS  NZ ', -0.426, (111.766, 107.366, 90.153)), (' B 351  TYR  HB3', ' B 453  TYR  HA ', -0.426, (105.186, 67.86, 63.855)), (' A 160  GLU  HA ', ' A 163  TRP  CD1', -0.425, (60.307, 100.944, 101.478)), (' A 577  LYS  HB2', ' A 577  LYS  HE3', -0.424, (108.307, 87.693, 104.628)), (' A 482  ARG  HD3', ' A 488  VAL HG23', -0.419, (73.241, 95.272, 116.44)), (' A  25  ALA  HB1', ' A  97  LEU HD11', -0.418, (105.15, 66.127, 87.701)), (' A 477  TRP  CZ3', ' A 500  PRO  HB3', -0.416, (77.326, 86.51, 106.501)), (' A 147  GLY  O  ', ' A 151  ILE HG12', -0.414, (64.397, 99.267, 94.171)), (' A 365  THR  OG1', ' A 366  MET  N  ', -0.413, (82.112, 109.831, 82.549)), (' A 318  VAL  O  ', ' A 551  GLY  HA3', -0.411, (106.387, 101.618, 83.521)), (' A 441  LYS  O  ', ' A 445  THR HG22', -0.41, (85.515, 106.27, 97.973)), (' A 435  GLU  HB3', ' A 540  HIS  NE2', -0.406, (94.5, 116.18, 98.579)), (' A 534  LYS  HB2', ' A 534  LYS  HE2', -0.404, (111.333, 110.394, 90.71)), (' A 232  GLN  HB2', ' A 581  VAL HG11', -0.402, (96.925, 98.1, 109.453))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
