# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 261 ', 'VAL', 0.0, (-0.20199999999999999, 25.264, -14.470999999999998)), ('B', ' 282 ', 'LEU', 0.019812612466430853, (-13.3, -2.063, -21.554))]
data['omega'] = []
data['rota'] = [('A', '  21 ', 'THR', 0.2058331240752666, (-7.031000000000006, -22.001000000000005, 3.488)), ('A', '  41 ', 'HIS', 0.24397313190906963, (-13.493000000000007, -13.237, 5.733)), ('A', '  46 ', 'SER', 0.2655030131227235, (-20.993, -18.889, 2.044)), ('A', '  61 ', 'LYS', 0.012088288303070335, (-11.559999999999993, -21.552, 15.343)), ('A', '  72 ', 'ASN', 0.22776805025847874, (5.158, -26.371000000000006, -1.695)), ('A', '  73 ', 'VAL', 0.13016207829571175, (6.127, -25.98, 2.048)), ('A', '  90 ', 'LYS', 0.04206316465130536, (1.39, -16.045, 13.821)), ('A', '  93 ', 'THR', 0.11670639274916486, (8.867, -19.595000000000013, 10.892)), ('A', ' 102 ', 'LYS', 0.18773103967616697, (6.072, -0.4450000000000004, 6.312)), ('A', ' 196 ', 'THR', 0.028306845342740417, (-20.355, 8.956, -8.064)), ('A', ' 224 ', 'THR', 0.1884782727710283, (-3.7340000000000018, 31.72700000000002, -18.656)), ('A', ' 228 ', 'ASN', 0.10523096657466208, (-11.442, 29.9, -8.98)), ('A', ' 303 ', 'VAL', 0.0560541471547562, (14.876, 6.171, -10.79)), ('B', '  45 ', 'THR', 0.15368972466705003, (33.389, 4.6300000000000034, -28.442999999999998)), ('B', '  47 ', 'GLU', 0.1590461700936067, (33.35400000000003, 8.033000000000001, -32.822)), ('B', ' 100 ', 'LYS', 0.0, (14.006, -22.163000000000007, -15.611)), ('B', ' 152 ', 'ILE', 0.20845010113800339, (6.366000000000001, -16.473000000000006, -17.878)), ('B', ' 213 ', 'ILE', 0.060538726400742204, (-17.319, -11.845, -21.972)), ('B', ' 286 ', 'LEU', 0.21898080116101037, (-10.257, 3.6160000000000005, -29.094))]
data['cbeta'] = []
data['probe'] = [(' A   4  ARG  H  ', ' A 299  GLN HE22', -0.879, (5.833, 4.726, -19.242)), (' A  41  HIS  HB2', ' A  49  MET  HE1', -0.749, (-15.547, -13.214, 3.606)), (' A   4  ARG  H  ', ' A 299  GLN  NE2', -0.662, (5.914, 5.502, -19.678)), (' A  82  MET  HE3', ' A 710  HOH  O  ', -0.63, (-12.5, -7.553, 13.787)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.609, (-9.05, -10.85, -7.533)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.59, (-7.289, -4.949, 6.957)), (' B 703  UQZ  C8 ', ' B 703  UQZ  O1 ', -0.589, (20.554, 5.205, -29.898)), (' B 273  GLN  NE2', ' B 801  HOH  O  ', -0.566, (-20.613, 0.988, -43.962)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.536, (0.853, -7.347, -32.556)), (' B  40  ARG  HD3', ' B  85  CYS  HA ', -0.534, (26.321, -7.492, -32.224)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.534, (12.951, -4.808, -12.975)), (' B   5  LYS  NZ ', ' B 290  GLU  OE1', -0.525, (0.512, -2.71, -25.494)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.518, (21.694, -10.173, -30.011)), (' B   5  LYS  HG2', ' B 127  GLN  HB3', -0.513, (0.128, -4.429, -21.012)), (' B 231  ASN  O  ', ' B 235  MET  HG2', -0.513, (-7.764, -4.753, -46.817)), (' B 167  LEU HD12', ' B 171  VAL HG23', -0.51, (11.522, 2.423, -33.935)), (' B 103  PHE  CD2', ' B 704  DMS  H22', -0.51, (18.765, -19.26, -25.344)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.497, (-0.253, -2.942, -5.442)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.492, (10.005, -8.078, -21.581)), (' B   3  PHE  HE1', ' B 300  CYS  HG ', -0.488, (-9.806, -10.174, -20.738)), (' B  51  ASN HD21', ' B 188  ARG HH21', -0.485, (27.876, 3.44, -42.25)), (' A 260  ALA  O  ', ' A 261  VAL HG23', -0.482, (2.111, 25.973, -13.451)), (' B 110  GLN HE21', ' B 111  THR  H  ', -0.479, (2.666, -12.008, -27.134)), (' A 166  GLU  HB2', ' A 741  HOH  O  ', -0.479, (-14.004, -9.181, -7.283)), (' B   3  PHE  HE1', ' B 300  CYS  SG ', -0.475, (-9.878, -10.156, -20.463)), (' B 276  MET  CE ', ' B 285  ALA  HA ', -0.473, (-13.753, 4.436, -27.147)), (' B 108  PRO  HA ', ' B 130  MET  HG3', -0.467, (5.763, -8.193, -33.876)), (' A 231  ASN  OD1', ' A 241  PRO  HA ', -0.461, (-11.373, 22.112, -8.18)), (' B 703  UQZ  C18', ' B 703  UQZ  C4 ', -0.461, (18.984, 8.388, -27.754)), (' B   3  PHE  CE1', ' B 300  CYS  SG ', -0.46, (-10.491, -10.169, -20.577)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.46, (22.071, -17.351, -13.146)), (' B 188  ARG  NH2', ' B 190  THR HG21', -0.458, (25.254, 3.809, -41.908)), (' A 127  GLN  O  ', ' B   4  ARG  NH1', -0.457, (-3.492, 0.69, -13.126)), (' A  27  LEU  C  ', ' A  27  LEU HD12', -0.45, (-6.557, -16.43, 1.147)), (' A 225  THR HG22', ' A 262  LEU  O  ', -0.443, (-4.897, 28.356, -16.727)), (' B   5  LYS  HZ1', ' B 290  GLU  HB3', -0.442, (0.401, -3.55, -25.641)), (' B 231  ASN  HB3', ' B 235  MET  HE2', -0.44, (-7.01, -7.404, -46.536)), (' A 249  ILE HG22', ' A 293  PRO  HG2', -0.437, (1.677, 16.603, -8.392)), (' A  10  SER  OG ', ' A  14  GLU  OE2', -0.437, (7.066, -9.643, -9.525)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.435, (-10.648, -1.974, 4.715)), (' A 261  VAL  O  ', ' A 265  CYS  N  ', -0.434, (-3.157, 24.627, -16.417)), (' A  86  VAL HG13', ' A 179  GLY  CA ', -0.433, (-7.297, -4.984, 7.71)), (' A  21  THR  HB ', ' A  67  LEU  HB2', -0.429, (-5.913, -24.315, 4.059)), (' A 199  THR HG21', ' A 239  TYR  CZ ', -0.427, (-10.8, 14.257, -15.783)), (' B 276  MET  HE3', ' B 279  ARG  O  ', -0.427, (-16.069, 4.964, -26.652)), (' A  22  CYS  HB3', ' A  42  VAL  O  ', -0.426, (-11.163, -19.723, 6.218)), (' A   4  ARG  NH2', ' B   5  LYS  NZ ', -0.425, (0.885, -1.832, -24.245)), (' B  51  ASN HD21', ' B 188  ARG  NH2', -0.413, (27.513, 3.135, -42.262)), (' B 198  THR  OG1', ' B 240  GLU  HG2', -0.412, (-0.286, -3.967, -39.633)), (' B  46  SER  HA ', ' B  49  MET  HE2', -0.408, (29.879, 7.417, -29.184)), (' A   4  ARG  HD3', ' B 126  TYR  CD1', -0.404, (5.669, -0.362, -21.468))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
