# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 143 ', 'PRO', None, (-33.566, 2.08, 3.767)), ('A', ' 235 ', 'PRO', None, (-57.853, 4.687, 4.47)), ('C', ' 143 ', 'PRO', None, (-56.29900000000001, 47.92300000000001, -6.15)), ('C', ' 235 ', 'PRO', None, (-36.592000000000006, 46.786, 8.035))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A   3  GLN  NE2', ' A 606  HOH  O  ', -0.658, (-48.675, -5.061, 34.038)), (' C   7  SER  HA ', ' C 114  THR HG21', -0.586, (-47.287, 67.025, 20.12)), (' B 357  ARG  HG3', ' B 396  TYR  CE1', -0.563, (-74.354, 41.517, 15.951)), (' A  94  TYR  O  ', ' A 113  GLY  HA2', -0.55, (-52.714, -9.14, 18.908)), (' D 376  THR  HB ', ' D 435  ALA  HB3', -0.547, (-21.019, 31.449, 31.226)), (' A 187  LEU HD11', ' A 226  TYR  HE2', -0.544, (-36.81, 3.631, 16.026)), (' A 148  VAL HG11', ' A 218  VAL HG21', -0.536, (-27.072, 2.11, 13.773)), (' C 171  ASN HD21', ' C 208  GLY  H  ', -0.516, (-48.488, 33.608, 3.594)), (' B 471  GLU  CD ', ' D 471  GLU  HB2', -0.514, (-52.345, 27.72, 25.629)), (' C 171  ASN  ND2', ' C 207  SER  HA ', -0.504, (-49.829, 34.388, 3.991)), (' A  20  LEU  HG ', ' A  83  MET  HE2', -0.494, (-60.898, -11.732, 16.202)), (' A 173  LEU HD13', ' A 211  PHE  CD2', -0.494, (-43.531, 11.006, 6.467)), (' B 392  PHE  CD1', ' B 515  PHE  HB3', -0.493, (-84.52, 41.049, 18.346)), (' C 168  ASN  HB3', ' C 170  TYR  CD2', -0.492, (-46.594, 32.056, 13.751)), (' C   6  GLU  CD ', ' C 113  GLY  H  ', -0.491, (-49.693, 61.386, 17.739)), (' C 107  PHE  CE2', ' C 229  MET  HE3', -0.487, (-45.999, 48.172, 11.245)), (' C  94  TYR  O  ', ' C 113  GLY  HA2', -0.486, (-48.434, 62.012, 15.452)), (' C 171  ASN HD21', ' C 207  SER  HA ', -0.473, (-49.823, 33.715, 3.599)), (' C  35  HIS  CG ', ' C 107  PHE  HE1', -0.469, (-44.156, 50.137, 14.799)), (' A  34  MET  HB3', ' A  79  LEU HD22', -0.467, (-59.6, -0.851, 20.251)), (' B 339  GLY  HA2', ' B1001  NAG  H83', -0.467, (-80.019, 33.561, 2.345)), (' A  35  HIS  CG ', ' A 107  PHE  HE1', -0.462, (-55.646, 2.417, 14.702)), (' C 163  SER  HA ', ' C 209  THR HG22', -0.459, (-44.169, 35.936, -0.019)), (' C 168  ASN  HB3', ' C 170  TYR  HD2', -0.456, (-46.022, 31.818, 13.961)), (' B 364  ASP  O  ', ' B 367  VAL HG12', -0.451, (-87.518, 35.75, 4.999)), (' A  58  ARG  NH1', ' A 615  HOH  O  ', -0.45, (-70.245, -0.87, 12.105)), (' A  29  PHE  CD2', ' A  77  SER  HA ', -0.448, (-63.325, 0.359, 27.931)), (' C 171  ASN HD22', ' C 211  PHE  HZ ', -0.442, (-48.887, 36.115, 4.073)), (' A  12  VAL HG11', ' A  18  LEU  HG ', -0.438, (-62.377, -18.441, 15.097)), (' B 364  ASP  OD1', ' B 366  SER  HB3', -0.435, (-91.635, 37.301, 5.738)), (' B 425  LEU  HA ', ' B 425  LEU HD23', -0.434, (-76.711, 30.56, 23.283)), (' B 346  ARG  HA ', ' B 346  ARG  HD3', -0.433, (-68.825, 24.973, 3.654)), (' B 421  TYR  O  ', ' B1101  HOH  O  ', -0.433, (-66.095, 25.23, 23.132)), (' B 478  THR  O  ', ' B1102  HOH  O  ', -0.433, (-51.272, 16.205, 33.732)), (' C  20  LEU  HG ', ' C  83  MET  HE2', -0.428, (-39.841, 65.109, 17.024)), (' C  36  TRP  NE1', ' C  81  LEU  HB2', -0.421, (-40.021, 59.325, 18.71)), (' A 150  PRO  HG3', ' A 246  ILE HD12', -0.419, (-24.639, -3.194, 17.627)), (' A  83  MET  HE1', ' A 116  VAL HG21', -0.414, (-58.501, -13.552, 14.765)), (' D 383  SER  HB3', ' D 386  LYS  HB2', -0.412, (-13.125, 19.25, 42.017)), (' C 226  TYR  O  ', ' C 241  GLY  HA2', -0.41, (-53.379, 51.933, 1.365)), (' D 483  VAL HG12', ' D 484  GLU  O  ', -0.41, (-57.62, 38.988, 21.004)), (' A 159  ARG  HA ', ' A 209  THR  O  ', -0.41, (-42.024, 10.902, 1.715)), (' A  89  GLU  CD ', ' A  89  GLU  H  ', -0.41, (-56.76, -15.248, 2.423)), (' A  86  LEU  HA ', ' A  86  LEU HD23', -0.409, (-62.125, -14.364, 8.035)), (' D 370  ASN  ND2', ' D1115  HOH  O  ', -0.406, (-6.795, 22.297, 31.278)), (' A   6  GLU  HA ', ' A  21  SER  O  ', -0.406, (-57.829, -9.112, 23.315)), (' A 130  SER  HA ', ' A 136  ASP  HB2', -0.405, (-54.061, 2.993, -1.831)), (' B 517  LEU  HA ', ' B 517  LEU HD23', -0.403, (-83.63, 46.374, 20.557)), (' D 471  GLU  O  ', ' D1101  HOH  O  ', -0.403, (-50.389, 32.179, 27.723)), (' B 471  GLU  HG3', ' D 471  GLU  HB2', -0.401, (-53.038, 27.529, 26.736)), (' C  34  MET  HB3', ' C  79  LEU HD22', -0.4, (-43.666, 54.491, 21.025))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
