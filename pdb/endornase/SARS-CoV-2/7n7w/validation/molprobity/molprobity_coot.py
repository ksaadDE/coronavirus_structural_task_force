# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  28 ', 'ASN', 0.001970975678803078, (-0.06700000000000526, -81.0, 32.76599999999999)), ('B', '  28 ', 'ASN', 0.0020489940382744233, (72.096, -38.459, -19.285)), ('B', '  29 ', 'ASN', 0.045755197366953444, (69.606, -39.147, -16.468))]
data['omega'] = [('A', '  28 ', 'ASN', None, (-1.2300000000000162, -80.19700000000002, 32.465)), ('B', '  28 ', 'ASN', None, (72.828, -37.233, -19.015))]
data['rota'] = [('A', '  28 ', 'ASN', 0.2519496264609745, (-0.9060000000000182, -81.429, 31.337999999999997)), ('A', ' 179 ', 'TYR', 0.0, (36.46, -73.99, 13.414)), ('B', '  28 ', 'ASN', 0.0, (73.16299999999998, -38.475, -17.828))]
data['cbeta'] = []
data['probe'] = [(' B 145  GLU  OE1', ' B 501  HOH  O  ', -0.901, (39.869, -35.739, 5.029)), (' B 266  GLU  OE2', ' B 502  HOH  O  ', -0.893, (71.691, -57.764, -4.141)), (' A 286  GLY  O  ', ' A 401  HOH  O  ', -0.793, (9.966, -109.64, 5.318)), (' B 135  ARG  NH1', ' B 401  0OI  C08', -0.733, (29.066, -43.306, -2.128)), (' A 240  PHE  CZ ', ' A 257  ARG  HD3', -0.679, (12.781, -102.129, -2.562)), (' A 282  ASP  OD1', ' A 402  HOH  O  ', -0.672, (8.133, -102.424, -0.781)), (' A 272  ASP  OD1', ' A 403  HOH  O  ', -0.653, (19.534, -86.352, 11.047)), (' B 104  MET  HA ', ' B 104  MET  HE3', -0.652, (53.609, -38.818, -23.582)), (' A  36  ASP  N  ', ' A 405  HOH  O  ', -0.646, (-10.299, -63.615, 25.071)), (' B 132  ASP  OD1', ' B 505  HOH  O  ', -0.633, (29.974, -38.358, -3.903)), (' A 330  MET  HE1', ' A 344  LYS  HD2', -0.62, (32.675, -102.548, 11.07)), (' A 334  LYS  O  ', ' A 337  HIS  ND1', -0.606, (34.183, -111.553, -5.964)), (' B 135  ARG HH11', ' B 401  0OI  C08', -0.596, (28.834, -43.415, -2.133)), (' A   0  MET  HE3', ' A 622  HOH  O  ', -0.582, (16.391, -63.514, 30.135)), (' B  95  HIS  O  ', ' B 506  HOH  O  ', -0.573, (52.762, -44.6, -13.167)), (' A 212  ASP  OD2', ' A 225  TYR  OH ', -0.563, (24.652, -90.532, -15.418)), (' A 272  ASP  HA ', ' A 403  HOH  O  ', -0.543, (18.919, -86.684, 12.124)), (' A 179  TYR  HD1', ' A 179  TYR  N  ', -0.532, (34.986, -72.407, 12.346)), (' B 307  LYS  NZ ', ' B 521  HOH  O  ', -0.53, (49.941, -66.108, 25.265)), (' B 279  PHE  CD1', ' B 290  CYS  HA ', -0.524, (71.905, -64.9, 1.24)), (' A 179  TYR  CD1', ' A 179  TYR  N  ', -0.521, (35.494, -73.047, 12.23)), (' B 209  MET  HB3', ' B 300  ASP  OD1', -0.509, (53.265, -58.033, 22.892)), (' B 218  MET  HG3', ' B 237  TYR  CE2', -0.494, (63.722, -65.691, 22.795)), (' B 279  PHE  HB2', ' B 290  CYS  O  ', -0.493, (69.73, -64.17, 0.467)), (' A 314  VAL  O  ', ' A 332  TRP  HA ', -0.475, (34.095, -108.821, 3.142)), (' B  98  THR  O  ', ' B 106  ASP  HA ', -0.47, (47.369, -41.24, -17.366)), (' B  75  LEU  O  ', ' B 180  LYS  HE2', -0.462, (41.809, -54.107, -4.413)), (' B 200  LEU  HA ', ' B 200  LEU HD12', -0.459, (64.819, -53.426, 13.295)), (' B  90  ARG  NH2', ' B  93  PRO  O  ', -0.455, (56.6, -47.217, -9.563)), (' B  12  LYS  HE3', ' B  18  GLN  HG3', -0.45, (54.36, -21.36, -6.643)), (' A 178  TYR  C  ', ' A 179  TYR  CD1', -0.448, (35.558, -73.08, 11.708)), (' B 344  LYS  HE2', ' B 346  GLN  HB3', -0.446, (55.386, -71.441, -1.533)), (' B 151  LEU  HG ', ' B 401  0OI  C09', -0.446, (28.998, -45.864, -0.265)), (' B  71  ILE HD13', ' B 323  ASP  HB3', -0.446, (48.88, -53.741, 3.215)), (' A 330  MET  O  ', ' A 341  PHE  HA ', -0.445, (30.686, -103.039, 3.903)), (' B 135  ARG  NH1', ' B 401  0OI  C09', -0.441, (28.274, -44.013, -1.599)), (' A 279  PHE  CD1', ' A 290  CYS  HA ', -0.44, (13.721, -104.299, 12.214)), (' A 212  ASP  O  ', ' A 216  LEU  HG ', -0.439, (19.204, -93.762, -14.337)), (' A 313  VAL  O  ', ' A 333  CYS  HB2', -0.434, (37.276, -108.779, 0.559)), (' B  36  ASP  O  ', ' B 508  HOH  O  ', -0.434, (77.201, -19.076, -10.148)), (' A 189  LEU  HA ', ' A 189  LEU HD23', -0.433, (38.505, -81.061, 12.52)), (' B 264  GLU  O  ', ' B 280  ILE  HA ', -0.432, (71.962, -60.199, 5.858)), (' A 134  PHE  CZ ', ' A 181  LYS  HG3', -0.429, (38.849, -72.817, 18.364)), (' A 178  TYR  C  ', ' A 179  TYR  HD1', -0.429, (35.227, -72.561, 11.918)), (' A 218  MET  HG3', ' A 237  TYR  CD1', -0.426, (18.977, -101.156, -8.923)), (' B 199  ASN  HB2', ' B 202  GLU  HG2', -0.423, (63.734, -46.92, 12.091)), (' A 173  LYS  HG3', ' A 624  HOH  O  ', -0.42, (25.988, -68.845, 2.126)), (' A 218  MET  HG3', ' A 237  TYR  CG ', -0.418, (19.569, -101.353, -8.633)), (' A 214  LEU  HA ', ' A 214  LEU HD23', -0.409, (15.992, -93.499, -8.818)), (' B 226  LYS  HD2', ' B 226  LYS  N  ', -0.409, (54.322, -68.166, 29.817)), (' B  60  LYS  O  ', ' B 509  HOH  O  ', -0.406, (51.058, -34.757, -7.895)), (' B 218  MET  HG3', ' B 237  TYR  CD2', -0.405, (64.232, -65.871, 22.877)), (' B  53  VAL HG21', ' B 104  MET  HG2', -0.402, (57.397, -39.196, -21.43))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
