# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('E', ' 146 ', 'PRO', None, (219.146, 140.94500000000005, 278.225))]
data['rota'] = [('E', '  34 ', 'HIS', 0.2371770585679498, (224.81899999999993, 175.86, 256.545))]
data['cbeta'] = []
data['probe'] = [(' A  46  SER  HA ', ' A 279  TYR  O  ', -0.671, (198.749, 236.006, 176.72)), (' B 105  ILE  HB ', ' B 239  GLN  HB2', -0.621, (169.871, 160.615, 208.63)), (' A 127  VAL HG21', ' A1302  NAG  H62', -0.605, (191.116, 254.119, 212.653)), (' A  51  THR  O  ', ' A 274  THR  HA ', -0.603, (187.918, 228.121, 186.908)), (' C  46  SER  HA ', ' C 279  TYR  O  ', -0.598, (231.436, 183.591, 177.157)), (' C 901  GLN HE21', ' C 905  ARG HH21', -0.597, (208.22, 185.603, 131.871)), (' A 200  TYR  OH ', ' C 357  ARG  NH2', -0.594, (198.537, 234.235, 207.244)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.585, (171.048, 217.092, 149.096)), (' B 821  LEU HD11', ' B 939  SER  HB3', -0.581, (172.036, 184.359, 148.312)), (' C 201  PHE  HB3', ' C 229  LEU  HB2', -0.58, (235.661, 187.795, 206.304)), (' E 152  MET  O  ', ' E 161  ARG  NH1', -0.578, (207.852, 139.108, 286.042)), (' E 260  GLY  HA3', ' E 612  PRO  HD3', -0.576, (196.481, 146.405, 300.378)), (' E 261  CYS  HB2', ' E 488  VAL  HB ', -0.564, (200.416, 148.919, 297.888)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.561, (163.228, 253.283, 199.702)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.559, (170.853, 143.553, 201.834)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.556, (261.44, 205.993, 203.56)), (' C 821  LEU HD11', ' C 939  SER  HB2', -0.552, (227.747, 183.834, 148.507)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.537, (181.206, 170.375, 177.661)), (' C 659  SER  HB3', ' C 698  SER  HB3', -0.536, (229.515, 217.418, 149.962)), (' C  26  PRO  HB3', ' C  65  PHE  HE1', -0.533, (252.93, 205.407, 199.533)), (' C 418  ILE  HA ', ' C 422  ASN HD22', -0.533, (185.167, 214.974, 221.306)), (' A 699  LEU HD11', ' B 869  MET  HB3', -0.53, (174.483, 208.937, 150.99)), (' A 195  LYS  O  ', ' A 201  PHE  HA ', -0.529, (188.934, 236.656, 202.886)), (' A 143  VAL  HA ', ' A 154  GLU  HA ', -0.527, (182.34, 264.458, 207.928)), (' A 278  LYS  HE3', ' A 287  ASP  HB2', -0.526, (191.133, 237.565, 176.51)), (' B  94  SER  HB2', ' B 190  ARG  HB2', -0.522, (162.44, 161.083, 194.61)), (' A 983  ARG  O  ', ' C 383  SER  N  ', -0.522, (208.469, 215.379, 207.19)), (' B 125  ASN HD22', ' B 171  VAL HG13', -0.519, (154.188, 171.919, 209.011)), (' C 393  THR  HB ', ' C 522  ALA  HA ', -0.517, (203.922, 231.936, 204.584)), (' C 323  THR  OG1', ' C 324  GLU  OE1', -0.513, (228.104, 227.751, 192.405)), (' C 762  GLN  OE1', ' C 765  ARG  NH1', -0.512, (189.752, 188.869, 175.104)), (' C 105  ILE  O  ', ' C 238  PHE  HA ', -0.512, (244.084, 196.913, 208.493)), (' E 555  PHE  HA ', ' E 558  LEU  HB2', -0.512, (202.525, 166.572, 258.388)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.511, (183.225, 230.747, 177.876)), (' E  20  THR HG23', ' E  23  GLU  H  ', -0.507, (219.118, 193.789, 260.646)), (' C 125  ASN HD22', ' C 171  VAL HG13', -0.507, (245.215, 177.594, 211.022)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.505, (256.668, 197.78, 194.408)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.504, (234.436, 199.301, 178.179)), (' A 142  GLY  HA3', ' A 156  GLU  HB3', -0.502, (178.631, 262.193, 210.624)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.501, (177.997, 230.092, 178.298)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.501, (200.339, 232.037, 148.147)), (' A 192  PHE  HA ', ' A 204  TYR  O  ', -0.5, (187.72, 244.319, 195.036)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.499, (186.684, 167.707, 168.489)), (' C 127  VAL HG21', ' C1302  NAG  H62', -0.495, (247.439, 180.735, 214.711)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.495, (166.854, 251.466, 198.972)), (' A1040  VAL HG21', ' B1035  GLY  HA3', -0.493, (190.878, 203.128, 135.607)), (' A  36  VAL HG13', ' A 222  ALA  HA ', -0.493, (189.321, 240.917, 185.903)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.492, (236.329, 204.518, 178.91)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.488, (184.072, 166.259, 177.99)), (' B 521  PRO  HB3', ' C 200  TYR  HE1', -0.488, (226.479, 186.855, 207.511)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.487, (213.294, 193.154, 105.012)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.487, (258.012, 203.799, 202.361)), (' B 669  GLY  HA2', ' B 697  MET  HE3', -0.487, (202.691, 171.664, 156.734)), (' A 916  LEU HD22', ' A 923  ILE HD13', -0.487, (199.98, 219.519, 123.846)), (' A  34  ARG  NH2', ' A 221  SER  OG ', -0.486, (186.588, 246.59, 185.174)), (' A1143  PRO  HA ', ' A1146  ASP  HB2', -0.483, (193.34, 204.874, 90.468)), (' C 599  THR  HB ', ' C 608  VAL HG12', -0.482, (234.362, 205.616, 168.843)), (' E 455  MET  HG2', ' E 480  MET  HE2', -0.479, (204.676, 160.246, 292.829)), (' A 985  ASP  N  ', ' A 985  ASP  OD1', -0.479, (209.821, 211.161, 206.402)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.478, (194.796, 246.463, 207.0)), (' A  48  LEU  HB3', ' A 276  LEU HD11', -0.478, (192.946, 228.946, 178.371)), (' A  93  ALA  HB3', ' A 266  TYR  HB2', -0.478, (178.47, 246.762, 191.768)), (' E 610  TRP  HE3', ' E 614  ALA  HB3', -0.478, (203.715, 146.629, 306.12)), (' B1074  ASN  OD1', ' C 895  GLN  NE2', -0.477, (202.069, 172.99, 124.268)), (' C  93  ALA  HB3', ' C 266  TYR  HB2', -0.477, (249.25, 196.03, 193.711)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.474, (213.114, 196.008, 136.091)), (' B 360  ASN  ND2', ' C 169  GLU  O  ', -0.474, (236.113, 180.094, 213.742)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.474, (178.539, 227.235, 168.479)), (' B 518  LEU HD23', ' B 520  ALA  H  ', -0.472, (225.782, 191.079, 214.654)), (' B1048  HIS  HA ', ' B1066  THR HG22', -0.472, (190.061, 190.831, 135.54)), (' B 926  GLN  NE2', ' L   1  NAG  O6 ', -0.472, (182.268, 180.027, 127.6)), (' E 535  HIS  NE2', ' E 538  PRO  O  ', -0.471, (185.681, 154.185, 264.961)), (' C 434  ILE  O  ', ' C 510  VAL  HA ', -0.469, (199.174, 217.578, 223.008)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.469, (170.994, 147.413, 200.68)), (' B 412  PRO  HB3', ' B 427  ASP  HA ', -0.468, (214.018, 186.324, 232.713)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.468, (188.098, 191.25, 104.863)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.468, (229.903, 177.972, 231.463)), (' A 971  GLY  HA3', ' A 995  ARG HH21', -0.468, (197.104, 208.437, 195.295)), (' A  46  SER  CA ', ' A 279  TYR  O  ', -0.467, (199.514, 235.486, 176.973)), (' C 720  ILE HG13', ' C 923  ILE HG23', -0.466, (219.775, 191.132, 129.001)), (' B 192  PHE  HA ', ' B 204  TYR  O  ', -0.466, (166.927, 168.479, 195.466)), (' A 926  GLN  NE2', ' F   1  NAG  O6 ', -0.465, (191.922, 225.183, 127.423)), (' B 128  ILE HD13', ' B 170  TYR  HD2', -0.464, (161.22, 174.047, 206.338)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.464, (196.007, 233.018, 190.823)), (' C 276  LEU  HB3', ' C 289  VAL  HB ', -0.462, (232.564, 195.807, 179.213)), (' B 418  ILE  HA ', ' B 422  ASN  HB2', -0.462, (224.218, 181.194, 242.991)), (' A1035  GLY  HA3', ' C1040  VAL HG21', -0.462, (207.689, 206.373, 135.829)), (' C 357  ARG  NH1', ' C 396  TYR  OH ', -0.462, (195.837, 231.788, 209.615)), (' A 156  GLU  OE2', ' A 158  ARG  NH1', -0.461, (175.462, 261.235, 214.301)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.46, (197.602, 222.65, 143.813)), (' E 201  ASP  OD2', ' E 219  ARG  NH1', -0.459, (211.834, 178.475, 284.334)), (' E  22  GLU  HG3', ' E  88  ILE HG23', -0.456, (215.308, 189.81, 264.23)), (' B  48  LEU  HB3', ' B 276  LEU HD11', -0.454, (177.064, 179.462, 177.437)), (' B 156  GLU  OE2', ' B 158  ARG  NH1', -0.452, (157.374, 150.944, 215.003)), (' B  97  LYS  HG2', ' B 186  PHE  HD1', -0.451, (157.721, 152.719, 192.366)), (' E 494  ASP  N  ', ' E 494  ASP  OD1', -0.451, (216.246, 151.995, 303.33)), (' E  91  LEU HD11', ' E 212  VAL HG22', -0.45, (204.449, 183.86, 268.154)), (' C 724  THR HG23', ' C 934  ILE HD12', -0.448, (221.23, 190.664, 143.975)), (' B  40  ASP  N  ', ' B  40  ASP  OD1', -0.447, (171.979, 180.535, 190.237)), (' C 127  VAL HG22', ' C 171  VAL HG22', -0.443, (245.021, 179.829, 212.863)), (' B 396  TYR  HB2', ' B 514  SER  HB3', -0.441, (225.269, 182.026, 226.25)), (' A  89  GLY  HA3', ' A 270  LEU HD12', -0.44, (183.134, 235.039, 197.362)), (' E 360  MET  HE1', ' E 372  ALA  HA ', -0.44, (210.046, 149.531, 262.283)), (' C  36  VAL HG23', ' C 222  ALA  HA ', -0.439, (239.84, 189.445, 187.078)), (' B 164  ASN  OD1', ' B 165  ASN  N  ', -0.439, (168.637, 169.895, 223.375)), (' B 126  VAL HG23', ' B 174  PRO  HA ', -0.437, (155.524, 168.564, 202.621)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.436, (167.163, 151.838, 192.741)), (' B 193  VAL  HB ', ' B 204  TYR  HB2', -0.436, (169.888, 170.762, 194.676)), (' B 327  VAL HG12', ' B 542  ASN  HB3', -0.436, (215.086, 172.296, 199.48)), (' B 914  ASN  ND2', ' B1111  GLU  OE2', -0.436, (189.041, 187.98, 115.22)), (' C  39  PRO  HG2', ' C  51  THR HG21', -0.435, (230.284, 190.992, 188.272)), (' C 360  ASN  H  ', ' C 523  THR  HB ', -0.434, (205.01, 235.34, 209.634)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.434, (217.73, 189.489, 136.876)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.434, (197.188, 213.319, 135.67)), (' B 310  LYS  HG3', ' B 600  PRO  HA ', -0.433, (186.229, 170.357, 161.556)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.432, (155.946, 168.494, 212.134)), (' C 331  ASN  HB3', ' C 580  GLN HE21', -0.432, (217.521, 239.204, 205.07)), (' C  27  ALA  HB3', ' C  64  TRP  HB3', -0.432, (255.127, 203.587, 194.409)), (' E 183  TYR  OH ', ' E 509  ASP  OD1', -0.431, (219.453, 164.961, 284.388)), (' E 156  LEU HD11', ' E 281  LEU HD21', -0.43, (200.984, 134.125, 285.771)), (' A 226  LEU  HG ', ' A 227  VAL HG23', -0.429, (194.26, 245.919, 199.906)), (' C  97  LYS  HG2', ' C 186  PHE  HD1', -0.428, (260.592, 189.318, 194.879)), (' A1074  ASN  OD1', ' B 895  GLN  NE2', -0.428, (175.901, 211.51, 123.613)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.427, (179.821, 184.029, 143.338)), (' A 229  LEU  HG ', ' A 231  ILE HG23', -0.427, (191.869, 239.707, 208.123)), (' A  52  GLN  HB2', ' A 274  THR HG22', -0.426, (187.666, 224.825, 187.746)), (' E 252  TYR  HB3', ' E 255  TYR  HD2', -0.425, (200.725, 135.696, 295.311)), (' E 297  MET  HB3', ' E 302  TRP  HB2', -0.425, (204.824, 137.974, 256.735)), (' C 934  ILE  HA ', ' C 934  ILE HD13', -0.424, (224.041, 190.38, 143.481)), (' A1107  ARG HH22', ' B 907  ASN HD22', -0.424, (190.701, 199.283, 120.948)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.424, (201.472, 212.85, 222.781)), (' B 358  ILE  HB ', ' B 395  VAL  HB ', -0.423, (227.624, 177.849, 221.073)), (' B 360  ASN HD22', ' C 168  PHE  HE1', -0.422, (234.988, 181.264, 212.397)), (' B 996  LEU  HA ', ' B 996  LEU HD23', -0.422, (188.996, 198.368, 191.506)), (' B 724  THR HG23', ' B 934  ILE HD12', -0.421, (181.749, 186.073, 143.756)), (' B 411  ALA  HB3', ' B 414  GLN  HG3', -0.42, (213.937, 180.353, 238.112)), (' B 907  ASN HD21', ' B 913  GLN  HG3', -0.418, (189.494, 196.947, 119.774)), (' B 139  PRO  HB3', ' B 159  VAL  HA ', -0.417, (164.83, 157.807, 213.318)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.417, (199.882, 220.495, 136.608)), (' C  46  SER  CA ', ' C 279  TYR  O  ', -0.416, (231.056, 182.901, 177.299)), (' B  38  TYR  HB2', ' B 225  PRO  HD3', -0.415, (167.256, 176.663, 191.005)), (' B 903  ALA  HB2', ' B 916  LEU HD12', -0.415, (183.616, 194.606, 122.053)), (' B  93  ALA  HB3', ' B 266  TYR  HB2', -0.415, (169.395, 159.0, 192.277)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.415, (182.345, 189.871, 136.753)), (' B 189  LEU  HB3', ' B 208  THR  HB ', -0.414, (161.328, 162.967, 187.86)), (' B 790  LYS  HB3', ' B 790  LYS  HE2', -0.414, (168.796, 206.39, 137.56)), (' A 540  ASN  OD1', ' A 549  THR  OG1', -0.413, (170.926, 206.278, 191.504)), (' A 986  PRO  HA ', ' A 989  ALA  HB3', -0.413, (211.579, 208.791, 202.318)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.413, (232.66, 203.564, 162.258)), (' B 598  ILE HG23', ' B 664  ILE HG21', -0.411, (191.572, 170.209, 163.957)), (' C 206  LYS  NZ ', ' C 224  GLU  OE2', -0.411, (242.059, 181.284, 189.566)), (' C 742  ILE  O  ', ' C1000  ARG  NH1', -0.409, (205.558, 185.73, 189.354)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.409, (169.006, 248.1, 191.475)), (' C 132  GLU  OE1', ' C 165  ASN  ND2', -0.407, (236.192, 192.663, 225.412)), (' C 555  SER  HB3', ' C 586  ASP  HB2', -0.407, (214.571, 236.414, 184.576)), (' B1029  MET  HB2', ' B1029  MET  HE2', -0.407, (186.158, 201.1, 146.42)), (' C  51  THR  O  ', ' C 274  THR  HA ', -0.406, (229.096, 197.263, 187.054)), (' C 195  LYS  HE2', ' C 204  TYR  HE1', -0.405, (234.458, 190.852, 197.255)), (' E 321  PRO  O  ', ' E 380  GLN  NE2', -0.405, (205.891, 159.272, 253.544)), (' B 566  GLY  N  ', ' B 575  ALA  O  ', -0.405, (223.821, 176.895, 187.736)), (' C 105  ILE  HB ', ' C 239  GLN  HB3', -0.404, (247.38, 197.076, 210.149)), (' C 866  THR  H  ', ' C 869  MET  HE3', -0.403, (205.966, 173.693, 155.785)), (' B 722  VAL  HA ', ' B1064  HIS  O  ', -0.402, (184.59, 188.291, 138.325)), (' B 717  ASN  ND2', ' B1071  GLN  OE1', -0.401, (185.935, 176.985, 124.737)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.401, (181.371, 226.524, 161.479)), (' B 189  LEU HD12', ' B 210  ILE HD13', -0.4, (162.63, 159.032, 186.665)), (' A1086  LYS  HB2', ' A1086  LYS  HE2', -0.4, (185.424, 193.139, 102.779)), (' B 203  ILE  HB ', ' B 227  VAL HG12', -0.4, (165.166, 172.966, 200.318)), (' C 377  PHE  HE2', ' C 384  PRO  HB3', -0.4, (209.465, 216.08, 215.788)), (' B  27  ALA  HB3', ' B  64  TRP  HB3', -0.4, (172.597, 150.208, 192.095)), (' C 885  GLY  HA2', ' C 901  GLN  NE2', -0.4, (207.717, 184.032, 131.529)), (' C 736  VAL HG22', ' C 858  LEU HD23', -0.4, (206.544, 184.308, 176.331))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
