# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('D', ' 183 ', 'PRO', 0.0763022300667591, (112.53000000000002, 79.025, 141.375))]
data['omega'] = [('A', ' 505 ', 'PRO', None, (148.189, 120.56, 136.613)), ('B', ' 183 ', 'PRO', None, (130.42499999999998, 103.549, 126.036)), ('D', ' 183 ', 'PRO', None, (112.35400000000001, 77.598, 141.656))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(" F  18    C  H2'", ' F  19    A  N7 ', -1.388, (147.559, 167.965, 189.367)), (" F  18    C  H2'", ' F  19    A  C8 ', -1.334, (148.29, 167.602, 188.767)), (" F  18    C  C2'", ' F  19    A  C8 ', -1.134, (149.372, 167.173, 189.008)), (" F  18    C  O2'", ' F  19    A  H8 ', -0.997, (150.077, 167.794, 188.294)), (" F  18    C  C2'", ' F  19    A  N7 ', -0.948, (148.443, 166.903, 189.291)), (' F  18    C  O2 ', ' F  19    A  N7 ', -0.942, (147.121, 167.688, 188.876)), (" F  18    C HO2'", ' F  19    A  H8 ', -0.905, (150.265, 168.264, 188.814)), (' A  71  VAL  CG2', ' A 119  LEU HD21', -0.878, (118.949, 144.438, 84.465)), (' A 120  THR HG21', ' A 149  TYR  OH ', -0.828, (121.421, 135.076, 91.06)), (" F  18    C  O2'", ' F  19    A  C8 ', -0.818, (149.159, 167.688, 188.18)), (" F  14    C  H2'", ' F  15    G  C8 ', -0.792, (138.223, 154.146, 189.105)), (' B  43  ASN  ND2', " F  17    A  O4'", -0.745, (148.417, 158.972, 191.6)), (' A 758  LEU HD23', ' A 759  SER  H  ', -0.724, (126.72, 140.408, 135.053)), (' A  71  VAL HG23', ' A 119  LEU HD21', -0.723, (119.091, 143.581, 84.661)), (' F  18    C  C2 ', ' F  19    A  N7 ', -0.722, (147.482, 166.503, 189.53)), (' F  -1    G  N2 ', ' G   1    C  N3 ', -0.715, (125.474, 134.471, 149.64)), (' B  43  ASN  ND2', " F  17    A  O5'", -0.707, (147.887, 158.681, 192.695)), (' A 225  THR HG22', ' A 226  THR  H  ', -0.704, (143.672, 160.606, 86.169)), (' C  13  LEU HD22', ' C  55  LEU  HG ', -0.699, (114.175, 104.161, 141.59)), (' A 358  ASP  OD1', ' A 533  ARG  NH1', -0.682, (163.198, 138.054, 127.272)), (' A  10  ARG  NH1', ' A  10  ARG  O  ', -0.681, (117.969, 147.248, 70.57)), (' F  18    C  O2 ', ' F  19    A  C5 ', -0.65, (146.547, 167.699, 188.363)), (" F  18    C  H4'", ' F  19    A  OP1', -0.64, (152.017, 166.044, 190.383)), (' A 576  LEU HD11', ' A 686  THR HG22', -0.635, (139.08, 140.629, 135.825)), (' A 242  MET  HE1', ' A 466  ILE HG22', -0.63, (136.655, 145.348, 108.152)), (" F  14    C  H2'", ' F  15    G  H8 ', -0.629, (138.018, 154.498, 190.108)), (' A 119  LEU  O  ', ' A 119  LEU HD12', -0.623, (119.287, 140.689, 86.062)), (' A 279  ARG  NH2', ' A 318  SER  OG ', -0.622, (145.315, 131.709, 110.496)), (" F  18    C  C2'", ' F  19    A  H8 ', -0.617, (149.738, 167.758, 189.452)), (' D  83  VAL HG13', ' D  84  THR HG23', -0.615, (125.097, 105.702, 154.065)), (" F  18    C  O2'", ' F  19    A  P  ', -0.612, (151.345, 167.988, 189.422)), (' D 176  ASN  OD1', ' D 179  ASN  ND2', -0.612, (105.374, 66.238, 139.009)), (' F   0    U  C6 ', " F  -1    G  H2'", -0.61, (126.573, 140.179, 150.575)), (' C  58  VAL HG22', ' D 119  ILE HG12', -0.607, (115.573, 99.014, 136.377)), (' F  -1    G  O6 ', ' F  -2    U  O4 ', -0.603, (130.177, 135.617, 147.095)), (' A  71  VAL HG21', ' A 119  LEU HD21', -0.594, (118.95, 144.393, 85.684)), (' A 388  LEU HD23', ' A 397  SER  HB2', -0.589, (141.624, 112.68, 122.278)), (' A 436  GLU  OE2', ' A 438  LYS  NZ ', -0.588, (104.439, 122.896, 138.085)), (' A 239  SER  HA ', ' A 242  MET  HE2', -0.583, (135.192, 144.774, 105.847)), (' A  89  LEU HD12', ' A 201  ILE HD11', -0.58, (137.224, 155.592, 82.282)), (' A 836  ARG HH12', ' A 840  ALA  HB2', -0.579, (117.591, 126.827, 147.129)), (' A  18  ARG  NH2', ' A  63  ASP  OD1', -0.575, (110.447, 130.595, 73.248)), (' A 540  THR HG23', ' A 665  GLU  HG3', -0.573, (142.282, 126.262, 129.412)), (' B  90  MET  HG2', ' B  94  MET  HE3', -0.572, (154.818, 114.921, 135.169)), (' G -13    A  H8 ', " G -14    G  H2'", -0.562, (143.318, 149.41, 182.867)), (' D  34  VAL  HA ', ' D  37  LYS  HG2', -0.557, (129.903, 161.003, 203.134)), (' A 180  GLU  OE2', ' A 183  ARG  NH1', -0.554, (136.095, 128.74, 93.129)), (' A 238  TYR  O  ', ' A 242  MET  HG3', -0.551, (134.253, 142.685, 104.053)), (' B 101  ASP  O  ', ' B 105  ASN  HB2', -0.55, (163.272, 109.268, 115.772)), (' A   8  LEU HD21', ' A  19  LEU  HB2', -0.546, (112.235, 139.873, 74.309)), (' A 356  ASN  ND2', ' A 535  VAL  H  ', -0.544, (155.773, 132.725, 124.921)), (' A 899  MET  HE2', ' A 907  LEU HD22', -0.543, (123.2, 124.743, 172.905)), (' F  -1    G  C6 ', ' F  -2    U  C4 ', -0.542, (129.234, 136.287, 147.269)), (' A 836  ARG  NH1', ' A 840  ALA  HB2', -0.535, (117.279, 126.999, 146.463)), (' A  28  THR HG21', ' A  55  ARG  HD3', -0.53, (111.96, 145.819, 86.544)), (' B  35  LEU  O  ', ' B  39  LYS  HG2', -0.529, (147.952, 157.789, 202.554)), (' A 726  ARG  NH1', ' A 744  GLU  OE2', -0.528, (125.921, 164.808, 115.354)), (" F  18    C  O2'", ' F  19    A  OP1', -0.526, (151.606, 167.28, 189.136)), (' F   0    U  H6 ', " F  -1    G  H2'", -0.523, (126.838, 140.495, 151.403)), (' A 615  MET  HB2', ' A 766  PHE  HE1', -0.522, (112.393, 147.643, 125.354)), (' B 180  LEU HD13', ' B 184  LEU HD21', -0.521, (130.796, 97.026, 124.025)), (" F  21    C  H2'", ' F  22    G  C8 ', -0.521, (142.633, 178.952, 195.041)), (' A 462  THR  OG1', ' A 791  ASN  ND2', -0.521, (130.407, 132.577, 114.504)), (' A 136  GLU  HG2', ' A 793  PHE  HZ ', -0.519, (112.876, 133.757, 114.205)), (' A 356  ASN  HB3', ' A 534  ASN HD22', -0.514, (159.403, 132.821, 125.816)), (' A 333  ILE  O  ', ' A 340  PHE  N  ', -0.512, (164.733, 118.616, 127.066)), (' G  -9    U  C6 ', " G -10    A  H2'", -0.512, (128.862, 149.726, 173.317)), (' F  -1    G  C8 ', " F  -2    U  H2'", -0.511, (129.151, 139.989, 146.441)), (' A 715  ILE  O  ', ' A 721  ARG  NH2', -0.51, (113.848, 163.702, 107.856)), (' G -13    A  C8 ', " G -14    G  H2'", -0.508, (142.775, 149.543, 182.93)), (' A 601  MET  O  ', ' A 605  VAL HG23', -0.507, (118.819, 151.217, 136.92)), (' A 758  LEU HD23', ' A 759  SER  N  ', -0.504, (126.472, 140.474, 135.056)), (' A 120  THR HG22', ' A 122  TYR  H  ', -0.502, (119.372, 138.352, 91.206)), (' A 755  MET  HG2', ' A 764  VAL HG22', -0.501, (120.135, 148.566, 127.462)), (' B  34  VAL  O  ', ' B  38  LEU  HG ', -0.499, (152.049, 158.894, 204.79)), (' A 156  TYR  O  ', ' A 159  LYS  HG2', -0.498, (113.168, 122.568, 106.598)), (' D  51  ARG  NH1', " G -13    A  O2'", -0.496, (140.122, 145.549, 185.851)), (' D 146  THR  HB ', ' D 153  LEU HD12', -0.495, (96.399, 88.025, 132.296)), (" F   6    A  H2'", ' F   7    A  C8 ', -0.495, (141.698, 145.203, 167.672)), (' B 106  ILE HD11', ' B 120  ILE HD13', -0.494, (157.122, 115.658, 117.498)), (' B 154  TRP  HB3', ' B 188  ALA  HB1', -0.494, (146.428, 100.007, 117.29)), (" F  11    C  H2'", ' F  12    G  H8 ', -0.494, (131.488, 157.025, 179.513)), (' D 135  TYR  O  ', ' D 139  LYS  N  ', -0.494, (100.607, 79.458, 142.613)), (' C  32  CYS  SG ', ' C  58  VAL HG11', -0.493, (118.1, 100.882, 138.382)), (' D 132  ILE HG21', ' D 138  TYR  HB2', -0.493, (104.935, 80.624, 140.416)), (" F  11    C  H2'", ' F  12    G  C8 ', -0.492, (130.86, 156.696, 179.195)), (' B  40  LYS  HA ', " F  17    A  H5'", -0.49, (149.387, 159.046, 195.483)), (' A 684  ASP  OD1', ' A 685  ALA  N  ', -0.489, (139.784, 134.823, 134.137)), (' A 356  ASN HD21', ' A 535  VAL  H  ', -0.488, (155.668, 132.343, 125.048)), (' B  43  ASN HD22', ' F  17    A  P  ', -0.485, (146.841, 158.125, 193.854)), (' D 168  GLN  N  ', ' D 171  GLU  OE1', -0.482, (105.696, 72.721, 131.335)), (' F  -6    C  C6 ', " F  -7    U  H2'", -0.481, (135.917, 118.717, 143.645)), (' C  56  LEU HD21', ' D 107  ILE HD11', -0.481, (108.594, 98.974, 146.563)), (' A 899  MET  HE3', ' D  67  MET  HE3', -0.48, (124.024, 123.228, 175.612)), (" F   9    A  H2'", ' F  10    U  C6 ', -0.48, (136.11, 156.785, 171.767)), (' A 312  ASN  O  ', ' A 315  VAL HG12', -0.48, (139.289, 136.897, 110.969)), (' A 466  ILE  O  ', ' A 470  LEU  HG ', -0.477, (136.629, 148.099, 112.313)), (' A 119  LEU  C  ', ' A 119  LEU HD12', -0.477, (120.374, 140.455, 86.249)), (" F  10    U  H2'", ' F  11    C  C6 ', -0.476, (132.686, 157.793, 174.9)), (' A  76  THR  OG1', ' A  77  PHE  N  ', -0.474, (119.868, 163.418, 80.228)), (' A 653  TYR  O  ', ' A 657  ASN  ND2', -0.472, (151.487, 136.863, 127.437)), (' D 159  VAL HG13', ' D 186  VAL HG12', -0.467, (107.229, 80.521, 134.806)), (' A 254  GLU  OE2', ' A 286  TYR  OH ', -0.465, (140.973, 131.546, 96.517)), (' A 170  ASP  OD2', ' A 173  ARG  NH2', -0.465, (121.47, 119.806, 104.62)), (' G -14    G  C8 ', " G -15    C  H2'", -0.465, (145.979, 153.467, 182.39)), (' D  43  ASN  HB3', " F  14    C  O3'", -0.462, (134.782, 154.542, 192.206)), (' A 689  TYR  O  ', ' A 693  VAL HG23', -0.46, (133.62, 143.072, 130.273)), (' B  43  ASN  ND2', ' F  17    A  H8 ', -0.456, (147.376, 158.573, 192.049)), (' D  51  ARG  NH2', ' G -13    A  N3 ', -0.456, (138.288, 147.879, 186.181)), (' A 388  LEU HD22', ' A 672  SER  HB3', -0.455, (141.798, 112.285, 125.586)), (' A 605  VAL HG22', ' A 756  MET  HB2', -0.453, (119.993, 149.611, 134.53)), (' B  31  SER  OG ', ' B  33  VAL HG22', -0.453, (149.622, 164.34, 209.867)), (' A 633  MET  HB3', ' A 633  MET  HE3', -0.452, (135.167, 142.372, 121.649)), (' F  -1    G  O6 ', ' F  -2    U  C4 ', -0.452, (130.298, 135.845, 147.081)), (' A  32  TYR  HA ', ' A  48  PHE  O  ', -0.451, (113.252, 149.08, 98.055)), (' F  11    C  C2 ', ' F  12    G  C8 ', -0.447, (131.919, 155.934, 178.932)), (' A 358  ASP  H  ', ' A 534  ASN HD21', -0.446, (160.929, 134.023, 126.955)), (' A 527  LEU  O  ', ' A 531  THR HG23', -0.446, (154.908, 135.738, 134.368)), (' A 331  ARG HH21', ' B 114  CYS  HB2', -0.445, (161.376, 126.555, 116.974)), (' B  40  LYS  O  ', ' B  44  VAL HG23', -0.444, (152.032, 157.99, 194.784)), (' A  58  GLU  OE1', ' A  68  SER  OG ', -0.444, (118.735, 134.903, 80.482)), (' A  29  ASP  HA ', ' A  51  THR  HA ', -0.443, (110.581, 150.765, 90.315)), (' A 268  TRP  CD1', ' A 322  PRO  HD3', -0.442, (146.973, 122.9, 105.351)), (' A 759  SER  O  ', " G   4    A  O2'", -0.442, (126.02, 137.313, 133.944)), (' A 858  ARG  HG3', " G   1    C  H5'", -0.44, (122.045, 126.966, 153.923)), (" F   8    C  H2'", ' F   9    A  C8 ', -0.44, (139.213, 154.259, 169.32)), (' A 519  MET  HE2', ' A 523  ASP  HB3', -0.439, (157.311, 132.796, 142.787)), (' B 132  ILE HD11', ' B 142  CYS  SG ', -0.439, (137.03, 101.853, 117.541)), (' F  18    C  N3 ', ' F  19    A  N6 ', -0.437, (144.816, 166.824, 190.282)), (' B 132  ILE HG21', ' B 138  TYR  HB2', -0.435, (132.619, 100.786, 117.838)), (' A 804  ASP  OD2', ' A 807  LYS  NZ ', -0.435, (101.432, 148.718, 135.834)), (' G  -7    U  C6 ', " G  -8    G  H2'", -0.434, (131.41, 151.135, 165.121)), (' G -17    U  C6 ', " G -18    G  H2'", -0.434, (141.821, 166.657, 184.231)), (' A 415  PHE  CE2', ' D  94  MET  HE1', -0.43, (110.175, 112.75, 151.293)), (' A 583  ARG  NH2', ' A 590  GLY  O  ', -0.428, (128.205, 147.365, 145.565)), (' A 531  THR  OG1', ' A 654  ARG  NH1', -0.428, (151.254, 137.477, 132.456)), (' G  -5    C  C6 ', " G  -6    U  H2'", -0.427, (137.651, 146.092, 159.421)), (' A 467  ARG  HA ', ' A 467  ARG  HD3', -0.426, (136.922, 149.404, 109.91)), (' A 472  VAL  O  ', ' A 476  VAL HG23', -0.425, (131.844, 149.716, 121.609)), (' A  55  ARG  HG2', ' A  71  VAL HG22', -0.425, (116.279, 144.25, 85.26)), (" F   8    C  H2'", ' F   9    A  H8 ', -0.425, (139.415, 154.392, 169.497)), (' F  -1    G  C6 ', ' F  -2    U  O4 ', -0.424, (129.651, 135.756, 147.488)), (' C  53  VAL HG13', ' D 106  ILE  CD1', -0.424, (106.122, 98.212, 139.299)), (" F  15    G  H3'", ' F  16    A  H8 ', -0.424, (140.738, 155.424, 192.443)), (' F  19    A  C6 ', ' G -18    G  N2 ', -0.423, (144.943, 168.171, 188.369)), (' D  37  LYS  HG3', ' D  38  LEU  N  ', -0.421, (130.392, 158.72, 201.852)), (' D 120  ILE HD11', ' D 149  TYR  HE2', -0.42, (107.489, 93.541, 138.418)), (' B  33  VAL HG12', " G -23    A  H4'", -0.42, (147.428, 167.436, 206.806)), (' A 718  LYS  HB3', ' A 718  LYS  HE3', -0.419, (117.152, 169.512, 112.424)), (' B  39  LYS  HA ', ' B  39  LYS  HD3', -0.418, (148.345, 155.128, 201.057)), (' G -23    A  C8 ', " G -24    G  H2'", -0.417, (148.627, 171.098, 203.882)), (' A 532  LYS  HB3', ' A 650  HIS  HD2', -0.416, (155.633, 142.53, 129.725)), (' A  97  ALA  O  ', ' A  99  HIS  HD2', -0.416, (128.002, 145.993, 80.936)), (' A 478  LYS  HB3', ' A 478  LYS  HE3', -0.415, (131.773, 157.785, 126.362)), (' D  33  VAL HG13', ' D  36  LYS  HE2', -0.414, (134.4, 164.67, 201.637)), (' A  30  VAL HG22', ' A  50  LYS  HB3', -0.413, (114.004, 148.587, 92.009)), (' A 166  VAL HG13', ' A 458  TYR  CZ ', -0.413, (123.405, 123.94, 119.98)), (' C  27  LYS  O  ', ' C  31  GLN  HG3', -0.413, (120.758, 101.621, 132.189)), (' A 569  ARG  O  ', ' A 573  GLN  HB2', -0.412, (144.236, 141.548, 140.124)), (' C  36  HIS  HD2', ' C  37  ASN  OD1', -0.412, (117.309, 112.815, 137.585)), (' D 134  ASP  OD1', ' D 135  TYR  N  ', -0.412, (104.432, 77.252, 146.133)), (' A 609  VAL HG21', ' A 765  CYS  O  ', -0.411, (115.682, 154.34, 128.796)), (' C  53  VAL HG13', ' D 106  ILE HD11', -0.41, (106.044, 98.062, 139.048)), (' A  72  VAL HG22', ' A 115  SER  HB2', -0.41, (117.723, 147.633, 78.072)), (' D 108  ASN  O  ', ' D 111  ARG  HG2', -0.409, (105.435, 90.581, 149.348)), (' A 466  ILE  HA ', ' A 466  ILE HD12', -0.409, (136.044, 144.981, 112.73)), (' D  58  LYS  HB3', ' D  58  LYS  HE3', -0.409, (135.602, 135.157, 181.339)), (" F   9    A  H2'", ' F  10    U  H6 ', -0.409, (136.046, 157.343, 171.919)), (" F   6    A  H2'", ' F   7    A  H8 ', -0.409, (142.074, 145.394, 168.185)), (' B  46  LYS  HB2', ' B  46  LYS  HE3', -0.408, (150.003, 150.143, 194.555)), (' A 171  ILE  HA ', ' A 171  ILE HD12', -0.408, (120.892, 125.389, 106.236)), (' A 304  ASP  HB2', ' A 636  LEU HD13', -0.408, (143.226, 146.267, 120.901)), (' A 120  THR HG21', ' A 149  TYR  HH ', -0.408, (120.664, 135.635, 91.945)), (' C  28  LEU  HA ', ' C  28  LEU HD12', -0.407, (120.176, 99.619, 134.546)), (' A 924  MET  HB2', ' A 924  MET  HE2', -0.407, (117.474, 141.854, 157.033)), (' A 223  ILE  HA ', ' A 223  ILE HD13', -0.405, (134.23, 160.911, 86.619)), (' A 531  THR HG22', ' A 536  ILE HD12', -0.405, (153.32, 133.17, 132.535)), (' A 225  THR HG22', ' A 226  THR  N  ', -0.404, (143.739, 160.355, 85.726)), (' A 239  SER  OG ', ' A 467  ARG  HG2', -0.404, (135.545, 148.292, 106.89)), (' A 363  SER  OG ', ' A 364  SER  N  ', -0.404, (169.674, 124.694, 133.707)), (" F  10    U  H2'", ' F  11    C  H6 ', -0.404, (132.876, 158.139, 175.561)), (' A 590  GLY  HA2', " F  -2    U  O3'", -0.401, (129.822, 143.64, 144.202)), (' A  10  ARG  HA ', ' A  10  ARG  HD2', -0.4, (115.819, 147.21, 68.47)), (' F  19    A  C6 ', ' G -18    G  C2 ', -0.4, (144.25, 168.391, 188.312))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
