# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('E', ' 146 ', 'PRO', None, (219.742, 141.046, 278.73))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' E 152  MET  O  ', ' E 161  ARG  NH1', -0.554, (208.373, 139.204, 286.415)), (' E  29  LEU  O  ', ' E  33  ASN  ND2', -0.509, (220.02, 180.332, 258.808)), (' E  20  THR HG23', ' E  23  GLU  H  ', -0.503, (218.744, 194.043, 260.364)), (' E 201  ASP  OD2', ' E 219  ARG  NH1', -0.488, (212.096, 178.516, 284.001)), (' E  91  LEU HD11', ' E 212  VAL HG22', -0.487, (204.56, 183.687, 268.22)), (' E 169  ARG HH22', ' E 271  TRP  HA ', -0.485, (211.959, 149.549, 289.293)), (' E 183  TYR  OH ', ' E 509  ASP  OD1', -0.483, (220.007, 165.181, 284.538)), (' E 261  CYS  HB2', ' E 488  VAL  HB ', -0.475, (201.418, 149.661, 298.572)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.474, (229.217, 178.491, 230.894)), (' E 117  ASN  O  ', ' E 121  ASN  ND2', -0.47, (230.573, 162.626, 281.484)), (' E 260  GLY  HA3', ' E 612  PRO  HD3', -0.467, (197.249, 146.87, 300.865)), (' E 292  ASP  HA ', ' E 366  MET  HE2', -0.463, (199.214, 139.043, 266.342)), (' E 177  ARG  HB2', ' E 498  CYS  HB2', -0.459, (221.094, 156.341, 296.094)), (' B 350  VAL HG22', ' B 422  ASN  HB3', -0.459, (225.822, 180.709, 241.313)), (' E 392  LEU HD13', ' E 563  SER  HA ', -0.453, (210.188, 177.598, 263.462)), (' E 555  PHE  HA ', ' E 558  LEU  HB2', -0.453, (202.483, 166.994, 258.492)), (' E 297  MET  HB3', ' E 302  TRP  HB2', -0.447, (204.923, 137.982, 257.16)), (' E 529  LEU HD11', ' E 554  LEU HD13', -0.445, (197.893, 162.749, 262.071)), (' E 156  LEU HD11', ' E 281  LEU HD21', -0.445, (201.605, 134.616, 286.627)), (' E 455  MET  HG2', ' E 480  MET  HE2', -0.443, (205.333, 160.916, 293.24)), (' E 474  MET  HE1', ' E 500  PRO  HD2', -0.442, (215.668, 157.143, 295.429)), (' B 418  ILE  HA ', ' B 422  ASN  HB2', -0.44, (223.692, 181.456, 242.724)), (' E 457  GLU  HG2', ' E 512  PHE  HB3', -0.439, (209.529, 162.162, 284.042)), (' E 535  HIS  NE2', ' E 538  PRO  O  ', -0.436, (186.158, 153.887, 265.408)), (' B 518  LEU HD23', ' B 520  ALA  H  ', -0.429, (224.865, 191.236, 214.535)), (' E 610  TRP  HE3', ' E 614  ALA  HB3', -0.425, (204.33, 146.614, 306.669)), (' B 411  ALA  HB3', ' B 414  GLN  HG3', -0.424, (213.215, 180.351, 237.305)), (' B 396  TYR  HB2', ' B 514  SER  HB3', -0.424, (224.133, 182.45, 225.956)), (' E 423  LEU  HA ', ' E 423  LEU HD23', -0.415, (198.435, 138.621, 256.272)), (' E 527  GLU  OE2', ' E 586  ASN  ND2', -0.411, (187.273, 160.493, 271.599)), (' E 252  TYR  HB3', ' E 255  TYR  HD2', -0.411, (201.605, 135.998, 295.954)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.407, (224.504, 184.66, 213.859)), (' B 336  CYS  HA ', ' B 337  PRO  HD3', -0.407, (230.92, 173.298, 216.931)), (' E 477  TRP  CE2', ' E 500  PRO  HG3', -0.401, (212.055, 157.296, 293.247)), (' B 484  LYS  HD2', ' B 490  PHE  HB2', -0.401, (235.531, 184.036, 255.457))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
