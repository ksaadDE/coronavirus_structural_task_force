# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 478  ASN  HA ', ' B 483  VAL HG12', -0.839, (143.436, 132.38, 69.836)), (' B 302  GLU  OE1', ' B 422  ASN  ND2', -0.681, (145.212, 133.844, 103.763)), (' B 368  TYR  HD1', ' B 389  VAL HG21', -0.668, (135.333, 157.04, 101.185)), (' B   1  ALA  N  ', ' D  62    U  OP1', -0.63, (132.608, 139.137, 158.895)), (' B  95  HIS  CE1', ' B 141  PRO  HA ', -0.607, (117.344, 134.363, 140.439)), (' B 405  VAL  O  ', ' B 410  ASN  ND2', -0.6, (132.718, 136.034, 105.351)), (' A  33  SER  HB2', ' B  67  ASN HD22', -0.598, (157.315, 125.819, 140.196)), (' B 373  HIS  HA ', ' B 376  LYS  HG2', -0.588, (135.171, 165.988, 98.9)), (' B 278  ARG  NH1', ' B 412  PRO  O  ', -0.574, (133.939, 136.958, 115.337)), (' B 171  SER  OG ', ' B 227  TRP  O  ', -0.572, (137.631, 118.262, 117.598)), (' A  98  GLN  O  ', ' A 123  TRP  NE1', -0.571, (150.794, 111.114, 160.608)), (' B 242  ILE HD11', ' B 247  TRP  HZ2', -0.571, (141.253, 140.89, 125.72)), (' B 391  ARG  NH2', ' B 434  SER  OG ', -0.57, (123.678, 154.511, 99.972)), (' B 403  THR HG21', ' B 430  ALA  HA ', -0.57, (129.645, 143.565, 105.875)), (' B  80  ILE  O  ', ' B 296  TYR  OH ', -0.558, (145.248, 138.628, 116.292)), (' B  52  ARG  NH1', ' B 125  VAL HG11', -0.557, (123.721, 116.927, 148.604)), (' B 321  LEU HD11', ' B 329  LEU HD13', -0.556, (146.51, 153.806, 87.048)), (' B 495  LEU  HG ', ' B 499  ASN HD21', -0.539, (138.37, 130.173, 85.891)), (" D  65    A  H2'", ' D  66    A  H8 ', -0.535, (121.871, 151.634, 150.909)), (' A  45  LEU  HB2', ' B  38  LEU  HB3', -0.533, (143.501, 122.919, 170.618)), (" D  51    U  H2'", ' D  52    A  H8 ', -0.526, (143.566, 156.228, 183.901)), (' B 355  PRO  HA ', ' B 363  ILE HD11', -0.524, (151.88, 157.112, 105.297)), (" D  59    U  H2'", ' D  60    A  H8 ', -0.513, (140.455, 148.304, 160.638)), (' B 323  ALA  O  ', ' B 325  LYS  NZ ', -0.507, (141.736, 154.166, 76.252)), (' B 283  HIS  CE1', ' B 287  VAL HG11', -0.502, (134.701, 149.558, 116.54)), (' B 355  PRO  HD3', ' B 365  GLU  HG3', -0.5, (148.204, 160.695, 107.749)), (" T  14    U  H2'", ' T  15    A  H8 ', -0.487, (127.344, 155.044, 161.169)), (' B 324  ASP  OD2', ' B 511  TYR  OH ', -0.484, (138.919, 152.598, 82.923)), (' B 219  THR HG21', ' B 235  TYR  CE1', -0.482, (135.846, 114.381, 133.482)), (" D  56    A  H2'", ' D  57    G  H8 ', -0.481, (140.904, 161.674, 164.933)), (' B 352  ASP  OD1', ' B 353  ALA  N  ', -0.478, (146.143, 155.943, 103.814)), (" D  65    A  H2'", ' D  66    A  C8 ', -0.474, (122.216, 152.02, 150.926)), (' B 359  LYS  NZ ', ' B 363  ILE  O  ', -0.471, (152.631, 160.48, 104.043)), (' B 402  ASP  OD2', ' B 404  ARG  NH2', -0.469, (128.176, 140.032, 98.576)), (" D  63    A  H2'", ' D  64    A  C8 ', -0.468, (123.557, 146.983, 159.047)), (' B 241  MET  HB3', ' B 241  MET  HE2', -0.459, (138.387, 131.049, 129.871)), (' B 218  SER  HB2', ' B 233  PHE  CG ', -0.458, (138.627, 111.949, 125.666)), (' B 495  LEU  O  ', ' B 499  ASN  ND2', -0.456, (139.255, 131.236, 87.682)), (' A  44  MET  HE1', ' B  20  PRO  HB3', -0.456, (138.586, 118.822, 165.734)), (" D  55    A  H2'", ' D  56    A  H8 ', -0.455, (138.474, 163.458, 169.328)), (' B 163  ARG  NH1', ' B 197  TYR  O  ', -0.454, (131.732, 118.752, 134.933)), (" D  59    U  H2'", ' D  60    A  C8 ', -0.451, (140.531, 148.156, 161.136)), (" D  67    U  H2'", ' D  68    C  C6 ', -0.451, (125.721, 150.629, 141.844)), (" D  64    A  H2'", ' D  65    A  H8 ', -0.447, (121.808, 149.323, 155.326)), (' B 219  THR  CG2', ' B 235  TYR  CD1', -0.444, (137.015, 114.375, 132.841)), (" D  51    U  H2'", ' D  52    A  C8 ', -0.444, (143.872, 156.681, 184.127)), (' B 153  MET  HB3', ' B 153  MET  HE2', -0.443, (114.041, 123.855, 137.422)), (' A  31  LEU  HA ', ' A  31  LEU HD23', -0.441, (154.004, 124.908, 147.827)), (' B 234  ASP  N  ', ' B 234  ASP  OD1', -0.441, (135.292, 113.596, 128.054)), (" T  17    U  H2'", ' T  18    A  H8 ', -0.437, (135.16, 147.78, 170.113)), (" T  18    A  H2'", ' T  19    G  C8 ', -0.437, (140.308, 148.166, 169.941)), (' B 127  THR  OG1', ' B 130  ASN  OD1', -0.437, (129.702, 112.112, 149.584)), (' B 214  ALA  HB1', ' B 224  TYR  HB3', -0.435, (145.59, 116.036, 125.683)), (' B 370  TYR  CE2', ' B 391  ARG  HD2', -0.435, (126.865, 158.189, 98.313)), (' A  80  HIS  HB2', ' B  57  MET  HE1', -0.434, (134.388, 121.685, 145.934)), (" D  64    A  H2'", ' D  65    A  C8 ', -0.432, (122.044, 149.832, 155.476)), (' B 188  HIS  HD2', ' B 192  LEU HD12', -0.424, (137.197, 134.008, 137.46)), (' B  10  ASP  OD2', ' B  53  ARG  HD3', -0.421, (128.324, 122.552, 155.338)), (' B 368  TYR  CD1', ' B 389  VAL HG21', -0.42, (135.612, 157.452, 100.942)), (" D  56    A  H2'", ' D  57    G  C8 ', -0.419, (141.323, 161.224, 165.14)), (' B 207  CYS  SG ', ' B 210  CYS  HB3', -0.418, (146.954, 113.737, 119.266)), (' B 515  ASP  OD2', ' B 518  ASN  N  ', -0.417, (136.053, 149.388, 74.85)), (' B 249  PHE  HZ ', ' B 284  GLU  HG3', -0.416, (135.453, 147.374, 124.37)), (' B 312  VAL HG11', ' B 501  MET  SD ', -0.415, (141.66, 139.3, 92.212)), (' B 370  TYR  CG ', ' B 391  ARG  HB3', -0.415, (129.254, 157.408, 99.416)), (' B 169  MET  HB3', ' B 169  MET  HE2', -0.415, (130.646, 123.14, 121.964)), (' A  47  THR HG23', ' A  49  THR  H  ', -0.414, (148.313, 113.374, 175.372)), (" T  25    U  H2'", ' T  26    A  H8 ', -0.411, (143.296, 167.036, 184.356)), (' B 219  THR HG23', ' B 235  TYR  CD1', -0.411, (136.654, 114.591, 132.526)), (' B 390  ASP  N  ', ' B 390  ASP  OD1', -0.409, (132.008, 155.371, 103.242)), (' B 103  THR  O  ', ' B 103  THR HG23', -0.408, (123.857, 127.958, 144.545)), (' B 192  LEU  HA ', ' B 192  LEU HD23', -0.408, (135.834, 129.867, 135.207)), (" D  67    U  H2'", ' D  68    C  H6 ', -0.406, (125.667, 151.063, 141.876)), (" T  19    G  H2'", ' T  20    C  C6 ', -0.406, (144.649, 149.986, 169.631)), (' B  61  LYS  HB3', ' B  61  LYS  HE2', -0.405, (142.381, 135.059, 142.811)), (" T  17    U  H2'", ' T  18    A  C8 ', -0.403, (135.149, 147.747, 169.918)), (" T  18    A  H2'", ' T  19    G  H8 ', -0.403, (140.184, 147.817, 170.402)), (' B  11  CYS  SG ', ' B  56  SER  HB2', -0.401, (127.178, 128.289, 148.523)), (' B  85  ALA  HB2', ' B 178  SER  HB3', -0.4, (141.574, 129.159, 117.819))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
