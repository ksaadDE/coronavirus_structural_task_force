# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('D', ' 151 ', 'PRO', None, (195.201, 194.56000000000006, 274.906)), ('D', ' 153 ', 'PRO', None, (201.062, 192.445, 275.8220000000001)), ('E', '   8 ', 'PRO', None, (211.063, 163.27900000000005, 271.937)), ('E', ' 141 ', 'PRO', None, (207.323, 168.216, 292.133)), ('F', ' 151 ', 'PRO', None, (206.609, 211.45200000000003, 278.7360000000001)), ('F', ' 153 ', 'PRO', None, (205.059, 217.46600000000007, 278.798)), ('G', '   8 ', 'PRO', None, (224.075, 240.99400000000003, 271.4530000000001)), ('G', ' 141 ', 'PRO', None, (221.70800000000006, 238.35100000000006, 292.1430000000001))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B  46  SER  HA ', ' B 279  TYR  O  ', -0.717, (231.481, 182.696, 173.837)), (' A 193  VAL  HB ', ' A 204  TYR  HB2', -0.668, (171.601, 169.709, 192.424)), (' A 105  ILE  HB ', ' A 239  GLN  HB2', -0.651, (172.504, 157.914, 205.446)), (' C  51  THR  O  ', ' C 274  THR  HA ', -0.649, (187.787, 227.074, 183.117)), (' C  46  SER  HA ', ' C 279  TYR  O  ', -0.623, (198.6, 235.742, 173.089)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.62, (235.877, 186.624, 203.182)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.602, (256.958, 196.073, 190.891)), (' B 357  ARG  NH2', ' C 169  GLU  OE1', -0.593, (195.745, 242.651, 214.838)), (' F  90  THR HG23', ' F 114  THR  HA ', -0.59, (210.281, 214.799, 271.077)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.59, (198.361, 166.121, 145.09)), (' A  46  SER  HA ', ' A 279  TYR  O  ', -0.583, (169.522, 181.587, 175.187)), (' C 659  SER  HB3', ' C 698  SER  HB3', -0.583, (170.223, 216.805, 145.365)), (' A 570  ALA  HB1', ' B 963  VAL HG11', -0.579, (215.735, 183.818, 176.264)), (' D 196  GLN  NE2', ' D 197  THR  O  ', -0.572, (210.003, 199.878, 299.048)), (' D  90  THR HG23', ' D 114  THR  HA ', -0.564, (197.169, 189.181, 267.783)), (' D  11  LEU  HB2', ' D 151  PRO  HG3', -0.555, (195.91, 194.746, 270.895)), (' A 127  VAL HG21', ' A1302  NAG  H62', -0.554, (159.043, 165.431, 210.754)), (' A  94  SER  HB2', ' A 190  ARG  HB2', -0.55, (164.438, 159.963, 192.146)), (' C 127  VAL HG21', ' C1302  NAG  H62', -0.549, (191.194, 252.727, 210.06)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.541, (233.925, 198.251, 174.88)), (' C 226  LEU  HG ', ' C 227  VAL HG23', -0.54, (194.766, 244.426, 197.467)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.537, (163.035, 251.522, 198.022)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.536, (248.105, 179.542, 211.043)), (' E  39  LYS  HD3', ' E  84  ALA  HB2', -0.534, (215.893, 177.841, 276.913)), (' D  40  ALA  HB3', ' D  43  LYS  HB2', -0.533, (201.452, 178.677, 267.358)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.533, (172.362, 141.689, 197.305)), (' B 762  GLN  OE1', ' B 765  ARG  NH1', -0.531, (189.551, 188.059, 170.948)), (' A 189  LEU  HB3', ' A 208  THR  HB ', -0.531, (162.222, 162.498, 185.452)), (' B 105  ILE  O  ', ' B 238  PHE  HA ', -0.527, (244.726, 195.655, 205.087)), (' B 193  VAL HG23', ' B 223  LEU HD22', -0.527, (240.786, 189.971, 190.727)), (' G  83  VAL HG11', ' G 166  GLN  HB3', -0.526, (214.162, 237.091, 283.48)), (' C 357  ARG  NH1', ' C 396  TYR  OH ', -0.522, (173.129, 181.057, 207.474)), (' G  39  LYS  HD3', ' G  84  ALA  HB2', -0.521, (209.523, 238.08, 276.682)), (' B 276  LEU  HB3', ' B 289  VAL  HB ', -0.521, (232.086, 194.821, 175.985)), (' B  26  PRO  HB3', ' B  65  PHE  HE1', -0.52, (253.272, 203.801, 195.972)), (' F  11  LEU  HB2', ' F 151  PRO  HG3', -0.518, (205.896, 211.286, 274.72)), (' F  40  ALA  HB3', ' F  43  LYS  HB2', -0.518, (216.531, 224.05, 269.486)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.515, (189.676, 190.417, 131.311)), (' A 474  GLN  NE2', ' A 478  THR  O  ', -0.513, (234.001, 196.7, 255.813)), (' E 120  PRO  HD3', ' E 132  VAL HG22', -0.513, (189.852, 186.759, 298.364)), (' A 756  TYR  OH ', ' A 994  ASP  OD1', -0.512, (194.978, 204.771, 188.689)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.511, (164.013, 171.204, 205.148)), (' B  46  SER  CA ', ' B 279  TYR  O  ', -0.511, (230.915, 181.926, 174.075)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.508, (185.054, 166.346, 175.403)), (' B 474  GLN  NE2', ' B 478  THR  O  ', -0.508, (183.578, 239.115, 255.322)), (' D 105  ASP  N  ', ' D 105  ASP  OD1', -0.505, (221.763, 183.68, 262.305)), (' B  93  ALA  HB3', ' B 266  TYR  HB2', -0.505, (249.53, 194.753, 190.134)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.504, (226.45, 177.408, 218.763)), (' C 143  VAL  HA ', ' C 154  GLU  HA ', -0.503, (181.514, 263.008, 206.127)), (' B1048  HIS  HA ', ' B1066  THR HG22', -0.499, (213.12, 195.567, 131.549)), (' A 566  GLY  N  ', ' A 575  ALA  O  ', -0.498, (223.957, 175.851, 184.334)), (' B  94  SER  HB3', ' B 190  ARG  HB2', -0.497, (251.144, 187.791, 192.984)), (' A 192  PHE  HA ', ' A 204  TYR  O  ', -0.497, (168.423, 167.417, 193.327)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.494, (196.839, 213.384, 131.623)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.494, (182.922, 230.488, 174.609)), (' C 394  ASN  ND2', ' C 516  GLU  OE1', -0.494, (175.331, 183.353, 201.822)), (' B 821  LEU HD11', ' B 939  SER  HB2', -0.491, (227.075, 183.179, 144.283)), (' C  93  ALA  HB3', ' C 266  TYR  HB2', -0.488, (178.098, 245.536, 189.472)), (' D 202  VAL  O  ', ' D 210  LYS  HA ', -0.486, (202.183, 200.898, 283.957)), (' C 821  LEU HD11', ' C 939  SER  HB3', -0.484, (200.023, 231.854, 144.416)), (' C  27  ALA  HB3', ' C  64  TRP  HB3', -0.484, (168.583, 246.617, 189.231)), (' C  46  SER  CA ', ' C 279  TYR  O  ', -0.483, (198.92, 235.726, 173.5)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.482, (236.018, 203.668, 175.628)), (' G  48  ILE HG22', ' G  54  ARG  HA ', -0.481, (207.387, 247.597, 264.835)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.481, (177.496, 229.083, 174.974)), (' A 669  GLY  HA2', ' A 697  MET  HE3', -0.481, (201.928, 171.455, 152.386)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.48, (196.573, 232.916, 187.009)), (' A 926  GLN  NE2', ' I   1  NAG  O6 ', -0.479, (181.834, 180.274, 122.969)), (' B 442  ASP  O  ', ' B 448  ASN  ND2', -0.479, (212.11, 251.227, 239.163)), (' C 128  ILE HD13', ' C 170  TYR  HD2', -0.478, (194.874, 245.393, 204.71)), (' B  27  ALA  HB3', ' B  64  TRP  HB3', -0.476, (255.084, 202.397, 190.562)), (' D 175  GLN  HA ', ' E 160  GLN HE22', -0.475, (189.385, 182.957, 282.702)), (' C 278  LYS  HE3', ' C 287  ASP  HB2', -0.474, (190.684, 237.165, 173.114)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.474, (172.41, 145.67, 196.387)), (' A 139  PRO  HB3', ' A 159  VAL  HA ', -0.474, (167.388, 154.959, 210.32)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.473, (171.885, 183.899, 143.739)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.472, (173.754, 149.627, 188.651)), (' A  48  LEU  HB3', ' A 276  LEU HD11', -0.47, (177.937, 179.639, 175.61)), (' C  48  LEU  HB3', ' C 276  LEU HD11', -0.47, (192.446, 229.187, 174.518)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.469, (219.669, 190.468, 124.288)), (' B 125  ASN HD22', ' B 171  VAL HG13', -0.469, (246.262, 176.302, 208.282)), (' G 120  PRO  HD3', ' G 132  VAL HG22', -0.468, (215.592, 214.67, 302.406)), (' A 125  ASN HD22', ' A 171  VAL HG13', -0.468, (157.057, 169.353, 208.404)), (' B 328  ARG HH21', ' B 532  ASN  HA ', -0.467, (223.088, 237.896, 194.099)), (' C 916  LEU HD22', ' C 923  ILE HD13', -0.467, (199.91, 219.72, 119.964)), (' C 156  GLU  OE2', ' C 158  ARG  NH1', -0.467, (175.072, 259.264, 212.257)), (' E 128  GLY  HA2', ' E 183  LYS  HD3', -0.466, (180.539, 195.019, 294.051)), (' C 189  LEU  HB3', ' C 208  THR  HB ', -0.466, (185.025, 250.902, 185.076)), (' A 318  PHE  O  ', ' A 592  PHE  HA ', -0.462, (203.533, 170.477, 176.433)), (' B  36  VAL HG23', ' B 222  ALA  HA ', -0.461, (239.68, 187.987, 184.045)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.461, (167.056, 249.798, 197.384)), (' B 318  PHE  O  ', ' B 592  PHE  HA ', -0.461, (222.549, 216.667, 176.925)), (' B 565  PHE  HD1', ' B 576  VAL HG23', -0.46, (209.148, 232.732, 188.492)), (' A 164  ASN  OD1', ' A 165  ASN  N  ', -0.46, (172.028, 165.854, 220.989)), (' D 172  ALA  HB2', ' D 182  LEU HD23', -0.46, (199.193, 188.392, 282.053)), (' B 903  ALA  HB1', ' B 913  GLN  HG2', -0.459, (209.633, 190.041, 116.61)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.457, (213.167, 193.429, 100.135)), (' A 418  ILE  HA ', ' A 422  ASN  HB2', -0.457, (222.541, 180.814, 240.5)), (' E 170  ASP  N  ', ' E 170  ASP  OD1', -0.457, (215.936, 177.629, 290.579)), (' C 142  GLY  HA3', ' C 156  GLU  HB3', -0.456, (178.447, 260.151, 208.493)), (' B 566  GLY  N  ', ' B 575  ALA  O  ', -0.456, (207.469, 232.707, 184.304)), (' B 191  GLU  O  ', ' B 205  SER  HA ', -0.455, (243.578, 186.246, 192.125)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.454, (181.807, 170.362, 175.096)), (' A  46  SER  CA ', ' A 279  TYR  O  ', -0.453, (169.147, 182.344, 175.387)), (' C 334  ASN  N  ', ' C 334  ASN  OD1', -0.453, (161.491, 192.858, 212.248)), (' A 103  GLY  HA3', ' A 119  ILE  O  ', -0.452, (165.26, 161.562, 204.467)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.451, (167.883, 151.252, 189.658)), (' D   2  VAL  HA ', ' D  25  SER  O  ', -0.451, (223.978, 194.106, 265.222)), (' E  48  ILE HG22', ' E  54  ARG  HA ', -0.449, (226.711, 172.977, 266.622)), (' A 175  PHE  O  ', ' A 207  HIS  NE2', -0.448, (159.396, 166.77, 194.293)), (' B 328  ARG HH21', ' B 533  LEU  H  ', -0.448, (222.456, 238.07, 193.03)), (' F  82  MET  HE2', ' F  85  LEU HD21', -0.448, (207.658, 214.434, 262.972)), (' B  39  PRO  HG3', ' B  55  PHE  HZ ', -0.447, (231.562, 190.711, 186.387)), (' F 105  ASP  N  ', ' F 105  ASP  OD1', -0.447, (201.186, 237.167, 262.124)), (' A 903  ALA  HB1', ' A 913  GLN  HG2', -0.446, (186.248, 196.419, 116.683)), (' G 170  ASP  N  ', ' G 170  ASP  OD1', -0.446, (209.033, 239.952, 290.15)), (' G 130  ALA  O  ', ' G 180  THR  HA ', -0.444, (217.673, 211.683, 296.68)), (' B 132  GLU  OE1', ' B 165  ASN  ND2', -0.444, (237.479, 191.818, 222.077)), (' D  82  MET  HE2', ' D  85  LEU HD21', -0.443, (199.324, 191.025, 259.801)), (' G  15  PRO  HD3', ' G 106  ILE HG23', -0.443, (215.913, 245.932, 285.253)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.443, (188.987, 194.419, 219.473)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.442, (172.867, 250.825, 189.838)), (' F  39  GLN  HB2', ' F  45  LEU HD23', -0.442, (210.588, 227.524, 268.164)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.441, (262.157, 204.732, 199.341)), (' C 365  TYR  H  ', ' C 388  ASN HD21', -0.441, (173.11, 199.633, 211.803)), (' C  16  VAL  HB ', ' C 140  PHE  HZ ', -0.441, (172.422, 256.045, 211.701)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.44, (230.418, 165.325, 241.906)), (' B 866  THR  H  ', ' B 869  MET  HE3', -0.439, (205.344, 173.454, 151.403)), (' B 189  LEU  HB3', ' B 208  THR  HB ', -0.438, (250.51, 185.759, 186.094)), (' C 102  ARG  NH2', ' C 154  GLU  OE1', -0.438, (185.344, 259.121, 203.918)), (' B 475  ALA  O  ', ' F  32  ASN  ND2', -0.437, (191.992, 234.275, 255.826)), (' B 206  LYS  NZ ', ' B 224  GLU  OE2', -0.436, (242.106, 180.075, 186.482)), (' D 210  LYS  HD2', ' F 121  LYS  HA ', -0.435, (205.209, 204.998, 282.331)), (' B  52  GLN  OE1', ' B 274  THR  OG1', -0.435, (226.748, 199.085, 183.798)), (' A 278  LYS  HB2', ' A 278  LYS  HE3', -0.435, (173.831, 176.736, 173.855)), (' B 418  ILE  HA ', ' B 422  ASN  HB2', -0.434, (203.574, 236.084, 239.877)), (' C 329  PHE  O  ', ' C 580  GLN  NE2', -0.434, (160.153, 196.181, 201.318)), (' C 756  TYR  OH ', ' C 994  ASP  OD2', -0.433, (206.488, 200.149, 189.135)), (' A 934  ILE  HA ', ' A 934  ILE HD13', -0.433, (179.319, 184.019, 138.722)), (' A 914  ASN  ND2', ' A1111  GLU  OE1', -0.432, (188.639, 188.254, 110.79)), (' C  34  ARG  NH2', ' C 221  SER  OG ', -0.432, (185.84, 245.718, 182.738)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.432, (187.927, 192.227, 100.295)), (' F  50  VAL HG21', ' F 101  ASP  HB3', -0.43, (204.451, 230.83, 253.721)), (' F  90  THR  HA ', ' F 113  VAL  O  ', -0.428, (209.695, 216.092, 269.399)), (' C  48  LEU HD23', ' C 276  LEU HD21', -0.427, (190.818, 229.533, 173.053)), (' C  52  GLN  HB2', ' C 274  THR HG22', -0.427, (187.483, 224.146, 184.189)), (' A  50  SER  HB2', ' A 304  LYS  HE3', -0.427, (181.927, 180.329, 178.448)), (' E  83  VAL HG11', ' E 166  GLN  HB3', -0.427, (211.747, 174.487, 283.488)), (' A 191  GLU  O  ', ' A 205  SER  HA ', -0.426, (166.647, 167.071, 192.168)), (' C 742  ILE  O  ', ' C1000  ARG  NH1', -0.425, (209.197, 211.905, 185.122)), (' A  97  LYS  HG2', ' A 186  PHE  HD1', -0.424, (159.15, 152.234, 189.444)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.424, (233.804, 204.395, 165.748)), (' A  31  SER  HB3', ' A  60  SER  H  ', -0.424, (178.334, 160.508, 182.98)), (' C 986  PRO  HA ', ' C 989  ALA  HB3', -0.424, (210.946, 207.679, 198.707)), (' A1029  MET  HB2', ' A1029  MET  HE2', -0.423, (185.901, 201.041, 142.195)), (' B 278  LYS  HB2', ' B 278  LYS  HE3', -0.422, (233.453, 188.745, 173.608)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.422, (258.829, 202.538, 198.387)), (' D  90  THR  HA ', ' D 113  VAL  O  ', -0.421, (198.649, 188.836, 266.407)), (' B 156  GLU  OE2', ' B 246  ARG  NH2', -0.421, (263.946, 191.207, 211.981)), (' A  80  ASP  O  ', ' A 265  TYR  OH ', -0.421, (171.147, 151.932, 198.764)), (' D  66  ARG  HD3', ' D  86  ARG HH21', -0.42, (195.043, 186.462, 253.063)), (' C 195  LYS  O  ', ' C 201  PHE  HA ', -0.419, (189.321, 235.24, 200.195)), (' D 201  ASN  ND2', ' D 212  ASP  OD1', -0.419, (206.31, 202.231, 288.801)), (' B 907  ASN  ND2', ' B 911  VAL  O  ', -0.418, (209.395, 194.802, 117.341)), (' C 776  LYS  NZ ', ' C 780  GLU  OE2', -0.418, (213.235, 201.767, 150.129)), (' F   2  VAL  HA ', ' F  25  SER  O  ', -0.416, (191.122, 233.776, 265.436)), (' C 328  ARG  HA ', ' C 328  ARG  HD2', -0.416, (160.697, 200.256, 197.979)), (' A 374  PHE  HA ', ' A 436  TRP  HB3', -0.416, (218.627, 164.861, 230.169)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.415, (199.299, 214.845, 100.241)), (' F 175  GLN  HA ', ' G 160  GLN HE22', -0.415, (219.232, 213.62, 286.316)), (' D 142  LEU HD11', ' D 198  TYR  HB2', -0.415, (206.453, 194.627, 298.116)), (' A 316  SER  OG ', ' A 317  ASN  N  ', -0.414, (195.888, 172.893, 176.001)), (' D  50  VAL HG21', ' D 101  ASP  HB3', -0.414, (215.831, 183.939, 253.183)), (' B 546  LEU HD11', ' B 573  THR HG21', -0.413, (207.086, 227.727, 188.1)), (' A 412  PRO  HG3', ' A 429  PHE  HB3', -0.413, (214.425, 183.27, 228.25)), (' B 327  VAL HG12', ' B 542  ASN  HB3', -0.412, (216.126, 228.694, 196.206)), (' D 190  SER  HA ', ' D 193  LEU  HB2', -0.411, (209.475, 190.552, 306.341)), (' C1086  LYS  HB2', ' C1086  LYS  HE2', -0.411, (185.728, 194.366, 98.682)), (' C  36  VAL HG13', ' C 222  ALA  HA ', -0.411, (189.018, 240.474, 183.433)), (' C 996  LEU  HA ', ' C 996  LEU HD23', -0.411, (203.163, 209.261, 187.425)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.41, (223.879, 189.98, 139.065)), (' A 329  PHE  O  ', ' A 580  GLN  NE2', -0.409, (224.348, 166.423, 199.134)), (' A 565  PHE  HD1', ' A 576  VAL HG23', -0.409, (222.884, 175.044, 188.964)), (' F 201  ASN  ND2', ' F 212  ASP  OD1', -0.409, (193.599, 218.125, 291.66)), (' G  39  LYS  HB2', ' G  42  GLN  HB3', -0.408, (205.961, 233.867, 276.409)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.408, (181.903, 189.89, 132.225)), (' G  66  GLY  HA3', ' G  71  PHE  HA ', -0.407, (219.4, 247.789, 260.673)), (' C 144  TYR  N  ', ' C 153  MET  O  ', -0.406, (180.777, 265.548, 206.286)), (' B 229  LEU  HB3', ' B 231  ILE HG23', -0.405, (235.405, 186.422, 206.019)), (' E  39  LYS  HB2', ' E  42  GLN  HB3', -0.405, (214.516, 182.647, 276.026)), (' B 587  ILE  H  ', ' B 587  ILE HG13', -0.404, (213.419, 231.317, 183.202)), (' E  15  PRO  HD3', ' E 106  ILE HG23', -0.404, (217.756, 168.406, 286.509)), (' B  97  LYS  HG2', ' B 186  PHE  HD1', -0.404, (260.613, 188.402, 190.869)), (' A  41  LYS  HG2', ' C 562  PHE  HD2', -0.404, (168.883, 181.597, 193.271)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.403, (229.638, 216.381, 146.213)), (' A 561  PRO  HA ', ' A 577  ARG HH22', -0.403, (234.09, 173.012, 188.604)), (' C 102  ARG  HA ', ' C 102  ARG  HD2', -0.402, (184.153, 254.416, 200.56)), (' E 131  SER  HA ', ' E 179  LEU  O  ', -0.402, (189.025, 186.28, 293.696)), (' C 985  ASP  N  ', ' C 985  ASP  OD1', -0.4, (209.035, 209.473, 203.302)), (' B 412  PRO  HG3', ' B 429  PHE  HB3', -0.4, (206.431, 226.296, 229.461))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
