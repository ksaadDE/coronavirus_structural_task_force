# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 155 ', 'ASN', 0.02548696130037804, (30.217000000000006, 3.474, 45.795)), ('A', ' 156 ', 'GLY', 0.030339632360144517, (31.186000000000014, 5.817999999999999, 48.609))]
data['omega'] = [('A', ' 163 ', 'PRO', None, (41.831, 18.914, 46.877))]
data['rota'] = [('A', '  86 ', 'MET', 0.05981865202792415, (27.783000000000005, 41.044, 67.81199999999997)), ('A', ' 107 ', 'LEU', 0.03071402846661327, (36.162, 69.516, 59.061)), ('A', ' 108 ', 'GLN', 0.051430411393337316, (39.476, 71.144, 58.14)), ('A', ' 131 ', 'GLU', 0.05143754652314732, (18.323, 41.33, 61.079)), ('A', ' 163 ', 'PRO', 0.20276777069521845, (42.361, 19.042, 45.515999999999984)), ('A', ' 240 ', 'LEU', 0.06094442004551347, (41.156, 43.21400000000001, 25.356)), ('A', ' 314 ', 'ARG', 0.028438906059394784, (59.542, 25.943999999999992, 50.468)), ('A', ' 349 ', 'GLU', 0.2339424484205834, (37.424, 20.552, 58.635)), ('A', ' 363 ', 'LYS', 0.1566548797670922, (52.657, 42.118, 64.308)), ('A', ' 375 ', 'LEU', 0.06539530257906029, (53.173, 25.738, 39.709)), ('A', ' 377 ', 'ASP', 0.13293049338767957, (49.717, 27.107000000000003, 43.731)), ('A', ' 394 ', 'TYR', 0.17307954929343963, (50.68699999999998, 50.212999999999994, 55.98)), ('A', ' 463 ', 'LEU', 0.04101227548993894, (31.327000000000016, 39.053, 34.475)), ('A', ' 539 ', 'GLN', 0.2232841417716219, (61.543, 50.07699999999999, 33.035)), ('A', ' 579 ', 'GLN', 0.1673164969151546, (51.14899999999999, 57.697, 39.527)), ('A', ' 585 ', 'PRO', 0.055549502416595856, (47.357, 58.24799999999999, 36.917))]
data['cbeta'] = []
data['probe'] = [(' A 179  LEU HD11', ' A 499  VAL HG23', -0.75, (27.297, 18.034, 31.321)), (' A  82  LEU  HA ', ' A  85  ASN HD22', -0.677, (28.977, 35.282, 64.192)), (' A 304  ALA  O  ', ' A 308  GLN  HG2', -0.662, (61.686, 18.987, 41.082)), (' A 346  ASP  OD1', ' A 348  ARG  HG2', -0.639, (42.147, 19.034, 61.976)), (' A 613  LYS  NZ ', ' A 617  PRO  HG3', -0.626, (28.505, 32.644, 12.611)), (' A 354  ALA  HB2', ' A 369  GLN  HG3', -0.62, (45.951, 28.845, 49.06)), (' A 104  VAL HG13', ' A 113  LYS  HG3', -0.601, (35.265, 65.404, 56.102)), (' A  96  GLY  HA3', ' A 122  LEU  CD2', -0.599, (28.765, 54.014, 62.24)), (' A  48  VAL HG13', ' A2001  HOH  O  ', -0.599, (41.628, 57.597, 63.074)), (' A 231  GLN  HG3', ' A2253  HOH  O  ', -0.584, (30.058, 55.13, 33.685)), (' A  75  THR HG23', ' A2037  HOH  O  ', -0.578, (28.803, 23.545, 69.122)), (' A  58  VAL HG13', ' A  59  TRP  HD1', -0.572, (37.404, 45.914, 65.896)), (' A  58  VAL HG13', ' A  59  TRP  CD1', -0.569, (37.142, 46.427, 66.327)), (' A 313  ARG  NH2', ' A 336  TRP  HB3', -0.567, (57.871, 28.605, 59.339)), (' A 573  PRO  HG3', ' A2240  HOH  O  ', -0.563, (40.74, 60.069, 47.036)), (' A 560  GLN HE21', ' A 564  THR HG23', -0.562, (59.809, 53.988, 47.754)), (' A 107  LEU HD21', ' A 116  ILE HD12', -0.558, (35.772, 64.89, 61.361)), (' A  45  SER  O  ', ' A  49  GLU  HG3', -0.557, (42.305, 61.559, 67.259)), (' A 104  VAL HG12', ' A 113  LYS  NZ ', -0.553, (33.821, 66.596, 54.713)), (' A 116  ILE  O  ', ' A 120  GLN  HG3', -0.548, (32.421, 59.114, 59.031)), (' A 531  PHE  CE1', ' A 592  MET  HE3', -0.547, (47.41, 40.666, 31.774)), (' A 511  LYS  O  ', ' A 515  PRO  HD2', -0.531, (30.634, 31.368, 45.383)), (' A 134  GLU  O  ', ' A 138  ILE HG12', -0.521, (21.003, 35.463, 58.161)), (' A 462  TYR  O  ', ' A 466  GLN  HG2', -0.517, (31.058, 41.987, 34.756)), (' A 179  LEU HD11', ' A 499  VAL  CG2', -0.517, (26.364, 17.788, 31.827)), (' A 144  THR  O  ', ' A 148  VAL HG22', -0.517, (30.296, 23.55, 53.906)), (' A 325  SER  O  ', ' A 554  GLN  HA ', -0.513, (65.856, 42.319, 44.679)), (' A 130  GLN  HG2', ' A2125  HOH  O  ', -0.5, (15.16, 39.216, 62.197)), (' A 334  GLU  HG2', ' A2377  HOH  O  ', -0.498, (52.201, 35.574, 63.188)), (' A 485  TRP  CD2', ' A 508  PRO  HG3', -0.497, (26.158, 32.735, 37.726)), (' A 104  VAL  CG1', ' A 113  LYS  HG3', -0.489, (34.835, 65.074, 55.958)), (' A 579  GLN HE22', ' A 585  PRO  HD3', -0.489, (49.562, 60.808, 35.622)), (' A 500  PRO  HG2', ' A2462  HOH  O  ', -0.488, (19.609, 19.178, 31.115)), (' A 463  LEU  C  ', ' A 463  LEU HD23', -0.486, (30.18, 37.366, 35.559)), (' A 457  PHE  CE2', ' A 461  SER  HB3', -0.485, (39.239, 37.863, 36.797)), (' A 173  ARG  NH1', ' A 288  ASP  OD1', -0.485, (46.014, 19.371, 29.114)), (' A 299  MET  HB2', ' A 433  LEU HD23', -0.482, (60.49, 22.452, 32.093)), (' A 169  MET  O  ', ' A 276  GLY  HA2', -0.479, (40.567, 20.957, 33.106)), (' A  61  GLU  HB3', ' A  84  LYS  NZ ', -0.477, (37.349, 39.868, 70.241)), (' A 275  LEU  N  ', ' A 275  LEU HD22', -0.476, (37.353, 24.114, 29.128)), (' A  96  GLY  HA3', ' A 122  LEU HD22', -0.475, (28.798, 53.632, 63.121)), (' A 579  GLN HE21', ' A 584  GLN  CA ', -0.472, (50.728, 59.673, 36.203)), (' A 597  LYS  HE3', ' A 601  ASP  OD2', -0.468, (52.322, 42.7, 16.724)), (' A  61  GLU  HB3', ' A  84  LYS  HE3', -0.468, (37.221, 38.916, 70.175)), (' A 104  VAL HG12', ' A 113  LYS  HZ1', -0.468, (33.94, 66.142, 54.394)), (' A 554  GLN  NE2', ' A2500  HOH  O  ', -0.467, (70.634, 38.058, 43.806)), (' A  79  LYS  O  ', ' A  83  GLN  HG3', -0.464, (28.876, 32.928, 69.154)), (' A  91  HIS  HD2', ' A2030  HOH  O  ', -0.464, (34.528, 49.829, 70.976)), (' A 597  LYS  HB3', ' A 598  PRO  HD3', -0.462, (54.048, 42.015, 21.607)), (' A 579  GLN HE21', ' A 584  GLN  HA ', -0.462, (50.732, 59.805, 36.141)), (' A 463  LEU HD11', ' A 489  ARG  HA ', -0.446, (29.877, 34.21, 31.669)), (' A 486  TRP  CE3', ' A 497  PRO  HD3', -0.443, (26.017, 28.119, 29.759)), (' A 514  ILE  HB ', ' A 515  PRO  CD ', -0.441, (29.028, 32.163, 45.542)), (' A  49  GLU  O  ', ' A  53  ARG  HG2', -0.44, (42.149, 55.718, 69.77)), (' A  59  TRP  CZ3', ' A 399  VAL HG22', -0.432, (40.539, 48.593, 60.949)), (' A 533  PHE  O  ', ' A 537  LEU  HG ', -0.429, (56.026, 47.68, 38.171)), (' A 560  GLN HE21', ' A 564  THR  CG2', -0.427, (59.387, 54.59, 48.023)), (' A 241  GLN  HB2', ' A 242  PRO  HD3', -0.427, (38.044, 43.635, 21.947)), (' A  61  GLU  HB3', ' A  84  LYS  CE ', -0.424, (37.376, 39.475, 70.253)), (' A  83  GLN  HG3', ' A2041  HOH  O  ', -0.422, (27.432, 32.976, 69.362)), (' A 115  ILE  O  ', ' A 119  VAL HG23', -0.422, (36.125, 56.878, 60.019)), (' A 616  TRP  HA ', ' A 617  PRO  HD2', -0.421, (29.903, 32.11, 17.143)), (' A 313  ARG HH22', ' A 336  TRP  HB3', -0.419, (57.376, 28.457, 60.087)), (' A  69  TYR  CE1', ' A  78  SER  OG ', -0.417, (30.979, 27.087, 62.483)), (' A 449  LYS  HE3', ' A2415  HOH  O  ', -0.417, (54.893, 29.099, 32.862)), (' A 399  VAL HG12', ' A2403  HOH  O  ', -0.416, (41.442, 53.499, 62.582)), (' A 291  VAL  HA ', ' A 292  PRO  HD3', -0.415, (50.871, 25.723, 23.158)), (' A 412  ALA  O  ', ' A 416  VAL HG23', -0.41, (50.75, 42.703, 41.262)), (' A 560  GLN  O  ', ' A 564  THR HG23', -0.408, (58.959, 53.279, 46.985)), (' A 613  LYS  HZ3', ' A 617  PRO  HG3', -0.406, (28.619, 32.426, 12.681)), (' A 273  HIS  CE1', ' A 498  PRO  HB3', -0.405, (30.714, 20.187, 28.7)), (' A 574  TRP  N  ', ' A 575  PRO  CD ', -0.405, (43.256, 57.155, 43.428)), (' A 174  LYS  HD3', ' A 177  ASP  OD2', -0.404, (37.457, 9.32, 32.282)), (' A 363  LYS  HG3', ' A2376  HOH  O  ', -0.404, (55.387, 40.437, 65.352)), (' A 267  GLU  O  ', ' A 617  PRO  HD2', -0.403, (29.535, 31.183, 16.115)), (' A  82  LEU  O  ', ' A  85  ASN  HB2', -0.402, (28.416, 37.196, 66.095))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
