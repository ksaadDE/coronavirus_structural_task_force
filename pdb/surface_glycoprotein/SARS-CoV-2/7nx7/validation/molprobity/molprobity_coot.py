# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('E', ' 371 ', 'SER', 0.03590405864157129, (40.564, -34.055, -26.204)), ('H', ' 155 ', 'PRO', 0.13155167182655203, (24.26199999999999, 4.871, -17.696))]
data['omega'] = [('A', ' 108 ', 'PRO', None, (3.364, -38.359, -57.403)), ('A', ' 153 ', 'PRO', None, (-17.376, -17.881, -54.365)), ('A', ' 155 ', 'PRO', None, (-13.595, -21.214, -58.028)), ('B', '   8 ', 'PRO', None, (16.47999999999999, -15.885, -65.354)), ('B', ' 141 ', 'PRO', None, (1.3839999999999992, -9.250999999999992, -80.771)), ('H', ' 155 ', 'PRO', None, (25.281999999999993, 5.921, -17.721)), ('H', ' 157 ', 'PRO', None, (22.933999999999994, 3.7470000000000017, -12.364)), ('L', '   8 ', 'PRO', None, (0.456, -18.732000000000006, -13.222)), ('L', ' 142 ', 'PRO', None, (-5.773, -2.367, -9.225))]
data['rota'] = [('H', ' 146 ', 'LEU', 0.28818215647459, (5.322999999999999, 18.046, -7.591)), ('H', ' 217 ', 'LYS', 0.24864227268508715, (16.786999999999995, 21.954, -8.316)), ('L', '  45 ', 'LYS', 0.024852740596206253, (17.859, -18.274, -3.6889999999999996)), ('E', ' 469 ', 'SER', 0.23100870412568345, (17.499, -54.82, -43.574)), ('A', '  88 ', 'GLU', 0.28676327770535287, (-2.483, -15.285000000000007, -46.282)), ('A', ' 144 ', 'LEU', 0.27125611560790075, (-20.040999999999986, -18.155000000000012, -79.948)), ('B', '  26 ', 'SER', 0.06864573211520891, (25.362999999999985, -18.613, -51.987)), ('B', '  34 ', 'LEU', 0.021166262206444596, (18.253999999999998, -30.45400000000001, -56.725))]
data['cbeta'] = []
data['probe'] = [(' B  81  PRO  HA ', ' B 106  ILE HD13', -0.743, (5.804, -21.798, -77.318)), (' H   6  GLU  H  ', ' H 113  GLN HE22', -0.717, (30.182, -9.944, -6.181)), (' A  22  CYS  HB3', ' A  78  LEU  HB3', -0.68, (-4.48, -36.733, -49.621)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.674, (11.448, -18.446, -4.035)), (' E 340  GLU  OE1', ' E 356  LYS  NZ ', -0.649, (37.927, -51.075, -28.945)), (' A 149  LYS  NZ ', ' A 177  GLN  OE1', -0.646, (-20.774, -8.806, -64.201)), (' B   4  MET  HE3', ' B  25  ALA  HB2', -0.637, (21.65, -22.227, -54.721)), (' A  82  MET  HB3', ' A  85  LEU HD21', -0.626, (-6.885, -23.238, -43.344)), (' H  83  MET  HB3', ' H  86  LEU HD21', -0.626, (31.906, -10.19, -22.364)), (' B 169  LYS  HD2', ' B 401  GOL  H32', -0.622, (-5.044, -25.87, -79.831)), (' B 142  ARG  NH2', ' B 405  SO4  O2 ', -0.585, (2.902, -12.265, -70.992)), (' H 100  GLY  HA3', ' H 107  TYR  CZ ', -0.582, (22.759, -28.854, -5.75)), (' E 339  GLY  HA3', ' E 702  NAG  H82', -0.577, (41.108, -43.822, -27.208)), (' L  39  LYS  HD3', ' L  84  ALA  HB2', -0.574, (11.596, -11.651, -2.672)), (' E 412  PRO  HG3', ' E 429  PHE  HB3', -0.567, (17.321, -38.555, -24.25)), (' A  11  LEU  HB2', ' A 153  PRO  HG3', -0.555, (-15.987, -19.12, -51.753)), (' B  84  PHE  HB2', ' B 106  ILE HD12', -0.553, (4.844, -21.283, -74.898)), (' A 123  LYS  NZ ', ' A 404  HOH  O  ', -0.539, (-25.99, -14.369, -59.718)), (' H  34  MET  HB3', ' H  79  LEU HD22', -0.522, (31.921, -20.208, -10.76)), (' B 402  CIT  O4 ', ' B 402  CIT  O7 ', -0.519, (29.826, -34.314, -56.773)), (' L 147  VAL HG21', ' L 176  LEU HD22', -0.511, (0.292, 5.494, -17.243)), (' E 403  ARG  HD2', ' E 505  TYR  HA ', -0.509, (23.737, -31.902, -45.464)), (' L 109  ARG  NH1', ' L 110  THR  O  ', -0.506, (-6.37, -0.807, -3.133)), (' E 388  ASN  HA ', ' E 526  GLY  HA3', -0.502, (34.218, -41.207, -13.201)), (' B  31  SER  HB2', ' B 402  CIT  H41', -0.498, (26.057, -33.609, -57.586)), (' H  91  THR HG23', ' H 118  THR  HA ', -0.497, (24.362, -3.137, -20.446)), (' L 104  LYS  NZ ', ' L 166  GLU  OE1', -0.494, (7.628, -5.46, -9.329)), (' L 120  PRO  HB3', ' L 210  PHE  CE2', -0.491, (1.869, 22.396, -20.386)), (' H 152  ASP  OD1', ' H 179  GLN  NE2', -0.49, (17.019, 11.666, -23.548)), (' L 187  TYR  O  ', ' L 193  TYR  OH ', -0.49, (2.352, 21.848, -28.556)), (' L 131  ALA  HB3', ' L 182  LEU HD12', -0.482, (8.146, 18.84, -27.487)), (' L  61  ARG  NE ', ' L  82  ASP  OD2', -0.476, (6.59, -18.095, 3.675)), (' L 109  ARG HH12', ' L 112  ALA  HB2', -0.467, (-6.783, 0.824, -2.887)), (' E 379  CYS  SG ', ' E 384  PRO  HG3', -0.466, (27.927, -33.515, -20.472)), (' A  82  MET  HE1', ' A 115  VAL HG21', -0.464, (-8.167, -24.678, -47.918)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.462, (27.685, -51.862, -12.812)), (' B  55  ARG  HG2', ' B  59  ILE  HB ', -0.461, (12.03, -36.579, -68.549)), (' E 403  ARG  HG3', ' E 495  TYR  CE1', -0.454, (23.107, -36.654, -44.484)), (' A 155  PRO  HA ', ' A 305   CL CL  ', -0.453, (-13.008, -19.906, -60.53)), (' H  39  GLN  HB2', ' H  45  LEU HD23', -0.449, (18.764, -13.219, -14.417)), (' B   1  ASP  N  ', ' B 501  HOH  O  ', -0.449, (21.436, -25.711, -44.293)), (' L 114  PRO  HB3', ' L 140  PHE  CD2', -0.447, (-3.757, 4.845, -10.741)), (' A  59  TYR  HB2', ' A  64  LYS  HG2', -0.446, (4.424, -26.173, -38.293)), (' H  29  PHE  O  ', ' H  72  ARG  NH2', -0.445, (35.925, -25.0, -6.62)), (' A  36  TRP  CE2', ' A  80  LEU  HB2', -0.443, (-3.79, -31.452, -46.617)), (' H 208  HIS  CD2', ' H 210  PRO  HD2', -0.439, (25.529, 7.758, -12.922)), (' B 120  PRO  HD3', ' B 132  VAL HG22', -0.434, (-24.994, -5.648, -75.248)), (' H 131  PRO  HD3', ' H 217  LYS  HD3', -0.434, (14.441, 22.324, -12.82)), (' B  90  GLN  HG2', ' B  97  ARG  O  ', -0.432, (12.242, -26.665, -53.43)), (' A  60  ALA  O  ', ' A  64  LYS  HG3', -0.428, (4.92, -24.142, -39.629)), (' H  88  ALA  HA ', ' H 119  VAL  HB ', -0.427, (25.315, -4.436, -25.778)), (' B  93  ASP  OD1', ' B  94  THR  N  ', -0.427, (16.319, -27.462, -45.263)), (' L  35  TRP  CE2', ' L  73  LEU  HB2', -0.427, (7.718, -24.658, -7.926)), (' L 130  THR  HA ', ' L 183  SER  HA ', -0.426, (12.26, 18.357, -28.317)), (' L 106  GLU  HB2', ' L 167  GLN  OE1', -0.424, (2.075, -7.001, -5.369)), (' L 109  ARG  HG3', ' L 110  THR  O  ', -0.42, (-6.362, -2.419, -3.261)), (' H  24  ALA  HB1', ' H  27  PHE  CE1', -0.418, (33.037, -20.352, -2.472)), (' B 210  ASN  HB2', ' B 213  GLU  HB2', -0.416, (-29.581, -3.343, -86.023)), (' B 145  LYS  HB3', ' B 197  THR  OG1', -0.416, (-6.131, 0.243, -79.793)), (' L 116  VAL  HA ', ' L 136  LEU  O  ', -0.414, (-2.314, 11.019, -12.639)), (' L  11  LEU  O  ', ' L 106  GLU  HG2', -0.412, (0.531, -10.992, -7.204)), (' L 131  ALA  N  ', ' L 182  LEU  O  ', -0.412, (10.832, 17.794, -26.721)), (' B  62  ARG  HB2', ' B  77  SER  O  ', -0.412, (14.243, -29.379, -76.255)), (' B  91  HIS  HD2', ' B 584  HOH  O  ', -0.411, (15.579, -24.4, -53.423)), (' B  48  LEU  HB3', ' B  49  ILE HD12', -0.41, (13.025, -31.598, -66.06)), (' E 357  ARG  HG3', ' E 396  TYR  CE1', -0.409, (26.887, -53.076, -23.457)), (' B  19  ALA  HB3', ' B  76  ILE  HB ', -0.408, (14.162, -24.319, -72.806)), (' H 147  GLY  HA2', ' H 162  TRP  CZ2', -0.405, (9.344, 16.028, -7.396)), (' H  52  SER  HB3', ' H  57  ASN  HB2', -0.402, (34.73, -29.909, -16.15)), (' H  69  THR  HB ', ' H  82  GLN  HB3', -0.401, (37.257, -15.628, -20.981)), (' A 149  LYS  HG2', ' A 150  ASP  CG ', -0.4, (-23.347, -11.221, -62.893)), (' L 176  LEU HD23', ' L 177  SER  N  ', -0.4, (3.288, 6.543, -16.0))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
