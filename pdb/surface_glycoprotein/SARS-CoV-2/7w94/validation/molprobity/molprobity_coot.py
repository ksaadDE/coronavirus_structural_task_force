# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('B', ' 130 ', 'VAL', 0.17647240445421147, (175.479, 220.227, 222.36499999999998)), ('B', ' 391 ', 'CYS', 0.05426861362204436, (144.61199999999994, 179.417, 213.37)), ('C', ' 524 ', 'VAL', 0.2040481080932451, (185.238, 143.968, 218.92599999999993)), ('A', ' 213 ', 'VAL', 0.17706782448228456, (229.029, 145.601, 192.54699999999997))]
data['cbeta'] = []
data['probe'] = [(' A 355  ARG HH12', ' A 357  ARG  HB2', -0.606, (180.144, 206.153, 222.624)), (' C1094  VAL HG13', ' C1107  ARG  HE ', -0.589, (175.56, 158.278, 124.283)), (' A  97  LYS  HE3', ' A 182  LYS  HB3', -0.585, (226.903, 133.876, 202.308)), (' A 391  CYS  HA ', ' A 525  CYS  HB3', -0.569, (192.117, 197.055, 215.805)), (' A 121  ASN  HB3', ' A 126  VAL HG12', -0.566, (214.326, 139.57, 215.548)), (' C 144  TYR  O  ', ' C 150  LYS  NZ ', -0.563, (108.076, 149.065, 217.426)), (' B 575  ALA  HA ', ' B 586  ASP  HA ', -0.556, (137.417, 181.828, 191.599)), (' C 106  PHE  HB2', ' C 117  LEU  HB3', -0.553, (133.637, 151.986, 215.544)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.552, (171.686, 219.91, 215.773)), (' A 424  LYS  HB2', ' A 463  PRO  HG3', -0.547, (166.317, 194.474, 219.124)), (' C 152  TRP  HB3', ' C 179  LEU HD13', -0.542, (111.109, 153.194, 208.826)), (' A 106  PHE  HB2', ' A 117  LEU  HB3', -0.541, (211.173, 152.055, 219.463)), (' B 356  LYS  HB2', ' B 397  ALA  HB3', -0.541, (143.69, 168.973, 226.012)), (' B 102  ARG  HD3', ' B 243  ALA  HB2', -0.538, (176.702, 236.894, 210.722)), (' B 350  VAL HG21', ' B 418  ILE HD11', -0.536, (156.545, 160.662, 229.823)), (' C 443  SER  HA ', ' C 497  PHE  HB3', -0.535, (184.681, 164.729, 247.345)), (' C  69  HIS  ND1', ' C 260  ALA  O  ', -0.534, (113.084, 136.879, 206.194)), (' A 104  TRP  HA ', ' A 240  THR  HA ', -0.526, (218.237, 148.929, 216.291)), (' A 457  ARG  NH1', ' A 467  ASP  OD1', -0.524, (159.795, 202.467, 224.732)), (' C 985  ASP  HB3', ' C 988  GLU  HG2', -0.524, (162.761, 181.794, 213.421)), (' C  21  ARG  HA ', ' C  79  PHE  HB2', -0.522, (121.982, 131.795, 210.928)), (' A 597  VAL HG12', ' A 610  VAL HG12', -0.522, (208.038, 171.028, 179.972)), (' B 452  ARG  HA ', ' B 494  SER  HA ', -0.522, (155.019, 156.194, 239.611)), (' C 810  SER  OG ', ' C 811  LYS  NZ ', -0.52, (136.579, 184.47, 146.45)), (' B 310  LYS  HG3', ' B 600  PRO  HA ', -0.52, (166.744, 206.445, 167.497)), (' B 328  ARG  NH1', ' B 531  THR  O  ', -0.516, (133.119, 191.35, 205.457)), (' A 117  LEU  HG ', ' A 130  VAL HG22', -0.514, (207.938, 149.962, 221.365)), (' B 345  THR  O  ', ' B 509  ARG  NH2', -0.513, (146.571, 170.236, 240.757)), (' C 121  ASN HD21', ' C 126  VAL HG13', -0.51, (123.499, 156.992, 209.935)), (' A 905  ARG  NH1', ' A1050  MET  SD ', -0.51, (181.037, 158.043, 137.236)), (' A 673  SER  OG ', ' A 674  TYR  N  ', -0.506, (212.063, 168.769, 164.575)), (' B 725  GLU  OE2', ' B1028  LYS  NZ ', -0.505, (178.23, 184.521, 151.23)), (' C 104  TRP  H  ', ' C 119  ILE HG23', -0.505, (126.917, 151.223, 211.884)), (' A1090  PRO  O  ', ' B 913  GLN  NE2', -0.505, (185.376, 181.796, 120.017)), (' A 129  LYS  NZ ', ' A 170  TYR  O  ', -0.502, (207.194, 141.126, 222.655)), (' C 430  THR  OG1', ' C 515  PHE  O  ', -0.502, (184.902, 156.897, 216.126)), (' C 974  SER  OG ', ' C 975  SER  N  ', -0.502, (155.104, 175.557, 200.961)), (' C 355  ARG HH12', ' C 512  VAL HG23', -0.502, (188.426, 159.332, 226.142)), (' B 910  GLY  O  ', ' B1106  GLN  NE2', -0.498, (174.658, 184.554, 125.719)), (' C  68  ILE HD13', ' C  78  ARG HH21', -0.498, (118.175, 131.087, 201.434)), (' B  81  ASN  ND2', ' B 240  THR  O  ', -0.494, (167.542, 231.681, 212.052)), (' B  23  GLN HE21', ' B  80  ASP  HA ', -0.492, (160.321, 235.875, 209.149)), (' B 196  ASN HD22', ' B 235  ILE HD12', -0.489, (171.115, 214.908, 214.082)), (' C 393  THR HG21', ' C 520  ALA  HB3', -0.489, (190.358, 149.071, 212.42)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.489, (177.281, 163.289, 231.844)), (' B  20  THR  OG1', ' B  77  LYS  O  ', -0.488, (162.875, 243.011, 209.047)), (' B 191  GLU  HG2', ' B 223  LEU HD21', -0.485, (176.973, 221.457, 197.547)), (' C 663  ASP  N  ', ' C 663  ASP  OD1', -0.484, (156.818, 148.235, 161.019)), (' B 389  ASP  N  ', ' B 389  ASP  OD1', -0.484, (148.069, 185.142, 214.464)), (' A 316  SER  OG ', ' A 317  ASN  N  ', -0.482, (200.863, 174.699, 187.697)), (' B 390  LEU HD21', ' C 982  SER  HB3', -0.481, (150.578, 183.659, 208.75)), (' C 189  LEU HD22', ' C 217  PRO  HG2', -0.481, (125.658, 148.065, 192.451)), (' C 328  ARG  NH1', ' C 530  SER  OG ', -0.48, (178.618, 132.195, 210.455)), (' B1104  VAL HG23', ' B1115  ILE HG12', -0.479, (167.004, 183.623, 112.248)), (' A 450  ASN  HA ', ' A 452  ARG HH21', -0.477, (167.005, 202.266, 244.207)), (' A 454  ARG  NH2', ' A 469  SER  O  ', -0.474, (158.894, 204.939, 230.689)), (' C 195  LYS  HD2', ' C 197  ILE HG13', -0.474, (142.168, 157.019, 205.976)), (' C1084  ASP  N  ', ' C1084  ASP  OD1', -0.474, (185.379, 156.046, 105.476)), (' B 316  SER  OG ', ' B 317  ASN  N  ', -0.472, (159.857, 197.748, 185.641)), (' B 108  THR  OG1', ' B 234  ASN  O  ', -0.472, (166.147, 215.11, 218.659)), (' A 386  LYS  HG3', ' A 389  ASP  HB2', -0.471, (193.517, 188.518, 214.637)), (' C 391  CYS  HA ', ' C 525  CYS  HB3', -0.471, (181.583, 145.707, 216.234)), (' C 804  GLN  OE1', ' C 935  GLN  NE2', -0.47, (142.899, 173.029, 144.616)), (' A  92  PHE  HB3', ' A 192  PHE  HB2', -0.469, (214.917, 149.094, 207.74)), (' A  87  ASN  N  ', ' A  87  ASN  OD1', -0.469, (212.505, 163.4, 212.314)), (' B 780  GLU  O  ', ' B 784  GLN  NE2', -0.469, (189.686, 176.252, 152.679)), (' B 552  LEU  HB3', ' B 585  LEU HD12', -0.469, (136.004, 187.772, 194.455)), (' B 204  TYR  HB3', ' B 223  LEU  HB3', -0.468, (179.365, 218.178, 200.337)), (' B 485  GLY  H  ', ' B 488  CYS  HB2', -0.468, (160.852, 139.45, 239.406)), (' B 349  SER  OG ', ' B 452  ARG  O  ', -0.467, (152.745, 158.459, 235.363)), (' A 900  MET  SD ', ' A 917  TYR  OH ', -0.467, (181.949, 155.05, 123.951)), (' A1084  ASP  N  ', ' A1084  ASP  OD1', -0.466, (189.475, 187.266, 104.973)), (' C 312  ILE HG22', ' C 598  ILE HG12', -0.465, (158.377, 148.49, 171.483)), (' C 287  ASP  N  ', ' C 287  ASP  OD1', -0.463, (136.049, 158.647, 183.061)), (' B 562  PHE  O  ', ' B 564  GLN  NE2', -0.462, (133.502, 170.956, 200.133)), (' C 725  GLU  OE2', ' C1028  LYS  NZ ', -0.461, (164.924, 169.748, 150.896)), (' A 356  LYS  HB3', ' A 397  ALA  HB3', -0.461, (181.114, 201.869, 227.112)), (' B 336  CYS  HB2', ' B 361  CYS  HB3', -0.461, (137.352, 179.322, 222.91)), (' B 656  VAL HG12', ' B 658  ASN  H  ', -0.46, (151.181, 208.049, 157.0)), (' C 389  ASP  N  ', ' C 389  ASP  OD2', -0.458, (174.722, 146.336, 215.63)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.458, (172.667, 195.971, 245.59)), (' B  24  LEU HD12', ' B  25  PRO  HD2', -0.457, (155.891, 236.811, 201.227)), (' C 344  ALA  O  ', ' C 509  ARG  NH1', -0.457, (184.265, 153.886, 241.221)), (' A 142  GLY  HA2', ' A 244  LEU  HB2', -0.457, (229.05, 141.738, 220.713)), (' B 974  SER  OG ', ' B 975  SER  N  ', -0.456, (183.402, 189.804, 201.585)), (' C 533  LEU HD11', ' C 585  LEU HD11', -0.455, (181.273, 133.786, 201.071)), (' B 384  PRO  HA ', ' B 387  LEU HD23', -0.455, (153.992, 181.096, 218.587)), (' C1081  ILE HG13', ' C1088  HIS  HB2', -0.454, (181.641, 156.654, 112.237)), (' C 355  ARG  HD2', ' C 396  TYR  HB3', -0.454, (191.463, 156.265, 224.826)), (' B  33  THR  OG1', ' B 219  GLY  O  ', -0.452, (174.228, 221.455, 187.71)), (' B 444  LYS  HG3', ' B 446  GLY  H  ', -0.452, (153.805, 163.438, 252.089)), (' C 393  THR  OG1', ' C 516  GLU  OE1', -0.452, (190.217, 150.891, 215.412)), (' A 644  GLN  NE2', ' A 648  GLY  O  ', -0.451, (208.858, 185.456, 175.698)), (' B 911  VAL  HA ', ' B1106  GLN HE22', -0.451, (175.618, 185.704, 125.958)), (' A 666  ILE HD11', ' A 672  ALA  HB2', -0.45, (208.765, 174.646, 169.575)), (' B  37  TYR  HB3', ' B 223  LEU  HB2', -0.449, (178.411, 216.363, 198.157)), (' B 291  CYS  HB3', ' B 301  CYS  HB2', -0.448, (169.224, 205.413, 184.822)), (' C 353  TRP  O  ', ' C 466  ARG  NH1', -0.447, (198.746, 159.537, 231.401)), (' C 411  ALA  HB3', ' C 414  GLN  HB3', -0.441, (182.972, 171.893, 223.155)), (' C 345  THR  O  ', ' C 509  ARG  NH2', -0.439, (185.752, 155.526, 243.442)), (' B 564  GLN  HG2', ' C  41  LYS  HB3', -0.439, (137.058, 170.791, 199.522)), (' B  60  SER  OG ', ' B  61  ASN  N  ', -0.439, (161.985, 219.845, 193.976)), (' B 435  ALA  HB2', ' B 510  VAL HG23', -0.438, (156.448, 171.584, 230.845)), (' C 457  ARG  NH1', ' C 467  ASP  OD2', -0.438, (201.763, 171.345, 228.837)), (' B 605  SER  OG ', ' B 606  ASN  N  ', -0.436, (165.559, 214.176, 170.638)), (' C 355  ARG  NH2', ' C 423  TYR  OH ', -0.435, (191.293, 161.096, 225.443)), (' A  16  VAL  O  ', ' A 255  SER  OG ', -0.435, (232.503, 150.742, 228.333)), (' C  22  THR  OG1', ' C  77  LYS  NZ ', -0.435, (121.116, 126.977, 208.838)), (' A 730  SER  OG ', ' A 731  MET  N  ', -0.434, (176.165, 156.805, 165.798)), (' A 108  THR  OG1', ' A 234  ASN  O  ', -0.433, (209.202, 159.336, 222.219)), (' C 150  LYS  HA ', ' C 150  LYS  HD3', -0.433, (107.217, 152.795, 216.184)), (' C 327  VAL HG12', ' C 542  ASN  HB3', -0.432, (175.619, 141.072, 207.926)), (' B 607  GLN  O  ', ' B 674  TYR  OH ', -0.432, (162.203, 210.26, 170.492)), (' C 393  THR  O  ', ' C 523  THR  OG1', -0.432, (189.29, 145.606, 217.865)), (' B1082  CYS  HB3', ' B1126  CYS  HB3', -0.43, (156.411, 174.259, 110.422)), (' B 356  LYS  NZ ', ' B 399  SER  OG ', -0.43, (146.001, 167.447, 230.534)), (' C 291  CYS  HB2', ' C 298  GLU  HA ', -0.43, (149.969, 151.935, 184.206)), (' B 640  SER  O  ', ' B 640  SER  OG ', -0.429, (147.673, 213.988, 170.64)), (' A 105  ILE  HB ', ' A 239  GLN  HB3', -0.428, (218.694, 152.462, 219.575)), (' C 710  ASN  N  ', ' C 710  ASN  OD1', -0.428, (177.378, 144.413, 123.675)), (' B 442  ASP  O  ', ' B 448  ASN  ND2', -0.428, (151.327, 165.604, 244.698)), (' B 744  GLY  H  ', ' B 977  LEU HD12', -0.427, (190.595, 182.907, 197.365)), (' C  60  SER  OG ', ' C  61  ASN  N  ', -0.427, (139.684, 141.33, 194.11)), (' A 349  SER  OG ', ' A 350  VAL  N  ', -0.426, (167.972, 198.875, 234.188)), (' C 858  LEU HD13', ' C 959  LEU HD22', -0.426, (156.225, 179.395, 179.787)), (' A 318  PHE  O  ', ' A 319  ARG  NE ', -0.426, (200.992, 180.151, 191.38)), (' A 234  ASN  ND2', ' C 465  GLU  OE1', -0.425, (203.418, 163.58, 222.885)), (' A 805  ILE HD12', ' A 878  LEU HD11', -0.425, (183.14, 150.226, 143.973)), (' B 462  LYS  HB3', ' B 465  GLU  HG3', -0.424, (152.61, 153.684, 218.921)), (' C 374  PHE  HD2', ' C 436  TRP  HB2', -0.424, (176.628, 157.628, 235.656)), (' C 401  VAL HG12', ' C 509  ARG  HA ', -0.422, (184.084, 160.51, 238.031)), (' C 811  LYS  HA ', ' C 811  LYS  HD3', -0.422, (137.078, 184.889, 149.803)), (' A  29  THR  OG1', ' A  30  ASN  N  ', -0.421, (224.347, 156.723, 196.016)), (' B 365  TYR  HE1', ' B 525  CYS  HA ', -0.421, (143.204, 181.072, 217.632)), (' B 517  LEU HD12', ' C 983  ARG  HE ', -0.418, (152.679, 175.863, 209.121)), (' A  99  ASN  HB3', ' A 179  LEU  HG ', -0.418, (222.115, 136.196, 212.016)), (' C 375  SER  H  ', ' C 436  TRP  HA ', -0.418, (175.669, 160.506, 235.852)), (' B 491  PRO  HG2', ' B 492  LEU HD12', -0.418, (153.978, 147.83, 235.339)), (' A 535  LYS  NZ ', ' A 554  GLU  OE1', -0.417, (209.347, 204.816, 197.275)), (' B 777  ASN  OD1', ' B1019  ARG  NH1', -0.416, (187.26, 174.648, 162.085)), (' A 445  VAL  O  ', ' A 498  GLN  NE2', -0.416, (166.651, 190.704, 252.424)), (' C 985  ASP  O  ', ' C 989  ALA  N  ', -0.416, (163.06, 182.302, 210.513)), (' B 340  GLU  HG3', ' B 356  LYS  HD2', -0.416, (141.647, 170.256, 229.124)), (' B 324  GLU  H  ', ' B 539  VAL HG12', -0.415, (141.763, 196.585, 196.981)), (' C 991  VAL HG23', ' C 992  GLN HE21', -0.415, (165.429, 176.499, 207.137)), (' A 889  GLY  HA3', ' A1034  LEU HD23', -0.415, (170.663, 158.161, 142.384)), (' A 105  ILE  O  ', ' A 239  GLN  N  ', -0.414, (216.972, 153.646, 217.846)), (' C 909  ILE HD13', ' C1049  LEU HD21', -0.414, (163.442, 169.113, 132.578)), (' B 403  ARG  NH2', ' B 406  GLU  OE2', -0.414, (164.214, 161.253, 235.528)), (' B 644  GLN  NE2', ' B 648  GLY  O  ', -0.414, (147.595, 198.245, 172.236)), (' C 141  LEU  HA ', ' C 141  LEU HD23', -0.411, (118.217, 145.597, 217.511)), (' B 659  SER  HB3', ' B 698  SER  HB2', -0.411, (154.458, 200.64, 152.864)), (' C 105  ILE HD11', ' C 241  LEU  HB3', -0.41, (125.482, 145.952, 215.006)), (' C  68  ILE HG21', ' C  78  ARG HH21', -0.41, (118.172, 131.433, 202.423)), (' C 933  LYS  HB2', ' C 933  LYS  HE2', -0.41, (147.369, 163.406, 141.55)), (' B  35  GLY  HA3', ' B  56  LEU  HB3', -0.409, (170.772, 217.165, 195.472)), (' B 737  ASP  HB3', ' B 740  MET  HB2', -0.409, (193.316, 180.47, 188.189)), (' C  48  LEU HD22', ' C 278  LYS  HG2', -0.409, (141.599, 161.448, 181.978)), (' A 196  ASN  N  ', ' A 196  ASN  OD1', -0.407, (205.235, 156.548, 212.804)), (' C 886  TRP  HD1', ' C 905  ARG HH12', -0.405, (164.046, 179.708, 134.197)), (' C  80  ASP  N  ', ' C  80  ASP  OD1', -0.405, (124.503, 135.628, 207.222)), (' C 124  THR HG21', ' C 153  MET  HE2', -0.403, (112.298, 159.226, 214.505)), (' C 319  ARG HH12', ' C 321  GLN  HA ', -0.402, (164.75, 142.524, 195.651)), (' B 106  PHE  O  ', ' B 117  LEU  N  ', -0.402, (170.693, 220.696, 218.784)), (' B 393  THR HG21', ' B 520  ALA  HB3', -0.4, (141.784, 171.319, 208.982)), (' A 405  ASP  N  ', ' A 405  ASP  OD1', -0.4, (167.423, 184.636, 236.101)), (' A 106  PHE  HD2', ' A 117  LEU HD13', -0.4, (209.598, 151.085, 217.704)), (' C 457  ARG  HG2', ' C 459  SER  H  ', -0.4, (200.348, 176.131, 228.118))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
