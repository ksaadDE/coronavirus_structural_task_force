# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', '  50 ', 'LEU', None, (74.08696, -30.215700000000012, -7.617559999999992)), ('A', ' 154 ', 'TYR', None, (62.310700000000004, -51.37756, 27.58380999999997)), ('B', ' 278 ', 'GLY', None, (41.312819999999995, -61.11904, -13.150799999999988))]
data['rota'] = [('A', '  47 ', 'GLU', 0.00019630315305171664, (72.53130999999995, -25.43374000000001, -3.680379999999997)), ('A', '  48 ', 'ASP', 0.2467115339013015, (71.40671, -28.95935, -2.7189799999999984)), ('A', '  69 ', 'GLN', 0.2930347979350205, (61.892570000000006, -23.730459999999997, 18.506629999999983)), ('B', ' 202 ', 'LEU', 0.0, (32.47586000000002, -43.68244000000003, 0.7984099999999995))]
data['cbeta'] = []
data['probe'] = [(' B 226  THR HG23', ' B 229  ASP  H  ', -0.839, (20.592, -44.189, -10.613)), (' B  45  THR HG23', ' B  48  ASP  H  ', -0.706, (29.951, -61.936, 39.447)), (' B 226  THR  OG1', ' B 401  HOH  O  ', -0.705, (19.724, -40.154, -9.728)), (' B 226  THR HG21', ' B 430  HOH  O  ', -0.629, (18.693, -42.704, -12.24)), (' B 264  MET  HE3', ' B 267  ALA  HB3', -0.606, (35.642, -45.851, -10.686)), (' B  40  ARG  HA ', ' B  87  LEU  HG ', -0.593, (31.864, -48.927, 35.913)), (' A  58  LEU HD22', ' A  82  MET  HE3', -0.585, (78.837, -28.783, 8.751)), (' B 208  LEU HD13', ' B 264  MET  HE2', -0.575, (36.641, -46.735, -8.734)), (' B 127  GLN  NE2', ' B 403  HOH  O  ', -0.568, (42.635, -46.205, 8.836)), (' A 127  GLN  O  ', ' B   4  ARG  NH1', -0.565, (54.36, -48.611, 8.074)), (' A 131  ARG HH22', ' A 289  ASP  CG ', -0.543, (59.029, -57.156, 2.787)), (' B   5  LYS  HG2', ' B 291  PHE  CZ ', -0.541, (45.166, -47.373, 5.389)), (' A   5  LYS  HG3', ' A 291  PHE  CZ ', -0.538, (51.749, -55.626, 9.85)), (' A  45  THR HG23', ' A  46  ALA  H  ', -0.534, (70.179, -22.433, -2.138)), (' B 219  PHE  CE1', ' B 264  MET  HE1', -0.524, (38.822, -46.129, -10.621)), (' A  62  SER  O  ', ' A  65  SER  OG ', -0.512, (74.808, -19.805, 12.232)), (' A  50  LEU  O  ', ' A  50  LEU HD13', -0.508, (77.156, -32.192, -6.82)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.483, (59.365, -54.1, 8.742)), (' A 285  THR HG21', ' B 284  SER  HA ', -0.479, (45.389, -57.416, -3.177)), (' A  47  GLU  H  ', ' A  47  GLU  HG3', -0.472, (71.618, -23.81, -1.722)), (' A 131  ARG  NH2', ' A 289  ASP  OD1', -0.472, (58.658, -56.0, 3.032)), (' A  45  THR HG23', ' A  46  ALA  N  ', -0.467, (70.157, -22.789, -1.726)), (' A 131  ARG  HD3', ' A 197  ASP  OD2', -0.459, (61.884, -53.632, -0.444)), (' A 288  GLU  OE1', ' A 401  HOH  O  ', -0.455, (53.228, -56.771, 5.413)), (' A  54  TYR  HB3', ' A  82  MET  HE1', -0.454, (78.27, -29.878, 5.721)), (' B 243  THR  O  ', ' B 247  VAL HG23', -0.453, (26.083, -38.044, -1.951)), (' B  76  ARG  H  ', ' B  92  ASP  HB2', -0.45, (43.443, -40.171, 45.511)), (' B 208  LEU  HB3', ' B 264  MET  HE2', -0.448, (37.821, -45.813, -8.013)), (' B  76  ARG  O  ', ' B  92  ASP  N  ', -0.436, (40.953, -39.448, 44.753)), (' B 245  ASP  N  ', ' B 245  ASP  OD1', -0.434, (24.947, -35.258, 2.226)), (' A  92  ASP  OD1', ' A  93  THR  N  ', -0.431, (69.261, -24.148, 26.71)), (' B 277  ASN  HA ', ' B 278  GLY  HA2', -0.426, (41.176, -61.366, -10.574)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.423, (60.324, -44.697, 13.899)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.423, (66.009, -34.12, 27.068)), (' A  59  ILE  HA ', ' A  59  ILE HD12', -0.419, (82.803, -23.03, 9.81)), (' A 153  ASP  HA ', ' A 154  TYR  HA ', -0.418, (60.17, -51.86, 26.505)), (' B 288  GLU  HG2', ' B 291  PHE  HD2', -0.406, (42.846, -48.431, 2.782)), (' B 115  LEU  CD1', ' B 125  VAL HG22', -0.405, (49.266, -45.882, 21.455)), (' A  22  CYS  HB3', ' A  42  VAL  O  ', -0.404, (69.203, -24.104, 7.362)), (' A 282  LEU  HA ', ' A 282  LEU HD23', -0.404, (44.465, -63.112, 9.456)), (' B 262  LEU  HA ', ' B 262  LEU HD23', -0.402, (28.439, -41.22, -9.154))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
