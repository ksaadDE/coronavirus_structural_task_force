# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' C   2  VAL  HA ', ' C  25  SER  O  ', -0.864, (130.637, 120.199, 215.369)), (' B  39  LYS  NZ ', ' B  81  GLU  O  ', -0.791, (149.039, 120.655, 229.609)), (' B  89  LEU HD11', ' B  96  TYR  HB3', -0.79, (149.738, 129.643, 209.182)), (' B  39  LYS  NZ ', ' B  81  GLU  OE2', -0.74, (147.516, 120.679, 229.278)), (' A 454  ARG  NH2', ' A 469  SER  O  ', -0.732, (136.593, 152.881, 207.07)), (' B  22  THR HG22', ' B  72  THR HG22', -0.698, (161.902, 135.133, 222.864)), (' A 518  LEU  HG ', ' A 519  HIS  H  ', -0.684, (138.607, 171.57, 182.01)), (' A 405  ASP  O  ', ' A 408  ARG  NH1', -0.665, (156.594, 163.195, 209.511)), (' B  33  LEU  HB3', ' B  51  ALA  HB2', -0.664, (152.661, 137.27, 217.211)), (' A 496  GLY  O  ', ' A 501  ASN  ND2', -0.663, (148.696, 163.229, 222.121)), (' A 486  PHE  N  ', ' C 101  VAL  O  ', -0.65, (138.637, 136.975, 216.646)), (' C 100  THR  OG1', ' C 104  GLY  N  ', -0.647, (137.966, 130.63, 217.015)), (' B  79  GLN HE22', ' B  81  GLU  HB3', -0.646, (147.03, 122.362, 234.68)), (' B  63  SER  OG ', ' B  74  THR  OG1', -0.634, (154.079, 135.912, 229.833)), (' A 334  ASN  OD1', ' A 335  LEU  N  ', -0.632, (131.242, 188.173, 199.441)), (' A 336  CYS  H  ', ' A 363  ALA  HB2', -0.628, (135.808, 185.811, 199.429)), (' B  79  GLN  NE2', ' B  81  GLU  HB3', -0.61, (147.826, 122.373, 234.081)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.6, (146.594, 158.417, 205.995)), (' A 411  ALA  HB3', ' A 414  GLN  HG3', -0.595, (154.492, 164.571, 199.927)), (' C  98  ARG  NH1', ' C  99  GLU  O  ', -0.593, (135.005, 129.053, 212.476)), (' A 384  PRO  HA ', ' A 387  LEU HD23', -0.59, (150.045, 181.632, 196.132)), (' A 440  ASN  OD1', ' A 441  LEU  N  ', -0.581, (144.3, 175.31, 220.686)), (' A 494  SER  OG ', ' A 495  TYR  N  ', -0.579, (143.133, 158.527, 218.613)), (' A 380  TYR  CE2', ' A 412  PRO  HD2', -0.568, (153.19, 168.949, 196.997)), (' C  37  VAL  O  ', ' C  95  TYR  N  ', -0.566, (145.41, 117.922, 209.063)), (' C  98  ARG HH12', ' C 100  THR HG23', -0.565, (135.129, 128.779, 214.029)), (' A 478  THR HG22', ' C  33  GLY  H  ', -0.554, (134.928, 130.636, 208.806)), (' B  55  LEU HD12', ' B  56  SER  H  ', -0.554, (140.146, 134.266, 223.786)), (' A 498  GLN  H  ', ' A 501  ASN  ND2', -0.55, (148.821, 164.376, 222.566)), (' C  59  TYR  OH ', ' C  69  THR  N  ', -0.545, (141.868, 122.406, 196.81)), (' B  39  LYS  HB2', ' B  42  LYS  HG2', -0.544, (147.686, 116.282, 225.186)), (' C  89  GLU  N  ', ' C  89  GLU  OE1', -0.532, (157.453, 111.296, 200.227)), (' A 438  SER  OG ', ' A 442  ASP  OD2', -0.527, (144.18, 171.273, 216.338)), (' A 365  TYR  HB2', ' A 387  LEU HD11', -0.517, (146.042, 183.484, 197.243)), (' B   6  GLN  HG2', ' B  23  CYS  SG ', -0.517, (159.044, 129.9, 217.409)), (' B  20  THR HG22', ' B  74  THR HG22', -0.517, (158.706, 135.005, 228.21)), (' B   6  GLN  HB2', ' B 100  GLN  O  ', -0.514, (160.851, 126.292, 217.743)), (' A 447  GLY  HA2', ' A 497  PHE  O  ', -0.51, (144.217, 164.52, 223.455)), (' B  29  ILE  O  ', ' B  68  GLU  HA ', -0.508, (155.798, 141.192, 213.083)), (' C  98  ARG HH12', ' C 100  THR  CG2', -0.503, (134.569, 129.316, 214.351)), (' B  24  ARG  NH1', ' B  26  ARG  HD3', -0.503, (165.961, 134.565, 210.244)), (' B  38  GLN  OE1', ' C  45  LEU HD11', -0.499, (150.928, 119.481, 216.777)), (' A 439  ASN  O  ', ' A 443  SER  OG ', -0.498, (146.475, 170.023, 222.498)), (' B  27  GLN  HG3', ' B  28  GLY  H  ', -0.497, (158.825, 139.885, 206.169)), (' B  17  ASP  OD1', ' B  18  ARG  N  ', -0.495, (159.86, 129.6, 236.816)), (' C  97  ALA  HA ', ' C 108  TRP  HA ', -0.495, (139.752, 121.764, 212.732)), (' A 474  GLN  NE2', ' A 478  THR  O  ', -0.495, (135.473, 136.285, 207.608)), (' A 417  LYS  NZ ', ' A 455  LEU  HG ', -0.494, (148.926, 152.111, 209.536)), (' C  38  ARG  HA ', ' C  94  TYR  HA ', -0.493, (147.718, 117.157, 208.565)), (' A 421  TYR  CD1', ' A 457  ARG  HB3', -0.489, (144.894, 151.593, 202.786)), (' A 342  PHE  HE2', ' A 434  ILE HG21', -0.485, (145.652, 177.755, 205.745)), (' C  72  ARG  O  ', ' C  76  LYS  N  ', -0.483, (128.077, 119.696, 202.964)), (' C  40  ALA  HA ', ' C  92  ALA  HA ', -0.481, (152.46, 113.076, 208.983)), (' B  39  LYS  HE2', ' B  84  ALA  HB2', -0.48, (150.53, 120.823, 226.621)), (' B   3  GLN  OE1', ' B   4  MET  N  ', -0.476, (159.531, 129.744, 209.409)), (' C   5  VAL  O  ', ' C  22  CYS  HA ', -0.476, (135.077, 114.293, 207.427)), (' C  91  THR HG22', ' C 115  THR  HA ', -0.469, (152.441, 108.587, 203.939)), (' B  35  TRP  CE2', ' B  73  LEU  HB2', -0.468, (154.749, 132.772, 222.382)), (' B  32  TYR  HB3', ' B  91  HIS  NE2', -0.468, (147.387, 137.143, 213.082)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.467, (146.224, 176.135, 194.234)), (' A 412  PRO  HB3', ' A 426  PRO  O  ', -0.463, (150.876, 165.873, 193.638)), (' B  18  ARG  HD2', ' B  76  SER  HA ', -0.453, (156.939, 134.099, 234.575)), (' B  33  LEU HD12', ' B  89  LEU  O  ', -0.45, (152.339, 133.564, 214.557)), (' B  62  PHE  CD1', ' B  75  ILE HD12', -0.448, (151.908, 129.67, 229.109)), (' C  59  TYR  HH ', ' C  69  THR  H  ', -0.448, (141.747, 123.531, 197.003)), (' B  30  SER  OG ', ' B  31  ASN  N  ', -0.447, (152.032, 142.498, 212.872)), (' B  14  SER  HB3', ' B 106  ILE HD12', -0.446, (163.148, 121.611, 237.258)), (' B  33  LEU  O  ', ' B  51  ALA  N  ', -0.443, (149.898, 136.991, 218.208)), (' B  49  TYR  O  ', ' B  53  SER  OG ', -0.441, (145.649, 137.501, 220.109)), (' B  32  TYR  HA ', ' B  50  ALA  HA ', -0.439, (148.704, 138.462, 215.971)), (' A 388  ASN  ND2', ' A 388  ASN  O  ', -0.436, (144.226, 188.403, 194.738)), (' A 403  ARG  O  ', ' A 406  GLU  HG2', -0.435, (151.115, 164.879, 211.493)), (' C  92  ALA  HB3', ' C  94  TYR  CE1', -0.435, (149.785, 114.722, 205.767)), (' A 497  PHE  CE2', ' A 507  PRO  HB3', -0.431, (145.737, 165.499, 216.865)), (' A 377  PHE  HE1', ' A 384  PRO  HB3', -0.43, (151.335, 181.107, 199.619)), (' A 490  PHE  CE2', ' A 492  LEU  HB2', -0.428, (137.948, 152.532, 213.363)), (' A 456  PHE  HD2', ' A 491  PRO  HA ', -0.428, (142.45, 148.317, 210.535)), (' A 416  GLY  O  ', ' A 420  ASP  N  ', -0.427, (149.969, 157.243, 202.925)), (' B  24  ARG HH12', ' B  26  ARG  HD3', -0.425, (166.424, 134.682, 210.042)), (' B  94  TYR  N  ', ' B  95  PRO  HD2', -0.421, (150.104, 134.853, 202.976)), (' B  61  ARG  NH2', ' B  79  GLN HE21', -0.418, (147.037, 124.843, 234.582)), (' A 392  PHE  CD1', ' A 515  PHE  HB3', -0.418, (143.111, 178.702, 191.551)), (' A 418  ILE  HA ', ' A 422  ASN  ND2', -0.418, (146.784, 158.195, 206.74)), (' A 486  PHE  HA ', ' B  49  TYR  CE1', -0.417, (142.505, 137.749, 217.251)), (' B  32  TYR  HB2', ' B  92  ASN  OD1', -0.416, (149.958, 138.705, 211.699)), (' A 479  PRO  HG3', ' C  53  PHE  CZ ', -0.415, (131.997, 134.763, 205.482)), (' A 365  TYR  CB ', ' A 387  LEU HD11', -0.413, (145.896, 183.047, 197.573)), (' B  83  PHE  CE2', ' B 105  GLU  HB3', -0.409, (158.304, 119.967, 233.045)), (' A 355  ARG  NH2', ' A 398  ASP  OD2', -0.409, (139.948, 168.334, 198.063)), (' C  38  ARG  HD3', ' C  94  TYR  CZ ', -0.402, (149.857, 116.606, 204.638)), (' B  18  ARG  HA ', ' B  75  ILE  O  ', -0.4, (157.743, 130.685, 233.438)), (' C 102  SER  OG ', ' C 103  TYR  N  ', -0.4, (135.567, 132.68, 219.379))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
