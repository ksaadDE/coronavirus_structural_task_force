# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 101 ', 'PRO', None, (-17.80799999999999, 77.02, -15.081000000000007)), ('H', ' 161 ', 'PRO', None, (18.032000000000004, 78.717, -14.539)), ('H', ' 163 ', 'PRO', None, (13.161999999999992, 75.376, -12.683)), ('H', ' 178 ', 'HIS', None, (11.702999999999982, 61.504000000000005, -1.404)), ('L', '   8 ', 'PRO', None, (-6.584000000000002, 83.492, 10.005)), ('L', '  30 ', 'SER', None, (-21.310000000000002, 89.22300000000003, -2.700000000000002)), ('L', '  95 ', 'PRO', None, (-10.764000000000017, 92.789, -11.476000000000008)), ('L', ' 141 ', 'PRO', None, (9.022999999999998, 68.762, 15.623))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 422  ASN HD22', ' A 454  ARG  H  ', -0.868, (-34.975, 86.482, -10.442)), (' A 388  ASN  HB2', ' A 527  PRO  HD2', -0.854, (-65.266, 79.787, 1.904)), (' A 360  ASN  H  ', ' A 523  THR HG22', -0.851, (-65.055, 91.749, -6.079)), (' H  88  PRO  HA ', ' H 125  VAL HG21', -0.795, (12.751, 90.767, -12.447)), (' L 106  ILE HD11', ' L 171  SER  HB3', -0.785, (2.464, 65.782, 9.977)), (' A 472  ILE HD13', ' A 480  CYS  HB3', -0.763, (-23.257, 99.347, -18.475)), (' L  83  PHE  HZ ', ' L 165  GLU  HB3', -0.757, (4.895, 71.697, 3.067)), (' L 103  LYS  NZ ', ' L 165  GLU  OE1', -0.738, (4.243, 75.183, 2.03)), (' H  82  GLN  OE1', ' H  84  ASN  ND2', -0.727, (5.705, 92.663, -25.567)), (' L  12  SER  HA ', ' L 105  GLU  HB2', -0.698, (0.29, 74.498, 12.282)), (' L  89  GLN HE21', ' L  96  ARG  HB3', -0.695, (-10.704, 85.228, -9.417)), (' A 338  PHE  HE2', ' A 363  ALA  HB1', -0.695, (-61.644, 81.115, -3.722)), (' L  83  PHE  CZ ', ' L 165  GLU  HB3', -0.684, (4.4, 71.18, 3.315)), (' A 353  TRP  O  ', ' A 466  ARG  NH1', -0.67, (-46.887, 89.647, -11.84)), (' L 106  ILE  CD1', ' L 171  SER  HB3', -0.668, (1.519, 66.063, 10.289)), (' H 102  TYR  CE1', ' L  49  TYR  HB2', -0.663, (-18.254, 78.887, -7.179)), (' H 209  ILE HD12', ' H 224  LYS  HG3', -0.645, (22.521, 54.853, -14.266)), (' A 422  ASN  ND2', ' A 454  ARG  H  ', -0.638, (-35.047, 85.998, -9.617)), (' H  53  TYR  O  ', ' H  72  ARG  NH2', -0.634, (-12.568, 82.371, -27.325)), (' H 141  SER  OG ', ' H 144  SER  OG ', -0.616, (24.177, 55.822, 5.879)), (' L 120  PRO  HD3', ' L 132  VAL HG22', -0.613, (32.116, 66.136, 1.689)), (' H 112  GLY  H  ', ' L  91  SER  HB3', -0.61, (-16.481, 83.813, -10.502)), (' L  14  SER  HA ', ' L 106  ILE  HA ', -0.597, (-2.013, 69.048, 13.688)), (' A 401  VAL HG22', ' A 509  ARG  HA ', -0.591, (-44.392, 76.88, -10.22)), (' H 209  ILE HD11', ' H 222  ASP  HB3', -0.581, (21.81, 57.495, -16.209)), (' A 398  ASP  HB2', ' A 512  VAL  HB ', -0.578, (-47.712, 85.169, -4.412)), (' A 353  TRP  HZ3', ' A 355  ARG  HD3', -0.576, (-48.732, 90.716, -7.808)), (' A 403  ARG HH11', ' A 505  TYR  HE1', -0.575, (-30.089, 76.359, -5.84)), (' H  64  VAL  HB ', ' H  68  PHE  HB2', -0.574, (0.19, 92.738, -17.601)), (' A 419  ALA  HA ', ' A 423  TYR  O  ', -0.565, (-38.167, 88.22, -2.43)), (' H  93  VAL HG12', ' H 122  LEU  HB2', -0.563, (8.059, 78.887, -11.96)), (' L 115  VAL HG11', ' L 196  VAL HG21', -0.56, (21.207, 65.787, 12.358)), (' L 107  LYS  HD2', ' L 109  THR  O  ', -0.559, (4.279, 65.273, 16.226)), (' H 135  VAL HG23', ' H 223  LYS  HG3', -0.554, (24.328, 63.484, -11.697)), (' H   2  VAL HG22', ' H  27  PHE  HB3', -0.55, (-11.104, 70.369, -20.867)), (' L  90  GLN  N  ', ' L  90  GLN  OE1', -0.549, (-12.12, 87.319, -4.833)), (' H  83  MET  HB3', ' H  86  LEU HD21', -0.549, (6.385, 90.318, -19.119)), (' A 338  PHE  CE2', ' A 363  ALA  HB1', -0.548, (-61.55, 81.585, -3.908)), (' H  40  ALA  HB3', ' H  43  LYS  HB2', -0.547, (4.729, 85.148, -4.203)), (' A 425  LEU HD21', ' A 512  VAL HG11', -0.542, (-46.5, 86.995, -1.266)), (' H  67  ARG  HG3', ' H  85  SER  HB2', -0.541, (7.323, 97.58, -19.576)), (' H  73  ASP  HB3', ' H  78  THR HG23', -0.536, (-2.639, 79.558, -29.902)), (' H  83  MET  CB ', ' H  86  LEU HD21', -0.525, (6.836, 90.156, -19.565)), (' H 135  VAL HG12', ' H 156  VAL HG13', -0.525, (21.427, 68.504, -11.421)), (' L   5  THR  HA ', ' L 100  GLN  OE1', -0.525, (-6.509, 89.473, 3.434)), (' H 102  TYR  OH ', ' L  32  TYR  HA ', -0.522, (-18.903, 82.795, -6.263)), (' H 102  TYR  HD2', ' H 111  PRO  HA ', -0.52, (-18.461, 82.821, -10.64)), (' A 418  ILE  HA ', ' A 422  ASN  OD1', -0.515, (-35.618, 86.163, -6.1)), (' A 366  SER  HA ', ' A 369  TYR  CZ ', -0.509, (-60.917, 75.036, 3.19)), (' H 102  TYR  HE1', ' L  49  TYR  HB2', -0.499, (-19.258, 79.209, -6.839)), (' H 113  TYR  HE1', ' L  46  LEU  CD2', -0.497, (-14.021, 73.785, -8.427)), (' L 187  GLU  HG3', ' L 211  ARG  NH2', -0.497, (43.306, 65.789, 1.264)), (' H 149  THR  OG1', ' H 150  ALA  N  ', -0.493, (17.513, 52.206, 4.418)), (' A 357  ARG  NH2', ' A 394  ASN HD22', -0.492, (-59.616, 95.305, -5.472)), (' A 457  ARG  NH1', ' A 467  ASP  OD2', -0.491, (-35.198, 95.368, -9.957)), (' A 437  ASN  OD1', ' A 439  ASN  N  ', -0.49, (-41.967, 68.645, -10.048)), (' H 140  PRO  HD2', ' H 227  PRO  HA ', -0.486, (27.209, 53.369, -2.427)), (' H  11  VAL  HA ', ' H 124  THR  O  ', -0.484, (14.304, 84.795, -16.305)), (' H 169  ASN  HB3', ' H 172  ALA  HB3', -0.483, (13.109, 53.523, -11.388)), (' H  17  SER  HB2', ' H  84  ASN  HA ', -0.482, (8.303, 92.066, -23.602)), (' H  12  VAL HG11', ' H  18  LEU HD22', -0.481, (11.047, 87.229, -19.505)), (' H 113  TYR  HE1', ' L  46  LEU HD22', -0.479, (-13.662, 74.144, -8.411)), (' L  40  PRO  HB2', ' L 165  GLU  OE2', -0.476, (5.441, 73.507, -0.271)), (' L  25  ALA  HB3', ' L  69  THR  HA ', -0.476, (-16.775, 90.918, 2.263)), (' L  61  ARG  NH1', ' L  79  GLN  HG3', -0.472, (-8.746, 64.49, 6.808)), (' A 415  THR HG23', ' A 420  ASP  OD2', -0.464, (-31.003, 89.41, 1.015)), (' A 421  TYR  CD1', ' A 457  ARG  HB3', -0.463, (-31.047, 92.438, -6.688)), (' H 131  LYS  NZ ', ' H 132  GLY  O  ', -0.461, (25.744, 74.085, -15.025)), (' A 432  CYS  HB2', ' A 513  LEU  HB2', -0.461, (-52.755, 82.497, 0.793)), (' H 102  TYR  CD2', ' H 111  PRO  HA ', -0.459, (-18.661, 82.886, -10.404)), (' L  30  SER  OG ', ' L  31  ASP  N  ', -0.459, (-23.157, 86.715, -3.047)), (' H  93  VAL  HA ', ' H 122  LEU  HA ', -0.458, (7.324, 80.741, -13.162)), (' L  18  ARG  HB2', ' L  18  ARG  HE ', -0.457, (-13.781, 70.101, 14.884)), (' A 368  LEU  HA ', ' A 374  PHE  HE2', -0.456, (-55.674, 73.056, -1.993)), (' H 113  TYR  CG ', ' H 113  TYR  O  ', -0.454, (-14.552, 77.655, -10.683)), (' L  23  CYS  HB2', ' L  35  TRP  CH2', -0.453, (-11.987, 83.632, 3.639)), (' L  11  LEU HD11', ' L  13  ALA  HB2', -0.452, (-4.655, 74.852, 13.54)), (' A 403  ARG  HA ', ' A 506  GLN  O  ', -0.451, (-36.642, 74.169, -8.207)), (' A 394  ASN  OD1', ' A 516  GLU  HG2', -0.447, (-57.767, 93.602, -1.954)), (' H   3  GLN  HB2', ' H  25  SER  HB3', -0.446, (-4.821, 68.571, -22.689)), (' L  17  ASP  HB3', ' L  19  VAL HG13', -0.445, (-7.981, 72.4, 14.701)), (' H  69  THR HG23', ' H  82  GLN  HB3', -0.443, (1.713, 90.559, -25.237)), (' H 150  ALA  HB3', ' H 198  VAL HG23', -0.442, (19.385, 51.623, 1.394)), (' H 214  HIS  CE1', ' H 216  PRO  HG2', -0.441, (17.477, 75.913, -17.137)), (' A 456  PHE  HB3', ' A 473  TYR  CG ', -0.439, (-26.427, 92.702, -10.881)), (' L  63  SER  O  ', ' L  74  THR  N  ', -0.438, (-14.924, 76.153, 5.97)), (' H  99  ASP  OD1', ' H 112  GLY  HA2', -0.436, (-14.844, 82.702, -13.969)), (' A 417  LYS  O  ', ' A 421  TYR  HB2', -0.432, (-33.356, 88.087, -5.749)), (' A 519  HIS  ND1', ' A 519  HIS  O  ', -0.432, (-63.993, 103.527, 2.661)), (' L   4  MET  HE1', ' L  25  ALA  HB2', -0.432, (-14.58, 89.788, 1.045)), (' A 442  ASP  OD1', ' A 509  ARG  NH2', -0.429, (-45.562, 73.584, -14.422)), (' L 125  LEU  O  ', ' L 183  LYS  HD2', -0.428, (39.004, 67.596, -6.698)), (' H 159  TYR  OH ', ' H 162  GLU  OE2', -0.428, (16.279, 73.813, -8.827)), (' L 124  GLN  HG2', ' L 129  THR  O  ', -0.427, (33.774, 69.215, -5.489)), (' H 128  ALA  HB3', ' H 160  PHE  CE2', -0.427, (20.774, 83.839, -14.088)), (' L  32  TYR  HB2', ' L  92  TYR  HB2', -0.426, (-18.819, 87.39, -6.565)), (' A 425  LEU HD23', ' A 464  PHE  HE1', -0.423, (-46.096, 89.611, -0.933)), (' A 365  TYR  HD1', ' A 388  ASN  HB3', -0.423, (-62.707, 80.053, 2.385)), (' L   6  GLN  O  ', ' L 100  GLN  NE2', -0.422, (-4.933, 87.102, 5.546)), (' H  60  TYR  HB2', ' H  65  LYS  CG ', -0.42, (-4.493, 96.035, -17.307)), (' H 154  CYS  HB2', ' H 168  TRP  CZ2', -0.419, (19.353, 61.14, -6.763)), (' H 167  SER  HB3', ' H 171  GLY  HA2', -0.419, (11.447, 59.208, -12.25)), (' L 139  PHE  N  ', ' L 172  THR  HB ', -0.418, (10.223, 63.742, 10.87)), (' A 383  SER  O  ', ' A 387  LEU  HB2', -0.417, (-58.591, 81.099, 6.507)), (' H  39  GLN  O  ', ' H  92  ALA  HB1', -0.416, (5.089, 83.411, -9.058)), (' H 167  SER  N  ', ' H 211  ASN  O  ', -0.416, (14.083, 62.215, -12.226)), (' H 158  ASP  HB3', ' H 189  LEU HD13', -0.416, (26.986, 76.356, -9.893)), (' A 360  ASN  H  ', ' A 523  THR  CG2', -0.415, (-65.682, 92.185, -5.509)), (' A 393  THR  O  ', ' A 523  THR  HB ', -0.415, (-63.622, 93.382, -3.043)), (' H 199  PRO  HB2', ' H 202  SER  HB3', -0.414, (17.175, 46.099, -1.211)), (' A 416  GLY  O  ', ' A 420  ASP  HB2', -0.414, (-32.377, 88.393, -1.643)), (' H  28  THR HG22', ' H  31  SER  H  ', -0.414, (-14.766, 75.773, -26.093)), (' H  12  VAL HG11', ' H  86  LEU HD12', -0.414, (10.968, 88.665, -18.015)), (' H 133  PRO  HD2', ' H 219  THR HG21', -0.412, (22.195, 70.431, -16.774)), (' H 209  ILE HG13', ' H 223  LYS  C  ', -0.411, (22.56, 57.758, -12.412)), (' H  35  HIS  NE2', ' H  99  ASP  OD2', -0.41, (-12.148, 83.89, -16.062)), (' L  46  LEU  HG ', ' L  47  LEU  N  ', -0.41, (-12.037, 73.876, -5.111)), (' H  91  THR HG23', ' H 124  THR  HA ', -0.409, (12.355, 85.35, -11.844)), (' H  38  ARG  NH2', ' H  46  GLU  OE2', -0.409, (2.047, 90.726, -10.622)), (' H  38  ARG  HD3', ' H  94  TYR  CE2', -0.407, (3.305, 86.961, -13.528)), (' L  29  ILE HD12', ' L  33  LEU HD11', -0.406, (-16.803, 87.568, -1.677)), (' H  51  ILE HD13', ' H  72  ARG  HG2', -0.405, (-7.228, 85.079, -26.437)), (' H 179  THR HG22', ' H 194  SER  OG ', -0.404, (14.112, 63.872, -5.191)), (' A 453  TYR  HD1', ' A 495  TYR  CE1', -0.403, (-34.228, 80.764, -11.019)), (' H 112  GLY  N  ', ' L  91  SER  HB3', -0.403, (-16.556, 84.035, -10.62)), (' H  36  TRP  CD1', ' H  81  LEU  HB2', -0.402, (-0.847, 85.534, -20.22)), (' A 389  ASP  HA ', ' A 528  GLY  O  ', -0.402, (-67.895, 82.2, 6.762))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
