# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('E', ' 146 ', 'PRO', None, (219.48399999999998, 139.686, 278.49))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 105  ILE  HB ', ' B 239  GLN  HB2', -0.631, (169.966, 160.283, 208.008)), (' C  46  SER  HA ', ' C 279  TYR  O  ', -0.618, (231.414, 183.485, 176.972)), (' A  51  THR  O  ', ' A 274  THR  HA ', -0.614, (187.936, 228.219, 186.298)), (' A  46  SER  HA ', ' A 279  TYR  O  ', -0.611, (198.784, 235.87, 176.443)), (' C 901  GLN HE21', ' C 905  ARG HH21', -0.597, (208.531, 185.601, 131.359)), (' E 260  GLY  HA3', ' E 612  PRO  HD3', -0.574, (197.382, 145.564, 301.007)), (' A 127  VAL HG21', ' A1302  NAG  H62', -0.566, (191.646, 253.892, 212.21)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.56, (261.706, 205.693, 203.242)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.554, (256.668, 197.431, 194.17)), (' C 821  LEU HD11', ' C 939  SER  HB2', -0.552, (227.852, 184.289, 148.413)), (' B 821  LEU HD11', ' B 939  SER  HB3', -0.548, (172.719, 183.96, 147.605)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.548, (163.45, 253.042, 199.791)), (' C 201  PHE  HB3', ' C 229  LEU  HB2', -0.546, (235.521, 187.672, 205.956)), (' E 455  MET  HG2', ' E 480  MET  HE2', -0.545, (205.935, 159.453, 293.175)), (' E 261  CYS  HB2', ' E 488  VAL  HB ', -0.544, (201.713, 147.934, 298.734)), (' C 659  SER  HB3', ' C 698  SER  HB3', -0.542, (229.68, 217.518, 149.711)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.537, (155.979, 167.786, 211.851)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.535, (171.043, 143.245, 200.982)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.533, (170.97, 217.181, 148.435)), (' A 278  LYS  HE3', ' A 287  ASP  HB2', -0.532, (191.028, 237.831, 176.038)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.525, (181.221, 170.392, 177.14)), (' C 762  GLN  OE1', ' C 765  ARG  NH1', -0.524, (189.831, 188.868, 174.746)), (' C  26  PRO  HB3', ' C  65  PHE  HE1', -0.523, (253.21, 205.056, 199.297)), (' B 125  ASN HD22', ' B 171  VAL HG13', -0.521, (154.102, 171.746, 208.655)), (' C 323  THR  OG1', ' C 324  GLU  OE1', -0.516, (227.982, 227.757, 192.081)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.514, (167.33, 152.01, 192.073)), (' A 699  LEU HD11', ' B 869  MET  HB3', -0.512, (174.262, 208.909, 150.326)), (' A 142  GLY  HA3', ' A 156  GLU  HB3', -0.509, (179.186, 261.753, 210.343)), (' A 143  VAL  HA ', ' A 154  GLU  HA ', -0.509, (182.74, 264.175, 208.207)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.508, (183.473, 231.323, 177.422)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.506, (177.868, 230.156, 177.698)), (' B1048  HIS  HA ', ' B1066  THR HG22', -0.505, (190.268, 190.328, 135.213)), (' E  20  THR HG23', ' E  23  GLU  H  ', -0.504, (220.373, 192.904, 260.906)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.501, (234.486, 199.189, 178.03)), (' C 599  THR  HB ', ' C 608  VAL HG12', -0.498, (234.342, 205.531, 168.643)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.496, (184.132, 166.294, 177.549)), (' E 152  MET  O  ', ' E 161  ARG  NH1', -0.496, (208.353, 138.084, 286.537)), (' E 201  ASP  OD2', ' E 219  ARG  NH1', -0.495, (213.565, 177.612, 284.899)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.49, (236.359, 204.42, 178.75)), (' A  93  ALA  HB3', ' A 266  TYR  HB2', -0.489, (178.161, 246.183, 191.665)), (' B 128  ILE HD13', ' B 170  TYR  HD2', -0.486, (161.321, 173.828, 205.882)), (' A1143  PRO  HA ', ' A1146  ASP  HB2', -0.485, (193.734, 205.69, 90.608)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.483, (200.505, 232.122, 147.632)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.481, (196.018, 233.49, 190.167)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.48, (186.845, 167.818, 168.087)), (' C 125  ASN HD22', ' C 171  VAL HG13', -0.478, (245.604, 177.075, 210.573)), (' C  27  ALA  HB3', ' C  64  TRP  HB3', -0.478, (255.216, 203.442, 194.156)), (' C 105  ILE  O  ', ' C 238  PHE  HA ', -0.477, (244.463, 196.439, 208.389)), (' B 156  GLU  OE2', ' B 158  ARG  NH1', -0.476, (157.606, 150.442, 214.333)), (' B 756  TYR  OH ', ' B 994  ASP  OD1', -0.476, (195.096, 205.67, 192.341)), (' B 193  VAL  HB ', ' B 204  TYR  HB2', -0.475, (169.618, 170.818, 194.006)), (' A 916  LEU HD22', ' A 923  ILE HD13', -0.475, (199.902, 219.757, 123.427)), (' B 914  ASN  ND2', ' B1111  GLU  OE2', -0.474, (189.27, 187.8, 114.629)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.473, (167.444, 251.524, 199.261)), (' B  94  SER  HB2', ' B 190  ARG  HB2', -0.47, (162.555, 161.16, 194.058)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.467, (258.533, 203.304, 202.061)), (' E 297  MET  HB3', ' E 302  TRP  HB2', -0.467, (204.501, 137.422, 257.368)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.466, (213.836, 193.28, 104.555)), (' A  36  VAL HG13', ' A 222  ALA  HA ', -0.466, (189.462, 241.618, 185.782)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.465, (178.423, 227.277, 167.84)), (' A 985  ASP  N  ', ' A 985  ASP  OD1', -0.461, (208.991, 210.845, 206.371)), (' B 176  LEU HD22', ' B 190  ARG  HG2', -0.461, (159.616, 163.542, 196.015)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.46, (169.0, 248.007, 191.393)), (' C  93  ALA  HB3', ' C 266  TYR  HB2', -0.46, (249.428, 196.173, 193.713)), (' B 518  LEU HD23', ' B 520  ALA  H  ', -0.459, (226.185, 191.024, 215.402)), (' B 669  GLY  HA2', ' B 697  MET  HE3', -0.459, (202.876, 171.744, 156.309)), (' A 226  LEU  HG ', ' A 227  VAL HG23', -0.457, (194.619, 245.641, 199.836)), (' B 126  VAL HG23', ' B 174  PRO  HA ', -0.457, (155.686, 168.322, 202.054)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.456, (213.638, 195.765, 135.504)), (' A1107  ARG HH22', ' B 907  ASN HD22', -0.455, (191.329, 198.886, 120.26)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.454, (171.107, 147.225, 199.869)), (' A1040  VAL HG21', ' B1035  GLY  HA3', -0.454, (191.013, 203.735, 135.221)), (' A  46  SER  CA ', ' A 279  TYR  O  ', -0.452, (199.54, 235.913, 176.546)), (' E 555  PHE  HA ', ' E 558  LEU  HB2', -0.451, (203.09, 166.474, 258.925)), (' E 535  HIS  NE2', ' E 538  PRO  O  ', -0.45, (186.205, 153.952, 265.756)), (' B  40  ASP  N  ', ' B  40  ASP  OD1', -0.447, (171.884, 180.563, 189.77)), (' C 555  SER  HB3', ' C 586  ASP  HB2', -0.446, (214.705, 236.472, 184.277)), (' C  36  VAL HG23', ' C 222  ALA  HA ', -0.444, (239.942, 189.213, 186.88)), (' A  48  LEU  HB3', ' A 276  LEU HD11', -0.441, (192.76, 229.405, 177.793)), (' C 276  LEU  HB3', ' C 289  VAL  HB ', -0.441, (232.737, 195.677, 179.316)), (' A1074  ASN  OD1', ' B 895  GLN  NE2', -0.44, (176.181, 211.55, 122.951)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.439, (194.699, 246.562, 206.803)), (' A 156  GLU  OE2', ' A 158  ARG  NH1', -0.439, (175.763, 260.866, 214.518)), (' A 229  LEU  HG ', ' A 231  ILE HG23', -0.439, (192.438, 239.388, 208.215)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.439, (197.183, 213.308, 135.168)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.438, (181.295, 226.576, 160.85)), (' B  48  LEU  HB3', ' B 276  LEU HD11', -0.437, (177.109, 179.537, 177.008)), (' B 192  PHE  HA ', ' B 204  TYR  O  ', -0.437, (166.65, 168.524, 195.029)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.436, (188.606, 191.43, 104.217)), (' B 396  TYR  HB2', ' B 514  SER  HB3', -0.436, (225.137, 181.381, 226.376)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.435, (200.134, 166.083, 149.587)), (' B  97  LYS  HG2', ' B 186  PHE  HD1', -0.435, (158.288, 152.887, 191.382)), (' E 321  PRO  O  ', ' E 380  GLN  NE2', -0.435, (206.205, 158.433, 253.913)), (' E 482  ARG  NH1', ' E 608  THR  O  ', -0.435, (201.686, 151.314, 303.476)), (' C  39  PRO  HG3', ' C  55  PHE  HZ ', -0.433, (232.313, 191.796, 189.206)), (' A 195  LYS  O  ', ' A 201  PHE  HA ', -0.429, (189.189, 236.252, 202.829)), (' A  52  GLN  HB2', ' A 274  THR HG22', -0.429, (187.954, 224.936, 187.478)), (' B 907  ASN HD21', ' B 913  GLN  HG3', -0.428, (189.821, 196.918, 119.17)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.426, (179.96, 183.919, 142.694)), (' A 206  LYS  HB2', ' A 223  LEU  HA ', -0.425, (190.804, 244.802, 189.803)), (' A 540  ASN  OD1', ' A 549  THR  OG1', -0.425, (171.021, 206.169, 191.141)), (' C  46  SER  CA ', ' C 279  TYR  O  ', -0.424, (231.065, 182.804, 177.063)), (' A 189  LEU  HB2', ' A 210  ILE HD13', -0.424, (182.764, 252.9, 187.106)), (' C 193  VAL HG23', ' C 223  LEU HD22', -0.424, (241.293, 190.389, 193.66)), (' C 127  VAL HG22', ' C 171  VAL HG22', -0.424, (245.347, 179.354, 212.408)), (' B 164  ASN  OD1', ' B 165  ASN  N  ', -0.424, (168.821, 169.43, 222.868)), (' C 278  LYS  HB2', ' C 278  LYS  HE3', -0.423, (233.688, 189.557, 176.601)), (' E 482  ARG  O  ', ' E 606  TRP  NE1', -0.423, (198.632, 153.966, 296.912)), (' E 183  TYR  OH ', ' E 509  ASP  OD1', -0.422, (220.873, 163.929, 284.765)), (' C 934  ILE  HA ', ' C 934  ILE HD13', -0.42, (224.484, 190.471, 143.126)), (' B 598  ILE HG23', ' B 664  ILE HG21', -0.42, (191.71, 170.352, 163.532)), (' A 231  ILE HD12', ' A 233  ILE HG12', -0.419, (188.145, 236.253, 210.277)), (' C 756  TYR  OH ', ' C 994  ASP  OD1', -0.419, (197.148, 194.02, 192.533)), (' E 252  TYR  HB3', ' E 255  TYR  HD2', -0.419, (201.204, 134.657, 295.66)), (' C 720  ILE HG13', ' C 923  ILE HG23', -0.418, (220.078, 190.816, 128.402)), (' B1029  MET  HB2', ' B1029  MET  HE2', -0.417, (186.33, 201.079, 145.848)), (' A1086  LYS  HB2', ' A1086  LYS  HE2', -0.416, (186.387, 193.531, 102.496)), (' B 327  VAL HG12', ' B 542  ASN  HB3', -0.416, (215.2, 171.953, 199.303)), (' B 418  ILE  HA ', ' B 422  ASN  HB2', -0.416, (224.496, 180.468, 243.463)), (' E 610  TRP  HE3', ' E 614  ALA  HB3', -0.416, (204.535, 145.137, 307.079)), (' B 790  LYS  HB3', ' B 790  LYS  HE2', -0.416, (168.937, 206.459, 136.896)), (' C1086  LYS  HB2', ' C1086  LYS  HE2', -0.416, (202.821, 215.092, 102.441)), (' A 913  GLN  H  ', ' A 913  GLN  HG2', -0.415, (201.809, 210.952, 118.319)), (' A  97  LYS  HG2', ' A 186  PHE  HD1', -0.414, (178.796, 259.401, 191.514)), (' B 996  LEU  HA ', ' B 996  LEU HD23', -0.414, (189.05, 198.473, 191.213)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.413, (230.253, 177.348, 231.575)), (' B 903  ALA  HB2', ' B 916  LEU HD12', -0.412, (183.978, 194.564, 121.379)), (' B 139  PRO  HB3', ' B 159  VAL  HA ', -0.412, (165.061, 157.614, 212.787)), (' C  51  THR  O  ', ' C 274  THR  HA ', -0.411, (229.247, 197.098, 186.962)), (' C  52  GLN  OE1', ' C 274  THR  OG1', -0.411, (227.262, 200.052, 186.994)), (' B1094  VAL HG23', ' C 900  MET  HE1', -0.41, (206.536, 183.575, 118.724)), (' C 105  ILE  HB ', ' C 239  GLN  HB3', -0.41, (247.827, 196.557, 210.039)), (' C 885  GLY  HA2', ' C 901  GLN  NE2', -0.41, (207.654, 183.934, 131.057)), (' E 307  ILE HG23', ' E 369  PHE  HD1', -0.409, (205.155, 144.53, 259.077)), (' E 269  ASP  OD1', ' E 277  ASN  ND2', -0.408, (208.099, 142.947, 281.463)), (' C 132  GLU  OE1', ' C 165  ASN  ND2', -0.405, (236.642, 192.42, 224.851)), (' B 203  ILE  HB ', ' B 227  VAL HG12', -0.403, (165.19, 173.361, 200.441)), (' B 358  ILE  HB ', ' B 395  VAL  HB ', -0.403, (228.25, 177.213, 221.159)), (' E 115  ARG  HA ', ' E 115  ARG  HD2', -0.401, (234.62, 163.747, 288.624)), (' B1074  ASN  OD1', ' C 895  GLN  NE2', -0.4, (202.217, 172.847, 123.395)), (' C  39  PRO  HG2', ' C  51  THR HG21', -0.4, (230.45, 190.823, 188.139))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
