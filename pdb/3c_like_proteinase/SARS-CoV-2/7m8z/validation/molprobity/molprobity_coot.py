# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.012895033948651248, (-3.9459999999999997, -5.814, -0.9060000000000001)), ('A', '  55 ', 'GLU', 0.013393699871236682, (0.6119999999999948, 10.700999999999997, 36.36500000000001)), ('A', '  57 ', 'LEU', 0.014808087974354402, (6.030999999999999, 11.329999999999997, 35.22200000000001)), ('A', '  93 ', 'THR', 0.15812488189103927, (0.4629999999999983, 26.815999999999995, 15.265000000000002)), ('A', ' 286 ', 'LEU', 0.08731183091894877, (-4.168, -20.335, 1.803)), ('A', ' 288 ', 'GLU', 0.13596782109928612, (-7.143000000000001, -14.948, 3.0480000000000005)), ('A', ' 301 ', 'SER', 0.10569813449425279, (-16.297, -1.8719999999999999, -8.341))]
data['cbeta'] = []
data['probe'] = [(' A 235  MET  HE1', ' A 241  PRO  HA ', -0.705, (-18.548, -19.921, 13.754)), (' A   5  LYS  HE3', ' A 518  HOH  O  ', -0.699, (-4.015, -7.394, 4.545)), (' A  50  LEU  O  ', ' A  50  LEU HD23', -0.662, (6.975, -3.528, 34.659)), (' A 235  MET  HE1', ' A 241  PRO  CA ', -0.617, (-18.422, -19.175, 13.882)), (' A 153  ASP  O  ', ' A 155  ASP  N  ', -0.604, (-14.154, 11.006, 1.606)), (' A  92  ASP  OD1', ' A  93  THR HG22', -0.58, (2.911, 27.045, 16.582)), (' A 231  ASN  O  ', ' A 235  MET  HG2', -0.566, (-18.569, -23.83, 14.199)), (' A 188  ARG  NH1', ' A 190  THR HG21', -0.559, (3.348, -4.414, 34.31)), (' A 301  SER  HB2', ' A 631  HOH  O  ', -0.553, (-17.545, 0.001, -6.946)), (' A  86  VAL HG23', ' A 179  GLY  HA2', -0.552, (-4.152, 6.416, 23.106)), (' A  34  ASP  OD2', ' A  90  LYS  HE2', -0.539, (-4.443, 25.368, 20.318)), (' A 241  PRO  HG2', ' A 675  HOH  O  ', -0.518, (-19.68, -15.389, 16.439)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.499, (-23.959, -8.625, 7.597)), (' A 228  ASN  O  ', ' A 232  LEU HD23', -0.49, (-23.923, -25.929, 12.602)), (' A 236  LYS  HD2', ' A 236  LYS  O  ', -0.489, (-11.521, -28.062, 13.801)), (' A 190  THR HG22', ' A 664  HOH  O  ', -0.484, (5.881, -6.089, 34.751)), (' A 224  THR HG22', ' A 225  THR  N  ', -0.469, (-26.148, -24.539, 2.041)), (' A  49  MET  HG3', ' A  49  MET  O  ', -0.462, (8.851, 0.122, 31.254)), (' A 235  MET  HB3', ' A 686  HOH  O  ', -0.453, (-17.125, -24.51, 17.846)), (' A  75  LEU HD22', ' A  93  THR  CG2', -0.449, (3.822, 24.646, 14.626)), (' A  59  ILE HG13', ' A 513  HOH  O  ', -0.438, (0.742, 14.408, 36.695)), (' A 231  ASN  O  ', ' A 235  MET  HE2', -0.431, (-19.137, -22.897, 13.794)), (' A 192  GLN HE21', ' A 401  YTV  C12', -0.43, (3.945, -5.42, 27.858)), (' A 256  GLN  OE1', ' A 501  HOH  O  ', -0.429, (-19.614, -5.749, -6.931)), (' A 198  THR HG22', ' A 238  ASN  OD1', -0.428, (-10.027, -19.419, 16.934)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.428, (-0.202, 21.108, 12.691)), (' A 235  MET  HG3', ' A 686  HOH  O  ', -0.427, (-17.981, -24.016, 17.877)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.422, (-1.391, 7.096, 28.442)), (' A 236  LYS  HG3', ' A 237  TYR  CD2', -0.412, (-12.757, -28.006, 11.374)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.411, (-0.448, 20.42, 12.445)), (' A 230  PHE  CD1', ' A 265  CYS  HB3', -0.411, (-20.524, -22.202, 5.529)), (' A  56  ASP  OD2', ' A 502  HOH  O  ', -0.404, (5.911, 9.034, 40.939))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
