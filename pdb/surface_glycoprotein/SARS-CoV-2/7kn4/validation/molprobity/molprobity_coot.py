# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 147 ', 'PRO', None, (51.775999999999996, -17.758, 9.79)), ('H', ' 149 ', 'PRO', None, (47.816, -21.502, 6.849000000000001)), ('L', ' 142 ', 'PRO', None, (48.39399999999999, -50.426, 8.792)), ('M', ' 147 ', 'PRO', None, (32.96099999999997, -18.933, 40.157)), ('M', ' 149 ', 'PRO', None, (31.437000000000005, -15.647000000000007, 45.188)), ('N', ' 142 ', 'PRO', None, (30.41799999999997, 13.0, 42.991))]
data['rota'] = [('M', '  82C', 'VAL', 0.294696615390361, (17.537, -23.951, 35.941))]
data['cbeta'] = [('N', ' 181 ', 'LEU', ' ', 0.2706447291562195, (49.572, -5.567000000000004, 27.667999999999996)), ('N', ' 204 ', 'GLU', ' ', 0.29414287179714954, (46.95399999999999, 10.334, 34.476))]
data['probe'] = [(' B 403  ARG  NH2', ' B 405  ASP  OD2', -0.886, (-12.465, -2.76, 52.852)), (' N 179  LEU  HG ', ' N 181  LEU HD12', -0.827, (47.048, -3.228, 29.585)), (' M  36  TRP  HD1', ' M  69  MET  HE3', -0.801, (11.538, -22.625, 50.461)), (' N   3  VAL HG22', ' N  97  VAL HG21', -0.792, (2.252, -7.731, 43.784)), (' B 403  ARG  HG3', ' B 406  GLU  HG3', -0.777, (-13.934, -3.078, 57.74)), (' H  66  ARG  HG2', ' M 172  SER  HB2', -0.758, (34.799, -10.352, 25.302)), (' M   3  THR  HB ', ' M  25  SER  HB2', -0.753, (20.846, -20.416, 64.249)), (' H  12  VAL HG21', ' H  18  LEU HD23', -0.742, (41.806, -11.929, 13.524)), (' N 179  LEU HD11', ' N 181  LEU HD11', -0.706, (47.174, -2.253, 27.665)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.697, (28.739, -37.857, 8.03)), (' L   3  VAL HG22', ' L  97  VAL HG11', -0.693, (24.041, -29.561, 25.005)), (' L 133  LEU HD12', ' L 179  LEU HD23', -0.685, (70.012, -36.077, 8.816)), (' B 366  SER  O  ', ' B 368  LEU  N  ', -0.684, (-38.902, 5.182, 63.547)), (' B 363  ALA  O  ', ' B 526  GLY  HA2', -0.679, (-42.821, 2.451, 71.141)), (' N 109  GLN  HG3', ' N 110  PRO  HD2', -0.662, (28.12, 14.764, 50.745)), (' N 179  LEU  HG ', ' N 181  LEU  CD1', -0.651, (47.497, -2.869, 28.929)), (' N  37  GLN  HB2', ' N  47  LEU HD11', -0.64, (14.387, 0.321, 55.404)), (' B 353  TRP  CE3', ' B 466  ARG  NH1', -0.63, (-19.909, -4.541, 73.607)), (' L  83  GLU  HG2', ' L 106  VAL HG23', -0.612, (36.598, -45.901, 8.316)), (' N  28  ILE  O  ', ' N  66  ARG  NH1', -0.596, (-4.599, -3.093, 53.831)), (' H 164  HIS  NE2', ' L 168  GLN  HG2', -0.588, (48.934, -39.209, 1.382)), (' A 408  ARG  HG3', ' A 408  ARG HH11', -0.585, (1.349, -31.193, 30.796)), (' L  32  THR HG21', ' L  50  PHE  HD1', -0.583, (15.037, -31.588, 12.646)), (' N 181  LEU  HB3', ' N 185  GLN  OE1', -0.579, (49.923, -6.025, 26.051)), (' M  30  SER  HB2', ' M  76  ASN  OD1', -0.575, (15.393, -27.795, 63.745)), (' M  38  ARG  HB3', ' M  48  ILE HD11', -0.563, (14.922, -16.724, 44.818)), (' L 109  GLN  HB2', ' L 141  TYR  CZ ', -0.563, (42.747, -50.228, 7.291)), (' B 353  TRP  CZ3', ' B 466  ARG  NH1', -0.554, (-20.182, -5.098, 74.308)), (' N 180  SER  O  ', ' N 181  LEU  HG ', -0.545, (47.173, -5.442, 27.628)), (' A 461  LEU HD22', ' A 465  GLU  HB3', -0.54, (-7.436, -26.409, 12.932)), (' N  35  TRP  HB2', ' N  48  ILE  HB ', -0.537, (8.079, -0.912, 56.68)), (' N  78  LEU HD21', ' N 106  VAL HG22', -0.533, (18.715, 11.239, 51.923)), (' N 123  SER  O  ', ' N 127  GLN  HG2', -0.533, (57.49, -12.497, 37.727)), (' M   4  LEU HD21', ' M  35A TRP  HZ3', -0.529, (14.702, -20.016, 60.324)), (' A 359  SER  HA ', ' A 524  VAL HG22', -0.529, (-26.857, -37.786, 22.354)), (' B 403  ARG  NE ', ' B 405  ASP  OD1', -0.528, (-12.837, -2.421, 55.101)), (' N 162  THR HG23', ' N 177  SER  HB2', -0.516, (38.054, 1.249, 35.169)), (' A 444  LYS  HB3', ' A 448  ASN  HB2', -0.516, (6.296, -49.024, 18.933)), (' L  27A SER  OG ', ' M  15  SER  HB2', -0.516, (17.953, -28.504, 30.173)), (' M  71  LEU HD23', ' M  78  PHE  HB3', -0.512, (12.241, -26.786, 56.977)), (' A 342  PHE  HZ ', ' A 434  ILE HD13', -0.511, (-12.934, -39.559, 29.013)), (' M 119  PRO  HB3', ' M 145  TYR  HB3', -0.508, (40.217, -15.96, 41.643)), (' N 179  LEU  CD1', ' N 181  LEU HD11', -0.503, (46.477, -2.684, 28.321)), (' N 179  LEU  CG ', ' N 181  LEU  CD1', -0.503, (47.419, -2.535, 28.776)), (' N 133  LEU HD12', ' N 179  LEU HD23', -0.502, (48.429, -1.223, 31.047)), (' H 203  SER  OG ', ' H 205  THR  OG1', -0.498, (54.704, -13.816, 1.965)), (' L  32  THR  CG2', ' L  50  PHE  HA ', -0.488, (15.268, -32.963, 13.141)), (' B 353  TRP  NE1', ' B 466  ARG  HB2', -0.487, (-17.519, -6.665, 72.479)), (' B 403  ARG HH21', ' B 405  ASP  CG ', -0.487, (-13.31, -2.977, 53.438)), (' M 127  SER  HB3', ' M 131  THR  N  ', -0.481, (54.304, 4.181, 47.991)), (' M  35  TYR  O  ', ' M  95  PRO  HD2', -0.478, (8.447, -18.224, 58.249)), (' M   4  LEU HD11', ' M  94  THR HG22', -0.475, (14.039, -17.402, 59.337)), (' L  32  THR HG21', ' L  50  PHE  HA ', -0.471, (15.444, -32.563, 13.33)), (' B 403  ARG  HG3', ' B 406  GLU  CG ', -0.47, (-13.627, -3.252, 58.237)), (' A 412  PRO  HG3', ' A 429  PHE  HB3', -0.47, (-11.269, -24.972, 27.54)), (' N 109  GLN  HB3', ' N 141  TYR  CE1', -0.468, (27.043, 14.015, 46.995)), (' M  47  TRP  CZ2', ' M  49  GLY  HA2', -0.464, (5.732, -18.146, 49.017)), (' L 120  PRO  HA ', ' L 133  LEU HD23', -0.462, (69.036, -35.392, 2.505)), (' B 392  PHE  N  ', ' B 522  ALA  HB1', -0.461, (-41.452, -6.113, 76.643)), (' B 412  PRO  HG3', ' B 429  PHE  HB3', -0.46, (-28.116, -12.881, 63.736)), (' M  47  TRP  CD2', ' N  96  TRP  HB3', -0.456, (5.635, -14.445, 48.877)), (' L 151  ALA  HB1', ' L 189  HIS  CD2', -0.456, (76.11, -38.808, 11.435)), (' H  71  LEU HD23', ' H  78  PHE  HB3', -0.452, (24.536, -11.296, 7.248)), (' A 408  ARG  HG3', ' A 408  ARG  NH1', -0.448, (2.205, -31.192, 31.205)), (' H 119  PRO  HB3', ' H 145  TYR  HB3', -0.445, (56.47, -20.483, 4.747)), (' M  66  ARG  NH2', ' M  86  ASP  OD1', -0.442, (14.079, -20.366, 37.697)), (' B 487  ASN  ND2', ' M  34  TYR  OH ', -0.442, (8.993, -17.107, 66.936)), (' A 502  GLY  O  ', ' A 506  GLN  HG3', -0.437, (8.398, -42.351, 29.394)), (' N  83  GLU  HG2', ' N 106  VAL HG23', -0.433, (20.968, 9.111, 50.864)), (' H 159  LEU HD21', ' H 182  VAL HG21', -0.432, (53.622, -34.205, -10.959)), (' L 100  ARG  HD3', ' L 100  ARG  O  ', -0.431, (34.632, -33.944, 20.225)), (' N  47  LEU  O  ', ' N  48  ILE HD13', -0.425, (9.877, -0.377, 60.9)), (' H  35  TYR  O  ', ' H  95  PRO  HD2', -0.425, (21.153, -19.709, 8.785)), (' B 343  ASN HD22', ' B1501  NAG  H83', -0.423, (-30.746, 11.423, 67.084)), (' B 454  ARG  HA ', ' B 492  LEU HD23', -0.423, (-7.318, -5.399, 69.539)), (' B 403  ARG  NH2', ' B 405  ASP  CG ', -0.422, (-12.95, -3.299, 53.882)), (' L  95  LEU HD21', ' M  14  PRO  HG2', -0.422, (23.743, -23.235, 30.676)), (' H   4  LEU HD11', ' H  94  THR HG22', -0.42, (25.333, -20.901, 4.853)), (' B 353  TRP  CD2', ' B 466  ARG  NH1', -0.419, (-19.605, -4.546, 74.007)), (' H 200  HIS  ND1', ' H 203  SER  HB3', -0.418, (53.179, -15.826, 4.204)), (' N 137  ILE HG12', ' N 196  VAL HG21', -0.417, (40.973, 6.158, 39.024)), (' A 411  ALA  HB3', ' A 414  GLN  HG3', -0.417, (-3.745, -26.089, 28.661)), (' B 361  CYS  SG ', ' B 362  VAL  N  ', -0.415, (-39.414, 3.411, 76.95)), (' A 341  VAL HG11', ' A 397  ALA  HB1', -0.414, (-14.519, -39.989, 22.869)), (' H  18  LEU HD11', ' H  20  LEU HD11', -0.414, (37.654, -14.933, 13.158)), (' L   2  ALA  N  ', ' L  97  VAL HG13', -0.412, (26.826, -28.711, 23.499)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.411, (-39.997, -6.317, 79.938)), (' B 382  VAL HG22', ' B 430  THR  OG1', -0.409, (-36.102, -11.367, 66.909)), (' H   3  THR  HB ', ' H  25  SER  HB2', -0.408, (27.632, -19.014, -3.513)), (' H 170  LEU HD13', ' H 176  TYR  CZ ', -0.407, (53.033, -24.02, 13.614)), (' A 359  SER  HA ', ' A 524  VAL  CG2', -0.405, (-26.357, -37.308, 22.247)), (' B 362  VAL  HA ', ' B 525  CYS  O  ', -0.404, (-42.493, 2.179, 74.927)), (' H  38  ARG  HB3', ' H  48  ILE HD11', -0.404, (34.086, -19.61, 16.021)), (' H  37  ILE  O  ', ' H  91  TYR  N  ', -0.403, (33.392, -21.117, 11.463)), (' B 430  THR  O  ', ' B 430  THR HG23', -0.4, (-33.863, -10.826, 68.464)), (' N  35  TRP  CH2', ' N  88  CYS  HB3', -0.4, (6.028, 0.485, 50.225)), (' N 179  LEU  CG ', ' N 181  LEU HD11', -0.4, (47.027, -2.325, 28.948)), (' L  13  SER  OG ', ' L  14  THR  N  ', -0.4, (33.138, -52.482, 10.644))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
