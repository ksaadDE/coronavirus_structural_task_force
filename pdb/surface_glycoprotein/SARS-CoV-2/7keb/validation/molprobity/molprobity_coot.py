# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  32 ', 'PHE', 0.014074429802536186, (201.43499999999997, 177.148, 148.815)), ('A', ' 582 ', 'LEU', 0.02931638153281977, (187.138, 124.98699999999998, 135.077)), ('A', ' 595 ', 'VAL', 0.05660652803719179, (188.352, 157.166, 156.155)), ('A', ' 709 ', 'ASN', 0.017201144640731456, (179.426, 142.23099999999994, 206.17899999999995)), ('A', ' 733 ', 'LYS', 0.012507719694947224, (157.81399999999994, 177.206, 165.471)), ('B', ' 350 ', 'VAL', 0.09482115773477905, (127.681, 159.78, 95.21499999999999)), ('B', ' 402 ', 'ILE', 0.0080770479295557, (128.04399999999995, 155.099, 94.178)), ('B', ' 410 ', 'ILE', 0.03550716853570088, (134.929, 154.46799999999993, 99.24299999999998)), ('B', ' 441 ', 'LEU', 0.022966439561603682, (115.414, 148.75099999999995, 96.433)), ('B', ' 571 ', 'ASP', 0.009001688135141453, (134.23499999999993, 159.13, 148.272)), ('B', ' 709 ', 'ASN', 0.00898505093435429, (132.39999999999992, 147.092, 205.91)), ('C', '  32 ', 'PHE', 0.013829587986207469, (121.601, 186.87199999999996, 150.13)), ('C', '  97 ', 'LYS', 0.020277688689793547, (101.588, 184.878, 139.264)), ('C', ' 112 ', 'SER', 0.015094103492552781, (120.47599999999997, 183.72499999999994, 114.645)), ('C', ' 136 ', 'CYS', 0.026458074873595326, (113.89499999999997, 188.372, 115.422)), ('C', ' 536 ', 'ASN', 0.036612513965352894, (160.007, 199.46599999999995, 146.401)), ('C', ' 723 ', 'THR', 0.02873660367544299, (139.673, 165.73399999999995, 187.84699999999998))]
data['omega'] = []
data['rota'] = [('A', ' 873 ', 'TYR', 0.14385264649797713, (155.686, 182.887, 183.186)), ('B', ' 603 ', 'ASN', 0.2457411282909346, (158.48699999999994, 120.58799999999998, 165.531)), ('C', ' 873 ', 'TYR', 0.18412289181472183, (138.58, 144.21799999999993, 182.85799999999995))]
data['cbeta'] = [('A', ' 331 ', 'ASN', ' ', 0.25727726841362203, (190.17, 129.667, 124.229)), ('A', '1041 ', 'ASP', ' ', 0.2532890394230699, (169.955, 160.01399999999995, 188.963)), ('B', '1041 ', 'ASP', ' ', 0.2825082555286025, (153.22, 147.35599999999994, 188.65399999999994)), ('C', ' 166 ', 'CYS', ' ', 0.3996015807825344, (119.67799999999997, 172.581, 108.913))]
data['probe'] = [(' B 339  GLY  C  ', ' B1306  NAG  H81', -1.445, (118.53, 151.348, 104.107)), (' B 339  GLY  O  ', ' B1306  NAG  C8 ', -1.396, (119.011, 150.291, 104.036)), (' B 343  ASN  HA ', ' B 441  LEU  CB ', -1.256, (115.602, 150.36, 97.804)), (' B 339  GLY  CA ', ' B1306  NAG  H81', -1.229, (119.57, 151.113, 104.957)), (' B 339  GLY  O  ', ' B1306  NAG  H81', -1.04, (117.487, 150.998, 104.469)), (' B 339  GLY  C  ', ' B1306  NAG  C8 ', -0.999, (118.606, 150.358, 104.928)), (' B 339  GLY  O  ', ' B1306  NAG  H82', -0.967, (118.256, 149.876, 103.264)), (' B 339  GLY  CA ', ' B1306  NAG  C8 ', -0.942, (119.305, 150.575, 104.269)), (' B 339  GLY  O  ', ' B1306  NAG  C7 ', -0.833, (117.692, 149.642, 103.749)), (' B 339  GLY  HA3', ' B1306  NAG  H81', -0.801, (119.23, 151.052, 105.899)), (' B 343  ASN  CA ', ' B 441  LEU  CB ', -0.778, (115.031, 150.79, 98.539)), (' A 712  ILE HG21', ' A1096  VAL HG22', -0.704, (176.872, 152.524, 209.14)), (' C 770  ILE HG22', ' C 774  GLN HE21', -0.579, (147.624, 149.686, 165.238)), (' B 902  MET  SD ', ' B1050  MET  HE3', -0.544, (167.419, 143.913, 198.062)), (' B 339  GLY  HA3', ' B1306  NAG  C8 ', -0.521, (119.501, 150.599, 105.79)), (' A 295  PRO  HB2', ' A 608  VAL HG11', -0.514, (193.069, 163.502, 157.998)), (' B 607  GLN  OE1', ' B 691  SER  HA ', -0.509, (144.444, 118.601, 166.926)), (' C 666  ILE HD11', ' C 672  ALA  HB2', -0.502, (142.149, 187.816, 168.084)), (' C 165  ASN  ND2', ' C1312  NAG  O7 ', -0.5, (124.685, 176.833, 103.431)), (' A 597  VAL HG13', ' A 608  VAL HG13', -0.5, (192.061, 163.322, 160.023)), (' B 339  GLY  HA2', ' B1306  NAG  C8 ', -0.489, (119.788, 150.88, 104.614)), (' A1129  VAL HG22', ' B 917  TYR  HB3', -0.466, (167.042, 139.6, 212.284)), (' C1075  PHE  HB3', ' C1096  VAL HG13', -0.458, (149.78, 180.104, 211.443)), (' B1043  CYS  HB2', ' B1048  HIS  CG ', -0.456, (161.13, 147.919, 191.691)), (' B 215  ASP  N  ', ' B 266  TYR  HH ', -0.453, (155.429, 101.391, 143.963)), (' B 343  ASN  OD1', ' B1306  NAG  C7 ', -0.45, (116.549, 149.302, 103.223)), (' B1075  PHE  CZ ', ' B1110  TYR  CE1', -0.442, (146.157, 138.466, 211.179)), (' A1029  MET  HE2', ' A1053  PRO  HB3', -0.438, (161.276, 175.208, 184.564)), (' A 607  GLN  OE1', ' A 691  SER  HA ', -0.437, (200.464, 165.376, 165.868)), (' A 712  ILE HG21', ' A1096  VAL  CG2', -0.437, (176.797, 152.778, 209.592)), (' B1024  LEU HD11', ' B1028  LYS  HE2', -0.423, (160.581, 151.169, 182.453)), (' C 714  ILE  CD1', ' C1096  VAL HG21', -0.415, (150.218, 176.436, 209.553)), (' A 300  LYS  HE2', ' A 602  THR HG21', -0.413, (189.849, 172.976, 159.305)), (' A 741  TYR  CE1', ' A 966  LEU HD21', -0.412, (161.961, 174.61, 148.972)), (' A 666  ILE HD12', ' A 670  ILE HG22', -0.407, (191.156, 154.921, 168.82)), (' B1121  PHE  CZ ', ' C 912  THR HG22', -0.406, (145.968, 160.806, 211.502)), (' A  55  PHE  HB2', ' A 275  PHE  CE2', -0.4, (191.244, 172.323, 141.709))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
