# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 246 ', 'ILE', None, (173.37500000000006, 157.339, 240.26899999999995)), ('A', ' 292 ', 'ALA', None, (203.99999999999994, 185.273, 218.852)), ('B', ' 292 ', 'ALA', None, (190.79800000000006, 243.92200000000003, 220.844)), ('B', ' 362 ', 'VAL', None, (173.99, 208.899, 246.286)), ('B', ' 532 ', 'ASN', None, (167.228, 216.793, 231.62799999999993)), ('C', ' 292 ', 'ALA', None, (248.227, 226.352, 226.10899999999995)), ('C', ' 362 ', 'VAL', None, (222.27700000000004, 252.131, 254.891)), ('C', ' 532 ', 'ASN', None, (234.21500000000006, 257.1440000000001, 242.43099999999998)), ('a', ' 118 ', 'ALA', None, (221.43, 203.52699999999996, 341.33)), ('a', ' 151 ', 'PRO', None, (215.236, 210.591, 338.475)), ('a', ' 153 ', 'PRO', None, (214.8, 215.712, 334.914)), ('a', ' 193 ', 'PRO', None, (204.834, 238.877, 355.553)), ('b', '   8 ', 'PRO', None, (242.112, 234.063, 324.623)), ('b', ' 101 ', 'PRO', None, (245.092, 210.9370000000001, 315.727)), ('b', ' 114 ', 'ALA', None, (227.81400000000005, 245.335, 332.72899999999987)), ('b', ' 146 ', 'PRO', None, (231.85000000000002, 240.06, 338.2089999999999))]
data['rota'] = [('A', ' 391 ', 'CYS', 0.0, (236.239, 199.89, 254.704)), ('a', ' 120 ', 'THR', 0.2885806365375051, (213.93999999999994, 206.507, 341.699)), ('B', '  95 ', 'THR', 0.19508553918231364, (186.976, 269.0580000000001, 230.955)), ('C', '  95 ', 'THR', 0.19448532165308666, (270.8, 215.263, 236.886))]
data['cbeta'] = []
data['probe'] = [(' A  47  VAL  CG1', ' B 569  ILE HG22', -1.241, (189.437, 201.634, 212.438)), (' B 541  PHE  CZ ', ' B 587  ILE HD13', -1.177, (181.13, 212.665, 224.077)), (' B 585  LEU  C  ', ' B 586  ASP  N  ', -1.126, (176.363, 209.346, 218.758)), (' A  47  VAL HG11', ' B 569  ILE HG22', -1.08, (189.245, 201.708, 213.429)), (' A  47  VAL HG12', ' B 569  ILE HG22', -1.004, (189.91, 201.447, 212.223)), (' B 553  THR  O  ', ' B 586  ASP  N  ', -0.991, (175.695, 210.213, 217.692)), (' A  41  LYS  HE2', ' B 562  PHE  CE2', -0.969, (181.771, 193.46, 229.711)), (' A  41  LYS  HE2', ' B 562  PHE  CD2', -0.952, (180.707, 194.504, 229.303)), (' A  47  VAL  CG1', ' B 569  ILE  CG2', -0.928, (189.302, 202.469, 212.461)), (' A  47  VAL HG12', ' B 569  ILE  CG2', -0.918, (189.761, 202.446, 211.901)), (' B 551  VAL  N  ', ' B 588  THR  O  ', -0.9, (179.253, 216.962, 219.424)), (' B 541  PHE  CE2', ' B 587  ILE HD13', -0.886, (181.093, 212.227, 224.498)), (' B 787  GLN  NE2', ' C 703  ASN  OD1', -0.866, (241.772, 239.735, 180.054)), (' A  41  LYS  HB3', ' B 563  GLN  HA ', -0.856, (181.509, 196.458, 226.897)), (' B  47  VAL HG21', ' C 569  ILE HG22', -0.828, (212.71, 247.797, 218.482)), (' B 787  GLN  NE2', ' C 701  VAL  O  ', -0.824, (242.741, 239.084, 181.859)), (' A 787  GLN  NE2', ' B 703  ASN  OD1', -0.805, (191.965, 231.896, 174.679)), (' A 787  GLN  NE2', ' B 701  VAL  O  ', -0.788, (192.119, 232.185, 176.083)), (' B  47  VAL  CG2', ' C 569  ILE HG22', -0.772, (212.142, 248.143, 218.007)), (' B 918  GLU  OE1', ' C1128  VAL HG11', -0.769, (217.289, 243.97, 152.46)), (' B 541  PHE  CE2', ' B 587  ILE  CD1', -0.759, (181.393, 211.629, 224.031)), (' A  47  VAL HG11', ' B 569  ILE  CG2', -0.759, (189.414, 202.586, 213.177)), (' B 551  VAL  HB ', ' B 588  THR  OG1', -0.751, (177.949, 217.034, 217.322)), (' B1030  SER  HB3', ' C1041  ASP  HB2', -0.748, (228.451, 226.773, 181.217)), (' B 325  SER  C  ', ' B 326  ILE  N  ', -0.747, (175.869, 218.701, 230.465)), (' A  41  LYS  CE ', ' B 562  PHE  CE2', -0.743, (181.894, 194.109, 230.052)), (' B 573  THR HG22', ' B 587  ILE HD12', -0.724, (182.949, 209.695, 222.339)), (' A 895  GLN  NE2', ' B1074  ASN  OD1', -0.724, (195.666, 231.184, 160.164)), (' A 357  ARG HH12', ' C 167  THR HG22', -0.716, (248.08, 206.792, 262.568)), (' B 591  SER  HB2', ' B 615  VAL HG21', -0.699, (183.062, 224.531, 213.465)), (' A  41  LYS  HB3', ' B 563  GLN  CA ', -0.689, (181.42, 197.006, 226.231)), (' B 917  TYR  CD2', ' C1089  PHE  CE2', -0.662, (222.04, 239.599, 155.593)), (' A  41  LYS  O  ', ' B 563  GLN  HB2', -0.653, (182.168, 198.065, 224.631)), (' A  42  VAL  HA ', ' B 565  PHE  O  ', -0.645, (184.259, 200.462, 223.434)), (' A 701  VAL  O  ', ' C 787  GLN  NE2', -0.64, (223.228, 191.598, 177.449)), (' B 787  GLN  CD ', ' C 703  ASN  OD1', -0.632, (242.159, 238.65, 180.108)), (' B 573  THR  CG2', ' B 587  ILE HD12', -0.623, (183.274, 209.87, 223.085)), (' B 552  LEU  HA ', ' B 586  ASP  O  ', -0.621, (177.058, 212.963, 219.964)), (' B 541  PHE  HZ ', ' B 587  ILE HD13', -0.616, (182.902, 212.274, 224.06)), (' B  41  LYS  HB3', ' C 563  GLN  HA ', -0.608, (210.828, 254.981, 233.893)), (' A 564  GLN  HG2', ' C  41  LYS  HD3', -0.607, (246.616, 199.674, 235.926)), (' A 563  GLN HE21', ' C  41  LYS  HA ', -0.607, (248.108, 203.532, 233.764)), (' A  41  LYS  CB ', ' B 563  GLN  HA ', -0.603, (182.067, 196.644, 226.857)), (' A 917  TYR  CD1', ' B1089  PHE  CE1', -0.597, (206.267, 214.045, 151.931)), (' B1152  LEU HD13', ' C1152  LEU HD21', -0.594, (226.054, 226.575, 119.943)), (' A 900  MET  HE1', ' B1079  PRO  HB3', -0.594, (202.67, 217.573, 154.126)), (' B  41  LYS  O  ', ' C 563  GLN  HB2', -0.591, (211.037, 254.45, 231.561)), (' A  43  PHE  H  ', ' B 566  GLY  HA2', -0.588, (183.662, 201.139, 221.277)), (' A1121  PHE  HE1', ' C 914  ASN HD21', -0.583, (235.001, 219.104, 153.663)), (' B 585  LEU  C  ', ' B 586  ASP  CA ', -0.58, (177.038, 209.121, 218.88)), (' A 720  ILE HG13', ' A 923  ILE HG23', -0.578, (204.853, 206.634, 164.561)), (' A 226  LEU  HG ', ' A 227  VAL HG23', -0.573, (178.033, 186.115, 233.652)), (' b 154  LYS  HB2', ' b 198  THR  HB ', -0.571, (232.039, 232.584, 358.829)), (' A1040  VAL HG21', ' C1035  GLY  HA3', -0.567, (223.007, 211.486, 174.011)), (' B 662  CYS  HB2', ' B 697  MET  HG3', -0.562, (191.653, 233.916, 190.918)), (' B 550  GLY  HA2', ' B 589  PRO  HA ', -0.561, (181.854, 217.963, 220.667)), (' C 662  CYS  HB2', ' C 697  MET  HG3', -0.559, (242.139, 235.706, 196.385)), (' A 912  THR  OG1', ' A1106  GLN  NE2', -0.559, (216.58, 212.02, 155.078)), (' a   6  GLN  NE2', ' a  96  CYS  SG ', -0.555, (224.471, 211.844, 315.793)), (' C 720  ILE HG13', ' C 923  ILE HG23', -0.554, (240.887, 215.503, 169.368)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.553, (215.631, 242.956, 167.646)), (' a  11  LEU HD21', ' a 151  PRO  HG3', -0.548, (215.356, 208.59, 335.302)), (' B 541  PHE  CZ ', ' B 587  ILE  CD1', -0.547, (181.216, 211.978, 223.799)), (' C 119  ILE HG12', ' C 128  ILE HG12', -0.541, (258.126, 207.99, 250.645)), (' b  45  LYS  HB2', ' b  48  GLN  HB2', -0.54, (222.374, 225.603, 319.366)), (' B 318  PHE  HZ ', ' B 615  VAL HG11', -0.54, (184.226, 227.67, 212.016)), (' B 591  SER  HB2', ' B 615  VAL  CG2', -0.535, (182.95, 224.359, 212.731)), (' B 347  PHE  HB2', ' B 401  VAL HG23', -0.531, (185.257, 198.768, 267.235)), (' A 917  TYR  HD1', ' B1089  PHE  CE1', -0.528, (207.17, 213.834, 152.535)), (' a 156  VAL HG22', ' a 201  VAL HG12', -0.527, (210.803, 221.858, 342.345)), (' A 203  ILE HD11', ' A 229  LEU HD11', -0.526, (183.033, 184.475, 238.163)), (' B 119  ILE HG12', ' B 128  ILE HG12', -0.523, (196.331, 262.071, 247.488)), (' A 560  LEU  O  ', ' A 577  ARG  NH2', -0.522, (251.294, 196.628, 231.553)), (' A1090  PRO  O  ', ' C 913  GLN  NE2', -0.521, (230.122, 215.104, 155.385)), (' C 347  PHE  HB2', ' C 401  VAL HG23', -0.519, (205.31, 243.544, 272.101)), (' A 225  PRO  HB2', ' B 562  PHE  CE2', -0.519, (181.404, 191.545, 229.636)), (' A 295  PRO  HB2', ' A 608  VAL HG11', -0.516, (209.296, 183.923, 208.887)), (' B 591  SER  CB ', ' B 615  VAL HG21', -0.513, (182.557, 224.454, 213.461)), (' A 433  VAL HG22', ' A 512  VAL HG13', -0.512, (234.999, 196.519, 271.802)), (' A 780  GLU  O  ', ' A 784  GLN  NE2', -0.509, (205.406, 225.469, 185.644)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.507, (244.726, 198.092, 187.919)), (' B 790  LYS  HD2', ' C 702  GLU  OE2', -0.507, (241.492, 246.628, 180.815)), (' A 172  SER  OG ', ' A 173  GLN  N  ', -0.505, (172.651, 185.563, 234.782)), (' B 914  ASN HD21', ' C1121  PHE  HE1', -0.505, (219.105, 234.973, 152.705)), (' C 389  ASP  HA ', ' C 527  PRO  HD3', -0.504, (228.733, 249.444, 253.889)), (' B 389  ASP  HA ', ' B 527  PRO  HD3', -0.502, (173.352, 215.376, 244.663)), (' B 327  VAL HG13', ' B 542  ASN  HB3', -0.501, (178.388, 212.563, 233.286)), (' C 780  GLU  O  ', ' C 784  GLN  NE2', -0.5, (220.798, 206.956, 185.829)), (' C 327  VAL HG13', ' C 542  ASN  HB3', -0.5, (225.606, 249.014, 240.968)), (' B 780  GLU  O  ', ' B 784  GLN  NE2', -0.5, (228.849, 229.316, 188.302)), (' A 566  GLY  HA2', ' C  44  ARG  NH1', -0.5, (243.408, 201.635, 227.43)), (' b 126  SER  OG ', ' b 127  SER  N  ', -0.498, (212.371, 224.124, 359.373)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.495, (237.183, 199.827, 286.265)), (' C  92  PHE  HB2', ' C 192  PHE  HB2', -0.494, (261.451, 214.233, 241.315)), (' B 318  PHE  CZ ', ' B 615  VAL HG11', -0.494, (184.3, 228.227, 212.436)), (' B 856  ASN HD21', ' C 572  THR HG21', -0.493, (220.091, 241.104, 224.886)), (' C 452  LEU HD13', ' C 492  LEU HD21', -0.492, (191.531, 239.338, 268.757)), (' B  92  PHE  HB2', ' B 192  PHE  HB2', -0.492, (191.061, 261.009, 236.267)), (' A 804  GLN  OE1', ' A 935  GLN  NE2', -0.491, (191.278, 205.017, 177.394)), (' b 121  SER  OG ', ' b 140  PHE  O  ', -0.49, (223.104, 234.472, 349.0)), (' B 452  LEU HD13', ' B 492  LEU HD21', -0.49, (195.514, 187.86, 266.731)), (' B 804  GLN  OE1', ' B 935  GLN  NE2', -0.489, (219.381, 252.856, 182.952)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.489, (224.697, 254.541, 188.766)), (' C 804  GLN  OE1', ' C 935  GLN  NE2', -0.489, (246.428, 204.383, 183.373)), (' B 908  GLY  O  ', ' B1038  LYS  NZ ', -0.489, (219.48, 226.694, 167.576)), (' B  41  LYS  HD3', ' C 564  GLN  HG2', -0.488, (212.125, 254.809, 236.648)), (' B 919  ASN  HB3', ' B 922  LEU  HB3', -0.488, (213.971, 245.894, 161.976)), (' C 908  GLY  O  ', ' C1038  LYS  NZ ', -0.487, (225.457, 220.104, 167.902)), (' b 112  LEU  H  ', ' b 171  GLN HE22', -0.487, (228.375, 239.013, 329.936)), (' A 908  GLY  O  ', ' A1038  LYS  NZ ', -0.487, (216.539, 218.041, 166.82)), (' B 541  PHE  CE2', ' B 587  ILE HD11', -0.486, (181.07, 211.065, 224.493)), (' B 551  VAL HG23', ' B 588  THR  O  ', -0.486, (180.084, 217.95, 218.537)), (' A 790  LYS  HD2', ' B 702  GLU  OE2', -0.485, (185.723, 227.568, 173.817)), (' A 984  LEU HD13', ' A 988  GLU  HG3', -0.485, (200.959, 215.915, 242.103)), (' B  44  ARG  NH1', ' C 566  GLY  HA2', -0.485, (213.872, 251.664, 227.873)), (' B 869  MET  HE1', ' C 697  MET  SD ', -0.483, (238.601, 237.702, 195.296)), (' C 573  THR HG22', ' C 587  ILE HG13', -0.483, (222.115, 249.61, 229.503)), (' C 557  LYS  HB2', ' C 584  ILE HG21', -0.481, (220.775, 259.279, 226.844)), (' B 790  LYS  NZ ', ' C 702  GLU  CD ', -0.481, (242.046, 247.052, 182.531)), (' B 913  GLN  NE2', ' C1090  PRO  O  ', -0.481, (223.99, 233.003, 155.561)), (' A 645  THR  OG1', ' A 646  ARG  N  ', -0.48, (226.801, 186.754, 202.288)), (' A 106  PHE  HB2', ' A 117  LEU  HB3', -0.479, (186.535, 179.931, 243.533)), (' C1084  ASP  N  ', ' C1084  ASP  OD1', -0.479, (225.414, 240.854, 141.167)), (' B1084  ASP  N  ', ' B1084  ASP  OD1', -0.479, (206.863, 215.845, 137.613)), (' C  60  SER  OG ', ' C  61  ASN  N  ', -0.478, (259.032, 228.224, 233.473)), (' B  60  SER  OG ', ' B  61  ASN  N  ', -0.478, (182.658, 252.147, 226.554)), (' C 919  ASN  HB3', ' C 922  LEU  HB3', -0.477, (245.415, 216.207, 163.992)), (' B 557  LYS  HB2', ' B 584  ILE HG21', -0.473, (175.668, 203.574, 217.523)), (' A 379  CYS  HB3', ' A 432  CYS  HA ', -0.471, (230.731, 194.693, 268.192)), (' B 855  PHE  CD1', ' C 589  PRO  HG3', -0.47, (226.6, 244.725, 222.399)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.47, (188.328, 194.823, 225.499)), (' A  87  ASN  ND2', ' A  88  ASP  OD1', -0.47, (199.961, 179.862, 234.374)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.468, (186.055, 209.237, 182.119)), (' C 226  LEU  HG ', ' C 227  VAL HG13', -0.466, (256.958, 203.419, 243.189)), (' C1082  CYS  HB2', ' C1126  CYS  HB3', -0.465, (225.257, 244.116, 147.843)), (' A  41  LYS  C  ', ' B 563  GLN  HB2', -0.464, (182.881, 197.799, 224.892)), (' C 738  CYS  HB2', ' C 760  CYS  HB2', -0.463, (215.146, 204.915, 220.587)), (' B 917  TYR  HD2', ' C1089  PHE  CE2', -0.463, (222.085, 239.34, 155.582)), (' A1084  ASP  N  ', ' A1084  ASP  OD1', -0.462, (238.213, 212.466, 141.124)), (' b 120  VAL HG22', ' b 212  LYS  HG3', -0.461, (224.891, 240.658, 355.158)), (' C 538  CYS  HB2', ' C 590  CYS  HB3', -0.46, (234.088, 246.909, 227.844)), (' A 544  ASN HD21', ' A 579  PRO  HB3', -0.459, (242.276, 192.972, 239.042)), (' A 550  GLY  HA2', ' A 589  PRO  HA ', -0.458, (231.084, 191.668, 224.683)), (' C  40  ASP  HB3', ' C  42  VAL HG23', -0.456, (244.688, 207.032, 232.777)), (' B 226  LEU  HG ', ' B 227  VAL HG13', -0.456, (201.985, 262.903, 241.053)), (' B  44  ARG  HD2', ' C 567  ARG  O  ', -0.455, (213.847, 249.956, 224.146)), (' b 170  ASP  N  ', ' b 170  ASP  OD1', -0.454, (223.433, 230.317, 333.9)), (' A  92  PHE  HB2', ' A 192  PHE  HB2', -0.454, (186.057, 177.334, 230.59)), (' C 535  LYS  NZ ', ' C 554  GLU  OE2', -0.454, (230.714, 262.129, 230.799)), (' C 742  ILE  O  ', ' C1000  ARG  NH1', -0.453, (221.92, 204.53, 228.095)), (' B 742  ILE  O  ', ' B1000  ARG  NH1', -0.453, (221.463, 231.854, 229.705)), (' b  45  LYS  NZ ', ' b  87  GLU  O  ', -0.452, (223.74, 232.847, 319.137)), (' A 326  ILE HD13', ' A 533  LEU HD12', -0.451, (236.323, 185.111, 232.835)), (' A 605  SER  OG ', ' A 606  ASN  N  ', -0.451, (203.789, 180.257, 201.054)), (' a 148  GLY  HA2', ' a 178  LEU HD13', -0.451, (218.726, 212.944, 347.054)), (' B 195  LYS  HE2', ' B 197  ILE HD11', -0.45, (198.15, 249.868, 237.603)), (' B  41  LYS  HZ2', ' C 562  PHE  HE2', -0.45, (206.866, 255.802, 237.607)), (' B 882  ILE  O  ', ' B 901  GLN  NE2', -0.449, (230.04, 240.68, 170.527)), (' A 917  TYR  CD1', ' B1089  PHE  HE1', -0.449, (206.129, 214.266, 151.96)), (' C 195  LYS  HE2', ' C 197  ILE HD11', -0.448, (247.797, 213.583, 241.043)), (' B 738  CYS  HB2', ' B 760  CYS  HB2', -0.447, (226.266, 226.04, 222.792)), (' a 123  PRO  HB3', ' a 149  TYR  HB3', -0.447, (213.528, 215.029, 344.05)), (' B 890  ALA  HB1', ' C1046  GLY  HA2', -0.447, (234.554, 225.343, 175.123)), (' A 126  VAL  HB ', ' A 172  SER  HB3', -0.447, (174.595, 183.172, 236.462)), (' A 882  ILE  O  ', ' A 901  GLN  NE2', -0.445, (198.854, 220.42, 165.879)), (' B 646  ARG  NH2', ' B 668  ALA  O  ', -0.445, (186.451, 225.394, 194.947)), (' A 201  PHE  HB2', ' A 229  LEU  HB2', -0.443, (185.113, 187.275, 239.993)), (' C 387  LEU HD11', ' C 431  GLY  HA2', -0.443, (220.384, 242.351, 259.828)), (' A 742  ILE  O  ', ' A1000  ARG  NH1', -0.442, (197.935, 218.223, 226.184)), (' B 387  LEU HD11', ' B 431  GLY  HA2', -0.442, (181.578, 211.902, 253.166)), (' B  48  LEU HD11', ' B 276  LEU  HB3', -0.441, (201.834, 248.54, 218.269)), (' C 245  HIS  N  ', ' C 259  THR  O  ', -0.441, (278.941, 214.676, 252.453)), (' C 646  ARG  NH2', ' C 668  ALA  O  ', -0.439, (237.201, 243.962, 201.52)), (' C  35  GLY  HA3', ' C  56  LEU  HB3', -0.439, (256.021, 219.667, 233.351)), (' C  48  LEU HD11', ' C 276  LEU  HB3', -0.438, (247.326, 215.227, 221.059)), (' B 521  PRO  HG3', ' B 564  GLN  HG3', -0.438, (180.181, 199.741, 231.83)), (' A1047  TYR  HB2', ' A1067  TYR  HB3', -0.438, (212.956, 209.096, 168.199)), (' A 459  SER  OG ', ' A 460  ASN  N  ', -0.436, (235.958, 211.56, 287.27)), (' b  13  VAL HG21', ' b 110  LEU HD13', -0.436, (231.476, 239.169, 322.439)), (' B  40  ASP  HB3', ' B  42  VAL HG23', -0.435, (207.275, 250.208, 231.504)), (' B 673  SER  OG ', ' B 695  TYR  OH ', -0.435, (189.491, 239.423, 192.843)), (' B 535  LYS  NZ ', ' B 554  GLU  OE2', -0.434, (167.311, 211.28, 219.755)), (' B 245  HIS  N  ', ' B 259  THR  O  ', -0.434, (180.073, 276.453, 245.261)), (' b 141  LEU  N  ', ' b 180  MET  O  ', -0.433, (224.808, 232.847, 345.555)), (' C 673  SER  OG ', ' C 695  TYR  OH ', -0.432, (248.07, 234.684, 199.0)), (' A1046  GLY  HA2', ' C 890  ALA  HB1', -0.432, (216.02, 206.356, 172.018)), (' C 419  ALA  HB1', ' C 424  LYS  HG2', -0.432, (204.751, 234.922, 257.089)), (' b  42  TYR  HB2', ' b  93  TYR  HB2', -0.431, (234.455, 224.123, 317.783)), (' B 419  ALA  HB1', ' B 424  LYS  HG2', -0.431, (196.277, 201.947, 254.143)), (' B 985  ASP  O  ', ' B 989  ALA  N  ', -0.431, (220.468, 227.215, 244.644)), (' b   6  GLN  NE2', ' b  94  CYS  SG ', -0.431, (239.919, 226.311, 319.436)), (' C 521  PRO  HG3', ' C 564  GLN  HG3', -0.431, (213.403, 254.165, 238.807)), (' a 171  PRO  HD3', ' b 169  THR HG22', -0.43, (222.382, 227.449, 337.974)), (' B  35  GLY  HA3', ' B  56  LEU  HB3', -0.43, (191.45, 254.255, 228.192)), (' B 349  SER  OG ', ' B 350  VAL  N  ', -0.429, (190.98, 194.647, 263.32)), (' B 555  SER  CB ', ' B 586  ASP  OD1', -0.429, (176.063, 207.627, 215.604)), (' C 985  ASP  O  ', ' C 989  ALA  N  ', -0.429, (216.393, 205.598, 243.158)), (' A 567  ARG  HB2', ' C  44  ARG  NE ', -0.428, (241.445, 203.921, 226.368)), (' B 855  PHE  CD1', ' C 589  PRO  CG ', -0.428, (226.898, 245.084, 222.261)), (' C 349  SER  OG ', ' C 350  VAL  N  ', -0.427, (199.723, 240.964, 267.075)), (' A  41  LYS  HB3', ' B 563  GLN  CB ', -0.427, (181.578, 197.119, 226.065)), (' A  41  LYS  CG ', ' B 563  GLN  HA ', -0.427, (181.877, 196.341, 227.582)), (' B 900  MET  HE1', ' C1079  PRO  HB3', -0.426, (227.223, 241.2, 158.303)), (' C 703  ASN  N  ', ' C 703  ASN  OD1', -0.425, (242.213, 240.64, 179.812)), (' A1011  GLN  OE1', ' A1014  ARG  NH1', -0.425, (205.05, 215.417, 206.865)), (' A 326  ILE HD12', ' A 539  VAL HG21', -0.423, (233.578, 186.158, 231.273)), (' C 645  THR  OG1', ' C 646  ARG  N  ', -0.423, (239.743, 245.169, 206.882)), (' C 882  ILE  O  ', ' C 901  GLN  NE2', -0.422, (232.189, 203.337, 168.712)), (' B  91  TYR  OH ', ' B 191  GLU  OE1', -0.422, (192.354, 260.22, 228.811)), (' A 913  GLN  NE2', ' B1090  PRO  HD2', -0.422, (209.07, 218.949, 153.287)), (' C  91  TYR  OH ', ' C 191  GLU  OE1', -0.421, (260.738, 215.439, 233.523)), (' C 147  LYS  HB3', ' C 147  LYS  HE2', -0.42, (290.336, 202.32, 252.711)), (' A 538  CYS  HB2', ' A 590  CYS  HB3', -0.42, (229.143, 187.493, 223.497)), (' b  19  VAL HG11', ' b 110  LEU HD11', -0.419, (233.829, 237.333, 320.471)), (' B  41  LYS  HE3', ' C 562  PHE  O  ', -0.419, (210.117, 257.078, 236.696)), (' a 159  ASN HD22', ' a 163  LEU HD23', -0.419, (202.589, 234.458, 343.174)), (' B 645  THR  OG1', ' B 646  ARG  N  ', -0.418, (183.197, 227.05, 199.554)), (' B 917  TYR  CD2', ' C1089  PHE  HE2', -0.418, (222.867, 240.302, 155.242)), (' B 703  ASN  N  ', ' B 703  ASN  OD1', -0.417, (190.895, 231.062, 173.478)), (' C  24  LEU HD11', ' C  78  ARG  HB3', -0.417, (276.738, 226.415, 246.097)), (' B 555  SER  OG ', ' B 586  ASP  OD1', -0.416, (175.829, 207.687, 216.102)), (' A  99  ASN  ND2', ' A 178  ASP  O  ', -0.415, (173.082, 170.231, 228.149)), (' A 245  HIS  HA ', ' A 246  ILE  HA ', -0.415, (173.901, 155.497, 238.487)), (' A 114  THR  OG1', ' A 115  GLN  N  ', -0.414, (189.486, 181.239, 252.641)), (' C 887  THR  HB ', ' C 894  LEU HD12', -0.412, (221.753, 202.868, 167.171)), (' C 402  ILE HG21', ' C 418  ILE HD13', -0.412, (205.409, 235.881, 266.322)), (' A 319  ARG  NH2', ' C 740  MET  HE2', -0.412, (223.722, 196.393, 221.833)), (' A 699  LEU HD22', ' C 873  TYR  CE1', -0.412, (224.537, 194.751, 187.096)), (' B  43  PHE  HB2', ' C 563  GLN  HG2', -0.411, (211.362, 256.9, 229.736)), (' B 887  THR  HB ', ' B 894  LEU HD12', -0.411, (235.954, 231.862, 170.246)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.41, (250.159, 222.712, 221.205)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.409, (193.756, 247.17, 216.418)), (' a 101  LYS  HB3', ' a 101  LYS  HE3', -0.409, (234.475, 218.01, 300.522)), (' B 790  LYS  NZ ', ' C 702  GLU  OE2', -0.408, (241.914, 247.321, 182.265)), (' B 147  LYS  HB3', ' B 147  LYS  HE2', -0.408, (184.607, 292.505, 246.396)), (' b 189  ASP  N  ', ' b 189  ASP  OD1', -0.407, (224.831, 215.967, 365.04)), (' A 656  VAL HG12', ' A 658  ASN  H  ', -0.407, (221.749, 178.516, 190.862)), (' B 749  CYS  O  ', ' B 753  LEU  N  ', -0.407, (227.613, 224.016, 232.925)), (' C 596  SER  HB3', ' C 611  LEU  HB3', -0.406, (241.68, 235.596, 212.325)), (' C1091  ARG  NH1', ' C1118  ASP  O  ', -0.405, (224.92, 225.817, 148.65)), (' A 856  ASN HD22', ' A 963  VAL HG13', -0.405, (194.711, 212.691, 218.829)), (' B  24  LEU HD11', ' B  78  ARG  HB3', -0.404, (172.697, 268.849, 236.909)), (' C 126  VAL  HB ', ' C 172  SER  HB3', -0.403, (260.533, 202.143, 247.528)), (' B 596  SER  HB3', ' B 611  LEU  HB3', -0.401, (189.136, 233.629, 206.364)), (' B 591  SER  CB ', ' B 615  VAL  CG2', -0.4, (182.592, 224.273, 213.294)), (' a   6  GLN  H  ', ' a 109  GLN HE22', -0.4, (217.761, 211.812, 317.003)), (' A 389  ASP  N  ', ' A 389  ASP  OD1', -0.4, (231.397, 193.761, 253.682)), (' A1116  THR HG22', ' A1138  TYR  HB3', -0.4, (224.776, 211.337, 140.918)), (' A  37  TYR  OH ', ' A  54  LEU  O  ', -0.4, (193.388, 186.582, 228.59)), (' B 126  VAL  HB ', ' B 172  SER  HB3', -0.4, (200.971, 266.427, 245.173))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
