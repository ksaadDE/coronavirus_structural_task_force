# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 764 ', 'TYR', 0.016724305043747355, (199.68299999999994, 189.139, 198.47)), ('A', ' 909 ', 'LEU', 0.007128181944341754, (162.686, 184.543, 203.35900000000004)), ('A', '1698 ', 'LYS', 0.026296010340969317, (156.743, 144.843, 174.20200000000006))]
data['omega'] = []
data['rota'] = [('A', '  93 ', 'LEU', 0.16304887184915381, (151.01599999999993, 194.43900000000005, 197.266)), ('A', ' 116 ', 'ILE', 0.09557091153418422, (147.76199999999994, 194.17600000000004, 210.28300000000002)), ('A', ' 243 ', 'LEU', 0.0659385703502095, (176.162, 141.178, 219.17000000000002)), ('A', ' 314 ', 'VAL', 0.003150532575091347, (187.94099999999997, 145.89700000000005, 227.761)), ('A', ' 758 ', 'LEU', 0.0, (198.62499999999994, 193.864, 186.23800000000003)), ('A', ' 769 ', 'GLU', 0.10097450653657816, (205.239, 196.539, 203.658)), ('A', ' 809 ', 'ILE', 0.002967875563055339, (183.574, 211.33900000000006, 179.616)), ('A', ' 811 ', 'ASP', 0.25602504523880276, (187.80499999999998, 208.485, 181.307)), ('A', ' 848 ', 'LEU', 0.21850992656857088, (190.38, 197.618, 170.248)), ('A', ' 921 ', 'THR', 0.022508226691009308, (172.45, 174.88800000000006, 191.107)), ('A', '1350 ', 'ILE', 0.0, (219.24100000000007, 162.527, 189.173)), ('A', '1354 ', 'LEU', 0.1644601548788579, (214.261, 161.672, 186.072)), ('A', '1355 ', 'ARG', 0.2881402727494489, (210.889, 161.89700000000005, 187.768)), ('A', '1361 ', 'ARG', 0.17148477603312454, (206.01700000000002, 158.96300000000002, 179.23200000000003)), ('A', '1366 ', 'LEU', 0.05625022450621522, (198.105, 160.02800000000005, 172.19200000000006)), ('A', '1381 ', 'THR', 0.11813300281639989, (187.24600000000004, 169.86700000000002, 163.92800000000003)), ('A', '1476 ', 'VAL', 0.1778364134794497, (185.44099999999995, 189.06600000000006, 210.088)), ('A', '1630 ', 'ILE', 0.26316173717312114, (148.154, 134.49400000000006, 178.22300000000004)), ('A', '1687 ', 'ILE', 0.01869995066896507, (168.69999999999996, 135.9, 187.74500000000006)), ('A', '1697 ', 'LEU', 0.02495482746113252, (159.795, 145.973, 176.181)), ('A', '1712 ', 'THR', 0.023156973455200895, (167.51900000000006, 160.559, 164.971)), ('A', '1789 ', 'LEU', 0.12381037757354643, (197.595, 168.88800000000006, 198.78300000000002))]
data['cbeta'] = [('A', ' 769 ', 'GLU', ' ', 0.31784314654867274, (204.937, 196.919, 205.12600000000003))]
data['probe'] = [(' A2316  Y01 HAN1', ' A2316  Y01 HAP1', -1.11, (198.832, 187.089, 186.003)), (' A1326  LEU HD21', ' A1366  LEU HD11', -1.011, (200.725, 163.225, 170.0)), (' A1400  PHE  CE2', ' A2317  Y01 HAB1', -0.989, (187.395, 180.851, 184.14)), (' A2316  Y01  CAP', ' A2316  Y01 HAN1', -0.967, (200.072, 186.508, 186.248)), (' A 125  PHE  HE2', ' A 163  GLY  HA3', -0.956, (140.292, 183.072, 198.119)), (' A1326  LEU HD21', ' A1366  LEU  CD1', -0.909, (200.305, 162.304, 170.247)), (' A1624  ASN HD21', ' A1695  ARG HH22', -0.892, (155.907, 135.062, 185.221)), (' A 101  PHE  HE1', ' A 180  ARG  NH2', -0.871, (150.656, 182.458, 207.592)), (' A 780  ILE HG12', ' A 822  ILE HD11', -0.859, (200.034, 208.908, 193.917)), (' A1400  PHE  HE2', ' A2317  Y01 HAB1', -0.858, (187.385, 180.486, 183.619)), (' A2313  3PE  H31', ' A2313  3PE H222', -0.858, (182.306, 174.687, 181.192)), (' A2316  Y01  CAN', ' A2316  Y01 HAP1', -0.856, (198.832, 186.23, 185.966)), (' A 835  THR HG21', ' A2315  3PE H352', -0.855, (185.904, 196.948, 195.855)), (' A 757  THR  HA ', ' A 760  MET  HE2', -0.85, (194.414, 197.022, 187.222)), (' A1624  ASN  ND2', ' A1695  ARG HH22', -0.831, (155.397, 135.221, 185.004)), (' A 128  PHE  CE2', ' A 189  ARG  NH1', -0.817, (145.444, 188.686, 193.673)), (' A2313  3PE  C22', ' A2313  3PE  H31', -0.804, (181.58, 174.969, 181.711)), (' A1270  ILE HG12', ' A1364  ARG HH11', -0.796, (203.439, 153.12, 178.519)), (' A1354  LEU  O  ', ' A1354  LEU HD22', -0.788, (212.415, 160.92, 184.603)), (' A1448  ASN  ND2', ' A2316  Y01 HAD1', -0.779, (200.288, 183.319, 195.673)), (' A1359  LEU HD13', ' A1740  GLU  HG2', -0.777, (203.832, 160.862, 185.661)), (' A1717  LEU  O  ', ' A1717  LEU HD13', -0.77, (177.711, 157.044, 166.467)), (' A 762  ILE HG22', ' A2316  Y01  CAK', -0.769, (201.695, 188.898, 191.36)), (' A 288  LEU  HB3', ' A 315  ASN  HB2', -0.767, (187.206, 148.536, 221.873)), (' A 762  ILE HG22', ' A2316  Y01 HAK1', -0.764, (201.373, 189.046, 191.312)), (' A1270  ILE  CG1', ' A1364  ARG HH11', -0.76, (202.784, 152.676, 178.196)), (' A1670  GLU  HG2', ' A1685  ILE HG23', -0.76, (163.467, 131.243, 190.694)), (' A1400  PHE  CD2', ' A2317  Y01 HAB1', -0.759, (188.088, 181.599, 183.918)), (' A1688  MET  HA ', ' A1688  MET  HE3', -0.757, (165.317, 134.286, 185.075)), (' A1688  MET  CA ', ' A1688  MET  HE3', -0.743, (164.847, 134.967, 185.312)), (' A 839  MET  HG3', ' A2315  3PE H3A1', -0.736, (184.21, 198.595, 188.709)), (' A1403  PHE  CZ ', ' A2315  3PE H281', -0.716, (181.392, 191.24, 190.142)), (' A1450  GLY  O  ', ' A2317  Y01 HAD2', -0.713, (195.908, 180.521, 192.043)), (' A1355  ARG  NE ', ' A1358  ARG HH11', -0.711, (209.195, 158.996, 189.352)), (' A 813  VAL  O  ', ' A 817  ILE HG12', -0.709, (185.78, 209.372, 188.019)), (' A 835  THR  CG2', ' A2315  3PE H352', -0.703, (185.85, 196.973, 195.351)), (' A2317  Y01  CAO', ' A2317  Y01 HAA2', -0.703, (192.679, 179.43, 184.699)), (' A 767  GLN  HB2', ' A 768  PRO  HD2', -0.702, (204.372, 192.73, 200.647)), (' A1364  ARG  N  ', ' A1365  PRO  HD2', -0.697, (201.264, 158.528, 175.954)), (' A2317  Y01 HAA2', ' A2317  Y01 HAO2', -0.695, (192.631, 179.171, 184.688)), (' A2317  Y01  CAA', ' A2317  Y01 HAO2', -0.68, (192.406, 178.668, 183.932)), (' A 771  LEU  O  ', ' A 775  LEU  HG ', -0.679, (203.934, 197.249, 196.237)), (' A1709  LEU  O  ', ' A1712  THR HG23', -0.672, (166.13, 160.277, 167.823)), (' A 101  PHE  CE1', ' A 180  ARG  NH2', -0.667, (151.369, 182.068, 207.577)), (' A1688  MET  CE ', ' A1688  MET  HA ', -0.66, (165.473, 134.556, 184.655)), (' A1624  ASN HD21', ' A1695  ARG  NH2', -0.659, (156.033, 136.382, 184.895)), (' A1693  ILE  O  ', ' A1696  VAL HG12', -0.658, (160.803, 144.613, 180.982)), (' A1717  LEU  C  ', ' A1717  LEU HD13', -0.656, (177.076, 156.757, 166.014)), (' A 125  PHE  CE2', ' A 163  GLY  HA3', -0.655, (139.623, 183.689, 198.061)), (' A1400  PHE  CD2', ' A2317  Y01  CAB', -0.65, (188.882, 181.449, 183.791)), (' A 763  GLU  HG2', ' A1412  LYS  HD3', -0.647, (195.001, 191.221, 199.263)), (' A1450  GLY  CA ', ' A2317  Y01  CAD', -0.637, (197.232, 181.487, 191.997)), (' A2307  DZR  C12', ' A2313  3PE  O14', -0.635, (175.686, 172.232, 183.966)), (' A1366  LEU  C  ', ' A1366  LEU HD12', -0.633, (199.589, 161.237, 170.578)), (' A 960  VAL HG22', ' A1506  LEU HD11', -0.628, (171.619, 177.05, 176.933)), (' A1355  ARG  CZ ', ' A1358  ARG HH11', -0.619, (209.841, 158.63, 189.839)), (' A 754  LEU  O  ', ' A 758  LEU HD22', -0.605, (199.216, 194.776, 182.309)), (' A 112  GLN  O  ', ' A 116  ILE HG22', -0.605, (150.063, 193.684, 212.722)), (' A 921  THR HG21', ' A1465  TRP  HE1', -0.604, (175.416, 175.962, 193.302)), (' A 823  VAL  O  ', ' A 823  VAL HG23', -0.595, (192.896, 214.885, 197.313)), (' A 839  MET  CG ', ' A2315  3PE H3A1', -0.593, (184.173, 199.177, 188.312)), (' A1459  LEU HD23', ' A1465  TRP  HB2', -0.592, (180.975, 178.19, 194.54)), (' A 921  THR HG21', ' A1465  TRP  NE1', -0.588, (175.81, 175.972, 193.088)), (' A 347  ILE HG23', ' A 378  LEU HD21', -0.585, (168.426, 155.507, 188.184)), (' A 204  LEU HD12', ' A 958  LEU HD22', -0.583, (159.353, 178.423, 178.901)), (' A 766  GLU  HA ', ' A 766  GLU  OE1', -0.583, (201.895, 189.502, 205.88)), (' A1400  PHE  HD2', ' A2317  Y01  CAB', -0.577, (188.937, 181.974, 184.095)), (' A 125  PHE  HE2', ' A 163  GLY  CA ', -0.574, (139.607, 182.871, 198.61)), (' A 128  PHE  CD2', ' A 189  ARG  NH1', -0.572, (144.247, 188.839, 193.966)), (' A  93  LEU HD11', ' A 120  PHE  CD2', -0.569, (148.076, 195.502, 201.533)), (' A 809  ILE  C  ', ' A 809  ILE HD12', -0.558, (182.289, 209.869, 180.906)), (' A2316  Y01  OAG', ' A2316  Y01 HAR1', -0.545, (204.695, 182.776, 196.051)), (' A  93  LEU HD11', ' A 120  PHE  CE2', -0.543, (148.499, 196.521, 201.047)), (' A1688  MET  CA ', ' A1688  MET  CE ', -0.541, (164.771, 133.98, 184.79)), (' A1716  ALA  HB2', ' A1829  LYS  HB2', -0.54, (173.346, 163.595, 164.222)), (' A1448  ASN HD22', ' A2316  Y01 HAD1', -0.538, (200.865, 184.029, 196.288)), (' A1716  ALA  HB2', ' A1829  LYS  CB ', -0.538, (172.48, 163.585, 164.075)), (' A1382  LEU  CD2', ' A1821  ASN  ND2', -0.532, (184.163, 169.323, 170.535)), (' A2317  Y01  CAA', ' A2317  Y01  CAO', -0.525, (191.591, 179.047, 184.341)), (' A 768  PRO  HB2', ' A 770  GLU  OE1', -0.525, (209.182, 194.919, 202.611)), (' A 832  VAL HG23', ' A2315  3PE H321', -0.525, (183.57, 200.213, 198.521)), (' A2317  Y01  OAG', ' A2317  Y01 HAR1', -0.525, (199.789, 177.561, 194.843)), (' A1450  GLY  HA3', ' A2317  Y01 HAD1', -0.524, (198.465, 181.04, 192.618)), (' A 233  TRP  HA ', ' A 236  LEU HD12', -0.523, (170.403, 144.542, 197.979)), (' A1709  LEU  O  ', ' A1712  THR  CG2', -0.522, (165.571, 160.735, 167.316)), (' A 767  GLN  CB ', ' A 768  PRO  HD2', -0.521, (204.211, 191.973, 200.614)), (' A1366  LEU  O  ', ' A1366  LEU HD12', -0.518, (199.294, 161.595, 170.307)), (' A1450  GLY  CA ', ' A2317  Y01 HAD1', -0.515, (197.89, 180.885, 192.576)), (' A1403  PHE  CE1', ' A2315  3PE H281', -0.512, (181.426, 192.011, 190.252)), (' A1753  CYS  SG ', ' A1790  ARG  NH2', -0.51, (194.05, 161.718, 203.456)), (' A 805  ASN HD22', ' A 806  PRO  HD2', -0.508, (183.029, 209.567, 171.438)), (' A  93  LEU HD12', ' A 124  ILE HD11', -0.505, (147.368, 194.437, 198.585)), (' A 313  CYS  SG ', ' A 314  VAL  N  ', -0.501, (188.823, 148.274, 228.021)), (' A 766  GLU  HG3', ' A 766  GLU  O  ', -0.497, (203.737, 188.234, 204.614)), (' A1260  LEU HD12', ' A1371  ARG  HB3', -0.496, (196.255, 153.789, 164.12)), (' A 127  PHE  C  ', ' A 127  PHE  CD1', -0.495, (140.291, 192.952, 193.752)), (' A1270  ILE  CG1', ' A1364  ARG  NH1', -0.494, (203.217, 152.775, 178.073)), (' A1364  ARG  N  ', ' A1365  PRO  CD ', -0.493, (201.23, 157.744, 175.936)), (' A1355  ARG  CZ ', ' A1358  ARG  NH1', -0.493, (209.314, 158.264, 189.846)), (' A 371  ASN  ND2', ' A2318  Y01 HAR2', -0.492, (175.652, 144.237, 191.582)), (' A1717  LEU  N  ', ' A1718  PRO  HD2', -0.491, (174.936, 158.564, 164.569)), (' A1719  GLN  HA ', ' A1719  GLN  OE1', -0.491, (181.241, 162.173, 164.346)), (' A 921  THR  CG2', ' A1465  TRP  HE1', -0.488, (175.416, 175.475, 193.281)), (' A1378  VAL HG21', ' A1722  ASN  HB3', -0.483, (184.999, 161.86, 165.875)), (' A1403  PHE  HZ ', ' A2315  3PE H281', -0.483, (180.69, 191.239, 189.935)), (' A1681  ASN HD22', ' A1682  PRO  HD2', -0.481, (172.206, 128.69, 194.595)), (' A1591  ASP  HB2', ' A1702  MET  HE1', -0.481, (149.496, 146.168, 170.309)), (' A1333  ILE HD13', ' A1360  LEU  HB3', -0.48, (207.595, 163.42, 177.711)), (' A1375  LEU  O  ', ' A1379  VAL HG23', -0.48, (190.912, 163.62, 166.787)), (' A 123  PHE  C  ', ' A 123  PHE  CD1', -0.479, (142.293, 194.136, 199.87)), (' A1382  LEU HD22', ' A1821  ASN  ND2', -0.474, (184.644, 169.82, 170.8)), (' A 100  MET  HB2', ' A 113  ARG HH12', -0.474, (157.672, 190.496, 207.075)), (' A1505  VAL HG11', ' A2313  3PE  H32', -0.471, (179.836, 175.64, 180.807)), (' A1359  LEU HD13', ' A1740  GLU  CG ', -0.466, (203.856, 160.634, 186.747)), (' A1774  ARG HH21', ' A1780  ASN  HB3', -0.463, (183.8, 162.827, 196.218)), (' A1368  VAL  O  ', ' A1368  VAL HG22', -0.461, (194.886, 156.507, 167.186)), (' A 206  ASP  OD2', ' A 404  ARG  NH1', -0.458, (152.292, 176.561, 169.11)), (' A1389  ILE HG22', ' A1392  ILE HD12', -0.456, (181.173, 182.981, 171.628)), (' A2313  3PE  C22', ' A2313  3PE  C3 ', -0.454, (181.23, 174.827, 182.05)), (' A1450  GLY  HA2', ' A2317  Y01  CAD', -0.453, (197.24, 181.501, 191.743)), (' A1664  ILE  HA ', ' A1667  ILE HG22', -0.45, (157.55, 129.347, 182.638)), (' A 231  GLN  NE2', ' A1608  GLU  OE1', -0.45, (160.713, 141.87, 192.508)), (' A1350  ILE  O  ', ' A1350  ILE HD12', -0.448, (217.611, 161.9, 187.379)), (' A1720  VAL HG22', ' A1822  VAL HG13', -0.448, (177.787, 162.111, 171.13)), (' A1382  LEU HD21', ' A1821  ASN  ND2', -0.447, (184.165, 168.719, 170.752)), (' A1696  VAL  O  ', ' A1696  VAL HG22', -0.447, (158.215, 147.946, 178.699)), (' A1597  VAL HG11', ' A1630  ILE HD11', -0.444, (148.424, 139.554, 179.438)), (' A 839  MET  HG3', ' A2315  3PE  C3A', -0.444, (184.595, 198.37, 188.949)), (' A1355  ARG  O  ', ' A1359  LEU HD23', -0.441, (207.803, 162.855, 186.26)), (' A1400  PHE  HD2', ' A2317  Y01 HAB3', -0.441, (189.527, 181.502, 184.479)), (' A1697  LEU  O  ', ' A1699  LEU  N  ', -0.44, (157.737, 147.15, 174.524)), (' A 224  ILE  HA ', ' A1693  ILE HD11', -0.439, (163.28, 147.587, 185.027)), (' A 921  THR  O  ', ' A 921  THR HG23', -0.436, (174.592, 173.902, 191.275)), (' A 188  LEU  HA ', ' A 188  LEU HD23', -0.434, (152.157, 183.172, 188.753)), (' A 227  ILE HG21', ' A1605  MET  HE2', -0.431, (160.306, 144.307, 187.836)), (' A1379  VAL  O  ', ' A1383  MET  HG2', -0.431, (190.743, 169.558, 167.331)), (' A1513  VAL HG13', ' A1828  MET  HE3', -0.43, (173.706, 174.16, 166.837)), (' A 345  ILE HD11', ' A2310  3PE H2C2', -0.43, (160.132, 159.211, 197.759)), (' A1817  PHE  O  ', ' A1821  ASN  ND2', -0.429, (183.599, 169.223, 173.529)), (' A 821  GLU  HB3', ' A 833  LEU HD13', -0.429, (189.163, 208.007, 196.316)), (' A 820  TRP  C  ', ' A 820  TRP  CD1', -0.428, (189.935, 212.503, 196.245)), (' A2317  Y01 HAC3', ' A2317  Y01 HAJ1', -0.427, (190.411, 178.493, 187.805)), (' A1450  GLY  C  ', ' A2317  Y01 HAD2', -0.427, (196.345, 180.616, 192.785)), (' A1354  LEU  C  ', ' A1354  LEU HD22', -0.423, (212.907, 160.562, 185.703)), (' A1722  ASN  HA ', ' A1722  ASN HD22', -0.423, (185.409, 158.031, 167.113)), (' A2318  Y01  HBB', ' A2318  Y01 HAE2', -0.423, (171.701, 147.66, 184.737)), (' A1450  GLY  C  ', ' A2317  Y01  CAD', -0.421, (196.953, 180.656, 192.48)), (' A2317  Y01 HAE1', ' A2317  Y01 HAS2', -0.42, (195.821, 179.556, 190.25)), (' A 101  PHE  CE1', ' A 180  ARG  CZ ', -0.42, (151.099, 181.606, 207.776)), (' A1454  MET  HE2', ' A2317  Y01 HAU2', -0.419, (193.527, 176.894, 190.096)), (' A1717  LEU  HB3', ' A1718  PRO  HD3', -0.418, (175.557, 156.377, 164.629)), (' A1408  VAL  O  ', ' A1412  LYS  HB2', -0.417, (192.693, 190.29, 200.266)), (' A1464  GLY  HA3', ' A1782  ASN HD21', -0.417, (183.483, 171.88, 196.536)), (' A 848  LEU  HA ', ' A 849  PRO  HD3', -0.416, (191.111, 198.01, 168.721)), (' A1456  LEU HD23', ' A1459  LEU HD12', -0.416, (184.739, 182.33, 193.207)), (' A1631  PHE  HB3', ' A1660  VAL HG22', -0.415, (154.625, 135.645, 176.282)), (' A 288  LEU  C  ', ' A 288  LEU HD13', -0.415, (188.121, 151.47, 222.504)), (' A2317  Y01 HAB3', ' A2317  Y01 HAJ2', -0.414, (190.352, 181.165, 184.885)), (' A 121  ASP  OD2', ' A 186  ARG  NH1', -0.414, (145.969, 186.316, 200.975)), (' A1697  LEU  C  ', ' A1699  LEU  N  ', -0.412, (157.257, 146.676, 175.161)), (' A1270  ILE HG12', ' A1364  ARG  NH1', -0.411, (203.7, 153.098, 178.958)), (' A 371  ASN  HA ', ' A 371  ASN HD22', -0.411, (176.35, 145.717, 190.735)), (' A1697  LEU  C  ', ' A1699  LEU  H  ', -0.41, (157.351, 146.79, 175.417)), (' A1350  ILE  HA ', ' A1350  ILE HD13', -0.41, (219.509, 163.604, 187.848)), (' A1278  ASP  HB2', ' A1281  SER  HB2', -0.405, (209.394, 142.04, 192.525)), (' A 948  MET  HB3', ' A 948  MET  HE2', -0.404, (166.629, 169.073, 189.764)), (' A 340  ILE  HA ', ' A 340  ILE HD12', -0.404, (161.004, 150.905, 193.468)), (' A 239  ASN  HA ', ' A 325  ALA  HA ', -0.404, (170.964, 145.009, 208.894)), (' A1376  LYS  O  ', ' A1380  GLU  HG3', -0.403, (192.133, 166.22, 162.942)), (' A 767  GLN  HB2', ' A 768  PRO  CD ', -0.402, (204.944, 192.45, 201.352)), (' A1366  LEU  C  ', ' A1366  LEU  CD1', -0.402, (199.13, 161.432, 171.089)), (' A1450  GLY  HA2', ' A2317  Y01 HAD3', -0.401, (197.372, 181.577, 191.467)), (' A2318  Y01 HAO2', ' A2318  Y01 HAP1', -0.401, (171.911, 146.68, 181.815)), (' A1711  ASP  O  ', ' A1715  GLN  HG3', -0.401, (168.726, 158.468, 162.961)), (' A1506  LEU  HA ', ' A1506  LEU HD12', -0.4, (175.22, 178.037, 177.509))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
