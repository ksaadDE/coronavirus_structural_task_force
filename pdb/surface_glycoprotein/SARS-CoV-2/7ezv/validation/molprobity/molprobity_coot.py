# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('L', '  52 ', 'SER', 0.002602242060990286, (164.74799999999993, 229.00400000000002, 133.478)), ('L', '  95 ', 'PRO', 0.0, (184.815, 235.73999999999998, 126.381))]
data['omega'] = [('L', '  95 ', 'PRO', None, (185.707, 234.76, 127.025))]
data['rota'] = [('A', ' 477 ', 'SER', 0.1274708300905212, (219.393, 213.006, 132.936)), ('A', ' 483 ', 'VAL', 0.17826108712807645, (215.956, 226.11, 129.686)), ('L', '  90 ', 'GLN', 0.03317640758432403, (176.32, 232.886, 127.031)), ('N', ' 101 ', 'GLN', 0.019556763944912917, (215.85300000000004, 214.32200000000017, 105.16499999999999))]
data['cbeta'] = []
data['probe'] = [(' M 100  HIS  HD2', ' M 112  ILE HD11', -0.797, (209.454, 203.7, 127.406)), (' M  28  THR  OG1', ' M 101  CYS  O  ', -0.753, (206.388, 207.512, 134.905)), (' N  33  TYR  HB3', ' N  92  TYR  HB2', -0.705, (216.398, 217.701, 122.129)), (' A 346  ARG  NH2', ' H  54  ASP  OD2', -0.702, (190.714, 240.64, 146.304)), (' L   6  GLN  HG3', ' L  23  CYS  HB3', -0.694, (169.416, 233.853, 119.954)), (' M  51  ILE HD11', ' M  70  MET  HB3', -0.691, (198.328, 217.69, 121.625)), (' M  39  GLN  HB2', ' M  45  LEU HD13', -0.684, (207.198, 211.175, 109.274)), (' M 100  HIS  CD2', ' M 112  ILE HD11', -0.664, (209.713, 203.969, 126.935)), (' L  89  GLN HE21', ' L  96  LEU  HB3', -0.663, (179.19, 236.992, 128.663)), (' N  47  LEU HD21', ' N  50  TYR  HE1', -0.656, (216.076, 207.681, 122.066)), (' N  40  ARG  NH2', ' N  82  GLU  O  ', -0.648, (216.459, 195.001, 109.661)), (' L  91  TYR  HA ', ' L  96  LEU  HG ', -0.631, (179.591, 234.024, 129.599)), (' M  91  THR HG22', ' M 121  VAL  H  ', -0.63, (194.334, 212.739, 101.734)), (' M  97  ALA  HB1', ' M 110  PHE  HB3', -0.63, (209.319, 210.089, 120.358)), (' H  12  LYS  HD2', ' H  16  GLU  HG2', -0.625, (189.95, 263.465, 123.008)), (' M   6  GLN  HG2', ' M  22  CYS  SG ', -0.624, (198.672, 207.653, 118.457)), (' M  38  ARG  HB2', ' M  48  ILE HD11', -0.623, (201.861, 215.121, 110.766)), (' M  38  ARG HH21', ' M  64  PHE  HZ ', -0.615, (201.571, 218.935, 107.961)), (' N  80  GLU  HG2', ' N  82  GLU  H  ', -0.613, (220.673, 192.102, 108.482)), (' H  24  PHE  CE1', ' H  34  ILE HG13', -0.607, (184.201, 248.032, 138.956)), (' H  52  TYR  O  ', ' H  56  SER  N  ', -0.605, (191.433, 242.771, 140.453)), (' L  49  TYR  HB2', ' L  53  THR  HB ', -0.6, (167.926, 231.673, 136.295)), (' M 101  CYS  HA ', ' M 106  CYS  HA ', -0.595, (209.98, 208.95, 131.958)), (' N  11  LEU  HB3', ' N  13  LEU HD13', -0.587, (226.066, 203.038, 101.715)), (' M  56  GLY  HA2', ' M  72  ARG  HD3', -0.585, (199.105, 218.504, 128.503)), (' M  11  VAL HG13', ' M 120  THR  HB ', -0.579, (191.166, 209.194, 102.994)), (' M  35  GLN  HG2', ' M  97  ALA  HB3', -0.578, (207.598, 211.604, 119.446)), (' A 444  LYS  HB2', ' H  52  TYR  CZ ', -0.576, (186.79, 236.739, 137.919)), (' N  19  ALA  HB2', ' N  79  LEU HD12', -0.576, (226.591, 200.705, 106.207)), (' A 500  THR  O  ', ' L  30  ARG  NH2', -0.571, (180.685, 224.903, 133.162)), (' H  91  THR HG22', ' H 116  VAL  H  ', -0.567, (182.895, 259.055, 117.701)), (' N  62  ARG  NH2', ' N  78  ARG  O  ', -0.565, (225.905, 193.563, 111.271)), (' A 439  ASN  O  ', ' A 443  SER  OG ', -0.563, (183.751, 230.757, 141.634)), (' N  31  SER  OG ', ' N  32  GLY  N  ', -0.561, (221.919, 217.997, 125.28)), (' A 455  LEU HD11', ' A 493  GLN  HB2', -0.558, (201.321, 222.356, 135.603)), (' H   6  GLN  H  ', ' H 110  GLN HE22', -0.548, (177.195, 257.483, 135.695)), (' M  67  ARG  NH2', ' M  90  ASP  OD2', -0.547, (196.705, 219.6, 107.004)), (' H  24  PHE  HB2', ' H  77  ARG  HG2', -0.543, (183.614, 251.193, 144.582)), (' A 474  GLN HE22', ' A 479  PRO  HA ', -0.541, (219.928, 217.812, 133.799)), (' N  21  LEU  HB2', ' N  74  LEU  HB3', -0.54, (224.668, 207.268, 110.777)), (' H  39  GLN  HB2', ' H  45  LEU HD23', -0.534, (175.261, 247.315, 123.721)), (' N  80  GLU  HG3', ' N  81  PRO  HD2', -0.531, (222.506, 191.269, 107.441)), (' A 357  ARG  NH1', ' A 394  ASN  OD1', -0.53, (202.373, 225.902, 170.005)), (' A 418  ILE HD13', ' A 422  ASN HD22', -0.527, (198.467, 219.109, 144.527)), (' A 456  PHE  HZ ', ' M  54  GLY  HA3', -0.526, (204.069, 217.339, 134.036)), (' N  84  PHE  CZ ', ' N 107  ILE HG22', -0.525, (221.667, 196.057, 101.586)), (' M  86  LEU HD23', ' M 121  VAL HG22', -0.525, (192.922, 215.277, 105.254)), (' M  72  ARG HH12', ' M  74  GLU  HB2', -0.524, (196.034, 215.19, 132.118)), (' A 487  ASN  ND2', ' M 108  ASP  OD1', -0.522, (214.604, 213.285, 128.864)), (' L  48  ILE HG22', ' L  49  TYR  O  ', -0.517, (167.973, 232.846, 132.017)), (' N   9  GLY  O  ', ' N 103  THR HG23', -0.517, (221.484, 208.629, 102.126)), (' L  35  TRP  HB2', ' L  48  ILE  HB ', -0.509, (166.92, 235.112, 130.363)), (' N  55  ARG  HD3', ' N  59  ILE  HB ', -0.506, (221.595, 200.357, 121.068)), (' A 489  TYR  OH ', ' M  33  ALA  HB2', -0.505, (207.667, 215.778, 127.8)), (' N  47  LEU HD21', ' N  50  TYR  CE1', -0.504, (216.492, 208.175, 122.751)), (' A 337  PRO  HD2', ' A 358  ILE HD12', -0.504, (193.88, 230.676, 167.123)), (' M 111  ASP  HB3', ' N  47  LEU HD23', -0.503, (213.845, 205.652, 122.663)), (' M   2  VAL  HB ', ' M  27  PHE  HE1', -0.502, (206.274, 202.537, 127.99)), (' L   4  ILE HD11', ' L  90  GLN  HG2', -0.5, (177.406, 231.918, 123.59)), (' H  36  TRP  HB3', ' H  48  MET  HE3', -0.5, (183.621, 248.292, 128.583)), (' L   7  SER  OG ', ' L  22  SER  N  ', -0.496, (164.879, 232.727, 119.085)), (' N  13  LEU HD23', ' N  17  GLU  HG3', -0.493, (230.311, 200.269, 103.574)), (' M 100  HIS  HB2', ' M 107  TYR  HB3', -0.492, (212.473, 206.104, 129.325)), (' M  85  SER  O  ', ' M  87  ARG  NH1', -0.491, (192.734, 222.729, 106.411)), (' M 110  PHE  O  ', ' M 113  TRP  NE1', -0.49, (210.339, 207.321, 119.496)), (' A 418  ILE  HA ', ' A 422  ASN  HB2', -0.486, (199.625, 218.43, 146.266)), (' M  72  ARG  NH1', ' M  74  GLU  HB2', -0.486, (195.939, 215.019, 131.736)), (' M  52  ALA  O  ', ' M  56  GLY  N  ', -0.483, (201.031, 219.82, 129.788)), (' A 456  PHE  CZ ', ' M  54  GLY  HA3', -0.48, (203.932, 217.058, 134.257)), (' M  67  ARG  NH1', ' M  87  ARG  HD2', -0.474, (196.557, 222.803, 105.5)), (' H  33  TRP  HB3', ' H  52  TYR  CE2', -0.472, (184.88, 239.31, 138.692)), (' N  13  LEU  O  ', ' N 108  LYS  N  ', -0.471, (225.167, 197.147, 98.715)), (' H   6  GLN  H  ', ' H 110  GLN  NE2', -0.47, (177.116, 257.18, 135.457)), (' M  50  TRP  CD1', ' M  59  ASP  HB3', -0.47, (206.075, 222.04, 121.514)), (' M  31  THR HG21', ' M 104  GLY  HA2', -0.468, (207.32, 211.679, 136.783)), (' H  20  ILE  O  ', ' H  80  TYR  HA ', -0.468, (187.335, 254.021, 133.802)), (' M  62  GLN  HA ', ' M  62  GLN  OE1', -0.467, (203.55, 229.07, 114.243)), (' N   7  SER  HB3', ' N  22  SER  OG ', -0.466, (227.019, 213.459, 105.715)), (' M  66  GLU  N  ', ' M  66  GLU  OE1', -0.465, (198.02, 228.332, 113.078)), (' H  52  TYR  O  ', ' H  56  SER  CA ', -0.461, (191.4, 243.18, 140.169)), (' A 395  VAL HG22', ' A 515  PHE  HD1', -0.461, (194.405, 220.895, 168.124)), (' H   2  VAL HG23', ' H  25  SER  HB2', -0.46, (177.644, 249.218, 144.81)), (' H  47  TRP  HZ2', ' H  50  ILE  HB ', -0.459, (184.505, 240.344, 131.969)), (' N  40  ARG  HB3', ' N  41  PRO  HD2', -0.458, (212.069, 198.223, 106.982)), (' L  38  GLN  HB2', ' L  44  PRO  HB3', -0.458, (169.664, 246.214, 126.542)), (' M  14  PRO  HG3', ' M 121  VAL HG12', -0.457, (190.523, 216.462, 100.826)), (' N  19  ALA  HB3', ' N  76  ILE  HB ', -0.455, (226.562, 201.383, 108.803)), (' M  64  PHE  O  ', ' M  68  VAL HG12', -0.45, (198.546, 222.956, 114.057)), (' M 111  ASP  OD1', ' M 112  ILE HG13', -0.449, (209.705, 205.287, 124.491)), (' M  49  GLY  HA3', ' M  70  MET  HE1', -0.449, (202.462, 219.733, 118.093)), (' L   7  SER  HG ', ' L  22  SER  H  ', -0.449, (165.024, 232.587, 118.392)), (' A 461  LEU HD23', ' A 465  GLU  O  ', -0.445, (205.221, 218.884, 152.045)), (' M   2  VAL  HA ', ' M  25  SER  O  ', -0.444, (203.721, 201.091, 128.824)), (' A 357  ARG  HG3', ' A 396  TYR  CE1', -0.443, (202.068, 225.412, 165.485)), (' A 344  ALA  HB3', ' A 347  PHE  HE1', -0.443, (191.34, 231.813, 155.188)), (' A 394  ASN  HB2', ' A 516  GLU  HG3', -0.44, (201.171, 220.869, 168.993)), (' N  34  PHE  HE2', ' N  36  TRP  NE1', -0.438, (222.295, 211.796, 115.197)), (' H  48  MET  HE1', ' H  94  TYR  HD2', -0.438, (183.421, 250.091, 126.567)), (' N  67  GLY  HA3', ' N  72  PHE  HA ', -0.437, (228.178, 213.931, 116.056)), (' N  38  GLN  HB2', ' N  48  LEU HD11', -0.437, (217.943, 203.309, 112.969)), (' H  24  PHE  HE1', ' H  34  ILE HG13', -0.437, (183.751, 248.468, 139.098)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.435, (195.584, 225.356, 167.813)), (' H  52  TYR  O  ', ' H  56  SER  HA ', -0.435, (191.247, 243.504, 140.117)), (' M  32  SER  HA ', ' M 101  CYS  SG ', -0.433, (207.476, 211.284, 130.172)), (' A 442  ASP  OD1', ' A 451  TYR  OH ', -0.433, (191.169, 232.034, 147.128)), (' H  19  LYS  HD2', ' H  80  TYR  HB3', -0.433, (190.048, 255.049, 133.5)), (' L  39  ARG  HB3', ' L  40  PRO  HD2', -0.432, (162.464, 250.278, 125.896)), (' N 101  GLN  HB2', ' N 101  GLN HE21', -0.432, (216.21, 214.115, 102.458)), (' A 500  THR HG21', ' L  92  ASN  HA ', -0.431, (180.341, 229.438, 131.59)), (' A 456  PHE  CD1', ' M  31  THR HG22', -0.428, (205.932, 214.819, 136.452)), (' L  38  GLN  HA ', ' L  44  PRO  HA ', -0.427, (167.637, 246.743, 127.868)), (' A 386  LYS  HB3', ' A 386  LYS  HE3', -0.427, (185.943, 213.23, 170.9)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.425, (198.144, 225.992, 156.799)), (' M  51  ILE  CD1', ' M  70  MET  HB3', -0.423, (198.77, 217.638, 122.605)), (' L  75  ILE HG22', ' L  76  SER  O  ', -0.423, (153.932, 237.525, 126.357)), (' M   4  LEU HD21', ' M  22  CYS  HB3', -0.422, (200.244, 207.198, 121.399)), (' M  31  THR  OG1', ' M 101  CYS  HB3', -0.42, (207.176, 210.688, 133.474)), (' A 353  TRP  NE1', ' A 466  ARG  HB3', -0.42, (203.673, 222.25, 152.443)), (' A 431  GLY  HA2', ' A 515  PHE  CE2', -0.418, (192.451, 217.12, 165.465)), (' A 386  LYS  HD2', ' A 386  LYS  O  ', -0.416, (186.767, 215.565, 173.081)), (' M  58  THR HG21', ' M  70  MET  HB2', -0.415, (198.715, 220.344, 121.32)), (' H  47  TRP  CZ2', ' H  50  ILE  HB ', -0.415, (184.602, 240.104, 131.513)), (' M 107  TYR  HE2', ' N  50  TYR  HH ', -0.415, (216.336, 205.587, 125.884)), (' A 346  ARG  NH2', ' H  55  ASP  HB3', -0.414, (192.546, 239.71, 145.147)), (' N  32  GLY  HA2', ' N  51  GLY  HA3', -0.413, (223.054, 214.732, 123.161)), (' A 396  TYR  HB2', ' A 514  SER  OG ', -0.411, (198.936, 221.152, 163.064)), (' A 383  SER  H  ', ' A 386  LYS  HE3', -0.41, (187.043, 212.943, 170.235)), (' A 502  GLY  O  ', ' A 506  GLN  HG3', -0.409, (183.082, 222.9, 139.748)), (' A 398  ASP  OD2', ' A 423  TYR  OH ', -0.409, (198.248, 220.643, 157.553)), (' M  24  ALA  HB1', ' M  27  PHE  CE2', -0.408, (202.493, 205.774, 127.248)), (' N  43  ARG  HA ', ' N  43  ARG  NE ', -0.408, (206.632, 198.9, 111.113)), (' L  16  GLY  HA2', ' L  77  SER  HB2', -0.407, (148.307, 239.04, 125.929)), (' M  72  ARG  HB2', ' M  72  ARG  NH1', -0.407, (196.075, 216.039, 129.69)), (' M 100  HIS  O  ', ' M 107  TYR  N  ', -0.406, (212.061, 208.508, 130.925)), (' N  63  PHE  CE1', ' N  76  ILE HD11', -0.405, (222.636, 200.935, 111.717)), (' A 421  TYR  HA ', ' A 461  LEU HD13', -0.405, (204.989, 216.346, 146.874)), (' N  15  PRO  HA ', ' N  79  LEU HD22', -0.405, (226.023, 195.562, 104.906)), (' N  64  SER  O  ', ' N  74  LEU HD12', -0.405, (226.165, 205.099, 115.278)), (' N  50  TYR  HB2', ' N  54  SER  OG ', -0.404, (222.136, 209.043, 124.707)), (' A 347  PHE  CE2', ' A 509  ARG  HB3', -0.401, (189.679, 227.986, 152.615)), (' H  33  TRP  NE1', ' H 100  SER  O  ', -0.4, (179.809, 238.251, 138.139))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
