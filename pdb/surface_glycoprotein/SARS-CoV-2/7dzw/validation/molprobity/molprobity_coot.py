# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  73 ', 'THR', 0.00031035589833627115, (219.41899999999998, 101.81600000000003, 155.245)), ('A', '  76 ', 'THR', 0.018355091611596028, (215.534, 103.72600000000004, 161.492)), ('A', ' 158 ', 'ARG', 0.011354830941068624, (205.485, 105.621, 183.157)), ('A', ' 255 ', 'SER', 0.00915345504791223, (215.483, 103.60599999999998, 171.62)), ('A', ' 353 ', 'TRP', 0.004579492279044259, (186.2929999999999, 178.555, 196.111)), ('A', ' 378 ', 'LYS', 0.021747007711579322, (183.548, 160.826, 188.784)), ('A', ' 381 ', 'GLY', 0.07650869672203907, (182.584, 163.99299999999997, 179.534)), ('A', ' 429 ', 'PHE', 0.01882677811177529, (180.07099999999988, 170.488, 181.51400000000004)), ('A', ' 689 ', 'SER', 0.001403364292973237, (187.403, 129.82900000000004, 129.498)), ('A', ' 690 ', 'GLN', 0.021437954047787852, (185.61799999999988, 133.067, 130.176)), ('A', ' 707 ', 'TYR', 0.023967654701608457, (165.246, 162.1400000000001, 106.11)), ('A', ' 794 ', 'ILE', 0.006972922540458463, (130.1799999999999, 128.42600000000002, 120.70700000000001)), ('A', ' 796 ', 'ASP', 0.004147611479830782, (132.72399999999988, 131.70800000000006, 116.62500000000003)), ('A', ' 797 ', 'PHE', 0.019719408135176912, (134.973, 134.77700000000002, 117.312)), ('A', '1065 ', 'VAL', 0.07204242951363117, (146.759, 143.71400000000003, 121.28200000000001)), ('A', '1098 ', 'ASN', 0.028925575481921914, (156.73199999999989, 155.35200000000003, 94.11500000000001)), ('B', '  40 ', 'ASP', 0.0, (185.914, 181.748, 167.694)), ('B', ' 155 ', 'SER', 0.025343410141902483, (207.81899999999987, 209.198, 185.122)), ('B', ' 255 ', 'SER', 0.0026208007198178524, (201.07499999999987, 224.208, 182.50500000000002)), ('B', ' 353 ', 'TRP', 0.02220541103008954, (154.151, 162.627, 221.786)), ('B', ' 375 ', 'SER', 0.014846102389906867, (160.6, 180.781, 216.725)), ('B', ' 402 ', 'ILE', 0.0392816543342941, (160.837, 167.68399999999997, 224.65500000000003)), ('B', ' 410 ', 'ILE', 0.04499651745999216, (164.109, 166.271, 216.876)), ('B', ' 411 ', 'ALA', 0.05901214233947768, (164.60599999999988, 165.74, 213.09400000000002)), ('B', ' 412 ', 'PRO', 0.004045675019897772, (163.275, 162.45, 211.739)), ('B', ' 414 ', 'GLN', 0.03284053060898671, (167.807, 162.064, 214.69600000000005)), ('B', ' 429 ', 'PHE', 0.007571967787596193, (159.432, 161.701, 208.086)), ('B', ' 440 ', 'ASN', 0.04694170291445535, (155.524, 181.013, 226.63000000000002)), ('B', ' 467 ', 'ASP', 0.004306498359792756, (154.24299999999988, 154.971, 221.168)), ('B', ' 516 ', 'GLU', 0.0010515625382249744, (155.133, 166.389, 202.866)), ('B', ' 571 ', 'ASP', 0.02042169637597067, (140.805, 166.826, 174.736)), ('B', ' 687 ', 'VAL', 0.005753698973850746, (164.21899999999988, 207.783, 147.399)), ('B', ' 689 ', 'SER', 0.0008305218443040822, (158.696, 206.74400000000003, 146.437)), ('B', ' 707 ', 'TYR', 0.033808967552172955, (127.059, 185.374, 124.397)), ('B', ' 721 ', 'SER', 0.02995590817791255, (153.434, 180.045, 120.754)), ('B', ' 744 ', 'GLY', 0.007719419999999999, (182.67599999999987, 156.587, 159.681)), ('B', ' 796 ', 'ASP', 0.004927044913488434, (165.764, 171.1770000000001, 104.795)), ('B', ' 813 ', 'SER', 0.019973977428082313, (179.3409999999999, 167.23499999999999, 125.141)), ('B', ' 987 ', 'PRO', 0.051891409258746315, (181.589, 151.441, 178.165)), ('C', '  75 ', 'GLY', 0.0073059643297356475, (104.81399999999994, 132.107, 205.829)), ('C', ' 146 ', 'HIS', 0.032983292207905746, (108.025, 156.192, 222.288)), ('C', ' 153 ', 'MET', 0.00047097, (114.403, 155.823, 226.332)), ('C', ' 173 ', 'GLN', 0.09225334516631799, (124.97699999999995, 168.90100000000004, 206.296)), ('C', ' 353 ', 'TRP', 0.009658892883197451, (191.181, 132.351, 191.172)), ('C', ' 429 ', 'PHE', 0.02405259233454996, (178.643, 138.554, 180.889)), ('C', ' 476 ', 'GLY', 0.0772135707074215, (215.794, 147.885, 183.7)), ('C', ' 534 ', 'VAL', 0.026190283176599848, (149.498, 117.682, 177.45600000000002)), ('C', ' 688 ', 'ALA', 0.027854786677288326, (112.85899999999994, 142.375, 164.867)), ('C', ' 707 ', 'TYR', 0.01046084725218113, (126.45399999999994, 137.24300000000005, 121.329)), ('C', ' 796 ', 'ASP', 0.004053078028467665, (118.728, 181.922, 126.206)), ('C', ' 813 ', 'SER', 0.04871400046712413, (128.659, 184.787, 148.803)), ('C', ' 833 ', 'PHE', 0.01253764269908674, (139.201, 181.907, 157.661)), ('C', ' 841 ', 'LEU', 0.0035184137825982733, (137.9849999999999, 183.66, 175.397)), ('C', '1098 ', 'ASN', 0.023175226666841325, (115.91799999999995, 144.91600000000005, 111.19800000000001))]
data['omega'] = [('B', ' 587 ', 'ILE', None, (136.90999999999988, 179.509, 175.894)), ('B', ' 855 ', 'PHE', None, (181.725, 164.164, 151.405)), ('C', ' 812 ', 'PRO', None, (124.10399999999994, 185.369, 149.86))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 586  ASP  N  ', ' C 842  GLY  HA3', -0.848, (135.255, 181.813, 178.294)), (' B 586  ASP  CA ', ' C 844  ILE  H  ', -0.811, (134.743, 180.035, 175.703)), (' B 199  GLY  HA2', ' B 232  GLY  HA2', -0.806, (186.328, 186.477, 184.634)), (' B 199  GLY  CA ', ' B 232  GLY  HA2', -0.73, (186.309, 185.858, 184.153)), (' B 586  ASP  CA ', ' C 843  ASP  N  ', -0.717, (135.525, 179.677, 176.895)), (' A 136  CYS  H  ', ' A 159  VAL  CA ', -0.706, (205.357, 110.585, 180.997)), (' B 585  LEU  C  ', ' C 842  GLY  HA3', -0.679, (135.26, 180.664, 178.749)), (' B 575  ALA  CA ', ' C 843  ASP  CA ', -0.676, (135.175, 176.543, 177.915)), (' B 199  GLY  C  ', ' B 232  GLY  HA2', -0.675, (186.659, 186.553, 184.239)), (' C 729  VAL  H  ', ' C1059  GLY  HA2', -0.637, (139.099, 168.893, 146.118)), (' B 587  ILE  CA ', ' C 842  GLY  N  ', -0.6, (138.253, 181.104, 176.163)), (' B 587  ILE  N  ', ' C 842  GLY  C  ', -0.574, (137.35, 179.201, 177.348)), (' B 586  ASP  C  ', ' C 844  ILE  H  ', -0.559, (134.988, 179.933, 175.445)), (' C 142  GLY  HA3', ' C 244  LEU  O  ', -0.552, (111.369, 150.33, 213.136)), (' B 587  ILE  N  ', ' C 843  ASP  N  ', -0.539, (136.478, 179.186, 177.347)), (' B 585  LEU  O  ', ' C 843  ASP  N  ', -0.539, (135.267, 179.362, 178.745)), (' B 586  ASP  CA ', ' C 843  ASP  CA ', -0.496, (135.057, 178.902, 177.12)), (' A  44  ARG  O  ', ' A 283  GLY  HA2', -0.487, (168.598, 122.448, 160.446)), (' B 729  VAL  H  ', ' B1059  GLY  HA2', -0.468, (164.131, 165.887, 134.945)), (' A 138  ASP  C  ', ' A 140  PHE  H  ', -0.463, (206.326, 108.614, 174.773)), (' B 586  ASP  O  ', ' C 841  LEU  C  ', -0.454, (136.643, 182.313, 175.796)), (' B 148  ASN  C  ', ' B 150  LYS  H  ', -0.452, (220.775, 213.759, 185.124)), (' A 320  VAL  CA ', ' A 623  ALA  CA ', -0.445, (193.53, 152.673, 151.003)), (' B 553  THR  N  ', ' C 841  LEU  O  ', -0.439, (136.267, 184.231, 177.624)), (' A 109  THR  C  ', ' A 111  ASP  H  ', -0.425, (205.84, 123.268, 177.932)), (' B 586  ASP  CA ', ' C 844  ILE  N  ', -0.424, (134.228, 178.971, 176.123)), (' A 729  VAL  H  ', ' A1059  GLY  HA2', -0.423, (148.298, 143.368, 140.447)), (' C 698  SER  C  ', ' C 700  GLY  H  ', -0.421, (127.358, 139.177, 141.627)), (' A 145  TYR  N  ', ' A 246  ARG  O  ', -0.417, (203.596, 94.663, 171.533)), (' B 588  THR  N  ', ' C 841  LEU  N  ', -0.416, (138.703, 182.053, 174.308)), (' B 553  THR  H  ', ' C 841  LEU  C  ', -0.412, (136.78, 183.602, 177.435)), (' B 551  VAL  O  ', ' C 841  LEU  CA ', -0.412, (139.435, 183.368, 176.235)), (' B 586  ASP  C  ', ' C 843  ASP  N  ', -0.411, (135.845, 179.473, 177.217)), (' B 586  ASP  O  ', ' C 840  CYS  O  ', -0.405, (135.761, 181.909, 174.395))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
