# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 159 ', 'PRO', None, (6.338999999999999, -9.124000000000008, -20.341)), ('A', ' 161 ', 'PRO', None, (9.715, -11.273, -25.069000000000013)), ('B', ' 145 ', 'PRO', None, (33.7, -26.837000000000014, -20.537000000000003)), ('C', ' 159 ', 'PRO', None, (-1.5699999999999996, -58.413000000000025, -50.796)), ('C', ' 161 ', 'PRO', None, (3.788, -56.14400000000003, -48.748)), ('D', ' 145 ', 'PRO', None, (19.644, -39.556999999999974, -65.669))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' D   4  LEU  N  ', ' D 303  HOH  O  ', -1.004, (-5.548, -30.059, -67.268)), (' D 155  ASP  O  ', ' D 301  HOH  O  ', -0.953, (8.98, -58.917, -87.937)), (' B 138  CYS  SG ', ' B 413  HOH  O  ', -0.936, (30.769, -13.028, -12.082)), (' C 200  SER  HB2', ' C 204  GLN  HG2', -0.925, (29.341, -71.308, -58.568)), (' B 197  CYS  SG ', ' B 413  HOH  O  ', -0.883, (30.95, -12.864, -11.672)), (' D 153  LYS  HE2', ' D 198  GLN HE21', -0.816, (13.33, -53.027, -82.015)), (' A   2  VAL HG12', ' A   3  GLN  HB2', -0.805, (0.726, -38.014, -33.712)), (' A   2  VAL  N  ', ' A 302  HOH  O  ', -0.802, (0.886, -43.106, -30.945)), (' A 145  GLY  N  ', ' A 303  HOH  O  ', -0.758, (44.455, 0.011, -22.887)), (' R 382  VAL  O  ', ' R 601  HOH  O  ', -0.722, (-30.366, -81.326, -25.819)), (' E 343  ASN  ND2', ' E 602  HOH  O  ', -0.717, (-43.671, -3.809, -18.26)), (' D  59  GLY  O  ', ' D 304  HOH  O  ', -0.694, (9.498, -22.278, -46.115)), (' R 364  ASP  OD2', ' R 367  VAL HG23', -0.663, (-44.58, -77.976, -26.05)), (' E 403  ARG  HG2', ' E 505  TYR  HA ', -0.649, (-22.381, -11.298, -27.306)), (' B  11  SER  HB3', ' B 110  LEU HD21', -0.64, (34.226, -34.358, -21.128)), (' A   6  GLU  O  ', ' A 117  GLN  NE2', -0.638, (-0.046, -28.674, -27.79)), (' R 377  PHE  CD1', ' R 434  ILE HG12', -0.637, (-32.461, -72.741, -25.733)), (' D 109  VAL  O  ', ' D 305  HOH  O  ', -0.637, (20.582, -33.606, -58.34)), (' A 175  VAL HG22', ' A 194  VAL HG22', -0.627, (27.36, -4.426, -29.485)), (' E 343  ASN  ND2', ' E 604  HOH  O  ', -0.623, (-43.938, -1.829, -19.26)), (' A 204  GLN  NE2', ' A 305  HOH  O  ', -0.621, (30.644, 2.379, -35.857)), (' D  83  GLU  HG2', ' D 328  HOH  O  ', -0.603, (18.831, -28.225, -51.852)), (' D 153  LYS  HE2', ' D 198  GLN  NE2', -0.603, (13.094, -52.462, -81.796)), (' E 449  TYR  CD1', ' E 496  GLY  HA2', -0.595, (-28.151, -19.529, -32.187)), (' R 364  ASP  OD1', ' R 388  ASN  ND2', -0.592, (-42.946, -80.945, -25.498)), (' C  63  VAL HG21', ' C  67  PHE  CD2', -0.59, (-15.047, -38.822, -54.431)), (' R 522  ALA  N  ', ' R 606  HOH  O  ', -0.586, (-36.029, -89.303, -8.408)), (' D 126  SER  O  ', ' D 130  GLN  HG2', -0.575, (7.217, -75.92, -68.583)), (' B  18  ILE HD11', ' B  77  ILE HD12', -0.568, (26.527, -41.013, -22.082)), (' B 185  THR HG22', ' B 187  GLU  N  ', -0.567, (22.031, 1.903, -0.97)), (' C  13  GLN  NE2', ' C 308  HOH  O  ', -0.565, (-14.621, -59.475, -50.326)), (' A 129  LYS  NZ ', ' A 307  HOH  O  ', -0.564, (10.931, -1.573, -14.908)), (' C 175  VAL HG22', ' C 194  VAL HG22', -0.557, (21.098, -61.849, -55.936)), (' B 185  THR HG22', ' B 187  GLU  H  ', -0.555, (21.847, 2.583, -1.105)), (' D  56  ARG  NH1', ' D 312  HOH  O  ', -0.541, (9.343, -14.562, -54.341)), (' R 354  ASN  O  ', ' R 398  ASP  HA ', -0.537, (-28.839, -68.947, -13.593)), (' R 509  ARG  NH1', ' R 607  HOH  O  ', -0.529, (-36.051, -60.305, -20.204)), (' C 131  PRO  HD2', ' C 217  THR HG21', -0.523, (3.18, -66.723, -52.177)), (' B 113  PRO  O  ', ' B 303  HOH  O  ', -0.515, (37.966, -25.455, -25.696)), (' R 431  GLY  HA2', ' R 515  PHE  CE2', -0.514, (-30.319, -80.049, -21.202)), (' E 440  ASN  OD1', ' E 441  LEU HD22', -0.513, (-35.65, -11.601, -20.226)), (' D 171  GLN  HB3', ' D 175  LYS  O  ', -0.511, (19.27, -45.941, -58.438)), (' R 379  CYS  HB3', ' R 601  HOH  O  ', -0.506, (-29.922, -80.958, -25.687)), (' E 382  VAL  N  ', ' E 611  HOH  O  ', -0.501, (-33.008, 16.175, -25.651)), (' B 197  CYS  HB2', ' B 413  HOH  O  ', -0.501, (30.209, -12.299, -10.697)), (' B  54  THR HG22', ' B  66  GLY  O  ', -0.499, (20.861, -52.465, -17.309)), (' B 197  CYS  CB ', ' B 413  HOH  O  ', -0.497, (30.18, -12.119, -10.832)), (' C  12  VAL HG11', ' C  85  LEU HD13', -0.496, (-13.841, -47.613, -51.428)), (' D  26  SER  O  ', ' D  31  SER  OG ', -0.493, (-12.009, -16.87, -68.284)), (' C   2  VAL HG23', ' C  26  GLY  HA3', -0.491, (-2.867, -25.67, -35.1)), (' D  28  ASP  OD1', ' D  29  VAL  N  ', -0.49, (-7.399, -21.127, -66.388)), (' C  30  SER  HB3', ' C  73  ASN  OD1', -0.487, (-17.801, -26.695, -37.342)), (' B 171  GLN HE21', ' B 177  ALA  HB2', -0.484, (28.983, -16.241, -24.119)), (' A  46  GLU  OE2', ' A 306  HOH  O  ', -0.483, (7.685, -32.967, -7.013)), (' D 154  ALA  HB2', ' D 195  TYR  CE2', -0.482, (6.553, -60.593, -80.032)), (' E 458  LYS  NZ ', ' E 605  HOH  O  ', -0.482, (-24.891, -7.266, -52.51)), (' E 493  GLN HE21', ' E 494  SER  H  ', -0.48, (-25.565, -16.707, -38.32)), (' R 403  ARG  HD2', ' R 603  HOH  O  ', -0.475, (-17.159, -58.313, -26.18)), (' A   6  GLU  N  ', ' A 117  GLN HE21', -0.475, (0.053, -29.869, -27.042)), (' D 117  PRO  HD3', ' D 201  HIS  CD2', -0.47, (19.877, -44.384, -69.98)), (' A  12  VAL HG21', ' A  85  LEU HD13', -0.465, (-2.422, -20.669, -13.382)), (' R 431  GLY  HA2', ' R 515  PHE  CD2', -0.464, (-30.071, -80.402, -20.968)), (' A 100  ASN  HB2', ' R 487  ASN  OD1', -0.46, (0.685, -52.103, -16.196)), (' R 365  TYR  CD2', ' R 387  LEU  HB3', -0.458, (-36.803, -81.781, -23.023)), (' R 403  ARG  NH1', ' R 603  HOH  O  ', -0.457, (-15.966, -57.419, -25.836)), (' R 438  SER  OG ', ' R 442  ASP  OD2', -0.456, (-31.55, -57.17, -22.16)), (' B  80  LEU HD11', ' B 107  LEU HD21', -0.454, (27.754, -39.047, -24.112)), (' C  36  TRP  CE2', ' C  80  LEU  HB2', -0.452, (-13.422, -35.957, -47.47)), (' B  83  GLU  N  ', ' B  83  GLU  OE1', -0.448, (26.098, -36.619, -31.909)), (' A  63  VAL HG13', ' A  67  PHE  CG ', -0.447, (-1.572, -30.594, -8.647)), (' E 438  SER  HB3', ' E 509  ARG  HG3', -0.446, (-34.154, -8.346, -23.721)), (' B  32  TYR  O  ', ' B  68  LYS  NZ ', -0.441, (14.983, -52.614, -8.278)), (' C  63  VAL HG21', ' C  67  PHE  CE2', -0.44, (-14.881, -39.248, -54.748)), (' E 348  ALA  HB2', ' E 354  ASN  OD1', -0.44, (-39.518, -5.901, -35.197)), (' A 117  GLN  HG3', ' A 118  GLY  N  ', -0.439, (3.816, -30.473, -25.561)), (' E 396  TYR  O  ', ' E 513  LEU  HA ', -0.437, (-37.675, 6.763, -30.441)), (' R 399  SER  HA ', ' R 510  VAL  O  ', -0.437, (-29.368, -66.812, -18.641)), (' C   4  LEU HD23', ' C  24  ALA  HA ', -0.435, (-7.255, -30.344, -38.552)), (' D   4  LEU  HB2', ' D 102  GLY  HA2', -0.434, (-3.028, -28.232, -64.84)), (' E 364  ASP  OD2', ' E 367  VAL HG23', -0.433, (-43.899, 10.029, -14.958)), (' A 171  LEU HD21', ' A 194  VAL HG11', -0.43, (29.636, -2.614, -30.928)), (' A 136  LEU  HB3', ' B 122  PHE  CD1', -0.428, (28.576, -1.587, -17.894)), (' E 387  LEU HD21', ' E 515  PHE  CZ ', -0.427, (-37.098, 12.522, -25.331)), (' A  36  TRP  CE2', ' A  80  LEU  HB2', -0.427, (-2.917, -32.688, -16.78)), (' A 124  SER  O  ', ' A 308  HOH  O  ', -0.426, (0.179, -12.737, -13.131)), (' A  62  SER  O  ', ' A  66  ARG  NH2', -0.424, (1.269, -27.97, -5.45)), (' B 201  HIS  HD2', ' B 305  HOH  O  ', -0.423, (37.659, -23.183, -16.24)), (' B  81  GLN  O  ', ' B 109  VAL HG21', -0.422, (28.307, -36.847, -27.725)), (' E 417  LYS  H  ', ' E 417  LYS  HE2', -0.422, (-19.424, -4.508, -36.165)), (' A   6  GLU  H  ', ' A 117  GLN HE21', -0.42, (0.466, -30.141, -26.972)), (' R 369  TYR  HD1', ' R 377  PHE  CE2', -0.415, (-35.315, -74.994, -28.695)), (' B 145  PRO  O  ', ' B 201  HIS  HE1', -0.414, (32.722, -25.084, -18.839)), (' D  35  VAL  HA ', ' D  91  CYS  O  ', -0.413, (-3.492, -21.169, -59.862)), (' A  82  MET  HE1', ' A 121  VAL HG21', -0.409, (-0.268, -25.298, -15.862)), (' D  38  TYR  O  ', ' D  88  TYR  HA ', -0.408, (4.792, -28.473, -56.991)), (' C  20  LEU  HG ', ' C  82  MET  HE2', -0.407, (-13.015, -41.669, -47.985)), (' B 184  LEU HD23', ' B 189  TRP  HB2', -0.404, (25.701, -0.773, -4.98)), (' C  18  LEU  HB3', ' C  82  MET  HE3', -0.402, (-14.042, -44.028, -48.722)), (' A 104  ASP  OD1', ' A 106  SER  N  ', -0.402, (5.631, -58.516, -20.591)), (' B  16  GLN  HG2', ' B  17  SER  N  ', -0.401, (34.676, -42.936, -22.698)), (' D 121  LEU  O  ', ' D 306  HOH  O  ', -0.401, (17.675, -63.149, -70.893))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
