# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('E', ' 371 ', 'SER', 0.03374580750628654, (40.65699999999997, -34.794, -26.035)), ('H', ' 155 ', 'PRO', 0.14807082321529014, (24.33999999999999, 3.7779999999999982, -18.567))]
data['omega'] = [('A', ' 108 ', 'PRO', None, (3.3739999999999983, -38.642, -56.999)), ('A', ' 153 ', 'PRO', None, (-17.335999999999995, -18.141999999999985, -53.886)), ('A', ' 155 ', 'PRO', None, (-13.558, -21.481, -57.551)), ('B', '   8 ', 'PRO', None, (16.442, -16.077, -64.961)), ('B', ' 141 ', 'PRO', None, (1.3359999999999994, -9.474999999999993, -80.175)), ('H', ' 155 ', 'PRO', None, (25.469999999999985, 4.709000000000002, -18.550000000000004)), ('H', ' 157 ', 'PRO', None, (22.877, 2.762, -13.305000000000003)), ('L', '   8 ', 'PRO', None, (0.543, -18.953, -13.406000000000002)), ('L', ' 142 ', 'PRO', None, (-5.583, -2.493999999999998, -9.599))]
data['rota'] = [('H', '  12 ', 'VAL', 0.19504875928427656, (32.776999999999994, -1.9960000000000002, -21.614000000000008)), ('H', ' 217 ', 'LYS', 0.27354953317851205, (18.052999999999997, 21.36, -8.82)), ('L', '  45 ', 'LYS', 0.10888131786598768, (17.869, -18.584, -3.894)), ('L', ' 182 ', 'LEU', 0.20023714341820525, (8.852, 15.162999999999993, -28.764)), ('A', ' 144 ', 'LEU', 0.1742636402797387, (-20.098999999999986, -18.481, -79.482)), ('B', '  34 ', 'LEU', 0.06232898198853923, (18.32199999999999, -30.762000000000004, -56.303000000000004)), ('B', '  49 ', 'ILE', 0.23404572513880617, (14.281999999999998, -33.461, -63.15500000000001)), ('B', '  93 ', 'ASP', 0.15945713825094066, (18.087, -29.004999999999985, -46.018000000000015))]
data['cbeta'] = []
data['probe'] = [(' B  81  PRO  HA ', ' B 106  ILE HD13', -0.664, (5.596, -22.0, -76.737)), (' H  39  GLN  HB2', ' H  45  LEU HD23', -0.641, (18.881, -13.585, -14.575)), (' H 127  PRO  HB3', ' H 150  VAL HG13', -0.627, (19.761, 12.354, -15.038)), (' A  29  VAL HG13', ' A  34  MET  HG3', -0.62, (-0.492, -40.188, -47.735)), (' B  24  ARG  NH1', ' B 303  SO4  O1 ', -0.619, (25.525, -16.666, -57.965)), (' E 340  GLU  OE1', ' E 356  LYS  NZ ', -0.618, (37.792, -51.609, -28.506)), (' E 412  PRO  HG3', ' E 429  PHE  HB3', -0.613, (17.665, -39.562, -23.995)), (' A  82  MET  HB3', ' A  85  LEU HD21', -0.612, (-6.481, -23.516, -42.899)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.603, (11.748, -19.419, -3.923)), (' H  83  MET  HB3', ' H  86  LEU HD21', -0.579, (32.197, -10.645, -21.988)), (' E 455  LEU HD22', ' E 493  GLN  HG3', -0.577, (15.795, -42.117, -49.809)), (' A  34  MET  HB3', ' A  78  LEU HD22', -0.577, (-0.503, -37.135, -48.098)), (' A   8  GLY  H  ', ' A 301  PEG  H12', -0.577, (-13.761, -30.545, -51.242)), (' A   6  GLU  H  ', ' A 111  GLN HE22', -0.574, (-8.616, -33.998, -55.984)), (' B 185  ASP  HA ', ' B 188  LYS  HD3', -0.554, (-30.789, 3.972, -70.47)), (' B 106  ILE  O  ', ' B 166  GLN  NE2', -0.549, (4.4, -16.623, -76.923)), (' H  29  PHE  O  ', ' H  72  ARG  NH2', -0.54, (36.175, -26.477, -6.492)), (' H  91  THR HG23', ' H 118  THR  HA ', -0.539, (24.955, -3.942, -19.902)), (' A  22  CYS  HB3', ' A  78  LEU  HB3', -0.538, (-4.254, -36.738, -49.235)), (' H  97  ALA  HB1', ' H 108  PHE  HB3', -0.527, (24.132, -21.567, -9.095)), (' H  67  ARG  NH1', ' H  90  ASP  OD2', -0.526, (29.144, -10.98, -25.924)), (' A  11  LEU  HB2', ' A 153  PRO  HG3', -0.523, (-16.152, -19.599, -50.775)), (' L 121  PRO  HD3', ' L 133  VAL HG22', -0.523, (4.899, 19.162, -22.296)), (' H 150  VAL  HB ', ' H 186  LEU  HB3', -0.516, (16.108, 9.282, -14.967)), (' L  61  ARG  NE ', ' L  82  ASP  OD2', -0.509, (7.003, -18.162, 3.563)), (' L  39  LYS  HB2', ' L  42  LYS  HB2', -0.508, (16.039, -10.548, -3.605)), (' B  10  THR HG22', ' B 103  LYS  HB3', -0.504, (8.227, -14.748, -66.411)), (' E 345  THR HG23', ' E 346  ARG  HG2', -0.501, (38.528, -47.967, -40.024)), (' A  59  TYR  HB2', ' A  64  LYS  HG2', -0.499, (4.625, -27.113, -38.184)), (' B  84  PHE  HB2', ' B 106  ILE HD12', -0.499, (4.6, -21.443, -74.476)), (' L 146  LYS  HB3', ' L 198  THR  HB ', -0.487, (-7.528, 2.811, -20.111)), (' L 147  VAL HG21', ' L 176  LEU HD22', -0.484, (0.362, 5.583, -17.771)), (' H   6  GLU  H  ', ' H 113  GLN HE22', -0.482, (30.013, -10.543, -5.402)), (' H 103  LEU HD11', ' L  50  ALA  HB2', -0.48, (17.006, -33.22, -7.689)), (' H 177  VAL HG11', ' L 161  GLN  HB3', -0.48, (9.849, 4.042, -22.766)), (' B 210  ASN  ND2', ' B 404  HOH  O  ', -0.479, (-25.559, -2.068, -86.434)), (' A  82  MET  HE1', ' A 115  VAL HG21', -0.476, (-7.848, -25.161, -47.027)), (' H  52  SER  O  ', ' H  72  ARG  NH1', -0.475, (35.769, -26.918, -11.108)), (' B  11  LEU  O  ', ' B 105  ASP  N  ', -0.474, (9.075, -17.182, -71.559)), (' H 150  VAL HG11', ' H 158  VAL HG21', -0.474, (18.658, 8.769, -13.89)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.472, (27.882, -52.637, -12.949)), (' A 149  LYS  NZ ', ' A 177  GLN  OE1', -0.472, (-21.283, -9.079, -63.796)), (' A 125  PRO  HD2', ' A 211  THR HG21', -0.47, (-24.33, -21.537, -59.769)), (' H 132  LEU  HB3', ' L 119  PHE  CG ', -0.465, (5.011, 17.205, -13.788)), (' E 444  LYS  HG3', ' E 448  ASN  HB2', -0.445, (33.886, -40.202, -49.597)), (' H 175  PRO  HD2', ' L 163  SER  HB2', -0.438, (9.476, 3.177, -14.372)), (' B   4  MET  HE2', ' B  29  VAL HG21', -0.437, (21.221, -25.586, -52.22)), (' B  62  ARG  HB2', ' B  77  SER  O  ', -0.435, (14.367, -29.342, -76.148)), (' L 109  ARG HH12', ' L 112  ALA  HB2', -0.433, (-6.174, 0.885, -3.23)), (' E 379  CYS  SG ', ' E 384  PRO  HG3', -0.433, (27.805, -34.126, -20.154)), (' H   7  SER  OG ', ' H  21  SER  OG ', -0.428, (36.249, -9.817, -8.668)), (' A 125  PRO  HB3', ' A 151  TYR  HB3', -0.428, (-21.213, -17.912, -60.313)), (' E 396  TYR  HB2', ' E 514  SER  HB2', -0.423, (24.692, -47.247, -23.724)), (' H 154  PHE  HA ', ' H 155  PRO  HA ', -0.422, (23.314, 4.525, -19.719)), (' H  12  VAL HG13', ' H 119  VAL HG22', -0.421, (30.168, -4.802, -22.021)), (' H  69  THR  HB ', ' H  82  GLN  HB3', -0.42, (37.641, -16.164, -20.618)), (' H 145  ALA  HB2', ' H 191  THR HG22', -0.419, (1.801, 14.21, -6.832)), (' B   4  MET  SD ', ' B  25  ALA  HB2', -0.416, (20.787, -23.465, -54.195)), (' L  35  TRP  CE2', ' L  73  LEU  HB2', -0.413, (7.646, -24.979, -8.143)), (' B 145  LYS  HB3', ' B 197  THR  OG1', -0.41, (-5.985, 0.01, -79.643)), (' A  60  ALA  O  ', ' A  64  LYS  HG3', -0.407, (4.925, -24.525, -39.258)), (' H  24  ALA  HB1', ' H  27  PHE  CE1', -0.407, (33.091, -21.431, -2.324)), (' B 197  THR HG22', ' B 204  PRO  HB3', -0.402, (-8.303, 0.899, -83.502)), (' B  34  LEU  HA ', ' B  34  LEU HD22', -0.401, (17.578, -29.363, -55.608)), (' A  36  TRP  NE1', ' A  80  LEU  HB2', -0.401, (-3.392, -31.85, -45.558))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
