# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('G', ' 146 ', 'SER', 0.00045575429213443557, (64.91211, 23.38451, 3.6876800000000007)), ('H', '  98 ', 'PRO', 0.018652751161417062, (25.85629, 18.77898, 14.097570000000003)), ('J', '  98 ', 'PRO', 0.012170038746329138, (-25.178159999999984, -17.91829, 14.456730000000004))]
data['omega'] = [('A', ' 210 ', 'PRO', None, (13.72849, -33.93222, 62.9366)), ('B', '  32 ', 'PRO', None, (0.7660800000000076, -7.8748, 66.12308)), ('D', ' 210 ', 'PRO', None, (-11.893189999999997, 34.29411, 61.207900000000016)), ('E', '  32 ', 'PRO', None, (1.33235, 8.70469, 65.33542000000001)), ('G', '  10 ', 'PRO', None, (33.3194, 42.20572, 23.334690000000002)), ('H', '   8 ', 'PRO', None, (34.623050000000006, 10.13856, 25.02845)), ('H', ' 165 ', 'PRO', None, (39.73722999999997, 15.935409999999996, 11.8438)), ('I', '  10 ', 'PRO', None, (-30.11278, -41.010059999999996, 23.706890000000005)), ('J', '   8 ', 'PRO', None, (-31.68124, -9.18455, 26.753740000000004)), ('J', ' 165 ', 'PRO', None, (-36.83328999999999, -14.30248, 13.300200000000004))]
data['rota'] = [('A', ' 178 ', 'THR', 0.08790923431728274, (15.990619999999987, -33.16681, 52.57442000000001)), ('D', ' 103 ', 'VAL', 0.04585730064730351, (1.5031399999999984, 38.351949999999995, 56.536300000000004)), ('G', '  37 ', 'GLN', 0.08256653368989143, (17.11763, 32.00808, 44.14792)), ('G', '  46 ', 'CYS', 0.09048340875041667, (38.44989, 29.09995, 25.03422)), ('G', '  65 ', 'ASN', 0.1454087214090424, (31.18987999999997, 38.06754, 48.78566)), ('G', '  86 ', 'TYR', 0.004740344482915803, (20.52327, 42.15462, 38.45136)), ('G', ' 106 ', 'VAL', 0.17585809475279382, (20.74073, 31.59746000000001, 37.22596)), ('G', ' 213 ', 'ASP', 0.09663743703743766, (60.91281, 50.67715, 14.53013)), ('I', '   6 ', 'GLN', 0.0, (-21.620149999999985, -39.06221, 30.608600000000006)), ('I', '  37 ', 'GLN', 0.004702738284046836, (-14.557029999999996, -31.70533, 45.13891000000002)), ('I', '  46 ', 'CYS', 0.1168112031664443, (-35.47855999999997, -28.00421, 25.79952000000001)), ('I', '  86 ', 'TYR', 0.013913622283336318, (-17.843269999999997, -41.58762999999999, 38.84999)), ('I', ' 122 ', 'THR', 0.1520322979582594, (-27.837410000000006, -37.18739, 28.696800000000007)), ('I', ' 173 ', 'THR', 0.09506496305569744, (-45.05551999999997, -31.89461999999998, 13.86053)), ('I', ' 212 ', 'GLU', 0.2919286334707153, (-55.16864, -50.24229, 12.232620000000004)), ('I', ' 213 ', 'ASP', 0.006234231800956647, (-58.15581, -49.0059, 14.26422)), ('H', ' 113 ', 'THR', 0.0017460036374257496, (24.49492999999999, 24.73328, 46.75498)), ('H', ' 127 ', 'LEU', 0.25730144799527693, (31.823030000000003, 13.80514, 8.59064)), ('J', '  11 ', 'LEU', 0.11831155315057942, (-32.04561, -11.33963, 20.66341)), ('J', '  21 ', 'LEU', 0.0, (-26.51267, -8.77335, 26.7536)), ('J', ' 113 ', 'THR', 0.0472724640631171, (-22.13037, -24.24186, 48.04858)), ('J', ' 124 ', 'LEU', 0.08469537757538799, (-28.884819999999987, -14.699089999999996, 19.79702)), ('J', ' 127 ', 'LEU', 0.0006039495376852163, (-29.520889999999994, -12.34079, 10.036400000000002))]
data['cbeta'] = []
data['probe'] = [(' J  13  ARG  HG3', ' J  19  VAL  HB ', -0.761, (-25.767, -7.24, 18.651)), (' H   4  ILE HG13', ' H  25  GLN  HB3', -0.752, (30.18, 13.442, 37.391)), (' I 167  ASP  HB3', ' I 170  VAL HG12', -0.712, (-45.477, -32.56, 1.708)), (' D 190  THR HG22', ' D 202  ARG  HB3', -0.711, (-23.561, 25.79, 77.549)), (' E  39  LEU HD13', ' E  49  VAL HG11', -0.71, (-18.056, 9.094, 60.407)), (' A   5  MET  HB2', ' A 168  LEU HD13', -0.71, (3.189, -32.406, 52.426)), (' H  43  ARG  HB2', ' H  53  ILE HD11', -0.694, (23.827, 19.02, 23.748)), (' B   7  ILE HD12', ' B  91  LYS  HD2', -0.692, (13.639, -8.139, 73.144)), (' A 219  ARG  HD2', ' A 256  ARG  HE ', -0.689, (20.412, -32.96, 94.235)), (' D   5  MET  HB2', ' D 168  LEU HD13', -0.682, (-0.016, 32.32, 51.054)), (' J 135  PRO  HD3', ' J 243  PRO  HB3', -0.663, (-42.574, -8.72, 10.635)), (' E  40  LEU HD21', ' E  81  ARG  HE ', -0.651, (-18.328, 2.137, 66.463)), (' H 135  PRO  HD3', ' H 243  PRO  HB3', -0.623, (45.388, 10.588, 8.669)), (' J  98  PRO  HA ', ' J 126  VAL HG22', -0.62, (-25.396, -16.657, 13.252)), (' A  73  THR HG23', ' C   8  LEU HD23', -0.615, (-14.133, -16.041, 50.004)), (' H  13  ARG  HG3', ' H  19  VAL  HB ', -0.614, (28.824, 7.976, 17.229)), (' B  29  GLY  HA2', ' B  61  SER  HB2', -0.611, (4.139, -16.092, 68.328)), (' A 202  ARG  NH1', ' B  98  ASP  O  ', -0.606, (24.052, -20.523, 77.983)), (' A 230  LEU HD11', ' A 243  LYS  HE3', -0.604, (13.537, -27.317, 75.188)), (' A   6  ARG  HD3', ' A 100  GLY  HA3', -0.603, (-1.335, -28.591, 56.449)), (' G  96  LEU HD11', ' G 128  PRO  HB3', -0.597, (50.172, 40.387, 29.295)), (' D 236  ALA  HB1', ' E  12  ARG  HG3', -0.597, (-20.498, 23.87, 61.252)), (' D  73  THR HG23', ' F   8  LEU HD23', -0.596, (16.661, 16.202, 48.629)), (' J 140  VAL HG23', ' J 250  ALA  HB3', -0.579, (-55.655, -18.41, 17.685)), (' B  33  SER  HB2', ' B  54  LEU HD21', -0.579, (3.697, -10.294, 59.489)), (' H   8  PRO  HG2', ' H  11  LEU  HB2', -0.573, (34.372, 11.22, 21.304)), (' B  79  ALA  HB2', ' B  94  LYS  HD3', -0.573, (24.366, -6.296, 72.521)), (' D 118  TYR  O  ', ' D 121  LYS  HG2', -0.572, (11.533, 12.933, 64.859)), (' A   4  SER  O  ', ' A  29  ASP  N  ', -0.571, (5.587, -31.188, 55.469)), (' I 155  ASP  OD1', ' J 208  ARG  NH1', -0.567, (-56.684, -36.872, 22.759)), (' H  44  GLN  HB3', ' H 101  PHE  HB3', -0.559, (30.334, 23.312, 23.592)), (' H 140  VAL HG23', ' H 250  ALA  HB3', -0.559, (58.711, 20.066, 15.809)), (' H 216  ASN HD21', ' H 218  ARG  HE ', -0.559, (74.358, 22.419, 28.22)), (' D 103  VAL HG13', ' D 107  TRP  HA ', -0.557, (0.044, 40.884, 53.984)), (' J  69  GLY  H  ', ' J  72  ALA  HB2', -0.551, (-12.567, -16.787, 27.905)), (' E  38  ASP  O  ', ' E  81  ARG  N  ', -0.549, (-16.41, 6.423, 66.855)), (' D 213  ILE HD11', ' D 243  LYS  HB3', -0.541, (-14.283, 29.863, 70.086)), (' A 155  GLN  O  ', ' I  37  GLN  NE2', -0.534, (-13.361, -30.085, 48.714)), (' G  56  VAL HG11', ' G  87  ILE HG23', -0.534, (25.085, 37.978, 41.286)), (' A 217  TRP  HB2', ' A 228  THR HG21', -0.534, (15.247, -29.042, 84.449)), (' D   6  ARG  NH1', ' D 102  ASP  OD1', -0.526, (3.067, 31.521, 58.638)), (' D 242  GLN  NE2', ' E  12  ARG  O  ', -0.525, (-21.35, 23.865, 64.559)), (' G  47  ARG  HE ', ' H 123  ARG  NH1', -0.524, (37.512, 23.254, 19.541)), (' D 207  SER  HA ', ' D 240  THR  HB ', -0.519, (-18.982, 29.653, 61.393)), (' J  11  LEU  HB3', ' J 124  LEU HD12', -0.513, (-29.333, -11.836, 20.812)), (' J 167  HIS  HB3', ' J 228  TYR  HB2', -0.511, (-37.534, -13.279, 19.856)), (' E  56  PHE  HA ', ' E  62  PHE  HA ', -0.505, (-1.797, 17.273, 61.506)), (' I  46  CYS  SG ', ' J 188  GLN  NE2', -0.503, (-35.897, -28.434, 22.179)), (' H  50  LEU HD11', ' H 103  LEU HD12', -0.503, (28.868, 23.767, 27.537)), (' G  65  ASN  N  ', ' G  65  ASN  OD1', -0.502, (29.113, 37.6, 48.201)), (' J  12  PHE  HD2', ' J 127  LEU HD21', -0.497, (-32.285, -9.954, 13.742)), (' A  84  TYR  HB3', ' A 139  ALA  HB1', -0.495, (-18.539, -11.539, 62.53)), (' I  76  PHE  HD1', ' I  91  ILE HG12', -0.494, (-34.168, -38.17, 39.396)), (' G  57  TYR  HD2', ' G  65  ASN HD21', -0.492, (27.758, 34.101, 48.779)), (' H 216  ASN HD21', ' H 218  ARG HH21', -0.491, (74.854, 23.287, 29.251)), (' J 157  VAL HG22', ' J 206  ARG  HG2', -0.491, (-53.311, -29.367, 18.882)), (' J  44  GLN  HB3', ' J 101  PHE  HB3', -0.491, (-27.116, -22.768, 24.564)), (' H  99  THR HG22', ' H 125  THR  HA ', -0.489, (31.191, 17.56, 13.915)), (' D  52  ILE HD12', ' D  55  GLU  HG3', -0.488, (-4.134, 29.137, 40.926)), (' H  56  SER  OG ', ' H  80  ARG  NH1', -0.487, (20.907, 11.657, 37.276)), (' J  19  VAL HG13', ' J  91  VAL  HB ', -0.486, (-23.57, -9.982, 20.561)), (' J  12  PHE  CZ ', ' J 230  LEU HD23', -0.483, (-34.294, -6.397, 14.1)), (' F   6  THR  H  ', ' G 114  ASN HD21', -0.482, (16.403, 22.284, 44.589)), (' D 189  MET  HE2', ' D 201  LEU HD22', -0.48, (-24.567, 30.255, 82.576)), (' F   5  ARG  HG3', ' G  37  GLN  HG3', -0.477, (16.557, 28.22, 44.053)), (' I 167  ASP  OD1', ' I 168  SER  N  ', -0.476, (-43.638, -31.659, -0.333)), (' A  66  LYS  HE3', ' C   2  LEU  HB2', -0.476, (-3.376, -23.852, 44.054)), (' E  45  ARG  HG2', ' E  46  ILE  N  ', -0.476, (-21.007, 3.124, 60.998)), (' D 106  ASP  OD2', ' D 108  ARG  HB2', -0.476, (3.813, 44.689, 56.267)), (' H  12  PHE  CZ ', ' H 230  LEU HD23', -0.474, (37.541, 7.754, 11.761)), (' D  13  SER  HA ', ' D  20  PRO  HB3', -0.473, (8.699, 5.29, 52.083)), (' H 166  ASP  HB2', ' H 189  PRO  HG3', -0.471, (40.686, 23.017, 15.523)), (' H 143  PRO  HG2', ' H 154  ALA  HB1', -0.469, (65.904, 29.748, 20.114)), (' A 106  ASP  OD2', ' A 108  ARG  HB2', -0.468, (-1.664, -44.603, 57.558)), (' J  13  ARG  O  ', ' J 126  VAL  HA ', -0.461, (-27.615, -11.867, 13.631)), (' H 190  LEU  O  ', ' H 202  ALA  N  ', -0.461, (44.563, 24.837, 10.585)), (' A 219  ARG  HG3', ' A 256  ARG  HB3', -0.458, (20.974, -34.148, 92.165)), (' A  13  SER  HA ', ' A  20  PRO  HB3', -0.457, (-5.911, -5.119, 53.293)), (' J  12  PHE  HB2', ' J 127  LEU HD21', -0.457, (-31.892, -11.338, 14.499)), (' J 143  PRO  HG3', ' J 154  ALA  HB1', -0.452, (-62.992, -28.852, 21.589)), (' G  25  TYR  HB3', ' G 106  VAL HG11', -0.45, (19.922, 35.54, 36.246)), (' I 165  SER  HB3', ' I 172  ILE HG13', -0.449, (-45.768, -33.549, 7.071)), (' G   7  ASP  O  ', ' G 122  THR HG22', -0.449, (28.375, 40.072, 27.797)), (' B   1  ILE  HA ', ' B   1  ILE HD12', -0.446, (-4.899, -8.502, 72.526)), (' J 189  PRO  HB2', ' J 201  TYR  HB3', -0.445, (-39.801, -22.245, 14.012)), (' H 167  HIS  HB3', ' H 228  TYR  HB2', -0.445, (40.576, 14.795, 18.323)), (' J  43  ARG  HD3', ' J  71  ILE HD12', -0.445, (-18.443, -20.298, 23.061)), (' A 193  ALA  HA ', ' A 199  ALA  HA ', -0.443, (27.849, -21.573, 88.105)), (' H  12  PHE  HZ ', ' H 230  LEU HD23', -0.442, (37.641, 7.384, 12.005)), (' E  38  ASP  N  ', ' E  81  ARG  O  ', -0.442, (-14.144, 5.735, 64.935)), (' J 216  ASN HD21', ' J 218  ARG HH11', -0.442, (-71.592, -21.614, 31.05)), (' A 118  TYR  O  ', ' A 121  LYS  HG2', -0.44, (-9.191, -12.278, 65.948)), (' B  38  ASP  OD1', ' D  88  SER  HB3', -0.44, (18.264, -2.902, 60.641)), (' A 137  ASP  N  ', ' A 137  ASP  OD1', -0.439, (-15.611, -16.18, 68.081)), (' D 214  THR  HB ', ' D 262  GLN  HB2', -0.437, (-10.653, 37.307, 73.041)), (' I   2  LYS  HB2', ' I   5  GLU  HG2', -0.434, (-15.408, -36.633, 28.343)), (' I  39  PHE  HB2', ' I  56  VAL  HB ', -0.432, (-21.23, -34.335, 43.121)), (' A 235  PRO  O  ', ' B  10  TYR  OH ', -0.426, (17.807, -19.877, 64.724)), (' J 170  LEU  HG ', ' J 225  VAL HG22', -0.425, (-48.562, -18.905, 20.738)), (' H 141  PHE  HE1', ' H 159  LEU  HB2', -0.424, (56.095, 24.623, 11.419)), (' H 236  TRP  CG ', ' H 242  LYS  HB3', -0.423, (43.193, 3.521, 6.57)), (' I 167  ASP  HB3', ' I 170  VAL  CG1', -0.423, (-45.778, -33.107, 2.676)), (' H  69  GLY  H  ', ' H  72  ALA  HB2', -0.422, (15.282, 17.637, 26.701)), (' I 157  ASP  OD1', ' I 158  SER  N  ', -0.42, (-48.989, -45.709, 22.923)), (' J 186  ASP  HB2', ' J 203  LEU HD12', -0.42, (-43.688, -25.748, 18.364)), (' H  13  ARG  HA ', ' H  13  ARG  HD3', -0.419, (32.154, 8.214, 14.23)), (' A  64  THR  HA ', ' A  67  VAL HG12', -0.419, (-0.88, -18.206, 42.108)), (' D 152  VAL HG12', ' D 156  LEU HD12', -0.419, (17.516, 26.466, 53.099)), (' A 146  LYS  HE2', ' J 110  ASN  ND2', -0.418, (-21.192, -18.242, 52.434)), (' H 133  VAL  O  ', ' H 243  PRO  HG3', -0.418, (42.888, 10.947, 7.549)), (' D 268  LYS  HB3', ' D 268  LYS  HE2', -0.418, (-19.504, 45.147, 70.964)), (' I 142  ASP  OD1', ' I 143  SER  N  ', -0.416, (-59.801, -20.065, 13.119)), (' B  38  ASP  O  ', ' B  81  ARG  N  ', -0.416, (18.618, -6.304, 66.905)), (' A  58  GLU  H  ', ' A  58  GLU  HG2', -0.415, (3.137, -27.603, 32.86)), (' G 136  ALA  HB2', ' G 215  PHE  HB3', -0.414, (63.282, 43.659, 15.237)), (' H  27  LEU  HB2', ' H  29  HIS  CE1', -0.414, (31.656, 15.098, 42.559)), (' E  81  ARG  HA ', ' E  91  LYS  O  ', -0.414, (-14.542, 5.804, 70.058)), (' G  76  PHE  HD1', ' G  91  ILE HG12', -0.413, (36.678, 38.767, 39.2)), (' J 236  TRP  CG ', ' J 242  LYS  HB3', -0.413, (-40.355, -1.905, 8.753)), (' D  34  VAL  HB ', ' D  45  MET  SD ', -0.413, (-1.054, 21.242, 44.518)), (' I  47  ARG  HE ', ' J 188  GLN  HG3', -0.411, (-35.957, -25.493, 19.518)), (' D 249  VAL HG21', ' D 254  GLU  HG3', -0.411, (-24.294, 29.263, 87.801)), (' J 166  ASP  HB2', ' J 189  PRO  HG3', -0.41, (-37.715, -21.067, 16.707)), (' D 236  ALA  O  ', ' E  24  ASN  ND2', -0.41, (-19.0, 20.471, 61.402)), (' I 173  THR HG22', ' I 174  ASP  H  ', -0.409, (-44.213, -31.534, 16.13)), (' B   5  PRO  HB3', ' B  30  PHE  HB3', -0.409, (6.929, -10.52, 68.665)), (' G 150  VAL HG22', ' G 193  TRP  HB3', -0.408, (55.514, 29.543, 8.432)), (' E   6  LYS  O  ', ' E  27  VAL  HA ', -0.407, (-9.621, 14.597, 67.953)), (' A 122  ASP  OD1', ' B  60  TRP  NE1', -0.406, (-6.227, -19.391, 66.18)), (' J  12  PHE  CD2', ' J 127  LEU HD21', -0.406, (-32.469, -10.138, 13.967)), (' A 115  GLN  HG3', ' B  60  TRP  CH2', -0.406, (-5.699, -21.819, 61.571)), (' I 141  ARG  NH1', ' I 146  SER  O  ', -0.404, (-62.25, -25.428, 5.893)), (' G  39  PHE  HB2', ' G  56  VAL  HB ', -0.404, (24.297, 34.962, 42.656)), (' G 167  ASP  OD1', ' G 168  SER  N  ', -0.404, (45.789, 34.113, -0.962)), (' I  76  PHE  CD1', ' I  91  ILE HG12', -0.404, (-34.446, -37.948, 39.765)), (' I 185  PHE  CE2', ' I 187  SER  HB3', -0.4, (-55.912, -38.091, 26.005))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
