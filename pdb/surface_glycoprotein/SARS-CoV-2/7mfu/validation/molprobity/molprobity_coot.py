# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 333 ', 'THR', 0.024047248316496992, (-40.5435, -9.96526, -28.77564)), ('D', ' 333 ', 'THR', 0.024884237958596997, (-20.577630000000003, -15.510349999999999, -15.149999999999999))]
data['omega'] = [('C', ' 106 ', 'PRO', None, (-6.252349999999991, 1.8354, -32.39131)), ('F', ' 106 ', 'PRO', None, (13.78329000000001, -26.623360000000005, -12.114909999999998))]
data['rota'] = [('C', '   1 ', 'GLN', 0.18224793999733793, (-18.780799999999996, 18.28816, -45.58361)), ('D', ' 354 ', 'ASN', 0.10348461219388265, (2.085920000000002, -6.34893, -6.69774)), ('D', ' 517 ', 'LEU', 0.03582664329761176, (-12.28891, -18.63724, 2.62792)), ('D', ' 528 ', 'LYS', 0.0, (-19.644069999999985, -25.835520000000002, -13.45177)), ('E', '  43 ', 'LYS', 0.0, (28.14474, 4.8995, -6.98171))]
data['cbeta'] = []
data['probe'] = [(' C  83  MET  HE2', ' C  86  LEU HD21', -0.678, (3.16, 19.241, -26.725)), (' E  34  MET  HG3', ' E  79  VAL HG21', -0.534, (31.416, -18.711, 0.126)), (' F  18  LEU  HB2', ' F  83  MET  HE3', -0.527, (20.661, -46.831, -18.048)), (' D 449  TYR  HD1', ' D 494  SER  HG ', -0.5, (21.774, -3.482, -10.991)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.498, (-19.252, -15.049, -38.326)), (' C   1  GLN  HG2', ' C 389  HOH  O  ', -0.471, (-20.735, 17.891, -48.236)), (' C   6  GLU  HG3', ' C  96 ACYS  SG ', -0.457, (-7.575, 21.216, -36.187)), (' D 354  ASN  O  ', ' D 398  ASP  HA ', -0.443, (0.709, -9.804, -6.368)), (' D 408  ARG  HA ', ' D 601  EDO  H12', -0.439, (9.808, -22.656, -3.968)), (' D 388  ASN  O  ', ' D 526  GLY  HA3', -0.436, (-13.865, -25.346, -10.468)), (' F  83  MET  HB3', ' F  86  LEU HD21', -0.433, (21.883, -43.889, -19.214)), (' F  65  LYS  HB3', ' F  65  LYS  HE2', -0.43, (17.676, -32.257, -22.23)), (' F  33  TYR  HB2', ' F 102  GLY  O  ', -0.423, (4.177, -32.443, -9.749)), (' F   6  GLU  HG3', ' F  96 ACYS  SG ', -0.423, (12.399, -46.051, -8.45)), (' D 417  LYS  HB2', ' D 417  LYS  HE3', -0.42, (19.331, -13.483, 0.953)), (' D 403  ARG  HG3', ' D 495  TYR  CE1', -0.414, (17.744, -12.424, -7.654)), (' E   4  LEU HD11', ' E  98  VAL HG12', -0.414, (28.33, -13.528, 5.547)), (' D 431  GLY  HA2', ' D 515  PHE  CD2', -0.411, (-4.407, -21.691, -3.184)), (' C  37  PHE  CZ ', ' C 107  LEU  HB3', -0.409, (-5.933, 8.586, -36.721)), (' F   3  GLN  HB2', ' F 314  HOH  O  ', -0.409, (5.064, -47.906, -0.176)), (' A 388  ASN  O  ', ' A 526  GLY  HA3', -0.404, (-34.055, 0.404, -33.729)), (' F 113  TRP  O  ', ' F 202  EDO  H21', -0.402, (9.588, -37.161, -0.003)), (' F  62  ASP  HA ', ' F  65  LYS  HE3', -0.401, (19.504, -30.415, -21.225)), (' F  37  PHE  CZ ', ' F 107  LEU  HB3', -0.4, (14.118, -33.223, -8.23))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
