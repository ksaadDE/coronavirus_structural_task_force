# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 158 ', 'PRO', None, (-7.46922, 30.23060999999999, 5.679630000000002)), ('H', ' 160 ', 'PRO', None, (-9.513089999999998, 26.814, 10.432580000000002)), ('L', '  10 ', 'PRO', None, (5.448139999999999, 1.3662399999999995, 25.205880000000004)), ('L', ' 148 ', 'PRO', None, (-9.799980000000001, -3.212629999999998, 10.80091))]
data['rota'] = [('L', '  71 ', 'SER', 0.2964736075019513, (-2.45653, 4.36272, 38.5009)), ('L', '  89 ', 'GLU', 0.2861713201389515, (-13.268070000000002, 6.25936, 25.825280000000006)), ('L', ' 134 ', 'SER', 0.26904364172248, (-17.752570000000006, 25.66372999999998, -12.09593)), ('L', ' 149 ', 'ARG', 0.0, (-7.71487, 1.01013, 9.79158)), ('L', ' 149 ', 'ARG', 0.29046215825972416, (-7.5999, 1.017339999999999, 9.882160000000002)), ('A', '1150 ', 'GLU', 0.267953388703626, (18.451809999999995, 24.62507, 41.5218))]
data['cbeta'] = []
data['probe'] = [(' L  61  ASN  ND2', ' L 301  HOH  O  ', -1.049, (-1.676, 10.048, 45.86)), (' H 128  LYS  NZ ', ' H 304  HOH  O  ', -0.785, (-13.531, 28.859, -3.149)), (' L 112  GLU  OE1', ' L 302  HOH  O  ', -0.776, (-4.648, 0.749, 16.029)), (' H 136  ALA  O  ', ' H 301  HOH  O  ', -0.762, (-25.698, 11.619, -4.285)), (' H  91  GLU  OE2', ' H 302  HOH  O  ', -0.754, (8.824, 23.749, 8.203)), (' L 197  LYS  HE2', ' L 215  ASN HD22', -0.692, (-22.838, 4.448, -18.407)), (' H  65  LYS  HD2', ' L 318  HOH  O  ', -0.691, (15.276, 22.689, 23.988)), (' L  95  TYR  OH ', ' L 303  HOH  O  ', -0.673, (-0.165, 14.307, 21.193)), (' L 190  LYS  O  ', ' L 194  GLU  HG3', -0.642, (-16.355, 16.745, -18.576)), (' H 225  LYS  O  ', ' H 305  HOH  O  ', -0.642, (-34.056, 12.536, -8.506)), (' H 144  GLY  N  ', ' H 308  HOH  O  ', -0.606, (-29.357, -1.352, 1.691)), (' L  84  SER  O  ', ' L  85  ARG  NE ', -0.58, (-7.743, -4.592, 33.627)), (' L 157 BVAL HG22', ' L 162  GLN  NE2', -0.575, (-9.35, 6.4, -15.161)), (' L 132  LEU  O  ', ' L 190  LYS  HE2', -0.56, (-19.13, 22.248, -15.065)), (' L 127  PRO  HD3', ' L 139  VAL HG22', -0.557, (-16.953, 12.812, -9.736)), (' L  13  LEU HD22', ' L  15  VAL HG13', -0.54, (-2.674, -1.367, 24.702)), (' H 194  THR HG21', ' L 144 AASN  ND2', -0.525, (-22.308, 5.558, 7.403)), (' H  25  LYS  NZ ', ' H  78  SER  O  ', -0.515, (-8.918, 39.955, 32.046)), (' H  22  MET  HE1', ' H 120  VAL HG21', -0.514, (-0.085, 32.293, 17.964)), (' L 152  LYS  HG2', ' L 204 BTHR  OG1', -0.513, (-6.454, -2.881, -1.294)), (' H  26  ALA  HB1', ' H  29  TYR  CE1', -0.499, (-7.01, 32.158, 35.636)), (' L  87  GLU  OE2', ' L 304  HOH  O  ', -0.494, (-13.446, 0.675, 32.72)), (' L  16  ASN  OD1', ' L 114  LYS  HG3', -0.49, (-7.976, -5.966, 21.18)), (' H 102  ARG  O  ', ' H 306  HOH  O  ', -0.481, (-0.921, 25.413, 43.891)), (' H 203  GLN  NE2', ' H 314  HOH  O  ', -0.478, (-35.78, 13.581, 11.329)), (' A1149  LYS  NZ ', ' A1153  ASP  OD2', -0.478, (16.433, 21.116, 43.574)), (' L  62  ARG  NE ', ' L  70  PHE  O  ', -0.469, (-5.746, 6.138, 39.548)), (' L  62  ARG  NE ', ' L  68  ASP  HA ', -0.466, (-7.119, 5.838, 40.099)), (' L  26  LYS  HE2', ' L  78  ASP  OD2', -0.461, (12.981, 1.507, 33.263)), (' H  62  TYR  HB2', ' H  67  LYS  HG2', -0.46, (14.046, 31.199, 27.87)), (' H  43  HIS  ND1', ' H  45  LYS  HB2', -0.46, (2.581, 15.65, 15.521)), (' L 197  LYS  HE3', ' L 216  ARG  O  ', -0.451, (-23.208, 8.333, -18.142)), (' L  42  ASP  OD1', ' L  57  TYR  HA ', -0.447, (2.149, 14.746, 38.371)), (' H 102  ARG  HB3', ' H 107  HIS  HB3', -0.444, (-0.26, 22.034, 42.77)), (' H 212  LYS  HA ', ' H 212  LYS  HD2', -0.44, (-16.036, 32.831, 10.725)), (' H  36  MET  HB3', ' H  36  MET  HE2', -0.436, (-0.045, 30.667, 32.174)), (' L  45  LEU HD13', ' L  94  TYR  CZ ', -0.435, (-4.718, 8.248, 27.583)), (' L 212  LYS  NZ ', ' L 321  HOH  O  ', -0.426, (-24.928, 0.064, -3.449)), (' H  99  THR  OG1', ' H 111  MET  HG2', -0.424, (0.442, 24.583, 32.497)), (' H 102  ARG  CB ', ' H 107  HIS  HB3', -0.424, (0.009, 22.018, 42.445)), (' H 225  LYS  HB2', ' H 225  LYS  HE2', -0.421, (-28.638, 13.704, -8.686)), (' H  62  TYR  CB ', ' H  67  LYS  HG2', -0.419, (14.079, 31.161, 27.269)), (' H  45  LYS  O  ', ' L  95  TYR  OH ', -0.415, (1.249, 14.817, 21.199)), (' L 212  LYS  HB3', ' L 212  LYS  HE3', -0.405, (-20.918, 1.964, -4.84)), (' L 101  TYR  O  ', ' L 102  LEU  C  ', -0.4, (12.824, 21.07, 32.864))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
