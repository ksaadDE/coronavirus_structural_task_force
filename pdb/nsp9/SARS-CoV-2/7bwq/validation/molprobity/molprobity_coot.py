# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  23 ', 'CYS', 0.020696555680499842, (-25.741, -13.119999999999996, 14.237999999999998)), ('A', '  25 ', 'ASP', 0.010878558673314307, (-22.775000000000002, -15.477999999999996, 9.259)), ('A', '  37 ', 'GLY', 0.06248691670587629, (-12.714, -31.663999999999998, 23.711999999999996)), ('A', '  57 ', 'PRO', 0.015215205170361498, (-21.894, -24.279, 16.66)), ('A', '  62 ', 'THR', 0.01533112900789947, (-25.402000000000022, -30.574999999999992, 19.478)), ('C', '  25 ', 'ASP', 0.0, (16.066000000000013, 1.096, 54.162)), ('C', '  36 ', 'LYS', 0.008379758258603003, (1.5590000000000015, 5.611000000000003, 31.07)), ('D', '   7 ', 'VAL', 0.00512602, (20.518, 26.079, 41.954)), ('D', '   8 ', 'ALA', 0.024982638012711163, (18.273000000000014, 29.225, 42.08800000000001)), ('D', '  21 ', 'THR', 0.0059824111792231615, (7.594, 48.077, 18.169)), ('D', '  23 ', 'CYS', 0.00574383642696003, (6.7820000000000045, 45.751, 23.629)), ('D', '  26 ', 'ASP', 0.032603839384259765, (4.36, 44.613, 31.295999999999996)), ('E', '  18 ', 'THR', 0.00213101832048406, (19.450000000000003, 9.607, 8.448)), ('E', '  62 ', 'THR', 0.004709302645789656, (39.257000000000005, 21.594, 1.275)), ('F', '   7 ', 'VAL', 0.020718698737463875, (45.597, 42.015, 5.761)), ('F', '  18 ', 'THR', 0.0010507546529250117, (42.23500000000001, 11.949, 13.751)), ('F', '  35 ', 'THR', 0.0003380170994641347, (35.577, 39.566, 7.022000000000001))]
data['omega'] = [('A', '  25 ', 'ASP', None, (-23.636000000000003, -14.7, 10.159)), ('C', ' 111 ', 'ARG', None, (14.595000000000002, 24.836, 50.064))]
data['rota'] = [('D', '  97 ', 'LEU', 0.29921931147242503, (19.675, 22.331999999999987, 30.6)), ('D', ' 111 ', 'ARG', 0.07073705933494284, (-1.7810000000000015, 23.073, 38.115)), ('D', ' 111 ', 'ARG', 0.1463415446668899, (-1.7730000000000012, 23.052, 38.148))]
data['cbeta'] = []
data['probe'] = [(' C   9  LEU HD22', ' C  33  ASN  HB3', -1.043, (9.867, 12.604, 35.433)), (' B  92  LYS  NZ ', ' C  62  THR HG22', -0.992, (8.327, -8.293, 44.294)), (' B  92  LYS  NZ ', ' C  62  THR  CG2', -0.972, (7.581, -9.279, 44.994)), (' B  92  LYS  HZ2', ' C  62  THR HG22', -0.878, (8.66, -8.554, 45.006)), (' C   9  LEU HD22', ' C  33  ASN  CB ', -0.87, (9.738, 12.886, 35.005)), (' A  58  LYS  HA ', ' A  58  LYS  HE2', -0.814, (-18.902, -25.862, 19.515)), (' B  92  LYS  HZ3', ' C  62  THR  CG2', -0.793, (7.349, -9.343, 44.233)), (' D  19  THR  HG1', ' D  21  THR  HG1', -0.761, (5.634, 46.217, 16.706)), (' E  48  LEU  O  ', ' E  89  TYR  OH ', -0.761, (13.653, 12.988, 2.659)), (' E 111  ARG  CZ ', ' E 111  ARG  HB3', -0.741, (2.901, 18.924, -14.896)), (' B  92  LYS  NZ ', ' C  62  THR HG21', -0.726, (6.634, -9.225, 44.974)), (' B  62  THR  HB ', ' C  93  GLY  HA3', -0.717, (24.429, 8.106, 30.809)), (' B  92  LYS  HZ2', ' C  62  THR  CG2', -0.716, (7.704, -8.101, 45.003)), (' D  70  GLU  OE1', ' D  99  ARG  NH2', -0.694, (14.476, 26.888, 22.139)), (' E  18  THR  OG1', ' E  19  THR  N  ', -0.693, (21.402, 9.858, 8.985)), (' D  12  MET  HB3', ' D  32  TYR  HE1', -0.693, (11.933, 39.093, 36.987)), (' A  60  ASP  N  ', ' A  60  ASP  OD1', -0.688, (-19.426, -31.409, 19.103)), (' E  90  PHE  HE1', ' E 102  VAL HG11', -0.682, (12.96, 25.987, -0.291)), (' F  18  THR  OG1', ' F  19  THR  N  ', -0.674, (40.006, 11.383, 12.97)), (' E  52  LYS  HG3', ' E  53  TRP  CD1', -0.66, (20.129, 14.627, 10.436)), (' B  93  GLY  HA3', ' C  62  THR  HB ', -0.659, (5.909, -8.003, 42.058)), (' F  15  ALA  HB2', ' F  25  ASP  HA ', -0.657, (36.326, 21.443, 19.627)), (' F  74  ARG  HB3', ' F  74  ARG HH11', -0.65, (59.282, 18.111, 12.599)), (' B  92  LYS  HZ3', ' C  62  THR HG22', -0.644, (7.734, -9.162, 43.992)), (' C  12  MET  HB2', ' C  32  TYR  HE1', -0.639, (8.895, 9.283, 44.454)), (' F  58  LYS  HB2', ' F  65  ILE HD11', -0.636, (29.572, 26.97, 8.755)), (' C  39  ARG  H  ', ' C  59  SER  HB3', -0.626, (7.682, 2.741, 35.856)), (' D  25  ASP  N  ', ' D  25  ASP  OD1', -0.625, (3.641, 47.283, 26.562)), (' D  21  THR  OG1', ' D  22  ALA  N  ', -0.624, (5.957, 46.628, 18.01)), (' F  74  ARG  HB3', ' F  74  ARG  NH1', -0.608, (59.727, 18.562, 12.611)), (' D 109  THR HG22', ' D 110  VAL HG13', -0.607, (3.472, 27.956, 39.181)), (' F  20  GLN  HB3', ' F  66  TYR  CE2', -0.607, (34.005, 16.028, 10.425)), (' D  10  ARG  HG2', ' D  11  GLN  H  ', -0.599, (11.174, 35.05, 39.833)), (' C  10  ARG  NH2', ' C 302  HOH  O  ', -0.596, (1.638, 6.787, 41.461)), (' E 105  SER  O  ', ' E 109  THR HG23', -0.594, (10.384, 25.721, -11.054)), (' E  41  VAL HG22', ' E  91  ILE HD11', -0.594, (20.639, 23.999, 1.149)), (' A  88  LEU HD22', ' A 106  LEU HD22', -0.588, (-6.999, -7.469, 19.825)), (' E  20  GLN  HB3', ' E  66  TYR  HE2', -0.586, (27.583, 13.832, 8.748)), (' B  40  PHE  HD1', ' C  59  SER  HB2', -0.585, (8.967, 0.353, 34.558)), (' F  70  GLU  HG3', ' F  92  LYS  HA ', -0.584, (46.706, 20.822, 1.839)), (' A 103  LEU HD22', ' B   6  PRO  HG3', -0.584, (-3.74, -5.684, 22.312)), (' E  42  LEU HD23', ' E  94  LEU HD11', -0.583, (18.143, 29.452, 1.372)), (' C  12  MET  HB2', ' C  32  TYR  CE1', -0.577, (8.66, 8.808, 43.802)), (' D  55  ARG  NH1', ' D 201  HOH  O  ', -0.577, (12.001, 50.546, 27.921)), (' E  18  THR  O  ', ' E  52  LYS  HG2', -0.569, (19.064, 12.36, 9.64)), (' A  58  LYS  HD3', ' A  59  SER  H  ', -0.568, (-18.591, -28.578, 19.439)), (' A  32  TYR  CD2', ' A  39  ARG  HB3', -0.566, (-10.897, -23.87, 19.188)), (' F 111  ARG  NH2', ' F 301  HOH  O  ', -0.566, (55.904, 34.537, 26.675)), (' A  58  LYS  HG3', ' A  60  ASP  OD1', -0.565, (-20.356, -29.606, 20.058)), (' D  45  LEU HD11', ' D  75  PHE  HZ ', -0.564, (2.761, 29.615, 30.756)), (' F  69  LEU  HB3', ' F  89  TYR  HB3', -0.564, (46.868, 20.629, 8.52)), (' A  60  ASP  OD2', ' A  62  THR HG23', -0.563, (-22.965, -31.31, 20.159)), (' E  67  THR HG23', ' F  62  THR HG23', -0.558, (22.948, 24.551, 7.117)), (' B  39  ARG  H  ', ' B  59  SER  HB3', -0.557, (13.291, 3.175, 30.058)), (' F  74  ARG  HG3', ' F  87  TYR  CE1', -0.554, (56.62, 18.326, 14.607)), (' C  24  THR HG22', ' C  25  ASP  OD1', -0.55, (18.936, 1.549, 56.011)), (' B  51  LEU  HB2', ' B  89  TYR  CZ ', -0.55, (16.998, -17.895, 34.309)), (' F  34  THR  OG1', ' F  35  THR  N  ', -0.549, (37.282, 39.666, 8.367)), (' B   4  LEU HD12', ' B   5  SER  H  ', -0.548, (0.005, 1.067, 25.204)), (' A  86  LYS  NZ ', ' A 202  SO4  O2 ', -0.547, (-11.023, -6.897, 8.536)), (' C  70  GLU  HG3', ' C  92  LYS  HA ', -0.547, (25.265, 9.622, 36.428)), (' E  57  PRO  HA ', ' E  64  THR  HA ', -0.545, (32.785, 19.619, 1.48)), (' B  70  GLU  HG2', ' B  92  LYS  HA ', -0.541, (8.71, -12.049, 39.615)), (' C  19  THR  OG1', ' C  22  ALA  N  ', -0.539, (25.307, -2.711, 49.997)), (' D  22  ALA  O  ', ' D  24  THR  N  ', -0.539, (5.142, 47.603, 23.821)), (' D  45  LEU HD11', ' D  75  PHE  CZ ', -0.538, (2.749, 28.932, 30.431)), (' F  57  PRO  HA ', ' F  64  THR  HA ', -0.534, (30.013, 24.084, 11.695)), (' F  18  THR  OG1', ' F  22  ALA  HB3', -0.533, (39.071, 11.397, 15.408)), (' A 113  GLN  HB2', ' B   7  VAL HG21', -0.531, (1.767, -0.006, 16.769)), (' B  79  THR HG21', ' B  84  LYS  HB2', -0.53, (15.584, -25.439, 20.287)), (' B  53  TRP  CH2', ' B  68  GLU  HG2', -0.528, (17.858, -9.346, 42.488)), (' E  52  LYS  HG3', ' E  53  TRP  HD1', -0.524, (20.687, 14.341, 10.997)), (' B  72  PRO  HB3', ' B  89  TYR  CE2', -0.523, (14.254, -19.316, 34.596)), (' A  51  LEU HD12', ' A  89  TYR  CE1', -0.521, (-17.275, -6.967, 16.686)), (' B  10  ARG  HG3', ' B  32  TYR  CZ ', -0.52, (11.982, -3.426, 22.665)), (' A  27  ASN  N  ', ' A  27  ASN  OD1', -0.518, (-19.669, -12.068, 10.46)), (' E  10  ARG  NH2', ' E  39  ARG HH12', -0.517, (27.267, 27.037, -9.962)), (' F  95  ASN  O  ', ' F  99  ARG  HG2', -0.515, (50.808, 28.525, -0.09)), (' F  19  THR  HA ', ' F  53  TRP  CD1', -0.512, (39.868, 13.393, 9.424)), (' B  44  LEU  O  ', ' B  88  LEU HD12', -0.511, (11.105, -15.45, 29.574)), (' F  53  TRP  CH2', ' F  68  GLU  HB3', -0.51, (39.6, 16.883, 4.332)), (' E  38  GLY  C  ', ' E  39  ARG  HD3', -0.51, (29.558, 28.489, -5.301)), (' F  35  THR  O  ', ' F  35  THR  OG1', -0.507, (34.333, 41.007, 5.667)), (' A  95  ASN  O  ', ' A  99  ARG  HG3', -0.503, (-8.444, -11.364, 30.202)), (' E  17  GLY  HA2', ' E  51  LEU HD22', -0.502, (19.683, 10.989, 4.218)), (' D  56  PHE  HB2', ' D  65  ILE HG12', -0.499, (16.373, 42.765, 27.924)), (' F  51  LEU  O  ', ' F  52  LYS  HD3', -0.497, (46.447, 15.535, 9.317)), (' A  10  ARG  HB2', ' A  32  TYR  CZ ', -0.494, (-7.399, -22.149, 16.243)), (' E  94  LEU  HB3', ' E  99  ARG  NH2', -0.493, (14.038, 28.724, 5.498)), (' D  90  PHE  HE1', ' D 102  VAL HG21', -0.492, (12.023, 27.231, 29.685)), (' B  49  GLN  HB3', ' B  87  TYR  CZ ', -0.492, (16.379, -24.482, 32.405)), (' B  54  ALA  O  ', ' B  66  TYR  HA ', -0.491, (19.241, -5.891, 36.59)), (' E  20  GLN  HB3', ' E  66  TYR  CE2', -0.489, (27.62, 14.34, 8.492)), (' D  60  ASP  HB2', ' D  62  THR HG23', -0.489, (23.921, 51.074, 31.713)), (' F  72  PRO  HA ', ' F  88  LEU  O  ', -0.485, (52.091, 20.488, 9.269)), (' E  53  TRP  CZ3', ' E  68  GLU  HB3', -0.484, (23.197, 19.491, 10.19)), (' E  42  LEU  CD2', ' E  94  LEU HD11', -0.483, (17.725, 29.72, 1.177)), (' A  49  GLN  HB2', ' A  87  TYR  CE2', -0.483, (-16.046, -0.345, 14.843)), (' A  96  ASN  O  ', ' B  97  LEU HD12', -0.482, (-4.731, -10.339, 30.924)), (' C  49  GLN  HA ', ' C  89  TYR  OH ', -0.479, (26.592, 11.786, 49.106)), (' C  77  THR  HA ', ' C 112  LEU  HB3', -0.479, (19.321, 26.559, 50.865)), (' A  61  GLY  C  ', ' A  63  GLY  H  ', -0.477, (-25.103, -29.145, 17.64)), (' D  12  MET  HB3', ' D  32  TYR  CE1', -0.476, (12.649, 39.071, 37.175)), (' E  60  ASP  OD1', ' E  62  THR HG23', -0.474, (39.48, 24.566, 0.414)), (' E  58  LYS  HE3', ' E  59  SER  H  ', -0.47, (33.257, 25.716, -1.277)), (' E  44  LEU  O  ', ' E  88  LEU HD12', -0.466, (13.419, 20.125, -0.937)), (' C  24  THR  O  ', ' C  25  ASP  O  ', -0.465, (17.577, 2.287, 53.017)), (' B 102  VAL  O  ', ' B 106  LEU  N  ', -0.465, (4.613, -14.341, 24.087)), (' C   9  LEU  CD2', ' C  33  ASN  CB ', -0.465, (9.131, 13.614, 35.386)), (' F  49  GLN  HB3', ' F  87  TYR  CZ ', -0.464, (54.24, 16.179, 15.511)), (' C  78  ASP  N  ', ' C  78  ASP  OD1', -0.461, (18.758, 27.321, 53.3)), (' D  77  THR  O  ', ' D  83  PRO  HA ', -0.461, (-6.67, 25.947, 34.348)), (' C  95  ASN  O  ', ' C  99  ARG  HG3', -0.461, (20.445, 16.159, 32.506)), (' B  55  ARG  HA ', ' B  65  ILE  O  ', -0.459, (19.926, -4.708, 34.845)), (' F  19  THR  HA ', ' F  53  TRP  HD1', -0.459, (40.126, 13.425, 10.021)), (' C  50  ASP  N  ', ' C  50  ASP  OD1', -0.458, (27.641, 8.73, 51.42)), (' E  20  GLN  HG2', ' E  66  TYR  CD2', -0.456, (26.408, 16.041, 8.516)), (' C  68  GLU  OE1', ' C  92  LYS  NZ ', -0.455, (28.227, 2.527, 36.189)), (' B  78  ASP  H  ', ' B 111 BARG  N  ', -0.455, (8.698, -24.689, 18.714)), (' D  57  PRO  HA ', ' D  64  THR  HA ', -0.455, (16.834, 47.759, 27.966)), (' B  14  CYS  SG ', ' B  30  ALA  HB2', -0.454, (16.793, -9.123, 28.442)), (' D  90  PHE  HE1', ' D 102  VAL  CG2', -0.453, (11.912, 27.018, 29.766)), (' C  51  LEU HD12', ' C  89  TYR  CZ ', -0.453, (24.205, 10.227, 48.294)), (' E  67  THR HG21', ' E  91  ILE HD13', -0.453, (21.755, 24.032, 4.306)), (' B 105  SER  O  ', ' B 109  THR HG23', -0.453, (5.168, -14.291, 19.731)), (' B  70  GLU  HG3', ' B  90  PHE  O  ', -0.452, (9.657, -12.913, 36.915)), (' A  19  THR HG23', ' A  22  ALA  H  ', -0.452, (-29.726, -10.688, 16.302)), (' C  56  PHE  CG ', ' C  57  PRO  HD2', -0.45, (11.632, 3.51, 42.644)), (' F  58  LYS  HA ', ' F  58  LYS  HD2', -0.448, (30.541, 29.11, 10.817)), (' A  14  CYS  O  ', ' A  26  ASP  HA ', -0.448, (-18.086, -14.659, 11.183)), (' A  72  PRO  HB3', ' A  89  TYR  CE2', -0.448, (-16.114, -4.218, 19.767)), (' D  49  GLN  HG2', ' D  49  GLN  O  ', -0.446, (0.288, 32.466, 19.556)), (' C 101  MET  HB3', ' C 101  MET  HE2', -0.445, (11.128, 18.006, 34.84)), (' D  95  ASN  N  ', ' D  95  ASN  OD1', -0.442, (20.131, 26.633, 26.637)), (' B  32  TYR  HE2', ' B  34  THR HG23', -0.441, (11.494, -1.072, 23.752)), (' C  51  LEU HD12', ' C  89  TYR  CE1', -0.441, (23.605, 10.683, 47.935)), (' C  48  LEU  H  ', ' C  48  LEU HD22', -0.44, (22.143, 10.436, 53.546)), (' A  20  GLN  CD ', ' A  20  GLN  H  ', -0.439, (-29.566, -11.752, 21.014)), (' B  14  CYS  SG ', ' B  44  LEU HD21', -0.436, (17.195, -10.237, 29.819)), (' B  40  PHE  CD1', ' C  59  SER  HB2', -0.436, (8.377, 0.723, 34.113)), (' C 101  MET  HA ', ' D 100  GLY  O  ', -0.435, (13.328, 20.906, 34.364)), (' A  45  LEU  HA ', ' A  87  TYR  O  ', -0.434, (-12.138, -7.033, 16.724)), (' C  48  LEU  HB3', ' C  50  ASP  OD1', -0.434, (25.807, 8.717, 52.585)), (' F  53  TRP  CZ3', ' F  68  GLU  HB3', -0.433, (39.097, 16.983, 4.834)), (' A  24  THR  OG1', ' A  25  ASP  OD2', -0.433, (-26.802, -15.05, 7.988)), (' C  18  THR HG21', ' C  50  ASP  HB2', -0.43, (28.68, 5.277, 51.308)), (' F  11  GLN  HG2', ' F  31  TYR  CE1', -0.43, (47.679, 31.962, 15.184)), (' B  12  MET  HE2', ' B  56  PHE  CE1', -0.428, (16.246, -4.095, 26.928)), (' F  94  LEU  O  ', ' F  99  ARG  NH1', -0.428, (50.138, 25.255, -0.496)), (' D  48  LEU  H  ', ' D  48  LEU HD12', -0.423, (-0.506, 37.444, 26.358)), (' E  10  ARG  CZ ', ' E  34  THR HG21', -0.422, (26.005, 29.439, -10.145)), (' A  32  TYR  HD2', ' A  39  ARG  HB3', -0.422, (-10.389, -23.435, 19.554)), (' A  42  LEU  O  ', ' A  94  LEU HD22', -0.421, (-11.627, -13.364, 25.652)), (' D  32  TYR  HA ', ' D  42  LEU HD12', -0.421, (16.025, 33.396, 33.209)), (' E  95  ASN  O  ', ' E  99  ARG  HG2', -0.419, (12.36, 31.484, 3.472)), (' E  62  THR  OG1', ' E  63  GLY  N  ', -0.419, (37.532, 21.534, 2.36)), (' B  79  THR  OG1', ' B  82  GLY  O  ', -0.419, (15.995, -28.025, 17.316)), (' C  97  LEU  O  ', ' C 101  MET  HG3', -0.418, (14.963, 18.612, 32.083)), (' C  10  ARG  O  ', ' C  11  GLN  HG3', -0.417, (9.326, 13.622, 42.447)), (' B  51  LEU  HA ', ' B  51  LEU HD23', -0.415, (20.663, -17.094, 36.475)), (' C  90  PHE  HD2', ' C  99  ARG  NH1', -0.414, (23.604, 15.23, 36.296)), (' A  61  GLY  O  ', ' A  63  GLY  N  ', -0.414, (-25.574, -29.529, 17.349)), (' D  10  ARG  HG2', ' D  11  GLN  N  ', -0.413, (11.427, 35.059, 39.833)), (' D  45  LEU  HA ', ' D  45  LEU HD12', -0.413, (4.582, 31.774, 29.291)), (' B 105  SER  HA ', ' B 108  ALA  HB3', -0.412, (2.367, -13.651, 20.929)), (' E  56  PHE  O  ', ' E  65  ILE  N  ', -0.411, (30.785, 20.162, 2.671)), (' D  70  GLU  HB3', ' D  71  PRO  HD2', -0.411, (10.528, 28.431, 19.522)), (' E  41  VAL HG21', ' E  56  PHE  CZ ', -0.411, (22.857, 21.438, 0.724)), (' C  18  THR HG21', ' C  50  ASP  OD2', -0.408, (27.928, 5.363, 52.157)), (' C  94  LEU  O  ', ' C  99  ARG  NE ', -0.408, (22.763, 14.563, 32.978)), (' F  52  LYS  HA ', ' F  52  LYS  HD2', -0.408, (45.442, 16.198, 8.325)), (' C   9  LEU HD22', ' C  33  ASN  HB2', -0.407, (8.822, 13.26, 35.461)), (' B  14  CYS  O  ', ' B  26  ASP  HA ', -0.407, (22.184, -10.686, 26.962)), (' A 103  LEU  HA ', ' A 103  LEU HD23', -0.407, (-4.554, -7.819, 22.001)), (' A  94  LEU  O  ', ' A  99  ARG  NE ', -0.404, (-10.851, -10.205, 30.754)), (' E  10  ARG HH21', ' E  39  ARG HH12', -0.404, (27.02, 27.262, -9.292)), (' B  49  GLN  HB3', ' B  87  TYR  CE2', -0.404, (16.721, -24.087, 32.637)), (' D  56  PHE  HB2', ' D  65  ILE  CG1', -0.404, (16.572, 42.831, 27.558)), (' B  92  LYS  HZ3', ' C  62  THR HG21', -0.403, (6.637, -9.29, 44.77)), (' E  78  ASP  OD2', ' E 111  ARG  NH2', -0.403, (0.63, 16.755, -13.977)), (' C  13  SER  OG ', ' C  26  ASP  OD2', -0.402, (10.969, 6.118, 51.792)), (' E  34  THR  O  ', ' E  34  THR HG23', -0.4, (26.937, 31.784, -8.39)), (' E  58  LYS  HD2', ' E  65  ILE HD11', -0.4, (31.839, 25.143, 2.007)), (' E  45  LEU HD11', ' E  86  LYS  HB3', -0.4, (10.775, 16.115, -4.515)), (' B  40  PHE  CE1', ' C  38  GLY  HA3', -0.4, (6.694, 1.875, 33.544)), (' B   4  LEU HD12', ' B   5  SER  N  ', -0.4, (0.667, 0.476, 25.661))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
