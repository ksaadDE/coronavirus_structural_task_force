# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 373 ', 'PRO', 0.0, (-26.10735, 7.796530000000002, 19.96539))]
data['omega'] = [('A', ' 146 ', 'PRO', None, (-38.64799, 2.07613, -30.55081))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 374  PHE  HE2', ' B 377  PHE  HB2', -0.648, (-23.811, 14.521, 24.337)), (' A 490  PRO  HA ', ' A 612  PRO  HG2', -0.609, (-28.467, 8.996, -51.985)), (' B 362  VAL HG13', ' B 527  PRO  HD2', -0.603, (-28.167, 14.41, 42.918)), (' A 433  GLU  HG2', ' A 705  NAG  H82', -0.599, (-1.636, -5.537, -34.564)), (' A 607  SER  OG ', ' A 609  ASP  OD1', -0.564, (-17.129, 15.325, -56.713)), (' B 374  PHE  CE2', ' B 377  PHE  HB2', -0.564, (-23.561, 13.731, 24.223)), (' B 379  CYS  HB2', ' B 384  PRO  HD3', -0.524, (-18.038, 19.81, 28.884)), (' A 233  ILE HD13', ' A 450  LEU HD13', -0.511, (-13.374, 17.115, -32.697)), (' A 353  LYS  HD3', ' B 501  TYR  CZ ', -0.507, (-35.747, 19.227, 2.354)), (' A 474  MET  HE1', ' A 499  ASP  HB2', -0.496, (-32.637, 18.332, -44.207)), (' A 134  ASN  OD1', ' A 137  ASN  HB3', -0.49, (-47.236, -3.687, -43.794)), (' B 497  PHE  CE2', ' B 507  PRO  HB3', -0.483, (-36.249, 18.975, 11.698)), (' A 285  PHE  CZ ', ' A 705  NAG  H81', -0.477, (-2.73, -3.985, -36.769)), (' B 431  GLY  HA2', ' B 515  PHE  CD2', -0.464, (-23.003, 24.316, 32.18)), (' A 356  PHE  CE2', ' A 383  MET  HG2', -0.46, (-24.471, 15.36, -2.882)), (' B 490  PHE  O  ', ' B 493  ARG  NH1', -0.46, (-40.413, 35.897, 6.01)), (' A 155  SER  O  ', ' A 161  ARG  HD2', -0.459, (-27.741, -1.553, -42.19)), (' A  85  LEU  HA ', ' A  88  ILE HD13', -0.456, (-27.769, 44.365, -10.697)), (' B 403  ARG  HG2', ' B 495  TYR  CE1', -0.456, (-33.17, 24.101, 9.72)), (' A 133  CYS  HA ', ' A 141  CYS  HA ', -0.446, (-45.847, 1.136, -40.019)), (' A 269  ASP  OD1', ' A 272  GLY  N  ', -0.445, (-26.768, 9.154, -37.536)), (' A 455  MET  HE3', ' A 480  MET  HB2', -0.445, (-24.68, 21.676, -43.81)), (' A 574  VAL HG23', ' A 576  ALA  H  ', -0.444, (-5.796, 25.068, -18.643)), (' A 305  GLN  O  ', ' A 309  LYS  HB2', -0.442, (-21.764, -1.888, -4.311)), (' A 239  HIS  CE1', ' A 596  LYS  HG2', -0.436, (-3.551, 10.524, -43.075)), (' A 450  LEU  HB2', ' A 451  PRO  HD3', -0.432, (-15.831, 15.835, -35.543)), (' B 412  PRO  HG3', ' B 429  PHE  HB3', -0.429, (-20.419, 29.676, 25.437)), (' B 377  PHE  HE1', ' B 384  PRO  HB3', -0.429, (-20.379, 17.122, 29.288)), (' A 180  TYR  HA ', ' A 183  TYR  HB3', -0.427, (-39.798, 25.919, -36.027)), (' A 336  PRO  HG3', ' A 342  ALA  HB2', -0.421, (-39.445, 1.369, -12.398)), (' A 135  PRO  O  ', ' A 136  ASP  HB2', -0.421, (-45.477, -3.222, -48.023)), (' A 557  MET  HB3', ' A 557  MET  HE3', -0.413, (-12.815, 20.742, -11.504)), (' B 372  ALA  O  ', ' B 373  PRO  C  ', -0.404, (-27.155, 9.207, 19.323)), (' B 375  PHE  CD1', ' B 375  PHE  N  ', -0.401, (-26.176, 12.407, 17.994)), (' A  55  THR  O  ', ' A  59  VAL HG23', -0.401, (-48.615, 8.823, -14.034)), (' A 419  LYS  HG3', ' A 424  LEU  HB3', -0.4, (-7.581, -6.867, -16.937))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
