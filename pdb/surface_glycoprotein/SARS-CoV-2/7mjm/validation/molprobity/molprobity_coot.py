# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B  46  SER  HA ', ' B 279  TYR  O  ', -0.688, (232.616, 182.993, 179.155)), (' A 570  ALA  HB1', ' B 963  VAL HG11', -0.636, (216.373, 184.67, 183.053)), (' A 105  ILE  HB ', ' A 239  GLN  HB2', -0.634, (171.378, 158.61, 211.933)), (' C  51  THR  O  ', ' C 274  THR  HA ', -0.622, (188.041, 227.936, 189.113)), (' B 901  GLN HE21', ' B 905  ARG HH21', -0.622, (208.359, 185.379, 134.5)), (' D 406  GLU  HG3', ' D 518  ARG  HD3', -0.617, (208.13, 152.771, 273.461)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.603, (237.889, 186.778, 208.188)), (' E 406  GLU  HG3', ' E 518  ARG  HD3', -0.598, (236.811, 231.555, 273.646)), (' E 261  CYS  HB2', ' E 488  VAL HG13', -0.593, (246.547, 235.757, 299.674)), (' C  46  SER  HA ', ' C 279  TYR  O  ', -0.585, (198.809, 236.021, 178.865)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.579, (163.518, 252.466, 203.981)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.574, (229.567, 217.47, 152.671)), (' D 261  CYS  HB2', ' D 488  VAL HG13', -0.573, (205.973, 143.386, 299.926)), (' C 418  ILE  HA ', ' C 422  ASN HD22', -0.564, (194.438, 180.588, 225.206)), (' E 108  LEU HD23', ' E 112  LYS  HB3', -0.558, (210.661, 248.723, 289.11)), (' C 143  VAL  HA ', ' C 154  GLU  HA ', -0.557, (182.632, 264.626, 211.339)), (' A  94  SER  HB2', ' A 190  ARG  HB2', -0.554, (163.703, 160.376, 198.206)), (' B 420  ASP  OD2', ' B 460  ASN  ND2', -0.551, (201.033, 226.34, 247.748)), (' B 762  GLN  OE1', ' B 765  ARG  NH1', -0.551, (190.113, 188.353, 178.026)), (' C 393  THR  HB ', ' C 522  ALA  HA ', -0.547, (170.607, 188.259, 208.409)), (' D 134  ASN  HB3', ' D 137  ASN  HB2', -0.544, (228.763, 126.117, 292.823)), (' D 108  LEU HD23', ' D 112  LYS  HB3', -0.541, (236.286, 166.612, 289.321)), (' E 134  ASN  HB3', ' E 137  ASN  HB2', -0.541, (249.17, 263.334, 291.802)), (' C1143  PRO  HA ', ' C1146  ASP  HB2', -0.537, (193.128, 205.208, 93.528)), (' B 821  LEU HD11', ' B 939  SER  HB2', -0.535, (227.692, 183.502, 151.453)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.534, (258.398, 196.611, 195.219)), (' E 278  LEU HD12', ' E 281  LEU HD13', -0.533, (254.284, 239.893, 285.463)), (' E 177  ARG  NH2', ' E 470  LYS  O  ', -0.532, (227.196, 245.698, 301.781)), (' E 574  VAL HG23', ' E 576  ALA  H  ', -0.528, (230.369, 214.857, 273.38)), (' A 319  ARG  NH2', ' B 740  MET  SD ', -0.526, (204.079, 176.06, 186.809)), (' E 524  GLN  HB3', ' E 574  VAL HG11', -0.524, (233.854, 218.977, 272.932)), (' D 365  THR HG22', ' D 367  ASP  H  ', -0.52, (208.906, 137.256, 267.535)), (' C 360  ASN  H  ', ' C 523  THR  HB ', -0.517, (166.466, 187.814, 213.781)), (' B  26  PRO  HB3', ' B  65  PHE  HE1', -0.515, (255.291, 204.339, 200.847)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.513, (183.236, 230.832, 180.322)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.513, (172.303, 183.867, 150.928)), (' E 365  THR HG22', ' E 367  ASP  H  ', -0.511, (249.612, 241.123, 267.229)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.51, (172.02, 141.92, 203.807)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.51, (177.703, 230.189, 180.721)), (' D 574  VAL HG23', ' D 576  ALA  H  ', -0.509, (197.285, 167.608, 273.149)), (' C 821  LEU HD11', ' C 939  SER  HB3', -0.508, (200.358, 231.8, 150.897)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.506, (163.266, 172.076, 211.116)), (' A 383  SER  H  ', ' A 386  LYS  HB2', -0.506, (215.448, 174.281, 222.425)), (' E 370  LEU HD21', ' E 413  ALA  HB2', -0.505, (247.761, 232.258, 268.142)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.504, (250.585, 179.389, 215.557)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.504, (217.299, 234.952, 237.254)), (' A 869  MET  HB3', ' C 699  LEU HD11', -0.503, (173.978, 208.33, 153.602)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.503, (221.722, 167.214, 237.26)), (' A 420  ASP  OD2', ' A 460  ASN  ND2', -0.502, (223.285, 185.799, 247.198)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.501, (173.593, 149.795, 195.302)), (' E 394  ASN  HB3', ' E 562  LYS  HE2', -0.501, (220.407, 232.4, 270.843)), (' C 130  VAL  HB ', ' C 168  PHE  HB3', -0.5, (192.388, 241.074, 217.111)), (' B 105  ILE  O  ', ' B 238  PHE  HA ', -0.5, (247.131, 195.434, 210.165)), (' C 128  ILE HD13', ' C 170  TYR  HD2', -0.499, (195.02, 246.704, 209.774)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.499, (235.351, 198.604, 180.702)), (' E 260  GLY  HA3', ' E 612  PRO  HD3', -0.498, (251.041, 234.717, 301.961)), (' A 675  GLN  O  ', ' A 691  SER  N  ', -0.496, (186.634, 159.322, 162.51)), (' A 280  ASN HD22', ' A1305  NAG  H82', -0.496, (163.739, 177.68, 180.535)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.496, (190.097, 190.516, 138.222)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.495, (184.891, 166.038, 181.434)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.495, (182.073, 170.345, 181.37)), (' B  27  ALA  HB3', ' B  64  TRP  HB3', -0.495, (257.069, 202.459, 195.176)), (' C 142  GLY  HA3', ' C 156  GLU  HB3', -0.494, (179.011, 261.955, 214.324)), (' C  27  ALA  HB3', ' C  64  TRP  HB3', -0.494, (169.443, 247.534, 195.263)), (' D 177  ARG  NH2', ' D 470  LYS  O  ', -0.492, (224.962, 154.586, 302.14)), (' A  46  SER  HA ', ' A 279  TYR  O  ', -0.491, (169.625, 181.472, 180.913)), (' B  46  SER  CA ', ' B 279  TYR  O  ', -0.491, (231.892, 182.298, 179.444)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.488, (167.258, 250.902, 203.018)), (' C 278  LYS  HE3', ' C 287  ASP  HB2', -0.487, (190.554, 237.787, 178.877)), (' C 127  VAL HG21', ' C1302  NAG  H62', -0.487, (191.777, 253.854, 215.803)), (' D 394  ASN  HB3', ' D 562  LYS  HE2', -0.485, (217.32, 166.502, 270.831)), (' D 524  GLN  HB3', ' D 574  VAL HG11', -0.483, (198.993, 162.546, 272.758)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.482, (167.829, 151.155, 195.754)), (' D 278  LEU HD12', ' D 281  LEU HD13', -0.481, (205.596, 134.136, 285.839)), (' B1048  HIS  HA ', ' B1066  THR HG22', -0.48, (213.392, 195.567, 138.56)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.479, (213.46, 192.956, 107.169)), (' B 383  SER  H  ', ' B 386  LYS  HB2', -0.478, (214.255, 225.547, 222.65)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.476, (196.868, 213.07, 138.411)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.476, (196.339, 233.773, 192.827)), (' C 226  LEU  HG ', ' C 227  VAL HG23', -0.474, (194.997, 245.636, 202.785)), (' B 125  ASN HD22', ' B 171  VAL HG13', -0.473, (248.594, 175.752, 212.684)), (' B 276  LEU  HB3', ' B 289  VAL  HB ', -0.471, (233.301, 195.149, 181.613)), (' C  34  ARG  NH2', ' C 221  SER  OG ', -0.468, (186.292, 246.742, 188.195)), (' C  93  ALA  HB3', ' C 266  TYR  HB2', -0.466, (178.53, 246.571, 195.239)), (' B  36  VAL HG23', ' B 222  ALA  HA ', -0.465, (241.285, 188.198, 189.067)), (' B  52  GLN  OE1', ' B 274  THR  OG1', -0.464, (228.447, 199.269, 189.769)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.464, (264.153, 204.495, 203.978)), (' C 916  LEU HD22', ' C 923  ILE HD13', -0.464, (199.826, 219.348, 126.631)), (' A 192  PHE  HA ', ' A 204  TYR  O  ', -0.464, (168.008, 168.097, 199.363)), (' C 377  PHE  HE2', ' C 384  PRO  HB3', -0.463, (181.453, 201.579, 218.228)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.463, (173.448, 251.651, 195.536)), (' B 328  ARG  NH1', ' B 531  THR  O  ', -0.462, (221.151, 237.552, 200.718)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.462, (199.777, 165.766, 152.757)), (' D 260  GLY  HA3', ' D 612  PRO  HD3', -0.461, (202.275, 140.091, 302.11)), (' A 669  GLY  HA2', ' A 697  MET  HE3', -0.461, (202.338, 171.63, 159.534)), (' C  46  SER  CA ', ' C 279  TYR  O  ', -0.461, (199.005, 236.008, 179.056)), (' B  94  SER  HB3', ' B 190  ARG  HB2', -0.458, (252.836, 188.039, 197.408)), (' D 326  GLY  HA2', ' D 329  GLU  HG2', -0.458, (223.402, 151.287, 250.693)), (' A 189  LEU  HB3', ' A 208  THR  HB ', -0.458, (162.104, 162.543, 191.703)), (' A 756  TYR  OH ', ' A 994  ASP  OD1', -0.457, (195.304, 205.353, 195.579)), (' A 164  ASN  OD1', ' A 165  ASN  N  ', -0.457, (170.69, 166.681, 227.367)), (' D 420  SER  HB2', ' D 704  NAG  H83', -0.455, (195.657, 145.16, 257.055)), (' B 193  VAL HG23', ' B 223  LEU HD22', -0.454, (242.917, 189.64, 195.59)), (' B 132  GLU  OE1', ' B 165  ASN  ND2', -0.453, (240.659, 191.209, 227.265)), (' A 156  GLU  OE2', ' A 158  ARG  NH1', -0.453, (159.256, 148.486, 218.675)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.453, (171.969, 146.02, 203.081)), (' E 326  GLY  HA2', ' E 329  GLU  HG2', -0.452, (229.864, 244.664, 250.474)), (' A 139  PRO  HB3', ' A 159  VAL  HA ', -0.452, (166.636, 155.244, 216.858)), (' D 370  LEU HD21', ' D 413  ALA  HB2', -0.451, (202.976, 143.761, 268.343)), (' E 307  ILE HG23', ' E 369  PHE  HD1', -0.45, (246.399, 238.053, 259.943)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.447, (237.202, 203.885, 181.24)), (' C 659  SER  HB3', ' C 698  SER  HB3', -0.446, (170.146, 216.361, 152.091)), (' D 307  ILE HG23', ' D 369  PHE  HD1', -0.443, (209.027, 141.431, 259.975)), (' C 144  TYR  N  ', ' C 153  MET  O  ', -0.442, (181.252, 267.043, 211.438)), (' B 358  ILE  HB ', ' B 395  VAL  HB ', -0.442, (205.058, 237.445, 223.363)), (' C 280  ASN HD22', ' C1305  NAG  H82', -0.442, (197.579, 243.595, 178.401)), (' A 454  ARG  NH2', ' A 467  ASP  O  ', -0.44, (236.931, 182.652, 246.26)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.44, (219.813, 190.799, 131.79)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.439, (234.641, 204.96, 171.313)), (' B  93  ALA  HB3', ' B 266  TYR  HB2', -0.438, (251.151, 194.936, 195.011)), (' E 168  TRP  CD1', ' E 270  MET  HE2', -0.438, (240.832, 250.151, 289.195)), (' B1103  PHE  HZ ', ' P   1  NAG  H62', -0.438, (221.793, 207.295, 109.953)), (' B 454  ARG  NH2', ' B 467  ASP  O  ', -0.437, (196.227, 240.185, 246.381)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.435, (173.532, 180.739, 194.487)), (' C 434  ILE  O  ', ' C 510  VAL  HA ', -0.434, (185.021, 192.08, 226.446)), (' C 195  LYS  O  ', ' C 201  PHE  HA ', -0.434, (189.761, 236.536, 205.399)), (' D 148  LEU  HA ', ' D 151  ILE HG22', -0.433, (220.246, 133.479, 285.51)), (' D 165  TRP  HA ', ' D 270  MET  HE1', -0.432, (219.633, 137.933, 290.872)), (' E 168  TRP  HE1', ' E 502  SER  HB2', -0.43, (237.393, 249.215, 288.874)), (' C  64  TRP  HH2', ' C 214  ARG  HG2', -0.428, (170.786, 252.656, 190.473)), (' B 866  THR  H  ', ' B 869  MET  HE3', -0.428, (206.202, 173.557, 158.707)), (' C  52  GLN  HB2', ' C 274  THR HG22', -0.428, (188.055, 224.901, 190.549)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.428, (224.159, 190.259, 146.135)), (' E 474  MET  HE1', ' E 500  PRO  HD2', -0.428, (233.14, 244.068, 295.958)), (' B 191  GLU  O  ', ' B 205  SER  HA ', -0.427, (245.512, 186.339, 196.891)), (' B 403  ARG  HB2', ' B 406  GLU  HG2', -0.427, (213.3, 236.671, 247.837)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.427, (181.889, 185.948, 146.838)), (' D 557  MET  HB3', ' D 557  MET  HE3', -0.426, (204.658, 164.229, 265.343)), (' E  96  GLN  HG2', ' E 391  LEU  HB2', -0.426, (212.419, 232.281, 267.062)), (' C 231  ILE HD12', ' C 233  ILE HG12', -0.426, (188.91, 236.855, 212.863)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.426, (188.191, 191.4, 107.498)), (' B 537  LYS  HB3', ' B 537  LYS  HE2', -0.425, (227.123, 228.459, 191.241)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.425, (187.203, 168.325, 171.817)), (' E  47  SER  HA ', ' E  62  MET  HG3', -0.424, (223.732, 252.624, 267.1)), (' A 498  GLN  NE2', ' D  42  GLN  OE1', -0.423, (233.701, 160.613, 256.584)), (' E 557  MET  HB3', ' E 557  MET  HE3', -0.423, (229.259, 222.655, 265.687)), (' B  16  VAL  HB ', ' B 140  PHE  HZ ', -0.423, (263.669, 194.093, 217.598)), (' A 278  LYS  HB2', ' A 278  LYS  HE3', -0.423, (173.954, 176.484, 179.8)), (' E 216  ASP  N  ', ' E 216  ASP  OD1', -0.423, (217.085, 216.593, 279.198)), (' D 168  TRP  CD1', ' D 270  MET  HE2', -0.422, (221.484, 140.188, 289.697)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.422, (204.285, 239.912, 233.54)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.422, (188.187, 196.333, 225.803)), (' A 996  LEU  HA ', ' A 996  LEU HD23', -0.421, (189.325, 198.164, 194.419)), (' C 986  PRO  HA ', ' C 989  ALA  HB3', -0.421, (211.502, 208.48, 205.761)), (' B 442  ASP  O  ', ' B 448  ASN  ND2', -0.421, (214.031, 250.936, 245.439)), (' C 102  ARG  NH2', ' C 154  GLU  OE1', -0.42, (186.028, 260.449, 209.379)), (' A 395  VAL HG22', ' A 515  PHE  HD1', -0.419, (226.325, 176.987, 222.965)), (' B 278  LYS  HB2', ' B 278  LYS  HE3', -0.418, (234.406, 189.19, 178.582)), (' B 885  GLY  HA2', ' B 901  GLN  NE2', -0.417, (207.822, 183.751, 134.205)), (' B  65  PHE  HE2', ' B  84  LEU HD11', -0.417, (251.973, 200.853, 203.637)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.417, (182.413, 189.434, 139.427)), (' A1029  MET  HB2', ' A1029  MET  HE2', -0.415, (186.169, 200.725, 149.19)), (' E 165  TRP  HA ', ' E 270  MET  HE1', -0.415, (243.961, 249.844, 290.707)), (' A 403  ARG  HB2', ' A 406  GLU  HG2', -0.415, (225.183, 169.974, 247.684)), (' E 420  SER  HB2', ' E 704  NAG  H83', -0.414, (249.922, 224.645, 257.132)), (' C 103  GLY  HA3', ' C 119  ILE  O  ', -0.413, (185.628, 249.939, 209.645)), (' E 322  ASN  N  ', ' E 322  ASN  OD1', -0.413, (233.312, 231.48, 250.714)), (' A 117  LEU HD22', ' A 231  ILE HD13', -0.412, (171.994, 169.719, 212.313)), (' A 521  PRO  HB3', ' B 200  TYR  HE1', -0.412, (229.542, 185.697, 210.074)), (' D 168  TRP  HE1', ' D 502  SER  HB2', -0.411, (222.439, 143.256, 289.135)), (' B 418  ILE  HA ', ' B 422  ASN  HB2', -0.411, (204.886, 235.191, 245.702)), (' B 206  LYS  NZ ', ' B 224  GLU  OE2', -0.411, (243.639, 180.434, 191.051)), (' B 395  VAL HG22', ' B 515  PHE  HD1', -0.41, (206.547, 233.488, 223.129)), (' B 128  ILE HD13', ' B 170  TYR  HD2', -0.41, (243.267, 180.585, 210.031)), (' C 229  LEU  HG ', ' C 231  ILE HG23', -0.41, (193.308, 239.805, 210.887)), (' A 193  VAL  HB ', ' A 204  TYR  HB2', -0.41, (170.96, 169.988, 198.753)), (' C 424  LYS  NZ ', ' C 425  LEU  O  ', -0.409, (192.811, 184.624, 214.204)), (' D 216  ASP  N  ', ' D 216  ASP  OD1', -0.409, (205.538, 178.182, 279.112)), (' A 903  ALA  HB2', ' A 916  LEU HD12', -0.408, (183.669, 194.195, 124.691)), (' A  14  GLN  HB3', ' A 158  ARG  HE ', -0.408, (161.626, 149.873, 222.978)), (' A 418  ILE  HA ', ' A 422  ASN  HB2', -0.408, (228.453, 177.867, 245.541)), (' C 156  GLU  OE2', ' C 158  ARG  NH1', -0.407, (175.918, 260.919, 218.116)), (' C 724  THR HG23', ' C 934  ILE HD12', -0.407, (197.203, 222.703, 146.417)), (' A 598  ILE HG23', ' A 664  ILE HG21', -0.407, (192.038, 170.536, 166.905)), (' D 474  MET  HE1', ' D 500  PRO  HD2', -0.407, (220.462, 150.313, 296.633)), (' A 907  ASN HD21', ' A 913  GLN  HG3', -0.407, (190.018, 196.619, 122.543)), (' E 418  LEU HD22', ' E 423  LEU HD23', -0.407, (252.163, 233.922, 261.001)), (' C  16  VAL  HB ', ' C 140  PHE  HZ ', -0.406, (173.397, 257.465, 217.348)), (' C 102  ARG  HA ', ' C 102  ARG  HD2', -0.406, (184.828, 255.746, 206.032)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.405, (199.233, 214.138, 106.991)), (' E 148  LEU  HA ', ' E 151  ILE HG22', -0.405, (247.133, 252.731, 285.083)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.404, (232.908, 175.543, 233.576)), (' A 566  GLY  N  ', ' A 575  ALA  O  ', -0.404, (225.165, 176.053, 189.938)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.404, (186.619, 170.661, 165.122)), (' A 722  VAL  HA ', ' A1064  HIS  O  ', -0.403, (184.641, 187.901, 141.033)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.403, (199.764, 220.378, 139.404)), (' C  36  VAL HG13', ' C 222  ALA  HA ', -0.403, (188.981, 241.07, 188.864)), (' B1141  LEU HD23', ' B1145  LEU HD22', -0.403, (202.474, 203.306, 96.423)), (' B 724  THR HG23', ' B 934  ILE HD12', -0.402, (221.091, 190.86, 146.969)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.402, (260.717, 202.171, 203.412)), (' B1086  LYS  HB2', ' B1086  LYS  HE2', -0.402, (202.248, 214.915, 105.689)), (' C 985  ASP  N  ', ' C 985  ASP  OD1', -0.401, (209.217, 210.561, 210.077)), (' D 492  PRO  HD3', ' D 613  TYR  HE2', -0.401, (214.219, 138.374, 305.178)), (' A 316  SER  OG ', ' A 317  ASN  N  ', -0.4, (196.044, 172.944, 182.7)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.4, (217.878, 189.397, 139.525))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
