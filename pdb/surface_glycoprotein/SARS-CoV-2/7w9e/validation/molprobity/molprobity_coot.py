# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('D', ' 134 ', 'GLY', None, (240.106, 233.78999999999994, 354.514)), ('D', ' 139 ', 'THR', None, (243.951, 239.067, 350.3989999999999)), ('D', ' 154 ', 'PRO', None, (229.88799999999995, 210.14699999999996, 336.826)), ('D', ' 156 ', 'PRO', None, (231.13699999999994, 214.986, 333.1999999999999)), ('D', ' 196 ', 'PRO', None, (232.885, 241.206, 351.428)), ('E', '   8 ', 'GLN', None, (261.9199999999999, 218.66399999999993, 321.52499999999986)), ('E', '  95 ', 'PRO', None, (253.52599999999995, 197.1, 312.227)), ('E', ' 141 ', 'PRO', None, (256.6769999999999, 230.655, 333.29899999999986))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' C 478  LYS  CE ', ' E  96  TYR  HE2', -1.561, (252.448, 201.185, 306.451)), (' C 478  LYS  CE ', ' E  96  TYR  CE2', -1.387, (251.295, 201.598, 307.034)), (' C 478  LYS  HE3', ' E  96  TYR  CE2', -1.352, (251.179, 201.388, 307.309)), (' C 477  SER  HA ', ' D 101  TYR  CD2', -1.078, (249.854, 203.588, 299.475)), (' C 478  LYS  HE2', ' E  96  TYR  HE2', -1.031, (252.961, 201.647, 306.705)), (' C 478  LYS  HE2', ' E  96  TYR  CE2', -0.999, (252.099, 201.549, 306.328)), (' C 477  SER  HA ', ' D 101  TYR  HD2', -0.783, (248.894, 204.597, 299.201)), (' B 496  GLY  O  ', ' B 501  ASN  ND2', -0.721, (213.479, 205.463, 277.373)), (' C 478  LYS  NZ ', ' E  96  TYR  HE2', -0.707, (253.232, 200.854, 307.584)), (' B 725  GLU  OE1', ' B1028  LYS  NZ ', -0.698, (223.126, 228.322, 184.56)), (' C 102  ARG  NE ', ' C 177  MET  SD ', -0.696, (165.588, 193.994, 244.388)), (' C 490  PHE  O  ', ' C 493  GLN  NE2', -0.688, (245.659, 187.689, 293.186)), (' B 968  SER  OG ', ' C 755  GLN  O  ', -0.687, (223.515, 229.616, 228.864)), (' A 968  SER  OG ', ' B 755  GLN  O  ', -0.682, (231.164, 207.867, 228.137)), (' C 474  GLN  NE2', ' D 101  TYR  CZ ', -0.681, (250.302, 202.377, 297.01)), (' C 578  ASP  OD2', ' C 581  THR  N  ', -0.681, (235.002, 174.488, 234.473)), (' A  69  HIS  O  ', ' A  77  LYS  N  ', -0.681, (284.511, 189.472, 242.129)), (' C 478  LYS  HE3', ' E  96  TYR  CZ ', -0.68, (250.816, 201.013, 307.038)), (' A 787  GLN  OE1', ' C 703  ASN  ND2', -0.677, (207.975, 191.383, 175.938)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.675, (260.48, 193.523, 220.438)), (' B 115  GLN  NE2', ' B 167  THR  OG1', -0.668, (225.403, 254.591, 259.317)), (' B1040  VAL  O  ', ' C1030  SER  OG ', -0.664, (215.487, 225.333, 179.922)), (' B 149  ASN  OD1', ' B 151  SER  OG ', -0.659, (238.825, 284.02, 250.434)), (' B  96  GLU  OE1', ' B 100  ILE  N  ', -0.649, (225.549, 276.068, 240.149)), (' B 439  ASN  O  ', ' B 443  SER  OG ', -0.637, (206.944, 210.703, 279.219)), (' B 731  MET  N  ', ' B 774  GLN  OE1', -0.636, (232.872, 224.738, 200.16)), (' C 731  MET  N  ', ' C 774  GLN  OE1', -0.635, (207.761, 223.909, 200.666)), (' B 357  ARG  NH1', ' B 359  SER  OG ', -0.627, (186.443, 211.989, 253.263)), (' C 478  LYS  HG2', ' E  96  TYR  OH ', -0.627, (251.067, 201.55, 305.044)), (' A 965  GLN  OE1', ' A1003  SER  OG ', -0.626, (226.314, 207.097, 222.542)), (' A  69  HIS  ND1', ' A 260  ALA  O  ', -0.62, (281.093, 184.22, 242.39)), (' C 393  THR  O  ', ' C 523  THR  OG1', -0.619, (241.905, 189.838, 254.795)), (' C 212  LEU HD11', ' C 215  ASP  HA ', -0.616, (170.921, 185.458, 227.911)), (' A 725  GLU  OE2', ' A1028  LYS  NZ ', -0.616, (228.462, 209.813, 184.828)), (' C 487  ASN  ND2', ' D  33  THR  OG1', -0.615, (243.643, 199.388, 301.688)), (' C 280  ASN  OD1', ' C 284  THR  N  ', -0.614, (179.75, 209.725, 222.018)), (' A1040  VAL  N  ', ' B1031  GLU  OE2', -0.608, (226.973, 217.201, 177.572)), (' C 486  PHE  HB3', ' E  94  TYR  CE1', -0.608, (249.701, 197.059, 305.226)), (' C 879  ALA  O  ', ' C 883  THR  OG1', -0.599, (200.264, 230.479, 172.976)), (' C 809  PRO  O  ', ' C 814  LYS  NZ ', -0.599, (185.426, 233.275, 184.797)), (' A 345  THR  O  ', ' A 346  ARG  NH1', -0.596, (230.2, 238.596, 275.727)), (' B 457  ARG  NH1', ' B 467  ASP  OD2', -0.591, (205.047, 192.007, 258.275)), (' A 366  SER  O  ', ' A 370  ASN  N  ', -0.59, (241.994, 226.879, 260.199)), (' B 393  THR  O  ', ' B 523  THR  OG1', -0.585, (189.221, 215.453, 249.433)), (' A 501  ASN  O  ', ' A 506  GLN  NE2', -0.582, (222.899, 223.716, 278.058)), (' C 478  LYS  CE ', ' E  96  TYR  CZ ', -0.582, (251.179, 201.512, 306.525)), (' A 280  ASN  OD1', ' A 284  THR  N  ', -0.578, (247.736, 185.464, 219.9)), (' C 105  ILE HD12', ' C 241  LEU HD21', -0.576, (174.802, 188.799, 250.507)), (' B 345  THR  O  ', ' B 346  ARG  NH1', -0.572, (197.605, 209.411, 275.289)), (' A  24  LEU HD12', ' A  80  ASP  OD2', -0.572, (276.399, 196.275, 239.25)), (' C 721  SER  OG ', ' C1066  THR  OG1', -0.566, (203.372, 208.545, 175.284)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.561, (179.944, 194.357, 221.461)), (' B 409  GLN  OE1', ' B 417  LYS  N  ', -0.555, (214.419, 201.871, 260.424)), (' C 442  ASP  O  ', ' C 448  ASN  ND2', -0.549, (239.152, 173.101, 283.112)), (' C 898  PHE  CZ ', ' C1050  MET  HE1', -0.548, (199.585, 220.521, 170.32)), (' B 473  TYR  N  ', ' B 489  TYR  O  ', -0.547, (209.986, 184.815, 265.705)), (' C 462  LYS  N  ', ' C 465  GLU  OE1', -0.547, (242.946, 198.437, 277.879)), (' C 486  PHE  CE2', ' D  33  THR HG21', -0.545, (244.798, 198.663, 304.888)), (' A 109  THR  OG1', ' A 111  ASP  OD1', -0.545, (261.23, 199.532, 257.331)), (' C 478  LYS  HG3', ' E  94  TYR  CZ ', -0.544, (249.982, 199.518, 305.364)), (' C 474  GLN  NE2', ' D 101  TYR  CE2', -0.544, (250.483, 202.738, 297.453)), (' E   6  GLN  HG3', ' E 100  GLY  H  ', -0.543, (256.942, 212.174, 318.673)), (' A 180  GLU  OE1', ' A 181  GLY  N  ', -0.536, (278.078, 175.915, 239.582)), (' B 280  ASN  OD1', ' B 284  THR  N  ', -0.532, (235.043, 254.597, 222.289)), (' B  18  LEU HD23', ' B 256  SER  HA ', -0.529, (214.352, 282.226, 254.71)), (' A 721  SER  OG ', ' A1066  THR  OG1', -0.526, (235.999, 207.03, 174.42)), (' A 125  ASN  ND2', ' A 172  SER  O  ', -0.516, (254.811, 175.507, 244.384)), (' A 334  ASN  O  ', ' A 362  VAL  N  ', -0.514, (245.234, 242.658, 255.102)), (' A 185  ASN  ND2', ' A 212  LEU  O  ', -0.508, (276.904, 186.864, 224.642)), (' C 125  ASN  OD1', ' C 126  VAL  N  ', -0.508, (169.941, 203.978, 248.616)), (' D 139  THR  OG1', ' D 140  ASN  N  ', -0.508, (245.412, 242.054, 350.326)), (' A 319  ARG  NH2', ' B 737  ASP  OD2', -0.507, (243.147, 220.372, 221.752)), (' C 725  GLU  OE2', ' C1028  LYS  NZ ', -0.505, (209.74, 213.737, 185.228)), (' C 486  PHE  CZ ', ' D  33  THR HG21', -0.505, (244.383, 198.18, 305.35)), (' C  34  ARG  NH1', ' C 221  SER  OG ', -0.505, (177.143, 196.005, 225.333)), (' A 244  LEU HD13', ' A 258  TRP  HB3', -0.504, (279.0, 185.791, 249.85)), (' C 326  ILE HD12', ' C 539  VAL HG21', -0.501, (223.152, 179.115, 231.247)), (' B 280  ASN  ND2', ' B 284  THR  OG1', -0.501, (234.069, 257.276, 220.812)), (' C 478  LYS  CG ', ' E  96  TYR  OH ', -0.5, (250.935, 201.14, 305.217)), (' C 422  ASN  OD1', ' C 454  ARG  N  ', -0.494, (242.211, 187.784, 285.52)), (' D  53  PRO  O  ', ' D  74  ARG  NH1', -0.492, (234.021, 193.312, 301.613)), (' C 478  LYS  NZ ', ' E  96  TYR  CE2', -0.492, (253.32, 201.226, 307.857)), (' D 106  ALA  HB3', ' E  49  TYR  HB2', -0.491, (250.35, 211.094, 303.198)), (' C 478  LYS  HG3', ' E  94  TYR  CE1', -0.49, (250.567, 198.643, 305.306)), (' C 708  SER  OG ', ' C 711  SER  N  ', -0.489, (217.931, 190.527, 159.275)), (' B 357  ARG  NE ', ' B 394  ASN  OD1', -0.488, (188.821, 209.83, 251.587)), (' A 140  PHE  CD1', ' A 244  LEU HD12', -0.488, (275.479, 185.585, 250.925)), (' D   7  SER  OG ', ' D   8  GLY  N  ', -0.487, (228.101, 205.925, 320.856)), (' B 326  ILE HD12', ' B 539  VAL HG21', -0.483, (188.07, 234.614, 234.215)), (' A  87  ASN  OD1', ' A  88  ASP  N  ', -0.483, (257.529, 204.582, 239.712)), (' B 177  MET  SD ', ' B 178  ASP  N  ', -0.482, (233.085, 276.597, 242.502)), (' A 280  ASN  ND2', ' A 284  THR  OG1', -0.482, (249.733, 184.237, 218.676)), (' D 214  ASP  N  ', ' D 214  ASP  OD2', -0.482, (222.447, 225.02, 345.927)), (' D  98  ARG  N  ', ' D 108  ASP  O  ', -0.481, (240.594, 207.235, 307.779)), (' B 287  ASP  OD1', ' B 288  ALA  N  ', -0.48, (223.616, 255.561, 220.02)), (' C1089  PHE  O  ', ' C1121  PHE  N  ', -0.475, (223.096, 207.803, 149.508)), (' B 128  ILE HD12', ' B 170  TYR  HD2', -0.473, (232.669, 260.815, 248.941)), (' A  37  TYR  OH ', ' A 195  LYS  NZ ', -0.472, (250.532, 197.539, 233.94)), (' C 584  ILE  C  ', ' C 585  LEU HD12', -0.471, (233.551, 176.479, 226.919)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.47, (194.05, 190.78, 218.259)), (' C 496  GLY  O  ', ' C 501  ASN  ND2', -0.462, (233.514, 175.997, 289.484)), (' E  82  ASP  OD1', ' E  86  TYR  OH ', -0.461, (250.01, 224.466, 313.946)), (' B 366  SER  O  ', ' B 370  ASN  ND2', -0.46, (200.181, 228.902, 260.452)), (' C 478  LYS  HE2', ' E  96  TYR  CZ ', -0.46, (251.43, 201.979, 306.609)), (' E  14  SER  OG ', ' E  15  VAL  N  ', -0.457, (253.511, 235.619, 318.434)), (' B 490  PHE  O  ', ' B 493  GLN  NE2', -0.457, (210.889, 189.796, 269.562)), (' B 154  GLU  OE2', ' B 158  GLY  N  ', -0.456, (225.581, 276.589, 255.777)), (' E 150  ILE  O  ', ' E 153  SER  OG ', -0.454, (256.402, 218.219, 359.276)), (' A 581  THR  O  ', ' A 583  GLU  N  ', -0.453, (249.997, 248.905, 235.463)), (' C 605  SER  OG ', ' C 606  ASN  N  ', -0.451, (189.847, 189.653, 205.751)), (' C 971  GLY  O  ', ' C 995  ARG  NH1', -0.451, (213.178, 213.742, 237.961)), (' D  11  LEU HD21', ' D 154  PRO  HG3', -0.451, (229.47, 207.608, 334.006)), (' A 386  LYS  NZ ', ' B 984  LEU  O  ', -0.45, (238.314, 223.356, 243.811)), (' A 584  ILE  C  ', ' A 585  LEU HD12', -0.45, (249.427, 246.224, 230.83)), (' A 605  SER  OG ', ' A 606  ASN  N  ', -0.45, (259.963, 204.93, 205.102)), (' D  35  TYR  HB2', ' D  97  ALA  HB3', -0.45, (242.213, 204.407, 310.175)), (' B 578  ASP  OD2', ' B 580  GLN  N  ', -0.45, (180.892, 226.283, 241.284)), (' D 170  VAL HG22', ' D 188  VAL HG12', -0.445, (235.245, 232.178, 338.447)), (' B 517  LEU HD23', ' C 983  ARG  NE ', -0.445, (200.94, 219.436, 243.458)), (' A  79  PHE  CE1', ' A 242  LEU HD12', -0.444, (275.011, 189.407, 244.546)), (' E  19  VAL HG21', ' E 104  LEU HD11', -0.443, (255.639, 225.981, 317.318)), (' E 124  GLN  NE2', ' E 129  GLY  O  ', -0.442, (236.554, 216.808, 355.004)), (' B 739  THR  O  ', ' B 743  CYS  N  ', -0.442, (237.541, 222.2, 226.46)), (' E   6  GLN HE21', ' E  99  GLY  HA3', -0.439, (255.808, 211.795, 316.826)), (' A 105  ILE  CD1', ' A 241  LEU HD21', -0.439, (266.574, 191.594, 249.667)), (' C 212  LEU HD11', ' C 215  ASP  CA ', -0.437, (171.107, 185.666, 227.665)), (' D 148  LEU HD23', ' D 185  SER  HB3', -0.436, (238.875, 221.794, 344.555)), (' C 105  ILE  CD1', ' C 241  LEU HD21', -0.435, (174.946, 189.216, 251.302)), (' C 244  LEU HD23', ' C 260  ALA  HB2', -0.434, (164.204, 182.759, 245.748)), (' B 738  CYS  SG ', ' B 739  THR  N  ', -0.433, (237.632, 218.066, 222.331)), (' C 392  PHE  CD2', ' C 517  LEU HD21', -0.433, (234.043, 192.952, 256.939)), (' B  33  THR  OG1', ' B 219  GLY  O  ', -0.433, (221.731, 262.648, 222.251)), (' D 138  GLN  HA ', ' D 139  THR  HA ', -0.431, (244.796, 239.641, 352.759)), (' C  81  ASN  N  ', ' C  81  ASN  OD1', -0.431, (173.796, 180.573, 245.063)), (' A 854  LYS  NZ ', ' C 568  ASP  OD2', -0.43, (231.509, 193.054, 217.826)), (' B 178  ASP  N  ', ' B 178  ASP  OD1', -0.43, (234.145, 277.125, 241.368)), (' B 215  ASP  O  ', ' B 266  TYR  OH ', -0.429, (216.562, 273.255, 230.187)), (' C 100  ILE  O  ', ' C 243  ALA  N  ', -0.428, (166.757, 188.201, 245.083)), (' B  91  TYR  CE2', ' B 193  VAL HG22', -0.427, (222.206, 259.632, 234.919)), (' A  81  ASN  N  ', ' A  81  ASN  OD1', -0.426, (275.012, 194.105, 245.677)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.425, (244.824, 192.506, 229.774)), (' C 474  GLN  NE2', ' C 478  LYS  O  ', -0.424, (251.324, 200.455, 299.201)), (' C1104  VAL HG23', ' C1115  ILE HG12', -0.424, (216.342, 203.157, 148.425)), (' A 246  ARG  NE ', ' A 257  GLY  O  ', -0.423, (282.31, 182.594, 253.696)), (' B  89  GLY  HA3', ' B 270  LEU HD22', -0.423, (217.482, 254.756, 239.501)), (' A 916  LEU  O  ', ' A 920  GLN  N  ', -0.423, (233.488, 199.58, 159.031)), (' D 131  LEU HD12', ' D 146  GLY  HA3', -0.421, (237.815, 227.658, 346.323)), (' A 350  VAL HG11', ' A 402  ILE  CG2', -0.419, (219.29, 233.595, 266.018)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.418, (210.947, 252.512, 219.35)), (' C 201  PHE  CE2', ' C 235  ILE HD12', -0.418, (186.407, 196.518, 247.295)), (' C 354  ASN  OD1', ' C 355  ARG  N  ', -0.418, (245.553, 183.949, 270.656)), (' E 133  VAL HG12', ' E 178  THR HG22', -0.417, (242.514, 220.778, 347.119)), (' A 971  GLY  O  ', ' A 995  ARG  NH1', -0.416, (227.481, 210.982, 237.51)), (' A 554  GLU  OE2', ' A 556  ASN  ND2', -0.416, (251.648, 248.024, 221.877)), (' D 108  ASP  OD2', ' E  36  TYR  OH ', -0.415, (247.477, 209.106, 309.622)), (' B 108  THR  O  ', ' B 237  ARG  NE ', -0.415, (211.448, 260.678, 253.432)), (' C 474  GLN  CD ', ' D 101  TYR  CZ ', -0.415, (250.208, 201.816, 296.652)), (' E 171  SER  O  ', ' E 171  SER  OG ', -0.414, (250.383, 232.57, 328.008)), (' C  79  PHE  CZ ', ' C 244  LEU HD21', -0.413, (167.031, 181.576, 246.457)), (' E 124  GLN HE21', ' E 130  ALA  HA ', -0.411, (237.665, 217.693, 354.838)), (' A 106  PHE  O  ', ' A 116  SER  OG ', -0.411, (260.139, 194.829, 252.332)), (' A 167  THR HG22', ' C 357  ARG  NH1', -0.409, (249.084, 190.855, 259.772)), (' A 105  ILE HD11', ' A 241  LEU HD21', -0.409, (266.961, 191.344, 250.096)), (' C 132  GLU  OE1', ' C 165  ASN  ND2', -0.408, (183.666, 193.594, 265.417)), (' B 887  THR HG21', ' B 894  LEU  HB2', -0.407, (239.083, 219.642, 167.777)), (' C 109  THR  OG1', ' C 111  ASP  OD1', -0.405, (185.426, 186.967, 257.602)), (' A 287  ASP  OD1', ' A 288  ALA  N  ', -0.405, (253.976, 195.206, 217.808)), (' C 212  LEU HD12', ' C 217  PRO  HD3', -0.404, (170.539, 187.719, 226.315)), (' D 107  LEU  HB2', ' E  55  TYR  HE2', -0.403, (244.905, 212.18, 303.116)), (' C 287  ASP  OD1', ' C 288  ALA  N  ', -0.403, (185.273, 199.97, 219.413)), (' E 198  HIS  HB3', ' E 200  THR HG22', -0.403, (258.972, 232.001, 340.181)), (' C 420  ASP  O  ', ' C 461  LEU  N  ', -0.402, (240.886, 196.992, 282.361)), (' D   4  LEU HD22', ' D  24  THR HG22', -0.401, (233.416, 206.429, 307.755)), (' A 320  VAL  N  ', ' A 591  SER  OG ', -0.4, (250.381, 224.979, 223.507)), (' C 486  PHE  CD2', ' E  94  TYR  OH ', -0.4, (248.143, 198.575, 305.46))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
