# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  32 ', 'PHE', 0.01582460886076916, (207.31900000000005, 155.659, 150.029)), ('A', ' 621 ', 'PRO', 0.006910432046765821, (190.98600000000005, 136.189, 154.758)), ('A', ' 637 ', 'SER', 0.0299374982925831, (194.486, 140.025, 153.317)), ('B', '  98 ', 'SER', 0.04993434995494429, (128.66300000000007, 108.62900000000003, 135.096)), ('B', ' 470 ', 'THR', 0.03304365017160457, (157.357, 203.549, 109.128)), ('B', ' 489 ', 'TYR', 0.037679205806299715, (167.152, 198.899, 103.423)), ('B', ' 582 ', 'LEU', 0.03525489156357508, (122.63700000000003, 182.805, 137.736)), ('C', ' 445 ', 'VAL', 0.0029731985778966106, (177.468, 157.41200000000006, 89.557)), ('C', ' 456 ', 'PHE', 0.04875415052805802, (182.47100000000006, 143.65600000000006, 110.514)), ('C', ' 459 ', 'SER', 0.028512947089910194, (184.13700000000006, 145.759, 120.019)), ('C', ' 491 ', 'PRO', 0.00301368, (185.632, 145.481, 105.28199999999998)), ('C', ' 589 ', 'PRO', 0.08333274195833998, (176.09500000000006, 187.38600000000005, 147.471)), ('C', ' 744 ', 'GLY', 0.035132001552697856, (140.10100000000006, 162.25100000000003, 147.174))]
data['omega'] = []
data['rota'] = [('A', ' 227 ', 'VAL', 0.21119860300896626, (201.47100000000006, 171.424, 130.211)), ('A', ' 318 ', 'PHE', 0.05790989942219017, (182.79200000000006, 142.99000000000004, 153.167)), ('A', ' 366 ', 'SER', 0.08973322373970996, (170.196, 140.08300000000006, 115.832)), ('A', ' 410 ', 'ILE', 0.2691243358772634, (150.80100000000004, 150.455, 116.12199999999999)), ('A', ' 421 ', 'TYR', 0.0873829286532997, (138.61700000000005, 149.793, 115.456)), ('A', ' 422 ', 'ASN', 0.0005606785449364519, (140.53200000000007, 146.615, 114.414)), ('A', ' 458 ', 'LYS', 0.001172986528093876, (129.64300000000006, 150.018, 117.208)), ('A', ' 470 ', 'THR', 0.21053117341390268, (130.651, 142.148, 107.572)), ('A', ' 498 ', 'GLN', 0.0, (150.30100000000004, 151.749, 93.42699999999999)), ('A', ' 523 ', 'THR', 0.1731474348527496, (160.678, 127.401, 125.058)), ('A', ' 615 ', 'VAL', 0.1978025977827771, (181.72700000000006, 136.187, 159.58)), ('A', ' 635 ', 'VAL', 0.006301065150182694, (192.43700000000007, 145.482, 152.601)), ('A', ' 636 ', 'TYR', 0.27878621573346307, (194.32900000000006, 143.395, 155.268)), ('A', ' 760 ', 'CYS', 0.12204796075820923, (160.49, 176.416, 153.715)), ('A', ' 868 ', 'GLU', 0.008270500172349527, (180.139, 186.272, 182.45400000000004)), ('A', ' 886 ', 'TRP', 0.005448106821859255, (169.01000000000005, 175.346, 202.358)), ('A', '1125 ', 'ASN', 0.29443867566399956, (158.63600000000005, 139.95000000000005, 227.37299999999996)), ('B', ' 142 ', 'ASP', 0.11914381414996245, (126.94800000000002, 110.505, 120.334)), ('B', ' 214 ', 'ARG', 0.00089982794473563, (122.52100000000003, 116.202, 147.945)), ('B', ' 402 ', 'ILE', 0.22809548046810896, (155.697, 180.157, 106.295)), ('B', ' 421 ', 'TYR', 0.12656980911494625, (161.55500000000006, 188.32, 114.615)), ('B', ' 474 ', 'GLN', 0.015772459514018677, (168.05000000000007, 199.047, 108.40800000000002)), ('B', ' 505 ', 'TYR', 0.17138210749087893, (161.146, 174.91300000000007, 100.906)), ('B', ' 603 ', 'ASN', 0.10553812419606173, (138.875, 132.56500000000003, 169.295)), ('B', ' 732 ', 'THR', 0.25063845548639074, (167.54900000000006, 144.842, 169.152)), ('B', ' 752 ', 'LEU', 0.17678260100105464, (174.01500000000004, 156.089, 140.213)), ('B', ' 760 ', 'CYS', 0.06913000851732494, (173.94000000000005, 156.703, 152.684)), ('B', ' 820 ', 'ASP', 0.2283234739160239, (163.94000000000005, 131.43100000000007, 184.011)), ('B', ' 907 ', 'ASN', 0.2959025978273505, (161.657, 151.8, 211.211)), ('C', '  96 ', 'GLU', 0.010178883953187669, (136.36500000000007, 215.366, 137.1)), ('C', ' 351 ', 'TYR', 0.11974084742908618, (184.89700000000005, 155.587, 108.527)), ('C', ' 457 ', 'ARG', 0.24126273401279813, (185.22000000000006, 143.30700000000004, 113.28700000000002)), ('C', ' 489 ', 'TYR', 0.1516647166668466, (186.93000000000006, 139.48, 104.27100000000002)), ('C', ' 491 ', 'PRO', 0.1338670550216476, (185.632, 145.481, 105.28199999999998)), ('C', ' 603 ', 'ASN', 0.1410268840943886, (148.255, 196.719, 168.81)), ('C', ' 633 ', 'TRP', 0.05029087509086066, (163.36900000000006, 201.593, 154.754)), ('C', ' 641 ', 'ASN', 0.03949127162292491, (169.94800000000006, 205.874, 167.442)), ('C', ' 642 ', 'VAL', 0.0064115595972338065, (172.38000000000005, 203.227, 166.077)), ('C', ' 738 ', 'CYS', 0.06712637841701508, (145.633, 159.163, 153.329)), ('C', ' 907 ', 'ASN', 0.16915693859382747, (155.463, 167.796, 211.839))]
data['cbeta'] = [('A', ' 635 ', 'VAL', ' ', 0.33980274916883463, (192.21900000000005, 146.91700000000006, 153.158)), ('B', ' 457 ', 'ARG', ' ', 0.29655956935765937, (169.04800000000006, 194.699, 112.713)), ('B', ' 489 ', 'TYR', ' ', 0.25272069789276186, (166.89800000000005, 198.347, 102.0)), ('C', ' 457 ', 'ARG', ' ', 0.3956689610089362, (186.48600000000005, 144.192, 113.177))]
data['probe'] = [(' C 391  CYS  HB2', ' C 525  CYS  HA ', -0.589, (183.616, 181.741, 123.943)), (' B 391  CYS  HB2', ' B 525  CYS  HA ', -0.557, (133.856, 175.82, 126.039)), (' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.535, (164.398, 132.513, 125.148)), (' C 456  PHE  CG ', ' C 457  ARG  N  ', -0.449, (183.884, 142.469, 111.419))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
