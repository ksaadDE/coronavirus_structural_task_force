# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 123 ', 'ALA', 0.0409232042016795, (228.483, 290.483, 199.702))]
data['omega'] = [('B', ' 123 ', 'ALA', None, (229.144, 289.2419999999999, 199.309)), ('H', ' 151 ', 'PRO', None, (220.186, 242.28300000000002, 127.948)), ('H', ' 153 ', 'PRO', None, (223.281, 238.308, 124.42499999999998)), ('L', '   8 ', 'PRO', None, (255.10900000000012, 237.595, 129.66499999999994)), ('L', ' 141 ', 'PRO', None, (251.323, 243.377, 114.525))]
data['rota'] = [('A', ' 590 ', 'CYS', 0.17879124005775535, (204.21399999999994, 251.03899999999996, 224.77899999999994)), ('A', ' 615 ', 'VAL', 0.2535349632251916, (202.939, 250.5099999999999, 237.331)), ('A', ' 900 ', 'MET', 0.2367835590197604, (226.71999999999994, 214.742, 287.0429999999999)), ('A', '1004 ', 'LEU', 0.21948772932141952, (224.87599999999995, 221.06, 229.48599999999993)), ('B', ' 517 ', 'LEU', 0.0, (245.184, 220.214, 187.422)), ('B', '1017 ', 'GLU', 0.28200080088726, (229.34, 236.14099999999993, 247.90199999999996)), ('C', ' 231 ', 'ILE', 0.1337218681343033, (253.35399999999998, 208.75, 194.15399999999994)), ('C', ' 517 ', 'LEU', 0.14203709547213542, (207.421, 213.575, 206.95299999999995)), ('C', '1004 ', 'LEU', 0.26234372680768975, (237.49499999999995, 232.046, 227.69099999999995)), ('H', '  11 ', 'LEU', 0.00043090729096394604, (220.516, 237.43, 135.635)), ('H', '  12 ', 'ILE', 0.18891176999135598, (219.814, 239.12399999999994, 138.978)), ('H', ' 182 ', 'LEU', 0.02270248151576302, (228.959, 246.997, 119.61)), ('L', '  11 ', 'LEU', 0.006108530065230388, (253.36500000000004, 236.612, 123.26899999999999)), ('L', '  15 ', 'VAL', 0.1883354859327715, (253.894, 226.25099999999995, 115.40899999999998)), ('L', ' 214 ', 'CYS', 0.06712637841701508, (230.126, 265.928, 103.53299999999997))]
data['cbeta'] = []
data['probe'] = [(' B1126  CYS  HB2', ' B1132  ILE HD13', -0.846, (258.255, 227.426, 295.689)), (' B1129  VAL  HB ', ' B1132  ILE HD11', -0.828, (258.124, 227.253, 292.915)), (' B1040  VAL HG21', ' C1035  GLY  HA3', -0.77, (242.223, 235.435, 271.085)), (' B 388  ASN  HB3', ' B 527  PRO  HD2', -0.748, (258.913, 230.351, 189.984)), (' A 736  VAL HG11', ' A1004  LEU HD21', -0.709, (225.461, 216.337, 230.805)), (' C 742  ILE  O  ', ' C1000  ARG  NH1', -0.678, (242.338, 233.677, 217.267)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.677, (216.815, 218.376, 274.285)), (' L  29  ILE HG22', ' L  32  TYR  HB2', -0.674, (254.814, 228.077, 146.544)), (' A  29  THR HG23', ' A  62  VAL HG23', -0.663, (177.673, 228.772, 222.274)), (' A 393  THR HG21', ' A 520  ALA  HB3', -0.647, (220.992, 259.671, 205.574)), (' A 914  ASN  ND2', ' A1111  GLU  OE2', -0.641, (221.029, 226.06, 295.192)), (' B 736  VAL HG11', ' B1004  LEU HD21', -0.641, (218.317, 239.214, 230.595)), (' A 330  PRO  HB2', ' A 332  ILE HD13', -0.622, (209.083, 264.863, 200.275)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.621, (248.111, 225.07, 129.315)), (' C 224  GLU  N  ', ' C 224  GLU  OE1', -0.614, (262.565, 205.493, 213.135)), (' A 326  ILE HD12', ' A 539  VAL HG21', -0.612, (201.05, 256.915, 215.379)), (' B1116  THR  OG1', ' B1118  ASP  OD1', -0.612, (243.917, 237.43, 301.081)), (' C 720  ILE HG13', ' C 923  ILE HG23', -0.607, (252.955, 220.587, 277.648)), (' C 909  ILE HD13', ' C1049  LEU HD21', -0.604, (245.581, 224.275, 278.024)), (' B 365  TYR  H  ', ' B 388  ASN HD21', -0.599, (259.683, 229.739, 186.128)), (' B 902  MET  HE1', ' B1049  LEU HD13', -0.597, (232.576, 248.257, 278.117)), (' B 532  ASN  OD1', ' B 533  LEU  N  ', -0.596, (268.586, 235.72, 206.451)), (' C 287  ASP  OD1', ' C 288  ALA  N  ', -0.593, (255.393, 202.919, 225.936)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.589, (251.976, 223.011, 269.731)), (' H  29  VAL HG13', ' H  34  MET  HG3', -0.583, (233.272, 218.91, 146.626)), (' B1103  PHE  HZ ', ' K   1  NAG  H62', -0.583, (252.576, 248.47, 298.744)), (' B 287  ASP  OD1', ' B 288  ALA  N  ', -0.576, (235.498, 267.489, 226.485)), (' A1105  THR HG22', ' A1112  PRO  HA ', -0.571, (219.535, 234.556, 296.282)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.57, (260.05, 183.29, 210.122)), (' A 552  LEU  HB3', ' A 585  LEU HD13', -0.566, (205.418, 261.226, 218.252)), (' A1029  MET  HE2', ' A1053  PRO  HB3', -0.565, (224.639, 214.947, 264.714)), (' B1028  LYS  O  ', ' B1032  CYS  CB ', -0.565, (227.916, 239.884, 266.666)), (' B 961  THR HG21', ' C 765  ARG HH22', -0.564, (230.679, 244.863, 231.83)), (' A 195  LYS  HD3', ' A 197  ILE HD13', -0.564, (194.56, 224.833, 209.852)), (' A1028  LYS  O  ', ' A1032  CYS  CB ', -0.56, (226.711, 221.484, 267.602)), (' A 122  ASN  O  ', ' A 124  THR  N  ', -0.553, (172.549, 207.171, 203.947)), (' C 908  GLY  O  ', ' C1038  LYS  NZ ', -0.551, (239.381, 228.394, 278.615)), (' C1106  GLN  NE2', ' C1111  GLU  OE1', -0.547, (244.864, 220.313, 290.397)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.547, (233.689, 239.897, 263.928)), (' C 905  ARG  HD2', ' C1049  LEU  O  ', -0.546, (247.067, 229.396, 275.04)), (' A 319  ARG  NH2', ' B 745  ASP  OD2', -0.544, (206.699, 246.307, 223.39)), (' C  65  PHE  O  ', ' C 264  ALA  HA ', -0.543, (260.113, 183.821, 206.976)), (' A1093  GLY  O  ', ' A1107  ARG  NH1', -0.541, (226.485, 238.939, 289.629)), (' A 280  ASN  ND2', ' A 284  THR  OG1', -0.541, (192.781, 209.557, 228.986)), (' C1029  MET  HE2', ' C1053  PRO  HB3', -0.541, (249.567, 232.775, 261.654)), (' B 703  ASN  OD1', ' B 704  SER  N  ', -0.539, (259.297, 247.175, 270.321)), (' A 117  LEU HD21', ' A 231  ILE HG21', -0.538, (187.746, 221.476, 200.498)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.538, (219.564, 257.107, 193.601)), (' B 811  LYS  O  ', ' B 813  SER  N  ', -0.537, (211.862, 260.034, 260.884)), (' A1028  LYS  O  ', ' A1032  CYS  HB3', -0.536, (227.024, 221.087, 267.931)), (' B 858  LEU HD23', ' B 959  LEU HD22', -0.529, (220.235, 245.221, 233.926)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.527, (184.273, 221.189, 229.002)), (' A 707  TYR  HB3', ' B 792  PRO  HG3', -0.527, (214.445, 251.182, 280.801)), (' C 902  MET  HE1', ' C1049  LEU HD13', -0.526, (250.207, 225.03, 276.912)), (' A 317  ASN  ND2', ' B 737  ASP  OD2', -0.526, (208.128, 241.383, 230.508)), (' B 302  THR HG21', ' B 315  THR HG22', -0.525, (242.106, 252.285, 230.89)), (' B 805  ILE HG22', ' B 818  ILE HD12', -0.523, (225.514, 255.099, 266.529)), (' A 909  ILE HD13', ' A1049  LEU HD21', -0.521, (222.28, 224.527, 280.927)), (' B1046  GLY  HA2', ' C 890  ALA  HA ', -0.519, (242.635, 243.843, 271.668)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.518, (255.116, 231.578, 168.059)), (' C 880  GLY  O  ', ' C 884  SER  OG ', -0.518, (252.706, 239.271, 272.371)), (' B1013  ILE HD13', ' C1012  LEU  HB3', -0.518, (232.295, 232.895, 239.31)), (' C 328  ARG  NH1', ' C 578  ASP  OD2', -0.517, (206.32, 193.394, 212.902)), (' A  39  PRO  HG3', ' A  51  THR HG21', -0.516, (198.662, 220.51, 221.03)), (' A 886  TRP  HZ3', ' A 905  ARG  HD3', -0.516, (228.824, 220.458, 279.682)), (' L  61  ARG  NH1', ' L  79  GLN  HB2', -0.515, (250.943, 220.596, 120.838)), (' B 908  GLY  O  ', ' B1038  LYS  NZ ', -0.513, (234.659, 236.989, 279.184)), (' C1105  THR HG22', ' C1112  PRO  HA ', -0.513, (241.173, 215.202, 294.654)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.512, (231.469, 251.227, 271.39)), (' A 280  ASN  OD1', ' A 283  GLY  N  ', -0.512, (195.778, 208.741, 228.005)), (' B  46  SER  N  ', ' B 279  TYR  O  ', -0.51, (224.245, 264.716, 227.224)), (' B1129  VAL  HB ', ' B1132  ILE  CD1', -0.509, (258.173, 227.647, 293.479)), (' A 736  VAL HG22', ' A 858  LEU HD22', -0.509, (223.305, 214.402, 232.835)), (' C 738  CYS  SG ', ' C 739  THR  N  ', -0.507, (240.724, 240.288, 223.96)), (' B  30  ASN  OD1', ' B  31  SER  N  ', -0.503, (247.022, 274.266, 220.935)), (' B 111  ASP  OD1', ' B 112  SER  N  ', -0.502, (243.778, 274.675, 185.151)), (' B 122  ASN  O  ', ' B 124  THR  N  ', -0.497, (226.674, 289.003, 198.639)), (' A 816  SER  N  ', ' A 819  GLU  OE1', -0.494, (216.698, 205.809, 264.775)), (' C1028  LYS  O  ', ' C1032  CYS  CB ', -0.493, (243.499, 230.461, 265.411)), (' B 770  ILE  O  ', ' B 774  GLN  HG2', -0.492, (218.473, 237.861, 245.914)), (' A 100  ILE HD13', ' A 263  ALA  HB2', -0.49, (167.384, 218.141, 214.446)), (' B 715  PRO  HD3', ' C 894  LEU HD13', -0.49, (248.603, 244.932, 280.697)), (' C 858  LEU HD23', ' C 959  LEU HD22', -0.489, (246.715, 230.451, 231.306)), (' C1053  PRO  O  ', ' C1054  GLN  NE2', -0.489, (254.461, 229.978, 262.284)), (' C 122  ASN  O  ', ' C 124  THR  N  ', -0.488, (273.597, 196.266, 195.508)), (' C 303  LEU HD21', ' C 313  TYR  CE2', -0.487, (243.45, 208.659, 238.531)), (' B 455  LEU HD21', ' H 100  GLY  HA3', -0.487, (246.879, 218.672, 149.132)), (' B 537  LYS  O  ', ' B 539  VAL HG23', -0.486, (262.943, 239.167, 214.191)), (' B 598  ILE HG23', ' B 664  ILE HG21', -0.484, (248.526, 253.838, 241.31)), (' A 117  LEU HD21', ' A 231  ILE HD13', -0.484, (188.213, 221.981, 201.042)), (' B 726  ILE HG12', ' B1061  VAL HG22', -0.482, (229.017, 249.756, 257.981)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.482, (234.195, 252.492, 279.132)), (' A 403  ARG  NH1', ' A 405  ASP  OD2', -0.48, (231.887, 234.099, 177.993)), (' A 898  PHE  HZ ', ' A1050  MET  HE1', -0.48, (220.741, 215.032, 278.692)), (' B 858  LEU HD21', ' B 962  LEU HD23', -0.479, (220.479, 243.707, 231.426)), (' C 756  TYR  OH ', ' C 994  ASP  OD1', -0.478, (231.168, 235.226, 215.276)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.478, (254.668, 212.844, 214.509)), (' A  46  SER  HA ', ' A 279  TYR  O  ', -0.476, (199.152, 211.826, 231.063)), (' A 905  ARG HH11', ' A1036  GLN  HB2', -0.476, (228.426, 220.947, 277.069)), (' B 100  ILE HG22', ' B 242  LEU  HB2', -0.474, (242.004, 288.275, 202.673)), (' B  52  GLN  N  ', ' B  52  GLN  OE1', -0.474, (235.12, 255.969, 216.748)), (' B 886  TRP  HB3', ' B1035  GLY  HA2', -0.471, (224.383, 238.314, 275.683)), (' A 804  GLN  NE2', ' F   1  NAG  O6 ', -0.47, (208.021, 208.303, 274.525)), (' C1043  CYS  HB3', ' C1048  HIS  CD2', -0.47, (243.422, 225.771, 268.719)), (' A 852  ALA  O  ', ' A 856  ASN  ND2', -0.47, (216.496, 209.833, 229.402)), (' B1028  LYS  O  ', ' B1032  CYS  HB2', -0.469, (228.205, 239.623, 267.23)), (' B  33  THR  OG1', ' B 219  GLY  O  ', -0.467, (238.579, 274.406, 223.883)), (' A 787  GLN  OE1', ' C 703  ASN  ND2', -0.466, (236.293, 203.378, 272.757)), (' A1129  VAL HG13', ' B 917  TYR  HB3', -0.466, (230.304, 251.117, 292.217)), (' B 778  THR HG22', ' B 865  LEU HD12', -0.465, (215.0, 241.831, 255.982)), (' B 276  LEU  HB3', ' B 289  VAL  CG2', -0.464, (236.785, 260.956, 226.246)), (' B1032  CYS  SG ', ' B1051  SER  OG ', -0.463, (229.594, 243.011, 269.007)), (' A 236  THR HG21', ' D   1  NAG  H5 ', -0.463, (187.751, 235.622, 201.088)), (' C  60  SER  HA ', ' C1301  NAG  H82', -0.462, (246.413, 189.747, 219.061)), (' B 431  GLY  HA2', ' B 515  PHE  CD2', -0.462, (249.775, 226.236, 180.457)), (' A 328  ARG  NH1', ' A 578  ASP  OD2', -0.461, (203.415, 264.732, 211.091)), (' C1016  ALA  HA ', ' C1019  ARG  NH1', -0.46, (235.241, 233.743, 246.319)), (' B1053  PRO  O  ', ' B1054  GLN  NE2', -0.459, (222.722, 250.659, 265.383)), (' B1028  LYS  O  ', ' B1032  CYS  HB3', -0.459, (227.774, 240.442, 267.046)), (' B 977  LEU HD11', ' B 993  ILE HG12', -0.458, (215.678, 239.538, 214.269)), (' B 905  ARG  HD2', ' B1049  LEU  O  ', -0.457, (229.704, 243.347, 276.505)), (' B 205  SER  HB3', ' B 226  LEU HD12', -0.457, (229.832, 276.511, 209.159)), (' A 766  ALA  O  ', ' A 770  ILE HG12', -0.457, (231.396, 218.791, 240.183)), (' H  18  LEU  HB3', ' H  82  MET  HE3', -0.456, (223.799, 233.745, 142.875)), (' C1081  ILE HD13', ' C1115  ILE HD13', -0.454, (233.028, 215.303, 300.739)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.453, (250.077, 218.113, 190.62)), (' C 734  THR HG21', ' C 959  LEU HD21', -0.452, (245.655, 231.914, 233.499)), (' A 902  MET  HE1', ' A1049  LEU HD13', -0.452, (220.469, 220.561, 280.707)), (' A  41  LYS  HD3', ' C 520  ALA  HB2', -0.452, (199.508, 211.535, 211.26)), (' B 895  GLN  N  ', ' B 895  GLN  OE1', -0.451, (214.412, 243.575, 283.296)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.451, (236.961, 246.389, 303.107)), (' B 324  GLU  N  ', ' B 324  GLU  OE1', -0.451, (261.437, 243.631, 210.029)), (' L  59  PRO  HG2', ' L  61  ARG  NH2', -0.449, (250.085, 218.393, 124.384)), (' C1028  LYS  O  ', ' C1032  CYS  HB2', -0.449, (242.773, 230.731, 265.127)), (' B  45  SER  HB2', ' B 281  GLU  HA ', -0.448, (220.618, 265.846, 227.231)), (' C1106  GLN  HG3', ' C1109  PHE  O  ', -0.448, (242.366, 217.704, 289.092)), (' B 403  ARG  NH2', ' B 405  ASP  OD2', -0.447, (251.899, 230.373, 153.835)), (' A 901  GLN  O  ', ' A 905  ARG  HG2', -0.447, (226.727, 218.514, 282.101)), (' C 759  PHE  CD2', ' C1001  LEU HD21', -0.445, (231.905, 237.775, 223.282)), (' B 730  SER  O  ', ' B1058  HIS  HB3', -0.445, (222.795, 245.191, 249.372)), (' L 120  PRO  HD3', ' L 132  VAL HG22', -0.443, (231.065, 261.295, 115.716)), (' C 731  MET  N  ', ' C 774  GLN  OE1', -0.442, (244.252, 232.842, 245.305)), (' C 676  THR  HA ', ' C 690  GLN  HA ', -0.441, (247.429, 189.32, 248.83)), (' C 620  VAL HG11', ' C 651  ILE HD11', -0.439, (230.841, 191.884, 234.179)), (' A 880  GLY  O  ', ' A 884  SER  OG ', -0.438, (230.682, 210.076, 275.77)), (' A 189  LEU  HB2', ' A 210  ILE HD13', -0.437, (175.484, 216.312, 222.507)), (' B 566  GLY  HA2', ' C  43  PHE  HB3', -0.435, (260.103, 220.323, 218.204)), (' B 222  ALA  HB2', ' B 285  ILE  HB ', -0.435, (229.991, 270.004, 221.205)), (' A 294  ASP  OD2', ' A 297  SER  OG ', -0.434, (192.301, 230.312, 234.05)), (' C 465  GLU  OE1', ' D   1  NAG  H81', -0.433, (195.406, 232.166, 198.103)), (' C 229  LEU  HB3', ' C 231  ILE HG23', -0.432, (256.044, 207.683, 195.997)), (' B 802  PHE  HD1', ' B 805  ILE HD11', -0.432, (224.447, 253.326, 272.593)), (' A 720  ILE HG13', ' A 923  ILE HG23', -0.432, (215.922, 219.722, 282.61)), (' C  45  SER  O  ', ' C  47  VAL HG23', -0.432, (257.712, 217.3, 226.868)), (' B 901  GLN  O  ', ' B 905  ARG  HG2', -0.431, (228.118, 243.854, 280.898)), (' A 825  LYS  HB2', ' A 945  LEU HD12', -0.429, (210.568, 214.224, 257.042)), (' L  61  ARG HH11', ' L  79  GLN  HB2', -0.427, (251.153, 220.754, 120.845)), (' C 403  ARG  NH1', ' C 405  ASP  OD2', -0.427, (211.926, 234.381, 179.55)), (' A1013  ILE HD13', ' B1012  LEU  HB3', -0.427, (225.255, 231.267, 240.476)), (' A 766  ALA  HB1', ' A1012  LEU HD11', -0.425, (231.63, 221.078, 238.137)), (' A 733  LYS  HE3', ' A 771  ALA  HB1', -0.423, (229.628, 211.319, 244.288)), (' L  48  ILE HG12', ' L  54  LEU  HA ', -0.423, (253.703, 219.305, 134.497)), (' B 296  LEU  HB2', ' B 608  VAL HG11', -0.423, (247.236, 260.627, 233.626)), (' C 749  CYS  HB2', ' C 977  LEU HD21', -0.42, (242.119, 236.539, 213.253)), (' A 864  LEU  HA ', ' C 667  GLY  HA2', -0.419, (229.814, 204.979, 248.681)), (' C 715  PRO  HA ', ' C1072  GLU  HA ', -0.419, (242.394, 209.582, 283.752)), (' B 709  ASN  ND2', ' C 796  ASP  OD2', -0.419, (265.355, 233.743, 283.099)), (' B 541  PHE  CZ ', ' B 587  ILE HD13', -0.419, (257.985, 230.934, 214.804)), (' C 555  SER  HB2', ' C 586  ASP  HB2', -0.418, (205.326, 198.654, 225.107)), (' L 166  GLN  HG3', ' L 173  TYR  CE2', -0.418, (245.375, 237.972, 117.018)), (' B 763  LEU HD22', ' B1008  VAL HG21', -0.417, (220.155, 234.106, 233.034)), (' C 201  PHE  HB2', ' C 231  ILE HD11', -0.417, (252.633, 205.692, 198.108)), (' L  63  SER  N  ', ' L  74  THR  O  ', -0.417, (257.291, 222.565, 129.008)), (' C 384  PRO  HA ', ' C 387  LEU  HG ', -0.417, (215.062, 211.951, 197.491)), (' A1028  LYS  O  ', ' A1032  CYS  HB2', -0.416, (227.202, 222.069, 267.627)), (' B 714  ILE HD12', ' B1096  VAL HG11', -0.416, (251.883, 243.19, 288.217)), (' B1081  ILE HD11', ' B1115  ILE HG21', -0.416, (252.192, 235.649, 298.96)), (' A 961  THR HG21', ' B 762  GLN  CD ', -0.416, (216.358, 224.519, 232.868)), (' A 770  ILE HD12', ' A1015  ALA  CB ', -0.416, (229.058, 221.034, 243.642)), (' L 145  LYS  HB3', ' L 197  THR  OG1', -0.415, (250.123, 254.38, 118.531)), (' A 611  LEU HD22', ' A 666  ILE HG23', -0.415, (203.276, 241.952, 244.839)), (' C 122  ASN  C  ', ' C 124  THR  H  ', -0.415, (272.63, 196.256, 195.476)), (' B1087  ALA  HB2', ' B1126  CYS  HB3', -0.413, (256.438, 226.862, 297.469)), (' A1106  GLN  HG3', ' A1109  PHE  O  ', -0.413, (220.119, 231.909, 291.346)), (' A1006  THR  O  ', ' A1010  GLN  HG2', -0.412, (223.67, 225.784, 234.993)), (' C 358  ILE  HB ', ' C 395  VAL  HB ', -0.411, (202.241, 210.672, 196.216)), (' B 388  ASN  O  ', ' B 526  GLY  HA3', -0.411, (256.509, 228.846, 190.866)), (' B 905  ARG HH11', ' B1036  GLN  HB2', -0.411, (228.6, 240.637, 276.25)), (' A 676  THR  HA ', ' A 690  GLN  HA ', -0.411, (187.051, 234.539, 254.239)), (' B 727  LEU HD11', ' B1028  LYS  HD2', -0.41, (230.192, 241.204, 260.571)), (' A 796  ASP  N  ', ' A 796  ASP  OD1', -0.409, (220.353, 202.853, 283.51)), (' C 328  ARG  NH2', ' C 580  GLN  OE1', -0.409, (206.202, 192.174, 208.972)), (' A1031  GLU  HG2', ' C1040  VAL  O  ', -0.408, (234.121, 223.266, 267.916)), (' C  46  SER  HA ', ' C 279  TYR  O  ', -0.406, (259.47, 213.31, 227.579)), (' A 968  SER  HB3', ' B 755  GLN  O  ', -0.406, (215.04, 224.494, 220.839)), (' C 727  LEU HD11', ' C1028  LYS  HD2', -0.405, (242.523, 227.495, 259.428)), (' H  10  ASP  OD1', ' H  11  LEU  N  ', -0.404, (219.65, 235.228, 135.559)), (' C1032  CYS  SG ', ' C1051  SER  OG ', -0.404, (245.165, 227.868, 267.118)), (' H  33  TYR  CB ', ' H  98  ASP  HB3', -0.403, (240.861, 221.004, 147.748)), (' A 934  ILE  HA ', ' A 934  ILE HD13', -0.403, (209.309, 218.479, 268.591)), (' B 802  PHE  CD1', ' B 805  ILE HD11', -0.403, (224.384, 253.127, 272.237)), (' A 106  PHE  HB3', ' A 235  ILE HD13', -0.402, (185.046, 226.628, 202.459)), (' B 676  THR  HA ', ' B 690  GLN  HA ', -0.402, (255.216, 266.734, 246.53)), (' B 231  ILE HD12', ' B 233  ILE HD12', -0.402, (233.707, 268.746, 194.068)), (' H 103  ASP  N  ', ' H 103  ASP  OD1', -0.401, (246.512, 222.162, 143.893)), (' A 195  LYS  HD2', ' A 202  LYS  HD2', -0.401, (194.921, 221.789, 210.617)), (' L  61  ARG  NH2', ' L  62  PHE  HE2', -0.401, (250.255, 220.54, 125.014)), (' A 894  LEU HD13', ' C 715  PRO  HD3', -0.401, (239.082, 212.305, 282.669)), (' C 770  ILE  O  ', ' C 774  GLN  HG2', -0.4, (242.32, 236.879, 242.749)), (' L   2  ILE HG12', ' L  27  GLN  HG2', -0.4, (256.136, 236.583, 149.075))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
