# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  87 ', 'LEU', 0.10076722845319686, (18.016999999999996, -40.647999999999996, 17.679)), ('A', ' 130 ', 'MET', 0.0, (14.754999999999994, -22.309, 4.231000000000001)), ('A', ' 216 ', 'ASP', 0.23483065308855716, (0.5160000000000005, -10.437999999999997, -14.980000000000002)), ('A', ' 279 ', 'ARG', 0.12839602802119918, (-1.8279999999999985, -3.537, -7.175))]
data['cbeta'] = [('A', ' 214 ', 'ASN', ' ', 0.27045288832243547, (0.5040000000000009, -16.658, -14.937))]
data['probe'] = [(' A 401 AZL7  C2 ', ' A 406  DMS  H12', -1.317, (7.429, -27.968, 18.913)), (' A 401 BZL7  C2 ', ' A 406  DMS  H12', -1.176, (8.998, -26.899, 19.167)), (' A 401 AZL7  C2 ', ' A 406  DMS  C1 ', -1.168, (8.125, -27.393, 18.171)), (' A 401 BZL7  C2 ', ' A 406  DMS  C1 ', -1.091, (7.985, -27.386, 18.268)), (' A 165 BMET  HG2', ' A 759  HOH  O  ', -1.063, (15.056, -27.167, 20.471)), (' A 401 AZL7  C9 ', ' A 767  HOH  O  ', -1.045, (1.81, -32.762, 21.477)), (' A 163  HIS  NE2', ' A 406  DMS  H11', -1.006, (8.127, -27.091, 15.599)), (' A 401 BZL7  C16', ' A 501  HOH  O  ', -0.983, (11.517, -28.766, 21.108)), (' A 401 BZL7  C9 ', ' A 767  HOH  O  ', -0.949, (1.616, -32.683, 21.6)), (' A 401 AZL7  C1 ', ' A 501  HOH  O  ', -0.948, (10.955, -27.711, 20.265)), (' A 401 AZL7  C2 ', ' A 406  DMS  S  ', -0.857, (6.548, -27.313, 19.254)), (' A 401 BZL7  C15', ' A 501  HOH  O  ', -0.855, (11.869, -28.054, 20.992)), (' A 401 AZL7  C2 ', ' A 406  DMS  O  ', -0.843, (7.678, -26.436, 19.432)), (' A 166 BGLU  HB2', ' A 406  DMS  H22', -0.83, (7.982, -24.251, 17.513)), (' A 401 BZL7  C1 ', ' A 672  HOH  O  ', -0.817, (10.694, -25.99, 20.795)), (' A 166 AGLU  HB2', ' A 406  DMS  H22', -0.815, (7.704, -23.767, 17.029)), (' A  86 BVAL HG22', ' A 162 BMET  HE1', -0.809, (16.303, -36.241, 14.085)), (' A 401 AZL7  C1 ', ' A 672  HOH  O  ', -0.778, (10.913, -26.23, 20.836)), (' A 401 BZL7  F1 ', ' A 759  HOH  O  ', -0.76, (14.097, -27.271, 20.846)), (' A 401 BZL7  C2 ', ' A 406  DMS  O  ', -0.75, (6.782, -26.804, 19.355)), (' A 401 BZL7  C2 ', ' A 406  DMS  S  ', -0.735, (7.193, -26.903, 18.725)), (' A  17  MET  O  ', ' A 405  DMS  H11', -0.726, (4.282, -44.083, 9.403)), (' A 165 BMET  CG ', ' A 759  HOH  O  ', -0.723, (15.546, -26.981, 20.236)), (' A 198  THR HG22', ' A 238 AASN  OD1', -0.706, (19.292, -8.918, 3.989)), (' A 401 BZL7  C1 ', ' A 501  HOH  O  ', -0.678, (10.521, -27.697, 20.469)), (' A 401 AZL7  O4 ', ' A 501  HOH  O  ', -0.663, (10.403, -28.788, 20.438)), (' A 401 BZL7  O4 ', ' A 501  HOH  O  ', -0.658, (10.393, -28.798, 20.468)), (' A 140  PHE  O  ', ' A 406  DMS  H23', -0.656, (4.529, -24.844, 16.42)), (' A 306  GLN  CG ', ' A 306  GLN  O  ', -0.656, (6.895, -44.239, -9.694)), (' A 217  ARG  NH1', ' A 511  HOH  O  ', -0.621, (-1.564, -6.42, -23.447)), (' A  86 BVAL HG22', ' A 162 BMET  CE ', -0.618, (15.739, -35.92, 13.943)), (' A 165 BMET  HE1', ' A 192  GLN  NE2', -0.616, (16.98, -23.224, 20.451)), (' A 140  PHE  HB2', ' A 406  DMS  H21', -0.609, (6.106, -25.103, 15.494)), (' A  39  PRO  HG3', ' A 162 BMET  HE3', -0.603, (13.69, -34.478, 14.829)), (' A 306  GLN  HG3', ' A 306  GLN  O  ', -0.593, (6.087, -44.655, -9.179)), (' A 110  GLN  HG3', ' A 598  HOH  O  ', -0.593, (19.264, -26.436, -2.239)), (' A 106  ILE HD11', ' A 130 BMET  HG3', -0.586, (15.841, -25.585, 4.24)), (' A 140  PHE  O  ', ' A 406  DMS  C2 ', -0.582, (5.213, -25.096, 16.223)), (' A 401 BZL7  C13', ' A 401 BZL7  F2 ', -0.561, (10.358, -26.389, 25.25)), (' A 298  ARG  HD2', ' A 404  DMS  O  ', -0.534, (7.061, -28.256, -8.238)), (' A 279 BARG  HG3', ' A 720  HOH  O  ', -0.533, (-3.03, -5.372, -9.848)), (' A 142  ASN  HB3', ' A 401 AZL7  C8 ', -0.532, (2.872, -30.315, 22.933)), (' A 165 BMET  SD ', ' A 186  VAL  O  ', -0.528, (17.327, -25.847, 19.659)), (' A   6  MET  O  ', ' A 127 BGLN  HG3', -0.512, (5.01, -26.219, -3.284)), (' A 165 BMET  HE1', ' A 192  GLN HE22', -0.499, (17.111, -23.82, 20.708)), (' A 298  ARG  HG3', ' A 303  VAL  HB ', -0.489, (7.78, -30.681, -12.448)), (' A 240  GLU  OE1', ' A 502  HOH  O  ', -0.472, (19.177, -16.749, 0.361)), (' A 218  TRP  CE2', ' A 279 BARG  HG2', -0.466, (0.281, -4.48, -10.621)), (' A 142  ASN  ND2', ' A 401 BZL7  O1 ', -0.465, (5.207, -28.021, 21.813)), (' A 408  DMS  H11', ' A 689  HOH  O  ', -0.459, (21.175, -41.252, 1.965)), (' A 130 BMET  HB3', ' A 130 BMET  HE3', -0.443, (17.489, -22.705, 4.062)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.44, (20.545, -34.661, 19.119)), (' A 401 BZL7  C13', ' A 745  HOH  O  ', -0.44, (11.126, -25.276, 24.914)), (' A  45  THR  O  ', ' A  48  ASP  N  ', -0.439, (13.319, -31.618, 31.258)), (' A 288  GLU  OE2', ' A 504  HOH  O  ', -0.437, (6.004, -15.743, -1.487)), (' A 142  ASN  HB3', ' A 401 BZL7  C8 ', -0.436, (2.894, -29.827, 22.872)), (' A  15  GLY  O  ', ' A 405  DMS  H12', -0.423, (4.63, -45.6, 7.4)), (' A  49  MET  HE2', ' A 401 BZL7  C16', -0.42, (12.646, -29.236, 23.563)), (' A 404  DMS  H12', ' A 520  HOH  O  ', -0.414, (8.058, -27.483, -5.179)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.412, (9.046, -31.009, 3.812)), (' A   7  ALA  HA ', ' A 127 BGLN  HG2', -0.407, (4.756, -27.819, -1.64)), (' A 406  DMS  O  ', ' A 505  HOH  O  ', -0.403, (5.749, -25.093, 20.244)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.403, (15.27, -18.572, -0.032))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
