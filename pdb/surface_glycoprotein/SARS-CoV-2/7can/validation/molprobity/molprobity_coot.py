# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 481 ', 'ASN', 0.006337428381127005, (-48.839879999999994, 31.48656, -22.91912))]
data['omega'] = []
data['rota'] = [('B', ' 430 ', 'THR', 0.03854368942350531, (-33.36147999999999, 40.82359, -59.7491)), ('B', ' 484 ', 'GLU', 0.04277364519923278, (-45.00271, 26.631089999999993, -20.13533))]
data['cbeta'] = []
data['probe'] = [(' A  91  THR HG22', ' A 118  THR  HA ', -0.82, (-41.694, 2.379, -12.559)), (' A  88  PRO  HA ', ' A 119  VAL HG13', -0.744, (-45.45, 4.643, -10.205)), (' A  91  THR HG23', ' A 119  VAL HG12', -0.714, (-43.541, 4.638, -11.404)), (' A   4  LEU HD11', ' A  98  VAL HG23', -0.695, (-28.518, 14.94, -27.165)), (' B 375  SER  HB3', ' B 436  TRP  HA ', -0.68, (-17.019, 31.771, -50.962)), (' A  91  THR  CG2', ' A 119  VAL  H  ', -0.658, (-42.188, 2.456, -10.923)), (' A  59  ARG  NH2', ' B 488  CYS  O  ', -0.63, (-40.855, 26.696, -25.133)), (' B 412  PRO  HG3', ' B 429  PHE  HB3', -0.578, (-34.481, 35.864, -57.235)), (' A  91  THR HG22', ' A 119  VAL  H  ', -0.567, (-41.95, 2.766, -11.452)), (' B 364  ASP  O  ', ' B 367  VAL HG12', -0.559, (-16.267, 46.962, -59.358)), (' A  12  VAL  O  ', ' A 119  VAL  HA ', -0.553, (-40.918, 3.138, -6.91)), (' B 458  LYS  HD2', ' B 459  SER  N  ', -0.55, (-46.673, 32.418, -39.407)), (' B 359  SER  HA ', ' B 524  VAL HG13', -0.542, (-26.916, 54.732, -55.802)), (' A   2  VAL HG11', ' A 104  LEU HD13', -0.54, (-23.423, 15.487, -31.114)), (' A  83  MET  HB3', ' A  86  LEU HD21', -0.537, (-39.585, 11.58, -10.439)), (' B 461  LEU HD22', ' B 465  GLU  HB3', -0.507, (-40.49, 37.872, -43.587)), (' A  28  PRO  O  ', ' A  31  VAL HG22', -0.501, (-23.877, 23.445, -25.99)), (' B 472  ILE  H  ', ' B 472  ILE HD12', -0.483, (-42.671, 33.367, -25.871)), (' A  97  ASN  OD1', ' A 106  TYR  OH ', -0.477, (-30.695, 13.229, -29.601)), (' B 502  GLY  O  ', ' B 506  GLN  HG3', -0.458, (-17.453, 22.902, -42.829)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.452, (-36.683, 59.676, -59.26)), (' B 395  VAL HG22', ' B 515  PHE  HD1', -0.449, (-28.671, 47.451, -57.162)), (' B 484 BGLU  HG3', ' B 484  GLU  O  ', -0.449, (-43.967, 25.014, -18.827)), (' A  40  ALA  HB3', ' A  43  LYS  HD3', -0.444, (-47.06, 3.656, -20.874)), (' B 339  GLY  O  ', ' B 343  ASN  HB2', -0.443, (-14.933, 46.188, -46.325)), (' A  27  PHE  CZ ', ' A  98  VAL HG21', -0.442, (-26.392, 16.804, -26.829)), (' A  14  ALA  HA ', ' A  86  LEU  O  ', -0.422, (-44.867, 7.496, -5.508)), (' B 354  ASN  HA ', ' B 354  ASN HD22', -0.422, (-29.094, 44.49, -40.451)), (' B 372  ALA  CB ', ' B 604  GOL  H2 ', -0.415, (-12.454, 38.515, -50.202)), (' B 438  SER  HB3', ' B 509  ARG  HG3', -0.41, (-17.36, 34.337, -43.701)), (' B 473  TYR  CE2', ' B 475  ALA  HB2', -0.405, (-44.061, 24.933, -32.706)), (' B 346  ARG  NH1', ' B 354  ASN  OD1', -0.405, (-25.322, 44.446, -38.323)), (' A  18  LEU  HA ', ' A  18  LEU HD23', -0.403, (-33.827, 9.268, -6.781))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
