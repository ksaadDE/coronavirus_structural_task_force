# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 150 ', 'LYS', 0.04314504290309966, (131.51299999999998, 168.82599999999994, 231.987)), ('C', ' 150 ', 'LYS', 0.047072385287790994, (246.64500000000007, 140.25299999999996, 236.16799999999998)), ('F', '  33 ', 'VAL', 0.0009838850566996026, (146.60099999999994, 192.87399999999994, 213.36)), ('H', '  33 ', 'VAL', 0.0005621637459563547, (227.55499999999998, 227.242, 212.418)), ('J', '  33 ', 'VAL', 0.0023768183431351754, (216.71999999999997, 140.00899999999996, 214.609))]
data['omega'] = [('A', ' 362 ', 'VAL', None, (205.007, 148.59399999999994, 239.13)), ('A', ' 535 ', 'LYS', None, (199.54799999999994, 144.88599999999997, 214.288)), ('B', ' 362 ', 'VAL', None, (164.97899999999998, 196.88499999999993, 238.592)), ('B', ' 532 ', 'ASN', None, (160.06699999999992, 208.98599999999993, 225.689)), ('C', ' 362 ', 'VAL', None, (223.11100000000005, 211.0649999999999, 239.266)), ('C', ' 532 ', 'ASN', None, (234.57400000000004, 207.57199999999995, 225.62299999999993)), ('E', ' 154 ', 'PRO', None, (139.986, 242.46199999999996, 212.47899999999998)), ('E', ' 156 ', 'PRO', None, (138.65699999999995, 237.0929999999999, 216.115)), ('F', '   8 ', 'PRO', None, (128.0329999999999, 209.04799999999997, 205.95499999999998)), ('F', '  81 ', 'PRO', None, (124.03999999999996, 204.61899999999994, 223.95799999999997)), ('F', '  99 ', 'PRO', None, (152.45099999999988, 211.344, 203.97099999999998)), ('F', ' 145 ', 'PRO', None, (113.01999999999995, 222.24999999999994, 213.43699999999995)), ('G', ' 154 ', 'PRO', None, (273.644, 207.831, 213.643)), ('G', ' 156 ', 'PRO', None, (269.537, 211.71399999999997, 217.065)), ('H', '   8 ', 'PRO', None, (251.24300000000008, 234.5229999999999, 205.517)), ('H', '  81 ', 'PRO', None, (248.80000000000007, 241.66899999999998, 222.72)), ('H', '  99 ', 'PRO', None, (240.248, 212.55399999999997, 204.67599999999996)), ('H', ' 145 ', 'PRO', None, (269.726, 240.9699999999999, 212.023)), ('I', ' 154 ', 'PRO', None, (176.598, 109.31899999999996, 212.597)), ('I', ' 156 ', 'PRO', None, (181.95299999999995, 110.83799999999995, 216.151)), ('J', '   8 ', 'PRO', None, (211.35899999999995, 115.47800000000001, 206.424)), ('J', '  81 ', 'PRO', None, (218.35299999999998, 114.19599999999998, 224.01699999999997)), ('J', '  99 ', 'PRO', None, (197.52499999999995, 135.9, 205.18499999999997)), ('J', ' 145 ', 'PRO', None, (207.03999999999994, 96.19999999999999, 215.21599999999995))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' C 331  ASN  OD1', ' C 529  LYS  NZ ', -0.939, (231.807, 215.2, 232.412)), (' J 112  ARG  NH1', ' J 174  ASP  O  ', -0.886, (206.465, 101.474, 223.453)), (' I   6  GLN  NE2', ' I  96  CYS  SG ', -0.883, (185.805, 126.251, 219.67)), (' H 112  ARG  NH1', ' H 174  ASP  O  ', -0.863, (266.916, 239.662, 221.039)), (' C 245  HIS  N  ', ' C 259  THR  O  ', -0.84, (252.955, 154.38, 235.226)), (' F 112  ARG  NH1', ' F 174  ASP  O  ', -0.829, (116.843, 220.631, 222.149)), (' A 439  ASN  O  ', ' A 443  SER  OG ', -0.821, (199.787, 153.33, 274.624)), (' A 245  HIS  N  ', ' A 259  THR  O  ', -0.788, (140.027, 155.195, 231.941)), (' E   6  GLN  NE2', ' E  96  CYS  SG ', -0.782, (149.815, 225.465, 218.052)), (' E 103  TYR  OH ', ' F  34  TYR  O  ', -0.753, (148.916, 198.53, 213.267)), (' G   6  GLN  NE2', ' G  96  CYS  SG ', -0.74, (253.49, 207.874, 219.015)), (' B 537  LYS  NZ ', ' E  55  ASP  OD2', -0.725, (167.737, 213.9, 214.193)), (' F   6  GLN  NE2', ' F  92  CYS  SG ', -0.72, (136.566, 210.226, 208.974)), (' J   6  GLN  NE2', ' J  92  CYS  SG ', -0.717, (207.085, 122.585, 209.781)), (' A 742  ILE  O  ', ' A1000  ARG  NH1', -0.714, (183.007, 195.016, 212.519)), (' C 742  ILE  O  ', ' C1000  ARG  NH1', -0.711, (196.635, 170.663, 213.333)), (' B 245  HIS  N  ', ' B 259  THR  O  ', -0.71, (196.761, 252.578, 231.985)), (' G  57  GLU  OE2', ' G  59  ARG  NH2', -0.706, (235.554, 201.89, 208.872)), (' H   6  GLN  NE2', ' H  92  CYS  SG ', -0.701, (247.38, 227.301, 209.144)), (' A 813  SER  OG ', ' A 868  GLU  OE2', -0.697, (167.74, 199.471, 176.077)), (' A 333  THR HG22', ' A 334  ASN  H  ', -0.695, (209.112, 141.809, 239.689)), (' B 454  ARG  NH1', ' B 469  SER  O  ', -0.693, (175.291, 165.754, 248.647)), (' C 454  ARG  NH1', ' C 469  SER  O  ', -0.688, (190.574, 216.434, 248.958)), (' C 537  LYS  NZ ', ' G  55  ASP  OD2', -0.659, (235.331, 199.052, 213.582)), (' B 969  ASN  OD1', ' B 975  SER  N  ', -0.652, (205.211, 201.122, 217.888)), (' C 334  ASN  OD1', ' C 335  LEU  N  ', -0.646, (224.546, 216.513, 244.462)), (' J 189  GLU  OE1', ' J 192  ARG  NH2', -0.642, (177.077, 80.39, 204.304)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.641, (235.916, 163.011, 209.309)), (' B 490  PHE  O  ', ' B 493  GLN  NE2', -0.641, (184.145, 164.383, 252.268)), (' C 813  SER  OG ', ' C 868  GLU  OE2', -0.639, (200.548, 154.205, 176.55)), (' E  40  ARG  NH2', ' E  43  GLN  OE1', -0.634, (138.669, 224.263, 201.022)), (' A  34  ARG  NE ', ' A 191  GLU  OE2', -0.631, (154.716, 163.848, 214.435)), (' A 328  ARG  NH2', ' A 578  ASP  OD1', -0.631, (207.585, 146.058, 224.015)), (' B 334  ASN  OD1', ' B 335  LEU  N  ', -0.624, (160.738, 195.808, 244.69)), (' A 853  GLN  NE2', ' A 960  ASN  OD1', -0.623, (175.378, 188.863, 198.309)), (' A 784  GLN  NE2', ' A1030  SER  OG ', -0.622, (189.611, 196.495, 166.972)), (' A 661  GLU  O  ', ' A 695  TYR  OH ', -0.619, (179.405, 160.141, 179.445)), (' B 742  ILE  O  ', ' B1000  ARG  NH1', -0.618, (210.68, 195.145, 212.988)), (' A1031  GLU  OE2', ' B1039  ARG  NE ', -0.616, (195.848, 189.356, 164.934)), (' A 454  ARG  NH1', ' A 469  SER  O  ', -0.614, (221.766, 162.288, 265.199)), (' B 287  ASP  OD1', ' B 288  ALA  N  ', -0.614, (200.067, 224.926, 205.259)), (' A 287  ASP  OD1', ' A 288  ALA  N  ', -0.613, (162.203, 170.769, 205.212)), (' B1135  ASN  OD1', ' B1136  THR  N  ', -0.608, (181.93, 197.309, 126.468)), (' A1039  ARG  NE ', ' C1031  GLU  OE2', -0.608, (195.92, 183.527, 165.134)), (' C 287  ASP  OD1', ' C 288  ALA  N  ', -0.607, (228.89, 164.634, 205.879)), (' A 536  ASN  OD1', ' A 537  LYS  N  ', -0.607, (192.879, 146.088, 214.983)), (' C 969  ASN  OD1', ' C 975  SER  N  ', -0.605, (205.093, 173.125, 218.195)), (' B 661  GLU  O  ', ' B 695  TYR  OH ', -0.599, (183.003, 215.286, 178.976)), (' C1135  ASN  OD1', ' C1136  THR  N  ', -0.592, (215.537, 194.394, 126.85)), (' A1135  ASN  OD1', ' A1136  THR  N  ', -0.589, (196.079, 166.851, 126.96)), (' A 362  VAL HG23', ' A 524  VAL HG11', -0.585, (203.969, 147.735, 236.971)), (' A 360  ASN  N  ', ' A 393  THR  O  ', -0.578, (211.458, 149.197, 240.703)), (' B 280  ASN  OD1', ' B 284  THR  N  ', -0.576, (211.384, 224.817, 207.832)), (' B  14  GLN  N  ', ' B 255  SER  HG ', -0.574, (193.022, 249.674, 243.616)), (' A 331  ASN  O  ', ' A 523  THR  O  ', -0.573, (208.509, 144.924, 233.705)), (' G  61  ASN  OD1', ' G  62  GLN  N  ', -0.568, (246.535, 209.541, 201.292)), (' H 152  TRP  HE1', ' H 181  SER  HG ', -0.567, (284.059, 229.064, 209.504)), (' B 457  ARG  NH1', ' B 459  SER  OG ', -0.564, (178.413, 166.573, 237.858)), (' B 362  VAL HG12', ' B 363  ALA  O  ', -0.563, (166.373, 198.607, 242.262)), (' B 453  TYR  O  ', ' B 493  GLN  N  ', -0.563, (180.981, 168.029, 252.775)), (' B 951  VAL  O  ', ' B 955  ASN  ND2', -0.559, (206.808, 200.055, 189.093)), (' J  54  LEU  O  ', ' J  54  LEU HD23', -0.556, (213.961, 133.153, 217.623)), (' A 532  ASN  O  ', ' I 101  TYR  OH ', -0.555, (200.331, 141.945, 218.683)), (' I  40  ARG  NH2', ' I  43  GLN  OE1', -0.555, (193.571, 117.775, 202.134)), (' C 453  TYR  O  ', ' C 493  GLN  N  ', -0.552, (190.339, 211.577, 254.239)), (' A 749  CYS  O  ', ' A 753  LEU  N  ', -0.552, (191.436, 200.521, 214.986)), (' A 280  ASN  OD1', ' A 284  THR  N  ', -0.55, (157.029, 180.495, 207.967)), (' A 905  ARG  NH1', ' A1049  LEU  O  ', -0.549, (183.88, 189.032, 156.62)), (' C 280  ASN  OD1', ' C 284  THR  N  ', -0.545, (223.024, 155.006, 207.916)), (' C 362  VAL HG12', ' C 363  ALA  O  ', -0.544, (224.142, 209.71, 243.68)), (' A 328  ARG  NH2', ' I 103  TYR  OH ', -0.543, (206.917, 144.923, 224.118)), (' H  54  LEU  O  ', ' H  54  LEU HD23', -0.542, (234.806, 227.294, 217.04)), (' E  61  ASN  OD1', ' E  62  GLN  N  ', -0.539, (152.871, 218.279, 201.05)), (' B  34  ARG  NE ', ' B 191  GLU  OE2', -0.538, (198.135, 235.391, 214.752)), (' F  54  LEU  O  ', ' F  54  LEU HD23', -0.536, (143.257, 199.071, 217.854)), (' A 334  ASN  OD1', ' A 335  LEU  N  ', -0.532, (206.127, 141.333, 242.848)), (' A 951  VAL  O  ', ' A 955  ASN  ND2', -0.521, (180.95, 188.31, 188.887)), (' A 457  ARG  NH1', ' A 459  SER  OG ', -0.52, (221.801, 169.352, 256.88)), (' A 551  VAL  N  ', ' A 588  THR  O  ', -0.518, (198.417, 153.262, 211.102)), (' A 453  TYR  O  ', ' A 493  GLN  N  ', -0.517, (216.274, 162.952, 269.713)), (' A 969  ASN  OD1', ' A 975  SER  N  ', -0.516, (180.818, 186.912, 218.037)), (' B1031  GLU  OE2', ' C1039  ARG  NE ', -0.513, (200.788, 186.484, 165.15)), (' C1072  GLU  N  ', ' C1072  GLU  OE1', -0.51, (222.907, 183.488, 150.671)), (' C  96  GLU  HG2', ' C 263  ALA  HB1', -0.509, (247.02, 157.041, 225.014)), (' C 474  GLN  NE2', ' C 476  GLY  O  ', -0.508, (181.47, 210.712, 240.398)), (' A 361  CYS  SG ', ' A 362  VAL  HA ', -0.508, (204.016, 149.917, 240.353)), (' C  81  ASN  ND2', ' C 240  THR  O  ', -0.507, (245.539, 163.836, 234.905)), (' I  61  ASN  OD1', ' I  62  GLN  N  ', -0.505, (191.793, 132.82, 202.775)), (' A1072  GLU  N  ', ' A1072  GLU  OE1', -0.505, (182.142, 165.788, 150.033)), (' A 333  THR HG22', ' A 334  ASN  N  ', -0.504, (208.837, 142.25, 239.964)), (' B1072  GLU  N  ', ' B1072  GLU  OE1', -0.503, (187.173, 209.874, 150.05)), (' C 457  ARG  NH1', ' C 459  SER  OG ', -0.5, (190.469, 211.907, 239.37)), (' A 332  ILE HG22', ' A 333  THR  N  ', -0.498, (205.965, 142.259, 236.542)), (' A  96  GLU  HG2', ' A 263  ALA  HB1', -0.497, (146.171, 158.548, 223.044)), (' C  27  ALA  O  ', ' C  64  TRP  N  ', -0.49, (248.181, 170.359, 221.113)), (' C 108  THR  OG1', ' C 234  ASN  O  ', -0.489, (230.835, 173.284, 239.196)), (' J  93  HIS  ND1', ' J 101  ALA  O  ', -0.484, (200.725, 129.065, 210.736)), (' A 535  LYS  O  ', ' A 536  ASN  HB2', -0.484, (195.961, 144.639, 216.404)), (' B 725  GLU  OE1', ' B1064  HIS  NE2', -0.482, (202.232, 199.356, 167.959)), (' A 533  LEU  O  ', ' A 535  LYS  HB2', -0.479, (200.398, 143.364, 216.475)), (' B 758  SER  O  ', ' B 761  THR  N  ', -0.477, (210.248, 181.313, 204.365)), (' A 124  THR  HG1', ' A 125  ASN  H  ', -0.475, (144.185, 174.37, 233.291)), (' A1019  ARG  NH2', ' B1017  GLU  OE2', -0.473, (195.644, 192.138, 185.917)), (' A 362  VAL HG23', ' A 524  VAL  CG1', -0.472, (203.656, 147.792, 236.534)), (' B 474  GLN  NE2', ' B 476  GLY  O  ', -0.472, (182.482, 158.281, 240.041)), (' A 291  CYS  O  ', ' A 297  SER  OG ', -0.468, (172.024, 163.71, 204.254)), (' J   2  ILE  O  ', ' J  94  HIS  NE2', -0.465, (203.013, 131.059, 205.246)), (' A 537  LYS  O  ', ' A 539  VAL HG13', -0.464, (193.949, 149.324, 215.892)), (' C 361  CYS  SG ', ' C 363  ALA  N  ', -0.464, (221.249, 209.524, 241.291)), (' A 328  ARG HH22', ' I 103  TYR  HH ', -0.461, (206.81, 144.514, 224.947)), (' A 361  CYS  HA ', ' A 362  VAL  C  ', -0.461, (205.303, 148.738, 241.41)), (' B 815  ARG  NE ', ' B 820  ASP  OD1', -0.461, (219.649, 211.072, 173.874)), (' A 362  VAL HG12', ' A 363  ALA  O  ', -0.456, (201.426, 146.602, 241.956)), (' C 361  CYS  HA ', ' C 362  VAL  C  ', -0.456, (221.983, 211.381, 241.25)), (' F  41  GLN  O  ', ' F  49  LYS  N  ', -0.453, (138.189, 216.661, 219.686)), (' C 361  CYS  SG ', ' C 362  VAL  HA ', -0.452, (221.599, 209.322, 240.174)), (' C 124  THR  HG1', ' C 125  ASN  H  ', -0.452, (234.266, 147.616, 235.75)), (' A 737  ASP  OD1', ' A 738  CYS  N  ', -0.452, (186.471, 201.85, 205.271)), (' C 490  PHE  O  ', ' C 493  GLN  NE2', -0.45, (185.877, 210.198, 254.049)), (' A 332  ILE  CG2', ' A 333  THR  N  ', -0.45, (206.273, 143.067, 236.499)), (' C 738  CYS  SG ', ' C 764  ASN  ND2', -0.45, (188.429, 173.298, 203.811)), (' B1011  GLN  O  ', ' B1015  ALA  N  ', -0.448, (203.518, 191.148, 190.059)), (' B  59  PHE  CG ', ' B  59  PHE  O  ', -0.447, (185.984, 230.029, 208.907)), (' A1011  GLN  O  ', ' A1015  ALA  N  ', -0.445, (190.204, 190.078, 189.885)), (' C  40  ASP  OD1', ' C  41  LYS  N  ', -0.445, (217.207, 161.312, 220.323)), (' B 361  CYS  HA ', ' B 362  VAL  C  ', -0.442, (165.662, 195.415, 240.185)), (' A 916  LEU  O  ', ' A 920  GLN  N  ', -0.441, (175.297, 183.956, 144.523)), (' B1091  ARG  NE ', ' B1120  THR  O  ', -0.44, (190.638, 187.164, 133.143)), (' A  27  ALA  O  ', ' A  64  TRP  N  ', -0.44, (157.371, 150.7, 219.835)), (' H 169  ASP  OD1', ' H 170  GLN  N  ', -0.438, (264.991, 230.822, 215.777)), (' B 361  CYS  SG ', ' B 362  VAL  HA ', -0.438, (167.098, 196.71, 239.125)), (' A 954  GLN  O  ', ' A1014  ARG  NH1', -0.437, (183.218, 185.424, 192.945)), (' G  65  LYS  O  ', ' G  66  ASP  HB2', -0.436, (249.915, 201.741, 199.724)), (' A 362  VAL  CG2', ' A 524  VAL HG11', -0.436, (203.235, 147.58, 237.419)), (' H 189  GLU  OE1', ' H 192  ARG  NH2', -0.433, (298.551, 222.169, 204.397)), (' A 725  GLU  OE1', ' A1064  HIS  NE2', -0.433, (183.889, 184.097, 167.983)), (' C 919  ASN  O  ', ' C 922  LEU  N  ', -0.432, (214.882, 166.928, 147.246)), (' I  76  SER  O  ', ' I  77  THR  OG1', -0.43, (180.9, 133.97, 228.428)), (' I   6  GLN  OE1', ' I 113  GLY  N  ', -0.43, (186.038, 121.227, 220.378)), (' F 169  ASP  OD1', ' F 170  GLN  N  ', -0.429, (124.886, 223.727, 216.066)), (' C  86  PHE  CG ', ' C  86  PHE  O  ', -0.428, (232.629, 172.062, 230.611)), (' A 351  TYR  HE2', ' A 452  LEU  HB2', -0.427, (216.047, 157.392, 268.671)), (' E  65  LYS  O  ', ' E  66  ASP  HB2', -0.425, (157.072, 225.075, 199.269)), (' A 882  ILE  O  ', ' A 901  GLN  NE2', -0.424, (179.202, 196.747, 153.273)), (' A  98  SER  O  ', ' A 179  LEU  HA ', -0.424, (140.252, 163.011, 226.047)), (' A 331  ASN  OD1', ' A 529  LYS  NZ ', -0.423, (205.671, 140.892, 230.137)), (' B 986  PRO  N  ', ' B 987  PRO  HD2', -0.422, (211.746, 189.164, 231.288)), (' A 383  SER  HB2', ' A 384  PRO  HD2', -0.42, (194.612, 153.669, 247.493)), (' C 383  SER  HB2', ' C 384  PRO  HD2', -0.42, (219.882, 200.097, 248.191)), (' C  14  GLN  N  ', ' C 255  SER  HG ', -0.419, (251.559, 160.757, 246.096)), (' A  86  PHE  CG ', ' A  86  PHE  O  ', -0.419, (165.849, 162.759, 229.894)), (' B 383  SER  HB2', ' B 384  PRO  HD2', -0.418, (177.988, 198.944, 244.485)), (' B 361  CYS  SG ', ' B 363  ALA  N  ', -0.417, (167.877, 196.05, 240.188)), (' G  38  LYS  O  ', ' G  46  GLU  N  ', -0.416, (253.283, 215.895, 208.87)), (' J  33  VAL  O  ', ' J  33  VAL HG12', -0.414, (216.628, 138.517, 216.42)), (' A 879  ALA  O  ', ' A 883  THR  OG1', -0.414, (177.875, 199.935, 157.252)), (' B  86  PHE  CG ', ' B  86  PHE  O  ', -0.414, (191.657, 225.747, 229.991)), (' B  55  PHE  O  ', ' B 271  GLN  N  ', -0.413, (190.813, 223.113, 218.423)), (' H  32  SER  O  ', ' H  33  VAL  HB ', -0.411, (226.26, 226.143, 213.778)), (' A1017  GLU  OE2', ' C1019  ARG  NH2', -0.41, (193.044, 182.573, 185.881)), (' A 986  PRO  N  ', ' A 987  PRO  HD2', -0.41, (187.64, 198.683, 231.042)), (' C 530  SER  O  ', ' C 531  THR  C  ', -0.41, (232.497, 206.892, 225.563)), (' A 517  LEU  HG ', ' A 517  LEU  O  ', -0.409, (211.827, 158.991, 237.151)), (' E 137  ALA  HB3', ' E 139  THR HG23', -0.409, (101.508, 241.562, 225.778)), (' B 517  LEU  HG ', ' B 517  LEU  O  ', -0.408, (169.915, 188.62, 229.43)), (' C 749  CYS  O  ', ' C 753  LEU  N  ', -0.408, (188.13, 175.155, 215.592)), (' A 362  VAL  H  ', ' A 524  VAL HG11', -0.408, (204.653, 147.893, 237.873)), (' C 212  LEU HD21', ' C 215  GLY  O  ', -0.407, (246.991, 160.69, 215.843)), (' F  32  SER  O  ', ' F  33  VAL  HB ', -0.407, (147.936, 192.348, 214.939)), (' A 332  ILE  CG2', ' A 333  THR  H  ', -0.406, (205.784, 143.141, 236.617)), (' C 122  ASN  O  ', ' C 123  ALA  HB3', -0.406, (239.07, 147.027, 235.931)), (' C 517  LEU  HG ', ' C 517  LEU  O  ', -0.406, (213.041, 208.901, 230.854)), (' C 986  PRO  N  ', ' C 987  PRO  HD2', -0.406, (191.58, 172.991, 231.176)), (' A 100  ILE  CG1', ' A 263  ALA  HB2', -0.405, (144.208, 157.544, 224.726)), (' A 421  TYR  O  ', ' A 461  LEU HD11', -0.405, (217.318, 164.039, 258.643)), (' B  42  VAL  O  ', ' C 563  GLN  NE2', -0.403, (210.383, 219.554, 215.939)), (' A 362  VAL HG13', ' A 388  ASN  HA ', -0.403, (200.722, 148.589, 240.082)), (' C 436  TRP  O  ', ' C 508  TYR  HA ', -0.403, (206.73, 204.278, 260.824)), (' C 421  TYR  O  ', ' C 461  LEU HD11', -0.402, (195.396, 212.137, 244.638)), (' B 122  ASN  O  ', ' B 123  ALA  HB3', -0.401, (210.292, 244.567, 233.302))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
