# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  44 ', 'SER', 0.033214269709275816, (1.2229999999999963, 52.40599999999999, -49.43299999999999)), ('A', ' 195 ', 'ILE', 0.0375726378420733, (-34.345, 29.068999999999974, -54.173)), ('A', ' 484 ', 'VAL', 0.011562748597290416, (-32.458, 38.44599999999997, -80.648)), ('B', ' 354 ', 'GLN', 0.0208996772713957, (-4.538000000000024, 41.537, -40.421))]
data['omega'] = []
data['rota'] = [('B', '   7 ', 'LEU', 0.021735622106026666, (3.8459999999999948, 3.776999999999994, -31.849)), ('B', '  35 ', 'ILE', 0.178975840566879, (-1.7200000000000069, -11.169, -31.929)), ('B', '  96 ', 'THR', 0.24830583816581905, (14.272999999999989, -0.4870000000000072, -39.301)), ('B', ' 144 ', 'THR', 0.13697062136560764, (-20.187000000000005, 6.50599999999999, -38.469)), ('B', ' 177 ', 'ASN', 0.03674838754231734, (-32.58, 18.022, -29.688)), ('B', ' 192 ', 'LYS', 0.0, (-31.36399999999999, 14.144999999999996, -54.44499999999999)), ('B', ' 215 ', 'THR', 0.010523484427618192, (-33.616, 28.147999999999996, -44.20799999999999)), ('B', ' 220 ', 'ASN', 0.003546815523468264, (-43.69599999999999, 18.868, -48.711)), ('B', ' 231 ', 'THR', 0.10898225361442793, (-14.98000000000001, 13.077999999999996, -43.583999999999996)), ('B', ' 259 ', 'SER', 0.2180409501757069, (-6.930000000000013, 53.085, -22.795)), ('B', ' 327 ', 'ILE', 0.015601200396278431, (-13.087000000000002, 47.45499999999997, -40.028)), ('B', ' 351 ', 'THR', 0.016319203132297844, (-6.657000000000007, 35.559, -45.545)), ('B', ' 359 ', 'THR', 0.07702450735259944, (-13.806000000000001, 28.514, -37.393)), ('B', ' 416 ', 'THR', 0.1601206113705124, (-18.748, 11.250999999999987, -16.306)), ('B', ' 551 ', 'GLU', 0.03984230432573769, (-30.96699999999998, 14.274999999999988, -9.791)), ('A', '  35 ', 'ILE', 0.1655907399969438, (3.974999999999988, 57.809, -66.343)), ('A', '  51 ', 'ASN', 0.055326672455894635, (-2.6430000000000033, 65.752, -47.059999999999995)), ('A', '  58 ', 'THR', 0.012572680687521475, (-4.349000000000021, 62.443999999999974, -55.789)), ('A', '  81 ', 'PHE', 0.18921205004784655, (11.022999999999996, 65.906, -52.717)), ('A', ' 149 ', 'TYR', 0.2275314166322599, (-27.339999999999996, 43.446, -66.51)), ('A', ' 207 ', 'ASP', 0.2901673078448157, (-43.084, 35.90299999999997, -74.821)), ('A', ' 255 ', 'THR', 0.2819809016392995, (3.88199999999999, -2.7820000000000142, -63.41199999999999)), ('A', ' 278 ', 'SER', 0.004019992775283754, (3.1109999999999873, 16.349999999999994, -69.546)), ('A', ' 323 ', 'LYS', 0.0, (-14.762999999999995, -0.1580000000000119, -66.261)), ('A', ' 344 ', 'ASP', 0.011560251864379291, (-23.632, 8.263, -58.664)), ('A', ' 366 ', 'THR', 0.1871787836157345, (-4.364000000000004, 17.757999999999996, -50.964)), ('A', ' 502 ', 'ARG', 0.11373153292267718, (-36.652, 9.413999999999977, -97.219)), ('A', ' 530 ', 'THR', 0.01495926990173757, (-30.86699999999998, 18.581999999999987, -79.554))]
data['cbeta'] = []
data['probe'] = [(' A 445  PRO  HD2', ' A 448  ILE HD12', -0.703, (-18.192, 10.109, -89.355)), (' B 293  ILE HG13', ' B 320  LYS  HB3', -0.667, (-14.118, 41.782, -30.013)), (' A   5  CYS  HB2', ' A  26  CYS  HB3', -0.63, (8.391, 45.43, -57.382)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.628, (-38.903, 28.477, -2.629)), (' B 534  ASP  OD1', ' B 801  HOH  O  ', -0.616, (-26.642, 19.862, -21.49)), (' B   6  VAL HG23', ' B   7  LEU HD23', -0.609, (1.053, 3.339, -32.627)), (' B 306  TYR  HB3', ' B 317  LEU HD13', -0.595, (-11.539, 35.848, -32.623)), (' B 124  ASN HD22', ' B 421  TYR  HA ', -0.556, (-8.521, 15.07, -21.07)), (' A 339  ARG  NH2', ' A 808  HOH  O  ', -0.545, (-19.593, 24.169, -62.063)), (' B  21  ARG  NH2', ' B 232  VAL  O  ', -0.541, (-9.369, 10.633, -41.177)), (' B 480  ILE HD13', ' B 550  THR HG22', -0.537, (-36.057, 13.067, -12.447)), (' A 140  ALA  HA ', ' A 232  VAL HG21', -0.534, (-13.153, 39.134, -61.083)), (' A  65  LEU  N  ', ' A  81  PHE  O  ', -0.533, (7.576, 65.104, -52.286)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.532, (-27.621, 40.052, -7.717)), (' B 560  ARG  NE ', ' B 801  HOH  O  ', -0.527, (-26.153, 19.206, -20.047)), (' A 127  THR HG22', ' A 130  LEU  HB2', -0.524, (4.036, 38.703, -67.159)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.512, (-6.092, 28.118, -20.61)), (' B 158  LEU HD13', ' B 164  HIS  HB2', -0.511, (-48.035, 15.451, -39.572)), (' B 519  ASN  HB3', ' B 530  THR  HB ', -0.509, (-37.306, 25.736, -23.26)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.503, (3.994, -0.912, -40.223)), (' A 477  LYS  NZ ', ' A 551  GLU  OE2', -0.496, (-23.245, 31.661, -98.504)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.491, (-8.494, 36.094, -18.428)), (' B 442  ARG  HA ', ' B 464  HIS  HB3', -0.487, (-18.94, 42.702, -11.415)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.485, (-2.733, 11.455, -76.852)), (' B  15  ARG  N  ', ' B  43  LEU  O  ', -0.479, (-0.87, -1.606, -43.817)), (' A  13  SER  O  ', ' A  44  SER  HA ', -0.467, (1.8, 50.974, -50.276)), (' A 472  PHE  HB3', ' A 590  LEU  HG ', -0.465, (-25.959, 13.874, -98.739)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.464, (-0.394, 2.19, -29.825)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.463, (-8.032, -0.171, -66.216)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.462, (-25.44, 27.797, -5.87)), (' B 313  ALA  O  ', ' B 802  HOH  O  ', -0.46, (-16.123, 34.534, -30.144)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.46, (-1.619, 9.647, -60.731)), (' B   2  VAL HG22', ' B  13  SER  HB2', -0.46, (6.021, 0.761, -47.345)), (' B 320  LYS  NZ ', ' B 701  UJK  N2 ', -0.456, (-17.429, 43.627, -24.258)), (' B  27  CYS  HB3', ' B  88  GLN  HB3', -0.456, (7.821, -7.267, -38.866)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.455, (-19.168, 23.494, -83.415)), (' A 456  VAL HG21', ' A 562  ASN  ND2', -0.453, (-9.379, 19.782, -85.782)), (' B 280  LEU  HB2', ' B 436  MET  HE3', -0.446, (-4.692, 33.977, -20.708)), (' A 494  GLY  O  ', ' A 498  GLU  HG2', -0.442, (-37.66, 19.376, -95.492)), (' B 149  TYR  HB3', ' B 174  PRO  HD3', -0.438, (-31.581, 8.251, -36.393)), (' A  64  TYR  HA ', ' A  82  PRO  HA ', -0.436, (6.923, 65.274, -54.473)), (' B 149  TYR  CD2', ' B 174  PRO  HB3', -0.435, (-29.6, 9.644, -34.476)), (' A  64  TYR  N  ', ' A  71  TYR  O  ', -0.434, (3.88, 66.731, -53.439)), (' A 124  ASN  ND2', ' A 813  HOH  O  ', -0.433, (-4.989, 33.946, -72.408)), (' B 378  MET  O  ', ' B 407  ALA  HB2', -0.431, (-15.951, 20.659, -27.697)), (' A 366  THR  OG1', ' A 367  THR  N  ', -0.43, (-3.521, 15.919, -51.678)), (' B 539  SER  O  ', ' B 567  ARG  HD3', -0.426, (-25.691, 33.166, -20.139)), (' A   5  CYS  HA ', ' A  24  PHE  O  ', -0.426, (4.872, 44.574, -56.994)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.424, (3.111, 42.519, -28.987)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.424, (7.147, 13.548, -63.401)), (' A  76  LYS  HD2', ' A  80  SER  OG ', -0.424, (8.279, 70.653, -52.539)), (' B 343  PHE  CZ ', ' B 345  LYS  HB2', -0.423, (-19.821, 42.728, -38.891)), (' A 239  THR  O  ', ' A 388  ASN  ND2', -0.42, (0.135, 25.353, -63.304)), (' A  15  ARG  HD3', ' A  24  PHE  CE2', -0.414, (0.098, 45.344, -51.118)), (' A 405  LEU HD21', ' A 560  ARG  HB2', -0.414, (-16.378, 25.809, -81.927)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.411, (-7.696, 25.63, -24.328)), (' A 538  GLY  H  ', ' A 567  ARG  NH1', -0.409, (-16.956, 15.871, -77.834)), (' A  31  TYR  CD1', ' A  87  GLY  HA2', -0.409, (10.367, 56.573, -63.822)), (' B 561  PHE  HZ ', ' B 585  LEU HD11', -0.408, (-28.816, 25.836, -7.41)), (' A 405  LEU HD13', ' A 534  ASP  OD1', -0.406, (-17.759, 24.763, -78.533)), (' A 185  TYR  HE1', ' A 194  GLN  HG3', -0.405, (-29.826, 34.142, -52.8)), (' B 260  ASP  N  ', ' B 260  ASP  OD1', -0.402, (-9.221, 53.733, -20.387)), (' B 160  ASP  OD1', ' B 161  ARG  N  ', -0.4, (-43.902, 25.521, -40.51)), (' A 185  TYR  CE1', ' A 194  GLN  HG3', -0.4, (-29.647, 33.532, -53.044))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
