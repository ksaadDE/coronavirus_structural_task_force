# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  14 ', 'PRO', 0.08608947023130972, (-6.119000000000004, 10.087, -22.917)), ('A', ' 104 ', 'ASN', 0.03436826375358564, (19.335, 5.054, 1.752)), ('A', ' 194 ', 'SER', 0.029612513177988138, (-23.643000000000022, -32.003, -5.301000000000001)), ('C', ' 533 ', 'LEU', 0.046524061698131, (47.806, -13.744, 11.105)), ('H', ' 104 ', 'ASN', 0.03325652021241882, (55.242, 37.168, 26.690000000000012)), ('H', ' 155 ', 'PRO', 0.0, (90.237, 59.571999999999974, 29.239)), ('H', ' 200 ', 'GLN', 0.005276480147021769, (90.47, 86.131, 48.171000000000014)), ('L', '  84 ', 'ASP', 0.049755541865679404, (64.905, 53.14899999999997, 39.27000000000001)), ('L', ' 142 ', 'TYR', 0.008782784742407922, (66.302, 67.118, 45.93700000000001)), ('L', ' 191 ', 'ARG', 0.011789624400812956, (70.01799999999997, 87.37, 20.055000000000007))]
data['omega'] = [('A', ' 155 ', 'PRO', None, (-13.803, -0.745, -17.817)), ('A', ' 157 ', 'PRO', None, (-11.054, -3.44, -12.957)), ('B', ' 143 ', 'PRO', None, (3.3860000000000015, -28.047, -17.087)), ('H', ' 155 ', 'PRO', None, (91.55199999999999, 60.171, 28.991000000000007)), ('H', ' 157 ', 'PRO', None, (90.84, 59.823, 35.128))]
data['rota'] = [('A', '   3 ', 'GLN', 0.06293803999586943, (-2.983, -0.535, 6.632)), ('A', '  24 ', 'VAL', 0.2804899142039674, (-4.378000000000004, 5.339, 5.857000000000001)), ('A', ' 132 ', 'LEU', 0.04805196125537271, (-23.717999999999996, -21.069, -15.329000000000006)), ('A', ' 190 ', 'VAL', 0.1961525691477185, (-16.767999999999997, -22.843, -7.498)), ('A', ' 203 ', 'ILE', 0.0779003805721124, (-25.494, -16.509, -5.171)), ('B', ' 164 ', 'THR', 0.12000011699407338, (-6.404, -16.298, -22.564000000000007)), ('C', ' 395 ', 'VAL', 0.2887628044067344, (35.612, 11.373999999999993, 11.063)), ('H', ' 190 ', 'VAL', 0.12145482370629884, (81.78, 75.906, 45.10200000000001)), ('H', ' 192 ', 'VAL', 0.0072963790444191545, (79.85299999999994, 82.016, 46.567000000000014)), ('H', ' 197 ', 'LEU', 0.010136746048567406, (83.93099999999994, 89.667, 44.966)), ('H', ' 199 ', 'THR', 0.025242855372030547, (88.46699999999998, 89.364, 48.514)), ('H', ' 209 ', 'LYS', 0.0, (97.272, 62.308, 35.27)), ('H', ' 215 ', 'VAL', 0.027274672780567284, (97.066, 73.95199999999994, 34.685)), ('L', '  74 ', 'ILE', 0.29684897877455907, (55.06600000000001, 48.995, 46.779)), ('L', ' 105 ', 'VAL', 0.07383199726323922, (61.019, 56.997, 42.956)), ('R', ' 328 ', 'ARG', 0.06196313832925951, (29.05000000000003, 35.0, 38.976)), ('R', ' 368 ', 'LEU', 0.13356701070666566, (49.518, 25.048, 30.813)), ('R', ' 369 ', 'TYR', 0.00028521570695691105, (52.224, 27.674999999999986, 31.32500000000001)), ('R', ' 531 ', 'THR', 0.004463045011898211, (27.605000000000008, 35.52, 44.868000000000016)), ('R', ' 534 ', 'VAL', 0.006046495464392244, (19.678000000000015, 42.226, 43.27)), ('R', ' 535 ', 'LYS', 0.0, (18.14200000000001, 45.694, 43.53)), ('R', ' 537 ', 'LYS', 0.06726673531399513, (24.82099999999999, 47.9, 43.622))]
data['cbeta'] = []
data['probe'] = [(' A 177  VAL HG12', ' B 164  THR HG23', -0.802, (-9.232, -15.067, -22.583)), (' R 457  ARG  NH1', ' R 467  ASP  OD2', -0.719, (46.038, 22.771, -1.709)), (' L  54  PRO  HG2', ' L  57  ILE HD13', -0.685, (61.875, 38.882, 43.788)), (' A 129  VAL HG22', ' A 150  VAL HG12', -0.668, (-21.414, -10.345, -14.651)), (' A 203  ILE HD13', ' A 218  LYS  HB3', -0.66, (-29.16, -15.687, -5.896)), (' A 150  VAL HG11', ' A 206  VAL HG21', -0.638, (-19.51, -9.657, -13.325)), (' B  82  GLU  HG3', ' B 106  THR  HA ', -0.604, (9.388, -20.401, -10.494)), (' H 203  ILE HG22', ' H 218  LYS  HB3', -0.599, (93.658, 82.17, 39.909)), (' C 600  NAG  H3 ', ' C 600  NAG  H83', -0.592, (20.748, 7.66, 20.088)), (' C 321  GLN  HG3', ' C 324  GLU  HG3', -0.586, (40.444, -7.061, 3.592)), (' H 151  LYS  HE3', ' L 133  THR HG21', -0.586, (82.072, 73.643, 26.896)), (' C 439  ASN  O  ', ' C 443  SER  OG ', -0.579, (9.812, 23.997, 18.919)), (' H 103  GLY  O  ', ' H 105  LEU  N  ', -0.577, (56.029, 35.462, 27.202)), (' B 151  LYS  HA ', ' B 156  PRO  HA ', -0.575, (-14.947, -27.695, -35.065)), (' H   4  LEU HD22', ' H  24  VAL HG22', -0.569, (75.672, 33.073, 31.194)), (' A 103  GLY  O  ', ' A 105  LEU  N  ', -0.568, (18.248, 5.4, 3.322)), (' C 358  ILE  HB ', ' C 395  VAL HG23', -0.564, (34.947, 10.825, 13.794)), (' C 468  ILE HD12', ' R 518  LEU HD21', -0.558, (32.792, 33.604, 15.921)), (' L 151  LYS  HA ', ' L 156  PRO  HA ', -0.557, (65.384, 76.577, 21.663)), (' L 169  GLN  NE2', ' L 173  LYS  HB3', -0.552, (74.586, 68.329, 48.4)), (' R 352  ALA  HB2', ' R 468  ILE HG22', -0.55, (45.586, 16.701, 5.223)), (' B 168  LYS  HE2', ' B 172  ASN  HA ', -0.547, (2.061, -21.532, -9.306)), (' R 342  PHE  CE2', ' R 511  VAL HG11', -0.541, (50.16, 22.885, 23.917)), (' R 417  LYS  O  ', ' R 422  ASN  ND2', -0.539, (54.159, 24.458, 3.652)), (' R 321  GLN  HG3', ' R 324  GLU  HG3', -0.532, (33.071, 41.685, 35.305)), (' C 523  THR HG23', ' C 524  VAL HG23', -0.532, (39.33, 7.396, 14.209)), (' B  12  VAL HG21', ' B  18  ALA  HB2', -0.532, (16.305, -21.123, -6.557)), (' A 134  PRO  HG3', ' A 197  LEU HD11', -0.531, (-26.121, -27.122, -9.018)), (' L 173  LYS  HG3', ' L 174  TYR  H  ', -0.53, (71.835, 67.156, 46.156)), (' B  34  TRP  HB2', ' B  47  VAL  HB ', -0.524, (15.895, -8.399, 0.217)), (' A  86  THR  O  ', ' A 119  VAL HG21', -0.522, (-2.301, 6.552, -20.7)), (' L 112  LYS  HG3', ' L 143  PRO  HG2', -0.518, (61.057, 68.653, 45.421)), (' H   2  VAL  HA ', ' H  26  GLY  HA3', -0.513, (75.129, 29.137, 37.391)), (' A  12  VAL HG21', ' A  18  LEU HD13', -0.509, (-6.403, 8.181, -13.897)), (' H  39  GLN  HB2', ' H  45  LEU HD23', -0.508, (70.022, 49.385, 30.721)), (' C 335  LEU HD23', ' C 362  VAL HG13', -0.507, (33.565, 1.577, 20.522)), (' R 360  ASN  H  ', ' R 523  THR  HB ', -0.506, (31.419, 25.533, 26.396)), (' H  18  LEU HD12', ' H 117  VAL HG11', -0.504, (81.498, 48.425, 22.624)), (' R 461  LEU HD22', ' R 465  GLU  HB3', -0.498, (44.144, 26.038, 3.276)), (' L 173  LYS  HG3', ' L 174  TYR  N  ', -0.495, (72.2, 67.52, 46.417)), (' C 431  GLY  HA2', ' C 515  PHE  CD2', -0.494, (30.964, 9.989, 5.396)), (' H  66  ARG HH21', ' H  82  LEU HD11', -0.493, (74.675, 49.219, 17.229)), (' A 129  VAL HG21', ' A 206  VAL HG11', -0.489, (-22.385, -9.542, -12.203)), (' A  39  GLN  HB2', ' A  45  LEU HD23', -0.489, (4.619, -2.265, -10.093)), (' H  18  LEU HD21', ' H  20  LEU HD13', -0.473, (80.442, 44.83, 23.514)), (' A   4  LEU HD22', ' A  24  VAL HG12', -0.472, (-2.14, 4.983, 4.255)), (' B   4  LEU HD11', ' B  89  VAL HG12', -0.462, (18.619, 0.439, -7.214)), (' B  46  VAL  HA ', ' B  57  ILE HG12', -0.461, (10.958, -10.89, 3.595)), (' C 431  GLY  HA2', ' C 515  PHE  HD2', -0.459, (31.087, 10.012, 5.164)), (' L  39  PRO  HD3', ' L  82  GLU  OE2', -0.458, (70.032, 52.944, 43.652)), (' H  96  ALA  HB1', ' H 108  PHE  HB3', -0.456, (67.818, 39.131, 31.856)), (' A 127  PRO  HB3', ' A 153  TYR  HB3', -0.455, (-18.787, -6.345, -17.493)), (' A 146  LEU HD13', ' A 219  VAL HG21', -0.453, (-23.846, -21.612, -9.063)), (' H 171  VAL  HA ', ' H 190  VAL HG13', -0.449, (83.077, 73.249, 46.956)), (' R 537  LYS  HA ', ' R 537  LYS  HD2', -0.449, (24.511, 49.1, 41.886)), (' L 146  VAL HG12', ' L 199  HIS  HB2', -0.447, (63.791, 70.216, 38.805)), (' R 379  CYS  HA ', ' R 432  CYS  HA ', -0.446, (49.516, 33.192, 21.581)), (' L  39  PRO  HD3', ' L  82  GLU  OE1', -0.446, (70.208, 52.022, 44.556)), (' A 127  PRO  HD2', ' A 213  THR HG21', -0.445, (-22.41, -4.378, -14.271)), (' C 350  VAL  O  ', ' C 353  TRP  HD1', -0.444, (27.063, 27.271, 9.975)), (' H 100  ARG  NH1', ' H 105  LEU  HB3', -0.441, (56.691, 33.394, 31.707)), (' C 326  ILE  HA ', ' C 326  ILE HD12', -0.439, (40.591, -13.667, 7.498)), (' H  87  ALA  O  ', ' H  90  THR HG22', -0.438, (78.073, 56.93, 23.169)), (' H  18  LEU  HB3', ' H  82  LEU  HB3', -0.432, (79.42, 46.644, 19.241)), (' B  35  TYR  HE1', ' B  88  GLN  HB3', -0.426, (13.272, -1.628, -2.908)), (' B  20  ILE HD11', ' B 105  VAL HG11', -0.424, (15.01, -15.809, -7.469)), (' B 169  GLN  HG2', ' B 173  LYS  O  ', -0.423, (-1.963, -22.042, -10.73)), (' R 535  LYS  HB2', ' R 535  LYS  HE2', -0.423, (15.916, 44.708, 45.717)), (' H  12  VAL  O  ', ' H 119  VAL  HA ', -0.422, (84.889, 53.664, 21.132)), (' L  10  VAL  O  ', ' L 105  VAL  HA ', -0.422, (59.991, 58.824, 43.206)), (' R 415  THR HG22', ' R 416  GLY  H  ', -0.421, (56.499, 32.731, 2.64)), (' L  62  SER  O  ', ' L  72  LEU HD12', -0.421, (54.224, 46.065, 41.937)), (' L  15  GLY  N  ', ' L  77  VAL  O  ', -0.42, (57.579, 54.208, 53.978)), (' C 457  ARG  NH1', ' C 459  SER  O  ', -0.42, (30.682, 34.072, 0.389)), (' B  38  LYS  HG2', ' B  83  ALA  HB2', -0.419, (5.915, -15.219, -5.366)), (' A  68  THR  HB ', ' A  81  LYS  HB2', -0.418, (-1.562, 16.299, -8.586)), (' B   2  TYR  HB2', ' B  91  ASP  OD2', -0.418, (20.875, 7.132, -9.777)), (' R 434  ILE  HB ', ' R 511  VAL HG13', -0.417, (50.829, 24.923, 22.324)), (' L  92  SER  HB2', ' R 380  TYR  CD2', -0.417, (51.65, 38.462, 18.468)), (' R 350  VAL  HA ', ' R 400  PHE  HB2', -0.417, (51.55, 20.111, 11.587)), (' H  37  ILE  O  ', ' H  94  TYR  N  ', -0.415, (74.398, 44.771, 28.611)), (' R 533  LEU  HA ', ' R 533  LEU HD23', -0.415, (22.351, 40.614, 46.345)), (' L   6  GLN  NE2', ' L  87  CYS  SG ', -0.414, (57.191, 50.696, 33.283)), (' H  62  SER  HB2', ' H  63  LEU HD12', -0.413, (67.702, 49.586, 17.784)), (' C 455  LEU HD22', ' C 493  GLN  HG3', -0.411, (17.771, 38.538, 6.954)), (' B  31  THR  O  ', ' B  89  VAL HG23', -0.411, (20.07, 0.921, -2.045)), (' A  18  LEU  O  ', ' A  81  LYS  HA ', -0.41, (-4.01, 12.88, -10.383)), (' B   6  GLN  NE2', ' B  87  CYS  SG ', -0.41, (17.048, -6.447, -8.309)), (' R 326  ILE  HA ', ' R 326  ILE HD12', -0.409, (31.065, 40.663, 43.046)), (' L  83  ALA  HB2', ' L 105  VAL  O  ', -0.409, (63.871, 56.085, 43.948)), (' A  35  SER  HA ', ' A  50  TYR  HA ', -0.408, (5.505, 9.478, -1.782)), (' B  12  VAL HG11', ' B  18  ALA  HA ', -0.407, (18.707, -20.547, -6.685)), (' B 134  LEU  HB2', ' B 180  LEU  HB3', -0.406, (-18.578, -21.672, -27.001)), (' A 177  VAL HG22', ' A 185  SER  O  ', -0.405, (-13.076, -12.79, -20.557)), (' C 342  PHE  CE2', ' C 511  VAL HG11', -0.405, (23.705, 13.286, 14.169)), (' L 164  THR HG22', ' L 177  SER  H  ', -0.403, (74.777, 67.73, 35.367)), (' A 101  PRO  HB3', ' C 374  PHE  O  ', -0.403, (14.724, 9.67, 9.243)), (' R 501  ASN  HA ', ' R 501  ASN HD22', -0.4, (70.43, 15.334, 11.296))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
