# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 600 ', 'PRO', 0.08932632279308914, (154.97599999999989, 194.184, 169.959)), ('A', ' 719 ', 'THR', 0.005751672056959698, (152.43899999999988, 182.411, 203.358)), ('A', '1041 ', 'ASP', 0.025850703831622964, (159.90899999999988, 171.478, 192.47300000000004)), ('B', ' 110 ', 'LEU', 0.03606666668023218, (202.9069999999999, 150.205, 116.686)), ('B', ' 197 ', 'ILE', 0.040394413899293935, (190.57699999999988, 157.0000000000001, 128.676)), ('B', ' 600 ', 'PRO', 0.02289296800839462, (192.887, 147.359, 169.758)), ('B', ' 618 ', 'THR', 0.008081486450930294, (183.251, 126.623, 155.76400000000004)), ('B', ' 744 ', 'GLY', 0.031060397182613563, (170.773, 178.721, 144.331)), ('B', ' 789 ', 'TYR', 0.024562572608678137, (173.372, 184.699, 194.73000000000002)), ('B', '1033 ', 'VAL', 0.0, (171.50299999999987, 171.247, 194.588)), ('C', '  32 ', 'PHE', 0.039252948434567884, (125.7670000000001, 127.576, 145.711)), ('C', '  46 ', 'SER', 0.012327418920028525, (150.48099999999988, 126.493, 151.344)), ('C', ' 112 ', 'SER', 0.005948607533414595, (128.8629999999999, 121.509, 108.70400000000002)), ('C', ' 136 ', 'CYS', 0.04310754010794001, (120.34099999999985, 114.65500000000006, 112.164)), ('C', ' 214 ', 'ARG', 0.01339887059637043, (117.06099999999996, 116.377, 140.969)), ('C', ' 280 ', 'ASN', 0.019329875417552943, (145.6089999999999, 125.516, 153.28)), ('C', ' 600 ', 'PRO', 0.02661285417391664, (132.759, 139.64300000000011, 171.194)), ('C', ' 986 ', 'LYS', 0.027513980953215857, (169.8079999999999, 150.036, 128.068))]
data['omega'] = []
data['rota'] = [('A', '  81 ', 'ASN', 0.21229845603100908, (144.756, 217.279, 129.831)), ('A', ' 515 ', 'PHE', 0.027080358942010507, (184.4899999999999, 171.347, 110.01)), ('A', ' 602 ', 'THR', 0.07862472764607979, (149.62399999999997, 195.098, 166.65200000000002)), ('A', ' 603 ', 'ASN', 0.03457912106422699, (146.8849999999999, 196.7590000000001, 168.796)), ('A', ' 784 ', 'GLN', 0.07227024273624534, (143.272, 155.6110000000001, 188.356)), ('A', ' 935 ', 'GLN', 0.06481913172284023, (143.722, 182.925, 191.20200000000003)), ('B', ' 319 ', 'ARG', 5.0734283485276444e-05, (178.024, 137.442, 149.766)), ('B', ' 400 ', 'PHE', 0.004530608521908229, (156.41399999999993, 118.38200000000006, 96.33400000000002)), ('B', ' 403 ', 'ARG', 0.050720002083644876, (163.40899999999988, 118.768, 88.88100000000001)), ('B', ' 602 ', 'THR', 0.05847714492119849, (196.403, 151.706, 166.794)), ('B', ' 603 ', 'ASN', 0.007610345270739651, (199.79599999999994, 152.246, 168.546)), ('B', ' 657 ', 'ASN', 0.0, (188.37899999999988, 129.878, 177.809)), ('B', ' 935 ', 'GLN', 0.017613048763760616, (188.12399999999988, 165.064, 189.691)), ('B', ' 965 ', 'GLN', 0.137510174466275, (174.105, 165.684, 148.679)), ('B', ' 986 ', 'LYS', 0.2951578187329058, (164.99, 174.69200000000012, 127.574)), ('B', '1034 ', 'LEU', 0.03783837583852293, (168.4659999999999, 173.066, 196.12)), ('B', '1071 ', 'GLN', 0.28409015446506736, (183.4169999999999, 147.707, 206.86500000000004)), ('C', '  42 ', 'VAL', 0.03432281278617581, (152.1629999999999, 123.593, 138.428)), ('C', '  44 ', 'ARG', 0.0009475939575426061, (151.91499999999988, 126.527, 144.903)), ('C', ' 200 ', 'TYR', 0.24208490158870274, (142.94699999999995, 128.977, 123.328)), ('C', ' 239 ', 'GLN', 0.12282928582245, (124.37800000000011, 121.94600000000005, 123.181)), ('C', ' 328 ', 'ARG', 7.765079646731207e-05, (124.562, 171.126, 131.982)), ('C', ' 331 ', 'ASN', 0.08249380401138923, (121.41799999999995, 176.66, 125.736)), ('C', ' 351 ', 'TYR', 0.007633452529517784, (155.3809999999999, 185.3910000000001, 108.116)), ('C', ' 602 ', 'THR', 0.008159601566148922, (134.411, 134.442, 167.819)), ('C', ' 603 ', 'ASN', 0.11661224233659205, (134.012, 131.545, 170.307)), ('C', ' 776 ', 'LYS', 0.2766501416992392, (172.73799999999997, 149.897, 176.185)), ('C', ' 935 ', 'GLN', 0.0, (152.12999999999988, 131.638, 188.88)), ('C', '1074 ', 'ASN', 0.0, (135.446, 154.286, 212.63600000000002))]
data['cbeta'] = [('A', ' 603 ', 'ASN', ' ', 0.32679906426649663, (145.408, 196.337, 168.844)), ('A', ' 784 ', 'GLN', ' ', 0.26299569022387687, (144.8099999999999, 155.702, 188.381)), ('A', ' 878 ', 'LEU', ' ', 0.2807555729657957, (139.537, 167.213, 194.185)), ('B', ' 487 ', 'ASN', ' ', 0.25157270033710954, (145.37399999999988, 131.377, 72.272)), ('B', ' 878 ', 'LEU', ' ', 0.2731228171404774, (177.44999999999987, 175.865, 193.314)), ('B', '1032 ', 'CYS', ' ', 0.4566946576589107, (170.04599999999988, 166.614, 194.97300000000004)), ('C', ' 198 ', 'ASP', ' ', 0.26432840386899126, (139.727, 135.205, 121.275)), ('C', ' 878 ', 'LEU', ' ', 0.27014910762784455, (166.031, 138.681, 193.605)), ('C', '1083 ', 'HIS', ' ', 0.3341124553419701, (144.77699999999976, 167.06, 231.61))]
data['probe'] = [(' B 617  CYS  O  ', ' B 618  THR HG23', -1.255, (182.375, 126.811, 157.995)), (' B 617  CYS  O  ', ' B 618  THR  CG2', -1.088, (182.658, 126.127, 157.367)), (' B 617  CYS  C  ', ' B 618  THR HG23', -0.761, (182.672, 126.812, 157.762)), (' A 617  CYS  O  ', ' A 620  VAL  O  ', -0.725, (175.679, 197.705, 156.74)), (' B1032  CYS  O  ', ' B1033  VAL HG23', -0.692, (170.996, 170.023, 191.962)), (' B 326  ILE HD11', ' B 534  VAL  HB ', -0.687, (173.534, 122.186, 140.459)), (' A 617  CYS  C  ', ' A 620  VAL  O  ', -0.577, (175.704, 196.929, 156.961)), (' A  81  ASN  N  ', ' A 265  TYR  HH ', -0.558, (144.593, 215.689, 131.153)), (' B1032  CYS  SG ', ' B1048  HIS  CE1', -0.555, (172.108, 164.846, 194.979)), (' B 617  CYS  O  ', ' B 618  THR  CB ', -0.551, (182.269, 126.418, 157.265)), (' B1037  SER  HB3', ' B1043  CYS  SG ', -0.528, (168.673, 162.496, 194.757)), (' B 716  THR HG23', ' B1071  GLN  HG2', -0.517, (182.317, 148.451, 211.138)), (' B 612  TYR  HB2', ' B 649  CYS  HB3', -0.49, (183.177, 134.754, 159.538)), (' B1081  ILE HD12', ' B1135  ASN  HB3', -0.472, (168.358, 142.397, 226.701)), (' A1032  CYS  CB ', ' A1043  CYS  SG ', -0.472, (153.082, 166.285, 193.588)), (' B1030  SER  O  ', ' B1031  GLU  C  ', -0.446, (166.546, 168.612, 193.668)), (' B 200  TYR  CD1', ' B 230  PRO  HA ', -0.442, (194.094, 164.556, 123.251)), (' A 718  PHE  O  ', ' A 719  THR  C  ', -0.437, (152.645, 180.495, 203.186)), (' C1083  HIS  CD2', ' C1084  ASP  H  ', -0.436, (146.915, 168.618, 231.89)), (' B1037  SER  CB ', ' B1043  CYS  SG ', -0.435, (168.544, 162.991, 194.779)), (' B 380  TYR  CE2', ' B 433  VAL HG21', -0.434, (163.158, 127.73, 101.426)), (' B  34  ARG  NH1', ' B 221  SER  HB3', -0.422, (208.682, 156.921, 145.84)), (' B 889  GLY  HA3', ' B1034  LEU  HB2', -0.415, (166.09, 174.582, 195.957)), (' B1032  CYS  SG ', ' B1048  HIS  NE2', -0.407, (171.319, 164.817, 195.643)), (' B  34  ARG HH11', ' B 221  SER  HB3', -0.401, (208.555, 156.725, 145.582)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.401, (118.409, 116.464, 135.903))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
