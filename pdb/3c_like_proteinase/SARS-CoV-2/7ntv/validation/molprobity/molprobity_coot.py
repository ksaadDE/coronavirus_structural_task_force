# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 195 ', 'GLY', 0.05834618809098586, (8.041, 1.2000000000000002, -41.794))]
data['omega'] = []
data['rota'] = [('A', '  72 ', 'ASN', 0.16132196233016632, (5.177, -26.187000000000005, -1.8409999999999997)), ('A', '  73 ', 'VAL', 0.07630491296040345, (6.114000000000001, -26.111, 1.925)), ('A', '  86 ', 'VAL', 0.28460533545591515, (-7.4159999999999995, -8.443, 8.466)), ('A', ' 121 ', 'SER', 0.24818150732920843, (0.9749999999999995, -17.738, -6.929)), ('A', ' 196 ', 'THR', 0.21810758040683564, (-20.333, 8.589, -8.239)), ('A', ' 228 ', 'ASN', 0.13516015648307592, (-11.533, 29.761, -8.963999999999999)), ('A', ' 238 ', 'ASN', 0.1104818705283085, (-17.099, 16.113, -12.427999999999997)), ('A', ' 277 ', 'ASN', 0.225069509424909, (-11.147, 17.449, -32.255)), ('B', '  62 ', 'SER', 0.12041779585720272, (40.655, -8.205, -22.951)), ('B', '  67 ', 'LEU', 0.1332064132930907, (33.425, -4.383, -15.669999999999998)), ('B', ' 142 ', 'ASN', 0.21117932602148165, (19.403999999999993, 6.884000000000001, -21.948)), ('B', ' 142 ', 'ASN', 0.21117932602148165, (19.403999999999993, 6.884000000000001, -21.948)), ('B', ' 192 ', 'GLN', 0.09981822136050837, (16.865, 4.108, -40.513))]
data['cbeta'] = [('A', ' 154 ', 'TYR', ' ', 0.2786329268160898, (15.291, 4.098, -1.222)), ('A', ' 224 ', 'THR', ' ', 0.2582183697840137, (-2.692, 31.961000000000006, -17.777)), ('B', ' 153 ', 'ASP', ' ', 0.3365383121495977, (4.0000000000000036, -19.365, -20.36))]
data['probe'] = [(' A  76  ARG  HB3', ' A  92  ASP  OD2', -0.771, (5.107, -23.845, 11.95)), (' A 303  VAL  O  ', ' B 123  SER  HB2', -0.723, (13.302, 4.142, -12.346)), (' A  82  MET  HE3', ' A 618  HOH  O  ', -0.635, (-12.333, -7.63, 13.353)), (' A 260  ALA  O  ', ' A 263  ASP  HB3', -0.621, (0.942, 26.664, -17.183)), (' B  46  SER  HA ', ' B  49  MET  HE2', -0.598, (29.815, 7.744, -30.156)), (' A  60  ARG  HG3', ' A  60  ARG HH11', -0.561, (-17.627, -19.837, 17.64)), (' A   1  SER  N  ', ' B 140  PHE  O  ', -0.556, (13.31, 7.064, -24.154)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.556, (21.566, -9.974, -30.085)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.553, (-7.119, -5.443, 7.047)), (' B  61  LYS  HE2', ' B 606  HOH  O  ', -0.53, (37.592, -2.095, -28.591)), (' A 228  ASN  H  ', ' A 228  ASN  ND2', -0.525, (-9.876, 31.266, -8.611)), (' B 288  GLU  HG2', ' B 291  PHE  HE1', -0.523, (-6.101, -3.322, -24.429)), (' A  82  MET  CE ', ' A 618  HOH  O  ', -0.509, (-12.473, -7.86, 14.015)), (' A  86  VAL HG13', ' A 179  GLY  CA ', -0.505, (-7.448, -5.001, 7.625)), (' B  86  VAL HG13', ' B 179  GLY  CA ', -0.503, (22.021, -10.258, -30.225)), (' A 188  ARG  HG2', ' A 190  THR  HB ', -0.493, (-23.82, -7.731, 3.31)), (' A   6  MET  O  ', ' A 502  DMS  H12', -0.487, (4.587, 2.25, -12.502)), (' A 126  TYR  HE1', ' A 128  CYS  HG ', -0.481, (-5.062, -2.611, -10.477)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.468, (13.261, -4.112, -12.822)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -0.461, (-7.129, 13.273, -29.324)), (' B  52  PRO  HD2', ' B 188  ARG  HG2', -0.45, (27.923, 1.425, -37.728)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.45, (-3.157, 6.076, -10.069)), (' B  46  SER  O  ', ' B  49  MET  HG2', -0.445, (30.0, 7.82, -32.383)), (' B 189  GLN  HG2', ' B 189  GLN  O  ', -0.443, (23.284, 7.791, -36.484)), (' A  60  ARG  CG ', ' A  60  ARG HH11', -0.441, (-17.35, -20.39, 17.671)), (' A 126  TYR  HE1', ' A 128  CYS  SG ', -0.44, (-5.202, -2.108, -10.355)), (' A 254  SER  OG ', ' A 260  ALA  HA ', -0.437, (4.307, 26.552, -14.545)), (' A 298  ARG  HG3', ' A 303  VAL  HB ', -0.432, (12.081, 6.981, -10.549)), (' A 166  GLU  OE1', ' B   1  SER  HB3', -0.426, (-15.156, -7.559, -11.612)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.418, (-0.003, -2.906, -5.411)), (' B  67  LEU  N  ', ' B  67  LEU HD23', -0.414, (34.916, -4.164, -16.589)), (' B 110  GLN HE21', ' B 111  THR  H  ', -0.406, (2.421, -11.224, -27.14)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.404, (-9.636, -10.498, -7.95))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
