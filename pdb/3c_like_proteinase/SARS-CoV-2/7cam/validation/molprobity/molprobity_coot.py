# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A  54  TYR  HB3', ' A  82  MET  HE1', -0.802, (14.899, 11.252, 12.201)), (' A  45  THR  H  ', ' A  48  ASP  HB2', -0.791, (20.229, 17.818, 5.749)), (' A 226  THR  HA ', ' A 262  LEU HD13', -0.741, (5.833, -30.75, -13.296)), (' A 207  TRP  HE1', ' A 282  LEU HD11', -0.726, (1.425, -9.462, -21.902)), (' A 285  ALA  HB3', ' B 285  ALA  HB3', -0.689, (10.689, -7.676, -27.362)), (' A 165  MET  HB2', ' A 173  ALA  HB3', -0.648, (14.703, 4.563, -2.341)), (' A 169  THR  HB ', ' A 171  VAL HG22', -0.629, (17.225, 1.066, -9.583)), (' A 207  TRP  NE1', ' A 282  LEU HD11', -0.617, (1.865, -9.708, -21.518)), (' A 165  MET  HE3', ' A 187  ASP  HA ', -0.607, (17.048, 7.476, 2.866)), (' B   5  LYS  HG3', ' B 291  PHE  CZ ', -0.606, (4.137, 5.217, -22.416)), (' A  53  ASN  OD1', ' A  55  GLU  HG3', -0.595, (19.049, 11.337, 16.684)), (' A   6  MET  HE1', ' B 139  SER  HB3', -0.592, (-8.263, -2.589, -19.47)), (' A   4  ARG HH12', ' B   5  LYS  NZ ', -0.585, (-0.95, 1.22, -24.724)), (' B  85  CYS  HB2', ' B 179  GLY  O  ', -0.583, (-22.286, 8.874, -33.189)), (' B 245  ASP  O  ', ' B 249  ILE HG13', -0.581, (4.828, 18.232, -36.819)), (' B 230  PHE  CD1', ' B 265  CYS  HB3', -0.568, (14.038, 8.808, -40.743)), (' B 186  VAL HG23', ' B 188  ARG  HB3', -0.557, (-23.596, -0.23, -38.707)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.55, (-24.825, 14.668, -13.022)), (' B  50  LEU HD23', ' B 189  GLN  HB3', -0.541, (-25.814, -6.839, -37.318)), (' B 239  TYR  CZ ', ' B 272  LEU HD21', -0.535, (10.007, 0.659, -37.529)), (' A 109  GLY  HA2', ' A 200  ILE  CD1', -0.534, (6.65, -9.63, -8.497)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.533, (6.557, -9.629, -7.807)), (' B 210  ALA  HB2', ' B 296  VAL HG13', -0.53, (11.053, 11.005, -24.282)), (' A 245  ASP  O  ', ' A 249  ILE HG12', -0.522, (-0.745, -19.968, -4.742)), (' A   5  LYS  HG2', ' A 127  GLN  HB3', -0.516, (-0.246, -1.403, -14.303)), (' A  32  LEU HD13', ' A 101  TYR  CE2', -0.513, (-5.147, 6.274, 6.128)), (' B 276  MET  HE2', ' B 280  THR  HA ', -0.513, (15.555, -3.168, -26.222)), (' A 114  VAL HG11', ' A 140  PHE  HZ ', -0.509, (4.67, 5.915, -8.26)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.509, (11.264, 1.625, 4.238)), (' B  49  MET  HA ', ' B  49  MET  HE2', -0.508, (-28.22, -2.332, -33.429)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.507, (0.349, 3.278, -5.451)), (' B 169  THR  HB ', ' B 171  VAL HG22', -0.502, (-9.959, -4.846, -34.27)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.5, (-9.378, 13.272, 5.535)), (' A 124  GLY  HA2', ' B   9  PRO  HD3', -0.499, (-2.604, 11.565, -13.598)), (' A   5  LYS  NZ ', ' A 290  GLU  OE2', -0.495, (4.904, -3.132, -13.964)), (' A 280  THR  HB ', ' A 284  SER  O  ', -0.492, (5.806, -9.941, -27.681)), (' B 140  PHE  HB2', ' B 172  HIS  CE1', -0.491, (-12.826, -3.589, -25.474)), (' A 267  SER  O  ', ' A 271  LEU  HG ', -0.488, (7.478, -21.139, -23.298)), (' B 104  VAL HG21', ' B 158  SER  HB3', -0.487, (-9.908, 18.077, -25.125)), (' B  10  SER  HB2', ' B 115  LEU HD13', -0.483, (-10.694, 7.573, -13.891)), (' A  22  CYS  HB3', ' A  42  VAL HG22', -0.477, (10.645, 19.736, 5.543)), (' A   4  ARG HH12', ' B   5  LYS  HZ3', -0.476, (-0.443, 1.096, -24.398)), (' A  83  GLN  HG2', ' A 178  GLU  O  ', -0.475, (5.91, 3.663, 11.436)), (' A   6  MET  HE2', ' B 126  TYR  CD2', -0.47, (-7.327, -0.849, -18.832)), (' B  75  LEU  HA ', ' B  75  LEU HD23', -0.467, (-31.907, 11.71, -10.229)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.466, (13.507, -24.157, -18.574)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.466, (-0.458, 7.249, -32.756)), (' B 104  VAL  O  ', ' B 160  CYS  HA ', -0.465, (-12.712, 14.196, -27.358)), (' A 106  ILE  C  ', ' A 106  ILE HD12', -0.465, (4.338, -6.722, -0.617)), (' A 212  VAL HG21', ' A 259  ILE HD12', -0.464, (-3.702, -22.017, -21.338)), (' B 186  VAL  O  ', ' B 188  ARG  N  ', -0.462, (-22.74, 0.035, -35.974)), (' B 130  MET  HB2', ' B 130  MET  HE2', -0.458, (-7.69, 8.106, -30.304)), (' A  40  ARG  HD2', ' A  82  MET  HE2', -0.456, (12.619, 10.767, 11.047)), (' B  45  THR  C  ', ' B  47  GLU  H  ', -0.456, (-32.108, -6.957, -30.528)), (' B 131  ARG  HD3', ' B 137  LYS  HD2', -0.451, (-2.6, 0.125, -31.086)), (' B  40  ARG  NE ', ' B 187  ASP  OD2', -0.449, (-26.346, 5.146, -33.321)), (' A  83  GLN  HB3', ' A  86  VAL  CG1', -0.449, (6.035, 6.126, 10.645)), (' A  36  VAL HG21', ' A  68  VAL HG11', -0.447, (-0.571, 18.088, 6.489)), (' B  62  SER  O  ', ' B  65  ASN  HB2', -0.447, (-38.781, 6.594, -22.295)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.446, (11.799, 8.415, 9.666)), (' A 163  HIS  NE2', ' A 172  HIS  HB3', -0.446, (11.121, 6.011, -5.585)), (' B  46  SER  HA ', ' B  49  MET  CG ', -0.445, (-28.294, -5.232, -31.489)), (' A  10  SER  OG ', ' A 115  LEU HD13', -0.445, (-4.398, 8.814, -8.602)), (' A  44  CYS  CB ', ' A  49  MET  HG3', -0.443, (18.127, 14.923, 5.496)), (' B  54  TYR  HB3', ' B  82  MET  HE1', -0.443, (-31.227, 6.522, -32.865)), (' B  86  VAL HG23', ' B 179  GLY  HA2', -0.443, (-21.803, 10.279, -30.14)), (' A 218  TRP  CZ2', ' A 279  ARG  HB2', -0.437, (4.938, -16.316, -30.555)), (' B 141  LEU  HG ', ' B 142  ASN  N  ', -0.434, (-16.977, -7.915, -20.323)), (' A 210  ALA  O  ', ' A 214  ASN  ND2', -0.434, (-5.808, -13.324, -22.546)), (' A 199  THR HG23', ' A 289  ASP  OD2', -0.434, (9.822, -11.415, -14.124)), (' A 132  PRO  HD3', ' A 200  ILE HD11', -0.431, (9.171, -9.197, -8.515)), (' A  79  GLY  O  ', ' A  90  LYS  N  ', -0.431, (1.24, 16.784, 13.727)), (' A  84  ASN  HB2', ' A 179  GLY  O  ', -0.43, (9.843, 3.16, 9.318)), (' B 276  MET  CE ', ' B 280  THR  HA ', -0.429, (15.129, -3.165, -26.562)), (' B  89  LEU  HA ', ' B  89  LEU HD23', -0.429, (-31.959, 12.112, -22.403)), (' A 282  LEU  O  ', ' A 282  LEU HD12', -0.429, (1.0, -8.25, -24.928)), (' A 107  GLN  H  ', ' A 110  GLN  HG3', -0.426, (2.891, -8.514, -1.676)), (' B  76  ARG  HB3', ' B  92  ASP  HB2', -0.423, (-35.632, 13.72, -12.706)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.422, (-5.786, -3.043, -17.121)), (' A 167  LEU  HA ', ' A 167  LEU HD23', -0.422, (19.857, 5.711, -5.173)), (' B 270  GLU  HG2', ' B 274  ASN  ND2', -0.42, (21.328, -1.379, -37.367)), (' A 141  LEU  HA ', ' A 141  LEU HD12', -0.412, (13.555, 11.625, -9.499)), (' B 131  ARG  NH2', ' B 289  ASP  OD2', -0.411, (0.702, 2.274, -33.153)), (' A 106  ILE HD12', ' A 107  GLN  O  ', -0.41, (4.845, -7.133, -2.233)), (' A 225  THR  HB ', ' A 269  LYS  NZ ', -0.408, (9.852, -28.333, -17.976)), (' B  35  VAL  HA ', ' B  89  LEU  O  ', -0.408, (-29.051, 14.823, -19.667)), (' A 109  GLY  CA ', ' A 200  ILE HD13', -0.407, (6.597, -10.117, -7.389)), (' B  42  VAL HG13', ' B  43  ILE HG23', -0.407, (-30.972, 3.465, -25.274)), (' B 298  ARG  HG2', ' B 299  GLN  HG3', -0.407, (4.593, 13.761, -18.222)), (' A 222  ARG  HG2', ' A 222  ARG HH11', -0.404, (4.013, -33.044, -28.576)), (' B 276  MET  HE1', ' B 284  SER  O  ', -0.403, (13.361, -2.996, -26.146)), (' A   4  ARG  NE ', ' B 137  LYS  O  ', -0.403, (-4.615, -0.424, -25.289)), (' A  67  LEU  HA ', ' A  67  LEU HD13', -0.403, (3.31, 25.4, 6.839)), (' B  83  GLN  NE2', ' B 178  GLU  HG2', -0.403, (-22.103, 17.394, -30.385)), (' A  21  THR  HB ', ' A  67  LEU  HB2', -0.402, (6.091, 24.496, 4.021)), (' B  77  VAL HG11', ' B  89  LEU HD22', -0.401, (-33.452, 10.369, -20.643)), (' B 221  ASN HD21', ' B 223  PHE  HB2', -0.4, (22.448, 6.315, -39.578))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
