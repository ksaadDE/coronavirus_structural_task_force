# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  23 ', 'GLY', 0.04802907387980607, (-27.028, 18.384, -41.819999999999986)), ('A', ' 193 ', 'ALA', 0.0478853732835703, (-14.546000000000008, 9.264999999999993, -14.881999999999996)), ('A', ' 305 ', 'PHE', 0.00028898226697819207, (19.535, 35.931999999999974, -16.993))]
data['omega'] = [('A', ' 304 ', 'THR', None, (20.798000000000012, 34.148, -20.58599999999999))]
data['rota'] = [('A', ' 154 ', 'TYR', 0.29780005891270367, (11.466, 23.007, -37.96099999999999))]
data['cbeta'] = []
data['probe'] = [(' A 214  ASN  HA ', ' A 305  PHE  HB3', -0.899, (16.875, 34.389, -16.831)), (' A 229  ASP  OD2', ' A 501  HOH  O  ', -0.884, (19.03, 9.027, -0.098)), (' A 215  GLY  N  ', ' A 305  PHE  O  ', -0.825, (17.754, 34.214, -14.352)), (' A 304  THR HG22', ' A 306  GLN  HG3', -0.772, (23.945, 33.348, -16.457)), (' A 240  GLU  OE1', ' A 502  HOH  O  ', -0.744, (5.427, 12.341, -16.139)), (' A 110  GLN  HG3', ' A 572  HOH  O  ', -0.688, (5.604, 13.488, -26.204)), (' A  58  LEU HD22', ' A  82  MET  HE3', -0.671, (-18.28, 6.481, -40.389)), (' A 304  THR  O  ', ' A 306  GLN  N  ', -0.6, (21.145, 34.289, -16.751)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.6, (-26.538, 4.51, -40.758)), (' A 119  ASN  ND2', ' A 504  HOH  O  ', -0.599, (-21.155, 27.336, -37.853)), (' A 277  ASN  ND2', ' A 503  HOH  O  ', -0.509, (9.954, 33.401, 5.588)), (' A 294  PHE  CE2', ' A 298  ARG  HD3', -0.499, (10.868, 23.459, -29.227)), (' A 217  ARG  NH2', ' A 509  HOH  O  ', -0.485, (20.205, 36.729, -9.393)), (' A  52  PRO  HG2', ' A  54  TYR  CE2', -0.484, (-21.24, 7.904, -31.455)), (' A 215  GLY  HA2', ' A 306  GLN  C  ', -0.48, (19.859, 34.979, -12.504)), (' A  14  GLU  HG2', ' A 122  PRO  HG2', -0.476, (-5.719, 30.234, -38.579)), (' A 190  THR  O  ', ' A 192  GLN  HG3', -0.473, (-19.257, 9.885, -20.107)), (' A 132  PRO  HD2', ' A 197  ASP  OD1', -0.46, (-2.158, 14.975, -14.714)), (' A 303  VAL HG12', ' A 305  PHE  N  ', -0.456, (19.612, 35.161, -19.058)), (' A 303  VAL HG12', ' A 304  THR  N  ', -0.455, (19.875, 34.692, -20.273)), (' A   5  LYS  HE3', ' A 291  PHE  CZ ', -0.437, (4.423, 28.189, -19.416)), (' A  47  GLU  CD ', ' A  47  GLU  H  ', -0.436, (-31.137, 15.064, -31.507)), (' A 167  LEU  HB2', ' A 171  VAL HG22', -0.434, (-12.698, 16.878, -17.742)), (' A 303  VAL HG13', ' A 562  HOH  O  ', -0.432, (18.147, 36.452, -21.84)), (' A 304  THR  CG2', ' A 306  GLN  HG3', -0.426, (23.788, 33.208, -16.924)), (' A 212  VAL HG21', ' A 264  MET  HE1', -0.424, (17.783, 26.166, -10.601)), (' A 168  PRO  HG3', ' A 401  H6F  C30', -0.421, (-19.354, 14.707, -16.237)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.416, (8.344, 30.429, -6.045)), (' A   5  LYS  HA ', ' A   5  LYS  HD3', -0.415, (4.314, 28.793, -21.641)), (' A 303  VAL HG12', ' A 305  PHE  H  ', -0.414, (19.67, 35.416, -19.253)), (' A  12  LYS  NZ ', ' A 155  ASP  HA ', -0.411, (8.209, 24.171, -40.874)), (' A 121  SER  HA ', ' A 122  PRO  HD3', -0.404, (-10.429, 29.973, -39.573)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.401, (7.167, 31.579, -24.921))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
