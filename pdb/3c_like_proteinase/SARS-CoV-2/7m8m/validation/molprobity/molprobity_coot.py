# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 257 ', 'THR', 0.004984179574480798, (-8.063, -23.319, -19.404))]
data['omega'] = []
data['rota'] = [('A', '  49 ', 'MET', 0.1389403018469898, (-29.195, -5.510999999999998, -33.151)), ('A', '  62 ', 'SER', 0.1740317786965424, (-41.071, 7.576, -22.281)), ('B', '  22 ', 'CYS', 0.21308023474354912, (9.934, 22.299, 5.86)), ('B', '  47 ', 'GLU', 0.00869491742018557, (23.91, 19.046, 4.382)), ('B', '  49 ', 'MET', 0.0544139356091761, (20.99, 14.529999999999998, 4.076)), ('B', '  50 ', 'LEU', 0.02837154252702612, (24.561, 13.213, 4.049)), ('B', '  57 ', 'LEU', 0.07607899577280443, (16.648999999999987, 17.179, 13.885)), ('B', ' 165 ', 'MET', 0.1424523222152447, (14.071, 7.7119999999999935, -2.946)), ('B', ' 177 ', 'LEU', 0.09085785406646144, (2.874000000000001, 3.7280000000000006, 5.934)), ('B', ' 188 ', 'ARG', 0.1400683472622936, (20.376, 8.930999999999997, 3.774)), ('B', ' 216 ', 'ASP', 0.12558173333353195, (-2.713, -16.611999999999995, -27.433)), ('B', ' 256 ', 'GLN', 0.24386912024223004, (-10.538, -22.504, -16.644)), ('B', ' 257 ', 'THR', 0.022915065346751362, (-8.063, -23.319, -19.404)), ('B', ' 273 ', 'GLN', 0.02485433031417495, (15.87, -21.62, -23.129))]
data['cbeta'] = []
data['probe'] = [(' B  22  CYS  SG ', ' B  61  LYS  NZ ', -0.941, (11.131, 21.635, 8.45)), (' B 257  THR HG22', ' B 259  ILE  H  ', -0.908, (-5.144, -25.207, -18.977)), (' B  49  MET  HA ', ' B  49  MET  HE3', -0.845, (19.524, 13.189, 4.091)), (' A  50  LEU  O  ', ' A 188  ARG  HD2', -0.72, (-27.285, -3.88, -38.869)), (' A 189  GLN  HG2', ' A 189  GLN  O  ', -0.716, (-23.551, -8.804, -35.508)), (' A 231  ASN  HB3', ' A 235  MET  HE3', -0.709, (6.97, 7.3, -46.726)), (' B 226  THR  HA ', ' B 262  LEU HD23', -0.7, (6.292, -29.934, -11.451)), (' B 226  THR  HA ', ' B 262  LEU  CD2', -0.679, (5.852, -31.008, -11.765)), (' B 224  THR HG22', ' B 225  THR  N  ', -0.658, (4.999, -31.451, -15.759)), (' A 188  ARG  NH1', ' A 190  THR HG21', -0.633, (-25.682, -4.142, -41.115)), (' B 253  LEU  O  ', ' B 257  THR  HB ', -0.623, (-6.464, -22.119, -17.374)), (' B 257  THR HG23', ' B 259  ILE HG12', -0.611, (-4.831, -24.13, -20.804)), (' B  34  ASP  OD2', ' B  90  LYS  NZ ', -0.601, (-5.776, 13.829, 15.83)), (' B 262  LEU  H  ', ' B 262  LEU HD12', -0.599, (1.726, -28.33, -13.109)), (' A 285  ALA  HB3', ' B 285  ALA  HB3', -0.595, (10.519, -7.926, -26.791)), (' B 159  PHE  HB3', ' B 177  LEU HD13', -0.592, (-0.051, 3.796, 2.551)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.59, (-5.858, 21.656, -18.319)), (' A 126  TYR  CD2', ' B   6  MET  HG2', -0.587, (-7.017, -0.919, -18.02)), (' B 230  PHE  O  ', ' B 233  VAL HG12', -0.586, (12.863, -24.795, -14.022)), (' A 286  LEU HD22', ' A 686  HOH  O  ', -0.584, (7.891, -6.215, -32.374)), (' B 276  MET  HE3', ' B 279  ARG  O  ', -0.58, (7.777, -12.913, -28.352)), (' B  62  SER  HB3', ' B  64  HIS  CE1', -0.579, (8.295, 25.766, 16.201)), (' B 220  LEU HD22', ' B 259  ILE HD12', -0.57, (-1.753, -25.41, -22.544)), (' B  49  MET  CE ', ' B  49  MET  HA ', -0.566, (19.207, 13.449, 4.607)), (' B 108  PRO  HG3', ' B 134  PHE  CE1', -0.547, (9.913, -7.772, -0.424)), (' B  24  THR HG21', ' B 496  HOH  O  ', -0.545, (16.507, 24.749, -1.731)), (' A  86  VAL HG23', ' A 179  GLY  HA2', -0.535, (-21.989, 9.193, -29.413)), (' B 266  ALA  O  ', ' B 270  GLU  HG2', -0.525, (7.91, -26.161, -21.894)), (' B 276  MET  O  ', ' B 279  ARG  NE ', -0.513, (11.117, -15.496, -31.285)), (' B  41  HIS  HD2', ' B 452  HOH  O  ', -0.506, (13.742, 15.233, 1.633)), (' B 271  LEU  O  ', ' B 275  GLY  HA2', -0.505, (12.308, -18.487, -24.693)), (' B 224  THR  CG2', ' B 225  THR  N  ', -0.502, (4.383, -31.704, -16.0)), (' A  55  GLU  OE2', ' A 501  HOH  O  ', -0.5, (-30.393, 8.271, -37.231)), (' B 224  THR HG22', ' B 225  THR  H  ', -0.499, (4.815, -31.267, -15.751)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.486, (0.197, 3.361, -5.01)), (' A 235  MET  SD ', ' A 645  HOH  O  ', -0.474, (5.884, 5.559, -48.296)), (' B 236  LYS  HD2', ' B 236  LYS  O  ', -0.466, (20.96, -19.922, -15.332)), (' B 131  ARG  HG2', ' B 135  THR  O  ', -0.463, (10.619, -3.819, -7.525)), (' A 126  TYR  CE2', ' B   6  MET  HE2', -0.461, (-8.879, -1.856, -18.583)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.46, (-9.96, 7.753, -21.196)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.458, (-39.813, 5.449, -32.374)), (' B  62  SER  HB3', ' B  64  HIS  NE2', -0.454, (8.041, 25.876, 16.944)), (' B 226  THR  CA ', ' B 262  LEU HD23', -0.452, (6.541, -30.446, -11.84)), (' B  55  GLU  O  ', ' B  59  ILE HG12', -0.448, (15.071, 14.713, 18.417)), (' B 260  ALA  O  ', ' B 263  ASP  HB3', -0.447, (0.274, -27.39, -17.4)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.443, (-0.831, 6.804, -32.424)), (' B 127  GLN  HG2', ' B 422  HOH  O  ', -0.442, (-0.939, -4.405, -12.065)), (' A 188  ARG HH11', ' A 190  THR HG21', -0.439, (-26.595, -3.833, -40.756)), (' B 110  GLN  HG2', ' B 455  HOH  O  ', -0.439, (-0.155, -10.048, -3.767)), (' A 126  TYR  HD2', ' B   6  MET  HG2', -0.437, (-7.272, -0.336, -17.256)), (' B 224  THR  CG2', ' B 225  THR  H  ', -0.42, (4.629, -31.087, -15.703)), (' B 220  LEU HD13', ' B 259  ILE HD11', -0.418, (-3.35, -25.29, -23.46)), (' B 270  GLU  OE2', ' B 401  HOH  O  ', -0.417, (9.217, -28.331, -22.504)), (' A 102  LYS  HE3', ' A 158  SER  OG ', -0.415, (-9.735, 19.306, -23.109)), (' B 264  MET  O  ', ' B 267  SER  HB2', -0.415, (4.067, -23.508, -19.854)), (' A 231  ASN  O  ', ' A 235  MET  HG3', -0.414, (7.315, 4.877, -45.502)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.413, (-13.252, 4.134, -12.669)), (' B 257  THR HG22', ' B 259  ILE  N  ', -0.411, (-4.924, -25.069, -18.971)), (' B  67  LEU  HG ', ' B  74  GLN HE22', -0.411, (2.149, 27.164, 6.369)), (' A  92  ASP  OD1', ' A  93  THR HG23', -0.407, (-32.99, 15.131, -10.427)), (' A 288  GLU  HG2', ' A 291  PHE  HE2', -0.405, (5.553, 3.041, -24.272)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.405, (-18.532, 6.933, -32.581)), (' B 153  ASP  O  ', ' B 154  TYR  HB2', -0.404, (-13.59, -2.95, -0.315)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.403, (13.11, 14.636, 8.586)), (' B 261  VAL  O  ', ' B 265  CYS  N  ', -0.402, (3.292, -24.695, -16.082)), (' A 166  GLU  OE2', ' B   1  SER  HB2', -0.401, (-12.925, -8.797, -27.005)), (' A 288  GLU  HG2', ' A 291  PHE  CE2', -0.401, (5.612, 3.255, -24.433))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
