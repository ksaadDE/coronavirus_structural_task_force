# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', ' 100 ', 'GLY', 0.027579583464187027, (72.07, -10.858999999999996, -8.782)), ('H', ' 134 ', 'GLY', 0.05113587055656647, (22.238999999999994, 7.626, -29.486))]
data['omega'] = [('H', ' 147 ', 'PRO', None, (56.31099999999999, 24.05699999999999, -21.374)), ('H', ' 149 ', 'PRO', None, (53.764, 19.621, -17.81)), ('L', '   8 ', 'PRO', None, (56.18700000000001, -12.002, -28.632)), ('L', '  95 ', 'PRO', None, (78.71900000000002, -3.182999999999999, -24.95)), ('L', ' 141 ', 'PRO', None, (40.56500000000001, -5.143999999999998, -30.081999999999994))]
data['rota'] = [('H', '  12 ', 'ILE', 0.107842301328532, (67.63, 22.665, -20.432)), ('H', '  13 ', 'GLN', 0.02080266290118425, (68.50899999999997, 23.721, -23.975)), ('H', '  94 ', 'ARG', 0.062258874858790995, (73.422, -0.944, -8.565)), ('L', ' 102 ', 'THR', 0.02991853980347514, (56.98199999999999, -7.025, -24.716999999999995)), ('L', ' 105 ', 'GLU', 0.0624888609815823, (47.927, -6.690999999999998, -22.003)), ('E', ' 516 ', 'GLU', 0.2515922364609091, (113.591, -8.153999999999996, -15.438)), ('E', ' 518 ', 'LEU', 0.013408260257426268, (118.238, -6.204, -11.910999999999996))]
data['cbeta'] = [('H', '   1 ', 'PCA', ' ', 0.3450784568567285, (66.158, 2.588, 3.837999999999999)), ('L', '   1 ', 'PCA', ' ', 0.29979114411190777, (76.24100000000001, -4.083, -28.836))]
data['probe'] = [(' E 412  PRO  HG3', ' E 429  PHE  HB3', -0.732, (102.937, -3.227, -20.719)), (' H  32  ASN  HB2', ' H  34  MET  HE2', -0.589, (77.292, 0.214, -5.536)), (' H   2  VAL  O  ', ' H   2  VAL HG12', -0.58, (66.447, -0.152, -1.516)), (' L 120  PRO  HD3', ' L 132  VAL HG22', -0.559, (39.181, 20.406, -40.044)), (' E 355  ARG  NH2', ' E 701  HOH  O  ', -0.555, (107.322, -9.755, -12.37)), (' H 119  PRO  HB3', ' H 145  TYR  HB3', -0.553, (49.598, 24.605, -24.575)), (' H 116  THR HG22', ' H 147  PRO  HD3', -0.518, (58.267, 26.188, -20.657)), (' E 366  SER  O  ', ' E 370  ASN  ND2', -0.502, (109.303, -18.498, -34.828)), (' E 329  PHE  CE2', ' E 528  LYS  HB2', -0.498, (123.664, -14.285, -28.346)), (' H 166  PHE  O  ', ' H 178  LEU HD11', -0.491, (46.571, 13.952, -24.039)), (' L 144  ALA  HB2', ' L 198  HIS  HD2', -0.487, (41.455, -0.91, -34.378)), (' L 142  ARG  NH1', ' L 302  HOH  O  ', -0.485, (47.518, 1.754, -31.236)), (' E 387  LEU HD21', ' E 515  PHE  CZ ', -0.477, (110.613, -11.362, -24.287)), (' H  23  ALA  HA ', ' H  77  THR HG22', -0.477, (73.053, 10.01, -2.631)), (' L 113  PRO  HB3', ' L 139  PHE  HB3', -0.469, (37.259, 0.975, -31.011)), (' H  34  MET  HB3', ' H  78  LEU HD22', -0.447, (75.737, 4.72, -9.095)), (' L 158  ASN  N  ', ' L 158  ASN  OD1', -0.442, (50.1, 14.348, -43.064)), (' E 431  GLY  HA2', ' E 515  PHE  CE2', -0.438, (108.981, -9.036, -22.773)), (' H 168  ALA  HA ', ' H 178  LEU HD13', -0.436, (48.702, 15.227, -25.09)), (' E 433  VAL HG22', ' E 512  VAL HG22', -0.43, (100.66, -11.037, -20.72)), (' H  87  THR HG23', ' H 110  THR  HA ', -0.425, (63.737, 16.119, -22.101)), (' L  33  LEU HD22', ' L  71  PHE  CD2', -0.425, (68.256, -16.213, -21.732)), (' L   1  PCA  HB2', ' L   2  ILE  H  ', -0.425, (75.492, -5.251, -27.817)), (' H  22  CYS  HB3', ' H  78  LEU  HB3', -0.423, (73.984, 8.078, -7.838)), (' H  20  LEU  HG ', ' H  82  MET  HE2', -0.419, (71.613, 13.984, -15.539)), (' H 139  GLY  HA2', ' H 154  TRP  CH2', -0.419, (35.583, 18.313, -24.729)), (' H  82  MET  HE1', ' H 109  VAL HG21', -0.418, (69.285, 14.311, -17.306)), (' H 128  SER  OG ', ' H 129  LYS  N  ', -0.413, (24.552, 15.427, -36.758)), (' E 520  ALA  HB1', ' E 521  PRO  HD2', -0.41, (123.42, -10.645, -10.584)), (' H  47  TRP  HZ2', ' H  50  VAL HG12', -0.409, (79.127, 1.384, -17.789)), (' E 427  ASP  N  ', ' E 427  ASP  OD1', -0.408, (100.837, 0.649, -15.871)), (' L  23  CYS  HB2', ' L  35  TRP  CH2', -0.405, (63.149, -12.496, -23.345))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
