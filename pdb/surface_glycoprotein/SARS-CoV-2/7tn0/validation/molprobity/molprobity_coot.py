# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', '   8 ', 'PRO', None, (30.600999999999996, -14.972, -7.238)), ('A', ' 141 ', 'PRO', None, (41.66, -10.385, -20.28)), ('B', ' 161 ', 'PRO', None, (55.11200000000001, -40.185, -12.068)), ('B', ' 163 ', 'PRO', None, (56.017, -34.681, -9.492)), ('C', ' 161 ', 'PRO', None, (-5.707999999999995, -37.782, 155.206)), ('C', ' 163 ', 'PRO', None, (-6.315999999999992, -32.107000000000006, 153.237)), ('D', '   8 ', 'PRO', None, (20.208, -14.059, 152.409)), ('D', ' 141 ', 'PRO', None, (9.458000000000009, -9.711, 165.619)), ('E', ' 146 ', 'PRO', None, (-3.8869999999999987, 21.174, 3.5179999999999993)), ('F', ' 146 ', 'PRO', None, (55.133, 25.351, 138.215)), ('G', '   8 ', 'PRO', None, (24.736000000000004, -2.6739999999999995, 66.036)), ('G', '  95 ', 'PRO', None, (34.68300000000001, -12.329, 42.64)), ('G', ' 142 ', 'PRO', None, (31.648, 14.948999999999998, 78.192)), ('H', ' 154 ', 'PRO', None, (43.238, 20.576999999999998, 47.174)), ('H', ' 156 ', 'PRO', None, (44.577, 16.162, 51.293)), ('M', ' 154 ', 'PRO', None, (7.277999999999999, 22.563, 93.929)), ('M', ' 156 ', 'PRO', None, (6.014000000000001, 17.768, 90.157)), ('N', '   8 ', 'PRO', None, (25.72, -2.033, 76.37)), ('N', '  95 ', 'PRO', None, (15.696, -9.809, 100.512)), ('N', ' 142 ', 'PRO', None, (18.47, 14.779, 63.032999999999994))]
data['rota'] = [('A', '  34 ', 'LEU', 0.10947481492964402, (30.335000000000004, -21.363, 9.415)), ('B', '  59 ', 'ASN', 0.1815988705174634, (33.433, -39.264, 12.297)), ('B', ' 130 ', 'THR', 0.09911581438610334, (57.085999999999984, -44.514, -13.174)), ('C', '  23 ', 'LYS', 0.19016333257661916, (-2.889999999999997, -31.894, 130.272)), ('C', '  25 ', 'SER', 0.26760799275704467, (-3.314999999999996, -26.601999999999993, 126.107)), ('C', ' 205 ', 'THR', 0.17637957384934339, (-23.956999999999994, -14.786999999999999, 175.351)), ('C', ' 210 ', 'CYS', 0.12662037597738396, (-15.710999999999995, -24.583, 165.338)), ('E', ' 107 ', 'VAL', 0.27554064232973297, (-22.430999999999994, -5.527999999999998, 25.152)), ('E', ' 335 ', 'ASP', 0.2136667266535395, (15.070000000000002, 11.496000000000002, 6.789)), ('E', ' 401 ', 'HIS', 0.07195239020189362, (2.749, 11.075, 29.379)), ('F', '  79 ', 'LEU', 0.09180856890181915, (61.202, -12.828, 113.869)), ('F', ' 401 ', 'HIS', 0.14039102218793728, (47.752, 13.853999999999997, 112.785)), ('F', ' 431 ', 'ASP', 0.0, (34.71299999999999, 43.948, 112.5)), ('G', ' 186 ', 'ASP', 0.2776674918163309, (36.498999999999995, 44.18699999999999, 60.294000000000004)), ('H', ' 145 ', 'LEU', 0.01759999800654816, (50.134999999999984, 26.508999999999997, 71.116)), ('M', ' 219 ', 'GLU', 0.27244983153291885, (-7.321999999999997, 31.226, 70.752)), ('S', ' 339 ', 'ASP', 0.03684683271662731, (13.669000000000008, -21.908, 117.844)), ('S', ' 382 ', 'VAL', 0.2607540295991763, (13.603000000000003, -18.202000000000005, 97.034))]
data['cbeta'] = [('S', ' 370 ', 'ASN', ' ', 0.26906332339319966, (8.043000000000003, -8.664, 111.87800000000001))]
data['probe'] = [(' S 371  LEU  HB3', ' S 375  PHE  HD2', -0.844, (15.426, -9.258, 113.098)), (' B  32  TYR  O  ', ' B1101  HOH  O  ', -0.808, (44.166, -33.247, 18.103)), (' S 354  ASN  OD1', ' S 356  LYS  NZ ', -0.774, (23.815, -27.901, 115.908)), (' S 393  THR HG23', ' S 517  LEU HD12', -0.691, (12.999, -31.644, 97.466)), (' G  11  LEU HD22', ' G 105  VAL HG13', -0.682, (30.757, -0.299, 70.918)), (' N  33  LEU HD21', ' N  88  CYS  HB2', -0.667, (19.275, -8.414, 84.247)), (' C 226  GLU  OE2', ' C 401  HOH  O  ', -0.664, (-22.281, -21.513, 174.387)), (' N  52  SER  O  ', ' N 401  HOH  O  ', -0.654, (12.83, -16.023, 76.685)), (' B  91  THR HG23', ' B 124  THR  HA ', -0.641, (47.159, -39.053, -7.975)), (' A  38  GLN  HB2', ' A  48  LEU HD11', -0.639, (41.103, -16.21, 3.365)), (' D 112  ALA  O  ', ' D 401  HOH  O  ', -0.638, (1.7, -8.732, 170.61)), (' S 371  LEU  HB3', ' S 375  PHE  CD2', -0.629, (15.782, -9.266, 113.636)), (' S 388  ASN  HB3', ' S 527  PRO  HD2', -0.629, (3.486, -21.22, 105.077)), (' H  41  THR  OG1', ' H 301  HOH  O  ', -0.623, (34.225, 10.61, 53.238)), (' G  15  VAL HG22', ' G 107  ILE HD11', -0.616, (37.739, 2.414, 77.389)), (' I 393  THR HG23', ' I 517  LEU HD12', -0.611, (37.623, -33.759, 46.231)), (' I 388  ASN  HB3', ' I 527  PRO  HD2', -0.609, (46.637, -23.514, 38.16)), (' H 202  ILE HG12', ' H 217  LYS  HA ', -0.601, (59.298, 26.682, 64.357)), (' H   6  GLU  HG3', ' H 113  GLY  H  ', -0.597, (46.922, 4.06, 51.241)), (' E 462  MET  HE3', ' E 468  ILE HD11', -0.593, (-24.045, 21.635, 27.314)), (' I 449  TYR  OH ', ' I 498  ARG  NH2', -0.59, (8.272, -14.76, 17.587)), (' C  91  THR HG23', ' C 124  THR  HA ', -0.584, (2.336, -36.305, 150.941)), (' M  47  TRP  HE1', ' M  50  THR  HG1', -0.584, (10.989, -4.919, 98.483)), (' S 360  ASN  H  ', ' S 523  THR  HB ', -0.579, (10.821, -34.01, 106.208)), (' E 445  THR  O  ', ' E 449  THR  OG1', -0.578, (-3.677, 26.257, 23.8)), (' F  21  ILE HD11', ' F  84  PRO  HD2', -0.576, (63.877, -13.833, 103.571)), (' N  38  GLN  O  ', ' N  84  ALA  HB1', -0.576, (12.217, 2.587, 77.801)), (' D 108  ARG  NH2', ' D 404  HOH  O  ', -0.573, (-0.079, -4.148, 164.42)), (' F 402  GLU  HB2', ' F 518  ARG  HG3', -0.567, (50.666, 18.476, 113.841)), (' E 501  ALA  O  ', ' E 507  SER  OG ', -0.565, (-16.31, 15.916, 12.859)), (' C  28  PRO  HB3', ' S 335  LEU HD13', -0.56, (3.428, -26.85, 117.431)), (' N  37  GLN  HB2', ' N  47  LEU HD11', -0.559, (11.808, -3.821, 77.414)), (' G  40  PRO  HB3', ' G 166  GLU  HG3', -0.555, (38.885, 9.994, 63.578)), (' G  38  GLN  O  ', ' G  84  ALA  HB1', -0.553, (38.127, 1.689, 63.728)), (' E 535  HIS  CD2', ' E 542  CYS  HB2', -0.552, (13.063, 28.372, 38.048)), (' G  33  LEU HD21', ' G  88  CYS  HB2', -0.549, (30.869, -9.873, 58.028)), (' C  35  SER  OG ', ' C  99  ASP  OD2', -0.549, (12.369, -29.154, 131.976)), (' E  41  TYR  OH ', ' I 500  THR  OG1', -0.549, (13.635, -5.534, 17.976)), (' E 389  PRO  HD2', ' E 392  LEU HD12', -0.548, (2.05, -3.977, 36.723)), (' H 126  PRO  HB3', ' H 152  TYR  HB3', -0.547, (46.49, 24.681, 52.198)), (' G  37  GLN  HB2', ' G  47  LEU HD11', -0.543, (38.856, -4.43, 64.56)), (' D  38  GLN  HB2', ' D  48  LEU HD11', -0.542, (9.451, -13.367, 141.148)), (' E 249  MET  HE2', ' E 256  ILE HG22', -0.54, (-13.034, 45.321, 18.959)), (' B 100  TYR  OH ', ' I 339  ASP  HB2', -0.538, (37.76, -24.994, 23.006)), (' I 382  VAL HG21', ' I 390  LEU  CD1', -0.534, (39.886, -23.113, 44.866)), (' H 158  THR  HB ', ' H 206  ASN  HB3', -0.532, (52.204, 16.744, 54.612)), (' E 476  LYS  HG3', ' E 480  MET  HE2', -0.532, (-24.717, 24.407, 25.88)), (' H   6  GLU  HG3', ' H 113  GLY  N  ', -0.525, (46.811, 4.282, 51.784)), (' G  40  PRO  HG3', ' G 302  EDO  H11', -0.525, (37.75, 7.582, 64.22)), (' F  34  HIS  CE1', ' S 493  ARG  HB3', -0.522, (43.845, -15.584, 116.645)), (' H   4  LEU  O  ', ' H 112  GLN  NE2', -0.52, (51.445, 2.082, 53.905)), (' G   5  THR HG22', ' G 301  EDO  H22', -0.52, (21.407, -5.43, 60.006)), (' S 444  LYS  HG2', ' S 448  ASN  HB2', -0.519, (34.275, -13.416, 126.799)), (' S 457  ARG  NH1', ' S 467  ASP  OD2', -0.519, (41.353, -27.787, 106.632)), (' I 382  VAL HG21', ' I 390  LEU HD11', -0.517, (39.483, -22.876, 45.418)), (' H  56  ASP  HB3', ' I 369  TYR  CG ', -0.516, (43.383, -15.704, 35.791)), (' A 190  LYS  HE3', ' A 210  ASN  HB3', -0.515, (53.079, -26.548, -46.69)), (' N  40  PRO  HB3', ' N 166  GLU  HG3', -0.514, (11.499, 10.541, 77.596)), (' F  79  LEU HD12', ' S 486  PHE  HD1', -0.512, (60.607, -16.255, 113.208)), (' E 402  GLU  HB2', ' E 518  ARG  HG3', -0.51, (-0.394, 15.521, 28.064)), (' E 144  LEU  HB2', ' E 168  TRP  CZ3', -0.506, (-11.62, 20.083, 6.019)), (' F  24  GLN  HG2', ' S 475  ALA  O  ', -0.501, (56.574, -19.487, 103.688)), (' E 592  PHE  CZ ', ' E 596  LYS  HE3', -0.499, (-4.692, 39.155, 37.267)), (' G  16  GLY  HA2', ' G  77  SER  OG ', -0.498, (37.135, -4.551, 79.948)), (' E 270  MET  N  ', ' E 802  HOH  O  ', -0.496, (-7.768, 26.92, 12.011)), (' I 393  THR HG23', ' I 517  LEU  HA ', -0.494, (36.429, -34.114, 45.904)), (' F 353  LYS  HD3', ' S 501  TYR  CZ ', -0.493, (39.271, -6.638, 120.333)), (' H 133  PRO  HD3', ' H 145  LEU HD12', -0.493, (53.062, 28.79, 71.096)), (' S 431  GLY  HA2', ' S 515  PHE  CD2', -0.489, (16.666, -21.744, 101.552)), (' A 137  ASN  ND2', ' B 197  THR HG21', -0.488, (56.3, -14.138, -24.602)), (' I 338  PHE  O  ', ' I 341  VAL HG22', -0.487, (34.184, -25.892, 28.727)), (' A  50  TYR  CZ ', ' I 601  NAG  H62', -0.486, (37.779, -18.714, 17.456)), (' C  50  TRP  CD2', ' C 102  ARG  HD2', -0.486, (14.902, -32.236, 127.861)), (' E 365  THR HG23', ' E 368  ASP  H  ', -0.485, (13.749, 21.718, 15.407)), (' F 180  TYR  HA ', ' F 183  TYR  HB3', -0.484, (73.819, 14.84, 125.56)), (' E 557  MET  HG2', ' E 569  ALA  HB1', -0.483, (2.9, 8.891, 38.984)), (' H  11  LEU  HB2', ' H 154  PRO  HG3', -0.481, (43.203, 17.982, 44.236)), (' G 161  GLN  HB3', ' H 176  VAL HG11', -0.48, (34.543, 25.4, 59.793)), (' N  16  GLY  HA2', ' N  77  SER  OG ', -0.48, (13.346, -4.757, 62.186)), (' A  32  THR HG22', ' I 441  LEU HD22', -0.479, (27.423, -19.154, 17.135)), (' M 219  GLU  HG2', ' M 220  PRO  HD2', -0.478, (-9.047, 30.996, 68.815)), (' C  50  TRP  CH2', ' C  52  SER  HB2', -0.478, (13.311, -34.242, 124.85)), (' N  11  LEU HD22', ' N 105  VAL HG13', -0.477, (19.555, 0.019, 70.815)), (' I 393  THR HG21', ' I 518  LEU  H  ', -0.475, (35.805, -35.55, 46.6)), (' M 126  PRO  HB3', ' M 152  TYR  HB3', -0.475, (4.085, 26.615, 88.401)), (' N  85  ILE HG13', ' N 304  EDO  H21', -0.475, (15.473, 5.489, 78.404)), (' I 354  ASN  OD1', ' I 356  LYS  HE2', -0.475, (26.377, -31.496, 27.722)), (' G  15  VAL  CG2', ' G 107  ILE HD11', -0.472, (37.443, 2.722, 78.251)), (' I 368  LEU HD22', ' I 377  PHE  CE1', -0.471, (35.284, -18.21, 35.006)), (' I 338  PHE  HE2', ' I 363  ALA  HB1', -0.471, (39.842, -26.663, 34.751)), (' E 431  ASP  HB3', ' E 434  THR  HB ', -0.469, (14.307, 39.326, 26.086)), (' C  89  ASP  HB3', ' C 421  HOH  O  ', -0.467, (12.059, -36.825, 150.404)), (' E  48  TRP  CZ3', ' E 359  LEU  HB2', -0.466, (10.267, 5.336, 14.739)), (' F  25  ALA  HB1', ' F  97  LEU HD11', -0.465, (57.657, -9.785, 104.973)), (' E  34  HIS  NE2', ' I 493  ARG  HB3', -0.463, (6.482, -18.393, 26.696)), (' F 148  LEU  O  ', ' F 152  MET  HG2', -0.462, (58.909, 31.933, 133.46)), (' C   6  GLN  H  ', ' C 119  GLN HE22', -0.462, (-3.747, -29.821, 137.01)), (' S 382  VAL HG21', ' S 390  LEU  CD1', -0.461, (10.311, -20.724, 98.162)), (' D  21  LEU HD23', ' D 102  THR  HB ', -0.461, (15.62, -14.405, 147.802)), (' S 493  ARG  NH2', ' S 702  HOH  O  ', -0.46, (50.777, -19.381, 115.609)), (' S 338  PHE  HE2', ' S 363  ALA  HB1', -0.46, (10.649, -23.495, 109.03)), (' E 477  TRP  CD2', ' E 500  PRO  HG3', -0.458, (-20.217, 22.892, 19.827)), (' E 394  ASN  HB3', ' E 562  LYS  HE3', -0.457, (-1.254, 2.88, 30.894)), (' M  56  ASP  HB3', ' S 369  TYR  CG ', -0.457, (7.114, -12.325, 107.321)), (' G  47  LEU  HA ', ' G  58  VAL HG21', -0.456, (42.226, -9.06, 63.979)), (' H  47  TRP  HE1', ' H  50  THR  HG1', -0.456, (39.521, -7.536, 43.814)), (' C  11  VAL  O  ', ' C  12  LYS  HD2', -0.455, (-2.37, -43.03, 146.786)), (' S 368  LEU  HB3', ' S 377  PHE  CZ ', -0.455, (13.234, -14.653, 107.765)), (' N 159  ASN  N  ', ' N 159  ASN  OD1', -0.452, (19.922, 35.492, 77.137)), (' G  43  ALA  HB2', ' H 111  GLY  O  ', -0.451, (45.661, 1.677, 55.423)), (' A  98  PHE  O  ', ' A 401  HOH  O  ', -0.449, (30.212, -27.11, -0.412)), (' M  11  LEU  HB2', ' M 154  PRO  HG3', -0.449, (6.782, 20.275, 97.007)), (' G  93  VAL HG22', ' I 380  TYR  CD2', -0.449, (28.512, -16.33, 45.612)), (' E 419  LYS  HE3', ' E 426  PRO  HA ', -0.446, (25.784, 33.542, 28.629)), (' E 382  ASP  HA ', ' E 385  TYR  CZ ', -0.445, (7.045, 3.611, 29.361)), (' S 382  VAL HG22', ' S 383  SER  N  ', -0.444, (11.73, -17.415, 98.074)), (' I 367  VAL  HB ', ' I 601  NAG  H83', -0.444, (38.408, -20.716, 28.064)), (' I 347  PHE  CE2', ' I 399  SER  HB2', -0.443, (26.23, -23.861, 28.459)), (' E 157  ASP  HB3', ' E 160  GLU  HB3', -0.443, (-9.93, 36.587, 3.746)), (' S 368  LEU HD22', ' S 377  PHE  CE1', -0.443, (15.16, -15.931, 108.438)), (' G   5  THR  O  ', ' G 301  EDO  H11', -0.443, (23.81, -6.705, 60.179)), (' E 303  ASP  OD1', ' E 304  ALA  N  ', -0.441, (22.34, 15.215, 13.014)), (' M  82  MET  HE1', ' M 116  LEU HD22', -0.44, (7.815, 10.313, 100.151)), (' E 335  ASP  N  ', ' E 335  ASP  OD1', -0.439, (14.926, 13.058, 7.9)), (' E 354  GLY  HA3', ' I 502  GLY  HA3', -0.439, (15.522, -4.373, 25.95)), (' F 192  ARG HH21', ' F 198  ASP  HB3', -0.439, (76.321, 12.295, 111.778)), (' E 382  ASP  OD1', ' E 385  TYR  OH ', -0.439, (5.372, 4.272, 27.983)), (' A  21  LEU HD23', ' A 102  THR  HB ', -0.437, (35.115, -15.8, -2.843)), (' G 159  ASN  N  ', ' G 159  ASN  OD1', -0.436, (30.0, 34.307, 62.235)), (' A  49  ILE HD13', ' A  55  ARG  HA ', -0.435, (38.202, -13.753, 11.365)), (' E 492  PRO  HD3', ' E 613  TYR  CG ', -0.435, (-25.624, 35.671, 12.397)), (' M 101  SER  OG ', ' M 401  HOH  O  ', -0.434, (7.911, -20.293, 85.472)), (' M  66  ARG  NH2', ' M  89  ASP  OD2', -0.433, (14.636, 10.046, 104.292)), (' G  23  CYS  HB2', ' G  35  TRP  CH2', -0.432, (29.092, -8.39, 61.833)), (' E 183  TYR  OH ', ' E 509  ASP  OD1', -0.431, (-17.317, 9.501, 21.058)), (' E 420  SER  HB2', ' E 710  NAG  O3 ', -0.431, (25.432, 24.505, 31.4)), (' E 453  THR HG23', ' E 512  PHE  CD2', -0.43, (-10.177, 19.995, 25.369)), (' I 354  ASN  O  ', ' I 398  ASP  HA ', -0.426, (25.121, -28.616, 32.467)), (' N  66  GLY  HA3', ' N  71  PHE  HA ', -0.425, (22.578, -14.087, 80.09)), (' F 303  ASP  OD1', ' F 304  ALA  N  ', -0.425, (27.879, 18.678, 129.173)), (' F 431  ASP  N  ', ' F 431  ASP  OD1', -0.424, (33.838, 42.264, 113.127)), (' C 210  CYS  O  ', ' C 222  ASP  HA ', -0.424, (-17.883, -27.472, 164.409)), (' H  82  MET  HB3', ' H  85  LEU HD21', -0.423, (40.185, 6.769, 38.422)), (' I 375  PHE  CD2', ' I 436  TRP  HB3', -0.421, (30.82, -14.203, 28.383)), (' F  79  LEU HD12', ' S 486  PHE  CD1', -0.421, (61.066, -16.531, 112.721)), (' B  51  ILE HD13', ' B  72  THR HG23', -0.42, (42.997, -40.742, 15.264)), (' E 284  PRO  HB3', ' E 594  TRP  CH2', -0.42, (2.603, 43.279, 25.684)), (' M  56  ASP  N  ', ' M  56  ASP  OD1', -0.42, (5.014, -10.273, 105.754)), (' N  37  GLN  O  ', ' N  45  LYS  N  ', -0.42, (8.92, -0.938, 82.118)), (' E 237  TYR  CE1', ' E 451  PRO  HG2', -0.419, (-9.854, 30.977, 27.641)), (' M   7  SER  N  ', ' M  21  SER  O  ', -0.419, (-0.385, 6.739, 95.826)), (' I 403  ARG  HG3', ' I 495  TYR  CD1', -0.417, (14.432, -15.549, 28.098)), (' E 545  SER  HB2', ' E 710  NAG  H82', -0.417, (20.885, 22.688, 33.765)), (' E 284  PRO  HG2', ' E 437  ASN  OD1', -0.417, (6.369, 40.736, 23.632)), (' E 249  MET  HE1', ' E 258  PRO  HA ', -0.416, (-13.368, 46.42, 21.573)), (' I 412  PRO  HB3', ' I 426  PRO  O  ', -0.415, (23.853, -22.163, 46.686)), (' I 457  ARG  NH1', ' I 467  ASP  OD2', -0.413, (9.613, -30.299, 37.744)), (' E 359  LEU  C  ', ' E 359  LEU HD23', -0.413, (10.556, 8.96, 13.013)), (' E 204  ARG  HG2', ' E 222  LEU HD23', -0.412, (-14.131, 13.28, 33.611)), (' G  66  GLY  HA3', ' G  71  PHE  HA ', -0.412, (27.852, -15.305, 63.385)), (' C  36  TRP  HB2', ' C  70  MET  HE2', -0.411, (9.381, -35.205, 136.208)), (' F 557  MET  HG2', ' F 569  ALA  HB1', -0.411, (47.294, 11.444, 102.881)), (' S 361  CYS  O  ', ' S 524  VAL  HA ', -0.41, (8.225, -30.157, 107.121)), (' M 155  GLU  OE1', ' M 156  PRO  HA ', -0.409, (7.16, 18.98, 87.479)), (' E  28  PHE  HE1', ' E  79  LEU HD23', -0.409, (-6.534, -16.692, 29.697)), (' C  36  TRP  CE2', ' C  81  MET  HB2', -0.409, (5.216, -35.566, 135.366)), (' S 412  PRO  HB3', ' S 426  PRO  O  ', -0.409, (26.551, -19.526, 97.203)), (' D  83  ASP  O  ', ' D  87  TYR  OH ', -0.409, (8.081, -10.666, 145.699)), (' M  34  MET  HB3', ' M  78  LEU HD22', -0.407, (2.413, -2.966, 97.432)), (' F 209  VAL HG11', ' F 565  PRO  HB3', -0.406, (56.134, 8.097, 99.281)), (' E 477  TRP  CE3', ' E 500  PRO  HG3', -0.406, (-19.999, 22.268, 20.05)), (' I 431  GLY  HA2', ' I 515  PHE  CD2', -0.405, (33.746, -24.207, 41.995)), (' H 145  LEU  HG ', ' H 218  VAL HG11', -0.405, (52.657, 27.756, 69.01)), (' N  23  CYS  HB2', ' N  35  TRP  CH2', -0.404, (20.914, -7.386, 80.952)), (' E 148  LEU  O  ', ' E 152  MET  HG2', -0.404, (-8.234, 27.855, 7.215)), (' N  35  TRP  HB2', ' N  48  ILE  HB ', -0.403, (13.913, -9.404, 80.534)), (' H  66  ARG  HB3', ' H  83  ASN  O  ', -0.402, (37.777, 5.525, 34.312)), (' I 360  ASN  H  ', ' I 523  THR  HB ', -0.402, (39.509, -36.856, 37.406)), (' S 386  LYS  HB3', ' S 386  LYS  HE2', -0.402, (6.125, -18.338, 97.225)), (' S 389  ASP  OD1', ' S 528  LYS  HD2', -0.401, (1.26, -19.565, 101.916)), (' D  29  VAL HG13', ' D  93  ASP  HB2', -0.401, (25.04, -22.276, 134.187)), (' N  93  VAL HG22', ' S 380  TYR  CD2', -0.4, (22.007, -13.749, 97.515)), (' I 337  PRO  HD2', ' I 358  ILE HG23', -0.4, (36.846, -32.374, 31.747)), (' D  49  ILE HD13', ' D  55  ARG  HA ', -0.4, (13.15, -10.433, 133.523))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
