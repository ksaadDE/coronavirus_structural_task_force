# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  14 ', 'GLN', 0.1906813149262735, (36.89996, 35.23430000000001, -21.96723)), ('A', '  68 ', 'ILE', 0.23159021242448977, (33.04922, 23.33738, -1.8745599999999996)), ('A', ' 213 ', 'VAL', 0.17070089113646833, (26.75766, 13.3793, 1.4827399999999997))]
data['cbeta'] = []
data['probe'] = [(' A 173 BGLN  HG2', ' A1313  PEG  H32', -0.737, (16.356, 19.583, -31.549)), (' A  14  GLN HE21', ' A1315  PGE  H62', -0.73, (36.013, 35.031, -27.622)), (' A  14  GLN  N  ', ' A  14  GLN  OE1', -0.683, (38.072, 35.744, -24.122)), (' A  15 BCYS  HB3', ' A 136  CYS  SG ', -0.661, (40.314, 31.335, -21.331)), (' A 148  ASN  ND2', ' A1406  HOH  O  ', -0.658, (19.491, 42.642, -6.788)), (' A 146  HIS  HE1', ' A 148  ASN  HB2', -0.621, (15.916, 41.763, -8.262)), (' A 146  HIS  CE1', ' A 148  ASN  HB2', -0.603, (16.346, 41.594, -8.626)), (' A  14  GLN  N  ', ' A1409  HOH  O  ', -0.592, (37.886, 37.651, -22.443)), (' A 173 BGLN  HA ', ' A1313  PEG  H12', -0.573, (16.652, 21.222, -30.139)), (' A 173 AGLN  HA ', ' A1313  PEG  H12', -0.558, (16.308, 21.328, -30.425)), (' A 129  LYS  HE2', ' A 169  GLU  OE1', -0.545, (29.6, 24.919, -32.903)), (' A1301  BLA HBC1', ' A1301  BLA HMC1', -0.519, (27.187, 15.125, -22.1)), (' A 144  TYR  HD2', ' A 153  MET  HE3', -0.515, (21.887, 37.216, -12.031)), (' A1303  NAG  H82', ' A1696  HOH  O  ', -0.506, (41.394, 4.703, -0.369)), (' A 298  GLU  OE2', ' A1401  HOH  O  ', -0.478, (42.7, -14.174, -12.954)), (' A 301  CYS  O  ', ' A 304 BLYS  HD2', -0.451, (34.704, -19.062, -16.036)), (' A 171  VAL  O  ', ' A1313  PEG  H41', -0.447, (20.221, 20.265, -31.863)), (' A 146  HIS  CE1', ' A 148  ASN HD22', -0.443, (17.845, 41.921, -8.214)), (' A 122  ASN  O  ', ' A 123  ALA  HB3', -0.439, (23.271, 27.335, -20.003)), (' A 193  VAL HG23', ' A 223  LEU HD22', -0.432, (30.36, 3.714, -17.067)), (' A  66 AHIS  HD2', ' A1445  HOH  O  ', -0.429, (34.115, 17.018, -1.638)), (' A 173 BGLN  NE2', ' A1430  HOH  O  ', -0.428, (13.064, 18.51, -31.163)), (' A 129  LYS  HG2', ' A 169  GLU  HG3', -0.417, (29.402, 22.243, -32.507)), (' A 173 BGLN  OE1', ' A1402  HOH  O  ', -0.416, (13.08, 18.537, -28.171)), (' A  14  GLN  CD ', ' A  14  GLN  N  ', -0.413, (37.7, 35.447, -24.032)), (' A 176  LEU  HA ', ' A 176  LEU HD12', -0.411, (17.191, 26.391, -19.842)), (' A  78  ARG  NE ', ' A1431  HOH  O  ', -0.408, (40.438, 20.448, -3.083)), (' A 140  PHE  CZ ', ' A 158  ARG  HD2', -0.407, (35.232, 32.812, -15.531)), (' A  15 BCYS  SG ', ' A1534  HOH  O  ', -0.403, (41.464, 35.604, -22.233)), (' A 173 BGLN  CG ', ' A1313  PEG  H32', -0.401, (16.633, 19.221, -30.489))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
