# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '   5 ', 'VAL', 0.055949869840585253, (204.787, 165.974, 251.951)), ('B', '  71 ', 'ARG', 0.03553308809855252, (200.223, 172.3, 239.015)), ('B', '  76 ', 'ASN', 0.0, (203.547, 172.404, 244.09700000000007))]
data['omega'] = [('B', '  76 ', 'ASN', None, (203.335, 173.583, 243.26000000000002))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B  72  HIS  HA ', ' B  76  ASN  N  ', -1.008, (203.853, 173.648, 242.396)), (' C  95  PRO  HB2', ' C  96  PRO  HD3', -0.889, (198.88, 146.659, 234.033)), (' C  37  GLN  HB2', ' C  47  LEU HD11', -0.802, (211.452, 147.949, 254.896)), (' A 457  ARG  NH1', ' A 459  SER  O  ', -0.792, (210.133, 165.439, 225.647)), (' A 336  CYS  HB2', ' A 363  ALA  HB2', -0.791, (210.786, 147.818, 197.683)), (' A 379  CYS  HA ', ' A 432  CYS  CB ', -0.789, (200.309, 149.478, 208.868)), (' B   4  LEU  N  ', ' B  25  SER  HG ', -0.786, (209.867, 165.694, 251.436)), (' A 444  LYS  HD2', ' A 446  GLY  H  ', -0.737, (223.714, 137.0, 229.572)), (' B  99  LEU  O  ', ' B 102  TYR  N  ', -0.716, (213.364, 152.645, 240.028)), (' B  37  VAL HG11', ' B 107  TRP  HZ3', -0.692, (202.435, 154.286, 248.365)), (' A 379  CYS  HA ', ' A 432  CYS  HB2', -0.691, (200.626, 148.94, 209.534)), (' A 433  VAL HG22', ' A 512  VAL HG22', -0.69, (205.455, 150.724, 213.483)), (' B  72  HIS  CA ', ' B  76  ASN  N  ', -0.68, (202.462, 174.015, 242.055)), (' C  17  ASP  O  ', ' C  78  LEU  N  ', -0.674, (217.423, 138.76, 262.605)), (' C  33  LEU HD11', ' C  88  CYS  HB2', -0.671, (208.628, 141.715, 245.856)), (' A 379  CYS  HA ', ' A 432  CYS  HB3', -0.646, (200.361, 149.73, 209.085)), (' C  94  TYR  HB2', ' C  95  PRO  HD3', -0.632, (201.967, 149.562, 231.792)), (' B  90  THR HG22', ' B 115  VAL  H  ', -0.627, (184.043, 155.57, 253.746)), (' B 104  MET  N  ', ' C  36  TYR  OH ', -0.624, (209.544, 152.384, 244.986)), (' A 454  ARG  HD2', ' A 457  ARG  HD2', -0.619, (214.029, 162.113, 226.399)), (' B   6  GLU  HA ', ' B 109  GLN HE22', -0.608, (201.689, 166.154, 255.137)), (' C  35  TRP  HB2', ' C  48  ILE  HB ', -0.608, (214.112, 145.202, 248.68)), (' B  34  MET  HA ', ' B  34  MET  HE3', -0.595, (205.334, 161.749, 242.394)), (' A 462  LYS  NZ ', ' A 465  GLU  OE2', -0.581, (210.814, 168.125, 218.248)), (' A 378  LYS  O  ', ' A 432  CYS  HB2', -0.575, (200.72, 148.712, 210.21)), (' A 497  PHE  CE2', ' A 507  PRO  HB3', -0.575, (215.023, 143.575, 224.738)), (' A 366  SER  O  ', ' A 370  ASN  ND2', -0.566, (202.774, 138.324, 200.905)), (' B  47  TRP  HZ2', ' B  50  VAL HG12', -0.562, (199.737, 155.368, 237.028)), (' C  89  GLN  HB2', ' C  99  PHE  CE1', -0.56, (205.353, 147.93, 245.726)), (' A 342  PHE  HB2', ' A 601  NAG  H82', -0.559, (213.366, 142.369, 206.713)), (' A 417  LYS  HE2', ' B  52  TYR  HE1', -0.549, (207.02, 156.501, 232.839)), (' A 342  PHE  CE1', ' A 511  VAL HG21', -0.545, (210.345, 146.017, 209.113)), (' C  48  ILE HG22', ' C  49  TYR  O  ', -0.544, (216.443, 145.32, 245.302)), (' B  93  TYR  O  ', ' B 110  GLY  HA2', -0.544, (198.85, 159.036, 252.533)), (' B  45  LEU  HG ', ' C  87  TYR  HE2', -0.544, (201.313, 147.266, 251.541)), (' A 455  LEU  O  ', ' B  33  TYR  OH ', -0.54, (210.878, 158.05, 233.063)), (' C  32  TYR  HB3', ' C  91  LEU  HB2', -0.538, (210.399, 146.251, 238.377)), (' A 437  ASN  OD1', ' A 439  ASN  N  ', -0.537, (212.735, 137.22, 220.89)), (' A 454  ARG  NH2', ' A 467  ASP  O  ', -0.535, (218.076, 161.054, 223.88)), (' A 501  ASN  O  ', ' A 506  GLN  NE2', -0.531, (210.54, 134.8, 228.559)), (' A 395  VAL HG22', ' A 515  PHE  HD1', -0.526, (206.183, 153.784, 202.113)), (' B  36  TRP  NE1', ' B  80  LEU  HB2', -0.525, (196.204, 162.303, 243.519)), (' C  64  GLY  O  ', ' C  69  THR  HA ', -0.522, (215.359, 136.117, 244.205)), (' A 494  SER  OG ', ' A 495  TYR  N  ', -0.515, (218.96, 147.383, 229.944)), (' A 484  GLU  OE1', ' A 485  GLY  N  ', -0.513, (223.306, 161.079, 240.021)), (' C  95  PRO  HB2', ' C  96  PRO  CD ', -0.512, (199.038, 147.414, 234.677)), (' C  35  TRP  CZ3', ' C  88  CYS  HB3', -0.509, (209.077, 141.399, 248.525)), (' B  37  VAL HG23', ' B  46  GLU  O  ', -0.509, (199.726, 151.278, 245.829)), (' C  29  ILE HG22', ' C  32  TYR  H  ', -0.509, (212.221, 142.371, 238.008)), (' C  24  ARG  HA ', ' C  68  GLY  HA2', -0.508, (209.975, 134.393, 243.194)), (' B  36  TRP  CD1', ' B  80  LEU HD22', -0.505, (195.594, 160.08, 243.496)), (' A 484  GLU  OE2', ' A 490  PHE  N  ', -0.505, (222.156, 159.773, 236.136)), (' A 476  GLY  HA3', ' B  27  LEU HD12', -0.5, (213.719, 168.057, 242.657)), (' B  34  MET  HE1', ' B  97  ARG  HB3', -0.499, (208.035, 162.276, 244.126)), (' B  36  TRP  CZ2', ' B  78  LEU HD22', -0.496, (198.452, 164.008, 244.58)), (' A 350  VAL HG21', ' A 418  ILE HD12', -0.496, (210.785, 152.21, 223.166)), (' B  11  LEU  HA ', ' B 114  THR  H  ', -0.491, (186.745, 159.589, 254.888)), (' A 452  LEU HD22', ' A 492  LEU  HB3', -0.485, (220.326, 154.524, 228.691)), (' A 403  ARG  NH2', ' C  94  TYR  OH ', -0.484, (209.058, 148.525, 231.047)), (' B 104  MET  H  ', ' C  36  TYR  HH ', -0.482, (209.069, 151.499, 245.083)), (' B  99  LEU  HB3', ' B 102  TYR  HD2', -0.48, (215.156, 155.572, 239.917)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.478, (209.912, 155.626, 225.139)), (' B  22  CYS  HB3', ' B  78  LEU  HB3', -0.476, (200.359, 166.251, 245.649)), (' A 446  GLY  O  ', ' A 498  GLN  NE2', -0.475, (220.764, 139.272, 233.085)), (' C  87  TYR  CE1', ' C 102  GLY  HA3', -0.472, (203.128, 142.651, 252.775)), (' B  37  VAL HG11', ' B 107  TRP  CZ3', -0.472, (202.874, 154.69, 248.711)), (' C  38  GLN  HB2', ' C  44  PRO  HB3', -0.471, (205.189, 149.789, 254.474)), (' A 437  ASN  OD1', ' A 438  SER  N  ', -0.47, (211.775, 137.498, 220.425)), (' B  29  VAL  O  ', ' B  29  VAL HG13', -0.47, (204.301, 169.874, 240.595)), (' C  80  PRO  HA ', ' C 107  ILE HD13', -0.469, (213.633, 143.088, 266.93)), (' B  90  THR  HA ', ' B 113  VAL  O  ', -0.468, (188.16, 156.042, 253.874)), (' A 393  THR HG21', ' A 518  LEU  HB2', -0.464, (206.414, 163.168, 198.337)), (' C  60  SER  HA ', ' C  73  LEU  HA ', -0.462, (218.529, 142.142, 256.652)), (' C  96  PRO  HB2', ' C  98  THR HG23', -0.461, (200.071, 145.123, 238.998)), (' C  81  GLU  N  ', ' C  81  GLU  OE1', -0.46, (215.645, 146.843, 266.915)), (' C  34  ALA  HB2', ' C  91  LEU HD11', -0.458, (211.654, 148.055, 243.37)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.457, (202.454, 153.198, 205.279)), (' A 336  CYS  N  ', ' A 362  VAL  O  ', -0.453, (212.697, 147.472, 195.59)), (' A 424  LYS  HD3', ' A 461  LEU  O  ', -0.452, (205.873, 163.458, 221.681)), (' B  72  HIS  C  ', ' B  76  ASN  N  ', -0.452, (202.829, 174.46, 242.835)), (' A 409  GLN  NE2', ' A 416  GLY  HA3', -0.446, (204.147, 153.475, 227.567)), (' C  88  CYS  SG ', ' C 100  GLY  HA3', -0.446, (205.158, 140.722, 247.451)), (' A 444  LYS  HD2', ' A 445  VAL  N  ', -0.445, (223.978, 136.905, 228.778)), (' C  90  GLN HE22', ' C  93  SER  HB2', -0.445, (205.56, 145.059, 236.359)), (' A 457  ARG  NE ', ' A 467  ASP  OD2', -0.44, (213.98, 164.824, 225.154)), (' A 437  ASN  HB2', ' A 508  TYR  CZ ', -0.44, (207.851, 138.189, 220.963)), (' A 453  TYR  CD1', ' A 495  TYR  CE1', -0.439, (213.858, 150.505, 228.623)), (' C  37  GLN  O  ', ' C  45  LYS  N  ', -0.437, (208.298, 151.453, 254.331)), (' A 447  GLY  HA2', ' A 497  PHE  O  ', -0.437, (219.146, 139.101, 228.831)), (' B  29  VAL HG23', ' B  34  MET  CG ', -0.437, (204.771, 165.213, 241.295)), (' A 359  SER  HA ', ' A 524  VAL HG22', -0.437, (211.257, 154.669, 196.893)), (' B  99  LEU  HB2', ' B 102  TYR  HB2', -0.436, (213.838, 155.003, 241.6)), (' B  39  GLN  HB2', ' B  45  LEU HD23', -0.433, (198.844, 150.5, 251.765)), (' A 412  PRO  HB3', ' A 426  PRO  O  ', -0.432, (199.769, 159.069, 215.138)), (' B  59  TYR  OH ', ' B  68  THR  N  ', -0.43, (193.423, 162.322, 237.518)), (' B  45  LEU  HG ', ' C  87  TYR  CE2', -0.423, (201.558, 147.354, 251.545)), (' B   4  LEU  N  ', ' B  25  SER  OG ', -0.423, (209.814, 166.601, 251.565)), (' C  90  GLN  NE2', ' C  93  SER  HB2', -0.42, (205.107, 144.614, 236.483)), (' C  47  LEU  HB3', ' C  48  ILE HG12', -0.42, (215.922, 146.364, 251.077)), (' A 498  GLN  N  ', ' A 501  ASN  OD1', -0.418, (215.62, 138.654, 230.788)), (' A 357  ARG HH22', ' A 394  ASN HD21', -0.417, (213.004, 160.891, 199.877)), (' A 360  ASN  HA ', ' A 523  THR  HB ', -0.415, (212.248, 155.819, 192.664)), (' A 342  PHE  CD1', ' A 342  PHE  N  ', -0.413, (213.51, 144.83, 208.261)), (' B  37  VAL  CG1', ' B  94  TYR  HB2', -0.412, (201.086, 155.876, 249.61)), (' A 352  ALA  HB1', ' A 466  ARG HH21', -0.411, (220.073, 157.059, 217.77)), (' C  35  TRP  O  ', ' C  47  LEU  N  ', -0.41, (213.37, 148.441, 250.593)), (' B 101  TYR  HA ', ' C  91  LEU HD23', -0.409, (212.854, 149.585, 238.695)), (' A 364  ASP  O  ', ' A 367  VAL HG12', -0.405, (207.553, 141.354, 199.537)), (' B  29  VAL HG23', ' B  34  MET  HG3', -0.403, (204.484, 165.695, 241.504)), (' A 474  GLN HE22', ' A 479  PRO  HB3', -0.402, (220.918, 171.326, 237.697)), (' B  39  GLN  O  ', ' B  91  ALA  HB1', -0.401, (193.195, 152.334, 252.664)), (' C   7  SER  HA ', ' C  23  CYS  HA ', -0.4, (206.653, 134.974, 248.031))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
