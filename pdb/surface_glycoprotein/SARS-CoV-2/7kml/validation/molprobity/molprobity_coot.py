# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 162 ', 'PRO', None, (173.03899999999996, 187.766, 119.98500000000004)), ('H', ' 164 ', 'PRO', None, (174.28699999999998, 184.949, 125.68600000000004)), ('I', ' 162 ', 'PRO', None, (238.272, 186.572, 119.98500000000004)), ('I', ' 164 ', 'PRO', None, (240.087, 189.061, 125.68600000000004)), ('J', ' 162 ', 'PRO', None, (206.68900000000005, 243.66199999999998, 119.98500000000004)), ('J', ' 164 ', 'PRO', None, (203.62600000000006, 243.98999999999995, 125.68600000000004)), ('L', '   8 ', 'PRO', None, (190.111, 195.06799999999998, 152.027)), ('L', ' 115 ', 'PRO', None, (170.027, 207.549, 147.505)), ('L', ' 161 ', 'PRO', None, (197.301, 182.392, 141.80000000000007)), ('M', '   8 ', 'PRO', None, (223.412, 197.706, 152.027)), ('M', ' 115 ', 'PRO', None, (222.645, 174.072, 147.505)), ('M', ' 161 ', 'PRO', None, (230.795, 210.27, 141.80000000000007)), ('N', '   8 ', 'PRO', None, (204.477, 225.22599999999997, 152.027)), ('N', ' 115 ', 'PRO', None, (225.32800000000006, 236.379, 147.505)), ('N', ' 161 ', 'PRO', None, (189.90399999999997, 225.33799999999994, 141.80000000000007))]
data['rota'] = [('A', ' 562 ', 'PHE', 0.2354277058949002, (163.035, 201.55599999999995, 222.376)), ('A', ' 709 ', 'ASN', 0.05680177372216084, (184.275, 190.318, 289.951)), ('A', ' 801 ', 'ASN', 0.16833598336144412, (226.727, 185.615, 279.053)), ('A', '1074 ', 'ASN', 0.14682265250742882, (193.903, 182.31500000000005, 291.461)), ('A', '1135 ', 'ASN', 0.1770015823705206, (189.621, 193.279, 307.795)), ('B', ' 562 ', 'PHE', 0.23532682366209043, (231.331, 171.013, 222.376)), ('B', ' 709 ', 'ASN', 0.056804173929795775, (230.444, 195.02700000000004, 289.951)), ('B', ' 801 ', 'ASN', 0.16770277272492892, (213.29000000000005, 234.14300000000006, 279.053)), ('B', '1074 ', 'ASN', 0.1466057230733713, (232.56, 207.36600000000007, 291.461)), ('B', '1135 ', 'ASN', 0.17704219071740154, (225.206, 198.176, 307.795)), ('C', ' 562 ', 'PHE', 0.23460703139907355, (223.634, 245.43099999999995, 222.376)), ('C', ' 709 ', 'ASN', 0.05677513658131129, (203.28100000000003, 232.65500000000003, 289.951)), ('C', ' 801 ', 'ASN', 0.1685475344078777, (177.983, 198.24200000000002, 279.053)), ('C', '1074 ', 'ASN', 0.14612205842735101, (191.53699999999998, 228.31900000000005, 291.461)), ('C', '1135 ', 'ASN', 0.17683218339698248, (203.173, 226.545, 307.795))]
data['cbeta'] = []
data['probe'] = [(' A 709  ASN  C  ', ' A 709  ASN HD22', -0.598, (183.374, 190.005, 291.603)), (' B 709  ASN  C  ', ' B 709  ASN HD22', -0.596, (231.157, 194.387, 291.57)), (' C 709  ASN  C  ', ' C 709  ASN HD22', -0.569, (202.986, 233.241, 291.56)), (' I 221  LYS  NZ ', ' I 223  ASP  OD2', -0.533, (248.89, 197.505, 111.589)), (' H 221  LYS  NZ ', ' H 223  ASP  OD2', -0.532, (177.549, 173.571, 111.434)), (' J 221  LYS  NZ ', ' J 223  ASP  OD2', -0.53, (191.938, 246.942, 111.357)), (' A1074  ASN  N  ', ' A1074  ASN  OD1', -0.501, (194.682, 181.232, 290.175)), (' B1074  ASN  N  ', ' B1074  ASN  OD1', -0.5, (233.089, 208.625, 290.134)), (' B 167  THR  OG1', ' B1302  NAG  H62', -0.497, (229.53, 236.656, 195.524)), (' C1074  ASN  N  ', ' C1074  ASN  OD1', -0.495, (190.08, 228.076, 290.077)), (' A 167  THR  OG1', ' A1302  NAG  H62', -0.495, (220.634, 170.218, 195.435)), (' C 167  THR  OG1', ' C1302  NAG  H62', -0.492, (167.686, 211.109, 195.496)), (' A  33  THR HG23', ' A  59  PHE  CZ ', -0.485, (210.004, 160.023, 234.694)), (' B  33  THR HG23', ' B  59  PHE  CZ ', -0.483, (244.255, 232.076, 234.665)), (' B  31  SER  O  ', ' B  59  PHE  HA ', -0.481, (245.499, 231.01, 229.491)), (' B1101  HIS  HD2', ' a   1  NAG  H5 ', -0.479, (228.866, 208.965, 307.391)), (' C1101  HIS  HD2', ' j   1  NAG  H5 ', -0.478, (192.142, 224.572, 307.799)), (' A1101  HIS  HD2', ' R   1  NAG  H5 ', -0.477, (196.851, 184.756, 307.785)), (' C  31  SER  O  ', ' C  59  PHE  HA ', -0.476, (164.93, 227.718, 229.804)), (' C  33  THR HG23', ' C  59  PHE  CZ ', -0.473, (164.099, 225.603, 234.649)), (' A  31  SER  O  ', ' A  59  PHE  HA ', -0.472, (207.457, 159.578, 229.644)), (' C 916  LEU  O  ', ' C 920  GLN  N  ', -0.462, (184.094, 205.369, 290.793)), (' B 916  LEU  O  ', ' B 920  GLN  N  ', -0.457, (216.553, 225.709, 290.794)), (' A 916  LEU  O  ', ' A 920  GLN  N  ', -0.454, (217.345, 187.281, 290.864)), (' A 706  ALA  H  ', ' Q   1  NAG  H62', -0.45, (189.142, 181.242, 283.492)), (' B 706  ALA  H  ', ' Z   1  NAG  H62', -0.442, (235.812, 203.788, 283.443)), (' C 706  ALA  H  ', ' i   1  NAG  H62', -0.441, (192.892, 233.068, 283.526)), (' A1101  HIS  CD2', ' R   1  NAG  H5 ', -0.419, (196.978, 184.988, 307.796)), (' B1101  HIS  CD2', ' a   1  NAG  H5 ', -0.415, (228.597, 208.667, 307.722)), (' C1101  HIS  CD2', ' j   1  NAG  H5 ', -0.414, (192.298, 224.358, 307.79)), (' B1025  ALA  HB1', ' B1060  VAL HG11', -0.413, (206.85, 219.311, 262.787)), (' C1025  ALA  HB1', ' C1060  VAL HG11', -0.412, (193.678, 199.894, 262.713)), (' A1025  ALA  HB1', ' A1060  VAL HG11', -0.409, (217.165, 198.666, 262.876)), (' B 165  ASN  ND2', ' B 165  ASN  O  ', -0.407, (232.442, 237.112, 192.365)), (' A 393  THR  HA ', ' A 522  ALA  HA ', -0.407, (172.51, 202.597, 201.34)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.407, (225.649, 178.624, 201.307)), (' A 165  ASN  ND2', ' A 165  ASN  O  ', -0.402, (219.913, 167.253, 192.587))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
