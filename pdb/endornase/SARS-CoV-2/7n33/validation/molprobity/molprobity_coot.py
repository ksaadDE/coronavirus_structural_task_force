# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  26 ', 'SER', 0.10935591279055905, (119.121, 110.13099999999991, 110.769)), ('A', '  28 ', 'ILE', 0.07792089499214615, (113.318, 107.34699999999991, 110.47799999999994)), ('A', '  29 ', 'ASN', 0.0, (109.59300000000002, 106.82999999999993, 110.52599999999995)), ('A', ' 110 ', 'LYS', 0.0, (109.9670000000001, 137.384, 110.729)), ('A', ' 201 ', 'LEU', 0.05006179873775039, (95.538, 114.073, 141.21)), ('A', ' 203 ', 'GLU', 0.12249283500273066, (100.586, 114.47499999999998, 143.93599999999995)), ('A', ' 233 ', 'PHE', 0.16161410262925827, (78.95000000000002, 119.63499999999999, 149.291)), ('A', ' 322 ', 'THR', 0.0598944198078712, (85.34600000000002, 134.70499999999998, 135.399)), ('A', ' 338 ', 'HIS', 0.05296197057193634, (69.44700000000003, 124.863, 148.936)), ('B', '  26 ', 'SER', 0.10935662815550384, (102.186, 89.47999999999993, 110.768)), ('B', '  28 ', 'ILE', 0.07827386324686224, (102.67699999999994, 95.89799999999993, 110.477)), ('B', '  29 ', 'ASN', 0.0, (104.092, 99.38199999999993, 110.52499999999995)), ('B', ' 110 ', 'LYS', 0.0, (130.364, 83.77999999999994, 110.73)), ('B', ' 201 ', 'LEU', 0.05036263029357823, (117.39000000000009, 107.92999999999999, 141.211)), ('B', ' 203 ', 'GLU', 0.12227537346067485, (115.21400000000008, 103.357, 143.93699999999995)), ('B', ' 233 ', 'PHE', 0.16338089671635975, (130.502, 119.512, 149.29399999999995)), ('B', ' 322 ', 'THR', 0.059863135033178236, (140.355, 106.439, 135.401)), ('B', ' 338 ', 'HIS', 0.05354097850713692, (139.781, 125.128, 148.94)), ('C', '  26 ', 'SER', 0.1093956458297496, (92.76799999999993, 114.46899999999991, 110.77)), ('C', '  28 ', 'ILE', 0.07882596960188955, (98.08099999999993, 110.83499999999991, 110.47899999999994)), ('C', '  29 ', 'ASN', 0.0, (100.39099999999993, 107.86799999999991, 110.52699999999999)), ('C', ' 110 ', 'LYS', 0.0, (73.74399999999999, 92.91499999999995, 110.73099999999994)), ('C', ' 201 ', 'LEU', 0.050158480750228454, (101.14500000000002, 92.075, 141.212)), ('C', ' 203 ', 'GLU', 0.12223408455522705, (98.273, 96.246, 143.938)), ('C', ' 233 ', 'PHE', 0.16285783751426403, (104.62100000000008, 74.929, 149.29399999999995)), ('C', ' 322 ', 'THR', 0.059904604699318124, (88.374, 72.933, 135.401)), ('C', ' 338 ', 'HIS', 0.053002145494455845, (104.84600000000009, 64.085, 148.939)), ('D', '  26 ', 'SER', 0.10936784334730965, (109.64200000000007, 119.31299999999992, 105.13)), ('D', '  28 ', 'ILE', 0.07772688828314644, (107.028, 113.43099999999991, 105.419)), ('D', '  29 ', 'ASN', 0.0, (106.619, 109.69299999999991, 105.36899999999999)), ('D', ' 110 ', 'LYS', 0.0, (137.149, 110.95199999999991, 105.137)), ('D', ' 201 ', 'LEU', 0.04991894341408858, (114.237, 95.87699999999997, 74.66599999999994)), ('D', ' 203 ', 'GLU', 0.12266848634892079, (114.491, 100.93699999999998, 71.944)), ('D', ' 233 ', 'PHE', 0.1626709230990145, (120.271, 79.464, 66.566)), ('D', ' 322 ', 'THR', 0.05987899923896194, (135.162, 86.283, 80.44999999999995)), ('D', ' 338 ', 'HIS', 0.053336298552607665, (125.772, 70.116, 66.909)), ('E', '  26 ', 'SER', 0.1093972880878224, (89.54799999999993, 101.674, 105.132)), ('E', '  28 ', 'ILE', 0.07656779021313871, (95.94899999999993, 102.35099999999998, 105.42099999999995)), ('E', '  29 ', 'ASN', 0.0, (99.39099999999993, 103.86499999999991, 105.371)), ('E', ' 110 ', 'LYS', 0.0, (83.038, 129.677, 105.13499999999996)), ('E', ' 201 ', 'LEU', 0.05009924386540776, (107.5500000000001, 117.36599999999991, 74.66699999999997)), ('E', ' 203 ', 'GLU', 0.12208898424668625, (103.04199999999997, 115.05499999999994, 71.945)), ('E', ' 233 ', 'PHE', 0.1632126442183969, (118.74900000000008, 130.795, 66.567)), ('E', ' 322 ', 'THR', 0.05988330429870541, (105.39800000000008, 140.28499999999983, 80.448)), ('E', ' 338 ', 'HIS', 0.05312024988340053, (124.09500000000008, 140.233, 66.909)), ('F', '  26 ', 'SER', 0.10934122679903656, (114.88100000000001, 93.07999999999998, 105.131)), ('F', '  28 ', 'ILE', 0.07822391765873075, (111.09600000000002, 98.28599999999997, 105.42099999999995)), ('F', '  29 ', 'ASN', 0.0, (108.06400000000001, 100.51099999999998, 105.371)), ('F', ' 110 ', 'LYS', 0.0, (93.88099999999999, 73.446, 105.137)), ('F', ' 201 ', 'LEU', 0.050440813547443106, (92.28799999999997, 100.829, 74.67)), ('F', ' 203 ', 'GLU', 0.12230119468247774, (96.54199999999999, 98.079, 71.946)), ('F', ' 233 ', 'PHE', 0.16244834659294058, (75.05799999999999, 103.817, 66.571)), ('F', ' 322 ', 'THR', 0.059896027237571564, (73.51300000000002, 87.511, 80.453)), ('F', ' 338 ', 'HIS', 0.053290841711079645, (64.212, 103.73000000000002, 66.915))]
data['cbeta'] = []
data['probe'] = [(' A 267  GLU  HB3', ' A 280  PHE  HB3', -0.695, (87.797, 108.137, 129.966)), (' B 150  LYS  H  ', ' B 150  LYS  HD3', -0.694, (144.284, 79.707, 131.47)), (' D 150  LYS  H  ', ' D 150  LYS  HD3', -0.694, (151.495, 108.292, 83.485)), (' D 267  GLU  HB3', ' D 280  PHE  HB3', -0.693, (108.733, 87.517, 85.09)), (' E 267  GLU  HB3', ' E 280  PHE  HB3', -0.692, (117.3, 116.08, 85.137)), (' B 267  GLU  HB3', ' B 280  PHE  HB3', -0.691, (116.251, 118.101, 130.031)), (' A 150  LYS  H  ', ' A 150  LYS  HD3', -0.691, (106.535, 151.608, 131.509)), (' E 150  LYS  H  ', ' E 150  LYS  HD3', -0.69, (78.357, 143.023, 83.661)), (' C 150  LYS  H  ', ' C 150  LYS  HD3', -0.688, (63.121, 82.81, 131.514)), (' F 267  GLU  HB3', ' F 280  PHE  HB3', -0.687, (87.912, 109.849, 84.928)), (' C 267  GLU  HB3', ' C 280  PHE  HB3', -0.686, (110.65, 88.031, 130.194)), (' F 150  LYS  H  ', ' F 150  LYS  HD3', -0.685, (84.615, 62.635, 83.671)), (' B 335  LYS  O  ', ' B 338  HIS  ND1', -0.655, (139.134, 128.325, 147.72)), (' A 335  LYS  O  ', ' A 338  HIS  ND1', -0.654, (67.112, 122.85, 147.964)), (' C 335  LYS  O  ', ' C 338  HIS  ND1', -0.653, (108.169, 62.552, 147.792)), (' F 335  LYS  O  ', ' F 338  HIS  ND1', -0.653, (62.834, 106.577, 67.14)), (' D 335  LYS  O  ', ' D 338  HIS  ND1', -0.649, (123.821, 67.397, 67.169)), (' E 335  LYS  O  ', ' E 338  HIS  ND1', -0.648, (127.334, 140.46, 67.311)), (' E 235  HIS  O  ', ' E 248  GLY  HA3', -0.611, (120.828, 126.94, 72.207)), (' F 235  HIS  O  ', ' F 248  GLY  HA3', -0.61, (77.181, 107.777, 72.733)), (' A 235  HIS  O  ', ' A 248  GLY  HA3', -0.609, (79.285, 115.632, 142.97)), (' B 235  HIS  O  ', ' B 248  GLY  HA3', -0.602, (127.194, 121.175, 143.416)), (' D 235  HIS  O  ', ' D 248  GLY  HA3', -0.593, (115.846, 79.67, 72.206)), (' C 235  HIS  O  ', ' C 248  GLY  HA3', -0.593, (107.852, 77.084, 142.958)), (' A 290  LYS  NZ ', ' G 402    A  OP2', -0.589, (77.95, 113.33, 137.521)), (' C 335  LYS  HB2', ' C 338  HIS  HE1', -0.577, (109.413, 63.795, 147.072)), (' A 335  LYS  HB2', ' A 338  HIS  HE1', -0.574, (66.603, 120.899, 146.623)), (' F 335  LYS  HB2', ' F 338  HIS  HE1', -0.571, (63.596, 108.191, 68.64)), (' D 335  LYS  HB2', ' D 338  HIS  HE1', -0.571, (122.365, 66.904, 68.97)), (' B 335  LYS  HB2', ' B 338  HIS  HE1', -0.568, (137.864, 129.426, 146.627)), (' E 335  LYS  HB2', ' E 338  HIS  HE1', -0.563, (128.856, 138.347, 68.615)), (' B 290  LYS  NZ ', ' H 402    A  OP2', -0.555, (125.737, 123.45, 137.487)), (' A 317  LYS  HE2', ' A 332  LEU HD23', -0.555, (71.814, 129.771, 140.408)), (' F 317  LYS  HE2', ' F 332  LEU HD23', -0.554, (64.149, 98.567, 74.792)), (' D 317  LYS  HE2', ' D 332  LEU HD23', -0.548, (130.811, 72.78, 74.984)), (' C 317  LYS  HE2', ' C 332  LEU HD23', -0.543, (99.526, 64.165, 140.653)), (' B 317  LYS  HE2', ' B 332  LEU HD23', -0.537, (142.373, 120.385, 140.602)), (' F 157  GLY  O  ', ' F 176  GLN  NE2', -0.533, (84.988, 79.201, 76.232)), (' E 157  GLY  O  ', ' E 176  GLN  NE2', -0.533, (92.449, 134.526, 76.269)), (' E 317  LYS  HE2', ' E 332  LEU HD23', -0.53, (119.18, 143.228, 75.044)), (' B 136  ARG  O  ', ' B 182  LYS  NZ ', -0.529, (145.432, 86.163, 120.84)), (' A 157  GLY  O  ', ' A 176  GLN  NE2', -0.529, (99.555, 136.263, 139.08)), (' D 136  ARG  O  ', ' D 182  LYS  NZ ', -0.525, (149.611, 101.615, 94.502)), (' C 136  ARG  O  ', ' C 182  LYS  NZ ', -0.524, (68.308, 78.756, 121.016)), (' F 136  ARG  O  ', ' F 182  LYS  NZ ', -0.521, (80.052, 67.08, 94.58)), (' A 136  ARG  O  ', ' A 182  LYS  NZ ', -0.52, (100.328, 149.302, 121.005)), (' C 157  GLY  O  ', ' C 176  GLN  NE2', -0.513, (79.802, 84.347, 139.112)), (' E 136  ARG  O  ', ' E 182  LYS  NZ ', -0.512, (84.458, 144.743, 94.61)), (' B 157  GLY  O  ', ' B 176  GLN  NE2', -0.5, (134.936, 93.28, 139.268)), (' D 157  GLY  O  ', ' D 176  GLN  NE2', -0.498, (136.633, 100.401, 76.331)), (' E 199  ARG  NH1', ' E 211  GLU  OE1', -0.486, (103.954, 125.108, 68.606)), (' C 199  ARG  NH1', ' C 211  GLU  OE1', -0.485, (93.669, 86.9, 147.259)), (' B 217  LEU HD21', ' B 225  ARG  CZ ', -0.481, (126.917, 111.59, 160.978)), (' E 217  LEU HD21', ' E 225  ARG  CZ ', -0.48, (111.075, 126.896, 54.224)), (' A 217  LEU HD21', ' A 225  ARG  CZ ', -0.479, (87.678, 120.67, 161.39)), (' D 217  LEU HD21', ' D 225  ARG  CZ ', -0.478, (120.691, 88.132, 54.224)), (' A 335  LYS  HB2', ' A 338  HIS  CE1', -0.477, (66.767, 121.58, 147.212)), (' F 217  LEU HD21', ' F 225  ARG  CZ ', -0.474, (82.385, 98.971, 54.313)), (' C 217  LEU HD21', ' C 225  ARG  CZ ', -0.473, (99.679, 81.821, 161.066)), (' B 335  LYS  HB2', ' B 338  HIS  CE1', -0.471, (138.229, 129.045, 147.174)), (' E 335  LYS  HB2', ' E 338  HIS  CE1', -0.47, (128.351, 138.817, 68.508)), (' D 335  LYS  HB2', ' D 338  HIS  CE1', -0.463, (122.375, 67.21, 68.54)), (' E 200  ASN  HB3', ' E 203  GLU  HG3', -0.462, (102.538, 116.4, 74.678)), (' F 200  ASN  HB3', ' F 203  GLU  HG3', -0.462, (95.476, 96.955, 74.546)), (' F 335  LYS  HB2', ' F 338  HIS  CE1', -0.46, (63.216, 108.125, 68.991)), (' C 290  LYS  NZ ', " I 401  UFT  F2'", -0.457, (109.741, 77.468, 137.036)), (' B 200  ASN  HB3', ' B 203  GLU  HG3', -0.456, (116.588, 102.76, 141.144)), (' C 200  ASN  HB3', ' C 203  GLU  HG3', -0.455, (97.238, 94.976, 140.882)), (' F   9  ASN  HB3', ' F  16  PHE  HA ', -0.453, (109.38, 80.204, 95.253)), (' C 335  LYS  HB2', ' C 338  HIS  CE1', -0.451, (109.166, 63.72, 147.068)), (' E   9  ASN  HB3', ' E  16  PHE  HA ', -0.451, (81.324, 113.287, 95.45)), (' A 200  ASN  HB3', ' A 203  GLU  HG3', -0.45, (100.448, 116.069, 141.154)), (' C   9  ASN  HB3', ' C  16  PHE  HA ', -0.45, (80.097, 108.143, 120.435)), (' B   9  ASN  HB3', ' B  16  PHE  HA ', -0.448, (113.64, 81.402, 120.349)), (' D 200  ASN  HB3', ' D 203  GLU  HG3', -0.447, (116.299, 100.482, 74.929)), (' A   9  ASN  HB3', ' A  16  PHE  HA ', -0.447, (120.019, 124.34, 120.259)), (' D   9  ASN  HB3', ' D  16  PHE  HA ', -0.445, (123.734, 120.594, 95.356)), (' C 290  LYS  NZ ', ' I 402    A  OP2', -0.44, (110.449, 77.083, 137.582)), (' B 310  GLN  NE2', ' B 332  LEU HD22', -0.439, (140.858, 118.443, 141.706)), (' E 310  GLN  NE2', ' E 332  LEU HD22', -0.435, (117.817, 141.167, 74.0)), (' C 136  ARG HH21', ' C 150  LYS  HE2', -0.434, (63.356, 83.092, 128.91)), (' E 136  ARG HH21', ' E 150  LYS  HE2', -0.433, (78.566, 143.288, 86.914)), (' B 136  ARG HH21', ' B 150  LYS  HE2', -0.432, (144.044, 79.292, 129.085)), (' D 310  GLN  NE2', ' D 332  LEU HD22', -0.432, (129.826, 75.524, 74.138)), (' D 136  ARG HH21', ' D 150  LYS  HE2', -0.431, (151.311, 108.411, 86.76)), (' E 236  ILE HD13', ' E 342  PHE  HB3', -0.431, (118.262, 134.455, 72.648)), (' F 136  ARG HH21', ' F 150  LYS  HE2', -0.431, (84.385, 62.785, 86.963)), (' D 213  ASP  OD2', ' D 226  TYR  OH ', -0.43, (125.006, 90.144, 57.791)), (' A 310  GLN  NE2', ' A 332  LEU HD22', -0.43, (74.354, 128.879, 141.551)), (' C 236  ILE HD13', ' C 342  PHE  HB3', -0.429, (102.512, 71.887, 143.213)), (' C 310  GLN  NE2', ' C 332  LEU HD22', -0.428, (98.881, 66.259, 141.559)), (' F 310  GLN  NE2', ' F 332  LEU HD22', -0.427, (66.788, 97.478, 74.05)), (' A 136  ARG HH21', ' A 150  LYS  HE2', -0.427, (106.69, 151.247, 128.901)), (' F 277  LYS  HB3', ' F 277  LYS  HE3', -0.423, (86.21, 100.505, 83.967)), (' C  59  TRP  HB2', ' C  87  TRP  CH2', -0.422, (89.643, 100.361, 120.013)), (' C 306  ILE HD13', ' C 321  VAL HG11', -0.422, (92.162, 73.18, 140.183)), (' B 236  ILE HD13', ' B 342  PHE  HB3', -0.422, (134.188, 119.099, 143.229)), (' E  59  TRP  HB2', ' E  87  TRP  CH2', -0.421, (93.444, 115.629, 95.857)), (' F  59  TRP  HB2', ' F  87  TRP  CH2', -0.421, (101.22, 89.293, 95.966)), (' A 236  ILE HD13', ' A 342  PHE  HB3', -0.419, (77.373, 122.826, 143.126)), (' E  90  LYS  HA ', ' E  90  LYS  HD3', -0.419, (102.169, 117.36, 86.581)), (' E 306  ILE HD13', ' E 321  VAL HG11', -0.419, (108.623, 137.985, 75.345)), (' D 236  ILE HD13', ' D 342  PHE  HB3', -0.418, (123.511, 77.972, 72.243)), (' B 306  ILE HD13', ' B 321  VAL HG11', -0.417, (137.933, 109.63, 140.482)), (' A  59  TRP  HB2', ' A  87  TRP  CH2', -0.417, (108.476, 119.973, 119.808)), (' F 236  ILE HD13', ' F 342  PHE  HB3', -0.416, (71.984, 101.638, 72.607)), (' E 277  LYS  HB3', ' E 277  LYS  HE3', -0.413, (110.308, 122.779, 83.96)), (' C  90  LYS  HA ', ' C  90  LYS  HD3', -0.413, (96.443, 94.638, 129.289)), (' A  90  LYS  HA ', ' A  90  LYS  HD3', -0.412, (100.447, 117.01, 128.935)), (' F  35  LYS  HB2', ' F  35  LYS  HE3', -0.412, (120.864, 92.312, 102.396)), (' D  59  TRP  HB2', ' D  87  TRP  CH2', -0.412, (119.691, 108.962, 95.771)), (' D 314  VAL HG11', ' D 317  LYS  HB3', -0.411, (131.238, 68.979, 78.214)), (' D 306  ILE HD13', ' D 321  VAL HG11', -0.411, (131.829, 84.441, 75.635)), (' A 277  LYS  HB3', ' A 277  LYS  HE3', -0.409, (90.179, 117.263, 131.752)), (' B 314  VAL HG11', ' B 317  LYS  HB3', -0.409, (145.13, 123.529, 137.619)), (' C  35  LYS  HB2', ' C  35  LYS  HE3', -0.408, (92.334, 120.23, 113.634)), (' D 199  ARG  NH1', ' D 211  GLU  OE1', -0.408, (123.026, 95.461, 68.52)), (' F 306  ILE HD13', ' F 321  VAL HG11', -0.406, (73.571, 91.327, 75.633)), (' B 277  LYS  HB3', ' B 277  LYS  HE3', -0.405, (122.786, 110.959, 131.792)), (' C  27  ILE HD12', ' E  27  ILE HD12', -0.405, (91.128, 107.907, 107.826)), (' A 306  ILE HD13', ' A 321  VAL HG11', -0.404, (83.838, 130.985, 140.445)), (' B  59  TRP  HB2', ' B  87  TRP  CH2', -0.403, (116.096, 93.731, 119.844)), (' E 266  LEU HD22', ' E 279  TYR  HB3', -0.403, (115.029, 119.197, 81.378)), (' C 266  LEU HD22', ' C 279  TYR  HB3', -0.403, (106.889, 87.263, 134.768)), (' B 338  HIS  ND1', ' B 338  HIS  O  ', -0.402, (138.773, 126.983, 147.681)), (' A 314  VAL HG11', ' A 317  LYS  HB3', -0.402, (68.164, 130.339, 137.598)), (' E 338  HIS  ND1', ' E 338  HIS  O  ', -0.402, (125.694, 139.363, 68.442)), (' A 266  LEU HD22', ' A 279  TYR  HB3', -0.402, (88.386, 111.609, 134.853)), (' C 338  HIS  ND1', ' C 338  HIS  O  ', -0.401, (106.639, 64.056, 147.43)), (' D 266  LEU HD22', ' D 279  TYR  HB3', -0.401, (111.981, 88.587, 81.456)), (' B  27  ILE HD12', ' F  27  ILE HD12', -0.4, (108.308, 90.823, 107.555)), (' D 338  HIS  ND1', ' D 338  HIS  O  ', -0.4, (124.017, 68.936, 68.18))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
