# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 484 ', 'VAL', 0.020673490246045992, (-33.286000000000016, 36.788, -79.99)), ('B', '  97 ', 'CYS', 0.012623923547075488, (11.891000000000002, -1.5979999999999954, -36.037))]
data['omega'] = []
data['rota'] = [('B', '  12 ', 'THR', 0.12410916073741325, (6.664000000000001, 0.5430000000000046, -41.716)), ('B', '  69 ', 'SER', 0.03447187590921472, (1.1320000000000032, -13.450999999999999, -53.47999999999998)), ('B', '  95 ', 'ASN', 0.008534289359625583, (15.455000000000004, -4.282999999999998, -40.208999999999996)), ('B', '  96 ', 'THR', 0.010251190115976536, (14.486, -0.7839999999999971, -38.824)), ('B', ' 103 ', 'VAL', 0.06371034817251847, (0.9769999999999999, -2.2369999999999965, -26.418)), ('B', ' 188 ', 'THR', 0.0933476728801248, (-35.76700000000002, 13.358000000000008, -57.484)), ('B', ' 192 ', 'LYS', 0.0, (-31.576000000000015, 13.375000000000007, -54.023)), ('B', ' 215 ', 'THR', 0.15863176083026367, (-33.997, 27.590000000000003, -43.974)), ('B', ' 220 ', 'ASN', 0.25678817075721816, (-43.94700000000001, 18.059000000000005, -48.471999999999994)), ('B', ' 229 ', 'SER', 0.1086382469042626, (-21.937, 12.404, -41.35)), ('B', ' 231 ', 'THR', 0.08603133152508297, (-15.113000000000003, 11.989000000000006, -43.53999999999999)), ('B', ' 259 ', 'SER', 0.21400717783510848, (-7.655000000000014, 52.57599999999999, -23.013999999999992)), ('A', '  46 ', 'ASN', 0.06070788078660197, (-2.537000000000006, 54.702, -45.908999999999985)), ('A', ' 255 ', 'THR', 0.16692273002890237, (3.434999999999997, -3.819999999999993, -62.991)), ('A', ' 258 ', 'ILE', 0.22646695997735872, (-0.4220000000000024, -5.409999999999993, -67.477)), ('A', ' 259 ', 'SER', 0.27600086321442835, (-3.356, -6.8679999999999914, -69.501)), ('A', ' 502 ', 'ARG', 0.03274436612496528, (-36.90600000000001, 7.3060000000000045, -96.69299999999997)), ('A', ' 530 ', 'THR', 0.024871683566800723, (-31.55000000000002, 16.744000000000007, -79.174))]
data['cbeta'] = [('A', ' 530 ', 'THR', ' ', 0.2545211915013583, (-32.711, 17.738000000000007, -79.14899999999999))]
data['probe'] = [(' A  12  THR HG21', ' A  25  LEU  O  ', -0.853, (5.402, 47.943, -55.566)), (' B 201  GLU  OE2', ' B 801  HOH  O  ', -0.84, (-38.334, 22.152, -26.536)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.815, (3.8, -1.863, -39.407)), (' B 183  THR  HG1', ' B 228  THR  HG1', -0.791, (-27.384, 16.499, -42.86)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.753, (-6.55, 27.771, -20.719)), (' B   7  LEU HD12', ' B 103  VAL HG22', -0.704, (2.025, -1.548, -29.665)), (' B  27  CYS  SG ', ' B 816  HOH  O  ', -0.682, (8.387, -5.334, -41.569)), (' B   7  LEU  CD1', ' B 103  VAL HG22', -0.674, (1.554, -1.283, -29.351)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.668, (-33.233, 34.703, -21.88)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.658, (9.811, -0.321, -31.74)), (' A  12  THR HG22', ' A  14  LEU  H  ', -0.652, (4.435, 48.469, -52.892)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.627, (-26.6, 10.509, -79.833)), (' A  13  SER  O  ', ' A  44  SER  HB3', -0.619, (2.284, 50.361, -50.046)), (' A  46  ASN  N  ', ' A  46  ASN  OD1', -0.604, (-0.835, 54.058, -45.551)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.6, (2.096, -2.098, -45.666)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.598, (-6.466, 27.383, -20.97)), (' B  84  CYS  HB3', ' B 951  HOH  O  ', -0.594, (2.021, -15.449, -39.994)), (' B  47  PRO  O  ', ' B 803  HOH  O  ', -0.589, (-3.31, -8.874, -50.039)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.586, (2.66, 42.898, -65.62)), (' B 183  THR  OG1', ' B 228  THR  OG1', -0.582, (-27.209, 16.017, -43.745)), (' B  13  SER  HB2', ' B  92  LEU  HB2', -0.568, (7.272, -1.424, -46.623)), (' B 477  LYS  NZ ', ' B 551  GLU  OE2', -0.562, (-34.368, 13.971, -4.633)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.559, (-2.175, 32.497, -21.724)), (' A 175  PRO  HG2', ' A 180  TYR  CE1', -0.554, (-26.369, 33.193, -72.578)), (' A 163  LEU HD23', ' A 211  TYR  CD2', -0.552, (-41.303, 27.596, -65.041)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.55, (0.999, 13.942, -56.44)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.547, (-32.062, 19.902, -79.359)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.538, (-26.883, 18.701, -86.819)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.535, (2.223, 41.785, -29.274)), (' B  91  GLY  N  ', ' B 816  HOH  O  ', -0.531, (7.579, -6.106, -43.053)), (' A   7  LEU HD21', ' A 130  LEU HD21', -0.52, (2.058, 41.819, -65.162)), (' A 156  GLU  HA ', ' A 221  VAL HG22', -0.52, (-47.141, 34.072, -61.32)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.515, (-34.844, 26.305, -15.067)), (' B  69  SER  HB2', ' B  71  TYR  CE2', -0.511, (-0.119, -15.862, -53.979)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.511, (-0.585, 29.981, -26.819)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.511, (-18.461, 8.631, -88.978)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.508, (3.729, 14.954, -63.124)), (' A 420  GLU  OE1', ' A 427  ARG  NH1', -0.505, (0.097, 30.47, -79.172)), (' A  13  SER  O  ', ' A  44  SER  CB ', -0.505, (1.774, 50.158, -49.49)), (' A 480  ILE HG12', ' A 550  THR HG22', -0.497, (-28.697, 30.913, -90.248)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.497, (-0.347, 61.76, -61.505)), (' A 318  CYS  HB3', ' A 343  PHE  CD2', -0.486, (-18.437, 6.484, -61.204)), (' B 177  ASN  HB3', ' B 516  ASN  ND2', -0.486, (-33.812, 16.561, -26.87)), (' B 385  SER  OG ', ' B 805  HOH  O  ', -0.482, (-3.601, 16.747, -36.141)), (' B 219  LEU  O  ', ' B 219  LEU HD12', -0.479, (-42.883, 19.792, -45.971)), (' B 404  GLN  NE2', ' B 705  PO4  O2 ', -0.478, (-20.368, 29.66, -19.941)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.477, (-29.329, 32.02, -89.618)), (' B 152  ALA  HB2', ' B 167  TRP  CZ3', -0.474, (-36.055, 9.497, -38.203)), (' A  32  ASP  HB2', ' A 103  VAL HG11', -0.471, (5.664, 49.077, -65.488)), (' B 508  LYS  HD3', ' B 998  HOH  O  ', -0.466, (-36.645, 41.573, -17.675)), (' A  64  TYR  O  ', ' A  70  TYR  HA ', -0.462, (2.912, 63.739, -50.124)), (' A 351  THR HG23', ' A 364  PRO  HG3', -0.461, (-10.532, 15.031, -51.615)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.46, (-11.731, 27.201, -22.698)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.459, (-32.268, 20.015, -79.121)), (' A 278  SER  HA ', ' A 435  ASP  OD1', -0.456, (3.719, 15.881, -70.738)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.452, (-0.767, -2.66, -27.589)), (' B 480  ILE HD11', ' B 875  HOH  O  ', -0.451, (-37.164, 14.491, -9.585)), (' A  60  VAL  HB ', ' A 882  HOH  O  ', -0.449, (-1.237, 57.786, -56.429)), (' B  19  CYS  SG ', ' B 110  ALA  HB1', -0.449, (-7.085, -0.816, -33.424)), (' B 404  GLN  NE2', ' B 837  HOH  O  ', -0.449, (-19.08, 29.436, -21.091)), (' B 551  GLU  HG3', ' B 907  HOH  O  ', -0.448, (-34.662, 13.128, -8.232)), (' A 217  TYR  CE1', ' B 217  TYR  HD1', -0.448, (-38.917, 24.408, -50.882)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.446, (-43.529, 16.416, -42.84)), (' A 269  TYR  OH ', ' A 294  GLY  HA3', -0.445, (-3.933, 2.72, -69.678)), (' A 152  ALA  HB2', ' A 167  TRP  CZ3', -0.445, (-34.983, 37.14, -66.069)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.442, (-3.286, 10.48, -59.444)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.442, (-26.088, 27.521, -5.997)), (' B 216  THR  O  ', ' B 217  TYR  CD2', -0.441, (-36.883, 26.417, -46.976)), (' A 353  GLU  HA ', ' A 353  GLU  OE2', -0.44, (-10.054, 4.974, -50.799)), (' B 533  VAL HG11', ' B 560  ARG  O  ', -0.439, (-26.1, 23.818, -16.878)), (' B 367  THR  HA ', ' B 392  ARG  O  ', -0.438, (1.137, 30.583, -38.895)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.434, (2.453, 15.963, -65.702)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.433, (-12.219, 30.443, -41.597)), (' A  12  THR HG22', ' A  14  LEU  N  ', -0.433, (4.241, 48.644, -52.197)), (' A 318  CYS  HB3', ' A 343  PHE  CE2', -0.433, (-17.869, 6.369, -61.388)), (' B  31  TYR  CZ ', ' B  35  ILE HG21', -0.43, (2.541, -13.233, -32.303)), (' A  16  CYS  O  ', ' A  22  ARG  HA ', -0.43, (-5.008, 47.606, -56.984)), (' B 405  LEU HD21', ' B 560  ARG  HA ', -0.427, (-23.713, 22.251, -17.745)), (' B 554  HIS  ND1', ' B 811  HOH  O  ', -0.425, (-26.017, 15.338, -19.355)), (' B  47  PRO  O  ', ' B  49  VAL HG12', -0.425, (-4.318, -9.096, -48.869)), (' A 139  LYS  HG2', ' A 232  VAL HG22', -0.423, (-13.841, 34.807, -60.611)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.42, (-2.055, 8.271, -60.425)), (' A 260  ASP  HA ', ' A 263  SER  OG ', -0.42, (-1.031, -6.097, -73.84)), (' A 334  ILE HD12', ' A 348  VAL HG13', -0.42, (-20.149, 12.095, -54.096)), (' B  28  LYS  O  ', ' B  32  ASP  OD1', -0.42, (5.337, -6.743, -31.27)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.418, (-4.374, 46.226, -58.955)), (' B 368  ALA  O  ', ' B 393  ALA  HA ', -0.417, (1.548, 32.627, -35.883)), (' B 563  VAL  O  ', ' B 567  ARG  NE ', -0.417, (-25.268, 29.819, -17.779)), (' B 376  ILE  HA ', ' B 376  ILE HD12', -0.416, (-11.315, 25.102, -26.732)), (' A 533  VAL HG11', ' A 560  ARG  O  ', -0.416, (-19.436, 20.962, -83.098)), (' A 268  ASN  HB3', ' A 436  MET  SD ', -0.414, (1.607, 8.326, -72.994)), (' A 474  MET  SD ', ' A 495  VAL HG11', -0.414, (-31.413, 18.609, -97.656)), (' B 183  THR  O  ', ' B 225  PHE  HA ', -0.412, (-32.384, 14.661, -43.525)), (' A  12  THR  OG1', ' A  26  CYS  HA ', -0.412, (6.959, 46.685, -55.027)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.411, (-0.761, 15.687, -53.508)), (' A 252  LEU  HB3', ' A 299  TYR  CD2', -0.411, (4.414, 4.393, -61.417)), (' B  15  ARG  HG3', ' B  24  PHE  CD2', -0.41, (0.166, 1.645, -42.507)), (' B 542  ASP  OD1', ' B 569  LYS  HE3', -0.406, (-30.601, 41.161, -17.602)), (' B 504  PRO  HB3', ' B 507  ARG  NH2', -0.406, (-48.594, 37.578, -12.993)), (' A  13  SER  OG ', ' A  44  SER  HB2', -0.403, (2.51, 50.844, -47.984)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.402, (-34.101, 21.171, -46.624)), (' A 201  GLU  O  ', ' A 210  VAL  N  ', -0.401, (-38.607, 27.729, -71.374)), (' B 188  THR HG23', ' B 192  LYS  HA ', -0.4, (-32.918, 13.459, -55.316))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
