# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 105  ILE  HB ', ' A 239  GLN  HB2', -0.631, (171.47, 157.819, 247.286)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.629, (226.384, 178.714, 260.229)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.617, (236.619, 187.35, 245.247)), (' A 570  ALA  HB1', ' B 963  VAL HG11', -0.609, (216.137, 184.228, 218.366)), (' B 821  LEU HD11', ' B 939  SER  HB2', -0.577, (227.557, 183.508, 186.754)), (' B  94  SER  HB3', ' B 190  ARG  HB2', -0.575, (251.217, 188.862, 234.901)), (' B 393  THR  HB ', ' B 522  ALA  HA ', -0.573, (204.378, 231.213, 244.998)), (' A  94  SER  HB2', ' A 190  ARG  HB2', -0.568, (163.524, 160.344, 233.705)), (' C 204  TYR  HA ', ' C 225  PRO  HA ', -0.56, (192.266, 238.491, 236.603)), (' C 278  LYS  HE3', ' C 287  ASP  HB2', -0.559, (191.299, 236.393, 216.919)), (' B 762  GLN  OE1', ' B 765  ARG  NH1', -0.559, (189.69, 188.833, 213.703)), (' B 418  ILE  HA ', ' B 422  ASN HD22', -0.556, (184.746, 213.815, 261.114)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.555, (182.829, 229.577, 217.024)), (' C 418  ILE  HA ', ' C 422  ASN HD22', -0.555, (195.313, 179.642, 260.46)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.529, (172.091, 184.349, 186.172)), (' C 226  LEU  HG ', ' C 227  VAL HG23', -0.528, (194.315, 242.001, 242.323)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.527, (234.847, 198.514, 216.969)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.526, (171.251, 141.519, 238.559)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.525, (229.975, 166.385, 283.635)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.521, (198.907, 166.445, 187.691)), (' B 317  ASN  ND2', ' C 737  ASP  OD2', -0.515, (218.807, 211.487, 218.576)), (' C 926  GLN  NE2', ' Q   1  NAG  O6 ', -0.51, (192.013, 225.496, 165.887)), (' C 323  THR  OG1', ' C 324  GLU  OE1', -0.51, (162.313, 211.41, 231.797)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.509, (177.522, 229.139, 217.423)), (' C 206  LYS  HB2', ' C 223  LEU  HA ', -0.508, (190.693, 242.112, 231.422)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.503, (184.971, 166.314, 217.274)), (' C 821  LEU HD11', ' C 939  SER  HB3', -0.502, (199.973, 231.843, 186.597)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.5, (181.865, 170.385, 217.049)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.496, (262.444, 205.701, 241.413)), (' C 156  GLU  OE2', ' C 158  ARG  NH1', -0.494, (173.571, 257.077, 256.486)), (' B  39  PRO  HG2', ' B  51  THR HG21', -0.492, (231.046, 190.363, 227.049)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.487, (166.302, 248.614, 240.182)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.485, (162.286, 250.702, 240.656)), (' A 189  LEU HD12', ' A 210  ILE HD13', -0.482, (162.826, 158.59, 226.214)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.477, (236.678, 204.019, 217.353)), (' B 360  ASN  H  ', ' B 523  THR  HB ', -0.477, (205.866, 234.346, 250.47)), (' B 206  LYS  NZ ', ' B 224  GLU  OE2', -0.477, (242.672, 180.183, 228.532)), (' C  36  VAL HG13', ' C 222  ALA  HA ', -0.475, (188.915, 238.811, 227.183)), (' A 544  ASN HD21', ' A 579  PRO  HB3', -0.474, (225.674, 172.203, 237.317)), (' C 128  ILE HD13', ' C 170  TYR  HD2', -0.467, (193.149, 242.916, 249.718)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.463, (173.329, 149.062, 230.147)), (' B 324  GLU  H  ', ' B 539  VAL HG12', -0.463, (226.652, 225.967, 231.344)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.462, (213.604, 193.485, 142.684)), (' A  97  LYS  HG2', ' A 186  PHE  HD1', -0.461, (157.977, 152.392, 230.734)), (' C 393  THR  HB ', ' C 522  ALA  HA ', -0.461, (170.655, 187.83, 244.79)), (' C  94  SER  HB3', ' C 190  ARG  HB2', -0.461, (183.703, 249.082, 236.232)), (' B  92  PHE  HB3', ' B 192  PHE  HB2', -0.461, (246.037, 191.626, 237.207)), (' B 926  GLN  NE2', ' K   1  NAG  O6 ', -0.458, (226.439, 194.434, 166.239)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.458, (181.157, 226.158, 200.628)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.456, (188.899, 195.737, 261.239)), (' B 377  PHE  HE2', ' B 384  PRO  HB3', -0.455, (209.551, 214.131, 254.232)), (' A  80  ASP  O  ', ' A 265  TYR  OH ', -0.455, (170.053, 151.616, 240.038)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.455, (195.246, 230.588, 231.366)), (' B 276  LEU  HB3', ' B 289  VAL  HB ', -0.454, (232.791, 195.124, 218.133)), (' A 756  TYR  OH ', ' A 994  ASP  OD1', -0.453, (195.073, 205.14, 231.131)), (' A 164  ASN  OD1', ' A 165  ASN  N  ', -0.453, (170.812, 165.347, 262.923)), (' B 995  ARG  NH2', ' C 994  ASP  OD2', -0.45, (206.519, 200.105, 233.159)), (' A  14  GLN  HB3', ' A 158  ARG  HE ', -0.449, (161.158, 148.676, 257.646)), (' B 130  VAL  HB ', ' B 168  PHE  HB3', -0.448, (237.025, 186.633, 254.032)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.447, (173.534, 180.571, 230.57)), (' C 659  SER  HB3', ' C 698  SER  HB3', -0.444, (171.254, 217.447, 187.764)), (' B  31  SER  HB3', ' B  60  SER  H  ', -0.441, (244.761, 200.561, 225.89)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.441, (187.054, 168.214, 207.657)), (' A1029  MET  O  ', ' A1033  VAL  HB ', -0.44, (186.787, 201.789, 179.615)), (' A 106  PHE  HB2', ' A 117  LEU  HB3', -0.439, (172.384, 165.361, 248.73)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.437, (171.192, 145.801, 238.073)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.436, (181.483, 186.509, 182.114)), (' A 907  ASN HD21', ' A 913  GLN  HG3', -0.436, (190.04, 197.209, 158.165)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.436, (229.449, 216.947, 188.31)), (' B  36  VAL HG23', ' B 222  ALA  HA ', -0.433, (240.198, 188.377, 226.173)), (' C 598  ILE HG23', ' C 664  ILE HG21', -0.433, (178.157, 221.272, 202.343)), (' B 866  THR  H  ', ' B 869  MET  HE3', -0.432, (205.927, 173.746, 194.091)), (' A 374  PHE  HD1', ' A 436  TRP  HB3', -0.432, (219.432, 166.612, 271.44)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.432, (259.223, 203.436, 240.394)), (' A 934  ILE  HA ', ' A 934  ILE HD13', -0.43, (179.677, 184.136, 181.286)), (' B 132  GLU  OE1', ' B 165  ASN  ND2', -0.429, (237.996, 192.835, 264.21)), (' A 996  LEU  HA ', ' A 996  LEU HD23', -0.427, (189.116, 197.967, 229.894)), (' C 117  LEU HD22', ' C 231  ILE HD13', -0.427, (186.086, 235.358, 249.536)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.426, (234.287, 204.709, 207.456)), (' B  39  PRO  HG3', ' B  55  PHE  HZ ', -0.425, (232.355, 191.002, 228.158)), (' C 916  LEU HD22', ' C 923  ILE HD13', -0.425, (200.089, 219.882, 162.564)), (' B  80  ASP  O  ', ' B 265  TYR  OH ', -0.425, (254.435, 198.649, 242.103)), (' B 105  ILE  HB ', ' B 239  GLN  HB3', -0.425, (248.408, 196.522, 248.336)), (' B 383  SER  N  ', ' C 983  ARG  O  ', -0.425, (208.026, 214.353, 246.055)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.425, (163.228, 171.824, 247.192)), (' A1139  ASP  HB3', ' A1142  GLN  HB2', -0.424, (203.149, 191.201, 134.611)), (' C 986  PRO  HA ', ' C 989  ALA  HB3', -0.423, (211.314, 207.994, 240.963)), (' C1139  ASP  HB3', ' C1142  GLN  HB2', -0.423, (191.72, 201.911, 134.594)), (' B 327  VAL  HA ', ' B 542  ASN  HB3', -0.422, (218.815, 227.308, 239.603)), (' A 903  ALA  HB2', ' A 916  LEU HD12', -0.422, (183.691, 194.863, 160.123)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.422, (224.19, 190.386, 181.665)), (' C 229  LEU HD12', ' C 230  PRO  HD2', -0.421, (193.047, 236.904, 249.69)), (' B 907  ASN  ND2', ' B 911  VAL  O  ', -0.421, (209.733, 195.072, 159.932)), (' C  83  VAL HG12', ' C 237  ARG  HG2', -0.418, (172.19, 237.56, 247.699)), (' B  93  ALA  HB3', ' B 266  TYR  HB2', -0.418, (249.902, 195.61, 232.361)), (' C1086  LYS  HB2', ' C1086  LYS  HE2', -0.417, (185.964, 194.128, 141.198)), (' B 977  LEU HD22', ' B 993  ILE HG12', -0.415, (204.34, 185.701, 233.666)), (' A 528  LYS  HA ', ' A 528  LYS  HD3', -0.415, (218.662, 171.406, 246.756)), (' A 127  VAL HG21', ' A1302  NAG  H62', -0.414, (158.216, 165.27, 252.401)), (' C 117  LEU HD22', ' C 231  ILE HG21', -0.413, (186.611, 236.217, 250.133)), (' C  92  PHE  HZ ', ' C 101  ILE HD13', -0.412, (179.307, 247.704, 239.879)), (' B1139  ASP  HB3', ' B1142  GLN  HB2', -0.412, (206.649, 206.604, 134.694)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.411, (248.659, 180.572, 253.893)), (' C 331  ASN  HB3', ' C 580  GLN HE21', -0.411, (158.026, 196.816, 244.91)), (' A 675  GLN  O  ', ' A 691  SER  N  ', -0.41, (186.224, 160.0, 198.041)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.41, (199.478, 214.827, 142.617)), (' A 971  GLY  HA3', ' A 995  ARG HH21', -0.41, (193.872, 193.688, 233.878)), (' A 978  ASN  HB3', ' C 547  THR  HB ', -0.409, (175.184, 201.358, 235.478)), (' C 555  SER  HB3', ' C 586  ASP  HB2', -0.409, (161.128, 194.858, 224.742)), (' C 144  TYR  N  ', ' C 153  MET  O  ', -0.409, (179.547, 263.332, 250.722)), (' B1086  LYS  HB2', ' B1086  LYS  HE2', -0.407, (202.535, 215.618, 141.387)), (' A 374  PHE  HA ', ' A 436  TRP  HB3', -0.407, (218.828, 166.3, 271.903)), (' C 203  ILE HD12', ' C 227  VAL  HB ', -0.406, (191.82, 240.306, 244.004)), (' C  31  SER  HB3', ' C  60  SER  H  ', -0.403, (176.141, 237.182, 225.916)), (' B  26  PRO  HB3', ' B  65  PHE  HE1', -0.403, (253.919, 205.061, 237.871)), (' B 193  VAL HG23', ' B 223  LEU HD22', -0.402, (241.522, 189.925, 232.902)), (' B 756  TYR  OH ', ' B 994  ASP  OD1', -0.401, (197.347, 193.258, 231.192)), (' C  39  PRO  HG3', ' C  55  PHE  HZ ', -0.4, (189.855, 230.634, 228.634)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.4, (188.588, 192.076, 142.333))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
