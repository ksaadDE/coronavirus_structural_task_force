# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   4 ', 'LYS', 0.010280210080723176, (20.193, 4.024, -7.681999999999999)), ('A', '   5 ', 'GLY', 0.04259987371333175, (23.114, 5.100000000000001, -5.5169999999999995)), ('A', '  11 ', 'ASP', 0.01831358153324898, (19.179, 6.173, -20.685)), ('A', '  40 ', 'CYS', 0.015190320757305377, (0.315, 8.552, 2.328)), ('A', '  46 ', 'GLU', 0.021085956894409626, (11.682999999999998, -2.225, -6.788999999999999)), ('A', '  69 ', 'VAL', 0.03517970256420496, (-7.038, 6.9319999999999995, 18.693)), ('A', ' 111 ', 'ASP', 0.006675592755368159, (-9.332, -17.380000000000003, -5.074))]
data['omega'] = []
data['rota'] = [('A', '   4 ', 'LYS', 0.0, (20.193, 4.024, -7.681999999999999)), ('A', '   7 ', 'THR', 0.09017610138667984, (23.473, 7.3160000000000025, -11.313)), ('A', '  15 ', 'GLU', 0.15008729223242884, (14.103999999999994, 1.275, -16.794)), ('A', '  16 ', 'VAL', 0.2775085492437725, (17.442, 1.857, -15.063)), ('A', '  20 ', 'LYS', 0.0, (8.265, 2.193, -9.781)), ('A', '  23 ', 'ARG', 0.029591052802046998, (-0.9359999999999997, 3.923, -5.074)), ('A', '  28 ', 'LEU', 0.03091173603019079, (-10.292999999999997, -0.068, 4.468)), ('A', '  29 ', 'ASP', 0.015440097481220664, (-11.996, 2.281000000000001, 6.925999999999998)), ('A', '  30 ', 'GLU', 0.21420047529363268, (-14.834, 4.813, 7.009999999999998)), ('A', '  34 ', 'LYS', 0.0, (-8.187999999999999, 9.224, 3.757999999999999)), ('A', '  36 ', 'LEU', 0.23682192605910735, (-4.212, 5.760000000000001, 4.403)), ('A', '  39 ', 'LYS', 0.0, (-2.053999999999999, 10.989, 4.037)), ('A', '  41 ', 'SER', 0.12153706683969952, (-0.9120000000000001, 5.897, -0.10399999999999998)), ('A', '  44 ', 'THR', 0.26425812414122074, (7.821, 2.624, -4.505)), ('A', '  46 ', 'GLU', 0.016161441248011787, (11.682999999999998, -2.225, -6.788999999999999)), ('A', '  50 ', 'GLU', 0.034837408348279295, (6.397, -9.868, -5.402)), ('A', '  53 ', 'GLU', 0.014951459932230488, (6.230999999999999, -8.203, -0.535)), ('A', '  60 ', 'GLU', 0.0913297658605983, (3.253, -1.2, 7.769)), ('A', '  64 ', 'LYS', 0.0, (1.6419999999999995, 4.061, 12.459999999999999)), ('A', '  70 ', 'SER', 0.005803218585344747, (-7.078000000000001, 3.136000000000001, 18.45799999999999)), ('A', '  74 ', 'THR', 0.0341744070958496, (-11.335, -1.223, 18.929)), ('A', '  79 ', 'ASP', 0.013901103334147447, (-8.499999999999996, -3.539, 15.359)), ('A', '  80 ', 'LEU', 0.026643557460303138, (-5.164999999999998, -1.765, 14.908999999999999)), ('A', '  81 ', 'ASP', 0.08772064391791412, (-3.0590000000000006, -4.612, 16.294999999999998)), ('A', '  92 ', 'ASP', 0.04983006449217326, (-5.593, -4.526, -9.839)), ('A', '  97 ', 'GLU', 0.07518442491821896, (-2.8649999999999993, -9.683000000000002, -8.05)), ('A', ' 101 ', 'SER', 0.07032897207481882, (0.44000000000000017, 2.296, -11.147)), ('A', ' 106 ', 'SER', 0.07732689609196318, (-8.613, -6.1530000000000005, -0.613)), ('A', ' 111 ', 'ASP', 0.11392321125165718, (-9.332, -17.380000000000003, -5.074)), ('A', ' 112 ', 'GLU', 0.00441290745950395, (-6.979999999999998, -20.005, -3.642999999999999))]
data['cbeta'] = []
data['probe'] = [(' A  67  GLN  N  ', ' A  68  PRO  CD ', -0.719, (-3.709, 5.96, 13.725)), (' A  94  ALA  HB3', ' A  96  GLU  OE1', -0.686, (-6.733, -7.291, -13.763)), (' A  24  ILE HD11', ' A 103  MET  HE3', -0.682, (-0.469, -0.367, -3.268)), (' A  94  ALA  HB3', ' A  96  GLU  OE2', -0.676, (-6.77, -7.592, -14.645)), (' A  94  ALA  HB3', ' A  96  GLU  CD ', -0.643, (-6.014, -7.409, -13.758)), (' A  66  LEU HD22', ' A  83  TRP  CZ3', -0.642, (-5.985, 2.496, 8.706)), (' A  73  LEU HD12', ' A  80  LEU HD23', -0.642, (-6.647, 1.812, 14.134)), (' A  58  VAL  O  ', ' A  62  VAL HG23', -0.635, (0.351, 0.629, 4.043)), (' A  69  VAL HG21', ' A  72  LEU HD12', -0.632, (-10.721, 8.133, 17.842)), (' A  45  VAL HG13', ' A  54  PHE  CE1', -0.614, (6.821, -4.308, -5.735)), (' A  67  GLN  N  ', ' A  68  PRO  HD3', -0.591, (-3.271, 6.5, 13.46)), (' A  69  VAL  CG2', ' A  72  LEU HD12', -0.583, (-10.581, 7.875, 17.959)), (' A  23  ARG  C  ', ' A  24  ILE HD13', -0.563, (-1.793, 1.872, -4.555)), (' A  23  ARG  O  ', ' A  24  ILE HD13', -0.548, (-2.094, 1.236, -4.882)), (' A  36  LEU  HB3', ' A  66  LEU HD11', -0.546, (-4.346, 4.893, 6.312)), (' A  35  VAL HG12', ' A  65  THR HG22', -0.542, (-2.732, 7.428, 7.891)), (' A  66  LEU HD22', ' A  83  TRP  CH2', -0.541, (-6.205, 1.957, 8.732)), (' A  36  LEU  O  ', ' A  36  LEU HD12', -0.54, (-4.581, 3.903, 1.994)), (' A  12  THR HG23', ' A  15  GLU  HB2', -0.503, (14.766, 3.273, -18.707)), (' A  51  VAL HG11', ' A  97  GLU  CG ', -0.498, (-0.864, -9.13, -6.18)), (' A  51  VAL HG22', ' A  99  PHE  HD1', -0.496, (2.462, -8.033, -8.158)), (' A  29  ASP  OD2', ' A  32  VAL HG23', -0.495, (-9.012, 4.36, 8.624)), (' A  73  LEU  CD1', ' A  80  LEU HD23', -0.493, (-7.212, 1.879, 13.97)), (' A  66  LEU HD22', ' A  83  TRP  HZ3', -0.482, (-5.232, 2.22, 8.999)), (' A  22  VAL HG22', ' A 100  SER  O  ', -0.461, (1.959, 0.47, -9.233)), (' A  45  VAL HG13', ' A  54  PHE  CZ ', -0.452, (6.554, -4.254, -5.966)), (' A   3  ILE HG22', ' A   4  LYS  N  ', -0.448, (19.686, 5.558, -9.196)), (' A  22  VAL  CG1', ' A 103  MET  HE2', -0.441, (0.822, -0.162, -5.602)), (' A  50  GLU  HB3', ' A  52  THR HG22', -0.439, (4.899, -11.869, -3.366)), (' A  90  LEU  N  ', ' A  90  LEU HD22', -0.436, (-1.98, -6.81, -1.75)), (' A  24  ILE HD11', ' A 103  MET  CE ', -0.429, (0.263, -0.423, -3.564)), (' A  51  VAL HG11', ' A  97  GLU  HG2', -0.425, (-0.544, -9.34, -5.92)), (' A  62  VAL  O  ', ' A  66  LEU HD13', -0.414, (-2.864, 3.04, 8.818)), (' A  66  LEU  C  ', ' A  68  PRO  CD ', -0.405, (-4.364, 5.995, 13.829)), (' A  66  LEU  C  ', ' A  68  PRO  HD2', -0.403, (-4.361, 5.474, 13.695))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
