# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 901  GLN HE21', ' B 905  ARG HH21', -0.635, (208.176, 185.727, 171.019)), (' A 105  ILE  HB ', ' A 239  GLN  HB2', -0.634, (170.691, 158.145, 247.705)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.626, (225.946, 179.02, 261.294)), (' B 821  LEU HD11', ' B 939  SER  HB2', -0.614, (227.226, 183.606, 188.003)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.592, (235.724, 187.956, 245.828)), (' C 821  LEU HD11', ' C 939  SER  HB3', -0.587, (200.278, 231.744, 187.278)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.579, (171.123, 141.518, 239.245)), (' A  94  SER  HB2', ' A 190  ARG  HB2', -0.576, (162.94, 160.454, 234.247)), (' B 762  GLN  OE1', ' B 765  ARG  NH1', -0.574, (189.597, 188.523, 214.317)), (' B  94  SER  HB3', ' B 190  ARG  HB2', -0.566, (251.017, 189.479, 235.922)), (' B 418  ILE  HA ', ' B 422  ASN HD22', -0.564, (184.365, 213.923, 261.913)), (' B 393  THR  HB ', ' B 522  ALA  HA ', -0.563, (203.821, 231.002, 245.724)), (' C 278  LYS  HE3', ' C 287  ASP  HB2', -0.561, (190.458, 236.279, 217.998)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.558, (248.18, 180.927, 254.812)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.554, (229.23, 166.89, 284.891)), (' C 418  ILE  HA ', ' C 422  ASN HD22', -0.552, (194.93, 179.945, 261.265)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.549, (172.079, 184.312, 187.188)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.533, (182.461, 229.775, 218.127)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.531, (234.433, 199.62, 217.732)), (' A 570  ALA  HB1', ' B 963  VAL HG11', -0.53, (215.649, 184.747, 219.478)), (' C 127  VAL HG21', ' C1302  NAG  H62', -0.53, (188.501, 250.033, 255.85)), (' C 206  LYS  HB2', ' C 223  LEU  HA ', -0.527, (189.649, 242.645, 232.006)), (' B  93  ALA  HB3', ' B 266  TYR  HB2', -0.523, (249.554, 196.283, 233.17)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.521, (229.351, 217.623, 189.311)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.518, (181.759, 186.703, 183.027)), (' C 323  THR  OG1', ' C 324  GLU  OE1', -0.512, (161.806, 211.094, 232.6)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.508, (177.216, 229.051, 218.473)), (' C 724  THR HG23', ' C 934  ILE HD12', -0.505, (197.126, 222.55, 182.793)), (' B 360  ASN  H  ', ' B 523  THR  HB ', -0.502, (205.262, 234.199, 250.492)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.5, (181.212, 170.379, 217.663)), (' B 724  THR HG23', ' B 934  ILE HD12', -0.499, (220.455, 190.879, 183.498)), (' A 544  ASN HD21', ' A 579  PRO  HB3', -0.495, (225.699, 172.807, 238.329)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.495, (199.131, 166.617, 188.779)), (' C  94  SER  HB3', ' C 190  ARG  HB2', -0.492, (182.317, 248.95, 236.69)), (' C  36  VAL HG13', ' C 222  ALA  HA ', -0.492, (188.447, 238.931, 227.916)), (' C 226  LEU  HG ', ' C 227  VAL HG23', -0.489, (193.004, 242.702, 242.693)), (' B 317  ASN  ND2', ' C 737  ASP  OD2', -0.488, (218.04, 211.325, 219.922)), (' B  39  PRO  HG2', ' B  51  THR HG21', -0.487, (230.617, 190.898, 227.885)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.486, (184.062, 166.321, 217.563)), (' B 357  ARG  NH1', ' B 396  TYR  OH ', -0.485, (196.186, 232.029, 250.821)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.484, (236.362, 204.571, 218.301)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.479, (261.87, 206.043, 242.917)), (' B 276  LEU  HB3', ' B 289  VAL  HB ', -0.479, (232.582, 195.686, 218.948)), (' C 916  LEU HD22', ' C 923  ILE HD13', -0.478, (200.057, 219.773, 163.421)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.475, (256.946, 197.472, 234.052)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.474, (166.628, 151.13, 231.826)), (' C 204  TYR  HA ', ' C 225  PRO  HA ', -0.474, (191.191, 238.845, 237.604)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.473, (180.759, 226.312, 202.042)), (' A 189  LEU HD12', ' A 210  ILE HD13', -0.473, (162.498, 158.657, 226.726)), (' B 866  THR  H  ', ' B 869  MET  HE3', -0.472, (205.718, 173.796, 195.195)), (' A1029  MET  O  ', ' A1033  VAL  HB ', -0.472, (186.277, 201.423, 180.651)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.471, (213.594, 193.22, 143.82)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.468, (215.855, 171.58, 274.857)), (' C 117  LEU HD22', ' C 231  ILE HD13', -0.465, (185.269, 235.947, 250.097)), (' A 127  VAL HG21', ' A1302  NAG  H62', -0.464, (157.924, 165.212, 253.569)), (' C 331  ASN  HB3', ' C 580  GLN HE21', -0.463, (157.697, 196.37, 245.527)), (' A 164  ASN  OD1', ' A 165  ASN  N  ', -0.463, (170.278, 165.485, 263.685)), (' A  14  GLN  HB3', ' A 158  ARG  HE ', -0.462, (161.164, 149.189, 258.516)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.459, (219.734, 190.81, 168.018)), (' B 105  ILE  HB ', ' B 239  GLN  HB3', -0.456, (247.731, 196.685, 249.451)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.456, (162.713, 171.913, 247.867)), (' B 995  ARG  NH2', ' C 994  ASP  OD2', -0.454, (206.069, 199.987, 234.027)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.451, (234.105, 205.345, 208.418)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.45, (172.651, 180.605, 231.029)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.449, (172.682, 149.551, 231.164)), (' C 128  ILE HD13', ' C 170  TYR  HD2', -0.448, (192.065, 243.036, 250.297)), (' A 374  PHE  HA ', ' A 436  TRP  HB3', -0.446, (218.36, 166.924, 273.076)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.446, (186.612, 168.215, 208.469)), (' B 132  GLU  OE1', ' B 165  ASN  ND2', -0.445, (237.602, 193.143, 265.243)), (' B  36  VAL HG23', ' B 222  ALA  HA ', -0.444, (240.084, 188.969, 226.875)), (' B 278  LYS  HB2', ' B 278  LYS  HE3', -0.442, (234.041, 189.657, 216.017)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.442, (161.714, 250.626, 241.721)), (' C 555  SER  HB3', ' C 586  ASP  HB2', -0.442, (160.339, 194.514, 225.503)), (' B 377  PHE  HE2', ' B 384  PRO  HB3', -0.441, (209.26, 214.533, 255.157)), (' C  31  SER  HB3', ' C  60  SER  H  ', -0.441, (175.757, 237.552, 226.717)), (' A  93  ALA  HB3', ' A 266  TYR  HB2', -0.439, (169.695, 158.084, 231.751)), (' A 156  GLU  OE2', ' A 158  ARG  NH1', -0.437, (158.362, 147.762, 254.496)), (' B 130  VAL  HB ', ' B 168  PHE  HB3', -0.436, (236.356, 187.039, 255.041)), (' B 885  GLY  HA2', ' B 901  GLN  NE2', -0.436, (207.7, 184.138, 170.782)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.436, (170.665, 145.645, 239.098)), (' B  31  SER  HB3', ' B  60  SER  H  ', -0.436, (244.32, 201.199, 226.92)), (' C 393  THR  HB ', ' C 522  ALA  HA ', -0.435, (170.314, 187.672, 245.508)), (' A  39  PRO  HG3', ' A  51  THR HG21', -0.435, (175.976, 177.671, 228.237)), (' B 193  VAL HG23', ' B 223  LEU HD22', -0.435, (240.944, 190.913, 233.882)), (' B 342  PHE  HE2', ' B 434  ILE HG21', -0.433, (204.342, 218.483, 262.273)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.433, (258.655, 204.02, 241.949)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.433, (187.979, 191.809, 143.527)), (' B 342  PHE  HB2', ' B1307  NAG  H82', -0.43, (206.584, 223.777, 265.212)), (' B 977  LEU HD22', ' B 993  ILE HG12', -0.429, (203.922, 185.982, 234.759)), (' A1141  LEU HD23', ' A1145  LEU HD22', -0.429, (202.923, 195.518, 132.634)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.429, (190.076, 190.705, 175.093)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.429, (182.412, 189.944, 175.771)), (' C 971  GLY  HA3', ' C 995  ARG HH21', -0.427, (196.712, 207.958, 234.734)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.426, (185.912, 170.943, 201.469)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.426, (223.697, 190.389, 182.87)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.426, (194.964, 230.782, 232.385)), (' B  39  PRO  HG3', ' B  55  PHE  HZ ', -0.425, (232.013, 191.966, 228.868)), (' B  16  VAL  HB ', ' B 140  PHE  HZ ', -0.425, (260.737, 195.98, 255.972)), (' A 969  ASN  OD1', ' B 755  GLN  NE2', -0.424, (188.829, 189.93, 233.231)), (' A 326  ILE HG21', ' A 533  LEU HD12', -0.423, (218.093, 165.607, 233.927)), (' A 193  VAL HG13', ' A 270  LEU HD11', -0.423, (174.806, 168.286, 235.525)), (' A 971  GLY  HA3', ' A 995  ARG HH21', -0.423, (193.806, 193.876, 234.958)), (' A 528  LYS  HA ', ' A 528  LYS  HD3', -0.423, (218.245, 171.858, 247.747)), (' B 144  TYR  O  ', ' B 153  MET  N  ', -0.422, (266.547, 182.065, 249.941)), (' B 518  LEU HD21', ' B 546  LEU HD13', -0.42, (207.727, 224.404, 236.98)), (' A 715  PRO  O  ', ' A1110  TYR  N  ', -0.42, (193.677, 181.624, 159.95)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.42, (165.473, 248.819, 241.061)), (' C 986  PRO  HA ', ' C 989  ALA  HB3', -0.419, (211.444, 208.272, 241.928)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.418, (197.253, 212.917, 174.826)), (' B  92  PHE  HB3', ' B 192  PHE  HB2', -0.418, (245.48, 192.157, 238.126)), (' C  83  VAL HG12', ' C 237  ARG  HG2', -0.415, (171.521, 237.588, 248.434)), (' C 902  MET  HE3', ' C1049  LEU HD13', -0.415, (200.339, 217.378, 169.11)), (' A 934  ILE  HA ', ' A 934  ILE HD13', -0.415, (179.771, 184.262, 182.382)), (' A 776  LYS  NZ ', ' A 780  GLU  OE2', -0.413, (191.004, 210.422, 193.421)), (' B 324  GLU  H  ', ' B 539  VAL HG12', -0.412, (226.245, 226.182, 232.652)), (' A 381  GLY  HA3', ' A 430  THR  HA ', -0.411, (212.909, 183.849, 264.727)), (' A 498  GLN  HB2', ' A 501  TYR  CE2', -0.411, (222.802, 165.188, 292.845)), (' C 193  VAL HG13', ' C 270  LEU HD11', -0.409, (183.495, 234.681, 236.715)), (' A 618  THR  OG1', ' A 619  GLU  OE1', -0.409, (208.469, 160.69, 215.908)), (' B1086  LYS  HB2', ' B1086  LYS  HE2', -0.408, (202.536, 215.358, 142.374)), (' B  21  ARG HH21', ' B  79  PHE  HD2', -0.408, (259.101, 199.39, 248.389)), (' C  64  TRP  HH2', ' C 214  ARG  HG2', -0.407, (170.223, 251.212, 228.593)), (' B 907  ASN  ND2', ' B 911  VAL  O  ', -0.406, (209.599, 194.97, 160.991)), (' C 210  ILE HG21', ' C 217  PRO  HG3', -0.405, (181.85, 250.005, 227.393)), (' C 517  LEU  HA ', ' C 517  LEU HD13', -0.405, (176.779, 192.257, 243.786)), (' A 498  GLN  HB2', ' A 501  TYR  CD2', -0.405, (222.612, 164.993, 292.521)), (' C 599  THR  HB ', ' C 608  VAL HG12', -0.405, (178.178, 226.603, 208.648)), (' B1141  LEU HD23', ' B1145  LEU HD22', -0.405, (202.889, 204.021, 132.519)), (' A1139  ASP  HB3', ' A1142  GLN  HB2', -0.403, (203.293, 191.083, 135.772)), (' C 229  LEU HD12', ' C 230  PRO  HD2', -0.402, (192.396, 237.061, 250.388)), (' C1141  LEU HD23', ' C1145  LEU HD22', -0.402, (195.56, 199.782, 132.386)), (' A1029  MET  HB2', ' A1029  MET  HE2', -0.401, (185.913, 200.968, 185.55)), (' C 360  ASN  H  ', ' C 523  THR  HB ', -0.4, (166.838, 187.301, 250.7))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
