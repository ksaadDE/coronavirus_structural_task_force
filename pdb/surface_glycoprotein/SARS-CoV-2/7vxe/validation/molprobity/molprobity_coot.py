# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 445 ', 'VAL', 0.031036036908848756, (165.95600000000016, 188.149, 247.74800000000002)), ('B', ' 445 ', 'VAL', 0.031135240473737738, (151.093, 159.804, 246.57599999999996))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 563  GLN  O  ', ' A 577  ARG  NH1', -0.727, (188.418, 204.713, 197.748)), (' C 439  ASN  O  ', ' C 443  SER  OG ', -0.713, (178.352, 124.207, 248.467)), (' C 564  GLN  NE2', ' C 577  ARG  O  ', -0.685, (183.333, 135.083, 197.669)), (' B 334  ASN  O  ', ' B 362  VAL  N  ', -0.647, (132.71, 176.944, 216.024)), (' A  32  PHE  CD2', ' A  33  THR HG23', -0.637, (209.416, 149.375, 185.955)), (' A 403  ARG  NH2', ' A 406  GLU  OE2', -0.628, (158.797, 181.932, 230.019)), (' A 102  ARG  HG2', ' A 141  LEU HD12', -0.624, (215.212, 138.107, 214.9)), (' C 756  TYR  OH ', ' C 994  ASP  OD1', -0.608, (165.588, 177.114, 194.538)), (' B 403  ARG  NH2', ' B 406  GLU  OE2', -0.604, (161.37, 155.96, 229.417)), (' C  81  ASN  ND2', ' C 240  THR  O  ', -0.601, (120.427, 139.54, 206.025)), (' C 287  ASP  OD1', ' C 288  ALA  N  ', -0.593, (133.222, 152.339, 180.677)), (' A 287  ASP  OD1', ' A 288  ALA  N  ', -0.59, (202.662, 148.347, 184.156)), (' C 318  PHE  N  ', ' C 593  GLY  O  ', -0.586, (159.158, 143.868, 180.641)), (' B 287  ASP  OD1', ' B 288  ALA  N  ', -0.585, (171.556, 209.123, 182.173)), (' A 131  CYS  HB2', ' A 133  PHE  CE1', -0.566, (204.253, 144.29, 223.808)), (' B 112  SER  N  ', ' B 133  PHE  O  ', -0.561, (162.566, 219.295, 221.431)), (' C1050  MET  HE3', ' C1052  PHE  CZ ', -0.56, (150.967, 171.746, 135.369)), (' B 383  SER  OG ', ' C 985  ASP  OD1', -0.554, (154.032, 178.784, 211.306)), (' B 487  ASN  OD1', ' C 369  TYR  OH ', -0.547, (163.986, 134.164, 226.951)), (' B 403  ARG  NE ', ' B 405  ASP  OD1', -0.541, (160.605, 157.867, 230.967)), (' B1050  MET  HE2', ' B1052  PHE  HE1', -0.538, (184.979, 184.044, 136.906)), (' C  96  GLU  N  ', ' C  96  GLU  OE1', -0.535, (116.089, 144.372, 194.467)), (' A1050  MET  HE2', ' A1052  PHE  HE1', -0.53, (178.102, 150.184, 137.591)), (' B 474  GLN  NE2', ' B 478  THR  O  ', -0.529, (156.732, 129.939, 225.994)), (' C 404  GLY  N  ', ' C 504  GLY  O  ', -0.525, (172.663, 134.634, 249.216)), (' A 716  THR  N  ', ' A1071  GLN  O  ', -0.524, (195.034, 164.086, 126.282)), (' B 193  VAL HG23', ' B 223  LEU HD22', -0.518, (171.314, 214.371, 195.6)), (' B 716  THR  N  ', ' B1071  GLN  O  ', -0.516, (164.77, 191.169, 124.35)), (' A 916  LEU  O  ', ' A 920  GLN  N  ', -0.516, (186.64, 151.066, 123.301)), (' A  32  PHE  CE2', ' A  33  THR HG23', -0.514, (209.59, 149.583, 185.243)), (' B 102  ARG  O  ', ' B 121  ASN  N  ', -0.512, (174.223, 225.421, 208.787)), (' C 280  ASN  OD1', ' C 284  THR  N  ', -0.511, (128.629, 162.606, 181.973)), (' C 716  THR  N  ', ' C1071  GLN  O  ', -0.509, (156.49, 151.504, 124.822)), (' C1072  GLU  N  ', ' C1072  GLU  OE1', -0.506, (157.344, 148.247, 127.897)), (' A 383  SER  OG ', ' B 985  ASP  OD1', -0.505, (182.797, 178.405, 212.798)), (' B 111  ASP  OD1', ' B 112  SER  N  ', -0.496, (161.075, 219.479, 221.736)), (' A 422  ASN  OD1', ' A 423  TYR  N  ', -0.493, (160.98, 190.891, 223.264)), (' B  66  HIS  ND1', ' B 263  ALA  O  ', -0.488, (163.533, 232.741, 196.408)), (' B1072  GLU  N  ', ' B1072  GLU  OE1', -0.487, (161.226, 192.338, 126.841)), (' B  91  TYR  HD1', ' B 193  VAL HG22', -0.486, (168.754, 214.105, 196.135)), (' C 111  ASP  OD1', ' C 112  SER  N  ', -0.486, (128.913, 142.221, 221.509)), (' C 193  VAL HG23', ' C 223  LEU HD22', -0.481, (128.484, 151.248, 193.792)), (' A1072  GLU  N  ', ' A1072  GLU  OE1', -0.48, (197.216, 166.789, 129.317)), (' B 916  LEU  O  ', ' B 920  GLN  N  ', -0.476, (180.831, 189.782, 122.241)), (' B 120  VAL HG12', ' B 241  LEU HD22', -0.473, (170.272, 225.441, 211.344)), (' B  34  ARG  NE ', ' B 191  GLU  OE2', -0.467, (170.048, 220.001, 189.879)), (' C  27  ALA  O  ', ' C  64  TRP  N  ', -0.463, (127.07, 133.361, 194.759)), (' B 546  LEU HD11', ' B 565  PHE  CD2', -0.462, (136.165, 173.34, 194.936)), (' C 131  CYS  HB2', ' C 133  PHE  CE1', -0.461, (124.16, 150.867, 219.382)), (' C 106  PHE  O  ', ' C 117  LEU  N  ', -0.454, (128.84, 148.831, 213.072)), (' C1050  MET  HE3', ' C1052  PHE  CE1', -0.452, (151.403, 172.574, 135.576)), (' A  83  VAL HG22', ' A 239  GLN HE21', -0.45, (215.329, 153.51, 215.759)), (' A 108  THR  OG1', ' A 234  ASN  O  ', -0.447, (202.413, 155.786, 217.395)), (' C 661  GLU  O  ', ' C 695  TYR  OH ', -0.447, (153.366, 142.64, 156.215)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.445, (209.304, 146.881, 187.935)), (' A 453  TYR  CD1', ' A 495  TYR  CE1', -0.443, (159.759, 189.438, 231.882)), (' B 131  CYS  HB2', ' B 133  PHE  CE1', -0.439, (169.908, 218.968, 220.508)), (' A 111  ASP  OD1', ' A 112  SER  N  ', -0.437, (209.133, 152.449, 226.281)), (' C 568  ASP  OD1', ' C 569  ILE  N  ', -0.435, (182.775, 145.73, 183.274)), (' A 189  LEU HD22', ' A 210  ILE HD13', -0.433, (214.684, 140.914, 193.476)), (' A 661  GLU  O  ', ' A 695  TYR  OH ', -0.433, (202.509, 168.44, 158.15)), (' B 445  VAL HG12', ' B 446  GLY  N  ', -0.433, (151.881, 157.695, 246.911)), (' A 445  VAL HG12', ' A 446  GLY  N  ', -0.431, (163.855, 188.44, 248.001)), (' C 340  GLU  O  ', ' C 344  ALA  N  ', -0.43, (183.908, 128.085, 233.596)), (' A 383  SER  N  ', ' B 983  ARG  O  ', -0.429, (181.341, 181.513, 210.799)), (' B 393  THR HG21', ' B 520  ALA  O  ', -0.428, (137.212, 169.115, 203.748)), (' A 122  ASN  O  ', ' A 123  ALA  HB3', -0.427, (213.281, 130.794, 214.244)), (' C 759  PHE  O  ', ' C 763  LEU HD13', -0.426, (165.619, 180.608, 181.364)), (' C 578  ASP  OD2', ' C 581  THR  N  ', -0.425, (181.709, 128.481, 200.105)), (' A 193  VAL HG23', ' A 223  LEU HD22', -0.423, (204.602, 146.496, 198.443)), (' B 453  TYR  CD1', ' B 495  TYR  CE1', -0.423, (154.424, 154.181, 230.783)), (' A1056  ALA  HB2', ' A1061  VAL HG23', -0.422, (180.041, 150.647, 153.241)), (' A 102  ARG  CG ', ' A 141  LEU HD12', -0.421, (215.037, 137.91, 214.891)), (' B 661  GLU  O  ', ' B 695  TYR  OH ', -0.421, (155.944, 197.574, 155.551)), (' C 464  PHE  CG ', ' C 464  PHE  O  ', -0.42, (186.091, 149.135, 235.658)), (' A 216  LEU HD21', ' A 266  TYR  CD2', -0.419, (216.08, 147.847, 196.591)), (' A 102  ARG  CD ', ' A 141  LEU HD12', -0.418, (215.278, 137.35, 215.166)), (' A1039  ARG  NE ', ' B1031  GLU  OE2', -0.418, (174.132, 169.487, 143.361)), (' B 122  ASN  O  ', ' B 123  ALA  HB3', -0.416, (179.119, 231.74, 210.103)), (' B 194  PHE  HE1', ' B 203  ILE HG23', -0.413, (172.874, 215.689, 202.721)), (' A 212  LEU HD11', ' A 214  ARG  O  ', -0.413, (220.86, 146.313, 191.571)), (' B 738  CYS  SG ', ' B 764  ASN  ND2', -0.411, (186.105, 170.242, 182.169)), (' A 280  ASN  OD1', ' A 284  THR  N  ', -0.41, (195.947, 138.931, 185.574)), (' C 785  VAL HG12', ' C 787  GLN  H  ', -0.408, (157.338, 188.545, 141.92)), (' A  44  ARG  NH2', ' C 571  ASP  OD1', -0.405, (185.679, 148.909, 188.775)), (' A  93  ALA  O  ', ' A 266  TYR  N  ', -0.405, (215.701, 147.351, 201.057)), (' A 986  PRO  N  ', ' A 987  PRO  HD2', -0.403, (163.6, 157.714, 208.935)), (' A 410  ILE  O  ', ' A 411  ALA  HB2', -0.402, (167.836, 181.943, 219.459))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
