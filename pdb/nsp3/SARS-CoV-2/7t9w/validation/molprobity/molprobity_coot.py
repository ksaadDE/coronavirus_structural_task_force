# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '1285 ', 'SER', 0.29768179855674, (15.497, -70.764, -0.9820000000000002)), ('A', '1289 ', 'ILE', 0.0, (8.604, -60.104, 0.889)), ('A', '1303 ', 'THR', 0.2786948699922593, (9.551, -55.830000000000005, -1.743)), ('B', '1239 ', 'ILE', 0.00930252303720621, (29.594, 3.07, 3.5980000000000003)), ('C', '1329 ', 'ASN', 0.10950677803438487, (47.58399999999999, -67.17300000000003, 35.637)), ('D', '1260 ', 'LYS', 0.2755714362496077, (35.02, -23.202, -6.995000000000002)), ('D', '1264 ', 'ASN', 0.02023396056577775, (40.391000000000005, -33.869, -5.844)), ('D', '1290 ', 'LYS', 0.0, (44.38600000000001, -17.591, 0.4890000000000001)), ('E', '1258 ', 'ILE', 0.2990757282502661, (57.19, -79.209, -29.111000000000008)), ('E', '1277 ', 'LEU', 0.0, (65.067, -62.596, -13.182000000000004)), ('E', '1284 ', 'ASN', 0.2993967414029384, (72.846, -58.889, -19.585)), ('F', '1242 ', 'ASP', 0.0, (75.776, -21.547, 25.14)), ('F', '1243 ', 'VAL', 0.29808437895550877, (76.981, -18.29, 26.707)), ('F', '1266 ', 'LEU', 0.0, (71.798, -10.067000000000004, 35.172)), ('F', '1294 ', 'GLU', 0.16614024648843467, (66.013, -28.438000000000006, 49.31)), ('F', '1313 ', 'ASN', 0.14926218022722867, (64.69, -16.102, 34.65500000000001)), ('F', '1314 ', 'SER', 0.16712400735442273, (62.801, -19.397, 35.066)), ('F', '1319 ', 'THR', 0.08439754494091664, (55.899, -19.282, 43.33600000000001)), ('G', '1240 ', 'GLN', 0.2819747618302477, (40.19399999999999, -64.902, 22.149)), ('G', '1329 ', 'ASN', 0.033789069674276785, (12.573999999999996, -47.77800000000001, 58.803)), ('H', '1265 ', 'SER', 0.03917228195120647, (30.653999999999993, -35.312, -25.475000000000005)), ('H', '1266 ', 'LEU', 0.08460097304368903, (28.594, -32.641, -23.71900000000001)), ('I', '1241 ', 'LYS', 0.2942064123070911, (79.453, -14.631, 1.5830000000000002)), ('I', '1249 ', 'LYS', 0.2758041301040051, (84.74600000000001, -26.62100000000001, -12.037)), ('I', '1282 ', 'VAL', 0.1320632051665259, (60.302, -33.985, -19.266)), ('J', '1240 ', 'GLN', 0.0, (65.753, -81.83499999999998, 23.559000000000005)), ('J', '1259 ', 'LEU', 0.012858919872791221, (58.43800000000001, -80.50800000000001, 12.586)), ('J', '1282 ', 'VAL', 0.12307019417880503, (46.27299999999999, -59.536, 0.294)), ('J', '1298 ', 'VAL', 0.0724167613634616, (67.476, -60.61200000000001, 0.15600000000000003)), ('K', '1258 ', 'ILE', 0.0, (57.122, -38.5, 54.841)), ('K', '1264 ', 'ASN', 0.08407893134425184, (73.839, -42.638000000000005, 52.12)), ('K', '1268 ', 'ILE', 0.028754136328729613, (63.822, -45.019, 46.013)), ('K', '1301 ', 'LEU', 0.29826558855058116, (54.115, -56.040000000000006, 46.24900000000001)), ('K', '1309 ', 'LEU', 0.03252868101613762, (57.008, -47.865000000000016, 55.99600000000001)), ('L', '1258 ', 'ILE', 0.008638900375511226, (41.366, -56.51500000000001, -4.673)), ('L', '1260 ', 'LYS', 0.2985883445987864, (43.55, -62.732, -5.491)), ('L', '1263 ', 'ASN', 0.15563153452686831, (41.818, -72.516, -7.566)), ('M', '1250 ', 'THR', 0.2997270069059313, (24.01, 5.904, 50.379)), ('M', '1272 ', 'VAL', 0.0012169443703598248, (20.791, -11.328, 41.225)), ('N', '1241 ', 'LYS', 0.0, (-0.284, -65.26200000000003, 40.975)), ('N', '1249 ', 'LYS', 0.11016399176300637, (-4.75, -52.756, 28.042)), ('N', '1265 ', 'SER', 0.030546174138060007, (4.159999999999999, -48.20100000000001, 33.596)), ('N', '1269 ', 'THR', 0.04037609034660555, (6.956000000000002, -55.868999999999986, 23.840000000000007)), ('O', '1268 ', 'ILE', 0.09749778982063866, (45.38000000000001, -14.253000000000004, 27.601))]
data['cbeta'] = []
data['probe'] = [(' J1240  GLN  N  ', ' J1240  GLN HE21', -0.746, (64.435, -83.025, 24.266)), (' F1242  ASP  N  ', ' F1242  ASP  OD1', -0.717, (75.803, -23.029, 24.281)), (' E1322  ASN  HA ', ' E1325  LYS  HE2', -0.693, (62.867, -50.86, -12.911)), (' C1241  LYS  HE3', ' C1258  ILE HD11', -0.69, (63.031, -35.18, 8.026)), (' F1287  LEU  HB2', ' F1315  VAL HG21', -0.644, (64.502, -17.649, 40.311)), (' B1253  VAL HG22', ' B1258  ILE HG12', -0.623, (23.985, 4.236, 12.72)), (' F1285  SER  OG ', ' F1286  SER  N  ', -0.592, (63.463, -10.357, 39.161)), (' A1290  LYS  HG2', ' A1291  LYS  HG3', -0.579, (2.938, -56.747, 1.569)), (' K1242  ASP  HB2', ' K1257  ILE HG22', -0.565, (55.38, -42.994, 57.77)), (' K1268  ILE HD13', ' K1304  LEU HD11', -0.553, (60.207, -45.535, 48.948)), (' N1242  ASP  HB2', ' N1257  ILE HG22', -0.553, (3.538, -63.185, 38.886)), (' K1272  VAL  HB ', ' K1289  ILE HD13', -0.529, (57.827, -51.522, 42.017)), (' D1242  ASP  HB2', ' D1257  ILE HG22', -0.527, (41.501, -14.734, -10.808)), (' E1298  VAL HG12', ' L1250  THR HG23', -0.522, (49.814, -60.118, -12.078)), (' O1321  ALA  O  ', ' O1325  LYS  HG2', -0.515, (65.206, -14.019, 18.568)), (' D1290  LYS  HG3', ' D1291  LYS  HG3', -0.512, (41.87, -16.387, 2.72)), (' O1293  ASN  N  ', ' O1293  ASN  OD1', -0.498, (49.507, -24.681, 20.965)), (' B1242  ASP  HB2', ' B1257  ILE HG22', -0.495, (23.02, -3.327, 9.06)), (' O1301  LEU HD21', ' O1319  THR HG21', -0.494, (58.789, -20.455, 24.42)), (' L1245  GLU  HB3', ' L1260  LYS  HD2', -0.493, (42.093, -65.627, -2.773)), (' A1242  ASP  HB2', ' A1257  ILE HG22', -0.49, (3.097, -54.933, -11.881)), (' A1253  VAL HG22', ' A1258  ILE HG12', -0.49, (-4.267, -54.738, -7.842)), (' K1325  LYS  HG3', ' K1326  PRO  HD3', -0.488, (62.903, -66.592, 35.535)), (' H1302  LYS  HG2', ' H1307  HIS  CD2', -0.488, (12.617, -25.22, -24.26)), (' N1321  ALA  O  ', ' N1325  LYS  HG2', -0.487, (25.746, -54.678, 18.624)), (' K1302  LYS  HE2', ' K1314  SER  HB2', -0.486, (56.648, -55.521, 51.456)), (' O1281  TYR  HB2', ' O1320  ILE HG22', -0.485, (60.059, -12.153, 21.362)), (' J1282  VAL HG22', ' L1258  ILE HG21', -0.484, (44.985, -58.246, -2.506)), (' J1281  TYR  HD2', ' J1321  ALA  HA ', -0.484, (52.181, -55.569, 0.469)), (' E1253  VAL HG12', ' E1258  ILE HD12', -0.484, (55.219, -82.527, -28.871)), (' K1321  ALA  O  ', ' K1325  LYS  HG2', -0.484, (63.659, -65.547, 37.396)), (' E1281  TYR  HB2', ' E1320  ILE HG22', -0.479, (67.637, -57.768, -15.333)), (' J1248  VAL HG11', ' J1259  LEU HD23', -0.479, (57.646, -79.372, 8.463)), (' G1246  CYS  HA ', ' G1265  SER  HB3', -0.478, (35.803, -49.816, 32.991)), (' C1279  ALA  HA ', ' G1260  LYS  HE3', -0.476, (45.271, -53.798, 27.936)), (' O1240  GLN  N  ', ' O1408  HOH  O  ', -0.476, (37.425, -24.446, 45.491)), (' F1293  ASN  H  ', ' F1296  SER  HG ', -0.472, (68.085, -26.052, 45.525)), (' J1246  CYS  HB2', ' J1268  ILE HD11', -0.471, (54.379, -76.484, 9.712)), (' M1284  ASN  ND2', ' M1410  HOH  O  ', -0.47, (36.17, -22.375, 48.424)), (' C1321  ALA  O  ', ' C1325  LYS  HG2', -0.468, (51.633, -65.283, 27.332)), (' O1268  ILE HD13', ' O1304  LEU HD11', -0.467, (45.446, -17.69, 30.759)), (' D1287  LEU  HB2', ' D1315  VAL HG21', -0.466, (52.726, -22.439, 0.928)), (' N1246  CYS  HA ', ' N1265  SER  HB3', -0.465, (2.937, -50.774, 33.379)), (' A1292  PRO  HB3', ' A1303  THR HG21', -0.465, (9.755, -53.089, 1.622)), (' L1253  VAL HG22', ' L1258  ILE HD11', -0.463, (45.2, -54.905, -5.996)), (' P1266  LEU HD21', ' P1312  VAL HG13', -0.463, (13.935, -31.234, 14.378)), (' F1247  ASN  HB2', ' F1266  LEU  O  ', -0.462, (74.535, -10.885, 36.754)), (' G1260  LYS  HD3', ' G1261  PRO  HD2', -0.462, (43.551, -53.569, 32.112)), (' E1315  VAL HG11', ' E1320  ILE HD11', -0.462, (63.078, -60.812, -18.112)), (' H1301  LEU HD22', ' H1315  VAL HG13', -0.459, (18.205, -21.687, -17.793)), (' A1281  TYR  OH ', ' A1325  LYS  NZ ', -0.457, (25.287, -71.109, 7.11)), (' J1286  SER  OG ', ' J1315  VAL  O  ', -0.457, (55.067, -62.081, 8.42)), (' K1264  ASN  N  ', ' K1264  ASN  OD1', -0.455, (74.143, -41.361, 53.222)), (' J1246  CYS  SG ', ' J1268  ILE HD11', -0.454, (55.043, -77.203, 9.95)), (' K1257  ILE HG21', ' K1309  LEU HD23', -0.454, (55.909, -44.6, 56.17)), (' J1265  SER  HB3', ' J1266  LEU  H  ', -0.453, (50.408, -75.526, 12.889)), (' L1302  LYS  HB3', ' L1307  HIS  CG ', -0.453, (26.878, -52.903, -7.732)), (' C1250  THR  HA ', ' O1294  GLU  HG3', -0.451, (54.38, -30.492, 17.105)), (' F1301  LEU HD21', ' F1315  VAL HG13', -0.449, (61.156, -20.205, 40.599)), (' H1281  TYR  HB2', ' H1320  ILE HG22', -0.448, (26.24, -18.445, -13.11)), (' E1290  LYS  HA ', ' E1304  LEU  HB2', -0.447, (57.954, -72.363, -22.428)), (' K1251  THR  HA ', ' K1259  LEU  O  ', -0.447, (61.132, -35.09, 52.424)), (' L1288  THR HG23', ' L1312  VAL  HA ', -0.446, (30.183, -61.239, -7.808)), (' D1244  LEU HD11', ' D1266  LEU HD12', -0.444, (44.137, -24.114, -7.616)), (' E1284  ASN  ND2', ' E1405  HOH  O  ', -0.443, (75.992, -56.026, -21.76)), (' K1302  LYS  NZ ', ' K1402  HOH  O  ', -0.442, (53.827, -57.952, 51.313)), (' B1241  LYS  HE3', ' B1401   CL CL  ', -0.442, (28.545, 3.021, 12.128)), (' E1325  LYS  HB2', ' E1326  PRO  HD3', -0.441, (63.367, -52.304, -9.044)), (' F1245  GLU  HB2', ' F1262  ALA  HB2', -0.436, (78.541, -10.407, 30.353)), (' F1257  ILE  HA ', ' F1257  ILE HD12', -0.436, (76.54, -24.597, 29.095)), (' M1252  GLU  OE1', ' M1290  LYS  NZ ', -0.434, (20.826, 0.271, 47.917)), (' L1245  GLU  HB2', ' L1262  ALA  HB2', -0.433, (40.926, -67.222, -4.242)), (' J1287  LEU  HB2', ' J1315  VAL HG21', -0.432, (56.703, -65.467, 5.516)), (' H1246  CYS  HA ', ' H1265  SER  HB3', -0.431, (27.955, -36.123, -25.323)), (' B1294  GLU  HG3', ' O1250  THR HG22', -0.431, (30.396, -15.16, 29.815)), (' M1301  LEU HD22', ' M1315  VAL HG13', -0.43, (20.843, -18.096, 46.698)), (' P1281  TYR  HB2', ' P1320  ILE HG22', -0.43, (10.767, -19.563, 2.837)), (' F1246  CYS  SG ', ' F1248  VAL HG23', -0.428, (77.163, -15.318, 36.022)), (' C1248  VAL HG21', ' C1259  LEU  HB3', -0.427, (55.947, -37.853, 15.389)), (' E1247  ASN  ND2', ' E1267  LYS  HD2', -0.424, (69.638, -74.883, -20.815)), (' B1239  ILE  HA ', ' B1239  ILE HD12', -0.424, (30.036, 1.864, 2.455)), (' E1316  PRO  HG2', ' E1319  THR  OG1', -0.423, (59.804, -56.349, -20.374)), (' I1287  LEU  HB2', ' I1315  VAL HG21', -0.423, (65.243, -23.585, -13.671)), (' F1284  ASN  HA ', ' F1317  TRP  CH2', -0.422, (57.333, -8.382, 41.094)), (' N1241  LYS  HB3', ' N1256  ASP  O  ', -0.422, (1.031, -66.186, 38.44)), (' N1251  THR HG22', ' N1258  ILE HD11', -0.42, (-5.957, -60.202, 34.279)), (' H1241  LYS  HD2', ' H1258  ILE HD11', -0.42, (13.173, -41.46, -29.293)), (' N1287  LEU  HB2', ' N1315  VAL HG21', -0.419, (13.946, -57.148, 25.884)), (' O1292  PRO  HB3', ' O1303  THR HG21', -0.418, (50.035, -25.443, 25.698)), (' K1246  CYS  SG ', ' K1259  LEU  HB3', -0.417, (62.319, -40.41, 51.309)), (' H1302  LYS  HG2', ' H1307  HIS  CG ', -0.417, (12.568, -25.961, -24.048)), (' P1293  ASN  O  ', ' P1297  ARG  HG3', -0.416, (27.028, -26.838, 2.677)), (' M1242  ASP  HB2', ' M1257  ILE HG22', -0.414, (16.771, -5.085, 60.058)), (' F1281  TYR  HB2', ' F1320  ILE HG22', -0.414, (57.875, -12.526, 45.593)), (' E1266  LEU HD21', ' E1288  THR HG21', -0.414, (63.557, -70.482, -25.317)), (' G1260  LYS  HD3', ' G1261  PRO  CD ', -0.414, (43.413, -53.164, 31.803)), (' N1242  ASP  HB3', ' N1309  LEU HD11', -0.412, (4.813, -61.276, 40.466)), (' A1245  GLU  HG2', ' A1260  LYS  HD3', -0.409, (-2.506, -65.225, -11.688)), (' I1281  TYR  HD2', ' I1321  ALA  HA ', -0.409, (55.56, -27.951, -18.843)), (' B1241  LYS  HD2', ' B1258  ILE HG13', -0.409, (24.745, 2.93, 10.724)), (' D1246  CYS  SG ', ' D1259  LEU  HB3', -0.406, (38.742, -22.202, -4.191)), (' O1291  LYS  NZ ', ' O1406  HOH  O  ', -0.405, (39.519, -27.076, 26.434)), (' P1301  LEU HD22', ' P1315  VAL HG13', -0.405, (18.646, -22.414, 7.435)), (' I1242  ASP  HB2', ' I1257  ILE HG22', -0.404, (75.333, -16.553, -0.773)), (' K1290  LYS  HA ', ' K1304  LEU HD12', -0.403, (57.827, -44.902, 47.899)), (' G1249  LYS  HA ', ' G1249  LYS  HD3', -0.4, (43.609, -49.446, 37.558)), (' D1290  LYS  HG3', ' D1291  LYS  N  ', -0.4, (43.664, -17.231, 2.171))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
