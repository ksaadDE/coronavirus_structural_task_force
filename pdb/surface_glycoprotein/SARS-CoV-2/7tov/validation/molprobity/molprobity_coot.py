# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 536 ', 'ASN', 0.04104709936790345, (188.71499999999995, 196.524, 148.81099999999998)), ('B', '  97 ', 'LYS', 0.02446726722602571, (225.942, 163.20099999999994, 141.401)), ('B', ' 123 ', 'ALA', 0.025600887094215846, (223.253, 171.308, 128.363)), ('B', ' 198 ', 'ASP', 0.00546719297171418, (193.445, 163.74, 129.564)), ('B', ' 395 ', 'VAL', 0.04544366088560832, (157.073, 132.32699999999994, 114.99799999999999)), ('B', ' 410 ', 'ILE', 0.007071982842300448, (163.758, 129.06500000000003, 104.299)), ('B', ' 421 ', 'TYR', 0.021591501263281854, (153.373, 134.529, 100.30099999999999)), ('B', ' 443 ', 'SER', 0.015696076409868344, (160.32499999999993, 120.12499999999997, 97.5)), ('B', ' 621 ', 'PRO', 0.0, (190.67, 136.82, 154.941)), ('B', '1145 ', 'LEU', 0.04575684654341205, (167.51, 158.51999999999995, 247.315)), ('C', ' 112 ', 'SER', 0.0133657948516202, (132.096, 128.446, 114.789)), ('C', ' 571 ', 'ASP', 0.042906524991907294, (143.26399999999995, 177.191, 147.925)), ('C', ' 640 ', 'SER', 0.006031236881272961, (120.465, 146.033, 166.736))]
data['omega'] = []
data['rota'] = [('A', ' 227 ', 'VAL', 0.006301065150182694, (139.357, 196.514, 131.483)), ('A', ' 318 ', 'PHE', 0.07972237756987752, (171.194, 192.602, 155.989)), ('A', ' 350 ', 'VAL', 0.012978742175473235, (183.77, 156.799, 110.64699999999999)), ('A', ' 540 ', 'ASN', 0.29952317733691697, (180.341, 191.50299999999993, 141.134)), ('A', ' 546 ', 'LEU', 0.14956804896978973, (183.625, 181.507, 136.778)), ('A', ' 739 ', 'THR', 0.07629533458725772, (145.153, 159.456, 152.256)), ('A', ' 760 ', 'CYS', 0.051303494523492386, (150.835, 156.266, 155.184)), ('A', ' 804 ', 'GLN', 0.14393468174228785, (137.015, 179.471, 196.863)), ('A', '1116 ', 'THR', 0.2356445651270298, (168.43899999999994, 172.94499999999994, 232.00199999999995)), ('B', ' 122 ', 'ASN', 0.11727139993144772, (220.921, 168.219, 128.328)), ('B', ' 212 ', 'LEU', 0.21351222638815223, (221.70999999999995, 158.34399999999997, 152.608)), ('B', ' 620 ', 'VAL', 0.1753358600418455, (187.855, 135.71099999999996, 157.297)), ('B', ' 634 ', 'ARG', 0.1449436024997392, (198.41499999999994, 141.046, 156.86699999999996)), ('B', ' 738 ', 'CYS', 0.0, (167.706, 178.88999999999993, 154.59599999999998)), ('B', '1094 ', 'VAL', 0.06367197739564845, (171.746, 150.225, 219.26599999999996)), ('B', '1111 ', 'GLU', 0.0643630689200461, (180.15, 156.255, 221.201)), ('C', ' 523 ', 'THR', 0.0027198671887163073, (132.41, 183.23399999999995, 128.04999999999998)), ('C', ' 565 ', 'PHE', 0.06941015496119594, (134.072, 182.304, 143.463)), ('C', ' 628 ', 'GLN', 0.0066134913079182985, (123.126, 155.01199999999994, 149.71)), ('C', ' 634 ', 'ARG', 0.0, (128.187, 146.479, 153.546)), ('C', '1082 ', 'CYS', 0.1448679127759288, (145.10499999999993, 171.64, 230.862))]
data['cbeta'] = [('A', ' 487 ', 'ASN', ' ', 0.25796268691949736, (178.153, 133.461, 109.83499999999997)), ('B', ' 200 ', 'TYR', ' ', 0.4027813948646326, (196.73899999999995, 160.54099999999994, 126.936)), ('B', ' 621 ', 'PRO', ' ', 0.27867660295880287, (191.96399999999994, 136.006, 155.057)), ('B', ' 632 ', 'THR', ' ', 0.2761231919851431, (201.733, 147.217, 158.38)), ('C', ' 626 ', 'ALA', ' ', 0.25447733030644404, (122.906, 151.189, 155.486))]
data['probe'] = [(' A1131  GLY  HA3', ' A1309  NAG  H83', -0.48, (183.74, 179.361, 219.469)), (' A 327  VAL  H  ', ' A 531  THR HG22', -0.414, (185.344, 193.507, 133.773)), (' A 904  TYR  CZ ', ' C1107  ARG  HD3', -0.413, (149.748, 163.215, 214.965))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
