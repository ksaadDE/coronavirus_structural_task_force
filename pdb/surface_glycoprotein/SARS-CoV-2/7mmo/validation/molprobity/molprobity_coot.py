# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 153 ', 'PRO', None, (70.89399999999998, 16.039, 86.41699999999999)), ('A', ' 155 ', 'PRO', None, (67.63699999999997, 12.517, 90.278)), ('B', ' 145 ', 'PRO', None, (37.111, 12.049, 90.9)), ('D', ' 153 ', 'PRO', None, (-1.6399999999999992, 16.89099999999999, 9.454)), ('D', ' 155 ', 'PRO', None, (1.6670000000000005, 13.118000000000004, 5.871999999999999)), ('E', ' 145 ', 'PRO', None, (32.028, 12.31, 5.601))]
data['rota'] = [('A', '  87 ', 'ILE', 0.12260383082267963, (67.15599999999998, 14.501999999999999, 67.424)), ('A', ' 149 ', 'LYS', 0.0016397872605635158, (63.31599999999999, 24.634, 89.10599999999997)), ('A', ' 199 ', 'THR', 0.1951746478334009, (57.656, 28.042000000000005, 110.464)), ('B', '  32 ', 'ASP', 0.07004672956151017, (37.025, 0.689, 54.173)), ('B', ' 156 ', 'ASN', 0.27642838764244076, (40.751, 37.113, 80.68999999999998)), ('D', '  58 ', 'ASP', 0.2697056788426928, (7.019, -1.9950000000000003, 44.00599999999999)), ('D', '  87 ', 'ILE', 0.12113468342297413, (1.3629999999999998, 16.147999999999993, 28.488999999999997)), ('D', ' 149 ', 'LYS', 0.002352023726671797, (5.986, 25.261, 6.270999999999999)), ('D', ' 167 ', 'SER', 0.05478334963674808, (18.114, 14.470000000000008, -10.687999999999997)), ('E', '  32 ', 'ASP', 0.05259525559386752, (30.443, 1.497, 43.06399999999999)), ('E', ' 215 ', 'GLU', 0.032667217029301386, (20.925, 43.704, -0.704)), ('F', ' 424 ', 'LYS', 0.0, (22.164, -15.955000000000005, 67.755))]
data['cbeta'] = []
data['probe'] = [(' C 370  ASN  HA ', ' F 384  PRO  HG2', -1.036, (34.426, -29.139, 54.783)), (' C 370  ASN  HA ', ' F 384  PRO  CG ', -0.571, (34.294, -28.896, 55.781)), (' C 374  PHE  HA ', ' C 436  TRP  HB3', -0.541, (39.219, -18.552, 49.404)), (' F 433  VAL HG22', ' F 512  VAL HG13', -0.538, (24.799, -20.981, 59.634)), (' F 455  LEU HD22', ' F 493  GLN  HG3', -0.534, (18.307, 1.545, 62.899)), (' E  19  ILE HD11', ' E  78  ILE HD12', -0.526, (32.719, 0.694, 17.863)), (' B 124  PRO  HD3', ' B 136  VAL HG22', -0.507, (53.192, 34.044, 87.94)), (' E 124  PRO  HD3', ' E 136  VAL HG22', -0.49, (16.624, 34.582, 6.533)), (' C 430  THR HG22', ' C 515  PHE  HB2', -0.488, (38.174, -31.701, 34.051)), (' B  19  ILE HD11', ' B  78  ILE HD12', -0.482, (35.711, 0.216, 78.786)), (' C 431  GLY  HA3', ' C 513  LEU  O  ', -0.468, (40.083, -27.404, 36.524)), (' B 167  VAL HG22', ' B 179  LEU HD12', -0.454, (47.161, 15.948, 87.215)), (' D 129  PRO  HD3', ' D 215  LYS  HE2', -0.449, (7.374, 31.288, -3.18)), (' E 167  VAL HG22', ' E 179  LEU HD12', -0.449, (22.366, 16.892, 8.577)), (' A 129  PRO  HD3', ' A 215  LYS  HE2', -0.444, (62.242, 31.286, 97.892)), (' F 374  PHE  HA ', ' F 436  TRP  HB3', -0.421, (26.148, -18.463, 47.802)), (' E  86  GLU  HG3', ' E 107  LEU  O  ', -0.416, (28.398, 4.937, 12.259)), (' B  86  GLU  HG3', ' B 107  LEU  O  ', -0.411, (40.119, 4.38, 84.363)), (' F 401  VAL HG22', ' F 509  ARG  HG2', -0.411, (18.129, -13.588, 51.405)), (' C 392  PHE  CE2', ' C 515  PHE  HB3', -0.41, (39.078, -33.96, 35.442)), (' A  22  CYS  O  ', ' A  79  GLN  HA ', -0.407, (66.628, -6.944, 66.903)), (' D  22  CYS  O  ', ' D  79  GLN  HA ', -0.404, (1.137, -5.349, 29.253)), (' C 370  ASN  CA ', ' F 384  PRO  HG2', -0.4, (35.023, -28.964, 54.787))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
