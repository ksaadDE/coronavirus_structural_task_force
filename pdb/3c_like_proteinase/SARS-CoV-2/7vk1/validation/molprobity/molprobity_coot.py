# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', '  33 ', 'ASP', None, (13.844999999999995, -31.949, 6.591999999999999))]
data['rota'] = [('A', '  47 ', 'GLU', 0.0, (11.910000000000007, -13.715999999999998, 33.104)), ('A', ' 135 ', 'THR', 0.021184793508167436, (14.707, -5.106999999999999, 10.176)), ('A', ' 222 ', 'ARG', 0.0010177007654389465, (11.948999999999996, 16.529999999999994, -19.287)), ('A', ' 226 ', 'THR', 0.06431909444393132, (24.254999999999992, 11.657, -13.887999999999998))]
data['cbeta'] = []
data['probe'] = [(' A 279  ARG  HE ', ' A 280  THR  H  ', -0.763, (-2.02, 10.183, -9.1)), (' A 193  ALA  O  ', ' A 401  HOH  O  ', -0.643, (21.12, -1.822, 17.027)), (' A 110  GLN  NE2', ' A 407  HOH  O  ', -0.564, (17.837, -12.683, -2.964)), (' A  63  ASN  OD1', ' A  80  HIS  ND1', -0.562, (18.081, -32.923, 22.844)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.56, (1.829, -23.952, 20.876)), (' A 118  TYR  CE2', ' A 141  LEU  HB2', -0.519, (0.036, -13.131, 16.563)), (' A  31  TRP  CE2', ' A  75  LEU HD21', -0.518, (8.009, -33.641, 11.752)), (' A 279  ARG  NH1', ' A 481 BHOH  O  ', -0.516, (-5.868, 10.033, -7.113)), (' A  33  ASP  O  ', ' A  94  ALA  HA ', -0.515, (11.78, -35.05, 8.38)), (' A 118  TYR  CE2', ' A 144  SER  HB3', -0.513, (1.87, -14.68, 15.501)), (' A 154  TYR  O  ', ' A 306  GLN  N  ', -0.499, (7.487, -24.8, -9.366)), (' A 290  GLU  OE1', ' A 402  HOH  O  ', -0.493, (6.663, -4.443, 1.561)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.482, (3.257, 8.828, -8.355)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.459, (19.347, -13.949, 13.518)), (' A 187  ASP  N  ', ' A 187  ASP  OD1', -0.454, (19.216, -12.996, 20.975)), (' A 279  ARG  HE ', ' A 280  THR  N  ', -0.443, (-1.894, 10.036, -8.028)), (' A  85  CYS  HB2', ' A 179  GLY  O  ', -0.443, (20.591, -17.13, 15.544)), (' A 136  ILE HG13', ' A 172  HIS  HB2', -0.442, (9.808, -7.955, 11.305)), (' A 233  VAL HG21', ' A 269  LYS  HE3', -0.437, (18.963, 15.994, -7.851)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.429, (8.727, -15.6, 3.967)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.427, (20.297, -19.267, 19.549)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -0.426, (1.559, 10.367, -6.033)), (' A 111  THR HG23', ' A 292  THR HG23', -0.418, (12.337, -7.233, -3.179)), (' A 154  TYR  HA ', ' A 305  PHE  HD1', -0.413, (9.051, -20.883, -9.385)), (' A 165 AMET  HB2', ' A 165 AMET  HE3', -0.411, (14.326, -9.525, 17.78)), (' A  50  LEU  O  ', ' A 188  ARG  NE ', -0.408, (18.811, -8.834, 29.028)), (' A  30  LEU HD22', ' A 148  VAL HG11', -0.407, (11.415, -21.744, 8.417)), (' A 268  LEU  O  ', ' A 272  LEU  HG ', -0.401, (13.063, 11.184, -6.789)), (' A  87  LEU  HA ', ' A  87  LEU HD23', -0.4, (18.816, -24.842, 18.93)), (' A 121  SER  HA ', ' A 122  PRO  HD3', -0.4, (-0.417, -24.625, 10.609))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
