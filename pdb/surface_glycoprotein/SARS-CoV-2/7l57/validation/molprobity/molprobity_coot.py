# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 367 ', 'VAL', 0.0077359402793175484, (221.559, 197.733, 249.668)), ('A', ' 560 ', 'LEU', 0.04445408663408583, (246.10800000000012, 201.7809999999999, 219.73200000000003)), ('C', '  39 ', 'PRO', 0.04033146633499348, (238.048, 212.9709999999999, 218.589)), ('C', ' 227 ', 'VAL', 0.09313066960794618, (244.206, 212.219, 229.148)), ('C', '1140 ', 'PRO', 0.04473553868393677, (214.5, 202.204, 121.82700000000001))]
data['omega'] = [('A', '  59 ', 'PHE', None, (200.17400000000012, 164.5, 214.55500000000004)), ('A', ' 225 ', 'PRO', None, (182.429, 170.58799999999988, 219.776)), ('A', ' 521 ', 'PRO', None, (235.66999999999987, 203.149, 229.08000000000007)), ('A', ' 575 ', 'ALA', None, (234.04400000000012, 196.155, 217.429)), ('B', ' 560 ', 'LEU', None, (176.344, 177.999, 215.81800000000004)), ('C', ' 521 ', 'PRO', None, (191.24300000000005, 242.52199999999988, 221.738)), ('C', '1098 ', 'ASN', None, (223.04300000000012, 220.7469999999999, 134.692)), ('L', '  82 ', 'ASP', None, (230.113, 196.93799999999987, 292.97900000000004))]
data['rota'] = [('A', '  61 ', 'ASN', 0.17989784587667945, (202.241, 160.171, 218.637)), ('A', '1098 ', 'ASN', 0.0038099591620266438, (219.44200000000012, 175.01099999999988, 140.346)), ('B', ' 331 ', 'ASN', 0.2732111153105154, (166.96199999999996, 188.20799999999988, 231.88000000000002)), ('B', ' 657 ', 'ASN', 0.05330426667076468, (163.789, 208.657, 174.41)), ('C', ' 282 ', 'ASN', 0.10307598978918764, (244.77700000000007, 201.231, 209.00500000000002)), ('C', ' 331 ', 'ASN', 0.08541743397208389, (199.66800000000012, 252.548, 225.504)), ('C', ' 709 ', 'ASN', 0.052623792631612334, (212.39300000000011, 227.33799999999988, 143.4))]
data['cbeta'] = [('A', ' 773 ', 'GLU', ' ', 0.3145712270465723, (192.65700000000012, 208.117, 183.981)), ('A', ' 780 ', 'GLU', ' ', 0.28200176081567807, (191.77800000000005, 206.636, 174.199)), ('B', ' 773 ', 'GLU', ' ', 0.29845959568807756, (213.66100000000012, 214.541, 184.966)), ('H', '  85 ', 'ASP', ' ', 0.288112318561042, (215.714, 166.94999999999987, 294.72700000000003)), ('H', '  91 ', 'TYR', ' ', 0.27158261645701787, (213.345, 182.9369999999999, 284.0710000000001)), ('H', ' 100G', 'TRP', ' ', 0.3045112108786634, (217.193, 192.396, 271.498))]
data['probe'] = [(' A 710  ASN  CB ', ' A 710  ASN  ND2', -0.843, (230.169, 180.322, 147.04)), (' C 676  THR  O  ', ' C 690  GLN  N  ', -0.662, (241.485, 232.72, 180.209)), (' C 107  GLY  O  ', ' C 237  ARG  N  ', -0.642, (241.408, 231.512, 233.877)), (' B 675  GLN  N  ', ' B 691  SER  O  ', -0.629, (167.75, 220.333, 179.056)), (' A 709  ASN  OD1', ' A 710  ASN  ND2', -0.607, (231.021, 181.425, 148.002)), (' L  23  CYS  O  ', ' L  71  ALA  N  ', -0.604, (235.67, 184.241, 274.888)), (' B 336  CYS  SG ', ' B 526  GLY  N  ', -0.582, (175.252, 194.533, 239.831)), (' A 674  TYR  HA ', ' A 691  SER  O  ', -0.577, (209.188, 167.069, 189.157)), (' B 473  TYR  N  ', ' B 489  TYR  O  ', -0.567, (212.65, 180.961, 256.309)), (' A 203  ILE  N  ', ' A 227  VAL  O  ', -0.539, (184.59, 172.794, 227.997)), (' B 864  LEU  O  ', ' C 668  ALA  N  ', -0.538, (217.903, 229.447, 181.965)), (' B1098  ASN  ND2', ' I   1  NAG  O7 ', -0.535, (180.921, 203.043, 132.361)), (' B 543  PHE  N  ', ' B 546  LEU  O  ', -0.529, (173.979, 195.726, 223.791)), (' B 723  THR  O  ', ' B1064  HIS  N  ', -0.527, (198.669, 219.004, 163.025)), (' A 654  GLU  O  ', ' A 694  ALA  N  ', -0.527, (216.259, 168.679, 190.302)), (' L  23  CYS  HB3', ' L  71  ALA  HB3', -0.524, (233.75, 185.609, 276.409)), (' C 131  CYS  N  ', ' C 166  CYS  SG ', -0.502, (246.66, 223.207, 244.329)), (' C 709  ASN  OD1', ' C 710  ASN  ND2', -0.501, (211.7, 228.019, 139.773)), (' C1073  LYS  HA ', ' C1309  NAG  H81', -0.501, (227.076, 221.572, 146.409)), (' B1073  LYS  HA ', ' B1308  NAG  H81', -0.497, (181.259, 206.006, 144.384)), (' L  63  SER  O  ', ' L  74  THR  N  ', -0.494, (236.256, 193.726, 278.028)), (' M   1  NAG  O3 ', ' M   2  NAG  O5 ', -0.494, (239.02, 208.555, 148.393)), (' C 280  ASN  N  ', ' C 284  THR  O  ', -0.492, (242.539, 206.672, 208.399)), (' L  50  ASP  O  ', ' L  52  SER  N  ', -0.484, (230.729, 192.297, 270.518)), (' C 392  PHE  O  ', ' C 523  THR  N  ', -0.483, (193.583, 241.635, 227.571)), (' A 324  GLU  O  ', ' A 540  ASN  N  ', -0.479, (225.367, 183.387, 222.722)), (' A 343  ASN  OD1', ' F   1  NAG  N2 ', -0.476, (225.99, 203.622, 254.894)), (' C1087  ALA  N  ', ' C1125  ASN  O  ', -0.473, (202.809, 215.854, 128.409)), (' A 416  GLY  O  ', ' A 420  ASP  N  ', -0.472, (214.629, 226.669, 242.439)), (' I   1  NAG  O3 ', ' I   2  NAG  O5 ', -0.47, (181.681, 205.75, 127.842)), (' C 578  ASP  N  ', ' C 583  GLU  O  ', -0.469, (198.954, 250.081, 212.854)), (' C 131  CYS  HB3', ' C 163  ALA  HB1', -0.466, (248.708, 225.97, 245.282)), (' C 282  ASN  N  ', ' C 282  ASN  OD1', -0.465, (245.307, 201.408, 207.311)), (' A 578  ASP  O  ', ' A 582  LEU  N  ', -0.465, (241.688, 192.89, 227.865)), (' L  88  CYS  SG ', ' L  89  SER  N  ', -0.456, (229.228, 184.58, 277.783)), (' C 131  CYS  CB ', ' C 163  ALA  HB1', -0.455, (248.998, 226.201, 244.993)), (' B 398  ASP  O  ', ' B 512  VAL  N  ', -0.451, (189.212, 193.658, 246.271)), (' A 201  PHE  N  ', ' A 229  LEU  O  ', -0.44, (186.375, 177.766, 233.099)), (' A 674  TYR  CA ', ' A 691  SER  O  ', -0.44, (208.932, 167.086, 189.157)), (' C 553  THR  O  ', ' C 586  ASP  N  ', -0.439, (203.176, 247.442, 206.416)), (' A 986  PRO  O  ', ' A 990  GLU  N  ', -0.438, (190.12, 210.356, 224.57)), (' C 356  LYS  N  ', ' C 397  ALA  O  ', -0.435, (185.285, 237.041, 240.274)), (' C 453  TYR  N  ', ' C 493  GLN  O  ', -0.433, (178.28, 222.199, 251.294)), (' C 656  VAL  HA ', ' C1306  NAG  H81', -0.431, (232.077, 239.769, 179.552)), (' B 730  SER  N  ', ' B1058  HIS  O  ', -0.43, (206.051, 220.66, 179.925)), (' B 331  ASN  ND2', ' B 331  ASN  O  ', -0.429, (165.352, 187.868, 233.579)), (' C 904  TYR  O  ', ' C 908  GLY  N  ', -0.42, (217.157, 198.059, 151.278)), (' C 356  LYS  O  ', ' C 397  ALA  N  ', -0.42, (186.791, 237.461, 237.752)), (' C 115  GLN  N  ', ' C 130  VAL  O  ', -0.415, (243.604, 225.759, 243.968)), (' A1054  GLN  N  ', ' A1061  VAL  O  ', -0.413, (190.525, 191.493, 170.439)), (' D   1  NAG  O3 ', ' D   2  NAG  O5 ', -0.411, (215.411, 172.023, 133.551)), (' J   2  NAG  O4 ', ' J   2  NAG  O6 ', -0.41, (176.778, 205.848, 255.05)), (' A  29  THR  O  ', ' A1308  NAG  H82', -0.409, (202.277, 156.501, 218.661)), (' C 738  CYS  SG ', ' C 739  THR  N  ', -0.409, (210.119, 192.132, 209.473)), (' H  37  VAL  O  ', ' H  91  TYR  N  ', -0.404, (213.32, 180.498, 283.914)), (' A  29  THR  N  ', ' A  62  VAL  O  ', -0.402, (200.763, 155.594, 220.816))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
