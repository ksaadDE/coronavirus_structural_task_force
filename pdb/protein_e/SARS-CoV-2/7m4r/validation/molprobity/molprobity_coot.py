# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 276 ', 'ASP', 0.0015650375217592946, (75.779, 109.8, 111.62099999999997))]
data['omega'] = [('A', ' 402 ', 'PRO', None, (78.095, 114.723, 79.565))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 380  HIS  HB3', ' B 393  TYR  HB2', -0.783, (76.509, 62.719, 76.421)), (' A 363  TYR  HE2', ' A 631  MET  HE1', -0.702, (72.873, 91.484, 94.119)), (' A 363  TYR  CE2', ' A 631  MET  HE1', -0.699, (73.422, 91.655, 93.622)), (' A 564  ARG  O  ', ' A 568  ASN  HB2', -0.671, (107.246, 72.204, 94.05)), (' A 261  LYS  NZ ', ' A 321  LEU  O  ', -0.664, (75.613, 122.476, 93.371)), (' B 548  HIS  HB2', ' B 555  LEU HD21', -0.649, (87.89, 68.7, 50.007)), (' A 355  ASP  OD1', ' A 356  TYR  N  ', -0.64, (71.128, 95.408, 76.778)), (' B 496  ARG  HG3', ' B 500  MET  HE3', -0.638, (83.271, 87.057, 40.91)), (' A 564  ARG  HA ', ' A 567  ILE HG22', -0.614, (104.408, 73.5, 93.71)), (' A 255  LYS  HE2', ' A 334  PRO  HG3', -0.602, (93.669, 115.028, 105.007)), (' A 514  THR HG22', ' A 516  ARG  H  ', -0.602, (109.775, 93.304, 105.129)), (' B 498  ARG  NH1', ' B 649  ASP  OD1', -0.599, (73.744, 96.447, 36.561)), (' A 583  LYS  NZ ', ' A 638  TYR  OH ', -0.599, (86.285, 86.002, 86.637)), (' B 483  ILE HG22', ' B 575  LEU  HB2', -0.595, (86.166, 85.22, 49.665)), (' B 472  TYR  OH ', ' B 591  LYS  NZ ', -0.592, (97.034, 94.013, 58.485)), (' A 518  ARG HH21', ' A 523  VAL  HA ', -0.582, (117.176, 84.728, 111.339)), (' A 318  PHE  HB2', ' C  73  LEU HD21', -0.573, (71.066, 115.275, 96.712)), (' B 514  THR HG22', ' B 516  ARG  H  ', -0.573, (91.086, 67.18, 39.158)), (' B 483  ILE HD11', ' B 594  ILE HG12', -0.571, (84.866, 86.855, 55.49)), (' B 624  ILE  O  ', ' B 628  THR HG23', -0.571, (60.327, 84.332, 51.808)), (' B 497  GLN  O  ', ' B 501  ASN  HB2', -0.566, (82.33, 89.896, 35.738)), (' A 464  LEU HD22', ' B 462  GLU  HG3', -0.565, (83.4, 81.427, 73.616)), (' B 600  PRO  HG2', ' B 605  LEU  HB2', -0.562, (62.346, 89.97, 47.205)), (' B 548  HIS  HA ', ' B 556  TYR  O  ', -0.541, (86.839, 71.457, 48.866)), (' B 536  PHE  HE2', ' B 555  LEU  HB3', -0.539, (89.279, 66.12, 47.067)), (' A 312  LYS  HB3', ' A 316  GLU  OE2', -0.534, (70.365, 116.554, 106.331)), (' B 355  ASP  OD1', ' B 356  TYR  N  ', -0.533, (67.347, 77.048, 80.356)), (' B 637  HIS  ND1', ' B 637  HIS  O  ', -0.53, (78.367, 88.834, 65.169)), (' A 399  ASP  OD1', ' A 400  ASN  N  ', -0.523, (80.389, 115.385, 72.937)), (' B 358  PRO  O  ', ' B 367  ARG  NH2', -0.523, (59.775, 72.784, 72.679)), (' B 498  ARG  HD2', ' B 652  TYR  OH ', -0.515, (77.467, 94.454, 37.897)), (' B 410  LYS  NZ ', ' B 635  ASN  HA ', -0.509, (73.201, 81.827, 65.666)), (' A 303  GLU  HA ', ' A 309  ILE HG12', -0.508, (78.722, 120.825, 106.284)), (' B 563  VAL HG11', ' B 590  LEU HD21', -0.507, (93.02, 84.043, 52.225)), (' A 368  GLU  N  ', ' A 368  GLU  OE1', -0.503, (71.005, 108.289, 88.75)), (' B 656  LEU  HA ', ' B 659  ILE HG22', -0.5, (83.364, 98.668, 46.18)), (' A 589  ASP  N  ', ' A 589  ASP  OD1', -0.499, (100.579, 77.136, 86.06)), (' A 313  ASP  N  ', ' A 316  GLU  OE2', -0.498, (69.846, 114.831, 105.761)), (' C  68  SER  C  ', ' C  69  ARG  HD2', -0.489, (70.701, 99.119, 101.927)), (' A 277  SER  OG ', ' A 310  ARG  NH2', -0.489, (80.69, 112.216, 111.39)), (' B 523  VAL  H  ', ' B 526  ARG  NH1', -0.488, (95.764, 76.271, 30.555)), (' A 388  ASN  OD1', ' A 635  ASN  ND2', -0.488, (80.809, 91.272, 90.76)), (' A 351  LYS  HD3', ' B 469  MET  HE2', -0.487, (83.566, 93.626, 68.314)), (' B 516  ARG  HG2', ' B 517  SER  H  ', -0.48, (89.705, 64.866, 35.412)), (' B 493  ASN  OD1', ' B 496  ARG  NH1', -0.476, (79.612, 82.169, 41.617)), (' A 641  THR HG21', ' A 658  LEU HD11', -0.475, (82.465, 70.123, 98.9)), (' A 269  ALA  O  ', ' C  75  VAL HG22', -0.469, (78.484, 114.136, 93.64)), (' B 559  SER  OG ', ' B 560  ILE  N  ', -0.468, (96.153, 77.336, 50.86)), (' A 533  ARG  HG2', ' A 537  GLU  OE1', -0.467, (110.653, 98.502, 95.664)), (' B 623  GLU  O  ', ' B 627  LYS  HG2', -0.466, (61.754, 80.771, 49.104)), (' A 305  ASN  HA ', ' A 329  THR  OG1', -0.466, (82.55, 126.956, 102.293)), (' B 461  GLU  CD ', ' B 462  GLU  H  ', -0.466, (81.505, 77.483, 69.836)), (' A 654  GLU  OE2', ' A 657  ARG  NH2', -0.463, (80.074, 65.814, 101.82)), (' A 464  LEU  HA ', ' A 464  LEU HD23', -0.463, (82.061, 82.745, 76.217)), (' B 386  ASP  OD1', ' B 387  PRO  HD2', -0.462, (73.501, 69.384, 60.248)), (' B 523  VAL HG12', ' B 525  GLY  H  ', -0.456, (99.385, 76.189, 33.93)), (' B 384  GLN  HG3', ' B 390  TRP  NE1', -0.456, (78.062, 70.326, 66.925)), (' A 640  ASP  O  ', ' A 641  THR  OG1', -0.455, (82.973, 71.434, 94.797)), (' A 469  MET  HE2', ' B 351  LYS  HD2', -0.453, (82.503, 72.494, 83.536)), (' B 367  ARG  NE ', ' B 367  ARG  O  ', -0.452, (58.063, 70.699, 70.416)), (' B 532  SER  OG ', ' B 534  GLN  OE1', -0.449, (97.627, 60.437, 44.188)), (' B 366  CYS  SG ', ' B 369  LEU  HB2', -0.444, (63.281, 66.892, 68.316)), (' B 405  GLY  O  ', ' B 406  LEU HD23', -0.444, (69.978, 65.263, 69.522)), (' B 593  TYR  CD2', ' B 662  LEU HD11', -0.444, (86.098, 95.344, 53.765)), (' B 527  ASP  OD1', ' B 528  TYR  N  ', -0.443, (94.429, 76.03, 36.481)), (' B 582  LEU  HA ', ' B 582  LEU HD23', -0.442, (84.21, 81.111, 57.115)), (' B 516  ARG  NH2', ' B 519  ARG HH21', -0.441, (88.945, 70.097, 33.806)), (' B 358  PRO  HG3', ' B 370  GLY  HA3', -0.44, (63.952, 69.942, 74.554)), (' B 477  ASN  HB2', ' B 478  ARG HH11', -0.437, (103.213, 96.245, 50.546)), (' A 470  SER  OG ', ' A 671  SER  OG ', -0.433, (89.755, 68.15, 78.063)), (' A 351  LYS  HD3', ' B 469  MET  CE ', -0.432, (83.678, 94.049, 68.082)), (' A 469  MET  HE2', ' B 351  LYS  CD ', -0.43, (83.054, 72.623, 83.319)), (' B 581  SER  O  ', ' B 581  SER  OG ', -0.43, (85.079, 77.802, 55.977)), (' B 358  PRO  HD2', ' B 372  SER  HB3', -0.429, (64.123, 71.633, 78.053)), (' A 570  GLY  O  ', ' A 571  LYS  HD3', -0.428, (103.114, 66.211, 102.135)), (' A 387  PRO  HG3', ' A 580  GLN  OE1', -0.427, (88.678, 93.826, 92.319)), (' B 388  ASN  HB2', ' B 389  TRP  CD1', -0.425, (70.573, 72.598, 63.687)), (' B 362  PRO  HG2', ' B 363  TYR  CE1', -0.424, (61.942, 80.254, 65.133)), (' B 465  THR  O  ', ' B 466  TYR  HD1', -0.422, (80.858, 91.628, 76.659)), (' A 300  GLU  OE1', ' A 301  VAL  N  ', -0.42, (83.05, 114.52, 106.665)), (' A 249  TYR  HB3', ' A 302  LEU HD23', -0.418, (84.252, 120.32, 112.008)), (' B 637  HIS  CG ', ' B 637  HIS  O  ', -0.418, (77.793, 88.616, 65.298)), (' B 508  ALA  O  ', ' B 573  CYS  HA ', -0.414, (90.536, 88.26, 44.242)), (' B 367  ARG  O  ', ' B 368  GLU  HG3', -0.413, (57.833, 69.072, 71.041)), (' B 540  ILE  H  ', ' B 540  ILE HD12', -0.411, (93.415, 66.361, 53.662)), (' B 361  ASP  O  ', ' B 364  VAL HG22', -0.409, (61.779, 74.586, 68.314)), (' B 563  VAL  O  ', ' B 567  ILE HG13', -0.408, (95.98, 86.511, 49.51)), (' A 275  MET  O  ', ' A 277  SER  N  ', -0.407, (77.308, 109.365, 110.018)), (' A 263  ARG  O  ', ' A 265  ILE HG12', -0.405, (75.929, 124.734, 85.932)), (' B 656  LEU  HA ', ' B 656  LEU HD23', -0.403, (83.06, 98.827, 45.219)), (' B 577  LEU  HA ', ' B 577  LEU HD23', -0.4, (83.553, 80.0, 50.205))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
