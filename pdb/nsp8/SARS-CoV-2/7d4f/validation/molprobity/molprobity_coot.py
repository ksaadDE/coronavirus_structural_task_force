# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', ' 183 ', 'PRO', None, (151.603, 139.972, 163.546))]
data['rota'] = [('G', '  91 ', 'LEU', 0.21876609429006197, (136.015, 115.47200000000002, 175.16700000000006)), ('G', ' 103 ', 'LEU', 0.11260294763712221, (147.307, 109.989, 174.79200000000006)), ('A', '  84 ', 'GLU', 0.21282647972408975, (160.654, 146.675, 93.582)), ('A', '  91 ', 'LYS', 0.0, (163.021, 152.38800000000006, 101.54800000000003)), ('A', ' 153 ', 'ASP', 0.013700094139091307, (167.336, 131.13900000000004, 130.873)), ('A', ' 340 ', 'PHE', 0.1492817263747721, (132.31299999999993, 168.936, 154.76)), ('A', ' 495 ', 'VAL', 0.03782257410386595, (112.74900000000005, 141.71500000000006, 148.78400000000005)), ('A', ' 497 ', 'ASN', 0.01913940698447316, (115.34600000000006, 138.132, 152.76500000000004))]
data['cbeta'] = []
data['probe'] = [(' A 338  VAL  CG1', ' B  95  LEU HD11', -1.08, (130.131, 170.253, 158.987)), (' A 497  ASN  H  ', ' A 497  ASN HD22', -0.873, (116.622, 138.641, 150.682)), (' A1003  H3U  N1 ', ' A1003  H3U  O25', -0.871, (117.813, 133.907, 143.809)), (' A 338  VAL HG12', ' B  95  LEU HD11', -0.861, (130.552, 170.223, 158.609)), (' A 553  ARG  NH1', ' A1004  H3U  O34', -0.85, (138.039, 128.4, 146.951)), (' A 338  VAL HG11', ' B  95  LEU HD11', -0.829, (129.951, 170.232, 159.725)), (' B  98  LEU  O  ', ' B  98  LEU HD12', -0.795, (139.185, 168.246, 160.158)), (' C  46  THR  O  ', ' C  50  GLU  HG3', -0.794, (151.746, 110.851, 164.6)), (' A 836  ARG  HG3', ' A1004  H3U  C14', -0.776, (128.981, 119.491, 150.895)), (' C  31  GLN  NE2', ' G 119  ILE HD12', -0.729, (152.372, 125.729, 169.869)), (' A  91  LYS  HB2', ' A  91  LYS  NZ ', -0.723, (165.313, 152.011, 100.264)), (' A 836  ARG  CG ', ' A1004  H3U  C27', -0.719, (128.213, 118.761, 151.418)), (' A1004  H3U  N1 ', ' A1004  H3U  S17', -0.707, (132.482, 123.523, 148.832)), (' A 497  ASN  N  ', ' A 497  ASN HD22', -0.683, (115.933, 138.053, 151.117)), (' A1003  H3U  N1 ', ' A1003  H3U  S17', -0.679, (117.317, 134.127, 144.662)), (' A 371  LEU HD12', ' B  91  LEU HD12', -0.673, (124.947, 162.76, 157.401)), (' A 836  ARG  HG2', ' A1004  H3U  C27', -0.672, (127.713, 118.05, 151.766)), (' A 371  LEU  CD1', ' B  91  LEU HD12', -0.67, (124.173, 162.527, 157.537)), (' B  95  LEU  C  ', ' B  95  LEU HD23', -0.652, (133.537, 167.909, 161.403)), (' A 836  ARG  HG3', ' A1004  H3U  C27', -0.648, (128.616, 118.486, 151.626)), (' A 338  VAL HG11', ' B  95  LEU  CD1', -0.635, (130.154, 169.53, 159.65)), (' C  23  GLU  HA ', ' C  29  TRP  HB2', -0.626, (143.488, 131.803, 169.977)), (' C  31  GLN  NE2', ' G 119  ILE  CD1', -0.622, (152.048, 125.276, 170.172)), (' A 371  LEU HD12', ' B  91  LEU  CD1', -0.607, (125.005, 162.263, 156.875)), (' G 168  GLN  HB2', ' G 171  GLU  HB2', -0.587, (172.977, 115.713, 191.48)), (' C  19  GLN  OE1', ' G  87  MET  HE2', -0.585, (132.552, 125.045, 175.364)), (' A  91  LYS  HB2', ' A  91  LYS  HZ2', -0.578, (165.826, 153.092, 100.411)), (' A 153  ASP  N  ', ' A 153  ASP  OD1', -0.573, (166.788, 132.206, 132.148)), (' A  77  PHE  CE1', ' A 103  LYS  NZ ', -0.57, (163.402, 140.669, 84.696)), (' A 836  ARG  HG3', ' A1004  H3U  C20', -0.559, (128.531, 119.243, 151.872)), (' A 388  LEU HD23', ' A 397  SER  HB2', -0.555, (145.34, 150.308, 153.967)), (' A  66  ILE HG23', ' A  68  SER  H  ', -0.543, (171.497, 136.588, 113.144)), (' A 503  GLY  O  ', ' A 507  ASN  ND2', -0.542, (127.918, 146.98, 156.812)), (' A 497  ASN  H  ', ' A 497  ASN  ND2', -0.539, (116.622, 138.124, 150.659)), (' A 614  LEU  HB2', ' A 802  GLU  HB3', -0.538, (129.755, 113.753, 129.093)), (' G 131  VAL HG12', ' G 185  ILE HG22', -0.534, (158.189, 122.538, 185.576)), (' B  98  LEU  C  ', ' B  98  LEU HD12', -0.531, (139.362, 168.017, 159.708)), (' A 340  PHE  CD1', ' B  95  LEU HD12', -0.528, (130.751, 168.259, 158.095)), (' G 100  ASN  HB3', ' G 103  LEU  HB2', -0.522, (145.919, 108.533, 172.831)), (' A 507  ASN  ND2', ' A 541  GLN  OE1', -0.519, (129.789, 145.719, 157.74)), (' A 476  VAL HG22', ' A 696  ILE HG22', -0.519, (127.77, 134.4, 124.931)), (' A 503  GLY  HA3', ' A 561  SER  HA ', -0.518, (126.797, 147.948, 152.561)), (' C   9  THR  OG1', ' G  94  MET  HE2', -0.513, (137.024, 112.192, 169.399)), (' B 112  ASP  N  ', ' B 112  ASP  OD1', -0.512, (140.266, 172.214, 140.043)), (' A 588  VAL HG23', ' A 758  LEU HD12', -0.508, (121.544, 125.802, 136.581)), (' A  91  LYS  CB ', ' A  91  LYS  NZ ', -0.507, (165.142, 152.156, 99.775)), (' A 388  LEU HD13', ' A 400  ALA  HB2', -0.499, (145.067, 151.592, 158.806)), (' A  99  HIS  NE2', ' A 217  TYR  O  ', -0.49, (159.903, 143.271, 101.789)), (' A 540  THR  OG1', ' A 665  GLU  OE1', -0.49, (131.512, 146.695, 147.662)), (' A 128  VAL HG22', ' A 244  ILE HG13', -0.489, (150.175, 139.499, 120.127)), (' B 181  ALA  HB1', ' C  26  SER  OG ', -0.488, (150.363, 137.181, 168.356)), (' A 333  ILE HD12', ' A 361  LEU  HA ', -0.488, (129.233, 171.793, 147.226)), (' A 606  TYR  HE1', ' A 614  LEU HD21', -0.487, (124.268, 115.751, 127.97)), (' A 273  TYR  OH ', ' B 112  ASP  OD2', -0.484, (138.51, 168.59, 138.324)), (' B 178  PRO  O  ', ' C  27  LYS  HE2', -0.482, (157.873, 133.535, 169.056)), (' C  12  VAL HG12', ' G  91  LEU  HB2', -0.481, (136.423, 117.543, 173.861)), (' G 161  ASP  HA ', ' G 184  LEU  HB2', -0.478, (163.5, 121.26, 189.896)), (' G 124  THR  HA ', ' G 190  ARG  HB3', -0.473, (163.31, 114.599, 168.635)), (' B 159  VAL HG22', ' B 186  VAL HG22', -0.473, (155.99, 149.991, 166.108)), (' C  31  GLN HE22', ' G 119  ILE HD12', -0.472, (152.633, 126.215, 170.75)), (' G 125  ALA  HA ', ' G 189  LEU  HB3', -0.47, (166.261, 117.276, 171.22)), (' A 499  ASP  OD1', ' A 513  ARG  NH2', -0.461, (114.478, 140.167, 158.817)), (' G 121  PRO  HD2', ' G 128  LEU HD12', -0.46, (158.259, 117.505, 173.504)), (' A 497  ASN  ND2', ' A 497  ASN  O  ', -0.459, (116.759, 139.364, 152.082)), (' A 603  LYS  HA ', ' A 603  LYS  HD2', -0.459, (117.699, 114.978, 127.898)), (' A 694  PHE  HZ ', ' A 790  ASN HD21', -0.459, (137.319, 134.178, 133.178)), (' C  31  GLN HE21', ' G 119  ILE  CD1', -0.456, (151.659, 125.418, 170.321)), (' A 123  THR  HA ', ' A 211  ASP  HA ', -0.456, (158.696, 138.946, 112.749)), (' A 545  LYS  HB3', ' A 555  ARG  HB2', -0.455, (133.305, 131.186, 154.462)), (' A  91  LYS  HB2', ' A  91  LYS  HZ3', -0.455, (165.682, 151.899, 99.919)), (' A 844  VAL HG13', ' A 848  VAL  HB ', -0.45, (123.193, 122.892, 163.495)), (' B  88  GLN  O  ', ' B  92  PHE  HD2', -0.447, (126.042, 164.264, 162.541)), (' A  18  ARG  NH2', ' A  60  ASP  O  ', -0.446, (181.978, 135.428, 112.922)), (' A1004  H3U  N1 ', ' A1004  H3U  O24', -0.445, (131.646, 122.992, 148.595)), (' A 606  TYR  CE1', ' A 614  LEU HD21', -0.445, (124.247, 115.64, 127.716)), (' B 162  ALA  HB2', ' B 183  PRO  HD2', -0.443, (149.36, 140.204, 165.074)), (' B 132  ILE HD13', ' B 138  TYR  HD1', -0.442, (158.161, 147.061, 161.922)), (' A 790  ASN  HB3', ' A 792  VAL HG22', -0.439, (142.086, 132.963, 133.504)), (' A 390  ASP  OD2', ' A 674  TYR  OH ', -0.438, (145.484, 145.709, 155.956)), (' A 259  THR HG21', ' A 285  ARG  NH2', -0.437, (157.354, 158.359, 125.069)), (' A 249  ARG  O  ', ' A 252  THR  OG1', -0.436, (155.529, 147.433, 130.686)), (' A 726  ARG  NH1', ' A 744  GLU  OE1', -0.436, (125.674, 133.547, 107.057)), (' A 333  ILE HG13', ' A 342  VAL  CG2', -0.434, (130.366, 167.878, 148.363)), (' B  94  MET  HB3', ' B  94  MET  HE2', -0.432, (134.109, 159.671, 160.655)), (' A 497  ASN  ND2', ' A1003  H3U  O35', -0.431, (117.68, 139.168, 149.861)), (' A 848  VAL HG11', ' A 858  ARG  HD2', -0.43, (121.568, 121.596, 161.329)), (' A 847  ILE  O  ', ' A 850  THR  OG1', -0.428, (120.155, 127.136, 167.682)), (' A 549  SER  HA ', ' A1004  H3U  O23', -0.428, (133.174, 122.854, 152.059)), (' A1004  H3U  N1 ', ' A1004  H3U  O23', -0.426, (131.877, 123.468, 150.182)), (' A 755  MET  HG2', ' A 764  VAL HG12', -0.422, (128.008, 124.456, 126.35)), (' C  53  VAL HG13', ' G 106  ILE HD11', -0.42, (151.395, 113.75, 173.719)), (' A 500  LYS  NZ ', ' A 683  GLY  O  ', -0.416, (123.734, 139.798, 148.176)), (' A 259  THR HG21', ' A 285  ARG HH22', -0.414, (157.168, 158.875, 125.013)), (' A 411  LYS  HB2', ' A 411  LYS  HE3', -0.414, (132.747, 128.774, 165.961)), (' A 366  LEU  HA ', ' A 366  LEU HD12', -0.414, (121.184, 167.541, 153.733)), (' A  79  ASN  N  ', ' A  79  ASN  OD1', -0.412, (155.668, 139.463, 90.066)), (' C  18  GLN  NE2', ' C  23  GLU  OE2', -0.412, (136.587, 131.653, 170.713)), (' C  36  HIS  HD2', ' C  37  ASN HD22', -0.411, (141.665, 122.985, 161.462)), (' A 260  ASP  HB3', ' A 263  LYS  CG ', -0.407, (165.344, 157.749, 130.693)), (' A  77  PHE  HE1', ' A 103  LYS  NZ ', -0.404, (163.28, 141.091, 85.576)), (' C   3  MET  HE3', ' C   7  LYS  HE3', -0.401, (141.83, 111.791, 159.569)), (' A 601  MET  O  ', ' A 605  VAL HG23', -0.401, (119.887, 120.34, 129.661))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
