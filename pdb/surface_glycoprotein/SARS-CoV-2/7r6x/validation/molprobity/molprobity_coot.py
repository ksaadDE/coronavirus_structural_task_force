# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 163 ', 'PRO', 0.15829566176080986, (50.538, 3.953999999999997, -7.102))]
data['omega'] = [('A', ' 161 ', 'PRO', None, (51.581, -2.886, -7.973999999999999)), ('A', ' 163 ', 'PRO', None, (49.58999999999998, 2.8449999999999993, -6.9929999999999986)), ('B', '   8 ', 'PRO', None, (43.986, 22.085000000000015, -32.13799999999997)), ('B', ' 141 ', 'PRO', None, (58.58999999999999, 26.516, -23.341)), ('D', '   8 ', 'PRO', None, (-11.382000000000007, 14.326000000000008, -90.56999999999994)), ('H', ' 154 ', 'PRO', None, (-5.65, 61.778999999999996, -14.007)), ('H', ' 156 ', 'PRO', None, (-9.143, 57.982, -10.41)), ('L', '   8 ', 'PRO', None, (-29.813, 38.174, -22.414)), ('L', '  95 ', 'PRO', None, (-4.368, 28.123, -19.856999999999985)), ('L', ' 142 ', 'PRO', None, (-38.35900000000003, 55.95, -13.116999999999994))]
data['rota'] = [('L', '  15 ', 'VAL', 0.19261661430150318, (-37.944, 42.31, -6.647)), ('L', '  17 ', 'ASP', 0.13713910458221068, (-39.473, 37.963, -9.981)), ('L', '  20 ', 'THR', 0.009435615356778726, (-33.004, 33.858, -16.117)), ('L', '  22 ', 'THR', 0.010425261116893758, (-28.117, 32.92399999999998, -20.871)), ('L', '  33 ', 'LEU', 0.1957075916578114, (-18.526, 27.224, -16.73999999999999)), ('L', '  69 ', 'THR', 0.10196997586090695, (-22.71, 24.82, -25.261)), ('L', '  74 ', 'THR', 0.23102818710686127, (-31.33599999999997, 31.80699999999997, -12.559)), ('L', '  93 ', 'VAL', 0.15836873962459028, (-9.195, 25.63699999999999, -21.954999999999988)), ('L', '  96 ', 'THR', 0.0013479450899467338, (-6.534999999999996, 31.331000000000003, -21.331)), ('L', ' 124 ', 'GLU', 0.167517869966265, (-14.302, 80.739, -4.751)), ('L', ' 176 ', 'LEU', 0.10616271725450935, (-29.259, 62.59599999999999, -11.838999999999999)), ('L', ' 180 ', 'LEU', 0.11497558929739043, (-25.12299999999999, 73.812, -16.266)), ('H', '  18 ', 'LEU', 0.17635985729756948, (4.804999999999996, 50.05999999999999, -13.821999999999992)), ('H', '  63 ', 'VAL', 0.046784997110210474, (0.6489999999999996, 40.652, -22.92)), ('H', '  84 ', 'SER', 0.12390463637107195, (6.116, 48.741, -22.924)), ('H', '  95 ', 'CYS', 0.030264511588029563, (-5.536, 40.367, -8.28)), ('H', ' 112 ', 'GLN', 0.0, (-10.73, 45.614, -4.878)), ('H', ' 123 ', 'THR', 0.048626925737653016, (-1.88, 64.91299999999995, -14.254999999999999)), ('H', ' 163 ', 'SER', 0.20136182026602042, (-13.432, 61.298, 7.589999999999999)), ('H', ' 168 ', 'SER', 0.133754889644922, (-25.502, 57.71099999999997, 5.412)), ('H', ' 188 ', 'VAL', 0.046980226192008305, (-24.003, 65.406, -2.0259999999999985)), ('H', ' 204 ', 'ASN', 0.03142446745468528, (-12.878999999999992, 65.16299999999998, 2.23)), ('H', ' 211 ', 'ASN', 0.03693058673572968, (-1.7129999999999992, 64.08599999999997, -4.433)), ('H', ' 212 ', 'THR', 0.1505921180803839, (-4.521, 66.469, -3.429999999999999)), ('H', ' 214 ', 'VAL', 0.1432056658428455, (-9.006, 69.01999999999994, 0.182)), ('R', ' 346 ', 'ARG', 0.01598459141218408, (14.064999999999998, 13.285999999999992, -33.50999999999999)), ('R', ' 354 ', 'ASN', 0.08124266637234916, (4.257, 8.902, -32.30299999999998)), ('R', ' 358 ', 'ILE', 0.06908878639931197, (3.121999999999998, 6.488, -19.389)), ('R', ' 424 ', 'LYS', 0.02593080897136743, (-7.610999999999996, 14.98, -34.307)), ('R', ' 434 ', 'ILE', 0.07025979031298914, (2.728, 21.792, -25.580999999999985)), ('R', ' 462 ', 'LYS', 0.00227282859595592, (-11.89, 10.004, -35.70299999999998)), ('R', ' 471 ', 'GLU', 0.18170332086567348, (-2.515, 4.720000000000003, -51.237999999999985)), ('R', ' 483 ', 'VAL', 0.07068425151258413, (0.152, 5.463999999999999, -60.34999999999997)), ('R', ' 498 ', 'GLN', 0.08248458941643029, (13.84, 26.555999999999987, -44.782)), ('R', ' 503 ', 'VAL', 0.282864785845203, (7.484, 31.974999999999998, -38.054)), ('R', ' 514 ', 'SER', 0.01040049390875734, (-3.6639999999999984, 13.083, -22.912)), ('R', ' 517 ', 'LEU', 0.1185616750812196, (-9.279, 8.124, -16.515)), ('B', '  18 ', 'ARG', 0.044745786704748436, (39.329, 33.638, -25.428)), ('B', '  29 ', 'VAL', 0.04015236112502595, (26.433, 15.113000000000007, -37.427)), ('B', '  34 ', 'LEU', 0.058456822147266455, (27.243, 16.929, -29.862)), ('B', '  61 ', 'ASP', 0.006711904937014421, (28.381999999999994, 31.289999999999996, -18.814999999999987)), ('B', ' 129 ', 'THR', 0.1446488475065099, (71.489, -2.363999999999998, -12.257)), ('B', ' 132 ', 'VAL', 0.2717966716701854, (71.324, 7.626999999999999, -14.556999999999993)), ('B', ' 154 ', 'LEU', 0.07018287318161066, (74.822, 8.459999999999999, -28.575999999999986)), ('B', ' 202 ', 'SER', 0.12764969064352008, (71.204, 30.228, -26.05)), ('B', ' 203 ', 'SER', 0.0307692940570935, (73.016, 26.969, -26.897999999999985)), ('A', '  31 ', 'SER', 0.20920472978550186, (14.977, 7.278, -15.128)), ('A', '  67 ', 'ARG', 0.299714932270354, (33.551, -9.151, -24.501)), ('A', '  73 ', 'ASP', 0.1393038165144557, (20.61199999999999, -4.062, -9.862999999999992)), ('A', ' 124 ', 'THR', 0.26993980687010827, (45.587, -2.889, -14.090999999999992)), ('A', ' 183 ', 'VAL', 0.050180590315595075, (56.623, 5.073, -16.15)), ('A', ' 197 ', 'THR', 0.07881427748983505, (65.488, 22.046, -5.463)), ('A', ' 200 ', 'SER', 0.09284133991788035, (72.83, 25.161999999999985, -2.0909999999999984)), ('A', ' 207 ', 'THR', 0.14957875896981881, (68.179, 17.313, 6.483)), ('A', ' 211 ', 'ASN', 0.13183107291509524, (59.203, 9.333, 2.529999999999998)), ('A', ' 226 ', 'GLU', 0.1804071939055389, (72.974, 13.020999999999994, 1.842999999999999)), ('A', ' 228 ', 'LYS', 0.0, (77.833, 11.864, -1.8519999999999992)), ('D', '   7 ', 'THR', 0.10197646534849682, (-9.508, 13.263999999999992, -89.31)), ('D', '  57 ', 'THR', 0.18064946201597573, (-23.124, 17.668, -67.169)), ('C', '   2 ', 'VAL', 0.17131488587817426, (-18.962000000000014, 28.250999999999987, -60.536)), ('C', '  89 ', 'GLU', 0.04563157705942025, (5.776, 31.904, -80.987)), ('C', ' 120 ', 'THR', 0.14242783627898775, (1.189, 39.762999999999984, -77.29999999999994))]
data['cbeta'] = [('H', ' 211 ', 'ASN', ' ', 0.2669691634291377, (-0.2769999999999998, 63.93, -3.9059999999999997)), ('R', ' 346 ', 'ARG', ' ', 0.2929011735082518, (14.562999999999994, 12.451, -34.7)), ('A', ' 163 ', 'PRO', ' ', 0.28527978564512146, (49.495, 5.070999999999997, -6.942999999999996)), ('A', ' 215 ', 'LYS', ' ', 0.25298223716071405, (49.183, 1.312, 0.397))]
data['probe'] = [(' R 343  ASN HD21', ' R 601  NAG  C1 ', -1.492, (14.414, 18.228, -21.508)), (' R 343  ASN  ND2', ' R 601  NAG  C1 ', -1.464, (15.191, 17.424, -22.18)), (' R 343  ASN  ND2', ' R 601  NAG  O5 ', -0.89, (16.024, 18.183, -21.535)), (' A 111  ILE HG12', ' B  32  THR  HB ', -0.718, (18.645, 17.081, -29.859)), (' D  38  GLN  HB2', ' D  48  LEU HD11', -0.705, (-18.154, 20.575, -78.879)), (' R 343  ASN  CG ', ' R 601  NAG  C1 ', -0.692, (14.996, 17.869, -22.381)), (' L   6  GLN  HG3', ' L 101  PRO  HD2', -0.687, (-21.428, 37.066, -22.849)), (' R 343  ASN HD21', ' R 601  NAG  C2 ', -0.687, (14.626, 17.475, -20.238)), (' C  91  THR HG23', ' C 120  THR  HA ', -0.673, (1.111, 39.126, -78.804)), (' L  94  SER  HB3', ' L  97  TYR  CE1', -0.658, (-8.103, 27.313, -17.903)), (' H  11  LEU HD22', ' H 123  THR HG22', -0.648, (-0.967, 62.387, -14.921)), (' A 228  LYS  HD2', ' A 229  SER  N  ', -0.629, (79.678, 10.949, -1.74)), (' H  18  LEU HD22', ' H 116  LEU HD12', -0.606, (0.286, 50.827, -14.531)), (' B  38  GLN  HG3', ' B  87  TYR  CE1', -0.606, (37.179, 21.923, -20.152)), (' L  29  ILE HD12', ' L  32  TYR  O  ', -0.605, (-16.902, 26.047, -20.087)), (' H 100  SER  HA ', ' H 104  TYR  O  ', -0.603, (-11.21, 24.503, -9.552)), (' R 412  PRO  HG3', ' R 429  PHE  HB3', -0.591, (-9.59, 18.179, -26.585)), (' R 418  ILE  HA ', ' R 422  ASN HD22', -0.586, (-3.308, 17.681, -40.804)), (' B 151  ASP  O  ', ' B 152  ASN  HB2', -0.579, (82.71, 8.154, -26.914)), (' H 162  ASN  O  ', ' H 163  SER  HB2', -0.573, (-13.815, 62.028, 9.241)), (' L   7  SER  HB3', ' L  22  THR HG22', -0.565, (-28.178, 34.513, -23.965)), (' A  91  THR HG23', ' A 124  THR  HA ', -0.564, (45.928, -1.957, -15.483)), (' L   2  ILE HD12', ' L  93  VAL HG12', -0.564, (-11.532, 26.614, -24.25)), (' B  92  HIS  HA ', ' B  95  SER  O  ', -0.563, (26.733, 8.403, -31.389)), (' B 185  ASP  HA ', ' B 188  LYS  HE3', -0.562, (78.677, -2.886, -20.065)), (' R 367  VAL HG21', ' R 601  NAG  H81', -0.56, (10.26, 16.446, -17.947)), (' H  90  THR HG23', ' H 117  THR  HA ', -0.557, (-5.31, 54.118, -18.172)), (' H  69  ILE HD11', ' H  78  LEU HD11', -0.553, (0.534, 36.82, -10.091)), (' B   1  GLU  HG2', ' B   2  ILE  N  ', -0.545, (32.538, 6.942, -36.272)), (' H  11  LEU  CD2', ' H 123  THR HG22', -0.544, (-0.542, 62.009, -15.307)), (' R 429  PHE  HE1', ' R 514  SER  HB3', -0.542, (-4.972, 13.702, -25.107)), (' L  94  SER  HB2', ' L  95  PRO  HA ', -0.542, (-5.373, 27.578, -18.028)), (' A  36  TRP  CE2', ' A  81  MET  HB2', -0.531, (29.837, -0.559, -16.221)), (' A   1  GLN  HA ', ' A   1  GLN  OE1', -0.529, (23.16, 15.431, -3.027)), (' H 207  HIS  CD2', ' H 209  PRO  HD2', -0.518, (-6.532, 61.656, -8.826)), (' L 109  ARG  HG2', ' L 110  THR  N  ', -0.515, (-40.602, 51.056, -7.424)), (' A  27  TYR  CE2', ' A  98  ARG  HD2', -0.512, (20.449, 9.154, -12.761)), (' H  63  VAL HG13', ' H  67  PHE  HB2', -0.506, (2.193, 40.439, -19.45)), (' A   4  LEU HD23', ' A  24  ALA  HA ', -0.505, (25.013, 6.292, -9.422)), (' A  87  ARG  HG3', ' A  89  ASP  HB3', -0.502, (44.727, -5.519, -24.804)), (' A  88  SER  HA ', ' A 125  VAL  HB ', -0.493, (45.966, -5.687, -18.99)), (' L 160  SER  HA ', ' L 179  THR  O  ', -0.492, (-23.516, 71.286, -17.565)), (' D  33  TYR  HB2', ' D  93  VAL HG22', -0.49, (-5.418, 9.164, -70.538)), (' A  50  TRP  CZ2', ' A 102  ARG  HG2', -0.489, (19.546, 4.239, -23.644)), (' B  80  GLU  HB3', ' B  81  PRO  HD2', -0.489, (40.196, 32.026, -13.419)), (' A 182  ALA  HA ', ' A 192  LEU  HB3', -0.488, (57.001, 7.21, -11.776)), (' D  56  ALA  HB3', ' D  59  ILE HG13', -0.485, (-20.708, 18.157, -71.77)), (' A  73  ASP  OD1', ' A  76  THR  OG1', -0.484, (21.871, -3.518, -6.094)), (' H  36  TRP  HD1', ' H  69  ILE HD12', -0.484, (-0.38, 38.348, -12.074)), (' B  48  LEU  HA ', ' B  59  ILE HG13', -0.481, (29.693, 22.323, -18.842)), (' L 108  LYS  HA ', ' L 141  TYR  OH ', -0.475, (-38.471, 49.2, -12.766)), (' B 134  CYS  HB2', ' B 148  TRP  CZ2', -0.474, (69.85, 12.333, -18.04)), (' L   4  MET  HB2', ' L 100  GLY  HA2', -0.474, (-18.313, 35.696, -22.613)), (' H 126  PRO  HB3', ' H 152  TYR  HB3', -0.47, (-10.023, 67.187, -9.966)), (' H 103  TYR  HB3', ' R 381  GLY  O  ', -0.467, (-10.494, 19.221, -15.509)), (' A 192  LEU  C  ', ' A 192  LEU HD12', -0.465, (59.322, 8.504, -8.998)), (' L 138  ASN  O  ', ' L 175  SER  OG ', -0.463, (-30.742, 60.202, -6.576)), (' L 160  SER  CB ', ' L 180  LEU  HA ', -0.459, (-25.413, 72.748, -18.09)), (' H 121  ALA  HB3', ' H 153  PHE  CE2', -0.456, (-3.813, 61.967, -19.261)), (' H 208  LYS  N  ', ' H 209  PRO  CD ', -0.453, (-5.367, 60.655, -7.075)), (' R 367  VAL  CG2', ' R 601  NAG  C8 ', -0.452, (10.431, 17.29, -18.063)), (' D   2  ILE HD13', ' D  29  VAL HG22', -0.451, (-2.026, 8.117, -75.519)), (' B   2  ILE HG12', ' B  27  GLN  HG2', -0.451, (29.554, 10.92, -39.59)), (' B  19  ALA  HB2', ' B  79  LEU HD11', -0.445, (41.431, 29.736, -23.643)), (' A   2  VAL HG22', ' A  27  TYR  HB3', -0.444, (20.666, 12.454, -8.845)), (' L   7  SER  HB3', ' L  22  THR  CG2', -0.443, (-28.342, 34.758, -24.378)), (' R 354  ASN HD21', ' R 356  LYS  NZ ', -0.443, (8.007, 7.396, -29.33)), (' B   1  GLU  HG3', ' B  97  THR HG21', -0.442, (32.499, 6.25, -34.064)), (' A 105  TRP  CE3', ' R 337  PRO  HG3', -0.441, (8.275, 6.096, -19.375)), (' B  61  ASP  N  ', ' B  61  ASP  OD1', -0.44, (28.289, 31.546, -16.98)), (' D  38  GLN  HB2', ' D  48  LEU  CD1', -0.439, (-17.854, 19.769, -78.317)), (' B  36  TRP  CD2', ' B  74  LEU  HB2', -0.438, (33.483, 22.446, -27.135)), (' L 162  GLU  HB3', ' L 176  LEU HD21', -0.435, (-28.313, 64.361, -16.656)), (' B   2  ILE HD13', ' B  29  VAL HG23', -0.434, (28.434, 12.622, -37.025)), (' R 367  VAL  CG2', ' R 601  NAG  H81', -0.433, (10.176, 16.68, -17.962)), (' H  22  CYS  HB3', ' H  78  LEU  HB3', -0.433, (-0.522, 39.605, -5.331)), (' R 354  ASN  O  ', ' R 398  ASP  HA ', -0.431, (2.894, 10.682, -29.794)), (' D  56  ALA  HB3', ' D  59  ILE  CG1', -0.43, (-20.693, 17.978, -71.259)), (' H  18  LEU  CD2', ' H 116  LEU HD12', -0.43, (0.531, 50.734, -13.823)), (' R 337  PRO  HD2', ' R 358  ILE HG23', -0.429, (6.342, 7.866, -18.081)), (' B  95  SER  OG ', ' B  96  LEU  N  ', -0.426, (28.075, 5.12, -31.069)), (' D  67  GLY  HA3', ' D  72  PHE  HA ', -0.424, (-12.511, 5.545, -79.856)), (' L 109  ARG  HG2', ' L 110  THR  H  ', -0.421, (-40.874, 50.883, -6.742)), (' D 102  GLN  HG2', ' D 103  GLY  N  ', -0.42, (-6.766, 19.394, -86.209)), (' R 391  CYS  HB3', ' R 522  ALA  HB1', -0.42, (-4.267, 8.087, -10.243)), (' H 112  GLN  H  ', ' H 112  GLN  HG3', -0.418, (-8.875, 44.93, -3.435)), (' H  35  HIS  HE2', ' H  98  GLY  HA3', -0.418, (-5.922, 30.676, -9.829)), (' H  30  SER  HB3', ' H  73  ASP  HB3', -0.417, (4.58, 31.114, -0.111)), (' B 175  LEU  C  ', ' B 175  LEU HD23', -0.417, (62.747, 15.403, -17.568)), (' A 164  VAL HG12', ' A 214  HIS  HB2', -0.417, (54.754, 2.49, -3.596)), (' R 392  PHE  CD1', ' R 515  PHE  HB3', -0.415, (-5.453, 12.359, -16.359)), (' H  63  VAL HG13', ' H  67  PHE  CG ', -0.414, (1.479, 41.239, -19.656)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.412, (-23.732, 36.737, -9.226)), (' C   4  LEU HD11', ' C  98  SER  HB2', -0.411, (-11.062, 25.141, -63.223)), (' H  34  MET  HB3', ' H  78  LEU HD22', -0.411, (-1.69, 36.798, -7.197)), (' D  36  TRP  HB2', ' D  49  ILE  HB ', -0.41, (-15.889, 14.029, -75.908)), (' L  94  SER  HB3', ' L  97  TYR  CZ ', -0.408, (-7.889, 27.446, -16.699)), (' R 338  PHE  HE2', ' R 363  ALA  HB1', -0.407, (4.215, 13.579, -15.19)), (' A  29  PHE  CE2', ' A  77  THR  HA ', -0.407, (20.021, 1.052, -9.707)), (' A 215  LYS  N  ', ' A 216  PRO  CD ', -0.406, (50.578, 0.259, -1.825)), (' L 160  SER  HB3', ' L 180  LEU  HA ', -0.405, (-25.461, 73.108, -17.827)), (' B 143  GLU  CD ', ' B 143  GLU  N  ', -0.405, (57.902, 21.354, -26.027)), (' L  29  ILE HD11', ' L  33  LEU HD23', -0.405, (-18.973, 27.745, -20.266)), (' C  27  PHE  H  ', ' C  27  PHE  HD1', -0.404, (-15.876, 26.6, -57.847)), (' A  54  TYR  CD2', ' A 105  TRP  HA ', -0.404, (11.99, 2.246, -19.93)), (' A 138  LEU  HB3', ' B 118  PHE  CD2', -0.403, (69.809, 12.866, -8.213)), (' L  61  ARG  CZ ', ' L  79  GLN  HG3', -0.403, (-31.538, 37.842, -2.564)), (' A 133  PRO  HD2', ' A 219  THR HG21', -0.401, (57.858, -0.366, -1.708)), (' L  39  LYS  HE2', ' L  81  GLU  O  ', -0.401, (-26.482, 42.94, -5.237))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
