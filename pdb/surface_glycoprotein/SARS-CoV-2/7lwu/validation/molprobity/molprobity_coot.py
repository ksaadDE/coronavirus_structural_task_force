# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  97 ', 'LYS', 0.033692282111690515, (127.91300000000007, 216.958, 142.169)), ('A', ' 112 ', 'SER', 0.025688367826138703, (142.127, 208.983, 113.672)), ('A', ' 600 ', 'PRO', 0.09107202278803711, (155.147, 194.412, 170.881)), ('A', '1041 ', 'ASP', 0.04727328532060097, (160.726, 171.321, 192.646)), ('A', '1099 ', 'GLY', 0.07875255524914661, (172.95, 186.975, 222.32899999999995)), ('B', ' 197 ', 'ILE', 0.08226520333202063, (192.34, 157.54, 129.234)), ('B', ' 744 ', 'GLY', 0.08605303703591513, (170.082, 179.486, 144.634)), ('C', ' 112 ', 'SER', 0.0006760940663827797, (128.782, 123.127, 113.78999999999998)), ('C', ' 710 ', 'ASN', 0.0360227483793159, (136.71, 163.325, 215.229)), ('C', ' 814 ', 'LYS', 0.04355109457125893, (170.146, 128.586, 184.648))]
data['omega'] = []
data['rota'] = [('A', ' 169 ', 'GLU', 0.24536243007819564, (129.904, 198.249, 120.48399999999997)), ('A', ' 234 ', 'ASN', 0.0765210536186037, (146.609, 197.64, 123.616)), ('A', ' 403 ', 'ARG', 0.13619477255550602, (172.14, 159.024, 101.287)), ('A', ' 602 ', 'THR', 0.022383271187540802, (149.605, 195.263, 167.84199999999998)), ('A', ' 603 ', 'ASN', 0.09114532387699886, (147.082, 196.544, 170.433)), ('A', '1098 ', 'ASN', 0.09177609165917838, (170.547, 185.734, 219.632)), ('B', ' 122 ', 'ASN', 0.0760263025187228, (217.657, 167.237, 122.86399999999998)), ('B', ' 596 ', 'SER', 0.0482795232369916, (183.579, 144.373, 160.10799999999998)), ('B', ' 599 ', 'THR', 0.019656431620691653, (191.158, 147.68, 165.056)), ('B', ' 602 ', 'THR', 0.10064290256010318, (196.253, 152.564, 164.561)), ('B', ' 604 ', 'THR', 0.17574569350445074, (198.634, 151.06, 169.299)), ('B', ' 608 ', 'VAL', 0.0670592539638391, (193.347, 144.057, 162.265)), ('B', ' 610 ', 'VAL', 0.002100355050060898, (188.029, 140.499, 160.219)), ('B', ' 716 ', 'ILE', 0.02276904965344846, (183.603, 150.893, 210.958)), ('B', ' 820 ', 'ASP', 0.15883899932081258, (187.77899999999994, 175.764, 181.926)), ('B', ' 902 ', 'MET', 0.14398043846097905, (177.165, 168.871, 206.07199999999997)), ('C', ' 233 ', 'ILE', 0.10180277111523021, (138.182, 128.473, 122.006)), ('C', ' 570 ', 'ASP', 0.0, (140.887, 172.259, 149.792)), ('C', ' 602 ', 'THR', 0.0646170149133045, (135.034, 133.708, 167.836)), ('C', ' 603 ', 'ASN', 0.007526466585058531, (135.355, 131.111, 170.676)), ('C', ' 619 ', 'GLU', 0.2854900734714375, (122.56, 156.68399999999997, 155.231)), ('C', ' 710 ', 'ASN', 0.06259922764978187, (136.71, 163.325, 215.229)), ('C', ' 716 ', 'ILE', 0.20747142093728077, (143.908, 146.198, 212.313))]
data['cbeta'] = [('A', '1098 ', 'ASN', ' ', 0.29025854245215177, (169.21599999999998, 186.459, 219.385)), ('B', ' 200 ', 'TYR', ' ', 0.2528950578899711, (194.337, 162.055, 123.764)), ('C', ' 198 ', 'ASP', ' ', 0.2912251527648118, (144.822, 133.647, 128.793)), ('C', ' 487 ', 'ASN', ' ', 0.2593553622933029, (173.609, 194.50699999999998, 106.324)), ('C', ' 710 ', 'ASN', ' ', 0.4019217895493785, (135.875, 163.747, 216.452)), ('C', ' 904 ', 'TYR', ' ', 0.2875459521133392, (165.511, 147.634, 208.60299999999998))]
data['probe'] = [(' C 599  THR HG22', ' C 601  GLY  H  ', -0.618, (134.579, 137.971, 169.234)), (' A1075  PHE  CD1', ' A1098  ASN  HB3', -0.543, (168.708, 185.497, 217.604)), (' A1032  CYS  CB ', ' A1043  CYS  HG ', -0.501, (153.184, 166.154, 192.863)), (' A1075  PHE  HD1', ' A1098  ASN  HB3', -0.479, (168.837, 185.083, 217.884)), (' B 598  ILE  HB ', ' B 609  ALA  HB3', -0.477, (189.582, 142.195, 164.57)), (' B1032  CYS  HG ', ' B1043  CYS  HG ', -0.474, (170.638, 163.664, 192.26)), (' B  44  ARG  O  ', ' B 283  GLY  HA2', -0.471, (196.214, 171.767, 148.304)), (' C 130  VAL  HB ', ' C 233  ILE HD11', -0.468, (138.17, 122.834, 120.828)), (' A 718  PHE  HZ ', ' A 923  ILE HD11', -0.463, (151.033, 177.74, 209.905)), (' B 718  PHE  HZ ', ' B 923  ILE HD11', -0.45, (183.127, 160.961, 208.518)), (' B 332  ILE HD11', ' B 362  VAL HG21', -0.448, (161.055, 118.125, 123.027)), (' B 706  ALA  HB1', ' B1308  NAG  H5 ', -0.416, (181.373, 135.253, 205.861)), (' A1032  CYS  HG ', ' A1043  CYS  CB ', -0.412, (153.798, 168.266, 193.48)), (' A 904  TYR  CZ ', ' C1107  ARG  HD3', -0.411, (148.691, 160.245, 211.499)), (' B 332  ILE  HA ', ' B 332  ILE HD12', -0.41, (161.03, 116.739, 125.944)), (' A1032  CYS  HB2', ' A1043  CYS  HG ', -0.409, (153.33, 165.942, 192.853)), (' A1032  CYS  HG ', ' A1043  CYS  HB3', -0.406, (153.48, 168.446, 193.713)), (' A1098  ASN HD22', ' A1099  GLY  N  ', -0.405, (170.752, 186.401, 221.729)), (' A1028  LYS  O  ', ' A1032  CYS  HB3', -0.403, (151.455, 164.587, 191.602)), (' A1098  ASN  H  ', ' A1311  NAG  C7 ', -0.401, (168.878, 184.038, 221.252)), (' A 716  ILE HD11', ' A1073  LYS  HB2', -0.4, (164.331, 184.741, 213.044))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
