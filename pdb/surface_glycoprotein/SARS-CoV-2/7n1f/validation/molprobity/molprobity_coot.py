# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 269 ', 'PRO', 0.023409788148241906, (43.94800000000001, 39.924, 39.339000000000006)), ('D', ' 156 ', 'LYS', 0.0009076354702806837, (-7.585999999999999, 8.839999999999998, -19.389)), ('D', ' 157 ', 'CYS', 0.018874921734720676, (-6.047000000000001, 10.492, -22.472000000000005))]
data['omega'] = [('A', ' 210 ', 'PRO', None, (42.71100000000002, 28.475, 29.668000000000006)), ('B', '  32 ', 'PRO', None, (57.863, 30.607999999999997, 4.222)), ('E', '   8 ', 'PRO', None, (24.74200000000001, 9.094, -28.459000000000003)), ('E', ' 149 ', 'PRO', None, (11.659000000000008, -0.864, -29.902000000000005))]
data['rota'] = [('D', '   8 ', 'SER', 0.0365219086809357, (4.147, 9.088, -2.782)), ('D', '  11 ', 'LEU', 0.0010298296301850293, (-0.8759999999999999, 13.962999999999989, -7.396000000000002)), ('D', ' 138 ', 'ASP', 0.10682710665618937, (-15.551000000000004, 14.701, -15.976)), ('D', ' 162 ', 'ARG', 0.0, (-0.7839999999999996, 23.831000000000003, -25.553)), ('D', ' 166 ', 'PHE', 0.0006626852470873654, (-12.369999999999994, 24.193, -24.784000000000002)), ('D', ' 167 ', 'LYS', 0.09750094303009843, (-10.811000000000005, 20.818, -23.628)), ('E', '  57 ', 'LYS', 0.0, (31.646000000000015, 5.810000000000001, -8.063)), ('E', '  68 ', 'GLU', 0.08820330083856714, (36.43100000000001, 8.428999999999998, -18.6)), ('A', ' 156 ', 'LEU', 0.20393078756771604, (28.672000000000004, 28.584999999999997, 3.886)), ('A', ' 176 ', 'LYS', 0.12463638407638906, (33.64200000000002, 18.422, 29.361)), ('A', ' 212 ', 'GLU', 0.015125452070516163, (44.784, 33.814, 26.924)), ('A', ' 213 ', 'ILE', 0.01861954538437725, (46.678, 35.836, 29.543000000000003)), ('A', ' 264 ', 'GLU', 0.0001465026928658249, (40.179, 33.735, 33.502))]
data['cbeta'] = [('D', '   7 ', 'ASN', ' ', 0.4065909554464054, (4.566, 13.322, -0.645)), ('D', ' 165 ', 'ASP', ' ', 0.2579760324692394, (-11.265, 27.346000000000007, -27.931))]
data['probe'] = [(' A 182  THR  OG1', ' A 264  GLU  OE1', -1.122, (40.058, 28.522, 33.652)), (' D 164  MET  O  ', ' D 301  HOH  O  ', -0.896, (-9.152, 24.124, -28.581)), (' E 208  GLN  OE1', ' E 301  HOH  O  ', -0.891, (5.193, 15.275, -41.115)), (' D 151  VAL HG12', ' D 175  SER  HB2', -0.875, (-10.992, -7.318, -28.24)), (' A 182  THR  CB ', ' A 264  GLU  OE1', -0.747, (39.752, 28.328, 33.149)), (' D 134  PHE  CE2', ' D 137  PHE  CD2', -0.721, (-15.049, 8.571, -20.571)), (' A 228  THR  HA ', ' A 247  VAL HG12', -0.71, (60.341, 45.213, 29.943)), (' D 116  PRO  HB2', ' D 195  THR HG22', -0.687, (-20.355, 8.155, -20.272)), (' B   2  GLN  NE2', ' B 101  HOH  O  ', -0.682, (60.053, 37.495, -0.48)), (' E  57  LYS  CE ', ' E  61  LEU HD23', -0.676, (31.514, 2.709, -12.108)), (' D 122  ARG  HD2', ' D 123  ASP  H  ', -0.661, (-12.138, 0.731, -39.373)), (' E 220  TRP  HB2', ' E 226  LYS  HD2', -0.643, (19.389, -3.806, -41.966)), (' D 172  VAL HG13', ' E 190  ARG HH21', -0.639, (-8.8, 6.835, -27.704)), (' E  57  LYS  HE2', ' E  61  LEU HD23', -0.639, (30.61, 2.284, -11.807)), (' D 134  PHE  CD2', ' D 137  PHE  CE2', -0.629, (-13.884, 7.709, -21.368)), (' D 175  SER  OG ', ' D 176  ASN  N  ', -0.613, (-10.705, -7.494, -31.668)), (' A 154  GLU  OE2', ' D  52  SER  OG ', -0.609, (20.23, 31.141, 2.729)), (' A 249  VAL  HB ', ' A 250  PRO  HD2', -0.586, (64.696, 50.917, 37.597)), (' D 148  ASP  HB2', ' D 151  VAL HG22', -0.582, (-10.213, -6.85, -23.541)), (' A 266  LEU HD13', ' A 270  LEU  HB2', -0.576, (46.357, 35.761, 39.929)), (' A 253  GLN  HA ', ' A 253  GLN  OE1', -0.557, (63.53, 50.221, 45.381)), (' A  11  SER  HB3', ' A  95  VAL HG13', -0.552, (46.91, 24.52, -0.778)), (' D 134  PHE  CE2', ' D 137  PHE  CE2', -0.552, (-13.881, 8.225, -20.1)), (' E  84  GLN HE22', ' E 181  ASN HD21', -0.55, (12.983, -7.844, -20.794)), (' A  35  ARG  NH1', ' A  48  ARG HH21', -0.547, (49.479, 12.586, 13.783)), (' E  57  LYS  HE3', ' E  61  LEU HD23', -0.541, (31.54, 2.95, -11.843)), (' A  35  ARG  HD2', ' B  53  ASP  OD1', -0.541, (48.831, 15.466, 12.423)), (' D 123  ASP  HB3', ' D 126  SER  HA ', -0.539, (-10.201, 0.49, -41.961)), (' D 128  ASP  N  ', ' D 128  ASP  OD1', -0.529, (-7.508, -2.971, -40.385)), (' A 218  GLN  O  ', ' A 257  TYR  HA ', -0.526, (56.229, 48.332, 39.178)), (' A 218  GLN  OE1', ' A 260  HIS  NE2', -0.525, (49.927, 46.665, 39.373)), (' A 249  VAL HG21', ' A 257  TYR  CE1', -0.525, (62.092, 49.176, 38.607)), (' E 180  LEU HD22', ' E 182  ASP  H  ', -0.522, (8.652, -10.978, -25.488)), (' E 109  THR HG21', ' E 149  PRO  HB3', -0.516, (13.676, -1.137, -27.238)), (' D 172  VAL HG22', ' E 190  ARG  NH2', -0.515, (-7.838, 6.37, -27.064)), (' D 151  VAL HG12', ' D 175  SER  CB ', -0.514, (-10.972, -6.984, -28.732)), (' E  21  PHE  CD1', ' E 106  THR HG21', -0.514, (23.785, 6.04, -25.216)), (' E  99  GLU  OE1', ' E 303  HOH  O  ', -0.507, (21.489, 28.263, -10.419)), (' D 146  SER  HB2', ' D 148  ASP  HB2', -0.506, (-10.481, -6.593, -22.102)), (' D 122  ARG  HD3', ' D 130  SER  HB2', -0.505, (-13.065, 0.352, -37.057)), (' B  25  CYS  HB2', ' B  39  LEU HD21', -0.496, (63.545, 22.046, 20.218)), (' D 155  ASP  O  ', ' D 157  CYS  N  ', -0.494, (-6.422, 8.614, -21.498)), (' D 166  PHE  C  ', ' D 166  PHE  CD1', -0.493, (-12.459, 22.576, -25.478)), (' D  65  LEU HD21', ' D  67  LYS  HD3', -0.491, (18.29, 23.874, 4.321)), (' A 249  VAL HG11', ' A 257  TYR  CE2', -0.49, (61.155, 49.217, 36.553)), (' A  11  SER  HB3', ' A  95  VAL  CG1', -0.489, (47.204, 24.583, -1.116)), (' A 147  TRP  CZ2', ' C   9  LEU HD23', -0.48, (37.298, 29.757, -3.593)), (' A 217  TRP  CH2', ' A 259  CYS  HB2', -0.476, (56.67, 42.026, 37.444)), (' A 109  PHE  HB2', ' A 165  VAL HG21', -0.475, (25.926, 29.155, 15.665)), (' A 253  GLN  HG3', ' A 253  GLN  O  ', -0.471, (63.122, 50.582, 42.73)), (' D  25  TYR  CZ ', ' D  70  GLN  HA ', -0.47, (16.613, 18.702, 6.024)), (' D 152  TYR  O  ', ' D 173  ALA  HA ', -0.469, (-8.749, -0.505, -25.974)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.468, (45.497, 34.011, 4.889)), (' B  50  GLU  HG3', ' B  67  TYR  CE2', -0.467, (56.8, 14.314, 20.914)), (' D 163  SER  HA ', ' E 165  SER  HA ', -0.463, (-4.651, 23.149, -28.063)), (' D  90  ALA  HB1', ' D  97  ILE  CG2', -0.462, (19.549, 16.867, -6.443)), (' D 122  ARG  CD ', ' D 123  ASP  H  ', -0.459, (-12.786, 1.141, -39.355)), (' E 187  LEU HD12', ' E 188  SER  H  ', -0.458, (-0.678, 6.035, -27.539)), (' A 218  GLN  C  ', ' A 224  GLN HE22', -0.456, (55.948, 49.289, 36.896)), (' A 231  VAL  O  ', ' A 243  LYS  NZ ', -0.453, (53.989, 36.079, 25.111)), (' A 230  LEU HD11', ' A 243  LYS  HE3', -0.452, (53.391, 38.345, 28.076)), (' E   7  ASN  OD1', ' E  22  ARG  HG2', -0.452, (28.836, 12.397, -28.369)), (' E  84  GLN  NE2', ' E 181  ASN HD21', -0.451, (13.01, -7.606, -21.008)), (' E 170  ASP  HB2', ' E 187  LEU  CD1', -0.45, (-0.05, 6.846, -26.375)), (' A  14  ARG  NH2', ' A  21  ARG  HD3', -0.446, (55.137, 16.986, 1.99)), (' A 182  THR  HB ', ' A 264  GLU  OE1', -0.442, (39.001, 28.464, 33.154)), (' E 180  LEU  CD2', ' E 182  ASP  H  ', -0.44, (8.52, -11.711, -25.209)), (' D 159  LEU HD21', ' D 168  SER  O  ', -0.44, (-8.858, 16.846, -23.59)), (' E 127  PRO  HD2', ' E 198  TRP  CZ2', -0.434, (-13.721, 12.079, -39.725)), (' D 138  ASP  N  ', ' D 138  ASP  OD1', -0.433, (-16.32, 13.088, -16.03)), (' E 175  LYS  HE3', ' E 183  SER  HB3', -0.432, (5.507, -6.072, -23.897)), (' A 249  VAL HG11', ' A 257  TYR  CZ ', -0.43, (61.968, 49.412, 36.746)), (' A 218  GLN  HA ', ' A 222  GLU  O  ', -0.428, (53.067, 49.813, 36.053)), (' A  63  GLU  OE2', ' A  66  LYS  NZ ', -0.428, (32.333, 15.112, 8.75)), (' B  87  LEU HD22', ' B  91  LYS  HE3', -0.427, (68.317, 32.425, 11.642)), (' A 266  LEU  HA ', ' A 266  LEU HD23', -0.426, (43.229, 32.062, 39.614)), (' A 111  ARG  HG2', ' A 112  GLY  N  ', -0.425, (31.595, 34.727, 12.701)), (' A 189  MET  CE ', ' A 217  TRP  HH2', -0.422, (58.633, 41.148, 38.582)), (' E 127  PRO  HG2', ' E 138  ALA  HB1', -0.421, (-14.58, 14.54, -36.961)), (' A 219  ARG  HA ', ' A 256  ARG  O  ', -0.421, (56.586, 50.434, 40.515)), (' D 172  VAL  N  ', ' E 190  ARG  NH2', -0.418, (-8.582, 6.431, -26.074)), (' D  35  TRP  O  ', ' D  47  ILE HG12', -0.418, (13.335, 22.729, -9.419)), (' A 189  MET  SD ', ' A 272  LEU HD21', -0.417, (58.219, 39.16, 41.37)), (' E  51  ASN  O  ', ' E  69  ARG  HD3', -0.417, (36.952, 15.763, -15.761)), (' A 217  TRP  CZ3', ' A 259  CYS  HB2', -0.416, (56.357, 42.422, 37.717)), (' D 148  ASP  CB ', ' D 151  VAL HG22', -0.416, (-10.433, -7.386, -23.615)), (' E 202  ARG  HB3', ' E 202  ARG  HE ', -0.415, (-9.443, 22.813, -49.501)), (' D  46  LEU  HG ', ' D  47  ILE  N  ', -0.415, (15.601, 24.772, -10.8)), (' D 134  PHE  CD2', ' D 137  PHE  HE2', -0.411, (-13.554, 8.031, -21.332)), (' C   5  ARG  NH2', ' E  97  ASP  OD2', -0.411, (28.321, 25.058, -4.06)), (' B   0  MET  HB2', ' B   0  MET  HE2', -0.409, (55.504, 34.238, -3.703)), (' E 124  VAL HG23', ' E 234  ALA  HB3', -0.409, (-2.929, 7.622, -39.852)), (' E  22  ARG  HG3', ' E  23  CYS  N  ', -0.408, (29.878, 12.648, -25.327)), (' A 114  HIS  CD2', ' A 156  LEU HD21', -0.407, (33.296, 28.502, 4.422)), (' E 220  TRP  CE3', ' E 220  TRP  HA ', -0.407, (19.258, -6.496, -39.542)), (' A 213  ILE HG13', ' A 263  HIS  HD2', -0.405, (46.701, 33.527, 31.646)), (' D 147  LYS  HA ', ' D 147  LYS  HD3', -0.404, (-8.504, -8.24, -17.334)), (' D 190  ILE  O  ', ' D 190  ILE HG13', -0.403, (-16.453, 4.323, -13.41))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
