# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  23 ', 'GLY', 0.0894251388891619, (-35.345, -1.6950000000000005, -20.696)), ('A', '  46 ', 'SER', 0.021396530528975128, (-32.143, -8.002000000000008, -28.983000000000004)), ('A', '  47 ', 'GLU', 0.0007624278278742707, (-33.257999999999974, -7.3260000000000005, -32.584)), ('A', '  48 ', 'ASP', 0.0001959048140206902, (-32.356999999999985, -3.7809999999999993, -33.55)), ('A', ' 141 ', 'LEU', 0.011637741255347963, (-14.326999999999998, -5.623, -18.971000000000004)), ('A', ' 214 ', 'ASN', 0.014745739363758404, (18.019, 10.762, -19.973)), ('B', ' 141 ', 'LEU', 0.008128967553164885, (8.561, 13.449000000000002, -11.035)), ('B', ' 214 ', 'ASN', 0.0317739644371774, (-8.179, -14.834000000000005, -24.284000000000002))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 243  THR HG22', ' B 245  ASP  H  ', -0.901, (4.45, -22.474, -3.296)), (' A 139  SER  HB2', ' B   4  ARG  HB2', -0.879, (-6.254, -2.759, -21.829)), (' A  47  GLU  O  ', ' A  49  MET  N  ', -0.762, (-30.662, -5.261, -33.707)), (' A 276  MET  HE1', ' A 281  ILE HG13', -0.761, (15.128, 0.021, -27.718)), (' A 102  LYS  NZ ', ' A 156  CYS  SG ', -0.743, (-9.87, 22.58, -20.57)), (' B 145  CYS  SG ', ' B 314  HOH  O  ', -0.724, (12.331, 11.542, 0.489)), (' A 145  CYS  SG ', ' A 301  FNO  C19', -0.684, (-22.198, 0.486, -25.708)), (' B 243  THR HG22', ' B 245  ASP  N  ', -0.677, (4.127, -23.084, -3.272)), (' A  39  PRO  HG2', ' A 145  CYS  SG ', -0.632, (-21.331, 2.962, -25.101)), (' A 165  MET  SD ', ' A 301  FNO  C20', -0.617, (-19.679, -1.693, -33.857)), (' A   4  ARG  H  ', ' B 139  SER  CB ', -0.612, (8.622, 5.959, -15.951)), (' B  21  THR  OG1', ' B  67  LEU  HB3', -0.61, (5.707, 24.21, 4.418)), (' B 284  SER  OG ', ' B 285  ALA  N  ', -0.607, (4.896, -8.718, -25.556)), (' B  62  SER  HA ', ' B  80  HIS  HE1', -0.598, (7.17, 20.173, 17.827)), (' B  21  THR HG22', ' B  26  THR HG22', -0.581, (6.537, 22.078, 1.29)), (' A   4  ARG  H  ', ' B 139  SER  HB2', -0.574, (8.736, 5.757, -15.371)), (' B 102  LYS  HE2', ' B 156  CYS  SG ', -0.571, (-9.834, -2.523, 3.149)), (' A 165  MET  HE1', ' A 186  VAL  O  ', -0.56, (-20.025, 0.817, -35.941)), (' B 108  PRO  HB3', ' B 132  PRO  HA ', -0.54, (10.244, -9.448, -4.93)), (' A 282  LEU  N  ', ' A 403  HOH  O  ', -0.535, (14.002, 1.805, -23.651)), (' A 140  PHE  HD2', ' A 172  HIS  CD2', -0.534, (-13.239, -1.579, -25.558)), (' A 188  ARG  CZ ', ' A 190  THR HG21', -0.527, (-24.598, -2.692, -41.377)), (' A  83  GLN  OE1', ' A  88  LYS  NZ ', -0.521, (-25.686, 17.753, -28.467)), (' B  21  THR  CG2', ' B  26  THR HG22', -0.518, (7.113, 22.535, 1.32)), (' A   9  PRO  HD3', ' B 124  GLY  HA2', -0.512, (-2.314, 11.695, -13.31)), (' A   3  PHE  HA ', ' B 139  SER  OG ', -0.5, (9.895, 7.108, -15.902)), (' B 207  TRP  HZ3', ' B 287  LEU HD23', -0.499, (4.912, -13.503, -22.316)), (' A 132  PRO  HD2', ' A 197  ASP  OD1', -0.498, (-2.423, 2.775, -35.915)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.491, (-21.937, 18.031, -12.851)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.49, (-26.305, 7.999, -32.148)), (' A 108  PRO  HB3', ' A 132  PRO  HA ', -0.48, (-3.922, 7.433, -36.739)), (' A   4  ARG HH22', ' B 290  GLU  CD ', -0.474, (5.707, -2.855, -13.363)), (' B 288  GLU  OE2', ' B 290  GLU  HB2', -0.473, (3.667, -5.883, -15.491)), (' A 140  PHE  N  ', ' A 405  HOH  O  ', -0.471, (-10.666, -5.389, -22.131)), (' A  58  LEU HD11', ' A  80  HIS  HD2', -0.45, (-34.564, 10.36, -26.889)), (' A 117  CYS  O  ', ' A 144  SER  HA ', -0.44, (-17.453, -0.113, -18.294)), (' A 207  TRP  CE2', ' A 288  GLU  HB3', -0.435, (9.669, 4.01, -26.136)), (' A 145  CYS  SG ', ' A 146  GLY  N  ', -0.434, (-20.429, 2.505, -24.02)), (' B 123  SER  CB ', ' B 141  LEU HD21', -0.43, (2.996, 14.4, -10.961)), (' A 169  THR HG23', ' A 171  VAL HG22', -0.428, (-9.55, -4.184, -33.804)), (' A  14  GLU  HG2', ' A 122  PRO  HG3', -0.426, (-14.354, 6.577, -10.549)), (' A 301  FNO  O04', ' A 301  FNO  O05', -0.422, (-22.463, 1.09, -28.857)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.42, (-39.478, 6.625, -32.761)), (' A   4  ARG  NH2', ' B 290  GLU  OE2', -0.419, (6.308, -2.09, -12.732)), (' A  12  LYS  HG3', ' B 304  HOH  O  ', -0.418, (-8.936, 15.028, -11.308)), (' B  27  LEU HD13', ' B  39  PRO  HD2', -0.418, (7.096, 13.403, 2.813)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.414, (-0.115, 3.094, -5.237)), (' A 139  SER  CB ', ' B   4  ARG  HB2', -0.414, (-6.533, -2.832, -20.638)), (' B  62  SER  HA ', ' B  80  HIS  CE1', -0.412, (7.387, 19.662, 17.616)), (' B 136  ILE  O  ', ' B 136  ILE HG13', -0.407, (9.638, 1.738, -8.041)), (' A  86  VAL HG23', ' A 179  GLY  HA2', -0.407, (-21.446, 10.676, -29.693)), (' B 243  THR  O  ', ' B 246  HIS  HB2', -0.407, (4.536, -21.772, -6.347)), (' B 118  TYR  CB ', ' B 141  LEU HD23', -0.406, (5.103, 16.109, -9.329)), (' A  36  VAL HG21', ' A  68  VAL HG11', -0.404, (-28.292, 10.451, -15.725)), (' B 217  ARG  HB2', ' B 220  LEU HD12', -0.403, (-3.305, -23.083, -26.785)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.401, (10.611, 1.747, 4.235)), (' A 301  FNO  O02', ' A 301  FNO  O03', -0.401, (-22.533, -4.195, -27.689))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
