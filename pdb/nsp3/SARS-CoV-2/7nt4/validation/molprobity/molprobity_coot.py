# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  25 ', 'SER', 0.0049010239022105944, (26.952999999999992, -4.943, 19.102)), ('A', '  29 ', 'GLY', 0.08746335849976787, (36.523, 1.622, 19.616)), ('A', '  31 ', 'GLN', 0.03509786197862372, (36.82, 1.346, 13.97)), ('A', '  49 ', 'ASN', 0.0, (23.124999999999993, 1.564, 23.962)), ('B', ' 181 ', 'SER', 0.03097022572533545, (63.93699999999999, 30.932999999999996, -17.273))]
data['omega'] = [('A', '  28 ', 'TYR', None, (34.596999999999994, -2.596, 19.196))]
data['rota'] = [('A', '  17 ', 'LEU', 0.03759700730102961, (22.902000000000005, 7.767, 4.805)), ('A', '  21 ', 'VAL', 0.003150532575091347, (26.945, 0.769, 11.066)), ('A', '  23 ', 'ASP', 0.1614714311228499, (24.126, -1.03, 15.363)), ('A', '  25 ', 'SER', 0.1479106056927357, (26.952999999999992, -4.943, 19.102)), ('A', '  30 ', 'GLN', 0.015488227827510916, (34.84600000000001, 3.282, 16.594)), ('A', '  31 ', 'GLN', 0.03704387456337345, (36.82, 1.346, 13.97)), ('A', '  55 ', 'THR', 0.08587956246031633, (23.51899999999999, 9.396, 12.361)), ('A', '  61 ', 'ASN', 0.15219531648970552, (37.709, 7.364, 2.727)), ('A', '  64 ', 'THR', 0.044486425745449976, (31.897999999999996, 6.277, -3.07)), ('A', '  67 ', 'VAL', 0.15220029399288332, (32.311, 11.592000000000004, -4.505)), ('A', '  75 ', 'THR', 0.0, (36.36500000000001, 20.111, -2.526)), ('A', '  76 ', 'THR', 0.0, (38.038, 16.746, -2.151)), ('A', '  86 ', 'SER', 0.20743448504089182, (36.351, 20.547000000000004, 14.67)), ('A', '  98 ', 'GLN', 0.0, (18.576000000000004, 38.175, 15.455)), ('A', ' 105 ', 'ILE', 0.18045873029198642, (26.687, 36.233, 16.668)), ('A', ' 106 ', 'LYS', 0.02343897243392001, (27.392999999999997, 36.958, 20.352)), ('A', ' 124 ', 'ILE', 0.001385841387273523, (23.808, 41.062, -0.544)), ('A', ' 126 ', 'LEU', 0.18084505773768889, (24.710999999999995, 35.729, -3.892)), ('A', ' 162 ', 'GLU', 0.0130108400847301, (42.24699999999999, 32.546, 15.114)), ('A', ' 166 ', 'VAL', 0.29187797587373543, (36.595, 40.189, 6.51)), ('A', ' 168 ', 'GLU', 0.02430835190218628, (39.87, 37.731, 2.948)), ('A', ' 173 ', 'LEU', 0.0, (33.46800000000001, 32.637, -0.173)), ('A', ' 175 ', 'GLN', 0.10860186006263618, (35.248999999999995, 31.707000000000004, -5.009)), ('A', ' 192 ', 'THR', 0.20604824741076652, (51.94, 60.28999999999999, -22.034)), ('A', ' 196 ', 'GLN', 0.06660072270228738, (44.156000000000006, 51.416000000000004, -21.639)), ('A', ' 198 ', 'THR', 0.07496764834585143, (40.34599999999999, 46.44600000000001, -19.104)), ('A', ' 204 ', 'GLU', 0.010880596561479805, (37.527, 40.37, -9.634)), ('A', ' 211 ', 'THR', 0.028145406708975376, (39.33400000000002, 53.152, -2.180000000000001)), ('A', ' 215 ', 'GLU', 0.08415381989914704, (31.41899999999999, 57.531000000000006, -6.422)), ('A', ' 219 ', 'LYS', 0.1443597992149257, (34.71899999999998, 59.868, -10.938000000000004)), ('A', ' 221 ', 'VAL', 0.02439643996169878, (41.051, 57.673, -8.832)), ('A', ' 230 ', 'GLN', 0.17570185907318894, (50.52099999999999, 59.785999999999994, -12.964)), ('A', ' 233 ', 'LYS', 0.24357727379938418, (41.56, 54.77900000000001, -13.254)), ('A', ' 236 ', 'VAL', 0.05644696845053807, (33.41399999999999, 52.605000000000004, -17.421)), ('A', ' 251 ', 'GLN', 0.25588130777981877, (38.614000000000004, 57.295, 9.326)), ('A', ' 255 ', 'LYS', 0.006483745253217699, (26.236000000000004, 58.806, 4.919)), ('A', ' 260 ', 'THR', 0.008159601566148922, (24.269, 49.202, 1.808)), ('A', ' 266 ', 'THR', 0.09256719597601076, (39.43300000000001, 49.401, 15.186)), ('A', ' 270 ', 'GLN', 0.000578579022507542, (47.699, 41.95, 17.059)), ('A', ' 296 ', 'GLU', 0.10671332797403861, (26.058999999999997, 60.354000000000006, 11.9)), ('A', ' 307 ', 'LYS', 0.025846560381219054, (23.911000000000005, 47.553, -4.323)), ('A', ' 310 ', 'SER', 0.1049587575697418, (24.027, 47.789, -14.242)), ('A', ' 312 ', 'THR', 0.008159601566148922, (27.554999999999996, 52.61800000000001, -17.491)), ('B', '   5 ', 'THR', 0.008159601566148922, (67.154, 80.348, 2.328)), ('B', '  22 ', 'VAL', 0.03340616032048723, (64.868, 76.047, 0.405)), ('B', '  26 ', 'MET', 0.08708755924779109, (58.805, 76.777, 6.814)), ('B', '  45 ', 'ILE', 0.006753978046924895, (60.93999999999999, 70.521, 10.956)), ('B', '  49 ', 'ASN', 0.0, (72.227, 75.817, 9.424)), ('B', '  61 ', 'ASN', 0.13388662009184035, (55.684, 63.281, -6.076)), ('B', '  64 ', 'THR', 0.03983221924935238, (60.275, 62.827, -12.97)), ('B', '  71 ', 'GLU', 0.16740322851242426, (63.58899999999997, 52.32900000000001, -12.203)), ('B', '  76 ', 'THR', 0.008159601566148922, (55.182, 51.93800000000001, -8.381)), ('B', '  86 ', 'SER', 0.26852357663153553, (60.87299999999999, 53.783, 8.624)), ('B', '  95 ', 'LYS', 0.2832106011065979, (74.017, 43.577, 14.59)), ('B', '  98 ', 'GLN', 0.0, (79.24599999999998, 36.377, 10.38)), ('B', ' 105 ', 'ILE', 0.27464278923302676, (71.28599999999997, 38.8, 12.425)), ('B', ' 124 ', 'ILE', 0.001175865828482507, (71.04499999999997, 29.528000000000002, -3.165)), ('B', ' 125 ', 'GLU', 0.2912600320821195, (71.727, 30.960999999999995, -6.641)), ('B', ' 126 ', 'LEU', 0.21778180189386895, (69.56699999999998, 34.018, -7.232)), ('B', ' 133 ', 'LEU', 0.03687865483155646, (67.837, 45.295, -3.953)), ('B', ' 134 ', 'GLN', 0.28120792497920905, (70.792, 43.799, -5.769)), ('B', ' 166 ', 'VAL', 0.18759060246602935, (59.791, 32.831, 5.794)), ('B', ' 173 ', 'LEU', 0.041227408485851914, (61.454999999999984, 38.456, -2.959)), ('B', ' 175 ', 'GLN', 0.06236943791364578, (58.88499999999999, 38.042, -7.502)), ('B', ' 190 ', 'CYS', 0.1527749529135243, (44.07299999999999, 9.683, -12.205)), ('B', ' 191 ', 'LYS', 0.24530782751045563, (43.753999999999984, 6.077000000000001, -13.39)), ('B', ' 192 ', 'THR', 0.25977196200254843, (40.07199999999999, 6.558, -14.322)), ('B', ' 198 ', 'THR', 0.008159601566148922, (51.11399999999999, 21.076, -16.668)), ('B', ' 204 ', 'GLU', 0.05919257065166036, (55.80800000000001, 28.882000000000005, -9.215)), ('B', ' 211 ', 'THR', 0.053037411998957396, (55.51400000000001, 18.215, 1.352)), ('B', ' 219 ', 'LYS', 0.0, (58.34599999999997, 9.542, -6.586)), ('B', ' 221 ', 'VAL', 0.029404970700852573, (52.51100000000001, 12.343, -3.87)), ('B', ' 222 ', 'GLN', 0.05055707597401057, (48.821, 11.39, -3.604)), ('B', ' 223 ', 'ILE', 0.23741153502640383, (46.363, 14.271000000000003, -3.956)), ('B', ' 236 ', 'VAL', 0.051140031833398894, (58.16, 15.126, -14.666)), ('B', ' 251 ', 'GLN', 0.044980181522547395, (58.70000000000002, 16.798, 13.088)), ('B', ' 260 ', 'THR', 0.0074349344183968205, (71.131, 22.329, 1.252)), ('B', ' 270 ', 'GLN', 0.28232584511232617, (50.846000000000004, 34.246999999999986, 18.229)), ('B', ' 293 ', 'LYS', 0.0, (76.265, 21.527, 15.345)), ('B', ' 310 ', 'SER', 0.2869322736615477, (67.98399999999997, 20.111, -14.476))]
data['cbeta'] = [('A', '  16 ', 'ASN', ' ', 0.3710692474327938, (24.221, 10.239, 1.177)), ('A', '  19 ', 'THR', ' ', 0.3451838412771801, (22.360000000000007, 1.821, 8.027)), ('A', '  27 ', 'THR', ' ', 0.5041578551641298, (31.999, -3.055, 22.034)), ('A', '  55 ', 'THR', ' ', 0.33582709521917886, (22.783999999999992, 10.044, 11.172)), ('A', '  63 ', 'ASP', ' ', 0.2907571235746076, (36.091999999999985, 5.309, -4.849)), ('A', '  64 ', 'THR', ' ', 0.33501577688880063, (30.995000000000005, 5.03, -2.935)), ('A', '  75 ', 'THR', ' ', 0.3211166975817894, (37.278, 20.695, -1.419)), ('A', '  95 ', 'LYS', ' ', 0.2562635963563753, (24.047999999999988, 32.56399999999999, 21.843)), ('A', ' 134 ', 'GLN', ' ', 0.2797922264607413, (22.698999999999998, 26.086, -0.927)), ('A', ' 144 ', 'GLU', ' ', 0.2508599502673212, (19.865999999999993, 27.486000000000008, 13.834)), ('A', ' 162 ', 'GLU', ' ', 0.40395897939846287, (43.218999999999994, 31.60500000000001, 14.388)), ('A', ' 172 ', 'TYR', ' ', 0.2541278214122337, (37.44299999999999, 32.313, 1.021)), ('A', ' 180 ', 'ASP', ' ', 0.2853227551980641, (30.452, 33.231, -14.138000000000003)), ('A', ' 192 ', 'THR', ' ', 0.2996061662264932, (53.445, 60.418000000000006, -21.733)), ('A', ' 195 ', 'GLN', ' ', 0.2506547426462501, (43.006000000000014, 55.19499999999999, -23.317)), ('A', ' 226 ', 'THR', ' ', 0.34745783894031584, (52.43699999999999, 49.88, -16.064)), ('A', ' 229 ', 'LYS', ' ', 0.28198954870582355, (54.44499999999998, 58.943000000000005, -14.862)), ('A', ' 256 ', 'HIS', ' ', 0.3041284777994555, (21.504999999999995, 58.079, 5.531)), ('A', ' 260 ', 'THR', ' ', 0.387573404605741, (23.781, 48.097, 0.861)), ('A', ' 266 ', 'THR', ' ', 0.43957647731478605, (38.473, 50.43, 15.804)), ('A', ' 284 ', 'TYR', ' ', 0.25360994220581384, (21.902000000000005, 49.602, 12.383)), ('A', ' 302 ', 'THR', ' ', 0.31598785973872723, (38.57099999999997, 47.917, 6.741)), ('A', ' 312 ', 'THR', ' ', 0.37962581395510225, (27.404, 52.083, -18.916)), ('A', ' 316 ', 'LYS', ' ', 0.26895171810047985, (33.123999999999995, 62.30699999999999, -23.733)), ('B', '   4 ', 'ARG', ' ', 0.2924468329507247, (64.828, 84.308, 2.679)), ('B', '   5 ', 'THR', ' ', 0.25299690259588486, (66.52799999999998, 80.286, 0.918)), ('B', '   7 ', 'LYS', ' ', 0.28070308508128533, (71.58599999999998, 75.432, -1.922)), ('B', '   9 ', 'PHE', ' ', 0.3330492720207059, (70.696, 67.215, -3.139)), ('B', '  16 ', 'ASN', ' ', 0.2727302582586077, (68.87699999999998, 60.63, -9.678)), ('B', '  30 ', 'GLN', ' ', 0.26529038435095476, (55.45499999999999, 73.533, 4.876)), ('B', '  63 ', 'ASP', 'A', 0.43951314732064, (55.61999999999999, 62.785000000000004, -14.023000000000003)), ('B', '  63 ', 'ASP', 'B', 0.43660288589487456, (55.53299999999999, 62.656, -13.902)), ('B', '  64 ', 'THR', ' ', 0.3821313569514979, (61.101, 64.042, -13.447)), ('B', '  76 ', 'THR', ' ', 0.2616195791333418, (54.51299999999999, 51.602, -9.707)), ('B', ' 124 ', 'ILE', ' ', 0.37776841505003755, (69.68299999999999, 29.917999999999996, -2.606)), ('B', ' 126 ', 'LEU', ' ', 0.25983094586771693, (68.898, 33.885, -5.862)), ('B', ' 144 ', 'GLU', ' ', 0.30199213422738214, (77.121, 46.27, 5.432)), ('B', ' 163 ', 'LEU', ' ', 0.3041838756798876, (54.71000000000001, 37.948, 13.493)), ('B', ' 172 ', 'TYR', ' ', 0.29391653890009134, (57.724999999999994, 39.203, -1.336)), ('B', ' 192 ', 'THR', ' ', 0.32530893630174584, (38.85199999999999, 6.1110000000000015, -13.5)), ('B', ' 226 ', 'THR', ' ', 0.27915063522184935, (37.739999999999995, 16.579000000000008, -9.152)), ('B', ' 260 ', 'THR', ' ', 0.3542838405269077, (71.39199999999997, 23.09, -0.063)), ('B', ' 302 ', 'THR', ' ', 0.2878591566869842, (57.949999999999974, 25.324000000000005, 8.293)), ('B', ' 309 ', 'ASN', ' ', 0.2776023618444038, (71.269, 20.937, -12.483))]
data['probe'] = [(' A 139  ARG  CD ', ' A 139  ARG  CG ', -1.235, (19.997, 23.962, 7.455)), (' A 229  LYS  HB3', ' B  63 BASP  OD1', -1.146, (54.04, 60.805, -13.952)), (' A 284  TYR  CE2', ' A 293  LYS  HE3', -1.042, (17.761, 50.277, 13.835)), (' A 260  THR HG22', ' A 407  EDO  H11', -0.997, (23.447, 49.342, -2.045)), (' B  49  ASN  H  ', ' B  49  ASN  ND2', -0.922, (71.479, 74.763, 10.752)), (' A 112  CYS  HA ', ' A 405  EDO  H21', -0.88, (32.286, 39.239, 15.171)), (' A 229  LYS  CB ', ' B  63 BASP  OD1', -0.845, (54.921, 59.629, -14.243)), (' B  49  ASN  HA ', ' B 581  HOH  O  ', -0.815, (71.589, 77.401, 8.053)), (' A  10  THR HG22', ' A  18  HIS  O  ', -0.799, (26.546, 3.841, 6.319)), (' B  24  MET  HA ', ' B  47  PRO  HG2', -0.794, (65.18, 76.646, 5.822)), (' A 107  TRP  HD1', ' A 405  EDO  H11', -0.783, (32.771, 39.317, 18.335)), (' A 229  LYS  HB3', ' B  63 BASP  CG ', -0.774, (54.033, 61.006, -14.681)), (' A  48  HIS  O  ', ' A  50  SER  N  ', -0.745, (23.384, 4.22, 23.173)), (' A 230  GLN  HA ', ' A 230  GLN HE21', -0.738, (50.821, 59.656, -11.758)), (' A 107  TRP  CD1', ' A 405  EDO  H11', -0.736, (33.212, 39.172, 18.897)), (' A 297  TYR  HE2', ' A 541  HOH  O  ', -0.733, (30.828, 52.479, 13.895)), (' B  49  ASN  H  ', ' B  49  ASN HD22', -0.695, (71.838, 74.433, 11.345)), (' A 116  THR HG21', ' A 263  SER  HB3', -0.695, (32.322, 43.748, 8.6)), (' A 172  TYR  O  ', ' A 175  GLN  HB2', -0.689, (35.686, 31.537, -2.857)), (' B 141 AARG  CB ', ' B 141 AARG HH11', -0.681, (77.226, 39.196, -1.361)), (' A 284  TYR  HD2', ' A 291  LEU HD11', -0.671, (20.477, 48.707, 14.292)), (' B 172  TYR  O  ', ' B 175  GLN  HB2', -0.663, (58.798, 38.887, -5.448)), (' A  64  THR  O  ', ' A  67  VAL HG12', -0.663, (31.026, 8.635, -3.477)), (' B  24  MET  HA ', ' B  47  PRO  CG ', -0.657, (64.79, 76.324, 5.553)), (' A   9  PHE  CB ', ' A  19  THR  CG2', -0.656, (22.442, 4.562, 8.261)), (' A   9  PHE  CB ', ' A  19  THR HG23', -0.656, (21.893, 4.179, 8.04)), (' B 137  TYR  CZ ', ' B 141 BARG  HD3', -0.644, (73.803, 36.801, -1.875)), (' B 141 AARG  HB3', ' B 141 AARG  NH1', -0.636, (77.57, 38.188, -0.611)), (' A  78  PRO  HD3', ' B 224  PRO  HG3', -0.635, (41.909, 15.576, -0.171)), (' A 139  ARG  HB3', ' A 139  ARG  HE ', -0.629, (19.8, 25.203, 9.839)), (' A 209  MET  HE2', ' A 246  SER  HB2', -0.619, (40.172, 46.12, -0.236)), (' A  70  PHE  HB2', ' A  76  THR HG23', -0.616, (35.326, 15.348, -4.268)), (' B 141 AARG  HB2', ' B 141 AARG HH11', -0.613, (76.953, 39.41, -0.739)), (' B 137  TYR  OH ', ' B 141 BARG  HD3', -0.613, (73.273, 36.159, -1.686)), (' A 167  ARG  NH1', ' A 209  MET  HE3', -0.607, (42.584, 44.309, 0.448)), (' B 141 AARG  NH1', ' B 501  HOH  O  ', -0.606, (78.809, 40.245, -1.365)), (' B 141 AARG  CB ', ' B 141 AARG  NH1', -0.602, (77.458, 38.672, -1.257)), (' B 260  THR HG22', ' B 410  SO4  O2 ', -0.6, (71.158, 21.124, -1.857)), (' A  21  VAL HG21', ' A 516  HOH  O  ', -0.599, (23.387, 3.214, 12.073)), (' A 230  GLN  HA ', ' A 230  GLN  NE2', -0.599, (50.538, 59.956, -11.117)), (' B 209  MET  HE2', ' B 246  SER  HB2', -0.59, (55.032, 25.342, 1.423)), (' A 227  CYS  SG ', ' A 229  LYS  HE2', -0.584, (54.551, 57.426, -18.057)), (' B  34  PRO  HG2', ' B  59  LEU  CD1', -0.584, (55.518, 61.74, 1.854)), (' B  69  ALA  CB ', ' B 405  EDO  H22', -0.581, (59.845, 56.171, -7.293)), (' B  34  PRO  HA ', ' B  43  THR HG23', -0.578, (57.599, 65.199, 4.741)), (' A 209  MET  HE2', ' A 246  SER  CB ', -0.577, (39.536, 46.401, 0.07)), (' A 284  TYR  CE2', ' A 293  LYS  CE ', -0.577, (17.547, 50.865, 14.248)), (' A 284  TYR  HE2', ' A 293  LYS  HE3', -0.568, (17.627, 49.297, 14.61)), (' A 307  LYS  HB3', ' A 407  EDO  H12', -0.558, (22.767, 49.977, -3.661)), (' A   9  PHE  CA ', ' A  19  THR HG22', -0.556, (22.799, 4.513, 9.211)), (' A 297  TYR  C  ', ' A 297  TYR  CD1', -0.552, (30.224, 57.166, 10.418)), (' B 179  LEU  O  ', ' B 182  CYS  HB2', -0.549, (61.767, 30.972, -13.443)), (' B  69  ALA  HB3', ' B 405  EDO  H22', -0.549, (59.707, 56.391, -7.283)), (' A 179  LEU  O  ', ' A 182  CYS  HB2', -0.54, (30.765, 37.581, -12.049)), (' A   9  PHE  CB ', ' A  19  THR HG22', -0.533, (22.582, 4.035, 9.035)), (' B 184  ARG  HD3', ' B 186  LEU HD21', -0.533, (55.753, 20.619, -10.435)), (' A 116  THR  CG2', ' A 263  SER  HB3', -0.532, (32.024, 43.747, 8.367)), (' A 294  SER  HB2', ' A 409  SO4  O1 ', -0.529, (23.906, 59.437, 15.632)), (' B 297  TYR  C  ', ' B 297  TYR  CD1', -0.524, (67.287, 17.029, 12.508)), (' B 209  MET  HE2', ' B 246  SER  CB ', -0.52, (55.812, 25.595, 1.79)), (' B  72  TYR  CE2', ' B 132  ALA  HB2', -0.518, (67.724, 51.102, -5.353)), (' B 264  GLU  HB3', ' B 301  ILE HD13', -0.518, (63.304, 22.819, 11.07)), (' A 264  GLU  HB3', ' A 301  ILE HD13', -0.515, (33.928, 51.214, 9.806)), (' B   5  THR  HB ', ' B  22  VAL  O  ', -0.515, (65.745, 78.328, 1.25)), (' A 284  TYR  CZ ', ' A 293  LYS  HE3', -0.51, (17.746, 50.716, 13.855)), (' A 281  GLU  OE2', ' A 284  TYR  OH ', -0.505, (15.719, 50.88, 12.083)), (' B 122  GLN  HA ', ' B 141 BARG HH11', -0.504, (73.83, 34.094, -1.199)), (' A 229  LYS  CA ', ' B  63 BASP  OD1', -0.504, (54.342, 59.233, -13.546)), (' A  67  VAL  CG1', ' A  68  GLU  N  ', -0.503, (30.406, 10.972, -4.214)), (' A 112  CYS  HB3', ' A 405  EDO  H12', -0.499, (33.603, 40.636, 16.733)), (' B  79  SER  O  ', ' B  83  ARG  HG3', -0.498, (55.574, 53.089, 2.186)), (' B  34  PRO  CG ', ' B  59  LEU HD12', -0.498, (56.332, 62.292, 1.898)), (' B  49  ASN  N  ', ' B  49  ASN  ND2', -0.497, (71.345, 75.477, 10.887)), (' A 292  THR  HA ', ' A 406  EDO  H12', -0.497, (21.961, 51.653, 19.052)), (' A 229  LYS  HA ', ' B  63 BASP  OD1', -0.496, (54.351, 59.221, -13.288)), (' A 139  ARG  CG ', ' A 139  ARG  NE ', -0.494, (19.793, 24.845, 9.154)), (' A 213  SER  HB3', ' A 216  GLN  HB2', -0.485, (35.069, 57.813, -3.824)), (' B 213  SER  HB3', ' B 216  GLN  HB2', -0.481, (59.169, 13.077, -0.072)), (' A 264  GLU  OE1', ' A 297  TYR  OH ', -0.478, (33.221, 52.309, 12.648)), (' B 116  THR HG21', ' B 263  SER  HB3', -0.474, (64.477, 29.008, 7.841)), (' A 269  TYR  HB2', ' A 575  HOH  O  ', -0.473, (50.52, 44.1, 14.276)), (' B 148  PHE  CE2', ' B 152  ILE HD11', -0.471, (67.267, 39.952, 2.088)), (' A 203  VAL  CG1', ' A 207  MET  HE2', -0.47, (36.908, 38.708, -5.665)), (' B 264  GLU  OE1', ' B 297  TYR  OH ', -0.465, (64.081, 22.443, 14.309)), (' A  79  SER  O  ', ' A  83  ARG  HG3', -0.465, (40.209, 19.97, 7.923)), (' B  23  ASP  C  ', ' B  23  ASP  OD1', -0.465, (62.339, 79.415, 3.836)), (' B  24  MET  O  ', ' B  47  PRO  HD2', -0.465, (63.065, 76.445, 7.493)), (' A  38  ASP  HB2', ' A 567  HOH  O  ', -0.464, (24.05, 14.261, 16.511)), (' B 166  VAL  O  ', ' B 170  MET  HG2', -0.464, (60.641, 32.886, 2.756)), (' B 128  PHE  CD1', ' B 133  LEU HD13', -0.464, (66.016, 41.298, -4.657)), (' A 224  PRO  CG ', ' B  76  THR HG23', -0.463, (52.178, 52.844, -9.135)), (' A 284  TYR  CD2', ' A 291  LEU HD11', -0.461, (20.468, 49.021, 14.434)), (' A 184  ARG  HD3', ' A 186  LEU HD21', -0.455, (36.86, 48.25, -12.498)), (' B 167  ARG  HA ', ' B 244  MET  HE1', -0.454, (59.446, 30.168, 1.664)), (' B 174  PHE  HB3', ' B 203  VAL HG22', -0.453, (60.228, 33.744, -7.539)), (' B  34  PRO  HD2', ' B  59  LEU HD12', -0.448, (56.131, 62.522, 1.222)), (' A 264  GLU  HB3', ' A 301  ILE  CD1', -0.444, (33.616, 51.07, 9.672)), (' B  63 BASP  O  ', ' B  67  VAL HG23', -0.443, (58.508, 60.263, -13.542)), (' A 264  GLU  CB ', ' A 301  ILE HD13', -0.443, (34.313, 50.827, 10.19)), (' A 174  PHE  HB3', ' A 203  VAL HG22', -0.442, (33.969, 35.949, -5.875)), (' A 139  ARG  HB3', ' A 139  ARG  NE ', -0.442, (20.058, 25.175, 9.838)), (' A  42  VAL  O  ', ' A  45  ILE HG22', -0.438, (33.755, 7.797, 20.226)), (' B 167  ARG  HD2', ' B 209  MET  CE ', -0.436, (55.07, 27.069, 2.073)), (' A 268  ASN  ND2', ' A 270  GLN  H  ', -0.434, (48.153, 44.737, 16.842)), (' A 137  TYR  C  ', ' A 137  TYR  CD2', -0.434, (21.574, 30.569, 3.99)), (' A   9  PHE  HA ', ' A  19  THR HG22', -0.434, (22.927, 3.808, 9.238)), (' A 309  ASN  HB3', ' A 310  SER  H  ', -0.434, (21.626, 48.518, -12.83)), (' A 280  LYS  HB3', ' A 281  GLU  H  ', -0.433, (16.904, 51.421, 8.769)), (' B 267  GLY  HA3', ' B 272  GLY  HA2', -0.433, (56.723, 29.805, 18.43)), (' A  72  TYR  CE2', ' A 132  ALA  HB2', -0.432, (27.273, 20.418, 1.982)), (' B  69  ALA  HB1', ' B 405  EDO  H22', -0.43, (60.013, 55.646, -6.811)), (' B 133  LEU  HA ', ' B 133  LEU HD23', -0.43, (67.573, 45.376, -2.231)), (' B 187  ASN  HB2', ' B 236  VAL HG11', -0.427, (54.304, 14.838, -15.986)), (' B 264  GLU  CB ', ' B 301  ILE HD13', -0.426, (62.954, 23.154, 11.663)), (' B  34  PRO  CG ', ' B  59  LEU  CD1', -0.424, (55.977, 62.067, 2.44)), (' A 301  ILE HG22', ' A 302  THR  N  ', -0.422, (35.773, 50.367, 5.762)), (' B 264  GLU  HB3', ' B 301  ILE  CD1', -0.422, (63.552, 22.746, 11.067)), (' B  34  PRO  HG2', ' B  59  LEU HD12', -0.422, (55.942, 61.913, 1.989)), (' B  63 AASP  O  ', ' B  67  VAL HG23', -0.421, (58.672, 59.977, -13.813)), (' B  24  MET  HE1', ' B 581  HOH  O  ', -0.42, (70.554, 78.295, 8.432)), (' A 244  MET  HE3', ' A 305  PHE  CZ ', -0.418, (33.377, 43.199, 1.83)), (' A 269  TYR  HA ', ' A 401  PRL  H8 ', -0.417, (46.345, 43.447, 12.785)), (' B  34  PRO  HA ', ' B  43  THR  CG2', -0.417, (57.31, 65.075, 5.551)), (' A 224  PRO  HB2', ' B  76  THR HG23', -0.416, (52.376, 53.241, -9.873)), (' A 312  THR HG23', ' A 547  HOH  O  ', -0.415, (24.503, 51.305, -18.207)), (' A  36  TYR  CE2', ' A  85  MET  HB3', -0.413, (34.372, 16.257, 13.917)), (' A  40  ALA  O  ', ' A  42  VAL HG13', -0.412, (31.613, 12.788, 18.363)), (' B  24  MET  HG2', ' B  47  PRO  HG2', -0.412, (65.95, 76.891, 6.068)), (' B  98  GLN  NE2', ' B 506  HOH  O  ', -0.411, (79.268, 36.449, 5.255)), (' B 190  CYS  O  ', ' B 192  THR  N  ', -0.411, (41.888, 7.239, -12.887)), (' A 186  LEU HD13', ' A 233  LYS  HE3', -0.41, (41.022, 49.166, -12.543)), (' A 224  PRO  HG2', ' B  76  THR HG23', -0.409, (51.432, 52.56, -9.165)), (' A 284  TYR  CZ ', ' A 293  LYS  CE ', -0.409, (17.525, 50.913, 14.214)), (' B 102  LEU HD22', ' B 122  GLN  HB2', -0.408, (74.548, 32.79, 3.162)), (' A  22  VAL HG11', ' A  26  MET  HA ', -0.408, (30.08, -3.777, 16.063)), (' B 301  ILE HG22', ' B 302  THR  N  ', -0.407, (60.67, 22.59, 7.665)), (' B 307  LYS  HE3', ' B 557  HOH  O  ', -0.406, (73.687, 23.51, -9.787)), (' B 260  THR HG23', ' B 306  TYR  HA ', -0.405, (68.818, 21.936, -1.574)), (' B 309  ASN  HB3', ' B 310  SER  H  ', -0.404, (70.666, 19.711, -13.616)), (' A  39  GLY  O  ', ' A  89  ASN  HB2', -0.403, (32.137, 18.673, 17.35)), (' A  72  TYR  CZ ', ' A 132  ALA  HA ', -0.402, (25.499, 20.886, 2.261)), (' A 139  ARG  CB ', ' A 139  ARG  CD ', -0.402, (19.949, 25.313, 8.852)), (' A  76  THR  HB ', ' B 224  PRO  HB2', -0.4, (39.775, 14.861, -3.117)), (' A 209  MET  HE2', ' A 246  SER  HB3', -0.4, (39.64, 46.122, 0.796))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
