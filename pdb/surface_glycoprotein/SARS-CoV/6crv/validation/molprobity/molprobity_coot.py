# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 617 ', 'PRO', None, (141.523, 184.482, 153.14300000000003)), ('B', ' 617 ', 'PRO', None, (193.45199999999994, 175.21099999999998, 153.04200000000006)), ('C', ' 617 ', 'PRO', None, (159.488, 134.769, 153.045))]
data['rota'] = [('A', ' 266 ', 'TYR', 0.13601728225176865, (127.75199999999998, 159.886, 156.436)), ('A', '1022 ', 'VAL', 0.015451260714307026, (157.395, 170.31999999999994, 199.90900000000005)), ('B', ' 266 ', 'TYR', 0.13543524497697945, (178.949, 199.35799999999995, 156.508)), ('B', '1022 ', 'VAL', 0.016287280028918338, (173.569, 168.29299999999998, 199.907)), ('C', ' 266 ', 'TYR', 0.13212144602507506, (187.65199999999993, 135.254, 156.511)), ('C', '1022 ', 'VAL', 0.015237826530498322, (163.443, 155.49099999999996, 199.891))]
data['cbeta'] = []
data['probe'] = [(' B 306  ARG  NH2', ' C 727  ASP  OD1', -0.75, (190.302, 164.948, 149.313)), (' B 999  GLU  OE1', ' C1001  ARG  NH2', -0.74, (169.414, 168.566, 176.101)), (' A 306  ARG  NH2', ' B 727  ASP  OD1', -0.732, (151.982, 186.755, 149.52)), (' B 685  SER  O  ', ' C 772  LYS  HG3', -0.697, (196.528, 164.992, 199.553)), (' B1089  ARG  NH1', ' C 878  ILE HD11', -0.668, (180.99, 161.728, 213.537)), (' A 999  GLU  OE1', ' B1001  ARG  NH2', -0.663, (159.144, 166.533, 175.987)), (' B 152  ILE HD12', ' B 234  ILE HD13', -0.627, (198.069, 209.473, 126.045)), (' C 152  ILE HD12', ' C 234  ILE HD13', -0.626, (187.347, 113.522, 125.695)), (' C 189  ASN HD21', ' C 228  ILE  HB ', -0.624, (177.741, 127.429, 129.836)), (' A 152  ILE HD12', ' A 234  ILE HD13', -0.622, (109.195, 171.196, 125.686)), (' A 189  ASN HD21', ' A 228  ILE  HB ', -0.62, (125.718, 172.504, 129.376)), (' B1029  TYR  HE1', ' C 868  TRP  HE1', -0.619, (175.96, 169.787, 205.505)), (' B 189  ASN HD21', ' B 228  ILE  HB ', -0.611, (190.716, 195.021, 129.37)), (' B1021  ARG  HD2', ' C1013  GLU  OE2', -0.609, (169.105, 166.145, 196.508)), (' A 896  ASN  ND2', ' C1103  PHE  HE2', -0.604, (149.624, 164.213, 223.427)), (' B1021  ARG  HD2', ' C1013  GLU  CD ', -0.604, (168.954, 165.628, 196.279)), (' B1089  ARG  NH1', ' C 878  ILE  CD1', -0.602, (181.397, 161.961, 213.129)), (' B  54  LEU HD13', ' B 291  LYS  HE2', -0.601, (179.4, 186.686, 156.063)), (' C  54  LEU HD13', ' C 291  LYS  HE2', -0.6, (176.379, 141.177, 156.134)), (' A  54  LEU HD13', ' A 291  LYS  HE2', -0.6, (137.939, 166.56, 155.838)), (' B1029  TYR  HE1', ' C 868  TRP  NE1', -0.596, (176.068, 169.575, 205.77)), (' B 206  VAL HG23', ' B 207  ARG  HG3', -0.588, (210.264, 211.101, 150.029)), (' C 206  VAL HG23', ' C 207  ARG  HG3', -0.588, (182.149, 102.061, 150.005)), (' A1001  ARG  NH2', ' C 999  GLU  OE1', -0.585, (165.955, 158.594, 176.209)), (' A 206  VAL HG23', ' A 207  ARG  HG3', -0.585, (102.057, 181.901, 149.831)), (' B  38  ARG  NH1', ' B 184  GLU  OE2', -0.584, (195.273, 205.616, 149.389)), (' C 955  ILE HG13', ' C 966  LEU HD11', -0.578, (174.768, 157.776, 133.948)), (' A  38  ARG  NH1', ' A 184  GLU  OE2', -0.574, (114.546, 171.067, 149.315)), (' B 693  THR  HB ', ' C 877  GLN HE22', -0.571, (192.865, 162.83, 214.977)), (' B 582  SER  OG ', ' B 599  GLN  NE2', -0.57, (189.862, 171.845, 165.584)), (' A 955  ILE HG13', ' A 966  LEU HD11', -0.57, (153.871, 159.78, 134.009)), (' C  38  ARG  NH1', ' C 184  GLU  OE2', -0.568, (184.863, 118.416, 148.866)), (' A 582  SER  OG ', ' A 599  GLN  NE2', -0.566, (145.935, 182.436, 165.586)), (' A 868  TRP  NE1', ' C1029  TYR  HE1', -0.565, (162.896, 152.55, 205.241)), (' B 955  ILE HG13', ' B 966  LEU HD11', -0.565, (166.313, 177.047, 134.167)), (' A 285  GLU  OE1', ' A 619  TRP  NE1', -0.561, (137.235, 181.603, 156.81)), (' C 582  SER  OG ', ' C 599  GLN  NE2', -0.561, (158.566, 139.836, 165.426)), (' C  96  ASN  O  ', ' C  99  ARG  NE ', -0.55, (192.123, 109.556, 134.073)), (' B 993  GLN  OE1', ' B 996  ARG  NH1', -0.547, (166.237, 175.884, 167.427)), (' A 993  GLN  OE1', ' A 996  ARG  NH1', -0.547, (155.059, 160.06, 167.209)), (' C 285  GLU  OE1', ' C 619  TRP  NE1', -0.54, (164.12, 132.533, 156.64)), (' B 600  ASP  O  ', ' C 835  GLN  NE2', -0.54, (194.135, 163.272, 160.316)), (' B  96  ASN  O  ', ' B  99  ARG  NE ', -0.54, (198.795, 216.024, 134.168)), (' C 993  GLN  OE1', ' C 996  ARG  NH1', -0.539, (173.752, 158.526, 167.136)), (' B 586  PRO  HD3', ' B 674  ILE HD11', -0.522, (196.456, 183.355, 171.4)), (' A 586  PRO  HD3', ' A 674  ILE HD11', -0.522, (133.047, 182.463, 171.563)), (' B 100  GLY  HA3', ' B 117  ILE HG22', -0.521, (195.539, 210.068, 128.864)), (' C 100  GLY  HA3', ' C 117  ILE HG22', -0.521, (188.323, 115.265, 129.272)), (' A 100  GLY  HA3', ' A 117  ILE HG22', -0.518, (110.266, 169.235, 128.823)), (' A 727  ASP  OD1', ' C 306  ARG  NH2', -0.517, (151.981, 142.848, 149.519)), (' B 302  THR  OG1', ' B 303  SER  N  ', -0.515, (187.903, 177.143, 159.264)), (' C 586  PRO  HD3', ' C 674  ILE HD11', -0.512, (165.339, 128.473, 171.561)), (' A1013  GLU  HA ', ' C1022  VAL HG13', -0.507, (160.812, 156.641, 198.955)), (' B  23  ASP  HB2', ' B 245  TRP  HE1', -0.506, (216.16, 212.745, 124.306)), (' A 868  TRP  HE1', ' C1029  TYR  HE1', -0.506, (163.159, 152.193, 205.082)), (' A  23  ASP  HB2', ' A 245  TRP  HE1', -0.504, (97.354, 185.811, 124.461)), (' A  96  ASN  O  ', ' A  99  ARG  NE ', -0.503, (103.334, 168.979, 134.135)), (' C  23  ASP  HB2', ' C 245  TRP  HE1', -0.501, (180.777, 96.515, 124.793)), (' A  71  THR HG21', ' A  97  VAL HG11', -0.5, (102.623, 176.969, 134.957)), (' B  71  THR HG21', ' B  97  VAL HG11', -0.499, (205.668, 212.875, 134.971)), (' B 285  GLU  OE1', ' B 619  TRP  NE1', -0.498, (193.091, 180.367, 156.687)), (' A 539  THR HG23', ' A 572  ASP  HB2', -0.498, (158.765, 202.892, 152.736)), (' B 539  THR HG23', ' B 572  ASP  HB2', -0.497, (201.218, 151.427, 152.478)), (' C 302  THR  OG1', ' C 303  SER  N  ', -0.496, (164.171, 138.855, 159.117)), (' B 689  TYR  CZ ', ' C 779  PHE  HD1', -0.494, (190.718, 155.131, 209.6)), (' C 745  LEU HD22', ' C 990  VAL HG21', -0.493, (175.076, 166.568, 160.347)), (' C  71  THR HG21', ' C  97  VAL HG11', -0.492, (185.668, 104.963, 135.109)), (' A 745  LEU HD22', ' A 990  VAL HG21', -0.488, (161.161, 154.812, 160.302)), (' B1023  ASP  HB2', ' C1012  SER  HB2', -0.484, (175.62, 168.047, 195.879)), (' A 209  LEU HD12', ' A 210  PRO  HD2', -0.482, (111.632, 175.464, 148.791)), (' B1103  PHE  HE2', ' C 896  ASN  ND2', -0.482, (172.169, 152.11, 223.846)), (' A 544  ARG  NE ', ' B1302  NAG  O6 ', -0.481, (172.254, 212.774, 156.377)), (' C 539  THR HG23', ' C 572  ASP  HB2', -0.48, (135.168, 139.971, 152.646)), (' B 745  LEU HD22', ' B 990  VAL HG21', -0.479, (158.106, 172.399, 160.086)), (' A 600  ASP  O  ', ' B 835  GLN  NE2', -0.474, (151.281, 190.946, 160.826)), (' B 715  LYS  HD2', ' B 753  ALA  HB1', -0.473, (154.637, 180.36, 171.593)), (' A1012  SER  HA ', ' A1016  LEU HD12', -0.473, (158.579, 153.076, 196.24)), (' A 715  LYS  HD2', ' A 753  ALA  HB1', -0.472, (156.394, 147.762, 171.624)), (' B 209  LEU HD12', ' B 210  PRO  HD2', -0.47, (200.224, 205.712, 148.696)), (' A 302  THR  OG1', ' A 303  SER  N  ', -0.47, (142.71, 178.217, 159.148)), (' C1030  HIS  HE1', ' C1033  SER  HB2', -0.468, (175.488, 155.368, 199.47)), (' C 715  LYS  HD2', ' C 753  ALA  HB1', -0.467, (183.291, 166.239, 171.399)), (' C 209  LEU HD12', ' C 210  PRO  HD2', -0.464, (182.865, 113.358, 148.878)), (' C 126  ARG  HG2', ' C 162  GLU  HG3', -0.463, (193.616, 124.33, 121.753)), (' A 779  PHE  HD1', ' C 689  TYR  CZ ', -0.463, (143.823, 146.913, 209.805)), (' A 126  ARG  HG2', ' A 162  GLU  HG3', -0.463, (115.324, 160.873, 121.538)), (' C 716  THR HG22', ' C 842  VAL HG22', -0.462, (183.486, 159.275, 167.14)), (' B1030  HIS  HE1', ' B1033  SER  HB2', -0.462, (167.688, 178.289, 199.609)), (' C 591  SER  OG ', ' C 592  SER  N  ', -0.462, (169.629, 124.035, 170.4)), (' C1012  SER  HA ', ' C1016  LEU HD12', -0.461, (178.059, 165.643, 196.348)), (' A 716  THR HG22', ' A 842  VAL HG22', -0.461, (150.777, 151.782, 166.892)), (' A1030  HIS  HE1', ' A1033  SER  HB2', -0.46, (151.421, 160.048, 199.216)), (' B 591  SER  OG ', ' B 592  SER  N  ', -0.459, (197.366, 189.329, 170.038)), (' A1012  SER  HB2', ' C1023  ASP  HB2', -0.459, (161.765, 153.895, 195.802)), (' A1021  ARG  HD2', ' B1013  GLU  OE2', -0.458, (161.948, 167.3, 196.596)), (' C 115  ILE HD11', ' C 132  LEU HD21', -0.458, (184.06, 118.171, 121.627)), (' C 139  ALA  HB3', ' C 149  HIS  HB2', -0.457, (191.614, 104.291, 124.456)), (' A 772  LYS  HG3', ' C 685  SER  O  ', -0.456, (148.553, 136.719, 199.366)), (' B 115  ILE HD11', ' B 132  LEU HD21', -0.456, (195.086, 204.493, 121.958)), (' C  61  PRO  HG3', ' C 258  LYS  HD2', -0.455, (170.099, 125.448, 145.998)), (' B 126  ARG  HG2', ' B 162  GLU  HG3', -0.455, (185.36, 209.878, 121.724)), (' A 591  SER  OG ', ' A 592  SER  N  ', -0.454, (127.202, 180.769, 170.074)), (' A 685  SER  O  ', ' B 772  LYS  HG3', -0.454, (148.574, 192.304, 199.744)), (' A 515  LEU  HB3', ' A 516  SER  H  ', -0.453, (153.362, 204.328, 130.59)), (' B1012  SER  HA ', ' B1016  LEU HD12', -0.452, (157.537, 176.018, 196.368)), (' A 139  ALA  HB3', ' A 149  HIS  HB2', -0.449, (98.945, 172.262, 124.39)), (' A 984  GLN  OE1', ' B 984  GLN  NE2', -0.448, (162.866, 164.613, 150.962)), (' B 515  LEU  HB3', ' B 516  SER  H  ', -0.448, (204.643, 155.221, 130.369)), (' A 115  ILE HD11', ' A 132  LEU HD21', -0.447, (115.15, 171.735, 121.505)), (' A  26  GLN  OE1', ' A  75  THR  OG1', -0.446, (102.848, 187.707, 135.66)), (' B 139  ALA  HB3', ' B 149  HIS  HB2', -0.445, (203.832, 218.248, 124.376)), (' B  61  PRO  HG3', ' B 258  LYS  HD2', -0.444, (196.269, 189.512, 146.133)), (' C 718  VAL HG11', ' C 986  LEU HD11', -0.444, (179.285, 163.404, 158.012)), (' A 718  VAL HG11', ' A 986  LEU HD11', -0.443, (156.576, 153.259, 157.897)), (' B 716  THR HG22', ' B 842  VAL HG22', -0.443, (160.38, 183.818, 166.974)), (' B  26  GLN  OE1', ' B  75  THR  OG1', -0.442, (215.344, 207.234, 135.586)), (' A  61  PRO  HG3', ' A 258  LYS  HD2', -0.44, (128.057, 180.182, 146.053)), (' B  21  THR  HA ', ' B 135  ASN HD22', -0.437, (209.014, 209.405, 122.683)), (' B 556  SER  OG ', ' B 557  ASP  N  ', -0.437, (183.838, 150.206, 152.716)), (' B 718  VAL HG11', ' B 986  LEU HD11', -0.437, (158.813, 177.594, 157.932)), (' C 642  VAL HG12', ' C 644  THR HG22', -0.436, (153.858, 125.056, 182.915)), (' C  26  GLN  OE1', ' C  75  THR  OG1', -0.436, (176.284, 99.753, 135.666)), (' C 556  SER  OG ', ' C 557  ASP  N  ', -0.436, (142.611, 155.656, 152.749)), (' C 707  GLU  OE2', ' C1010  LYS  NZ ', -0.436, (170.174, 155.16, 190.94)), (' C 239  SER  HB2', ' C 244  ILE HG22', -0.436, (189.073, 95.864, 127.195)), (' B 984  GLN  OE1', ' C 984  GLN  NE2', -0.435, (165.955, 166.318, 150.918)), (' B 642  VAL HG12', ' B 644  THR HG22', -0.434, (204.66, 175.135, 182.883)), (' B1070  TYR  HD2', ' B1119  VAL HG21', -0.431, (178.668, 158.888, 232.199)), (' C  21  THR  HA ', ' C 135  ASN HD22', -0.431, (181.358, 104.09, 122.696)), (' C1070  TYR  HD2', ' C1119  VAL HG21', -0.43, (152.673, 156.235, 232.196)), (' A 642  VAL HG12', ' A 644  THR HG22', -0.429, (135.989, 193.977, 183.037)), (' B 190  LYS  HD3', ' B 195  TYR  HE2', -0.428, (181.748, 194.3, 136.454)), (' B 314  VAL HG22', ' B 528  ASN  HB3', -0.427, (198.42, 156.338, 136.214)), (' A 239  SER  HB2', ' A 244  ILE HG22', -0.426, (92.871, 178.774, 126.818)), (' A1029  TYR  HE1', ' B 868  TRP  HE1', -0.426, (154.914, 172.133, 205.666)), (' A  21  THR  HA ', ' A 135  ASN HD22', -0.426, (104.072, 181.178, 122.727)), (' A 314  VAL HG22', ' A 528  ASN  HB3', -0.425, (155.748, 198.14, 136.71)), (' A 556  SER  OG ', ' A 557  ASP  N  ', -0.425, (168.032, 188.593, 152.922)), (' A1010  LYS  O  ', ' A1014  CYS  HB3', -0.425, (155.304, 158.694, 195.837)), (' A1070  TYR  HD2', ' A1119  VAL HG21', -0.424, (163.064, 179.269, 232.246)), (' A  99  ARG HH22', ' A 172  VAL HG12', -0.423, (100.455, 166.862, 133.343)), (' B 115  ILE HG21', ' B 152  ILE HG21', -0.423, (195.219, 209.049, 124.152)), (' C  99  ARG HH22', ' C 172  VAL HG12', -0.422, (195.894, 108.301, 133.21)), (' C  48  ARG  HB2', ' C 266  TYR  CD2', -0.421, (187.924, 138.7, 152.759)), (' A 190  LYS  HD3', ' A 195  TYR  HE2', -0.42, (131.175, 165.049, 136.38)), (' B 239  SER  HB2', ' B 244  ILE HG22', -0.42, (212.437, 220.441, 126.758)), (' B  99  ARG HH22', ' B 172  VAL HG12', -0.42, (198.161, 219.988, 133.201)), (' B  48  ARG  HB2', ' B 266  TYR  CD2', -0.419, (176.194, 198.081, 152.774)), (' C1010  LYS  O  ', ' C1014  CYS  HB3', -0.418, (174.784, 159.587, 195.515)), (' C 314  VAL HG22', ' C 528  ASN  HB3', -0.417, (140.727, 139.935, 136.144)), (' A  48  ARG  HB2', ' A 266  TYR  CD2', -0.416, (130.171, 158.069, 152.689)), (' A 182  LEU  HB2', ' A 203  ILE HD13', -0.415, (108.033, 171.479, 147.72)), (' B1010  LYS  O  ', ' B1014  CYS  HB3', -0.414, (164.323, 175.888, 195.525)), (' A 659  SER  OG ', ' A 660  TYR  N  ', -0.413, (134.25, 184.115, 179.017)), (' C 115  ILE HG21', ' C 152  ILE HG21', -0.413, (187.976, 116.29, 124.111)), (' B 286  LEU  HG ', ' B 295  ILE HD13', -0.413, (187.71, 184.983, 165.398)), (' B 182  LEU  HB2', ' B 203  ILE HD13', -0.413, (199.113, 210.902, 147.827)), (' C 190  LYS  HD3', ' C 195  TYR  HE2', -0.413, (181.482, 135.541, 136.435)), (' C 628  VAL HG22', ' C 637  ILE HG12', -0.412, (152.462, 126.631, 164.144)), (' A 693  THR  HB ', ' B 877  GLN HE22', -0.412, (152.306, 189.763, 214.62)), (' A 628  VAL HG22', ' A 637  ILE HG12', -0.411, (138.099, 194.594, 164.132)), (' A 115  ILE HG21', ' A 152  ILE HG21', -0.411, (111.157, 169.324, 124.161)), (' A 984  GLN  NE2', ' C 984  GLN  OE1', -0.411, (165.525, 163.051, 150.917)), (' B 707  GLU  OE2', ' B1010  LYS  NZ ', -0.41, (170.686, 174.125, 190.866)), (' B 141  SER  HB3', ' B 144  MET  HB2', -0.41, (205.168, 226.676, 128.799)), (' A 707  GLU  OE2', ' A1010  LYS  NZ ', -0.41, (153.729, 164.943, 190.886)), (' B 628  VAL HG22', ' B 637  ILE HG12', -0.409, (203.621, 173.301, 163.938)), (' B 659  SER  OG ', ' B 660  TYR  N  ', -0.409, (196.918, 181.607, 178.926)), (' C 286  LEU  HG ', ' C 295  ILE HD13', -0.407, (170.872, 134.907, 165.342)), (' C 182  LEU  HB2', ' C 203  ILE HD13', -0.406, (187.686, 112.04, 148.027)), (' B 313  VAL HG11', ' B 519  LEU HD12', -0.406, (203.774, 153.777, 142.178)), (' A 704  ILE HG12', ' A1047  VAL HG22', -0.404, (143.944, 161.008, 201.404)), (' A 286  LEU  HG ', ' A 295  ILE HD13', -0.404, (136.213, 174.821, 165.314)), (' C 313  VAL HG11', ' C 519  LEU HD12', -0.403, (135.752, 136.674, 142.206)), (' C 141  SER  HB3', ' C 144  MET  HB2', -0.402, (197.788, 98.796, 128.745)), (' A 313  VAL HG11', ' A 519  LEU HD12', -0.402, (155.07, 204.095, 142.485)), (' B 704  ILE HG12', ' B1047  VAL HG22', -0.402, (172.529, 184.664, 201.295)), (' B 999  GLU  OE1', ' C1001  ARG  CZ ', -0.401, (170.043, 168.528, 176.907)), (' C 207  ARG  HB3', ' C 208  ASP  H  ', -0.401, (179.345, 105.499, 149.289)), (' B 693  THR  HB ', ' C 877  GLN  NE2', -0.4, (192.526, 162.647, 214.533)), (' B 188  LYS  HD3', ' B 197  TYR  HE2', -0.4, (186.133, 197.204, 139.548))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
