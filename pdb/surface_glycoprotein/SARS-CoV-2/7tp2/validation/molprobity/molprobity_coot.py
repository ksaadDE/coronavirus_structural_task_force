# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 167 ', 'THR', 0.011959288737269818, (202.50799999999995, 166.963, 115.186)), ('A', ' 620 ', 'VAL', 0.03638609884428425, (188.963, 135.672, 158.705)), ('A', ' 621 ', 'PRO', 0.00301368, (192.85999999999996, 135.099, 158.788)), ('A', ' 625 ', 'HIS', 0.02314206719083122, (188.30399999999995, 137.95, 151.796)), ('B', '  97 ', 'LYS', 0.028368028567358854, (132.724, 104.273, 145.238)), ('B', ' 489 ', 'TYR', 0.03370302857257294, (163.321, 196.864, 106.43999999999997)), ('B', ' 624 ', 'ILE', 0.005058945738474731, (126.82400000000005, 148.962, 157.186)), ('B', ' 663 ', 'ASP', 0.022656604956435046, (137.83, 144.781, 182.377)), ('C', ' 110 ', 'LEU', 0.025345779675814063, (143.736, 207.421, 122.186)), ('C', ' 457 ', 'ARG', 0.0058210035786085594, (183.40799999999993, 143.03, 114.47)), ('C', ' 487 ', 'ASN', 0.022111592967800988, (181.265, 135.46400000000006, 109.45099999999996)), ('C', '1093 ', 'GLY', 0.0724180051599465, (169.434, 173.127, 219.321))]
data['omega'] = [('A', ' 136 ', 'CYS', None, (217.39499999999995, 159.879, 116.973))]
data['rota'] = [('A', ' 307 ', 'THR', 0.028138400922837536, (195.69899999999996, 161.169, 165.958)), ('A', ' 318 ', 'PHE', 0.002332865183767975, (183.31599999999995, 142.746, 155.895)), ('A', ' 366 ', 'SER', 0.2973786821152191, (169.34, 137.361, 118.06999999999996)), ('A', ' 458 ', 'LYS', 0.07782742655099426, (128.086, 146.025, 120.34699999999998)), ('A', ' 470 ', 'THR', 0.2471981275625031, (129.187, 139.675, 111.074)), ('A', ' 547 ', 'THR', 0.05959254576484612, (169.48899999999998, 134.38, 140.557)), ('A', ' 578 ', 'ASP', 0.2404804752964721, (167.48799999999994, 122.108, 140.691)), ('A', ' 624 ', 'ILE', 0.013277275859371272, (190.30599999999995, 137.765, 155.111)), ('A', ' 738 ', 'CYS', 0.0007200002702507598, (165.23899999999995, 177.027, 155.28399999999996)), ('A', ' 739 ', 'THR', 0.017458430317749817, (164.33499999999995, 179.37, 152.38899999999998)), ('A', ' 752 ', 'LEU', 0.12196878631203104, (159.18599999999998, 176.366, 143.338)), ('A', ' 886 ', 'TRP', 0.020923237617672112, (169.692, 175.772, 204.92199999999994)), ('A', ' 907 ', 'ASN', 0.18716005390989227, (174.11099999999993, 165.868, 213.71699999999998)), ('A', '1082 ', 'CYS', 0.28538958833816175, (169.22099999999995, 141.739, 231.596)), ('A', '1084 ', 'ASP', 0.08460786339713884, (167.067, 143.812, 237.539)), ('B', '  96 ', 'GLU', 0.07928325133390506, (132.332, 108.107, 145.576)), ('B', ' 286 ', 'THR', 0.18890898717710145, (146.794, 122.93, 157.818)), ('B', ' 294 ', 'ASP', 0.09267507636765994, (132.76899999999995, 137.854, 160.907)), ('B', ' 546 ', 'LEU', 0.0506894965122365, (133.09799999999996, 169.619, 139.775)), ('B', ' 622 ', 'VAL', 0.04467475843802674, (121.02399999999997, 150.486, 158.553)), ('B', ' 675 ', 'GLN', 0.25884859026792884, (129.965, 137.788, 182.348)), ('B', ' 705 ', 'VAL', 0.04398991298921636, (136.55099999999996, 157.299, 208.254)), ('B', ' 760 ', 'CYS', 0.16305459199797923, (173.987, 156.41, 155.055)), ('B', ' 907 ', 'ASN', 0.18533879767523842, (163.578, 152.098, 214.45899999999997)), ('B', '1094 ', 'VAL', 0.20889601139903136, (149.937, 160.183, 221.3)), ('C', ' 112 ', 'SER', 0.17708891150141806, (142.034, 205.041, 118.15399999999998)), ('C', ' 142 ', 'ASP', 0.04503471533766548, (127.25700000000005, 216.965, 124.435)), ('C', ' 324 ', 'GLU', 0.006516824162424802, (176.61699999999993, 196.622, 141.072)), ('C', ' 422 ', 'ASN', 0.2999083053625904, (182.11099999999993, 152.855, 115.074)), ('C', ' 457 ', 'ARG', 0.0604453024270775, (183.40799999999993, 143.03, 114.47)), ('C', ' 459 ', 'SER', 0.10616031544213095, (185.353, 144.935, 119.19)), ('C', ' 523 ', 'THR', 0.22060732416540377, (189.569, 179.425, 127.067)), ('C', ' 641 ', 'ASN', 0.11060601267681062, (167.925, 206.50900000000001, 168.021)), ('C', ' 646 ', 'ARG', 0.036944892450001175, (176.23399999999995, 192.082, 171.452)), ('C', ' 907 ', 'ASN', 0.12558406357668225, (157.167, 167.769, 214.48599999999993))]
data['cbeta'] = [('A', ' 130 ', 'VAL', ' ', 0.28697291780631856, (203.93, 163.791, 119.85399999999998)), ('A', ' 167 ', 'THR', ' ', 0.2924063567970573, (201.234, 166.097, 115.268)), ('A', ' 454 ', 'ARG', ' ', 0.2682678625360308, (135.235, 144.197, 113.665)), ('B', ' 456 ', 'PHE', ' ', 0.2510290605134262, (161.02199999999993, 188.457, 113.796)), ('C', ' 391 ', 'CYS', ' ', 0.2702783177547402, (182.641, 180.334, 128.502)), ('C', ' 457 ', 'ARG', ' ', 0.3507912001479764, (184.59, 143.992, 114.201))]
data['probe'] = [(' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.587, (163.939, 131.095, 128.661)), (' C 391  CYS  HB2', ' C 525  CYS  HA ', -0.55, (183.439, 180.213, 126.935)), (' B 391  CYS  CB ', ' B 525  CYS  HA ', -0.425, (130.828, 172.274, 129.772)), (' A 404  GLY  HA3', ' A 508  TYR  CD1', -0.416, (152.634, 148.721, 106.515)), (' A 620  VAL  H  ', ' A 621  PRO  CD ', -0.406, (189.825, 133.676, 159.005)), (' B 216  LEU  HA ', ' B 217  PRO  HD3', -0.405, (130.761, 115.987, 152.15)), (' A 200  TYR  CD1', ' A 230  PRO  HA ', -0.403, (195.188, 166.981, 125.897)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.402, (157.505, 140.05, 126.033)), (' C 748  GLU  CD ', ' C 748  GLU  H  ', -0.401, (140.493, 155.338, 142.086))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
