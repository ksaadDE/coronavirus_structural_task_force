# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', '  56 ', 'ASP', None, (-47.685, -26.285, 12.002000000000004))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A  12  LYS  HE3', ' A 306  GLN  HG3', -1.122, (-22.334, -14.853, 37.985)), (' A  12  LYS  CE ', ' A 306  GLN  HG3', -0.99, (-21.558, -15.512, 37.957)), (' A 306  GLN  C  ', ' B 122  PRO  CD ', -0.919, (-25.276, -17.031, 32.783)), (' A 306  GLN  C  ', ' B 122  PRO  HD3', -0.871, (-26.381, -16.8, 33.263)), (' A  12  LYS  HE3', ' A 306  GLN  CG ', -0.822, (-22.088, -15.579, 37.224)), (' B  53  ASN  O  ', ' B  56  ASP  N  ', -0.773, (-47.005, -26.372, 11.122)), (' A 306  GLN  C  ', ' B 122  PRO  HD2', -0.763, (-24.639, -16.351, 33.119)), (' B 153  ASP  OD1', ' B 154  TYR  N  ', -0.74, (-36.632, 3.122, 35.141)), (' B  51  ASN  OD1', ' B 188  ARG  NH1', -0.655, (-43.095, -21.159, 4.755)), (' B  55  GLU  OE2', ' B 501  HOH  O  ', -0.648, (-48.083, -21.666, 10.214)), (' B  61  LYS  NZ ', ' B 507  HOH  O  ', -0.645, (-42.527, -30.987, 16.12)), (' A 298  ARG  NH1', ' A 502  HOH  O  ', -0.637, (-15.272, -10.556, 27.139)), (' A 306  GLN  N  ', ' B 122  PRO  HD2', -0.637, (-23.354, -16.797, 32.952)), (' A 306  GLN  H  ', ' B 122  PRO  HD2', -0.635, (-23.751, -16.755, 32.546)), (' A 240  GLU  OE1', ' A 501  HOH  O  ', -0.624, (1.966, -3.644, 23.991)), (' B  53  ASN  HB3', ' B  56  ASP  HB2', -0.57, (-47.288, -27.027, 8.97)), (' B 188  ARG  HG3', ' B 190  THR HG22', -0.557, (-38.531, -18.204, 4.553)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.553, (-3.571, -3.104, 26.121)), (' A  12  LYS  CE ', ' A 306  GLN  CG ', -0.541, (-21.795, -16.291, 37.865)), (' B  48  ASP  HB3', ' B 701  HOH  O  ', -0.538, (-39.127, -28.054, 10.415)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.524, (-6.804, 1.207, 47.12)), (' B 216  ASP  OD1', ' B 502  HOH  O  ', -0.517, (-12.799, 20.987, 20.245)), (' A 294  PHE  HD1', ' A 298  ARG HH21', -0.51, (-10.741, -13.205, 27.939)), (' B 126  TYR  HE1', ' B 128  CYS  HG ', -0.502, (-25.868, -5.448, 19.964)), (' B 100  LYS  HD2', ' B 721  HOH  O  ', -0.488, (-43.487, -5.144, 36.668)), (' A 304  THR HG21', ' B 743  HOH  O  ', -0.483, (-22.761, -21.588, 28.921)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.476, (-31.061, -6.195, 24.917)), (' A 192  GLN  N  ', ' A 401  H6L  O32', -0.475, (-1.294, 17.067, 36.948)), (' B  53  ASN  HB3', ' B  56  ASP  CB ', -0.464, (-46.959, -27.503, 9.642)), (' A 298  ARG  HD3', ' A 305  PHE  HZ ', -0.461, (-15.977, -14.461, 29.363)), (' B  22  CYS  SG ', ' B  61  LYS  HE2', -0.461, (-40.74, -29.444, 20.166)), (' A 222  ARG  HA ', ' A 222  ARG  NE ', -0.46, (0.577, -13.091, 0.729)), (' A 306  GLN  CA ', ' B 122  PRO  HD2', -0.46, (-24.053, -16.82, 33.689)), (' A 126  TYR  HE1', ' A 128  CYS  SG ', -0.46, (-14.025, 2.286, 30.932)), (' A 108  PRO  HG3', ' A 134  PHE  CE1', -0.458, (0.566, -0.648, 33.839)), (' A 198  THR HG22', ' A 238  ASN  OD1', -0.453, (3.505, 5.473, 21.502)), (' B  53  ASN  OD1', ' B  55  GLU  O  ', -0.449, (-49.251, -25.24, 10.42)), (' A 306  GLN  HB3', ' A 505  HOH  O  ', -0.447, (-25.245, -15.226, 35.774)), (' A 126  TYR  HE1', ' A 128  CYS  HG ', -0.445, (-14.587, 2.151, 30.946)), (' A 168  PRO  HD3', ' A 401  H6L  C29', -0.439, (-4.645, 16.549, 36.551)), (' A  52  PRO  HG2', ' A  54  TYR  CE2', -0.439, (-5.341, 13.02, 50.477)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.436, (-14.706, -3.349, 35.745)), (' B 118  TYR  CE1', ' B 144  SER  HB3', -0.435, (-25.273, -17.256, 21.029)), (' A 191  ALA  HA ', ' A 401  H6L  N31', -0.433, (-2.224, 18.545, 37.404)), (' B 130  MET  HB2', ' B 130  MET  HE2', -0.429, (-33.987, -2.008, 17.344)), (' A  92  ASP  N  ', ' A  92  ASP  OD1', -0.425, (-22.751, -4.537, 59.582)), (' B 235  MET  HB2', ' B 235  MET  HE3', -0.421, (-29.833, 10.275, -1.069)), (' A  52  PRO  HG2', ' A  54  TYR  CZ ', -0.419, (-5.675, 12.698, 50.374)), (' B 108  PRO  HG3', ' B 134  PHE  CE1', -0.401, (-38.062, 0.367, 12.36)), (' B  12  LYS  HE3', ' B 155  ASP  OD1', -0.401, (-33.384, -1.735, 39.321))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
