# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (111.85800000000008, 136.76800000000006, 143.354)), ('B', ' 183 ', 'PRO', None, (134.17199999999997, 125.546, 152.08699999999996))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 487  CYS  SG ', ' A 642  HIS  ND1', -0.897, (100.369, 135.744, 119.034)), (' A 335  VAL  O  ', ' A 336  ASP  OD1', -0.83, (107.988, 156.866, 145.994)), (' A 487  CYS  SG ', ' A 645  CYS  SG ', -0.781, (98.796, 136.428, 118.399)), (' A 927  PRO  O  ', ' A 930  VAL  CG2', -0.74, (90.073, 101.431, 121.2)), (' A 844  VAL HG12', ' A 845  ASP  N  ', -0.734, (108.613, 107.736, 148.582)), (' A 844  VAL HG11', ' A 848  VAL HG22', -0.707, (105.784, 106.562, 149.485)), (' A 301  CYS  SG ', ' A 306  CYS  SG ', -0.696, (115.997, 141.885, 110.743)), (' A 844  VAL HG12', ' A 845  ASP  H  ', -0.669, (108.683, 108.347, 148.041)), (' A 291  ASP  HB3', ' A 735  ARG HH22', -0.645, (123.274, 140.81, 98.586)), (' A 701  THR  O  ', ' A 705  ASN  ND2', -0.642, (123.16, 119.694, 107.157)), (' B 132  ILE HG21', ' B 138  TYR  HB2', -0.636, (140.938, 130.766, 149.976)), (' A  32  TYR  HB3', ' A  47  LYS  HE2', -0.622, (138.314, 114.45, 99.94)), (' A 699  ALA  O  ', ' A 703  ASN  ND2', -0.622, (118.012, 115.607, 108.168)), (' A 531  THR  O  ', ' A 657  ASN  ND2', -0.612, (107.243, 142.043, 125.635)), (' A 338  VAL HG11', ' B  95  LEU HD21', -0.612, (112.974, 154.809, 148.218)), (' A 844  VAL  CG1', ' A 845  ASP  H  ', -0.612, (108.673, 107.552, 148.008)), (' A 930  VAL  O  ', ' A 930  VAL HG12', -0.606, (90.096, 105.422, 124.098)), (' B 105  ASN  O  ', ' B 109  ASN  ND2', -0.606, (129.631, 159.545, 137.735)), (' A  39  ASN  O  ', ' A 725  HIS  NE2', -0.605, (123.925, 122.804, 88.555)), (' B  90  MET  HG2', ' B  94  MET  HE2', -0.604, (112.639, 143.176, 147.73)), (' A 576  LEU HD11', ' A 686  THR HG22', -0.603, (104.651, 126.288, 125.132)), (' B 180  LEU HD13', ' B 184  LEU HD21', -0.595, (138.061, 127.484, 156.09)), (' B 159  VAL HG22', ' B 186  VAL HG22', -0.594, (138.036, 135.859, 155.2)), (' A 206  THR  OG1', ' A 209  ASN  ND2', -0.592, (136.552, 129.508, 94.063)), (' A 149  TYR  HE2', ' A 212  LEU HD13', -0.59, (146.251, 125.83, 107.131)), (' A 412  PRO  HG3', ' C  14  LEU HD23', -0.59, (122.414, 109.577, 152.06)), (' A 725  HIS  O  ', ' A 729  GLU  HG3', -0.589, (119.918, 124.413, 92.451)), (' A 885  LEU HD21', ' A 889  ARG  NH2', -0.585, (96.145, 89.309, 139.554)), (' A 816  HIS  O  ', ' A 830  PRO  HA ', -0.585, (107.513, 99.095, 124.279)), (' A 507  ASN  ND2', ' A 541  GLN  OE1', -0.581, (112.363, 131.228, 145.017)), (' A 598  TRP  NE1', ' A 817  THR  OG1', -0.58, (107.063, 100.658, 121.502)), (' A 498  LEU  O  ', ' A 513  ARG  HB2', -0.578, (98.96, 127.284, 142.486)), (' A 927  PRO  HA ', ' A 930  VAL HG22', -0.577, (91.357, 101.286, 122.113)), (' A 615  MET  HB2', ' A 766  PHE  HE2', -0.571, (118.187, 104.901, 110.948)), (' A 844  VAL  CG1', ' A 845  ASP  N  ', -0.57, (108.801, 107.442, 148.06)), (' A 412  PRO  O  ', ' A 546  TYR  OH ', -0.562, (115.822, 110.237, 149.907)), (' A 487  CYS  SG ', ' A 642  HIS  CE1', -0.561, (100.116, 135.232, 119.73)), (' A 717  ASP  OD1', ' A 718  LYS  N  ', -0.557, (116.766, 110.754, 89.236)), (' A 127  LEU HD13', ' A 145  ILE HG21', -0.552, (142.656, 124.018, 109.71)), (' A 257  VAL  HA ', ' A 266  ILE HG12', -0.548, (141.931, 148.82, 122.444)), (' C  66  VAL HG11', ' D  88  GLN  HG2', -0.546, (120.517, 104.459, 165.844)), (' A 100  ASP  HB2', ' A 115  SER  HB2', -0.544, (153.994, 129.718, 86.912)), (' D 118  ASN  OD1', ' D 129  MET  N  ', -0.534, (140.987, 106.494, 164.516)), (' A 516  TYR  OH ', ' A 569  ARG  NH1', -0.533, (100.128, 130.78, 134.06)), (' A 515  TYR  HE1', ' B  83  VAL HG21', -0.533, (102.776, 137.509, 145.253)), (' A 547  ALA  HB3', ' A 555  ARG  HD3', -0.531, (116.599, 113.096, 139.551)), (' A 532  LYS  HD2', ' A 650  HIS  HD2', -0.528, (101.388, 142.879, 120.981)), (' A 785  VAL  O  ', ' A 789  GLN  HB2', -0.523, (125.411, 121.404, 114.221)), (' B 160  VAL HG13', ' B 164  SER  HA ', -0.523, (130.406, 130.465, 158.987)), (' A 436  GLU  HB2', ' A 438  LYS  HE2', -0.523, (120.048, 95.091, 138.104)), (' A 242  MET  HG2', ' A 463  MET  HE2', -0.522, (128.658, 134.598, 110.023)), (' A 468  GLN  HA ', ' A 731  LEU HD22', -0.519, (120.78, 126.971, 104.111)), (' A 595  TYR  CE1', ' A 929  THR  O  ', -0.519, (91.202, 101.825, 126.866)), (' A 476  VAL HG22', ' A 696  ILE HG22', -0.516, (112.819, 120.865, 111.455)), (' A 420  TYR  O  ', ' A 424  VAL HG23', -0.515, (112.844, 91.385, 149.112)), (' A 506  PHE  O  ', ' A 515  TYR  OH ', -0.511, (105.948, 135.167, 145.414)), (' A 927  PRO  O  ', ' A 930  VAL HG23', -0.509, (88.943, 101.332, 122.054)), (' A 226  THR HG23', ' A 229  SER  HB3', -0.509, (130.706, 149.045, 85.938)), (' A 701  THR HG22', ' A 705  ASN HD21', -0.508, (123.033, 120.813, 108.722)), (' A 506  PHE  HB3', ' A 515  TYR  CE2', -0.506, (105.289, 134.638, 143.124)), (' A  38  TYR  HE1', ' A 729  GLU  HG2', -0.502, (121.383, 126.064, 91.393)), (' A 540  THR HG23', ' A 665  GLU  HG3', -0.501, (115.694, 133.41, 134.606)), (' A 304  ASP  N  ', ' A 304  ASP  OD1', -0.5, (110.456, 137.569, 110.165)), (' A 647  SER  OG ', ' A 650  HIS  ND1', -0.498, (102.699, 145.497, 116.964)), (' A 369  LYS  O  ', ' A 373  VAL HG23', -0.497, (103.913, 144.887, 136.998)), (' A 387  LEU  HG ', ' B 128  LEU HD13', -0.496, (132.453, 142.019, 145.227)), (' B 120  ILE  O  ', ' B 124  THR  HB ', -0.495, (127.503, 149.817, 142.766)), (' A 758  LEU HD23', ' A 759  SER  N  ', -0.491, (109.569, 114.802, 123.961)), (' A  86  ILE HD13', ' A 222  PHE  HB2', -0.49, (137.303, 137.292, 86.127)), (' A 483  TYR  CE1', ' A 582  THR HG21', -0.49, (100.072, 118.575, 115.145)), (' A 483  TYR  HE1', ' A 582  THR HG21', -0.487, (100.4, 118.398, 115.344)), (' A  74  ARG  HA ', ' A 113  HIS  HD1', -0.483, (148.656, 123.642, 82.765)), (' A 572  HIS  O  ', ' A 576  LEU  HG ', -0.483, (101.753, 127.071, 123.189)), (' B 134  ASP  N  ', ' B 134  ASP  OD1', -0.482, (139.488, 126.539, 147.047)), (' B 125  ALA  O  ', ' B 190  ARG  NE ', -0.482, (132.606, 149.886, 147.127)), (' A 668  MET  HA ', ' A 672  SER  O  ', -0.48, (121.431, 134.02, 142.72)), (' A 658  GLU  O  ', ' A 662  VAL HG12', -0.479, (113.431, 133.235, 127.152)), (' A 892  HIS  NE2', ' A 916  TRP  CZ3', -0.474, (89.772, 96.866, 145.637)), (' A  38  TYR  CE1', ' A 729  GLU  HG2', -0.472, (121.872, 126.199, 91.296)), (' A 290  TRP  HE1', ' A 309  HIS  CE1', -0.47, (123.048, 139.63, 106.009)), (' A 257  VAL HG23', ' A 258  ASP  H  ', -0.469, (145.864, 148.854, 121.073)), (' A 149  TYR  CE2', ' A 212  LEU HD13', -0.467, (146.331, 126.198, 107.553)), (' A 146  LEU HD11', ' A 175  TYR  HE1', -0.466, (140.996, 121.092, 116.182)), (' B 177  SER  OG ', ' B 178  PRO  HD3', -0.463, (144.909, 122.601, 154.75)), (' A 207  LEU HD21', ' A 241  LEU  HG ', -0.459, (135.412, 130.353, 104.26)), (' A 595  TYR  CD1', ' A 929  THR  O  ', -0.459, (91.034, 101.224, 126.359)), (' A 892  HIS  NE2', ' A 916  TRP  CE3', -0.458, (90.275, 96.87, 145.553)), (' A 100  ASP  N  ', ' A 115  SER  O  ', -0.457, (152.476, 131.972, 88.332)), (' A 758  LEU HD23', ' A 759  SER  H  ', -0.456, (109.476, 115.115, 124.169)), (' A 601  MET  O  ', ' A 605  VAL HG23', -0.455, (105.004, 105.967, 114.397)), (' A 889  ARG HH21', ' A 918  PRO  HD3', -0.455, (94.666, 89.362, 139.045)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.454, (126.28, 123.281, 84.993)), (' C  17  LEU HD22', ' C  22  VAL HG21', -0.454, (126.038, 110.934, 161.109)), (' C  12  VAL HG13', ' D  91  LEU HD13', -0.453, (120.406, 100.992, 157.823)), (' C  12  VAL HG21', ' D  90  MET  SD ', -0.452, (116.403, 100.773, 158.711)), (' A 577  LYS  HA ', ' A 577  LYS  HD3', -0.452, (97.615, 121.826, 124.34)), (' C  47  GLU  HA ', ' C  50  GLU  HG2', -0.45, (134.963, 97.285, 150.502)), (' A 830  PRO  O  ', ' A 868  PRO  HG2', -0.448, (104.241, 97.669, 127.924)), (' A 271  LEU HD11', ' B 106  ILE HG23', -0.447, (129.001, 154.272, 136.876)), (' C  34  GLN  NE2', ' C  38  ASP  OD2', -0.447, (133.864, 107.566, 146.69)), (' A 929  THR  O  ', ' A 929  THR  OG1', -0.443, (90.458, 99.771, 126.522)), (' A 619  TYR  HB3', ' A 622  CYS  HB2', -0.442, (120.372, 117.551, 123.949)), (' A 274  ASP  OD1', ' A 275  PHE  N  ', -0.439, (127.526, 151.595, 122.289)), (' A 595  TYR  CZ ', ' A 931  LEU  O  ', -0.437, (91.183, 104.151, 128.499)), (' A 201  ILE HG23', ' A 222  PHE  HB3', -0.436, (136.178, 139.181, 87.572)), (' A 331  ARG  HG2', ' B 113  GLY  O  ', -0.435, (118.964, 156.078, 133.399)), (' A  50  LYS  HA ', ' A  50  LYS  HD2', -0.433, (142.068, 114.996, 91.257)), (' C  50  GLU  HA ', ' C  53  VAL HG12', -0.432, (134.169, 97.645, 155.55)), (' C   5  ASP  OD1', ' C   6  VAL  N  ', -0.432, (123.046, 93.82, 151.025)), (' A 599  HIS  CE1', ' A 603  LYS  HG3', -0.432, (100.424, 99.233, 113.555)), (' D 102  ALA  O  ', ' D 106  ILE HG12', -0.43, (133.494, 95.169, 162.601)), (' D  92  PHE  HA ', ' D  95  LEU HD12', -0.43, (122.208, 97.791, 162.592)), (' A 205  LEU HD22', ' A 234  VAL HG12', -0.429, (133.844, 137.209, 98.259)), (' A 516  TYR  CE2', ' A 562  ILE HD11', -0.429, (101.305, 132.017, 137.304)), (' A 452  ASP  OD2', ' A 624  ARG  NH2', -0.428, (122.673, 122.443, 136.912)), (' A 720  VAL HG11', ' A 775  LEU HD13', -0.427, (119.028, 110.346, 96.056)), (' A 140  ASP  HA ', ' A 143  LYS  HE2', -0.427, (144.327, 113.045, 111.792)), (' A 892  HIS  HD2', ' A 915  TYR  OH ', -0.427, (91.957, 98.926, 146.396)), (' A 631  ARG  HG2', ' A 663  LEU HD11', -0.426, (116.006, 130.363, 124.362)), (' A  76  THR HG22', ' A  79  ASN  H  ', -0.423, (140.783, 128.852, 76.889)), (' A 384  SER  O  ', ' A 384  SER  OG ', -0.423, (120.193, 146.309, 148.643)), (' A 569  ARG  O  ', ' A 573  GLN  HB2', -0.422, (98.92, 129.948, 126.703)), (' A 575  LEU  O  ', ' A 579  ILE HG13', -0.421, (100.829, 123.263, 119.044)), (' A 136  GLU  OE2', ' A 783  LYS  NZ ', -0.42, (132.058, 108.579, 115.856)), (' A 203  GLY  HA3', ' A 222  PHE  CD2', -0.419, (134.364, 136.861, 89.741)), (' A 753  PHE  CE1', ' A 764  VAL HG11', -0.419, (116.041, 109.869, 109.485)), (' A 131  LEU HD13', ' A 247  LEU HD23', -0.418, (136.246, 124.914, 113.63)), (' A 575  LEU HD21', ' A 638  LEU HD22', -0.417, (105.435, 126.402, 118.572)), (' A 613  HIS  O  ', ' A 765  CYS  HA ', -0.417, (113.362, 103.991, 109.885)), (' A 201  ILE  H  ', ' A 230  GLY  HA3', -0.417, (134.401, 144.4, 88.893)), (' A 400  ALA  HA ', ' A 672  SER  HB2', -0.416, (124.901, 136.795, 146.001)), (' A 186  LEU  HA ', ' A 186  LEU HD23', -0.416, (137.559, 136.882, 105.745)), (' C   3  MET  SD ', ' C   7  LYS  HE3', -0.416, (125.496, 96.317, 145.326)), (' A 469  LEU HD11', ' A 633  MET  HG3', -0.416, (117.169, 128.493, 112.96)), (' A 180  GLU  O  ', ' A 183  ARG  HG2', -0.416, (143.084, 136.486, 112.537)), (' C  11  VAL  HA ', ' C  36  HIS  HE1', -0.416, (121.336, 104.622, 151.452)), (' A 439  HIS  HB3', ' A 548  ILE  CG2', -0.415, (115.62, 104.939, 140.209)), (' C  14  LEU HD22', ' C  36  HIS  CB ', -0.415, (125.129, 107.999, 151.795)), (' A 366  LEU HD22', ' A 370  GLU  HG2', -0.414, (104.788, 151.11, 139.674)), (' C  10  SER  N  ', ' C  52  MET  HE1', -0.414, (124.291, 99.912, 154.15)), (' A 662  VAL HG13', ' A 663  LEU HD12', -0.413, (115.238, 131.389, 126.491)), (' A 701  THR HG22', ' A 705  ASN  ND2', -0.411, (123.522, 120.431, 108.625)), (' A 558  ALA  O  ', ' A 683  GLY  HA3', -0.41, (111.797, 125.961, 136.247)), (' A 382  ALA  HB2', ' A 666  MET  HE1', -0.41, (121.125, 141.583, 139.512)), (' A 532  LYS  HD2', ' A 650  HIS  CD2', -0.408, (101.557, 143.348, 120.803)), (' A 829  LEU  HA ', ' A 829  LEU HD23', -0.408, (102.234, 97.989, 122.816)), (' A 299  VAL HG22', ' A 652  PHE  CE2', -0.407, (114.323, 145.186, 119.439)), (' A  76  THR  HB ', ' A  79  ASN  HB3', -0.406, (141.107, 127.558, 78.886)), (' C  14  LEU  HA ', ' C  14  LEU HD12', -0.403, (124.034, 108.145, 156.623)), (' A  70  PHE  HA ', ' A 117  GLN  HA ', -0.403, (153.379, 128.828, 94.118)), (' D 101  ASP  N  ', ' D 101  ASP  OD1', -0.401, (132.732, 89.493, 158.704))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
