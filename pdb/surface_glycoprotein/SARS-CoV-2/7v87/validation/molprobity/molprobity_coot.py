# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 391  CYS  HA ', ' A 525  CYS  HB3', -0.778, (197.406, 193.309, 191.623)), (' A 379  CYS  HB3', ' A 432  CYS  HA ', -0.721, (197.852, 197.566, 206.62)), (' A 518  LEU HD12', ' A 520  ALA  H  ', -0.705, (204.404, 182.331, 192.817)), (' F 157  ASP  HB3', ' F 160  GLU  HG2', -0.703, (169.32, 225.279, 276.042)), (' F 161  ARG  NH1', ' F 265  HIS  O  ', -0.702, (177.859, 223.925, 273.047)), (' F 431  ASP  HB2', ' F2004  NAG  H82', -0.654, (187.479, 248.001, 251.13)), (' F 177  ARG  NH1', ' F 495  GLU  O  ', -0.643, (186.563, 204.902, 283.669)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.642, (186.934, 190.518, 217.267)), (' F 145  GLU  HB2', ' F 146  PRO  HD2', -0.641, (169.298, 211.933, 262.508)), (' A 529  LYS  NZ ', ' A 530  SER  O  ', -0.626, (184.679, 202.534, 182.702)), (' F 494  ASP  OD1', ' F 495  GLU  N  ', -0.625, (185.367, 208.584, 287.267)), (' A 379  CYS  CB ', ' A 432  CYS  HA ', -0.613, (198.065, 198.094, 206.282)), (' F 201  ASP  OD1', ' F 204  ARG  NH2', -0.591, (204.862, 203.404, 266.887)), (' A 457  ARG  NH1', ' A 467  ASP  OD2', -0.585, (203.978, 178.208, 221.824)), (' F 315  PHE  HD2', ' F 320  LEU HD12', -0.582, (191.984, 218.657, 236.959)), (' F  77  SER  O  ', ' F  81  GLN  NE2', -0.58, (201.258, 184.449, 252.392)), (' F 156  LEU  O  ', ' F 252  TYR  OH ', -0.561, (173.015, 229.905, 274.597)), (' A 523  THR HG23', ' A 524  VAL HG23', -0.548, (195.389, 186.149, 192.941)), (' F  85  LEU HD12', ' F  88  ILE HD13', -0.543, (210.499, 189.603, 248.674)), (' F 528  ALA  HB2', ' F 574  VAL HG12', -0.537, (205.191, 223.364, 246.831)), (' A 454  ARG  NH2', ' A 469  SER  O  ', -0.533, (199.593, 176.04, 224.463)), (' F  90  ASN  O  ', ' F  92  THR  N  ', -0.527, (211.213, 197.282, 242.715)), (' F 147  GLY  H  ', ' F 150  GLU  HB3', -0.519, (168.56, 218.42, 265.728)), (' F 161  ARG HH22', ' F 268  GLY  HA2', -0.514, (177.304, 224.754, 269.64)), (' A 393  THR  HB ', ' A 522  ALA  HA ', -0.514, (200.257, 186.328, 192.065)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.508, (200.436, 187.025, 223.373)), (' F 340  GLN  NE2', ' F2001  NAG  HN2', -0.505, (165.293, 201.396, 241.228)), (' F 374  HIS  CE1', ' F 406  GLU  HG2', -0.492, (188.56, 217.675, 249.867)), (' F 457  GLU  HG2', ' F 513  ILE HD13', -0.489, (198.004, 211.833, 265.054)), (' F 404  VAL  HA ', ' F 407  ILE HD12', -0.489, (195.279, 218.882, 246.189)), (' F 271  TRP  NE1', ' F 502  SER  O  ', -0.485, (181.869, 211.833, 270.799)), (' F 209  VAL HG13', ' F 216  ASP  HA ', -0.482, (212.295, 206.305, 253.297)), (' F 143  LEU  HB2', ' F 145  GLU  HG3', -0.481, (168.515, 210.362, 266.211)), (' F 268  GLY  O  ', ' F 277  ASN  ND2', -0.478, (178.355, 223.12, 265.995)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.477, (192.232, 199.085, 214.485)), (' A 377  PHE  CD1', ' A 434  ILE HD12', -0.477, (191.729, 199.699, 206.972)), (' F  57  GLU  HA ', ' F  60  GLN  NE2', -0.474, (168.019, 189.332, 247.768)), (' F 170  SER  OG ', ' F 171  GLU  OE1', -0.472, (173.829, 210.345, 281.321)), (' F 307  ILE HG23', ' F 369  PHE  HD1', -0.471, (178.37, 223.996, 240.692)), (' F 123  MET  HG3', ' F 176  LEU HD11', -0.465, (181.809, 200.895, 271.971)), (' A 347  PHE  CE2', ' A 509  ARG  HD3', -0.464, (185.197, 190.599, 214.182)), (' F 419  LYS  NZ ', ' F 428  PHE  O  ', -0.462, (184.692, 243.307, 240.87)), (' F  84  PRO  O  ', ' F  86  GLN  N  ', -0.462, (213.267, 187.814, 251.233)), (' F  55  THR HG23', ' F  58  ASN  H  ', -0.46, (168.301, 194.223, 246.79)), (' F  33  ASN  OD1', ' F  34  HIS  N  ', -0.454, (196.769, 190.163, 237.159)), (' F 367  ASP  OD1', ' F 368  ASP  N  ', -0.451, (176.156, 223.307, 248.059)), (' A 529  LYS  HZ3', ' A 530  SER  H  ', -0.45, (185.447, 201.644, 183.696)), (' F 429  GLN  N  ', ' F 429  GLN  OE1', -0.446, (182.79, 246.009, 243.571)), (' A 496  GLY  O  ', ' F 353  LYS  NZ ', -0.444, (186.203, 192.317, 232.172)), (' F 181  GLU  OE2', ' F 470  LYS  HD2', -0.444, (191.586, 197.697, 283.054)), (' F 183  TYR  OH ', ' F 509  ASP  OD2', -0.442, (190.277, 198.335, 265.84)), (' F 589  GLU  HB3', ' F 590  PRO  HD3', -0.438, (198.126, 237.468, 255.401)), (' F 115  ARG  HA ', ' F 115  ARG  HD2', -0.436, (184.061, 187.139, 271.495)), (' F 293  VAL HG21', ' F 423  LEU HD13', -0.436, (177.568, 231.771, 241.82)), (' F 596  LYS  HA ', ' F 596  LYS  HD2', -0.435, (198.227, 240.376, 268.17)), (' F 267  LEU HD12', ' F 272  GLY  HA3', -0.435, (184.687, 221.963, 271.064)), (' F 470  LYS  HB2', ' F 470  LYS  HE3', -0.431, (193.648, 199.331, 286.089)), (' F  22  GLU  N  ', ' F  22  GLU  OE1', -0.43, (214.186, 186.688, 242.353)), (' F  89  GLN  O  ', ' F  90  ASN  HB3', -0.427, (213.229, 193.829, 242.766)), (' A 471  GLU  HA ', ' A 471  GLU  OE1', -0.427, (199.807, 170.114, 229.113)), (' F 492  PRO  HG3', ' F 613  TYR  CZ ', -0.426, (184.505, 219.241, 288.657)), (' F 121  ASN  O  ', ' F 125  THR HG23', -0.424, (177.254, 196.102, 266.652)), (' F 233  ILE HG22', ' F 585  LEU HD21', -0.421, (201.251, 227.938, 262.133)), (' F 581  VAL HG23', ' F 584  LEU HD12', -0.421, (200.571, 224.422, 259.502)), (' F 252  TYR  HB3', ' F 255  TYR  HD2', -0.42, (176.684, 232.319, 279.722)), (' F 259  ILE HD12', ' F 603  PHE  CZ ', -0.42, (194.323, 235.78, 282.514)), (' F  85  LEU HD11', ' F  94  LYS  HG3', -0.418, (210.26, 192.627, 249.174)), (' F 475  LYS  O  ', ' F 479  GLU  OE1', -0.416, (194.183, 214.776, 283.906)), (' F 476  LYS  HD2', ' F 479  GLU  OE2', -0.414, (197.615, 213.474, 283.515)), (' F 468  ILE  O  ', ' F 468  ILE HG13', -0.412, (197.682, 204.45, 280.503)), (' F 590  PRO  HA ', ' F 593  THR HG22', -0.412, (196.876, 240.989, 258.537)), (' F 398  GLU  HB2', ' F 514  ARG  HE ', -0.411, (194.467, 208.254, 255.301)), (' F 443  ALA  O  ', ' F 447  VAL HG12', -0.411, (191.045, 228.465, 261.835)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.41, (193.416, 184.853, 210.39)), (' A 417  LYS  O  ', ' A 421  TYR  HB2', -0.409, (202.397, 187.301, 224.652)), (' F 259  ILE  HA ', ' F 603  PHE  HZ ', -0.408, (193.269, 235.571, 282.171)), (' F 381  TYR  CD1', ' F 558  LEU HD22', -0.408, (196.61, 213.13, 242.407)), (' F 423  LEU  HA ', ' F 423  LEU HD23', -0.407, (176.144, 234.066, 238.333)), (' F 227  GLU  HA ', ' F 230  PHE  HB3', -0.407, (203.354, 220.036, 267.438)), (' F 259  ILE HD12', ' F 603  PHE  HZ ', -0.407, (194.036, 235.43, 282.871)), (' F 152  MET  HB2', ' F 152  MET  HE3', -0.406, (173.931, 219.142, 272.469)), (' A 378  LYS  HB2', ' A 378  LYS  HE2', -0.4, (196.379, 202.876, 212.85))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
