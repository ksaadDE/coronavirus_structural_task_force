# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 153 ', 'MET', 0.0005245526001969375, (252.42000000000002, 158.859, 234.345)), ('B', ' 153 ', 'MET', 0.0005277527441166691, (133.575, 158.645, 234.76299999999998)), ('C', ' 153 ', 'MET', 0.000525207612571779, (193.1450000000002, 261.693, 233.76499999999996))]
data['omega'] = []
data['rota'] = [('A', '  51 ', 'THR', 0.0026958901798934676, (220.915, 181.141, 207.37099999999998)), ('A', '  88 ', 'ASP', 0.017320765948441966, (229.93199999999996, 184.635, 221.397)), ('A', ' 153 ', 'MET', 0.0, (252.42000000000002, 158.859, 234.345)), ('A', ' 284 ', 'THR', 0.01709814620983573, (226.343, 167.211, 202.68699999999998)), ('A', ' 567 ', 'ARG', 0.012702421336544721, (203.787, 221.942, 205.45299999999995)), ('A', ' 585 ', 'LEU', 0.0005430092236855491, (215.499, 226.75799999999998, 206.585)), ('A', ' 587 ', 'ILE', 0.041590381072531886, (213.924, 220.55499999999998, 204.47899999999998)), ('A', ' 606 ', 'ASN', 0.0, (232.125, 187.524, 187.409)), ('A', ' 649 ', 'CYS', 0.024211608979385346, (226.305, 207.26399999999998, 190.31299999999996)), ('A', ' 659 ', 'SER', 0.005321201024344191, (227.774, 203.88, 170.945)), ('A', ' 673 ', 'SER', 0.23358511283803085, (228.06899999999996, 195.789, 178.63)), ('A', ' 726 ', 'ILE', 0.01955032021603865, (205.752, 181.421, 170.923)), ('A', ' 805 ', 'ILE', 0.0023959701411998156, (208.212, 168.941, 161.077)), ('A', ' 859 ', 'THR', 0.017871556805778645, (195.82399999999998, 169.646, 194.12899999999996)), ('A', ' 865 ', 'LEU', 0.0006463953644376375, (193.247, 168.453, 176.67)), ('A', ' 921 ', 'LYS', 0.0, (212.534, 173.64299999999994, 143.03599999999997)), ('A', ' 975 ', 'SER', 0.26875239737707013, (202.981, 179.612, 213.966)), ('A', ' 982 ', 'SER', 0.0062262345267500565, (198.94799999999998, 172.75799999999998, 223.99199999999996)), ('A', ' 996 ', 'LEU', 0.02548874948206776, (196.302, 183.98799999999997, 212.11099999999993)), ('A', ' 998 ', 'THR', 0.012520623026658618, (192.767, 186.71099999999998, 209.036)), ('A', '1014 ', 'ARG', 0.0, (197.662, 185.775, 185.28699999999998)), ('A', '1073 ', 'LYS', 0.062147916682301026, (218.357, 197.394, 141.719)), ('A', '1084 ', 'ASP', 0.0014059450830310029, (200.311, 210.246, 120.138)), ('A', '1086 ', 'LYS', 0.003795360441955215, (196.859, 209.903, 124.45099999999998)), ('A', '1098 ', 'ASN', 0.0, (217.925, 201.158, 131.886)), ('A', '1121 ', 'PHE', 0.05033404323862717, (194.825, 201.727, 128.81)), ('A', '1127 ', 'ASP', 0.004198938312116526, (199.687, 217.764, 128.928)), ('A', '1128 ', 'VAL', 0.008658219131064357, (197.573, 216.673, 131.899)), ('A', '1130 ', 'ILE', 0.004188252725218072, (203.291, 216.038, 135.02799999999996)), ('A', '1138 ', 'TYR', 0.146028724690723, (204.035, 198.013, 120.488)), ('B', '  51 ', 'THR', 0.0026958901798934676, (168.635, 174.44399999999993, 207.59999999999997)), ('B', '  88 ', 'ASP', 0.017610782414803076, (167.145, 165.044, 221.73)), ('B', ' 153 ', 'MET', 0.0, (133.575, 158.645, 234.76299999999998)), ('B', ' 284 ', 'THR', 0.017013079826436656, (153.858, 176.67899999999997, 202.899)), ('B', ' 567 ', 'ARG', 0.012699218110249875, (212.524, 168.794, 205.72299999999998)), ('B', ' 585 ', 'LEU', 0.0005336727745372884, (210.821, 156.25799999999995, 206.99099999999996)), ('B', ' 587 ', 'ILE', 0.04163184535471478, (206.242, 160.707, 204.84)), ('B', ' 606 ', 'ASN', 0.0, (168.52999999999997, 161.328, 187.77899999999997)), ('B', ' 649 ', 'CYS', 0.024211608979385346, (188.529, 156.502, 190.727)), ('B', ' 659 ', 'SER', 0.005321201024344191, (184.85499999999996, 156.716, 171.357)), ('B', ' 673 ', 'SER', 0.23183964465923637, (177.71, 160.6, 179.003)), ('B', ' 726 ', 'ILE', 0.019375665081557733, (176.46, 187.027, 171.009)), ('B', ' 805 ', 'ILE', 0.0024125452308423087, (164.423, 191.04699999999997, 161.125)), ('B', ' 859 ', 'THR', 0.017977444249674165, (171.25799999999998, 201.771, 194.058)), ('B', ' 865 ', 'LEU', 0.000674957639410224, (171.50899999999996, 204.41, 176.57)), ('B', ' 921 ', 'LYS', 0.0, (166.317, 184.754, 143.15)), ('B', ' 975 ', 'SER', 0.2698355490501081, (176.30400000000003, 190.8, 214.014)), ('B', ' 982 ', 'SER', 0.00624873068405735, (172.399, 197.833, 223.965)), ('B', ' 996 ', 'LEU', 0.025348146053595345, (183.437, 194.36499999999995, 212.117)), ('B', ' 998 ', 'THR', 0.012165415187799946, (187.563, 196.025, 209.02099999999996)), ('B', '1014 ', 'ARG', 0.0, (184.289, 192.001, 185.31699999999998)), ('B', '1073 ', 'LYS', 0.06073674181812447, (183.95, 167.798, 142.01)), ('B', '1084 ', 'ASP', 0.00139182575952788, (204.10499999999996, 176.735, 120.32)), ('B', '1086 ', 'LYS', 0.003756224506489445, (205.541, 179.941, 124.59799999999997)), ('B', '1098 ', 'ASN', 0.0, (187.418, 166.178, 132.192)), ('B', '1121 ', 'PHE', 0.05043796787823643, (199.488, 185.846, 128.896)), ('B', '1127 ', 'ASP', 0.004191098135983526, (210.928, 173.60299999999998, 129.142)), ('B', '1128 ', 'VAL', 0.00861029462795626, (211.045, 176.011, 132.086)), ('B', '1130 ', 'ILE', 0.004176851284203667, (207.631, 171.41599999999994, 135.267)), ('B', '1138 ', 'TYR', 0.14565747606098664, (191.654, 179.64799999999997, 120.644)), ('C', '  51 ', 'THR', 0.0026958901798934676, (189.172, 223.07999999999998, 207.11999999999995)), ('C', '  88 ', 'ASP', 0.01759063535927663, (181.834, 229.25999999999993, 221.2)), ('C', ' 153 ', 'MET', 0.0, (193.1450000000002, 261.693, 233.76499999999996)), ('C', ' 284 ', 'THR', 0.01722300010357036, (198.48300000000012, 234.69199999999998, 202.22999999999993)), ('C', ' 567 ', 'ARG', 0.012495550130017056, (162.309, 187.889, 205.809)), ('C', ' 585 ', 'LEU', 0.0005484057520217236, (152.31299999999985, 195.654, 207.015)), ('C', ' 587 ', 'ILE', 0.04159589572120729, (158.448, 197.363, 204.817)), ('C', ' 606 ', 'ASN', 0.0, (177.792, 229.476, 187.25799999999998)), ('C', ' 649 ', 'CYS', 0.024211608979385346, (163.617, 214.616, 190.457)), ('C', ' 659 ', 'SER', 0.005321201024344191, (165.56500000000003, 217.436, 171.03999999999996)), ('C', ' 673 ', 'SER', 0.23111156281847337, (172.53300000000002, 221.777, 178.603)), ('C', ' 726 ', 'ILE', 0.019456119209846884, (196.008, 209.529, 170.67699999999996)), ('C', ' 805 ', 'ILE', 0.002413880693602795, (205.472, 217.809, 160.647)), ('C', ' 859 ', 'THR', 0.018002406068066825, (211.466, 206.957, 193.702)), ('C', ' 865 ', 'LEU', 0.0006573000730776963, (213.556, 205.19, 176.227)), ('C', ' 921 ', 'LYS', 0.0, (199.00699999999998, 219.083, 142.679)), ('C', ' 975 ', 'SER', 0.2693987565394477, (199.52, 208.341, 213.68799999999996)), ('C', ' 982 ', 'SER', 0.006270005636712415, (207.60099999999997, 208.331, 223.60899999999995)), ('C', ' 996 ', 'LEU', 0.025626630570325215, (199.029, 200.356, 211.897)), ('C', ' 998 ', 'THR', 0.01200701721447843, (198.389, 195.913, 208.862)), ('C', '1014 ', 'ARG', 0.0, (196.45199999999997, 200.451, 185.103)), ('C', '1073 ', 'LYS', 0.061466770284379156, (175.49800000000002, 212.289, 141.719)), ('C', '1084 ', 'ASP', 0.0013889908500077386, (173.065, 190.08399999999995, 120.32799999999997)), ('C', '1086 ', 'LYS', 0.0036970082047561785, (175.13800000000003, 187.293, 124.634)), ('C', '1098 ', 'ASN', 0.0, (172.32199999999997, 209.96799999999996, 131.943)), ('C', '1121 ', 'PHE', 0.050256913961913355, (183.297, 189.634, 128.86999999999998)), ('C', '1127 ', 'ASP', 0.004170722719552167, (166.97299999999998, 185.86099999999993, 129.229)), ('C', '1128 ', 'VAL', 0.008600475218784629, (169.01099999999997, 184.593, 132.183)), ('C', '1130 ', 'ILE', 0.004174076938026738, (166.754, 189.89, 135.304)), ('C', '1138 ', 'TYR', 0.14582457811071828, (181.81899999999996, 199.409, 120.49499999999998)), ('D', '  80 ', 'MET', 0.2761713006323356, (144.012, 155.29, 246.971)), ('E', '  80 ', 'MET', 0.2777967012708163, (184.87300000000022, 254.43599999999998, 246.26299999999998)), ('F', '  80 ', 'MET', 0.27711158875229347, (250.00800000000007, 169.679, 246.62199999999999))]
data['cbeta'] = []
data['probe'] = [(' A 152  TRP  C  ', ' A 153  MET  HE3', -0.839, (254.542, 158.667, 231.71)), (' C 152  TRP  C  ', ' C 153  MET  HE3', -0.838, (192.228, 263.577, 231.089)), (' B 152  TRP  C  ', ' B 153  MET  HE3', -0.833, (132.009, 157.282, 232.208)), (' A 614  ASP  OD2', ' C 854  LYS  NZ ', -0.798, (215.295, 208.893, 194.142)), (' C1084  ASP  N  ', ' C1084  ASP  OD1', -0.787, (174.013, 191.419, 120.921)), (' B 152  TRP  O  ', ' B 153  MET  HE3', -0.781, (133.233, 157.719, 232.477)), (' A 152  TRP  O  ', ' A 153  MET  HE3', -0.778, (254.045, 159.431, 231.473)), (' A1084  ASP  N  ', ' A1084  ASP  OD1', -0.777, (201.154, 208.667, 120.561)), (' B1084  ASP  N  ', ' B1084  ASP  OD1', -0.776, (202.393, 176.849, 120.628)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.773, (157.12, 191.736, 168.238)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.768, (211.299, 162.875, 168.444)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.766, (209.836, 223.795, 167.693)), (' C 152  TRP  O  ', ' C 153  MET  HE3', -0.766, (191.834, 262.883, 230.869)), (' C 645  THR  OG1', ' C 648  GLY  O  ', -0.765, (163.468, 212.907, 186.887)), (' C 599  THR HG22', ' C 608  VAL HG12', -0.764, (176.707, 224.03, 188.8)), (' B 599  THR HG22', ' B 608  VAL HG12', -0.755, (174.108, 162.947, 189.388)), (' B 645  THR  OG1', ' B 648  GLY  O  ', -0.75, (190.107, 157.313, 187.134)), (' A 599  THR HG22', ' A 608  VAL HG12', -0.749, (227.265, 190.934, 188.568)), (' B 626  ALA  O  ', ' B 634  ARG  NH1', -0.748, (192.345, 138.421, 197.169)), (' A 645  THR  OG1', ' A 648  GLY  O  ', -0.746, (224.844, 208.303, 186.73)), (' C 626  ALA  O  ', ' C 634  ARG  NH1', -0.744, (146.169, 220.342, 196.835)), (' A 626  ALA  O  ', ' A 634  ARG  NH1', -0.742, (240.48, 219.331, 196.172)), (' A 616  ASN  OD1', ' A 644  GLN  NE2', -0.739, (227.688, 212.791, 191.76)), (' B 742  ILE  O  ', ' B1000  ARG  NH1', -0.738, (178.275, 197.943, 209.116)), (' A 742  ILE  O  ', ' A1000  ARG  NH1', -0.737, (195.57, 177.129, 209.104)), (' B 616  ASN  OD1', ' B 644  GLN  NE2', -0.736, (192.576, 152.641, 192.198)), (' C 616  ASN  OD1', ' C 644  GLN  NE2', -0.733, (158.35, 212.944, 191.906)), (' B1019  ARG  NH1', ' C1017  GLU  OE1', -0.732, (191.565, 200.002, 178.432)), (' C 742  ILE  O  ', ' C1000  ARG  NH1', -0.729, (204.685, 203.025, 208.912)), (' F  59  TYR  OH ', ' F  69  ILE  O  ', -0.722, (240.168, 166.149, 250.016)), (' A 561  PRO  O  ', ' A 577  ARG  NH1', -0.719, (207.719, 234.783, 212.447)), (' B 561  PRO  O  ', ' B 577  ARG  NH1', -0.719, (222.065, 159.25, 212.551)), (' A1019  ARG  NH1', ' B1017  GLU  OE1', -0.707, (187.331, 188.027, 178.772)), (' D  59  TYR  OH ', ' D  69  ILE  O  ', -0.706, (145.828, 165.871, 250.487)), (' E  59  TYR  OH ', ' E  69  ILE  O  ', -0.705, (192.953, 247.648, 249.751)), (' C 561  PRO  O  ', ' C 577  ARG  NH1', -0.705, (149.477, 184.423, 212.687)), (' C 606  ASN  N  ', ' C 606  ASN  OD1', -0.7, (177.823, 231.361, 186.024)), (' C 294  ASP  OD1', ' C 297  SER  OG ', -0.697, (178.645, 226.085, 197.068)), (' B 277  LEU HD13', ' B 285  ILE HD13', -0.683, (160.576, 173.76, 204.871)), (' C 277  LEU HD13', ' C 285  ILE HD13', -0.682, (192.296, 229.762, 204.372)), (' B 606  ASN  N  ', ' B 606  ASN  OD1', -0.671, (166.86, 160.539, 186.65)), (' A 606  ASN  N  ', ' A 606  ASN  OD1', -0.668, (233.667, 186.458, 186.238)), (' A 277  LEU HD13', ' A 285  ILE HD13', -0.664, (224.983, 175.037, 204.81)), (' C 376  THR HG22', ' C 435  ALA  HB3', -0.663, (144.954, 200.602, 254.319)), (' A 773  GLU  O  ', ' A 777  ASN  ND2', -0.661, (190.131, 179.854, 178.08)), (' B 773  GLU  O  ', ' B 777  ASN  ND2', -0.659, (183.203, 200.998, 177.832)), (' A 376  THR HG22', ' A 435  ALA  HB3', -0.657, (222.78, 231.557, 253.907)), (' A1017  GLU  OE1', ' C1019  ARG  NH1', -0.657, (199.506, 189.992, 179.059)), (' A 703  ASN  OD1', ' A 704  SER  N  ', -0.655, (220.758, 204.758, 153.975)), (' C 773  GLU  O  ', ' C 777  ASN  ND2', -0.654, (204.728, 196.597, 177.669)), (' B 703  ASN  OD1', ' B 704  SER  N  ', -0.648, (189.318, 162.371, 154.48)), (' B 376  THR HG22', ' B 435  ALA  HB3', -0.645, (211.37, 147.472, 254.362)), (' C 703  ASN  OD1', ' C 704  SER  N  ', -0.644, (168.086, 210.688, 154.239)), (' E  67  PHE  CZ ', ' E  80  MET  HE3', -0.641, (181.227, 254.158, 249.527)), (' B 159  VAL HG11', ' B 241  LEU HD13', -0.64, (147.734, 158.314, 232.062)), (' D  67  PHE  CZ ', ' D  80  MET  HE3', -0.639, (145.614, 152.079, 250.328)), (' A 294  ASP  OD1', ' A 297  SER  OG ', -0.639, (228.78, 188.529, 197.238)), (' A 159  VAL HG11', ' A 241  LEU HD13', -0.637, (244.953, 170.988, 231.257)), (' B 294  ASP  OD1', ' B 297  SER  OG ', -0.635, (171.009, 163.85, 197.406)), (' C 159  VAL HG11', ' C 241  LEU HD13', -0.63, (186.19, 249.186, 230.82)), (' F  67  PHE  CZ ', ' F  80  MET  HE3', -0.628, (251.994, 172.678, 249.918)), (' C1028  LYS  O  ', ' C1032  CYS  N  ', -0.62, (199.107, 200.679, 160.682)), (' B 630  THR HG21', ' B 634  ARG  HA ', -0.619, (193.744, 141.191, 190.427)), (' C 630  THR HG21', ' C 634  ARG  HA ', -0.619, (147.757, 217.177, 189.917)), (' A 717  ASN  OD1', ' A 718  PHE  N  ', -0.618, (215.256, 186.822, 144.659)), (' B 717  ASN  OD1', ' B 718  PHE  N  ', -0.618, (176.324, 175.904, 144.852)), (' B 905  ARG  NH1', ' B1049  LEU  O  ', -0.618, (178.84, 192.071, 152.4)), (' A 905  ARG  NH1', ' A1049  LEU  O  ', -0.616, (200.03, 180.887, 152.257)), (' C 905  ARG  NH1', ' C1049  LEU  O  ', -0.614, (199.099, 204.732, 152.053)), (' B 984  LEU HD21', ' B 988  GLU  OE1', -0.614, (182.453, 194.706, 224.446)), (' C 984  LEU HD21', ' C 988  GLU  OE1', -0.611, (199.772, 200.663, 224.385)), (' B1028  LYS  O  ', ' B1032  CYS  N  ', -0.609, (182.387, 193.976, 160.914)), (' C 438  SER  OG ', ' C 442  ASP  OD2', -0.609, (135.23, 192.829, 256.056)), (' C 717  ASN  OD1', ' C 718  PHE  N  ', -0.609, (186.18, 214.906, 144.643)), (' A 630  THR HG21', ' A 634  ARG  HA ', -0.607, (236.719, 219.753, 189.493)), (' B1014  ARG  HG3', ' B1014  ARG HH11', -0.604, (182.663, 190.296, 188.792)), (' C 599  THR HG22', ' C 608  VAL  CG1', -0.603, (176.252, 223.601, 189.286)), (' A 599  THR HG22', ' A 608  VAL  CG1', -0.603, (227.868, 191.618, 189.36)), (' A 984  LEU HD21', ' A 988  GLU  OE1', -0.602, (196.523, 183.007, 224.414)), (' C 994  ASP  O  ', ' C 998  THR  OG1', -0.6, (198.917, 195.276, 211.384)), (' A1014  ARG  HG3', ' A1014  ARG HH11', -0.6, (199.858, 184.862, 188.326)), (' B 994  ASP  O  ', ' B 998  THR  OG1', -0.598, (187.907, 196.712, 211.57)), (' A 994  ASP  O  ', ' A 998  THR  OG1', -0.596, (192.174, 186.568, 211.481)), (' C1014  ARG  HG3', ' C1014  ARG HH11', -0.594, (195.803, 202.611, 188.603)), (' C 150  LYS  O  ', ' C 151  SER  OG ', -0.587, (197.48, 264.787, 228.165)), (' A 150  LYS  O  ', ' A 151  SER  OG ', -0.586, (252.926, 153.067, 228.615)), (' C 687  VAL  O  ', ' C 687  VAL HG12', -0.586, (169.522, 238.224, 182.342)), (' A 687  VAL  O  ', ' A 687  VAL HG12', -0.586, (243.426, 189.686, 182.723)), (' A1028  LYS  O  ', ' A1032  CYS  N  ', -0.584, (196.616, 182.887, 160.893)), (' C1008  VAL  O  ', ' C1012  LEU HD23', -0.581, (198.82, 196.176, 191.151)), (' B 599  THR HG22', ' B 608  VAL  CG1', -0.581, (174.307, 162.931, 189.637)), (' B 687  VAL  O  ', ' B 687  VAL HG12', -0.578, (165.029, 149.757, 182.954)), (' C 916  LEU  O  ', ' C 920  GLN  N  ', -0.577, (196.599, 214.764, 140.558)), (' C 152  TRP  O  ', ' C 154  GLU  N  ', -0.577, (193.264, 261.459, 231.1)), (' B1008  VAL  O  ', ' B1012  LEU HD23', -0.576, (186.774, 196.81, 191.11)), (' A 950  ASP  OD2', ' A 954  GLN  NE2', -0.574, (206.46, 185.644, 183.888)), (' C 950  ASP  OD2', ' C 954  GLN  NE2', -0.574, (192.123, 208.076, 183.674)), (' A 457  ARG  NH1', ' A 459  SER  OG ', -0.573, (197.823, 231.418, 266.866)), (' A 916  LEU  O  ', ' A 920  GLN  N  ', -0.573, (209.386, 177.873, 140.671)), (' B 457  ARG  NH1', ' B 459  SER  OG ', -0.573, (223.304, 170.11, 267.363)), (' C 457  ARG  NH1', ' C 459  SER  OG ', -0.573, (157.929, 178.43, 267.3)), (' A 152  TRP  O  ', ' A 154  GLU  N  ', -0.572, (251.723, 158.849, 231.96)), (' A1008  VAL  O  ', ' A1012  LEU HD23', -0.571, (192.758, 185.581, 191.281)), (' B 950  ASP  OD2', ' B 954  GLN  NE2', -0.569, (179.951, 183.913, 183.626)), (' B 152  TRP  O  ', ' B 154  GLU  N  ', -0.568, (133.644, 158.952, 231.989)), (' B 916  LEU  O  ', ' B 920  GLN  N  ', -0.568, (171.203, 184.912, 140.861)), (' F  67  PHE  CE1', ' F  80  MET  HE3', -0.567, (251.132, 172.347, 249.435)), (' A 870  ILE  O  ', ' A 874  THR HG23', -0.567, (198.416, 169.869, 167.858)), (' B 870  ILE  O  ', ' B 874  THR HG23', -0.566, (170.67, 198.996, 167.564)), (' C 870  ILE  O  ', ' C 874  THR HG23', -0.566, (209.287, 208.322, 167.209)), (' D  67  PHE  CE1', ' D  80  MET  HE3', -0.565, (145.492, 152.492, 249.907)), (' B 914  ASN  OD1', ' B 915  VAL  N  ', -0.562, (178.14, 184.014, 137.651)), (' C 914  ASN  OD1', ' C 915  VAL  N  ', -0.561, (192.378, 209.143, 137.393)), (' E  67  PHE  CE1', ' E  80  MET  HE3', -0.56, (181.976, 254.134, 249.043)), (' A 914  ASN  OD1', ' A 915  VAL  N  ', -0.557, (207.085, 184.142, 137.478)), (' F  84  LYS  N  ', ' F  87  ASP  OD2', -0.553, (253.926, 178.179, 249.04)), (' E  84  LYS  N  ', ' E  87  ASP  OD2', -0.553, (175.513, 253.469, 248.791)), (' B 438  SER  OG ', ' B 442  ASP  OD2', -0.545, (222.485, 143.064, 255.82)), (' B 123  ALA  O  ', ' B 124  THR  OG1', -0.542, (137.049, 167.114, 220.286)), (' A 123  ALA  O  ', ' A 124  THR  OG1', -0.541, (243.278, 157.646, 219.961)), (' B 873  TYR  CE2', ' C 699  LEU HD11', -0.541, (171.631, 206.27, 169.231)), (' B 103  GLY  HA3', ' B 241  LEU HD12', -0.539, (149.68, 160.076, 229.726)), (' B 856  ASN  O  ', ' B 856  ASN  OD1', -0.534, (173.009, 199.572, 201.371)), (' C 856  ASN  O  ', ' C 856  ASN  OD1', -0.534, (208.351, 206.343, 201.303)), (' A  38  TYR  CD1', ' A 285  ILE HD12', -0.532, (226.346, 172.041, 206.416)), (' C  38  TYR  CD1', ' C 285  ILE HD12', -0.532, (194.43, 231.915, 205.643)), (' A 103  GLY  HA3', ' A 241  LEU HD12', -0.529, (243.301, 171.758, 228.835)), (' B  38  TYR  CD1', ' B 285  ILE HD12', -0.528, (158.05, 174.404, 206.679)), (' A 978  ASN  O  ', ' A 982  SER  OG ', -0.528, (200.096, 172.587, 221.261)), (' A 856  ASN  O  ', ' A 856  ASN  OD1', -0.526, (196.956, 172.211, 201.541)), (' C 978  ASN  O  ', ' C 982  SER  OG ', -0.526, (207.265, 209.528, 220.75)), (' C 103  GLY  HA3', ' C 241  LEU HD12', -0.525, (186.271, 247.129, 228.952)), (' B  37  TYR  OH ', ' B  54  LEU  O  ', -0.525, (164.464, 169.177, 213.845)), (' B 959  LEU  O  ', ' B 963  VAL HG23', -0.525, (173.799, 191.885, 197.893)), (' A 959  LEU  O  ', ' A 963  VAL HG23', -0.522, (203.027, 176.794, 197.76)), (' C 959  LEU  O  ', ' C 963  VAL HG23', -0.518, (201.64, 209.784, 197.535)), (' B 960  ASN  O  ', ' B 964  LYS  HG3', -0.518, (173.808, 187.343, 200.036)), (' C 960  ASN  O  ', ' C 964  LYS  HG3', -0.518, (198.067, 211.887, 199.358)), (' A 960  ASN  O  ', ' A 964  LYS  HG3', -0.517, (206.813, 178.814, 199.644)), (' A 540  ASN  OD1', ' A 541  PHE  N  ', -0.516, (215.66, 214.411, 213.992)), (' A 568  ASP  OD1', ' A 569  ILE  N  ', -0.512, (203.668, 219.466, 199.957)), (' A 755  GLN  OE1', ' B 971  GLY  N  ', -0.511, (183.303, 186.101, 213.688)), (' B 978  ASN  O  ', ' B 982  SER  OG ', -0.51, (171.656, 196.881, 221.222)), (' D  84  LYS  N  ', ' D  87  ASP  OD2', -0.51, (149.372, 147.77, 249.426)), (' C 540  ASN  OD1', ' C 541  PHE  N  ', -0.509, (162.98, 202.16, 214.347)), (' C1014  ARG  CG ', ' C1014  ARG HH11', -0.509, (195.881, 202.691, 188.053)), (' B 540  ASN  OD1', ' B 541  PHE  N  ', -0.509, (200.431, 162.054, 214.338)), (' C 108  THR  O  ', ' C 237  ARG  NH1', -0.508, (176.777, 235.665, 234.688)), (' B1014  ARG  CG ', ' B1014  ARG HH11', -0.507, (182.476, 190.457, 188.315)), (' A  37  TYR  OH ', ' A  54  LEU  O  ', -0.507, (227.788, 180.157, 213.438)), (' B 777  ASN  O  ', ' B 781  VAL HG23', -0.503, (180.77, 199.723, 172.098)), (' C 777  ASN  O  ', ' C 781  VAL HG23', -0.502, (205.15, 199.414, 172.222)), (' A1014  ARG  CG ', ' A1014  ARG HH11', -0.499, (199.984, 185.067, 188.245)), (' B 108  THR  O  ', ' B 237  ARG  NH1', -0.497, (164.426, 157.379, 235.385)), (' A 777  ASN  O  ', ' A 781  VAL HG23', -0.497, (192.608, 178.927, 172.231)), (' A 108  THR  O  ', ' A 237  ARG  NH1', -0.493, (237.964, 186.123, 234.882)), (' C 123  ALA  O  ', ' C 124  THR  OG1', -0.486, (198.771, 254.149, 219.377)), (' C 568  ASP  OD1', ' C 569  ILE  N  ', -0.486, (164.383, 188.859, 200.303)), (' A 726  ILE  CD1', ' A 726  ILE  N  ', -0.485, (207.051, 181.483, 169.537)), (' A 438  SER  OG ', ' A 442  ASP  OD2', -0.484, (221.558, 243.735, 255.276)), (' A 873  TYR  CE2', ' B 699  LEU HD11', -0.484, (191.309, 167.549, 169.5)), (' A 148  ASN  OD1', ' A 149  ASN  N  ', -0.479, (261.438, 153.653, 228.225)), (' C 726  ILE  CD1', ' C 726  ILE  N  ', -0.479, (195.286, 211.043, 169.282)), (' B 726  ILE  CD1', ' B 726  ILE  N  ', -0.478, (175.911, 185.724, 169.625)), (' C  37  TYR  OH ', ' C  54  LEU  O  ', -0.477, (186.706, 229.503, 213.263)), (' C1009  THR  O  ', ' C1013  ILE HG12', -0.477, (195.054, 196.787, 189.621)), (' C 148  ASN  OD1', ' C 149  ASN  N  ', -0.476, (193.119, 272.068, 227.605)), (' C1028  LYS  NZ ', ' C1042  PHE  O  ', -0.476, (192.483, 201.971, 163.787)), (' B 148  ASN  OD1', ' B 149  ASN  N  ', -0.473, (124.666, 153.71, 228.447)), (' B 568  ASP  OD1', ' B 569  ILE  N  ', -0.473, (210.627, 170.051, 200.316)), (' C 833  PHE  HB3', ' C 835  MET  HE3', -0.472, (215.078, 232.522, 179.906)), (' B 984  LEU HD23', ' B 989  ALA  HB2', -0.472, (180.689, 196.098, 222.9)), (' B  73  THR  O  ', ' B  73  THR HG22', -0.471, (154.812, 129.269, 222.78)), (' A  73  THR  O  ', ' A  73  THR HG22', -0.471, (267.51, 191.843, 222.27)), (' B1009  THR  O  ', ' B1013  ILE HG12', -0.471, (188.045, 192.495, 189.813)), (' A 984  LEU HD23', ' A 989  ALA  HB2', -0.47, (195.999, 180.424, 222.834)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.47, (184.567, 187.653, 164.003)), (' C 661  GLU  O  ', ' C 695  TYR  OH ', -0.469, (172.019, 218.501, 173.706)), (' A 439  ASN  OD1', ' A 443  SER  OG ', -0.469, (227.026, 247.087, 257.087)), (' B 833  PHE  HB3', ' B 835  MET  HE3', -0.468, (147.193, 192.136, 180.644)), (' A 833  PHE  HB3', ' A 835  MET  HE3', -0.468, (216.183, 153.943, 181.002)), (' A1009  THR  O  ', ' A1013  ILE HG12', -0.467, (195.364, 188.911, 189.917)), (' B 786  LYS  O  ', ' C 701  ALA  N  ', -0.466, (172.015, 211.782, 163.282)), (' A 880  GLY  O  ', ' A 884  SER  OG ', -0.466, (193.733, 171.61, 153.568)), (' C 984  LEU HD23', ' C 989  ALA  HB2', -0.465, (201.883, 201.839, 222.72)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.465, (201.079, 187.768, 164.335)), (' B 854  LYS  NZ ', ' C 614  ASP  OD2', -0.463, (167.524, 204.228, 194.555)), (' A 109  THR  OG1', ' A 111  ASP  OD1', -0.463, (235.351, 182.449, 240.331)), (' C  31  SER  HG ', ' C  60  SER  N  ', -0.462, (175.976, 235.911, 205.441)), (' C  73  THR  O  ', ' C  73  THR HG22', -0.462, (157.177, 257.885, 222.121)), (' A 367  VAL  O  ', ' A 367  VAL HG12', -0.46, (225.281, 234.105, 235.948)), (' A  31  SER  HG ', ' A  60  SER  N  ', -0.46, (239.187, 186.222, 205.789)), (' B  31  SER  HG ', ' B  60  SER  N  ', -0.46, (164.115, 156.383, 205.892)), (' B 324  GLU  N  ', ' B 324  GLU  OE1', -0.459, (193.433, 152.787, 216.149)), (' B 439  ASN  OD1', ' B 443  SER  OG ', -0.458, (223.173, 136.73, 257.673)), (' B 661  GLU  O  ', ' B 695  TYR  OH ', -0.457, (180.706, 161.892, 174.172)), (' A 661  GLU  O  ', ' A 695  TYR  OH ', -0.455, (225.515, 197.723, 173.683)), (' C 439  ASN  OD1', ' C 443  SER  OG ', -0.455, (129.468, 195.393, 257.746)), (' C 367  VAL  O  ', ' C 367  VAL HG12', -0.455, (141.45, 200.229, 236.329)), (' A 324  GLU  N  ', ' A 324  GLU  OE1', -0.454, (226.98, 213.218, 215.66)), (' A 699  LEU HD11', ' C 873  TYR  CE2', -0.454, (215.107, 204.12, 169.115)), (' C  34  ARG  NE ', ' C 191  GLU  OE2', -0.453, (187.757, 242.985, 205.879)), (' C 324  GLU  N  ', ' C 324  GLU  OE1', -0.452, (158.472, 212.45, 215.917)), (' B 367  VAL  O  ', ' B 367  VAL HG12', -0.451, (212.731, 144.714, 236.394)), (' A 744  GLY  O  ', ' A 745  ASP  OD1', -0.45, (193.928, 169.166, 213.121)), (' A 854  LYS  NZ ', ' B 614  ASP  OD2', -0.448, (195.482, 164.679, 194.877)), (' A  34  ARG  NE ', ' A 191  GLU  OE2', -0.447, (238.829, 172.537, 206.281)), (' A 880  GLY  O  ', ' A 884  SER  N  ', -0.446, (194.85, 171.479, 152.385)), (' B 755  GLN  OE1', ' C 971  GLY  N  ', -0.445, (191.832, 204.649, 213.736)), (' B 744  GLY  O  ', ' B 745  ASP  OD1', -0.442, (171.707, 203.719, 212.862)), (' B 880  GLY  O  ', ' B 884  SER  OG ', -0.442, (173.898, 202.191, 153.573)), (' A 770  ILE HD11', ' A1012  LEU HD22', -0.442, (191.211, 184.053, 189.089)), (' A 567  ARG  HB2', ' C  42  VAL HG13', -0.439, (201.871, 223.058, 206.723)), (' C 744  GLY  O  ', ' C 745  ASP  OD1', -0.439, (213.105, 205.688, 212.542)), (' B 880  GLY  O  ', ' B 884  SER  N  ', -0.438, (173.078, 201.156, 152.351)), (' C 880  GLY  O  ', ' C 884  SER  N  ', -0.436, (209.883, 204.992, 152.015)), (' B  34  ARG  NE ', ' B 191  GLU  OE2', -0.433, (152.162, 163.344, 206.596)), (' A  76  THR  O  ', ' A  76  THR HG22', -0.433, (255.006, 194.0, 223.213)), (' B  76  THR  O  ', ' B  76  THR HG22', -0.433, (162.694, 138.661, 223.829)), (' B 591  SER  O  ', ' B 592  PHE  HB2', -0.43, (194.611, 164.521, 199.339)), (' C 770  ILE HD11', ' C1012  LEU HD22', -0.43, (201.255, 195.719, 188.925)), (' A 786  LYS  O  ', ' B 701  ALA  N  ', -0.429, (186.32, 165.14, 163.631)), (' C 591  SER  O  ', ' C 592  PHE  HB2', -0.429, (167.33, 205.771, 198.982)), (' B1004  LEU  O  ', ' B1008  VAL HG23', -0.428, (184.553, 196.756, 196.772)), (' A1004  LEU  O  ', ' A1008  VAL HG23', -0.427, (193.768, 183.866, 197.099)), (' C 123  ALA  O  ', ' C 125  ASN  ND2', -0.425, (199.504, 253.378, 221.345)), (' B 324  GLU  HG2', ' B 325  SER  N  ', -0.425, (195.339, 154.55, 217.777)), (' C  76  THR  O  ', ' C  76  THR HG22', -0.425, (161.153, 246.087, 223.515)), (' C1004  LEU  O  ', ' C1008  VAL HG23', -0.424, (200.177, 198.134, 196.854)), (' B 770  ILE HD11', ' B1012  LEU HD22', -0.423, (185.934, 198.495, 189.121)), (' B 123  ALA  O  ', ' B 125  ASN  ND2', -0.421, (137.366, 168.344, 222.125)), (' A 591  SER  O  ', ' A 592  PHE  HB2', -0.42, (216.358, 208.591, 198.945)), (' B 687  VAL  CG1', ' B 687  VAL  O  ', -0.42, (164.826, 150.52, 183.299)), (' A 324  GLU  HG2', ' A 325  SER  N  ', -0.42, (224.832, 214.395, 217.267)), (' A 123  ALA  O  ', ' A 125  ASN  ND2', -0.418, (242.085, 157.175, 221.967)), (' B 332  ILE  O  ', ' B 333  THR  OG1', -0.416, (215.06, 154.116, 227.185)), (' C 324  GLU  HG2', ' C 325  SER  N  ', -0.414, (158.65, 210.177, 217.516)), (' B 817  PHE  O  ', ' B 821  LEU HD23', -0.413, (161.055, 187.23, 167.086)), (' A 250  THR  HB ', ' A 251  PRO  HD2', -0.413, (266.725, 169.575, 218.653)), (' C 250  THR  HB ', ' C 251  PRO  HD2', -0.411, (176.699, 268.436, 218.563)), (' A  53  ASP  OD1', ' A  54  LEU  N  ', -0.41, (224.886, 182.627, 214.161)), (' C  53  ASP  OD1', ' C  54  LEU  N  ', -0.41, (185.92, 225.658, 213.919)), (' B 740  MET  HE1', ' C 592  PHE  CG ', -0.409, (169.214, 203.537, 201.508)), (' B  80  ASP  O  ', ' B  81  ASN  OD1', -0.409, (156.669, 147.937, 229.9)), (' C 817  PHE  CE2', ' C 821  LEU HD21', -0.408, (203.245, 225.376, 165.4)), (' A 817  PHE  O  ', ' A 821  LEU HD23', -0.407, (213.678, 167.995, 167.008)), (' C 726  ILE  N  ', ' C 726  ILE HD12', -0.405, (195.421, 210.592, 169.344)), (' A 687  VAL  CG1', ' A 687  VAL  O  ', -0.405, (243.173, 189.672, 182.723)), (' C  80  ASP  O  ', ' C  81  ASN  OD1', -0.405, (172.268, 247.063, 229.221)), (' B 726  ILE  N  ', ' B 726  ILE HD12', -0.405, (175.441, 185.919, 169.534)), (' C 650  LEU HD22', ' C 653  ALA  HB3', -0.404, (166.275, 220.278, 185.362)), (' A  80  ASP  O  ', ' A  81  ASN  OD1', -0.402, (250.089, 184.041, 229.269)), (' B  31  SER  OG ', ' B  60  SER  N  ', -0.402, (164.16, 156.789, 206.208)), (' B 817  PHE  CE2', ' B 821  LEU HD21', -0.401, (159.072, 185.512, 165.577)), (' B 250  THR  HB ', ' B 251  PRO  HD2', -0.401, (135.761, 141.081, 219.461)), (' C 817  PHE  O  ', ' C 821  LEU HD23', -0.4, (203.806, 222.659, 166.446))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
