# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  97 ', 'VAL', 0.24340818393750116, (149.674, 132.459, 118.799)), ('A', ' 215 ', 'TYR', 0.0019587103452067822, (146.0199999999999, 134.468, 183.33600000000004)), ('B', '  97 ', 'VAL', 0.21867958564223589, (141.418, 158.626, 118.867)), ('B', ' 215 ', 'TYR', 0.0019587103452067822, (145.0319999999999, 156.609, 183.32200000000003))]
data['cbeta'] = []
data['probe'] = [(' B 218  GLN  HB2', ' B 230  PHE  HB2', -0.627, (148.907, 146.534, 182.172)), (' A 218  GLN  HB2', ' A 230  PHE  HB2', -0.621, (142.164, 144.644, 182.16)), (' B 238  ASP  N  ', ' B 238  ASP  OD1', -0.553, (137.75, 166.918, 177.952)), (' B 183  ASP  N  ', ' B 183  ASP  OD1', -0.549, (159.721, 145.537, 173.008)), (' A 127  LEU HD23', ' A 139  LEU HD21', -0.543, (136.991, 131.645, 151.421)), (' A 238  ASP  N  ', ' A 238  ASP  OD1', -0.542, (153.445, 124.339, 178.075)), (' A 183  ASP  N  ', ' A 183  ASP  OD1', -0.538, (131.57, 146.06, 173.165)), (' A 126  ARG  NH1', ' A 138  PRO  O  ', -0.527, (141.435, 136.456, 155.018)), (' B 119  ASN  OD1', ' B 122  ARG  NH1', -0.524, (145.748, 155.703, 145.552)), (' A 119  ASN  OD1', ' A 122  ARG  NH1', -0.503, (145.373, 135.282, 145.557)), (' B 126  ARG  NH1', ' B 138  PRO  O  ', -0.483, (149.686, 154.406, 155.179)), (' B 150  HIS  O  ', ' B 198  LYS  NZ ', -0.465, (158.333, 162.426, 174.131)), (' A 170  THR HG22', ' A 230  PHE  HD1', -0.464, (141.63, 146.141, 177.552)), (' A 103  ALA  HA ', ' A 106  LEU HD12', -0.454, (159.157, 130.94, 122.954)), (' B 170  THR HG22', ' B 230  PHE  HD1', -0.448, (149.543, 144.852, 178.033)), (' A 215  TYR  HA ', ' A 215  TYR  HD1', -0.429, (146.36, 132.805, 183.667)), (' A  63  ILE HG21', ' A  74  SER  HB3', -0.428, (136.385, 147.933, 149.381)), (' A 164  THR  HB ', ' B 185  GLN HE22', -0.422, (152.542, 140.558, 171.725)), (' A  75  LYS  HA ', ' A  75  LYS  HD3', -0.421, (138.426, 141.765, 148.208)), (' A 161  ASN  HB3', ' B 188  GLY  HA3', -0.418, (150.006, 142.255, 165.362)), (' B  75  LYS  HA ', ' B  75  LYS  HD3', -0.415, (152.642, 149.385, 148.144)), (' A 150  HIS  O  ', ' A 198  LYS  NZ ', -0.412, (133.046, 128.541, 174.211)), (' A  83  LEU  HA ', ' A  83  LEU HD23', -0.41, (139.354, 136.047, 136.419)), (' A 188  GLY  HA3', ' B 161  ASN  HB3', -0.41, (141.013, 148.947, 164.962)), (' B  42  PRO  HG2', ' B  45  TRP  HD1', -0.408, (153.769, 151.008, 119.118)), (' A  85  LEU HD22', ' B  57  GLN  HG2', -0.405, (146.389, 141.371, 137.948)), (' B  63  ILE HG21', ' B  74  SER  HB3', -0.405, (154.771, 143.13, 149.24)), (' A 215  TYR  HD2', ' B 225  VAL HG22', -0.402, (149.974, 135.848, 182.896)), (' A 225  VAL HG22', ' B 215  TYR  HD2', -0.401, (140.995, 154.838, 182.719))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
