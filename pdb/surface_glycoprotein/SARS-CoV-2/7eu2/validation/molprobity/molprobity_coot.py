# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 210 ', 'PRO', None, (-0.555, -39.715, 28.963)), ('B', '  32 ', 'PRO', None, (-7.6460000000000035, -68.078, 26.194999999999986)), ('D', ' 210 ', 'PRO', None, (7.922, -24.458, 13.154)), ('E', '  32 ', 'PRO', None, (16.26000000000001, -28.089000000000024, -14.337))]
data['rota'] = [('A', ' 234 ', 'ARG', 0.0, (3.0379999999999976, -51.49, 31.015)), ('D', '  12 ', 'VAL', 0.036962086663882954, (25.22999999999999, -24.141000000000002, -12.971)), ('D', '  13 ', 'SER', 0.05587260820902884, (27.088999999999995, -24.46900000000001, -16.145)), ('D', '  14 ', 'ARG', 0.07869415106650302, (26.30199999999999, -21.41, -18.18)), ('D', '  17 ', 'ARG', 0.18564630010453284, (31.71399999999999, -17.456, -21.560999999999986)), ('D', '  87 ', 'GLN', 0.2977232665280176, (29.074, -35.11, -22.725)), ('D', ' 105 ', 'SER', 0.007981801172718406, (17.642999999999986, -31.763000000000023, 23.091)), ('F', '   8 ', 'LYS', 0.0, (37.151, -32.176, -6.000999999999997))]
data['cbeta'] = []
data['probe'] = [(' D  73  THR  HA ', ' F   8  LYS  HZ1', -1.082, (36.67, -26.298, -6.526)), (' D  73  THR  CA ', ' F   8  LYS  HZ1', -0.978, (36.011, -26.826, -6.795)), (' D  73  THR HG23', ' F   8  LYS  NZ ', -0.939, (35.962, -28.472, -5.92)), (' D  73  THR HG23', ' F   8  LYS  HZ3', -0.923, (35.943, -28.939, -5.926)), (' D  73  THR  HA ', ' F   8  LYS  NZ ', -0.91, (37.123, -27.274, -7.128)), (' D  45  MET  H  ', ' D  64  THR HG22', -0.844, (30.729, -13.071, 1.452)), (' E  25  CYS  HB2', ' E  39  LEU HD21', -0.818, (3.96, -15.707, -8.813)), (' A  35  ARG HH11', ' A  48  ARG HH12', -0.718, (-13.271, -54.059, 42.345)), (' A 128  GLU  OE2', ' D 222  GLU  HG3', -0.716, (-13.008, -46.003, 9.664)), (' D  14  ARG HH22', ' D  39  ASP  CG ', -0.705, (24.993, -14.341, -13.039)), (' D 155  GLN  NE2', ' F   7  TYR  OH ', -0.701, (40.566, -32.632, 3.641)), (' D  73  THR  CG2', ' F   8  LYS  NZ ', -0.691, (35.798, -28.47, -6.122)), (' D 215  LEU HD22', ' D 261  VAL HG22', -0.684, (-4.594, -28.583, 9.544)), (' D  33  PHE  HD2', ' D  52  ILE HD12', -0.681, (24.146, -16.24, 9.601)), (' D  97  ARG  HD3', ' D 116  TYR  CZ ', -0.681, (30.415, -30.901, -2.876)), (' D  60  TRP  O  ', ' D  64  THR HG23', -0.662, (33.15, -12.727, 4.031)), (' D 187  THR  HB ', ' D 272  LEU HD21', -0.648, (-8.353, -24.684, 11.047)), (' B  24  ASN  HB3', ' B  65  LEU HD11', -0.637, (2.627, -55.06, 37.726)), (' A  70  HIS  CE1', ' C   6  ASN HD21', -0.633, (-25.61, -52.66, 27.822)), (' D  14  ARG  NH2', ' D  39  ASP  OD2', -0.631, (24.392, -14.77, -13.243)), (' D  73  THR  CA ', ' F   8  LYS  NZ ', -0.623, (36.27, -27.529, -6.823)), (' A  76  VAL HG11', ' C   8  LYS  HD3', -0.622, (-31.052, -63.431, 23.683)), (' D 231  VAL HG11', ' E   8  GLN HE22', -0.621, (-0.596, -25.243, -1.864)), (' D  55  GLU  OE2', ' D 170  ARG  NE ', -0.621, (28.752, -15.851, 16.481)), (' A 215  LEU HD12', ' A 243  LYS  HD3', -0.618, (8.696, -47.236, 24.727)), (' D  87  GLN  NE2', ' D 118  TYR  OH ', -0.615, (27.077, -33.241, -17.225)), (' E  89  GLN  HG3', ' E  90  PRO  HD2', -0.614, (3.327, -20.376, -23.812)), (' E  16  GLU  OE1', ' E  19  LYS  NZ ', -0.613, (-9.81, -7.515, 5.562)), (' D 123  TYR  CE2', ' F   9  LEU HD23', -0.608, (31.004, -36.502, -7.965)), (' D  73  THR  CB ', ' F   8  LYS  HZ1', -0.604, (36.009, -27.231, -5.843)), (' E  10  TYR  HA ', ' E  99  MET  HE2', -0.604, (-3.229, -17.68, -3.082)), (' B  29  GLY  HA2', ' B  61  SER  HB2', -0.595, (-3.234, -60.715, 23.774)), (' A 138  MET  SD ', ' A 141  GLN  NE2', -0.59, (-23.288, -64.914, 4.748)), (' D 204  TRP  HH2', ' E  99  MET  SD ', -0.588, (-5.655, -20.221, -0.586)), (' D 189  MET  HE2', ' D 274  TRP  HB2', -0.582, (-16.445, -26.995, 6.875)), (' A 220  ASP  OD1', ' A 256  ARG  HG2', -0.581, (28.308, -42.706, 15.272)), (' D 202  ARG  NH1', ' E  98  ASP  O  ', -0.579, (-9.188, -22.077, -2.161)), (' D 234  ARG  NH2', ' D 242  GLN  OE1', -0.578, (-0.43, -19.409, 1.247)), (' A 108  ARG  HB2', ' D 273  ARG HH12', -0.576, (-16.581, -31.678, 17.646)), (' D  14  ARG  NH2', ' D  39  ASP  OD1', -0.57, (26.111, -15.412, -13.085)), (' B  37  VAL HG22', ' B  82  VAL HG22', -0.564, (1.158, -65.004, 35.298)), (' D  73  THR HG23', ' F   8  LYS  HZ1', -0.564, (36.56, -27.584, -6.169)), (' D  44  ARG  HB3', ' D  64  THR HG21', -0.556, (32.166, -11.087, 1.972)), (' D  73  THR  CG2', ' F   8  LYS  HZ1', -0.549, (36.615, -27.49, -6.042)), (' D  33  PHE  CD2', ' D  52  ILE HD12', -0.549, (24.291, -17.183, 9.54)), (' A 108  ARG  HB2', ' D 273  ARG  NH1', -0.548, (-17.189, -31.763, 17.777)), (' A 218  GLN  OE1', ' A 260  HIS  ND1', -0.547, (17.273, -40.366, 18.766)), (' A 187  THR  HB ', ' A 272  LEU HD11', -0.546, (14.641, -40.42, 29.341)), (' A 129  ASP  HB2', ' D 256  ARG HH12', -0.545, (-21.962, -42.908, 7.996)), (' A  35  ARG  HG2', ' A  36  PHE  N  ', -0.545, (-16.179, -53.991, 38.128)), (' A   7  TYR  CE1', ' C   2  ILE HG22', -0.541, (-20.164, -48.299, 31.063)), (' A 106  ASP  OD2', ' D 273  ARG  NH1', -0.539, (-15.614, -30.526, 16.685)), (' A  35  ARG  HD2', ' A  48  ARG  NH1', -0.533, (-13.226, -53.125, 40.904)), (' D  24  ALA  HB3', ' D  36  PHE  HB3', -0.531, (26.683, -18.037, -1.387)), (' D 116  TYR  CE2', ' F   9  LEU HD11', -0.522, (31.734, -32.338, -5.255)), (' D 155  GLN  NE2', ' F   5  TYR  HD2', -0.521, (40.63, -31.22, 4.666)), (' A  21  ARG HH21', ' A  23  ILE HD11', -0.518, (-13.039, -61.237, 36.899)), (' A  42  SER  OG ', ' A  46  GLU  OE2', -0.517, (-18.734, -55.092, 43.504)), (' D  14  ARG  NH2', ' D  39  ASP  CG ', -0.517, (25.237, -15.102, -13.088)), (' D  13  SER  HB2', ' D  93  HIS  H  ', -0.515, (26.178, -27.295, -16.963)), (' A 162  GLY  O  ', ' A 166  GLU  HG2', -0.512, (-24.565, -37.145, 25.368)), (' D  35  ARG  HG2', ' D  36  PHE  N  ', -0.511, (23.578, -15.563, -1.14)), (' D 116  TYR  HB2', ' D 124  ILE HG22', -0.506, (28.758, -36.223, -4.729)), (' A   7  TYR  HE1', ' A  34  VAL HG21', -0.501, (-18.049, -47.855, 32.824)), (' D  13  SER  CB ', ' D  93  HIS  H  ', -0.5, (26.358, -26.581, -17.351)), (' D 106  ASP  OD2', ' D 108  ARG  HB2', -0.499, (24.03, -33.424, 22.621)), (' A 268  LYS  HE2', ' D 264  GLU  OE2', -0.498, (10.971, -28.705, 16.812)), (' E  89  GLN  HG3', ' E  90  PRO  CD ', -0.496, (3.687, -20.759, -23.828)), (' B  25  CYS  HB2', ' B  39  LEU HD21', -0.496, (3.573, -60.54, 39.255)), (' D 231  VAL HG11', ' E   8  GLN  NE2', -0.496, (-0.822, -24.936, -2.359)), (' D  66  LYS  HD2', ' F   2  ILE HG23', -0.494, (33.362, -21.403, 5.013)), (' D 167  TRP  CZ2', ' F   1  LYS  HE3', -0.488, (33.045, -19.004, 14.036)), (' E   4  THR  HA ', ' E  86  THR  OG1', -0.487, (8.524, -29.047, -15.458)), (' A 234  ARG  HD2', ' A 242  GLN  HB2', -0.486, (6.515, -49.942, 32.621)), (' A  33  PHE  CD2', ' A  34  VAL HG13', -0.482, (-16.66, -45.133, 35.371)), (' D 214  THR  HB ', ' D 262  GLN  HB2', -0.482, (-0.486, -33.78, 11.905)), (' D 143  THR HG23', ' F   9  LEU  HA ', -0.48, (35.26, -36.827, -6.185)), (' E   5  PRO  HB3', ' E  30  PHE  HB3', -0.48, (9.745, -26.335, -11.8)), (' D 176  LYS  HG2', ' D 180  GLN  HB2', -0.471, (14.992, -18.879, 21.558)), (' D  73  THR  O  ', ' F   8  LYS  NZ ', -0.471, (36.078, -27.699, -7.32)), (' D 166  GLU  HG3', ' D 167  TRP  CD1', -0.471, (31.556, -23.624, 16.279)), (' D  97  ARG HH11', ' D 114  HIS  CE1', -0.471, (31.303, -30.976, 0.525)), (' A 271  THR  N  ', ' D 105  SER  OG ', -0.469, (16.616, -35.227, 23.469)), (' A  25  VAL HG13', ' A  32  GLN  HG3', -0.469, (-11.79, -49.852, 33.939)), (' D   8  PHE  HB2', ' D  25  VAL HG23', -0.468, (20.95, -23.34, 0.38)), (' A 275  GLU  OE2', ' D 108  ARG  NH2', -0.466, (27.245, -36.116, 26.311)), (' E  69  GLU  N  ', ' E  69  GLU  OE1', -0.465, (5.14, -6.354, -3.706)), (' E  29  GLY  HA2', ' E  61  SER  OG ', -0.463, (11.259, -29.597, -6.797)), (' A 275  GLU  CD ', ' D 108  ARG HH12', -0.462, (26.868, -35.852, 28.013)), (' D 230  LEU HD12', ' D 245  ALA  HB2', -0.461, (-4.522, -30.767, 3.084)), (' A  74  HIS  HA ', ' A  77  ASP  HB2', -0.46, (-24.242, -62.576, 24.889)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.46, (-13.627, -59.363, 19.195)), (' E   9  VAL HG12', ' E  23  LEU HD11', -0.459, (-0.735, -14.497, -6.57)), (' E  24  ASN  HB3', ' E  65  LEU HD11', -0.459, (5.549, -16.262, -2.342)), (' E  68  THR  OG1', ' E  69  GLU  N  ', -0.458, (4.32, -6.719, -4.794)), (' D 155  GLN HE21', ' F   7  TYR  HE2', -0.458, (39.316, -32.318, 3.349)), (' D  97  ARG HH11', ' D 114  HIS  HE1', -0.458, (31.28, -30.697, 0.869)), (' A  20  PRO  HD2', ' A  75  ARG  HG2', -0.457, (-24.337, -66.513, 31.795)), (' A 133  TRP  HB2', ' A 144  LYS  HG3', -0.457, (-24.329, -56.008, 9.731)), (' A 222  GLU  OE1', ' D 128  GLU  HG2', -0.454, (21.845, -42.123, 8.574)), (' A 202  ARG  HG3', ' A 246  ALA  HB2', -0.452, (16.963, -52.174, 27.877)), (' D 166  GLU  HG3', ' D 167  TRP  HD1', -0.446, (31.38, -23.84, 16.014)), (' E  40  LEU  HA ', ' E  44  GLU  O  ', -0.446, (1.167, -8.71, -14.51)), (' D 133  TRP  HB2', ' D 144  LYS  HG3', -0.446, (32.21, -43.234, -1.247)), (' D  13  SER  HB2', ' D  93  HIS  O  ', -0.442, (26.232, -26.544, -15.79)), (' D 189  MET  HE3', ' D 201  LEU  HB3', -0.439, (-14.741, -28.131, 5.178)), (' A 111  ARG  NH1', ' D 221  GLY  O  ', -0.438, (-11.12, -41.561, 12.999)), (' D 234  ARG HH12', ' E  99  MET  HG2', -0.435, (-3.315, -21.133, -1.462)), (' D  35  ARG  HG3', ' E  53  ASP  CG ', -0.433, (20.25, -15.43, -1.581)), (' D  33  PHE  CD2', ' D  34  VAL HG13', -0.433, (23.951, -17.145, 8.2)), (' A 204  TRP  CH2', ' B  99  MET  HG2', -0.429, (13.275, -52.135, 34.035)), (' A  81  LEU HD13', ' A 118  TYR  CD1', -0.429, (-19.801, -66.049, 21.13)), (' A 126  LEU  HB2', ' A 133  TRP  CZ3', -0.428, (-22.613, -51.91, 15.206)), (' A  35  ARG  HD2', ' A  48  ARG HH12', -0.425, (-13.465, -53.231, 41.69)), (' D 133  TRP  O  ', ' D 144  LYS  HE3', -0.424, (30.461, -45.644, -0.332)), (' A 144  LYS  HE3', ' A 148  GLU  OE2', -0.424, (-26.193, -54.597, 7.375)), (' D 116  TYR  CE1', ' D 147  TRP  HH2', -0.423, (31.74, -33.891, -2.647)), (' D 202  ARG  HD3', ' D 244  TRP  CD2', -0.423, (-6.846, -25.021, -0.098)), (' D 146  LYS  HG3', ' D 147  TRP  HD1', -0.423, (38.613, -37.701, -3.383)), (' A  21  ARG  NH2', ' A  23  ILE HD11', -0.422, (-12.943, -61.474, 36.761)), (' A 275  GLU  OE2', ' D 108  ARG  NH1', -0.421, (26.946, -35.46, 27.022)), (' A 226  GLN  HG3', ' A 227  ASP  N  ', -0.42, (17.717, -55.595, 14.858)), (' A 268  LYS  HE3', ' D   2  SER  O  ', -0.419, (14.413, -28.56, 17.056)), (' A  17  ARG  HA ', ' A  17  ARG  HD2', -0.417, (-24.494, -74.474, 34.931)), (' A 143  THR HG23', ' C   9  LEU  HA ', -0.415, (-27.301, -60.79, 17.316)), (' A  11  SER  HA ', ' A  21  ARG  O  ', -0.415, (-18.449, -63.169, 31.643)), (' E  46  ILE HD12', ' E  68  THR HG21', -0.414, (3.012, -8.029, -8.333)), (' A 109  PHE  O  ', ' D 273  ARG  NH2', -0.412, (-16.412, -34.252, 16.464)), (' A 204  TRP  HH2', ' B  99  MET  HG2', -0.407, (13.031, -52.214, 34.287)), (' A  52  ILE  HA ', ' A  52  ILE HD12', -0.405, (-17.542, -39.789, 38.705)), (' B  39  LEU HD13', ' B  68  THR HG22', -0.403, (3.487, -58.905, 43.807)), (' A  14  ARG  HB3', ' A  14  ARG  HE ', -0.403, (-16.924, -70.464, 34.568)), (' A  64  THR  O  ', ' A  68  LYS  HG3', -0.403, (-26.627, -54.492, 37.353)), (' F   8  LYS  HG3', ' F   8  LYS  HZ3', -0.403, (36.604, -29.592, -7.149))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
