# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 123 ', 'ALA', 0.005990175577229908, (111.785, 185.679, 134.223)), ('A', ' 213 ', 'VAL', 0.0727527316554874, (115.11800000000002, 199.471, 154.338)), ('A', ' 216 ', 'LEU', 0.04420383671899345, (124.25000000000003, 194.953, 154.002)), ('A', ' 614 ', 'ASP', 0.03153095362829156, (164.27999999999997, 198.672, 170.585)), ('A', ' 744 ', 'GLY', 0.049172187980179694, (153.732, 155.381, 154.984)), ('B', ' 123 ', 'ALA', 0.01868039249383031, (213.062, 211.48100000000002, 136.282)), ('B', ' 215 ', 'ASP', 0.01489272771640208, (219.686, 194.913, 156.796)), ('C', ' 744 ', 'GLY', 0.0111503, (189.276, 161.339, 155.011)), ('H', ' 163 ', 'LYS', 0.01761731307285013, (136.73899999999995, 74.28299999999997, 204.939)), ('H', ' 169 ', 'THR', 0.0255794666996172, (132.339, 81.075, 198.625)), ('L', '  72 ', 'SER', 0.03446665404322753, (154.979, 119.137, 168.4)), ('S', '  71 ', 'ALA', 0.03886823195490536, (130.37799999999996, 203.806, 167.522)), ('S', ' 114 ', 'SER', 0.0032484399999999996, (117.13100000000001, 194.62499999999997, 161.548)), ('T', ' 132 ', 'HIS', 0.024273771220430014, (121.36600000000001, 204.246, 159.776)), ('T', ' 163 ', 'LYS', 0.01868574008412588, (100.94399999999996, 241.9989999999999, 203.346)), ('T', ' 220 ', 'SER', 0.01490127319414669, (111.948, 249.46499999999992, 196.165)), ('X', '  72 ', 'SER', 0.016954810214803242, (218.87300000000002, 183.642, 170.076)), ('X', ' 114 ', 'SER', 0.0032484399999999996, (216.941, 203.341, 165.318)), ('Y', ' 132 ', 'HIS', 0.022349665313340535, (224.191, 195.316, 163.303)), ('Y', ' 163 ', 'LYS', 0.02134165982351952, (262.52, 193.993, 211.413))]
data['omega'] = [('H', ' 122 ', 'SER', None, (157.04, 109.522, 151.868)), ('H', ' 181 ', 'PRO', None, (155.931, 75.91899999999998, 178.69099999999997)), ('H', ' 183 ', 'PRO', None, (151.008, 79.25799999999998, 176.717)), ('L', '  27 ', 'PRO', None, (156.13199999999995, 112.075, 185.148)), ('L', ' 162 ', 'PRO', None, (142.888, 103.50500000000001, 195.183)), ('L', ' 172 ', 'ASP', None, (148.48, 82.71899999999997, 213.37599999999998)), ('S', '  27 ', 'PRO', None, (126.23499999999997, 208.11699999999996, 183.396)), ('S', ' 162 ', 'PRO', None, (124.15199999999997, 223.31899999999993, 194.019)), ('S', ' 172 ', 'ASP', None, (100.91099999999997, 225.3009999999999, 211.93)), ('T', ' 181 ', 'PRO', None, (95.24500000000003, 226.37299999999993, 175.972)), ('T', ' 183 ', 'PRO', None, (101.04100000000001, 228.44099999999995, 174.7)), ('X', '  27 ', 'PRO', None, (222.14, 188.292, 187.40600000000003)), ('X', ' 162 ', 'PRO', None, (235.28300000000002, 183.206, 198.251)), ('X', ' 172 ', 'ASP', None, (247.917, 201.01299999999995, 218.007)), ('Y', ' 181 ', 'PRO', None, (254.008, 208.26699999999997, 182.606)), ('Y', ' 183 ', 'PRO', None, (254.115, 202.202, 180.702))]
data['rota'] = [('X', ' 153 ', 'VAL', 0.17941465027096531, (252.59000000000003, 200.498, 205.837)), ('Y', ' 135 ', 'ASP', 0.03339277845578508, (230.748, 191.785, 164.953)), ('Y', ' 239 ', 'THR', 0.19264568837994459, (264.489, 204.36299999999991, 184.437)), ('S', ' 109 ', 'GLN', 0.042293268735159234, (121.245, 205.008, 170.746)), ('S', ' 153 ', 'VAL', 0.12564430242284472, (100.41699999999996, 230.114, 199.78199999999998)), ('T', '  46 ', 'TYR', 0.08701863333389769, (117.836, 216.77599999999998, 149.969)), ('T', '  51 ', 'TYR', 0.034503864133905354, (117.06600000000003, 208.8449999999999, 152.521)), ('T', ' 112 ', 'VAL', 0.1472498120691592, (107.40700000000001, 216.19399999999996, 171.144)), ('T', ' 135 ', 'ASP', 0.003945163395506887, (121.058, 211.787, 159.395)), ('A', ' 215 ', 'ASP', 3.2167648154210633e-05, (122.362, 198.16599999999997, 153.306)), ('A', ' 216 ', 'LEU', 0.19708584913629362, (124.25000000000003, 194.953, 154.002)), ('A', ' 422 ', 'ASN', 0.24302704516960638, (192.375, 173.216, 122.825)), ('A', ' 578 ', 'ASP', 0.1223610422055043, (180.31499999999997, 206.6299999999999, 145.309)), ('A', ' 615 ', 'VAL', 0.18615583846738507, (163.26399999999995, 201.465, 168.087)), ('A', ' 619 ', 'GLU', 0.013391136479367311, (161.45699999999994, 206.38599999999997, 163.859)), ('A', ' 760 ', 'CYS', 0.06853002886253996, (165.288, 156.011, 161.418)), ('A', ' 854 ', 'LYS', 0.0, (146.825, 160.032, 165.217)), ('A', '1004 ', 'LEU', 0.1235977002823651, (161.356, 164.38, 162.814)), ('A', '1094 ', 'VAL', 0.13772721142888095, (166.57899999999992, 184.19299999999996, 224.839)), ('A', '1105 ', 'THR', 0.08156183417727533, (161.65499999999992, 182.25499999999994, 226.454)), ('B', '  84 ', 'LEU', 0.16988539594078075, (216.841, 186.838, 139.711)), ('B', ' 125 ', 'ASN', 0.14347782745319154, (207.554, 210.12400000000005, 134.642)), ('B', ' 314 ', 'GLN', 0.2966585441123671, (193.62600000000003, 172.048, 170.086)), ('B', ' 523 ', 'THR', 0.2689624386579479, (189.574, 140.085, 134.996)), ('B', ' 645 ', 'THR', 0.10550849628145993, (203.211, 160.467, 177.723)), ('B', ' 738 ', 'CYS', 0.07469659828036357, (164.25299999999993, 183.667, 160.985)), ('B', ' 907 ', 'ASN', 0.1468265139227448, (174.45499999999993, 177.34999999999994, 218.582)), ('B', ' 977 ', 'LEU', 0.05265392955118847, (171.30099999999996, 186.713, 148.189)), ('B', '1004 ', 'LEU', 0.14199125713822072, (169.88199999999998, 178.325, 162.662)), ('B', '1094 ', 'VAL', 0.29885777613863995, (183.58499999999995, 164.70699999999994, 225.145)), ('B', '1135 ', 'ASN', 0.24665543223587272, (187.728, 159.35599999999994, 237.66799999999998)), ('C', '  52 ', 'GLN', 0.21418503653122223, (169.095, 140.222, 153.043)), ('C', '  68 ', 'ILE', 0.04387106582345657, (165.242, 104.613, 142.019)), ('C', '  84 ', 'LEU', 0.1297944507799566, (160.765, 120.854, 138.557)), ('C', '  96 ', 'GLU', 0.015622953042220878, (173.474, 108.957, 148.783)), ('C', ' 227 ', 'VAL', 0.003150532575091347, (181.235, 129.073, 140.408)), ('C', ' 318 ', 'PHE', 0.28971168339519654, (152.23, 145.604, 161.833)), ('C', ' 366 ', 'SER', 0.0935107822277402, (148.088, 155.971, 124.668)), ('C', ' 390 ', 'LEU', 0.2896516789434904, (144.783, 160.249, 135.954)), ('C', ' 406 ', 'GLU', 0.29627992020418603, (162.176, 176.795, 118.106)), ('C', ' 437 ', 'ASN', 0.158862587125859, (157.476, 168.381, 111.22599999999998)), ('C', ' 519 ', 'HIS', 0.09460163328373555, (140.609, 169.044, 144.225)), ('C', ' 603 ', 'ASN', 0.23228603034955628, (169.054, 131.633, 178.84199999999998)), ('C', ' 738 ', 'CYS', 0.22084738014894614, (184.936, 166.447, 161.307)), ('C', ' 902 ', 'MET', 0.2523708131938899, (180.34799999999996, 156.33199999999994, 215.94299999999998)), ('C', ' 907 ', 'ASN', 0.19009025561497733, (173.70699999999997, 161.14199999999994, 218.802)), ('C', ' 977 ', 'LEU', 0.027711535254880175, (184.63800000000003, 158.328, 148.634)), ('C', '1094 ', 'VAL', 0.11244058023445434, (158.15199999999996, 159.78899999999993, 225.061)), ('C', '1128 ', 'VAL', 0.2535303788522538, (144.361, 171.87799999999993, 229.024)), ('H', '  51 ', 'TYR', 0.15123131545568658, (161.902, 102.789, 154.703)), ('H', ' 112 ', 'VAL', 0.18381321207063445, (158.422, 91.343, 173.611)), ('H', ' 135 ', 'ASP', 0.09973488088402187, (156.298, 104.84900000000002, 160.966)), ('H', ' 172 ', 'LEU', 0.17582973635796667, (136.31199999999995, 80.29999999999998, 195.351)), ('H', ' 217 ', 'THR', 0.2113346138127392, (133.25899999999996, 85.81699999999996, 192.59)), ('H', ' 218 ', 'VAL', 0.2335631181699017, (129.73699999999994, 84.48899999999999, 193.54)), ('H', ' 245 ', 'VAL', 0.2799230504904701, (135.28299999999996, 72.66, 193.327)), ('L', ' 135 ', 'SER', 0.183860844104548, (137.478, 92.965, 199.777)), ('L', ' 153 ', 'VAL', 0.2614285552525545, (147.942, 79.047, 200.72999999999996))]
data['cbeta'] = [('Y', ' 130 ', 'CYS', ' ', 0.2673551838512015, (225.237, 192.114, 160.03)), ('A', ' 331 ', 'ASN', ' ', 0.2650085311890367, (179.73099999999994, 209.815, 134.722)), ('A', ' 571 ', 'ASP', ' ', 0.25744616335670656, (180.67, 188.686, 153.602)), ('B', ' 536 ', 'ASN', ' ', 0.2507413661261824, (206.174, 147.267, 158.344))]
data['probe'] = [(' C1134  ASN  CG ', ' N   1  NAG  C1 ', -1.448, (144.869, 161.681, 236.064)), (' C 806  LEU  C  ', ' C 807  PRO  N  ', -1.393, (191.566, 149.762, 200.311)), (' C1134  ASN  ND2', ' N   1  NAG  O5 ', -1.328, (144.794, 162.821, 238.212)), (' C1134  ASN  ND2', ' N   1  NAG  C2 ', -1.174, (143.048, 160.967, 237.622)), (' C 805  ILE HD12', ' C 878  LEU HD11', -1.069, (185.554, 152.33, 203.585)), (' C 796  ASP  C  ', ' C 797  PHE  N  ', -1.015, (190.785, 151.066, 215.296)), (' C1134  ASN  ND2', ' N   1  NAG  C1 ', -0.989, (144.038, 161.422, 236.302)), (' C 804  GLN  NE2', ' C 935  GLN  OE1', -0.916, (186.979, 141.526, 200.518)), (' C1135  ASN  ND2', ' C1136  THR  O  ', -0.913, (155.169, 159.016, 237.113)), (' C1134  ASN  OD1', ' N   1  NAG  C1 ', -0.851, (145.328, 162.426, 236.652)), (' C 805  ILE HD12', ' C 878  LEU  CD1', -0.809, (186.644, 153.038, 203.869)), (' C1082  CYS  SG ', ' C1132  ILE HD13', -0.768, (147.317, 165.544, 233.57)), (' C1098  ASN HD21', ' U   1  NAG  C1 ', -0.741, (156.955, 146.543, 233.291)), (' G   1  NAG  H61', ' G   2  NAG  O5 ', -0.71, (187.407, 147.275, 240.536)), (' C1098  ASN  ND2', ' U   1  NAG  C1 ', -0.636, (156.461, 146.961, 232.637)), (' C 806  LEU  CA ', ' C 807  PRO  N  ', -0.635, (191.476, 150.518, 202.018)), (' C1082  CYS  SG ', ' C1132  ILE  CD1', -0.635, (147.557, 165.849, 233.133)), (' B 922  LEU HD11', ' I   1  NAG  H5 ', -0.605, (191.013, 185.903, 216.509)), (' C1081  ILE  CG2', ' C1135  ASN  HB3', -0.599, (152.789, 160.791, 235.389)), (' C1079  PRO  HD2', ' C1131  GLY  O  ', -0.542, (148.043, 161.712, 226.863)), (' B 804  GLN  OE1', ' J   1  NAG  H62', -0.533, (184.176, 199.794, 203.452)), (' C1081  ILE HG23', ' C1135  ASN  HB3', -0.52, (152.591, 160.393, 235.76)), (' Y 169  THR  HA ', ' Y 172  LEU HD13', -0.504, (261.441, 187.19, 203.752)), (' S 114  SER  H  ', ' S 115  PRO  HD2', -0.503, (116.676, 193.293, 163.533)), (' A1098  ASN HD21', ' R   1  NAG  C1 ', -0.501, (156.064, 192.94, 233.922)), (' C 800  PHE  HB3', ' C 802  PHE  CZ ', -0.488, (184.554, 150.355, 210.879)), (' T  51  TYR  CD2', ' T 120  GLY  HA2', -0.487, (120.479, 210.293, 153.084)), (' T 169  THR  HA ', ' T 172  LEU HD13', -0.484, (108.515, 243.236, 197.291)), (' C 797  PHE  CE1', ' C 882  ILE  CG2', -0.472, (189.929, 153.899, 210.585)), (' C 922  LEU HD11', ' K   1  NAG  H5 ', -0.468, (172.758, 142.519, 217.179)), (' C1131  GLY  HA2', ' C1309  NAG  H83', -0.466, (145.115, 160.817, 225.911)), (' C 805  ILE  CD1', ' C 878  LEU HD11', -0.46, (186.501, 152.089, 204.057)), (' H 172  LEU HD13', ' H 228  TYR  CE1', -0.457, (132.67, 77.566, 195.127)), (' C 519  HIS  CD2', ' C 567  ARG HH21', -0.447, (142.451, 168.615, 147.986)), (' C1081  ILE HD13', ' C1133  VAL  CG2', -0.444, (151.397, 159.944, 232.013)), (' C 806  LEU  C  ', ' C 807  PRO  CA ', -0.443, (192.556, 149.621, 200.351)), (' A 193  VAL HG23', ' A 223  LEU HD22', -0.442, (131.112, 187.23, 147.657)), (' M   1  NAG  H61', ' M   2  NAG  O5 ', -0.44, (190.097, 138.211, 204.915)), (' M   1  NAG  H4 ', ' M   2  NAG  H2 ', -0.428, (189.225, 138.122, 207.846)), (' A 726  ILE HG22', ' A 948  LEU HD13', -0.423, (151.961, 170.54, 188.252)), (' C1105  THR HG22', ' C1112  PRO  HA ', -0.42, (162.375, 153.781, 228.188)), (' N   1  NAG  H61', ' N   2  NAG  C7 ', -0.417, (142.409, 165.969, 240.723)), (' C 796  ASP  C  ', ' C 797  PHE  CA ', -0.417, (189.888, 150.995, 215.387)), (' C 410  ILE  N  ', ' C 410  ILE HD12', -0.415, (159.537, 176.395, 122.703)), (' A 391  CYS  HB3', ' A 522  ALA  HB1', -0.407, (181.348, 197.095, 137.021)), (' T 188  TRP  CD2', ' T 216  VAL HG23', -0.403, (108.049, 242.04, 188.157)), (' N   1  NAG  H3 ', ' N   1  NAG  H82', -0.402, (142.086, 163.184, 235.863))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
