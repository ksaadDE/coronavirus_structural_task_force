# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('L', '   8 ', 'PRO', None, (228.64999999999995, 225.91, 306.776)), ('L', '  95 ', 'PRO', None, (219.664, 219.07, 286.06600000000003))]
data['rota'] = [('A', ' 752 ', 'LEU', 0.08165142666142805, (196.96199999999993, 214.799, 224.372)), ('B', ' 516 ', 'GLU', 0.18430468855169893, (204.90299999999993, 229.21799999999993, 254.521))]
data['cbeta'] = []
data['probe'] = [(' A 726  ILE HG12', ' A 945  LEU HD12', -0.648, (192.259, 198.369, 179.573)), (' B 106  PHE  HB2', ' B 117  LEU  HB2', -0.645, (252.199, 200.934, 240.884)), (' A 755  GLN  HB3', ' C 971  GLY  H  ', -0.64, (202.824, 216.485, 223.857)), (' A 744  GLY  H  ', ' A 977  LEU HD11', -0.635, (188.057, 208.415, 219.456)), (' A 882  ILE HG13', ' A 883  THR HG23', -0.633, (185.026, 213.877, 161.99)), (' A 983  ARG  HG3', ' A 984  LEU  HG ', -0.629, (191.156, 201.306, 232.263)), (' A1111  GLU  HG2', ' A1113  GLN HE22', -0.625, (205.322, 202.573, 142.49)), (' B1017  GLU  OE2', ' C1019  ARG  NH2', -0.617, (214.302, 211.512, 191.37)), (' B 598  ILE  HB ', ' B 609  ALA  HB3', -0.611, (239.993, 222.191, 200.054)), (' C 972  ALA  HA ', ' C 995  ARG HH21', -0.611, (206.786, 214.111, 229.111)), (' C 106  PHE  HB2', ' C 117  LEU  HB2', -0.6, (188.255, 242.265, 243.902)), (' C 882  ILE HG13', ' C 883  THR HG23', -0.594, (222.058, 235.873, 166.882)), (' B 770  ILE HD11', ' B1012  LEU HD13', -0.59, (209.313, 200.586, 196.057)), (' C1030  SER  HA ', ' C1034  LEU HD12', -0.588, (218.989, 221.425, 173.361)), (' C 201  PHE  HB3', ' C 229  LEU  HB2', -0.587, (195.337, 241.609, 240.984)), (' B 609  ALA  HB2', ' B 692  ILE HD12', -0.576, (243.152, 223.349, 200.124)), (' B 676  THR  HA ', ' B 690  GLN  HA ', -0.572, (251.501, 222.222, 191.446)), (' B 882  ILE HG13', ' B 883  THR HG23', -0.571, (223.051, 193.567, 160.809)), (' A 953  ASN  O  ', ' A 957  GLN  NE2', -0.57, (194.659, 195.958, 196.797)), (' A1030  SER  HA ', ' A1034  LEU HD12', -0.56, (197.615, 217.031, 171.699)), (' B1030  SER  HA ', ' B1034  LEU HD12', -0.559, (212.038, 201.262, 170.317)), (' A  92  PHE  HB3', ' A 192  PHE  HB2', -0.557, (182.143, 165.351, 222.028)), (' A 101  ILE  HA ', ' A 242  LEU  HA ', -0.556, (177.034, 155.061, 225.916)), (' A 193  VAL HG23', ' A 223  LEU HD12', -0.554, (183.463, 170.542, 218.825)), (' C 908  GLY  O  ', ' C1038  LYS  NZ ', -0.55, (209.435, 220.261, 160.105)), (' A 365  TYR  HD2', ' A 387  LEU  HB3', -0.548, (222.485, 185.254, 240.307)), (' A 780  GLU  O  ', ' A 784  GLN  NE2', -0.544, (196.73, 217.149, 179.048)), (' A  39  PRO  HG3', ' A  51  THR HG21', -0.543, (188.41, 181.933, 215.571)), (' C 329  PHE  O  ', ' C 580  GLN  NE2', -0.534, (167.81, 198.262, 232.475)), (' A 319  ARG  NH2', ' B 745  ASP  OD1', -0.533, (216.248, 182.138, 213.821)), (' B1006  THR  O  ', ' B1009  THR  OG1', -0.531, (212.948, 205.3, 204.759)), (' A 811  LYS  HE3', ' A 813  SER  HB3', -0.529, (176.061, 206.509, 179.452)), (' C 101  ILE  HA ', ' C 242  LEU  HA ', -0.529, (181.218, 255.267, 240.457)), (' A 908  GLY  O  ', ' A1038  LYS  NZ ', -0.529, (206.292, 211.157, 158.425)), (' A 707  TYR  HB3', ' B 792  PRO  HG3', -0.525, (223.889, 188.61, 156.901)), (' C 229  LEU  HB3', ' C 231  ILE HG23', -0.524, (195.697, 240.983, 243.384)), (' C 811  LYS  HD3', ' C 813  SER  H  ', -0.524, (221.989, 244.724, 186.676)), (' B  92  PHE  HB3', ' B 192  PHE  HB2', -0.523, (255.988, 201.31, 229.034)), (' C 726  ILE HG12', ' C 945  LEU HD23', -0.521, (206.301, 232.437, 185.096)), (' B 908  GLY  O  ', ' B1038  LYS  NZ ', -0.519, (215.763, 213.638, 159.107)), (' B 752  LEU HD11', ' B 990  GLU  HG2', -0.515, (207.717, 191.275, 226.236)), (' B1047  TYR  HB2', ' B1067  TYR  HB3', -0.512, (224.679, 214.486, 161.688)), (' B 985  ASP  HB3', ' B 987  PRO  HD2', -0.512, (209.274, 188.516, 234.512)), (' B 216  LEU HD12', ' B 217  PRO  HD2', -0.508, (261.882, 203.869, 218.573)), (' A 280  ASN  OD1', ' A 284  THR  N  ', -0.507, (177.132, 182.616, 209.153)), (' B 119  ILE HG12', ' B 128  ILE HG12', -0.507, (254.301, 193.622, 238.805)), (' A 914  ASN  HA ', ' C1089  PHE  HE1', -0.505, (196.998, 207.593, 144.905)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.502, (206.731, 234.407, 170.01)), (' C 609  ALA  HB2', ' C 692  ILE HD12', -0.502, (177.961, 231.027, 198.546)), (' C 825  LYS  HB2', ' C 945  LEU HD12', -0.499, (207.039, 237.678, 188.622)), (' B 334  ASN  O  ', ' B 362  VAL HG12', -0.498, (212.632, 244.846, 248.301)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.497, (267.035, 207.518, 224.386)), (' C 328  ARG HH21', ' C 533  LEU  HB2', -0.495, (166.058, 201.624, 225.913)), (' C 729  VAL HG21', ' C 781  VAL HG21', -0.493, (217.034, 224.139, 184.94)), (' B1015  ALA  HA ', ' B1018  ILE HG22', -0.493, (213.869, 202.193, 191.313)), (' C 735  SER  HA ', ' C 767  LEU HD13', -0.492, (220.779, 220.537, 204.903)), (' A 727  LEU HD22', ' A1025  ALA  HB2', -0.491, (198.559, 208.003, 180.79)), (' A 816  SER  OG ', ' A 819  GLU  OE1', -0.488, (182.856, 204.383, 173.146)), (' H  59  TYR  HB3', ' H  63  VAL HG23', -0.487, (215.956, 209.28, 285.271)), (' A1079  PRO  HB3', ' B 900  MET  HE1', -0.487, (224.089, 201.73, 146.863)), (' C 599  THR HG22', ' C 601  GLY  H  ', -0.487, (186.58, 234.964, 199.056)), (' C 573  THR HG22', ' C 587  ILE HD13', -0.483, (177.714, 198.949, 218.52)), (' B 326  ILE HD12', ' B 539  VAL HG21', -0.48, (227.304, 237.452, 227.951)), (' A 785  VAL HG22', ' A 787  GLN  H  ', -0.48, (187.301, 222.8, 172.468)), (' B1010  GLN  HA ', ' B1013  ILE HG12', -0.479, (213.932, 206.825, 199.619)), (' C 764  ASN  HA ', ' C 767  LEU  HG ', -0.478, (221.502, 216.149, 205.651)), (' B1002  GLN  NE2', ' C1002  GLN  OE1', -0.478, (210.193, 208.151, 214.158)), (' A 190  ARG  HG2', ' A 207  HIS  CD2', -0.477, (173.671, 165.018, 219.032)), (' B 985  ASP  O  ', ' B 989  ALA  N  ', -0.477, (211.554, 191.27, 231.897)), (' A 317  ASN  ND2', ' B 737  ASP  OD2', -0.476, (212.211, 184.686, 207.139)), (' C 202  LYS  NZ ', ' C 228  ASP  OD2', -0.476, (200.577, 238.697, 236.238)), (' B 731  MET  SD ', ' B 732  THR  N  ', -0.475, (218.526, 197.533, 193.875)), (' A 984  LEU  HB3', ' A 988  GLU  HG2', -0.475, (193.601, 204.408, 234.304)), (' B 780  GLU  O  ', ' B 784  GLN  NE2', -0.474, (211.167, 198.592, 176.23)), (' A 985  ASP  HB3', ' A 987  PRO  HD2', -0.473, (192.595, 209.145, 237.127)), (' H  87  THR HG23', ' H 110  THR  HA ', -0.473, (217.105, 199.574, 299.66)), (' C 334  ASN  O  ', ' C 362  VAL HG12', -0.472, (170.771, 193.039, 242.56)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.471, (198.751, 179.664, 188.286)), (' C 992  GLN  OE1', ' C 995  ARG  NH2', -0.47, (207.343, 214.105, 230.696)), (' B 418  ILE  HA ', ' B 422  ASN  HB2', -0.47, (207.847, 228.497, 276.842)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.469, (203.164, 205.881, 173.421)), (' C 377  PHE  HD1', ' C 434  ILE HG12', -0.468, (189.33, 196.402, 248.211)), (' A 206  LYS  HD3', ' A 223  LEU HD22', -0.465, (178.677, 171.942, 216.709)), (' C 861  LEU HD12', ' C 862  PRO  HD2', -0.463, (226.453, 226.944, 201.132)), (' C 775  ASP  N  ', ' C 775  ASP  OD1', -0.463, (223.457, 220.718, 192.295)), (' L  18  ARG  NH2', ' L  20  THR  OG1', -0.461, (223.195, 234.772, 311.099)), (' A 126  VAL  H  ', ' A 172  SER  HB2', -0.461, (168.176, 167.439, 230.786)), (' C 418  ILE  HA ', ' C 422  ASN  HB2', -0.46, (201.562, 181.882, 249.108)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.459, (217.846, 195.772, 252.548)), (' B 825  LYS  HB2', ' B 945  LEU HD12', -0.458, (233.541, 200.007, 184.014)), (' A 856  ASN  HB2', ' A 858  LEU HD22', -0.457, (187.484, 204.977, 208.724)), (' A 204  TYR  HB3', ' A 223  LEU  HB3', -0.456, (180.947, 173.292, 219.738)), (' A 752  LEU  HA ', ' A 752  LEU HD13', -0.456, (198.098, 215.085, 225.614)), (' L  47  LEU  HA ', ' L  58  VAL HG21', -0.454, (208.366, 227.984, 305.873)), (' A 968  SER  OG ', ' B 755  GLN  O  ', -0.454, (199.453, 195.992, 218.149)), (' C1126  CYS  HA ', ' C1132  ILE HD13', -0.451, (190.568, 209.01, 137.803)), (' A 599  THR HG22', ' A 608  VAL HG12', -0.451, (200.023, 176.236, 195.197)), (' L  33  LEU HD11', ' L  88  CYS  HB2', -0.451, (219.877, 226.767, 297.971)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.45, (184.004, 168.848, 206.495)), (' A  37  TYR  HA ', ' A 223  LEU  H  ', -0.45, (182.722, 175.093, 215.866)), (' A 900  MET  HE1', ' C1079  PRO  HB3', -0.449, (190.592, 212.681, 147.284)), (' B 521  PRO  HG2', ' C 230  PRO  HA ', -0.448, (199.548, 236.752, 242.687)), (' C 676  THR  HA ', ' C 690  GLN  HA ', -0.446, (175.419, 240.758, 191.559)), (' B  33  THR  OG1', ' B 219  GLY  O  ', -0.446, (254.078, 203.674, 213.551)), (' B 329  PHE  H  ', ' B 530  SER  HB2', -0.444, (220.839, 240.596, 237.889)), (' B 735  SER  HA ', ' B 767  LEU HD21', -0.443, (213.568, 192.402, 199.909)), (' B 806  LEU HD12', ' B 807  PRO  HD2', -0.441, (226.965, 189.778, 168.0)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.439, (199.561, 209.334, 133.839)), (' B 770  ILE  O  ', ' B 774  GLN  HG3', -0.438, (212.054, 195.965, 192.183)), (' L  38  GLN  HB2', ' L  44  PRO  HG3', -0.438, (214.912, 217.095, 304.835)), (' C 366  SER  OG ', ' C 388  ASN  ND2', -0.437, (180.041, 202.791, 242.982)), (' A 781  VAL HG23', ' A 782  PHE  CD2', -0.436, (192.624, 212.856, 180.202)), (' A 189  LEU  HB2', ' A 210  ILE HD13', -0.434, (176.118, 161.466, 211.858)), (' A 596  SER  HB2', ' A 613  GLN HE22', -0.433, (209.724, 181.731, 197.352)), (' A  93  ALA  HA ', ' A 191  GLU  HA ', -0.431, (180.759, 164.153, 218.283)), (' B  92  PHE  O  ', ' B 192  PHE  N  ', -0.43, (256.254, 200.326, 226.395)), (' C 945  LEU HD22', ' C 948  LEU HD12', -0.429, (208.607, 232.753, 187.711)), (' A  57  PRO  HG3', ' A 273  ARG  HE ', -0.429, (196.545, 170.144, 214.253)), (' A 350  VAL HG22', ' A 422  ASN  HB3', -0.428, (227.42, 206.298, 253.164)), (' C 656  VAL HG12', ' C 658  ASN  H  ', -0.428, (172.068, 229.342, 185.479)), (' A1097  SER  HB2', ' A1102  TRP  CD2', -0.426, (217.488, 195.405, 139.077)), (' C 985  ASP  O  ', ' C 989  ALA  N  ', -0.426, (215.009, 213.982, 235.562)), (' B  57  PRO  HB2', ' B  60  SER  HB3', -0.426, (249.83, 212.876, 220.577)), (' A 276  LEU  HB3', ' A 289  VAL  HB ', -0.425, (191.438, 180.186, 206.884)), (' B 330  PRO  HG3', ' B 579  PRO  HB2', -0.425, (215.393, 242.466, 236.578)), (' A 334  ASN  O  ', ' A 362  VAL HG12', -0.424, (233.282, 177.473, 243.399)), (' A 656  VAL HG12', ' A 658  ASN  H  ', -0.424, (210.91, 170.667, 178.265)), (' A 897  PRO  HB2', ' A 900  MET  HG2', -0.424, (188.208, 214.539, 151.841)), (' A 722  VAL HG12', ' A 930  ALA  HB1', -0.423, (192.179, 196.882, 164.801)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.423, (229.12, 205.67, 166.577)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.423, (219.427, 193.822, 242.666)), (' L  36  TYR  HE2', ' L  89  HIS  HB3', -0.421, (215.485, 223.147, 298.241)), (' L   4  MET  HB3', ' L   4  MET  HE3', -0.42, (224.251, 222.6, 295.557)), (' B 815  ARG  HB3', ' B 819  GLU  HB2', -0.419, (229.97, 191.231, 176.467)), (' C 881  THR  O  ', ' C 901  GLN  NE2', -0.419, (218.033, 231.798, 165.024)), (' A 388  ASN  HB3', ' A 527  PRO  HD2', -0.418, (223.243, 178.641, 239.188)), (' A 328  ARG  NH2', ' A 580  GLN  OE1', -0.418, (232.625, 171.018, 229.027)), (' B 363  ALA  O  ', ' B 527  PRO  HD3', -0.418, (216.678, 238.543, 249.2)), (' C 403  ARG  NH2', ' C 405  ASP  OD2', -0.418, (206.399, 189.681, 259.103)), (' C  90  VAL HG21', ' C 238  PHE  CE1', -0.417, (181.831, 240.653, 236.567)), (' L  39  LYS  HB2', ' L  42  LYS  HB3', -0.417, (211.428, 215.861, 310.738)), (' H  20  LEU  HG ', ' H  82  MET  HE1', -0.417, (208.867, 202.65, 293.373)), (' B 707  TYR  HB3', ' C 792  PRO  HG3', -0.417, (226.183, 239.076, 164.522)), (' A 298  GLU  O  ', ' A 302  THR  OG1', -0.417, (199.422, 182.347, 203.826)), (' B 521  PRO  HB2', ' C 230  PRO  CB ', -0.416, (201.244, 237.317, 243.912)), (' C 715  PRO  HA ', ' C1072  GLU  HA ', -0.415, (191.862, 230.375, 156.1)), (' B 725  GLU  OE1', ' B1064  HIS  NE2', -0.415, (222.642, 208.439, 174.446)), (' B 291  CYS  HB2', ' B 298  GLU  HA ', -0.415, (238.819, 212.389, 211.758)), (' A 379  CYS  HB3', ' A 382  VAL HG23', -0.415, (219.172, 191.356, 239.878)), (' A1006  THR  O  ', ' A1009  THR  OG1', -0.413, (203.66, 205.251, 204.081)), (' L  89  HIS  NE2', ' L  96  LEU  HB3', -0.413, (215.551, 221.128, 292.603)), (' B 505  TYR  HE1', ' L  93  ASN HD21', -0.413, (221.433, 228.231, 286.634)), (' A 206  LYS  HD3', ' A 223  LEU  CD2', -0.413, (178.733, 171.958, 216.205)), (' C 193  VAL HG23', ' C 223  LEU HD22', -0.413, (190.247, 245.547, 228.809)), (' B 426  PRO  HG2', ' B 429  PHE  HB2', -0.413, (206.682, 223.784, 262.695)), (' C  92  PHE  HB3', ' C 192  PHE  HB2', -0.412, (186.85, 248.011, 233.312)), (' B1002  GLN  O  ', ' B1006  THR  N  ', -0.412, (212.039, 203.368, 209.636)), (' B 666  ILE HD11', ' B 672  ALA  HB2', -0.411, (237.68, 224.956, 196.449)), (' B 393  THR  O  ', ' B 523  THR  OG1', -0.411, (204.311, 237.313, 250.46)), (' C 762  GLN  HA ', ' C 765  ARG  HD3', -0.411, (223.223, 209.361, 206.977)), (' C  92  PHE  HE2', ' C  94  SER  HB3', -0.411, (183.296, 252.161, 233.806)), (' B 329  PHE  CD1', ' B 528  LYS  HB3', -0.41, (219.823, 236.1, 240.491)), (' A 904  TYR  CE1', ' C1107  ARG  HD3', -0.409, (198.335, 217.916, 153.471)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.408, (224.897, 212.824, 135.307)), (' H  95  ILE  HA ', ' H  95  ILE HD13', -0.408, (208.99, 220.633, 293.276)), (' C 331  ASN  N  ', ' C 331  ASN  OD1', -0.408, (166.361, 195.183, 235.018)), (' C1097  SER  HB2', ' C1102  TRP  CD2', -0.407, (188.227, 222.988, 142.088)), (' A 296  LEU  O  ', ' A 299  THR  OG1', -0.407, (196.998, 178.824, 199.396)), (' A  54  LEU  HB3', ' A 270  LEU  HB3', -0.407, (192.439, 172.245, 221.141)), (' C 596  SER  OG ', ' C 613  GLN  NE2', -0.407, (185.906, 220.484, 202.668)), (' B 742  ILE HG12', ' B1000  ARG  HB3', -0.407, (213.963, 195.756, 214.41)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.405, (194.072, 177.014, 204.659)), (' B 453  TYR  CZ ', ' B 493  GLN  HB3', -0.405, (208.544, 232.888, 286.279)), (' A 276  LEU HD22', ' A 301  CYS  HA ', -0.404, (193.377, 182.923, 205.32)), (' A 119  ILE HG23', ' A 128  ILE HG13', -0.403, (175.866, 166.878, 232.189)), (' A 346  ARG  HA ', ' A 346  ARG  HD2', -0.402, (230.862, 194.157, 263.373)), (' B1097  SER  HB2', ' B1102  TRP  CD2', -0.4, (226.338, 234.127, 145.123)), (' B 557  LYS  HA ', ' B 557  LYS  HD3', -0.4, (213.514, 247.513, 216.561))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
