# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  28 ', 'ASN', 0.022737959560566717, (-0.583000000000032, -81.357, 31.711999999999993)), ('A', '  28 ', 'ASN', 0.0009940275753768538, (0.16799999999998705, -80.958, 32.77799999999999)), ('A', '  29 ', 'ASN', 0.001005143257857129, (2.7999999999999776, -80.35, 30.093)), ('B', '  28 ', 'ASN', 0.009229525184382203, (73.01400000000004, -38.51300000000001, -17.017)), ('B', '  28 ', 'ASN', 0.0019043527821111814, (72.123, -38.502, -18.09))]
data['omega'] = [('A', '  28 ', 'ASN', None, (-1.0020000000000147, -80.096, 32.693)), ('B', '  28 ', 'ASN', None, (72.689, -37.171, -17.999))]
data['rota'] = [('A', '  28 ', 'ASN', 0.0, (-0.583000000000032, -81.357, 31.711999999999993)), ('B', '  28 ', 'ASN', 0.006445687559359172, (73.01400000000004, -38.51300000000001, -17.017)), ('B', ' 135 ', 'ARG', 0.0, (30.62400000000001, -44.354, -5.882999999999999))]
data['cbeta'] = []
data['probe'] = [(' B 279  PHE  CD1', ' B 290  CYS  HA ', -0.88, (71.853, -64.881, 1.931)), (' A 183  ASP  OD1', ' A 401  HOH  O  ', -0.86, (39.828, -79.475, 27.67)), (' A 326  GLU  OE1', ' A 402  HOH  O  ', -0.856, (37.803, -94.606, 13.455)), (' A 279  PHE  CD1', ' A 290  CYS  HA ', -0.837, (13.604, -104.497, 11.531)), (' B 168  ILE  O  ', ' B 501  HOH  O  ', -0.786, (52.875, -40.941, 15.61)), (' A 326  GLU  OE2', ' A 404  HOH  O  ', -0.651, (39.011, -92.351, 10.134)), (' B 181  LYS  HE3', ' B 401  S6V  H4 ', -0.633, (29.78, -49.657, -6.441)), (' A   0  MET  HE1', ' A  15  PHE  CE1', -0.585, (11.848, -63.238, 27.515)), (' A 216  LEU  HB3', ' A 220  GLU  HG3', -0.557, (19.564, -97.336, -16.768)), (' A 334  LYS  O  ', ' A 337  HIS  ND1', -0.551, (34.634, -111.733, -5.223)), (' A 240  PHE  CZ ', ' A 257  ARG  HD3', -0.541, (13.545, -101.911, -2.117)), (' A 279  PHE  HB2', ' A 290  CYS  O  ', -0.536, (14.305, -102.429, 13.047)), (' B  27  ILE HG22', ' B  28 AASN  OD1', -0.533, (75.727, -36.664, -17.835)), (' B  85  ILE  O  ', ' B 505  HOH  O  ', -0.529, (53.468, -43.561, -7.085)), (' A  29  ASN  HB3', ' A  45  ASN  HB3', -0.528, (5.125, -80.532, 28.287)), (' B 279  PHE  HD1', ' B 289  LYS  O  ', -0.527, (71.081, -65.198, 4.089)), (' B 279  PHE  HB2', ' B 290  CYS  O  ', -0.523, (69.603, -64.078, 1.397)), (' B   0  MET  HE1', ' B  15  PHE  CZ ', -0.521, (52.085, -28.162, -12.817)), (' A  27  ILE HG12', ' A  28 AASN  OD1', -0.512, (-3.656, -80.876, 32.325)), (' A  90  ARG  NH2', ' A  93  PRO  O  ', -0.5, (18.073, -81.678, 22.778)), (' A 218  MET  HG3', ' A 237  TYR  CE2', -0.498, (20.767, -101.382, -9.534)), (' A 279  PHE  HD1', ' A 289  LYS  O  ', -0.498, (13.643, -103.915, 10.394)), (' B  95  HIS  O  ', ' B 506  HOH  O  ', -0.496, (52.439, -44.535, -12.305)), (' B 264  GLU  O  ', ' B 280  ILE  HA ', -0.493, (72.099, -59.602, 6.971)), (' A 145  GLU  HG2', ' A 173  LYS  HD3', -0.493, (27.336, -66.597, 6.867)), (' B 135  ARG  HG3', ' B 401  S6V  C3 ', -0.476, (29.678, -45.213, -3.139)), (' B  90  ARG  NH2', ' B  93  PRO  O  ', -0.473, (56.91, -47.49, -8.461)), (' B 151  LEU HD11', ' B 401  S6V  C3 ', -0.471, (30.971, -46.652, -0.883)), (' B 227  LEU HD13', ' B 232  PHE  CE2', -0.467, (56.52, -65.974, 22.472)), (' A 127  VAL HG21', ' A 626  HOH  O  ', -0.454, (24.854, -65.441, 19.102)), (' A 218  MET  O  ', ' A 222  ILE HG13', -0.434, (22.641, -100.998, -11.996)), (' B   0  MET  HG2', ' B 585  HOH  O  ', -0.433, (52.802, -32.061, -17.745)), (' B 227  LEU HD13', ' B 232  PHE  CD2', -0.428, (57.118, -66.199, 22.668)), (' A 264  GLU  O  ', ' A 280  ILE  HA ', -0.427, (10.728, -100.089, 7.728)), (' B   0  MET  HA ', ' B   0  MET  HE3', -0.423, (53.026, -27.635, -16.143)), (' A 330  MET  O  ', ' A 341  PHE  HA ', -0.422, (30.517, -103.063, 4.212)), (' B 211  ILE  O  ', ' B 215  GLU  OE1', -0.408, (61.003, -54.588, 27.258)), (' B  56  GLU  OE2', ' B  60  LYS  NZ ', -0.408, (52.71, -32.683, -14.81)), (' B  27  ILE  O  ', ' B  28 AASN  C  ', -0.407, (71.956, -37.158, -16.043)), (' B 322  ILE  O  ', ' B 325  THR HG22', -0.405, (48.667, -59.011, 3.964)), (' B 181  LYS  CE ', ' B 401  S6V  H4 ', -0.404, (30.365, -49.18, -6.055)), (' B 151  LEU HD11', ' B 401  S6V  C2 ', -0.404, (30.889, -45.799, -0.677)), (' B 230  TYR  OH ', ' B 502  HOH  O  ', -0.403, (48.877, -72.867, 22.501)), (' B 143  ILE  HA ', ' B 177  ASN  O  ', -0.4, (39.562, -45.457, 3.648))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
