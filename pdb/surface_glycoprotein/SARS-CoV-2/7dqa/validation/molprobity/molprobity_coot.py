# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (56.74400000000004, 86.629, 78.099))]
data['rota'] = [('A', '  20 ', 'THR', 0.008462792678744368, (100.118, 48.717000000000006, 80.88099999999999)), ('A', '  30 ', 'ASP', 0.20082564959687862, (92.333, 58.601000000000006, 71.412)), ('A', '  47 ', 'SER', 0.2204646463472498, (70.602, 72.295, 66.585)), ('A', '  73 ', 'LEU', 0.2554784210650537, (78.59800000000003, 58.82600000000001, 74.81799999999997)), ('A', ' 124 ', 'SER', 0.2963933167460163, (60.77400000000004, 71.248, 83.05899999999997)), ('A', ' 136 ', 'ASP', 0.07418750752530237, (38.88800000000001, 88.714, 88.04699999999997)), ('A', ' 141 ', 'CYS', 0.08689546232322204, (46.21500000000002, 84.915, 81.78299999999997)), ('A', ' 280 ', 'SER', 0.28950334646482445, (65.36599999999997, 104.584, 87.60999999999999)), ('A', ' 283 ', 'VAL', 0.2594599346556374, (69.90299999999998, 106.98999999999998, 90.281)), ('A', ' 294 ', 'THR', 0.1858309236151789, (72.736, 104.68699999999997, 70.392)), ('A', ' 343 ', 'VAL', 0.20256526217211357, (65.29100000000001, 82.298, 68.517)), ('A', ' 364 ', 'VAL', 0.21335078875702926, (71.38399999999999, 99.43199999999997, 66.605)), ('A', ' 401 ', 'HIS', 0.23359353203466657, (83.53200000000001, 81.609, 80.533)), ('A', ' 409 ', 'SER', 0.2796328721410709, (81.679, 94.448, 78.33899999999998)), ('A', ' 411 ', 'SER', 0.27894748696470395, (86.106, 97.81999999999996, 79.494)), ('A', ' 414 ', 'THR', 0.25525052331355824, (84.081, 103.076, 79.392)), ('A', ' 420 ', 'SER', 0.2883778685197115, (88.486, 106.629, 71.294)), ('A', ' 427 ', 'ASP', 0.17672937188433233, (84.061, 117.66599999999998, 74.857)), ('A', ' 429 ', 'GLN', 0.2834858479245439, (82.73399999999998, 115.94499999999998, 80.618)), ('A', ' 431 ', 'ASP', 0.1822917381576672, (82.791, 113.947, 86.472)), ('A', ' 432 ', 'ASN', 0.1501585267702221, (81.65899999999998, 112.789, 89.89099999999998)), ('A', ' 440 ', 'LEU', 0.282701668550063, (75.53699999999998, 102.532, 91.21199999999999)), ('A', ' 449 ', 'THR', 0.19919746917226047, (73.26899999999998, 89.173, 92.944)), ('A', ' 463 ', 'VAL', 0.03392863072131082, (69.364, 70.107, 101.46799999999998)), ('A', ' 483 ', 'GLU', 0.2875223547864413, (70.15699999999997, 86.827, 107.142)), ('A', ' 491 ', 'VAL', 0.2391604188706842, (53.929000000000016, 86.503, 102.402)), ('A', ' 518 ', 'ARG', 0.20767393998656858, (82.017, 84.187, 88.076)), ('A', ' 545 ', 'SER', 0.2138989966697178, (92.18, 98.418, 75.12699999999998)), ('A', ' 591 ', 'LEU', 0.23774157230980592, (80.76699999999997, 104.244, 95.06099999999999)), ('A', ' 611 ', 'SER', 0.038930413350151315, (58.091, 91.401, 108.524)), ('C', ' 335 ', 'LEU', 0.11320247010825177, (104.64, 67.964, 30.151999999999997)), ('C', ' 364 ', 'ASP', 0.2951799014351111, (108.35900000000002, 74.40299999999998, 35.394999999999996)), ('C', ' 383 ', 'SER', 0.29351975920614715, (113.83500000000001, 77.105, 48.13499999999999)), ('C', ' 399 ', 'SER', 0.27196566810137807, (98.675, 63.411, 47.461999999999996)), ('C', ' 430 ', 'THR', 0.2106742606321854, (114.03700000000002, 67.416, 50.114999999999995)), ('C', ' 432 ', 'CYS', 0.012204796803416684, (107.923, 70.587, 49.372)), ('C', ' 459 ', 'SER', 0.2872676728556715, (104.372, 50.996, 66.186)), ('C', ' 480 ', 'CYS', 0.26550132430412565, (89.91, 40.01, 69.78999999999999)), ('C', ' 493 ', 'GLN', 0.29821184318198246, (88.70100000000002, 56.526999999999994, 61.14099999999999)), ('C', ' 493 ', 'GLN', 0.0, (88.68000000000002, 56.501, 61.126)), ('C', ' 516 ', 'GLU', 0.22554365948867489, (115.09700000000001, 61.60599999999999, 44.062)), ('C', ' 523 ', 'THR', 0.22021092518496807, (114.84800000000001, 63.038999999999994, 33.587999999999994))]
data['cbeta'] = []
data['probe'] = [(' C 431  GLY  HA3', ' C 513  LEU  O  ', -0.972, (109.404, 67.065, 47.163)), (' A 208  GLU  OE1', ' A 219  ARG  NH1', -0.831, (85.632, 64.563, 94.744)), (' A 327  PHE  O  ', ' A 331  SER  OG ', -0.789, (79.382, 84.133, 61.697)), (' A 133  CYS  HA ', ' A 141  CYS  HB3', -0.779, (45.678, 84.375, 83.991)), (' C 501  ASN  O  ', ' C 506  GLN  NE2', -0.769, (85.675, 76.319, 57.14)), (' A 177  ARG  NH2', ' A 495  GLU  O  ', -0.765, (56.655, 72.012, 100.784)), (' A  47  SER  O  ', ' A  51  ASN  ND2', -0.748, (69.106, 75.54, 67.063)), (' C 365  TYR  HA ', ' C 368  LEU HD13', -0.746, (105.357, 73.693, 38.453)), (' A 595  LEU  O  ', ' A 599  ASN  ND2', -0.731, (76.102, 104.716, 101.995)), (' A 457  GLU  HG2', ' A 513  ILE  HB ', -0.726, (76.705, 76.398, 94.143)), (' C 339  GLY  O  ', ' C 343  ASN  N  ', -0.718, (94.587, 68.562, 39.355)), (' A 451  PRO  HB2', ' A 485  VAL HG13', -0.715, (71.998, 88.62, 98.336)), (' A  97  LEU  O  ', ' A 101  GLN  HB2', -0.714, (85.91, 58.439, 83.014)), (' C 406  GLU  HG2', ' C 418  ILE HG13', -0.713, (95.879, 65.098, 60.392)), (' A  42  GLN  NE2', ' C 449  TYR  OH ', -0.707, (78.638, 64.237, 59.432)), (' A 145  GLU  HB3', ' A 149  ASN HD22', -0.701, (60.437, 86.406, 81.295)), (' C 490  PHE  HD1', ' C 491  PRO  HD2', -0.689, (90.848, 48.41, 61.721)), (' A 183  TYR  OH ', ' A 509  ASP  OD1', -0.679, (68.466, 69.102, 90.218)), (' A 245  ARG  HG2', ' A 249  MET  HE2', -0.672, (64.849, 102.071, 103.116)), (' C 393  THR  HA ', ' C 522  ALA  HA ', -0.671, (116.909, 61.818, 36.635)), (' A  74  LYS  NZ ', ' A 103  ASN  O  ', -0.664, (76.044, 58.177, 82.15)), (' C 371  SER  OG ', ' C 373  SER  OG ', -0.663, (96.948, 78.274, 42.258)), (' A 206  ASP  O  ', ' A1002  HOH  O  ', -0.655, (86.559, 71.698, 88.864)), (' A 564  GLU  O  ', ' A1003  HOH  O  ', -0.649, (92.243, 73.853, 84.548)), (' A 573  VAL HG23', ' A 574  VAL HG13', -0.646, (93.624, 86.188, 87.635)), (' A 269  ASP  O  ', ' A1004  HOH  O  ', -0.643, (61.099, 91.033, 92.074)), (' A 389  PRO  HG2', ' A 392  LEU HD12', -0.64, (92.209, 67.807, 77.885)), (' C 379  CYS  HA ', ' C 432  CYS  HB3', -0.64, (108.732, 72.594, 49.382)), (' A  81  GLN  OE1', ' A 103  ASN  ND2', -0.638, (80.182, 54.84, 85.655)), (' A 180  TYR  OH ', ' A1001  HOH  O  ', -0.638, (67.469, 71.99, 92.562)), (' A 285  PHE  HE2', ' A 436  ILE  HB ', -0.637, (77.633, 109.904, 90.856)), (' A  56  GLU  HA ', ' A  59  VAL HG12', -0.637, (60.259, 70.235, 63.173)), (' C 414  GLN  O  ', ' C 424  LYS  NZ ', -0.624, (107.48, 63.381, 62.468)), (' A 388  GLN  NE2', ' A 560  LEU  O  ', -0.618, (93.705, 73.79, 77.619)), (' C 442  ASP  O  ', ' C 448  ASN  ND2', -0.616, (85.059, 65.536, 50.48)), (' A  41  TYR  HH ', ' C 500  THR  HG1', -0.614, (80.118, 72.693, 59.765)), (' A 382  ASP  OD2', ' A1005  HOH  O  ', -0.612, (81.456, 78.881, 72.93)), (' A 114  LYS  O  ', ' A 118  THR HG23', -0.608, (61.321, 58.56, 83.987)), (' A 285  PHE  CE2', ' A 433  GLU  HA ', -0.605, (77.044, 111.605, 89.918)), (' A 470  LYS  HA ', ' A 473  TRP  CD1', -0.596, (62.924, 69.505, 102.859)), (' A  70  SER  HA ', ' A  73  LEU HD22', -0.595, (75.254, 61.137, 74.121)), (' A 312  GLU  O  ', ' A 316  VAL HG23', -0.594, (89.379, 92.694, 66.893)), (' A 535  HIS  HE1', ' A 538  PRO  O  ', -0.594, (90.213, 103.136, 86.861)), (' A 229  THR  HB ', ' A 581  VAL HG13', -0.589, (85.437, 86.46, 98.03)), (' A 482  ARG  NH2', ' A 489  GLU  OE1', -0.58, (59.36, 86.479, 106.314)), (' A 489  GLU  OE1', ' A 613  TYR  OH ', -0.577, (58.029, 85.526, 106.428)), (' A 378  HIS  NE2', ' A 402  GLU  OE1', -0.576, (78.494, 83.81, 78.192)), (' A 134  ASN  ND2', ' A 136  ASP  OD2', -0.575, (41.719, 91.103, 87.794)), (' A 297  MET  HE1', ' A 369  PHE  HB2', -0.574, (76.84, 99.27, 69.524)), (' A  20  THR HG23', ' A  23  GLU  HG2', -0.573, (100.998, 50.929, 78.572)), (' A 268  GLY  O  ', ' A 277  ASN  ND2', -0.571, (63.137, 93.623, 86.501)), (' A 247  LYS  HA ', ' A 250  ASN  ND2', -0.57, (65.438, 106.823, 97.368)), (' A 365  THR HG22', ' A 367  ASP  H  ', -0.57, (72.192, 98.931, 73.562)), (' A 539  LEU HD23', ' A 587  TYR  HB2', -0.569, (87.569, 97.24, 90.335)), (' A 152  MET  O  ', ' A 161  ARG  NH1', -0.568, (58.737, 95.246, 88.773)), (' A 245  ARG  O  ', ' A 249  MET  HG2', -0.567, (63.838, 103.338, 101.373)), (' A 181  GLU  O  ', ' A 185  VAL HG23', -0.565, (63.43, 62.783, 97.338)), (' A 474  MET  HE1', ' A 500  PRO  HD3', -0.558, (61.66, 77.644, 98.361)), (' A  30  ASP  O  ', ' A  34  HIS  ND1', -0.558, (90.988, 59.637, 68.202)), (' A 520  LEU  O  ', ' A1006  HOH  O  ', -0.555, (86.609, 89.423, 91.489)), (' A 523  PHE  HD2', ' A 584  LEU HD12', -0.552, (82.924, 91.619, 92.025)), (' A 527  GLU  OE1', ' A 582  ARG  NH2', -0.552, (93.33, 93.266, 93.917)), (' A 450  LEU HD21', ' A 519  THR  HB ', -0.551, (79.43, 87.523, 91.619)), (' A 221  GLN  NE2', ' A 224  GLU  OE2', -0.548, (88.638, 76.611, 103.12)), (' A  83  TYR  O  ', ' A 101  GLN  NE2', -0.545, (88.113, 53.782, 84.437)), (' A 574  VAL HG23', ' A 576  ALA  H  ', -0.545, (95.418, 85.509, 91.792)), (' A 232  GLU  O  ', ' A 235  PRO  HD2', -0.544, (82.367, 93.152, 103.107)), (' A 553  LYS  O  ', ' A 573  VAL HG12', -0.543, (95.485, 86.178, 82.466)), (' A 209  VAL HG21', ' A 565  PRO  HB3', -0.542, (92.911, 72.587, 90.449)), (' A 132  VAL  O  ', ' A 141  CYS  HB2', -0.542, (47.45, 84.172, 83.934)), (' A 594  TRP  CZ3', ' A 598  GLN  HG3', -0.536, (74.598, 108.733, 97.919)), (' A 288  LYS  HE3', ' A 433  GLU  HG2', -0.534, (76.485, 115.925, 87.976)), (' C 411  ALA  HB3', ' C 414  GLN  HG3', -0.532, (106.014, 69.094, 60.146)), (' C 394  ASN  O  ', ' C 516  GLU  HB2', -0.532, (113.344, 61.206, 41.713)), (' A 524  GLN  HB3', ' A 574  VAL HG11', -0.528, (91.206, 87.586, 90.209)), (' A 527  GLU  O  ', ' A 531  GLN  HG3', -0.528, (94.98, 95.362, 88.19)), (' A 127  TYR  CE2', ' A 504  PHE  HD1', -0.527, (62.795, 77.907, 83.152)), (' A  91  LEU  H  ', ' A  91  LEU HD12', -0.526, (98.74, 63.783, 85.28)), (' C 422  ASN  OD1', ' C 454  ARG  N  ', -0.525, (94.907, 57.244, 59.195)), (' A 145  GLU  HB3', ' A 149  ASN  ND2', -0.524, (60.737, 85.83, 81.44)), (' A 201  ASP  CG ', ' A 219  ARG  HE ', -0.524, (81.625, 65.754, 97.263)), (' C 429  PHE  HE1', ' C 514  SER  HB2', -0.522, (109.965, 64.102, 49.435)), (' C 419  ALA  O  ', ' C 424  LYS  HD3', -0.52, (105.413, 60.553, 60.558)), (' A 165  TRP  CH2', ' A 490  PRO  HD2', -0.516, (57.638, 86.958, 98.753)), (' A 163  TRP  O  ', ' A 167  SER  HB3', -0.514, (50.626, 86.167, 91.326)), (' A  46  ALA  HB1', ' A  62  MET  HA ', -0.513, (69.404, 68.637, 64.396)), (' C 336  CYS  SG ', ' C 358  ILE HG23', -0.507, (106.199, 64.204, 35.338)), (' C 338  PHE  HE2', ' C 363  ALA  HB1', -0.506, (106.806, 69.888, 36.412)), (' A 245  ARG  NH1', ' A1016  HOH  O  ', -0.506, (69.886, 98.737, 105.136)), (' A 293  VAL HG21', ' A 423  LEU HD21', -0.505, (78.267, 104.523, 72.288)), (' A 312  GLU  HB2', ' A 376  MET  HE1', -0.505, (84.316, 91.231, 65.476)), (' A 246  ALA  HA ', ' A 249  MET  HE3', -0.504, (65.603, 104.042, 103.027)), (' C 427  ASP  N  ', ' C 427  ASP  OD2', -0.503, (114.11, 62.953, 58.609)), (' A 126  ILE HD13', ' A 175  GLN  HB3', -0.503, (53.0, 70.895, 88.779)), (' C 442  ASP  OD1', ' C 509  ARG  NH2', -0.503, (88.809, 67.565, 46.269)), (' A  31  LYS  HB2', ' C 456  PHE  CZ ', -0.503, (91.019, 54.52, 69.009)), (' A 109  SER  O  ', ' A 112  LYS  N  ', -0.499, (65.559, 52.703, 87.435)), (' A 248  LEU HD21', ' A 278  LEU HD13', -0.498, (64.833, 99.85, 94.32)), (' C 336  CYS  O  ', ' C 338  PHE  N  ', -0.497, (101.156, 67.458, 34.968)), (' A 182  GLU  O  ', ' A 186  LEU  HG ', -0.494, (64.057, 60.757, 93.5)), (' A 104  GLY  O  ', ' A 107  VAL HG12', -0.489, (74.729, 56.745, 87.259)), (' A 312  GLU  OE2', ' A 322  ASN  HB2', -0.486, (88.825, 89.694, 63.089)), (' A  25  ALA  HB1', ' A  97  LEU HD11', -0.484, (92.611, 55.856, 80.809)), (' C 337  PRO  O  ', ' C 341  VAL HG23', -0.482, (99.153, 65.681, 36.998)), (' C 350  VAL  O  ', ' C 353  TRP  HD1', -0.479, (98.192, 57.874, 53.919)), (' A 204  ARG  NE ', ' A 219  ARG  O  ', -0.479, (81.487, 71.336, 98.628)), (' A 385  TYR  OH ', ' A 401  HIS  NE2', -0.477, (84.446, 77.889, 76.499)), (' A 478  TRP  CD2', ' A 489  GLU  HB3', -0.477, (60.313, 84.416, 101.417)), (' A 362  THR  HA ', ' A 368  ASP  OD2', -0.477, (71.599, 93.311, 68.132)), (' A 611  SER  OG ', ' A 614  ALA  N  ', -0.476, (54.491, 90.743, 108.883)), (' C 431  GLY  CA ', ' C 513  LEU  O  ', -0.476, (109.494, 67.931, 48.177)), (' C 498  GLN  N  ', ' C 498  GLN  OE1', -0.476, (81.989, 68.158, 57.287)), (' A 345  HIS  O  ', ' A 347  THR HG22', -0.475, (71.328, 83.468, 70.706)), (' C 412  PRO  HB2', ' C 427  ASP  HA ', -0.474, (112.912, 66.068, 58.156)), (' A 540  HIS  N  ', ' A1022  HOH  O  ', -0.473, (86.494, 101.459, 89.202)), (' A 229  THR  HB ', ' A 581  VAL  CG1', -0.472, (84.866, 87.245, 98.124)), (' A 134  ASN  OD1', ' A 135  PRO  HD2', -0.471, (43.535, 88.485, 89.367)), (' A 460  ARG  NH2', ' A 510  TYR  O  ', -0.468, (70.578, 73.904, 90.363)), (' A  27  THR HG21', ' C 473  TYR  HE2', -0.468, (94.877, 51.031, 71.02)), (' A 261  CYS  HB3', ' A 486  GLY  O  ', -0.468, (65.936, 92.064, 103.841)), (' A 456  LEU HD22', ' A 512  PHE  CD2', -0.467, (71.062, 79.12, 92.894)), (' A 456  LEU HD12', ' A 477  TRP  HH2', -0.466, (66.786, 80.464, 95.785)), (' A 332  MET  HE2', ' A 336  PRO  HG3', -0.465, (67.906, 84.22, 60.297)), (' A  21  ILE HD11', ' A  84  PRO  HD2', -0.464, (92.326, 50.298, 84.553)), (' C 360  ASN  HA ', ' C 523  THR HG22', -0.464, (112.504, 62.203, 31.696)), (' C 439  ASN  ND2', ' C 499  PRO  O  ', -0.463, (83.187, 75.382, 54.085)), (' A 303  ASP  N  ', ' A 303  ASP  OD1', -0.461, (76.448, 99.568, 60.439)), (' A 335  ASP  HB2', ' A 361  CYS  HB3', -0.46, (67.088, 90.009, 65.135)), (' A 249  MET  HE1', ' A 258  PRO  HA ', -0.46, (64.753, 102.626, 106.051)), (' A 259  ILE HG22', ' A 603  PHE  HD1', -0.459, (67.619, 100.593, 111.569)), (' A 232  GLU  HB2', ' A 581  VAL HG21', -0.459, (85.558, 89.912, 100.561)), (' C 368  LEU  H  ', ' C 368  LEU HD12', -0.457, (103.931, 75.4, 38.555)), (' C 404  GLY  N  ', ' C 504  GLY  O  ', -0.457, (92.698, 71.434, 58.901)), (' A 250  ASN  OD1', ' A1007  HOH  O  ', -0.456, (62.971, 107.326, 94.992)), (' A  30  ASP  HB3', ' C 456  PHE  HE1', -0.453, (93.665, 56.557, 70.15)), (' A 198  ASP  CG ', ' A 465  LYS  HA ', -0.451, (74.366, 65.605, 101.407)), (' C 335  LEU HD22', ' C 362  VAL  O  ', -0.451, (106.244, 69.905, 31.811)), (' A 381  TYR  HD2', ' A 401  HIS  HA ', -0.451, (85.36, 81.79, 79.354)), (' C 367  VAL HG13', ' C 368  LEU HD12', -0.45, (103.692, 75.065, 37.691)), (' C 458  LYS  HZ1', ' C 474  GLN  H  ', -0.448, (96.423, 45.209, 68.36)), (' C 490  PHE  CD1', ' C 491  PRO  HD2', -0.448, (90.4, 48.458, 61.389)), (' C 458  LYS  HZ1', ' C 474  GLN  HB3', -0.448, (96.506, 44.296, 69.188)), (' C 439  ASN  OD1', ' C 499  PRO  HA ', -0.447, (83.53, 73.184, 54.164)), (' A 181  GLU  OE1', ' A 470  LYS  HE3', -0.446, (59.316, 65.145, 101.061)), (' C 366  SER  H  ', ' C 388  ASN HD21', -0.445, (108.894, 77.15, 37.393)), (' A 524  GLN  OE1', ' A 580  ASN  N  ', -0.444, (89.508, 85.8, 94.611)), (' A 199  TYR  HD2', ' A 464  PHE  CZ ', -0.444, (71.255, 67.793, 93.557)), (' A 470  LYS  HB2', ' A 470  LYS  HE2', -0.443, (60.376, 65.912, 104.226)), (' A 314  PHE  CD2', ' A 373  HIS  HD2', -0.442, (85.249, 95.1, 72.722)), (' A 417  HIS  O  ', ' A 421  ILE HG12', -0.442, (85.146, 104.462, 71.671)), (' A 453  THR HG21', ' A 515  TYR  HB2', -0.442, (75.606, 82.654, 91.291)), (' A 103  ASN  OD1', ' A 107  VAL  HB ', -0.441, (77.206, 55.668, 86.897)), (' A 184  VAL HG23', ' A 464  PHE  CE1', -0.441, (68.576, 66.503, 96.287)), (' A 239  HIS  CD2', ' A 592  PHE  HE1', -0.44, (80.002, 100.418, 103.215)), (' A 557  MET  HG2', ' A 569  ALA  HB1', -0.439, (92.956, 80.058, 83.749)), (' A 315  PHE  CZ ', ' A 408  MET  HG3', -0.438, (86.266, 90.384, 74.922)), (' A  25  ALA  CB ', ' A  97  LEU HD11', -0.437, (92.764, 55.585, 80.968)), (' A 226  VAL HG22', ' A 579  MET  HE1', -0.436, (83.097, 80.643, 96.918)), (' A 482  ARG  HB3', ' A 608  THR  HB ', -0.436, (66.029, 87.768, 108.454)), (' A 323  MET  O  ', ' A 905  NAG  H82', -0.435, (88.334, 86.917, 61.336)), (' A 267  LEU HD13', ' A 275  TRP  HE1', -0.434, (67.129, 91.873, 95.319)), (' A  41  TYR  CE2', ' A  45  LEU HD11', -0.433, (79.591, 70.118, 60.745)), (' A 351  LEU  HB2', ' A 355  ASP  HB3', -0.433, (80.728, 74.537, 64.578)), (' A 284  PRO  HD2', ' A 437  ASN  OD1', -0.433, (73.545, 108.44, 89.11)), (' A 232  GLU  OE2', ' A1008  HOH  O  ', -0.433, (88.837, 88.12, 100.829)), (' A 369  PHE  CE1', ' A 373  HIS  HE1', -0.432, (80.861, 98.383, 71.348)), (' C 394  ASN  HB3', ' C 516  GLU  OE1', -0.431, (112.105, 59.155, 41.415)), (' A 207  TYR  CG ', ' A 222  LEU HD13', -0.431, (84.348, 75.066, 93.566)), (' A 477  TRP  CE3', ' A 500  PRO  HG3', -0.43, (65.225, 78.123, 98.38)), (' A 243  TYR  CE1', ' A 247  LYS  HD3', -0.43, (69.604, 107.05, 97.534)), (' A 457  GLU  HB3', ' A 513  ILE HD13', -0.43, (76.374, 78.738, 95.976)), (' A 381  TYR  CD2', ' A 401  HIS  HA ', -0.429, (85.328, 81.527, 79.342)), (' A 450  LEU HD21', ' A 519  THR  CB ', -0.428, (79.496, 87.771, 91.63)), (' C 369  TYR  CD2', ' C 384  PRO  HB2', -0.428, (108.811, 78.869, 44.886)), (' A 536  GLU  N  ', ' A 536  GLU  OE2', -0.427, (96.598, 104.885, 85.183)), (' A 247  LYS  HB2', ' A 282  THR HG22', -0.426, (67.343, 103.44, 95.407)), (' A 230  PHE  O  ', ' A 234  LYS  HG3', -0.426, (79.926, 88.875, 103.36)), (' C 354  ASN  OD1', ' C 355  ARG  N  ', -0.426, (98.806, 58.484, 44.539)), (' A 201  ASP  OD2', ' A 219  ARG  NE ', -0.426, (82.313, 65.245, 96.846)), (' C 438  SER  OG ', ' C 509  ARG  HG3', -0.424, (91.363, 70.495, 48.537)), (' A 330  ASN  HB3', ' A 357  ARG  NH2', -0.424, (77.481, 79.168, 60.047)), (' A 181  GLU  O  ', ' A 184  VAL HG12', -0.422, (63.594, 64.979, 96.939)), (' C 442  ASP  CG ', ' C 509  ARG  HE ', -0.42, (89.692, 67.97, 47.587)), (' A 363  LYS  HA ', ' A 363  LYS  HD3', -0.42, (68.517, 95.06, 65.766)), (' A 228  HIS  O  ', ' A 231  GLU  HB2', -0.42, (84.522, 86.312, 104.172)), (' A 521  TYR  HB3', ' A 525  PHE  CZ ', -0.42, (87.996, 84.517, 86.99)), (' A 424  LEU  HA ', ' A 424  LEU HD12', -0.419, (79.708, 110.635, 72.108)), (' A 137  ASN  ND2', ' A 140  GLU  HB3', -0.419, (41.9, 87.682, 81.506)), (' A 241  HIS  ND1', ' A1016  HOH  O  ', -0.418, (69.699, 97.18, 104.439)), (' C 366  SER  HB3', ' C 388  ASN HD21', -0.418, (109.24, 77.905, 37.531)), (' A 119  ILE HG21', ' A 183  TYR  HB2', -0.417, (62.701, 64.492, 90.205)), (' A  31  LYS  HB2', ' C 456  PHE  HZ ', -0.417, (91.073, 55.016, 69.536)), (' A 237  TYR  OH ', ' A 485  VAL  O  ', -0.417, (70.313, 91.452, 100.136)), (' A 501  ALA  O  ', ' A 507  SER  HB3', -0.416, (61.585, 75.6, 89.609)), (' A 209  VAL HG11', ' A 565  PRO  HB3', -0.415, (93.815, 71.454, 91.073)), (' A 458  LYS  HD3', ' A 480  MET  HE3', -0.412, (72.83, 78.867, 104.001)), (' A 192  ARG  NH1', ' A 198  ASP  OD1', -0.412, (73.757, 62.872, 101.269)), (' C 425  LEU  HA ', ' C 425  LEU HD23', -0.412, (108.184, 62.25, 54.927)), (' C 462  LYS  HD2', ' C 462  LYS  N  ', -0.412, (108.538, 53.418, 60.427)), (' A 168  TRP  CZ3', ' A 172  VAL HG21', -0.412, (54.867, 79.66, 86.511)), (' C 403  ARG  NH1', ' C 406  GLU  OE2', -0.411, (92.88, 67.096, 62.5)), (' A 572  ASN  OD1', ' A1009  HOH  O  ', -0.411, (99.837, 79.839, 87.176)), (' A 478  TRP  CE2', ' A 489  GLU  HB3', -0.41, (60.17, 83.975, 101.232)), (' C 437  ASN  ND2', ' C 506  GLN  OE1', -0.41, (89.463, 76.505, 54.511)), (' A 240  LEU HD22', ' A 443  ALA  HB1', -0.409, (75.924, 97.753, 94.723)), (' A 594  TRP  CH2', ' A 598  GLN  HG3', -0.409, (74.492, 108.826, 97.482)), (' C 454  ARG  HG3', ' C 491  PRO  O  ', -0.409, (94.495, 52.613, 61.191)), (' A 407  ILE  HA ', ' A 410  LEU HD12', -0.408, (84.859, 93.467, 83.236)), (' C 348  ALA  CB ', ' C 354  ASN  HB2', -0.407, (95.261, 58.947, 46.5)), (' C 379  CYS  HA ', ' C 432  CYS  CB ', -0.407, (108.839, 72.36, 49.372)), (' A 453  THR HG21', ' A 516  TYR  H  ', -0.407, (76.656, 82.589, 91.855)), (' C 397  ALA  HA ', ' C 512  VAL  O  ', -0.407, (104.409, 64.673, 45.929)), (' A 597  ASP  O  ', ' A 600  LYS  HE3', -0.406, (77.001, 111.125, 104.409)), (' A 432  ASN  N  ', ' A 432  ASN  OD1', -0.406, (82.984, 113.934, 89.525)), (' A 177  ARG  HD3', ' A 498  CYS  HB2', -0.406, (58.699, 72.196, 97.49)), (' A 137  ASN HD22', ' A 140  GLU  H  ', -0.405, (41.161, 86.433, 81.279)), (' A  70  SER  O  ', ' A  73  LEU HD23', -0.404, (75.544, 59.566, 75.478)), (' C 401  VAL HG22', ' C 509  ARG  HG2', -0.404, (92.17, 67.432, 49.247)), (' C 490  PHE  HD1', ' C 491  PRO  CD ', -0.404, (90.754, 49.146, 62.223)), (' A  74  LYS  HA ', ' A  74  LYS  HE3', -0.403, (76.639, 56.786, 78.65)), (' C 379  CYS  CA ', ' C 432  CYS  HB3', -0.402, (108.96, 73.336, 49.712)), (' A  63  ASN  O  ', ' A  67  ASP  OD1', -0.402, (67.559, 62.2, 68.801)), (' A 153  ALA  HB2', ' A1047  HOH  O  ', -0.401, (61.959, 92.126, 84.589)), (' C 378  LYS  O  ', ' C 432  CYS  HB3', -0.401, (107.931, 72.79, 50.506)), (' A  34  HIS  CE1', ' C 455  LEU HD11', -0.401, (92.79, 59.801, 67.211)), (' A 324  THR HG22', ' A1033  HOH  O  ', -0.4, (86.235, 83.317, 63.911)), (' A 103  ASN  HB2', ' A 106  SER  OG ', -0.4, (76.861, 55.808, 83.142)), (' A 476  LYS  O  ', ' A 480  MET  HG3', -0.4, (67.706, 79.405, 105.072)), (' A 199  TYR  HB3', ' A 464  PHE  CD1', -0.4, (71.679, 66.483, 95.491))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
