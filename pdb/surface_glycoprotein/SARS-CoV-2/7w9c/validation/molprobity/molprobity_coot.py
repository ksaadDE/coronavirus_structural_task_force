# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (196.51, 126.63999999999997, 297.2))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 755  GLN  O  ', ' D 968  SER  OG ', -0.717, (187.415, 189.978, 207.142)), (' D 811  LYS  NZ ', ' D 820  ASP  OD2', -0.714, (165.073, 199.962, 165.465)), (' B 968  SER  OG ', ' C 755  GLN  O  ', -0.708, (209.891, 186.453, 206.405)), (' D  40  ASP  OD2', ' D  44  ARG  NH2', -0.707, (167.578, 188.273, 205.87)), (' B 937  SER  O  ', ' B 941  THR  OG1', -0.705, (221.132, 176.559, 166.389)), (' C 131  CYS  HA ', ' C 166  CYS  HB3', -0.704, (206.236, 238.787, 236.087)), (' A 208  GLU  OE1', ' A 210  ASN  ND2', -0.7, (205.714, 168.303, 294.148)), (' C 546  LEU HD11', ' C 573  THR HG21', -0.698, (167.408, 200.768, 207.552)), (' D 216  LEU  O  ', ' D 218  GLN  NE2', -0.695, (154.128, 164.851, 201.181)), (' C 711  SER  OG ', ' D 895  GLN  NE2', -0.691, (176.284, 210.333, 140.261)), (' B 740  MET  SD ', ' D 319  ARG  NH1', -0.686, (193.97, 170.999, 203.444)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.672, (211.042, 162.327, 164.745)), (' C 701  ALA  O  ', ' D 787  GLN  NE2', -0.66, (179.832, 218.177, 157.342)), (' C 563  GLN  O  ', ' C 577  ARG  NH2', -0.645, (157.517, 194.884, 210.544)), (' B 787  GLN  NE2', ' D 703  ASN  OD1', -0.644, (186.33, 167.695, 155.07)), (' C 708  SER  OG ', ' C 711  SER  OG ', -0.64, (175.136, 210.707, 139.238)), (' D 212  LEU HD11', ' D 215  ASP  HA ', -0.639, (148.929, 162.554, 205.147)), (' B 701  ALA  O  ', ' C 787  GLN  NE2', -0.629, (227.461, 199.997, 156.608)), (' A 543  ASP  OD1', ' A 545  SER  OG ', -0.626, (177.044, 149.179, 275.349)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.618, (220.318, 221.282, 164.503)), (' B 130  VAL  O  ', ' B 166  CYS  HB2', -0.614, (233.227, 166.166, 234.662)), (' C 731  MET  N  ', ' C 774  GLN  OE1', -0.601, (210.913, 202.878, 177.772)), (' B 731  MET  N  ', ' B 774  GLN  OE1', -0.6, (200.214, 180.034, 178.21)), (' D 417  LYS  O  ', ' D 422  ASN  ND2', -0.591, (218.188, 166.309, 262.746)), (' C1040  VAL  O  ', ' D1030  SER  OG ', -0.579, (193.3, 202.349, 157.66)), (' B 804  GLN  OE1', ' B 935  GLN  NE2', -0.576, (215.492, 166.816, 158.437)), (' A 313  LYS  O  ', ' A 317  SER  OG ', -0.567, (182.41, 148.281, 268.622)), (' C 180  GLU  OE2', ' C 181  GLY  N  ', -0.567, (206.714, 265.646, 217.73)), (' A 402  GLU  OE2', ' A 514  ARG  NH2', -0.56, (198.122, 149.333, 290.093)), (' D 280  ASN  OD1', ' D 284  THR  N  ', -0.557, (157.936, 187.412, 198.387)), (' C  21  ARG  NH1', ' C 138  ASP  OD1', -0.551, (194.168, 255.416, 227.239)), (' B 105  ILE HD11', ' B 241  LEU HD21', -0.544, (245.685, 167.779, 227.568)), (' C 968  SER  OG ', ' D 755  GLN  O  ', -0.542, (201.233, 207.627, 207.114)), (' B 368  LEU  O  ', ' B 371  SER  OG ', -0.54, (234.262, 225.423, 242.888)), (' D 820  ASP  O  ', ' D 824  ASN  ND2', -0.535, (166.583, 196.34, 171.032)), (' B 546  LEU HD12', ' B 573  THR HG21', -0.533, (220.066, 218.629, 207.576)), (' B  89  GLY  HA3', ' B 270  LEU HD12', -0.53, (235.219, 176.895, 214.8)), (' C 201  PHE  CE2', ' C 235  ILE HD12', -0.52, (200.201, 234.645, 224.85)), (' C 375  SER  OG ', ' C 435  ALA  O  ', -0.516, (155.025, 210.36, 252.754)), (' C 280  ASN  OD1', ' C 284  THR  N  ', -0.513, (213.307, 233.563, 197.819)), (' B 720  ILE HG21', ' B 927  PHE  CE1', -0.51, (213.139, 178.564, 148.034)), (' A 110  GLU  N  ', ' A 110  GLU  OE2', -0.51, (226.258, 149.753, 302.675)), (' B 197  ILE HD12', ' B 202  LYS  HB2', -0.506, (227.392, 170.813, 216.802)), (' D 125  ASN  ND2', ' D 172  SER  O  ', -0.505, (145.872, 185.609, 224.408)), (' D  15  CYS  O  ', ' D 137  ASN  ND2', -0.504, (151.429, 156.532, 236.449)), (' D 707  TYR  O  ', ' D 708  SER  OG ', -0.504, (196.747, 163.397, 140.044)), (' D 294  ASP  N  ', ' D 294  ASP  OD1', -0.502, (171.751, 168.068, 195.497)), (' B 689  SER  O  ', ' B 689  SER  OG ', -0.5, (247.342, 187.921, 174.437)), (' C  91  TYR  CE2', ' C 193  VAL HG22', -0.498, (200.078, 238.072, 210.758)), (' B 546  LEU  CD1', ' B 573  THR HG21', -0.498, (220.323, 218.396, 207.188)), (' D 357  ARG  NH2', ' D 394  ASN  OD1', -0.495, (223.769, 167.653, 235.659)), (' B 389  ASP  O  ', ' B 528  LYS  NZ ', -0.495, (222.98, 217.248, 227.23)), (' A 190  MET  O  ', ' A 194  ASN  ND2', -0.492, (215.123, 158.372, 301.147)), (' C  23  GLN  NE2', ' C  81  ASN  OD1', -0.489, (190.447, 253.414, 224.66)), (' C 105  ILE  CD1', ' C 241  LEU HD21', -0.488, (199.163, 247.856, 228.056)), (' C 105  ILE HD11', ' C 241  LEU HD21', -0.488, (199.29, 248.057, 228.504)), (' B 973  ILE  N  ', ' B 992  GLN  OE1', -0.487, (205.948, 184.946, 216.546)), (' B 280  ASN  OD1', ' B 284  THR  N  ', -0.486, (226.042, 162.914, 197.6)), (' D 326  ILE HD12', ' D 539  VAL HG21', -0.485, (201.206, 156.965, 209.078)), (' A  98  GLN  O  ', ' A 102  GLN  NE2', -0.484, (211.99, 162.413, 292.099)), (' B 319  ARG  NE ', ' C 740  MET  SD ', -0.478, (222.722, 201.46, 201.398)), (' B 598  ILE HG23', ' B 664  ILE HG21', -0.474, (230.285, 191.389, 180.04)), (' D 100  ILE  O  ', ' D 243  ALA  N  ', -0.471, (145.663, 165.831, 222.019)), (' C 546  LEU  CD1', ' C 573  THR HG21', -0.471, (167.111, 200.1, 207.821)), (' A 389  PRO  O  ', ' A 393  ARG  N  ', -0.47, (207.015, 158.971, 279.1)), (' B  34  ARG  NH1', ' B 221  SER  OG ', -0.469, (239.83, 166.499, 201.856)), (' D 973  ILE  N  ', ' D 992  GLN  OE1', -0.468, (187.816, 194.046, 217.05)), (' D 689  SER  O  ', ' D 689  SER  OG ', -0.463, (168.448, 156.524, 176.015)), (' D 105  ILE  CD1', ' D 241  LEU HD21', -0.454, (153.333, 167.845, 228.487)), (' D 173  GLN  N  ', ' D 173  GLN  OE1', -0.453, (148.524, 187.733, 221.581)), (' D  33  THR  OG1', ' D 219  GLY  O  ', -0.453, (158.513, 171.453, 198.614)), (' B  99  ASN  O  ', ' B 102  ARG  NE ', -0.441, (249.777, 158.937, 220.176)), (' C 560  LEU  O  ', ' C 577  ARG  NH1', -0.44, (155.531, 194.63, 208.774)), (' C 555  SER  OG ', ' C 556  ASN  N  ', -0.44, (157.839, 203.118, 197.835)), (' D 367  VAL  O  ', ' D 371  SER  OG ', -0.437, (207.557, 149.938, 239.571)), (' B 912  THR HG22', ' B1109  PHE  CZ ', -0.437, (210.074, 188.49, 135.143)), (' D  14  GLN  N  ', ' D 255  SER  HG ', -0.436, (145.718, 160.527, 236.004)), (' B1030  SER  OG ', ' D1040  VAL  O  ', -0.434, (194.032, 185.626, 158.21)), (' A 107  VAL HG21', ' A 193  ALA  HB3', -0.43, (217.364, 158.736, 302.757)), (' B 125  ASN  OD1', ' B 126  VAL  N  ', -0.43, (237.146, 154.584, 222.695)), (' D 102  ARG  NH1', ' D 141  LEU  O  ', -0.428, (142.904, 168.758, 226.348)), (' B 500  THR  O  ', ' B 500  THR HG22', -0.427, (237.211, 227.83, 269.746)), (' C 971  GLY  O  ', ' C 995  ARG  NH1', -0.427, (201.21, 202.755, 215.749)), (' C  34  ARG  NH1', ' C 221  SER  OG ', -0.427, (203.043, 243.59, 203.138)), (' C 748  GLU  N  ', ' C 748  GLU  OE1', -0.426, (219.598, 198.042, 213.806)), (' D 393  THR  O  ', ' D 523  THR  OG1', -0.424, (220.478, 166.82, 233.305)), (' A 312  GLU  OE1', ' A 328  TRP  NE1', -0.424, (192.31, 143.139, 267.868)), (' D 324  GLU  OE2', ' D 537  LYS  NZ ', -0.423, (194.814, 151.554, 209.066)), (' C 439  ASN  O  ', ' C 443  SER  OG ', -0.422, (144.544, 208.407, 261.078)), (' C 324  GLU  OE2', ' C 537  LYS  NZ ', -0.422, (164.135, 220.037, 209.326)), (' C  86  PHE  N  ', ' C 236  THR  O  ', -0.419, (192.224, 236.919, 223.203)), (' B 540  ASN  OD1', ' B 549  THR HG22', -0.419, (226.254, 208.221, 209.51)), (' C 699  LEU HD22', ' D 873  TYR  CE1', -0.415, (180.767, 212.132, 166.946)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.41, (208.587, 227.518, 207.583)), (' B 879  ALA  O  ', ' B 883  THR  OG1', -0.41, (196.926, 170.221, 150.646)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.409, (198.92, 241.592, 199.145)), (' D 725  GLU  OE2', ' D1028  LYS  NZ ', -0.407, (188.359, 190.483, 163.382)), (' C 326  ILE HD12', ' C 539  VAL HG21', -0.406, (165.291, 211.84, 209.463)), (' C 880  GLY  O  ', ' C 884  SER  N  ', -0.405, (217.553, 204.129, 148.986)), (' D 568  ASP  N  ', ' D 572  THR  O  ', -0.405, (212.185, 168.189, 200.425)), (' D1089  PHE  O  ', ' D1121  PHE  N  ', -0.403, (201.656, 184.462, 127.714)), (' D 462  LYS  N  ', ' D 465  GLU  OE1', -0.402, (222.051, 174.405, 256.321)), (' A 417  HIS  N  ', ' A 543  ASP  OD2', -0.401, (175.328, 146.807, 277.176))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
