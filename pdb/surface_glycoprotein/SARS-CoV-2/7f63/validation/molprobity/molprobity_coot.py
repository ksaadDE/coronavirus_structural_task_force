# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 520 ', 'ALA', 0.016080703519745485, (172.6390000000001, 215.713, 202.106))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 444  LYS  HB2', ' A 447  GLY  HA2', -0.743, (185.498, 185.319, 164.989)), (' L  35  TRP  HB2', ' L  48  ILE HG22', -0.723, (158.589, 227.969, 142.163)), (' L  61  HIS  O  ', ' L  76  SER  OG ', -0.663, (156.833, 239.828, 142.726)), (' H 106  ALA  O  ', ' L  36  TYR  OH ', -0.657, (166.492, 223.011, 142.771)), (' H  70  LEU HD22', ' H  81  MET  HE1', -0.652, (177.667, 210.107, 136.037)), (' L  63  THR  HB ', ' L  74  THR  HB ', -0.636, (150.813, 235.653, 143.539)), (' H  28  THR  OG1', ' H  31  GLU  OE2', -0.626, (180.49, 221.079, 154.03)), (' A 405  ASP  O  ', ' A 408  ARG  NH1', -0.589, (191.077, 206.456, 168.329)), (' A 474  GLN  NE2', ' A 478  THR  O  ', -0.589, (164.358, 213.897, 152.252)), (' H  94  TYR  O  ', ' H 113  GLY  HA2', -0.588, (177.543, 222.727, 132.328)), (' A 457  ARG  NH1', ' A 467  ASP  OD2', -0.586, (169.351, 210.68, 169.322)), (' L  86  TYR  HB2', ' L 102  THR  HB ', -0.581, (157.571, 228.783, 132.266)), (' L  32  ASN  ND2', ' L  91  TYR  O  ', -0.581, (159.468, 215.516, 146.822)), (' L  32  ASN  OD1', ' L  92  ASN  ND2', -0.563, (157.7, 215.743, 145.234)), (' A 485  GLY  H  ', ' A 488  CYS  HB2', -0.548, (167.271, 204.507, 151.392)), (' A 444  LYS  HB3', ' A 499  PRO  HG3', -0.543, (187.926, 184.478, 164.714)), (' A 358  ILE HG13', ' A 395  VAL  HB ', -0.53, (178.561, 204.068, 193.267)), (' H  83  LEU HD23', ' H  86  LEU HD11', -0.528, (178.699, 212.77, 125.172)), (' A 486  PHE  HE1', ' H  52  ASN  HB2', -0.525, (174.147, 209.51, 147.808)), (' H  32  TYR  HD2', ' H  98  ARG  HE ', -0.52, (177.216, 220.975, 149.853)), (' A 520  ALA  HB3', ' A 521  PRO  HD3', -0.516, (171.192, 214.096, 201.32)), (' A 406  GLU  HG2', ' A 418  ILE HD13', -0.506, (185.479, 205.209, 168.155)), (' H   6  GLN  H  ', ' H 112  GLN HE22', -0.494, (183.659, 226.077, 134.926)), (' A 364  ASP  OD1', ' A 388  ASN  ND2', -0.493, (190.811, 200.877, 199.722)), (' H  67  LYS  HD3', ' H  83  LEU  HG ', -0.491, (177.285, 210.585, 128.196)), (' L  37  GLN  HG2', ' L  47  LEU  HB2', -0.489, (162.658, 232.232, 138.749)), (' H  51  ASN  ND2', ' H  70  LEU HD12', -0.487, (179.035, 211.996, 140.816)), (' A 486  PHE  HB3', ' L  94  TYR  CE1', -0.487, (167.798, 207.732, 146.568)), (' H  12  VAL HG12', ' H  18  VAL HG11', -0.486, (183.898, 214.075, 123.496)), (' H  81  MET  HA ', ' H  81  MET  HE2', -0.481, (179.991, 211.463, 135.242)), (' A 501  ASN  HB3', ' A 505  TYR  HB2', -0.472, (191.568, 194.317, 164.619)), (' L  37  GLN  N  ', ' L  45  LYS  O  ', -0.471, (165.193, 230.419, 137.835)), (' H  64  PHE  CD1', ' H  64  PHE  O  ', -0.471, (172.465, 206.965, 130.782)), (' H  23  LYS  HD3', ' H  78  THR  HB ', -0.471, (187.478, 219.268, 141.437)), (' L  19  VAL HG23', ' L  75  ILE  HB ', -0.47, (155.14, 236.757, 137.566)), (' H  73  ASP  N  ', ' H  73  ASP  OD1', -0.465, (187.088, 212.998, 143.091)), (' L  89  GLN  HG3', ' L  98  PHE  CZ ', -0.462, (163.373, 220.329, 139.399)), (' H  20  ILE HD13', ' H  83  LEU HD13', -0.461, (180.225, 213.697, 129.72)), (' A 433  VAL HG22', ' A 512  VAL HG22', -0.461, (185.049, 207.176, 181.891)), (' L  86  TYR  N  ', ' L 102  THR  O  ', -0.458, (159.915, 229.548, 131.724)), (' H   4  LEU  HB2', ' H 109  PHE  HE2', -0.458, (179.555, 225.626, 141.826)), (' H  29  PHE  HD1', ' H  98  ARG HH12', -0.457, (180.345, 218.193, 147.91)), (' A 429  PHE  CZ ', ' A 431  GLY  HA3', -0.454, (183.499, 211.235, 185.399)), (' A 336  CYS  HB3', ' A 361  CYS  HB2', -0.454, (177.868, 197.388, 198.988)), (' H  38  LYS  HD2', ' H  94  TYR  CZ ', -0.448, (174.717, 214.608, 129.676)), (' A 426  PRO  HD3', ' A 463  PRO  HB3', -0.448, (177.871, 215.131, 179.833)), (' H  91  SER  HA ', ' H 116  VAL  O  ', -0.445, (177.003, 218.414, 122.651)), (' L  24  LYS  HB3', ' L  24  LYS  HE3', -0.443, (149.124, 220.894, 135.082)), (' L  50  SER  HB2', ' L  53  TYR  CD2', -0.439, (158.533, 226.041, 150.542)), (' H  71  THR  CG2', ' H  80  TYR  HB2', -0.438, (185.181, 210.894, 137.693)), (' L  13  THR HG21', ' L  19  VAL HG12', -0.436, (152.108, 237.76, 132.653)), (' L  73  LEU HD12', ' L  74  THR  N  ', -0.433, (153.993, 232.741, 142.076)), (' H  60  TYR  HE1', ' H  70  LEU HD23', -0.433, (175.797, 207.705, 137.483)), (' H  34  ILE HD11', ' H  98  ARG HH11', -0.429, (178.971, 218.979, 146.28)), (' A 347  PHE  CD2', ' A 509  ARG  HD2', -0.428, (182.458, 194.717, 178.975)), (' A 451  TYR  O  ', ' A 494  SER  HA ', -0.427, (177.902, 195.918, 165.001)), (' A 366  SER  HA ', ' A 369  TYR  CE2', -0.426, (193.154, 202.441, 194.318)), (' H  38  LYS  HG3', ' H  48  ILE HG13', -0.425, (173.13, 215.077, 131.871)), (' L  50  SER  HB2', ' L  53  TYR  HD2', -0.423, (158.738, 226.156, 150.34)), (' L  39  LYS  NZ ', ' L  81  ALA  O  ', -0.421, (164.37, 238.821, 134.197)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.42, (179.449, 207.365, 168.562)), (' H  48  ILE  HA ', ' H  48  ILE HD13', -0.419, (170.636, 212.334, 133.034)), (' L  38  GLN  OE1', ' L  44  PRO  HG3', -0.419, (168.534, 226.897, 133.267)), (' A 347  PHE  HD2', ' A 509  ARG  HD2', -0.419, (182.373, 194.844, 178.748)), (' H  31  GLU  HG2', ' H  32  TYR  H  ', -0.419, (177.511, 217.993, 152.057)), (' H  48  ILE HG23', ' H  64  PHE  CZ ', -0.417, (173.649, 211.059, 133.49)), (' H  95  TYR  HE2', ' L  43  SER  HA ', -0.417, (173.028, 227.488, 134.273)), (' A 453  TYR  CE1', ' A 493  GLN  HB2', -0.416, (178.505, 200.778, 162.504)), (' A 361  CYS  H  ', ' A 524  VAL HG12', -0.416, (178.013, 202.393, 200.009)), (' L  35  TRP  HZ3', ' L  86  TYR  HB3', -0.415, (158.24, 228.29, 134.961)), (' L  37  GLN  OE1', ' L  47  LEU HD22', -0.415, (160.422, 232.263, 137.844)), (' A 418  ILE HG23', ' A 422  ASN  HB2', -0.414, (180.095, 206.292, 170.908)), (' A 374  PHE  HB3', ' A 434  ILE HD11', -0.413, (192.687, 199.484, 184.77)), (' L  23  CYS  HB3', ' L  71  PHE  HB2', -0.412, (152.77, 223.545, 140.856)), (' L  35  TRP  CZ3', ' L  86  TYR  HB3', -0.41, (158.199, 228.376, 135.092)), (' A 378  LYS  HA ', ' A 378  LYS  HD3', -0.41, (193.948, 208.943, 183.549)), (' L  10  PHE  HB2', ' L 103  LYS  HB3', -0.409, (156.996, 230.556, 126.311)), (' L   4  MET  HB2', ' L   4  MET  HE2', -0.406, (155.988, 216.883, 136.114)), (' L  79  GLN  N  ', ' L  82  ASP  OD2', -0.406, (158.8, 242.173, 134.538)), (' H  31  GLU  HG2', ' H  32  TYR  N  ', -0.404, (177.322, 217.853, 152.221)), (' L  67  SER  OG ', ' L  68  GLY  N  ', -0.402, (149.224, 220.375, 149.232)), (' H  69  THR HG21', ' H  82  GLU  HB3', -0.402, (181.78, 206.817, 132.621))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
