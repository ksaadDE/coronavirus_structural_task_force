# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  98 ', 'SER', 0.030425609686185733, (129.473, 107.24599999999997, 138.157)), ('B', ' 544 ', 'ASN', 0.025752976744244115, (130.67999999999995, 172.463, 135.16)), ('C', '  97 ', 'LYS', 0.03286519957643751, (129.76399999999998, 212.051, 139.398)), ('C', ' 481 ', 'ASN', 0.036509622000881384, (195.77499999999995, 135.749, 109.71400000000003)), ('C', ' 590 ', 'CYS', 0.04095343521692314, (174.641, 189.461, 152.87300000000002))]
data['omega'] = []
data['rota'] = [('A', ' 106 ', 'PHE', 0.17632912491224945, (205.052, 156.9, 127.783)), ('A', ' 170 ', 'TYR', 0.2854892783078396, (204.97599999999994, 172.27199999999993, 124.615)), ('A', ' 242 ', 'LEU', 0.0, (219.58999999999995, 159.503, 131.972)), ('A', ' 347 ', 'PHE', 0.23627985568450702, (149.596, 136.93099999999995, 107.79200000000003)), ('A', ' 779 ', 'GLN', 0.0005274246138329722, (165.31, 178.46499999999995, 185.68)), ('A', ' 886 ', 'TRP', 0.012689779768302668, (166.607, 173.78, 205.65700000000007)), ('A', '1135 ', 'ASN', 0.12294350930439658, (170.626, 140.52, 233.10200000000006)), ('B', ' 122 ', 'ASN', 0.007001254724648369, (134.97599999999994, 110.971, 129.235)), ('B', ' 124 ', 'THR', 0.030971596333919552, (139.40399999999997, 108.876, 126.99900000000002)), ('B', ' 125 ', 'ASN', 0.007156702984985867, (141.05299999999994, 112.354, 127.03400000000002)), ('B', ' 126 ', 'VAL', 0.1929515970058715, (140.496, 115.948, 128.326)), ('B', ' 242 ', 'LEU', 0.004314101849000996, (126.23, 114.90299999999998, 130.603)), ('B', ' 331 ', 'ASN', 0.006985943078247904, (122.04599999999998, 174.896, 129.13)), ('B', ' 347 ', 'PHE', 0.1774215492117683, (144.766, 182.341, 107.839)), ('B', ' 403 ', 'ARG', 0.29435283746902, (156.573, 175.988, 108.232)), ('C', ' 233 ', 'ILE', 0.07040602092483797, (149.82099999999994, 194.58, 123.926)), ('C', ' 403 ', 'ARG', 0.20934016168657926, (172.96199999999993, 157.304, 108.57700000000003)), ('C', ' 458 ', 'LYS', 0.1659669691187121, (187.381, 141.809, 120.787)), ('C', ' 505 ', 'TYR', 0.23522162255141887, (169.341, 155.884, 105.505)), ('C', ' 907 ', 'ASN', 0.2208068548128806, (154.44, 165.948, 214.852)), ('C', '1074 ', 'ASN', 0.0, (167.212, 186.145, 217.343))]
data['cbeta'] = [('A', ' 369 ', 'TYR', ' ', 0.30932379116508657, (166.86399999999995, 144.262, 118.067)), ('A', ' 904 ', 'TYR', ' ', 0.41057742489975624, (169.87, 169.716, 213.45)), ('B', ' 904 ', 'TYR', ' ', 0.3570667690452314, (165.772, 148.232, 213.11)), ('C', ' 487 ', 'ASN', ' ', 0.2666716144443263, (182.60499999999993, 132.019, 113.55800000000002))]
data['probe'] = [(' A1308  NAG  O3 ', ' A1308  NAG  O7 ', -0.801, (167.194, 130.663, 233.345)), (' A1308  NAG  C7 ', ' A1308  NAG  HO3', -0.688, (167.094, 130.797, 232.42)), (' C 615  VAL  O  ', ' C 649  CYS  SG ', -0.68, (173.977, 193.988, 165.392)), (' C 236  THR HG21', ' C1302  NAG  H5 ', -0.674, (158.491, 199.367, 127.125)), (' C1304  NAG  H3 ', ' C1304  NAG  O7 ', -0.637, (182.245, 196.786, 168.936)), (' C1308  NAG  C1 ', ' C1308  NAG  O7 ', -0.594, (168.502, 189.9, 215.512)), (' A 894  LEU HD21', ' C1072  GLU  HG2', -0.588, (162.346, 182.545, 210.882)), (' B 457  ARG  NH1', ' C1302  NAG  H81', -0.58, (159.714, 193.211, 122.303)), (' C1074  ASN  ND2', ' C1308  NAG  O7 ', -0.572, (169.17, 189.555, 215.497)), (' B 457  ARG HH12', ' C1302  NAG  H81', -0.548, (159.381, 192.766, 122.894)), (' C 115  GLN  OE1', ' C 130  VAL HG12', -0.538, (145.741, 198.307, 119.047)), (' C1105  THR HG23', ' C1111  GLU  H  ', -0.514, (160.61, 177.34, 221.946)), (' C1308  NAG  O4 ', ' C1308  NAG  O6 ', -0.491, (167.752, 191.077, 209.92)), (' C1074  ASN  N  ', ' C1074  ASN  OD1', -0.483, (166.033, 188.03, 216.515)), (' B 102  ARG  HD3', ' B 122  ASN  HA ', -0.461, (133.501, 111.153, 129.992)), (' A1032  CYS  CB ', ' A1043  CYS  HG ', -0.446, (170.387, 165.4, 197.349)), (' A 616  ASN  HB3', ' A 619  GLU  HG3', -0.435, (181.8, 130.758, 160.519)), (' A 895  GLN HE22', ' C1074  ASN  HB3', -0.428, (169.204, 186.074, 214.777)), (' A1032  CYS  HG ', ' A1043  CYS  HG ', -0.428, (169.897, 164.509, 198.038)), (' B 738  CYS  SG ', ' B 760  CYS  HA ', -0.421, (172.398, 154.0, 155.937)), (' C 281  GLU  HB2', ' C1303  NAG  H82', -0.421, (130.074, 187.821, 159.395)), (' B 236  THR HG21', ' B1301  NAG  H5 ', -0.414, (128.306, 139.315, 127.398)), (' C  31  SER  HB3', ' C  62  VAL HG23', -0.414, (148.877, 205.791, 148.148)), (' C1302  NAG  H2 ', ' C1302  NAG  H82', -0.412, (159.782, 196.274, 124.228)), (' B 122  ASN  HB2', ' B 123  ALA  H  ', -0.408, (134.685, 108.642, 128.089)), (' A1082  CYS  HB2', ' A1134  ASN  HA ', -0.406, (167.12, 137.955, 232.12))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
