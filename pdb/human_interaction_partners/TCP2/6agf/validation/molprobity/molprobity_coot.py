# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 210 ', 'VAL', 0.0, (143.212, 179.035, 139.977)), ('A', ' 381 ', 'ASN', 0.01758638353859333, (121.596, 143.32099999999994, 156.087)), ('A', ' 392 ', 'PHE', 0.012473868565153387, (113.52699999999997, 148.042, 143.314)), ('A', '1272 ', 'TYR', 0.01701476101720876, (150.503, 138.852, 139.342)), ('A', '1556 ', 'ASN', 0.013829107408098697, (137.41, 107.481, 163.343)), ('B', '  76 ', 'GLU', 0.007599090489084539, (134.399, 110.99299999999998, 180.68)), ('B', '  77 ', 'VAL', 0.026729507480266625, (134.536, 107.181, 180.992))]
data['omega'] = [('A', '1551 ', 'PRO', None, (146.11, 116.709, 161.24))]
data['rota'] = [('A', ' 209 ', 'PHE', 0.004922012287971801, (144.162, 180.73499999999996, 136.686)), ('A', ' 210 ', 'VAL', 0.14527246471845062, (143.212, 179.035, 139.977)), ('A', ' 211 ', 'ASP', 0.008554320948467089, (140.242, 176.833, 140.921)), ('A', ' 212 ', 'LEU', 0.25572418159422133, (136.958, 178.575, 141.721)), ('A', ' 249 ', 'LYS', 0.0, (122.636, 147.884, 115.64300000000001)), ('A', ' 252 ', 'ASP', 0.07160749238306577, (116.775, 146.672, 119.76099999999998)), ('A', ' 269 ', 'LEU', 0.0, (111.366, 142.13099999999994, 144.897)), ('A', ' 362 ', 'ASN', 0.0021899012205549074, (111.151, 130.642, 159.582)), ('A', ' 368 ', 'HIS', 0.010452749987055067, (117.87599999999999, 127.34799999999998, 161.614)), ('A', ' 369 ', 'CYS', 0.0, (119.601, 129.184, 164.432)), ('A', ' 375 ', 'CYS', 0.20222081431906921, (115.005, 134.062, 163.731)), ('A', ' 381 ', 'ASN', 0.08059527706295101, (121.596, 143.32099999999994, 156.087)), ('A', ' 388 ', 'SER', 0.04453066500457562, (118.982, 143.33399999999997, 149.598)), ('A', ' 433 ', 'LEU', 0.0852254720801309, (116.173, 132.94399999999993, 130.622)), ('A', ' 620 ', 'ILE', 0.11969238737838263, (172.992, 120.461, 121.783)), ('A', ' 705 ', 'LEU', 0.05271728591108764, (146.256, 149.144, 120.44299999999998)), ('A', ' 707 ', 'LEU', 0.031876665896747675, (142.179, 147.85599999999994, 123.70900000000002)), ('A', ' 769 ', 'CYS', 0.0721170310187711, (134.93, 151.437, 146.496)), ('A', ' 794 ', 'LEU', 0.007411863166653228, (134.392, 141.07, 122.372)), ('A', ' 795 ', 'ASN', 0.24611498683067384, (135.194, 142.859, 119.13899999999998)), ('A', ' 796 ', 'LEU', 0.0, (138.8, 141.715, 119.204)), ('A', ' 798 ', 'LEU', 0.07641386055145173, (135.212, 138.379, 116.90100000000001)), ('A', '1020 ', 'LEU', 0.0, (110.484, 81.212, 117.076)), ('A', '1021 ', 'ARG', 7.004285896866286e-05, (113.18300000000004, 83.772, 116.35600000000001)), ('A', '1041 ', 'ILE', 0.1233359019248219, (114.621, 102.69299999999997, 133.325)), ('A', '1082 ', 'LEU', 0.09783328790681407, (114.858, 88.158, 124.74400000000001)), ('A', '1190 ', 'ILE', 0.06860189099200523, (150.516, 129.444, 161.9)), ('A', '1235 ', 'LEU', 0.10514043467823699, (144.9, 122.006, 138.852)), ('A', '1238 ', 'LEU', 0.1408998382299339, (142.369, 125.261, 135.99)), ('A', '1269 ', 'LEU', 0.017907083943205275, (154.508, 141.814, 144.206)), ('A', '1287 ', 'LEU', 0.0011512835203110075, (139.375, 129.83099999999996, 123.49099999999999)), ('A', '1288 ', 'ASN', 0.19600600588901537, (139.61, 131.527, 120.14299999999999)), ('A', '1289 ', 'LEU', 0.0, (141.385, 128.539, 118.66599999999998)), ('A', '1295 ', 'ILE', 0.14730760538338564, (132.052, 126.43099999999997, 113.55699999999999)), ('A', '1303 ', 'LYS', 0.0, (126.35499999999998, 120.401, 104.57)), ('A', '1304 ', 'LYS', 0.07744300636588533, (127.34400000000002, 116.73099999999997, 104.524)), ('A', '1357 ', 'ILE', 0.12056336743777082, (98.069, 154.89099999999993, 122.87700000000001)), ('A', '1395 ', 'ILE', 0.13455037244429718, (90.183, 150.42399999999995, 133.678)), ('A', '1426 ', 'LEU', 0.24357483509940225, (93.199, 136.92199999999994, 137.047)), ('A', '1446 ', 'LEU', 0.17847187087159044, (101.447, 132.175, 149.719)), ('A', '1450 ', 'ILE', 0.20921474640350868, (99.485, 134.937, 143.576)), ('A', '1460 ', 'ARG', 0.09430244824669812, (101.058, 143.26899999999995, 126.954)), ('A', '1463 ', 'ARG', 0.1527174269894751, (103.129, 143.625, 121.896)), ('A', '1466 ', 'LYS', 0.01726363321450225, (108.314, 144.659, 115.83)), ('A', '1472 ', 'LEU', 0.08952223874630495, (111.549, 136.603, 120.94099999999999)), ('A', '1475 ', 'LEU', 3.3411801705351346e-05, (114.135, 132.015, 120.91099999999999)), ('A', '1477 ', 'MET', 0.1459913862640524, (112.31600000000003, 128.801, 116.97899999999998)), ('A', '1479 ', 'LEU', 0.05858460901041477, (113.296, 125.95499999999994, 121.565)), ('A', '1488 ', 'LEU', 0.061761692909876494, (121.386, 115.51199999999996, 128.15)), ('A', '1489 ', 'LEU', 0.0, (122.688, 118.05699999999995, 130.639)), ('A', '1552 ', 'ASP', 0.16696354906286207, (142.364, 119.21499999999997, 159.328)), ('A', '1556 ', 'ASN', 0.01687963816316871, (137.41, 107.481, 163.343)), ('A', '1557 ', 'LEU', 0.00306589716200998, (134.958, 110.32399999999997, 163.863)), ('A', '1582 ', 'ILE', 0.06718219694856266, (134.003, 121.10899999999997, 134.467)), ('A', '1583 ', 'ILE', 0.07459950824287176, (135.307, 119.68799999999995, 131.176)), ('B', '  62 ', 'LYS', 0.24372265350095768, (104.879, 96.843, 183.712)), ('B', ' 101 ', 'LEU', 0.01482663356791508, (128.06899999999993, 113.614, 173.616)), ('B', ' 104 ', 'LEU', 0.04721701702680896, (123.485, 108.31, 174.403)), ('B', ' 157 ', 'ILE', 0.19588746454185912, (107.045, 89.699, 154.576))]
data['cbeta'] = []
data['probe'] = [(' A 381  ASN HD22', ' A 382  PRO  HD3', -1.058, (120.446, 141.447, 153.489)), (' A 276  LEU HD12', ' A 382  PRO  HG2', -0.989, (121.55, 139.845, 152.21)), (' A1509  LYS  HE2', ' A1518  ASN HD21', -0.953, (127.61, 119.22, 155.599)), (' A1555  PRO  O  ', ' A1556  ASN  CG ', -0.938, (139.516, 108.008, 162.877)), (' A 421  LYS  HE3', ' A1516  MET  HE3', -0.873, (117.993, 124.715, 152.426)), (' A1509  LYS  HE2', ' A1518  ASN  ND2', -0.842, (127.259, 118.998, 154.886)), (' A1304  LYS  CE ', ' A1305  LEU HD22', -0.829, (127.361, 114.145, 107.361)), (' A1463  ARG  HD2', ' A1463  ARG  O  ', -0.823, (102.424, 143.749, 118.962)), (' A 369  CYS  SG ', ' A 375  CYS  SG ', -0.813, (115.907, 130.311, 163.561)), (' A1477  MET  CA ', ' A1477  MET  HE2', -0.792, (110.78, 129.206, 116.375)), (' A1269  LEU  O  ', ' A1269  LEU HD22', -0.791, (152.502, 142.522, 142.412)), (' A1551  PRO  O  ', ' A1552  ASP  HB2', -0.784, (144.039, 118.333, 158.201)), (' A 342  ILE HD13', ' A 378  THR HG21', -0.779, (113.915, 144.26, 165.111)), (' A1515  ASP  OD2', ' B  46  ARG  NH1', -0.748, (123.414, 126.064, 159.296)), (' A1018  TRP  O  ', ' A1022  ARG  HG3', -0.74, (111.697, 82.51, 112.137)), (' A1516  MET  O  ', ' A1524  ASN  ND2', -0.733, (121.884, 121.481, 151.194)), (' A 437  TYR  CZ ', ' A1475  LEU  HB2', -0.729, (115.069, 133.751, 122.021)), (' A 380  ARG  HD2', ' A 380  ARG  O  ', -0.725, (122.548, 145.728, 156.987)), (' A 380  ARG  O  ', ' A 381  ASN  HB2', -0.72, (120.804, 145.528, 155.971)), (' A1268  ASN  OD1', ' A1271  MET  HG2', -0.72, (156.441, 136.686, 142.29)), (' A1304  LYS  HE2', ' A1305  LEU HD22', -0.719, (127.596, 115.092, 108.013)), (' A 277  ARG  NH2', ' A1375  ASP  OD2', -0.718, (112.878, 145.246, 154.646)), (' A 381  ASN HD22', ' A 382  PRO  CD ', -0.717, (120.78, 141.823, 153.505)), (' A1254  VAL  O  ', ' A1268  ASN  HB3', -0.703, (155.242, 136.923, 145.948)), (' A 794  LEU  O  ', ' A 794  LEU HD22', -0.702, (133.975, 140.35, 120.073)), (' A 381  ASN  ND2', ' A 382  PRO  HD3', -0.701, (119.922, 141.766, 153.671)), (' A1016  LYS  HA ', ' A1019  THR HG22', -0.699, (109.567, 77.462, 113.679)), (' A1283  SER  O  ', ' A1287  LEU  HB2', -0.695, (140.532, 131.368, 125.22)), (' A1477  MET  HE2', ' A1477  MET  N  ', -0.688, (111.374, 130.212, 117.197)), (' A1304  LYS  HE2', ' A1305  LEU  CD2', -0.677, (126.929, 115.071, 108.305)), (' A1400  CYS  HG ', ' A1411  TYR  HH ', -0.666, (89.263, 141.19, 127.723)), (' A 368  HIS  CB ', ' B  45  ARG  NH2', -0.664, (116.198, 125.143, 163.202)), (' A1555  PRO  O  ', ' A1556  ASN  CB ', -0.661, (139.127, 107.638, 163.727)), (' A1077  ILE HD11', ' A1109  ILE HD11', -0.661, (121.699, 89.669, 136.181)), (' A1140  LEU HD21', ' A1150  VAL HG21', -0.66, (123.879, 110.057, 123.82)), (' A 368  HIS  HB2', ' B  45  ARG HH21', -0.654, (116.846, 126.157, 163.263)), (' A 342  ILE HG23', ' A 378  THR  OG1', -0.653, (116.506, 144.175, 165.283)), (' A 437  TYR  OH ', ' A1475  LEU  HB2', -0.648, (115.143, 134.534, 121.804)), (' A 368  HIS  CB ', ' B  45  ARG HH21', -0.642, (116.268, 126.381, 163.039)), (' A1304  LYS  C  ', ' A1304  LYS  HD2', -0.64, (126.816, 114.446, 105.458)), (' A 421  LYS  CE ', ' A1516  MET  HE3', -0.64, (118.539, 124.164, 152.16)), (' B  60  ARG  NH2', ' B 118  ASP  OD2', -0.636, (104.47, 103.647, 179.732)), (' A 368  HIS  HB2', ' B  45  ARG  NH2', -0.634, (116.572, 125.341, 163.678)), (' A 280  CYS  HB3', ' A 369  CYS  HB3', -0.633, (119.447, 132.39, 164.369)), (' A1555  PRO  C  ', ' A1556  ASN  OD1', -0.63, (139.282, 107.534, 162.004)), (' A 212  LEU  C  ', ' A 212  LEU HD13', -0.622, (135.022, 177.975, 142.938)), (' A1463  ARG  C  ', ' A1463  ARG  HD2', -0.62, (102.755, 144.547, 119.878)), (' A1477  MET  HA ', ' A1477  MET  HE2', -0.617, (111.233, 128.801, 116.652)), (' A1518  ASN  O  ', ' A1524  ASN  HB3', -0.617, (123.625, 118.966, 149.09)), (' A 380  ARG  HG3', ' A 380  ARG HH21', -0.615, (125.389, 146.644, 159.178)), (' A1555  PRO  C  ', ' A1556  ASN  CG ', -0.609, (139.525, 107.851, 162.679)), (' A 175  LYS  HZ2', ' A 188  PHE  HE1', -0.607, (143.58, 171.673, 114.105)), (' B 101  LEU HD12', ' B 104  LEU HD21', -0.605, (124.395, 112.677, 176.333)), (' A1458  VAL  O  ', ' A1461  LEU  HB3', -0.603, (104.517, 144.876, 128.848)), (' A1019  THR HG23', ' B 182  TYR  HE1', -0.598, (108.583, 78.641, 115.597)), (' A1268  ASN  OD1', ' A1271  MET  HE2', -0.595, (157.744, 136.82, 142.025)), (' A1360  MET  HE1', ' A1461  LEU  O  ', -0.594, (103.377, 147.625, 124.148)), (' A 279  LYS  NZ ', ' A 379  GLY  HA3', -0.592, (119.663, 142.231, 160.154)), (' A1202  GLU  HG2', ' A1203  VAL HG23', -0.584, (157.7, 134.234, 163.955)), (' A 269  LEU HD21', ' A 390  ASP  HA ', -0.583, (112.581, 145.632, 147.668)), (' A1437  ILE HG21', ' A1447  PHE  HB2', -0.579, (98.6, 136.431, 151.501)), (' B 101  LEU  CD1', ' B 104  LEU HD23', -0.579, (125.394, 111.477, 176.465)), (' B 101  LEU HD12', ' B 104  LEU  CD2', -0.574, (124.648, 111.955, 176.302)), (' A1095  ASN  ND2', ' A1098  CYS  SG ', -0.574, (121.423, 97.555, 119.85)), (' A 622  THR HG22', ' A 650  VAL HG13', -0.574, (172.616, 128.23, 122.126)), (' A1304  LYS  CE ', ' A1305  LEU  CD2', -0.572, (127.419, 114.185, 108.657)), (' A 212  LEU  O  ', ' A 212  LEU HD13', -0.572, (135.822, 178.58, 143.403)), (' A 269  LEU HD23', ' A 389  TYR  O  ', -0.569, (113.235, 144.209, 146.405)), (' A 209  PHE  O  ', ' A 210  VAL HG23', -0.564, (144.778, 180.913, 139.583)), (' A1461  LEU  O  ', ' A1461  LEU HD12', -0.562, (104.151, 148.173, 125.421)), (' A 406  ASP  OD2', ' A 763  ILE  N  ', -0.56, (131.231, 142.341, 140.381)), (' A1299  ASN HD21', ' A1914  9Z9  H33', -0.559, (129.102, 128.744, 109.158)), (' A1304  LYS  HE3', ' A1305  LEU HD22', -0.559, (127.794, 113.857, 108.209)), (' A 575  VAL HG13', ' A 628  LYS  HZ2', -0.554, (169.458, 122.881, 108.902)), (' A1019  THR HG23', ' B 182  TYR  CE1', -0.552, (108.201, 78.304, 115.904)), (' A1286  THR HG22', ' A1910  6OU  H18', -0.55, (140.803, 126.778, 125.363)), (' A1301  GLN  O  ', ' A1305  LEU  HB2', -0.544, (125.447, 116.988, 108.337)), (' A 380  ARG  C  ', ' A 380  ARG  HD2', -0.543, (122.702, 145.516, 157.233)), (' B 101  LEU  CD1', ' B 104  LEU  CD2', -0.54, (124.775, 111.623, 176.157)), (' B 152  ARG HH21', ' B 156  SER  HG ', -0.54, (111.719, 89.733, 155.014)), (' A 575  VAL HG13', ' A 628  LYS  NZ ', -0.539, (169.904, 122.365, 109.178)), (' A1059  ARG  HD3', ' A1062  ARG HH12', -0.538, (115.867, 101.14, 158.535)), (' A 279  LYS  HZ2', ' A 379  GLY  HA3', -0.536, (119.621, 142.044, 160.353)), (' A1164  LEU HD23', ' A1910  6OU  H9 ', -0.535, (140.709, 120.172, 125.786)), (' A 210  VAL  CG1', ' A 211  ASP  N  ', -0.534, (141.459, 179.101, 141.407)), (' B  53  THR  OG1', ' B 101  LEU  HB2', -0.531, (126.612, 115.19, 175.44)), (' A1271  MET  O  ', ' A1273  LEU  N  ', -0.53, (151.789, 138.143, 137.56)), (' A 276  LEU HD12', ' A 382  PRO  CG ', -0.527, (121.352, 139.581, 152.888)), (' A1477  MET  CA ', ' A1477  MET  CE ', -0.524, (111.037, 129.566, 116.162)), (' A 402  LEU HD23', ' A 408  TRP  HB2', -0.523, (123.911, 135.061, 140.302)), (' A 743  HIS  HD2', ' A 745  HIS  H  ', -0.52, (145.867, 151.508, 146.429)), (' A 368  HIS  HB3', ' B  45  ARG  NH2', -0.519, (115.828, 126.181, 162.873)), (' B  42  SER  O  ', ' B 125  ARG  NH2', -0.518, (122.422, 115.939, 170.678)), (' A 149  THR HG21', ' A1913  6OU  H30', -0.514, (152.238, 153.606, 133.905)), (' B 148  ASP  N  ', ' B 148  ASP  OD1', -0.513, (109.795, 85.245, 173.174)), (' B 120  GLU  HG2', ' B 141  LYS  HG2', -0.512, (110.23, 109.005, 177.545)), (' A1174  PHE  O  ', ' A1274  TYR  OH ', -0.511, (152.192, 128.394, 134.904)), (' A 266  LEU  O  ', ' A 270  GLN  HG3', -0.506, (107.635, 141.378, 142.09)), (' A 421  LYS  CE ', ' A1516  MET  CE ', -0.506, (118.599, 124.24, 151.951)), (' A 380  ARG  HG3', ' A 380  ARG  NH2', -0.505, (125.915, 146.306, 159.231)), (' A 640  GLN  NE2', ' A 643  ASN  OD1', -0.505, (166.474, 129.481, 108.212)), (' A 259  PHE  CZ ', ' A1462  ILE HG23', -0.502, (107.887, 144.052, 127.637)), (' A1338  PRO  HG3', ' A1408  ARG  HE ', -0.498, (78.863, 141.357, 114.651)), (' B  55  THR  HB ', ' B 104  LEU HD22', -0.497, (122.583, 111.748, 178.182)), (' A 252  ASP  OD2', ' A1467  GLY  C  ', -0.492, (113.267, 144.158, 117.373)), (' A1583  ILE HD11', ' A1909  6OU  H12', -0.491, (139.778, 120.35, 131.625)), (' A 236  LEU HD11', ' A 705  LEU HD13', -0.49, (147.129, 153.227, 118.236)), (' A1477  MET  CE ', ' A1477  MET  HA ', -0.489, (111.091, 128.705, 116.292)), (' A 169  THR HG21', ' A 205  TYR  OH ', -0.489, (148.35, 177.249, 126.395)), (' A1052  ASP  N  ', ' A1052  ASP  OD1', -0.489, (119.493, 108.512, 151.181)), (' A 252  ASP  OD2', ' A1467  GLY  HA3', -0.488, (113.604, 145.139, 117.25)), (' A 446  VAL HG11', ' A 794  LEU HD13', -0.483, (131.039, 142.219, 119.908)), (' A1058  ARG  HD3', ' A1061  ILE HD12', -0.482, (111.72, 106.92, 153.298)), (' A 683  TRP  HD1', ' A 686  LEU  HB2', -0.482, (150.114, 122.11, 117.377)), (' A 281  VAL  O  ', ' A 374  GLU  N  ', -0.481, (116.97, 133.898, 168.578)), (' A1030  HIS  HE1', ' A1032  TRP  HD1', -0.48, (101.493, 97.235, 121.452)), (' A1367  MET  HG2', ' A1371  MET  HE3', -0.478, (108.048, 149.15, 135.531)), (' A1475  LEU  C  ', ' A1475  LEU HD22', -0.478, (113.15, 130.442, 121.848)), (' A1034  GLU  OE1', ' A1142  ARG  NH1', -0.475, (113.63, 100.134, 123.352)), (' A1191  ASN HD21', ' A1906  NAG  H62', -0.475, (148.475, 133.528, 169.53)), (' B  76  GLU  O  ', ' B  78  LEU  N  ', -0.474, (133.422, 108.589, 182.312)), (' A1451  ARG HH21', ' A1454  ARG HH11', -0.474, (101.643, 144.055, 145.117)), (' A 794  LEU  C  ', ' A 794  LEU HD22', -0.472, (133.715, 140.749, 120.596)), (' A1910  6OU  H20', ' A1910  6OU  H27', -0.469, (137.501, 126.841, 128.708)), (' A1499  PHE  O  ', ' A1503  ASN  ND2', -0.467, (130.364, 109.51, 144.402)), (' A1096  ALA  HA ', ' A1099  TRP  HB2', -0.466, (128.297, 98.574, 122.413)), (' A1059  ARG  NH1', ' B  27  GLU  OE2', -0.465, (114.938, 99.131, 163.131)), (' A1391  ILE  HA ', ' A1394  ILE HD12', -0.465, (89.787, 151.114, 139.84)), (' A1370  MET  HG2', ' A1454  ARG HH22', -0.465, (102.433, 146.353, 140.9)), (' A 269  LEU  CD2', ' A 390  ASP  HA ', -0.464, (112.275, 145.056, 147.342)), (' A1449  VAL  HA ', ' A1452  LEU HD13', -0.464, (104.177, 135.052, 143.869)), (' A 254  MET  HA ', ' A 257  THR HG22', -0.464, (119.259, 145.615, 125.695)), (' A1312  MET  HE2', ' A1480  PRO  HG2', -0.462, (113.701, 123.297, 117.26)), (' B  57  TRP  HB2', ' B  71  LEU  HG ', -0.459, (120.317, 105.612, 182.331)), (' A1475  LEU  O  ', ' A1475  LEU HD22', -0.459, (113.398, 130.008, 121.935)), (' A1191  ASN  ND2', ' A1906  NAG  O5 ', -0.458, (149.821, 132.8, 168.998)), (' A1185  LYS  HB3', ' A1256  SER  HB2', -0.457, (156.978, 131.345, 147.383)), (' A1377  GLN  HB2', ' A1381  LYS  HD3', -0.456, (106.026, 153.062, 151.278)), (' A1280  ILE HG23', ' A1910  6OU  H61', -0.454, (144.798, 139.2, 125.76)), (' A 342  ILE  CG2', ' A 378  THR  OG1', -0.453, (116.044, 144.197, 165.504)), (' A 447  ALA  HA ', ' A 798  LEU  CD1', -0.453, (130.504, 139.275, 115.936)), (' A 351  LEU  HG ', ' A 358  LEU HD12', -0.452, (127.114, 131.486, 161.138)), (' A1016  LYS  CA ', ' A1019  THR HG22', -0.452, (110.361, 76.959, 114.108)), (' B  55  THR  OG1', ' B  56  GLU  N  ', -0.449, (120.987, 110.773, 180.91)), (' A1306  GLY  O  ', ' A1308  LYS  HE2', -0.449, (119.943, 116.912, 104.922)), (' A1475  LEU  C  ', ' A1475  LEU  CD2', -0.447, (113.428, 130.815, 121.901)), (' A1016  LYS  HA ', ' A1019  THR  CG2', -0.447, (109.343, 77.331, 113.928)), (' A1271  MET  O  ', ' A1274  TYR  N  ', -0.446, (152.124, 137.104, 137.053)), (' A1519  PHE  HA ', ' A1525  SER  HB3', -0.445, (125.054, 116.379, 147.844)), (' A1156  ALA  HA ', ' A1297  ASN HD21', -0.445, (133.134, 117.749, 115.092)), (' A1020  LEU  C  ', ' A1020  LEU  CD2', -0.445, (111.013, 82.025, 118.598)), (' A1271  MET  C  ', ' A1273  LEU  N  ', -0.445, (152.458, 138.674, 138.428)), (' A 252  ASP  OD2', ' A1467  GLY  CA ', -0.444, (113.501, 144.859, 117.313)), (' A 800  LEU  HB2', ' A1288  ASN  OD1', -0.444, (139.956, 135.485, 118.136)), (' A1463  ARG  C  ', ' A1463  ARG  CD ', -0.444, (102.056, 144.057, 120.221)), (' A 212  LEU  C  ', ' A 212  LEU  CD1', -0.439, (135.069, 178.121, 142.693)), (' A 384  TYR  HB2', ' A 386  TYR  CE2', -0.438, (128.242, 148.026, 150.987)), (' A 421  LYS  NZ ', ' A1524  ASN HD21', -0.438, (119.958, 120.918, 152.096)), (' B  54  PHE  HB2', ' B  74  GLU  HA ', -0.438, (126.702, 113.26, 183.029)), (' A1034  GLU  OE2', ' A1142  ARG  HD2', -0.437, (113.948, 102.211, 124.949)), (' A1308  LYS  HE2', ' A1308  LYS  N  ', -0.437, (119.704, 117.88, 106.223)), (' A1289  LEU  O  ', ' A1289  LEU HD22', -0.437, (141.258, 126.426, 117.51)), (' A1556  ASN  N  ', ' A1556  ASN  OD1', -0.437, (138.946, 107.411, 162.239)), (' A1304  LYS  C  ', ' A1304  LYS  CD ', -0.436, (127.272, 114.889, 105.71)), (' A1304  LYS  HE3', ' A1305  LEU  CD2', -0.435, (127.457, 114.152, 108.706)), (' A 371  GLU  CD ', ' A 371  GLU  H  ', -0.434, (120.622, 124.69, 169.597)), (' A 272  PHE  HA ', ' A 275  ASN HD22', -0.433, (112.084, 137.077, 150.322)), (' A 254  MET  HG3', ' A1912  6OU  H56', -0.432, (122.594, 149.502, 124.19)), (' A 384  TYR  HB2', ' A 386  TYR  CD2', -0.432, (128.016, 147.592, 150.84)), (' A 161  GLU  HG3', ' A 222  ARG  NH2', -0.431, (150.021, 168.88, 133.555)), (' A1044  SER  HB3', ' A1135  ARG  NH1', -0.431, (117.331, 100.628, 138.258)), (' A 725  SER  HA ', ' A 728  GLU  HG2', -0.43, (140.657, 158.889, 151.458)), (' A 775  GLN HE22', ' A1908  6OU  H39', -0.43, (124.073, 153.134, 150.502)), (' A1021  ARG  CG ', ' A1085  VAL  O  ', -0.43, (116.323, 84.814, 117.293)), (' A1347  TYR  HB3', ' A1406  ALA  HB1', -0.426, (83.114, 147.386, 118.688)), (' A1451  ARG  NH2', ' A1454  ARG HH11', -0.424, (101.21, 144.193, 144.889)), (' B 121  CYS  SG ', ' B 140  LYS  HB2', -0.422, (115.52, 109.714, 174.566)), (' A 282  ARG  HA ', ' A 373  TYR  HA ', -0.421, (118.345, 133.427, 170.459)), (' A 269  LEU  O  ', ' A 273  MET  HB2', -0.42, (110.12, 142.256, 147.901)), (' A1532  ILE HD13', ' A1532  ILE HG21', -0.419, (131.289, 121.265, 140.758)), (' A 119  VAL  HB ', ' A 122  ARG  HD3', -0.419, (150.881, 182.823, 102.062)), (' A1265  TYR  CD2', ' A1266  GLU  HG2', -0.418, (150.97, 142.951, 151.391)), (' A1018  TRP  NE1', ' A1022  ARG  HD2', -0.416, (112.479, 83.365, 109.613)), (' A 277  ARG  CG ', ' A 381  ASN  OD1', -0.415, (118.162, 144.283, 155.195)), (' A1590  VAL  HA ', ' A1593  TYR  HD2', -0.414, (128.383, 127.463, 124.937)), (' A1913  6OU  H25', ' A1913  6OU  H31', -0.414, (153.863, 153.809, 131.852)), (' A 161  GLU  HG3', ' A 222  ARG HH22', -0.414, (150.094, 169.023, 133.355)), (' A1304  LYS  HB3', ' A1304  LYS  HZ3', -0.414, (129.404, 116.204, 106.422)), (' B  38  ILE  HB ', ' B 106  ILE HG22', -0.413, (119.118, 101.766, 175.451)), (' A1598  LEU HD11', ' A1914  9Z9  H38', -0.412, (125.926, 129.774, 111.235)), (' A 705  LEU  HA ', ' A 705  LEU HD23', -0.41, (148.137, 149.217, 121.418)), (' A1271  MET  O  ', ' A1272  TYR  C  ', -0.409, (151.499, 138.142, 138.021)), (' A 209  PHE  O  ', ' A 210  VAL  CB ', -0.408, (143.644, 180.855, 139.951)), (' A1510  GLU  HB3', ' A1511  SER  H  ', -0.408, (136.17, 124.534, 154.742)), (' A 726  TYR  HA ', ' A 772  VAL HG11', -0.408, (139.306, 154.236, 149.612)), (' A 209  PHE  HA ', ' A 209  PHE  HD1', -0.408, (144.963, 182.186, 136.182)), (' B 174  LEU  O  ', ' B 178  MET  N  ', -0.407, (105.0, 85.909, 124.833)), (' B 101  LEU  O  ', ' B 102  GLN  CB ', -0.407, (126.998, 113.891, 170.423)), (' A1909  6OU  H31', ' A1909  6OU  H46', -0.406, (145.943, 113.548, 139.277)), (' A 210  VAL HG12', ' A 211  ASP  N  ', -0.405, (141.198, 179.076, 141.406)), (' A 270  GLN  O  ', ' A1448  ARG  NH1', -0.402, (107.472, 139.749, 148.734)), (' A 421  LYS  HE2', ' A1516  MET  CE ', -0.401, (119.107, 124.22, 151.95)), (' A1402  LEU  HA ', ' A1402  LEU HD23', -0.401, (82.718, 147.9, 125.683)), (' A1335  ILE HG21', ' A1410  TYR  CD1', -0.401, (88.784, 139.637, 113.404)), (' B  53  THR HG22', ' B 125  ARG  HA ', -0.4, (124.282, 119.159, 176.117)), (' A1255  ASP  HB3', ' A1263  PRO  HB3', -0.4, (154.058, 134.711, 151.488))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
