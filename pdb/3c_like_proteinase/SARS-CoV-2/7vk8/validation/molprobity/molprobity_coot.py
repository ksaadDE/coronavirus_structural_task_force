# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  33 ', 'ASP', 0.03636169068567591, (13.534999999999995, -45.31100000000001, 7.198000000000001))]
data['omega'] = []
data['rota'] = [('A', '  32 ', 'LEU', 0.0, (12.96, -41.523, 7.638)), ('A', '  47 ', 'GLU', 0.006636581471885776, (12.171, -25.053000000000004, 33.507)), ('A', '  55 ', 'GLU', 0.298515429726532, (24.8, -33.732, 27.178)), ('A', '  86 ', 'VAL', 0.16922074542379123, (18.699999999999992, -33.052, 16.816)), ('A', ' 222 ', 'ARG', 0.04698339564858325, (12.137, 6.075000000000002, -19.097)), ('A', ' 262 ', 'LEU', 0.15620490495803258, (19.79, -3.374000000000001, -16.044))]
data['cbeta'] = [('A', '  84 ', 'ASN', ' ', 0.26286719554045945, (24.42599999999999, -30.181, 15.903)), ('A', ' 238 ', 'ASN', ' ', 0.2848752089742954, (17.51, -1.2770000000000004, 4.307))]
data['probe'] = [(' A  49  MET  HG2', ' A 403  HOH  O  ', -1.26, (13.745, -26.624, 27.572)), (' A 155  ASP  HA ', ' A 414  HOH  O  ', -1.087, (10.585, -35.811, -9.333)), (' A  49  MET  N  ', ' A 403  HOH  O  ', -0.932, (14.195, -26.253, 28.389)), (' A  53  ASN  OD1', ' A 402  HOH  O  ', -0.81, (24.715, -31.386, 28.875)), (' A 279  ARG  HE ', ' A 280  THR  H  ', -0.799, (-2.142, -0.728, -9.088)), (' A 232  LEU  O  ', ' A 404  HOH  O  ', -0.77, (23.735, 3.139, -1.88)), (' A  49  MET  CG ', ' A 403  HOH  O  ', -0.714, (13.976, -26.315, 27.695)), (' A 215  GLY  HA2', ' A 217  ARG HH11', -0.711, (1.486, -7.522, -19.606)), (' A 290  GLU  OE2', ' A 406  HOH  O  ', -0.704, (9.739, -13.404, 3.921)), (' A 212  VAL  O  ', ' A 217  ARG  NH1', -0.693, (3.88, -8.494, -19.671)), (' A 129  ALA  HB3', ' A 290  GLU  HG2', -0.676, (11.18, -15.405, 0.908)), (' A 139  SER  O  ', ' A 408  HOH  O  ', -0.653, (2.605, -21.704, 10.576)), (' A 283  GLY  O  ', ' A 409  HOH  O  ', -0.646, (-2.655, -8.124, -3.358)), (' A 202  VAL  N  ', ' A 405  HOH  O  ', -0.637, (18.527, -9.154, -5.19)), (' A  75  LEU HD23', ' A  91  VAL HG21', -0.625, (9.81, -46.401, 13.972)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.624, (11.071, -16.863, -0.299)), (' A  49  MET  CB ', ' A 403  HOH  O  ', -0.62, (13.474, -25.563, 28.493)), (' A  46 ASER  HB3', ' A 456  HOH  O  ', -0.587, (8.175, -26.716, 32.902)), (' A 235  MET  HB3', ' A 404  HOH  O  ', -0.577, (23.718, 1.953, -1.183)), (' A 145  CYS  SG ', ' A 435  HOH  O  ', -0.556, (8.599, -25.318, 20.597)), (' A 294  PHE  O  ', ' A 298  ARG  HG3', -0.548, (10.918, -21.638, -11.225)), (' A 233  VAL HG21', ' A 269  LYS  NZ ', -0.545, (18.951, 5.414, -7.871)), (' A  47 AGLU  N  ', ' A 401  HOH  O  ', -0.529, (11.648, -27.074, 32.808)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.51, (3.067, -1.907, -7.865)), (' A  31  TRP  CZ2', ' A  75  LEU HD21', -0.51, (8.213, -45.818, 12.157)), (' A 233  VAL HG21', ' A 269  LYS  HZ3', -0.504, (19.603, 5.451, -8.04)), (' A  43  ILE HG22', ' A  66  PHE  HE1', -0.504, (14.438, -36.72, 24.761)), (' A 105  ARG  NH1', ' A 176  ASP  OD2', -0.501, (21.993, -25.839, 8.734)), (' A  46 BSER  HB2', ' A 456  HOH  O  ', -0.498, (8.256, -26.499, 32.951)), (' A  47 BGLU  N  ', ' A 401  HOH  O  ', -0.493, (11.651, -27.077, 32.77)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.491, (10.721, -31.996, 17.506)), (' A 230  PHE  CD2', ' A 265  CYS  HB3', -0.485, (18.849, -1.583, -10.805)), (' A  55 AGLU  N  ', ' A 402  HOH  O  ', -0.482, (24.163, -31.825, 28.491)), (' A 234  ALA  HB1', ' A 239  TYR  HB2', -0.479, (18.369, -2.294, -2.381)), (' A 276  MET  HB2', ' A 410  HOH  O  ', -0.474, (4.041, 2.366, -3.887)), (' A  55 BGLU  N  ', ' A 402  HOH  O  ', -0.472, (24.164, -31.832, 28.482)), (' A 118  TYR  CE2', ' A 141  LEU  HB2', -0.467, (0.472, -24.34, 16.391)), (' A 104  VAL HG23', ' A 160  CYS  HB3', -0.465, (17.418, -28.244, 2.04)), (' A  69  GLN  OE1', ' A 413  HOH  O  ', -0.465, (-2.061, -40.842, 18.11)), (' A 129  ALA  CB ', ' A 290  GLU  HG2', -0.463, (10.963, -15.553, 0.902)), (' A  32  LEU  HA ', ' A  32  LEU HD12', -0.46, (12.112, -41.459, 6.152)), (' A 141  LEU  O  ', ' A 144  SER  OG ', -0.46, (4.232, -24.17, 16.765)), (' A 279  ARG  NE ', ' A 280  THR  H  ', -0.455, (-2.354, -0.065, -8.501)), (' A 102  LYS  HD3', ' A 156  CYS  SG ', -0.452, (16.836, -35.622, -3.667)), (' A  30  LEU HD13', ' A 148  VAL HG11', -0.449, (10.492, -33.699, 8.421)), (' A  53  ASN  C  ', ' A 402  HOH  O  ', -0.448, (23.694, -31.019, 29.215)), (' A 200  ILE  HB ', ' A 289  ASP  HB2', -0.441, (13.8, -10.793, -1.662)), (' A 118  TYR  HE2', ' A 141  LEU  HB2', -0.44, (0.809, -24.805, 16.366)), (' A 136  ILE HG13', ' A 172  HIS  HB2', -0.433, (10.164, -18.8, 11.481)), (' A  83  GLN  HB3', ' A  86  VAL HG12', -0.432, (21.541, -34.494, 14.526)), (' A  49  MET  CA ', ' A 403  HOH  O  ', -0.431, (14.188, -26.02, 28.091)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.43, (20.53, -30.8, 19.938)), (' A  43  ILE HD12', ' A  57  LEU  HB3', -0.428, (18.073, -33.94, 28.875)), (' A 106  ILE HD11', ' A 130  MET  HE2', -0.428, (16.506, -21.22, 5.055)), (' A  22  CYS  SG ', ' A  43  ILE  HA ', -0.428, (12.827, -35.871, 26.845)), (' A 211  ALA  O  ', ' A 215  GLY  N  ', -0.423, (2.095, -8.713, -16.478)), (' A  22  CYS  HB3', ' A  42  VAL HG22', -0.421, (10.544, -35.237, 24.409)), (' A  41  HIS  O  ', ' A  44  CYS  HB2', -0.42, (13.28, -29.754, 25.451)), (' A  36  VAL  HB ', ' A  89  LEU  HB2', -0.414, (13.05, -41.242, 16.22)), (' A 298  ARG  NH1', ' A 420  HOH  O  ', -0.407, (7.408, -23.503, -5.447)), (' A 225  THR  OG1', ' A 229  ASP  HB3', -0.405, (22.541, 3.373, -11.646))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
