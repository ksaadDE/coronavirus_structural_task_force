# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 235 ', 'ASP', None, (120.796, 105.247, 84.974)), ('A', ' 297 ', 'ASN', None, (107.233, 92.97699999999999, 74.08499999999998)), ('B', ' 179 ', 'ASN', None, (59.504, 113.241, 89.21099999999998)), ('B', ' 181 ', 'ALA', None, (62.123, 107.656, 88.792))]
data['rota'] = [('A', ' 321 ', 'PHE', 0.1679085718470907, (97.17099999999998, 104.311, 73.40699999999998)), ('A', ' 830 ', 'PRO', 0.297792156801747, (93.944, 89.69400000000002, 123.85699999999999))]
data['cbeta'] = []
data['probe'] = [(' A 676  LYS  NZ ', ' A 679  GLY  O  ', -0.854, (92.497, 93.504, 90.424)), (' A 857  GLU  OE2', " F   8    C  O2'", -0.804, (77.645, 72.261, 118.625)), (' C   5  ASP  OD2', ' D  97  LYS  NZ ', -0.798, (64.848, 104.493, 126.076)), (' A 588  VAL HG11', ' A 756  MET  HE2', -0.788, (102.136, 87.286, 113.781)), (' B  80  ARG  O  ', ' B  84  THR  OG1', -0.762, (80.207, 66.426, 80.65)), (' A  97  ALA  N  ', ' A 216  TRP  O  ', -0.76, (122.55, 123.33, 79.828)), (' A 160  LYS  NZ ', ' A 167  GLU  OE2', -0.759, (86.06, 117.116, 101.764)), (' A 600  ASN  O  ', ' A 604  THR  OG1', -0.744, (106.497, 84.307, 119.731)), (' A 436  GLU  OE2', ' A 438  LYS  NZ ', -0.74, (80.86, 104.637, 122.144)), (' A 428  PHE  CE2', ' A 883  LEU HD22', -0.737, (73.906, 93.419, 130.476)), (' A 226  THR  O  ', ' A 229  SER  OG ', -0.731, (135.837, 108.934, 72.553)), (' A 334  PHE  O  ', ' A 363  SER  OG ', -0.724, (85.791, 72.725, 65.351)), (' A 623  ASP  OD1', ' A 680  THR  OG1', -0.722, (92.141, 93.538, 96.585)), (' A 245  LEU  O  ', ' A 249  ARG  N  ', -0.722, (101.787, 111.427, 83.808)), (' A  31  VAL  N  ', ' A  50  LYS  O  ', -0.72, (121.647, 127.477, 100.036)), (' A 477  ASP  OD1', ' A 640  ARG  NH1', -0.714, (115.497, 84.94, 95.623)), (' A 387  LEU HD23', ' B 128  LEU HD13', -0.714, (75.644, 101.098, 71.454)), (' B 120  ILE  O  ', ' B 124  THR  OG1', -0.713, (80.447, 93.18, 66.582)), (' A 358  ASP  OD2', ' A 533  ARG  NE ', -0.712, (100.731, 73.931, 73.871)), (' A 305  ARG  NH2', ' A 474  GLU  OE2', -0.707, (118.434, 91.763, 91.606)), (' A 368  PHE  HE1', ' B  83  VAL HG13', -0.705, (80.456, 69.069, 82.237)), (' A 503  GLY  O  ', ' A 507  ASN  N  ', -0.699, (78.771, 79.715, 87.546)), (' B 146  THR  OG1', ' B 154  TRP  O  ', -0.695, (68.649, 107.068, 65.877)), (' A 813  CYS  SG ', " E   8    C  O2'", -0.695, (92.533, 88.87, 112.642)), (' A 540  THR  OG1', ' A 665  GLU  OE2', -0.691, (87.608, 89.358, 87.576)), (' A 326  PHE  O  ', ' B 118  ASN  ND2', -0.67, (90.522, 95.676, 73.345)), (' A 324  THR  O  ', ' B 118  ASN  ND2', -0.661, (89.424, 96.81, 72.737)), (' A 770  TYR  CD1', ' A 775  LEU HD22', -0.652, (120.056, 103.909, 113.068)), (' A 124  MET  O  ', ' A 128  VAL HG23', -0.65, (112.202, 116.941, 89.806)), (' A 303  ASP  OD2', ' A 735  ARG  NH2', -0.65, (118.064, 88.547, 85.18)), (' A 748  TYR  OH ', ' A 775  LEU HD23', -0.643, (120.254, 102.222, 110.392)), (' A 170  ASP  OD2', ' A 173  ARG  NH2', -0.637, (91.006, 120.132, 88.948)), (' B 167  VAL HG23', ' B 172  ILE HD11', -0.634, (61.609, 107.571, 79.734)), (' A 120  THR  OG1', ' A 122  TYR  O  ', -0.632, (114.32, 125.685, 88.127)), (' B 168  GLN  NE2', ' B 170  SER  OG ', -0.625, (54.759, 111.637, 76.847)), (' B 167  VAL  CG2', ' B 172  ILE HD11', -0.625, (61.088, 107.845, 79.996)), (' A 577  LYS  NZ ', ' F   4    G  OP1', -0.623, (94.714, 75.175, 104.024)), (' A 251  LEU  O  ', ' A 320  VAL HG22', -0.616, (100.371, 109.801, 76.173)), (' A 919  GLU  N  ', ' A 919  GLU  OE1', -0.616, (99.665, 73.99, 126.217)), (' A 836  ARG  NH1', ' E   8    C  OP2', -0.613, (83.186, 90.34, 113.627)), (' A 171  ILE HD12', ' A 174  VAL  HB ', -0.612, (96.196, 119.349, 90.846)), (' A 311  ALA  HB1', ' A 350  GLU  HB3', -0.609, (103.468, 94.827, 82.446)), (' B 173  SER  OG ', ' B 174  MET  SD ', -0.608, (62.108, 120.13, 79.949)), (' A 207  LEU HD23', ' A 237  TYR  CE1', -0.6, (116.172, 113.197, 86.152)), (' A 372  LEU HD12', ' B  87  MET  HE1', -0.6, (82.959, 71.399, 80.918)), (' A 856  ILE  O  ', ' A 860  VAL HG23', -0.592, (77.278, 79.351, 123.126)), (' A 151  CYS  O  ', ' A 177  ASN  ND2', -0.59, (96.976, 123.196, 86.902)), (' A 331  ARG  NH2', ' B 114  CYS  SG ', -0.588, (94.668, 85.269, 64.124)), (' A 331  ARG  NH2', ' B 112  ASP  O  ', -0.587, (95.047, 86.082, 62.626)), (' A 271  LEU HD23', ' B 110  ALA  HB2', -0.583, (89.972, 93.748, 61.352)), (' A 390  ASP  OD2', ' A 674  TYR  OH ', -0.579, (78.309, 100.632, 83.737)), (' C   5  ASP  OD1', ' C   6  VAL  N  ', -0.579, (66.028, 105.83, 122.573)), (' A 760  ASP  N  ', ' A 760  ASP  OD1', -0.577, (95.985, 92.883, 106.428)), (' A 190  VAL HG11', ' A 285  ARG  O  ', -0.574, (115.003, 109.392, 73.004)), (' A 631  ARG  NH1', ' A 635  SER  OG ', -0.57, (99.392, 87.468, 92.347)), (' A 822  GLN  N  ', ' A 825  ASP  O  ', -0.569, (100.463, 84.788, 134.972)), (' A 120  THR  OG1', ' A 211  ASP  OD1', -0.567, (114.856, 126.13, 86.745)), (' A 188  LYS  O  ', ' A 192  PHE  N  ', -0.565, (119.567, 115.805, 75.405)), (' A 753  PHE  CZ ', ' A 777  ALA  HB3', -0.564, (109.47, 100.834, 109.787)), (' A 636  LEU HD21', ' A 655  LEU HD22', -0.564, (106.071, 88.055, 86.171)), (' A 519  MET  HE2', ' A 524  GLN  HG2', -0.563, (89.948, 69.335, 86.463)), (' A 740  ASP  OD1', ' A 741  PHE  N  ', -0.562, (126.685, 90.909, 100.32)), (' A  97  ALA  HB3', ' A  99  HIS  CE1', -0.559, (124.905, 125.783, 81.957)), (' A 333  ILE HD11', ' A 360  ASN  O  ', -0.549, (89.993, 75.285, 66.004)), (' A 908  THR  OG1', ' A 909  ASN  N  ', -0.546, (82.099, 78.249, 135.216)), (' A  92  ASP  OD1', ' A  93  CYS  N  ', -0.546, (126.423, 120.328, 71.294)), (' A 734  ASN  OD1', ' A 735  ARG  N  ', -0.543, (124.666, 95.261, 89.489)), (' B 173  SER  OG ', ' B 174  MET  N  ', -0.542, (62.597, 118.771, 80.829)), (' A 368  PHE  CE1', ' B  83  VAL HG13', -0.542, (81.373, 68.915, 82.615)), (' A 881  PHE  CE2', ' A 885  LEU HD11', -0.542, (82.116, 84.548, 132.296)), (' A 881  PHE  CD2', ' A 885  LEU HD11', -0.541, (82.123, 84.912, 132.392)), (' A 911  ASN  O  ', ' A 914  ARG  N  ', -0.539, (89.479, 78.245, 129.902)), (' A 183  ARG  NH2', ' A 259  THR  OG1', -0.535, (104.503, 113.831, 71.463)), (' A 331  ARG  NE ', ' B 113  GLY  O  ', -0.532, (92.718, 85.039, 63.381)), (' A 720  VAL HG11', ' A 775  LEU HD21', -0.532, (122.144, 104.057, 110.42)), (' A 315  VAL HG21', ' A 462  THR  O  ', -0.529, (103.479, 101.614, 85.104)), (' A 623  ASP  OD2', ' A 624  ARG  NH1', -0.528, (88.614, 95.405, 96.542)), (' A 810  HIS  O  ', ' A 816  HIS  ND1', -0.521, (93.329, 97.688, 121.031)), (' A 596  GLY  O  ', ' A 600  ASN  N  ', -0.52, (102.533, 82.962, 123.057)), (' A  47  LYS  HZ2', ' A 129  TYR  HE2', -0.517, (112.901, 116.697, 101.442)), (' A 911  ASN  OD1', ' A 912  THR  N  ', -0.517, (85.478, 78.151, 129.36)), (' A 348  PHE  CZ ', ' A 660  ALA  HB2', -0.514, (96.025, 88.609, 80.979)), (' C   9  THR  OG1', ' D  94  MET  SD ', -0.514, (63.368, 101.989, 119.279)), (' A 619  TYR  CD1', ' A 786  LEU HD21', -0.512, (99.228, 101.461, 102.365)), (' A 620  PRO  O  ', ' A 792  VAL HG11', -0.511, (94.194, 104.43, 100.442)), (' A 577  LYS  HA ', ' A 580  ALA  HB3', -0.511, (99.692, 76.334, 105.083)), (' A 414  ASN  N  ', ' A 844  VAL  O  ', -0.508, (69.042, 91.16, 112.148)), (' A 598  TRP  HA ', ' A 601  MET  HE3', -0.508, (99.227, 85.481, 119.072)), (' A 911  ASN  OD1', ' A 912  THR HG23', -0.508, (84.195, 78.11, 128.887)), (' B 125  ALA  O  ', ' B 190  ARG  NH2', -0.508, (75.642, 97.859, 66.317)), (' A 187  LEU  O  ', ' A 191  GLN  N  ', -0.507, (117.331, 114.328, 74.177)), (' A 527  LEU  O  ', ' A 531  THR HG23', -0.507, (95.207, 74.379, 82.103)), (' A 569  ARG  NH2', ' A 685  ALA  HB1', -0.507, (94.414, 79.725, 96.699)), (' A 575  LEU HD11', ' A 579  ILE HD11', -0.503, (106.143, 80.252, 101.289)), (' A 372  LEU  CD1', ' B  87  MET  HE1', -0.501, (83.016, 70.907, 81.38)), (' A 187  LEU HD21', ' A 286  TYR  CE1', -0.501, (110.127, 111.901, 73.684)), (' A 387  LEU  CD2', ' B 128  LEU HD13', -0.501, (76.615, 100.738, 71.762)), (' A 633  MET  SD ', ' A 634  ALA  N  ', -0.5, (105.49, 91.172, 93.784)), (' C  36  HIS  CE1', ' C  40  LEU HD11', -0.498, (71.205, 102.743, 111.052)), (' A 588  VAL HG22', ' A 757  ILE  O  ', -0.498, (101.189, 87.54, 110.123)), (' B 175  ASP  OD1', ' B 176  ASN  N  ', -0.498, (59.37, 118.945, 84.217)), (' A 777  ALA  HB1', ' A 782  PHE  CE2', -0.498, (107.579, 102.466, 108.558)), (' A 516  TYR  CD1', ' A 566  MET  HE2', -0.496, (87.485, 71.257, 90.869)), (' A 283  PHE  O  ', ' A 287  PHE  N  ', -0.496, (113.525, 105.737, 74.964)), (' A 389  LEU HD22', ' B 149  TYR  CE1', -0.495, (77.903, 105.413, 73.666)), (' B 176  ASN  OD1', ' B 179  ASN  ND2', -0.495, (56.632, 114.752, 87.295)), (' A  90  LEU  CD2', ' A 195  ALA  HB1', -0.493, (127.264, 117.276, 74.04)), (' A 414  ASN  OD1', ' A 846  ASP  N  ', -0.492, (68.784, 88.034, 110.549)), (' A 271  LEU  CD2', ' B 110  ALA  HB2', -0.492, (90.065, 94.134, 61.119)), (' A 234  VAL  O  ', ' A 237  TYR  N  ', -0.49, (119.14, 108.146, 86.081)), (' A 270  LEU  C  ', ' A 271  LEU HD12', -0.489, (89.04, 97.557, 64.336)), (' A 154  ASP  OD1', ' A 155  ASP  N  ', -0.486, (95.939, 130.39, 96.036)), (' C  14  LEU HD22', ' C  36  HIS  CG ', -0.484, (68.138, 103.743, 108.232)), (' A 699  ALA  O  ', ' A 702  ALA  HB3', -0.483, (109.708, 100.264, 104.84)), (' A 805  LEU  O  ', ' A 828  TYR  OH ', -0.482, (104.468, 94.155, 127.271)), (' A 720  VAL  CG1', ' A 775  LEU HD21', -0.481, (122.115, 103.8, 110.239)), (' A 378  PRO  O  ', ' A 382  ALA  N  ', -0.48, (81.091, 86.775, 76.015)), (' A 494  ILE  O  ', ' A 494  ILE HG22', -0.48, (93.227, 71.141, 102.885)), (' A 380  MET  O  ', ' A 384  SER  OG ', -0.477, (77.862, 84.704, 73.326)), (' A 844  VAL HG11', ' A 848  VAL  H  ', -0.474, (70.077, 85.083, 114.148)), (' A 604  THR  O  ', ' A 607  SER  OG ', -0.474, (110.965, 87.758, 119.11)), (' A 856  ILE HD13', ' A 891  LEU HD23', -0.471, (71.647, 79.259, 123.959)), (' A 233  VAL HG13', ' A 291  ASP  OD2', -0.47, (123.642, 103.593, 82.53)), (' A 180  GLU  OE2', ' A 183  ARG  NH1', -0.469, (105.687, 116.813, 74.281)), (' A 379  ALA  HA ', ' A 382  ALA  HB3', -0.467, (82.704, 88.312, 74.508)), (' A 720  VAL HG21', ' A 775  LEU HD21', -0.462, (122.602, 103.617, 111.045)), (' A  38  TYR  CZ ', ' A 204  VAL HG11', -0.46, (127.813, 110.529, 89.297)), (' D 101  ASP  OD1', ' D 102  ALA  N  ', -0.457, (56.992, 115.676, 121.275)), (' A 238  TYR  HB3', ' A 242  MET  HE3', -0.456, (114.053, 104.788, 84.718)), (' A 321  PHE  HB3', ' A 322  PRO  CD ', -0.456, (96.263, 102.663, 71.838)), (' A 606  TYR  HH ', ' A 828  TYR  HE2', -0.456, (104.318, 92.998, 124.996)), (' A 304  ASP  OD1', ' A 305  ARG  N  ', -0.455, (113.141, 87.31, 87.186)), (' A 127  LEU HD13', ' A 145  ILE HG21', -0.454, (108.126, 121.068, 90.923)), (' A 875  GLN  HA ', ' A 878  ALA  HB3', -0.45, (84.052, 94.8, 136.018)), (' A 379  ALA  O  ', ' A 383  ALA  N  ', -0.448, (80.85, 87.508, 72.547)), (' A 792  VAL HG12', ' A 793  PHE  N  ', -0.446, (95.561, 107.048, 100.639)), (' A 372  LEU HD12', ' B  87  MET  SD ', -0.445, (82.46, 72.084, 80.86)), (' A 467  ARG  HE ', ' A 470  LEU HD12', -0.443, (117.613, 96.382, 89.874)), (' A 691  ASN  HA ', ' A 694  PHE  HB3', -0.443, (100.296, 92.678, 99.398)), (' B 148  THR  HB ', ' B 153  LEU HD13', -0.442, (73.688, 109.235, 64.702)), (' A 293  THR  OG1', ' A 294  TYR  N  ', -0.442, (115.613, 94.929, 75.934)), (' A 371  LEU HD12', ' B  84  THR HG23', -0.442, (81.439, 68.691, 77.57)), (' A 132  ARG  NH2', ' A 465  ASP  OD2', -0.44, (110.96, 106.336, 93.364)), (' B  83  VAL HG22', ' B  87  MET  HE2', -0.44, (79.884, 71.104, 81.637)), (' A 882  HIS  HA ', ' A 885  LEU HD12', -0.439, (80.026, 86.22, 133.548)), (' A 190  VAL HG13', ' A 288  LYS  HB3', -0.438, (117.812, 108.74, 73.901)), (' A 818  MET  HE3', ' A 868  PRO  HB2', -0.438, (91.25, 91.086, 128.354)), (' A 185  ALA  HB2', ' A 214  GLY  HA2', -0.438, (113.457, 119.835, 80.269)), (' C  56  LEU  O  ', ' C  59  LEU  N  ', -0.437, (56.067, 107.213, 108.972)), (' A 549  SER  OG ', ' A 550  ALA  N  ', -0.437, (81.154, 98.818, 111.102)), (' A 636  LEU  CD2', ' A 655  LEU HD22', -0.436, (106.111, 87.685, 86.89)), (' A 197  ARG  HE ', ' A 198  ASN  HB3', -0.435, (127.117, 110.587, 69.159)), (' A 197  ARG  O  ', ' A 230  GLY  N  ', -0.434, (130.653, 109.212, 73.25)), (' A 889  ARG  O  ', ' A 893  ASP  N  ', -0.434, (70.146, 77.812, 131.437)), (' A 314  ASN  ND2', ' A 350  GLU  O  ', -0.433, (104.902, 95.037, 78.944)), (' A 368  PHE  CZ ', ' A 372  LEU HD11', -0.432, (83.352, 69.967, 82.54)), (' B  95  LEU HD21', ' B  99  ASP  HB3', -0.431, (76.195, 81.685, 63.068)), (' A 572  HIS  ND1', ' A 638  LEU HD21', -0.428, (100.66, 81.331, 94.636)), (' A 196  MET  HE3', ' A 222  PHE  CD2', -0.425, (128.434, 114.511, 80.959)), (' A 246  THR HG21', ' A 461  PRO  O  ', -0.425, (100.872, 105.141, 85.668)), (' A 493  VAL HG13', ' A 573  GLN  OE1', -0.424, (94.949, 72.341, 97.419)), (' A 315  VAL HG23', ' A 316  LEU  N  ', -0.424, (104.011, 102.218, 82.604)), (' A 619  TYR  CE1', ' A 786  LEU HD21', -0.422, (99.691, 101.057, 102.862)), (' B 162  ALA  HB2', ' B 183  PRO  HB2', -0.421, (67.041, 104.192, 87.652)), (' A 375  ALA  O  ', ' A 381  HIS  NE2', -0.42, (80.9, 81.296, 79.607)), (' A 348  PHE  HZ ', ' A 660  ALA  HB2', -0.42, (96.109, 88.34, 81.722)), (' A 297  ASN  HB3', ' A 353  VAL HG12', -0.419, (105.135, 90.11, 72.82)), (' A 528  PHE  O  ', ' A 531  THR  OG1', -0.417, (97.852, 74.723, 83.667)), (' A 575  LEU  CD1', ' A 579  ILE HD11', -0.415, (105.574, 80.333, 101.447)), (' A 303  ASP  O  ', ' A 306  CYS  N  ', -0.414, (113.471, 89.289, 83.895)), (' A 589  ILE HG21', ' A 689  TYR  OH ', -0.414, (97.408, 81.297, 105.682)), (' C  36  HIS  HA ', ' C  39  ILE HG22', -0.413, (68.84, 107.248, 110.84)), (' C  29  TRP  O  ', ' C  33  VAL HG23', -0.412, (67.425, 105.109, 101.994)), (' B 161  ASP  HA ', ' B 184  LEU HD23', -0.41, (64.035, 105.457, 84.173)), (' A 290  TRP  HE1', ' A 309  HIS  CE1', -0.41, (115.36, 98.67, 80.924)), (' A 467  ARG  NH1', ' A 730  CYS  O  ', -0.409, (121.274, 96.869, 92.789)), (' A 462  THR HG22', ' A 463  MET  N  ', -0.407, (103.99, 103.498, 88.733)), (' A 612  PRO  HB2', ' A 805  LEU HD21', -0.407, (109.696, 96.907, 122.429)), (' A 315  VAL HG23', ' A 316  LEU  H  ', -0.406, (104.221, 102.162, 82.148)), (' A 254  GLU  OE1', ' A 320  VAL HG11', -0.406, (101.549, 107.908, 72.939)), (' A  90  LEU HD23', ' A 195  ALA  HB1', -0.404, (126.862, 117.284, 73.706)), (' A 389  LEU HD13', ' B 149  TYR  OH ', -0.403, (79.868, 103.906, 74.867)), (' A 498  LEU  H  ', ' A 498  LEU HD23', -0.403, (83.559, 72.068, 101.171)), (' A 372  LEU HD12', ' B  87  MET  CE ', -0.403, (82.3, 71.431, 81.082)), (' A 630  LEU  HA ', ' A 633  MET  HG3', -0.402, (105.054, 94.096, 92.852)), (' A 146  LEU HD11', ' A 175  TYR  HE1', -0.402, (100.136, 119.27, 93.13)), (' B 163  ASP  O  ', ' B 164  SER  OG ', -0.401, (60.213, 96.978, 86.995)), (' A 720  VAL  CG2', ' A 775  LEU HD21', -0.4, (122.914, 103.255, 111.095))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
