# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 277 ', 'ASN', 0.0011501757319875721, (10.66, -17.671999999999993, -32.413000000000004))]
data['omega'] = []
data['rota'] = [('A', '  86 ', 'VAL', 0.1629540030529148, (-24.92000000000001, 9.336, -28.931)), ('A', ' 128 ', 'CYS', 0.04842321795877069, (-4.451, 4.249, -25.064)), ('A', ' 254 ', 'SER', 0.22351528450701674, (15.654, 17.512000000000008, -31.419000000000004)), ('A', ' 298 ', 'ARG', 0.2710679314908977, (5.349, 15.721, -20.024)), ('B', '  69 ', 'GLN', 0.2239075710116495, (-0.791, 23.021, 1.817)), ('B', '  75 ', 'LEU', 0.2699726604038661, (-3.291, 23.178, 7.387)), ('B', '  93 ', 'THR', 0.18758734900713983, (-8.809000000000001, 19.65799999999999, 10.765)), ('B', ' 257 ', 'THR', 0.07362319973072191, (-9.378000000000005, -21.806, -19.635))]
data['cbeta'] = []
data['probe'] = [(' B  53  ASN  O  ', ' B  57  LEU HD13', -0.825, (19.344, 14.057, 12.69)), (' B 235  MET  HE2', ' B 241  PRO  HG3', -0.804, (13.429, -21.081, -6.923)), (' B 102  LYS  NZ ', ' B 156  CYS  SG ', -0.762, (-9.374, -2.289, 2.915)), (' A  22  CYS  SG ', ' A  61  LYS  NZ ', -0.746, (-34.997, 2.916, -23.744)), (' B 257  THR HG23', ' B 259  ILE  H  ', -0.746, (-7.094, -23.443, -19.625)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.725, (6.113, -9.81, -8.799)), (' A  88  LYS  HE3', ' A 598  HOH  O  ', -0.723, (-26.742, 18.131, -25.614)), (' B 140  PHE  HB3', ' B 144  SER  OG ', -0.697, (9.227, 11.109, -8.435)), (' B 168  PRO  HD2', ' B 457  HOH  O  ', -0.689, (22.037, 2.49, -7.678)), (' B 226  THR  OG1', ' B 229  ASP  HB2', -0.654, (8.775, -32.588, -12.696)), (' A  50  LEU  O  ', ' A 188  ARG  HD2', -0.639, (-27.552, -3.504, -40.178)), (' B  70  ALA  HB2', ' B  75  LEU HD21', -0.633, (-4.898, 20.699, 3.681)), (' A 189  GLN  HG2', ' A 401  YSJ  O4 ', -0.607, (-22.603, -6.336, -34.026)), (' A  55  GLU  HG3', ' A  82  MET  HE1', -0.599, (-32.721, 8.941, -35.527)), (' A 288  GLU  HG2', ' A 291  PHE  HE1', -0.591, (5.826, 3.464, -25.188)), (' B 224  THR HG22', ' B 225  THR  N  ', -0.587, (3.79, -31.435, -16.352)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.572, (10.004, 10.915, -24.446)), (' B 233  VAL HG21', ' B 269  LYS  HE3', -0.567, (13.356, -27.686, -18.02)), (' B 257  THR  CG2', ' B 259  ILE  H  ', -0.565, (-7.283, -23.472, -19.127)), (' B  56  ASP  O  ', ' B  60  ARG  HG2', -0.561, (17.184, 18.84, 16.247)), (' B  55  GLU  O  ', ' B  59  ILE HG12', -0.557, (15.059, 14.907, 17.89)), (' B  44  CYS  HB3', ' B  49  MET  HG3', -0.556, (18.94, 15.817, 4.047)), (' B  68  VAL HG12', ' B  75  LEU HD23', -0.545, (-1.746, 20.793, 4.608)), (' A 288  GLU  HG2', ' A 291  PHE  CE1', -0.542, (5.955, 3.741, -25.36)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.529, (-10.208, 7.62, -22.141)), (' B  45  THR  H  ', ' B  48  ASP  HB2', -0.525, (19.917, 18.094, 6.11)), (' A 298  ARG  HG2', ' A 299  GLN  N  ', -0.52, (4.807, 13.478, -19.467)), (' A  64  HIS  CD2', ' A  64  HIS  H  ', -0.514, (-41.028, 7.983, -19.521)), (' B 231  ASN  O  ', ' B 235  MET  HG3', -0.512, (14.878, -23.756, -10.361)), (' A 285  ALA  O  ', ' A 286  LEU HD12', -0.505, (10.574, -6.023, -29.411)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.503, (-9.29, 13.033, 5.132)), (' B 224  THR  CG2', ' B 225  THR  N  ', -0.503, (3.319, -31.756, -16.588)), (' B 107  GLN  N  ', ' B 110  GLN  OE1', -0.501, (3.055, -8.092, -0.446)), (' A  10  SER  O  ', ' A  14  GLU  HG3', -0.501, (-12.275, 8.935, -12.263)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.496, (-13.263, 3.841, -13.277)), (' A 286  LEU HD11', ' B 285  ALA  HB2', -0.495, (8.779, -7.952, -29.593)), (' A 190  THR  O  ', ' A 192  GLN  HG2', -0.494, (-19.862, -4.584, -39.839)), (' B   5  LYS  NZ ', ' B 403  HOH  O  ', -0.487, (5.652, -4.24, -17.164)), (' B 110  GLN  HG2', ' B 455  HOH  O  ', -0.484, (0.029, -9.684, -4.536)), (' A 126  TYR  CD2', ' B   6  MET  HE2', -0.478, (-8.075, -1.342, -18.99)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.477, (-40.021, 5.585, -33.333)), (' B 207  TRP  CD2', ' B 288  GLU  HB2', -0.474, (3.286, -11.208, -20.204)), (' B 217  ARG  HB2', ' B 220  LEU HD12', -0.469, (-2.8, -22.522, -26.643)), (' A 207  TRP  CE2', ' A 288  GLU  HB3', -0.468, (8.991, 2.941, -26.975)), (' B 235  MET  HE2', ' B 241  PRO  CG ', -0.466, (12.961, -21.494, -6.203)), (' A 210  ALA  HB2', ' A 296  VAL  CG1', -0.455, (10.382, 11.148, -24.941)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.454, (-13.261, 18.625, -19.882)), (' B  44  CYS  CB ', ' B  49  MET  HG3', -0.454, (18.096, 15.419, 4.369)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.452, (0.322, 3.196, -5.445)), (' B 207  TRP  CE2', ' B 288  GLU  HB2', -0.45, (3.171, -10.388, -20.144)), (' B  73  VAL HG12', ' B  74  GLN  N  ', -0.446, (-5.785, 25.261, 4.191)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.444, (-24.284, 14.314, -12.983)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.442, (-24.97, 14.362, -12.97)), (' A 217  ARG  HD2', ' A 605  HOH  O  ', -0.438, (23.145, 10.708, -24.965)), (' A  97  LYS  HD2', ' A 583  HOH  O  ', -0.435, (-21.122, 12.134, -8.378)), (' B  52  PRO  CD ', ' B 188  ARG  HG3', -0.432, (22.504, 10.125, 6.191)), (' A 231  ASN  O  ', ' A 235  MET  HG3', -0.423, (7.169, 4.989, -46.351)), (' A  55  GLU  HG3', ' A  82  MET  CE ', -0.422, (-32.442, 9.536, -34.906)), (' A  50  LEU HD23', ' A 189  GLN  O  ', -0.421, (-25.397, -7.277, -38.722)), (' A 207  TRP  HZ3', ' A 287  LEU HD23', -0.42, (11.923, 1.583, -29.777)), (' A 155  ASP  N  ', ' A 155  ASP  OD1', -0.42, (-7.44, 22.474, -14.799)), (' B 268  LEU  O  ', ' B 272  LEU  HG ', -0.42, (10.085, -21.036, -19.785)), (' A  56  ASP  O  ', ' A  60  ARG  HG3', -0.418, (-39.991, 4.408, -32.7)), (' B  50  LEU  N  ', ' B  50  LEU HD12', -0.417, (24.058, 14.348, 3.301)), (' B 232  LEU  O  ', ' B 236  LYS  HG3', -0.41, (17.925, -24.859, -13.532)), (' B  52  PRO  HD3', ' B 188  ARG  HG3', -0.408, (22.35, 10.263, 5.921)), (' A 121  SER  HA ', ' A 122  PRO  HD3', -0.408, (-18.43, 3.078, -11.039)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.408, (11.001, 2.076, 3.869)), (' B   8  PHE  HE1', ' B 305  PHE  CZ ', -0.406, (-9.534, -3.345, -8.126)), (' B  10  SER  O  ', ' B  14  GLU  HG3', -0.406, (-7.199, 9.464, -7.087)), (' A 285  ALA  C  ', ' A 286  LEU HD12', -0.405, (10.584, -5.431, -28.709)), (' B  20  VAL HG22', ' B  68  VAL HG22', -0.404, (2.624, 19.205, 5.418)), (' A 166  GLU  OE1', ' B   1  SER  N  ', -0.404, (-13.336, -7.312, -26.023)), (' B  45  THR  N  ', ' B  48  ASP  HB2', -0.401, (19.485, 18.183, 5.865)), (' B 101  TYR  HA ', ' B 157  VAL  O  ', -0.4, (-8.34, 1.686, 2.399))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
