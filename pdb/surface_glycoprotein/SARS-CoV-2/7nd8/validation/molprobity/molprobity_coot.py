# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  32 ', 'PHE', 0.037264384494966676, (189.20899999999995, 250.166, 228.298)), ('A', ' 123 ', 'ALA', 0.04275574669974765, (187.293, 272.068, 251.16200000000003)), ('B', '  32 ', 'PHE', 0.038702935355326325, (231.87199999999996, 185.06499999999994, 232.02600000000007)), ('B', ' 123 ', 'ALA', 0.04325972985842857, (213.256, 174.212, 254.77700000000002)), ('C', '  32 ', 'PHE', 0.03765685305146814, (265.785, 254.29899999999995, 234.224)), ('C', ' 123 ', 'ALA', 0.04291674576588607, (281.838, 244.64699999999993, 259.826)), ('C', ' 591 ', 'SER', 0.0012469906433630014, (235.03799999999995, 260.817, 228.467))]
data['omega'] = [('H', ' 159 ', 'PRO', None, (258.16, 271.287, 315.393)), ('H', ' 161 ', 'PRO', None, (252.06499999999994, 271.677, 314.1050000000001)), ('L', '   8 ', 'PRO', None, (236.732, 289.524, 293.755)), ('L', ' 141 ', 'PRO', None, (236.99299999999994, 297.812, 314.793))]
data['rota'] = [('A', ' 386 ', 'LYS', 0.006310643502255662, (208.368, 220.545, 254.02300000000002)), ('A', ' 483 ', 'VAL', 0.12630596302827124, (245.66, 192.84200000000004, 279.843)), ('B', ' 386 ', 'LYS', 0.007511779682430414, (244.664, 217.167, 256.091)), ('B', ' 483 ', 'VAL', 0.12611364394431154, (245.549, 264.615, 279.996)), ('C', ' 483 ', 'VAL', 0.12693336430980556, (184.786, 230.77900000000005, 275.1570000000001)), ('H', ' 110 ', 'ASN', 0.13457379068959527, (229.88, 264.61, 291.122)), ('H', ' 228 ', 'CYS', 0.20736167702824687, (246.058, 285.494, 347.29500000000013)), ('L', '  33 ', 'LEU', 0.29446962859890496, (233.46599999999995, 274.078, 288.358)), ('L', ' 105 ', 'GLU', 0.23377594252415396, (235.24699999999996, 290.033, 305.67300000000006))]
data['cbeta'] = []
data['probe'] = [(' A1123  SER  OG ', ' B 914  ASN  ND2', -0.754, (228.831, 214.346, 159.929)), (' B 317  ASN  ND2', ' C 737  ASP  OD2', -0.687, (242.525, 211.342, 227.033)), (' H 131  PRO  HB3', ' H 157  TYR  HB3', -0.669, (255.592, 273.562, 321.723)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.665, (231.911, 278.333, 300.777)), (' C 557  LYS  NZ ', ' C 574  ASP  OD2', -0.649, (219.16, 261.287, 230.636)), (' B 557  LYS  NZ ', ' B 574  ASP  OD2', -0.646, (261.451, 222.584, 234.076)), (' L  83  VAL HG11', ' L 166  GLN  HB2', -0.64, (236.195, 286.915, 309.544)), (' A1028  LYS  O  ', ' A1032  CYS  CB ', -0.639, (230.349, 239.73, 187.475)), (' L   6  GLN  NE2', ' L  86  TYR  O  ', -0.629, (237.345, 282.214, 296.004)), (' B 858  LEU HD21', ' B 962  LEU HD23', -0.616, (216.26, 219.435, 222.674)), (' C1028  LYS  O  ', ' C1032  CYS  CB ', -0.611, (241.339, 225.889, 188.255)), (' A1028  LYS  O  ', ' A1032  CYS  HB3', -0.608, (230.413, 240.277, 188.109)), (' C 858  LEU HD21', ' C 962  LEU HD23', -0.605, (244.534, 222.704, 224.44)), (' C 318  PHE  O  ', ' C 592  PHE  HA ', -0.604, (238.858, 257.65, 227.378)), (' B1028  LYS  O  ', ' B1032  CYS  CB ', -0.601, (223.185, 223.073, 187.498)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.594, (231.846, 173.292, 241.861)), (' B 898  PHE  HZ ', ' B1050  MET  HE1', -0.59, (218.71, 214.141, 176.848)), (' L 108  ARG HH12', ' L 111  ALA  HB2', -0.589, (231.774, 295.144, 318.009)), (' C1028  LYS  O  ', ' C1032  CYS  HB3', -0.589, (242.214, 225.656, 188.591)), (' A 804  GLN  NE2', ' A 935  GLN  OE1', -0.585, (218.122, 258.746, 186.81)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.583, (178.252, 256.411, 237.179)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.581, (274.922, 260.422, 245.453)), (' B 318  PHE  O  ', ' B 592  PHE  HA ', -0.58, (248.994, 207.411, 227.962)), (' B 666  ILE HD11', ' B 672  ALA  HB2', -0.571, (245.314, 199.716, 209.897)), (' A 858  LEU HD21', ' A 962  LEU HD23', -0.569, (227.662, 245.995, 223.664)), (' B1028  LYS  O  ', ' B1032  CYS  HB3', -0.569, (222.994, 222.363, 187.417)), (' C 950  ASP  OD2', ' C 954  GLN  NE2', -0.555, (244.351, 233.667, 210.215)), (' C  35  GLY  HA3', ' C  56  LEU  HB3', -0.554, (262.158, 250.188, 240.387)), (' B 231  ILE HD12', ' B 233  ILE HD12', -0.552, (226.072, 193.064, 260.292)), (' H  91  THR HG23', ' H 122  THR  HA ', -0.551, (256.683, 271.753, 306.621)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.55, (222.727, 262.979, 194.145)), (' A 366  SER  HA ', ' A 369  TYR  CZ ', -0.548, (205.419, 219.698, 262.27)), (' B 716  THR  N  ', ' B1071  GLN  O  ', -0.545, (238.189, 207.086, 170.319)), (' A 388  ASN  O  ', ' A 526  GLY  HA3', -0.544, (203.897, 213.658, 256.026)), (' A 716  THR  N  ', ' A1071  GLN  O  ', -0.544, (210.935, 236.069, 168.632)), (' H   2  VAL  HA ', ' H  25  SER  O  ', -0.543, (233.589, 256.395, 303.457)), (' C 366  SER  HA ', ' C 369  TYR  CZ ', -0.541, (229.081, 253.218, 264.305)), (' B1094  VAL HG11', ' C 904  TYR  OH ', -0.539, (244.969, 218.829, 168.723)), (' C 716  THR  N  ', ' C1071  GLN  O  ', -0.536, (249.366, 245.489, 171.082)), (' C 726  ILE HG12', ' C1061  VAL HG22', -0.536, (250.892, 229.283, 197.537)), (' H  52  ARG  O  ', ' H  72  ARG  NH1', -0.535, (241.881, 255.758, 290.872)), (' B 366  SER  HA ', ' B 369  TYR  CZ ', -0.534, (246.277, 215.473, 265.198)), (' L 120  PRO  HG3', ' L 130  ALA  HB1', -0.531, (257.683, 287.563, 333.398)), (' C 126  VAL  H  ', ' C 172  SER  HB2', -0.53, (275.312, 239.92, 260.104)), (' C 666  ILE HD11', ' C 672  ALA  HB2', -0.529, (248.709, 256.724, 210.266)), (' A1035  GLY  HA3', ' C1040  VAL HG21', -0.529, (234.906, 239.177, 181.875)), (' C 431  GLY  HA2', ' C 515  PHE  CD2', -0.525, (218.518, 247.354, 257.303)), (' H  33  TYR  CE1', ' H  99  GLY  HA3', -0.522, (238.038, 262.676, 290.715)), (' C 564  GLN  NE2', ' C 577  ARG  O  ', -0.522, (218.362, 264.152, 243.917)), (' L 145  LYS  HB3', ' L 197  THR  OG1', -0.52, (246.334, 302.155, 319.991)), (' B  81  ASN  O  ', ' B 239  GLN  NE2', -0.52, (235.091, 177.462, 257.105)), (' C  31  SER  OG ', ' C  60  SER  N  ', -0.518, (262.19, 256.268, 236.7)), (' C 388  ASN  O  ', ' C 526  GLY  HA3', -0.518, (225.859, 258.038, 257.556)), (' A1094  VAL HG11', ' B 904  TYR  OH ', -0.514, (217.997, 224.581, 166.468)), (' B1091  ARG  NH1', ' B1120  THR  O  ', -0.512, (240.276, 227.73, 155.661)), (' C 763  LEU HD22', ' C1008  VAL HG21', -0.511, (234.432, 221.524, 222.604)), (' A 666  ILE HD11', ' A 672  ALA  HB2', -0.511, (197.292, 231.624, 206.831)), (' A 195  LYS  HE3', ' A 202  LYS  HD2', -0.51, (202.382, 249.726, 245.407)), (' B 396  TYR  HB2', ' B 514  SER  OG ', -0.51, (251.051, 233.818, 262.17)), (' A 564  GLN  NE2', ' A 577  ARG  O  ', -0.509, (203.743, 204.181, 243.266)), (' A 115  GLN  NE2', ' A 132  GLU  OE2', -0.508, (193.388, 248.659, 266.394)), (' B 592  PHE  HZ ', ' C 855  PHE  HA ', -0.505, (250.554, 215.707, 227.599)), (' B 726  ILE HG12', ' B1061  VAL HG22', -0.503, (221.824, 212.665, 195.794)), (' A 704  SER  HB3', ' B 790  LYS  HE2', -0.499, (199.76, 220.993, 180.041)), (' A 805  ILE HG22', ' A 818  ILE HD12', -0.498, (222.338, 253.718, 187.752)), (' A1103  PHE  HZ ', ' G   1  NAG  H62', -0.497, (211.434, 232.307, 151.864)), (' A 725  GLU  OE2', ' A1028  LYS  HE3', -0.494, (223.977, 237.246, 192.492)), (' B  31  SER  OG ', ' B  60  SER  N  ', -0.493, (234.87, 186.542, 235.095)), (' L 193  ALA  HB2', ' L 208  SER  HB3', -0.491, (249.749, 298.961, 334.36)), (' A 521  PRO  HG3', ' A 577  ARG HH21', -0.49, (206.677, 199.756, 245.271)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.49, (220.6, 247.072, 182.049)), (' A1091  ARG  NH1', ' A1120  THR  O  ', -0.489, (228.929, 224.456, 154.86)), (' A 393  THR HG21', ' A 520  ALA  HB3', -0.489, (212.726, 202.938, 248.511)), (' A 904  TYR  OH ', ' C1094  VAL HG11', -0.488, (236.239, 244.848, 168.108)), (' B1002  GLN  NE2', ' C1005  GLN  OE1', -0.484, (229.884, 225.567, 229.054)), (' A 855  PHE  HA ', ' C 592  PHE  HZ ', -0.482, (230.695, 254.794, 226.32)), (' B 388  ASN  O  ', ' B 526  GLY  HA3', -0.481, (252.326, 216.493, 259.101)), (' L 108  ARG  HD2', ' L 171  SER  HB2', -0.481, (231.373, 291.334, 313.465)), (' B  89  GLY  HA3', ' B 270  LEU HD12', -0.481, (230.804, 193.424, 246.291)), (' C 725  GLU  OE2', ' C1028  LYS  HE3', -0.48, (241.848, 231.599, 193.74)), (' C 366  SER  O  ', ' C 370  ASN  HB2', -0.48, (229.475, 252.454, 267.989)), (' B 332  ILE HG23', ' B 362  VAL HG23', -0.479, (261.095, 217.975, 262.004)), (' C 396  TYR  HB2', ' C 514  SER  OG ', -0.479, (211.849, 248.698, 259.094)), (' A  54  LEU  HA ', ' A 271  GLN  O  ', -0.477, (198.382, 243.659, 238.293)), (' A1102  TRP  HB2', ' A1135  ASN  ND2', -0.476, (214.53, 224.373, 152.135)), (' A1128  VAL HG11', ' B 918  GLU  HG2', -0.476, (225.132, 209.274, 160.1)), (' A1039  ARG  HE ', ' B1031  GLU  CD ', -0.475, (228.102, 229.843, 187.4)), (' A 855  PHE  HA ', ' C 592  PHE  CZ ', -0.471, (231.192, 255.076, 226.424)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.471, (225.45, 241.357, 150.806)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.47, (216.479, 212.953, 257.172)), (' A1028  LYS  O  ', ' A1032  CYS  HB2', -0.469, (230.026, 239.145, 187.911)), (' B 731  MET  HB2', ' B 955  ASN HD21', -0.468, (219.268, 219.448, 210.099)), (' C 401  VAL HG22', ' C 509  ARG  HG2', -0.465, (213.034, 242.791, 275.652)), (' C 431  GLY  HA2', ' C 515  PHE  HD2', -0.465, (218.57, 247.269, 257.066)), (' A 726  ILE HG12', ' A1061  VAL HG22', -0.465, (221.621, 246.481, 195.808)), (' A 203  ILE  HB ', ' A 227  VAL  HB ', -0.464, (198.888, 257.994, 248.72)), (' B 393  THR  OG1', ' B 516  GLU  HG3', -0.463, (255.346, 230.727, 255.053)), (' C 203  ILE  HB ', ' C 227  VAL  HB ', -0.463, (264.916, 241.357, 254.199)), (' B 858  LEU HD23', ' B 959  LEU HD22', -0.462, (215.096, 218.627, 220.618)), (' B 722  VAL  HA ', ' B1064  HIS  O  ', -0.462, (225.403, 211.523, 184.135)), (' B 805  ILE HG22', ' B 818  ILE HD12', -0.462, (215.813, 208.565, 187.353)), (' A 547  THR  O  ', ' B 978  ASN  ND2', -0.461, (206.774, 217.148, 239.597)), (' A1031  GLU  CD ', ' C1039  ARG  HE ', -0.461, (233.926, 232.932, 187.56)), (' L 120  PRO  HD3', ' L 132  VAL HG22', -0.461, (254.865, 289.292, 332.942)), (' B 726  ILE HD13', ' B 945  LEU HD13', -0.461, (222.239, 210.395, 197.936)), (' A 224  GLU  HB2', ' C 562  PHE  CE2', -0.459, (203.879, 260.795, 239.523)), (' A 898  PHE  HZ ', ' A1050  MET  HE1', -0.459, (226.033, 249.6, 177.412)), (' C 805  ILE HG22', ' C 818  ILE HD12', -0.457, (257.517, 225.654, 189.808)), (' A 562  PHE  CE2', ' B 224  GLU  HB2', -0.457, (214.717, 193.312, 241.548)), (' B 398  ASP  OD2', ' B 423  TYR  OH ', -0.456, (247.195, 236.47, 265.029)), (' C 195  LYS  HE3', ' C 202  LYS  HD2', -0.456, (256.661, 242.243, 250.102)), (' C 374  PHE  HA ', ' C 436  TRP  HB3', -0.455, (222.407, 243.428, 273.447)), (' A1030  SER  HB3', ' C1041  ASP  HB2', -0.455, (237.42, 238.353, 188.32)), (' A 611  LEU HD22', ' A 666  ILE HG23', -0.455, (200.372, 228.351, 210.32)), (' L   2  ILE HG12', ' L  27  GLN  HB2', -0.455, (241.254, 276.39, 278.867)), (' B 366  SER  O  ', ' B 370  ASN  HB2', -0.454, (244.893, 215.268, 268.64)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.453, (264.134, 220.524, 197.196)), (' B1145  LEU HD21', ' C1145  LEU HD12', -0.452, (237.48, 230.325, 138.264)), (' B 276  LEU  O  ', ' B 288  ALA  HA ', -0.451, (225.421, 196.413, 229.568)), (' C 903  ALA  HB1', ' C 913  GLN  HB2', -0.451, (247.74, 226.64, 168.15)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.45, (207.127, 205.255, 193.421)), (' C1102  TRP  HB2', ' C1135  ASN  ND2', -0.45, (238.942, 248.977, 153.836)), (' B1102  TRP  CZ2', ' B1133  VAL HG21', -0.449, (252.614, 216.548, 158.432)), (' B 592  PHE  CZ ', ' C 855  PHE  HA ', -0.449, (250.567, 215.011, 228.034)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.448, (227.843, 215.959, 150.884)), (' A 332  ILE HG23', ' A 362  VAL HG23', -0.447, (199.95, 206.136, 257.862)), (' C 578  ASP  HB3', ' C 581  THR  O  ', -0.447, (219.993, 270.2, 243.521)), (' H  71  SER  O  ', ' H  79  LEU HD12', -0.447, (247.163, 256.684, 295.674)), (' B 725  GLU  OE2', ' B1028  LYS  HE3', -0.447, (228.227, 218.995, 192.97)), (' B 726  ILE HG22', ' B 948  LEU HD13', -0.446, (222.516, 213.885, 199.89)), (' C 393  THR  OG1', ' C 516  GLU  HG3', -0.446, (212.88, 253.596, 252.31)), (' B1123  SER  OG ', ' C 914  ASN  ND2', -0.445, (249.205, 233.762, 161.607)), (' C 327  VAL  HB ', ' C 531  THR HG23', -0.445, (231.085, 265.871, 250.381)), (' B 578  ASP  HB3', ' B 581  THR  O  ', -0.444, (267.379, 217.051, 247.494)), (' B1103  PHE  HZ ', ' N   1  NAG  H62', -0.444, (242.832, 208.638, 153.914)), (' C 905  ARG  HD2', ' C1049  LEU  O  ', -0.443, (245.572, 226.867, 179.214)), (' A 720  ILE HG13', ' A 923  ILE HG23', -0.441, (218.992, 246.066, 174.339)), (' C 898  PHE  HZ ', ' C1050  MET  HE1', -0.44, (252.436, 225.226, 179.378)), (' B1028  LYS  O  ', ' B1032  CYS  HB2', -0.439, (223.802, 223.202, 187.76)), (' A 431  GLY  HA2', ' A 515  PHE  HD2', -0.438, (216.536, 213.058, 256.943)), (' C 611  LEU HD22', ' C 666  ILE HG23', -0.438, (244.033, 255.827, 213.421)), (' C 714  ILE HD12', ' C1096  VAL HG11', -0.438, (242.297, 247.112, 164.773)), (' A 521  PRO  HG3', ' A 577  ARG  NH2', -0.438, (207.271, 199.301, 245.478)), (' A 722  VAL  HA ', ' A1064  HIS  O  ', -0.437, (219.295, 244.468, 183.862)), (' A 189  LEU  HB2', ' A 210  ILE HD13', -0.437, (186.491, 262.437, 234.219)), (' B 195  LYS  HE3', ' B 202  LYS  HD2', -0.436, (224.548, 197.982, 247.676)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.436, (220.656, 211.11, 276.562)), (' A 396  TYR  CZ ', ' B 230  PRO  HG3', -0.436, (217.827, 200.265, 258.287)), (' H 226  LYS  O  ', ' H 228  CYS  N  ', -0.436, (245.964, 284.076, 345.506)), (' H  52  ARG  HD2', ' H  57  THR HG23', -0.436, (243.825, 256.477, 283.389)), (' B 498  GLN  N  ', ' B 501  ASN  OD1', -0.435, (234.148, 238.319, 286.406)), (' A 715  PRO  HA ', ' A1071  GLN  O  ', -0.435, (210.69, 234.661, 169.285)), (' B 363  ALA  O  ', ' B 527  PRO  HD3', -0.434, (252.876, 217.674, 262.955)), (' C1091  ARG  NH1', ' C1120  THR  O  ', -0.434, (232.149, 236.508, 155.062)), (' A 918  GLU  HG2', ' C1128  VAL HG11', -0.434, (219.903, 246.96, 159.99)), (' C 715  PRO  HA ', ' C1071  GLN  O  ', -0.434, (248.741, 246.425, 171.76)), (' C1073  LYS  HB2', ' C1075  PHE  CE2', -0.433, (247.687, 249.904, 166.75)), (' B 611  LEU HD22', ' B 666  ILE HG23', -0.432, (246.199, 204.219, 213.884)), (' A 930  ALA  O  ', ' A 934  ILE HG12', -0.432, (215.253, 249.743, 185.147)), (' A 126  VAL  H  ', ' A 172  SER  HB2', -0.431, (194.861, 268.788, 253.096)), (' C 391  CYS  HB3', ' C 522  ALA  HB1', -0.429, (218.928, 259.356, 252.371)), (' B  43  PHE  CE1', ' B 283  GLY  HA3', -0.428, (210.779, 197.573, 232.892)), (' A1005  GLN  OE1', ' C1002  GLN  NE2', -0.428, (231.844, 232.063, 229.325)), (' B 905  ARG  HD2', ' B1049  LEU  O  ', -0.427, (223.442, 219.375, 177.757)), (' C1028  LYS  O  ', ' C1032  CYS  HB2', -0.427, (241.146, 226.262, 188.618)), (' C 189  LEU  HB2', ' C 210  ILE HD13', -0.426, (276.649, 250.768, 241.875)), (' C 447  GLY  HA2', ' C 498  GLN  HG2', -0.426, (209.458, 234.442, 287.08)), (' B 447  GLY  HA2', ' B 498  GLN  HG2', -0.426, (236.309, 240.019, 288.948)), (' A 578  ASP  HB3', ' A 581  THR  O  ', -0.425, (197.778, 201.52, 242.468)), (' B1039  ARG  HE ', ' C1031  GLU  CD ', -0.425, (233.687, 226.115, 187.701)), (' B 711  SER  O  ', ' C 897  PRO  HD3', -0.424, (251.016, 214.232, 170.282)), (' A 328  ARG  HD2', ' A 533  LEU HD12', -0.424, (196.058, 207.785, 242.305)), (' A  31  SER  OG ', ' A  60  SER  N  ', -0.424, (188.767, 246.381, 231.212)), (' C 418  ILE  HA ', ' C 422  ASN  HB2', -0.423, (206.849, 234.552, 267.136)), (' A 396  TYR  HE2', ' B 200  TYR  HE2', -0.423, (219.409, 202.184, 256.4)), (' B 704  SER  HB3', ' C 790  LYS  HE2', -0.422, (255.386, 205.711, 183.123)), (' C 363  ALA  O  ', ' C 527  PRO  HD3', -0.421, (225.205, 258.581, 261.075)), (' A 770  ILE  O  ', ' A 774  GLN  HG2', -0.42, (235.155, 242.779, 210.306)), (' A 905  ARG  HD2', ' A1049  LEU  O  ', -0.42, (228.3, 242.17, 178.125)), (' C 930  ALA  O  ', ' C 934  ILE HG12', -0.419, (257.402, 233.497, 188.109)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.419, (248.736, 231.471, 152.41)), (' A 396  TYR  HB2', ' A 514  SER  OG ', -0.418, (218.504, 206.509, 259.831)), (' H  52  ARG  HB2', ' H  57  THR  OG1', -0.418, (244.033, 257.828, 285.41)), (' B 417  LYS  HA ', ' B 417  LYS  HD3', -0.417, (235.806, 248.028, 269.035)), (' A 350  VAL  HA ', ' A 400  PHE  HB2', -0.416, (225.506, 207.552, 272.011)), (' C 276  LEU  O  ', ' C 288  ALA  HA ', -0.416, (259.248, 242.637, 231.785)), (' A 567  ARG HH12', ' B 976  VAL HG21', -0.416, (213.418, 212.157, 238.938)), (' A 894  LEU HD22', ' C1072  GLU  HG2', -0.415, (245.177, 248.64, 174.367)), (' B 770  ILE  O  ', ' B 774  GLN  HG2', -0.415, (216.445, 227.389, 209.258)), (' B 403  ARG HH22', ' C 372  ALA  HB1', -0.414, (230.886, 243.892, 275.121)), (' B 714  ILE HD12', ' B1096  VAL HG11', -0.414, (243.789, 213.172, 164.824)), (' A 447  GLY  HA2', ' A 498  GLN  HG2', -0.414, (228.846, 213.147, 288.827)), (' C 358  ILE  HB ', ' C 395  VAL  HB ', -0.413, (214.804, 255.007, 260.867)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.413, (222.685, 211.006, 182.123)), (' A 276  LEU  O  ', ' A 288  ALA  HA ', -0.413, (202.279, 250.19, 227.224)), (' A1002  GLN  NE2', ' B1005  GLN  OE1', -0.412, (225.586, 230.689, 228.814)), (' A 516  GLU  HG3', ' A 516  GLU  O  ', -0.412, (215.157, 205.309, 252.401)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.412, (200.133, 241.478, 207.119)), (' B 826  VAL  HB ', ' B1057  PRO  HG2', -0.411, (215.213, 210.288, 202.679)), (' B 393  THR HG21', ' B 520  ALA  HB3', -0.41, (257.69, 229.422, 252.073)), (' C 516  GLU  HG3', ' C 516  GLU  O  ', -0.41, (213.634, 252.738, 252.114)), (' A1145  LEU HD21', ' B1145  LEU HD12', -0.41, (234.772, 227.071, 137.944)), (' B  53  ASP  HB3', ' B  55  PHE  CE2', -0.409, (227.576, 199.106, 239.744)), (' L 113  PRO  HB3', ' L 139  PHE  HB3', -0.407, (238.969, 295.112, 321.645)), (' C  64  TRP  HE1', ' C 264  ALA  CB ', -0.407, (275.144, 260.553, 245.459)), (' A 393  THR  OG1', ' A 516  GLU  HG3', -0.407, (214.582, 204.577, 252.598)), (' A 327  VAL  HB ', ' A 531  THR HG23', -0.407, (194.497, 214.071, 248.025)), (' C 299  THR  HA ', ' C 315  THR HG21', -0.407, (249.638, 248.091, 222.919)), (' B 483  VAL  HA ', ' H  59  TYR  CZ ', -0.406, (246.3, 263.541, 281.167)), (' B 516  GLU  HG3', ' B 516  GLU  O  ', -0.405, (254.24, 230.829, 255.236)), (' C  53  ASP  HB3', ' C  55  PHE  CE2', -0.404, (255.383, 244.034, 241.03)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.404, (252.853, 231.157, 184.14)), (' A 418  ILE  HA ', ' A 422  ASN  HB2', -0.404, (232.191, 209.637, 269.324)), (' A  30  ASN  OD1', ' A  59  PHE  HA ', -0.404, (187.155, 247.737, 228.509)), (' B 715  PRO  HA ', ' B1071  GLN  O  ', -0.403, (239.332, 207.338, 171.157)), (' A 546  LEU HD21', ' A 573  THR  OG1', -0.403, (208.382, 211.23, 238.983)), (' B 440  ASN  N  ', ' B 440  ASN  OD1', -0.402, (238.917, 228.572, 284.829)), (' B 521  PRO  HG3', ' B 577  ARG  NH2', -0.402, (264.403, 226.343, 249.512)), (' H  50  TYR  CD1', ' H  59  TYR  HD2', -0.401, (245.521, 262.253, 286.314)), (' L 183  LYS  NZ ', ' L 187  GLU  OE2', -0.4, (264.221, 285.811, 340.425)), (' H  83  MET  HB3', ' H  86  LEU HD21', -0.4, (257.681, 265.451, 299.306)), (' A1145  LEU HD12', ' C1145  LEU HD21', -0.4, (233.071, 231.063, 137.439)), (' A 363  ALA  O  ', ' A 527  PRO  HD3', -0.4, (203.656, 212.742, 259.593)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.4, (197.668, 239.78, 213.63))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
