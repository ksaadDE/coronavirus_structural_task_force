# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 756 ', 'PRO', None, (191.049, 205.833, 219.466)), ('B', ' 932 ', 'VAL', None, (228.32, 216.448, 248.007)), ('C', ' 756 ', 'PRO', None, (240.957, 226.161, 219.46300000000005)), ('D', ' 932 ', 'VAL', None, (203.684, 215.55, 248.005)), ('I', '   8 ', 'PRO', None, (229.238, 253.929, 196.896)), ('I', ' 142 ', 'PRO', None, (231.94999999999996, 250.289, 176.002)), ('J', ' 156 ', 'PRO', None, (200.13400000000004, 238.397, 180.01400000000004)), ('J', ' 158 ', 'PRO', None, (205.21700000000007, 235.51, 182.24900000000005)), ('J', ' 198 ', 'PRO', None, (221.758, 229.518, 154.515)), ('K', '   8 ', 'PRO', None, (202.896, 177.87, 196.922)), ('K', ' 142 ', 'PRO', None, (200.288, 181.265, 175.973)), ('L', ' 156 ', 'PRO', None, (231.911, 193.524, 180.026)), ('L', ' 158 ', 'PRO', None, (226.826, 196.414, 182.25500000000002)), ('L', ' 198 ', 'PRO', None, (210.297, 202.362, 154.505))]
data['rota'] = [('C', ' 729 ', 'ILE', 0.21880563444206055, (266.89499999999987, 226.194, 255.866)), ('C', ' 813 ', 'LEU', 0.26953452401400163, (258.828, 208.645, 226.48500000000004)), ('A', ' 729 ', 'ILE', 0.21980185076766545, (165.102, 205.814, 255.86300000000006)), ('A', ' 813 ', 'LEU', 0.2712879753593642, (173.18, 223.354, 226.48))]
data['cbeta'] = []
data['probe'] = [(' I  18  LYS  HA ', ' I  76  ILE  O  ', -0.807, (240.381, 244.95, 196.88)), (' K  18  LYS  HA ', ' K  76  ILE  O  ', -0.803, (191.38, 186.695, 196.477)), (' J 218  LYS  NZ ', ' J 220  GLU  OE2', -0.717, (210.581, 228.778, 154.772)), (' L 218  LYS  NZ ', ' L 220  GLU  OE2', -0.712, (221.473, 203.093, 154.884)), (' B 779  GLU  OE2', ' B 783  ARG  NH2', -0.67, (212.583, 257.263, 252.458)), (' L  91  THR HG22', ' L 120  VAL  H  ', -0.668, (231.205, 188.122, 189.45)), (' D 779  GLU  OE2', ' D 783  ARG  NH2', -0.658, (219.849, 175.061, 252.311)), (' J  91  THR HG22', ' J 120  VAL  H  ', -0.65, (200.967, 244.465, 189.522)), (' I 185  ASP  OD2', ' I 189  ARG  NH1', -0.622, (200.646, 256.122, 153.936)), (' K 185  ASP  OD2', ' K 189  ARG  NH1', -0.614, (231.51, 175.842, 154.019)), (' A 825  PHE  HA ', ' D 867  ILE HD11', -0.605, (187.856, 212.883, 242.154)), (' B 867  ILE HD11', ' C 825  PHE  HA ', -0.605, (244.203, 219.224, 241.948)), (' A 820  SER  OG ', ' A 823  ARG  NH1', -0.594, (180.02, 215.205, 232.359)), (' A 821  VAL HG21', ' D 875  LEU HD11', -0.589, (187.512, 217.86, 231.525)), (' C 820  SER  OG ', ' C 823  ARG  NH1', -0.585, (251.451, 217.068, 232.223)), (' B 875  LEU HD11', ' C 821  VAL HG21', -0.574, (244.058, 213.964, 231.204)), (' L 109  LEU  HB3', ' L 112  TRP  HE1', -0.571, (215.132, 196.18, 204.792)), (' B 797  SER  HA ', ' B 800  ASP  HB3', -0.568, (218.153, 252.095, 251.421)), (' C 954  GLN  O  ', ' C 957  ILE  HB ', -0.567, (224.344, 214.772, 284.568)), (' A 954  GLN  O  ', ' A 957  ILE  HB ', -0.567, (207.892, 216.945, 284.196)), (' C 726  ILE  O  ', ' C 730  VAL  HB ', -0.566, (266.718, 222.046, 255.435)), (' A 726  ILE  O  ', ' A 730  VAL  HB ', -0.565, (165.194, 210.174, 255.397)), (' J 109  LEU  HB3', ' J 112  TRP  HE1', -0.563, (217.264, 235.898, 204.73)), (' K 116  VAL  O  ', ' K 208  LYS  NZ ', -0.558, (205.676, 185.232, 160.89)), (' J 130  VAL  O  ', ' J 217  LYS  NZ ', -0.558, (205.259, 234.799, 163.465)), (' G  12  GLU  OE2', ' G  13  ARG  NH1', -0.557, (269.842, 221.568, 211.855)), (' E  12  GLU  OE2', ' E  13  ARG  NH1', -0.556, (162.224, 210.081, 211.943)), (' L 153  GLY  HA2', ' L 183  LEU  HB3', -0.556, (230.158, 188.036, 172.987)), (' D 797  SER  HA ', ' D 800  ASP  HB3', -0.555, (213.602, 179.868, 251.382)), (' J 153  GLY  HA2', ' J 183  LEU  HB3', -0.55, (201.92, 243.624, 172.561)), (' D 720  SER  OG ', ' D 721  HIS  N  ', -0.55, (220.72, 157.592, 264.678)), (' L 137  CYS  SG ', ' L 138  GLY  N  ', -0.549, (207.622, 190.33, 150.84)), (' J   2  VAL  HA ', ' J  25  SER  O  ', -0.548, (215.288, 220.667, 203.023)), (' H  12  GLU  OE2', ' H  13  ARG  NH1', -0.548, (222.134, 158.413, 217.184)), (' L 147  LEU HD22', ' L 219  ILE HG21', -0.548, (214.489, 197.347, 159.017)), (' J 147  LEU HD22', ' J 219  ILE HG21', -0.548, (217.198, 234.25, 158.756)), (' A 952  GLU  HA ', ' A 955  HIS  HD2', -0.544, (208.057, 212.857, 278.748)), (' I 116  VAL  O  ', ' I 208  LYS  NZ ', -0.543, (226.526, 246.078, 160.827)), (' C 952  GLU  HA ', ' C 955  HIS  HD2', -0.543, (223.884, 219.601, 279.09)), (' F  12  GLU  OE2', ' F  13  ARG  NH1', -0.543, (209.489, 273.246, 217.27)), (' I  91  GLN  NE2', ' I  92  TRP  O  ', -0.543, (218.614, 247.956, 213.241)), (' D 780  ILE HG21', ' D 804  VAL HG11', -0.542, (214.777, 172.859, 245.855)), (' B 780  ILE HG21', ' B 804  VAL HG11', -0.542, (217.1, 259.084, 245.955)), (' L 130  VAL  O  ', ' L 217  LYS  NZ ', -0.541, (226.675, 197.046, 163.359)), (' L   2  VAL  HA ', ' L  25  SER  O  ', -0.54, (216.481, 210.674, 202.95)), (' A 753  GLU  OE2', ' A 755  HIS  NE2', -0.538, (187.073, 209.381, 224.493)), (' B 720  SER  OG ', ' B 721  HIS  N  ', -0.538, (211.163, 274.41, 264.564)), (' J  94  TYR  O  ', ' J 115  GLY  HA2', -0.538, (210.053, 234.844, 195.112)), (' K  91  GLN  NE2', ' K  92  TRP  O  ', -0.536, (213.344, 184.084, 213.127)), (' C 753  GLU  OE2', ' C 755  HIS  NE2', -0.535, (244.906, 222.323, 224.498)), (' K   7  SER  HG ', ' K  22  THR  HG1', -0.533, (202.059, 177.133, 201.176)), (' L  94  TYR  O  ', ' L 115  GLY  HA2', -0.532, (222.422, 197.119, 195.467)), (' D 831  PHE  O  ', ' D 834  VAL  HB ', -0.531, (221.855, 191.368, 254.783)), (' B 831  PHE  O  ', ' B 834  VAL  HB ', -0.53, (210.033, 240.734, 254.686)), (' J 137  CYS  SG ', ' J 138  GLY  N  ', -0.528, (224.482, 241.655, 150.822)), (' C 870  ILE HG23', ' D 751  ALA  HB2', -0.522, (223.726, 187.95, 234.239)), (' D 800  ASP  OD1', ' D 826  ARG  NH1', -0.518, (215.783, 180.041, 247.041)), (' L 196  THR  O  ', ' L 200  GLN  N  ', -0.516, (209.967, 206.016, 156.747)), (' A 857  VAL HG21', ' A 936  LEU HD12', -0.514, (209.182, 225.676, 252.214)), (' A 870  ILE HG23', ' B 751  ALA  HB2', -0.513, (207.828, 244.186, 234.094)), (' B 800  ASP  OD1', ' B 826  ARG  NH1', -0.512, (216.161, 251.734, 247.005)), (' B 727  THR HG22', ' B 786  VAL HG13', -0.51, (212.492, 263.352, 262.009)), (' D 727  THR HG22', ' D 786  VAL HG13', -0.508, (219.264, 168.771, 261.606)), (' C 857  VAL HG21', ' C 936  LEU HD12', -0.505, (222.689, 206.357, 252.303)), (' J 196  THR  O  ', ' J 200  GLN  N  ', -0.501, (222.239, 225.606, 156.927)), (' A 936  LEU HD21', ' D 934  ILE HD12', -0.5, (208.416, 221.096, 252.05)), (' A 800  ASP  OD2', ' A 829  ARG  NH2', -0.492, (177.856, 214.573, 247.764)), (' K  36  TRP  HB2', ' K  49  ILE  HB ', -0.491, (203.388, 191.543, 204.758)), (' C 800  ASP  OD2', ' C 829  ARG  NH2', -0.491, (254.075, 217.422, 247.628)), (' B 934  ILE HD12', ' C 936  LEU HD21', -0.49, (223.79, 211.297, 252.288)), (' D 820  SER  HB2', ' D 823  ARG HH21', -0.487, (216.252, 179.439, 233.362)), (' B 820  SER  HB2', ' B 823  ARG HH21', -0.485, (215.294, 252.508, 233.704)), (' D 830  VAL  O  ', ' D 833  LEU  HB2', -0.485, (225.025, 188.398, 253.476)), (' B 830  VAL  O  ', ' B 833  LEU  HB2', -0.482, (207.477, 243.623, 253.285)), (' I  36  TRP  HB2', ' I  49  ILE  HB ', -0.48, (228.783, 240.651, 205.056)), (' A 898  MET  HG3', ' A 929  VAL HG21', -0.476, (214.17, 227.158, 241.607)), (' D 815  ASP  N  ', ' D 815  ASP  OD1', -0.476, (209.257, 176.073, 225.184)), (' J 205  ASN  ND2', ' J 216  ASP  OD1', -0.475, (209.236, 226.102, 167.607)), (' B 743  ILE HD13', ' B 826  ARG  HD2', -0.475, (211.014, 252.259, 244.108)), (' K 212  ARG  HA ', ' K 215  CYS  HB2', -0.475, (219.385, 183.334, 149.41)), (' D 828  LEU  O  ', ' D 831  PHE  HB2', -0.475, (219.246, 188.266, 251.662)), (' L 205  ASN  ND2', ' L 216  ASP  OD1', -0.475, (222.841, 205.686, 167.36)), (' D 743  ILE HD13', ' D 826  ARG  HD2', -0.472, (220.614, 179.938, 244.177)), (' B 828  LEU  O  ', ' B 831  PHE  HB2', -0.47, (212.692, 243.414, 251.956)), (' B 854  MET  HE1', ' B 936  LEU HD11', -0.468, (224.265, 224.186, 250.498)), (' I 212  ARG  HA ', ' I 215  CYS  HB2', -0.466, (213.038, 247.763, 149.263)), (' C 898  MET  HG3', ' C 929  VAL HG21', -0.466, (218.224, 205.086, 241.469)), (' D 854  MET  HE1', ' D 936  LEU HD11', -0.465, (207.79, 207.76, 250.358)), (' J 130  VAL  HB ', ' J 215  VAL HG11', -0.465, (205.381, 233.739, 166.528)), (' C 815  ASP  N  ', ' C 815  ASP  OD1', -0.464, (253.385, 208.875, 222.012)), (' B 815  ASP  N  ', ' B 815  ASP  OD1', -0.464, (222.868, 255.587, 224.81)), (' K 150  LYS  HB2', ' K 194  THR  HB ', -0.463, (212.845, 174.984, 158.064)), (' L  87  ARG  NE ', ' L  89  GLU  OE2', -0.462, (232.696, 180.827, 197.953)), (' J  87  ARG  NE ', ' J  89  GLU  OE2', -0.462, (199.291, 251.165, 197.881)), (' L 130  VAL  HB ', ' L 215  VAL HG11', -0.458, (226.757, 198.608, 166.531)), (' C 904  SER  OG ', ' C 905  MET  N  ', -0.457, (210.692, 209.587, 229.03)), (' A 904  SER  OG ', ' A 905  MET  N  ', -0.455, (221.354, 222.437, 229.007)), (' I 150  LYS  HB2', ' I 194  THR  HB ', -0.451, (219.397, 256.78, 157.959)), (' L  39  GLN HE21', ' L  43  LYS  HA ', -0.447, (216.278, 187.577, 192.652)), (' B 750  MET  N  ', ' B 750  MET  SD ', -0.439, (207.113, 248.751, 233.089)), (' D 814  ALA  HB2', ' H  29  LEU  H  ', -0.438, (205.386, 172.891, 226.49)), (' A 815  ASP  N  ', ' A 815  ASP  OD1', -0.436, (178.276, 222.937, 222.26)), (' J  39  GLN HE21', ' J  43  LYS  HA ', -0.436, (215.633, 244.395, 192.713)), (' A 820  SER  O  ', ' A 823  ARG  NH1', -0.434, (181.506, 214.922, 233.129)), (' C 820  SER  O  ', ' C 823  ARG  NH1', -0.432, (250.382, 217.181, 233.231)), (' I  97  PHE  HZ ', ' J  99  HIS  HE1', -0.432, (214.232, 238.435, 210.62)), (' B 776  PHE  HE2', ' B 804  VAL HG22', -0.431, (215.213, 255.297, 245.024)), (' I 177  SER  HB3', ' J 175  PHE  CE2', -0.431, (217.969, 243.829, 170.794)), (' D 776  PHE  HE2', ' D 804  VAL HG22', -0.427, (216.464, 176.686, 245.329)), (' B 802  LEU  O  ', ' B 805  THR  OG1', -0.422, (223.22, 254.649, 243.397)), (' H  19  MET  HG2', ' H  27  LYS  HA ', -0.422, (207.782, 166.494, 224.979)), (' K 107  ILE  H  ', ' K 167  GLN HE22', -0.421, (199.617, 187.121, 183.92)), (' I  25  VAL HG11', ' I  29  ILE HD12', -0.421, (222.973, 251.955, 212.116)), (' D 802  LEU  O  ', ' D 805  THR  OG1', -0.42, (208.781, 177.359, 243.302)), (' G  19  MET  HG2', ' G  27  LYS  HA ', -0.419, (262.392, 207.284, 219.419)), (' C 794  ASP  HB2', ' C 796  TRP  HE3', -0.419, (251.324, 212.488, 254.69)), (' D 803  ILE HG23', ' D 826  ARG  NH2', -0.417, (215.167, 180.047, 244.075)), (' B 803  ILE HG23', ' B 826  ARG  NH2', -0.416, (217.131, 251.721, 244.266)), (' D 769  ASN  ND2', ' D 823  ARG HH12', -0.415, (220.366, 178.211, 233.451)), (' A 794  ASP  HB2', ' A 796  TRP  HE3', -0.414, (180.677, 219.482, 254.73)), (' I 107  ILE  H  ', ' I 167  GLN HE22', -0.414, (232.738, 244.421, 184.005)), (' C 880  PHE  HE2', ' C 911  LEU  HA ', -0.414, (213.066, 198.948, 223.705)), (' C 757  MET  HG2', ' C 759  GLU  H  ', -0.414, (248.708, 227.027, 219.195)), (' E  19  MET  HG2', ' E  27  LYS  HA ', -0.413, (169.855, 224.789, 219.29)), (' A 894  LEU  HA ', ' A 894  LEU HD23', -0.412, (212.575, 230.424, 234.908)), (' A 902  SER  HA ', ' B 901  GLU  OE2', -0.412, (217.825, 219.769, 230.347)), (' I 163  SER  O  ', ' I 176  MET  HA ', -0.411, (220.063, 246.512, 173.649)), (' C 739  ILE HG12', ' C 779  GLU  OE2', -0.411, (257.738, 222.422, 247.21)), (' K  25  VAL HG11', ' K  29  ILE HD12', -0.411, (208.876, 179.965, 211.732)), (' A 757  MET  HG2', ' A 759  GLU  H  ', -0.41, (183.228, 205.129, 219.209)), (' A 739  ILE HG12', ' A 779  GLU  OE2', -0.41, (174.263, 209.57, 247.087)), (' D 900  LEU  HA ', ' D 900  LEU HD13', -0.409, (208.941, 217.057, 236.558)), (' K 163  SER  O  ', ' K 176  MET  HA ', -0.409, (212.151, 184.905, 173.675)), (' J  51  ILE HD13', ' J  72  ARG  HG3', -0.406, (203.685, 230.98, 210.934)), (' A 880  PHE  HE2', ' A 911  LEU  HA ', -0.406, (218.946, 233.006, 223.666)), (' C 902  SER  HA ', ' D 901  GLU  OE2', -0.405, (214.502, 211.984, 230.184)), (' L   2  VAL  O  ', ' L 111  TYR  OH ', -0.405, (214.656, 207.474, 200.401)), (' F  19  MET  HG2', ' F  27  LYS  HA ', -0.405, (224.381, 265.69, 224.952)), (' C 891  PHE  HA ', ' C 891  PHE  HD1', -0.405, (225.088, 198.356, 236.335)), (' D 750  MET  N  ', ' D 750  MET  SD ', -0.405, (224.885, 183.31, 233.109)), (' D 796  TRP  HZ3', ' D 828  LEU HD13', -0.404, (215.441, 186.737, 251.399)), (' A 945  MET  HG2', ' C 945  MET  HG2', -0.402, (215.796, 215.993, 266.511)), (' B 864  PHE  HA ', ' B 867  ILE HG22', -0.4, (238.565, 220.996, 242.361))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
