# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  52 ', 'GLN', 0.016504269557529767, (148.34799999999996, 161.63999999999993, 167.945)), ('A', ' 197 ', 'ILE', 0.0, (150.559, 164.615, 181.783)), ('A', ' 214 ', 'ARG', 0.0, (159.70599999999993, 190.758, 165.349)), ('A', ' 465 ', 'GLU', 0.041578455559195225, (109.096, 130.277, 192.79899999999998)), ('A', ' 516 ', 'GLU', 0.0, (112.07199999999997, 143.807, 184.29299999999998)), ('A', ' 517 ', 'LEU', 0.04471694897852172, (113.49299999999997, 146.16099999999994, 181.719)), ('A', ' 571 ', 'ASP', 0.011503443397149713, (116.243, 147.78, 165.13)), ('A', ' 584 ', 'ILE', 0.0012645077532941825, (103.59799999999997, 161.174, 169.10199999999998)), ('A', ' 755 ', 'GLN', 0.0, (144.329, 123.752, 168.64)), ('A', ' 794 ', 'ILE', 0.023014901293359754, (168.82599999999994, 141.13899999999995, 106.654)), ('A', ' 902 ', 'MET', 0.0, (151.284, 143.051, 103.84299999999999)), ('A', ' 978 ', 'ASN', 0.17759797770268662, (156.752, 138.916, 173.30799999999996)), ('A', '1050 ', 'MET', 0.27455733106720087, (148.69, 142.423, 112.279)), ('A', '1107 ', 'ARG', 0.06317226246085327, (134.856, 149.865, 98.818)), ('A', '1145 ', 'LEU', 0.037097498336932065, (134.77299999999994, 141.067, 67.135)), ('B', '  52 ', 'GLN', 0.016441722940938697, (151.93199999999996, 112.103, 167.999)), ('B', ' 197 ', 'ILE', 0.0, (153.41999999999993, 108.715, 181.839)), ('B', ' 214 ', 'ARG', 0.0, (171.638, 87.842, 165.421)), ('B', ' 465 ', 'GLU', 0.041403973956265966, (144.04399999999995, 161.73299999999995, 192.833)), ('B', ' 516 ', 'GLU', 0.0, (154.34199999999996, 152.45799999999994, 184.33599999999996)), ('B', ' 517 ', 'LEU', 0.04481577006300604, (155.688, 150.058, 181.763)), ('B', ' 571 ', 'ASP', 0.011565036930743126, (155.74499999999995, 146.863, 165.175)), ('B', ' 584 ', 'ILE', 0.0012549765440949164, (173.636, 151.24, 169.155)), ('B', ' 755 ', 'GLN', 0.0, (120.977, 134.316, 168.67099999999996)), ('B', ' 794 ', 'ILE', 0.02302574397282965, (124.022, 104.40799999999997, 106.69599999999997)), ('B', ' 902 ', 'MET', 0.0, (134.354, 118.713, 103.88599999999998)), ('B', ' 978 ', 'ASN', 0.17799811899765489, (128.02099999999993, 116.025, 173.348)), ('B', '1050 ', 'MET', 0.27638855493370157, (135.08499999999995, 121.282, 112.321)), ('B', '1107 ', 'ARG', 0.0637946105168308, (148.39699999999993, 129.628, 98.86499999999998)), ('B', '1145 ', 'LEU', 0.036933115840455194, (140.806, 134.037, 67.176)), ('C', '  52 ', 'GLN', 0.01668430608082846, (107.141, 133.782, 167.941)), ('C', ' 197 ', 'ILE', 0.0, (103.452, 134.20099999999994, 181.77799999999996)), ('C', ' 214 ', 'ARG', 0.0, (76.254, 129.017, 165.328)), ('C', ' 465 ', 'GLU', 0.041631750262103175, (153.94199999999995, 115.531, 192.814)), ('C', ' 516 ', 'GLU', 0.0, (140.74599999999995, 111.327, 184.301)), ('C', ' 517 ', 'LEU', 0.04485317679271553, (137.99799999999996, 111.377, 181.726)), ('C', ' 571 ', 'ASP', 0.011588325566084684, (135.22799999999995, 112.94899999999997, 165.136)), ('C', ' 584 ', 'ILE', 0.0012688662717565962, (129.973, 95.293, 169.101)), ('C', ' 755 ', 'GLN', 0.0, (141.94, 149.295, 168.65699999999998)), ('C', ' 794 ', 'ILE', 0.02302337791159826, (114.64799999999997, 161.79299999999995, 106.66)), ('C', ' 902 ', 'MET', 0.0, (121.78699999999998, 145.65499999999994, 103.84899999999998)), ('C', ' 978 ', 'ASN', 0.17754672464164728, (122.58999999999997, 152.443, 173.316)), ('C', '1050 ', 'MET', 0.2758482269051108, (123.62699999999997, 143.724, 112.286)), ('C', '1107 ', 'ARG', 0.06348999455030496, (124.12700000000001, 128.026, 98.822)), ('C', '1145 ', 'LEU', 0.036810484868182045, (131.798, 132.371, 67.143))]
data['cbeta'] = []
data['probe'] = [(' A 369  TYR  O  ', ' B 417  LYS  NZ ', -0.813, (126.144, 153.473, 198.582)), (' B 716  THR  OG1', ' B1071  GLN  O  ', -0.773, (155.709, 119.48, 99.713)), (' A 716  THR  OG1', ' A1071  GLN  O  ', -0.754, (139.982, 161.116, 99.617)), (' C 716  THR  OG1', ' C1071  GLN  O  ', -0.754, (112.13, 126.922, 99.581)), (' C 732  THR  OG1', ' C 955  ASN  ND2', -0.734, (123.616, 147.736, 144.209)), (' A 732  THR  OG1', ' A 955  ASN  ND2', -0.733, (152.814, 140.609, 144.07)), (' B 732  THR  OG1', ' B 955  ASN  ND2', -0.73, (131.666, 119.21, 144.342)), (' C1011  GLN  OE1', ' C1014  ARG  NH1', -0.727, (125.646, 142.362, 146.75)), (' A1011  GLN  OE1', ' A1014  ARG  NH1', -0.724, (145.501, 140.94, 146.55)), (' B1011  GLN  OE1', ' B1014  ARG  NH1', -0.723, (134.886, 124.537, 146.712)), (' B 725  GLU  OE1', ' B1064  HIS  NE2', -0.719, (139.845, 123.341, 120.842)), (' C1116  THR  OG1', ' C1118  ASP  OD1', -0.7, (129.346, 130.701, 83.418)), (' B1116  THR  OG1', ' B1118  ASP  OD1', -0.696, (143.453, 132.434, 83.496)), (' A1116  THR  OG1', ' A1118  ASP  OD1', -0.694, (135.245, 144.008, 82.8)), (' C 725  GLU  OE1', ' C1064  HIS  NE2', -0.689, (122.94, 138.654, 120.837)), (' A 725  GLU  OE1', ' A1064  HIS  NE2', -0.675, (144.596, 145.133, 120.809)), (' C 437  ASN  OD1', ' C 439  ASN  ND2', -0.622, (135.424, 125.819, 211.684)), (' B 323  THR  OG1', ' B 324  GLU  OE1', -0.621, (174.624, 131.963, 170.476)), (' B 437  ASN  OD1', ' B 439  ASN  ND2', -0.62, (144.551, 140.238, 211.674)), (' A 437  ASN  OD1', ' A 439  ASN  ND2', -0.616, (127.591, 141.448, 211.642)), (' B 125  ASN  ND2', ' B 172  SER  O  ', -0.61, (147.593, 85.009, 185.527)), (' C 409  GLN  OE1', ' C 417  LYS  N  ', -0.604, (151.073, 130.635, 197.541)), (' A 409  GLN  OE1', ' A 417  LYS  N  ', -0.602, (123.572, 125.092, 197.679)), (' C 125  ASN  ND2', ' C 172  SER  O  ', -0.6, (85.885, 151.328, 185.417)), (' B 409  GLN  OE1', ' B 417  LYS  N  ', -0.599, (133.033, 151.529, 197.73)), (' A 125  ASN  ND2', ' A 172  SER  O  ', -0.594, (174.27, 171.737, 185.531)), (' A 323  THR  OG1', ' A 324  GLU  OE1', -0.58, (119.924, 171.649, 170.407)), (' C 323  THR  OG1', ' C 324  GLU  OE1', -0.579, (112.656, 104.033, 170.385)), (' B1048  HIS  NE2', ' B1050  MET  O  ', -0.57, (136.829, 122.209, 114.157)), (' A1048  HIS  NE2', ' A1050  MET  O  ', -0.559, (146.708, 142.933, 114.014)), (' C1048  HIS  NE2', ' C1050  MET  O  ', -0.558, (123.615, 141.766, 113.977)), (' B  34  ARG  NH2', ' B 217  PRO  O  ', -0.549, (162.343, 92.81, 160.955)), (' C  34  ARG  NH2', ' C 217  PRO  O  ', -0.548, (85.15, 134.538, 160.956)), (' A 417  LYS  NZ ', ' C 369  TYR  O  ', -0.541, (125.191, 118.631, 198.644)), (' A  34  ARG  NH2', ' A 217  PRO  O  ', -0.538, (159.925, 180.154, 160.869)), (' B 740  MET  HE1', ' C 319  ARG  HE ', -0.533, (119.146, 117.138, 162.006)), (' C1310  NAG  O3 ', ' C1310  NAG  O7 ', -0.528, (113.061, 112.727, 102.368)), (' A 388  ASN  O  ', ' A 528  LYS  NZ ', -0.527, (118.02, 158.709, 187.585)), (' A1077  THR  OG1', ' A1078  ALA  N  ', -0.527, (125.29, 154.281, 93.539)), (' C1077  THR  OG1', ' C1078  ALA  N  ', -0.522, (125.146, 117.613, 93.498)), (' B1077  THR  OG1', ' B1078  ALA  N  ', -0.521, (156.923, 135.835, 93.599)), (' B 391  CYS  HA ', ' B 525  CYS  HB3', -0.52, (163.174, 146.284, 185.493)), (' B 369  TYR  O  ', ' C 417  LYS  NZ ', -0.515, (156.155, 135.153, 198.827)), (' A 391  CYS  HA ', ' A 525  CYS  HB3', -0.511, (112.881, 154.434, 185.498)), (' B1310  NAG  O3 ', ' B1310  NAG  O7 ', -0.511, (167.32, 127.901, 102.575)), (' C 391  CYS  HA ', ' C 525  CYS  HB3', -0.509, (131.148, 107.051, 185.057)), (' B  37  TYR  OH ', ' B  54  LEU  O  ', -0.503, (155.288, 105.382, 171.818)), (' B 657  ASN  N  ', ' B 657  ASN  OD1', -0.499, (175.677, 122.449, 132.75)), (' C 903  ALA  HB1', ' C 913  GLN  HB2', -0.496, (123.499, 143.972, 97.576)), (' A 903  ALA  HB1', ' A 913  GLN  HB2', -0.495, (149.287, 142.362, 97.972)), (' C 661  GLU  N  ', ' C 661  GLU  OE2', -0.494, (107.814, 120.037, 127.868)), (' A1125  ASN  OD1', ' A1126  CYS  N  ', -0.493, (114.409, 144.453, 84.056)), (' A 969  ASN  OD1', ' A 975  SER  N  ', -0.493, (148.731, 145.716, 171.383)), (' C1125  ASN  OD1', ' C1126  CYS  N  ', -0.492, (139.15, 113.192, 84.064)), (' A 657  ASN  N  ', ' A 657  ASN  OD1', -0.491, (127.653, 177.214, 132.729)), (' B 903  ALA  HB1', ' B 913  GLN  HB2', -0.491, (134.959, 121.183, 97.653)), (' B 969  ASN  OD1', ' B 975  SER  N  ', -0.487, (137.888, 119.654, 171.427)), (' A 978  ASN  OD1', ' B 547  THR HG23', -0.484, (160.939, 138.155, 174.034)), (' C 657  ASN  N  ', ' C 657  ASN  OD1', -0.483, (104.63, 108.015, 133.227)), (' C 388  ASN  O  ', ' C 528  LYS  NZ ', -0.482, (124.992, 108.766, 187.491)), (' C 969  ASN  OD1', ' C 975  SER  N  ', -0.481, (120.447, 142.549, 171.545)), (' B 388  ASN  O  ', ' B 528  LYS  NZ ', -0.481, (164.485, 140.119, 187.556)), (' A 214  ARG  HG2', ' A 215  ASP  N  ', -0.481, (159.171, 189.184, 163.886)), (' B 214  ARG  HG2', ' B 215  ASP  N  ', -0.48, (170.909, 88.854, 163.728)), (' B 661  GLU  N  ', ' B 661  GLU  OE2', -0.474, (163.474, 119.537, 128.012)), (' C 776  LYS  NZ ', ' C 780  GLU  OE2', -0.473, (138.033, 149.134, 131.658)), (' B 978  ASN  OD1', ' C 547  THR HG23', -0.472, (125.19, 113.059, 173.546)), (' C 214  ARG  HG2', ' C 215  ASP  N  ', -0.472, (77.457, 129.199, 163.671)), (' A 661  GLU  N  ', ' A 661  GLU  OE2', -0.471, (136.15, 167.914, 127.889)), (' A 214  ARG  HG2', ' A 215  ASP  H  ', -0.471, (159.371, 189.018, 163.645)), (' C 353  TRP  O  ', ' C 466  ARG  NE ', -0.469, (150.865, 112.767, 199.445)), (' A 776  LYS  NZ ', ' A 780  GLU  OE2', -0.469, (146.056, 127.305, 131.208)), (' A 319  ARG  HE ', ' C 740  MET  HE1', -0.468, (127.97, 159.494, 162.055)), (' B 353  TRP  O  ', ' B 466  ARG  NE ', -0.467, (147.656, 160.839, 199.374)), (' B 214  ARG  HG2', ' B 215  ASP  H  ', -0.466, (170.635, 88.784, 163.547)), (' A 353  TRP  O  ', ' A 466  ARG  NE ', -0.466, (108.191, 134.322, 199.486)), (' A 740  MET  HE1', ' B 319  ARG  HE ', -0.466, (159.741, 130.965, 161.885)), (' A  28  TYR  HB2', ' A1301  NAG  H83', -0.465, (146.74, 189.412, 166.206)), (' B 192  PHE  HE1', ' B 205  SER  HG ', -0.465, (155.739, 90.315, 174.86)), (' A 490  PHE  O  ', ' A 493  GLN  NE2', -0.463, (114.449, 118.183, 207.666)), (' C 490  PHE  O  ', ' C 493  GLN  NE2', -0.462, (161.729, 126.247, 207.669)), (' B  28  TYR  HB2', ' B1301  NAG  H83', -0.459, (176.942, 99.875, 166.486)), (' B 776  LYS  NZ ', ' B 780  GLU  OE2', -0.459, (123.209, 131.145, 131.676)), (' C 214  ARG  HG2', ' C 215  ASP  H  ', -0.458, (77.554, 129.444, 163.462)), (' A 234  ASN  OD1', ' A 235  ILE  N  ', -0.458, (148.255, 171.441, 187.401)), (' B 234  ASN  OD1', ' B 235  ILE  N  ', -0.457, (160.528, 107.777, 187.411)), (' C 234  ASN  OD1', ' C 235  ILE  N  ', -0.455, (99.096, 128.558, 187.487)), (' C 454  ARG  NH2', ' C 467  ASP  O  ', -0.455, (158.241, 117.989, 200.264)), (' A 547  THR HG23', ' C 978  ASN  OD1', -0.455, (121.386, 156.211, 173.643)), (' C  28  TYR  HB2', ' C1301  NAG  H83', -0.455, (83.951, 118.888, 166.333)), (' B 490  PHE  O  ', ' B 493  GLN  NE2', -0.455, (130.898, 162.569, 207.71)), (' A1310  NAG  O3 ', ' A1310  NAG  O7 ', -0.452, (127.265, 166.917, 102.368)), (' A 454  ARG  NH2', ' A 467  ASP  O  ', -0.447, (108.968, 125.18, 200.144)), (' B 503  VAL HG22', ' B 508  TYR  OH ', -0.445, (139.722, 140.362, 208.574)), (' B1125  ASN  OD1', ' B1126  CYS  N  ', -0.445, (153.346, 150.084, 84.05)), (' C 914  ASN  OD1', ' C 915  VAL  N  ', -0.442, (120.295, 138.805, 94.945)), (' A 914  ASN  OD1', ' A 915  VAL  N  ', -0.441, (145.994, 147.944, 94.944)), (' B 454  ARG  NH2', ' B 467  ASP  O  ', -0.438, (139.703, 164.286, 200.194)), (' C 503  VAL HG22', ' C 508  TYR  OH ', -0.435, (137.279, 130.274, 208.704)), (' A 503  VAL HG22', ' A 508  TYR  OH ', -0.435, (129.852, 136.934, 208.478)), (' B 914  ASN  OD1', ' B 915  VAL  N  ', -0.435, (140.992, 120.822, 94.91)), (' C 576  VAL HG22', ' C 587  ILE HD11', -0.432, (128.13, 101.79, 169.303)), (' A 334  ASN  OD1', ' A 335  LEU  N  ', -0.428, (105.735, 157.156, 196.954)), (' C 334  ASN  OD1', ' C 335  LEU  N  ', -0.427, (132.415, 99.268, 196.965)), (' B 200  TYR  OH ', ' C 394  ASN  ND2', -0.427, (143.544, 107.195, 185.229)), (' B 576  VAL HG22', ' B 587  ILE HD11', -0.422, (169.059, 146.381, 169.302)), (' B 334  ASN  OD1', ' B 335  LEU  N  ', -0.422, (169.065, 151.057, 196.68)), (' B1072  GLU  N  ', ' B1072  GLU  OE2', -0.42, (156.689, 121.832, 103.654)), (' A 365  TYR  HE2', ' A 387  LEU HD23', -0.42, (117.593, 150.09, 190.532)), (' C 365  TYR  CE2', ' C 387  LEU HD23', -0.419, (132.356, 113.1, 190.945)), (' B 365  TYR  CE2', ' B 387  LEU HD23', -0.418, (156.672, 144.251, 190.791)), (' A 576  VAL HG22', ' A 587  ILE HD11', -0.417, (110.081, 159.494, 169.264)), (' A 721  SER  OG ', ' A1066  THR  OG1', -0.416, (145.452, 152.339, 113.368)), (' B 365  TYR  HE2', ' B 387  LEU HD23', -0.416, (157.123, 144.461, 190.574)), (' A  81  ASN  O  ', ' A 239  GLN  NE2', -0.416, (152.628, 187.678, 185.638)), (' B 988  GLU  N  ', ' B 988  GLU  OE1', -0.416, (128.073, 127.367, 182.896)), (' C 365  TYR  HE2', ' C 387  LEU HD23', -0.415, (132.545, 113.395, 190.62)), (' A 365  TYR  CE2', ' A 387  LEU HD23', -0.415, (118.03, 149.882, 190.716)), (' B 721  SER  OG ', ' B1066  THR  OG1', -0.415, (145.303, 119.238, 113.569)), (' C1092  GLU  N  ', ' C1092  GLU  OE1', -0.414, (131.481, 130.267, 92.626)), (' A 523  THR HG23', ' A 524  VAL HG23', -0.413, (107.11, 151.614, 188.195)), (' A1072  GLU  N  ', ' A1072  GLU  OE2', -0.413, (137.727, 160.936, 103.206)), (' B 523  THR HG23', ' B 524  VAL HG23', -0.411, (163.856, 153.228, 188.188)), (' C 721  SER  OG ', ' C1066  THR  OG1', -0.411, (116.72, 135.902, 113.548)), (' B  81  ASN  O  ', ' B 239  GLN  NE2', -0.41, (172.464, 95.506, 185.796)), (' A 988  GLU  N  ', ' A 988  GLU  OE1', -0.41, (146.916, 133.446, 182.826)), (' C1072  GLU  N  ', ' C1072  GLU  OE2', -0.409, (113.087, 124.793, 103.193)), (' A1135  ASN  OD1', ' A1136  THR  N  ', -0.409, (125.629, 153.145, 80.455)), (' C  81  ASN  O  ', ' C 239  GLN  NE2', -0.409, (82.444, 124.406, 185.711)), (' A1092  GLU  N  ', ' A1092  GLU  OE1', -0.409, (133.479, 142.355, 92.386)), (' C 988  GLU  N  ', ' C 988  GLU  OE1', -0.409, (132.148, 146.819, 183.215)), (' A1101  HIS  NE2', ' V   2  NAG  O7 ', -0.407, (133.998, 161.316, 80.241)), (' B1135  ASN  OD1', ' B1136  THR  N  ', -0.407, (155.851, 135.625, 80.668)), (' C1135  ASN  OD1', ' C1136  THR  N  ', -0.405, (125.581, 118.425, 80.68)), (' A 230  PRO  O  ', ' B 357  ARG  NH1', -0.405, (158.992, 162.938, 189.417)), (' C 138  ASP  N  ', ' C 138  ASP  OD1', -0.404, (76.502, 125.607, 192.056)), (' B1092  GLU  N  ', ' B1092  GLU  OE1', -0.402, (142.578, 134.518, 92.408)), (' B1101  HIS  NE2', ' p   2  NAG  O7 ', -0.401, (158.74, 124.697, 80.352)), (' C 192  PHE  HE1', ' C 205  SER  HG ', -0.401, (86.381, 141.718, 174.828)), (' C 998  THR  O  ', ' C 998  THR HG23', -0.401, (131.8, 139.229, 167.725)), (' 9   2  NAG  O7 ', ' C1101  HIS  NE2', -0.4, (114.763, 121.617, 80.205))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
