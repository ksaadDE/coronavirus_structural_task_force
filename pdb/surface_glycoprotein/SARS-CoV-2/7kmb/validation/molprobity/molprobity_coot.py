# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' F 261  CYS  HB2', ' F 488  VAL HG23', -0.685, (264.016, 263.211, 316.351)), (' F 503  LEU HD23', ' F 505  HIS  H  ', -0.64, (249.576, 269.6, 300.304)), (' F 482  ARG  HD3', ' F 609  ASP  H  ', -0.582, (261.952, 260.415, 320.098)), (' F 284  PRO  HG3', ' F 440  LEU HD13', -0.571, (274.259, 258.061, 298.409)), (' F 144  LEU  HA ', ' F 148  LEU HD23', -0.57, (256.982, 281.839, 299.59)), (' F 108  LEU HD23', ' F 112  LYS  HB3', -0.569, (226.268, 271.877, 305.66)), (' F 574  VAL HG23', ' F 576  ALA  H  ', -0.563, (249.939, 241.735, 289.63)), (' G 433  VAL HG12', ' G 512  VAL HG22', -0.537, (228.454, 257.777, 251.609)), (' F 445  THR HG23', ' F 446  ILE HG13', -0.526, (262.181, 259.799, 293.518)), (' F  19  SER  N  ', ' F  23  GLU  OE2', -0.524, (211.642, 247.457, 279.232)), (' F 177  ARG  HD3', ' F 498  CYS  HB2', -0.522, (245.4, 274.49, 314.242)), (' F 183  TYR  OH ', ' F 187  LYS  NZ ', -0.521, (236.462, 269.053, 301.992)), (' G 452  LEU HD23', ' G 492  LEU  HB3', -0.517, (217.634, 267.888, 267.27)), (' G 393  THR  HB ', ' G 523  THR  HA ', -0.509, (220.689, 256.313, 233.016)), (' F 174  LYS  NZ ', ' F 496  THR  OG1', -0.507, (247.393, 279.124, 318.585)), (' F 303  ASP  N  ', ' F 303  ASP  OD1', -0.505, (265.602, 273.245, 270.714)), (' G 418  ILE  HA ', ' G 422  ASN HD22', -0.502, (223.211, 258.634, 263.788)), (' F 107  VAL HG23', ' F 108  LEU HD12', -0.501, (225.738, 267.216, 303.084)), (' G 376  THR  HB ', ' G 435  ALA  HB3', -0.501, (235.62, 259.779, 254.293)), (' F 501  ALA  O  ', ' F 507  SER  OG ', -0.5, (246.789, 273.928, 304.967)), (' F 481  LYS  HG2', ' F 487  VAL  HB ', -0.496, (258.986, 263.828, 312.132)), (' F 374  HIS  ND1', ' F 405  GLY  O  ', -0.496, (255.453, 261.702, 285.134)), (' F 544  ILE  O  ', ' F 547  SER  OG ', -0.494, (260.203, 248.653, 275.358)), (' F 349  TRP  HE1', ' F 359  LEU HD22', -0.494, (247.347, 274.488, 282.767)), (' F 177  ARG  NH2', ' F 181  GLU  OE1', -0.493, (240.944, 272.602, 317.038)), (' G 341  VAL HG13', ' G 342  PHE  HD2', -0.49, (228.175, 266.939, 245.302)), (' F  47  SER  O  ', ' F  51  ASN  ND2', -0.489, (243.261, 277.171, 283.852)), (' F  21  ILE HG21', ' F  84  PRO  HD2', -0.488, (215.535, 251.097, 288.527)), (' F 155  SER  O  ', ' F 161  ARG  NH1', -0.483, (269.787, 275.514, 303.716)), (' F  42  GLN  OE1', ' G 498  GLN  NE2', -0.478, (232.501, 275.002, 273.553)), (' G 360  ASN  HA ', ' G 524  VAL HG11', -0.474, (221.215, 261.949, 231.477)), (' F 481  LYS  O  ', ' F 486  GLY  N  ', -0.471, (259.703, 260.439, 312.487)), (' G 405  ASP  N  ', ' G 504  GLY  O  ', -0.46, (235.65, 261.462, 264.958)), (' F 394  ASN  HB3', ' F 562  LYS  HE2', -0.459, (237.976, 257.331, 287.034)), (' G 361  CYS  H  ', ' G 524  VAL HG21', -0.447, (223.018, 262.345, 233.109)), (' F  31  LYS  O  ', ' F  35  GLU  HG2', -0.446, (222.897, 264.57, 277.384)), (' F 469  PRO  HD2', ' F 472  GLN  HB2', -0.444, (243.315, 263.968, 321.544)), (' F 118  THR  O  ', ' F 122  THR  OG1', -0.436, (237.037, 281.286, 303.264)), (' F 528  ALA  HB2', ' F 574  VAL HG12', -0.433, (253.775, 243.989, 286.854)), (' F 398  GLU  HB2', ' F 514  ARG  HE ', -0.433, (244.204, 260.436, 293.621)), (' F  41  TYR  OH ', ' G 500  THR  OG1', -0.429, (239.133, 273.165, 271.469)), (' F 371  THR  HA ', ' F 374  HIS  HB3', -0.422, (257.998, 264.871, 284.107)), (' F 313  LYS  HA ', ' F 316  VAL HG12', -0.419, (258.504, 258.614, 268.759)), (' F 152  MET  O  ', ' F 161  ARG  NH2', -0.419, (266.601, 273.652, 303.548)), (' F 586  ASN  HA ', ' F 589  GLU  HG2', -0.411, (266.16, 244.743, 295.257)), (' G 395  VAL HG13', ' G 515  PHE  HE2', -0.411, (226.223, 258.668, 240.965)), (' G 444  LYS  HB2', ' G 444  LYS  HE2', -0.411, (231.461, 281.206, 265.426)), (' G 393  THR  OG1', ' G 394  ASN  N  ', -0.407, (219.763, 256.915, 236.832)), (' F 538  PRO  HB2', ' F 540  HIS  CD2', -0.4, (270.376, 247.716, 288.058))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
