# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 112 ', 'SER', 0.031213064611220132, (149.392, 207.791, 112.24699999999999)), ('A', ' 477 ', 'SER', 0.03219914317524937, (178.60700000000008, 124.558, 110.653)), ('A', ' 600 ', 'PRO', 0.03982467144170481, (154.796, 194.403, 170.024)), ('A', ' 617 ', 'CYS', 0.011365822362397677, (175.804, 197.55, 159.771)), ('B', ' 113 ', 'LYS', 0.04361438283132611, (200.47700000000006, 149.266, 109.928)), ('B', ' 123 ', 'ALA', 0.009466764246308768, (220.2500000000001, 169.493, 126.41899999999998)), ('B', ' 600 ', 'PRO', 0.04550577965357067, (192.77700000000002, 149.927, 168.703)), ('B', ' 744 ', 'GLY', 0.060067774800816744, (170.00300000000007, 179.46899999999988, 145.059)), ('C', ' 112 ', 'SER', 0.003947710411659943, (129.403, 125.17, 111.774)), ('C', ' 123 ', 'ALA', 0.04059825972502164, (135.859, 106.025, 128.106)), ('C', ' 536 ', 'ASN', 0.046338380611538776, (119.104, 166.887, 148.461))]
data['omega'] = []
data['rota'] = [('A', ' 132 ', 'GLU', 0.06525665357100396, (145.865, 203.1429999999999, 112.278)), ('A', ' 233 ', 'ILE', 0.08882009767755684, (148.173, 195.099, 119.893)), ('A', ' 331 ', 'ASN', 0.20863987365681247, (191.643, 186.519, 123.498)), ('A', ' 403 ', 'ARG', 0.18524992271838037, (171.361, 156.649, 103.456)), ('A', ' 602 ', 'THR', 0.07329338215608758, (149.456, 195.13199999999998, 166.407)), ('A', ' 801 ', 'ASN', 0.18967649018253868, (136.537, 175.48, 201.293)), ('A', '1072 ', 'GLU', 0.22031494034514001, (162.566, 185.102, 208.461)), ('C', ' 165 ', 'ASN', 0.03152643198164535, (138.876, 125.233, 113.33499999999998)), ('C', ' 403 ', 'ARG', 0.10972713345844967, (154.538, 176.372, 103.549)), ('C', ' 602 ', 'THR', 0.05866032923371726, (135.17, 133.901, 166.871)), ('C', ' 619 ', 'GLU', 0.031805701829320895, (122.19, 157.21, 155.073)), ('C', '1092 ', 'GLU', 0.22618201493114326, (153.869, 159.46899999999994, 216.05099999999996)), ('C', '1113 ', 'GLN', 0.18877647359933727, (148.82099999999988, 152.1, 223.302))]
data['cbeta'] = [('A', ' 369 ', 'TYR', ' ', 0.2709727645441207, (171.553, 176.076, 113.63699999999999)), ('A', ' 571 ', 'ASP', ' ', 0.265277877462089, (180.928, 170.14199999999994, 142.95)), ('A', ' 616 ', 'ASN', ' ', 0.3476164571028001, (178.78500000000008, 194.034, 159.405)), ('C', ' 198 ', 'ASP', ' ', 0.2806245980443214, (145.782, 136.30199999999988, 129.098)), ('C', ' 649 ', 'CYS', ' ', 0.32093931722582814, (124.06200000000011, 154.633, 162.344)), ('C', '1041 ', 'ASP', ' ', 0.263621204710479, (151.02, 154.131, 192.00399999999996))]
data['probe'] = [(' C 599  THR HG22', ' C 601  GLY  H  ', -0.615, (134.336, 138.214, 167.785)), (' A 616  ASN  O  ', ' A 618  THR  N  ', -0.586, (177.778, 196.548, 157.827)), (' B 130  VAL HG11', ' B 233  ILE HD11', -0.544, (200.368, 158.913, 116.512)), (' B 368  LEU HD22', ' B 434  ILE HD11', -0.542, (164.532, 124.186, 106.826)), (' C 644  GLN  OE1', ' C 649  CYS  SG ', -0.541, (122.845, 156.924, 162.999)), (' A  64  TRP  HD1', ' A 266  TYR  CE2', -0.518, (143.425, 214.87, 141.553)), (' A1032  CYS  CB ', ' A1043  CYS  HG ', -0.505, (152.29, 165.898, 192.887)), (' A 165  ASN  HB3', ' A 167  THR HG23', -0.493, (142.876, 198.414, 110.823)), (' C1032  CYS  SG ', ' C1043  CYS  SG ', -0.492, (159.792, 150.975, 192.2)), (' A1032  CYS  HG ', ' A1043  CYS  HB3', -0.485, (152.525, 168.509, 193.658)), (' B  81  ASN  N  ', ' B 265  TYR  HH ', -0.483, (215.42, 148.155, 129.543)), (' A 328  ARG HH11', ' A 580  GLN  HB2', -0.468, (190.672, 189.254, 130.334)), (' A 117  LEU HD23', ' A 130  VAL HG22', -0.462, (142.009, 198.89, 119.86)), (' A 736  VAL HG22', ' A 858  LEU  CD2', -0.45, (143.108, 163.406, 156.944)), (' A1032  CYS  SG ', ' A1043  CYS  SG ', -0.442, (152.749, 166.867, 193.06)), (' A1032  CYS  HG ', ' A1043  CYS  CB ', -0.441, (152.625, 167.9, 193.201)), (' A 736  VAL HG22', ' A 858  LEU HD23', -0.431, (143.253, 163.02, 157.11)), (' A 770  ILE HD12', ' A1015  ALA  CB ', -0.425, (151.063, 159.579, 168.06)), (' A 901  GLN  O  ', ' A 904  TYR  HB2', -0.417, (147.643, 164.956, 206.936)), (' B  28  TYR  HB3', ' B  61  ASN HD22', -0.414, (209.556, 143.31, 143.226)), (' C 394  ASN  H  ', ' C 516  GLU  HG3', -0.41, (136.467, 181.533, 125.978)), (' A 308  VAL  HB ', ' A 602  THR HG23', -0.404, (150.791, 192.852, 164.279))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
