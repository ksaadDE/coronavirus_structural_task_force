# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   2 ', 'SER', 0.01048538108456978, (-49.647, -4.899999999999999, -12.618)), ('B', '   2 ', 'SER', 0.010523442986070844, (-47.48200000000001, -13.399999999999997, -14.626999999999999)), ('C', '   2 ', 'SER', 0.010487978868198279, (-49.83400000000002, -11.224000000000002, -6.217999999999998))]
data['omega'] = []
data['rota'] = [('A', '  10 ', 'LEU', 0.29813430460398155, (-26.327, -7.955, -9.748)), ('A', '  13 ', 'ILE', 0.297957943276917, (-24.784000000000006, -3.122, -11.396)), ('A', '  25 ', 'LYS', 0.0, (-2.8520000000000003, -6.886, -6.7139999999999995)), ('A', '  27 ', 'ILE', 0.12727119822696775, (-1.1860000000000004, -3.4449999999999994, -2.625)), ('A', '  28 ', 'ASP', 0.06246233185647969, (0.8339999999999999, -6.560000000000001, -3.390999999999999)), ('A', '  31 ', 'ASN', 0.0885241100333061, (4.037, -4.784, -0.27)), ('A', '  33 ', 'VAL', 0.00808143931530711, (7.8340000000000005, -2.301, -3.018)), ('A', '  38 ', 'ASN', 0.09585956756427805, (13.602000000000004, -2.642, 3.181999999999999)), ('A', '  41 ', 'LEU', 0.04602888788245054, (17.608, -0.238, 4.493)), ('A', '  42 ', 'ILE', 0.13345380084656314, (19.586, -3.393999999999999, 5.216)), ('A', '  43 ', 'ASP', 0.03641069354665749, (22.466000000000005, -1.542, 3.59)), ('A', '  52 ', 'GLN', 0.0, (31.853000000000005, 3.05, 10.096)), ('A', '  55 ', 'LYS', 0.0, (37.632, 6.283, 13.477)), ('B', '  10 ', 'LEU', 0.2966294575757028, (-28.115, -7.449999999999999, -2.343)), ('B', '  13 ', 'ILE', 0.29819327496228953, (-24.762, -10.932999999999998, -4.599)), ('B', '  25 ', 'LYS', 0.0, (-6.672, -3.1730000000000005, 6.784999999999999)), ('B', '  27 ', 'ILE', 0.12770756994824384, (-3.020000000000001, -0.912, 3.1949999999999994)), ('B', '  28 ', 'ASP', 0.06270972849881455, (-2.815, -0.034, 6.878)), ('B', '  31 ', 'ASN', 0.08849177881619447, (1.2630000000000003, 2.239, 5.7139999999999995)), ('B', '  33 ', 'VAL', 0.00819542560825195, (5.331999999999999, -0.984, 6.809999999999999)), ('B', '  38 ', 'ASN', 0.09568247402447817, (11.117000000000003, 5.198, 7.176999999999999)), ('B', '  41 ', 'LEU', 0.04562992831528714, (15.925, 5.647, 6.693)), ('B', '  42 ', 'ILE', 0.13355702040562556, (16.291, 7.867, 9.748)), ('B', '  43 ', 'ASP', 0.036493046915338945, (19.43, 5.846, 10.407)), ('B', '  52 ', 'GLN', 0.0, (30.713, 10.421999999999999, 8.598)), ('B', '  55 ', 'LYS', 0.0, (37.756, 12.503, 7.441999999999998)), ('C', '  10 ', 'LEU', 0.298251119302627, (-28.358000000000004, -1.229, -6.762)), ('C', '  13 ', 'ILE', 0.2985335830804716, (-27.378000000000007, -1.3989999999999996, -1.521)), ('C', '  25 ', 'LYS', 0.0, (-6.309000000000003, 6.876999999999999, -3.677)), ('C', '  27 ', 'ILE', 0.12775362998587708, (-2.5940000000000007, 2.9909999999999997, -2.119)), ('C', '  28 ', 'ASP', 0.06192551231140838, (-1.468, 5.901, -4.272)), ('C', '  31 ', 'ASN', 0.08842038949152953, (2.9790000000000014, 4.208999999999999, -3.559)), ('C', '  33 ', 'VAL', 0.008106360475763099, (5.194999999999999, 6.974, 0.388)), ('C', '  38 ', 'ASN', 0.09549165015536994, (13.174, 5.057, -1.731)), ('C', '  41 ', 'LEU', 0.04577438514065818, (17.511000000000003, 4.845, 0.4359999999999999)), ('C', '  42 ', 'ILE', 0.13398258442247882, (19.309, 6.614, -2.399)), ('C', '  43 ', 'ASP', 0.036498472506293365, (21.207000000000004, 8.374, 0.371)), ('C', '  52 ', 'GLN', 0.0, (32.923, 5.710000000000001, 3.048)), ('C', '  55 ', 'LYS', 0.0, (39.873, 4.368, 5.326))]
data['cbeta'] = []
data['probe'] = [(' A  27  ILE  HA ', ' C  27  ILE HD11', -0.832, (-1.083, -2.302, -2.831)), (' B  27  ILE HD11', ' C  27  ILE  HA ', -0.829, (-2.433, 2.028, -1.233)), (' A  27  ILE HD11', ' B  27  ILE  HA ', -0.824, (-2.327, -1.361, 2.259)), (' A  44  LEU HD12', ' A  45  GLN  N  ', -0.807, (20.459, 0.332, 7.397)), (' B  44  LEU HD12', ' B  45  GLN  N  ', -0.801, (19.922, 9.218, 6.531)), (' C  44  LEU HD12', ' C  45  GLN  N  ', -0.799, (22.256, 3.869, -0.302)), (' B  41  LEU HD22', ' C  41  LEU  CD2', -0.732, (15.092, 3.772, 2.99)), (' A  41  LEU  CD2', ' C  41  LEU HD22', -0.728, (15.797, 2.095, 2.546)), (' A  27  ILE HD11', ' B  27  ILE  CA ', -0.717, (-3.369, -1.366, 2.052)), (' A  41  LEU HD22', ' B  41  LEU  CD2', -0.715, (15.328, 2.702, 3.807)), (' A  27  ILE  CA ', ' C  27  ILE HD11', -0.709, (-1.365, -2.401, -3.34)), (' B  27  ILE HD11', ' C  27  ILE  CA ', -0.707, (-3.15, 2.03, -1.466)), (' B   9  ASP  O  ', ' B  13  ILE HG23', -0.7, (-27.755, -10.414, -4.646)), (' C   9  ASP  O  ', ' C  13  ILE HG23', -0.691, (-29.845, -1.651, -3.786)), (' A   9  ASP  O  ', ' A  13  ILE HG23', -0.682, (-27.48, -4.855, -12.189)), (' A  30  LEU  O  ', ' A  33  VAL HG12', -0.673, (5.466, -1.264, -1.838)), (' B  30  LEU  O  ', ' B  33  VAL HG12', -0.671, (4.25, -0.004, 4.145)), (' C  30  LEU  O  ', ' C  33  VAL HG12', -0.668, (4.473, 4.243, 0.239)), (' A  10  LEU HD13', ' B  13  ILE  HB ', -0.662, (-25.12, -10.455, -7.508)), (' B  10  LEU HD13', ' C  13  ILE  HB ', -0.656, (-28.137, -4.28, -0.926)), (' A  13  ILE  HB ', ' C  10  LEU HD13', -0.654, (-26.768, -1.588, -10.532)), (' B  10  LEU  HB2', ' C  13  ILE HD13', -0.652, (-27.786, -5.504, -2.869)), (' A  13  ILE HD13', ' C  10  LEU  HB2', -0.65, (-26.527, -2.937, -8.265)), (' A  10  LEU  HB2', ' B  13  ILE HD13', -0.648, (-26.207, -7.925, -7.314)), (' A  54  ILE HD13', ' C  54  ILE  O  ', -0.646, (36.601, 5.032, 5.616)), (' A  54  ILE  O  ', ' B  54  ILE HD13', -0.645, (35.635, 6.05, 11.005)), (' B  16  ILE HD11', ' C  16  ILE HG21', -0.644, (-18.766, -3.658, -1.624)), (' A  16  ILE HD11', ' B  16  ILE HG21', -0.643, (-17.838, -6.023, -5.264)), (' A  37  LEU HD11', ' C  34  ALA  HB1', -0.64, (9.053, 2.166, -1.39)), (' B  54  ILE  O  ', ' C  54  ILE HD13', -0.64, (35.811, 10.366, 6.822)), (' B  34  ALA  HB1', ' C  37  LEU HD11', -0.64, (7.419, 3.701, 3.69)), (' A  16  ILE HG21', ' C  16  ILE HD11', -0.637, (-17.906, -1.634, -5.489)), (' B  16  ILE HD11', ' C  16  ILE HG12', -0.636, (-19.342, -3.183, -2.941)), (' C   8  VAL  O  ', ' C   8  VAL HG13', -0.635, (-33.325, -1.894, -8.418)), (' A  16  ILE HG12', ' C  16  ILE HD11', -0.628, (-18.79, -2.176, -5.693)), (' A  34  ALA  HB1', ' B  37  LEU HD11', -0.625, (8.751, -1.209, 2.59)), (' B   8  VAL  O  ', ' B   8  VAL HG13', -0.624, (-32.871, -8.514, -3.076)), (' C  41  LEU  N  ', ' C  41  LEU HD23', -0.621, (15.927, 4.957, 1.547)), (' A   8  VAL  O  ', ' A   8  VAL HG13', -0.619, (-31.45, -9.809, -11.516)), (' A  41  LEU  N  ', ' A  41  LEU HD23', -0.617, (17.165, 0.405, 2.669)), (' A  41  LEU  O  ', ' A  44  LEU  HG ', -0.615, (19.351, 0.374, 5.627)), (' A  13  ILE HG21', ' C  10  LEU HD22', -0.615, (-28.785, -2.486, -11.093)), (' B  41  LEU  N  ', ' B  41  LEU HD23', -0.615, (15.229, 4.146, 6.011)), (' A  16  ILE HD11', ' B  16  ILE HG12', -0.608, (-18.504, -5.856, -4.503)), (' A  10  LEU HD22', ' B  13  ILE HG21', -0.605, (-27.532, -10.684, -7.425)), (' B  41  LEU  O  ', ' B  44  LEU  HG ', -0.605, (17.424, 6.928, 6.538)), (' B  10  LEU HD22', ' C  13  ILE HG21', -0.604, (-30.409, -4.266, -1.963)), (' C  41  LEU  O  ', ' C  44  LEU  HG ', -0.603, (20.028, 4.271, 0.062)), (' B  41  LEU HD11', ' C  37  LEU HD22', -0.597, (11.882, 5.0, 4.246)), (' A  41  LEU HD11', ' B  37  LEU HD22', -0.589, (12.616, 0.175, 4.777)), (' A  37  LEU HD22', ' C  41  LEU HD11', -0.581, (13.292, 2.225, 0.032)), (' C  38  ASN  HA ', ' C  41  LEU  HG ', -0.579, (14.208, 4.426, -1.048)), (' A  10  LEU HD22', ' B  13  ILE  CG2', -0.579, (-27.248, -10.879, -6.844)), (' B  10  LEU HD22', ' C  13  ILE  CG2', -0.578, (-30.11, -4.017, -1.553)), (' A  38  ASN  HA ', ' A  41  LEU  HG ', -0.572, (14.138, -0.905, 3.546)), (' A  13  ILE  CG2', ' C  10  LEU HD22', -0.569, (-28.749, -2.489, -11.173)), (' B  38  ASN  HA ', ' B  41  LEU  HG ', -0.569, (12.692, 5.279, 5.989)), (' A  37  LEU  O  ', ' A  41  LEU  HG ', -0.568, (14.887, -0.553, 2.446)), (' C  37  LEU  O  ', ' C  41  LEU  HG ', -0.565, (13.823, 5.205, 0.229)), (' B  37  LEU  O  ', ' B  41  LEU  HG ', -0.563, (13.003, 4.134, 5.998)), (' B  41  LEU  CD1', ' C  37  LEU HD22', -0.561, (11.323, 5.399, 3.982)), (' A  37  LEU HD22', ' C  41  LEU  CD1', -0.561, (13.605, 2.242, -0.657)), (' A  41  LEU  CD1', ' B  37  LEU HD22', -0.558, (12.865, 0.008, 4.52)), (' A  16  ILE  O  ', ' A  20  VAL HG23', -0.554, (-14.242, -5.096, -7.458)), (' A  16  ILE HG21', ' C  16  ILE  CD1', -0.55, (-17.787, -1.362, -5.398)), (' B  16  ILE  O  ', ' B  20  VAL HG23', -0.548, (-16.015, -5.098, -0.146)), (' A  16  ILE  CD1', ' B  16  ILE HG21', -0.548, (-17.057, -5.865, -5.49)), (' C  16  ILE  O  ', ' C  20  VAL HG23', -0.548, (-16.205, 1.239, -3.809)), (' A  27  ILE HD13', ' B  26  GLU  HB3', -0.546, (-4.247, -4.145, 1.526)), (' B  16  ILE  CD1', ' C  16  ILE HG21', -0.542, (-18.301, -3.446, -1.614)), (' B  27  ILE HD13', ' C  26  GLU  HB3', -0.536, (-4.712, 2.734, 0.293)), (' B  44  LEU HD23', ' C  44  LEU HD23', -0.532, (18.759, 3.993, 3.66)), (' A  40  SER  O  ', ' C  44  LEU HD22', -0.531, (19.468, 1.512, 2.797)), (' A  26  GLU  HB3', ' C  27  ILE HD13', -0.53, (-3.196, -1.0, -4.61)), (' B  44  LEU HD22', ' C  40  SER  O  ', -0.529, (18.826, 5.991, 2.665)), (' A  41  LEU HD22', ' B  41  LEU HD22', -0.527, (15.18, 3.232, 3.865)), (' A  44  LEU HD22', ' B  40  SER  O  ', -0.527, (18.003, 3.779, 6.861)), (' A  44  LEU  C  ', ' A  44  LEU HD12', -0.525, (21.379, 1.118, 7.426)), (' A  44  LEU HD23', ' B  44  LEU HD23', -0.521, (18.426, 4.02, 4.451)), (' A  44  LEU HD23', ' C  44  LEU HD23', -0.52, (18.498, 3.225, 3.832)), (' B  44  LEU  C  ', ' B  44  LEU HD12', -0.515, (20.358, 8.275, 6.283)), (' A  41  LEU HD22', ' C  41  LEU HD22', -0.515, (15.797, 2.555, 3.426)), (' C  44  LEU  C  ', ' C  44  LEU HD12', -0.512, (22.663, 3.675, 0.427)), (' C  20  VAL  O  ', ' C  23  ILE HG22', -0.494, (-10.795, 1.931, -3.181)), (' A  20  VAL  O  ', ' A  23  ILE HG22', -0.49, (-9.12, -5.101, -5.512)), (' B  41  LEU HD22', ' C  41  LEU HD22', -0.486, (15.747, 3.511, 3.185)), (' B  20  VAL  O  ', ' B  23  ILE HG22', -0.483, (-11.387, -3.376, 1.702)), (' B  42  ILE HG13', ' B  43  ASP  N  ', -0.477, (17.228, 6.2, 10.775)), (' B  39  GLU  O  ', ' B  42  ILE HG13', -0.476, (15.727, 5.515, 10.746)), (' A  42  ILE HG13', ' A  43  ASP  N  ', -0.475, (20.612, -3.279, 3.015)), (' A  39  GLU  O  ', ' A  42  ILE HG13', -0.474, (19.361, -3.628, 2.32)), (' C  39  GLU  O  ', ' C  42  ILE HG13', -0.473, (17.772, 8.489, -1.516)), (' B  27  ILE HD11', ' C  27  ILE  N  ', -0.467, (-3.279, 2.909, -1.023)), (' C  42  ILE HG13', ' C  43  ASP  N  ', -0.462, (19.581, 8.498, -1.076)), (' A  38  ASN  CA ', ' A  41  LEU  HG ', -0.46, (14.384, -1.634, 3.243)), (' B  38  ASN  CA ', ' B  41  LEU  HG ', -0.459, (12.207, 4.943, 6.64)), (' A  27  ILE  N  ', ' C  27  ILE HD11', -0.459, (-2.126, -2.487, -3.344)), (' A  27  ILE HD11', ' B  27  ILE  N  ', -0.455, (-3.401, -2.328, 2.387)), (' C  38  ASN  CA ', ' C  41  LEU  HG ', -0.447, (13.834, 4.668, -0.739)), (' A  39  GLU  O  ', ' A  42  ILE  CG1', -0.434, (19.461, -4.023, 2.72)), (' C  39  GLU  O  ', ' C  42  ILE  CG1', -0.433, (17.798, 8.912, -1.967)), (' B  39  GLU  O  ', ' B  42  ILE  CG1', -0.431, (15.307, 5.963, 11.254)), (' A  38  ASN  O  ', ' A  42  ILE HG23', -0.43, (16.914, -4.055, 3.88)), (' B  38  ASN  O  ', ' B  42  ILE HG23', -0.429, (13.356, 6.457, 9.208)), (' B  44  LEU  CD2', ' C  44  LEU HD23', -0.425, (18.669, 4.613, 3.638)), (' C  33  VAL  O  ', ' C  37  LEU  HG ', -0.424, (8.081, 6.147, 1.478)), (' A  44  LEU  CD2', ' B  44  LEU HD23', -0.423, (18.519, 3.85, 5.288)), (' C  38  ASN  O  ', ' C  42  ILE HG23', -0.421, (16.264, 6.619, -2.894)), (' A  33  VAL  O  ', ' A  37  LEU  HG ', -0.419, (10.299, -0.305, -1.507)), (' B  41  LEU  HB3', ' C  40  SER  CB ', -0.418, (15.301, 7.264, 4.002)), (' A  40  SER  CB ', ' C  41  LEU  HB3', -0.418, (17.256, 2.078, 0.203)), (' A  41  LEU  HB3', ' B  40  SER  CB ', -0.416, (16.057, 0.781, 6.58)), (' A  27  ILE HG12', ' B  30  LEU HD11', -0.416, (-0.339, -3.421, 0.149)), (' B  33  VAL  O  ', ' B  37  LEU  HG ', -0.415, (8.58, -0.187, 5.699)), (' A  30  LEU HD11', ' C  27  ILE HG12', -0.415, (-0.44, 1.161, -3.323)), (' C  27  ILE  CG2', ' C  28  ASP  N  ', -0.414, (-2.504, 3.405, -4.048)), (' A  27  ILE HG12', ' B  30  LEU  CD1', -0.413, (-0.034, -2.977, 0.449)), (' B  27  ILE HG12', ' C  30  LEU HD11', -0.409, (-1.404, 1.707, 2.37)), (' A  27  ILE  CG2', ' A  28  ASP  N  ', -0.409, (-1.358, -5.486, -2.202)), (' B  27  ILE HG12', ' C  30  LEU  CD1', -0.409, (-1.351, 1.709, 2.12)), (' A   4  THR HG23', ' B   3  HIS  HB3', -0.407, (-43.791, -8.015, -14.608)), (' A  44  LEU HD23', ' C  44  LEU  CD2', -0.407, (19.128, 3.007, 3.902)), (' A   4  THR  OG1', ' B   3  HIS  CD2', -0.404, (-45.705, -6.599, -14.992)), (' C  37  LEU  O  ', ' C  41  LEU  CD2', -0.404, (14.449, 4.913, 1.517)), (' B   4  THR HG23', ' C   3  HIS  HB3', -0.404, (-44.325, -12.947, -8.454)), (' B  27  ILE  CG2', ' B  28  ASP  N  ', -0.404, (-4.05, 0.423, 4.543)), (' A   3  HIS  HB3', ' C   4  THR HG23', -0.403, (-45.857, -5.743, -7.67)), (' B   4  THR  OG1', ' C   3  HIS  CD2', -0.403, (-45.212, -14.425, -10.466)), (' A  37  LEU  O  ', ' A  41  LEU  CD2', -0.402, (14.916, 0.163, 2.266))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
