# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 123 ', 'ALA', 0.039710498309744505, (287.38499999999993, 238.55200000000005, 215.006)), ('A', ' 527 ', 'PRO', 0.050068814567068784, (241.29299999999995, 199.703, 209.866)), ('B', ' 123 ', 'ALA', 0.0396158933775485, (208.55699999999996, 175.069, 215.01)), ('B', ' 527 ', 'PRO', 0.00150684, (198.06600000000006, 234.371, 210.35)), ('B', ' 528 ', 'LYS', 0.03364988724587195, (195.44900000000007, 232.38400000000004, 212.28)), ('C', ' 123 ', 'ALA', 0.03955189225306122, (193.116, 275.059, 214.865)), ('C', ' 527 ', 'PRO', 0.0, (249.786, 254.29100000000005, 210.245))]
data['omega'] = []
data['rota'] = [('A', ' 367 ', 'VAL', 0.1651009198455721, (239.595, 206.55900000000005, 201.58399999999997)), ('A', ' 385 ', 'THR', 0.2961160876202071, (239.24799999999993, 212.78000000000006, 210.254)), ('A', ' 914 ', 'ASN', 0.031161142251479555, (244.99300000000005, 234.361, 305.074)), ('B', ' 367 ', 'VAL', 0.16532284960663007, (204.579, 232.51500000000004, 201.68299999999996)), ('B', ' 385 ', 'THR', 0.2876232954169617, (210.361, 229.632, 210.34899999999996)), ('B', ' 914 ', 'ASN', 0.027549935833151074, (225.986, 213.877, 305.083)), ('C', ' 367 ', 'VAL', 0.1649018682980155, (244.688, 249.712, 201.597)), ('C', ' 385 ', 'THR', 0.2908395067166938, (239.381, 246.33900000000006, 210.322)), ('C', ' 914 ', 'ASN', 0.028011186476632303, (217.82700000000006, 240.617, 305.078)), ('L', '   3 ', 'VAL', 0.28216919005545643, (176.62, 225.23600000000002, 179.379)), ('G', '   3 ', 'VAL', 0.28337711132264815, (251.477, 278.82100000000014, 179.578)), ('K', '   3 ', 'VAL', 0.282034319382502, (260.992, 185.946, 179.149))]
data['cbeta'] = []
data['probe'] = [(' B 492  LEU  O  ', ' F  54  ASN  ND2', -0.715, (228.221, 260.312, 190.128)), (' B 522  ALA  HB3', ' B 544  ASN  HB3', -0.711, (200.52, 241.839, 219.265)), (' C 522  ALA  HB3', ' C 544  ASN  HB3', -0.662, (255.244, 248.245, 218.895)), (' A 522  ALA  HB3', ' A 544  ASN  HB3', -0.638, (233.401, 198.096, 219.268)), (' J  30  THR  HA ', ' J  53  PRO  HB2', -0.622, (255.192, 214.104, 182.291)), (' C 492  LEU  O  ', ' J  54  ASN  ND2', -0.606, (257.024, 215.161, 190.12)), (' H  30  THR  HA ', ' H  53  PRO  HB2', -0.591, (203.884, 215.639, 182.555)), (' A 390  LEU HD22', ' B 983  ARG  HG2', -0.588, (233.892, 208.73, 217.314)), (' B 858  LEU HD21', ' B 962  LEU HD23', -0.575, (234.334, 213.895, 244.594)), (' K  63  ARG  NH1', ' K  84  ASP  OD2', -0.572, (234.229, 185.691, 176.963)), (' C 611  LEU HD22', ' C 666  ILE HG23', -0.57, (234.266, 259.229, 256.561)), (' B 611  LEU HD22', ' B 666  ILE HG23', -0.568, (201.631, 219.247, 256.026)), (' A  39  PRO  HG3', ' A  51  THR HG21', -0.568, (260.433, 231.385, 232.574)), (' A 492  LEU  O  ', ' H  54  ASN  ND2', -0.564, (203.839, 213.224, 190.073)), (' F  30  THR  HA ', ' F  53  PRO  HB2', -0.56, (230.032, 259.609, 182.499)), (' A 983  ARG  HG2', ' C 390  LEU HD22', -0.558, (245.423, 243.279, 217.676)), (' L  63  ARG  NH1', ' L  84  ASP  OD2', -0.556, (190.364, 248.031, 176.499)), (' B 336  CYS  HB2', ' B 363  ALA  HB2', -0.555, (201.213, 241.803, 205.165)), (' A 858  LEU HD21', ' A 962  LEU HD23', -0.555, (240.557, 241.126, 244.521)), (' A1028  LYS  O  ', ' A1032  CYS  CB ', -0.545, (237.19, 236.55, 280.3)), (' A 611  LEU HD22', ' A 666  ILE HG23', -0.54, (252.61, 210.568, 256.034)), (' C 858  LEU HD21', ' C 962  LEU HD23', -0.539, (214.228, 233.564, 244.742)), (' C 336  CYS  HB2', ' C 363  ALA  HB2', -0.538, (254.07, 247.577, 205.461)), (' B 328  ARG  NH2', ' B 531  THR  O  ', -0.536, (188.546, 235.754, 221.065)), (' C1028  LYS  O  ', ' C1032  CYS  CB ', -0.533, (219.656, 233.173, 280.534)), (' B1040  VAL HG21', ' C1035  GLY  HA3', -0.532, (219.475, 228.03, 286.562)), (' A1035  GLY  HA3', ' C1040  VAL HG21', -0.532, (232.756, 238.854, 286.537)), (' B1028  LYS  O  ', ' B1032  CYS  CB ', -0.531, (231.696, 219.003, 280.676)), (' A1031  GLU  CD ', ' C1039  ARG  HE ', -0.53, (229.946, 233.558, 280.775)), (' C  39  PRO  HG3', ' C  51  THR HG21', -0.53, (212.69, 255.345, 232.683)), (' B 390  LEU HD22', ' C 983  ARG  HG2', -0.529, (209.402, 236.427, 217.32)), (' A1039  ARG  HE ', ' B1031  GLU  CD ', -0.525, (232.665, 227.194, 280.68)), (' G  63  ARG  NH1', ' G  84  ASP  OD2', -0.523, (265.204, 255.808, 177.015)), (' C 914  ASN  H  ', ' C 914  ASN HD22', -0.523, (219.66, 239.879, 304.351)), (' A 914  ASN  H  ', ' A 914  ASN HD22', -0.521, (243.527, 232.692, 304.619)), (' B 914  ASN  H  ', ' B 914  ASN HD22', -0.517, (225.713, 215.846, 304.374)), (' C 905  ARG  NH1', ' C1035  GLY  O  ', -0.515, (218.103, 232.539, 288.277)), (' A 905  ARG  NH1', ' A1035  GLY  O  ', -0.513, (237.737, 238.126, 288.385)), (' C 914  ASN  N  ', ' C 914  ASN HD22', -0.509, (219.892, 240.404, 304.413)), (' A 336  CYS  HB2', ' A 363  ALA  HB2', -0.509, (233.268, 199.409, 205.581)), (' B1039  ARG  HE ', ' C1031  GLU  CD ', -0.507, (226.003, 228.27, 280.747)), (' C 520  ALA  HB1', ' C 521  PRO  HD2', -0.507, (261.857, 244.106, 220.765)), (' B 914  ASN  N  ', ' B 914  ASN HD22', -0.504, (225.174, 215.833, 304.416)), (' A1028  LYS  O  ', ' A1032  CYS  HB3', -0.503, (237.731, 236.901, 280.701)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.503, (201.183, 250.428, 220.686)), (' A1040  VAL HG21', ' B1035  GLY  HA3', -0.5, (236.103, 222.157, 286.559)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.497, (225.794, 194.819, 220.703)), (' A 914  ASN  N  ', ' A 914  ASN HD22', -0.497, (243.887, 233.169, 304.456)), (' B 196  ASN HD21', ' B 235  ILE HD12', -0.495, (206.287, 199.401, 214.661)), (' A 328  ARG  NH2', ' A 531  THR  O  ', -0.495, (244.996, 191.028, 220.897)), (' A 393  THR HG21', ' A 520  ALA  HB3', -0.492, (225.901, 197.488, 219.85)), (' C 393  THR HG21', ' C 520  ALA  HB3', -0.491, (258.986, 242.423, 219.666)), (' A1002  GLN  NE2', ' B1005  GLN  OE1', -0.488, (233.078, 228.064, 239.49)), (' C1028  LYS  O  ', ' C1032  CYS  HB3', -0.488, (219.283, 232.784, 280.267)), (' B 736  VAL HG22', ' B 858  LEU  HG ', -0.486, (236.813, 214.141, 245.616)), (' B1028  LYS  O  ', ' B1032  CYS  HB3', -0.483, (231.862, 218.804, 280.667)), (' K   4  LEU  HB2', ' K 102  GLY  HA2', -0.482, (256.297, 186.022, 179.555)), (' A1103  PHE  HZ ', ' M   1  NAG  H62', -0.479, (249.039, 217.816, 315.356)), (' C 736  VAL HG22', ' C 858  LEU  HG ', -0.476, (212.49, 231.09, 245.699)), (' A 195  LYS  HE3', ' A 202  LYS  HD2', -0.474, (262.859, 229.459, 221.948)), (' B  39  PRO  HG3', ' B  51  THR HG21', -0.474, (216.316, 201.92, 232.453)), (' F  47  TRP  HZ2', ' F  50  TRP  HD1', -0.473, (239.47, 270.924, 182.734)), (' B 763  LEU HD22', ' B1008  VAL HG21', -0.472, (236.769, 223.931, 245.827)), (' A 389  ASP  HA ', ' A 528  LYS  HE3', -0.471, (240.42, 203.209, 214.213)), (' B1054  GLN  N  ', ' B1061  VAL  O  ', -0.471, (231.772, 209.794, 276.069)), (' C 105  ILE HD11', ' C 241  LEU HD21', -0.471, (208.704, 277.377, 210.296)), (' C 189  LEU  HB2', ' C 210  ILE HD13', -0.47, (201.808, 275.992, 232.101)), (' C 328  ARG  NH2', ' C 531  THR  O  ', -0.469, (255.41, 261.991, 220.978)), (' G   4  LEU  HB2', ' G 102  GLY  HA2', -0.467, (253.894, 274.468, 179.511)), (' B 393  THR HG21', ' B 520  ALA  HB3', -0.465, (203.385, 248.8, 219.895)), (' K  52  GLU  OE1', ' K  55  LYS  HD2', -0.465, (245.983, 196.1, 192.571)), (' H  47  TRP  HZ2', ' H  50  TRP  HD1', -0.465, (189.567, 218.027, 182.755)), (' A 196  ASN HD21', ' A 235  ILE HD12', -0.464, (267.634, 224.447, 214.682)), (' J  47  TRP  HZ2', ' J  50  TRP  HD1', -0.464, (260.248, 200.677, 182.71)), (' C 195  LYS  HE3', ' C 202  LYS  HD2', -0.464, (213.39, 258.735, 222.101)), (' G  37  TRP  CE2', ' G  75  LEU  HB2', -0.464, (258.569, 266.243, 182.884)), (' A 546  LEU HD21', ' A 573  THR  OG1', -0.463, (234.098, 202.109, 228.468)), (' A 736  VAL HG22', ' A 858  LEU  HG ', -0.463, (239.035, 243.437, 245.882)), (' K  37  TRP  CE2', ' K  75  LEU  HB2', -0.463, (246.273, 185.906, 182.486)), (' C 526  GLY  HA3', ' C 527  PRO  HD3', -0.463, (248.164, 250.864, 210.349)), (' G  28  ASP  OD1', ' G  29  VAL  N  ', -0.463, (252.203, 276.295, 188.613)), (' A1094  VAL HG11', ' B 904  TYR  OH ', -0.463, (238.374, 216.377, 300.604)), (' B 273  ARG  HD2', ' B 292  ALA  HB3', -0.462, (204.103, 207.212, 235.836)), (' C 546  LEU HD21', ' C 573  THR  OG1', -0.461, (250.894, 247.151, 228.84)), (' C1103  PHE  HZ ', ' W   1  NAG  H62', -0.461, (230.078, 252.393, 315.147)), (' A 805  ILE HG22', ' A 818  ILE HD12', -0.461, (252.175, 242.487, 279.842)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.46, (260.686, 220.83, 259.697)), (' L  28  ASP  OD1', ' L  29  VAL  N  ', -0.46, (178.575, 227.157, 188.275)), (' A1005  GLN  OE1', ' C1002  GLN  NE2', -0.459, (228.963, 233.515, 239.527)), (' B 195  LYS  HE3', ' B 202  LYS  HD2', -0.458, (212.79, 200.881, 221.903)), (' C 196  ASN HD21', ' C 235  ILE HD12', -0.458, (215.226, 265.02, 215.141)), (' K  28  ASP  OD1', ' K  29  VAL  N  ', -0.458, (258.548, 186.671, 188.099)), (' B 231  ILE HD12', ' B 233  ILE HD12', -0.458, (208.122, 197.823, 209.551)), (' L   4  LEU  HB2', ' L 102  GLY  HA2', -0.456, (179.258, 229.279, 179.246)), (' J  33  TYR  CD2', ' J 105  VAL  HB ', -0.455, (257.509, 204.84, 186.291)), (' B1103  PHE  HZ ', ' R   1  NAG  H62', -0.454, (209.759, 218.582, 315.248)), (' A 273  ARG  HD2', ' A 292  ALA  HB3', -0.453, (261.889, 218.776, 235.918)), (' F  33  TYR  CD2', ' F 105  VAL  HB ', -0.451, (236.825, 266.292, 186.603)), (' B 930  ALA  O  ', ' B 934  ILE HG12', -0.45, (221.775, 204.621, 282.384)), (' C 273  ARG  HD2', ' C 292  ALA  HB3', -0.45, (223.316, 262.892, 236.178)), (' B 715  PRO  HB3', ' B1069  PRO  HB3', -0.449, (213.213, 217.488, 295.181)), (' C 763  LEU HD22', ' C1008  VAL HG21', -0.448, (220.694, 226.089, 246.218)), (' A 421  TYR  CD1', ' A 457  ARG  HB3', -0.447, (204.18, 215.994, 203.29)), (' A 763  LEU HD22', ' A1008  VAL HG21', -0.446, (231.132, 238.886, 246.207)), (' A 904  TYR  OH ', ' C1094  VAL HG11', -0.444, (236.699, 243.897, 300.593)), (' L  52  GLU  OE1', ' L  55  LYS  HD2', -0.444, (193.318, 233.307, 192.239)), (' B 770  ILE  O  ', ' B 774  GLN  HG2', -0.442, (238.948, 219.092, 258.521)), (' C1091  ARG  NH1', ' C1120  THR  O  ', -0.441, (234.921, 233.608, 312.948)), (' L  37  TRP  CE2', ' L  75  LEU  HB2', -0.441, (184.322, 237.854, 182.535)), (' C 231  ILE HD12', ' C 233  ILE HD12', -0.441, (212.852, 264.097, 209.539)), (' A 930  ALA  O  ', ' A 934  ILE HG12', -0.441, (254.775, 235.097, 282.216)), (' A 231  ILE HD12', ' A 233  ILE HD12', -0.44, (267.806, 226.83, 209.975)), (' B 546  LEU HD21', ' B 573  THR  OG1', -0.439, (203.732, 239.257, 228.854)), (' A1054  GLN  N  ', ' A1061  VAL  O  ', -0.439, (245.676, 241.33, 276.431)), (' C  53  ASP  HB3', ' C  55  PHE  CE2', -0.438, (215.306, 258.621, 230.532)), (' C 770  ILE  O  ', ' C 774  GLN  HG2', -0.438, (215.962, 226.416, 258.389)), (' A  53  ASP  HB3', ' A  55  PHE  CE2', -0.438, (262.004, 227.461, 230.562)), (' B 805  ILE HG22', ' B 818  ILE HD12', -0.438, (229.497, 203.482, 280.003)), (' B 905  ARG  NH1', ' B1035  GLY  O  ', -0.437, (233.085, 218.396, 288.502)), (' A 725  GLU  OE2', ' A1028  LYS  HE3', -0.437, (240.256, 231.178, 275.332)), (' B 421  TYR  CD1', ' B 457  ARG  HB3', -0.436, (230.662, 258.538, 203.29)), (' H  29  PHE  CE2', ' H  53  PRO  HB3', -0.434, (202.964, 214.369, 179.617)), (' A  41  LYS  HB2', ' C 519  HIS  O  ', -0.434, (260.521, 240.673, 224.995)), (' C 930  ALA  O  ', ' C 934  ILE HG12', -0.433, (211.8, 248.743, 282.455)), (' B 727  LEU HD11', ' B1028  LYS  HD2', -0.433, (228.493, 218.965, 274.451)), (' B 105  ILE HD11', ' B 241  LEU HD21', -0.433, (198.641, 187.115, 210.801)), (' A 903  ALA  HB1', ' A 913  GLN  HB2', -0.433, (241.764, 237.684, 301.321)), (' L  68  LYS  HA ', ' L  73  ALA  HA ', -0.432, (180.138, 236.495, 188.523)), (' A 715  PRO  HB3', ' A1069  PRO  HB3', -0.432, (248.396, 221.565, 295.217)), (' A 105  ILE HD11', ' A 241  LEU HD21', -0.432, (281.896, 224.13, 210.626)), (' B1094  VAL HG11', ' C 904  TYR  OH ', -0.431, (213.658, 228.745, 301.047)), (' B 295  PRO  HG2', ' B 610  VAL HG21', -0.431, (199.536, 211.378, 247.794)), (' A 715  PRO  HA ', ' A1071  GLN  O  ', -0.431, (250.306, 220.001, 297.8)), (' B 903  ALA  HB1', ' B 913  GLN  HB2', -0.43, (230.21, 214.995, 301.689)), (' F   6  GLN  H  ', ' F 114  GLN HE22', -0.43, (237.196, 258.84, 166.636)), (' C 805  ILE HG22', ' C 818  ILE HD12', -0.43, (207.019, 242.699, 279.916)), (' C 421  TYR  CD1', ' C 457  ARG  HB3', -0.429, (254.146, 214.127, 203.324)), (' C 335  LEU  HA ', ' C 362  VAL  O  ', -0.428, (255.6, 251.61, 205.373)), (' B  53  ASP  HB3', ' B  55  PHE  CE2', -0.427, (211.608, 202.562, 230.518)), (' A 770  ILE  O  ', ' A 774  GLN  HG2', -0.427, (233.978, 242.933, 258.784)), (' A 596  SER  OG ', ' A 613  GLN  OE1', -0.427, (250.243, 214.163, 251.802)), (' F  29  PHE  CE2', ' F  53  PRO  HB3', -0.427, (229.719, 260.46, 179.781)), (' B 725  GLU  OE2', ' B1028  LYS  HE3', -0.426, (225.892, 219.925, 275.228)), (' A 347  PHE  CE1', ' A 509  ARG  HD3', -0.426, (224.302, 206.539, 193.147)), (' A 366  SER  HB2', ' A 388  ASN  ND2', -0.425, (241.373, 207.042, 207.89)), (' B  89  GLY  HA3', ' B 270  LEU HD12', -0.425, (205.334, 200.632, 223.855)), (' B 189  LEU  HB2', ' B 210  ILE HD13', -0.425, (203.48, 182.131, 232.239)), (' A1030  SER  HB3', ' C1041  ASP  HB2', -0.422, (230.211, 240.389, 280.713)), (' B 335  LEU  HA ', ' B 362  VAL  O  ', -0.421, (197.538, 241.106, 205.448)), (' A 189  LEU  HB2', ' A 210  ILE HD13', -0.421, (284.184, 230.499, 232.409)), (' B 802  PHE  HZ ', ' B 898  PHE  CZ ', -0.421, (232.231, 207.104, 290.311)), (' S   1  NAG  H61', ' S   2  NAG  HN2', -0.42, (203.676, 241.119, 322.334)), (' C 725  GLU  OE2', ' C1028  LYS  HE3', -0.42, (222.966, 237.678, 275.32)), (' B 715  PRO  HA ', ' B1071  GLN  O  ', -0.419, (210.845, 216.067, 297.892)), (' H 107  GLY  HA3', ' L  99  TRP  NE1', -0.419, (189.034, 224.439, 185.611)), (' H   6  GLN  H  ', ' H 114  GLN HE22', -0.419, (200.737, 221.552, 166.391)), (' H  33  TYR  CD2', ' H 105  VAL  HB ', -0.419, (194.818, 217.947, 186.2)), (' C 119  ILE HG12', ' C 128  ILE HG12', -0.418, (204.919, 267.271, 212.93)), (' A 699  LEU HD22', ' B 873  TYR  CE2', -0.418, (246.382, 210.95, 272.3)), (' A 802  PHE  HZ ', ' A 898  PHE  CZ ', -0.418, (247.838, 243.169, 290.385)), (' F  36  TRP  CE2', ' F  81  MET  HB2', -0.417, (234.292, 267.764, 173.162)), (' X   1  NAG  H61', ' X   2  NAG  N2 ', -0.417, (252.811, 246.781, 321.729)), (' J   6  GLN  H  ', ' J 114  GLN HE22', -0.416, (250.772, 208.482, 166.503)), (' C 578  ASP  HB3', ' C 581  THR  O  ', -0.415, (261.759, 256.706, 225.462)), (' C 206  LYS  HB2', ' C 223  LEU  HA ', -0.414, (203.264, 264.653, 229.911)), (' B 981  LEU HD21', ' B 993  ILE HD11', -0.414, (239.896, 216.975, 224.278)), (' C 726  ILE HG12', ' C1061  VAL HG22', -0.414, (214.13, 241.37, 271.914)), (' A 362  VAL HG13', ' A 526  GLY  O  ', -0.413, (238.42, 198.451, 209.942)), (' A 131  CYS  HB2', ' A 133  PHE  CE2', -0.413, (275.664, 228.323, 203.441)), (' C 131  CYS  HB2', ' C 133  PHE  CE2', -0.413, (207.737, 270.146, 203.741)), (' A 578  ASP  HB3', ' A 581  THR  O  ', -0.412, (237.086, 188.177, 225.521)), (' J  36  TRP  CE2', ' J  81  MET  HB2', -0.412, (259.704, 206.397, 173.103)), (' J 107  GLY  HA3', ' K  99  TRP  NE1', -0.412, (255.226, 196.953, 185.517)), (' B 347  PHE  CE1', ' B 509  ARG  HD3', -0.412, (212.276, 245.666, 193.295)), (' A 115  GLN  NE2', ' C 468  ILE HD11', -0.412, (266.47, 223.892, 200.738)), (' C1102  TRP  HB2', ' C1135  ASN  ND2', -0.411, (237.783, 247.757, 315.3)), (' B 578  ASP  HB3', ' B 581  THR  O  ', -0.411, (189.945, 243.777, 225.519)), (' N   1  NAG  H61', ' N   2  NAG  HN2', -0.41, (232.539, 201.422, 322.321)), (' A 363  ALA  O  ', ' A 526  GLY  HA2', -0.41, (237.325, 201.283, 208.775)), (' H  36  TRP  CE2', ' H  81  MET  HB2', -0.41, (194.433, 215.376, 173.279)), (' C1028  LYS  O  ', ' C1032  CYS  HB2', -0.41, (220.141, 232.819, 280.738)), (' A 826  VAL  HB ', ' A1057  PRO  HG2', -0.41, (250.76, 242.158, 264.946)), (' J  29  PHE  CE2', ' J  53  PRO  HB3', -0.408, (256.111, 214.071, 179.714)), (' A 820  ASP  OD1', ' A 824  ASN  ND2', -0.408, (257.428, 246.922, 269.363)), (' C 115  GLN  NE2', ' C 132  GLU  OE2', -0.408, (216.381, 266.151, 200.399)), (' B 363  ALA  O  ', ' B 526  GLY  HA2', -0.408, (201.387, 237.359, 208.797)), (' A 873  TYR  CE2', ' C 699  LEU HD22', -0.408, (237.312, 253.851, 272.29)), (' A 119  ILE HG12', ' A 128  ILE HG12', -0.408, (274.661, 232.258, 212.967)), (' B 699  LEU HD22', ' C 873  TYR  CZ ', -0.407, (204.822, 223.833, 272.652)), (' B 310  LYS  HG3', ' B 600  PRO  HA ', -0.407, (206.699, 207.272, 260.021)), (' A 699  LEU HD22', ' B 873  TYR  CZ ', -0.406, (247.04, 210.887, 272.601)), (' A 976  VAL HG12', ' A 979  ASP  H  ', -0.406, (244.001, 244.117, 226.234)), (' C 715  PRO  HB3', ' C1069  PRO  HB3', -0.406, (227.254, 250.021, 295.64)), (' C 802  PHE  HZ ', ' C 898  PHE  CZ ', -0.404, (208.786, 238.676, 290.414)), (' A 981  LEU HD21', ' A 993  ILE HD11', -0.404, (235.321, 244.513, 224.541)), (' C 347  PHE  CE1', ' C 509  ARG  HD3', -0.403, (252.275, 236.251, 193.258)), (' K  37  TRP  CD2', ' K  75  LEU  HB2', -0.403, (246.149, 186.093, 182.395)), (' C 666  ILE HD11', ' C 672  ALA  HB2', -0.403, (231.915, 262.282, 259.629)), (' B 119  ILE HG12', ' B 128  ILE HG12', -0.403, (209.729, 188.924, 212.987)), (' A 335  LEU  HA ', ' A 362  VAL  O  ', -0.403, (236.001, 195.852, 205.281)), (' B 131  CYS  HB2', ' B 133  PHE  CE2', -0.402, (205.658, 190.385, 203.515)), (' B1041  ASP  HB2', ' C1030  SER  HB3', -0.402, (219.89, 225.228, 280.813)), (' B 976  VAL HG12', ' B 979  ASP  H  ', -0.402, (234.936, 209.926, 226.267)), (' B 439  ASN  HA ', ' B 507  PRO  HG2', -0.401, (219.67, 243.221, 186.655)), (' G  68  LYS  HA ', ' G  73  ALA  HA ', -0.401, (259.641, 270.561, 188.975)), (' A 458  LYS  HA ', ' A 458  LYS  HD3', -0.401, (197.981, 217.122, 204.453)), (' G  37  TRP  CD2', ' G  75  LEU  HB2', -0.401, (258.851, 265.922, 182.647)), (' K  68  LYS  HA ', ' K  73  ALA  HA ', -0.401, (249.843, 183.018, 188.665))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
