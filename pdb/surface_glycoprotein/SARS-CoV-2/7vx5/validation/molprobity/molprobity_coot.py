# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (141.801, 227.905, 294.307))]
data['rota'] = [('E', ' 493 ', 'GLN', 0.2613955045481333, (157.265, 190.34800000000007, 268.545))]
data['cbeta'] = []
data['probe'] = [(' A 353  LYS  HA ', ' E 505  TYR  CE2', -0.9, (159.593, 205.167, 269.719)), (' A 353  LYS  HA ', ' E 505  TYR  CZ ', -0.696, (160.07, 204.66, 270.435)), (' A  19  SER  N  ', ' A  23  GLU  OE1', -0.68, (174.482, 180.984, 276.946)), (' A 394  ASN  OD1', ' A 395  GLY  N  ', -0.672, (165.389, 210.308, 284.84)), (' A 152  MET  O  ', ' A 161  ARG  NH1', -0.67, (149.838, 237.025, 301.846)), (' A 190  MET  O  ', ' A 194  ASN  ND2', -0.67, (160.407, 197.072, 301.338)), (' A 308  PHE  HE2', ' A 333  LEU HD22', -0.639, (153.22, 225.264, 273.982)), (' A 353  LYS  CA ', ' E 505  TYR  CE2', -0.634, (159.192, 206.207, 270.241)), (' A 119  ILE HG22', ' A 123  MET  HE2', -0.626, (148.005, 207.358, 303.952)), (' A 285  PHE  HB2', ' A 437  ASN HD21', -0.624, (165.623, 249.244, 292.013)), (' E 342  PHE  HE1', ' E 511  VAL HG11', -0.623, (159.73, 198.17, 245.304)), (' A  80  ALA  O  ', ' A 101  GLN  NE2', -0.62, (166.988, 189.339, 289.142)), (' A 117  ASN  O  ', ' A 121  ASN  ND2', -0.608, (145.221, 204.205, 297.937)), (' A 524  GLN  NE2', ' A 580  ASN  H  ', -0.608, (178.234, 220.968, 293.713)), (' A  38  ASP  O  ', ' A  42  GLN  HG2', -0.599, (150.73, 200.548, 274.723)), (' A 378  HIS  HE1', ' A 402  GLU  HA ', -0.593, (163.121, 219.427, 285.365)), (' A 430  GLU  OE1', ' A 541  LYS  NZ ', -0.587, (173.87, 243.981, 281.797)), (' A 524  GLN HE22', ' A 580  ASN  H  ', -0.57, (178.367, 220.755, 293.704)), (' A 245  ARG  NH2', ' A 603  PHE  O  ', -0.56, (168.614, 241.033, 312.311)), (' A  47  SER  O  ', ' A  51  ASN  ND2', -0.554, (146.626, 213.392, 281.541)), (' A 144  LEU HD12', ' A 148  LEU  HB2', -0.554, (144.216, 227.701, 300.436)), (' A 578  ASN  OD1', ' A 579  MET  N  ', -0.554, (179.963, 217.045, 296.435)), (' A  35  GLU  OE2', ' E 493  GLN  NE2', -0.537, (156.706, 190.866, 272.631)), (' E 431  GLY  HA2', ' E 515  PHE  HD2', -0.534, (170.641, 196.394, 242.761)), (' A 145  GLU  OE1', ' A 149  ASN  ND2', -0.534, (146.728, 226.969, 295.506)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.531, (155.713, 198.769, 254.495)), (' A 353  LYS  C  ', ' E 505  TYR  CD2', -0.526, (158.908, 206.831, 269.589)), (' E 437  ASN  HA ', ' E 508  TYR  HD1', -0.522, (157.867, 205.912, 255.595)), (' E 351  TYR  HE1', ' E 452  ARG  HB2', -0.516, (155.121, 189.125, 262.604)), (' E 418  ILE  HA ', ' E 422  ASN HD22', -0.514, (165.763, 192.302, 261.902)), (' A 526  GLN  HG3', ' A 539  LEU HD11', -0.512, (176.044, 230.775, 285.283)), (' A 353  LYS  C  ', ' E 505  TYR  CE2', -0.511, (159.82, 206.619, 269.802)), (' A 315  PHE  CD1', ' A 380  GLN  HG3', -0.507, (166.584, 222.976, 274.355)), (' A 526  GLN  NE2', ' A 530  CYS  SG ', -0.506, (175.219, 230.759, 282.658)), (' A 131  LYS  HB3', ' A 143  LEU HD23', -0.506, (137.346, 222.748, 300.561)), (' A 482  ARG  NH2', ' A 489  GLU  OE2', -0.502, (156.856, 228.509, 319.363)), (' E 377  PHE  HD1', ' E 434  ILE HG12', -0.497, (164.553, 204.025, 245.611)), (' A 392  LEU HD22', ' A 563  SER  HA ', -0.497, (171.403, 203.172, 282.868)), (' E 498  GLN  H  ', ' E 501  ASN  ND2', -0.497, (153.017, 204.006, 266.606)), (' A 504  PHE  O  ', ' A 508  ASN  ND2', -0.494, (150.455, 215.808, 298.751)), (' A  34  HIS  CD2', ' E 453  TYR  OH ', -0.49, (161.672, 195.677, 269.667)), (' A 524  GLN  HB3', ' A 574  VAL HG11', -0.489, (177.987, 222.131, 288.65)), (' A 368  ASP  O  ', ' A 372  ALA  N  ', -0.487, (157.421, 229.611, 279.627)), (' A 580  ASN  OD1', ' A 581  VAL  N  ', -0.483, (179.573, 223.809, 296.912)), (' E 452  ARG  HA ', ' E 494  SER  HA ', -0.483, (155.514, 192.45, 265.044)), (' A 455  MET  SD ', ' A 481  LYS  HD2', -0.483, (160.364, 224.586, 309.934)), (' E 438  SER  HB3', ' E 509  ARG  HG3', -0.482, (154.883, 201.711, 254.321)), (' E 437  ASN  HA ', ' E 508  TYR  CD1', -0.477, (158.291, 206.115, 256.08)), (' A 396  ALA  HB3', ' A 400  PHE  HD2', -0.477, (172.153, 212.968, 286.326)), (' A 524  GLN  HG2', ' A 583  PRO  HG2', -0.476, (178.595, 224.317, 291.172)), (' E 446  GLY  CA ', ' E 498  GLN HE21', -0.475, (146.384, 202.253, 269.361)), (' A 273  ARG HH12', ' A 505  HIS  CE1', -0.471, (155.907, 220.967, 296.005)), (' A 382  ASP  HA ', ' A 385  TYR  CE2', -0.471, (165.395, 212.184, 278.559)), (' A  57  GLU  O  ', ' A  61  ASN  ND2', -0.471, (137.352, 206.329, 278.867)), (' E 497  PHE  CE1', ' E 507  PRO  HB3', -0.471, (155.698, 200.833, 261.406)), (' E 446  GLY  HA2', ' E 498  GLN HE21', -0.462, (146.55, 202.809, 270.016)), (' A 535  HIS  CD2', ' A 542  CYS  HA ', -0.458, (177.32, 236.027, 280.622)), (' E 425  LEU HD21', ' E 512  VAL HG11', -0.455, (168.188, 193.841, 250.025)), (' A 144  LEU  HA ', ' A 148  LEU  HB2', -0.455, (143.356, 227.274, 300.407)), (' A  24  GLN HE21', ' E 476  GLY  HA3', -0.453, (169.551, 179.28, 280.209)), (' A 290  ASN  OD1', ' A 291  ILE  N  ', -0.452, (161.255, 244.132, 286.334)), (' A 458  LYS  HG2', ' A 462  MET  HE2', -0.451, (166.05, 216.523, 311.479)), (' A 389  PRO  O  ', ' A 393  ARG  HG3', -0.451, (165.978, 203.661, 278.555)), (' A 394  ASN  HB3', ' A 562  LYS  HD2', -0.451, (166.49, 207.106, 285.33)), (' E 404  GLY  HA2', ' E 508  TYR  CD2', -0.45, (162.199, 204.517, 259.146)), (' A 450  LEU HD11', ' A 519  THR HG21', -0.447, (169.618, 226.799, 296.54)), (' E 377  PHE  CD1', ' E 434  ILE HG12', -0.445, (164.814, 203.719, 245.364)), (' A 381  TYR  OH ', ' A 395  GLY  HA2', -0.444, (168.58, 212.627, 283.538)), (' A 304  ALA  HA ', ' A 307  ILE HD12', -0.443, (152.149, 231.809, 273.388)), (' A 284  PRO  HG3', ' A 440  LEU HD13', -0.438, (166.219, 243.504, 297.537)), (' A 207  TYR  HD2', ' A 222  LEU HD22', -0.437, (170.53, 211.573, 298.718)), (' E 447  GLY  HA2', ' E 497  PHE  O  ', -0.434, (149.268, 201.854, 265.907)), (' A 460  ARG HH21', ' A 506  VAL HG22', -0.433, (156.41, 216.148, 303.197)), (' A  42  GLN  HA ', ' A  42  GLN  OE1', -0.432, (148.366, 202.817, 274.907)), (' E 404  GLY  HA3', ' E 504  GLY  O  ', -0.431, (161.873, 205.282, 261.889)), (' A 161  ARG  NH2', ' A 268  GLY  H  ', -0.431, (153.331, 235.772, 303.698)), (' A 343  VAL HG12', ' A 345  HIS  H  ', -0.43, (147.198, 221.33, 285.573)), (' A 396  ALA  HB3', ' A 400  PHE  CD2', -0.426, (172.125, 213.369, 286.775)), (' A 237  TYR  CE1', ' A 451  PRO  HG2', -0.426, (166.52, 230.493, 304.469)), (' E 347  PHE  CE2', ' E 509  ARG  HD3', -0.425, (154.478, 198.992, 251.768)), (' E 446  GLY  C  ', ' E 498  GLN HE21', -0.425, (146.886, 202.225, 269.559)), (' A 305  GLN  O  ', ' A 309  LYS  HG2', -0.424, (156.13, 229.278, 267.601)), (' E 344  ALA  HB3', ' E 347  PHE  HE1', -0.423, (152.826, 196.481, 248.234)), (' A 227  GLU  O  ', ' A 231  GLU  HG2', -0.422, (176.2, 221.861, 307.351)), (' A 103  ASN HD21', ' A 107  VAL  HB ', -0.422, (159.156, 192.553, 298.607)), (' E 453  TYR  HB3', ' E 495  TYR  CE2', -0.419, (159.364, 194.034, 263.1)), (' E 490  PHE  CE2', ' E 492  LEU  HB2', -0.419, (155.983, 185.41, 267.593)), (' A 308  PHE  CE2', ' A 333  LEU HD22', -0.418, (153.674, 225.037, 273.717)), (' A 450  LEU  HB2', ' A 451  PRO  HD3', -0.417, (167.546, 227.986, 301.591)), (' A 460  ARG  NH2', ' A 506  VAL  HA ', -0.41, (155.644, 215.027, 302.607)), (' A 525  PHE  CZ ', ' A 557  MET  HE1', -0.41, (173.615, 218.436, 284.475)), (' A 485  VAL HG12', ' A 487  VAL HG23', -0.408, (162.081, 230.225, 308.555)), (' E 392  PHE  CD2', ' E 515  PHE  HB3', -0.406, (171.079, 194.317, 238.197))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
