# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 571 ', 'ASP', 0.03324629576775366, (136.632, 157.202, 142.844)), ('A', ' 603 ', 'ASN', 0.019241997393421202, (158.639, 121.803, 168.492)), ('B', ' 134 ', 'GLN', 0.037555677432893945, (117.98700000000002, 185.614, 108.041)), ('B', ' 353 ', 'TRP', 0.0010923670037432283, (182.275, 170.33899999999994, 109.501)), ('B', ' 603 ', 'ASN', 0.01328526297416135, (127.37900000000002, 176.908, 165.496)), ('C', ' 198 ', 'ASP', 0.02069941213808288, (186.197, 173.032, 125.259)), ('C', ' 429 ', 'PHE', 0.0492150800152549, (163.889, 139.667, 123.962)), ('C', ' 744 ', 'GLY', 0.044743115892527156, (156.144, 178.71799999999993, 143.86))]
data['omega'] = []
data['rota'] = [('A', '  62 ', 'VAL', 0.2699988903277823, (151.724, 109.96199999999997, 141.044)), ('A', '  81 ', 'ASN', 0.11334102922871947, (153.687, 101.85399999999997, 128.344)), ('A', ' 188 ', 'ASN', 0.1946461587304804, (167.428, 101.60099999999997, 142.673)), ('A', ' 418 ', 'ILE', 0.14966499869179542, (147.737, 173.10499999999993, 109.854)), ('A', ' 422 ', 'ASN', 0.03613027554595322, (142.702, 175.18899999999994, 110.938)), ('A', ' 437 ', 'ASN', 0.032373916400816986, (147.804, 158.494, 100.755)), ('A', ' 465 ', 'GLU', 0.0, (137.286, 175.42, 116.521)), ('A', ' 517 ', 'LEU', 0.14578511535449507, (134.636, 158.513, 126.713)), ('A', ' 603 ', 'ASN', 0.16899738460632377, (158.639, 121.803, 168.492)), ('A', ' 615 ', 'VAL', 0.179379135970458, (134.50600000000006, 137.07699999999997, 157.773)), ('A', ' 760 ', 'CYS', 0.10161401835579605, (172.867, 161.037, 151.183)), ('A', '1004 ', 'LEU', 0.08992165094374335, (167.34800000000007, 153.571, 152.477)), ('B', ' 227 ', 'VAL', 0.27078710326565614, (122.293, 169.24899999999994, 125.916)), ('B', ' 454 ', 'ARG', 0.10046175799863057, (186.273, 158.214, 108.859)), ('B', ' 516 ', 'GLU', 0.047911689672701624, (175.151, 179.03899999999996, 124.937)), ('B', ' 603 ', 'ASN', 0.09651825814082632, (127.37900000000002, 176.908, 165.496)), ('B', ' 721 ', 'SER', 0.2134274832616037, (138.714, 167.53599999999997, 195.792)), ('B', ' 760 ', 'CYS', 0.08431209526574036, (154.872, 145.563, 151.112)), ('B', '1004 ', 'LEU', 0.07996149121930003, (150.907, 154.015, 152.22)), ('C', '  84 ', 'LEU', 0.1606487480633562, (206.37600000000006, 175.34, 129.322)), ('C', ' 328 ', 'ARG', 0.015014702611250189, (188.771, 135.253, 132.589)), ('C', ' 523 ', 'THR', 0.16862594825702248, (180.758, 129.23199999999994, 125.13199999999999)), ('C', ' 546 ', 'LEU', 0.24240017594724608, (180.633, 139.337, 135.236)), ('C', ' 615 ', 'VAL', 0.20410177544433272, (190.333, 149.136, 158.849)), ('C', '1004 ', 'LEU', 0.17135453113222932, (159.315, 167.987, 152.088)), ('C', '1128 ', 'VAL', 0.21192446242960403, (168.624, 137.275, 219.511))]
data['cbeta'] = [('A', ' 391 ', 'CYS', ' ', 0.28756400524076575, (131.079, 150.901, 124.18299999999999)), ('B', ' 166 ', 'CYS', ' ', 0.3067176772108321, (120.362, 173.74799999999993, 108.888)), ('B', ' 391 ', 'CYS', ' ', 0.2589986784958214, (167.911, 185.86399999999995, 123.865)), ('B', ' 745 ', 'ASP', ' ', 0.26079466705067905, (141.48, 141.991, 143.279))]
data['probe'] = [(' B 131  CYS  HB3', ' B 165  ASN  C  ', -0.714, (122.8, 176.315, 107.413)), (' B 131  CYS  HB3', ' B 165  ASN  O  ', -0.566, (122.986, 176.641, 108.119)), (' B 391  CYS  HB2', ' B 525  CYS  HA ', -0.548, (168.296, 185.917, 121.942)), (' C 391  CYS  HB2', ' C 525  CYS  HA ', -0.532, (181.186, 135.82, 124.419)), (' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.463, (130.66, 150.834, 122.912)), (' A 391  CYS  CB ', ' A 525  CYS  HA ', -0.425, (130.828, 150.538, 122.541)), (' A1072  GLU  HG2', ' B 894  LEU HD22', -0.407, (147.237, 139.51, 204.929))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
