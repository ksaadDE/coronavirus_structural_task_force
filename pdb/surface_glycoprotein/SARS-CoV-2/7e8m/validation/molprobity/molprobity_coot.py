# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 151 ', 'PRO', None, (-74.58199999999994, 2.643, 49.965)), ('H', ' 153 ', 'PRO', None, (-77.074, -0.459, 45.274)), ('L', '   8 ', 'PRO', None, (-70.49, 10.434, 14.309000000000001)), ('L', ' 141 ', 'PRO', None, (-86.432, 13.15900000000001, 19.621))]
data['rota'] = [('E', ' 358 ', 'ILE', 0.04446778290448704, (-13.884999999999998, -0.171, 12.77)), ('E', ' 367 ', 'VAL', 0.14779263617852784, (-16.504999999999985, 16.208999999999996, 10.891)), ('E', ' 375 ', 'SER', 0.24799269239130298, (-31.866, 15.317, 14.001)), ('E', ' 390 ', 'LEU', 0.09004954430240696, (-9.004999999999994, 9.937, 22.402)), ('E', ' 393 ', 'THR', 0.06725095487547102, (-9.169, -0.589, 20.927)), ('E', ' 452 ', 'LEU', 0.1676213981913719, (-39.51599999999997, -4.996, 10.303)), ('E', ' 503 ', 'VAL', 0.24800006495085936, (-42.938, 12.126, 11.583)), ('H', '  27 ', 'ILE', 0.24339932767270764, (-53.82299999999999, -17.582000000000004, 27.617)), ('H', '  28 ', 'THR', 0.019868455696108775, (-50.63699999999999, -17.236, 29.679999999999996)), ('H', '  64 ', 'LYS', 0.14546751237074546, (-49.03799999999996, 7.192, 37.432)), ('H', '  88 ', 'GLU', 0.15548508671226396, (-62.767999999999994, 9.585000000000008, 40.228)), ('H', ' 112 ', 'THR', 0.0062399883331652195, (-66.43799999999999, -2.669, 40.273)), ('H', ' 120 ', 'THR', 0.056708073358851196, (-74.004, 3.3720000000000003, 54.61)), ('L', '  29 ', 'VAL', 0.007620959923583759, (-50.82899999999999, 7.047, 11.763)), ('L', '  34 ', 'LEU', 0.1100085015929496, (-56.50599999999999, 0.645, 14.549000000000001)), ('L', '  57 ', 'THR', 0.17104675338332778, (-63.123999999999995, -14.222000000000001, 14.677)), ('L', '  91 ', 'GLN', 0.0, (-55.26400000000002, 3.1230000000000007, 18.452)), ('L', ' 104 ', 'LEU', 0.09833530051463978, (-76.051, 3.813, 17.636)), ('L', ' 185 ', 'ASP', 0.03139240036375585, (-84.256, 29.575, 50.307))]
data['cbeta'] = [('E', ' 464 ', 'PHE', ' ', 0.26191843968341505, (-24.499999999999996, -5.464, 22.303)), ('E', ' 481 ', 'ASN', ' ', 0.29567304238948783, (-46.13699999999999, -27.783, 16.299)), ('E', ' 487 ', 'ASN', ' ', 0.2581084331810198, (-52.422, -18.805, 21.892)), ('H', '  28 ', 'THR', ' ', 0.3447270113156232, (-49.45299999999999, -18.222000000000005, 29.678)), ('H', ' 100 ', 'VAL', ' ', 0.2845507891349972, (-49.739999999999995, -4.75, 19.732)), ('H', ' 112 ', 'THR', ' ', 0.328028906839494, (-67.961, -2.502, 40.173)), ('H', ' 120 ', 'THR', ' ', 0.2732086950991033, (-73.989, 1.853, 54.796))]
data['probe'] = [(' L 161  GLU  OE2', ' L 301  HOH  O  ', -0.784, (-81.701, 19.105, 30.652)), (' L  27  GLN  NE2', ' L 303  HOH  O  ', -0.734, (-51.959, 14.319, 17.826)), (' L  27  GLN  NE2', ' L 304  HOH  O  ', -0.542, (-49.47, 13.575, 18.019)), (' L 145  LYS  HB3', ' L 197  THR  HB ', -0.515, (-84.858, 23.35, 25.462)), (' L   4  LEU HD11', ' L  91  GLN  HB3', -0.474, (-56.439, 5.153, 18.1)), (' L  13  ILE HG22', ' L  14  SER  H  ', -0.464, (-81.317, 2.858, 10.249)), (' H  88  GLU  CD ', ' H  88  GLU  H  ', -0.463, (-61.713, 10.691, 41.775)), (' L  13  ILE HG22', ' L  14  SER  N  ', -0.463, (-81.594, 2.632, 10.847)), (' L  91  GLN  HB2', ' L  91  GLN HE21', -0.454, (-55.204, 4.182, 16.161)), (' H  20  LEU  HG ', ' H  82  MET  HE2', -0.449, (-58.074, -2.736, 41.776)), (' E 390  LEU  HA ', ' E 390  LEU HD12', -0.443, (-7.982, 9.713, 23.748)), (' L  13  ILE  CG2', ' L  17  GLU  HB2', -0.424, (-80.105, 2.399, 8.924)), (' E 505  TYR  CE1', ' L  29  VAL HG22', -0.423, (-49.563, 6.445, 14.72)), (' H  61  ASP  OD1', ' H  64  LYS  NZ ', -0.421, (-48.002, 9.433, 32.087)), (' L 183  LYS  HE3', ' L 187  GLU  OE2', -0.419, (-89.858, 26.758, 56.046)), (' L  13  ILE HD13', ' L  13  ILE HG21', -0.419, (-78.299, 3.17, 9.581)), (' E 520  ALA  HB1', ' E 521  PRO  HD2', -0.412, (-5.116, -5.341, 22.295)), (' H  82  MET  HE1', ' H 113  VAL HG21', -0.409, (-60.586, -1.058, 41.98)), (' L  16  GLY  O  ', ' L  78  ARG  NH1', -0.405, (-81.162, -2.862, 5.403)), (' H  64  LYS  HB2', ' H  64  LYS  HE3', -0.405, (-49.025, 8.394, 34.896))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
