# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 235 ', 'ILE', 0.048457732460446754, (147.493, 196.836, 165.331)), ('E', ' 103 ', 'LEU', 0.028658489054372963, (202.85899999999995, 163.579, 145.576)), ('H', ' 103 ', 'LEU', 0.019735955798419705, (164.704, 173.7, 144.82)), ('J', ' 103 ', 'LEU', 0.027224471381054934, (188.016, 223.53399999999993, 139.166)), ('L', '  27 ', 'GLN', 0.04481853440214315, (172.67199999999994, 183.74499999999995, 123.454))]
data['omega'] = [('F', '   8 ', 'PRO', None, (206.78399999999993, 165.70700000000005, 112.088)), ('K', '   8 ', 'PRO', None, (182.72, 250.35399999999996, 119.44200000000001)), ('L', '   8 ', 'PRO', None, (169.727, 168.09100000000007, 111.973))]
data['rota'] = [('A', ' 342 ', 'THR', 0.02984408454670492, (196.322, 224.599, 136.803)), ('A', ' 599 ', 'THR', 0.24622795565302572, (151.72499999999994, 199.19, 208.04000000000002)), ('A', ' 757 ', 'CYS', 0.22610392696789547, (181.983, 169.065, 195.398)), ('B', ' 530 ', 'LEU', 0.055709379317839376, (222.819, 165.05699999999996, 181.282)), ('B', ' 735 ', 'CYS', 0.1386473480085503, (176.808, 196.52299999999997, 193.312)), ('B', ' 911 ', 'ASN', 0.2174857074396479, (192.41599999999994, 201.787, 257.386)), ('B', '1079 ', 'CYS', 0.04883870510526779, (200.16099999999994, 177.132, 270.472)), ('C', ' 537 ', 'ASN', 0.12393304314611434, (160.934, 159.69899999999996, 182.581)), ('C', ' 735 ', 'CYS', 0.0, (200.15, 182.68599999999995, 194.357)), ('C', ' 945 ', 'LEU', 0.02435209713659796, (195.14599999999993, 169.49499999999995, 219.05599999999998)), ('C', '1001 ', 'LEU', 0.10089529020787635, (193.28499999999994, 179.49799999999996, 196.266)), ('C', '1091 ', 'VAL', 0.22758587898732627, (174.83199999999994, 176.73399999999998, 259.402)), ('H', '  27 ', 'HIS', 0.19060193877697496, (151.682, 168.783, 142.532)), ('H', ' 111 ', 'TRP', 0.28265530778654013, (152.142, 166.64699999999993, 129.549)), ('L', '  29 ', 'VAL', 0.05975141985274119, (170.73699999999994, 179.27599999999998, 128.195)), ('L', '  99 ', 'PHE', 0.20010541507806862, (160.84399999999997, 176.229, 121.11800000000001)), ('J', '  27 ', 'HIS', 0.11356368143381923, (196.1909999999999, 232.07699999999997, 146.632)), ('J', ' 111 ', 'TRP', 0.2553825022172576, (195.488, 243.168, 139.585)), ('K', '  99 ', 'PHE', 0.1980528251280188, (193.99999999999994, 241.55, 124.32599999999998)), ('E', '  27 ', 'HIS', 0.020311008886898903, (214.004, 154.965, 145.039)), ('E', '  33 ', 'TRP', 0.2588405969845268, (206.309, 151.885, 138.857)), ('E', ' 111 ', 'TRP', 0.2499250070445342, (216.345, 154.391, 132.155)), ('F', '  99 ', 'PHE', 0.20272680531391182, (204.10599999999994, 155.27, 122.88500000000002))]
data['cbeta'] = []
data['probe'] = [(' F 108  LYS  O  ', ' F 109  ARG  HG3', -1.19, (221.265, 170.826, 104.262)), (' F 108  LYS  O  ', ' F 109  ARG  CG ', -1.145, (221.977, 171.127, 103.915)), (' B 559  PHE  O  ', ' C  41  LYS  NZ ', -0.881, (206.972, 150.495, 182.047)), (' A 306  GLU  N  ', ' A 306  GLU  OE1', -0.842, (156.384, 195.327, 208.008)), (' C 808  LYS  NZ ', ' C 817  ASP  OD2', -0.84, (211.341, 163.442, 228.773)), (' A 663  ILE HD11', ' A 669  ALA  HB2', -0.764, (163.491, 209.574, 210.466)), (' B 306  GLU  N  ', ' B 306  GLU  OE1', -0.745, (208.776, 202.112, 207.877)), (' A 608  LEU HD22', ' A 663  ILE HG23', -0.738, (166.94, 208.517, 207.752)), (' B 947  ASP  OD2', ' B 951  GLN  NE2', -0.737, (195.265, 195.428, 210.75)), (' C 615  THR  OG1', ' C 616  GLU  OE1', -0.726, (159.46, 153.554, 199.976)), (' B 436  ASN  O  ', ' B 440  SER  OG ', -0.721, (193.849, 164.127, 137.373)), (' A 723  ILE HG22', ' A 945  LEU HD13', -0.72, (166.74, 183.764, 221.653)), (' B 284  ASP  OD1', ' B 285  ALA  N  ', -0.719, (213.151, 209.863, 193.85)), (' A 284  ASP  OD1', ' A 285  ALA  N  ', -0.701, (147.434, 193.859, 195.113)), (' A1071  ASN  OD1', ' A1305  NAG  N2 ', -0.698, (169.091, 211.447, 249.363)), (' A1008  GLN  OE1', ' A1011  ARG  NH1', -0.697, (174.379, 180.49, 206.477)), (' C 436  ASN  O  ', ' C 440  SER  OG ', -0.689, (171.097, 180.802, 137.136)), (' E 109  ASP  OD1', ' E 110  TYR  N  ', -0.671, (214.405, 157.33, 136.517)), (' H  39  GLN  NE2', ' H  43  LYS  O  ', -0.67, (152.814, 170.364, 114.443)), (' A 436  ASN  O  ', ' A 440  SER  OG ', -0.667, (187.278, 223.15, 126.469)), (' J  25  SER  O  ', ' J  98  ARG  NH2', -0.666, (197.479, 236.344, 146.427)), (' E  25  SER  O  ', ' E  98  ARG  NH2', -0.666, (217.167, 153.422, 141.62)), (' J 109  ASP  OD1', ' J 110  TYR  N  ', -0.662, (192.955, 238.337, 141.354)), (' A 108  THR  OG1', ' A 236  THR  OG1', -0.654, (147.707, 201.626, 162.357)), (' C 899  MET  HE1', ' C1046  LEU HD13', -0.646, (193.99, 172.859, 246.707)), (' A 887  ALA  O  ', ' C1042  LYS  NZ ', -0.645, (181.759, 168.772, 240.495)), (' C  96  GLU  O  ', ' C 187  LYS  N  ', -0.638, (200.994, 122.776, 189.85)), (' C 336  GLY  O  ', ' C 340  ASN  N  ', -0.636, (158.913, 174.204, 148.228)), (' C 616  GLU  N  ', ' C 616  GLU  OE1', -0.631, (161.106, 153.263, 199.705)), (' C 663  ILE HD11', ' C 669  ALA  HB2', -0.627, (173.432, 153.678, 215.146)), (' B 899  MET  HE1', ' B1046  LEU HD13', -0.624, (192.088, 202.297, 244.045)), (' B 746  CYS  HB2', ' B 974  LEU HD21', -0.624, (178.756, 196.894, 180.848)), (' A 700  ASN  ND2', ' B 784  GLN  OE1', -0.622, (168.817, 209.849, 237.49)), (' B 342  THR  HA ', ' E 101  VAL HG21', -0.619, (203.122, 156.636, 143.011)), (' K  21  LEU HD22', ' K 103  THR HG21', -0.618, (183.318, 250.824, 122.638)), (' A 723  ILE HD12', ' A 941  ALA  O  ', -0.616, (163.624, 187.125, 222.888)), (' C 760  LEU HD21', ' C1002  GLN  OE1', -0.616, (192.812, 185.315, 197.242)), (' B1306  NAG  O3 ', ' B1306  NAG  O7 ', -0.614, (215.97, 190.488, 248.391)), (' C 351  ASN  OD1', ' C 352  ARG  N  ', -0.614, (156.569, 185.79, 153.394)), (' L 101  GLN  N  ', ' L 101  GLN  OE1', -0.612, (162.822, 173.797, 115.264)), (' A1025  LYS  NZ ', ' A1039  PHE  O  ', -0.61, (175.497, 187.58, 231.387)), (' A1091  VAL HG11', ' B 901  TYR  OH ', -0.605, (179.808, 202.767, 253.34)), (' F  21  LEU HD22', ' F 103  THR HG21', -0.602, (209.716, 165.655, 114.332)), (' B 339  PHE  HB2', ' O   1  NAG  H82', -0.599, (205.401, 162.101, 151.688)), (' A 724  LEU HD12', ' A1059  PHE  HE2', -0.595, (171.982, 182.009, 227.314)), (' E  39  GLN  NE2', ' E  43  LYS  O  ', -0.594, (213.492, 150.64, 117.353)), (' H 109  ASP  OD1', ' H 110  TYR  N  ', -0.594, (154.92, 166.794, 134.578)), (' J  39  GLN  NE2', ' J  43  LYS  O  ', -0.59, (198.345, 251.901, 127.16)), (' A 899  MET  HE1', ' A1046  LEU HD13', -0.589, (167.688, 185.231, 245.594)), (' H  25  SER  O  ', ' H  98  ARG  NH2', -0.584, (149.396, 166.96, 138.831)), (' B 711  ILE HD12', ' B1093  VAL HG11', -0.584, (204.377, 188.67, 257.129)), (' L  21  LEU HD22', ' L 103  THR HG21', -0.583, (167.652, 165.757, 113.545)), (' K  37  GLN  HB2', ' K  47  LEU HD11', -0.582, (185.205, 248.665, 133.344)), (' B  53  ASP  OD1', ' B  54  LEU  N  ', -0.582, (209.595, 201.778, 180.003)), (' K 101  GLN  N  ', ' K 101  GLN  OE1', -0.581, (191.495, 246.704, 120.952)), (' A 799  PHE  HD1', ' A 802  ILE HD11', -0.58, (161.335, 178.214, 240.191)), (' A 855  LEU HD23', ' A 956  LEU HD22', -0.576, (168.992, 174.705, 201.175)), (' B1120  SER  OG ', ' C 915  GLU  OE2', -0.576, (190.992, 172.673, 263.598)), (' F  29  VAL HG11', ' F  90  GLN  HB2', -0.575, (198.967, 160.601, 127.933)), (' C 115  GLN  NE2', ' C 132  GLU  OE2', -0.573, (194.316, 140.286, 158.411)), (' H 102  ALA  O  ', ' H 104  THR  N  ', -0.571, (165.949, 172.45, 143.145)), (' B 278  GLU  N  ', ' B 278  GLU  OE1', -0.57, (203.403, 218.419, 196.734)), (' C 760  LEU HD22', ' C1005  VAL HG21', -0.569, (194.088, 183.679, 199.093)), (' C1071  ASN  OD1', ' C1304  NAG  N2 ', -0.569, (171.797, 161.641, 253.292)), (' C 361  ASP  OD1', ' C 363  SER  OG ', -0.568, (162.063, 164.373, 159.264)), (' B 537  ASN  OD1', ' B 538  PHE  N  ', -0.567, (213.925, 171.653, 180.746)), (' F 108  LYS  O  ', ' F 109  ARG  CB ', -0.565, (222.213, 169.963, 104.326)), (' A 291  ASP  N  ', ' A 291  ASP  OD1', -0.565, (153.65, 204.092, 195.015)), (' H  51  ILE HD11', ' H  70  ILE HG13', -0.562, (147.237, 182.09, 132.638)), (' F 101  GLN  N  ', ' F 101  GLN  OE1', -0.561, (205.537, 157.453, 116.659)), (' B 801  GLN  OE1', ' B 932  GLN  NE2', -0.56, (196.261, 214.845, 232.218)), (' A1028  GLU  OE2', ' C1036  ARG  NH2', -0.557, (183.209, 182.654, 232.624)), (' E  52  ASP  OD1', ' E  54  SER  OG ', -0.557, (204.413, 149.09, 146.233)), (' B 745  GLU  N  ', ' B 745  GLU  OE1', -0.557, (173.98, 198.193, 177.267)), (' C 799  PHE  CD1', ' C 802  ILE HD11', -0.556, (203.223, 170.775, 240.356)), (' E  51  ILE HD11', ' E  70  ILE HG13', -0.555, (205.38, 142.228, 136.218)), (' C 657  TYR  O  ', ' C 695  SER  N  ', -0.553, (171.153, 156.732, 226.386)), (' F  37  GLN  HB2', ' F  47  LEU HD11', -0.553, (215.998, 164.011, 123.108)), (' B 714  ASN  OD1', ' B 715  PHE  N  ', -0.551, (203.662, 201.027, 248.902)), (' B 717  ILE HG13', ' B 920  ILE HG23', -0.55, (195.871, 205.072, 245.607)), (' C 411  GLN  OE1', ' C 412  THR  N  ', -0.549, (176.986, 191.496, 160.025)), (' C 617  VAL HG11', ' C 648  ILE HD11', -0.549, (167.246, 149.337, 203.655)), (' F  33  LEU HD11', ' F  88  CYS  HB2', -0.548, (203.951, 162.088, 124.109)), (' C1097  THR  OG1', ' C1098  HIS  ND1', -0.547, (172.726, 165.028, 271.047)), (' A 661  ILE HG22', ' A 669  ALA  O  ', -0.545, (161.724, 206.826, 214.242)), (' A 102  ARG  O  ', ' A 121  ASN  N  ', -0.545, (130.046, 191.622, 170.2)), (' A 799  PHE  CD1', ' A 802  ILE HD11', -0.536, (161.094, 177.78, 240.172)), (' H  28  ASN  ND2', ' R   1  NAG  O5 ', -0.535, (159.535, 168.754, 144.902)), (' B 919  LEU HD11', ' B 923  GLN HE21', -0.535, (202.788, 207.432, 247.323)), (' A 108  THR  HG1', ' A 236  THR  HG1', -0.534, (148.084, 201.46, 162.761)), (' A1301  NAG  O3 ', ' A1301  NAG  O7 ', -0.532, (137.603, 177.109, 200.759)), (' J  51  ILE HD11', ' J  70  ILE HG13', -0.531, (208.051, 233.499, 133.648)), (' K  90  GLN  NE2', ' K  96  THR  O  ', -0.53, (194.861, 233.782, 123.589)), (' H  52  ASP  O  ', ' H  56  SER  N  ', -0.529, (149.47, 182.45, 140.164)), (' C 307  LYS  HG3', ' C 661  ILE HD11', -0.528, (181.435, 153.262, 216.135)), (' J  52  ASP  O  ', ' J  56  SER  N  ', -0.527, (205.788, 226.99, 137.568)), (' C 608  LEU HD22', ' C 663  ILE HG23', -0.526, (171.488, 157.753, 211.057)), (' C1025  LYS  O  ', ' C1029  CYS  CB ', -0.524, (193.258, 180.246, 234.032)), (' A 529  ASN  OD1', ' A 530  LEU  N  ', -0.522, (180.689, 225.367, 175.922)), (' A  53  ASP  OD1', ' A  54  LEU  N  ', -0.521, (153.613, 193.568, 180.734)), (' J 102  ALA  O  ', ' J 104  THR  N  ', -0.519, (186.271, 225.05, 138.418)), (' C 284  ASP  OD1', ' C 285  ALA  N  ', -0.513, (193.402, 145.326, 198.375)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.511, (161.701, 161.385, 122.259)), (' A 663  ILE HD12', ' A 667  ILE HG22', -0.511, (166.434, 211.103, 211.585)), (' K  33  LEU HD11', ' K  88  CYS  HB2', -0.508, (187.196, 239.892, 125.155)), (' B 966  ASN  ND2', ' C 752  GLN  OE1', -0.504, (195.671, 193.305, 181.051)), (' C1097  THR  HG1', ' C1098  HIS  CE1', -0.504, (172.743, 165.278, 272.171)), (' K  29  VAL HG11', ' K  90  GLN  HB2', -0.501, (189.834, 234.029, 124.527)), (' C 853  ASN  O  ', ' C 855  LEU HD12', -0.498, (202.644, 174.374, 196.281)), (' C 594  VAL HG13', ' C 605  VAL  CG1', -0.498, (178.448, 150.958, 206.694)), (' C 799  PHE  HD1', ' C 802  ILE HD11', -0.497, (203.346, 170.351, 240.797)), (' F  29  VAL HG12', ' F  32  THR  OG1', -0.497, (198.933, 161.784, 130.332)), (' B 115  GLN  NE2', ' B 132  GLU  OE2', -0.496, (213.566, 208.128, 152.55)), (' A 442  VAL HG21', ' K  28  SER  O  ', -0.495, (187.782, 229.346, 119.504)), (' C 641  GLN  NE2', ' C 645  GLY  O  ', -0.494, (163.539, 156.059, 209.146)), (' B 442  VAL HG21', ' F  28  SER  O  ', -0.493, (192.093, 162.392, 128.256)), (' B 323  ILE HG22', ' B 325  ARG  HG3', -0.492, (219.274, 165.497, 178.514)), (' B 561  GLN  HB3', ' C  41  LYS  HZ1', -0.491, (207.545, 153.033, 181.835)), (' C 458  LEU HD21', ' C 464  ASP  HB2', -0.488, (162.686, 198.408, 157.019)), (' B 351  ASN  OD1', ' B 352  ARG  N  ', -0.482, (196.412, 151.451, 155.886)), (' B1091  VAL HG13', ' C 901  TYR  OH ', -0.481, (198.671, 185.161, 255.115)), (' L   2  ILE HG23', ' L  26  SER  O  ', -0.479, (169.275, 183.15, 122.49)), (' E 102  ALA  O  ', ' E 104  THR  N  ', -0.479, (203.458, 165.119, 143.789)), (' L  26  SER  O  ', ' L  27  GLN  HB2', -0.478, (170.541, 184.321, 122.786)), (' C1025  LYS  O  ', ' C1029  CYS  HB3', -0.477, (193.683, 179.895, 233.943)), (' B  94  SER  O  ', ' B 189  LEU HD12', -0.475, (224.138, 218.788, 180.621)), (' C 722  GLU  OE1', ' C1025  LYS  NZ ', -0.475, (189.512, 175.401, 231.162)), (' A 934  SER  O  ', ' A 938  THR  N  ', -0.475, (154.699, 189.011, 225.327)), (' C 711  ILE  CD1', ' C1093  VAL HG11', -0.473, (175.423, 170.856, 258.366)), (' B 739  ILE  O  ', ' B 997  ARG  NH1', -0.473, (181.911, 197.728, 185.67)), (' B 210  ILE  C  ', ' B 210  ILE HD12', -0.472, (226.781, 223.841, 186.648)), (' B 307  LYS  HG3', ' B 661  ILE HD11', -0.472, (214.095, 196.888, 213.12)), (' A  91  TYR  OH ', ' A 191  GLU  OE2', -0.472, (138.121, 197.694, 185.011)), (' H  50  ARG  NH2', ' L  93  ASN  O  ', -0.472, (159.973, 182.22, 133.369)), (' C 711  ILE HD12', ' C1093  VAL HG11', -0.472, (175.636, 170.331, 258.721)), (' J  52  ASP  OD1', ' J  54  SER  OG ', -0.467, (202.258, 225.359, 140.098)), (' C 293  LEU  HB2', ' C 605  VAL HG21', -0.463, (181.284, 147.911, 206.14)), (' J 100  VAL HG22', ' J 107  TYR  O  ', -0.462, (191.281, 233.473, 139.86)), (' A 815  ILE HG23', ' A 935  LEU  CD1', -0.462, (158.541, 182.481, 229.154)), (' A 861  LEU  HG ', ' C 694  MET  HE1', -0.461, (171.839, 162.513, 220.629)), (' A 723  ILE HG22', ' A 945  LEU  CD1', -0.461, (167.236, 183.148, 222.003)), (' C 391  ASN  OD1', ' C 392  VAL  N  ', -0.461, (155.176, 180.273, 164.887)), (' A1115  ASP  N  ', ' A1115  ASP  OD1', -0.46, (181.901, 195.043, 269.815)), (' B 203  ILE  O  ', ' B 226  LEU  N  ', -0.46, (209.73, 215.428, 175.014)), (' B1025  LYS  O  ', ' B1029  CYS  CB ', -0.46, (185.248, 196.514, 232.788)), (' C 530  LEU  C  ', ' C 530  LEU HD12', -0.459, (149.427, 156.803, 182.39)), (' L  33  LEU HD11', ' L  88  CYS  HB2', -0.458, (166.608, 172.724, 123.469)), (' A 189  LEU  HB2', ' A 210  ILE HG21', -0.457, (130.752, 197.031, 186.722)), (' C 726  VAL HG13', ' C 778  VAL HG21', -0.457, (197.436, 180.508, 222.737)), (' F  29  VAL  O  ', ' F  29  VAL HG12', -0.456, (197.783, 162.756, 129.704)), (' A 723  ILE HG23', ' A1058  VAL HG22', -0.456, (165.414, 183.103, 224.546)), (' C 617  VAL HG11', ' C 648  ILE  CD1', -0.455, (167.315, 149.575, 203.211)), (' A 316  ARG  O  ', ' A 318  GLN  NE2', -0.454, (170.065, 208.654, 187.588)), (' E  52  ASP  O  ', ' E  56  SER  N  ', -0.454, (203.72, 145.495, 143.453)), (' C 714  ASN  OD1', ' C 715  PHE  N  ', -0.452, (187.034, 164.174, 252.256)), (' A  31  SER  HG ', ' A  60  SER  H  ', -0.452, (144.505, 204.7, 187.039)), (' B 855  LEU  N  ', ' B 855  LEU HD12', -0.451, (181.159, 202.904, 195.205)), (' A 342  THR  HA ', ' J 101  VAL HG21', -0.449, (195.108, 225.769, 137.077)), (' K  29  VAL  O  ', ' K  29  VAL HG12', -0.449, (187.532, 231.58, 124.416)), (' C 307  LYS  CG ', ' C 661  ILE HD11', -0.448, (181.03, 153.229, 216.61)), (' C 537  ASN  N  ', ' C 537  ASN  OD1', -0.447, (161.678, 158.307, 183.471)), (' C 603  ASN  O  ', ' C 605  VAL HG23', -0.446, (180.911, 146.208, 208.205)), (' E  50  ARG  NH2', ' F  93  ASN  O  ', -0.446, (198.861, 153.189, 135.447)), (' K  21  LEU  CD2', ' K 103  THR HG21', -0.444, (182.749, 250.878, 123.123)), (' L  11  LEU HD13', ' L  13  VAL HG23', -0.442, (169.135, 159.197, 111.113)), (' C 189  LEU  HB2', ' C 210  ILE HD13', -0.442, (198.046, 128.151, 192.095)), (' C 760  LEU HD21', ' C1002  GLN  CD ', -0.442, (192.165, 184.977, 197.461)), (' B 746  CYS  CB ', ' B 974  LEU HD21', -0.441, (178.329, 197.391, 181.375)), (' B 325  ARG  NH2', ' B 577  GLN  OE1', -0.439, (221.489, 160.392, 177.305)), (' F  90  GLN  NE2', ' F  96  THR  O  ', -0.438, (198.642, 155.047, 127.988)), (' H  52  ASP  OD1', ' H  54  SER  OG ', -0.437, (151.796, 179.796, 143.094)), (' C  31  SER  OG ', ' C  60  SER  N  ', -0.436, (184.254, 137.315, 192.737)), (' C 867  ILE  O  ', ' C 871  THR HG23', -0.435, (206.191, 177.038, 228.057)), (' A 994  ILE  O  ', ' A 995  THR  C  ', -0.435, (178.76, 177.513, 187.897)), (' B 361  ASP  OD1', ' B 363  SER  OG ', -0.433, (211.529, 168.165, 159.826)), (' B1069  GLU  HG2', ' C 891  LEU HD22', -0.433, (207.47, 191.143, 247.632)), (' C 438  LEU HD21', ' H 105  HIS  HA ', -0.432, (165.62, 175.045, 139.134)), (' L  11  LEU HD11', ' L 105  VAL HG13', -0.431, (166.602, 159.933, 112.725)), (' B 794  PHE  CZ ', ' B 879  ILE HG21', -0.431, (183.749, 212.819, 240.72)), (' C 317  VAL HG23', ' C 588  SER  O  ', -0.43, (164.7, 157.499, 195.537)), (' A 309  ILE  HB ', ' A 595  ILE HG22', -0.43, (164.029, 204.258, 207.505)), (' F  21  LEU  CD2', ' F 103  THR HG21', -0.43, (209.98, 165.672, 114.332)), (' L  37  GLN  O  ', ' L  45  ARG  N  ', -0.429, (156.885, 163.225, 123.714)), (' J  50  ARG  NH2', ' K  93  ASN  O  ', -0.429, (197.182, 228.721, 128.722)), (' A 787  LYS  NZ ', ' C 699  GLU  OE2', -0.428, (162.793, 159.898, 237.936)), (' A 351  ASN  OD1', ' A 352  ARG  N  ', -0.425, (201.373, 212.479, 140.901)), (' H   4  LEU HD23', ' H  24  GLY  HA2', -0.425, (146.915, 168.55, 136.663)), (' B 438  LEU HD21', ' E 105  HIS  HA ', -0.425, (201.512, 162.176, 139.807)), (' E  51  ILE HG22', ' E  52  ASP  N  ', -0.423, (205.12, 146.714, 140.831)), (' C 734  ASP  N  ', ' C 734  ASP  OD1', -0.423, (203.814, 181.313, 198.032)), (' B1037  VAL HG21', ' C1032  GLY  HA3', -0.423, (194.322, 185.597, 240.04)), (' A 714  ASN  OD1', ' A 715  PHE  N  ', -0.422, (163.393, 196.738, 249.621)), (' J  91  THR HG23', ' J 118  THR  HA ', -0.422, (210.27, 254.548, 130.745)), (' B 700  ASN  ND2', ' C 786  TYR  CE1', -0.422, (211.092, 186.112, 240.303)), (' C 583  ASP  OD1', ' C 584  ILE  N  ', -0.421, (153.179, 167.234, 190.288)), (' A 596  THR HG22', ' A 605  VAL  CG1', -0.421, (156.378, 204.17, 204.483)), (' H 100  VAL HG22', ' H 107  TYR  O  ', -0.42, (158.18, 169.36, 137.666)), (' B1025  LYS  NZ ', ' B1039  PHE  O  ', -0.42, (190.637, 192.864, 231.128)), (' A 694  MET  HE3', ' B 866  MET  SD ', -0.419, (172.857, 209.693, 219.773)), (' A1025  LYS  O  ', ' A1029  CYS  CB ', -0.416, (174.952, 181.596, 234.487)), (' A 745  GLU  N  ', ' A 745  GLU  OE1', -0.416, (175.379, 164.169, 180.678)), (' C 342  THR  HA ', ' H 101  VAL HG21', -0.416, (159.11, 177.647, 141.728)), (' C 653  VAL HG12', ' C 655  ASN  N  ', -0.415, (166.925, 148.504, 225.117)), (' E   4  LEU HD23', ' E  24  GLY  HA2', -0.414, (217.028, 150.052, 140.006)), (' A 901  TYR  OH ', ' C1091  VAL HG11', -0.414, (173.786, 176.747, 255.882)), (' H  91  THR HG23', ' H 118  THR  HA ', -0.413, (139.914, 174.104, 114.314)), (' A 567  ALA  HB1', ' B 960  VAL HG11', -0.413, (189.182, 204.368, 193.403)), (' E 108  PRO  HG2', ' F  46  LEU HD22', -0.412, (211.299, 161.38, 132.791)), (' A 109  THR  OG1', ' A 114  THR HG22', -0.411, (143.526, 199.128, 157.609)), (' K  11  LEU HD13', ' K  13  VAL HG23', -0.411, (178.318, 255.924, 124.887)), (' B 313  SER  OG ', ' B 314  ASN  N  ', -0.41, (210.483, 187.977, 195.099)), (' B 774  ASN  O  ', ' B 778  VAL HG23', -0.409, (179.403, 197.898, 221.604)), (' A 193  VAL HG23', ' A 223  LEU HD22', -0.409, (141.606, 193.238, 181.603)), (' A1048  SER  HG ', ' A1061  HIS  HD1', -0.409, (170.929, 184.44, 235.283)), (' J   4  LEU HD23', ' J  24  GLY  HA2', -0.408, (200.532, 238.349, 145.278)), (' A 901  TYR  OH ', ' C1091  VAL  CG1', -0.407, (174.268, 176.76, 255.683)), (' F  37  GLN  O  ', ' F  45  ARG  N  ', -0.406, (217.043, 159.002, 125.444)), (' B  89  GLY  HA3', ' B 267  LEU HD12', -0.406, (215.102, 204.488, 176.01)), (' A 531  VAL HG11', ' A 534  LYS  HE2', -0.405, (174.726, 221.794, 181.654)), (' E  91  THR HG23', ' E 118  THR  HA ', -0.405, (217.241, 137.956, 119.288)), (' B1040  CYS  HB3', ' B1045  HIS  CD2', -0.405, (190.487, 196.469, 236.632)), (' C  53  ASP  OD1', ' C  54  LEU  N  ', -0.405, (189.79, 149.925, 184.123)), (' A 438  LEU HD21', ' J 105  HIS  HA ', -0.403, (188.351, 226.778, 134.113)), (' B 392  VAL HG21', ' B 521  VAL HG11', -0.402, (205.042, 159.159, 165.632)), (' B 344  PHE  HB2', ' B 398  VAL HG23', -0.402, (194.61, 157.719, 147.86)), (' H  51  ILE HD11', ' H  70  ILE  C  ', -0.402, (145.962, 182.297, 132.711)), (' A1032  GLY  HA3', ' C1037  VAL HG21', -0.402, (178.476, 178.832, 240.727)), (' A1069  GLU  HG2', ' B 891  LEU  CD2', -0.402, (170.117, 204.751, 246.133)), (' F  81  GLU  N  ', ' F  81  GLU  OE1', -0.401, (225.356, 168.204, 119.071)), (' L  81  GLU  N  ', ' L  81  GLU  OE1', -0.401, (160.702, 151.151, 118.145)), (' C1087  PRO  HG3', ' C1092  PHE  CE2', -0.4, (172.567, 179.279, 262.428)), (' D   1  NAG  O5 ', ' J  28  ASN  ND2', -0.4, (189.567, 227.458, 143.754)), (' B 712  PRO  HA ', ' B1068  GLN  O  ', -0.4, (206.167, 194.621, 249.992))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
