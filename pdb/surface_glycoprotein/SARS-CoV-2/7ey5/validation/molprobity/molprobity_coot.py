# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', '  32 ', 'PHE', None, (225.38300000000024, 258.091, 270.17)), ('B', ' 115 ', 'LEU', None, (232.98400000000026, 273.287, 285.451)), ('C', '   8 ', 'PRO', None, (248.08800000000025, 250.771, 296.453)), ('H', '  28 ', 'LYS', None, (218.2020000000001, 229.05500000000004, 286.497)), ('L', '   8 ', 'PRO', None, (185.89600000000013, 223.24, 307.731)), ('L', '  95 ', 'PRO', None, (195.60000000000025, 237.78000000000006, 292.267))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B   6  GLN  NE2', ' B  96  CYS  SG ', -0.775, (231.44, 269.928, 279.217)), (' H  38  ARG  NH1', ' H  46  GLU  OE2', -0.748, (200.929, 241.176, 304.947)), (' B  66  GLY  HA3', ' B  86  LEU HD11', -0.732, (219.48, 268.435, 292.203)), (' B  15  GLY  H  ', ' B  87  LYS  HG3', -0.72, (219.209, 276.104, 298.18)), (' H  54  LYS  HA ', ' H  58  GLN  HB2', -0.708, (212.443, 243.052, 282.883)), (' L  20  THR  HA ', ' L  74  THR HG22', -0.683, (187.349, 215.666, 303.223)), (' B 102  SER  O  ', ' B 104  SER  N  ', -0.682, (234.661, 250.946, 271.218)), (' H  18  LEU HD12', ' H  19  ARG  H  ', -0.674, (216.3, 246.102, 305.077)), (' H 105  GLU  HB3', ' H 110  ASP  HB3', -0.668, (211.109, 224.502, 278.959)), (' L   6  GLN  NE2', ' L  86  TYR  O  ', -0.667, (193.887, 224.727, 304.592)), (' B 112  GLN  NE2', ' B 113  GLY  O  ', -0.662, (236.277, 274.185, 281.058)), (' H  53  SER  HA ', ' H  74  ARG HH12', -0.661, (212.763, 237.548, 285.492)), (' C   6  GLN  NE2', ' C  88  CYS  SG ', -0.66, (241.606, 252.767, 290.437)), (' L  40  PRO  O  ', ' L  42  LYS  NZ ', -0.657, (206.675, 222.387, 312.429)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.651, (211.736, 233.14, 264.384)), (' B  12  LYS  HD3', ' B  18  LEU HD11', -0.648, (222.522, 277.677, 291.348)), (' A 353  TRP  O  ', ' A 466  ARG  NH1', -0.643, (207.276, 243.127, 257.471)), (' A 367  VAL HG23', ' A 368  LEU HD12', -0.634, (225.968, 247.191, 244.473)), (' A 421  TYR  OH ', ' H 107  ARG  NH1', -0.629, (207.219, 225.739, 267.926)), (' B 108  HIS  HB3', ' B 109  PRO  HD3', -0.626, (236.519, 260.796, 272.565)), (' B   2  LEU  HG ', ' B   3  GLN  H  ', -0.625, (236.604, 269.257, 269.067)), (' H 102  ALA  HB2', ' H 116  TYR  CE1', -0.616, (203.244, 224.737, 288.478)), (' H  62  TYR  HB2', ' H  67  LYS  HD2', -0.601, (201.227, 246.426, 294.781)), (' H  66  VAL HG13', ' H  70  PHE  HD2', -0.598, (203.487, 245.857, 300.618)), (' L  19  VAL  HB ', ' L  75  ILE HG22', -0.597, (190.88, 213.568, 306.517)), (' A 356  LYS  HE3', ' A 358  ILE HD11', -0.596, (213.496, 249.175, 246.027)), (' B  40  MET  HB2', ' B  43  LYS  HB2', -0.593, (234.635, 264.35, 296.01)), (' L  63  SER  OG ', ' L  74  THR  OG1', -0.584, (189.483, 212.614, 299.377)), (' B  93  LYS  NZ ', ' B 114  THR  O  ', -0.58, (236.269, 273.692, 286.105)), (' L   8  PRO  HG2', ' L  11  LEU HD11', -0.58, (186.7, 221.099, 309.604)), (' L  14  SER  H  ', ' L 107  LYS  HE2', -0.572, (188.546, 210.063, 316.107)), (' B  38  ARG  HB3', ' B  48  MET  HE3', -0.57, (228.07, 265.018, 288.919)), (' B  98  TYR  HB3', ' B 109  PRO  HD2', -0.563, (233.958, 262.249, 273.544)), (' B  48  MET  HE1', ' B  94  TYR  CE2', -0.548, (226.94, 266.891, 288.985)), (' B  32  PHE  HE1', ' B  98  TYR  HE1', -0.544, (229.297, 263.167, 269.814)), (' L  39  LYS  HB3', ' L  42  LYS  HZ2', -0.543, (205.898, 221.306, 311.58)), (' C  89  GLN  HG2', ' C  90  GLN  O  ', -0.542, (234.264, 252.106, 284.236)), (' C  61  ARG  NH2', ' C  79  GLN  OE1', -0.538, (257.949, 260.703, 279.105)), (' B  24  TYR  CD2', ' B  77  THR  HB ', -0.538, (225.839, 269.104, 268.894)), (' H  53  SER  HA ', ' H  74  ARG  NH1', -0.533, (213.229, 238.284, 286.029)), (' C 106  GLU  N  ', ' C 106  GLU  OE1', -0.529, (253.857, 259.889, 294.558)), (' C  33  LEU  HG ', ' C  34  ALA  H  ', -0.529, (240.016, 249.872, 283.797)), (' C  26  SER  OG ', ' C  27  GLN  OE1', -0.525, (231.195, 243.228, 293.068)), (' H  93  THR  OG1', ' H 128  VAL  N  ', -0.522, (208.137, 244.372, 314.404)), (' A 418  ILE  HA ', ' A 422  ASN  HB2', -0.522, (212.013, 233.491, 263.663)), (' L  39  LYS  HG3', ' L  84  ALA  HB2', -0.52, (201.853, 219.209, 309.651)), (' A 359  SER  OG ', ' A 394  ASN  OD1', -0.52, (209.472, 243.672, 239.849)), (' C  95  PRO  HB2', ' C  96  PRO  HD3', -0.518, (223.841, 250.016, 288.279)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.517, (219.205, 249.36, 270.136)), (' A 353  TRP  CZ2', ' A 466  ARG  HB3', -0.516, (206.517, 237.836, 256.713)), (' A 361  CYS  SG ', ' A 362  VAL  N  ', -0.511, (217.014, 249.469, 238.278)), (' L  30  TYR  O  ', ' L  67  SER  OG ', -0.507, (187.873, 222.068, 287.747)), (' H   6  GLU  OE2', ' H 123  GLY  N  ', -0.5, (213.507, 231.877, 304.729)), (' H  18  LEU HD12', ' H  19  ARG  N  ', -0.498, (215.87, 246.345, 305.193)), (' A 383  SER  HB3', ' A 386  LYS  HB2', -0.497, (227.127, 233.04, 238.207)), (' B  20  ILE HG23', ' B 115  LEU HD12', -0.493, (228.544, 273.448, 283.267)), (' C  63  SER  OG ', ' C  74  THR  OG1', -0.493, (253.009, 248.12, 281.834)), (' H   4  LEU HD23', ' H  24  ALA  HA ', -0.486, (217.909, 231.535, 294.853)), (' H 115  TYR  HB3', ' L  91  TYR  HE1', -0.485, (200.391, 228.254, 289.392)), (' A 457  ARG  HE ', ' A 461  LEU HD22', -0.485, (203.306, 230.498, 262.361)), (' C  54  ARG  CZ ', ' C  60  GLY  HA2', -0.485, (252.825, 253.075, 274.014)), (' B 100  SER  O  ', ' B 106  TRP  NE1', -0.485, (230.77, 254.053, 272.584)), (' B  10  GLU  CD ', ' B  11  VAL  H  ', -0.481, (229.639, 283.318, 291.44)), (' B   2  LEU  HB3', ' B  25  SER  CB ', -0.478, (234.213, 269.364, 267.29)), (' B  48  MET  HE1', ' B  94  TYR  HE2', -0.476, (226.943, 267.211, 289.713)), (' C  54  ARG  HB3', ' C  58  ILE HD11', -0.473, (248.46, 253.865, 275.238)), (' H  67  LYS  HA ', ' H  67  LYS  HD2', -0.473, (201.026, 247.843, 295.581)), (' B  98  TYR  CG ', ' B  99  GLY  N  ', -0.471, (231.492, 261.253, 272.859)), (' B  32  PHE  CE1', ' B  98  TYR  HE1', -0.467, (228.686, 262.923, 269.761)), (' L  33  LEU HD13', ' L  71  PHE  CD2', -0.466, (190.466, 224.561, 294.413)), (' C   1  GLU  HA ', ' C  96  PRO  HG2', -0.466, (226.709, 248.996, 290.87)), (' B  15  GLY  N  ', ' B  87  LYS  HG3', -0.465, (218.961, 276.176, 298.184)), (' B  61  SER  O  ', ' B  63  SER  N  ', -0.464, (221.0, 257.881, 290.778)), (' B  60  TYR  OH ', ' B  69  ILE  N  ', -0.463, (218.018, 264.442, 283.02)), (' A 404  GLY  HA2', ' A 508  TYR  CD1', -0.463, (224.588, 238.546, 265.091)), (' C  65  SER  HB2', ' C  72  THR  HB ', -0.463, (248.526, 244.869, 285.904)), (' L  89  GLN  HG2', ' L  90  LYS  O  ', -0.46, (196.763, 230.254, 294.699)), (' L  55  GLN  OE1', ' L  56  SER  N  ', -0.46, (205.796, 215.266, 293.181)), (' B  45  LEU HD12', ' C  99  PHE  CE2', -0.457, (236.693, 259.534, 286.739)), (' C  96  PRO  O  ', ' C  98  THR HG23', -0.457, (229.293, 251.701, 289.332)), (' H   3  GLN  N  ', ' H   3  GLN  OE1', -0.455, (219.619, 225.21, 296.071)), (' L  10  SER  C  ', ' L  11  LEU HD12', -0.453, (188.43, 220.926, 312.02)), (' A 418  ILE  H  ', ' A 418  ILE HD12', -0.452, (214.718, 232.077, 265.711)), (' L  55  GLN  O  ', ' L  58  VAL HG12', -0.45, (203.534, 213.204, 295.673)), (' H 115  TYR  HB3', ' L  91  TYR  CE1', -0.448, (200.159, 228.377, 289.398)), (' H  62  TYR  HE1', ' H  72  ILE HG13', -0.448, (207.514, 244.369, 295.333)), (' A 344  ALA  HB3', ' A 347  PHE  HE1', -0.447, (217.871, 249.599, 256.699)), (' L  33  LEU HD22', ' L  71  PHE  HD2', -0.445, (190.943, 223.35, 294.856)), (' B   3  GLN  OE1', ' B   5  VAL HG23', -0.438, (234.658, 274.06, 273.008)), (' A 421  TYR  CD1', ' A 457  ARG  HB3', -0.433, (204.451, 229.903, 266.276)), (' A 421  TYR  HA ', ' A 461  LEU HD23', -0.433, (206.489, 230.946, 262.965)), (' H  36  TRP  O  ', ' H  48  VAL HG12', -0.432, (205.195, 237.851, 299.197)), (' A 462  LYS  HB2', ' A 462  LYS  HE2', -0.432, (202.263, 230.987, 254.809)), (' L 105  GLU  HG2', ' L 106  ILE  H  ', -0.429, (194.125, 216.423, 318.243)), (' C  30  ARG  HG2', ' C  31  TYR  N  ', -0.428, (235.906, 240.786, 280.951)), (' A 467  ASP  O  ', ' A 468  ILE HD13', -0.428, (203.684, 239.835, 262.395)), (' H  54  LYS  HD2', ' H  54  LYS  O  ', -0.426, (214.612, 241.951, 280.9)), (' B   6  GLN  HB3', ' B 115  LEU HD11', -0.425, (230.117, 274.402, 281.697)), (' L  95  PRO  HG2', ' L  97  THR HG23', -0.422, (194.78, 237.561, 295.76)), (' B  52  TYR  O  ', ' B  56  SER  HA ', -0.422, (218.538, 260.9, 273.546)), (' A 364  ASP  OD1', ' A 365  TYR  N  ', -0.422, (226.346, 244.929, 240.704)), (' H  17  SER  OG ', ' H  86  HIS  O  ', -0.419, (210.821, 253.096, 304.463)), (' A 337  PRO  O  ', ' A 340  GLU  HG3', -0.417, (217.224, 252.158, 248.583)), (' H 116  TYR  HD1', ' L  91  TYR  CE1', -0.417, (200.731, 226.381, 289.888)), (' H 117  PHE  N  ', ' L  36  TYR  OH ', -0.416, (202.974, 226.989, 295.165)), (' L  38  GLN  NE2', ' L  42  LYS  O  ', -0.416, (205.801, 226.465, 309.077)), (' B  10  GLU  OE1', ' B  11  VAL HG12', -0.414, (228.753, 284.416, 292.016)), (' L  14  SER  N  ', ' L 107  LYS  HE2', -0.409, (189.343, 210.253, 316.051)), (' A 392  PHE  HB3', ' A 516  GLU  HB2', -0.407, (212.695, 237.568, 238.514)), (' A 412  PRO  HB2', ' A 427  ASP  HA ', -0.407, (215.295, 225.814, 251.302)), (' H  35  ASN  ND2', ' H 117  PHE  HE1', -0.406, (204.974, 232.906, 293.748)), (' B  11  VAL  HA ', ' B 118  VAL  HB ', -0.404, (228.786, 280.008, 293.577)), (' H  34  MET  HB3', ' H  34  MET  HE3', -0.401, (212.046, 234.885, 293.882)), (' L  10  SER  HA ', ' L 103  LYS  HE3', -0.4, (190.82, 222.662, 314.329))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
