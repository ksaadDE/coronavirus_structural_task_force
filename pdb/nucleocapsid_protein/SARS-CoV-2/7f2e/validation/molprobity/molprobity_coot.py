# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 311 ', 'ALA', 0.03102437732942809, (28.317, -10.478000000000003, 23.889)), ('E', ' 325 ', 'THR', 0.055369059919772715, (13.033000000000001, -14.917000000000009, -51.788)), ('E', ' 343 ', 'ASP', 0.0028183442341765536, (44.803, -40.602, -61.422999999999995)), ('F', ' 258 ', 'PRO', 0.09744615149016311, (41.36899999999997, -30.084000000000003, -64.489)), ('F', ' 325 ', 'THR', 0.030445638404310055, (27.11600000000001, -43.309, -62.06699999999999)), ('F', ' 340 ', 'ASP', 0.025940947796905454, (24.645000000000003, -8.043, -50.789)), ('K', ' 325 ', 'THR', 0.042647786885059095, (6.660000000000007, -18.382000000000005, -63.37)), ('L', ' 301 ', 'TRP', 0.01610899769001075, (-8.085000000000019, -34.919, -49.871)), ('L', ' 302 ', 'PRO', 0.03308850949796617, (-10.321000000000009, -34.701, -52.964)), ('L', ' 325 ', 'THR', 0.04763558404400961, (24.514, -45.616, -53.26499999999999))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' K 350  VAL  O  ', ' K 354  ASN  ND2', -0.7, (18.5, -51.108, -65.423)), (' I 256  LYS  HD3', ' I 257  LYS  H  ', -0.675, (-6.185, -38.323, 16.764)), (' F 298  TYR  HB3', ' F 301  TRP  HB2', -0.673, (34.964, -10.565, -68.054)), (' E 316  GLY  O  ', ' F 277  ARG  NH2', -0.654, (30.395, -24.697, -68.511)), (' E 350  VAL  O  ', ' E 354  ASN  ND2', -0.647, (34.081, -41.034, -50.803)), (' F 280  GLU  HB2', ' F 283  GLN  HG3', -0.639, (22.836, -31.279, -71.04)), (' K 280  GLU  O  ', ' L 319  ARG  NH1', -0.635, (13.973, -32.897, -70.26)), (' C 266  LYS  HG3', ' C 294  GLN  HA ', -0.616, (36.336, -11.914, 46.432)), (' C 281  GLN  HA ', ' D 319  ARG  HD2', -0.603, (19.44, -25.373, 36.193)), (' A 353  LEU HD13', ' B 331  LEU HD13', -0.598, (34.343, -34.414, -16.752)), (' G 280  GLU  O  ', ' H 319  ARG  NH1', -0.58, (14.246, -26.622, -4.876)), (' L 280  GLU  HB2', ' L 283  GLN  HG3', -0.573, (15.256, -35.312, -45.082)), (' G 325  THR  HG1', ' G 327  SER  HG ', -0.57, (5.533, -36.833, -7.552)), (' H 269  ASN  HB2', ' H 292  ILE  O  ', -0.568, (0.596, -19.681, -34.183)), (' I 331  LEU HD13', ' J 353  LEU HD13', -0.565, (-0.062, -28.888, 32.425)), (' G 331  LEU HD13', ' H 353  LEU HD13', -0.56, (0.633, -30.48, -18.344)), (' C 331  LEU HD13', ' D 353  LEU HD13', -0.56, (14.503, -11.579, 24.388)), (' E 280  GLU  O  ', ' F 319  ARG  NH1', -0.543, (21.671, -28.321, -45.749)), (' C 261  LYS  NZ ', ' D 308  ALA  O  ', -0.543, (24.737, -8.267, 28.759)), (' I 269  ASN  HB2', ' I 292  ILE  O  ', -0.539, (6.143, -45.514, 11.743)), (' D 362  THR  OG1', ' G 289  GLN  NE2', -0.539, (12.16, -14.868, 7.544)), (' H 287  GLY  HA2', ' H 291  LEU HD23', -0.538, (0.013, -25.604, -28.201)), (' J 287  GLY  H  ', ' J 356  HIS  HB3', -0.538, (1.311, -31.259, 41.46)), (' A 281  GLN  HA ', ' B 319  ARG  HD2', -0.53, (18.931, -34.18, -22.348)), (' K 275  GLY  O  ', ' K 277  ARG  NH2', -0.529, (6.931, -37.302, -74.276)), (' K 266  LYS  N  ', ' K 294  GLN  O  ', -0.528, (-0.692, -47.27, -76.321)), (' H 265  THR  N  ', ' H 268  TYR  O  ', -0.525, (-0.893, -14.627, -31.374)), (' G 281  GLN  HA ', ' H 319  ARG  HD2', -0.519, (14.261, -27.544, -7.112)), (' E 266  LYS  N  ', ' E 294  GLN  O  ', -0.518, (42.158, -23.388, -39.321)), (' I 298  TYR  HB3', ' I 301  TRP  HB2', -0.505, (7.583, -52.007, 18.207)), (' I 316  GLY  O  ', ' J 277  ARG  NH1', -0.501, (7.064, -36.571, 41.728)), (' I 280  GLU  O  ', ' J 319  ARG  NH1', -0.498, (14.47, -32.705, 18.802)), (' I 281  GLN  HA ', ' J 319  ARG  HD2', -0.495, (14.538, -31.75, 21.274)), (' A 340  ASP  HB3', ' A 343  ASP  HB2', -0.493, (43.061, -35.204, -8.957)), (' G 316  GLY  O  ', ' H 277  ARG  NH1', -0.491, (7.12, -22.2, -27.567)), (' K 309  PRO  HA ', ' L 260  GLN  O  ', -0.489, (4.001, -44.942, -55.214)), (' D 269  ASN  HB2', ' D 292  ILE  O  ', -0.488, (26.136, -10.911, 9.01)), (' D 288  ASP  OD1', ' D 289  GLN  N  ', -0.488, (16.749, -10.808, 9.237)), (' B 269  ASN  HB2', ' B 292  ILE  O  ', -0.486, (26.133, -48.307, 4.917)), (' A 277  ARG  NH2', ' B 316  GLY  O  ', -0.485, (24.963, -41.157, -25.06)), (' C 280  GLU  O  ', ' D 319  ARG  NH1', -0.482, (20.216, -25.067, 38.639)), (' A 277  ARG HH21', ' A 284  GLY  HA3', -0.481, (24.135, -39.294, -25.329)), (' K 288  ASP  O  ', ' K 292  ILE HG13', -0.476, (9.299, -45.392, -76.624)), (' I 319  ARG  NH1', ' J 280  GLU  O  ', -0.473, (14.612, -32.027, 41.149)), (' J 319  ARG  HB2', ' J 334  THR HG22', -0.471, (14.322, -34.23, 25.417)), (' G 317  MET  HE3', ' H 259  ARG  HE ', -0.468, (11.616, -16.746, -24.886)), (' K 283  GLN  O  ', ' L 319  ARG  NH1', -0.466, (12.273, -33.953, -69.505)), (' D 289  GLN  HG3', ' G 289  GLN  HG3', -0.465, (15.851, -13.628, 5.594)), (' B 341  ASP  N  ', ' B 341  ASP  OD1', -0.463, (8.269, -52.065, -19.658)), (' I 313  ALA  O  ', ' I 317  MET  HG2', -0.461, (7.771, -40.832, 37.062)), (' L 262  ARG  HB2', ' L 274  PHE  CE1', -0.458, (2.791, -45.156, -48.961)), (' D 270  VAL HG13', ' D 274  PHE  HD2', -0.458, (27.002, -14.41, 14.727)), (' K 350  VAL  HA ', ' L 322  MET  HE1', -0.45, (16.469, -50.381, -62.716)), (' G 313  ALA  O  ', ' G 317  MET  HG2', -0.447, (7.616, -18.472, -22.773)), (' B 298  TYR  HB3', ' B 301  TRP  HB2', -0.445, (22.495, -54.75, -1.734)), (' G 277  ARG  NH1', ' H 316  GLY  O  ', -0.445, (9.173, -20.452, -3.375)), (' E 279  PRO  HB2', ' L 280  GLU  HG2', -0.444, (18.185, -32.899, -43.354)), (' B 288  ASP  O  ', ' B 292  ILE HG13', -0.443, (19.853, -46.911, 4.109)), (' F 258  PRO  O  ', ' F 262  ARG  HG3', -0.442, (39.719, -27.171, -65.537)), (' B 264  ALA  O  ', ' B 296  THR  N  ', -0.432, (27.71, -52.348, -0.544)), (' E 319  ARG  NH1', ' F 280  GLU  O  ', -0.431, (22.011, -28.73, -67.886)), (' A 263  THR  HA ', ' B 312  SER  HB3', -0.43, (29.825, -49.666, -22.908)), (' C 269  ASN  N  ', ' C 269  ASN  OD1', -0.43, (28.995, -10.966, 47.01)), (' H 306  GLN  OE1', ' H 349  GLN  NE2', -0.429, (-7.504, -28.021, -15.566)), (' H 340  ASP  HB3', ' H 343  ASP  HB2', -0.429, (-8.59, -31.903, -10.209)), (' D 298  TYR  HB3', ' D 301  TRP  HB2', -0.425, (22.392, -4.42, 16.056)), (' A 280  GLU  O  ', ' B 319  ARG  NH1', -0.423, (20.21, -34.148, -24.452)), (' H 264  ALA  O  ', ' H 296  THR  N  ', -0.422, (-2.602, -16.932, -28.135)), (' E 315  PHE  HB3', ' F 286  PHE  CD1', -0.422, (28.395, -18.294, -65.351)), (' D 314  PHE  O  ', ' D 318  SER  OG ', -0.42, (26.347, -18.994, 33.105)), (' I 319  ARG  NH1', ' J 283  GLN  O  ', -0.419, (12.953, -32.863, 40.615)), (' E 270  VAL  HB ', ' E 292  ILE HG23', -0.419, (33.599, -25.505, -39.345)), (' A 316  GLY  HA2', ' B 277  ARG HH12', -0.418, (24.229, -42.713, -1.542)), (' E 319  ARG  HD2', ' F 281  GLN  HA ', -0.418, (21.637, -29.604, -65.405)), (' G 357  ILE HD13', ' H 321  GLY  HA2', -0.417, (19.335, -17.462, -9.768)), (' G 270  VAL HG13', ' G 274  PHE  HD2', -0.414, (5.608, -17.883, -2.506)), (' K 319  ARG  NH1', ' L 280  GLU  O  ', -0.412, (13.854, -33.069, -47.665)), (' D 341  ASP  HA ', ' D 346  PHE  CG ', -0.411, (7.674, -6.129, 30.572)), (' E 288  ASP  O  ', ' E 292  ILE HG13', -0.411, (34.513, -30.143, -39.311)), (' D 264  ALA  O  ', ' D 296  THR  N  ', -0.411, (27.645, -7.01, 14.965)), (' I 357  ILE HD13', ' J 321  GLY  HA2', -0.409, (19.203, -41.945, 24.294)), (' J 322  MET  HB3', ' J 322  MET  HE3', -0.408, (22.082, -45.1, 28.57)), (' I 317  MET  HE3', ' J 259  ARG  HE ', -0.405, (11.614, -42.596, 39.409)), (' G 330  TRP  CZ3', ' H 338  LYS  HB2', -0.405, (2.715, -30.901, -7.831)), (' J 321  GLY  O  ', ' J 332  THR  N  ', -0.404, (17.703, -40.931, 29.032)), (' G 308  ALA  HA ', ' G 309  PRO  HD3', -0.404, (8.074, -14.83, -14.796)), (' K 287  GLY  N  ', ' K 356  HIS  HB3', -0.403, (11.518, -44.606, -71.577)), (' I 352  LEU  O  ', ' I 356  HIS  HD2', -0.403, (16.381, -49.588, 20.17)), (' J 313  ALA  O  ', ' J 317  MET  HG2', -0.403, (5.299, -38.336, 22.925)), (' L 258  PRO  O  ', ' L 262  ARG  HG3', -0.403, (3.881, -48.356, -50.141)), (' K 270  VAL  HB ', ' K 292  ILE HG23', -0.401, (5.67, -41.743, -76.264)), (' J 352  LEU  O  ', ' J 356  HIS  HD2', -0.401, (-3.039, -28.655, 39.834)), (' G 350  VAL HG13', ' H 322  MET  HE1', -0.401, (22.571, -10.832, -12.907)), (' G 256  LYS  HE2', ' G 257  LYS  HG2', -0.401, (-5.591, -19.807, -3.291)), (' H 313  ALA  O  ', ' H 317  MET  HG2', -0.4, (5.378, -20.392, -8.388))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
