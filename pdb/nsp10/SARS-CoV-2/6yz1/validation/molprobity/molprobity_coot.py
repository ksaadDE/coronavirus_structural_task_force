# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 117  CYS  SG ', ' B 119  VAL HG22', -0.836, (62.785, 19.631, -8.034)), (' A 264  GLU  HA ', ' A 267  ILE HD12', -0.714, (113.304, 18.069, 11.744)), (' A  32  ASP  HB3', ' A 239  LEU HD12', -0.711, (76.581, 36.929, 34.506)), (' A 260  MET  HE3', ' A 262  LEU HD11', -0.677, (110.501, 21.006, 5.061)), (' B  76  TYR  CZ ', ' B  84  PRO  HG3', -0.643, (64.548, 5.642, 8.244)), (' A 132  TYR  HB2', ' A 170  LYS  HE3', -0.64, (85.979, 20.697, 30.74)), (' A 260  MET  CE ', ' A 262  LEU HD11', -0.634, (110.278, 21.311, 4.544)), (' A  43  ASN  ND2', ' A 301  SFG  OXT', -0.633, (78.623, 21.159, 25.313)), (' A 263  LYS  HD3', ' A 263  LYS  N  ', -0.625, (112.634, 14.104, 7.409)), (' B  56  THR HG21', ' B  60  GLU  HG3', -0.619, (72.912, 24.771, 1.953)), (' B 124  LYS  HE3', ' B 128  CYS  SG ', -0.598, (59.767, 20.161, -5.025)), (' A 141  LYS  HE3', ' A 142  GLU  O  ', -0.566, (94.719, 19.154, 46.381)), (' A  32  ASP  HB3', ' A 239  LEU  CD1', -0.564, (76.839, 36.867, 34.042)), (' A 182  LYS  HE2', ' A 524  HOH  O  ', -0.563, (109.696, 22.184, 29.126)), (' B  52  GLY  HA2', ' B  65  GLN  OE1', -0.561, (66.553, 27.576, 4.27)), (' A  41  MET  CE ', ' A  80  PRO  HB3', -0.555, (75.454, 21.97, 20.783)), (' A 273  SER  O  ', ' A 277  LYS  HG3', -0.554, (107.076, 32.459, 10.191)), (' A 163  LEU  HB2', ' A 282  ILE  HB ', -0.547, (106.402, 20.587, 10.669)), (' B  76  TYR  OH ', ' B  84  PRO  HG3', -0.541, (64.18, 5.603, 8.167)), (' A  41  MET  HE1', ' A  80  PRO  HG3', -0.54, (75.012, 20.395, 21.244)), (' B  83  HIS  NE2', ' B  90  CYS  HB2', -0.534, (71.99, 7.284, 9.348)), (' A   6 AGLN  HB3', ' A   7  PRO  HD2', -0.516, (86.625, 39.65, 20.816)), (' A  18  GLN  HB3', ' A  20  MET  HE2', -0.501, (102.216, 38.398, 38.85)), (' A  99  ASP  OD1', " A 301  SFG  O2'", -0.494, (82.859, 11.85, 27.654)), (' A   5  TRP  HD1', ' A 242 BTYR  CZ ', -0.484, (79.236, 44.431, 19.25)), (' A  67  VAL HG22', ' A 126  LEU  HB3', -0.476, (92.192, 21.372, 13.406)), (' B  61  ALA  HB2', ' B  67  SER  OG ', -0.467, (69.507, 27.478, 8.785)), (' B  74  CYS  HB2', ' B  92  LEU HD12', -0.467, (68.848, 12.534, 10.07)), (' A   8  GLY  HA3', ' A 193  PHE  CZ ', -0.463, (87.104, 35.041, 23.689)), (' B  76  TYR  CE1', ' B  84  PRO  HD3', -0.46, (65.963, 4.92, 9.587)), (' A 103  PHE  CE2', ' A 105  SER  HB2', -0.46, (80.266, 12.802, 18.534)), (' A  49  GLN  OE1', ' A 197  VAL HG22', -0.456, (80.918, 32.76, 24.614)), (' B  70  GLY  HA3', ' B  92  LEU  O  ', -0.449, (73.405, 15.889, 9.267)), (' B  83  HIS  CD2', ' B  90  CYS  HB2', -0.445, (71.805, 7.301, 8.866)), (' A   6 BGLN  HB3', ' A   7  PRO  HD2', -0.442, (86.66, 39.198, 20.675)), (' B  24  ALA  HA ', ' B 112  LEU HD21', -0.436, (60.149, 8.094, 12.203)), (' A   5  TRP  HD1', ' A 242 BTYR  CE2', -0.435, (79.638, 43.795, 19.195)), (' A 104  VAL HG12', ' B  71  ALA  HB1', -0.425, (74.522, 12.535, 15.527)), (' A 126  LEU HD12', ' A 166  SER  O  ', -0.421, (95.386, 22.811, 16.923)), (' A 204  ALA  HB2', ' A 228  TYR  OH ', -0.414, (90.339, 30.485, 31.746)), (' A  41  MET  HE2', ' B  42  VAL HG13', -0.412, (73.844, 22.535, 19.853)), (' A  41  MET  CE ', ' A  44  VAL HG23', -0.405, (74.718, 23.096, 20.985)), (' A  45  ALA  HB1', ' A 244  LEU HD11', -0.401, (76.907, 32.344, 22.541)), (' A 104  VAL  CG1', ' B  71  ALA  HB1', -0.401, (74.215, 12.338, 14.991)), (' A  41  MET  HE3', ' A  44  VAL HG23', -0.401, (74.848, 23.298, 21.433))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
