# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('a', ' 151 ', 'PRO', None, (198.06400000000005, 138.489, 304.854)), ('a', ' 153 ', 'PRO', None, (195.65100000000007, 141.944, 299.7860000000001)), ('a', ' 193 ', 'PRO', None, (166.745, 129.667, 297.411)), ('b', '   8 ', 'PRO', None, (193.096, 172.78000000000003, 293.645)), ('b', '  28 ', 'SER', None, (213.27700000000002, 173.25100000000006, 287.696)), ('b', '  81 ', 'PRO', None, (184.8, 169.129, 278.413)), ('b', '  99 ', 'PRO', None, (213.92000000000004, 165.46000000000004, 292.9750000000001)), ('b', ' 145 ', 'PRO', None, (174.754, 160.03800000000007, 296.52700000000004))]
data['rota'] = [('C', ' 417 ', 'LYS', 0.26595161986409427, (203.93700000000007, 218.739, 249.213)), ('a', '  71 ', 'LYS', 0.21060941711986547, (217.618, 146.471, 286.002)), ('a', ' 144 ', 'CYS', 0.012204796803416684, (180.599, 135.808, 301.883))]
data['cbeta'] = []
data['probe'] = [(' C 607  GLN  OE1', ' C 674  TYR  HE1', -0.774, (238.733, 180.017, 186.079)), (' A 607  GLN  OE1', ' A 674  TYR  HE1', -0.728, (166.697, 189.077, 185.8)), (' b 110  ILE  O  ', ' b 144  TYR  OH ', -0.72, (178.623, 162.246, 291.465)), (' b  94  GLN  NE2', ' b  96  ASN  OD1', -0.707, (211.109, 170.646, 286.965)), (' B 474  GLN  NE2', ' B 478  THR  O  ', -0.703, (182.93, 180.468, 245.157)), (' a 136  THR  OG1', ' a 139  MET  O  ', -0.703, (163.691, 138.731, 298.376)), (' C 439  ASN  O  ', ' C 443  SER  OG ', -0.688, (217.701, 210.669, 264.472)), (' C 909  ILE  O  ', ' C1108  ASN  ND2', -0.662, (212.417, 199.172, 149.249)), (' A 108  THR  OG1', ' A 234  ASN  O  ', -0.659, (163.852, 192.736, 235.686)), (' B 439  ASN  O  ', ' B 443  SER  OG ', -0.654, (193.401, 213.185, 261.954)), (' C 645  THR  OG1', ' C 648  GLY  O  ', -0.645, (239.446, 197.547, 190.11)), (' B 102  ARG  NH2', ' B 154  GLU  OE1', -0.641, (238.116, 251.08, 239.361)), (' B 560  LEU  O  ', ' B 577  ARG  NH1', -0.634, (167.588, 222.386, 218.215)), (' B 615  VAL  O  ', ' B 649  CYS  N  ', -0.629, (192.519, 237.491, 198.574)), (' A 398  ASP  OD2', ' A 423  TYR  OH ', -0.603, (207.03, 167.212, 252.347)), (' A 645  THR  OG1', ' A 648  GLY  O  ', -0.572, (181.223, 178.375, 188.6)), (' C 102  ARG  O  ', ' C 121  ASN  N  ', -0.56, (228.368, 151.695, 228.098)), (' B 738  CYS  SG ', ' B 764  ASN  ND2', -0.556, (224.36, 198.632, 201.68)), (' b  27  GLU  O  ', ' b  94  GLN  NE2', -0.555, (211.486, 172.123, 288.73)), (' C 105  ILE HD11', ' C 241  LEU HD21', -0.548, (233.848, 156.677, 232.313)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.546, (213.681, 241.949, 205.491)), (' A 102  ARG  O  ', ' A 121  ASN  N  ', -0.546, (147.857, 206.059, 232.816)), (' C 708  SER  OG ', ' C 711  SER  OG ', -0.544, (232.209, 205.114, 144.285)), (' C 318  PHE  N  ', ' C 593  GLY  O  ', -0.543, (234.095, 196.919, 202.142)), (' B 879  ALA  O  ', ' B 883  THR  OG1', -0.536, (228.76, 206.175, 155.268)), (' B1077  THR  OG1', ' B1078  ALA  N  ', -0.533, (195.204, 227.037, 140.299)), (' C 607  GLN  OE1', ' C 674  TYR  CE1', -0.509, (238.977, 179.892, 185.917)), (' B 868  GLU  N  ', ' B 868  GLU  OE1', -0.508, (233.862, 210.002, 176.614)), (' B 777  ASN  OD1', ' B1019  ARG  NH1', -0.505, (217.356, 201.711, 179.396)), (' B 280  ASN  OD1', ' B 283  GLY  N  ', -0.499, (236.095, 229.839, 208.392)), (' B 742  ILE  O  ', ' B1000  ARG  NH1', -0.496, (222.827, 207.092, 210.207)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.49, (156.479, 203.281, 206.959)), (' C 717  ASN  OD1', ' C 718  PHE  N  ', -0.484, (218.872, 188.042, 145.654)), (' C 596  SER  OG ', ' C 613  GLN  NE2', -0.484, (230.777, 195.824, 194.21)), (' C1028  LYS  O  ', ' C1032  CYS  N  ', -0.481, (202.187, 194.343, 162.633)), (' C 607  GLN  OE1', ' C 691  SER  HA ', -0.481, (240.134, 180.269, 186.284)), (' B  34  ARG  NH1', ' B 191  GLU  OE2', -0.467, (231.008, 246.119, 216.808)), (' A 473  TYR  O  ', ' b  32  TYR  OH ', -0.464, (219.442, 166.592, 276.532)), (' A 318  PHE  N  ', ' A 593  GLY  O  ', -0.461, (184.75, 183.807, 200.266)), (' B 167  THR  HG1', ' B 168  PHE  HD1', -0.461, (225.832, 232.81, 241.834)), (' A 607  GLN  OE1', ' A 674  TYR  CE1', -0.458, (166.257, 189.484, 185.34)), (' B1054  GLN  N  ', ' B1061  VAL  O  ', -0.458, (224.434, 214.305, 167.869)), (' B1028  LYS  O  ', ' B1032  CYS  N  ', -0.456, (215.051, 209.627, 163.405)), (' B 280  ASN  OD1', ' B 284  THR  N  ', -0.454, (235.168, 230.864, 209.19)), (' A 553  THR  O  ', ' A 586  ASP  N  ', -0.449, (196.607, 164.795, 205.606)), (' B  14  GLN  N  ', ' B 136  CYS  HG ', -0.448, (223.262, 254.589, 247.711)), (' B 112  SER  N  ', ' B 134  GLN  OE1', -0.447, (219.514, 244.62, 248.974)), (' A 328  ARG  NH2', ' A 580  GLN  OE1', -0.441, (193.938, 160.08, 219.266)), (' A 725  GLU  OE1', ' A1064  HIS  NE2', -0.44, (190.77, 211.555, 165.681)), (' B 717  ASN  OD1', ' B 718  PHE  N  ', -0.44, (215.199, 229.13, 148.37)), (' C 880  GLY  O  ', ' C 884  SER  N  ', -0.439, (192.878, 188.501, 153.441)), (' B 287  ASP  OD1', ' B 288  ALA  N  ', -0.439, (226.61, 238.742, 207.678)), (' C 802  PHE  CD1', ' C 805  ILE HD11', -0.437, (201.016, 180.747, 154.836)), (' C  14  GLN  N  ', ' C 136  CYS  HG ', -0.437, (239.506, 156.846, 241.015)), (' C  29  THR  OG1', ' C 215  ASP  OD2', -0.437, (241.653, 163.167, 209.011)), (' B 725  GLU  OE1', ' B1064  HIS  NE2', -0.434, (216.214, 216.857, 166.993)), (' B 880  GLY  O  ', ' B 884  SER  N  ', -0.432, (225.871, 205.883, 154.518)), (' A 409  GLN  N  ', ' A 409  GLN  OE1', -0.431, (198.752, 170.695, 262.932)), (' B 645  THR  OG1', ' B 648  GLY  O  ', -0.428, (193.574, 237.53, 194.532)), (' B  29  THR  OG1', ' B 215  ASP  OD2', -0.428, (222.675, 255.687, 215.313)), (' C 329  PHE  O  ', ' C 580  GLN  NE2', -0.427, (245.059, 214.305, 229.808)), (' C 287  ASP  OD1', ' C 288  ALA  N  ', -0.417, (225.196, 168.816, 202.197)), (' b 170  GLN  NE2', ' b 175  SER  O  ', -0.415, (180.078, 157.075, 290.292)), (' B 318  PHE  N  ', ' B 593  GLY  O  ', -0.413, (198.84, 232.434, 205.451)), (' A 877  LEU  O  ', ' A 881  THR  OG1', -0.413, (192.736, 223.168, 159.78)), (' B1076  THR  O  ', ' B1097  SER  N  ', -0.412, (199.257, 230.099, 138.546)), (' B 914  ASN  ND2', ' C1123  SER  OG ', -0.408, (215.293, 221.428, 137.764)), (' A 802  PHE  HD1', ' A 805  ILE HD11', -0.407, (183.707, 222.158, 157.662)), (' A 742  ILE  O  ', ' A1000  ARG  NH1', -0.405, (193.796, 216.828, 209.172))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
