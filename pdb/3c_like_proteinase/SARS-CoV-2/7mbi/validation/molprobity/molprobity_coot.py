# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 154 ', 'TYR', 0.005454715584725983, (10.06792, 50.07969000000003, 54.3111)), ('D', ' 154 ', 'TYR', 0.0158912256084265, (53.69538999999998, 30.69079, 49.50737))]
data['omega'] = [('A', '  56 ', 'ASP', None, (13.444759999999995, 6.19506, 52.94529)), ('B', '  49 ', 'MET', None, (41.49134, 30.403250000000014, 73.54897))]
data['rota'] = [('A', '   1 ', 'SER', 0.04045593599231939, (-13.00628, 40.60879, 19.4662)), ('A', '  73 ', 'VAL', 0.22032920555042668, (-15.18937, 11.07075, 52.20021)), ('A', '  90 ', 'LYS', 0.0, (-2.91691, 3.16503, 45.21528)), ('A', ' 125 ', 'VAL', 0.28526904904253886, (-7.789899999999997, 28.955640000000013, 37.92392)), ('A', ' 152 ', 'ILE', 0.2778207670312913, (-7.06363, 20.446870000000015, 27.235849999999996)), ('A', ' 245 ', 'ASP', 0.16077976712295672, (10.05961, 27.13581, 13.0601)), ('A', ' 299 ', 'GLN', 0.10182980761949001, (-9.0561, 33.50907, 20.812769999999997)), ('B', '  27 ', 'LEU', 0.26899162878482086, (30.004319999999993, 40.96725, 74.59725)), ('B', '  46 ', 'SER', 0.22161514385499087, (41.811999999999976, 33.28407, 76.61722)), ('B', ' 104 ', 'VAL', 0.1130841576265963, (20.135199999999987, 38.74974, 54.95874)), ('B', ' 128 ', 'CYS', 0.23980956701597517, (29.219719999999985, 51.63758000000003, 56.56399)), ('B', ' 131 ', 'ARG', 0.0004462569957230701, (33.965889999999966, 46.86701000000003, 50.58976)), ('B', ' 155 ', 'ASP', 0.1886190266174994, (9.065450000000002, 48.69918, 57.73655)), ('B', ' 196 ', 'THR', 0.25556240069109476, (43.35866, 44.16926, 47.69629)), ('B', ' 198 ', 'THR', 0.1388395275210278, (38.8564, 48.44901, 44.80082)), ('B', ' 282 ', 'LEU', 0.04448835049224406, (29.835139999999985, 67.94621, 47.992529999999995)), ('B', ' 297 ', 'VAL', 0.09196332915093135, (17.49644, 58.44512, 46.61054000000001)), ('B', ' 301 ', 'SER', 0.11505647664605687, (13.47903, 62.18851000000001, 48.47607)), ('C', '  64 ', 'HIS', 0.2828688947764701, (-9.45718, 72.8241, 68.23622)), ('C', '  69 ', 'GLN', 0.13662775197610685, (-0.6655299999999998, 62.84917, 65.83517)), ('C', '  73 ', 'VAL', 0.02814317704178393, (-3.37091, 57.650130000000026, 67.97232)), ('C', '  81 ', 'SER', 0.008204927268666597, (1.0984400000000007, 78.81791, 74.54111)), ('C', '  92 ', 'ASP', 0.2855134461752922, (-4.265970000000001, 65.20468000000002, 77.90272)), ('C', ' 104 ', 'VAL', 0.03752423508558422, (20.099999999999987, 73.05222000000003, 76.64429999999999)), ('C', ' 279 ', 'ARG', 0.0, (48.70673000000002, 62.88976999999999, 51.28201)), ('D', '  27 ', 'LEU', 0.031360430926378344, (46.8186, 29.661140000000014, 20.26361)), ('D', '  46 ', 'SER', 0.15388129759441835, (41.25818, 37.36757, 9.09433)), ('D', '  59 ', 'ILE', 0.06113219056933567, (26.968160000000015, 32.60224000000003, 18.2364)), ('D', ' 121 ', 'SER', 0.24413156815470413, (54.24701, 23.624890000000015, 24.16343)), ('D', ' 224 ', 'THR', 0.031662271492429915, (70.05359, 62.27645999999999, 54.79214)), ('D', ' 232 ', 'LEU', 0.1761817083817282, (61.42907, 66.47796999999994, 44.0389))]
data['cbeta'] = [('A', '  56 ', 'ASP', ' ', 0.5323491280397212, (15.420769999999996, 5.987480000000003, 53.80068)), ('B', '  49 ', 'MET', ' ', 0.6056704660931238, (41.72331, 32.78891000000003, 72.39296)), ('B', ' 270 ', 'GLU', ' ', 0.4286447399473349, (37.09155, 64.82259, 33.79307)), ('B', ' 279 ', 'ARG', ' ', 0.5710253411778716, (36.69591, 71.48828, 42.22379)), ('C', '  46 ', 'SER', ' ', 0.26651488901534726, (2.01092, 77.78719, 52.61165)), ('C', '  90 ', 'LYS', ' ', 0.28022027153604684, (-1.26702, 71.49431, 77.11655)), ('D', ' 188 ', 'ARG', ' ', 0.3937123894848958, (41.55651, 45.60919, 17.61387)), ('D', ' 269 ', 'LYS', ' ', 0.36984897023721036, (68.85322, 61.71327000000001, 45.1162))]
data['probe'] = [(' A  61  LYS  NZ ', ' A 503  HOH  O  ', -0.924, (3.397, 9.918, 59.648)), (' B  49  MET  HG2', ' B 189  GLN  HG3', -0.871, (42.278, 35.6, 70.947)), (' D 186  VAL HG23', ' D 188  ARG  HG3', -0.86, (41.808, 47.222, 19.293)), (' A  84  ASN  OD1', ' A 502  HOH  O  ', -0.792, (13.773, 11.203, 39.877)), (' C 199  THR HG21', ' C 239  TYR  CZ ', -0.785, (40.177, 75.168, 58.991)), (' B 211  ALA  HA ', ' B 282  LEU HD21', -0.779, (26.376, 67.575, 45.347)), (' C 279  ARG  HG2', ' C 279  ARG HH11', -0.763, (51.533, 60.897, 52.632)), (' A 127  GLN  NE2', ' A 504  HOH  O  ', -0.752, (-2.737, 31.307, 27.828)), (' B  49  MET  HG2', ' B 189  GLN  CG ', -0.742, (41.767, 35.007, 70.544)), (' B  40  ARG HH11', ' B  82  MET  HE3', -0.725, (30.776, 26.855, 65.308)), (' A  53  ASN  OD1', ' A  56  ASP  HB3', -0.714, (15.552, 7.297, 53.574)), (' B 235  MET  HE2', ' D 180  ASN  HB3', -0.708, (40.116, 44.991, 32.852)), (' D 245  ASP  O  ', ' D 249  ILE HD12', -0.701, (55.191, 50.621, 50.501)), (' D 186  VAL  CG2', ' D 188  ARG  HG3', -0.699, (40.993, 47.906, 20.042)), (' C  43  ILE HD12', ' C  57  LEU  HB3', -0.672, (-0.315, 82.707, 63.526)), (' B 276  MET  HE3', ' B 281  ILE HD12', -0.669, (34.485, 65.831, 41.951)), (' C  67  LEU HD11', ' C  74  GLN  NE2', -0.661, (-5.296, 63.79, 63.379)), (' D  60  ARG  HG3', ' D  60  ARG HH11', -0.654, (30.449, 32.855, 13.64)), (' D 233  VAL  HB ', ' D 269  LYS  HE2', -0.653, (65.668, 64.531, 44.694)), (' A  53  ASN  OD1', ' A  56  ASP  CB ', -0.65, (16.159, 7.137, 52.79)), (' B 253  LEU  O  ', ' B 257  THR HG23', -0.635, (19.39, 62.28, 37.696)), (' A 198  THR HG22', ' A 238  ASN HD21', -0.627, (18.154, 35.745, 28.538)), (' C  67  LEU HD11', ' C  74  GLN HE22', -0.627, (-5.981, 64.153, 63.395)), (' D 109  GLY  HA2', ' D 200  ILE HD13', -0.621, (57.243, 48.431, 38.348)), (' C  21  THR  HB ', ' C  67  LEU HD23', -0.616, (-3.053, 68.377, 60.789)), (' C  68  VAL HG23', ' C  75  LEU  HB2', -0.614, (-1.668, 64.12, 69.533)), (' B 153  ASP  O  ', ' B 155  ASP  N  ', -0.608, (10.005, 48.356, 55.648)), (' B  55  GLU  O  ', ' B  59  ILE HG13', -0.604, (30.406, 20.013, 71.8)), (' A 232  LEU  N  ', ' A 232  LEU HD12', -0.603, (21.269, 38.659, 15.193)), (' D 102  LYS  HG3', ' D 156  CYS  SG ', -0.598, (45.967, 31.248, 44.643)), (' C 305  PHE  O  ', ' C 501  HOH  O  ', -0.598, (32.259, 51.433, 79.951)), (' C  86  VAL HG23', ' C 179  GLY  HA2', -0.595, (11.685, 78.308, 69.817)), (' A  27  LEU HD22', ' A  39  PRO  HG2', -0.593, (2.379, 17.962, 47.735)), (' D 188  ARG  CG ', ' D 188  ARG HH11', -0.59, (41.758, 47.656, 17.974)), (' B   1  SER  N  ', ' C 140  PHE  O  ', -0.588, (16.704, 69.787, 52.358)), (' C  44  CYS  HG ', ' C  54  TYR  HE1', -0.585, (4.273, 81.652, 61.427)), (' C  76  ARG  HD3', ' C  78  ILE HG22', -0.576, (-8.185, 67.922, 75.561)), (' B 209  TYR  HD1', ' B 257  THR HG21', -0.571, (21.778, 62.906, 38.032)), (' C  56  ASP  O  ', ' C  59  ILE HG13', -0.571, (-4.633, 86.481, 66.852)), (' A 228  ASN  O  ', ' A 232  LEU HD13', -0.564, (21.525, 38.854, 13.389)), (' C  87  LEU HD21', ' C  89  LEU HD21', -0.557, (0.11, 74.658, 68.596)), (' A  46  SER  O  ', ' A  49  MET  HG3', -0.553, (12.364, 19.621, 59.35)), (' C 229  ASP  HA ', ' C 232  LEU HD12', -0.553, (52.113, 85.496, 64.871)), (' B 218  TRP  CZ2', ' B 279  ARG  HG3', -0.549, (36.018, 70.913, 40.044)), (' D 222  ARG  HA ', ' D 222  ARG  HE ', -0.549, (75.802, 58.097, 55.817)), (' A  39  PRO  HD3', ' A 162  MET  SD ', -0.548, (2.293, 16.886, 43.514)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.543, (6.962, 14.101, 40.564)), (' B 218  TRP  CE2', ' B 279  ARG  HG3', -0.543, (35.701, 71.143, 39.927)), (' C 245  ASP  O  ', ' C 249  ILE HG13', -0.543, (39.371, 75.132, 76.117)), (' C 199  THR HG21', ' C 239  TYR  CE2', -0.538, (40.908, 74.965, 59.953)), (' D  53  ASN  O  ', ' D  57  LEU HD13', -0.537, (31.902, 39.191, 15.392)), (' C  66  PHE  HB2', ' C  77  VAL HG21', -0.526, (-4.064, 71.513, 68.546)), (' C 134  PHE  O  ', ' C 502  HOH  O  ', -0.523, (21.885, 78.477, 62.938)), (' B  76  ARG  HB3', ' B  92  ASP  OD1', -0.519, (15.568, 32.433, 81.797)), (' D  86  VAL HG13', ' D 179  GLY  HA2', -0.519, (40.324, 38.187, 29.297)), (' C 175  THR HG22', ' C 181  PHE  HA ', -0.518, (16.239, 80.179, 66.763)), (' A 232  LEU  CD1', ' A 232  LEU  N  ', -0.513, (21.406, 39.107, 14.987)), (' B  66  PHE  HB2', ' B  77  VAL HG21', -0.511, (23.291, 31.328, 79.093)), (' C  39  PRO  HB3', ' C 164  HIS  NE2', -0.511, (10.154, 76.489, 64.061)), (' C 233  VAL  HA ', ' C 236  LYS  HE3', -0.51, (48.859, 84.063, 58.686)), (' A  76  ARG  HG2', ' A  76  ARG HH11', -0.506, (-7.476, 0.812, 52.877)), (' C 127  GLN  HG2', ' C 514  HOH  O  ', -0.503, (29.961, 64.338, 65.064)), (' A  76  ARG  CG ', ' A  76  ARG HH11', -0.499, (-7.369, 0.327, 53.158)), (' C  69  GLN  OE1', ' C  71  GLY  O  ', -0.499, (-1.546, 58.242, 63.966)), (' D 166  GLU  O  ', ' D 401  YWJ  N23', -0.498, (51.471, 44.651, 17.742)), (' B 100  LYS  HE2', ' B 155  ASP  OD2', -0.497, (6.207, 45.932, 58.837)), (' B  46  SER  HA ', ' B  49  MET  SD ', -0.482, (41.212, 34.149, 74.705)), (' C  53  ASN  O  ', ' C  57  LEU HD23', -0.481, (-0.012, 87.382, 63.267)), (' C  59  ILE HD12', ' C  60  ARG  N  ', -0.481, (-6.931, 85.568, 67.573)), (' D 243  THR  O  ', ' D 247  VAL HG23', -0.479, (57.882, 55.538, 50.985)), (' D 230  PHE  HA ', ' D 269  LYS  NZ ', -0.477, (65.626, 63.694, 47.101)), (' C  67  LEU  CD1', ' C  74  GLN HE22', -0.473, (-5.861, 64.825, 63.495)), (' D 225  THR HG22', ' D 226  THR  O  ', -0.473, (63.896, 63.078, 50.957)), (' C 190  THR  O  ', ' C 192  GLN  HG3', -0.47, (15.466, 84.358, 54.719)), (' B 102  LYS  HD2', ' B 104  VAL  CG1', -0.465, (16.481, 40.462, 54.306)), (' B 218  TRP  CZ3', ' B 279  ARG  NH2', -0.462, (36.885, 71.144, 37.659)), (' D 188  ARG  HG3', ' D 188  ARG HH11', -0.461, (41.553, 47.535, 18.763)), (' C 279  ARG  HG2', ' C 279  ARG  NH1', -0.46, (51.943, 60.871, 53.112)), (' D 198  THR HG22', ' D 238  ASN  OD1', -0.459, (58.585, 59.5, 33.842)), (' C 187  ASP  N  ', ' C 187  ASP  OD1', -0.457, (11.099, 83.746, 62.526)), (' D 165  MET  HB2', ' D 165  MET  HE3', -0.457, (46.968, 42.669, 21.434)), (' B 132  PRO  HD2', ' B 197  ASP  OD1', -0.456, (36.96, 47.274, 48.534)), (' D 228  ASN  O  ', ' D 232  LEU HD22', -0.456, (60.064, 66.479, 47.324)), (' D 225  THR  CG2', ' D 226  THR  N  ', -0.453, (65.242, 63.67, 51.772)), (' C  69  GLN  HG3', ' C  74  GLN  HG2', -0.452, (-3.614, 61.635, 65.406)), (' D  46  SER  HA ', ' D  49  MET  SD ', -0.451, (42.311, 38.24, 9.866)), (' D 228  ASN  O  ', ' D 232  LEU  CD2', -0.451, (60.38, 66.694, 47.501)), (' C 232  LEU  O  ', ' C 236  LYS  HE3', -0.45, (48.181, 84.931, 59.579)), (' D 233  VAL  HB ', ' D 269  LYS  CE ', -0.449, (66.357, 63.865, 44.665)), (' C 114  VAL  O  ', ' C 125  VAL  HA ', -0.448, (19.72, 62.163, 62.732)), (' D 225  THR HG22', ' D 226  THR  N  ', -0.446, (64.922, 63.28, 51.755)), (' D 111  THR HG23', ' D 292  THR HG23', -0.444, (58.478, 43.205, 41.363)), (' C  67  LEU  CD1', ' C  74  GLN  NE2', -0.443, (-5.532, 64.675, 63.94)), (' D 175  THR HG22', ' D 181  PHE  HA ', -0.441, (43.487, 42.976, 29.154)), (' D 239  TYR  CZ ', ' D 272  LEU HD21', -0.44, (67.211, 56.993, 38.868)), (' C 167  LEU  HB3', ' C 168  PRO  HD2', -0.439, (20.657, 81.641, 53.52)), (' D 269  LYS  O  ', ' D 273  GLN  HG3', -0.436, (71.164, 62.536, 42.808)), (' B 231  ASN  O  ', ' B 235  MET  HG2', -0.436, (38.561, 49.642, 33.735)), (' C  53  ASN  OD1', ' C  56  ASP  OD1', -0.436, (-0.053, 90.731, 65.772)), (' C  68  VAL HG22', ' C  75  LEU  O  ', -0.435, (-3.689, 66.018, 69.501)), (' C  69  GLN  HG2', ' C  73  VAL  O  ', -0.433, (-2.051, 60.168, 66.741)), (' B 166  GLU  OE2', ' C   1  SER  OG ', -0.433, (41.908, 49.621, 64.812)), (' B  86  VAL HG23', ' B 179  GLY  HA2', -0.43, (27.551, 33.655, 62.785)), (' C  54  TYR  HA ', ' C  57  LEU  HB2', -0.429, (0.635, 85.256, 64.331)), (' B 276  MET  HE3', ' B 281  ILE  CD1', -0.428, (34.401, 66.219, 42.202)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.425, (-3.302, 37.188, 19.609)), (' D 101  TYR  HA ', ' D 157  VAL  O  ', -0.423, (46.717, 29.547, 42.276)), (' B  24  THR  O  ', ' B 402  FN7  C03', -0.421, (35.674, 39.368, 80.637)), (' C  86  VAL HG23', ' C 179  GLY  CA ', -0.42, (11.623, 78.268, 70.32)), (' B  40  ARG HH11', ' B  82  MET  CE ', -0.42, (31.32, 26.455, 66.014)), (' D 294  PHE  CE2', ' D 298  ARG  HG3', -0.419, (59.382, 36.224, 47.957)), (' D  33  ASP  O  ', ' D  94  ALA  HA ', -0.419, (39.359, 20.17, 34.461)), (' A 282  LEU  HA ', ' A 282  LEU HD23', -0.418, (-5.163, 45.735, 23.568)), (' B 181  PHE  CD1', ' B 185  PHE  HB2', -0.417, (36.07, 36.616, 58.673)), (' B  63  ASN  ND2', ' B  78  ILE  C  ', -0.415, (18.458, 25.877, 78.497)), (' D  27  LEU  C  ', ' D  27  LEU HD23', -0.414, (45.617, 29.095, 21.491)), (' B   5  LYS  HG2', ' B 291  PHE  CZ ', -0.413, (27.839, 59.771, 52.958)), (' D 237  TYR  OH ', ' D 273  GLN  HA ', -0.413, (71.604, 63.902, 38.692)), (' C 131  ARG  HG2', ' C 135  THR  O  ', -0.41, (26.838, 75.705, 61.27)), (' D  83  GLN  OE1', ' D  88  LYS  HD2', -0.41, (35.314, 33.873, 32.645)), (' D  41  HIS  O  ', ' D  44  CYS  HB2', -0.41, (40.347, 35.77, 16.108)), (' B 210  ALA  HB2', ' B 296  VAL HG13', -0.408, (22.59, 61.327, 45.857)), (' A  78  ILE HG13', ' A  90  LYS  HG3', -0.408, (-3.767, 0.151, 46.523)), (' D 276  MET  O  ', ' D 279  ARG  HB2', -0.407, (81.191, 53.961, 39.511)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.407, (-10.427, 9.264, 41.714)), (' A  44  CYS  SG ', ' A  54  TYR  CE1', -0.405, (10.485, 14.316, 52.229)), (' C  43  ILE  CD1', ' C  57  LEU  HB3', -0.405, (0.157, 82.903, 64.289)), (' B  63  ASN  HB3', ' B  77  VAL  O  ', -0.405, (20.142, 27.738, 80.605)), (' A  49  MET  HB2', ' A  49  MET  HE3', -0.405, (13.723, 22.051, 56.937)), (' B  76  ARG  N  ', ' B  92  ASP  OD1', -0.404, (15.962, 33.67, 81.39)), (' B  66  PHE  CB ', ' B  77  VAL HG21', -0.404, (23.403, 31.837, 79.115)), (' B 201  THR  OG1', ' B 239  TYR  HB3', -0.403, (35.39, 51.975, 39.063)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.402, (-2.243, 23.91, 35.399)), (' D 235  MET  HE2', ' D 239  TYR  O  ', -0.4, (59.012, 60.761, 38.919)), (' C  68  VAL  O  ', ' C  68  VAL HG23', -0.4, (-1.969, 64.935, 68.532))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
