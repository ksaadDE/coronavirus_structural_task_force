# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (-2.3649999999999842, -4.371, 32.893))]
data['rota'] = [('A', ' 115 ', 'ARG', 0.0, (-8.830000000000002, 19.691, 49.976)), ('A', ' 134 ', 'ASN', 0.003865084654835176, (-16.331999999999987, -3.638, 25.929)), ('A', ' 140 ', 'GLU', 0.04487498141225428, (-14.807999999999987, -8.385, 31.150999999999993)), ('A', ' 153 ', 'GLU', 0.0, (1.6840000000000082, -1.035, 22.30699999999999)), ('A', ' 190 ', 'MET', 0.0, (-0.7229999999999919, 27.966, 46.17099999999999)), ('A', ' 401 ', 'HIS', 0.06746927319042703, (20.379000000000005, 13.534999999999998, 36.864999999999995)), ('B', ' 386 ', 'LYS', 0.0741336857268715, (61.76900000000007, 4.524, 71.081))]
data['cbeta'] = []
data['probe'] = [(' A 134  ASN  HB2', ' A 135  PRO  CD ', -0.947, (-15.94, -4.889, 24.362)), (' A 134  ASN  HB2', ' A 135  PRO  HD2', -0.945, (-16.108, -5.718, 23.563)), (' A 572  ARG  NH1', ' A 801  HOH  O  ', -0.88, (33.117, 27.264, 33.365)), (' B 362  VAL HG23', ' B 526  GLY  HA2', -0.812, (58.296, -0.143, 82.378)), (' A 134  ASN  CB ', ' A 135  PRO  CD ', -0.755, (-15.721, -4.634, 24.163)), (' A 549  GLU  N  ', ' A 549  GLU  OE1', -0.714, (40.901, 12.198, 30.346)), (' A 134  ASN  N  ', ' A 134  ASN  OD1', -0.71, (-15.194, -4.022, 27.267)), (' A  85  LEU  O  ', ' A  94  LYS  HE2', -0.699, (19.567, 37.527, 48.955)), (' B 362  VAL  CG2', ' B 526  GLY  HA2', -0.679, (58.178, -0.432, 81.925)), (' A 474  MET  HE1', ' A 500  PRO  HD2', -0.678, (-7.875, 17.028, 27.421)), (' B 362  VAL HG23', ' B 527  PRO  HD2', -0.675, (59.352, -0.508, 82.184)), (' B 378  LYS  HD2', ' B 380  TYR  CZ ', -0.655, (50.209, 13.204, 63.772)), (' A 338  ASP  OD1', ' A 340  ARG  HG2', -0.616, (12.944, -11.753, 50.434)), (' A 457  GLU  OE1', ' A 460  ARG  NH2', -0.594, (3.434, 19.008, 32.699)), (' B 362  VAL  CG2', ' B 527  PRO  HD2', -0.592, (59.343, -0.789, 82.332)), (' A 149  ASP  O  ', ' A 153  GLU  HG2', -0.572, (0.256, -1.314, 24.632)), (' A 209  ALA  HB1', ' A 565  PRO  HB3', -0.569, (21.949, 30.089, 37.103)), (' A  85  LEU  HA ', ' A  88  ILE HD12', -0.566, (19.186, 36.237, 51.582)), (' A  25  ALA  HB1', ' A  97  LEU HD11', -0.565, (20.612, 32.285, 55.449)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.558, (58.684, 15.467, 89.023)), (' A 102  LEU HD11', ' A 202  TYR  HE1', -0.553, (7.828, 27.145, 45.242)), (' A 294  THR HG23', ' A 365  THR  HA ', -0.551, (20.062, -10.646, 28.556)), (' A 552  GLN  O  ', ' A 556  GLN  NE2', -0.548, (36.695, 17.359, 36.089)), (' A 379  ILE HG22', ' A 383  MET  HE2', -0.546, (28.208, 6.58, 42.689)), (' A 490  PRO  HA ', ' A 612  PRO  HG2', -0.539, (-9.838, 10.25, 13.69)), (' A  64  VAL  O  ', ' A  68  LYS  HG2', -0.536, (7.866, 10.102, 61.22)), (' A 312  GLU  OE2', ' A 322  LYS  HB2', -0.515, (34.4, 0.267, 42.233)), (' A 105  SER  HA ', ' A 190  MET  HG3', -0.512, (0.839, 24.643, 47.733)), (' A 102  LEU HD11', ' A 202  TYR  CE1', -0.512, (7.509, 26.767, 44.857)), (' A 524  GLN  HG2', ' A 583  PRO  HG2', -0.511, (24.219, 20.052, 23.195)), (' A 402  GLU  HB3', ' A 518  ARG  HD2', -0.506, (16.396, 12.549, 32.055)), (' A 108  LEU HD11', ' A 190  MET  HB2', -0.501, (-1.832, 25.17, 47.209)), (' B 521  PRO  HB2', ' B 523  THR HG23', -0.498, (58.352, 10.968, 89.51)), (' A 131  LYS  HG2', ' A 143  LEU HD22', -0.49, (-9.733, -2.461, 35.233)), (' A 233  ILE HD11', ' A 581  VAL HG21', -0.485, (16.018, 19.963, 19.732)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.485, (58.028, 11.43, 85.318)), (' A 140  GLU  H  ', ' A 140  GLU  HG2', -0.469, (-16.952, -9.192, 29.745)), (' A 523  PHE  CD1', ' A 584  LEU HD12', -0.458, (19.673, 13.99, 22.122)), (' A  95  ARG HH22', ' A 565  PRO  HG3', -0.453, (24.014, 30.704, 40.244)), (' A 325  GLN  O  ', ' A 329  GLU  HG3', -0.451, (29.684, -3.337, 51.031)), (' A 574  VAL HG23', ' A 576  THR  H  ', -0.447, (28.585, 24.255, 26.782)), (' B 502  GLY  O  ', ' B 506  GLN  HG3', -0.439, (30.36, 5.03, 58.206)), (' A 153  GLU  HB3', ' A 277  ASN  ND2', -0.437, (4.205, 0.096, 23.18)), (' B 379  CYS  HA ', ' B 432  CYS  HA ', -0.435, (51.451, 10.285, 68.537)), (' A 168  TRP  CD1', ' A 502  SER  HB2', -0.433, (-6.495, 8.302, 29.606)), (' A 380  GLN  HA ', ' A 383  MET  CE ', -0.431, (29.34, 7.856, 41.816)), (' B 353  TRP  NE1', ' B 466  ARG  HG3', -0.425, (37.831, 18.448, 76.859)), (' A 474  MET  HE3', ' A 498  CYS  HA ', -0.425, (-9.796, 17.125, 28.969)), (' A 153  GLU  H  ', ' A 153  GLU  HG2', -0.423, (0.3, -1.463, 24.379)), (' A  81  LYS  HA ', ' A 101  GLN  HG2', -0.421, (12.243, 32.002, 54.429)), (' B 506  GLN  HA ', ' B 626  HOH  O  ', -0.42, (28.777, 5.238, 62.036)), (' B 362  VAL  O  ', ' B 362  VAL HG13', -0.419, (55.012, -1.755, 83.148)), (' B 431  GLY  HA2', ' B 515  PHE  CD2', -0.418, (53.605, 11.195, 73.611)), (' A 434  THR  HA ', ' A 437  ASN  HB2', -0.41, (19.713, -1.694, 11.875)), (' B 458  LYS  HA ', ' B 458  LYS  HD3', -0.409, (31.271, 32.865, 69.374)), (' A 479  GLU  O  ', ' A 483  GLU  HB2', -0.408, (-2.676, 22.895, 16.723)), (' A 248  LEU HD12', ' A 262  LEU HD22', -0.406, (0.886, 7.607, 11.388)), (' A 535  HIS  CD2', ' A 542  CYS  HB2', -0.404, (32.186, 9.374, 19.056)), (' A 499  ASP  N  ', ' A 500  PRO  HD2', -0.404, (-7.59, 16.168, 28.241)), (' A 523  PHE  CE1', ' A 584  LEU HD12', -0.401, (19.076, 13.681, 21.812)), (' A 249  MET  HB2', ' A 249  MET  HE3', -0.4, (1.437, 6.155, 4.38)), (' A 215  TYR  CZ ', ' A 568  LEU HD13', -0.4, (29.815, 30.079, 34.797))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
