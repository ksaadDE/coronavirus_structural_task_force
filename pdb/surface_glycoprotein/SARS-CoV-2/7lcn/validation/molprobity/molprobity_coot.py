# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 141 ', 'LEU', 0.042129760617770545, (173.508, 108.657, 134.39999999999998)), ('A', ' 145 ', 'TYR', 0.03615833882316147, (180.567, 98.346, 133.75899999999996)), ('A', ' 146 ', 'HIS', 0.029063602105290885, (183.508, 95.86100000000002, 133.488)), ('A', ' 156 ', 'GLU', 0.04245129893410776, (172.72400000000005, 108.78199999999997, 130.354)), ('A', ' 158 ', 'ARG', 0.02781215899098158, (169.016, 107.07599999999996, 124.37999999999998)), ('A', ' 165 ', 'ASN', 0.04037005873624269, (174.757, 126.03799999999997, 121.852)), ('A', ' 603 ', 'ASN', 0.03459434885054102, (169.614, 131.821, 179.621)), ('A', ' 604 ', 'THR', 0.04452746570994079, (166.266, 130.277, 180.892)), ('A', ' 729 ', 'VAL', 0.09589192131358718, (180.25300000000001, 160.528, 187.506)), ('A', ' 793 ', 'PRO', 0.09240338352135576, (199.60599999999997, 150.943, 210.437)), ('B', '  91 ', 'THR', 0.016699160162841908, (178.48900000000006, 72.508, 108.21399999999997)), ('B', ' 100 ', 'SER', 0.08341226698381943, (178.62900000000005, 87.64699999999999, 132.18099999999998)), ('B', ' 101 ', 'PRO', 0.0, (175.73800000000006, 89.93, 131.09799999999998)), ('B', ' 104 ', 'VAL', 0.005156639001363099, (173.14000000000004, 97.775, 133.491)), ('B', ' 114 ', 'ARG', 0.03367983143618972, (170.608, 82.08599999999997, 118.689)), ('B', ' 157 ', 'GLU', 0.0, (168.821, 75.653, 101.988)), ('B', ' 162 ', 'SER', 0.029010677521733134, (151.66600000000005, 73.205, 100.976)), ('B', ' 177 ', 'ALA', 0.024991401486804295, (165.69900000000007, 68.278, 102.645)), ('B', ' 207 ', 'VAL', 0.01810490654960985, (160.08700000000005, 73.347, 95.463)), ('C', ' 123 ', 'ALA', 0.019427279122865068, (113.33700000000007, 185.164, 136.256)), ('C', ' 139 ', 'PRO', 0.04042930241254792, (123.38200000000006, 199.11, 131.522)), ('C', ' 150 ', 'LYS', 0.01827525640290499, (104.55700000000003, 189.48, 123.98)), ('C', ' 157 ', 'PHE', 0.030462945297852848, (117.73000000000009, 199.41, 123.158)), ('C', ' 159 ', 'VAL', 0.07163503479885541, (122.95300000000007, 198.901, 120.023)), ('C', ' 603 ', 'ASN', 0.0330232930132695, (137.384, 187.384, 177.543)), ('C', ' 604 ', 'THR', 0.02931198746459524, (137.69, 190.939, 179.13399999999996)), ('C', ' 614 ', 'ASP', 0.027344380446615645, (163.925, 198.874, 171.307)), ('D', '  27 ', 'SER', 0.04245347041853758, (185.88100000000006, 70.008, 137.942)), ('D', '  54 ', 'SER', 0.04719968858438223, (173.09, 74.66, 141.652)), ('D', '  62 ', 'ASP', 0.04235690963904284, (160.77500000000006, 72.854, 138.915)), ('H', '  55 ', 'ASP', 0.031030665416576706, (93.51300000000003, 189.86, 123.494)), ('H', ' 100 ', 'SER', 0.0069784647950580396, (99.789, 203.691, 125.043)), ('H', ' 101 ', 'PRO', 0.0, (103.21400000000003, 205.26, 124.39099999999999)), ('H', ' 157 ', 'GLU', 0.0, (96.313, 218.017, 93.711)), ('H', ' 162 ', 'SER', 0.0075034230236141015, (100.76100000000002, 234.25, 96.258)), ('H', ' 207 ', 'VAL', 0.0900868756408618, (100.03200000000002, 227.33100000000002, 88.92099999999999)), ('H', ' 213 ', 'ASN', 0.03838614118047599, (104.40400000000002, 217.20499999999996, 83.36)), ('K', ' 141 ', 'LEU', 0.03737681660134987, (220.36200000000005, 203.109, 133.805)), ('K', ' 145 ', 'TYR', 0.007974309289037746, (223.939, 214.704, 134.088)), ('K', ' 146 ', 'HIS', 0.012660425918665485, (224.996, 218.414, 133.548)), ('K', ' 156 ', 'GLU', 0.0065487227013570765, (220.57300000000004, 201.838, 130.371)), ('K', ' 157 ', 'PHE', 0.031898193239752175, (223.549, 201.788, 127.96)), ('K', ' 159 ', 'VAL', 0.09826386337839735, (221.049, 197.405, 124.127)), ('K', ' 419 ', 'ALA', 0.02674758337928664, (163.574, 150.662, 126.64399999999999)), ('K', ' 491 ', 'PRO', 0.05984129766255596, (154.59400000000005, 143.993, 120.201)), ('K', ' 604 ', 'THR', 0.04335610388734261, (203.97400000000005, 186.095, 181.189)), ('K', ' 614 ', 'ASP', 0.022708296595297786, (198.53600000000003, 159.41, 172.05399999999997)), ('K', ' 729 ', 'VAL', 0.07109724444408655, (171.31300000000005, 182.797, 187.201)), ('K', ' 890 ', 'ALA', 0.01098684438843879, (159.009, 182.0, 207.23)), ('K', '1084 ', 'ASP', 0.034841988351032964, (180.35, 154.30399999999995, 240.73799999999994)), ('K', '1099 ', 'GLY', 0.07961613748238068, (196.938, 164.32799999999995, 230.42299999999997)), ('L', '  53 ', 'VAL', 0.08707848175947418, (86.41100000000003, 213.122, 131.566)), ('L', '  62 ', 'ASP', 0.044759654040171085, (95.00200000000001, 224.974, 133.07999999999998)), ('L', '  85 ', 'GLU', 0.02006042353374247, (89.453, 228.35400000000004, 118.60299999999998)), ('L', '  96 ', 'SER', 0.03747648877511558, (90.793, 201.045, 126.466)), ('M', '  88 ', 'SER', 0.018607143578949912, (248.49900000000002, 230.945, 107.20399999999998)), ('M', '  91 ', 'THR', 0.026004070996659013, (247.12400000000002, 224.85400000000007, 108.191)), ('M', ' 100 ', 'SER', 0.0005533811989452324, (235.26900000000006, 216.767, 131.379)), ('M', ' 101 ', 'PRO', 0.0, (234.93800000000002, 213.071, 130.517)), ('M', ' 104 ', 'VAL', 0.07424813144252487, (227.39900000000006, 208.191, 134.503)), ('M', ' 153 ', 'ASP', 0.022676689246552063, (255.757, 221.40900000000005, 92.878)), ('M', ' 155 ', 'PHE', 0.058171213107458444, (250.32600000000002, 218.82, 96.856)), ('M', ' 157 ', 'GLU', 0.0, (249.342, 215.391, 101.338)), ('M', ' 162 ', 'SER', 0.01298215934448897, (260.254, 203.516, 100.871)), ('M', ' 207 ', 'VAL', 0.010900718501934631, (256.0110000000001, 208.792, 94.467)), ('M', ' 213 ', 'ASN', 0.04797855531947059, (244.901, 210.053, 90.296)), ('S', '  94 ', 'ALA', 0.04132297474920792, (240.885, 225.68100000000007, 134.265))]
data['omega'] = [('D', ' 114 ', 'PRO', None, (153.96100000000007, 51.208, 122.287)), ('L', ' 114 ', 'PRO', None, (78.15500000000003, 240.843, 116.59999999999998)), ('S', ' 114 ', 'PRO', None, (277.14600000000013, 213.616, 117.83799999999998))]
data['rota'] = [('C', '  84 ', 'LEU', 0.07682816391494175, (133.76900000000006, 201.436, 138.44)), ('C', ' 143 ', 'VAL', 0.27908631642112236, (112.05900000000003, 195.76, 130.17099999999996)), ('C', ' 145 ', 'TYR', 0.017062573590579336, (105.74800000000003, 195.591, 128.49099999999999)), ('C', ' 159 ', 'VAL', 0.03847231995950312, (122.95300000000007, 198.901, 120.023)), ('C', ' 160 ', 'TYR', 0.015497582152354628, (124.20100000000009, 196.681, 122.947)), ('C', ' 202 ', 'LYS', 0.18446402635732645, (134.724, 183.086, 140.354)), ('C', ' 366 ', 'SER', 0.09390908379609489, (170.19600000000005, 193.668, 126.413)), ('C', ' 382 ', 'VAL', 0.04837239753186697, (173.925, 185.231, 136.55799999999996)), ('C', ' 505 ', 'TYR', 0.019825023028393524, (180.67600000000004, 169.978, 111.019)), ('C', ' 578 ', 'ASP', 0.07852708202633095, (180.28299999999996, 206.85, 146.989)), ('C', ' 603 ', 'ASN', 0.2520573587812185, (137.384, 187.384, 177.543)), ('C', ' 619 ', 'GLU', 0.28359810246553585, (161.05, 207.11, 164.614)), ('C', ' 738 ', 'CYS', 0.10585268876032254, (159.543, 156.574, 162.187)), ('C', ' 739 ', 'THR', 0.0013599335943581536, (159.06500000000005, 154.236, 159.171)), ('C', '1004 ', 'LEU', 0.08862162990903749, (161.29900000000006, 164.195, 163.785)), ('H', '   2 ', 'VAL', 0.07789110116158834, (106.75700000000003, 208.327, 121.25899999999999)), ('H', '  98 ', 'THR', 0.11816686879190422, (97.251, 204.914, 120.42399999999998)), ('H', ' 105 ', 'VAL', 0.007351242675213143, (109.41200000000003, 202.428, 131.155)), ('H', ' 118 ', 'VAL', 0.06422495491284369, (92.94600000000001, 211.692, 101.004)), ('H', ' 150 ', 'LEU', 0.09008765925295241, (91.97800000000002, 231.67699999999996, 87.801)), ('H', ' 151 ', 'VAL', 0.14117325487386867, (92.06100000000004, 227.89699999999996, 87.017)), ('L', '  41 ', 'HIS', 0.04396351237504709, (92.55099999999999, 223.9890000000001, 115.42899999999999)), ('L', '  80 ', 'LEU', 0.13161646503188595, (89.16900000000003, 231.73900000000006, 124.52199999999999)), ('L', '  81 ', 'GLN', 0.22352263301691294, (91.20400000000002, 233.253, 121.62999999999998)), ('L', ' 108 ', 'VAL', 0.10809834245805512, (84.51300000000002, 227.02800000000002, 119.05)), ('L', ' 150 ', 'THR', 0.22292414864702742, (75.78100000000003, 233.334, 100.35799999999999)), ('L', ' 182 ', 'TYR', 0.25044083100665504, (82.75700000000002, 231.054, 90.777)), ('L', ' 196 ', 'TYR', 0.2168241324546071, (76.837, 240.19399999999996, 85.628)), ('A', '  81 ', 'ASN', 0.1887252489074955, (164.36700000000005, 110.73800000000001, 141.201)), ('A', ' 116 ', 'SER', 0.07729972958925926, (170.229, 123.78899999999996, 130.594)), ('A', ' 156 ', 'GLU', 0.2798862915739579, (172.72400000000005, 108.78199999999997, 130.354)), ('A', ' 159 ', 'VAL', 0.06946963363355196, (169.17400000000006, 110.47799999999995, 122.51399999999998)), ('A', ' 160 ', 'TYR', 0.21694203636199613, (171.47800000000004, 113.14899999999996, 124.195)), ('A', ' 366 ', 'SER', 0.06767812088903084, (148.2, 155.358, 126.91599999999998)), ('A', ' 578 ', 'ASP', 0.12170996710710767, (131.89900000000003, 158.789, 146.431)), ('A', ' 603 ', 'ASN', 0.2823327745397446, (169.614, 131.821, 179.621)), ('A', ' 619 ', 'GLU', 0.0580383244699593, (141.808, 142.061, 164.41499999999996)), ('A', ' 721 ', 'SER', 0.1578760267314072, (172.332, 148.094, 206.60299999999998)), ('A', ' 723 ', 'THR', 0.19563546925250255, (172.749, 149.639, 201.10799999999995)), ('A', ' 739 ', 'THR', 0.06699645262187157, (187.42000000000004, 166.88, 159.756)), ('A', '1004 ', 'LEU', 0.0727146091235504, (177.688, 163.801, 163.97299999999998)), ('A', '1094 ', 'VAL', 0.02842376874407879, (158.04, 159.383, 223.57799999999997)), ('B', '  93 ', 'VAL', 0.2053093481554559, (175.43500000000006, 75.59399999999997, 114.006)), ('B', '  98 ', 'THR', 0.27655207670062454, (178.50300000000001, 84.37899999999998, 127.58)), ('B', ' 101 ', 'PRO', 0.0030173686122295946, (175.73800000000006, 89.93, 131.09799999999998)), ('B', ' 102 ', 'PHE', 0.03812715990370514, (174.588, 93.015, 133.012)), ('B', ' 105 ', 'VAL', 0.1604197666789861, (175.65200000000004, 96.545, 136.205)), ('B', ' 118 ', 'VAL', 0.17131729806063437, (175.966, 77.147, 108.15499999999999)), ('B', ' 120 ', 'VAL', 0.2982064927290732, (179.55300000000005, 73.332, 103.877)), ('B', ' 151 ', 'VAL', 0.25405863383788907, (163.94200000000006, 66.882, 93.97099999999999)), ('B', ' 207 ', 'VAL', 0.0073483517854779435, (160.08700000000005, 73.347, 95.463)), ('D', '  49 ', 'MET', 0.1817544501906694, (169.69700000000003, 75.00099999999998, 132.251)), ('D', ' 101 ', 'VAL', 0.07246368133655925, (184.23500000000007, 73.36599999999999, 127.66)), ('D', ' 166 ', 'THR', 0.13249615192810932, (165.786, 60.788, 106.92599999999999)), ('D', ' 200 ', 'VAL', 0.24835604532779412, (160.312, 49.289, 106.54899999999999)), ('K', '  81 ', 'ASN', 0.08564169673273143, (222.78800000000004, 193.225, 141.211)), ('K', '  88 ', 'ASP', 0.09264642395934768, (205.551, 183.056, 144.888)), ('K', '  96 ', 'GLU', 0.17090905083422026, (217.71699999999996, 205.395, 150.536)), ('K', ' 145 ', 'TYR', 0.08952175968726242, (223.939, 214.704, 134.088)), ('K', ' 154 ', 'GLU', 0.2278225703722407, (220.646, 206.2, 128.098)), ('K', ' 159 ', 'VAL', 0.03802770265614414, (221.049, 197.405, 124.127)), ('K', ' 160 ', 'TYR', 0.08539938880282832, (217.897, 197.679, 126.435)), ('K', ' 214 ', 'ARG', 0.026894033252914437, (222.49900000000005, 198.574, 157.9)), ('K', ' 294 ', 'ASP', 0.15044493542929865, (205.28300000000004, 178.381, 165.704)), ('K', ' 366 ', 'SER', 0.04098949289562527, (192.263, 155.552, 127.98199999999999)), ('K', ' 422 ', 'ASN', 0.2182068757397269, (163.635, 144.663, 125.196)), ('K', ' 498 ', 'GLN', 0.2712932758227971, (169.44700000000006, 152.277, 103.831)), ('K', ' 578 ', 'ASP', 0.049834513246241, (197.779, 140.547, 148.44099999999997)), ('K', ' 619 ', 'GLU', 0.2705089817834556, (206.79500000000004, 159.249, 164.802)), ('K', ' 820 ', 'ASP', 0.12632108661036773, (180.17200000000005, 197.546, 191.829)), ('K', '1004 ', 'LEU', 0.1281389876949209, (169.669, 178.283, 163.773)), ('K', '1032 ', 'CYS', 0.09772870186437693, (171.779, 179.775, 203.19299999999998)), ('K', '1094 ', 'VAL', 0.18219425476369108, (183.39499999999998, 164.516, 224.06)), ('K', '1119 ', 'ASN', 0.16071262533621553, (176.99699999999999, 167.43099999999995, 231.471)), ('M', '   2 ', 'VAL', 0.16480595856402078, (236.097, 208.315, 127.293)), ('M', '  37 ', 'VAL', 0.07373563735709396, (243.19100000000006, 224.63600000000002, 119.97799999999998)), ('M', '  70 ', 'MET', 0.006207328665486542, (231.263, 226.06, 117.974)), ('M', '  75 ', 'SER', 0.17579740585112794, (222.24, 212.358, 118.049)), ('M', ' 105 ', 'VAL', 0.06651886110711794, (229.71700000000004, 209.338, 137.333)), ('M', ' 118 ', 'VAL', 0.17877631575330016, (243.732, 220.61500000000004, 107.81599999999999)), ('M', ' 120 ', 'VAL', 0.20916057634233656, (245.4770000000001, 225.645, 104.081)), ('M', ' 151 ', 'VAL', 0.17004682539532817, (259.144, 215.768, 93.945)), ('M', ' 154 ', 'TYR', 0.2928703080410101, (253.26900000000003, 218.828, 94.35099999999998)), ('M', ' 160 ', 'THR', 0.07108099673551964, (254.548, 206.439, 99.452)), ('M', ' 207 ', 'VAL', 0.14415904738168026, (256.0110000000001, 208.792, 94.467)), ('M', ' 217 ', 'ASP', 0.0704790026174968, (256.7000000000001, 206.582, 89.358)), ('S', '  28 ', 'ASP', 0.24886141593334687, (244.5740000000001, 232.42900000000003, 136.05)), ('S', '  50 ', 'ILE', 0.2883671877511275, (249.711, 218.099, 134.156)), ('S', '  67 ', 'SER', 0.12114018012220093, (256.2340000000001, 222.7630000000001, 139.479)), ('S', '  81 ', 'GLN', 0.29580785288674094, (264.837, 210.947, 127.49099999999999)), ('S', '  84 ', 'ASP', 0.10865720349883905, (259.91, 213.363, 126.65899999999999)), ('S', ' 108 ', 'VAL', 0.06572089608953784, (262.572, 220.37700000000004, 125.00099999999999)), ('S', ' 126 ', 'SER', 0.052834197826333175, (269.93300000000005, 212.01199999999994, 87.21)), ('S', ' 168 ', 'THR', 0.24098803804754998, (262.61, 217.634, 110.34))]
data['cbeta'] = [('C', ' 331 ', 'ASN', ' ', 0.2539714491147504, (179.715, 209.883, 137.133)), ('C', ' 391 ', 'CYS', ' ', 0.35974392037569514, (178.29500000000002, 197.001, 137.279)), ('C', '1041 ', 'ASP', ' ', 0.2520782058184422, (161.709, 178.597, 201.26999999999998)), ('H', ' 101 ', 'PRO', ' ', 0.28252748659023863, (103.21500000000003, 206.779, 124.503)), ('H', ' 141 ', 'SER', ' ', 0.25002108193958755, (93.47300000000003, 253.472, 89.278)), ('H', ' 153 ', 'ASP', ' ', 0.28951715088819274, (88.792, 221.727, 82.862)), ('H', ' 157 ', 'GLU', ' ', 0.4431481803883205, (96.73200000000003, 216.777, 94.529)), ('H', ' 163 ', 'TRP', ' ', 0.253666737108769, (99.06500000000003, 236.53700000000003, 92.807)), ('L', '   7 ', 'PRO', ' ', 0.45256306953654724, (75.77300000000002, 221.37900000000005, 120.77699999999999)), ('A', ' 156 ', 'GLU', ' ', 0.25886204164418414, (171.39900000000006, 108.92399999999998, 131.126)), ('A', ' 160 ', 'TYR', ' ', 0.25635792629117676, (172.92600000000004, 112.911, 123.70499999999998)), ('A', ' 391 ', 'CYS', ' ', 0.3626927677596983, (141.163, 161.452, 136.938)), ('A', '1041 ', 'ASP', ' ', 0.26250228236204654, (164.972, 157.942, 201.241)), ('B', ' 104 ', 'VAL', ' ', 0.2816278232738419, (172.224, 99.01100000000001, 133.633)), ('B', ' 144 ', 'THR', ' ', 0.26070554717744193, (146.471, 55.717000000000006, 99.986)), ('B', ' 157 ', 'GLU', ' ', 0.42583864500047697, (169.65, 76.888, 102.404)), ('B', ' 163 ', 'TRP', ' ', 0.2567629549550099, (151.961, 71.493, 96.888)), ('D', '   7 ', 'PRO', ' ', 0.5696816833734342, (175.23000000000005, 58.27, 129.287)), ('K', ' 156 ', 'GLU', ' ', 0.28231494123229334, (220.492, 200.408, 130.912)), ('K', ' 391 ', 'CYS', ' ', 0.3373599079032585, (190.69400000000005, 146.758, 138.226)), ('K', ' 745 ', 'ASP', ' ', 0.2860626925444222, (163.49200000000005, 192.503, 154.175)), ('K', '1041 ', 'ASP', ' ', 0.25082892428212483, (181.19600000000005, 170.965, 201.755)), ('M', ' 101 ', 'PRO', ' ', 0.26984489571805254, (236.25, 212.313, 130.527)), ('M', ' 120 ', 'VAL', ' ', 0.264789909221511, (244.79, 226.76100000000002, 104.89799999999997)), ('M', ' 157 ', 'GLU', ' ', 0.41602420466307827, (248.049, 215.426, 102.184)), ('S', '   7 ', 'PRO', ' ', 0.6001481649230688, (261.919, 230.112, 128.35))]
data['probe'] = [(' A 726  ILE HG22', ' A 948  LEU HD13', -0.735, (177.394, 152.018, 189.272)), (' C 123  ALA  HB3', ' C1302  NAG  H83', -0.551, (113.478, 183.234, 134.208)), (' C 391  CYS  HB2', ' C 525  CYS  HA ', -0.539, (178.713, 197.276, 135.298)), (' K 418  ILE HG23', ' K 422  ASN HD21', -0.503, (164.85, 147.428, 121.921)), (' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.5, (140.81, 161.553, 135.084)), (' C 666  ILE HD11', ' C 672  ALA  HB2', -0.497, (152.459, 196.944, 179.747)), (' K 391  CYS  HB2', ' K 525  CYS  HA ', -0.496, (190.52, 146.199, 136.712)), (' S 137  LEU HD23', ' S 153  TRP  CZ3', -0.491, (274.221, 220.39, 95.385)), (' S 115  LYS  HE2', ' S 145  TYR  CE1', -0.483, (275.071, 220.762, 120.967)), (' C 726  ILE  CG2', ' C 948  LEU HD13', -0.483, (151.315, 170.573, 188.393)), (' S  91  SER  HB2', ' S 102  PHE  CD2', -0.47, (247.072, 225.83, 126.367)), (' C 245  HIS  HA ', ' H 105  VAL  HB ', -0.461, (110.803, 202.665, 133.131)), (' A  90  VAL HG21', ' A 238  PHE  CE1', -0.459, (166.485, 122.025, 143.5)), (' A 726  ILE HG23', ' A1061  VAL HG22', -0.452, (178.568, 151.548, 191.671)), (' K1083  HIS  CG ', ' K1084  ASP  H  ', -0.445, (180.792, 157.136, 239.802)), (' C1089  PHE  CE2', ' K 914  ASN  HA ', -0.44, (177.633, 183.186, 225.006)), (' A 914  ASN  HA ', ' K1089  PHE  CE2', -0.438, (176.413, 154.664, 225.198)), (' D 146  PRO  HD3', ' D 177  TYR  CD1', -0.432, (161.315, 59.607, 117.202)), (' C 666  ILE HD12', ' C 670  ILE HG22', -0.427, (155.239, 198.459, 180.602)), (' C1089  PHE  CE2', ' K 917  TYR  CD2', -0.426, (176.522, 184.866, 224.63)), (' K 726  ILE HG22', ' K 948  LEU HD13', -0.423, (179.373, 183.528, 188.452)), (' C 143  VAL HG22', ' C 144  TYR  H  ', -0.418, (110.287, 195.071, 131.682)), (' H 188  SER  HB3', ' L 182  TYR  CE1', -0.418, (87.311, 231.407, 92.85)), (' A 917  TYR  CD2', ' K1089  PHE  CE2', -0.414, (179.058, 154.9, 224.972)), (' A 714  ILE HD12', ' A1096  VAL HG11', -0.413, (157.025, 153.341, 223.201)), (' K 418  ILE  H  ', ' K 418  ILE HD12', -0.412, (161.192, 151.249, 122.257)), (' D  32  TYR  CG ', ' D  33  ASN  N  ', -0.402, (182.07, 73.346, 142.316)), (' A 391  CYS  CB ', ' A 525  CYS  HA ', -0.401, (140.73, 161.281, 135.725)), (' L   7  PRO  HA ', ' L   8  PRO  HD3', -0.4, (75.614, 220.482, 117.876))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
