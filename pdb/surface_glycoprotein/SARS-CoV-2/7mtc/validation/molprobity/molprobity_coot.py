# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', ' 617 ', 'CYS', None, (175.567, 224.0199999999999, 191.683))]
data['rota'] = [('A', ' 130 ', 'VAL', 0.2140450817177143, (200.257, 146.959, 143.34299999999996)), ('A', ' 790 ', 'LYS', 0.17407143556180926, (215.261, 173.593, 227.326)), ('A', ' 800 ', 'PHE', 0.17018311033111103, (203.702, 161.537, 233.188)), ('A', ' 878 ', 'LEU', 0.1805298816214367, (206.751, 172.262, 224.63899999999995)), ('B', ' 279 ', 'TYR', 0.0010119021180833947, (151.657, 192.554, 179.23899999999998)), ('B', ' 614 ', 'ASP', 0.1524518447894987, (179.7269999999999, 217.893, 192.13699999999997)), ('B', ' 620 ', 'VAL', 0.021689374171496554, (172.661, 222.18899999999988, 186.707)), ('B', ' 800 ', 'PHE', 0.145266231055173, (158.5899999999998, 178.255, 231.82799999999995)), ('B', '1135 ', 'ASN', 0.06647578184764968, (182.71, 201.878, 261.749)), ('C', ' 234 ', 'ASN', 0.2733549369067248, (221.183, 209.683, 153.52)), ('C', ' 279 ', 'TYR', 0.007383930542804296, (212.849, 217.37299999999988, 186.204)), ('C', ' 738 ', 'CYS', 0.10478118033894403, (182.404, 202.706, 181.767)), ('C', ' 800 ', 'PHE', 0.05079048077932476, (195.471, 208.77, 237.14699999999996))]
data['cbeta'] = []
data['probe'] = [(' A 790  LYS  HD3', ' C 702  GLU  OE2', -1.019, (219.466, 174.824, 224.457)), (' C 336  CYS  H  ', ' C 363  ALA  HB2', -0.703, (215.627, 169.064, 142.258)), (' A 318  PHE  HZ ', ' A 615  VAL HG11', -0.672, (167.81, 162.441, 180.964)), (' A 391  CYS  HB3', ' A 522  ALA  HB1', -0.61, (159.602, 183.573, 154.113)), (' C 354  ASN  HB3', ' C 399  SER  HB2', -0.59, (199.973, 166.604, 134.7)), (' B 319  ARG  HE ', ' C 740  MET  HE2', -0.59, (181.422, 212.228, 179.737)), (' C 188  ASN  HB2', ' C 209  PRO  HA ', -0.565, (233.699, 227.353, 178.71)), (' A  34  ARG  NH1', ' A 219  GLY  O  ', -0.56, (197.511, 139.507, 173.752)), (' B 525  CYS  SG ', ' B 526  GLY  N  ', -0.556, (199.247, 222.586, 151.636)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.555, (148.641, 209.905, 151.173)), (' B 626  ALA  O  ', ' B 634  ARG  NH1', -0.552, (163.238, 223.017, 179.578)), (' B 394  ASN  HB3', ' B 516  GLU  HB2', -0.551, (208.814, 217.26, 143.425)), (' A  83  VAL HG11', ' A 237  ARG HH21', -0.54, (185.835, 138.726, 146.279)), (' C 106  PHE  HB2', ' C 117  LEU  HB3', -0.539, (225.918, 217.087, 155.457)), (' A  57  PRO  HG3', ' A 273  ARG  HE ', -0.537, (185.514, 150.156, 168.409)), (' A 726  ILE HG12', ' A1061  VAL HG22', -0.536, (197.854, 167.796, 212.419)), (' B 215  ASP  N  ', ' B 266  TYR  HH ', -0.531, (138.168, 216.627, 173.828)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.53, (169.335, 155.564, 208.808)), (' A 298  GLU  OE2', ' A 316  SER  OG ', -0.526, (180.758, 160.622, 178.736)), (' C 106  PHE  HD2', ' C 117  LEU HD22', -0.524, (225.264, 218.367, 157.487)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.521, (212.252, 160.848, 214.155)), (' C 422  ASN HD21', ' C 454  ARG  H  ', -0.517, (185.345, 169.619, 133.239)), (' A  85  PRO  HA ', ' A 237  ARG  HA ', -0.516, (186.073, 143.594, 150.605)), (' B 627  ASP  HA ', ' B 634  ARG HH12', -0.509, (163.679, 224.047, 178.494)), (' B 620  VAL HG13', ' B 621  PRO  HD3', -0.504, (171.191, 223.755, 187.993)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.501, (194.997, 218.147, 219.434)), (' A 534  VAL HG21', ' A 539  VAL HG11', -0.493, (158.065, 165.075, 163.751)), (' C  65  PHE  O  ', ' C 264  ALA  N  ', -0.493, (241.43, 218.378, 170.69)), (' A 457  ARG  NH1', ' A 459  SER  O  ', -0.483, (175.833, 214.446, 148.046)), (' C 402  ILE HD11', ' C 418  ILE HG13', -0.481, (188.761, 176.342, 135.3)), (' A  47  VAL HG12', ' C 569  ILE HG13', -0.481, (204.815, 161.752, 180.788)), (' A 791  THR  OG1', ' A 792  PRO  HD2', -0.479, (212.871, 169.581, 231.129)), (' B  99  ASN  O  ', ' B 102  ARG  NH1', -0.478, (130.018, 210.156, 157.383)), (' C 353  TRP  O  ', ' C 466  ARG  NH1', -0.474, (194.846, 163.14, 137.247)), (' C 804  GLN  OE1', ' C 935  GLN  NE2', -0.472, (200.264, 214.207, 225.446)), (' A  84  LEU HD13', ' A 267  VAL HG21', -0.47, (187.936, 138.275, 156.863)), (' B 198  ASP  N  ', ' B 198  ASP  OD1', -0.463, (160.856, 202.254, 156.026)), (' B 342  PHE  HE1', ' B 511  VAL HG11', -0.46, (201.879, 229.42, 136.312)), (' A 106  PHE  HB2', ' A 117  LEU  HB3', -0.46, (195.548, 145.024, 147.451)), (' B  34  ARG  NH2', ' B 191  GLU  OE1', -0.459, (142.121, 206.462, 172.35)), (' C 188  ASN HD22', ' C 209  PRO  HB3', -0.456, (234.536, 228.993, 180.357)), (' C 318  PHE  HZ ', ' C 615  VAL HG21', -0.452, (221.194, 181.436, 186.538)), (' B  83  VAL HG11', ' B 237  ARG HH11', -0.451, (149.244, 222.078, 152.889)), (' A 377  PHE  HE2', ' A 384  PRO  HB3', -0.449, (175.287, 182.814, 143.723)), (' C1116  THR  OG1', ' C1118  ASP  OD1', -0.447, (193.095, 180.271, 258.966)), (' B 334  ASN  ND2', ' B 360  ASN  O  ', -0.443, (209.551, 228.089, 152.732)), (' C 229  LEU  HB3', ' C 231  ILE HG12', -0.443, (217.458, 220.147, 157.046)), (' A 642  VAL HG22', ' A 651  ILE HG12', -0.436, (166.96, 151.648, 186.065)), (' B 736  VAL HG22', ' B 858  LEU HD22', -0.435, (174.965, 177.783, 183.798)), (' A 107  GLY  H  ', ' A 235  ILE HG23', -0.432, (191.209, 146.118, 148.304)), (' A 403  ARG  HG3', ' A 405  ASP  H  ', -0.43, (183.769, 200.4, 132.978)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.43, (170.468, 214.581, 215.384)), (' A 200  TYR  HA ', ' A 230  PRO  HA ', -0.427, (200.695, 155.18, 150.563)), (' A 329  PHE  O  ', ' A 580  GLN  NE2', -0.425, (152.965, 174.883, 153.362)), (' B 605  SER  OG ', ' B 606  ASN  N  ', -0.424, (154.836, 210.552, 196.58)), (' A1126  CYS  HB2', ' A1132  ILE HD13', -0.422, (162.345, 176.598, 253.327)), (' C 240  THR  OG1', ' C 241  LEU  N  ', -0.417, (235.61, 220.308, 161.472)), (' C 398  ASP  OD2', ' C 423  TYR  OH ', -0.416, (196.327, 170.253, 142.228)), (' A 326  ILE HG22', ' A 541  PHE  HA ', -0.416, (160.042, 170.658, 161.194)), (' A 334  ASN  N  ', ' A 334  ASN  OD1', -0.41, (152.554, 182.108, 142.938)), (' B 190  ARG  HG2', ' B 207  HIS  ND1', -0.407, (135.724, 203.812, 165.809)), (' C 381  GLY  HA3', ' C 430  THR HG23', -0.406, (201.522, 176.167, 154.029)), (' B 735  SER  OG ', ' B 859  THR  OG1', -0.406, (173.41, 171.656, 186.743)), (' A 377  PHE  CD1', ' A 434  ILE HG12', -0.406, (174.112, 187.646, 140.281)), (' C  88  ASP  N  ', ' C  88  ASP  OD1', -0.401, (224.705, 205.389, 165.193))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
