# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('E', ' 108 ', 'PRO', None, (155.01900000000006, 193.17699999999996, 241.944)), ('F', '   8 ', 'PRO', None, (179.63100000000006, 200.90799999999996, 249.82900000000004)), ('H', ' 108 ', 'PRO', None, (179.24600000000007, 144.03, 243.936)), ('L', '   8 ', 'PRO', None, (172.25000000000006, 118.31800000000003, 247.801))]
data['rota'] = [('B', '  65 ', 'PHE', 0.07338181556674298, (216.49399999999997, 168.03199999999998, 178.495)), ('B', '  96 ', 'GLU', 0.2932999871479378, (220.479, 156.71, 175.14300000000003)), ('B', ' 263 ', 'TYR', 0.17681963137492243, (212.075, 164.823, 175.24700000000004)), ('B', ' 603 ', 'ASN', 0.25109890854513794, (201.809, 169.44299999999998, 148.171)), ('B', ' 875 ', 'LEU', 0.08491295900403324, (177.943, 144.806, 116.266)), ('B', ' 947 ', 'ASP', 0.13335009672648424, (181.44299999999996, 157.729, 139.723)), ('B', '1101 ', 'VAL', 0.16261655759025329, (179.651, 173.32400000000007, 90.94100000000002)), ('B', '1119 ', 'VAL', 0.26768536800534676, (166.896, 177.56500000000003, 85.844)), ('C', '  65 ', 'PHE', 0.001972289283003193, (126.528, 208.217, 170.74800000000002)), ('C', ' 263 ', 'TYR', 0.2017045129570402, (132.04999999999995, 205.662, 168.662)), ('C', ' 307 ', 'LYS', 0.04779134875174612, (144.07899999999995, 186.46399999999997, 137.444)), ('C', ' 359 ', 'VAL', 0.28371598864902225, (125.943, 152.618, 185.436)), ('C', ' 875 ', 'LEU', 0.035171422408303454, (175.574, 183.652, 116.97300000000001)), ('A', '  65 ', 'PHE', 0.01128366496579911, (136.67899999999995, 109.106, 168.139)), ('A', ' 612 ', 'VAL', 0.1890852823099076, (171.655, 131.42100000000002, 150.252)), ('A', ' 875 ', 'LEU', 0.04903364047190333, (143.33799999999994, 162.262, 113.31500000000001)), ('A', '1001 ', 'LEU', 0.17475137061941753, (152.506, 162.402, 154.801)), ('A', '1069 ', 'GLU', 0.05911220981542076, (164.50099999999995, 139.277, 100.581)), ('A', '1119 ', 'VAL', 0.15071638988409058, (180.57699999999994, 159.142, 86.53)), ('L', ' 106 ', 'ILE', 0.277012392655286, (172.996, 122.70100000000002, 261.414)), ('F', ' 106 ', 'ILE', 0.2814526992678481, (173.17800000000003, 199.957, 262.575))]
data['cbeta'] = []
data['probe'] = [(' B1025  LYS  NZ ', ' B1039  PHE  O  ', -0.824, (173.889, 160.988, 121.452)), (' C  34  ARG  NH1', ' C 191  GLU  OE2', -0.774, (140.251, 206.531, 162.267)), (' A 337  GLU  OE1', ' A 353  LYS  NZ ', -0.761, (196.999, 135.877, 200.657)), (' B 337  GLU  OE1', ' B 353  LYS  NZ ', -0.76, (160.345, 209.716, 198.008)), (' A1050  PRO  O  ', ' A1051  GLN  NE2', -0.758, (143.62, 158.484, 117.554)), (' A 537  ASN  OD1', ' A 546  THR  OG1', -0.751, (172.908, 135.601, 167.653)), (' B 575  ASP  OD2', ' B 578  THR  OG1', -0.746, (173.061, 205.462, 171.681)), (' B1091  VAL HG23', ' C 897  MET  HE1', -0.739, (176.931, 178.646, 96.179)), (' C  96  GLU  N  ', ' C  96  GLU  OE1', -0.739, (136.118, 214.963, 167.798)), (' A  96  GLU  N  ', ' A  96  GLU  OE1', -0.735, (126.115, 114.906, 164.134)), (' C 216  LEU HD12', ' C 217  PRO  HD2', -0.715, (135.197, 208.658, 161.68)), (' B 109  THR  OG1', ' B 111  ASP  OD1', -0.71, (200.363, 165.05, 197.643)), (' B 436  ASN  O  ', ' B 440  SER  OG ', -0.707, (172.392, 212.818, 219.707)), (' C 989  GLN  OE1', ' C 992  ARG  NH1', -0.702, (160.324, 170.299, 174.802)), (' B  99  ASN  OD1', ' B 190  ARG  NH2', -0.688, (218.145, 150.331, 176.851)), (' C1025  LYS  NZ ', ' C1039  PHE  O  ', -0.683, (162.537, 173.484, 120.481)), (' C 735  CYS  SG ', ' C 736  THR  N  ', -0.669, (176.222, 171.509, 159.65)), (' C 560  GLN  O  ', ' C 574  ARG  NH2', -0.666, (125.017, 143.155, 163.628)), (' A1071  ASN  OD1', ' A1308  NAG  N2 ', -0.665, (169.6, 135.658, 99.87)), (' C 400  ARG  NH1', ' C 403  GLU  OE2', -0.659, (156.708, 145.921, 201.26)), (' A 284  ASP  OD1', ' A 285  ALA  N  ', -0.658, (138.854, 131.275, 151.736)), (' A  29  THR HG22', ' A  30  ASN  H  ', -0.652, (140.854, 113.439, 157.454)), (' B  96  GLU  N  ', ' B  96  GLU  OE1', -0.649, (218.045, 156.178, 174.407)), (' B 733  VAL HG11', ' B1001  LEU HD21', -0.645, (167.139, 149.68, 154.507)), (' B  81  ASN  O  ', ' B 239  GLN  NE2', -0.641, (213.322, 166.451, 188.825)), (' A 325  ARG  NH1', ' A 575  ASP  OD2', -0.637, (188.53, 129.438, 172.026)), (' A1025  LYS  NZ ', ' A1039  PHE  O  ', -0.634, (158.002, 156.216, 119.798)), (' B 756  PHE  CD2', ' B 998  LEU HD21', -0.632, (158.946, 153.852, 159.85)), (' C 284  ASP  OD1', ' C 285  ALA  N  ', -0.623, (145.996, 198.394, 154.261)), (' C 733  VAL HG13', ' C 855  LEU HD23', -0.623, (171.186, 176.417, 154.952)), (' E  82  MET  HB3', ' E  85  LEU HD21', -0.621, (166.559, 173.312, 237.99)), (' H  82  MET  HB3', ' H  85  LEU HD21', -0.613, (157.159, 145.036, 236.923)), (' B 723  ILE HG22', ' B 945  LEU HD13', -0.613, (180.07, 154.694, 131.504)), (' B 189  LEU HD22', ' B 217  PRO  HG3', -0.612, (213.946, 157.919, 167.474)), (' A 723  ILE HG22', ' A 945  LEU HD13', -0.6, (149.24, 153.068, 128.631)), (' C 733  VAL HG11', ' C1001  LEU HD21', -0.584, (170.308, 173.277, 155.186)), (' C 711  ILE HD12', ' C1093  VAL HG11', -0.584, (149.975, 172.654, 93.591)), (' B 193  VAL HG23', ' B 223  LEU  CD2', -0.584, (203.446, 157.111, 172.661)), (' B 284  ASP  OD1', ' B 285  ALA  N  ', -0.578, (200.898, 158.446, 158.402)), (' B 117  LEU HD13', ' B 130  VAL HG22', -0.577, (200.11, 153.686, 190.257)), (' A 711  ILE HD12', ' A1093  VAL HG11', -0.577, (169.598, 144.777, 94.388)), (' A 291  ASP  N  ', ' A 291  ASP  OD1', -0.576, (150.959, 127.344, 152.17)), (' B1071  ASN  OD1', ' B1308  NAG  N2 ', -0.576, (190.486, 180.892, 103.453)), (' A  81  ASN  O  ', ' A 239  GLN  NE2', -0.576, (136.121, 110.479, 178.934)), (' B 799  PHE  HD1', ' B 802  ILE HD11', -0.568, (184.145, 147.615, 114.371)), (' C 117  LEU HD13', ' C 130  VAL HG22', -0.565, (145.143, 201.686, 186.519)), (' B 277  ASN  OD1', ' B 281  THR  N  ', -0.565, (199.386, 147.255, 159.777)), (' B1087  PRO  O  ', ' C 910  GLN  NE2', -0.563, (170.296, 174.385, 93.727)), (' A 311  GLN  NE2', ' A 313  SER  O  ', -0.558, (161.592, 137.733, 150.965)), (' L  10  THR HG22', ' L 103  LYS  HB3', -0.556, (167.387, 122.48, 252.663)), (' C 325  ARG  NH2', ' C 528  THR  O  ', -0.556, (118.726, 158.93, 171.393)), (' C 911  ASN  ND2', ' C1108  GLU  OE2', -0.552, (161.995, 178.999, 91.852)), (' B 722  GLU  OE1', ' B1061  HIS  NE2', -0.549, (177.559, 159.055, 121.261)), (' A  96  GLU  OE2', ' A 190  ARG  NH1', -0.549, (124.151, 116.846, 165.877)), (' C1050  PRO  O  ', ' C1051  GLN  NE2', -0.548, (171.346, 185.395, 121.159)), (' C  99  ASN  OD1', ' C 190  ARG  NH2', -0.548, (141.476, 218.142, 171.239)), (' B 609  TYR  HE2', ' B 648  ILE HD12', -0.545, (192.57, 182.751, 153.534)), (' F  10  THR HG22', ' F 103  LYS  HB3', -0.545, (177.121, 194.368, 254.672)), (' A 317  VAL HG12', ' A 588  SER  O  ', -0.545, (171.296, 132.049, 157.933)), (' A 300  LEU HD21', ' A 310  TYR  CE2', -0.542, (151.526, 138.816, 143.025)), (' A 723  ILE HD13', ' A 942  LEU HD13', -0.541, (146.818, 150.594, 126.719)), (' C 390  THR  O  ', ' C 520  THR  OG1', -0.536, (130.239, 145.49, 180.473)), (' C 608  LEU HD22', ' C 663  ILE HG23', -0.535, (136.34, 175.838, 140.103)), (' C 724  LEU HD11', ' C1025  LYS  HD2', -0.533, (164.771, 173.944, 124.237)), (' A  71  SER  OG ', ' A  75  GLY  O  ', -0.531, (125.867, 97.297, 177.455)), (' A 756  PHE  CD2', ' A 998  LEU HD21', -0.529, (155.888, 169.148, 159.723)), (' B1132  ASN  ND2', ' B1133  THR  O  ', -0.528, (179.88, 178.715, 82.423)), (' B1088  ARG  NH1', ' B1115  ASP  O  ', -0.528, (171.261, 169.053, 86.195)), (' A 802  ILE HG22', ' A 815  ILE HD12', -0.527, (142.312, 152.147, 115.972)), (' A 614  CYS  N  ', ' A 641  GLN  OE1', -0.525, (172.803, 126.063, 147.937)), (' A 980  ARG  O  ', ' C 380  SER  N  ', -0.524, (141.552, 160.305, 181.385)), (' F  11  LEU  O  ', ' F 105  ASP  N  ', -0.521, (175.07, 198.909, 257.948)), (' A 799  PHE  HD1', ' A 802  ILE HD11', -0.519, (142.681, 155.937, 110.893)), (' C 351  ASN  OD1', ' C 352  ARG  N  ', -0.518, (138.535, 139.665, 193.555)), (' A 117  LEU HD13', ' A 130  VAL HG22', -0.518, (132.278, 128.169, 183.567)), (' B 819  LEU HD22', ' B 942  LEU HD11', -0.516, (184.64, 152.118, 129.888)), (' C 793  ASP  N  ', ' C 793  ASP  OD1', -0.515, (178.018, 192.444, 105.981)), (' A 143  VAL HG12', ' A 154  GLU  HA ', -0.515, (116.856, 111.332, 178.656)), (' C 286  VAL HG23', ' C 303  PHE  CE2', -0.512, (145.351, 194.882, 151.987)), (' C 337  GLU  OE2', ' C 353  LYS  NZ ', -0.511, (130.144, 142.792, 193.731)), (' A 767  ILE HD11', ' A1009  LEU HD23', -0.51, (154.96, 166.474, 143.692)), (' L  11  LEU  O  ', ' L 105  ASP  N  ', -0.509, (171.677, 122.246, 256.374)), (' B 291  ASP  N  ', ' B 291  ASP  OD1', -0.508, (197.956, 170.544, 157.664)), (' A 897  MET  SD ', ' C1074  THR  OG1', -0.505, (147.932, 165.007, 93.351)), (' A1132  ASN  ND2', ' A1133  THR  O  ', -0.504, (175.581, 147.946, 81.33)), (' E 111  GLN  N  ', ' E 111  GLN  OE1', -0.502, (156.378, 184.718, 248.157)), (' B 717  ILE HG13', ' B 920  ILE HG23', -0.501, (187.106, 157.037, 106.751)), (' C  29  THR HG22', ' C  30  ASN  H  ', -0.501, (129.097, 203.678, 160.002)), (' A 317  VAL  O  ', ' A 317  VAL HG13', -0.499, (170.891, 131.497, 160.369)), (' B 143  VAL HG12', ' B 154  GLU  HA ', -0.498, (222.384, 149.643, 190.426)), (' A1101  VAL  O  ', ' A1101  VAL HG13', -0.498, (168.245, 151.347, 88.587)), (' L  81  PRO  HA ', ' L 106  ILE HD13', -0.497, (175.362, 126.662, 261.704)), (' B 593  SER  OG ', ' B 610  GLN  OE1', -0.497, (184.966, 176.134, 149.123)), (' C 363  SER  OG ', ' C 385  ASN  ND2', -0.496, (130.214, 162.413, 187.836)), (' A 146  HIS  O  ', ' A 150  LYS  N  ', -0.496, (105.807, 107.233, 174.041)), (' C  47  VAL HG22', ' C  48  LEU  N  ', -0.492, (156.146, 192.663, 153.642)), (' C 749  LEU HD12', ' C 990  ILE HG21', -0.492, (170.799, 170.226, 172.277)), (' F  81  PRO  HA ', ' F 106  ILE HD13', -0.49, (168.666, 200.094, 262.113)), (' C  71  SER  OG ', ' C  75  GLY  O  ', -0.488, (120.839, 222.052, 181.954)), (' A 286  VAL HG23', ' A 303  PHE  CE2', -0.488, (141.639, 132.513, 149.82)), (' B 723  ILE HG23', ' B1058  VAL HG22', -0.488, (180.948, 154.196, 128.763)), (' A 764  LEU HD23', ' A 767  ILE HD12', -0.487, (152.034, 165.96, 145.144)), (' B  29  THR HG22', ' B  30  ASN  N  ', -0.486, (212.549, 169.247, 167.417)), (' C 899  MET  HE1', ' C1046  LEU HD13', -0.485, (164.694, 181.094, 106.541)), (' A 733  VAL HG11', ' A1001  LEU HD21', -0.485, (148.659, 163.921, 152.841)), (' C 411  GLN  O  ', ' C 421  LYS  NZ ', -0.484, (156.921, 146.462, 186.966)), (' B 117  LEU HD12', ' B 118  LEU  H  ', -0.48, (203.027, 154.771, 191.156)), (' C 201  PHE  HE2', ' C 203  ILE HD11', -0.48, (145.004, 202.862, 178.963)), (' B 799  PHE  CD1', ' B 802  ILE HD11', -0.479, (184.069, 147.46, 113.878)), (' C  29  THR HG22', ' C  30  ASN  N  ', -0.477, (129.079, 203.075, 160.284)), (' B 124  THR  O  ', ' B 175  PHE  N  ', -0.477, (213.481, 140.901, 185.841)), (' C 146  HIS  O  ', ' C 150  LYS  N  ', -0.473, (138.986, 235.359, 180.652)), (' C 100  ILE  HA ', ' C 243  ILE HG22', -0.473, (134.744, 218.391, 176.599)), (' B 562  PHE  O  ', ' C  43  PHE  N  ', -0.471, (161.321, 197.579, 163.971)), (' B 146  HIS  O  ', ' B 150  LYS  N  ', -0.471, (232.692, 142.481, 187.686)), (' F  48  LEU  C  ', ' F  49  ILE HD12', -0.47, (163.221, 203.106, 246.04)), (' A 719  VAL  O  ', ' A 931  ILE HD11', -0.47, (149.301, 147.13, 115.238)), (' A 891  LEU HD13', ' C 712  PRO  HD3', -0.47, (150.438, 174.141, 100.875)), (' L  21  LEU  N  ', ' L  21  LEU HD12', -0.469, (177.884, 121.26, 249.798)), (' A 309  ILE HD12', ' A 595  ILE HD11', -0.469, (161.966, 133.311, 141.247)), (' B  31  SER  HB3', ' B  62  VAL HG23', -0.469, (207.317, 167.871, 169.7)), (' A 293  LEU  O  ', ' A 296  THR  OG1', -0.467, (150.748, 132.659, 146.913)), (' C 898  GLN  O  ', ' C 902  ARG  HG2', -0.467, (170.708, 178.344, 105.123)), (' B 193  VAL HG23', ' B 223  LEU HD23', -0.464, (204.007, 156.572, 172.838)), (' F  21  LEU  N  ', ' F  21  LEU HD12', -0.463, (174.059, 204.155, 250.68)), (' A  34  ARG  NH1', ' A 191  GLU  OE2', -0.462, (132.229, 122.238, 158.942)), (' C 756  PHE  CG ', ' C 757  CYS  N  ', -0.461, (173.913, 165.15, 159.328)), (' B 802  ILE HD12', ' B 875  LEU HD21', -0.46, (182.426, 147.389, 116.372)), (' B1078  ILE HD12', ' B1112  ILE HD13', -0.459, (178.167, 177.94, 87.431)), (' L  48  LEU  C  ', ' L  49  ILE HD12', -0.458, (182.972, 131.483, 247.1)), (' A 777  GLU  O  ', ' A 781  GLN  NE2', -0.457, (151.782, 168.371, 122.772)), (' C 363  SER  O  ', ' C 367  ASN  ND2', -0.457, (132.806, 163.294, 192.605)), (' A 608  LEU HD22', ' A 663  ILE HG23', -0.456, (165.228, 133.41, 141.065)), (' A1085  HIS  CE1', ' A1119  VAL HG12', -0.455, (179.414, 157.484, 83.797)), (' C 124  THR  HG1', ' C 125  ASN  H  ', -0.453, (146.624, 218.017, 184.702)), (' E  90  THR HG23', ' E 116  THR  HA ', -0.453, (169.167, 173.705, 247.59)), (' A 296  THR HG22', ' A 312  THR  CG2', -0.453, (155.456, 134.773, 147.496)), (' A 781  GLN  OE1', ' A1027  SER  OG ', -0.452, (153.971, 168.451, 119.482)), (' B 714  ASN  OD1', ' B 715  PHE  N  ', -0.452, (190.107, 165.021, 104.435)), (' C 331  ASN  O  ', ' C 359  VAL HG12', -0.452, (123.286, 151.57, 185.811)), (' A 943  GLY  O  ', ' A 947  ASP  N  ', -0.452, (149.768, 150.002, 134.593)), (' H 111  GLN  N  ', ' H 111  GLN  OE1', -0.451, (170.497, 146.57, 249.085)), (' C 313  SER  OG ', ' C 314  ASN  N  ', -0.45, (139.601, 176.589, 153.778)), (' H  90  THR HG23', ' H 116  THR  HA ', -0.449, (154.915, 141.222, 246.051)), (' C 719  VAL HG22', ' C1062  VAL HG22', -0.449, (163.318, 184.389, 113.385)), (' A 913  LEU  O  ', ' A 917  GLN  N  ', -0.449, (149.635, 150.954, 95.751)), (' B 306  GLU  O  ', ' B 310  TYR  OH ', -0.447, (191.64, 166.066, 144.424)), (' A 906  ILE HG23', ' A1033  GLN HE22', -0.447, (158.274, 157.556, 105.255)), (' C 296  THR HG22', ' C 312  THR HG22', -0.447, (141.782, 182.421, 147.69)), (' C 143  VAL HG12', ' C 154  GLU  HA ', -0.446, (137.533, 223.368, 184.302)), (' A 305  VAL  HB ', ' A 599  THR HG23', -0.446, (148.531, 132.61, 142.172)), (' C 128  ILE HD13', ' C 229  LEU HD11', -0.444, (148.439, 204.543, 181.925)), (' B  71  SER  OG ', ' B  75  GLY  O  ', -0.442, (229.971, 164.612, 191.146)), (' C 877  GLY  O  ', ' C 881  SER  OG ', -0.441, (179.164, 179.488, 111.356)), (' B 317  VAL  O  ', ' B 317  VAL HG22', -0.44, (184.716, 186.836, 164.07)), (' C 595  ILE  N  ', ' C 595  ILE HD12', -0.44, (137.589, 181.034, 142.02)), (' A  48  LEU HD12', ' A 301  LYS  O  ', -0.439, (143.178, 140.472, 148.096)), (' C 300  LEU HD21', ' C 310  TYR  CE2', -0.439, (147.018, 184.397, 143.844)), (' C 141  LEU  N  ', ' C 141  LEU HD12', -0.439, (133.914, 215.521, 185.433)), (' A1123  CYS  SG ', ' A1129  ILE HD13', -0.438, (185.476, 151.285, 87.066)), (' C 596  THR  O  ', ' C 596  THR HG23', -0.438, (141.659, 186.221, 139.985)), (' C 913  LEU  C  ', ' C 913  LEU HD13', -0.437, (166.839, 183.632, 98.483)), (' A 100  ILE  HA ', ' A 243  ILE HG22', -0.437, (123.308, 111.403, 172.708)), (' L  48  LEU HD23', ' L  59  ILE HD12', -0.435, (182.08, 133.986, 250.915)), (' B 603  ASN  N  ', ' B 603  ASN  OD1', -0.434, (202.858, 168.333, 147.271)), (' A 711  ILE  CD1', ' A1093  VAL HG11', -0.433, (169.512, 145.046, 95.102)), (' H  34  MET  HB3', ' H  78  LEU HD22', -0.433, (172.844, 148.278, 237.445)), (' A 595  ILE  N  ', ' A 595  ILE HD12', -0.433, (159.48, 131.961, 142.564)), (' F  48  LEU HD23', ' F  59  ILE HD12', -0.433, (160.844, 201.16, 249.569)), (' A 913  LEU  C  ', ' A 913  LEU HD13', -0.432, (150.795, 153.634, 96.055)), (' A 801  GLN  OE1', ' A 932  GLN  NE2', -0.431, (137.32, 147.217, 115.037)), (' C 746  CYS  HB2', ' C 974  LEU HD21', -0.43, (171.884, 174.457, 170.464)), (' C 717  ILE HG13', ' C 920  ILE HG23', -0.429, (162.491, 185.017, 105.241)), (' B 782  VAL  O  ', ' B 782  VAL HG13', -0.428, (168.916, 141.044, 119.471)), (' B 313  SER  OG ', ' B 314  ASN  N  ', -0.427, (185.305, 174.729, 158.069)), (' A 563  GLY  O  ', ' A 571  ASP  N  ', -0.426, (185.584, 142.022, 162.143)), (' C 733  VAL HG22', ' C 855  LEU HD22', -0.426, (170.563, 176.73, 153.7)), (' E  34  MET  HB3', ' E  78  LEU HD22', -0.425, (155.936, 184.906, 236.251)), (' C 306  GLU  O  ', ' C 310  TYR  OH ', -0.425, (146.078, 185.563, 140.118)), (' A 143  VAL HG13', ' A 243  ILE HD11', -0.423, (119.741, 111.516, 177.604)), (' A  99  ASN  OD1', ' A 190  ARG  NH2', -0.422, (121.009, 117.563, 167.088)), (' B 723  ILE HD13', ' B 942  LEU HD13', -0.42, (183.841, 154.517, 130.419)), (' C  27  ALA  HB3', ' C  64  TRP  NE1', -0.419, (124.59, 206.42, 166.119)), (' A 193  VAL HG23', ' A 223  LEU  CD2', -0.419, (134.531, 126.615, 165.271)), (' A  13  SER  OG ', ' A  14  GLN  N  ', -0.419, (123.507, 112.253, 191.906)), (' B 141  LEU  O  ', ' B 244  SER  N  ', -0.417, (221.761, 156.176, 189.676)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.417, (154.266, 194.911, 165.951)), (' C 140  PHE  C  ', ' C 141  LEU HD12', -0.416, (133.745, 215.291, 185.756)), (' A 855  LEU HD23', ' A 956  LEU HD22', -0.416, (144.705, 159.288, 149.622)), (' A 119  ILE HG12', ' A 128  ILE HG23', -0.415, (129.167, 126.6, 180.019)), (' A 906  ILE HG23', ' A1033  GLN  NE2', -0.415, (158.4, 157.039, 105.5)), (' C 663  ILE HD11', ' C 669  ALA  HB2', -0.415, (134.95, 179.843, 136.527)), (' B 310  TYR  O  ', ' B 312  THR HG23', -0.414, (188.592, 171.355, 151.181)), (' B 938  THR HG22', ' B 940  SER  H  ', -0.413, (191.494, 158.981, 132.227)), (' B 117  LEU HD11', ' B 128  ILE HG23', -0.413, (202.534, 152.48, 188.632)), (' B 307  LYS  HG3', ' B 661  ILE HD11', -0.413, (194.299, 171.034, 140.381)), (' A 738  TYR  CE2', ' A 963  LEU HD21', -0.412, (145.807, 160.248, 157.738)), (' B 647  LEU HD22', ' B 663  ILE HD13', -0.411, (191.137, 181.257, 143.68)), (' C 712  PRO  HA ', ' C1069  GLU  HA ', -0.411, (148.644, 178.086, 99.642)), (' B 305  VAL  HB ', ' B 599  THR HG23', -0.411, (196.141, 165.831, 147.576)), (' C 557  LEU  O  ', ' C 574  ARG  NH2', -0.411, (124.592, 142.223, 163.445)), (' A  29  THR HG22', ' A  30  ASN  N  ', -0.411, (141.238, 113.8, 158.299)), (' C 653  VAL HG12', ' C 655  ASN  H  ', -0.41, (127.501, 180.851, 126.949)), (' C  22  THR HG22', ' C  23  GLN  N  ', -0.41, (119.02, 209.885, 179.181)), (' H  47  TRP  HZ2', ' H  50  VAL HG12', -0.41, (171.043, 141.327, 231.214)), (' B 719  VAL HG22', ' B1062  VAL HG22', -0.41, (184.642, 155.119, 114.417)), (' B1138  LEU  HG ', ' B1142  LEU HD13', -0.409, (171.956, 167.557, 71.133)), (' B  22  THR HG22', ' B  23  GLN  N  ', -0.409, (220.856, 172.573, 187.901)), (' C 548  VAL HG23', ' C 587  CYS  HA ', -0.409, (127.768, 164.714, 157.276)), (' B 745  GLU  N  ', ' B 745  GLU  OE1', -0.407, (162.529, 142.229, 172.181)), (' A1057  VAL HG22', ' A1058  VAL  N  ', -0.406, (148.116, 157.813, 122.797)), (' B1057  VAL HG22', ' B1058  VAL  N  ', -0.406, (177.627, 151.43, 125.659)), (' C 733  VAL HG22', ' C 855  LEU  CD2', -0.406, (170.818, 176.78, 153.908)), (' B 598  GLY  O  ', ' B 601  THR  N  ', -0.405, (200.715, 166.318, 142.673)), (' B  36  VAL HG21', ' B 220  PHE  HE1', -0.404, (201.749, 158.957, 163.087)), (' E  47  TRP  HZ2', ' E  50  VAL HG12', -0.404, (164.092, 186.92, 231.073)), (' B 696  LEU  O  ', ' C 785  ILE HG12', -0.403, (186.185, 180.864, 123.713)), (' B 595  ILE  N  ', ' B 595  ILE HD12', -0.403, (191.357, 175.515, 146.831)), (' A  22  THR HG22', ' A  23  GLN  N  ', -0.403, (137.797, 101.085, 176.292)), (' C 117  LEU HD12', ' C 118  LEU  H  ', -0.403, (142.679, 204.193, 186.603)), (' B1123  CYS  SG ', ' B1129  ILE HD13', -0.403, (170.968, 185.815, 86.856)), (' A 617  VAL HG11', ' A 648  ILE HD11', -0.402, (165.726, 125.195, 150.183)), (' C 613  ASN  OD1', ' C 614  CYS  N  ', -0.402, (125.016, 170.071, 145.324)), (' A 717  ILE HG13', ' A 920  ILE HG23', -0.401, (150.602, 149.668, 103.558)), (' C 653  VAL HG12', ' C 655  ASN  N  ', -0.401, (127.632, 180.326, 126.67)), (' C  92  PHE  HE2', ' C 240  THR  HG1', -0.401, (133.744, 206.39, 175.524)), (' A 567  ALA  HB1', ' B 960  VAL HG11', -0.4, (178.725, 147.858, 157.833)), (' B 469  ILE HD12', ' B 481  LYS  HB3', -0.4, (146.683, 205.297, 230.969)), (' B 105  ILE  O  ', ' B 238  PHE  HA ', -0.4, (205.472, 162.46, 187.66))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
