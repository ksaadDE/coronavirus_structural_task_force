# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  40 ', 'ASP', 0.04476102818103196, (80.717, -14.164999999999997, 18.520000000000007))]
data['omega'] = []
data['rota'] = [('A', ' 289 ', 'LEU', 0.03911584778418286, (41.55299999999997, -30.576, 18.033))]
data['cbeta'] = [('B', ' 229 ', 'GLN', ' ', 0.257325566017988, (66.546, -60.721, -10.69))]
data['probe'] = [(' A  66  VAL HG23', ' B 227  GLY  HA3', -0.846, (58.777, -58.795, -13.639)), (' A 194  GLN  H  ', ' A 404  EDO  H11', -0.778, (70.312, -10.843, -19.169)), (' B  23  MET  HA ', ' B  46  PRO  HG2', -0.71, (83.481, 0.9, 20.758)), (' B  38  GLY  HA2', ' B  84  MET  HE3', -0.682, (84.442, -18.064, 14.581)), (' B 240  PRO  HA ', ' B 307  GLU  O  ', -0.64, (92.443, -44.177, -9.241)), (' A  66  VAL  CG2', ' B 227  GLY  HA3', -0.637, (58.128, -58.917, -14.017)), (' B 105  LYS  NZ ', ' B 502  HOH  O  ', -0.615, (88.011, -35.507, 26.011)), (' B  38  GLY  H  ', ' B  84  MET  HE1', -0.595, (85.715, -16.963, 14.539)), (' A   4  THR HG23', ' A 749  HOH  O  ', -0.594, (46.113, -79.932, -0.529)), (' A  17  HIS  ND1', ' A 406  EDO  H21', -0.583, (49.042, -66.287, -10.031)), (' B  61  ASP  HB2', ' B  64  LEU  H  ', -0.582, (82.43, -6.708, 0.209)), (' B  13  ASN  HB2', ' B  56  TYR  OH ', -0.582, (89.9, -16.53, 7.792)), (' A  74  THR  OG1', ' A 407  EDO  H11', -0.577, (60.72, -48.555, -5.113)), (' A 140  ARG HH21', ' A 409  EDO  H21', -0.569, (37.473, -35.356, -3.179)), (' B  33  PRO  HB2', ' B  58  LEU HD23', -0.568, (77.496, -11.706, 11.4)), (' B  35  TYR  CB ', ' B  84  MET  HE2', -0.551, (84.207, -15.414, 13.933)), (' A  66  VAL HG23', ' B 227  GLY  CA ', -0.549, (58.718, -58.308, -13.112)), (' A 188  VAL HG22', ' A 194  GLN  HG2', -0.548, (66.805, -10.162, -15.861)), (' B   4  THR  N  ', ' B  21  VAL  O  ', -0.547, (87.536, 3.199, 17.597)), (' B 239  SER  O  ', ' B 307  GLU  O  ', -0.545, (91.722, -44.565, -9.71)), (' B   8  PHE  CE1', ' B  18  THR HG22', -0.54, (94.515, -3.292, 8.05)), (' A  62  ASP  OD1', ' B 228  LYS  HA ', -0.537, (62.385, -62.083, -13.055)), (' B  35  TYR  HB2', ' B  84  MET  HE2', -0.532, (84.094, -14.833, 13.686)), (' A 165  VAL  O  ', ' A 169  MET  HG2', -0.528, (55.607, -32.571, 2.908)), (' B 164  ASP  OD2', ' B 405  EDO  H12', -0.522, (74.565, -43.088, 7.814)), (' B   8  PHE  HB2', ' B  54  THR  HA ', -0.522, (91.788, -8.323, 11.403)), (' A  63  THR  O  ', ' A  67  GLU  HG3', -0.519, (53.687, -60.039, -11.225)), (' A  89  HIS  HB2', ' A 159  VAL HG21', -0.518, (52.494, -47.623, 12.591)), (' B  38  GLY  H  ', ' B  84  MET  CE ', -0.504, (85.775, -17.193, 15.085)), (' B 115 ATHR HG23', ' B 275  HIS  HB2', -0.495, (86.77, -44.129, 10.461)), (' A 166  ARG  HA ', ' A 243  MET  HE1', -0.485, (56.676, -29.98, 1.836)), (' A 133  GLN  NE2', ' A 137  TYR  HE2', -0.483, (42.642, -40.366, -6.839)), (' B  28  GLY  HA3', ' B  42  THR HG23', -0.479, (77.29, -7.342, 15.862)), (' A 223  PRO  HB2', ' B  75  THR  HB ', -0.476, (74.984, -15.29, -3.394)), (' A 252  GLU  OE2', ' A 254  LYS  NZ ', -0.473, (48.117, -9.75, 9.815)), (' B 263  GLU  O  ', ' B 273  TYR  HA ', -0.471, (80.266, -45.908, 12.717)), (' A 194  GLN  N  ', ' A 404  EDO  H11', -0.471, (69.972, -10.666, -18.205)), (' B  38  GLY  CA ', ' B  84  MET  HE3', -0.469, (85.067, -17.724, 15.335)), (' A 210 BTHR HG21', ' A 220  VAL HG11', -0.468, (61.219, -14.72, -1.885)), (' B 194  GLN  NE2', ' B 315  LYS  HE2', -0.464, (75.397, -59.183, -22.758)), (' B   8  PHE  HE1', ' B  18  THR HG22', -0.462, (94.523, -3.276, 7.795)), (' A 294  SER  N  ', ' A 411  SO4  O1 ', -0.462, (39.519, -15.218, 14.632)), (' B 243  MET  HE3', ' B 304  PHE  CZ ', -0.462, (82.825, -43.36, 1.798)), (' B 136  TYR  CZ ', ' B 403  EDO  H11', -0.456, (93.221, -34.588, 1.985)), (' A  66  VAL  CG2', ' B 227  GLY  CA ', -0.456, (58.827, -58.19, -13.704)), (' B 283  TYR  CD1', ' B 290  LEU HD11', -0.455, (95.293, -48.648, 13.992)), (' A 125  LEU  C  ', ' A 125  LEU HD23', -0.45, (47.078, -36.197, -6.485)), (' A  62  ASP  HA ', ' B 227  GLY  O  ', -0.448, (60.292, -61.259, -11.85)), (' A 252  GLU  HG2', ' A 254  LYS  HE2', -0.444, (48.732, -11.072, 8.751)), (' B  33  PRO  HA ', ' B  42  THR  OG1', -0.442, (78.06, -10.235, 14.858)), (' B 263  GLU  OE1', ' B 299  PRO  HD2', -0.426, (81.124, -52.798, 13.361)), (' A 126  LYS  HB2', ' A 177 BASN  ND2', -0.424, (46.081, -36.732, -10.876)), (' A 215  GLN  HG3', ' A 220  VAL HG12', -0.424, (60.359, -12.44, -2.149)), (' A 126  LYS  HG2', ' A 133  GLN HE22', -0.416, (43.511, -39.233, -8.041)), (' B 170  SER  O  ', ' B 174  GLN  HG2', -0.416, (78.336, -33.816, -3.111)), (' A 192  CYS  SG ', ' A 226  CYS  HB3', -0.414, (77.866, -11.387, -11.966)), (' B  34  THR  N  ', ' B  42  THR  OG1', -0.41, (79.303, -10.222, 14.744)), (' B   8  PHE  HB2', ' B  53  LYS  O  ', -0.409, (92.395, -7.296, 11.874)), (' A 215  GLN  HG2', ' A 653  HOH  O  ', -0.407, (59.516, -12.263, 0.509)), (' B 294  SER  OG ', ' B 406  EDO  H11', -0.402, (93.694, -61.701, 13.857)), (' B 190  LYS  HB2', ' B 190  LYS  HE3', -0.401, (67.36, -63.301, -17.569)), (' B 188  VAL HG22', ' B 194  GLN  HG2', -0.401, (73.337, -57.458, -20.512))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
