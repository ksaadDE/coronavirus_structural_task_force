# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 331 ', 'ASN', 0.020389031950347327, (210.497, 217.211, 211.871))]
data['omega'] = [('A', ' 153 ', 'PRO', None, (245.21199999999993, 205.16399999999993, 149.632)), ('A', ' 155 ', 'PRO', None, (241.07499999999993, 202.78899999999993, 153.761)), ('A', ' 195 ', 'PRO', None, (251.48, 170.686, 151.298)), ('A', ' 220 ', 'ASP', None, (258.421, 175.05299999999994, 143.509)), ('B', '  95 ', 'PRO', None, (221.408, 215.56199999999998, 171.877)), ('B', ' 141 ', 'PRO', None, (249.90399999999994, 187.165, 178.352)), ('E', ' 153 ', 'PRO', None, (295.81, 269.51999999999987, 157.61)), ('E', ' 155 ', 'PRO', None, (298.145, 267.7379999999999, 163.182)), ('E', ' 195 ', 'PRO', None, (316.6649999999999, 295.82799999999986, 169.197)), ('E', ' 220 ', 'ASP', None, (314.20499999999987, 297.9939999999999, 155.634)), ('H', '  95 ', 'PRO', None, (290.275, 247.117, 181.756)), ('H', ' 141 ', 'PRO', None, (297.49, 286.477, 187.85))]
data['rota'] = [('C', '  33 ', 'THR', 0.1784660370366697, (264.955, 205.15999999999994, 232.146)), ('C', ' 203 ', 'ILE', 0.08785724985672123, (272.5, 214.28599999999994, 216.452)), ('C', ' 208 ', 'THR', 0.19373498299285827, (280.47, 204.16499999999996, 227.665)), ('C', ' 210 ', 'ILE', 0.06717695924290272, (279.397, 198.16799999999995, 229.693)), ('C', ' 216 ', 'LEU', 0.198080893036537, (269.616, 196.78699999999995, 227.61)), ('C', ' 312 ', 'ILE', 0.07464058728636261, (248.50500000000002, 214.92499999999995, 249.519)), ('C', ' 327 ', 'VAL', 0.03374904700364469, (222.44, 217.376, 216.081)), ('C', ' 336 ', 'CYS', 0.07900537290888837, (207.913, 221.874, 199.62)), ('C', ' 407 ', 'VAL', 0.20441094361259285, (214.218, 220.07399999999998, 173.818)), ('C', ' 524 ', 'VAL', 0.03734403393085746, (214.97799999999995, 227.765, 200.463)), ('C', ' 531 ', 'THR', 0.024563813048826603, (220.53099999999998, 212.87599999999995, 211.547)), ('C', ' 534 ', 'VAL', 0.006301065150182694, (222.046, 210.062, 221.272)), ('C', ' 599 ', 'THR', 0.14557510759445214, (252.111, 209.96399999999997, 247.99799999999996)), ('C', ' 760 ', 'CYS', 0.12110923437995094, (255.89500000000007, 253.48699999999994, 239.292)), ('C', ' 778 ', 'THR', 0.2714854940749259, (261.526, 243.094, 265.617)), ('C', ' 912 ', 'THR', 0.12994581947753742, (250.46899999999994, 225.259, 298.127)), ('C', ' 961 ', 'THR', 0.2193218350945535, (258.627, 233.28399999999996, 240.441)), ('D', '  33 ', 'THR', 0.19320941704050634, (201.0340000000001, 247.0879999999999, 235.76600000000002)), ('D', ' 150 ', 'LYS', 0.24159018860731718, (173.24300000000002, 237.53999999999994, 208.883)), ('D', ' 208 ', 'THR', 0.1445842910966808, (191.61700000000005, 236.25399999999996, 228.51100000000002)), ('D', ' 235 ', 'ILE', 0.22484268675111055, (206.91900000000004, 252.09599999999998, 209.58600000000004)), ('D', ' 312 ', 'ILE', 0.07371632779255001, (219.5020000000001, 252.85099999999994, 254.04000000000002)), ('D', ' 402 ', 'ILE', 0.032634068498787354, (254.092, 268.424, 194.568)), ('D', ' 510 ', 'VAL', 0.007162061861489486, (247.75200000000007, 271.227, 198.25)), ('D', ' 599 ', 'THR', 0.23995131000342138, (212.86400000000006, 252.44599999999994, 253.621)), ('D', ' 760 ', 'CYS', 0.1436663881097895, (247.57500000000005, 230.68399999999994, 235.538)), ('D', ' 881 ', 'THR', 0.2338396660019179, (233.20600000000005, 220.617, 282.22)), ('D', ' 912 ', 'THR', 0.14095646772538037, (230.948, 233.237, 298.646)), ('D', ' 961 ', 'THR', 0.08254075089492514, (229.0470000000001, 237.65899999999993, 240.18500000000003)), ('D', '1081 ', 'ILE', 0.08315584427985609, (236.728, 251.03900000000002, 312.181)), ('E', '  57 ', 'THR', 0.028214962902544306, (292.837, 239.52, 171.507)), ('E', '  67 ', 'ILE', 0.10822176614777221, (288.669, 247.83799999999994, 166.424)), ('E', '  85 ', 'VAL', 0.015546056535296785, (285.56, 256.3339999999999, 163.299)), ('E', ' 158 ', 'VAL', 0.006119304432949563, (305.925, 275.1419999999999, 165.216)), ('E', ' 217 ', 'VAL', 0.03169429146973239, (314.466, 291.5209999999999, 160.38)), ('H', '  19 ', 'VAL', 0.006882352647254785, (300.026, 269.035, 199.493)), ('H', '  88 ', 'CYS', 0.21102794884636403, (294.119, 257.424, 190.613)), ('H', ' 117 ', 'ILE', 0.08832783366608545, (299.942, 294.5839999999999, 168.469)), ('H', ' 146 ', 'VAL', 0.006201096470382126, (291.649, 291.717, 177.8)), ('K', '  33 ', 'THR', 0.2024209113524136, (268.601, 281.454, 243.08200000000002)), ('K', '  90 ', 'VAL', 0.2339263101932364, (270.841, 280.893, 227.485)), ('K', ' 208 ', 'THR', 0.16348138830499162, (262.395, 295.244, 239.373)), ('K', ' 212 ', 'LEU', 0.11436272258553785, (273.63099999999986, 296.792, 242.92699999999996)), ('K', ' 312 ', 'ILE', 0.08232627816144023, (266.023, 258.31, 256.076)), ('K', ' 392 ', 'PHE', 0.06855287377110002, (274.712, 236.703, 202.63000000000002)), ('K', ' 439 ', 'ASN', 0.28482095765487775, (305.2099999999999, 230.697, 186.38)), ('K', ' 510 ', 'VAL', 0.006360432862395229, (291.841, 233.07099999999994, 189.262)), ('K', ' 573 ', 'THR', 0.03461264199664285, (272.528, 234.37899999999993, 233.307)), ('K', ' 584 ', 'ILE', 0.10689408945809373, (284.361, 228.70099999999996, 233.406)), ('K', ' 599 ', 'THR', 0.22385883256991324, (269.363, 264.281, 257.291)), ('K', ' 912 ', 'THR', 0.06240239958184427, (247.688, 246.205, 301.576)), ('K', ' 916 ', 'LEU', 0.08571060732922896, (245.931, 254.249, 300.23)), ('K', ' 963 ', 'VAL', 0.22562891158282924, (243.11200000000008, 262.164, 241.443)), ('K', '1081 ', 'ILE', 0.039074065256555976, (261.3209999999999, 229.805, 310.236)), ('A', ' 115 ', 'LEU', 0.1239234078959289, (235.883, 206.53099999999995, 155.543)), ('A', ' 143 ', 'THR', 0.05791751317919202, (250.057, 178.70199999999997, 158.672)), ('A', ' 156 ', 'VAL', 0.21539644003633, (241.18099999999995, 198.05599999999998, 152.273)), ('A', ' 158 ', 'VAL', 0.005881313795673169, (241.466, 191.687, 152.881)), ('B', ' 144 ', 'ILE', 0.06301856695666568, (255.01799999999997, 190.90499999999997, 175.645))]
data['cbeta'] = []
data['probe'] = [(' C 329  PHE  CD2', ' C 330  PRO  HD2', -0.985, (214.601, 218.495, 210.418)), (' C 329  PHE  CE1', ' C 528  LYS  HG3', -0.783, (217.236, 219.697, 209.141)), (' C 329  PHE  CG ', ' C 330  PRO  HD2', -0.666, (215.458, 218.38, 211.401)), (' K1047  TYR  HB2', ' K1067  TYR  HB3', -0.59, (250.917, 249.303, 289.792)), (' E  40  PHE  HB2', ' E  44  LYS  HB2', -0.59, (290.45, 263.637, 177.436)), (' A  39  LYS  HB3', ' A  92  THR  HB ', -0.578, (234.534, 204.696, 164.211)), (' C 781  VAL HG22', ' C1026  ALA  HB2', -0.571, (254.72, 242.341, 269.851)), (' D 902  MET  SD ', ' D 905  ARG  NH1', -0.568, (229.557, 225.092, 287.062)), (' C 189  LEU  HB2', ' C 210  ILE HG12', -0.567, (277.128, 199.669, 226.2)), (' K 902  MET  SD ', ' K 905  ARG  NH1', -0.565, (240.762, 253.676, 292.07)), (' A  40  PHE  HB2', ' A  44  LYS  HB3', -0.564, (237.525, 209.324, 169.37)), (' C1035  GLY  HA3', ' K1040  VAL HG21', -0.561, (252.731, 238.733, 284.167)), (' C 328  ARG  HG3', ' C 533  LEU HD22', -0.557, (217.437, 213.91, 217.962)), (' C  35  GLY  HA3', ' C  56  LEU  HB3', -0.554, (264.431, 208.36, 225.662)), (' D 150  LYS  HG2', ' D 152  TRP  H  ', -0.542, (175.919, 235.748, 209.654)), (' C 896  ILE HG23', ' C 901  GLN HE21', -0.538, (263.017, 236.875, 291.964)), (' C 326  ILE  HB ', ' C 541  PHE  HA ', -0.537, (224.334, 217.861, 221.083)), (' C 212  LEU HD21', ' C 217  PRO  HG3', -0.534, (273.738, 196.614, 230.013)), (' C 902  MET  SD ', ' C 905  ARG  NH1', -0.531, (259.919, 229.873, 289.246)), (' H  14  SER  HB3', ' H 107  LYS  HB2', -0.527, (301.859, 279.846, 196.236)), (' D1040  VAL HG21', ' K1035  GLY  HA3', -0.525, (237.576, 244.832, 284.364)), (' C 475  ALA  HB3', ' C 487  ASN  HB3', -0.523, (208.046, 238.845, 154.633)), (' D  97  LYS  HB3', ' D 186  PHE  HA ', -0.522, (182.483, 243.142, 225.537)), (' D 781  VAL HG22', ' D1026  ALA  HB2', -0.517, (240.643, 228.928, 267.56)), (' K 598  ILE  HB ', ' K 609  ALA  HB3', -0.514, (272.785, 260.164, 256.644)), (' K 344  ALA  O  ', ' K 509  ARG  NH1', -0.513, (298.471, 224.884, 192.34)), (' D 329  PHE  O  ', ' D 580  GLN  NE2', -0.511, (232.145, 287.593, 222.157)), (' B 108  ARG  NH1', ' B 170  ASP  O  ', -0.508, (239.871, 180.812, 175.324)), (' D  50  SER  OG ', ' D 304  LYS  NZ ', -0.507, (218.754, 243.312, 237.435)), (' D1047  TYR  HB2', ' D1067  TYR  HB3', -0.506, (228.632, 236.759, 287.459)), (' C1089  PHE  HB3', ' D 913  GLN HE21', -0.506, (232.374, 227.259, 301.997)), (' K 246  ARG  HB2', ' K 259  THR  H  ', -0.505, (282.824, 307.722, 223.143)), (' D 478  THR  HB ', ' H   5  THR HG21', -0.504, (283.706, 259.804, 196.133)), (' K 780  GLU  O  ', ' K 784  GLN  NE2', -0.504, (233.784, 249.024, 272.442)), (' B   2  ILE HG23', ' B  27  GLN  HB2', -0.504, (226.263, 215.528, 182.555)), (' D 481  ASN  ND2', ' H   7  SER  O  ', -0.503, (286.506, 267.564, 195.575)), (' C 394  ASN  HB2', ' C 516  GLU  HB3', -0.503, (217.784, 233.583, 191.472)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.501, (212.182, 215.111, 179.971)), (' D  34  ARG  NH1', ' D 191  GLU  OE2', -0.5, (195.303, 243.201, 229.938)), (' K  68  ILE HG22', ' K 262  ALA  HA ', -0.5, (279.06, 301.225, 232.661)), (' D  24  LEU HD22', ' D  78  ARG  HD2', -0.499, (184.569, 260.3, 222.35)), (' D  92  PHE  HB3', ' D 192  PHE  HB2', -0.498, (197.78, 246.099, 220.297)), (' C 669  GLY  HA2', ' C 697  MET  HE2', -0.497, (236.649, 213.857, 259.658)), (' B 128  GLY  HA2', ' B 183  LYS  HD2', -0.496, (265.167, 191.39, 143.865)), (' K 134  GLN  HB3', ' K 161  SER  HB3', -0.496, (274.234, 294.103, 205.513)), (' B  33  VAL  HB ', ' B  51  ALA  HB2', -0.495, (221.033, 203.84, 185.051)), (' D 486  PHE  HB3', ' H   5  THR HG23', -0.494, (284.296, 260.861, 193.564)), (' K  39  PRO  HG3', ' K  51  THR HG21', -0.494, (257.229, 274.957, 235.277)), (' H  54  ARG  NH1', ' H  58  VAL  O  ', -0.493, (314.301, 259.085, 192.553)), (' C  24  LEU HD22', ' C  78  ARG  HD2', -0.493, (264.979, 186.383, 215.118)), (' C 388  ASN  HB3', ' C 529  LYS  HE3', -0.492, (221.711, 219.023, 200.184)), (' C 102  ARG  NH1', ' C 154  GLU  OE2', -0.491, (283.515, 198.321, 208.274)), (' C 111  ASP  OD2', ' C 113  LYS  NZ ', -0.489, (262.065, 206.119, 192.99)), (' D 246  ARG  NH1', ' D 257  GLY  O  ', -0.487, (173.14, 254.748, 208.326)), (' C 551  VAL  HB ', ' C 588  THR  HB ', -0.487, (224.936, 215.678, 232.027)), (' D1056  ALA  HB2', ' D1061  VAL HG23', -0.487, (226.892, 228.089, 265.395)), (' B  24  LYS  NZ ', ' B  70  ASP  OD1', -0.486, (230.577, 209.308, 193.531)), (' E  11  LEU  HB2', ' E 153  PRO  HG3', -0.485, (295.426, 265.534, 156.876)), (' E  44  LYS  NZ ', ' H 100  GLY  O  ', -0.484, (290.085, 264.898, 184.369)), (' C 134  GLN  HB3', ' C 161  SER  HB2', -0.482, (272.675, 204.381, 193.012)), (' C 917  TYR  HB3', ' K1129  VAL HG22', -0.482, (261.336, 223.589, 302.773)), (' D 560  LEU  O  ', ' D 577  ARG  NH2', -0.482, (244.575, 287.065, 234.08)), (' K 246  ARG  NH1', ' K 257  GLY  O  ', -0.481, (286.592, 307.973, 222.515)), (' H 149  LYS  HB2', ' H 193  THR  HB ', -0.481, (291.258, 299.972, 171.227)), (' D 809  PRO  HA ', ' D 814  LYS  HG2', -0.481, (223.528, 211.25, 267.878)), (' H 108  ARG  NH1', ' H 170  ASP  O  ', -0.479, (307.592, 282.94, 187.117)), (' C 676  THR HG23', ' C 689  SER  HB3', -0.477, (254.052, 195.059, 256.657)), (' H 106  ILE  HB ', ' H 166  GLN HE22', -0.476, (303.734, 277.608, 190.048)), (' C 319  ARG  NH1', ' C 320  VAL  O  ', -0.476, (234.859, 216.5, 229.28)), (' D 954  GLN  O  ', ' D1011  GLN  NE2', -0.475, (233.507, 235.676, 248.798)), (' B  37  GLN  HB2', ' B  47  LEU  HB2', -0.474, (225.34, 195.495, 176.839)), (' K 436  TRP  HE1', ' K 509  ARG  HD2', -0.474, (297.151, 229.35, 191.865)), (' D 869  MET  N  ', ' D 869  MET  SD ', -0.472, (231.724, 215.117, 261.846)), (' D 866  THR  OG1', ' D 869  MET  SD ', -0.471, (231.983, 214.952, 259.416)), (' K 966  LEU  O  ', ' K1000  ARG  NH2', -0.471, (242.527, 261.379, 232.9)), (' A   3  GLN  NE2', ' A 110  GLY  O  ', -0.469, (225.775, 195.391, 162.997)), (' C  41  LYS  HB3', ' K 563  GLN  HA ', -0.469, (276.495, 224.168, 225.994)), (' D  44  ARG  HB2', ' D 279  TYR  HD2', -0.469, (213.634, 232.656, 234.847)), (' H  33  VAL  HB ', ' H  51  ALA  HB2', -0.469, (300.431, 252.502, 196.319)), (' D  58  PHE  HB2', ' D 293  LEU HD22', -0.468, (205.216, 252.369, 237.379)), (' K 644  GLN  NE2', ' K 645  THR  O  ', -0.467, (278.895, 247.342, 253.406)), (' H  66  GLY  HA3', ' H  71  PHE  HA ', -0.467, (297.264, 255.556, 201.475)), (' K1032  CYS  SG ', ' K1051  SER  OG ', -0.466, (243.574, 251.138, 281.932)), (' D  84  LEU  HG ', ' D 267  VAL HG11', -0.466, (198.333, 255.752, 219.13)), (' C 289  VAL HG11', ' C 300  LYS  HB2', -0.466, (258.748, 213.766, 239.427)), (' D 439  ASN  O  ', ' D 443  SER  OG ', -0.465, (249.126, 268.197, 183.429)), (' K 725  GLU  OE2', ' K1028  LYS  NZ ', -0.465, (247.835, 248.943, 274.246)), (' E 156  VAL HG21', ' E 183  LEU HD11', -0.464, (300.943, 274.63, 162.81)), (' D 785  VAL HG12', ' D 787  GLN  H  ', -0.463, (240.479, 214.971, 274.401)), (' A 100  HIS  HB2', ' C 503  VAL HG11', -0.462, (208.872, 203.904, 171.242)), (' B   2  ILE  H  ', ' B  97  THR HG21', -0.462, (226.307, 215.838, 177.11)), (' C 193  VAL  HB ', ' C 204  TYR  HB2', -0.462, (270.348, 212.167, 220.757)), (' C  97  LYS  HB3', ' C 186  PHE  HA ', -0.461, (280.195, 193.308, 223.084)), (' H 113  PRO  HB3', ' H 139  PHE  HB3', -0.459, (300.615, 289.639, 181.712)), (' D 666  ILE HD11', ' D 672  ALA  HB2', -0.459, (215.992, 259.01, 258.865)), (' K 756  TYR  HH ', ' K 998  THR  HG1', -0.458, (239.039, 248.9, 229.208)), (' K 957  GLN  O  ', ' K 961  THR  OG1', -0.458, (248.62, 260.114, 246.723)), (' C 280  ASN  OD1', ' C 284  THR  N  ', -0.458, (275.43, 217.185, 236.696)), (' E 179  ASP  N  ', ' E 179  ASP  OD1', -0.456, (287.841, 280.367, 158.027)), (' A 150  GLY  HA2', ' A 180  LEU HD13', -0.455, (253.994, 201.092, 149.308)), (' K 452  LEU HD13', ' K 492  LEU  HB3', -0.455, (288.999, 219.801, 175.054)), (' C 814  LYS  HZ3', ' C 872  GLN  HG2', -0.454, (273.564, 239.267, 274.38)), (' C 552  LEU  HB3', ' C 585  LEU HD13', -0.454, (218.777, 214.904, 226.873)), (' K 401  VAL HG22', ' K 509  ARG  HG2', -0.454, (295.101, 227.682, 187.967)), (' K 559  PHE  HB3', ' K 584  ILE  HB ', -0.454, (282.745, 226.04, 232.971)), (' C 329  PHE  CG ', ' C 330  PRO  CD ', -0.453, (215.116, 218.66, 211.7)), (' H 128  GLY  HA2', ' H 183  LYS  HB2', -0.453, (289.544, 288.907, 151.933)), (' K 117  LEU HD22', ' K 231  ILE HD13', -0.452, (263.307, 284.8, 216.72)), (' C  99  ASN  ND2', ' C 178  ASP  O  ', -0.451, (286.759, 197.447, 215.686)), (' A 107  ASP  HB3', ' B  46  LEU  HB2', -0.451, (220.445, 200.124, 172.543)), (' C1054  GLN  HB2', ' C1061  VAL  HB ', -0.451, (263.429, 229.94, 271.379)), (' K  53  ASP  OD2', ' K 195  LYS  NZ ', -0.45, (260.366, 275.8, 228.988)), (' K 403  ARG  HG3', ' K 497  PHE  HE1', -0.45, (297.739, 230.501, 178.848)), (' K 277  LEU HD22', ' K 285  ILE HD13', -0.45, (258.797, 279.31, 240.293)), (' C  58  PHE  HB2', ' C 293  LEU HD22', -0.45, (258.162, 205.979, 233.33)), (' A 148  VAL HG21', ' A 203  VAL HG11', -0.449, (245.627, 193.176, 149.835)), (' D1006  THR HG23', ' K1005  GLN HE22', -0.449, (238.982, 243.533, 242.341)), (' C 498  GLN  NE2', ' C 500  THR  OG1', -0.448, (199.049, 209.944, 164.244)), (' K  99  ASN  ND2', ' K 178  ASP  O  ', -0.448, (267.42, 305.616, 230.193)), (' K 108  THR  O  ', ' K 236  THR  OG1', -0.448, (274.451, 279.761, 213.874)), (' D 656  VAL HG12', ' D 658  ASN  H  ', -0.447, (210.963, 264.727, 268.39)), (' E 148  VAL  HB ', ' E 183  LEU  HB2', -0.446, (300.41, 279.239, 162.025)), (' D 294  ASP  N  ', ' D 294  ASP  OD1', -0.445, (208.95, 253.774, 241.578)), (' D 326  ILE  HB ', ' D 541  PHE  HA ', -0.445, (230.09, 278.253, 228.622)), (' C 418  ILE  HA ', ' C 422  ASN  HB2', -0.444, (211.396, 229.543, 172.533)), (' A 177  GLN HE21', ' B 160  LEU HD11', -0.443, (256.043, 198.67, 157.546)), (' C 108  THR  O  ', ' C 236  THR  OG1', -0.443, (260.656, 209.174, 203.524)), (' C1056  ALA  HB2', ' C1061  VAL HG23', -0.442, (262.67, 230.512, 267.573)), (' K 565  PHE  HA ', ' K 576  VAL  HA ', -0.442, (278.761, 230.874, 229.858)), (' C 969  ASN  HB2', ' D 755  GLN  HB3', -0.442, (253.724, 235.417, 225.579)), (' D 364  ASP  HA ', ' D 527  PRO  HG3', -0.442, (232.76, 277.922, 209.434)), (' K 656  VAL HG12', ' K 658  ASN  H  ', -0.44, (282.01, 256.582, 268.773)), (' D 393  THR  HA ', ' D 522  ALA  HA ', -0.439, (244.369, 283.017, 218.681)), (' D 328  ARG  NH2', ' D 580  GLN  OE1', -0.439, (230.24, 288.737, 225.721)), (' D1074  ASN  OD1', ' K 895  GLN  NE2', -0.439, (222.574, 253.048, 296.391)), (' H  83  LEU HD22', ' H 166  GLN  HB3', -0.437, (302.725, 274.618, 185.085)), (' A 156  VAL HG21', ' A 183  LEU HD11', -0.437, (244.754, 196.369, 152.867)), (' C 656  VAL HG12', ' C 658  ASN  H  ', -0.436, (239.091, 199.143, 260.186)), (' C 798  GLY  O  ', ' C 920  GLN  NE2', -0.436, (265.59, 223.542, 293.356)), (' C 338  PHE  HB3', ' C 368  LEU HD21', -0.435, (209.75, 216.807, 193.702)), (' K 557  LYS  HB2', ' K 584  ILE HD13', -0.435, (281.767, 226.973, 236.695)), (' C 908  GLY  O  ', ' C1038  LYS  NZ ', -0.434, (246.292, 232.05, 290.02)), (' K  93  ALA  HA ', ' K 191  GLU  HG2', -0.434, (269.595, 289.135, 234.836)), (' D 216  LEU  HA ', ' D 217  PRO  HD3', -0.433, (190.666, 247.157, 232.136)), (' C1005  GLN HE22', ' K1006  THR HG23', -0.433, (247.488, 248.034, 243.231)), (' K 128  ILE HD13', ' K 229  LEU HD11', -0.433, (259.903, 289.778, 218.87)), (' K 809  PRO  HA ', ' K 814  LYS  HG2', -0.432, (229.273, 270.741, 277.56)), (' D 396  TYR  HB2', ' D 514  SER  HB2', -0.431, (249.601, 277.658, 208.883)), (' E  62  SER  O  ', ' E  66  ARG  NH2', -0.431, (281.751, 250.922, 170.869)), (' D 877  LEU HD22', ' D1034  LEU HD21', -0.431, (236.779, 221.985, 276.018)), (' C 152  TRP  HB3', ' C 179  LEU  HB2', -0.431, (288.659, 194.334, 210.245)), (' C  68  ILE HG22', ' C 262  ALA  HA ', -0.43, (275.717, 188.634, 216.598)), (' K 654  GLU  HB3', ' K 693  ILE HG22', -0.43, (280.604, 261.653, 263.633)), (' C 755  GLN  HB2', ' K 969  ASN  HB2', -0.43, (250.661, 258.341, 228.652)), (' D1054  GLN  HB2', ' D1061  VAL  HB ', -0.43, (226.054, 227.221, 269.055)), (' D 456  PHE  H  ', ' D 491  PRO  HB3', -0.429, (268.864, 265.708, 199.059)), (' K 719  THR HG23', ' K1070  ALA  HB2', -0.429, (258.513, 256.867, 292.969)), (' A  29  ILE HD12', ' A  73  THR  HA ', -0.426, (211.857, 203.175, 154.398)), (' D 106  PHE  HD2', ' D 117  LEU HD23', -0.426, (202.642, 245.566, 210.114)), (' D1051  SER  OG ', ' D1064  HIS  ND1', -0.425, (230.923, 231.931, 277.375)), (' A 179  ASP  N  ', ' A 179  ASP  OD1', -0.424, (255.569, 205.997, 153.409)), (' E  43  ASN  ND2', ' H  85  ASP  OD2', -0.424, (297.096, 267.889, 182.38)), (' K 143  VAL  O  ', ' K 146  HIS  NE2', -0.422, (276.427, 310.747, 223.012)), (' A  18  LEU  HB3', ' A  82  LEU  H  ', -0.422, (228.518, 213.082, 153.024)), (' D 289  VAL HG13', ' D 297  SER  HB2', -0.42, (210.163, 247.534, 241.98)), (' K 906  PHE  HB3', ' K 911  VAL  HB ', -0.42, (247.66, 247.512, 297.022)), (' C 401  VAL HG22', ' C 509  ARG  HG2', -0.419, (203.119, 220.08, 179.85)), (' D  33  THR  HB ', ' D 220  PHE  HD1', -0.419, (201.409, 244.479, 236.13)), (' C 330  PRO  O  ', ' C 331  ASN  HB3', -0.419, (209.771, 218.437, 213.5)), (' E 219  ARG  HA ', ' E 220  ASP  HA ', -0.419, (315.996, 296.427, 155.807)), (' C  81  ASN  HB3', ' C 239  GLN HE21', -0.419, (267.784, 196.915, 206.084)), (' C 738  CYS  SG ', ' C 764  ASN  ND2', -0.418, (259.474, 253.139, 241.305)), (' C 380  TYR  OH ', ' C 408  ARG  NH1', -0.418, (221.086, 219.236, 177.617)), (' D 345  THR HG22', ' D 346  ARG  HG2', -0.418, (248.561, 281.189, 187.436)), (' K 294  ASP  N  ', ' K 294  ASP  OD1', -0.417, (271.398, 269.171, 246.199)), (' D  35  GLY  HA3', ' D  56  LEU  HB3', -0.417, (203.333, 248.136, 229.359)), (' C1031  GLU  HA ', ' K1040  VAL  HB ', -0.417, (252.168, 239.552, 281.424)), (' D 867  ASP  N  ', ' D 867  ASP  OD1', -0.416, (228.953, 218.174, 259.426)), (' K 718  PHE  HA ', ' K1069  PRO  HA ', -0.416, (256.98, 253.501, 294.022)), (' C 957  GLN  O  ', ' C 961  THR  OG1', -0.416, (257.994, 231.788, 242.845)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.415, (269.575, 222.142, 227.248)), (' H 170  ASP  N  ', ' H 170  ASP  OD1', -0.415, (309.965, 280.822, 184.318)), (' K  35  GLY  HA3', ' K  56  LEU  HB3', -0.415, (268.123, 280.172, 236.13)), (' D 111  ASP  N  ', ' D 111  ASP  OD1', -0.415, (201.097, 255.731, 201.412)), (' D  40  ASP  N  ', ' D  40  ASP  OD1', -0.414, (212.972, 236.667, 227.385)), (' D 519  HIS  O  ', ' K  41  LYS  NZ ', -0.414, (248.718, 283.02, 225.997)), (' D 924  ALA  O  ', ' D 928  ASN  ND2', -0.414, (216.504, 224.575, 285.83)), (' C 591  SER  OG ', ' C 619  GLU  OE1', -0.412, (231.403, 211.973, 235.904)), (' D1041  ASP  HB2', ' K1030  SER  HB3', -0.411, (234.555, 244.633, 278.03)), (' C 864  LEU  HA ', ' K 667  GLY  HA2', -0.41, (269.328, 247.681, 260.752)), (' C 280  ASN HD21', ' C 284  THR  HB ', -0.41, (276.444, 214.957, 237.051)), (' H  46  LEU HD21', ' H  49  TYR  HB3', -0.41, (305.496, 252.175, 189.136)), (' C  98  SER  HB3', ' C 181  GLY  HA2', -0.409, (283.975, 191.52, 216.197)), (' K1084  ASP  N  ', ' K1084  ASP  OD1', -0.409, (258.733, 224.658, 317.03)), (' C 567  ARG  HG2', ' C 573  THR HG22', -0.408, (221.489, 229.223, 228.948)), (' D 596  SER  OG ', ' D 613  GLN  NE2', -0.408, (223.102, 257.926, 250.812)), (' K  40  ASP  N  ', ' K  40  ASP  OD1', -0.408, (254.002, 277.346, 233.216)), (' B 190  ASN  HA ', ' B 211  ARG  HE ', -0.407, (270.343, 183.291, 153.842)), (' B 170  ASP  N  ', ' B 170  ASP  OD1', -0.407, (238.587, 182.59, 171.341)), (' D 280  ASN  OD1', ' D 284  THR  N  ', -0.407, (205.587, 231.397, 235.582)), (' C1084  ASP  N  ', ' C1084  ASP  OD1', -0.406, (228.388, 222.829, 315.655)), (' C 674  TYR  HE1', ' C 692  ILE HG12', -0.405, (249.253, 205.077, 251.467)), (' C  33  THR  HB ', ' C 220  PHE  HD1', -0.405, (266.831, 206.823, 233.416)), (' A 219  ARG  HA ', ' A 220  ASP  HA ', -0.405, (256.095, 175.502, 142.385)), (' K1010  GLN  O  ', ' K1014  ARG  NH1', -0.404, (245.065, 251.52, 251.365)), (' B 138  ASN  HA ', ' B 172  THR  HB ', -0.403, (244.877, 183.447, 171.737)), (' C 531  THR  HB ', ' C 532  ASN  H  ', -0.403, (221.543, 210.722, 212.527)), (' K 557  LYS  NZ ', ' K 586  ASP  OD2', -0.403, (280.516, 230.77, 240.026)), (' H  38  GLN  HG2', ' H  44  PRO  HB3', -0.402, (301.361, 261.509, 181.972)), (' C 490  PHE  O  ', ' C 493  GLN  NE2', -0.402, (201.942, 232.341, 162.695)), (' D 435  ALA  HB1', ' D 508  TYR  HB3', -0.401, (246.705, 267.973, 195.926)), (' A 114  THR  HB ', ' A 155  PRO  HG3', -0.4, (237.278, 202.018, 155.668)), (' A 148  VAL  HB ', ' A 183  LEU HD12', -0.4, (247.639, 194.336, 151.921))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
