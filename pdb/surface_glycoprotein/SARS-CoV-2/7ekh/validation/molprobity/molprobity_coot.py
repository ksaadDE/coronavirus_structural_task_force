# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (-38.62200000000001, 1.9510000000000016, -30.639))]
data['rota'] = [('A', ' 455 ', 'MET', 0.0, (-21.958, 21.431, -38.971)), ('A', ' 549 ', 'GLU', 0.14869145237093817, (-3.357, 14.761999999999999, -6.066)), ('B', ' 498 ', 'GLN', 0.09334737943403931, (-38.387, 15.457000000000003, 5.24)), ('B', ' 498 ', 'GLN', 0.0017956170797136042, (-38.38400000000001, 15.457000000000003, 5.235000000000002))]
data['cbeta'] = []
data['probe'] = [(' A 288  LYS  NZ ', ' A 431  ASP  OD2', -1.01, (-1.984, -8.159, -31.295)), (' B 383  SER  H  ', ' B 387  LEU HD12', -0.785, (-16.268, 20.095, 34.153)), (' A 419  LYS  NZ ', ' A 428  PHE  O  ', -0.766, (-3.111, -7.093, -18.814)), (' A 490  PRO  HA ', ' A 612  PRO  HG2', -0.743, (-28.254, 8.707, -51.979)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.73, (-26.934, 27.366, 43.488)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.721, (-28.887, 32.174, 45.485)), (' A 290  ASN  ND2', ' A 801  HOH  O  ', -0.704, (-13.297, -5.941, -30.844)), (' A 293  VAL HG21', ' A 423  LEU  HB3', -0.679, (-13.123, -7.459, -14.85)), (' B 378  LYS  NZ ', ' B 701  HOH  O  ', -0.645, (-18.659, 16.466, 19.871)), (' A 457  GLU  HG2', ' A 513  ILE  HB ', -0.633, (-22.932, 24.532, -31.008)), (' B 338  PHE  HE1', ' B 358  ILE HD13', -0.584, (-32.293, 20.397, 34.39)), (' A  39  LEU HD11', ' A  68  LYS  HD2', -0.577, (-44.771, 25.24, -5.051)), (' B 379  CYS  HB2', ' B 384  PRO  HD3', -0.572, (-17.363, 19.303, 29.18)), (' A 198  ASP  OD2', ' A 465  LYS  HA ', -0.556, (-28.277, 35.252, -36.698)), (' B 417  LYS  HE3', ' B 455  LEU HD12', -0.556, (-31.556, 34.076, 6.736)), (' B 362  VAL HG23', ' B 527  PRO  HD2', -0.555, (-27.662, 15.02, 44.104)), (' A 110  GLU  O  ', ' A 114  LYS  HG3', -0.554, (-49.534, 33.366, -25.159)), (' A 415  PRO  HB2', ' A 430  GLU  OE2', -0.54, (-4.263, -3.013, -20.008)), (' A 284  PRO  HD3', ' A 440  LEU HD22', -0.532, (-11.22, -0.865, -36.632)), (' B 362  VAL HG23', ' B 526  GLY  HA2', -0.53, (-28.0, 15.415, 43.473)), (' A 293  VAL  CG2', ' A 423  LEU  HB3', -0.527, (-13.507, -7.805, -15.348)), (' B 338  PHE  CE1', ' B 358  ILE HD13', -0.524, (-32.124, 19.844, 34.31)), (' A  25  ALA  HB1', ' A  97  LEU HD11', -0.516, (-29.705, 41.856, -6.516)), (' B 335  LEU HD23', ' B 362  VAL HG13', -0.511, (-31.584, 13.417, 41.778)), (' A 455  MET  HE3', ' A 455  MET  O  ', -0.508, (-24.424, 22.31, -40.451)), (' A 474  MET  HE1', ' A 500  PRO  HD2', -0.503, (-33.132, 20.291, -42.692)), (' A 574  VAL HG23', ' A 576  ALA  H  ', -0.501, (-5.949, 25.085, -18.346)), (' A 553  LYS  HD3', ' A 573  VAL  O  ', -0.496, (-4.949, 20.111, -13.293)), (' A  55  THR  O  ', ' A  59  VAL HG23', -0.492, (-49.009, 9.089, -13.532)), (' B 391  CYS  HA ', ' B 525  CYS  HA ', -0.49, (-24.347, 21.592, 43.143)), (' A 524  GLN  HG2', ' A 583  PRO  HG2', -0.48, (-6.929, 19.654, -23.409)), (' A  85  LEU HD22', ' A  94  LYS  HG3', -0.479, (-25.83, 42.149, -11.769)), (' A 455  MET  HG2', ' A 485  VAL  CG2', -0.477, (-22.249, 18.218, -40.809)), (' B 334  ASN  O  ', ' B 362  VAL HG12', -0.473, (-33.179, 15.241, 43.173)), (' A 612  PRO  HB3', ' A 814  HOH  O  ', -0.465, (-25.099, 5.43, -53.12)), (' A 455  MET  HG2', ' A 485  VAL HG21', -0.462, (-22.33, 17.744, -41.104)), (' A 293  VAL HG12', ' A 366  MET  HG3', -0.457, (-16.197, -4.931, -18.022)), (' B 377  PHE  CD2', ' B 434  ILE HG12', -0.455, (-24.616, 16.215, 26.256)), (' A 378  HIS  HD1', ' A 401  HIS  HD1', -0.449, (-22.887, 15.697, -14.56)), (' B 362  VAL  CG2', ' B 526  GLY  HA2', -0.445, (-28.13, 15.213, 43.025)), (' A 133  CYS  HA ', ' A 141  CYS  HA ', -0.444, (-45.676, 1.166, -40.64)), (' A 341  LYS  HA ', ' A 341  LYS  HD2', -0.438, (-41.19, -0.471, -14.084)), (' A  24  GLN  HB3', ' A  83  TYR  HE1', -0.431, (-34.017, 45.144, -3.195)), (' A 144  LEU  HA ', ' A 148  LEU  HB2', -0.429, (-37.616, 5.393, -35.702)), (' A  50  TYR  CE1', ' A  59  VAL HG22', -0.423, (-46.714, 9.597, -14.799)), (' A  47  SER  HA ', ' A  62  MET  HG3', -0.421, (-42.347, 14.427, -11.071)), (' A 140  GLU  HA ', ' A 140  GLU  OE1', -0.42, (-46.96, -3.639, -38.483)), (' B 334  ASN  O  ', ' B 362  VAL  N  ', -0.418, (-32.617, 16.652, 43.263)), (' A 435  GLU  OE2', ' A 541  LYS  HD3', -0.415, (-2.224, -0.089, -23.524)), (' B 502  GLY  O  ', ' B 506  GLN  HG3', -0.414, (-30.805, 15.234, 6.838)), (' A 450  LEU  HB2', ' A 451  PRO  HD3', -0.408, (-15.756, 15.515, -35.358)), (' A  22  GLU  OE2', ' A  90  ASN  HB2', -0.406, (-21.794, 43.213, -3.88)), (' B 399  SER  HA ', ' B 510  VAL  O  ', -0.404, (-32.881, 22.569, 23.349)), (' B 363  ALA  H  ', ' B 526  GLY  HA3', -0.401, (-27.897, 16.671, 41.109))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
