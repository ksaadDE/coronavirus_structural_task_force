# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 126 ', 'LYS', 0.0, (-4.676, 86.691, 59.74900000000003)), ('A', ' 270 ', 'CYS', 0.129831253674312, (-29.044000000000022, 72.761, 74.462)), ('A', ' 295 ', 'GLU', 0.1793234311217405, (-13.442000000000002, 88.069, 90.32000000000005)), ('B', '  51 ', 'GLU', 0.1607596294660761, (14.022000000000016, 51.100000000000016, 18.002000000000013)), ('B', ' 228 ', 'LYS', 0.0, (4.031, 42.218000000000025, 89.677)), ('B', ' 238 ', 'GLU', 0.01902208127168537, (24.114000000000015, 36.10600000000002, 67.26700000000005)), ('C', '   6 ', 'LYS', 0.0, (5.9430000000000005, 1.967, 54.205)), ('C', '  80 ', 'LEU', 0.08309283919021003, (8.023000000000007, 24.682000000000002, 56.22600000000003)), ('C', ' 126 ', 'LYS', 0.0, (-10.009000000000004, 34.96200000000001, 49.007000000000026)), ('C', ' 159 ', 'VAL', 0.21159148128286898, (4.341, 31.334, 68.76200000000006)), ('C', ' 294 ', 'SER', 0.22113719350590655, (-26.29800000000002, 48.33700000000003, 72.477))]
data['cbeta'] = []
data['probe'] = [(' B 161  GLU  OE2', ' C 203  GLU  OE2', -0.604, (0.555, 54.125, 49.817)), (' C 181  CYS  HA ', ' C 238  GLU  O  ', -0.521, (-11.336, 47.426, 44.48)), (' A 210  THR HG22', ' A 212  SER  H  ', -0.521, (-6.199, 73.602, 81.875)), (' C  13  ASN  HB2', ' C  56  TYR  OH ', -0.49, (0.061, 18.511, 54.611)), (' C 101  LEU HD23', ' C 140 AARG HH22', -0.489, (-18.138, 33.564, 61.738)), (' B   5  ILE HG13', ' B  21  VAL  CG2', -0.485, (8.666, 49.155, 17.001)), (' B 166  ARG  HA ', ' B 243  MET  HE1', -0.482, (13.233, 49.974, 61.655)), (' C  83  TYR  OH ', ' C 146  ASN  ND2', -0.469, (-1.446, 22.389, 58.358)), (' B  95  TYR  CD1', ' B 144  ALA  HB3', -0.466, (19.506, 57.075, 45.278)), (' C  71  TYR  CD1', ' C 130  PRO  HB2', -0.463, (-2.514, 24.498, 47.831)), (' C 186  ASN HD21', ' C 194  GLN  HG3', -0.457, (-7.302, 66.428, 42.736)), (' C  58  LEU HD21', ' C 611  HOH  O  ', -0.455, (12.339, 23.906, 55.895)), (' B 162  LEU HD11', ' C 223  PRO  HG2', -0.444, (3.409, 64.466, 55.984)), (' B 268  TYR  CE1', ' C 208  MET  HE3', -0.443, (-0.125, 54.151, 63.347)), (' B 174  GLN  OE1', ' C 156 BASN  ND2', -0.442, (9.36, 37.556, 57.263)), (' C  33  PRO  HG2', ' C  58  LEU HD12', -0.44, (15.557, 20.16, 56.286)), (' C 296  TYR  CE1', ' C 300  ILE HD11', -0.423, (-14.332, 49.624, 70.882)), (' C 166  ARG  HA ', ' C 243  MET  HE1', -0.42, (-4.488, 45.515, 60.427)), (' A 195  GLN  NE2', ' A 612  HOH  O  ', -0.418, (2.65, 60.93, 72.304)), (' A   5  ILE HG13', ' A  21  VAL HG22', -0.416, (-31.585, 95.257, 33.549)), (' B 140 BARG  HD3', ' B 601  HOH  O  ', -0.403, (27.271, 48.446, 50.409)), (' A 113  LEU  HA ', ' A 113  LEU HD23', -0.401, (-20.19, 82.244, 66.014))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
