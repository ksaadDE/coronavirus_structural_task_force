# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('AA', '  27 ', 'LEU', 0.2291775389066595, (5.914000000000004, -10.285, 19.233)), ('AA', '  46 ', 'SER', 0.041416820316728824, (9.378, -3.613, 31.272)), ('AA', '  47 ', 'GLU', 0.22222255705327695, (12.267, -2.4850000000000003, 33.47)), ('AA', '  50 ', 'LEU', 0.05547889374702935, (16.064, 0.661, 30.664000000000005)), ('AA', '  55 ', 'GLU', 0.260360833600771, (23.824000000000005, -11.528, 27.41)), ('AA', '  72 ', 'ASN', 0.05389791984057209, (-2.474999999999998, -22.668, 15.207)), ('AA', ' 165 ', 'MET', 0.0, (11.47, 0.442, 18.128)), ('AA', ' 188 ', 'ARG', 0.06550272166115184, (16.897, 0.139, 25.009000000000007)), ('AA', ' 189 ', 'GLN', 0.27688810208638587, (14.680999999999992, 2.954, 26.207000000000004)), ('AA', ' 256 ', 'GLN', 0.0, (11.866, 7.53, -22.011)), ('AA', ' 279 ', 'ARG', 0.07383542591326601, (-1.7720000000000005, 22.831, -7.191000000000001))]
data['cbeta'] = [('AA', '   4 ', 'ARG', 'B', 0.27141050144878076, (-0.9479999999999995, 3.9779999999999998, -6.588)), ('AA', ' 125 ', 'VAL', ' ', 0.2906101000978806, (0.8670000000000003, -4.995, 2.8830000000000005))]
data['probe'] = [('AA   5  LYS  HE3', 'AA 743  HOH  O  ', -0.853, (2.583, 7.191, -0.059)), ('AA  50  LEU  O  ', 'AA 188  ARG  NH2', -0.754, (18.525, 1.51, 28.944)), ('AA 190  THR HG23', 'AA 192  GLN  HG3', -0.662, (18.348, 5.931, 23.413)), ('AA 165 AMET  HE2', 'AA 185  PHE  HB3', -0.645, (16.544, 2.933, 17.858)), ('AA 276 AMET  HE2', 'AA 279 AARG  O  ', -0.614, (0.025, 21.106, -6.151)), ('AA  86  VAL HG13', 'AA 179  GLY  HA2', -0.585, (18.824, -8.204, 13.916)), ('AA   5  LYS  HZ2', 'AA 290  GLU  HB2', -0.563, (6.587, 7.192, -0.29)), ('AA 256 AGLN  HG3', 'AA 401  RT2  O21', -0.55, (11.453, 4.075, -21.498)), ('AA 165 AMET  CE ', 'AA 185  PHE  HB3', -0.544, (16.625, 3.056, 18.097)), ('AA   5  LYS  HB3', 'AA 408   CL CL  ', -0.534, (0.58, 5.162, -0.998)), ('AA 190  THR  OG1', 'AA 191  ALA  N  ', -0.526, (18.27, 7.483, 25.792)), ('AA 109  GLY  HA2', 'AA 200  ILE HD13', -0.526, (15.233, 7.663, -0.005)), ('AA  45  THR  H  ', 'AA  48  ASP  HB2', -0.52, (12.833, -6.518, 30.404)), ('AA 218  TRP  CD1', 'AA 279 BARG  NH2', -0.502, (-0.622, 20.526, -12.918)), ('AA 190  THR HG23', 'AA 192  GLN  CG ', -0.497, (18.329, 5.808, 22.867)), ('AA 276 BMET  HE2', 'AA 287  LEU  CD2', -0.477, (6.29, 19.37, -5.783)), ('AA  27  LEU HD21', 'AA  42  VAL  HB ', -0.466, (10.507, -10.159, 20.859)), ('AA   5  LYS  NZ ', 'AA 290  GLU  HB2', -0.465, (6.64, 7.711, -0.268)), ('AA 276 BMET  HE2', 'AA 287  LEU HD23', -0.464, (6.069, 18.878, -5.55)), ('AA 253  LEU  O  ', 'AA 257  THR HG23', -0.462, (11.361, 9.749, -19.042)), ('AA 223  PHE  CD1', 'AA 223  PHE  N  ', -0.457, (13.312, 27.503, -17.814)), ('AA  31  TRP  CD2', 'AA  95  ASN  HB2', -0.457, (8.355, -22.054, 8.858)), ('AA  45  THR  N  ', 'AA  48  ASP  OD2', -0.457, (12.39, -8.002, 30.623)), ('AA 276 BMET  CE ', 'AA 287  LEU HD23', -0.456, (5.891, 18.694, -5.193)), ('AA  76  ARG  O  ', 'AA  91  VAL  HA ', -0.452, (12.221, -25.721, 16.419)), ('AA  40  ARG  HA ', 'AA  87  LEU  HG ', -0.442, (16.046, -11.636, 20.523)), ('AA  70  ALA  O  ', 'AA  73 BVAL HG12', -0.442, (0.976, -23.638, 12.874)), ('AA  48  ASP  O  ', 'AA  52  PRO  HD3', -0.437, (16.834, -2.896, 29.521)), ('AA 211  ALA  HB1', 'AA 216  ASP  HB2', -0.434, (2.484, 14.728, -13.155)), ('AA 137  LYS  CE ', 'AA 197  ASP  OD2', -0.429, (10.898, 12.238, 7.457)), ('AA  45  THR HG23', 'AA  48  ASP  OD2', -0.429, (12.246, -9.046, 31.806)), ('AA 118  TYR  CE1', 'AA 144  SER  HB3', -0.42, (1.794, -3.949, 15.611)), ('AA  17  MET  O  ', 'AA 404  DMS  H21', -0.417, (4.082, -17.496, 9.943)), ('AA 282  LEU  HA ', 'AA 282  LEU HD23', -0.413, (-0.463, 12.342, -10.836)), ('AA 166  GLU  HB2', 'AA 406  DMS  H22', -0.411, (6.497, 2.515, 17.569)), ('AA 298  ARG  HD3', 'AA 305  PHE  HZ ', -0.41, (8.224, -5.181, -9.25)), ('AA 165 AMET  HE1', 'AA 186  VAL  O  ', -0.409, (17.381, 1.837, 20.268)), ('AA 218  TRP  HD1', 'AA 279 BARG  NH2', -0.409, (-0.531, 20.012, -12.941)), ('AA 113  SER  O  ', 'AA 149  GLY  HA2', -0.408, (8.934, -4.597, 4.612)), ('AA 276 BMET  O  ', 'AA 277  ASN  HB2', -0.404, (1.279, 26.584, -7.369))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
