# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  87 ', 'ASN', 0.040876761873987054, (224.3369999999999, 220.61699999999996, 220.207)), ('A', ' 116 ', 'SER', 0.005279699486131864, (232.333, 215.32499999999996, 232.33800000000002)), ('A', ' 158 ', 'ARG', 0.015432001442309206, (247.323, 222.20099999999996, 234.605)), ('A', ' 334 ', 'ASN', 0.008079619341625047, (180.1100000000001, 230.52299999999997, 233.98600000000002)), ('A', ' 353 ', 'TRP', 0.02529069696410689, (171.09100000000004, 205.755, 239.126)), ('A', ' 402 ', 'ILE', 0.06252889364958199, (178.68900000000002, 200.35799999999998, 243.239)), ('A', ' 463 ', 'PRO', 0.00301368, (172.65299999999996, 201.32099999999994, 227.231)), ('A', ' 528 ', 'LYS', 0.000652480958367674, (190.687, 230.38499999999993, 228.014)), ('A', ' 529 ', 'LYS', 0.0, (192.10499999999996, 231.213, 224.757)), ('A', ' 744 ', 'GLY', 0.00514628, (209.682, 179.943, 205.506)), ('A', ' 796 ', 'ASP', 0.0010795640534178575, (222.34399999999997, 184.909, 145.198)), ('B', '  32 ', 'PHE', 0.020990972196343567, (150.84299999999982, 214.673, 200.32500000000002)), ('B', '  75 ', 'GLY', 0.004928302804001196, (123.27199999999998, 220.49899999999997, 214.156)), ('B', '  87 ', 'ASN', 0.01316042725273858, (153.7439999999998, 207.269, 219.266)), ('B', ' 333 ', 'THR', 0.033226211777192094, (165.462, 157.96, 225.789)), ('B', ' 571 ', 'ASP', 0.0011954208358030348, (181.18099999999995, 171.584, 201.606)), ('B', ' 796 ', 'ASP', 0.006297591540700897, (187.21699999999996, 224.775, 146.239)), ('B', ' 854 ', 'LYS', 0.000523980230782397, (191.44399999999996, 218.978, 196.82599999999996)), ('B', '1130 ', 'ILE', 0.014104659437781978, (177.493, 174.988, 135.132)), ('C', '  32 ', 'PHE', 0.026067230826203575, (198.429, 146.554, 200.305)), ('C', '  68 ', 'ILE', 0.0006954659479854712, (199.33699999999996, 127.35199999999999, 217.317)), ('C', ' 255 ', 'SER', 0.04378694482012882, (199.32, 120.254, 231.018)), ('C', ' 334 ', 'ASN', 0.0192906755095588, (232.833, 184.665, 233.83)), ('C', ' 353 ', 'TRP', 0.0038405715890237183, (216.18700000000007, 205.42799999999997, 240.11)), ('C', ' 402 ', 'ILE', 0.023759477823094864, (207.232, 201.63899999999998, 243.753)), ('C', ' 412 ', 'PRO', 0.01593910267998628, (204.42999999999995, 199.85299999999998, 228.073)), ('C', ' 690 ', 'GLN', 0.023106698842795037, (207.745, 150.975, 177.659)), ('C', ' 744 ', 'GLY', 0.00514628, (174.15399999999994, 186.22499999999997, 205.902)), ('C', ' 796 ', 'ASP', 0.0027285908965933676, (170.89499999999995, 174.012, 145.643)), ('C', ' 810 ', 'SER', 0.0003736916357031564, (162.957, 169.711, 163.813)), ('C', ' 813 ', 'SER', 0.028022052671686556, (165.54499999999993, 174.748, 169.253)), ('H', '  80 ', 'TYR', 0.005195100417359998, (195.196, 107.134, 207.754)), ('H', '  92 ', 'ALA', 0.044376180005243834, (190.741, 107.288, 191.791)), ('H', ' 169 ', 'SER', 0.03138880655660835, (204.816, 83.529, 180.795)), ('H', ' 174 ', 'SER', 0.0005141069959730691, (208.6659999999999, 91.899, 171.916)), ('L', '  15 ', 'VAL', 0.014000041001283048, (215.384, 114.08400000000002, 170.98)), ('L', '  30 ', 'ARG', 0.01721667649310143, (206.064, 134.60799999999998, 194.427)), ('L', '  40 ', 'PRO', 0.03334349192857028, (201.32099999999994, 107.00100000000003, 182.669))]
data['omega'] = [('B', ' 854 ', 'LYS', None, (192.83099999999996, 218.742, 196.55400000000003)), ('H', '  85 ', 'SER', None, (181.404, 109.34799999999998, 202.75499999999997)), ('H', ' 160 ', 'PRO', None, (187.032, 94.461, 189.569)), ('H', ' 162 ', 'PRO', None, (192.85799999999998, 95.94899999999998, 188.83)), ('L', '   8 ', 'PRO', None, (202.06299999999996, 124.78700000000003, 176.477)), ('L', '  95 ', 'PRO', None, (194.086, 126.71699999999998, 198.657)), ('L', ' 141 ', 'PRO', None, (202.399, 109.73500000000003, 163.516))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 587  ILE  CA ', ' C 841  LEU  CA ', -0.843, (166.765, 171.395, 201.946)), (' B 575  ALA  N  ', ' C 844  ILE  N  ', -0.807, (172.123, 167.568, 202.44)), (' B 142  GLY  HA2', ' B 244  LEU  N  ', -0.769, (139.321, 229.835, 223.33)), (' B 199  GLY  O  ', ' B 232  GLY  HA2', -0.746, (163.472, 214.245, 226.965)), (' B 143  VAL  C  ', ' B 245  HIS  H  ', -0.715, (137.613, 233.716, 223.306)), (' C 729  VAL  H  ', ' C1059  GLY  HA2', -0.697, (182.582, 182.704, 173.524)), (' B 143  VAL  N  ', ' B 245  HIS  H  ', -0.686, (138.503, 233.266, 223.7)), (' B 575  ALA  N  ', ' C 844  ILE  H  ', -0.668, (171.107, 166.731, 202.162)), (' B 575  ALA  N  ', ' C 843  ASP  N  ', -0.654, (170.735, 168.195, 203.812)), (' C 199  GLY  HA2', ' C 232  GLY  HA2', -0.649, (189.795, 159.554, 226.931)), (' B 575  ALA  CA ', ' C 844  ILE  H  ', -0.647, (171.04, 166.282, 202.416)), (' B 729  VAL  H  ', ' B1059  GLY  HA2', -0.644, (188.974, 209.459, 174.045)), (' B 587  ILE  N  ', ' C 840  CYS  O  ', -0.63, (168.108, 169.97, 200.826)), (' B 587  ILE  CA ', ' C 842  GLY  H  ', -0.629, (168.487, 171.374, 203.14)), (' B 587  ILE  CA ', ' C 842  GLY  N  ', -0.628, (168.03, 170.751, 202.979)), (' C 363  ALA  O  ', ' C 526  GLY  HA2', -0.609, (222.274, 182.718, 230.153)), (' B 143  VAL  N  ', ' B 245  HIS  N  ', -0.586, (138.046, 232.51, 224.183)), (' B 574  ASP  C  ', ' C 845  ALA  H  ', -0.577, (171.12, 169.184, 200.911)), (' A 729  VAL  H  ', ' A1059  GLY  HA2', -0.55, (208.843, 190.073, 173.922)), (' B 143  VAL  CA ', ' B 245  HIS  H  ', -0.54, (138.245, 233.704, 223.72)), (' B 575  ALA  N  ', ' C 843  ASP  CA ', -0.539, (171.687, 167.91, 203.29)), (' B 587  ILE  C  ', ' C 840  CYS  C  ', -0.536, (167.311, 171.638, 200.3)), (' B 574  ASP  N  ', ' C 843  ASP  CA ', -0.533, (173.089, 168.776, 203.459)), (' B 575  ALA  N  ', ' C 843  ASP  C  ', -0.523, (172.235, 167.818, 202.704)), (' B 575  ALA  C  ', ' C 843  ASP  N  ', -0.522, (170.96, 167.348, 204.618)), (' A 147  LYS  CA ', ' A 248  TYR  CA ', -0.512, (266.863, 222.648, 224.041)), (' B 575  ALA  C  ', ' C 843  ASP  H  ', -0.51, (170.807, 167.799, 205.409)), (' C 729  VAL  N  ', ' C1059  GLY  HA2', -0.508, (182.713, 183.312, 173.568)), (' B 142  GLY  HA3', ' B 244  LEU  C  ', -0.502, (138.329, 230.943, 224.912)), (' B 574  ASP  O  ', ' B 587  ILE  N  ', -0.482, (168.948, 170.091, 201.454)), (' C 199  GLY  CA ', ' C 232  GLY  HA2', -0.482, (189.495, 159.986, 226.414)), (' A 114  THR  C  ', ' A 116  SER  H  ', -0.471, (231.514, 215.632, 234.576)), (' B 588  THR  N  ', ' C 841  LEU  CA ', -0.47, (166.821, 172.911, 201.979)), (' A 111  ASP  C  ', ' A 113  LYS  H  ', -0.466, (232.963, 220.824, 237.344)), (' B 574  ASP  CA ', ' C 843  ASP  C  ', -0.466, (172.723, 168.601, 202.161)), (' B 142  GLY  HA2', ' B 244  LEU  CA ', -0.465, (138.791, 230.659, 223.366)), (' B 586  ASP  O  ', ' C 841  LEU  N  ', -0.464, (165.502, 170.566, 201.903)), (' B 142  GLY  CA ', ' B 244  LEU  N  ', -0.458, (138.803, 230.559, 224.255)), (' B 574  ASP  H  ', ' C 843  ASP  CA ', -0.441, (173.526, 169.084, 203.342)), (' B 575  ALA  O  ', ' C 843  ASP  CA ', -0.44, (172.06, 166.629, 204.861)), (' B 587  ILE  N  ', ' C 842  GLY  N  ', -0.44, (168.005, 170.431, 203.448)), (' B 588  THR  N  ', ' C 841  LEU  N  ', -0.437, (166.725, 172.719, 201.325)), (' B 575  ALA  CA ', ' C 843  ASP  N  ', -0.436, (170.881, 168.063, 204.405)), (' B 729  VAL  N  ', ' B1059  GLY  HA2', -0.432, (189.5, 209.094, 174.236)), (' B 575  ALA  N  ', ' C 842  GLY  C  ', -0.431, (170.635, 168.777, 203.702)), (' B 587  ILE  N  ', ' C 841  LEU  CA ', -0.43, (167.348, 170.838, 202.328)), (' B 587  ILE  CA ', ' C 841  LEU  N  ', -0.423, (166.798, 171.527, 201.701)), (' C 103  GLY  HA3', ' C 119  ILE  O  ', -0.421, (188.986, 141.251, 224.346)), (' B 143  VAL  C  ', ' B 245  HIS  N  ', -0.419, (137.08, 233.445, 224.037)), (' B 586  ASP  O  ', ' C 841  LEU  CA ', -0.418, (165.832, 170.141, 202.541)), (' B 144  TYR  CA ', ' B 246  ARG  N  ', -0.416, (135.225, 234.996, 224.238)), (' B 587  ILE  N  ', ' C 841  LEU  C  ', -0.414, (167.427, 170.31, 202.881)), (' A 729  VAL  N  ', ' A1059  GLY  HA2', -0.412, (208.758, 190.465, 173.706)), (' B 574  ASP  H  ', ' C 843  ASP  C  ', -0.411, (173.715, 168.891, 203.117))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
