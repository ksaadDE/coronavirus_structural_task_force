# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 156 ', 'PRO', None, (-49.206999999999994, -14.307000000000006, 46.93200000000001)), ('H', ' 158 ', 'PRO', None, (-45.24, -10.206, 50.098)), ('L', '   8 ', 'PRO', None, (-15.450000000000001, -18.754, 55.295)), ('L', '  95 ', 'PRO', None, (-19.674, -11.669, 33.2)), ('L', ' 141 ', 'PRO', None, (-27.539999999999996, -21.667, 72.011))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' H 135  PRO  HG3', ' H 147  LEU  HB3', -0.702, (-52.351, -13.868, 74.35)), (' L  78  LEU HD11', ' L 104  LEU HD21', -0.69, (-19.346, -9.806, 62.791)), (' H  48  VAL HG13', ' H  63  VAL HG21', -0.683, (-30.816, -11.395, 33.717)), (' L  35  TRP  HB2', ' L  48  ILE  HB ', -0.661, (-15.186, -4.467, 50.845)), (' A 457  ARG  NH1', ' A 467  ASP  OD2', -0.617, (-14.759, 11.641, 23.785)), (' H  92  VAL HG22', ' H 117  THR HG22', -0.61, (-37.77, -9.742, 46.447)), (' H 135  PRO  HD2', ' H 222  PRO  HA ', -0.566, (-55.791, -14.978, 75.162)), (' H  63  VAL HG13', ' H  67  PHE  HB2', -0.555, (-32.996, -10.596, 30.542)), (' L  49  TYR  HB2', ' L  53  ILE  HB ', -0.552, (-12.562, 1.269, 48.159)), (' H  90  THR HG23', ' H 119  THR  HA ', -0.543, (-41.158, -14.985, 42.166)), (' H  39  GLN  HB2', ' H  45  LEU HD23', -0.535, (-28.817, -10.238, 45.396)), (' L 120  PRO  HD3', ' L 132  VAL HG22', -0.534, (-53.753, -27.415, 67.89)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.529, (-12.205, 1.622, 24.964)), (' H   2  VAL  HB ', ' H 111  VAL HG21', -0.528, (-25.865, 6.724, 45.28)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.523, (0.9, -2.35, 23.142)), (' L  22  THR HG22', ' L  72  THR HG22', -0.504, (-8.643, -14.373, 53.449)), (' H  34  MET  HB3', ' H  78  LEU HD22', -0.489, (-29.257, 1.328, 35.711)), (' B   1  NAG  H4 ', ' B   2  NAG  H83', -0.487, (12.881, -7.909, 10.678)), (' H  97  ARG HH21', ' H 109  SER  HB2', -0.479, (-21.985, 7.198, 43.908)), (' A 387  LEU  HA ', ' A 390  LEU HD12', -0.462, (-4.679, -6.786, -1.85)), (' L  33  LEU HD22', ' L  71  PHE  CG ', -0.46, (-10.749, -9.666, 46.705)), (' H  37  VAL HG22', ' H  47  TRP  HA ', -0.46, (-25.988, -8.563, 38.754)), (' H  12  ILE HD11', ' H  16  GLY  HA3', -0.456, (-46.548, -12.828, 32.246)), (' H  53  SER  HA ', ' H  71  ARG HH12', -0.455, (-25.708, 5.375, 29.712)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.444, (-0.324, 3.356, 4.704)), (' H  97  ARG  NH2', ' H 109  SER  HB2', -0.444, (-21.974, 7.238, 43.336)), (' L 193  ALA  HB2', ' L 208  SER  HB3', -0.444, (-47.85, -32.72, 75.993)), (' A 350  VAL HG22', ' A 422  ASN  HB3', -0.433, (-8.666, 2.977, 23.329)), (' A 425  LEU HD21', ' A 512  VAL HG11', -0.426, (-8.818, -0.977, 13.211)), (' A 382  VAL HG13', ' A 430  THR HG22', -0.422, (-9.857, -4.22, 2.754)), (' A 387  LEU HD21', ' A 515  PHE  CZ ', -0.422, (-3.161, -4.596, 3.865)), (' H 202  THR HG23', ' H 219  LYS  HE2', -0.419, (-59.32, -5.992, 72.692)), (' A 360  ASN  H  ', ' A 523  THR HG23', -0.41, (1.54, 6.89, -1.041)), (' H  11  LEU  HB2', ' H 156  PRO  HG3', -0.401, (-47.83, -12.888, 43.721))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
