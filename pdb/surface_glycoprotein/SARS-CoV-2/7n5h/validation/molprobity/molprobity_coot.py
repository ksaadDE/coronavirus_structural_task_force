# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('F', '   8 ', 'PRO', None, (192.64600000000002, 211.858, 172.74500000000003)), ('F', '  95 ', 'PRO', None, (207.64100000000002, 216.777, 192.24000000000004)), ('K', '   8 ', 'PRO', None, (236.26899999999998, 291.15, 174.422)), ('K', '  95 ', 'PRO', None, (231.335, 274.858, 192.84300000000002)), ('L', '   8 ', 'PRO', None, (272.163, 217.012, 172.701)), ('L', '  95 ', 'PRO', None, (260.901, 224.688, 193.75700000000006))]
data['rota'] = [('A', ' 524 ', 'VAL', 0.14980814155433855, (242.794, 197.119, 214.18800000000002)), ('C', ' 341 ', 'VAL', 0.0862265010439063, (270.6709999999998, 270.316, 201.20100000000002)), ('C', '1092 ', 'GLU', 0.17122181153015978, (237.78000000000011, 242.786, 310.128)), ('L', '  58 ', 'ILE', 0.09113234481470464, (254.556, 204.308, 175.724)), ('F', '  58 ', 'ILE', 0.10688620970563385, (192.05900000000008, 233.488, 176.26)), ('K', '  58 ', 'ILE', 0.1801124873233591, (253.02099999999996, 277.046, 175.45000000000002))]
data['cbeta'] = [('A', ' 369 ', 'TYR', ' ', 0.4048146266815759, (257.111, 199.477, 205.758)), ('A', ' 614 ', 'ASP', ' ', 0.28344621157189964, (257.426, 214.959, 255.06)), ('B', ' 324 ', 'GLU', ' ', 0.27877607554402745, (196.52700000000013, 223.299, 234.143)), ('C', ' 324 ', 'GLU', ' ', 0.26956856741385316, (245.25100000000006, 273.998, 233.505)), ('C', ' 614 ', 'ASP', ' ', 0.3129996774415182, (242.19900000000024, 263.054, 255.19300000000007))]
data['probe'] = [(' A 327  VAL HG12', ' A 542  ASN  HB3', -0.655, (253.206, 205.133, 228.951)), (' A 317  ASN  CB ', ' A 594  GLY  HA2', -0.655, (259.418, 222.787, 249.942)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.649, (210.589, 180.667, 235.621)), (' C 388  ASN  ND2', ' C 529  LYS  NZ ', -0.627, (254.784, 269.76, 216.052)), (' C 332  ILE HD12', ' C 335  LEU HD21', -0.622, (264.491, 270.973, 216.996)), (' A 388  ASN  HB2', ' A 527  PRO  HD2', -0.618, (252.436, 199.287, 215.228)), (' A 393  THR  HA ', ' A 522  ALA  HA ', -0.616, (238.497, 200.48, 214.177)), (' A 555  SER  HB3', ' A 586  ASP  HB2', -0.611, (251.37, 198.732, 246.201)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.602, (202.485, 248.345, 214.301)), (' B 555  SER  HB2', ' B 586  ASP  HB2', -0.591, (196.391, 239.328, 246.537)), (' A 388  ASN  CB ', ' A 527  PRO  HD2', -0.58, (252.028, 199.705, 214.649)), (' F   6  GLN HE22', ' F  87  TYR  HA ', -0.57, (199.272, 218.819, 177.053)), (' L   6  GLN HE22', ' L  87  TYR  HA ', -0.567, (263.277, 218.711, 177.689)), (' L  33  LEU HD11', ' L  88  CYS  HB2', -0.559, (264.929, 214.314, 182.476)), (' B 231  ILE HD12', ' B 233  ILE HG12', -0.558, (226.122, 195.164, 217.461)), (' C 393  THR  HA ', ' C 522  ALA  HA ', -0.558, (260.163, 255.917, 210.908)), (' K   6  GLN HE22', ' K  87  TYR  HA ', -0.558, (237.489, 281.365, 177.786)), (' K  16  GLY  H  ', ' K  78  LEU  HB3', -0.557, (249.48, 287.902, 164.957)), (' F  33  LEU HD11', ' F  88  CYS  HB2', -0.552, (195.503, 219.263, 182.277)), (' C 422  ASN HD21', ' C 454  ARG  HB2', -0.551, (269.418, 263.131, 180.467)), (' K  33  LEU HD11', ' K  88  CYS  HB2', -0.55, (240.595, 283.155, 182.993)), (' F  16  GLY  H  ', ' F  78  LEU  HB3', -0.55, (186.572, 224.992, 164.583)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.55, (294.543, 240.26, 233.556)), (' L  16  GLY  H  ', ' L  78  LEU  HB3', -0.549, (264.088, 205.663, 163.647)), (' A 598  ILE  HB ', ' A 609  ALA  HB3', -0.547, (270.059, 224.656, 260.114)), (' F  31  SER  HB2', ' F  51  ALA  HB2', -0.547, (190.199, 222.021, 188.448)), (' A 409  GLN  HB3', ' A 419  ALA  HB2', -0.547, (245.273, 200.21, 185.767)), (' B 422  ASN HD21', ' B 454  ARG  HB2', -0.547, (191.41, 254.219, 183.636)), (' L  31  SER  HB2', ' L  51  ALA  HB2', -0.546, (265.916, 208.012, 188.314)), (' K  31  SER  HB2', ' K  51  ALA  HB2', -0.544, (246.532, 284.647, 188.931)), (' B 725  GLU  OE1', ' B1064  HIS  NE2', -0.537, (235.949, 221.337, 282.791)), (' E  95  GLU  HG2', ' E 100J PHE  H  ', -0.536, (204.682, 229.55, 186.563)), (' J  95  GLU  HG2', ' J 100J PHE  H  ', -0.534, (242.388, 269.254, 185.826)), (' C 388  ASN  ND2', ' C 529  LYS  HZ1', -0.532, (254.101, 269.602, 216.402)), (' A 353  TRP  NE1', ' A 466  ARG  HB3', -0.532, (236.626, 192.365, 191.768)), (' B 420  ASP  OD2', ' E   1  GLN  NE2', -0.531, (201.069, 246.146, 182.21)), (' A  96  GLU  HG3', ' A 101  ILE HG12', -0.526, (292.964, 248.611, 229.476)), (' A 420  ASP  OD2', ' H   1  GLN  NE2', -0.526, (239.571, 203.753, 182.563)), (' H  95  GLU  HG2', ' H 100J PHE  H  ', -0.524, (251.219, 215.916, 188.039)), (' C 388  ASN HD22', ' C 529  LYS  HZ2', -0.524, (255.285, 270.137, 216.715)), (' J  32  SER  HA ', ' J  53  TYR  CB ', -0.523, (244.131, 259.997, 196.046)), (' C 420  ASP  OD2', ' J   1  GLN  NE2', -0.523, (256.82, 261.654, 179.676)), (' J  32  SER  HA ', ' J  53  TYR  HB3', -0.522, (244.21, 260.288, 195.897)), (' A 804  GLN  OE1', ' A 935  GLN  NE2', -0.522, (261.238, 254.959, 284.787)), (' B1032  CYS  SG ', ' B1048  HIS  NE2', -0.521, (237.757, 222.917, 288.451)), (' K   6  GLN  HB3', ' K  21  LEU HD11', -0.521, (236.971, 286.683, 176.634)), (' H  32  SER  HA ', ' H  53  TYR  CB ', -0.521, (243.981, 216.273, 199.525)), (' E  32  SER  HA ', ' E  53  TYR  CB ', -0.521, (210.575, 235.459, 197.736)), (' B 409  GLN  HB3', ' B 419  ALA  HB2', -0.52, (194.939, 243.402, 185.938)), (' E  32  SER  HA ', ' E  53  TYR  HB3', -0.518, (210.107, 235.152, 197.473)), (' H  87  THR HG21', ' H 111  VAL  H  ', -0.518, (249.941, 237.377, 175.82)), (' H  32  SER  HA ', ' H  53  TYR  HB3', -0.518, (244.638, 215.991, 199.008)), (' E  87  THR HG21', ' E 111  VAL  H  ', -0.517, (222.535, 218.926, 172.605)), (' A 439  ASN HD21', ' A 499  PRO  HA ', -0.517, (260.061, 183.963, 183.189)), (' F   6  GLN  HB3', ' F  21  LEU HD11', -0.516, (195.483, 215.071, 175.39)), (' B 780  GLU  OE2', ' B1019  ARG  NH1', -0.515, (246.547, 230.956, 272.295)), (' B 439  ASN HD21', ' B 499  PRO  HA ', -0.515, (173.112, 239.962, 185.957)), (' L   6  GLN  HB3', ' L  21  LEU HD11', -0.515, (268.238, 217.325, 175.675)), (' C 142  GLY  HA3', ' C 156  GLU  HB2', -0.511, (188.48, 282.295, 215.92)), (' J  87  THR HG21', ' J 111  VAL  H  ', -0.51, (221.947, 263.918, 172.691)), (' C 439  ASN HD21', ' C 499  PRO  HA ', -0.51, (271.129, 285.967, 184.849)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.51, (253.733, 245.486, 290.149)), (' H  36  TRP  CE2', ' H  80  LEU  HB2', -0.508, (245.362, 228.056, 187.018)), (' E  36  TRP  CE2', ' E  80  LEU  HB2', -0.507, (218.357, 228.276, 184.404)), (' J  36  TRP  CE2', ' J  80  LEU  HB2', -0.505, (232.627, 260.416, 183.354)), (' C 767  LEU HD23', ' C 770  ILE HD12', -0.505, (226.039, 229.192, 257.448)), (' A 358  ILE  O  ', ' A 361  CYS  SG ', -0.503, (242.803, 191.673, 212.034)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.502, (229.504, 192.985, 222.868)), (' C  39  PRO  HG3', ' C  55  PHE  HZ ', -0.502, (209.631, 258.594, 239.286)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.501, (250.492, 186.375, 192.158)), (' B1090  PRO  O  ', ' C 913  GLN  NE2', -0.5, (225.766, 236.391, 310.763)), (' A1041  ASP  HB3', ' B1030  SER  HB3', -0.499, (246.285, 230.503, 285.259)), (' C 309  GLU  HA ', ' C 601  GLY  HA2', -0.495, (218.492, 262.838, 264.145)), (' C 777  ASN  OD1', ' C1019  ARG  NH1', -0.494, (227.335, 227.995, 270.892)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.494, (233.903, 225.441, 283.156)), (' A 912  THR  OG1', ' A1106  GLN  NE2', -0.493, (249.442, 236.785, 309.33)), (' L  55  ALA  HB3', ' L  58  ILE  HB ', -0.492, (254.193, 205.129, 178.32)), (' C 338  PHE  CD2', ' C 368  LEU HD11', -0.491, (263.447, 270.344, 205.838)), (' C 736  VAL HG11', ' C1004  LEU HD11', -0.49, (222.784, 230.167, 249.699)), (' C 568  ASP  HB2', ' C 574  ASP  HB2', -0.489, (256.416, 257.033, 245.582)), (' C 580  GLN  HG2', ' C 581  THR HG23', -0.489, (263.166, 272.863, 230.632)), (' B 330  PRO  HA ', ' B 580  GLN  HB3', -0.488, (191.075, 241.139, 229.628)), (' B 985  ASP  N  ', ' B 985  ASP  OD1', -0.486, (246.04, 223.443, 219.947)), (' C 401  VAL HG22', ' C 509  ARG  HG2', -0.486, (270.908, 274.683, 192.091)), (' C1029  MET  HE2', ' C1053  PRO  HB3', -0.485, (218.462, 234.48, 282.788)), (' B 229  LEU  HB3', ' B 231  ILE HG23', -0.484, (230.981, 193.01, 220.642)), (' B 401  VAL HG22', ' B 509  ARG  HG2', -0.483, (181.48, 247.003, 194.003)), (' C 725  GLU  OE1', ' C1064  HIS  NE2', -0.482, (225.019, 241.871, 283.058)), (' C 273  ARG  NH2', ' C 290  ASP  OD2', -0.482, (217.203, 268.063, 242.539)), (' C 106  PHE  HB2', ' C 117  LEU  HB3', -0.481, (203.511, 266.945, 219.382)), (' C 134  GLN  HB3', ' C 161  SER  HB2', -0.48, (198.687, 274.787, 205.808)), (' K  54  ARG  HE ', ' K  60  ASP  HA ', -0.48, (255.804, 282.758, 177.777)), (' L  54  ARG  HE ', ' L  60  ASP  HA ', -0.479, (259.598, 199.741, 176.585)), (' A  39  PRO  HG3', ' A  55  PHE  HZ ', -0.479, (269.426, 244.676, 238.132)), (' B 568  ASP  HB2', ' B 574  ASP  HB2', -0.479, (205.581, 241.107, 246.507)), (' E  12  VAL HG21', ' E  18  LEU HD13', -0.478, (224.638, 224.318, 176.673)), (' B 319  ARG  NH2', ' C 737  ASP  OD2', -0.477, (216.317, 222.609, 245.185)), (' C 341  VAL HG23', ' C 399  SER  HB3', -0.477, (269.573, 269.021, 198.347)), (' B 430  THR  O  ', ' B 430  THR  OG1', -0.474, (201.518, 243.358, 202.955)), (' A 317  ASN  HB2', ' A 594  GLY  HA2', -0.473, (258.958, 222.477, 249.54)), (' H  12  VAL HG21', ' H  18  LEU HD13', -0.473, (244.502, 236.385, 180.28)), (' A 788  ILE HG13', ' C 699  LEU  HB3', -0.473, (238.874, 263.644, 281.568)), (' B  67  ALA  HB3', ' B 263  ALA  HB3', -0.473, (211.19, 176.481, 229.617)), (' J  12  VAL HG21', ' J  18  LEU HD13', -0.472, (224.624, 258.141, 175.76)), (' B1053  PRO  O  ', ' B1054  GLN  NE2', -0.471, (245.087, 213.779, 283.55)), (' F  54  ARG  HE ', ' F  60  ASP  HA ', -0.47, (185.79, 231.635, 178.236)), (' A1093  GLY  O  ', ' B 904  TYR  OH ', -0.469, (244.931, 225.291, 308.483)), (' B 126  VAL  HB ', ' B 172  SER  HB3', -0.469, (232.945, 180.718, 223.506)), (' B 273  ARG  NH2', ' B 290  ASP  OD2', -0.467, (215.865, 201.531, 242.86)), (' A1035  GLY  HA3', ' C1040  VAL HG21', -0.467, (238.004, 245.018, 291.349)), (' B 598  ILE HD12', ' B 666  ILE HD11', -0.465, (211.894, 213.673, 264.142)), (' A 880  GLY  O  ', ' A 884  SER  OG ', -0.465, (240.854, 255.469, 293.364)), (' A 355  ARG  HD2', ' A 396  TYR  CD1', -0.463, (237.551, 193.823, 202.353)), (' E  38  ARG  HB2', ' E  88  ALA  HB3', -0.463, (214.924, 221.376, 177.497)), (' L  59  PRO  HG2', ' L  61  ARG HH21', -0.463, (256.982, 204.193, 169.956)), (' J  38  ARG  HB2', ' J  88  ALA  HB3', -0.462, (228.633, 267.783, 177.13)), (' A 359  SER  HA ', ' A 524  VAL HG22', -0.461, (240.814, 194.862, 212.437)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.46, (282.276, 243.804, 245.857)), (' H  38  ARG  HB2', ' H  88  ALA  HB3', -0.46, (252.332, 229.766, 179.929)), (' B 922  LEU HD11', ' Q   1  NAG  H3 ', -0.46, (227.993, 208.549, 304.298)), (' F  59  PRO  HG2', ' F  61  ARG HH21', -0.458, (190.064, 231.811, 170.977)), (' C 738  CYS  HB3', ' C 760  CYS  HB2', -0.458, (224.792, 225.236, 246.548)), (' A 422  ASN HD21', ' A 454  ARG  HB2', -0.457, (237.825, 191.748, 182.805)), (' A  58  PHE  HB2', ' A 293  LEU HD22', -0.451, (276.696, 235.042, 245.175)), (' A  80  ASP  N  ', ' A  80  ASP  OD1', -0.451, (296.636, 238.236, 224.815)), (' C 126  VAL  HB ', ' C 172  SER  HB3', -0.449, (190.005, 262.892, 224.152)), (' A 106  PHE  HB3', ' A 235  ILE HD13', -0.449, (277.506, 243.312, 219.058)), (' A 366  SER  HA ', ' A 369  TYR  CE2', -0.449, (256.206, 199.244, 209.427)), (' B1129  VAL HG13', ' C 917  TYR  HB3', -0.448, (216.849, 241.918, 311.115)), (' B 439  ASN  ND2', ' B 499  PRO  HA ', -0.447, (172.911, 240.055, 186.546)), (' C 922  LEU HD11', ' W   1  NAG  H3 ', -0.447, (217.193, 255.595, 303.676)), (' A 304  LYS  HB3', ' A 304  LYS  HE2', -0.446, (262.249, 243.353, 250.885)), (' B  78  ARG  HA ', ' B  78  ARG  HD2', -0.446, (202.976, 176.494, 226.419)), (' C 439  ASN  ND2', ' C 499  PRO  HA ', -0.445, (271.101, 285.745, 185.68)), (' A 650  LEU HD21', ' A 653  ALA  HB3', -0.445, (271.26, 220.092, 262.033)), (' K  59  PRO  HG2', ' K  61  ARG HH21', -0.444, (252.602, 279.939, 170.319)), (' A 743  CYS  HB3', ' A 749  CYS  HB3', -0.444, (237.02, 252.7, 235.094)), (' C  84  LEU HD13', ' C 267  VAL HG11', -0.444, (208.049, 276.041, 227.946)), (' J   8  GLY  HA3', ' J  20  LEU HD23', -0.443, (230.247, 257.37, 176.141)), (' H   8  GLY  HA3', ' H  20  LEU HD23', -0.44, (241.882, 231.019, 180.258)), (' A 439  ASN  ND2', ' A 499  PRO  HA ', -0.438, (259.932, 184.043, 184.004)), (' B 948  LEU HD21', ' B1059  GLY  HA3', -0.437, (240.857, 218.065, 272.056)), (' A  97  LYS  HB3', ' A 186  PHE  HA ', -0.437, (297.791, 249.904, 236.245)), (' B 908  GLY  O  ', ' B1038  LYS  NZ ', -0.437, (235.805, 229.234, 298.507)), (' B 347  PHE  CE2', ' B 399  SER  HB2', -0.436, (185.352, 248.127, 198.3)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.436, (244.931, 237.732, 283.426)), (' A 347  PHE  CE2', ' A 399  SER  HB2', -0.436, (247.219, 188.345, 196.825)), (' B 108  THR  OG1', ' B 234  ASN  O  ', -0.435, (220.329, 197.326, 216.305)), (' A1030  SER  HB3', ' C1041  ASP  HB2', -0.435, (234.414, 245.77, 285.514)), (' C 108  THR  OG1', ' C 234  ASN  O  ', -0.435, (210.664, 265.621, 215.956)), (' E   8  GLY  HA3', ' E  20  LEU HD23', -0.434, (221.552, 229.413, 177.06)), (' B1051  SER  OG ', ' B1064  HIS  ND1', -0.434, (237.991, 220.904, 286.164)), (' H  29  VAL  HB ', ' H  73  THR HG22', -0.434, (237.197, 220.107, 194.382)), (' C 347  PHE  CE2', ' C 399  SER  HB2', -0.434, (269.887, 270.832, 196.033)), (' C 388  ASN HD22', ' C 529  LYS  NZ ', -0.433, (255.299, 269.714, 216.606)), (' B 905  ARG  NH1', ' B1049  LEU  O  ', -0.433, (240.367, 222.603, 294.046)), (' B 139  PRO  HB2', ' B 159  VAL HG23', -0.432, (216.828, 181.222, 216.035)), (' E   6  GLU  HB2', ' E 107  THR HG23', -0.432, (216.638, 231.976, 175.034)), (' B  34  ARG  HG3', ' B 216  LEU HD21', -0.432, (217.329, 188.212, 242.308)), (' A1129  VAL HG13', ' B 917  TYR  HB3', -0.432, (240.102, 214.499, 311.209)), (' A1073  LYS  HA ', ' A1301  NAG  H82', -0.431, (262.978, 224.676, 304.549)), (' H  51  MET  HE3', ' H  71  VAL HG11', -0.43, (241.624, 222.896, 194.85)), (' J  29  VAL  HB ', ' J  73  THR HG22', -0.43, (242.043, 253.279, 190.017)), (' C 303  LEU HD11', ' C 313  TYR  CG ', -0.429, (223.745, 258.203, 256.927)), (' C  95  THR  HB ', ' C 186  PHE  HB3', -0.428, (195.245, 279.4, 238.258)), (' A 971  GLY  HA3', ' A 995  ARG HH22', -0.428, (244.136, 236.833, 231.449)), (' A 119  ILE HG12', ' A 128  ILE HG12', -0.428, (280.957, 252.897, 220.625)), (' E  29  VAL  HB ', ' E  73  THR HG22', -0.427, (216.454, 238.853, 192.119)), (' B 206  LYS  HB2', ' B 223  LEU  HA ', -0.426, (228.065, 187.876, 238.647)), (' A 430  THR  O  ', ' A 430  THR  OG1', -0.426, (242.572, 203.792, 203.441)), (' B 715  PRO  HA ', ' B1072  GLU  HA ', -0.426, (219.903, 218.211, 303.515)), (' B  87  ASN  N  ', ' B  87  ASN  OD1', -0.426, (215.455, 198.865, 226.307)), (' J   6  GLU  HB2', ' J 107  THR HG23', -0.426, (235.545, 259.747, 173.755)), (' B 710  ASN  HB3', ' B1301  NAG  H82', -0.425, (209.651, 233.136, 309.91)), (' A 738  CYS  HB3', ' A 760  CYS  HB2', -0.425, (233.7, 248.249, 246.212)), (' H   6  GLU  HB2', ' H 107  THR HG23', -0.425, (242.331, 225.646, 177.538)), (' C 388  ASN  ND2', ' C 529  LYS  HZ2', -0.423, (255.266, 270.457, 216.682)), (' C 408  ARG  NH1', ' K  56  THR  OG1', -0.423, (254.039, 271.568, 181.378)), (' C  93  ALA  HB3', ' C 266  TYR  HB2', -0.423, (203.584, 275.496, 235.851)), (' C 880  GLY  O  ', ' C 884  SER  OG ', -0.423, (216.516, 228.387, 293.7)), (' B 780  GLU  O  ', ' B 784  GLN  NE2', -0.423, (248.382, 227.717, 279.588)), (' H  35B SER  HA ', ' H  50  TYR  HA ', -0.422, (249.083, 222.82, 190.952)), (' A 309  GLU  HA ', ' A 601  GLY  HA2', -0.422, (269.773, 235.665, 263.622)), (' B  40  ASP  N  ', ' B  40  ASP  OD1', -0.422, (233.475, 200.224, 238.317)), (' C1038  LYS  HB3', ' C1038  LYS  HE2', -0.422, (234.628, 238.821, 295.069)), (' C 564  GLN  HA ', ' C 577  ARG  HD3', -0.422, (265.421, 261.58, 236.512)), (' J  51  MET  HE3', ' J  71  VAL HG11', -0.421, (237.918, 256.81, 190.997)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.421, (218.433, 244.727, 290.682)), (' B 816  SER  OG ', ' B 817  PHE  N  ', -0.42, (246.057, 206.494, 282.963)), (' A 994  ASP  OD2', ' C 995  ARG  NH2', -0.42, (232.413, 239.892, 232.152)), (' A 430  THR  OG1', ' A 515  PHE  O  ', -0.42, (241.382, 203.451, 204.575)), (' C 339  GLY  O  ', ' C 343  ASN  N  ', -0.42, (270.626, 274.458, 202.493)), (' A 985  ASP  N  ', ' A 985  ASP  OD1', -0.419, (239.179, 248.411, 219.968)), (' B1029  MET  HE2', ' B1053  PRO  HB3', -0.419, (244.966, 219.914, 282.546)), (' B 387  LEU  HA ', ' B 387  LEU HD12', -0.419, (198.588, 236.988, 209.764)), (' E  51  MET  HE3', ' E  71  VAL HG11', -0.418, (216.779, 233.848, 192.331)), (' B 553  THR  O  ', ' B 586  ASP  N  ', -0.418, (195.943, 236.845, 244.312)), (' J  51  MET  HB2', ' J  51  MET  HE2', -0.418, (237.437, 259.234, 192.379)), (' A  42  VAL  O  ', ' C 563  GLN  NE2', -0.418, (266.686, 254.897, 240.605)), (' B 785  VAL HG22', ' B 787  GLN  H  ', -0.418, (257.148, 223.723, 286.123)), (' C 743  CYS  HB3', ' C 749  CYS  HB3', -0.417, (219.354, 226.536, 235.637)), (' A 382  VAL HG21', ' A 515  PHE  CE2', -0.417, (247.293, 203.206, 204.841)), (' A  58  PHE  HD2', ' A 290  ASP  HB2', -0.417, (274.209, 236.548, 244.634)), (' K  83  PHE  HA ', ' K 104  VAL HG23', -0.417, (242.84, 282.677, 166.73)), (' F  58  ILE  HA ', ' F  58  ILE HD13', -0.417, (193.01, 232.894, 174.976)), (' B 430  THR  OG1', ' B 515  PHE  O  ', -0.416, (202.082, 244.629, 204.198)), (' E  87  THR HG21', ' E 110  THR  HA ', -0.415, (221.533, 220.099, 172.217)), (' B 382  VAL HG21', ' B 515  PHE  CE2', -0.415, (198.61, 239.825, 204.821)), (' C 382  VAL HG21', ' C 515  PHE  CE2', -0.415, (255.785, 265.346, 202.96)), (' J  35B SER  HA ', ' J  50  TYR  HA ', -0.414, (236.13, 264.584, 188.24)), (' C1052  PHE  HB2', ' C1063  LEU  HB2', -0.412, (216.568, 240.795, 286.526)), (' A 125  ASN  N  ', ' A 125  ASN  OD1', -0.412, (287.9, 261.353, 220.506)), (' F  83  PHE  HA ', ' F 104  VAL HG23', -0.412, (194.862, 223.165, 166.316)), (' H  87  THR HG21', ' H 110  THR  HA ', -0.412, (249.827, 236.516, 175.698)), (' C 430  THR  OG1', ' C 515  PHE  O  ', -0.41, (256.376, 259.739, 201.323)), (' F  46  LEU HD11', ' F  49  TYR  HB3', -0.41, (196.772, 228.783, 184.016)), (' C 342  PHE  CE1', ' C 511  VAL HG11', -0.41, (265.431, 270.742, 200.875)), (' A 328  ARG  NH2', ' A 580  GLN  HB2', -0.41, (254.882, 193.435, 231.674)), (' C 816  SER  OG ', ' C 817  PHE  N  ', -0.409, (206.639, 240.566, 282.939)), (' A 785  VAL HG22', ' A 787  GLN  H  ', -0.409, (235.48, 258.301, 285.918)), (' E  35B SER  HA ', ' E  50  TYR  HA ', -0.408, (212.405, 227.727, 188.995)), (' A 312  ILE HG13', ' A 664  ILE HD11', -0.408, (264.126, 228.432, 263.147)), (' C 106  PHE  O  ', ' C 117  LEU  N  ', -0.408, (203.877, 267.195, 216.614)), (' J  87  THR HG21', ' J 110  THR  HA ', -0.407, (223.264, 264.159, 172.262)), (' A 553  THR  O  ', ' A 586  ASP  N  ', -0.407, (253.449, 199.139, 243.993)), (' B 815  ARG  NH2', ' B 820  ASP  OD1', -0.405, (247.934, 204.879, 275.122)), (' A 317  ASN  OD1', ' A 319  ARG  NE ', -0.404, (257.987, 222.896, 245.129)), (' F  90  GLN  H  ', ' F  90  GLN  HG3', -0.404, (201.186, 218.091, 186.551)), (' B1032  CYS  SG ', ' B1051  SER  OG ', -0.404, (238.252, 221.716, 287.176)), (' A 319  ARG HH22', ' B 739  THR  HB ', -0.403, (255.005, 224.819, 243.174)), (' K  46  LEU HD11', ' K  49  TYR  HB3', -0.402, (246.963, 275.86, 183.573)), (' C 127  VAL HG12', ' C 171  VAL HG22', -0.402, (189.178, 263.804, 217.843)), (' A  87  ASN  N  ', ' A  87  ASN  OD1', -0.402, (276.3, 234.415, 225.126)), (' A 644  GLN  NE2', ' A 645  THR  O  ', -0.402, (263.755, 212.089, 259.248)), (' H  38  ARG  HG2', ' H  48  ILE HD11', -0.402, (252.927, 228.928, 183.617)), (' L  46  LEU HD11', ' L  49  TYR  HB3', -0.402, (256.496, 209.66, 184.409)), (' J  38  ARG  HG2', ' J  48  ILE HD11', -0.402, (229.558, 267.929, 181.197)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.402, (249.251, 239.056, 291.248)), (' C 931  ILE  HA ', ' C 931  ILE HD12', -0.401, (213.856, 247.166, 287.778)), (' A  94  SER  OG ', ' A  96  GLU  OE2', -0.401, (292.777, 246.034, 230.895)), (' C 387  LEU  HA ', ' C 387  LEU HD12', -0.401, (253.573, 266.715, 208.134)), (' A 790  LYS  HB2', ' A 790  LYS  HE2', -0.401, (246.095, 266.306, 289.464)), (' A 124  THR  OG1', ' A 125  ASN  OD1', -0.401, (288.601, 261.663, 219.199)), (' A 330  PRO  HA ', ' A 579  PRO  HB2', -0.401, (249.987, 194.184, 229.157)), (' B 452  LEU HD23', ' B 494  SER  HA ', -0.401, (181.283, 254.232, 182.944)), (' H  61  PRO  HA ', ' H  64  LYS  HB2', -0.4, (256.344, 231.872, 194.64)), (' J  12  VAL  HB ', ' J 111  VAL HG22', -0.4, (221.305, 259.639, 174.256)), (' B  96  GLU  HG3', ' B 101  ILE HG22', -0.4, (219.269, 176.933, 230.965)), (' B 738  CYS  SG ', ' B 739  THR  N  ', -0.4, (251.162, 227.839, 244.221))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
