# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (-39.508, 2.189000000000001, -31.581))]
data['rota'] = [('A', '  30 ', 'ASP', 0.2684951649563204, (-32.72200000000001, 34.901, 0.174)), ('A', '  35 ', 'GLU', 0.0739980308254011, (-38.958, 29.181, -1.451)), ('A', '  37 ', 'GLU', 0.2394314230862353, (-35.633, 24.986000000000004, -2.729)), ('A', '  44 ', 'SER', 0.2608024316048549, (-38.801, 16.465, -8.356)), ('A', '  92 ', 'THR', 0.02383320574248486, (-22.282000000000004, 36.556, -7.618)), ('A', ' 110 ', 'GLU', 0.042460843042692785, (-49.84200000000001, 36.8, -24.167)), ('A', ' 113 ', 'SER', 0.03683628628107049, (-46.496, 33.317, -26.225)), ('A', ' 190 ', 'MET', 0.2983534397378231, (-38.654, 36.962, -28.258)), ('A', ' 283 ', 'VAL', 0.1803273110480439, (-13.742, -2.9310000000000005, -38.356)), ('A', ' 322 ', 'ASN', 0.28442392794317606, (-18.986, 8.261, -0.324)), ('A', ' 338 ', 'ASN', 0.2950095873323415, (-43.676, -6.737, -14.225)), ('A', ' 339 ', 'VAL', 0.027403945762195858, (-46.737000000000016, -4.859, -12.953)), ('A', ' 439 ', 'LEU', 0.0001024384626467187, (-9.938, 3.861, -31.346999999999998)), ('A', ' 601 ', 'ASN', 0.25313773902249675, (-4.0530000000000035, 4.519000000000004, -52.381)), ('B', ' 388 ', 'ASN', 0.0, (-22.2, 15.92100000000001, 38.744)), ('B', ' 477 ', 'SER', 0.09623538229616917, (-38.39700000000003, 51.95, 1.895)), ('B', ' 498 ', 'GLN', 0.09932043269546449, (-39.107, 15.097000000000001, 4.612))]
data['cbeta'] = []
data['probe'] = [(' B 393  THR  HA ', ' B 522  ALA  HA ', -0.711, (-27.136, 27.379, 43.326)), (' B 388  ASN  N  ', ' B 388  ASN  OD1', -0.683, (-21.446, 15.326, 36.803)), (' A  34 BHIS  CE1', ' B 493  GLN  HB3', -0.665, (-38.97, 29.627, 5.012)), (' A 490  PRO  HA ', ' A 612  PRO  HG2', -0.649, (-29.001, 9.829, -53.433)), (' A 455  MET  HE3', ' A 480  MET  HB2', -0.62, (-25.462, 22.287, -44.43)), (' A 560  LEU HD22', ' A 564  GLU  HG3', -0.62, (-14.969, 29.0, -9.193)), (' A 597  ASP  O  ', ' A 600  LYS  HG2', -0.616, (-2.065, 3.206, -46.621)), (' A 294  THR HG23', ' A 365  THR  HA ', -0.612, (-22.804, -7.775, -19.518)), (' A 538  PRO  HD2', ' A 541  LYS  HD3', -0.607, (-0.971, 3.367, -24.348)), (' A  80  ALA  HB2', ' A 100  LEU HD23', -0.606, (-35.954, 37.348, -10.344)), (' A 458  LYS  O  ', ' A 462  MET  HG3', -0.596, (-25.757, 28.45, -39.966)), (' A 123  MET  HG2', ' A 176  LEU HD22', -0.572, (-42.173, 19.992, -36.139)), (' A 284  PRO  HD3', ' A 440  LEU HD22', -0.566, (-12.113, -0.398, -37.855)), (' B 362  VAL HG13', ' B 526  GLY  HA2', -0.56, (-28.405, 15.112, 42.286)), (' B 387  LEU HD12', ' B 390  LEU HD12', -0.555, (-18.335, 20.912, 37.604)), (' B 472  ILE HD12', ' B 490  PHE  HA ', -0.552, (-43.993, 38.75, 6.501)), (' A 607  SER  OG ', ' A 609  ASP  OD1', -0.55, (-18.266, 16.226, -57.94)), (' B 334  ASN  O  ', ' B 362  VAL  N  ', -0.545, (-33.149, 16.558, 42.867)), (' A 122  THR  O  ', ' A 126  ILE HG13', -0.539, (-46.289, 18.013, -34.122)), (' B 424  LYS  NZ ', ' B 425  LEU  O  ', -0.539, (-23.687, 33.502, 20.694)), (' A 402  GLU  HB3', ' A 518  ARG  HD2', -0.534, (-21.154, 15.903, -22.747)), (' A 419  LYS  HE2', ' A 426  PRO  HA ', -0.529, (-4.032, -9.345, -16.67)), (' A  85  LEU  HA ', ' A  88  ILE HD13', -0.529, (-28.75, 44.357, -10.934)), (' A 524  GLN  HG2', ' A 583  PRO  HG2', -0.528, (-7.55, 19.787, -24.357)), (' A 233  ILE HD13', ' A 450  LEU HD13', -0.521, (-14.212, 17.606, -33.87)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.513, (-29.515, 31.951, 45.404)), (' B 336  CYS  SG ', ' B 363  ALA  HB2', -0.513, (-31.382, 17.711, 38.105)), (' B 472  ILE  CD1', ' B 490  PHE  HA ', -0.511, (-44.817, 38.752, 6.848)), (' A  68  LYS  HD3', ' A  68  LYS  N  ', -0.511, (-48.183, 24.044, -10.096)), (' A  33  ASN  O  ', ' A  37  GLU  HB2', -0.507, (-34.867, 27.308, -1.989)), (' A 108  LEU HD11', ' A 190  MET  HB2', -0.506, (-41.12, 35.23, -28.167)), (' A 557  MET  HA ', ' A 560  LEU HD12', -0.486, (-14.302, 24.929, -10.818)), (' A  34 BHIS  NE2', ' B 493  GLN  OE1', -0.486, (-40.234, 30.363, 3.594)), (' A 535  HIS  CD2', ' A 542  CYS  HB2', -0.48, (-2.975, 7.572, -19.692)), (' A 239  HIS  CE1', ' A 596  LYS  HG2', -0.479, (-3.806, 10.722, -43.824)), (' A 474  MET  HE1', ' A 499  ASP  H  ', -0.478, (-34.923, 19.506, -44.454)), (' B 417  LYS  HE3', ' B 455  LEU HD12', -0.477, (-32.495, 33.961, 6.202)), (' A 252  TYR  HB2', ' A 256  ILE HD12', -0.476, (-21.645, 1.401, -50.914)), (' B 393  THR HG22', ' B 394  ASN  ND2', -0.467, (-30.247, 29.931, 40.818)), (' A 476  LYS  O  ', ' A 480  MET  HG3', -0.463, (-26.173, 24.012, -46.816)), (' A 303  ASP  N  ', ' A 303  ASP  OD1', -0.452, (-24.493, -8.031, -8.288)), (' A 457  GLU  HG2', ' A 513  ILE  HB ', -0.451, (-24.089, 25.06, -31.528)), (' A  50  TYR  CE1', ' A  54  ILE HG23', -0.441, (-46.215, 6.775, -16.213)), (' B 419  ALA  O  ', ' B 424  LYS  HD2', -0.44, (-26.493, 34.718, 17.739)), (' B 399  SER  HA ', ' B 510  VAL  O  ', -0.43, (-33.639, 22.112, 22.851)), (' B 358  ILE  HA ', ' B 358  ILE HD13', -0.43, (-36.0, 22.52, 36.692)), (' A  34 AHIS  CD2', ' B 453  TYR  OH ', -0.429, (-34.443, 29.291, 4.611)), (' A 332  MET  HB3', ' A 332  MET  HE2', -0.427, (-35.078, 3.185, -10.45)), (' A 185  VAL  O  ', ' A 189  GLU  HG3', -0.425, (-40.526, 36.41, -34.441)), (' A  34  HIS  C  ', ' A  34 BHIS  CD2', -0.424, (-37.967, 29.109, 0.8)), (' A 338  ASN  N  ', ' A 338  ASN  OD1', -0.423, (-42.479, -7.641, -13.333)), (' A 315  PHE  CZ ', ' A 408  MET  HG3', -0.421, (-17.411, 9.053, -12.097)), (' A  50  TYR  CD2', ' A  62  MET  HE1', -0.418, (-44.263, 11.699, -15.08)), (' A  98  GLN  O  ', ' A 102  GLN  HG3', -0.417, (-31.557, 36.383, -16.449)), (' A 465  LYS  HB2', ' A 465  LYS  HE3', -0.414, (-27.329, 34.79, -36.843)), (' B 365  TYR  HE2', ' B 515  PHE  CZ ', -0.413, (-25.447, 20.506, 33.647)), (' A  96  GLN  HB3', ' A 391  LEU HD12', -0.412, (-29.894, 33.797, -8.224)), (' B 411  ALA  HB3', ' B 414  GLN  HG3', -0.403, (-21.0, 27.849, 17.183))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
