# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 150 ', 'LYS', 0.035184158709464744, (172.6650000000001, 253.84100000000004, 197.434)), ('A', ' 531 ', 'THR', 0.0188865841262318, (133.2099999999999, 191.876, 201.019)), ('B', ' 148 ', 'ASN', 0.0, (241.399, 143.841, 214.061)), ('B', ' 834 ', 'ILE', 0.0, (179.461, 148.259, 173.776)), ('B', ' 837 ', 'TYR', 0.0, (185.56400000000002, 145.506, 181.262)), ('B', ' 987 ', 'PRO', 0.03137429588894103, (170.61100000000002, 170.757, 207.585)), ('C', ' 834 ', 'ILE', 0.005036611526025516, (142.87999999999988, 189.151, 169.806)), ('C', ' 837 ', 'TYR', 0.0002303673580058565, (137.2409999999999, 186.477, 177.722)), ('C', ' 987 ', 'PRO', 0.02117252296792164, (165.08000000000004, 190.192, 205.94099999999997))]
data['omega'] = []
data['rota'] = [('B', ' 391 ', 'CYS', 0.17678197230536177, (188.121, 209.973, 203.89199999999997)), ('B', ' 525 ', 'CYS', 0.09684643591754138, (190.26300000000003, 213.16, 205.97199999999998)), ('C', ' 525 ', 'CYS', 0.13821092111312247, (189.711, 157.025, 213.169))]
data['cbeta'] = [('A', ' 360 ', 'ASN', ' ', 0.2705170121334137, (137.37299999999988, 179.797, 212.87799999999996))]
data['probe'] = [(' C 102  ARG  CD ', ' C 246  ILE HD11', -1.612, (125.144, 145.906, 207.89)), (' C 102  ARG  CG ', ' C 246  ILE HD11', -1.607, (126.123, 146.152, 208.967)), (' B 102  ARG  HG3', ' B 246  ILE  CD1', -1.588, (231.209, 159.671, 207.17)), (' B 102  ARG  CG ', ' B 246  ILE HD11', -1.57, (229.241, 159.62, 206.806)), (' C 102  ARG  CG ', ' C 246  ILE  CD1', -1.527, (125.425, 144.741, 208.308)), (' B  18  PHE  CZ ', ' B 140  PHE  CD1', -1.464, (236.481, 167.153, 212.568)), (' B 102  ARG  CG ', ' B 246  ILE  CD1', -1.462, (230.634, 159.114, 206.222)), (' B  18  PHE  CZ ', ' B 140  PHE  CE1', -1.442, (237.044, 168.066, 213.952)), (' B  18  PHE  CE2', ' B 140  PHE  CD1', -1.413, (235.408, 167.55, 212.847)), (' B 102  ARG  CD ', ' B 246  ILE HD11', -1.395, (229.621, 158.872, 206.396)), (' C 496  GLY  O  ', ' C 501  TYR  CZ ', -1.36, (184.853, 185.952, 239.263)), (' C 102  ARG  HD3', ' C 246  ILE  CD1', -1.32, (124.271, 144.789, 207.839)), (' A 332  ILE  CD1', ' A 362  VAL  HB ', -1.271, (135.867, 183.766, 213.39)), (' C 498  GLN  N  ', ' C 501  TYR  CE2', -1.269, (185.778, 185.05, 240.327)), (' C 102  ARG  CD ', ' C 246  ILE  CD1', -1.269, (125.447, 144.829, 208.173)), (' C 498  GLN  N  ', ' C 501  TYR  HE2', -1.259, (185.736, 184.303, 241.867)), (' C 498  GLN  HB2', ' C 501  TYR  CE2', -1.251, (184.059, 185.992, 241.296)), (' C 102  ARG  HG3', ' C 246  ILE  CG1', -1.228, (124.898, 144.573, 209.98)), (' B 102  ARG  HG3', ' B 246  ILE  CG1', -1.222, (231.145, 160.645, 207.696)), (' B  18  PHE  HZ ', ' B 140  PHE  CE1', -1.22, (236.223, 166.213, 214.176)), (' C 102  ARG  CG ', ' C 246  ILE  CG1', -1.217, (125.477, 144.245, 209.474)), (' B 986  PRO  HD2', ' B 987  PRO  HD3', -1.177, (170.913, 167.847, 209.502)), (' B 986  PRO  HD2', ' B 987  PRO  CD ', -1.17, (171.109, 168.669, 208.343)), (' A 332  ILE HD12', ' A 362  VAL  CB ', -1.166, (136.684, 184.43, 213.011)), (' B 986  PRO  CD ', ' B 987  PRO  HD3', -1.149, (171.513, 167.442, 208.497)), (' C 498  GLN  CB ', ' C 501  TYR  CE2', -1.145, (184.328, 184.44, 242.178)), (' C 986  PRO  HD2', ' C 987  PRO  HD3', -1.144, (162.318, 190.259, 207.581)), (' C 986  PRO  HD2', ' C 987  PRO  CD ', -1.137, (162.841, 190.867, 206.492)), (' C 102  ARG  HG3', ' C 246  ILE  CD1', -1.135, (125.647, 145.611, 210.133)), (' C 986  PRO  CD ', ' C 987  PRO  HD3', -1.135, (161.595, 191.076, 206.801)), (' A 335  LEU HD22', ' A 363  ALA  O  ', -1.132, (136.91, 185.628, 217.577)), (' C 985  ASP  HB2', ' C 986  PRO  HD3', -1.096, (160.413, 191.884, 207.889)), (' B  18  PHE  CE2', ' B 140  PHE  CE1', -1.093, (235.689, 167.604, 214.581)), (' C 498  GLN  O  ', ' C 501  TYR  HD2', -1.086, (183.006, 182.971, 240.535)), (' A 332  ILE HD12', ' A 362  VAL  HB ', -1.082, (136.882, 183.898, 213.678)), (' B 985  ASP  HB2', ' B 986  PRO  HD3', -1.077, (172.347, 166.19, 210.395)), (' C 391  CYS  SG ', ' C 525  CYS  SG ', -1.07, (189.039, 156.456, 209.858)), (' C 102  ARG  HG2', ' C 246  ILE  CD1', -1.061, (126.275, 144.993, 208.424)), (' B 102  ARG  HG2', ' B 246  ILE  CD1', -1.052, (230.05, 160.106, 206.114)), (' C 496  GLY  O  ', ' C 501  TYR  OH ', -1.048, (185.903, 187.234, 240.293)), (' B 987  PRO  HD2', ' B 988  GLU  H  ', -1.023, (172.742, 169.566, 208.006)), (' C 102  ARG  HD3', ' C 246  ILE HD11', -1.011, (124.777, 146.108, 207.977)), (' C 102  ARG  HG2', ' C 246  ILE HG13', -0.992, (126.455, 144.889, 209.259)), (' C 987  PRO  HD2', ' C 988  GLU  H  ', -0.988, (162.685, 188.428, 206.503)), (' B 102  ARG  HD2', ' B 246  ILE HD11', -0.984, (229.723, 158.185, 206.977)), (' C 102  ARG  HG2', ' C 246  ILE  CG1', -0.983, (126.035, 143.83, 209.122)), (' C 985  ASP  CB ', ' C 986  PRO  HD3', -0.966, (161.194, 190.481, 208.257)), (' B 102  ARG  HD2', ' B 246  ILE  CD1', -0.952, (230.154, 158.124, 206.467)), (' B  18  PHE  CE2', ' B 140  PHE  HD1', -0.95, (234.787, 168.211, 213.126)), (' C 102  ARG  HG3', ' C 246  ILE HD11', -0.928, (125.694, 145.846, 210.069)), (' A 361  CYS  SG ', ' A 390  LEU  O  ', -0.925, (143.363, 185.168, 211.619)), (' C 498  GLN  CA ', ' C 501  TYR  HE2', -0.91, (185.514, 184.172, 241.861)), (' B  18  PHE  HE2', ' B 140  PHE  CD1', -0.91, (235.671, 168.785, 214.054)), (' C 498  GLN  CA ', ' C 501  TYR  CE2', -0.91, (184.894, 183.938, 241.585)), (' C 102  ARG  CG ', ' C 246  ILE HG13', -0.892, (126.419, 144.313, 210.201)), (' B 985  ASP  CB ', ' B 986  PRO  HD3', -0.887, (172.396, 167.224, 209.935)), (' B 102  ARG  CG ', ' B 246  ILE HD12', -0.879, (230.729, 159.554, 206.031)), (' B  18  PHE  HZ ', ' B 140  PHE  CD1', -0.878, (236.074, 166.316, 213.681)), (' C 496  GLY  O  ', ' C 501  TYR  CE2', -0.877, (184.926, 185.686, 239.51)), (' C 102  ARG HH11', ' C 246  ILE HD13', -0.872, (123.062, 145.698, 209.06)), (' A 332  ILE HD11', ' A 362  VAL  HB ', -0.87, (136.477, 183.273, 214.796)), (' C 498  GLN  O  ', ' C 501  TYR  CD2', -0.863, (183.06, 183.636, 240.265)), (' A 332  ILE  CD1', ' A 362  VAL  CB ', -0.845, (136.916, 184.381, 214.38)), (' C 498  GLN  CB ', ' C 501  TYR  HE2', -0.836, (185.618, 184.722, 242.219)), (' B 102  ARG  CD ', ' B 246  ILE  CD1', -0.834, (230.05, 158.631, 206.05)), (' B 102  ARG  CG ', ' B 246  ILE  CG1', -0.832, (231.02, 160.773, 207.018)), (' C 102  ARG  HG3', ' C 246  ILE HG12', -0.831, (124.899, 144.735, 210.725)), (' C 987  PRO  HD2', ' C 988  GLU  N  ', -0.824, (164.024, 188.503, 206.536)), (' B 102  ARG  HG2', ' B 246  ILE HD12', -0.819, (231.059, 160.195, 205.961)), (' B  80  ALA  O  ', ' B 245  HIS  NE2', -0.819, (231.745, 169.825, 203.94)), (' B  18  PHE  HZ ', ' B 140  PHE  CZ ', -0.806, (237.432, 166.42, 214.599)), (' C 102  ARG  HD3', ' C 246  ILE HD12', -0.806, (124.524, 144.721, 207.836)), (' C 498  GLN  HB2', ' C 501  TYR  CD2', -0.783, (183.811, 185.067, 241.256)), (' B 987  PRO  HD2', ' B 988  GLU  N  ', -0.78, (172.713, 170.031, 207.27)), (' B 102  ARG  HG3', ' B 246  ILE HD11', -0.775, (230.028, 160.223, 208.054)), (' C 102  ARG HH11', ' C 246  ILE  CD1', -0.772, (123.732, 145.455, 208.698)), (' C 985  ASP  CB ', ' C 986  PRO  CD ', -0.764, (161.227, 190.972, 207.545)), (' B 985  ASP  HB2', ' B 986  PRO  CD ', -0.736, (171.727, 166.38, 209.551)), (' A 332  ILE HD12', ' A 362  VAL  CG1', -0.736, (136.102, 185.556, 214.005)), (' C 985  ASP  C  ', ' C 987  PRO  HD3', -0.731, (161.569, 190.407, 206.394)), (' A 332  ILE  CD1', ' A 362  VAL  CG1', -0.723, (135.873, 185.463, 214.428)), (' A 361  CYS  HA ', ' A 392  PHE  H  ', -0.715, (143.037, 181.429, 212.794)), (' C 986  PRO  CD ', ' C 987  PRO  CD ', -0.714, (162.111, 191.132, 206.475)), (' B 985  ASP  CB ', ' B 986  PRO  CD ', -0.712, (171.827, 166.689, 209.496)), (' B 986  PRO  HD2', ' B 987  PRO  N  ', -0.712, (170.34, 168.959, 208.733)), (' C 985  ASP  HB2', ' C 986  PRO  CD ', -0.706, (160.596, 191.64, 207.707)), (' C 483  VAL HG12', ' C 484  LYS  HG3', -0.706, (205.066, 197.307, 235.984)), (' C 986  PRO  HD2', ' C 987  PRO  N  ', -0.704, (163.277, 191.007, 206.669)), (' B 102  ARG  CG ', ' B 246  ILE HG13', -0.703, (230.883, 160.992, 207.282)), (' A 336  CYS  SG ', ' A 337  PRO  HD2', -0.7, (138.495, 180.124, 223.247)), (' A 168  PHE  CZ ', ' A 229  LEU HD22', -0.692, (174.089, 224.969, 204.0)), (' B 987  PRO  CD ', ' B 988  GLU  H  ', -0.688, (172.328, 170.01, 208.272)), (' C 987  PRO  CD ', ' C 988  GLU  H  ', -0.686, (163.453, 189.074, 206.531)), (' B  18  PHE  HD2', ' B 138  ASP  HB3', -0.67, (235.947, 171.742, 212.714)), (' B 985  ASP  C  ', ' B 987  PRO  HD3', -0.658, (172.549, 167.725, 208.303)), (' C 985  ASP  C  ', ' C 987  PRO  CD ', -0.643, (161.783, 189.926, 205.983)), (' B  18  PHE  HE2', ' B 140  PHE  HD1', -0.634, (234.994, 168.926, 213.715)), (' B 986  PRO  CD ', ' B 987  PRO  CD ', -0.633, (171.354, 167.696, 208.311)), (' B 987  PRO  CD ', ' B 988  GLU  N  ', -0.63, (172.234, 169.975, 208.06)), (' A 168  PHE  HZ ', ' A 229  LEU HD22', -0.626, (174.502, 224.967, 204.534)), (' C 987  PRO  CD ', ' C 988  GLU  N  ', -0.623, (163.448, 189.193, 206.151)), (' B  18  PHE  CZ ', ' B 140  PHE  CG ', -0.605, (236.223, 166.44, 212.756)), (' B 985  ASP  C  ', ' B 987  PRO  CD ', -0.584, (172.132, 168.317, 207.935)), (' C 498  GLN  CA ', ' C 501  TYR  CD2', -0.583, (183.926, 184.15, 241.223)), (' A 123  ALA  HB3', ' A 153  MET  HA ', -0.583, (171.822, 245.312, 198.965)), (' B 836  GLN  O  ', ' B 838  GLY  N  ', -0.582, (186.24, 144.36, 179.307)), (' B  18  PHE  CZ ', ' B 140  PHE  CZ ', -0.582, (237.189, 166.681, 214.854)), (' C 498  GLN  CG ', ' C 501  TYR  CE2', -0.581, (185.655, 185.899, 242.078)), (' C  80  ALA  O  ', ' C 245  HIS  NE2', -0.58, (134.005, 138.832, 208.513)), (' C 496  GLY  C  ', ' C 501  TYR  OH ', -0.577, (186.836, 186.899, 239.643)), (' C 498  GLN  N  ', ' C 501  TYR  CD2', -0.574, (184.042, 183.86, 240.995)), (' B 986  PRO  N  ', ' B 987  PRO  HD3', -0.569, (172.03, 167.348, 208.493)), (' B  18  PHE  HD2', ' B 138  ASP  CB ', -0.569, (235.765, 171.728, 212.96)), (' B  18  PHE  CE2', ' B 140  PHE  HE1', -0.55, (236.375, 168.251, 215.191)), (' B 618  THR  O  ', ' B 618  THR HG22', -0.542, (207.023, 203.121, 176.235)), (' C 294  ASP  HB2', ' C 295  PRO  HD2', -0.538, (155.87, 145.32, 181.741)), (' C 986  PRO  N  ', ' C 987  PRO  HD3', -0.535, (161.415, 190.881, 206.792)), (' C 836  GLN  O  ', ' C 838  GLY  N  ', -0.53, (136.108, 186.016, 175.712)), (' B  81  ASN  N  ', ' B  82  PRO  CD ', -0.521, (231.257, 173.802, 205.299)), (' A 341  VAL  O  ', ' A 341  VAL HG12', -0.52, (140.075, 181.119, 232.871)), (' B 620  VAL  HB ', ' B 621  PRO  CD ', -0.518, (210.027, 198.715, 175.625)), (' B 392  PHE  HB2', ' B 524  VAL  HB ', -0.518, (185.883, 214.202, 206.981)), (' C 986  PRO  HD2', ' C 987  PRO  CG ', -0.51, (163.563, 190.949, 207.861)), (' A 332  ILE HD12', ' A 362  VAL  CG2', -0.509, (136.371, 185.114, 213.041)), (' B 620  VAL  HB ', ' B 621  PRO  HD3', -0.504, (210.498, 198.107, 175.308)), (' A  24  LEU HD11', ' A  78  ARG  HB3', -0.5, (147.767, 241.933, 194.284)), (' B 851  CYS  SG ', ' B 855  PHE  CE2', -0.499, (186.15, 152.849, 183.479)), (' B 986  PRO  CD ', ' B 987  PRO  N  ', -0.499, (170.68, 167.964, 208.522)), (' B  18  PHE  HZ ', ' B 140  PHE  CG ', -0.493, (236.229, 166.24, 213.431)), (' B 624  ILE  O  ', ' B 624  ILE HG22', -0.489, (210.614, 197.086, 186.904)), (' B 620  VAL  N  ', ' B 621  PRO  HD2', -0.488, (208.861, 199.408, 176.212)), (' C 986  PRO  CD ', ' C 987  PRO  N  ', -0.486, (162.526, 191.504, 206.647)), (' C 101  ILE  N  ', ' C 101  ILE HD12', -0.486, (128.496, 142.556, 205.297)), (' A1041  ASP  HB3', ' C1030  SER  HB3', -0.486, (164.719, 183.456, 142.839)), (' C 985  ASP  CG ', ' C 986  PRO  CD ', -0.485, (161.601, 190.295, 207.947)), (' A 133  PHE  HB3', ' A 160  TYR  CD1', -0.482, (162.723, 234.08, 213.073)), (' A 965  GLN  NE2', ' C 758  SER  OG ', -0.477, (172.941, 193.198, 181.038)), (' A 742  ILE  O  ', ' A 743  CYS  HB3', -0.473, (185.889, 191.313, 189.285)), (' C 102  ARG  CD ', ' C 246  ILE HD12', -0.472, (125.39, 144.877, 207.924)), (' B 985  ASP  OD2', ' B 987  PRO  CG ', -0.47, (171.883, 169.552, 210.7)), (' B 986  PRO  HD2', ' B 987  PRO  CG ', -0.467, (171.047, 169.096, 209.727)), (' C 278  LYS  HB2', ' C 306  PHE  CE2', -0.464, (143.681, 158.781, 181.046)), (' A 743  CYS  SG ', ' A 746  SER  HB3', -0.461, (189.698, 191.456, 191.997)), (' A 530  SER  O  ', ' A 531  THR  O  ', -0.46, (133.507, 189.874, 199.907)), (' A 566  GLY  HA2', ' C  43  PHE  O  ', -0.46, (139.868, 171.776, 189.271)), (' A 530  SER  O  ', ' A 531  THR  C  ', -0.456, (132.972, 190.289, 200.011)), (' A 133  PHE  HB3', ' A 160  TYR  CG ', -0.455, (163.154, 234.399, 212.916)), (' C 683  CYS  SG ', ' C 697  MET  HE2', -0.455, (168.678, 149.621, 161.846)), (' A 341  VAL  CG1', ' A 341  VAL  O  ', -0.453, (139.543, 180.746, 232.699)), (' A 662  CYS  HB2', ' A 697  MET  HG3', -0.45, (150.85, 196.97, 153.962)), (' A 800  PHE  CE1', ' A 924  ALA  HA ', -0.45, (177.872, 199.427, 128.19)), (' A 347  PHE  HB2', ' A 401  VAL HG23', -0.449, (144.691, 176.69, 237.975)), (' B  18  PHE  CD2', ' B 138  ASP  HB3', -0.448, (235.833, 170.843, 212.554)), (' A 332  ILE HD12', ' A 362  VAL HG11', -0.448, (135.769, 185.537, 214.254)), (' C 896  ILE HG23', ' C 901  GLN  HG3', -0.448, (153.412, 180.103, 129.077)), (' B 240  THR HG21', ' B 245  HIS  CE1', -0.447, (230.001, 168.426, 203.905)), (' B 618  THR  O  ', ' B 622  VAL HG23', -0.444, (207.821, 202.355, 178.133)), (' A 125  ASN  HA ', ' A 174  PRO  HA ', -0.44, (176.066, 237.726, 197.692)), (' C  81  ASN  N  ', ' C  82  PRO  CD ', -0.44, (137.345, 137.753, 210.638)), (' A 361  CYS  CA ', ' A 392  PHE  H  ', -0.44, (142.529, 182.138, 212.955)), (' A 150  LYS  C  ', ' A 152  TRP  H  ', -0.439, (171.777, 251.229, 197.689)), (' A 275  PHE  CE2', ' A 290  ASP  HB2', -0.438, (160.163, 215.995, 180.836)), (' C 312  ILE  O  ', ' C 312  ILE HG23', -0.438, (162.774, 155.17, 170.665)), (' B1028  LYS  O  ', ' B1032  CYS  HB2', -0.438, (178.572, 166.303, 145.315)), (' A 804  GLN  HA ', ' A 817  PHE  HB2', -0.437, (183.709, 205.868, 140.709)), (' A 212  LEU HD22', ' A 217  PRO  HD3', -0.436, (158.579, 235.361, 181.173)), (' A  14  GLN  N  ', ' A 255  SER  HG ', -0.436, (157.53, 245.97, 211.873)), (' C 826  VAL HG22', ' C 949  GLN  HG3', -0.435, (150.97, 169.644, 161.034)), (' A1050  MET  HG2', ' A1065  VAL  HB ', -0.435, (176.474, 193.242, 134.698)), (' A 327  VAL HG13', ' A 542  ASN  HB3', -0.435, (140.432, 186.271, 200.221)), (' B  53  ASP  HB3', ' B  55  PHE  CE2', -0.434, (206.283, 171.183, 193.407)), (' A 435  ALA  HA ', ' A 509  ARG  O  ', -0.434, (147.717, 183.348, 235.923)), (' B 312  ILE  O  ', ' B 312  ILE HG23', -0.433, (198.704, 181.129, 167.351)), (' A 355  ARG  HA ', ' A 397  ALA  O  ', -0.43, (141.598, 175.273, 227.949)), (' A 318  PHE  N  ', ' A 593  GLY  O  ', -0.428, (150.093, 196.664, 177.642)), (' A  43  PHE  HB3', ' B 566  GLY  HA2', -0.428, (182.785, 214.469, 182.749)), (' A 550  GLY  HA2', ' A 590  CYS  SG ', -0.428, (142.018, 189.376, 186.622)), (' C 142  GLY  HA2', ' C 247  SER  OG ', -0.428, (123.305, 140.295, 214.861)), (' A 328  ARG  O  ', ' A 579  PRO  HG2', -0.426, (135.379, 182.337, 200.303)), (' C 498  GLN  C  ', ' C 501  TYR  CD2', -0.426, (183.699, 183.651, 241.649)), (' C 102  ARG  HG2', ' C 246  ILE HD12', -0.424, (125.721, 144.508, 208.207)), (' A  84  LEU  HB2', ' A 238  PHE  CZ ', -0.424, (154.884, 227.822, 199.202)), (' A 126  VAL  HB ', ' A 172  SER  HB3', -0.424, (173.627, 233.13, 198.848)), (' C  99  ASN  O  ', ' C 246  ILE HD12', -0.423, (124.76, 144.413, 207.403)), (' C 841  LEU  C  ', ' C 841  LEU HD12', -0.422, (134.492, 180.273, 179.379)), (' C 498  GLN  HG3', ' C 501  TYR  CE2', -0.422, (185.842, 185.924, 241.888)), (' A1030  SER  HA ', ' A1034  LEU HD12', -0.421, (183.986, 182.756, 142.691)), (' A  37  TYR  OH ', ' A 195  LYS  NZ ', -0.421, (166.008, 216.928, 191.068)), (' C 498  GLN  C  ', ' C 501  TYR  HD2', -0.419, (183.716, 183.485, 241.471)), (' A 619  GLU  O  ', ' A 620  VAL  C  ', -0.418, (138.785, 206.235, 178.452)), (' A 206  LYS  HB2', ' A 223  LEU  HA ', -0.417, (169.807, 227.151, 185.999)), (' A 361  CYS  HA ', ' A 392  PHE  O  ', -0.417, (142.345, 180.497, 213.237)), (' A 130  VAL  HB ', ' A 168  PHE  HB3', -0.417, (171.009, 225.442, 209.863)), (' C 289  VAL HG23', ' C 306  PHE  CE1', -0.417, (146.57, 155.445, 181.85)), (' A 191  GLU  OE1', ' A 223  LEU HD11', -0.416, (165.588, 227.71, 185.742)), (' A 411  ALA  HB3', ' A 414  GLN  HB2', -0.416, (159.928, 179.092, 226.11)), (' A1035  GLY  HA3', ' B1040  VAL HG21', -0.415, (180.826, 181.336, 137.673)), (' B 683  CYS  SG ', ' B 697  MET  HE2', -0.415, (199.829, 188.089, 157.371)), (' A 152  TRP  CE3', ' A 179  LEU  HB2', -0.414, (166.723, 250.013, 195.778)), (' B 877  LEU HD13', ' B1029  MET  SD ', -0.414, (177.306, 159.557, 148.017)), (' B 584  ILE  O  ', ' B 584  ILE HG23', -0.414, (192.384, 218.407, 181.523)), (' A 231  ILE HG22', ' A 233  ILE HG23', -0.413, (167.887, 221.685, 208.895)), (' A 332  ILE  CD1', ' A 362  VAL HG11', -0.412, (135.623, 185.532, 214.431)), (' A 986  PRO  N  ', ' A 987  PRO  HD2', -0.412, (185.995, 189.125, 207.242)), (' C  18  PHE  CZ ', ' C 140  PHE  CE1', -0.412, (127.074, 137.438, 217.805)), (' A 116  SER  O  ', ' A 130  VAL  HA ', -0.412, (166.843, 228.185, 210.341)), (' A 350  VAL HG12', ' A 422  ASN  HB3', -0.411, (152.756, 171.021, 232.902)), (' B 463  PRO  O  ', ' B 464  PHE  CG ', -0.411, (168.19, 212.23, 214.079)), (' A 347  PHE  CG ', ' A 399  SER  OG ', -0.41, (142.505, 177.877, 235.306)), (' C 336  CYS  HA ', ' C 337  PRO  HD3', -0.41, (194.586, 158.382, 221.741)), (' A 193  VAL  O  ', ' A 203  ILE  HA ', -0.41, (167.7, 224.482, 195.279)), (' B  81  ASN  N  ', ' B  82  PRO  HD3', -0.409, (231.974, 173.701, 205.457)), (' C 193  VAL HG23', ' C 223  LEU  CD1', -0.408, (139.142, 153.055, 197.927)), (' C 985  ASP  OD2', ' C 987  PRO  CG ', -0.408, (163.295, 189.662, 209.066)), (' C 844  ILE  O  ', ' C 844  ILE HG12', -0.407, (140.082, 177.556, 176.996)), (' B 347  PHE  HB2', ' B 401  VAL HG23', -0.407, (179.223, 216.103, 229.126)), (' B 147  LYS  O  ', ' B 149  ASN  N  ', -0.407, (239.438, 144.263, 212.986)), (' C 738  CYS  SG ', ' C 760  CYS  O  ', -0.407, (162.965, 191.609, 180.918)), (' A  37  TYR  HA ', ' A 223  LEU  H  ', -0.406, (168.705, 223.223, 185.696)), (' B  84  LEU  HB2', ' B 238  PHE  CZ ', -0.405, (223.369, 175.664, 204.063)), (' A 984  LEU HD11', ' A 992  GLN  HG3', -0.401, (178.816, 192.195, 200.811)), (' A 347  PHE  CE2', ' A 509  ARG  HB3', -0.401, (144.303, 180.77, 237.088))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
