# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (94.36500000000005, 118.227, 118.019)), ('B', ' 183 ', 'PRO', None, (116.24100000000003, 104.329, 125.35900000000001))]
data['rota'] = [('A', ' 235 ', 'ASP', 0.295393504013337, (109.46799999999999, 113.35099999999998, 74.027)), ('A', ' 758 ', 'LEU', 0.12159828339104142, (89.97, 95.392, 96.352)), ('A', ' 790 ', 'ASN', 0.160706758770625, (107.083, 101.782, 93.295)), ('A', ' 829 ', 'LEU', 0.24755701290060292, (82.81099999999996, 79.153, 98.21700000000001)), ('C', '  45 ', 'THR', 0.23295629534153617, (109.80000000000001, 72.75, 121.47300000000003))]
data['cbeta'] = []
data['probe'] = [(' A 758  LEU HD23', ' A 759  SER  H  ', -0.757, (90.049, 96.947, 97.942)), (' A 740  ASP  OD2', ' A 741  PHE  N  ', -0.696, (91.484, 105.38, 69.477)), (' A 689  TYR  O  ', ' A 693  VAL HG23', -0.608, (91.141, 103.821, 93.93)), (' A 622  CYS  SG ', ' A 623  ASP  N  ', -0.592, (100.702, 99.851, 100.679)), (' A 503  GLY  O  ', ' A 507  ASN  N  ', -0.591, (91.23, 114.736, 119.105)), (' A 873  PRO  O  ', ' A 875  GLN  NE2', -0.571, (88.401, 64.619, 104.048)), (' A 472  VAL  O  ', ' A 476  VAL HG23', -0.567, (94.909, 104.434, 83.393)), (' A 837  ILE  O  ', ' A 884  TYR  OH ', -0.555, (88.683, 80.233, 115.565)), (' A 857  GLU  N  ', ' A 857  GLU  OE2', -0.547, (77.442, 86.207, 121.121)), (' B 159  VAL HG11', ' B 172  ILE HD11', -0.523, (122.678, 111.204, 129.687)), (' A 135  ASP  N  ', ' A 135  ASP  OD2', -0.517, (115.016, 91.69, 84.763)), (' A 623  ASP  N  ', ' A 623  ASP  OD1', -0.505, (101.908, 100.399, 102.279)), (' A 790  ASN  ND2', ' A 790  ASN  O  ', -0.504, (106.927, 101.266, 95.492)), (' B 101  ASP  N  ', ' B 101  ASP  OD1', -0.5, (110.861, 137.324, 121.907)), (' C  47  GLU  N  ', ' C  47  GLU  OE2', -0.499, (114.116, 74.856, 121.59)), (' A 153  ASP  OD1', ' A 154  ASP  N  ', -0.49, (133.257, 94.038, 91.977)), (' C   2  LYS  O  ', ' C   6  VAL HG23', -0.486, (104.318, 73.534, 125.672)), (' A 206  THR  OG1', ' A 209  ASN  ND2', -0.474, (118.409, 106.973, 67.604)), (' A 388  LEU HD22', ' A 672  SER  HB3', -0.472, (109.479, 115.311, 118.649)), (' B 132  ILE HD13', ' B 138  TYR  HD2', -0.469, (123.201, 111.152, 124.245)), (' A 564  SER  O  ', ' A 568  ASN  ND2', -0.465, (89.13, 115.493, 104.56)), (' A 470  LEU  O  ', ' A 473  VAL HG12', -0.464, (96.714, 109.724, 82.031)), (' A 200  GLY  O  ', ' A 225  THR  N  ', -0.458, (117.39, 121.756, 58.11)), (' A 487  CYS  SG ', ' A 642  HIS  CE1', -0.451, (82.285, 117.761, 94.786)), (' A 273  TYR  OH ', ' B 112  ASP  OD2', -0.451, (105.696, 134.839, 101.025)), (' B  77  GLU  N  ', ' B  77  GLU  OE2', -0.45, (74.195, 122.437, 121.439)), (' A 845  ASP  OD1', ' A 846  ASP  N  ', -0.45, (90.375, 92.333, 124.1)), (' A 758  LEU  O  ', ' A 759  SER  C  ', -0.448, (93.109, 96.796, 96.582)), (' A 278  GLU  N  ', ' A 278  GLU  OE1', -0.447, (114.836, 129.937, 91.794)), (' A  42  VAL HG12', ' A  43  ALA  N  ', -0.44, (107.739, 98.336, 65.918)), (' A 736  ASP  N  ', ' A 736  ASP  OD2', -0.44, (97.073, 114.91, 71.109)), (' A 291  ASP  N  ', ' A 291  ASP  OD1', -0.438, (108.239, 120.482, 74.434)), (' A 197  ARG  HG2', ' A 197  ARG HH11', -0.434, (118.096, 127.281, 67.128)), (' A 726  ARG  NH1', ' A 744  GLU  OE1', -0.433, (92.864, 100.887, 67.74)), (' A 531  THR HG21', ' A 567  THR HG21', -0.429, (87.39, 121.271, 104.956)), (' B 165  LYS  HA ', ' B 165  LYS  HE3', -0.423, (114.15, 108.81, 137.528)), (' A 499  ASP  OD2', ' A 513  ARG  NH2', -0.422, (78.562, 108.108, 119.442)), (' A 514  LEU HD13', ' B  79  LYS  HE2', -0.414, (79.88, 117.167, 123.308)), (' A 856  ILE  O  ', ' A 860  VAL HG23', -0.413, (77.392, 82.518, 118.806)), (' A 633  MET  HE1', ' A 697  CYS  HB2', -0.411, (96.901, 104.984, 88.621)), (' B 158  GLN  HA ', ' B 158  GLN  OE1', -0.409, (119.497, 116.682, 133.995)), (' C  14  LEU HD22', ' C  36  HIS  CG ', -0.408, (104.954, 87.783, 125.383)), (' B 132  ILE HD13', ' B 138  TYR  CD2', -0.408, (123.63, 111.13, 124.605)), (' A 246  THR HG21', ' A 462  THR  HA ', -0.407, (111.774, 108.618, 91.358)), (' A 844  VAL HG11', ' A 849  LYS  HB2', -0.4, (86.987, 89.226, 123.77)), (' B 164  SER  O  ', ' B 164  SER  OG ', -0.4, (111.35, 110.338, 134.91)), (' C  31  GLN  O  ', ' C  35  LEU HD23', -0.4, (112.943, 88.166, 126.398))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
