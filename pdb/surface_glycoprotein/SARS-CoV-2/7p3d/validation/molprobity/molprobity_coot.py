# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', '   2 ', 'SER', None, (20.004, 15.249, 1.996)), ('A', ' 210 ', 'PRO', None, (9.509, 15.727000000000004, 4.7589999999999995)), ('B', '  32 ', 'PRO', None, (5.126000000000003, -11.364000000000004, 14.211999999999998))]
data['rota'] = [('A', '   2 ', 'SER', 0.051967462628577966, (20.033, 13.796, 1.701)), ('A', ' 111 ', 'ARG', 0.0005625684379364916, (25.961, 5.173, 1.8759999999999997)), ('B', '   0 ', 'MET', 0.10038993144759478, (10.117, -16.273, 15.917999999999997))]
data['cbeta'] = []
data['probe'] = [(' A 216 ATHR HG22', ' A 546  HOH  O  ', -0.996, (13.142, 17.152, 21.466)), (' A 111 BARG  HG2', ' A 111 BARG HH11', -0.899, (25.433, 2.285, 4.137)), (' B   4 ATHR HG22', ' B 207  HOH  O  ', -0.7, (-0.144, -5.242, 20.703)), (' A 146  LYS  HD3', ' C 202  HOH  O  ', -0.671, (24.972, -19.516, -2.323)), (' A 301  EDO  H12', ' C   6  THR  HA ', -0.663, (19.526, -12.863, -7.488)), (' A 188  HIS  HD2', ' A 417  HOH  O  ', -0.654, (-2.192, 22.747, 13.644)), (' A 119  ASP  HB3', ' B   0  MET  HA ', -0.632, (10.999, -15.867, 14.151)), (' A  72  GLN  NE2', ' A  75  ARG  HE ', -0.627, (10.043, -20.421, -6.527)), (' A 111 AARG  HD3', ' A 113  TYR  OH ', -0.622, (22.771, 4.753, 5.157)), (' A 108  ARG  NH1', ' A 403  HOH  O  ', -0.616, (31.185, 12.921, -2.376)), (' B  22  PHE  CE2', ' B  69  GLU  HG2', -0.6, (-11.674, 8.857, 2.171)), (' A  65 AARG  NH1', ' A 405  HOH  O  ', -0.6, (12.768, -8.115, -18.947)), (' A 181  ARG  NH1', ' A 303  ACT  H1 ', -0.597, (3.09, 19.271, -4.504)), (' A 230  LEU  C  ', ' A 230  LEU HD12', -0.593, (4.209, 10.383, 22.048)), (' B  51  HIS  HD2', ' B  52  SER  O  ', -0.552, (-1.739, -2.352, 3.217)), (' A 111 BARG  CG ', ' A 111 BARG HH11', -0.54, (25.912, 3.216, 4.628)), (' A 146  LYS  CD ', ' C 202  HOH  O  ', -0.537, (24.874, -18.999, -1.657)), (' A 530  HOH  O  ', ' B   0  MET  HE2', -0.52, (7.456, -15.402, 11.696)), (' A 144  LYS  HE3', ' A 148  GLU  OE2', -0.487, (33.282, -12.484, 5.748)), (' A 181  ARG HH12', ' A 303  ACT  H1 ', -0.479, (2.548, 19.301, -4.296)), (' A  74  HIS  CE1', ' A  97  ARG HH11', -0.475, (15.777, -10.822, -2.126)), (' A   1  GLY  HA2', ' A 105  SER  HA ', -0.464, (22.183, 17.19, 0.816)), (' A 275  GLU  HB2', ' A 276  PRO  HD3', -0.459, (-0.137, 33.865, 22.302)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.456, (16.178, -8.097, 9.694)), (' A  70  HIS  HA ', ' A 301  EDO  H22', -0.45, (15.485, -11.711, -5.895)), (' A  73  THR HG21', ' A 301  EDO  H11', -0.431, (17.801, -13.595, -4.336)), (' A  49  ALA  O  ', ' A  52  ILE HG22', -0.419, (4.093, 6.476, -9.641)), (' A 187  THR  HA ', ' A 204  TRP  O  ', -0.418, (1.661, 22.114, 15.071)), (' B   3  ARG  NH2', ' B 206  HOH  O  ', -0.412, (14.374, -7.359, 16.971)), (' A   7  TYR  O  ', ' A  98  MET  HA ', -0.411, (14.82, -3.338, 1.248)), (' A   2  SER  HB3', ' A 647  HOH  O  ', -0.407, (19.252, 11.172, 3.338)), (' B  25  CYS  HB2', ' B  39  LEU HD21', -0.404, (-8.174, 2.172, 12.318))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
