# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 154 ', 'PRO', None, (-43.363, -70.235, 3.929)), ('H', ' 156 ', 'PRO', None, (-42.748, -66.074, 8.677000000000007)), ('L', '   8 ', 'PRO', None, (-28.726999999999972, -69.33300000000001, 37.281)), ('L', ' 140 ', 'PRO', None, (-50.607000000000006, -72.49800000000002, 36.89))]
data['rota'] = [('A', ' 362 ', 'VAL', 0.29884453648815845, (-10.196, -3.067999999999999, 18.835000000000008))]
data['cbeta'] = []
data['probe'] = [(' L 209  ASN  HB2', ' L 212  GLU  HG2', -0.699, (-75.363, -80.679, 17.853)), (' A 457  ARG  NH1', ' A 467  ASP  OD2', -0.633, (-5.572, -37.719, 21.479)), (' H  39  GLN  HB2', ' H  45  LEU HD23', -0.632, (-28.786, -65.261, 17.49)), (' L 146  GLN  HB3', ' L 153  LEU HD11', -0.608, (-58.853, -87.297, 26.057)), (' H 145  LEU HD13', ' H 218  VAL HG21', -0.605, (-63.926, -62.903, 14.97)), (' L  29  VAL HG13', ' L  92  SER  HB2', -0.589, (-13.226, -59.333, 27.811)), (' A 412  PRO  HG3', ' A 429  PHE  HB3', -0.572, (-16.122, -22.234, 29.836)), (' H  66  ARG  NH2', ' H  89  ASP  OD2', -0.571, (-24.921, -70.374, 3.751)), (' A 523  THR HG23', ' A 524  VAL HG23', -0.564, (-5.573, -8.024, 21.346)), (' H 130  PRO  HD3', ' H 216  LYS  HE2', -0.563, (-63.645, -67.877, 6.774)), (' H  29  LEU  H  ', ' H  29  LEU HD23', -0.555, (-25.703, -42.4, 8.255)), (' H  96  VAL HG11', ' H 107  PHE  HB3', -0.525, (-26.15, -54.708, 18.835)), (' A 360  ASN  OD1', ' A 523  THR  OG1', -0.518, (-2.031, -6.186, 20.716)), (' L 105  ILE  O  ', ' L 165  GLN  NE2', -0.517, (-45.122, -66.286, 35.497)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.514, (-19.236, -25.086, 10.118)), (' A 384  PRO  O  ', ' A 388  ASN  ND2', -0.512, (-20.27, -6.758, 24.634)), (' A 358  ILE  HB ', ' A 395  VAL HG23', -0.502, (-8.558, -11.936, 19.112)), (' A 364  ASP  O  ', ' A 366  SER  N  ', -0.494, (-19.222, -5.264, 19.427)), (' A 350  VAL HG22', ' A 422  ASN  HB3', -0.49, (-13.878, -31.681, 17.962)), (' H 207  HIS  CD2', ' H 209  PRO  HD2', -0.485, (-45.582, -65.537, 3.991)), (' H  29  LEU  HB2', ' H  34  TRP  HE1', -0.484, (-23.86, -45.954, 9.926)), (' L 112  PRO  HB3', ' L 138  PHE  HB3', -0.475, (-56.047, -71.706, 32.038)), (' H  18  LEU HD12', ' H 116  VAL HG11', -0.472, (-31.182, -66.039, 3.736)), (' H  63  LEU HD13', ' H  67  VAL HG21', -0.469, (-20.336, -64.115, 7.106)), (' H  29  LEU  HB2', ' H  34  TRP  NE1', -0.463, (-23.9, -46.381, 10.231)), (' L  38  HIS  HB3', ' L  85  VAL HG13', -0.457, (-34.43, -62.783, 25.306)), (' L 119  PRO  HD3', ' L 131  VAL HG22', -0.451, (-64.407, -79.088, 14.173)), (' L 118  PRO  HB3', ' L 208  PHE  CE2', -0.439, (-68.334, -77.758, 16.01)), (' H  90  THR HG23', ' H 117  THR  HA ', -0.435, (-35.183, -70.7, 6.918)), (' H  86  THR  OG1', ' H  87  ALA  N  ', -0.429, (-27.863, -75.706, 4.011)), (' L  65  SER  OG ', ' L  72  THR  OG1', -0.428, (-23.133, -58.485, 40.829)), (' L  78  LEU  HA ', ' L  78  LEU HD23', -0.417, (-38.211, -57.818, 38.368))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
