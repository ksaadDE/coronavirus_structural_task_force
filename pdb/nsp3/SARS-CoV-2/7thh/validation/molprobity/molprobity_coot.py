# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 723 ', 'PRO', None, (-27.307000000000002, 46.31, 33.627999999999986)), ('B', ' 723 ', 'PRO', None, (25.052, 28.27499999999999, 76.354)), ('C', ' 723 ', 'PRO', None, (0.4870000000000001, 7.527000000000001, 33.114)), ('D', ' 723 ', 'PRO', None, (29.78800000000001, 26.590999999999994, 91.46299999999997)), ('E', ' 723 ', 'PRO', None, (52.78700000000001, 42.841, 127.433)), ('F', ' 723 ', 'PRO', None, (-1.2289999999999983, 64.416, 90.50199999999998)), ('F', ' 723 ', 'PRO', None, (-1.2289999999999983, 64.416, 90.50199999999998))]
data['rota'] = [('A', ' 741 ', 'LEU', 0.049122848434122776, (-9.589, 41.321, 44.929)), ('A', ' 741 ', 'LEU', 0.005638238839856183, (-9.602000000000004, 41.326, 44.93099999999998)), ('A', ' 796 ', 'GLU', 0.2737402750043669, (-4.597999999999998, 33.69, 70.438)), ('B', ' 745 ', 'ARG', 0.04316935120120667, (2.9410000000000003, 18.548, 58.717)), ('D', ' 704 ', 'GLN', 0.11908254409957436, (24.139000000000003, 21.495, 106.20499999999997)), ('E', ' 789 ', 'ILE', 0.2731811652188388, (13.869000000000007, 33.98299999999998, 99.39099999999998)), ('E', ' 793 ', 'ASN', 0.23979517957799767, (24.492, 28.328999999999994, 95.96099999999997)), ('E', ' 796 ', 'GLU', 0.06896570431676285, (25.85200000000001, 31.971, 91.314)), ('E', ' 805 ', 'ASN', 0.0005184795635769645, (18.02000000000001, 52.182, 92.203)), ('F', ' 722 ', 'ASN', 0.23835016240296805, (-3.271999999999997, 63.024, 90.07299999999998))]
data['cbeta'] = []
data['probe'] = [(' A 902  P6G H142', ' E 758  ASN HD22', -0.933, (13.817, 40.616, 79.031)), (' A 902  P6G H142', ' E 758  ASN  ND2', -0.581, (14.396, 40.468, 79.622)), (' B 801  TYR  CE2', ' B 902  P6G  H61', -0.514, (-14.157, 23.7, 30.427)), (' A 758  ASN HD22', ' A 902  P6G  C6 ', -0.503, (7.895, 40.407, 83.491)), (' A 680  GLU  HG3', ' A 735  PHE  CG ', -0.499, (-16.142, 40.189, 34.394)), (' A 758  ASN  HB3', ' A 902  P6G  H32', -0.493, (5.698, 39.865, 84.714)), (' F 749  THR  HB ', ' F 765 AVAL HG13', -0.478, (18.666, 57.345, 121.155)), (' C 758  ASN HD22', ' C 903  P6G  C6 ', -0.476, (39.429, 3.531, 84.134)), (' C 743  SER  OG ', ' C1001  HOH  O  ', -0.471, (19.627, -2.446, 42.112)), (' C 758  ASN HD22', ' C 903  P6G  H62', -0.468, (39.263, 2.972, 83.641)), (' A 728  LEU  CD2', ' A 741 ALEU HD11', -0.464, (-13.482, 43.613, 47.652)), (' B 680  GLU  HG3', ' B 735  PHE  CG ', -0.456, (14.313, 22.585, 74.593)), (' B 780  TYR  OH ', ' B1001  HOH  O  ', -0.455, (-18.952, 23.929, 37.798)), (' B 762 BHIS  CE1', ' B1112  HOH  O  ', -0.454, (0.127, 28.56, 28.396)), (' E 805  ASN  N  ', ' E 805  ASN  OD1', -0.454, (18.634, 51.238, 90.84)), (' B 798 BLYS  NZ ', ' B1007  HOH  O  ', -0.443, (-6.199, 9.763, 38.615)), (' A 741 BLEU  HA ', ' A 741 BLEU HD22', -0.437, (-8.445, 42.288, 45.754)), (' A 798 ALYS  NZ ', ' A1007  HOH  O  ', -0.43, (2.357, 29.329, 71.063)), (' A 733 AILE HD11', ' A 738  LEU HD13', -0.425, (-15.965, 42.384, 43.145)), (' C 903  P6G  H62', ' C 903  P6G  H91', -0.42, (40.288, 2.656, 83.904)), (' D 727  HIS  CE1', ' E 748  ARG HH12', -0.419, (31.175, 26.99, 101.239)), (' F 766  VAL HG12', ' F 791  PRO  HG2', -0.419, (25.335, 55.713, 120.652)), (' C 903  P6G H122', ' C 903  P6G H151', -0.415, (43.569, 3.037, 78.9)), (' E 766  VAL HG12', ' E 791  PRO  HG2', -0.413, (22.407, 36.685, 98.466)), (' A 766  VAL HG12', ' A 791  PRO  HG2', -0.411, (-0.926, 39.512, 64.05)), (' B 754  THR HG23', ' B 764  GLN  HG3', -0.403, (-2.108, 24.478, 37.11)), (' E 766  VAL  CG1', ' E 791  PRO  HG2', -0.401, (21.96, 36.459, 98.368)), (' A 758  ASN HD22', ' A 902  P6G  H61', -0.4, (7.427, 40.766, 84.031))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
