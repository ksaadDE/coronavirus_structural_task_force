# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('D', ' 195 ', 'SER', 0.0036539663673099154, (17.644, 18.724, 74.053))]
data['omega'] = [('A', ' 210 ', 'PRO', None, (-9.808, -3.6520000000000006, -22.031)), ('A', ' 222 ', 'GLU', None, (4.9040000000000035, -6.216000000000001, -44.757)), ('A', ' 223 ', 'ASP', None, (6.580000000000001, -4.736000000000001, -41.923)), ('B', '  32 ', 'PRO', None, (6.723999999999998, 17.892, -11.601)), ('D', ' 210 ', 'PRO', None, (26.465999999999998, -3.846, 45.403)), ('D', ' 250 ', 'PRO', None, (13.848000000000003, 8.492, 73.799)), ('E', '  32 ', 'PRO', None, (10.25099999999999, 17.791, 34.842))]
data['rota'] = [('A', ' 192 ', 'HIS', 0.13504291767715226, (-5.467000000000005, 14.308, -44.552)), ('A', ' 200 ', 'THR', 0.026158396866485727, (-0.8490000000000002, 10.827, -43.896)), ('C', '   9 ', 'VAL', 0.2955170168034182, (12.043000000000003, 5.358, 4.903)), ('D', ' 196 ', 'ASP', 0.2948669063917504, (16.703, 17.72100000000001, 77.608)), ('E', '  47 ', 'GLU', 0.2997123875637232, (34.099999999999994, 26.371, 39.967))]
data['cbeta'] = [('A', ' 222 ', 'GLU', ' ', 0.257275510337831, (6.121, -7.501000000000001, -43.101))]
data['probe'] = [(' A 121  LYS  HE3', ' B   1  ILE HG21', -1.151, (14.741, 12.294, -14.068)), (' A 121  LYS  CE ', ' B   1  ILE HG21', -1.104, (14.288, 11.453, -13.998)), (' D 120  GLY  HA3', ' E   1  ILE HD11', -0.937, (5.723, 12.052, 34.444)), (' A  11  SER  HB3', ' A  95  VAL HG12', -0.859, (5.195, 12.111, -0.688)), (' E  58  LYS  H  ', ' E  58  LYS  HD2', -0.805, (14.001, 2.922, 39.173)), (' D 200  THR  HA ', ' D 248  VAL HG12', -0.796, (18.675, 10.98, 67.156)), (' A 219  ARG  HD2', ' A 224  GLN HE21', -0.79, (8.889, 0.5, -47.231)), (' D 192  HIS  N  ', ' D 200  THR  OG1', -0.763, (22.893, 12.634, 67.817)), (' D  98  MET  CE ', ' D 115  GLN  HG3', -0.754, (11.153, -0.385, 30.747)), (' D 250  PRO  O  ', ' D 253  GLN  HB2', -0.747, (16.538, 6.605, 75.386)), (' B  58  LYS  H  ', ' B  58  LYS  HD2', -0.742, (3.803, 3.235, -16.568)), (' D 198  GLU  HA ', ' D 251  SER  HB3', -0.728, (17.383, 11.893, 74.277)), (' E  17  ASN  OD1', ' E  97  ARG  NH2', -0.716, (36.333, 19.596, 58.929)), (' A 238  ASP  OD1', ' A 240  THR HG22', -0.691, (-15.154, 5.627, -23.712)), (' A 177  GLU  HG2', ' A 178  THR  H  ', -0.685, (-19.523, -6.118, -14.106)), (' D 201  LEU HD21', ' D 257  TYR  CE1', -0.684, (16.117, 4.227, 69.312)), (' D  98  MET  HE1', ' D 115  GLN  HG3', -0.67, (10.924, -1.171, 31.402)), (' D 219  ARG  NH2', ' D 253  GLN  OE1', -0.664, (14.427, 3.756, 75.834)), (' D 202  ARG  HE ', ' D 246  ALA  HB2', -0.661, (18.249, 9.685, 60.632)), (' D 201  LEU  HB2', ' D 247  VAL  O  ', -0.65, (16.997, 7.117, 65.906)), (' D 194  VAL HG11', ' D 198  GLU  HG3', -0.629, (14.572, 15.311, 70.494)), (' A  12  VAL HG22', ' A  94  THR HG22', -0.615, (4.891, 16.293, -5.259)), (' D  98  MET  HE3', ' D 115  GLN  HG3', -0.612, (10.837, 0.03, 30.765)), (' A 202  ARG  NH1', ' B  99  MET  HG2', -0.609, (-4.719, 13.737, -36.436)), (' D 201  LEU HD11', ' D 257  TYR  CE2', -0.605, (18.224, 4.93, 70.47)), (' A 221  GLY  O  ', ' A 222  GLU  HB3', -0.596, (4.91, -7.98, -43.786)), (' A 177  GLU  HG2', ' A 178  THR  N  ', -0.596, (-19.257, -5.424, -14.485)), (' A 202  ARG HH12', ' B  99  MET  HE3', -0.595, (-3.516, 14.516, -36.172)), (' D 255  GLN  HA ', ' D 255  GLN  OE1', -0.592, (21.354, 0.993, 71.412)), (' D 220  ASP  OD1', ' D 256  ARG  HB3', -0.589, (15.731, -1.413, 73.949)), (' A 218  GLN  HA ', ' A 223  ASP  HA ', -0.582, (5.302, -2.485, -41.994)), (' D 238  ASP  OD1', ' D 240  THR HG22', -0.58, (31.656, 4.786, 46.641)), (' D  19  GLU  HG2', ' D  75  ARG  NH2', -0.576, (14.632, 19.048, 15.039)), (' D 201  LEU HD21', ' D 257  TYR  CZ ', -0.576, (16.817, 4.391, 70.304)), (' D 254  GLU  HA ', ' D 257  TYR  HE2', -0.574, (19.511, 5.155, 72.474)), (' D 117  ALA  HB2', ' E  60  TRP  CE2', -0.57, (7.475, 5.685, 31.061)), (' D 219  ARG  NH2', ' D 253  GLN  HB3', -0.57, (15.732, 4.199, 75.599)), (' D 235  PRO  HG2', ' E  65  LEU HD13', -0.562, (25.654, 10.584, 43.315)), (' A 197  HIS  O  ', ' A 250  PRO  HA ', -0.56, (3.66, 10.785, -51.936)), (' E  81  ARG  HG3', ' E  92  ILE HG12', -0.555, (20.61, 27.737, 46.189)), (' D 154  GLU  N  ', ' D 154  GLU  OE1', -0.554, (6.728, -10.068, 18.306)), (' D  98  MET  CE ', ' D 115  GLN  CG ', -0.554, (10.199, -0.103, 30.961)), (' D  19  GLU  HG2', ' D  75  ARG HH21', -0.551, (14.874, 19.077, 14.72)), (' A  19  GLU  HG2', ' A  75  ARG  NH2', -0.544, (2.723, 19.111, 8.39)), (' D  23  ILE HG21', ' E  54  LEU  HB3', -0.541, (20.405, 12.238, 30.293)), (' A  82  ARG HH11', ' A  89  GLU  HG2', -0.54, (13.182, 21.031, 6.269)), (' D  68  LYS  O  ', ' D  71  SER  HB3', -0.527, (19.092, 9.867, 16.407)), (' D  85  TYR  OH ', ' D 137  ASP  OD2', -0.526, (-2.078, 8.834, 26.18)), (' D  98  MET  HE1', ' D 115  GLN  CG ', -0.525, (9.992, -0.918, 31.601)), (' D 254  GLU  HA ', ' D 257  TYR  CE2', -0.522, (19.214, 4.454, 72.19)), (' E   3  ARG  NH1', ' E  59  ASP  OD2', -0.52, (8.579, 9.043, 40.58)), (' A 235  PRO  HG2', ' B  65  LEU HD13', -0.519, (-8.789, 11.281, -20.238)), (' D 198  GLU  CA ', ' D 251  SER  HB3', -0.518, (17.122, 12.396, 73.958)), (' D 186  LYS  HG3', ' D 207  SER  HB2', -0.514, (31.964, 1.433, 53.752)), (' D 218  GLN  HB3', ' D 222  GLU  O  ', -0.513, (11.405, -3.062, 67.01)), (' D 199  ALA  H  ', ' D 249  VAL HG22', -0.513, (17.15, 10.926, 71.646)), (' D 217  TRP  O  ', ' D 218  GLN  HG2', -0.51, (12.653, -1.461, 63.471)), (' A  74  HIS  CE1', ' A  97  ARG  HE ', -0.51, (4.151, 4.764, 1.075)), (' A 121  LYS  HE2', ' B   1  ILE HG21', -0.509, (13.915, 11.615, -13.253)), (' A   3  HIS  HA ', ' A  29  ASP  OD1', -0.509, (-5.933, -7.383, -14.464)), (' A 200  THR  HA ', ' A 247  VAL  O  ', -0.509, (0.709, 9.408, -43.498)), (' D  58  GLU  CD ', ' D  58  GLU  H  ', -0.508, (35.086, -2.537, 14.856)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.508, (9.247, 5.865, -8.45)), (' A  73  THR HG22', ' C   8  TYR  CZ ', -0.503, (5.069, 6.107, 9.724)), (' D 167  TRP  CH2', ' D 170  ARG  NH2', -0.503, (30.982, -8.004, 21.294)), (' D 194  VAL  HB ', ' D 198  GLU  C  ', -0.502, (16.975, 14.459, 71.731)), (' D 194  VAL HG11', ' D 198  GLU  CG ', -0.5, (14.147, 14.952, 71.175)), (' A 227  ASP  HB3', ' A 248  VAL HG22', -0.497, (6.256, 8.862, -42.735)), (' D 167  TRP  NE1', ' F   1  ARG  HD2', -0.497, (25.732, -7.619, 20.552)), (' D 154  GLU  HG3', ' D 157  ARG HH22', -0.495, (6.381, -12.816, 18.723)), (' A 121  LYS  HE2', ' B   1  ILE HD13', -0.492, (13.174, 11.56, -13.21)), (' E   4  THR  O  ', ' E   6  LYS  NZ ', -0.491, (10.281, 15.539, 44.14)), (' D  98  MET  HE1', ' D 115  GLN  CD ', -0.491, (9.945, -0.806, 31.856)), (' A 121  LYS  HG2', ' B   1  ILE HG12', -0.49, (13.381, 11.856, -11.389)), (' D  82  ARG HH11', ' D  89  GLU  HG2', -0.488, (3.38, 21.367, 16.69)), (' A 218  GLN  OE1', ' A 260  HIS  NE2', -0.487, (-0.37, -5.713, -42.002)), (' A 167  TRP  CE2', ' C   1  ARG  HD3', -0.487, (-9.659, -7.144, 2.256)), (' D 219  ARG  HE ', ' D 256  ARG  CB ', -0.485, (15.87, 0.701, 74.075)), (' A 227  ASP  O  ', ' A 247  VAL  HA ', -0.484, (3.805, 7.774, -40.754)), (' A 121  LYS  CE ', ' B   1  ILE  CG2', -0.483, (14.421, 12.162, -12.825)), (' D   6  ARG  NH1', ' D 113  TYR  OH ', -0.482, (15.932, -4.219, 34.719)), (' D  51  TRP  CE2', ' D 179  LEU HD11', -0.48, (31.187, -4.035, 33.358)), (' D 225  THR  HA ', ' D 228  THR  OG1', -0.479, (9.52, 2.65, 60.904)), (' A 220  ASP  OD2', ' A 256  ARG  NH1', -0.478, (5.548, -2.298, -51.935)), (' A 198  GLU  HA ', ' A 249  VAL  O  ', -0.478, (2.966, 11.027, -49.454)), (' E  58  LYS  HD2', ' E  58  LYS  N  ', -0.478, (13.306, 3.077, 38.952)), (' D 236  ALA  HB3', ' D 240  THR HG22', -0.477, (31.035, 5.643, 47.112)), (' A 227  ASP  HB2', ' A 247  VAL HG23', -0.476, (5.506, 6.63, -42.259)), (' C   6  GLN  NE2', ' D 146  LYS  HG3', -0.468, (0.863, 2.478, 12.691)), (' D  51  TRP  CZ2', ' D 179  LEU HD11', -0.466, (30.685, -3.495, 33.261)), (' D 220  ASP  N  ', ' D 256  ARG  O  ', -0.464, (15.778, -2.498, 71.815)), (' D 218  GLN  HA ', ' D 224  GLN  HG3', -0.457, (12.339, -0.561, 66.512)), (' D 169  ARG  O  ', ' D 173  GLU  HG3', -0.456, (30.877, -12.704, 30.959)), (' D 225  THR  O  ', ' D 225  THR HG22', -0.456, (7.061, 1.882, 59.701)), (' A  95  VAL HG22', ' A 116  TYR  CE1', -0.451, (8.459, 8.393, -0.966)), (' D  81  LEU HD13', ' D 118  TYR  CD1', -0.449, (5.173, 11.479, 23.996)), (' A 260  HIS  HA ', ' A 270  LEU  O  ', -0.449, (-4.897, -5.256, -38.366)), (' D 227  ASP  CG ', ' D 247  VAL HG23', -0.448, (11.147, 7.729, 65.317)), (' A 253  GLN  HB3', ' A 256  ARG  HD2', -0.446, (2.885, 2.519, -52.819)), (' A 218  GLN  O  ', ' A 257  TYR  HA ', -0.446, (1.804, -0.613, -45.63)), (' B  27  VAL  O  ', ' B  63  TYR  HA ', -0.444, (-1.228, 13.332, -16.783)), (' A  14  ARG  NH2', ' A  19  GLU  O  ', -0.444, (-0.439, 20.387, 2.729)), (' A 231  VAL  O  ', ' A 243  LYS  HD2', -0.443, (-1.382, 5.692, -28.649)), (' D 187  THR HG21', ' D 261  VAL HG21', -0.442, (24.037, -1.714, 58.198)), (' A 220  ASP  OD1', ' A 256  ARG  HB3', -0.441, (3.475, -1.292, -50.14)), (' D  42  SER  OG ', ' D  44  ARG  HB2', -0.44, (31.479, 11.09, 20.161)), (' A  19  GLU  HG2', ' A  75  ARG HH21', -0.44, (2.445, 19.35, 9.09)), (' A  64  THR HG22', ' A  68  LYS  HD2', -0.44, (-9.316, 8.326, 8.026)), (' E  23  LEU  O  ', ' E  67  TYR  HA ', -0.439, (30.411, 16.892, 44.223)), (' A 189  MET  HE3', ' A 272  LEU  HB3', -0.437, (-7.555, 0.209, -42.409)), (' D 201  LEU HD23', ' D 247  VAL HG13', -0.436, (16.122, 5.137, 66.966)), (' D 109  PHE  HB2', ' D 165  VAL HG11', -0.434, (18.367, -14.648, 28.895)), (' B  19  LYS  HB2', ' B  19  LYS  HE2', -0.429, (-26.929, 15.173, -31.593)), (' B  98  ASP  N  ', ' B  98  ASP  OD1', -0.427, (-10.054, 16.094, -37.263)), (' D 201  LEU  CD1', ' D 249  VAL HG12', -0.427, (17.88, 6.796, 70.098)), (' A  81  LEU HD13', ' A 118  TYR  CD1', -0.425, (12.201, 11.545, -1.192)), (' D 202  ARG  HE ', ' D 246  ALA  CB ', -0.424, (17.762, 9.417, 61.036)), (' A 121  LYS  HE2', ' B   1  ILE  CG1', -0.423, (13.237, 12.158, -12.73)), (' E  29  GLY  HA2', ' E  61  SER  OG ', -0.421, (12.364, 10.611, 40.591)), (' D  98  MET  CE ', ' D 115  GLN  CD ', -0.42, (10.424, -0.339, 32.008)), (' E  41  LYS  HG3', ' E  78  TYR  CE1', -0.418, (33.497, 25.178, 50.004)), (' A 236  ALA  HB3', ' A 240  THR HG22', -0.415, (-14.156, 5.861, -23.631)), (' A 163  THR HG21', ' C   1  ARG  NH2', -0.412, (-5.405, -7.817, 3.785)), (' D 202  ARG  HD3', ' D 244  TRP  CD2', -0.411, (20.306, 9.628, 58.379)), (' A 233  THR  OG1', ' A 243  LYS  HD3', -0.411, (-2.619, 3.769, -26.924)), (' A 202  ARG HH12', ' B  99  MET  HG2', -0.409, (-4.457, 13.963, -36.22)), (' B  37  VAL  HB ', ' B  66  TYR  CE2', -0.408, (-7.139, 20.698, -15.274)), (' E   6  LYS  HD2', ' E   6  LYS  N  ', -0.407, (13.383, 15.263, 45.132)), (' D 219  ARG HH22', ' D 253  GLN  HB3', -0.406, (15.415, 3.818, 76.184)), (' D 249  VAL HG23', ' D 250  PRO  C  ', -0.403, (15.824, 9.686, 74.134)), (' D  20  PRO  HD2', ' D  75  ARG  HG3', -0.402, (14.222, 16.127, 17.083)), (' A  51  TRP  CZ2', ' A 179  LEU HD21', -0.401, (-13.31, -2.868, -10.934)), (' B   5  PRO  CA ', ' B  30  PHE  HB3', -0.4, (3.36, 16.967, -18.111))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
