# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' F 174  LYS  HG2', ' F 497  TYR  HA ', -0.781, (195.567, 164.717, 325.43)), (' F 477  TRP  HD1', ' F 478  TRP  CD1', -0.715, (184.91, 163.294, 323.68)), (' F 523  PHE  HB3', ' F 583  PRO  HB2', -0.709, (165.613, 160.619, 299.755)), (' F 390  PHE  HA ', ' F 393  ARG  HE ', -0.706, (184.862, 182.501, 285.654)), (' A 378  LYS  O  ', ' A 432  CYS  HB2', -0.69, (180.002, 184.691, 253.887)), (' F 271  TRP  NE1', ' F 502  SER  O  ', -0.687, (191.233, 161.69, 314.153)), (' F 109  SER  OG ', ' F 111  ASP  OD1', -0.657, (201.15, 191.511, 314.621)), (' F 457  GLU  HG2', ' F 513  ILE HD13', -0.639, (178.013, 171.741, 310.927)), (' F 484  ILE HG23', ' F 485  VAL HG23', -0.624, (176.751, 161.568, 318.672)), (' A 349  SER  OG ', ' A 452  LEU  O  ', -0.623, (194.786, 192.388, 268.535)), (' F 402  GLU  HB3', ' F 518  ARG HH11', -0.607, (179.211, 164.231, 298.441)), (' A 433  VAL HG22', ' A 512  VAL HG22', -0.601, (184.01, 187.704, 257.217)), (' F  77  SER  O  ', ' F  81  GLN  NE2', -0.599, (189.968, 196.172, 298.914)), (' F 503  LEU HD12', ' F 504  PHE  H  ', -0.59, (189.861, 163.332, 310.436)), (' F 149  ASN  OD1', ' F 150  GLU  N  ', -0.587, (195.68, 150.545, 308.693)), (' F 334  THR  HA ', ' F 362  THR HG22', -0.584, (194.412, 153.176, 284.992)), (' A 518  LEU HD23', ' A 520  ALA  H  ', -0.581, (183.373, 203.045, 239.451)), (' F 474  MET  HB3', ' F 493  HIS  HE1', -0.58, (189.04, 164.948, 327.603)), (' F 323  MET  HA ', ' F 323  MET  HE3', -0.567, (183.538, 165.537, 277.963)), (' F 123  MET  HE1', ' F 179  LEU  HB3', -0.565, (198.703, 174.891, 316.952)), (' F 543  ASP  OD1', ' F 544  ILE  N  ', -0.563, (167.357, 155.209, 286.414)), (' A 457  ARG  NH1', ' A 459  SER  O  ', -0.561, (184.555, 204.489, 269.773)), (' F 493  HIS  ND1', ' F 494  ASP  O  ', -0.557, (190.484, 164.082, 329.089)), (' F 456  LEU HD23', ' F 512  PHE  CE2', -0.551, (182.686, 166.552, 311.659)), (' F 586  ASN  O  ', ' F 589  GLU  HB2', -0.548, (161.165, 154.46, 301.943)), (' F 478  TRP  CE3', ' F 489  GLU  HG3', -0.539, (184.75, 158.782, 327.074)), (' A 530  SER  O  ', ' A 530  SER  OG ', -0.536, (185.871, 173.835, 224.553)), (' F 151  ILE  O  ', ' F 155  SER  OG ', -0.531, (192.651, 144.784, 314.465)), (' A 346  ARG  NH1', ' A 347  PHE  O  ', -0.527, (200.592, 188.666, 263.192)), (' F  87  GLU  OE1', ' F  89  GLN  NE2', -0.526, (171.858, 203.388, 295.679)), (' F 293  VAL HG22', ' F 366  MET  HE2', -0.524, (180.829, 144.258, 290.909)), (' F  61  ASN  OD1', ' F  62  MET  N  ', -0.518, (206.503, 174.634, 289.849)), (' F 306  ARG  HA ', ' F 309  LYS  HB2', -0.517, (185.788, 152.431, 276.975)), (' F  67  ASP  OD1', ' F  68  LYS  N  ', -0.509, (204.492, 183.452, 293.528)), (' F  55  THR HG23', ' F  57  GLU  H  ', -0.505, (212.423, 168.461, 289.215)), (' F 239  HIS  HB3', ' F 595  LEU HD23', -0.503, (166.137, 149.13, 313.193)), (' F 483  GLU  HG3', ' F 608  THR HG21', -0.501, (173.868, 159.4, 327.009)), (' F 116  LEU  O  ', ' F 119  ILE HG22', -0.5, (198.676, 179.401, 312.895)), (' F 490  PRO  HA ', ' F 612  PRO  HG2', -0.499, (185.372, 151.893, 327.651)), (' F 284  PRO  HD2', ' F 285  PHE  H  ', -0.499, (172.45, 139.082, 305.68)), (' A 393  THR  HA ', ' A 522  ALA  HA ', -0.495, (184.776, 196.143, 239.465)), (' F 453  THR HG23', ' F 512  PHE  CE2', -0.493, (180.548, 166.098, 310.299)), (' F 302  TRP  CE3', ' F 306  ARG  HG3', -0.493, (185.102, 147.512, 279.417)), (' A 493  GLN  OE1', ' F  31  LYS  NZ ', -0.489, (194.777, 194.763, 281.091)), (' A 487  ASN  OD1', ' F  83  TYR  OH ', -0.488, (188.097, 201.782, 289.906)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.487, (194.787, 183.486, 262.196)), (' F  87  GLU  O  ', ' F  89  GLN  NE2', -0.487, (172.476, 201.804, 294.999)), (' F 157  ASP  HB3', ' F 160  GLU  HG2', -0.487, (193.874, 142.546, 318.473)), (' A 358  ILE  HB ', ' A 395  VAL  CG2', -0.484, (190.494, 191.338, 245.953)), (' F 463  VAL HG22', ' F 468  ILE HD11', -0.482, (184.532, 174.365, 322.989)), (' F 217  TYR  HE2', ' F 222  LEU  HB2', -0.482, (171.261, 178.889, 307.677)), (' F 133  CYS  HA ', ' F 141  CYS  HA ', -0.482, (205.828, 151.864, 316.637)), (' F 321  PRO  O  ', ' F 380  GLN  NE2', -0.481, (178.386, 165.57, 279.235)), (' A 411  ALA  HB3', ' A 414  GLN  HG3', -0.477, (176.681, 188.968, 263.875)), (' F 468  ILE HD13', ' F 476  LYS  HZ3', -0.475, (181.698, 173.793, 323.974)), (' A 332  ILE HG23', ' A 362  VAL HG11', -0.475, (192.741, 183.83, 235.614)), (' F 350  ASP  O  ', ' F 350  ASP  OD1', -0.473, (188.967, 173.802, 287.104)), (' F 590  PRO  HA ', ' F 593  THR HG22', -0.472, (159.788, 148.185, 305.123)), (' F 261  CYS  SG ', ' F 488  VAL  HB ', -0.472, (178.541, 153.684, 326.606)), (' F 403  ALA  HB2', ' F 518  ARG  HG2', -0.472, (175.913, 166.245, 298.366)), (' F 152  MET  O  ', ' F 161  ARG  NH1', -0.464, (189.06, 147.729, 314.383)), (' F 252  TYR  HE2', ' F 266  LEU HD22', -0.463, (184.734, 144.04, 319.199)), (' F 119  ILE  HA ', ' F 122  THR HG22', -0.459, (201.953, 176.149, 314.114)), (' F 209  VAL HG21', ' F 565  PRO  HB3', -0.459, (169.833, 184.055, 297.563)), (' F 483  GLU  N  ', ' F 483  GLU  OE1', -0.458, (175.346, 161.953, 325.458)), (' F 477  TRP  NE1', ' F 499  ASP  OD2', -0.456, (185.683, 163.019, 321.2)), (' F 351  LEU  HB2', ' F 355  ASP  HB3', -0.456, (192.45, 172.855, 281.594)), (' F 453  THR  HA ', ' F 512  PHE  HE2', -0.454, (180.462, 165.354, 311.806)), (' F 472  GLN  OE1', ' F 475  LYS  HD3', -0.451, (184.182, 171.588, 332.986)), (' F 262  LEU  H  ', ' F 262  LEU HD23', -0.45, (177.356, 151.938, 322.072)), (' F 169  ARG  NH2', ' F 270  MET  O  ', -0.448, (189.327, 157.237, 317.141)), (' F  55  THR HG21', ' F2001  NAG  H62', -0.448, (211.805, 166.249, 286.543)), (' F  84  PRO  O  ', ' F  86  GLN  N  ', -0.448, (178.446, 201.064, 298.664)), (' A 390  LEU HD23', ' A 391  CYS  N  ', -0.447, (179.258, 190.316, 239.174)), (' F 183  TYR  CE1', ' F 187  LYS  HD2', -0.444, (192.499, 179.348, 312.558)), (' A 391  CYS  HB2', ' A 525  CYS  HB3', -0.444, (184.175, 188.824, 239.613)), (' F 455  MET  HB2', ' F 484  ILE HG21', -0.442, (176.727, 163.998, 319.222)), (' F  39  LEU  HA ', ' F  39  LEU HD12', -0.442, (198.392, 183.531, 285.737)), (' F 478  TRP  CZ3', ' F 489  GLU  HA ', -0.438, (184.922, 157.13, 325.844)), (' F  71  ALA  O  ', ' F  74  LYS  HG2', -0.436, (198.944, 190.604, 296.352)), (' A 342  PHE  HB2', ' A1302  NAG  H82', -0.436, (194.967, 180.357, 250.548)), (' A 353  TRP  CZ2', ' A 466  ARG  HB3', -0.436, (190.153, 198.942, 260.373)), (' F 481  LYS  HA ', ' F 484  ILE HG22', -0.435, (177.59, 162.459, 321.532)), (' F 595  LEU HD12', ' F 598  GLN  HG3', -0.433, (166.161, 143.632, 311.656)), (' F 428  PHE  CD2', ' F 430  GLU  HG2', -0.433, (169.562, 139.745, 291.175)), (' F 530  CYS  O  ', ' F 533  ALA  HB3', -0.432, (160.419, 158.392, 289.515)), (' F 390  PHE  HA ', ' F 393  ARG  NE ', -0.432, (184.52, 182.089, 285.623)), (' F 581  VAL  O  ', ' F 581  VAL HG13', -0.432, (162.882, 163.993, 306.848)), (' A 395  VAL HG12', ' A 515  PHE  CD1', -0.431, (184.975, 190.84, 245.96)), (' F 115  ARG  HA ', ' F 115  ARG  HD2', -0.43, (204.398, 183.008, 314.268)), (' A 387  LEU  HA ', ' A 387  LEU HD23', -0.429, (179.232, 185.44, 243.941)), (' F 394  ASN  HB2', ' F 562  LYS  HE3', -0.429, (180.582, 179.733, 293.659)), (' F 236  LEU  O  ', ' F 236  LEU HD23', -0.429, (167.997, 154.038, 311.393)), (' A 493  GLN  HB3', ' F  34  HIS  CD2', -0.428, (193.538, 191.229, 278.978)), (' F 145  GLU  HB2', ' F 146  PRO  HD2', -0.425, (200.373, 153.468, 304.329)), (' F 291  ILE  O  ', ' F 366  MET  HE1', -0.425, (179.039, 143.106, 293.288)), (' F 148  LEU  HA ', ' F 151  ILE HD12', -0.425, (198.21, 149.623, 314.004)), (' F 402  GLU  HB3', ' F 518  ARG  NH1', -0.425, (179.598, 164.448, 298.89)), (' F 406  GLU  OE2', ' F 518  ARG  NH1', -0.424, (179.479, 162.364, 298.749)), (' A 349  SER  OG ', ' A 350  VAL  N  ', -0.424, (194.679, 191.959, 266.877)), (' F 111  ASP  OD1', ' F 112  LYS  N  ', -0.423, (201.347, 189.94, 314.532)), (' A 484  LYS  HZ1', ' A 490  PHE  HD1', -0.421, (198.001, 201.612, 279.805)), (' A 358  ILE  HB ', ' A 395  VAL HG23', -0.421, (190.651, 191.578, 246.701)), (' F 170  SER  OG ', ' F 171  GLU  OE1', -0.418, (199.428, 158.02, 324.22)), (' F 469  PRO  HG2', ' F 472  GLN  HG2', -0.417, (184.009, 175.155, 331.603)), (' F 589  GLU  HB3', ' F 590  PRO  HD3', -0.416, (161.418, 151.397, 301.942)), (' F  80  ALA  O  ', ' F 101  GLN  HG2', -0.415, (186.05, 196.126, 298.155)), (' A 501  TYR  CE2', ' F 353  LYS  HD2', -0.411, (193.22, 179.963, 277.363)), (' F 581  VAL HG23', ' F 584  LEU HD12', -0.408, (166.851, 163.04, 306.129)), (' F 455  MET  HG3', ' F 484  ILE HG21', -0.407, (177.829, 163.983, 319.824)), (' F 459  TRP  CG ', ' F 477  TRP  HE3', -0.405, (183.207, 168.153, 320.936)), (' F 243  TYR  HB2', ' F 599  ASN HD21', -0.4, (168.357, 145.773, 315.622))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
