# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B  40  ALA  HB2', ' B  92  ALA  HA ', -0.736, (163.335, 130.697, 128.481)), (' R 472  ILE HD13', ' R 484  GLU  HB2', -0.686, (150.255, 155.878, 173.586)), (' R 475  ALA  HB3', ' R 487  ASN  HB3', -0.665, (140.926, 150.712, 170.742)), (' R 393  THR HG21', ' R 518  LEU  HB2', -0.662, (153.133, 182.543, 139.781)), (' A  52  ASN  ND2', ' R 449  TYR  O  ', -0.655, (162.746, 153.744, 162.544)), (' A  19  ARG HH12', ' A  80  GLN  HA ', -0.65, (165.234, 153.307, 184.288)), (' B  52  THR HG23', ' B  55  GLY  H  ', -0.627, (155.967, 158.805, 123.162)), (' B 111  PHE  HZ ', ' R 408  ARG  HB2', -0.615, (151.039, 151.349, 143.271)), (' R 358  ILE  HB ', ' R 395  VAL  HB ', -0.605, (161.654, 175.289, 141.865)), (' R 357  ARG  NH2', ' R 394  ASN  OD1', -0.569, (157.888, 182.064, 144.371)), (' B 104  TRP  HB3', ' R 384  PRO  HD3', -0.567, (155.8, 163.985, 129.644)), (' B  34  MET  HB2', ' B  51  ILE HG22', -0.559, (155.367, 150.152, 123.81)), (' B  45  ARG  HB2', ' B 110  LEU HD11', -0.557, (160.175, 141.603, 135.473)), (' B   4  LEU HD21', ' B  96  CYS  HB3', -0.552, (151.257, 140.14, 125.629)), (' A  97  ARG  NH1', ' R 484  GLU  OE1', -0.547, (151.702, 150.049, 173.465)), (' B  53  ARG  HE ', ' B 102  SER  HB2', -0.546, (149.375, 158.636, 128.1)), (' R 440  ASN  OD1', ' R 441  LEU  N  ', -0.539, (172.745, 152.765, 148.231)), (' R 472  ILE HG12', ' R 490  PHE  HD1', -0.534, (151.544, 157.704, 170.713)), (' B  38  ARG  NH1', ' B  90  ASP  O  ', -0.526, (164.903, 134.596, 123.439)), (' R 442  ASP  O  ', ' R 448  ASN  ND2', -0.523, (169.195, 151.791, 155.123)), (' R 485  GLY  H  ', ' R 488  CYS  HB2', -0.521, (146.386, 152.328, 174.329)), (' R 462  LYS  HG2', ' R 463  PRO  HD2', -0.519, (143.431, 169.266, 151.278)), (' R 403  ARG HH21', ' R 405  ASP  HB2', -0.514, (154.63, 146.246, 147.815)), (' B  36  TRP  HB2', ' B  48  VAL  HB ', -0.506, (161.499, 144.088, 126.221)), (' A  99  ILE HG21', ' R 486  PHE  HA ', -0.489, (144.956, 147.645, 173.455)), (' A  27  LEU  HB2', ' A  30  HIS  HB2', -0.484, (160.27, 143.999, 167.545)), (' R 490  PHE  HE2', ' R 492  LEU HD12', -0.478, (155.623, 158.658, 166.501)), (' B  67  ARG  HD2', ' B  85  SER  HB2', -0.475, (171.557, 140.454, 117.725)), (' A  18  LEU HD22', ' A 115  VAL HG11', -0.473, (166.331, 147.316, 194.969)), (' R 414  GLN  O  ', ' R 424  LYS  NZ ', -0.471, (144.281, 160.57, 146.485)), (' A  14  ALA  HA ', ' A  84  LEU HD13', -0.469, (164.705, 150.91, 196.69)), (' B  70  ILE HG22', ' B  81  LEU HD12', -0.466, (160.114, 146.135, 120.83)), (' B  23  ALA  HB2', ' B  78  THR HG23', -0.466, (149.148, 142.59, 117.14)), (' A  16  GLY  H  ', ' A  84  LEU HD12', -0.455, (165.861, 153.096, 195.513)), (' A  97  ARG  HB3', ' A 100  GLU  HB2', -0.454, (151.71, 146.533, 169.007)), (' B  95  TYR  HE2', ' B 116  TRP  HB3', -0.453, (152.867, 136.881, 132.154)), (' A  36  ARG  HD3', ' A  92  TYR  CE1', -0.45, (155.85, 148.277, 187.088)), (' R 497  PHE  CZ ', ' R 507  PRO  HB3', -0.447, (163.661, 151.281, 151.952)), (' A  46  VAL HG11', ' A  79  LEU HD21', -0.445, (157.865, 150.24, 183.586)), (' A 100  GLU  HG2', ' R 489  TYR  HD1', -0.436, (148.745, 149.246, 169.101)), (' B  36  TRP  HD1', ' B  49  ALA  HB3', -0.432, (160.568, 146.83, 123.94)), (' R 501  ASN  HB3', ' R 505  TYR  HB2', -0.431, (162.238, 143.413, 150.839)), (' A  92  TYR  N  ', ' A 111  THR  O  ', -0.427, (157.469, 142.08, 187.731)), (' B  94  TYR  O  ', ' B 119  GLY  HA3', -0.424, (156.03, 135.254, 125.357)), (' A  32  VAL HG11', ' A  77  ILE HG13', -0.424, (161.322, 145.238, 174.16)), (' R 387  LEU  HB2', ' R 392  PHE  HZ ', -0.421, (158.218, 172.881, 132.285)), (' A  31  ARG  HB3', ' A  97  ARG  HG3', -0.419, (154.607, 148.237, 169.441)), (' R 376  THR HG23', ' R 378  LYS  HE3', -0.417, (157.297, 156.5, 137.003)), (' A  52  ASN  OD1', ' R 452  LEU HD21', -0.415, (160.487, 155.117, 164.279)), (' B 100  ARG  HB2', ' B 112  GLU  OE1', -0.41, (150.363, 150.387, 135.243)), (' R 454  ARG  HG2', ' R 492  LEU HD23', -0.406, (153.881, 158.347, 162.059)), (' R 495  TYR  HE2', ' R 497  PHE  CZ ', -0.406, (161.603, 151.785, 153.488)), (' A  11  LEU  HA ', ' A 115  VAL  HA ', -0.401, (164.13, 145.142, 198.298)), (' A  72  ASN HD21', ' R 449  TYR  HE2', -0.4, (168.243, 147.444, 163.933))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
