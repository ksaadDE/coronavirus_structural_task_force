# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 114 ', 'PRO', None, (38.97499999999999, 19.285000000000004, -22.359)), ('A', ' 159 ', 'PRO', None, (18.838000000000005, 14.63, 3.265)), ('A', ' 161 ', 'PRO', None, (25.165, 15.182, 3.5870000000000006)), ('B', '   8 ', 'PRO', None, (41.023, -6.688999999999998, -18.209)), ('B', '  95 ', 'PRO', None, (28.10599999999999, 4.573, -33.186)), ('B', ' 142 ', 'PRO', None, (39.78000000000001, -8.53, 0.568))]
data['rota'] = [('A', '  29 ', 'PHE', 0.062225995709673576, (33.868999999999986, 28.486000000000004, -26.311999999999998)), ('A', '  35 ', 'SER', 0.010642402048688382, (28.929000000000002, 17.578, -24.581)), ('A', ' 127 ', 'SER', 0.24727248754768272, (11.881999999999996, 14.531000000000002, 1.7569999999999997)), ('A', ' 209 ', 'ASN', 0.19332198677749182, (28.213999999999984, 16.035000000000004, 18.253)), ('B', '  31 ', 'SER', 0.23464840766366907, (43.55100000000001, 4.044000000000001, -35.182)), ('B', '  46 ', 'LEU', 0.0842577306581459, (41.92299999999999, 11.934000000000001, -21.293)), ('B', ' 176 ', 'SER', 0.20210942090527223, (27.907, -1.975, 8.222)), ('C', ' 408 ', 'ARG', 0.16661659906260762, (47.77200000000001, 23.817000000000007, -54.568)), ('C', ' 440 ', 'ASN', 0.24384833815878715, (53.62200000000003, 29.46099999999999, -35.23)), ('C', ' 493 ', 'GLN', 0.09935250499541468, (35.12500000000003, 18.917000000000005, -39.685))]
data['cbeta'] = []
data['probe'] = [(' B  29  VAL HG11', ' B  90  GLN  HB2', -0.772, (36.337, 3.524, -33.259)), (' A  91  THR HG23', ' A 122  THR  HA ', -0.697, (20.531, 11.544, -7.565)), (' A 131  PRO  HB3', ' A 157  TYR  HB3', -0.68, (19.82, 11.613, 9.857)), (' A  67  ARG  NH2', ' A  90  ASP  OD2', -0.653, (15.253, 10.693, -16.406)), (' A 183  GLN  HG2', ' B 161  GLU  HG3', -0.637, (18.091, 0.142, 5.974)), (' A 205  THR HG23', ' A 222  LYS  HE3', -0.631, (30.108, 12.655, 29.806)), (' B 167  LYS  HE3', ' B 171  ASN  HA ', -0.627, (43.152, 1.157, 0.379)), (' A 211  ASN  OD1', ' A 218  LYS  NZ ', -0.606, (26.425, 22.057, 13.828)), (' B 136  LEU HD23', ' B 176  SER  HB3', -0.573, (28.523, -0.274, 10.196)), (' A  28  THR HG22', ' A  30  SER  H  ', -0.561, (34.608, 30.255, -28.789)), (' A  98  GLU  HB2', ' A 114  PRO  HD2', -0.56, (37.338, 20.706, -23.768)), (' C 384  PRO  HA ', ' C 387  LEU  HB2', -0.558, (51.563, 43.185, -60.359)), (' B  21  LEU HD23', ' B 103  THR  HB ', -0.542, (41.246, -1.511, -17.76)), (' C 401  VAL HG22', ' C 509  ARG  HG2', -0.537, (45.656, 30.895, -41.968)), (' B  95  PRO  HG2', ' B  98  THR HG23', -0.514, (28.399, 4.511, -29.787)), (' A 196  VAL HG11', ' A 206  TYR  CE1', -0.498, (36.79, 7.906, 24.139)), (' C 387  LEU HD12', ' C 390  LEU HD12', -0.483, (47.501, 45.299, -62.59)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.483, (50.351, 30.479, -50.929)), (' B  47  LEU HD23', ' B  58  ILE HD12', -0.481, (46.815, 10.415, -18.836)), (' C 493  GLN  HA ', ' C 493  GLN HE21', -0.467, (34.263, 17.423, -38.808)), (' A  28  THR HG22', ' A  30  SER  N  ', -0.46, (34.89, 30.021, -28.55)), (' C 520  ALA  HB1', ' C 521  PRO  HD2', -0.457, (31.522, 54.089, -61.199)), (' A  18  VAL HG12', ' A  86  LEU HD11', -0.456, (16.42, 16.91, -12.73)), (' A  36  TRP  CE2', ' A  81  MET  HB2', -0.45, (25.093, 20.039, -20.069)), (' A  59  ASN  OD1', ' C 483  VAL HG23', -0.45, (21.125, 13.785, -33.394)), (' C 437  ASN  HB2', ' C 508  TYR  CZ ', -0.448, (53.909, 27.185, -44.914)), (' A 106  GLY  O  ', ' C 490  PHE  N  ', -0.447, (28.834, 14.296, -40.282)), (' B   8  PRO  HG3', ' B  11  LEU HD13', -0.446, (43.983, -7.345, -15.676)), (' C 335  LEU  H  ', ' C 335  LEU HD12', -0.439, (46.89, 55.92, -47.271)), (' C 501  ASN  HB3', ' C 505  TYR  HB3', -0.436, (50.464, 18.076, -40.351)), (' A  67  ARG HH22', ' A  90  ASP  CG ', -0.436, (16.492, 10.698, -16.014)), (' B  31  SER  O  ', ' B  31  SER  OG ', -0.433, (44.675, 6.013, -35.204)), (' B 104  LYS  HE2', ' B 106  GLU  HB3', -0.43, (41.007, -1.132, -7.362)), (' A  13  LYS  HZ1', ' A 127  SER  HB3', -0.427, (10.217, 15.434, 0.581)), (' B  29  VAL HG13', ' B  92  SER  HB2', -0.426, (36.251, 3.765, -35.491)), (' B  94  TRP  HA ', ' B  95  PRO  HA ', -0.425, (28.719, 6.622, -34.691)), (' A 212  HIS  HB3', ' A 217  THR  HB ', -0.425, (20.624, 17.571, 11.583)), (' B  46  LEU HD23', ' B  55  ALA  HB2', -0.424, (44.962, 13.354, -23.709)), (' A 155  LYS  HE2', ' A 156  ASP  OD2', -0.42, (14.976, 5.236, 12.062)), (' A  29  PHE  HB3', ' A  53  PRO  HG2', -0.419, (31.4, 26.798, -27.463)), (' A 212  HIS  CD2', ' A 214  PRO  HD2', -0.418, (21.942, 16.956, 6.981)), (' B  32  ASN HD22', ' B  92  SER  HG ', -0.416, (38.675, 5.971, -37.017)), (' C 383  SER  HB2', ' C 386  LYS  HG2', -0.412, (53.158, 42.911, -64.944)), (' B  39  LYS  HE2', ' B  81  GLU  O  ', -0.41, (46.341, 8.744, -10.442)), (' B  29  VAL  CG1', ' B  92  SER  HB2', -0.41, (36.642, 4.253, -35.518)), (' A 150  LEU  HB2', ' A 223  VAL HG11', -0.408, (29.955, 4.857, 23.263)), (' A  81  MET  HB3', ' A  81  MET  HE3', -0.404, (23.164, 19.623, -17.728)), (' A  59  ASN  ND2', ' C 484  GLU  OE1', -0.403, (24.698, 14.555, -33.89)), (' A 194  VAL HG22', ' A 196  VAL HG13', -0.401, (37.25, 6.08, 21.368)), (' B 179  LEU  HG ', ' B 181  LEU  HG ', -0.4, (16.035, -6.822, 13.312))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
