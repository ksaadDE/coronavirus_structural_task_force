# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 333 ', 'THR', 0.046189769505047835, (185.60500000000013, 247.8879999999998, 204.812)), ('D', '  72 ', 'ASP', 0.049938365664494486, (190.9880000000001, 237.8809999999999, 149.183)), ('D', ' 201 ', 'LYS', 0.004128322360664686, (192.099, 222.14099999999988, 117.58)), ('E', ' 110 ', 'VAL', 0.0009485191489129512, (216.8430000000001, 249.398, 100.973))]
data['omega'] = [('E', '  95 ', 'PRO', None, (196.49000000000015, 259.70999999999975, 137.82800000000003))]
data['rota'] = [('D', ' 155 ', 'ASN', 0.08929277241991726, (202.401, 218.43299999999988, 107.624))]
data['cbeta'] = []
data['probe'] = [(' E 150  VAL HG21', ' E 155  GLN HE21', -0.686, (187.466, 249.173, 92.446)), (' E 182  SER  OG ', ' E 188  LYS  NZ ', -0.681, (178.204, 243.198, 91.875)), (' D 191  THR HG22', ' D 192  GLN  H  ', -0.675, (207.287, 216.045, 90.28)), (' E 201  LEU HD21', ' E 205  VAL HG12', -0.661, (206.226, 249.659, 90.613)), (' E 149  LYS  HB3', ' E 193  ALA  HB3', -0.651, (194.771, 248.323, 88.289)), (' D 144  ASP  HA ', ' D 175  LEU HD13', -0.635, (184.945, 234.392, 108.003)), (' E 105  GLU  OE2', ' E 166  GLN  NE2', -0.633, (214.352, 244.464, 109.708)), (' D 126  PRO  HD3', ' D 138  LEU  HB3', -0.629, (201.38, 229.026, 92.961)), (' E 122  ASP  O  ', ' E 126  LYS  NZ ', -0.616, (184.592, 226.272, 92.107)), (' C 337  PRO  HB2', ' C 340  GLU  HG3', -0.616, (184.538, 251.17, 188.94)), (' E  82  ASP  OD2', ' E  86  TYR  OH ', -0.616, (216.555, 247.297, 122.726)), (' D  58  ASN HD21', ' E  94  SER  HB2', -0.608, (195.977, 256.744, 141.768)), (' E 120  PRO  HD3', ' E 132  VAL HG22', -0.605, (189.936, 237.78, 92.13)), (' C 389  ASP  OD1', ' C 390  LEU  N  ', -0.603, (194.593, 232.508, 198.101)), (' C 426  PRO  HG3', ' C 463  PRO  HB3', -0.584, (205.857, 241.363, 177.974)), (' C 378  LYS  HA ', ' C 378  LYS  HE2', -0.582, (190.701, 229.868, 180.724)), (' D 119  PRO  HB3', ' D 145  TYR  HB3', -0.576, (188.573, 229.296, 109.751)), (' D 137  ALA  HA ', ' D 183  THR  HA ', -0.573, (206.319, 230.879, 95.902)), (' C 444  LYS  HG2', ' C 448  ASN  HB2', -0.566, (177.753, 250.442, 163.919)), (' E 113  PRO  HB3', ' E 139  PHE  HB3', -0.548, (209.536, 245.738, 98.376)), (' E  24  ARG  NH1', ' E  70  ASP  OD2', -0.547, (213.889, 266.865, 127.693)), (' C 501  ASN  ND2', ' C 505  TYR  O  ', -0.546, (181.521, 240.331, 162.222)), (' C 345  THR  O  ', ' C 509  ARG  NH2', -0.545, (181.157, 250.113, 175.691)), (' E  17  GLU  HG2', ' E  19  ALA  H  ', -0.541, (221.724, 255.008, 119.23)), (' D  52  VAL HG12', ' D  53  GLY  H  ', -0.538, (198.181, 245.56, 150.886)), (' D 192  GLN  CD ', ' D 193  THR  H  ', -0.533, (207.461, 218.395, 95.462)), (' C 514  SER  OG ', ' C 515  PHE  N  ', -0.532, (199.469, 241.44, 187.079)), (' C 433  VAL HG22', ' C 512  VAL HG23', -0.531, (194.496, 238.132, 180.317)), (' D  72  ASP  OD1', ' D  73  MET  N  ', -0.53, (191.789, 235.924, 149.84)), (' D 146  PHE  CD1', ' D 147  PRO  HD2', -0.518, (183.736, 233.484, 116.45)), (' C 498  GLN  HB2', ' C 501  ASN  HB3', -0.517, (179.271, 242.263, 159.188)), (' C 457  ARG  NH2', ' C 467  ASP  OD2', -0.506, (206.35, 250.087, 168.492)), (' C 454  ARG HH22', ' C 469  SER  H  ', -0.504, (200.693, 254.891, 167.136)), (' C 347  PHE  HD2', ' C 399  SER  HG ', -0.503, (187.04, 247.92, 178.989)), (' E  39  LYS  HD2', ' E  40  PRO  HD2', -0.503, (209.871, 241.864, 120.074)), (' C 403  ARG  HD3', ' C 505  TYR  HD1', -0.502, (187.018, 238.098, 162.077)), (' E 181  LEU HD23', ' E 186  TYR  CD1', -0.496, (184.643, 241.279, 91.405)), (' E   6  GLN  NE2', ' E  88  CYS  SG ', -0.494, (208.68, 256.737, 127.36)), (' E  17  GLU  HG2', ' E  19  ALA  N  ', -0.494, (221.742, 254.609, 119.59)), (' C 418  ILE HD12', ' C 422  ASN HD22', -0.491, (196.403, 244.502, 167.199)), (' D 201  LYS  H  ', ' D 202  PRO  CD ', -0.49, (191.824, 224.228, 116.686)), (' C 454  ARG  NH2', ' C 467  ASP  O  ', -0.487, (200.868, 253.054, 168.077)), (' E 208  SER  OG ', ' E 209  PHE  N  ', -0.485, (195.696, 241.817, 85.253)), (' A   1  NAG  H82', ' C 339  GLY  HA2', -0.478, (181.596, 244.889, 187.903)), (' D 146  PHE  O  ', ' D 148  GLU  HG2', -0.472, (188.284, 231.217, 116.213)), (' C 366  SER  HA ', ' C 369  TYR  CE1', -0.467, (185.085, 233.32, 192.376)), (' C 417  LYS  HD2', ' C 455  LEU HD12', -0.463, (198.133, 243.864, 160.486)), (' E 188  LYS  HG3', ' E 189  HIS  ND1', -0.462, (182.679, 245.757, 88.511)), (' C 380  TYR  CE2', ' C 412  PRO  HD2', -0.458, (198.434, 232.697, 177.811)), (' E 171  SER  O  ', ' E 171  SER  OG ', -0.454, (215.735, 243.175, 107.575)), (' E   8  PRO  HG2', ' E 102  THR HG21', -0.453, (211.238, 256.624, 121.004)), (' D 200  HIS  NE2', ' D 202  PRO  HD2', -0.452, (190.233, 225.548, 116.018)), (' C 497  PHE  CG ', ' C 507  PRO  HG3', -0.448, (182.865, 244.543, 166.094)), (' D 200  HIS  CD2', ' D 202  PRO  HD2', -0.448, (190.415, 224.871, 115.989)), (' D  40  ALA  HB3', ' D  43  GLN  HB2', -0.447, (196.174, 248.561, 121.461)), (' E 151  ASP  HB2', ' E 191  VAL  HB ', -0.447, (188.879, 247.173, 84.582)), (' D 170  LEU HD12', ' D 176  TYR  HE1', -0.446, (187.848, 239.198, 115.588)), (' C 442  ASP  N  ', ' C 442  ASP  OD1', -0.445, (177.8, 246.187, 170.459)), (' C 419  ALA  HA ', ' C 423  TYR  O  ', -0.445, (199.784, 241.27, 171.843)), (' D  59  TYR  HE1', ' D  69  ILE HG12', -0.442, (189.705, 247.627, 140.74)), (' E  62  PHE  CD1', ' E  75  ILE HG12', -0.441, (219.987, 249.955, 126.558)), (' D 201  LYS  H  ', ' D 202  PRO  HD3', -0.44, (192.124, 224.339, 116.777)), (' C 444  LYS  NZ ', ' C 448  ASN  OD1', -0.439, (180.052, 251.94, 165.332)), (' C 454  ARG  NH2', ' C 469  SER  H  ', -0.435, (200.644, 254.329, 167.068)), (' C 337  PRO  HB2', ' C 340  GLU  CG ', -0.435, (184.42, 251.534, 189.083)), (' A   5  MAN  O4 ', ' A   5  MAN  O6 ', -0.433, (166.399, 232.467, 185.753)), (' E 195  GLU  HA ', ' E 195  GLU  OE1', -0.432, (199.827, 249.387, 90.356)), (' E 137  ASN  OD1', ' E 138  ASN  N  ', -0.432, (209.241, 240.146, 100.377)), (' D  41  ARG  HA ', ' D  41  ARG  HD2', -0.429, (196.949, 242.491, 120.467)), (' E 149  LYS  N  ', ' E 193  ALA  O  ', -0.425, (193.73, 248.211, 91.096)), (' E  50  SER  O  ', ' E  52  SER  N  ', -0.423, (216.484, 256.362, 138.78)), (' C 350  VAL  HA ', ' C 400  PHE  HB2', -0.417, (192.329, 247.078, 172.421)), (' E 188  LYS  HG3', ' E 189  HIS  CE1', -0.417, (182.83, 245.991, 89.167)), (' C 392  PHE  HD2', ' C 515  PHE  CG ', -0.415, (198.459, 238.645, 191.864)), (' E  19  ALA  O  ', ' E  74  THR  HA ', -0.413, (219.917, 255.413, 124.085)), (' E  89  GLN  HG3', ' E  98  PHE  CZ ', -0.412, (203.189, 251.354, 133.185)), (' E  13  LEU HD23', ' E  17  GLU  HG3', -0.411, (222.588, 254.307, 116.292)), (' C 401  VAL HG22', ' C 509  ARG  HG2', -0.41, (185.183, 245.918, 173.754)), (' D 200  HIS  HB3', ' D 205  THR  O  ', -0.406, (190.822, 222.229, 113.005)), (' D 201  LYS  HG3', ' D 202  PRO  HD3', -0.406, (192.758, 224.642, 117.957)), (' E 133  VAL HG12', ' E 178  THR HG22', -0.405, (193.606, 238.964, 99.945)), (' E 108  ARG HH22', ' E 111  ALA  HB3', -0.402, (215.925, 245.324, 100.348)), (' E 145  LYS  NZ ', ' E 197  THR  OG1', -0.401, (201.948, 254.453, 94.332)), (' C 356  LYS  HB2', ' C 356  LYS  HE2', -0.4, (191.803, 253.071, 185.875))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
