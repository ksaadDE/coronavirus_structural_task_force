# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (196.47500000000002, 127.58799999999997, 297.767))]
data['rota'] = [('D', ' 391 ', 'CYS', 0.0, (212.025, 166.881, 231.48700000000002))]
data['cbeta'] = []
data['probe'] = [(' C 755  GLN  O  ', ' D 968  SER  OG ', -0.726, (187.063, 190.429, 206.998)), (' B 755  GLN  O  ', ' C 968  SER  OG ', -0.705, (209.446, 186.459, 206.586)), (' C 908  GLY  O  ', ' C1038  LYS  NZ ', -0.701, (202.919, 190.336, 145.285)), (' C 879  ALA  O  ', ' C 883  THR  OG1', -0.699, (197.145, 169.965, 150.425)), (' B 386  LYS  NZ ', ' D 984  LEU  O  ', -0.68, (183.797, 204.654, 222.068)), (' B1011  GLN  OE1', ' B1014  ARG  NH1', -0.675, (204.77, 204.797, 186.128)), (' B 883  THR  OG1', ' C 707  TYR  OH ', -0.662, (221.962, 206.303, 149.029)), (' B 417  LYS  NZ ', ' B 455  LEU  O  ', -0.662, (190.708, 173.107, 242.59)), (' C 780  GLU  O  ', ' C 784  GLN  NE2', -0.649, (194.089, 181.711, 164.328)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.643, (220.448, 221.232, 164.48)), (' D 298  GLU  OE2', ' D 316  SER  OG ', -0.63, (181.171, 172.481, 196.582)), (' C1030  SER  OG ', ' D1040  VAL  O  ', -0.627, (194.666, 186.057, 157.634)), (' A 190  MET  O  ', ' A 194  ASN  ND2', -0.621, (214.149, 159.593, 301.399)), (' C 105  ILE HD11', ' C 241  LEU HD21', -0.615, (244.85, 167.964, 228.355)), (' C 324  GLU  OE2', ' C 537  LYS  NZ ', -0.612, (238.558, 212.589, 207.67)), (' B 394  ASN  ND2', ' D 200  TYR  OH ', -0.605, (166.867, 189.955, 224.631)), (' D 212  LEU HD11', ' D 215  ASP  HA ', -0.58, (148.183, 162.673, 204.726)), (' D 907  ASN  ND2', ' D 913  GLN  OE1', -0.569, (187.777, 196.072, 136.863)), (' B 968  SER  OG ', ' D 755  GLN  O  ', -0.554, (200.92, 208.222, 206.989)), (' C 759  PHE  CE2', ' C 763  LEU HD11', -0.554, (193.987, 185.583, 198.015)), (' C 280  ASN  OD1', ' C 284  THR  N  ', -0.549, (225.385, 162.844, 197.776)), (' D 216  LEU  O  ', ' D 218  GLN  NE2', -0.541, (153.943, 165.396, 201.441)), (' B 349  SER  OG ', ' B 452  ARG  O  ', -0.539, (180.258, 178.84, 245.268)), (' D1135  ASN  OD1', ' D1136  THR  N  ', -0.539, (197.374, 175.134, 119.735)), (' A 353  LYS  O  ', ' D 502  GLY  N  ', -0.536, (206.518, 150.448, 267.413)), (' D 326  ILE HD12', ' D 539  VAL HG21', -0.533, (200.889, 157.325, 208.853)), (' D 454  ARG  NH2', ' D 467  ASP  OD2', -0.532, (226.572, 168.207, 261.999)), (' D 540  ASN  OD1', ' D 549  THR  OG1', -0.531, (198.058, 165.83, 209.549)), (' C 804  GLN  OE1', ' C 935  GLN  NE2', -0.531, (215.399, 166.814, 158.696)), (' A 235  PRO  O  ', ' A 239  HIS  ND1', -0.531, (172.785, 153.433, 305.498)), (' D 294  ASP  N  ', ' D 294  ASP  OD1', -0.53, (171.87, 168.52, 195.3)), (' B 701  ALA  O  ', ' D 787  GLN  NE2', -0.529, (180.018, 217.738, 156.794)), (' D 731  MET  N  ', ' D 774  GLN  OE1', -0.527, (185.693, 200.89, 178.447)), (' B 900  MET  SD ', ' B 917  TYR  OH ', -0.524, (210.543, 207.016, 135.884)), (' B1089  PHE  O  ', ' B1121  PHE  N  ', -0.522, (187.992, 196.598, 127.637)), (' C 136  CYS  SG ', ' C 137  ASN  N  ', -0.517, (250.659, 171.183, 233.948)), (' C 393  THR  O  ', ' C 523  THR  OG1', -0.516, (213.614, 225.75, 233.173)), (' A 389  PRO  O  ', ' A 393  ARG  N  ', -0.516, (206.351, 160.414, 279.024)), (' B 373  SER  O  ', ' B 373  SER  OG ', -0.514, (178.576, 200.129, 244.996)), (' B 383  SER  N  ', ' D 983  ARG  O  ', -0.512, (182.909, 201.182, 225.335)), (' A 125  THR  O  ', ' A 129  THR  OG1', -0.508, (206.905, 131.995, 304.543)), (' C 128  ILE HD12', ' C 170  TYR  HD2', -0.506, (232.089, 160.627, 224.12)), (' C 907  ASN  ND2', ' C 913  GLN  OE1', -0.505, (202.621, 184.528, 136.521)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.502, (239.0, 171.191, 198.313)), (' A  19  SER  N  ', ' D 475  ALA  O  ', -0.495, (223.155, 178.888, 275.804)), (' C 215  ASP  O  ', ' C 266  TYR  OH ', -0.495, (250.958, 170.869, 206.168)), (' B 887  THR HG21', ' B 894  LEU  HB2', -0.493, (217.991, 197.036, 145.599)), (' C 973  ILE  N  ', ' C 992  GLN  OE1', -0.492, (205.276, 185.079, 216.16)), (' C 392  PHE  CD1', ' C 517  LEU HD21', -0.485, (215.564, 217.637, 235.496)), (' B 943  SER  O  ', ' B 943  SER  OG ', -0.485, (199.789, 218.8, 172.002)), (' B 142  GLY  O  ', ' B 155  SER  OG ', -0.485, (207.399, 259.65, 229.906)), (' C 739  THR  O  ', ' C 743  CYS  N  ', -0.483, (195.476, 177.555, 204.874)), (' D 105  ILE  CD1', ' D 241  LEU HD21', -0.483, (152.748, 168.59, 228.429)), (' D 280  ASN  OD1', ' D 284  THR  N  ', -0.481, (158.003, 187.963, 198.427)), (' B 187  LYS  NZ ', ' B 211  ASN  OD1', -0.48, (204.204, 260.089, 200.68)), (' D 212  LEU HD11', ' D 215  ASP  CA ', -0.479, (148.643, 162.918, 204.737)), (' C 108  THR  OG1', ' C 234  ASN  O  ', -0.477, (234.165, 178.464, 229.24)), (' A 107  VAL HG21', ' A 193  ALA  HB3', -0.471, (216.963, 159.82, 302.955)), (' B 436  TRP  O  ', ' B 509  ARG  N  ', -0.471, (182.946, 192.518, 246.515)), (' C 124  THR HG21', ' C 153  MET  HE3', -0.47, (241.781, 150.03, 227.123)), (' B 908  GLY  O  ', ' B1038  LYS  NZ ', -0.47, (199.332, 199.993, 145.361)), (' A 527  GLU  OE2', ' A 586  ASN  ND2', -0.469, (175.346, 160.837, 290.551)), (' D  33  THR  OG1', ' D 219  GLY  O  ', -0.466, (157.997, 171.93, 198.818)), (' C 551  VAL  N  ', ' C 588  THR  O  ', -0.463, (227.105, 214.087, 201.79)), (' D1089  PHE  O  ', ' D1120  THR  OG1', -0.462, (201.664, 183.047, 126.96)), (' C 212  LEU HD11', ' C 215  ASP  HA ', -0.458, (252.053, 167.696, 204.354)), (' B 228  ASP  N  ', ' B 228  ASP  OD2', -0.457, (211.992, 233.377, 219.582)), (' B 357  ARG  NH1', ' D 230  PRO  O  ', -0.455, (162.989, 186.9, 228.761)), (' C 201  PHE  CZ ', ' C 235  ILE HD12', -0.454, (232.033, 173.95, 225.013)), (' C 128  ILE HD12', ' C 170  TYR  CD2', -0.452, (231.611, 160.827, 223.874)), (' C 546  LEU HD11', ' C 573  THR HG21', -0.452, (219.968, 218.447, 206.644)), (' C 494  SER  OG ', ' C 495  TYR  N  ', -0.45, (225.973, 233.85, 265.743)), (' D 584  ILE  C  ', ' D 585  LEU HD12', -0.449, (211.476, 154.059, 204.962)), (' D 471  GLU  N  ', ' D 471  GLU  OE2', -0.448, (229.874, 168.778, 266.298)), (' A 481  LYS  NZ ', ' A 489  GLU  OE2', -0.447, (191.173, 141.549, 313.383)), (' C 731  MET  N  ', ' C 774  GLN  OE1', -0.444, (199.777, 180.352, 178.502)), (' C  97  LYS  O  ', ' C 182  LYS  NZ ', -0.443, (251.58, 154.95, 212.579)), (' A 522  GLN  NE2', ' A 526  GLN  OE1', -0.443, (181.671, 152.535, 288.199)), (' D  21  ARG  NH2', ' D  81  ASN  O  ', -0.439, (154.46, 158.921, 225.613)), (' C 105  ILE  CD1', ' C 241  LEU HD21', -0.437, (245.081, 168.262, 228.118)), (' B 317  ASN  ND2', ' D 737  ASP  OD2', -0.432, (185.009, 212.624, 198.645)), (' D 905  ARG  NH1', ' D1049  LEU  O  ', -0.431, (185.127, 197.06, 149.629)), (' B 916  LEU  O  ', ' B 920  GLN  N  ', -0.431, (207.006, 215.709, 137.199)), (' B 393  THR  OG1', ' B 394  ASN  N  ', -0.43, (170.048, 192.232, 224.815)), (' C  86  PHE  N  ', ' C 236  THR  O  ', -0.429, (239.134, 179.974, 222.634)), (' B 740  MET  SD ', ' C 319  ARG  NE ', -0.428, (222.347, 201.388, 201.635)), (' A 187  LYS  NZ ', ' A 509  ASP  OD2', -0.426, (210.088, 150.416, 300.677)), (' A 417  HIS  N  ', ' A 543  ASP  OD2', -0.426, (175.148, 146.614, 277.472)), (' C 354  ASN  OD1', ' C 399  SER  OG ', -0.426, (223.321, 232.163, 249.259)), (' D 439  ASN  O  ', ' D 443  SER  OG ', -0.421, (213.718, 144.79, 260.724)), (' B 455  LEU  N  ', ' B 491  PRO  O  ', -0.418, (186.0, 172.085, 244.806)), (' B 620  VAL HG12', ' B 651  ILE HD12', -0.418, (174.347, 227.486, 191.233)), (' B 598  ILE HG23', ' B 664  ILE HG21', -0.416, (185.938, 223.662, 180.368)), (' D 123  ALA  HB2', ' D 179  LEU HD11', -0.416, (139.648, 175.331, 221.91)), (' B 883  THR HG23', ' C 707  TYR  CE2', -0.414, (221.492, 206.166, 147.0)), (' B 568  ASP  OD1', ' B 572  THR  N  ', -0.413, (171.828, 196.99, 202.726)), (' B 106  PHE  O  ', ' B 117  LEU  N  ', -0.412, (200.349, 239.619, 229.533)), (' B 552  LEU HD11', ' B 585  LEU  HB2', -0.412, (161.507, 206.678, 207.714)), (' D 106  PHE  O  ', ' D 117  LEU  N  ', -0.409, (159.329, 173.459, 230.002)), (' A 457  GLU  OE2', ' A 513  ILE  N  ', -0.407, (196.962, 152.704, 300.836)), (' D 374  PHE  CG ', ' D 434  ILE HD11', -0.405, (206.0, 154.248, 247.123)), (' A 232  GLU  HB2', ' A 581  VAL HG21', -0.404, (181.477, 160.163, 301.373)), (' D 605  SER  OG ', ' D 606  ASN  N  ', -0.4, (168.257, 166.717, 183.559))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
