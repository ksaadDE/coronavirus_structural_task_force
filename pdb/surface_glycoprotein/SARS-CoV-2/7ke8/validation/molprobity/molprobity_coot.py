# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 603 ', 'ASN', 0.02526725663520923, (126.66699999999999, 175.13599999999994, 165.796)), ('B', ' 491 ', 'PRO', 0.06330241506672342, (142.968, 133.89, 104.263)), ('B', ' 603 ', 'ASN', 0.025932720000971056, (190.76, 176.601, 165.647)), ('B', ' 709 ', 'ASN', 0.03859300859219296, (180.883, 143.693, 208.857)), ('C', ' 413 ', 'GLY', 0.08535303970676397, (150.443, 169.325, 121.153)), ('C', ' 582 ', 'LEU', 0.043753864432783805, (117.763, 148.334, 132.925)), ('C', ' 590 ', 'CYS', 0.0005651639999999999, (134.744, 138.873, 144.573)), ('C', ' 760 ', 'CYS', 0.03158141580685233, (172.511, 160.861, 150.554))]
data['omega'] = [('A', ' 392 ', 'PHE', None, (169.828, 185.612, 124.406))]
data['rota'] = [('A', ' 130 ', 'VAL', 0.2579887229422827, (119.199, 175.52899999999994, 114.761)), ('A', ' 366 ', 'SER', 0.2533629758474492, (159.161, 183.1, 113.345)), ('A', ' 382 ', 'VAL', 0.24484631261241022, (164.068, 175.11, 123.671)), ('A', ' 523 ', 'THR', 0.24349646127130925, (173.415, 190.37299999999996, 122.475)), ('A', ' 603 ', 'ASN', 0.1712225547202397, (126.66699999999999, 175.13599999999994, 165.796)), ('A', ' 615 ', 'VAL', 0.2244735339665399, (151.42, 190.481, 156.512)), ('A', ' 760 ', 'CYS', 0.11367664792959657, (154.38, 145.69499999999994, 150.178)), ('B', ' 218 ', 'GLN', 0.014367103361317168, (201.768, 182.56299999999993, 149.651)), ('B', ' 227 ', 'VAL', 0.17084667299471243, (187.513, 185.59299999999993, 126.76)), ('B', ' 275 ', 'PHE', 0.19908613870920402, (186.469, 172.604, 144.983)), ('B', ' 366 ', 'SER', 0.15748621773520127, (179.40399999999997, 147.022, 113.46099999999998)), ('B', ' 421 ', 'TYR', 0.13952179787665414, (147.601, 137.557, 112.26899999999999)), ('B', ' 544 ', 'ASN', 0.2567541392686695, (180.671, 137.112, 127.962)), ('B', ' 603 ', 'ASN', 0.2059557780405803, (190.76, 176.601, 165.647)), ('B', ' 619 ', 'GLU', 0.09484018370832734, (194.81799999999998, 145.962, 153.478)), ('B', ' 760 ', 'CYS', 0.15836259438403644, (150.047, 168.858, 149.698)), ('B', '1004 ', 'LEU', 0.07935540144169197, (159.098, 167.967, 151.374)), ('C', '  84 ', 'LEU', 0.11308715499469583, (145.571, 113.39999999999998, 125.76)), ('C', ' 170 ', 'TYR', 0.2591996088656795, (168.003, 118.159, 116.96)), ('C', ' 227 ', 'VAL', 0.17360753762242112, (166.293, 121.05399999999996, 126.077)), ('C', ' 317 ', 'ASN', 0.06945893023571172, (142.445, 137.46, 150.563)), ('C', ' 328 ', 'ARG', 0.09181665390438241, (127.255, 143.735, 128.224)), ('C', ' 366 ', 'SER', 0.09945852757859669, (138.232, 145.797, 112.366)), ('C', ' 437 ', 'ASN', 0.015258594549286329, (148.02, 160.315, 100.368)), ('C', ' 540 ', 'ASN', 0.19821716308736892, (135.992, 139.655, 134.312)), ('C', ' 760 ', 'CYS', 0.07322877645492554, (172.511, 160.861, 150.554)), ('C', '1004 ', 'LEU', 0.09788140887209787, (166.926, 153.545, 151.575)), ('C', '1127 ', 'ASP', 0.033177424282563824, (131.47499999999994, 159.844, 220.68))]
data['cbeta'] = [('A', ' 391 ', 'CYS', ' ', 0.28096993805368686, (167.294, 187.20199999999994, 124.08999999999999)), ('A', ' 745 ', 'ASP', ' ', 0.2626455789583314, (141.424, 141.698, 142.394)), ('B', ' 166 ', 'CYS', ' ', 0.2782731670329231, (192.96, 184.331, 109.15999999999998)), ('C', ' 112 ', 'SER', ' ', 0.25739573968973706, (151.263, 115.611, 108.808)), ('C', ' 166 ', 'CYS', ' ', 0.39472666766398934, (164.278, 115.71699999999997, 109.327))]
data['probe'] = [(' C 132  GLU  HG3', ' C 165  ASN  ND2', -1.229, (157.374, 119.271, 104.653)), (' B 165  ASN  CG ', ' B1304  NAG  O7 ', -1.123, (194.898, 178.268, 104.082)), (' C 132  GLU  CG ', ' C 165  ASN HD22', -1.116, (156.747, 118.968, 105.412)), (' C 131  CYS  HA ', ' C 165  ASN  O  ', -0.954, (160.067, 117.346, 108.246)), (' B 165  ASN  ND2', ' B1304  NAG  O7 ', -0.817, (194.093, 177.281, 105.158)), (' C 132  GLU  H  ', ' C 165  ASN  HB2', -0.791, (158.484, 116.773, 106.486)), (' C 132  GLU  CG ', ' C 165  ASN  ND2', -0.669, (156.682, 119.088, 105.199)), (' B 165  ASN  CG ', ' B1304  NAG  C7 ', -0.648, (194.498, 178.286, 103.444)), (' B 165  ASN  CB ', ' B1304  NAG  O7 ', -0.625, (194.229, 178.705, 105.22)), (' C 132  GLU  HG3', ' C 165  ASN HD22', -0.624, (157.293, 119.886, 106.112)), (' C 132  GLU  HB2', ' C 165  ASN  HB2', -0.584, (158.426, 116.766, 105.996)), (' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.547, (167.667, 187.327, 122.161)), (' C 391  CYS  HB2', ' C 525  CYS  HA ', -0.538, (131.187, 151.385, 121.08)), (' B 165  ASN  OD1', ' B1304  NAG  C7 ', -0.486, (194.145, 178.581, 103.353)), (' C 132  GLU  HB2', ' C 165  ASN  CB ', -0.465, (158.394, 117.535, 105.78)), (' B 391  CYS  HB2', ' B 525  CYS  HA ', -0.463, (178.454, 136.856, 121.965)), (' B 165  ASN  HB2', ' B1304  NAG  O7 ', -0.451, (194.861, 178.763, 105.633)), (' C 132  GLU  CB ', ' C 165  ASN  HB2', -0.435, (157.789, 117.233, 106.207)), (' C 132  GLU  CB ', ' C 165  ASN  ND2', -0.402, (157.313, 118.048, 105.379))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
