# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 123 ', 'ALA', 0.007521032835774017, (139.1, 218.22200000000007, 136.18099999999995)), ('A', ' 320 ', 'VAL', 0.03704577361805799, (180.701, 196.913, 160.28799999999995)), ('A', ' 344 ', 'ALA', 0.01218880252653653, (188.56300000000005, 175.89, 112.828)), ('A', ' 582 ', 'LEU', 0.01694202581621486, (202.386, 188.00100000000006, 145.656)), ('B', ' 197 ', 'ILE', 0.013111322582507126, (192.53900000000004, 158.93500000000006, 137.94999999999993)), ('C', ' 844 ', 'ILE', 0.00542745669942164, (171.615, 129.02800000000005, 168.42599999999993))]
data['omega'] = [('H', ' 157 ', 'PRO', None, (179.41500000000002, 146.35700000000006, 50.28299999999999)), ('H', ' 159 ', 'PRO', None, (176.34300000000005, 151.70500000000007, 51.479)), ('L', '   8 ', 'PRO', None, (144.775, 157.344, 50.271999999999984)), ('L', '  96 ', 'PRO', None, (148.953, 140.89000000000004, 66.98099999999997)), ('L', ' 142 ', 'PRO', None, (154.141, 163.245, 35.51))]
data['rota'] = [('A', ' 392 ', 'PHE', 0.0001375113301323418, (190.20900000000006, 178.736, 136.388)), ('A', ' 518 ', 'LEU', 0.10297400537889619, (188.921, 178.249, 142.87899999999993)), ('A', ' 555 ', 'SER', 0.24940507197470288, (200.743, 188.345, 157.26099999999994)), ('A', ' 615 ', 'VAL', 0.24160053210771745, (183.941, 194.537, 172.566)), ('A', ' 900 ', 'MET', 0.24827518201563495, (149.161, 169.85500000000005, 222.23299999999995)), ('B', ' 157 ', 'PHE', 0.24189742904809539, (217.41200000000006, 157.10600000000005, 121.24699999999997)), ('B', ' 195 ', 'LYS', 0.04237646095235138, (198.35700000000006, 158.037, 139.626)), ('B', ' 312 ', 'ILE', 0.2235270254183694, (188.12500000000003, 151.338, 175.72399999999993)), ('B', ' 849 ', 'LEU', 0.0, (189.95600000000005, 177.90600000000006, 168.55299999999994)), ('B', ' 854 ', 'LYS', 0.05954764594296372, (183.63500000000005, 183.726, 167.45799999999994)), ('B', '1028 ', 'LYS', 0.02335313725447404, (173.467, 170.107, 200.28999999999994)), ('C', '  61 ', 'ASN', 0.2523419333866109, (128.031, 139.966, 152.426)), ('C', ' 231 ', 'ILE', 0.2664543014536428, (148.65700000000004, 139.61700000000005, 130.322)), ('C', ' 233 ', 'ILE', 0.21028646246739666, (143.461, 142.735, 129.139)), ('C', ' 517 ', 'LEU', 0.14861061383816715, (147.752, 184.078, 141.294)), ('C', '1004 ', 'LEU', 0.2940629312879955, (168.679, 158.086, 164.332)), ('C', '1019 ', 'ARG', 0.13405298212245717, (169.48300000000003, 158.677, 186.178)), ('H', ' 199 ', 'LEU', 0.19381634661241384, (181.83200000000005, 171.84, 28.446999999999992))]
data['cbeta'] = []
data['probe'] = [(' B1126  CYS  HB2', ' B1132  ILE HD13', -0.786, (164.393, 140.149, 233.025)), (' H  38  ARG  HB3', ' H  48  ILE HD11', -0.781, (162.39, 143.382, 61.577)), (' A 552  LEU  HB3', ' A 585  LEU HD13', -0.731, (193.908, 191.119, 152.158)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.7, (159.423, 144.184, 206.392)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.683, (152.576, 179.239, 208.912)), (' B 614  ASP  HB3', ' C 841  LEU HD21', -0.679, (176.737, 138.436, 170.157)), (' B 358  ILE  HB ', ' B 395  VAL  HB ', -0.675, (158.624, 138.211, 119.066)), (' A 736  VAL HG11', ' A1004  LEU HD21', -0.673, (151.747, 168.188, 165.909)), (' B1040  VAL HG21', ' C1035  GLY  HA3', -0.673, (171.172, 156.014, 207.835)), (' B 112  SER  O  ', ' B 113  LYS  HG2', -0.668, (199.633, 147.92, 118.911)), (' C 720  ILE HG13', ' C 923  ILE HG23', -0.663, (157.225, 143.692, 214.227)), (' H  91  THR HG23', ' H 120  THR  HA ', -0.659, (170.449, 143.018, 53.247)), (' A 770  ILE HD11', ' A1012  LEU HD12', -0.652, (157.241, 164.994, 174.924)), (' A 319  ARG HH21', ' B 740  MET  HB2', -0.652, (175.9, 186.969, 161.731)), (' B1028  LYS  O  ', ' B1032  CYS  CB ', -0.648, (175.388, 170.356, 202.878)), (' C1028  LYS  O  ', ' C1032  CYS  HB2', -0.642, (166.41, 154.418, 201.929)), (' C 201  PHE  HB3', ' C 229  LEU  HB2', -0.639, (146.515, 137.027, 134.588)), (' B 547  THR HG23', ' C 978  ASN  HB3', -0.631, (170.4, 146.646, 144.689)), (' B1028  LYS  O  ', ' B1032  CYS  HB2', -0.628, (174.361, 170.202, 202.529)), (' C1028  LYS  O  ', ' C1032  CYS  CB ', -0.622, (166.415, 153.668, 201.897)), (' A 117  LEU HD21', ' A 231  ILE HD13', -0.613, (155.063, 203.837, 134.269)), (' C 905  ARG  HD2', ' C1049  LEU  O  ', -0.607, (165.581, 150.409, 211.667)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.604, (187.645, 166.155, 215.295)), (' B 570  ALA  HB1', ' C 966  LEU  HB2', -0.597, (165.134, 148.608, 158.212)), (' C 770  ILE HD11', ' C1012  LEU HD12', -0.592, (171.202, 159.699, 174.677)), (' L 121  PRO  HD3', ' L 133  VAL HG22', -0.582, (176.615, 151.405, 25.559)), (' B 319  ARG HH22', ' B 595  VAL HG21', -0.57, (186.358, 145.371, 163.374)), (' L 121  PRO  HB3', ' L 132  SER  H  ', -0.57, (178.75, 149.46, 28.637)), (' B 858  LEU HD21', ' B 962  LEU HD23', -0.569, (178.426, 176.61, 166.982)), (' B 287  ASP  OD1', ' B 288  ALA  N  ', -0.568, (201.76, 161.145, 160.784)), (' A  37  TYR  OH ', ' A  54  LEU  O  ', -0.566, (157.472, 199.673, 149.877)), (' H  91  THR  HA ', ' H 119  VAL  O  ', -0.565, (169.085, 143.437, 55.277)), (' B 439  ASN  O  ', ' B 443  SER  OG ', -0.562, (168.423, 126.104, 94.35)), (' B1080  ALA  O  ', ' B1132  ILE HG13', -0.562, (168.542, 142.239, 231.197)), (' A 802  PHE  HD1', ' A 805  ILE HD11', -0.56, (145.146, 177.018, 208.666)), (' C1308  NAG  H3 ', ' C1308  NAG  H83', -0.559, (143.233, 178.899, 117.267)), (' B 908  GLY  O  ', ' B1038  LYS  NZ ', -0.559, (172.312, 164.047, 215.626)), (' C 749  CYS  HB2', ' C 977  LEU HD21', -0.558, (173.998, 153.12, 149.904)), (' C 122  ASN  O  ', ' C 124  THR  N  ', -0.556, (140.582, 116.443, 133.286)), (' C 908  GLY  O  ', ' C1038  LYS  NZ ', -0.555, (163.524, 158.36, 214.8)), (' A 707  TYR  HB3', ' B 792  PRO  HG3', -0.552, (184.758, 186.299, 215.965)), (' A  29  THR HG23', ' A  62  VAL HG23', -0.549, (158.96, 216.576, 155.764)), (' A 205  SER  HB3', ' A 226  LEU HD12', -0.547, (145.699, 206.961, 145.528)), (' A1040  VAL HG21', ' B1035  GLY  HA3', -0.539, (171.165, 172.716, 208.935)), (' A 106  PHE  HB3', ' A 235  ILE HD13', -0.538, (159.488, 207.598, 135.502)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.535, (186.731, 168.346, 207.872)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.534, (218.256, 149.448, 145.187)), (' B 703  ASN  OD1', ' B 704  SER  N  ', -0.534, (184.412, 140.121, 207.636)), (' B 551  VAL HG23', ' B 590  CYS  HB3', -0.533, (180.573, 139.879, 153.756)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.529, (157.497, 173.82, 239.906)), (' B 393  THR HG22', ' B 517  LEU  HA ', -0.527, (157.051, 145.796, 124.071)), (' H 129  PRO  HD2', ' H 215  THR HG21', -0.526, (185.852, 151.67, 45.126)), (' A 866  THR  OG1', ' A 869  MET  SD ', -0.525, (136.913, 166.616, 189.553)), (' C 117  LEU HD11', ' C 231  ILE HD13', -0.523, (143.987, 138.07, 130.263)), (' A 901  GLN  O  ', ' A 905  ARG  HG2', -0.523, (152.924, 169.951, 217.316)), (' B 398  ASP  OD2', ' B 423  TYR  OH ', -0.521, (159.279, 143.119, 108.785)), (' A1012  LEU  HB3', ' C1013  ILE HD13', -0.521, (162.359, 164.701, 175.545)), (' B  30  ASN  OD1', ' B  31  SER  N  ', -0.519, (208.23, 149.488, 155.247)), (' A 564  GLN  NE2', ' A 564  GLN  O  ', -0.519, (196.165, 182.368, 146.452)), (' B 905  ARG  HD2', ' B1049  LEU  O  ', -0.515, (177.723, 169.813, 212.928)), (' H  50  TRP  CD1', ' H  59  ASN  HB2', -0.514, (153.967, 142.011, 72.017)), (' B 537  LYS  O  ', ' B 539  VAL HG23', -0.513, (181.362, 136.51, 149.525)), (' B 902  MET  HE1', ' B1049  LEU HD13', -0.513, (183.198, 167.325, 214.541)), (' L  38  GLN  HB2', ' L  48  LEU HD11', -0.512, (153.403, 162.467, 59.704)), (' A 902  MET  HE1', ' A1049  LEU HD13', -0.512, (154.36, 176.8, 215.45)), (' H  27  PHE  HB2', ' H 101  CYS  H  ', -0.512, (160.669, 157.373, 79.596)), (' C1029  MET  HE2', ' C1053  PRO  HB3', -0.507, (169.475, 147.659, 198.635)), (' A 852  ALA  O  ', ' A 856  ASN  ND2', -0.506, (144.77, 176.167, 163.781)), (' B 350  VAL  HA ', ' B 400  PHE  HB2', -0.505, (159.466, 137.969, 101.003)), (' C 384  PRO  HA ', ' C 387  LEU  HG ', -0.505, (147.284, 175.646, 132.463)), (' B 472  ILE HD13', ' B 482  GLY  HA2', -0.504, (142.505, 143.806, 84.688)), (' A 720  ILE HG13', ' A 923  ILE HG23', -0.504, (153.054, 180.832, 217.025)), (' B 858  LEU HD23', ' B 959  LEU HD22', -0.504, (179.816, 177.407, 169.296)), (' A1029  MET  HE2', ' A1053  PRO  HB3', -0.502, (149.794, 170.374, 200.212)), (' H 131  VAL  O  ', ' H 219  LYS  NZ ', -0.502, (186.385, 155.498, 36.336)), (' A 733  LYS  HE3', ' A 771  ALA  HB1', -0.499, (146.673, 163.725, 179.535)), (' C 358  ILE  HB ', ' C 395  VAL  HB ', -0.498, (144.999, 188.324, 130.446)), (' A 342  PHE  HB2', ' A1303  NAG  H82', -0.497, (184.844, 179.76, 118.013)), (' A1035  GLY  HA3', ' C1040  VAL HG21', -0.497, (155.94, 164.174, 208.419)), (' B1013  ILE HD13', ' C1012  LEU  HB3', -0.496, (169.037, 163.631, 175.496)), (' B 222  ALA  HB2', ' B 285  ILE  HB ', -0.496, (203.185, 165.905, 154.117)), (' C 810  SER  O  ', ' C 810  SER  OG ', -0.495, (170.27, 125.123, 196.591)), (' A 206  LYS  HB2', ' A 223  LEU  HA ', -0.495, (146.768, 205.833, 152.079)), (' C 326  ILE HD11', ' C 534  VAL HG22', -0.495, (127.365, 175.129, 149.804)), (' C1032  CYS  SG ', ' C1051  SER  OG ', -0.493, (164.254, 151.346, 203.732)), (' B 715  PRO  HD3', ' C 894  LEU HD13', -0.493, (181.321, 151.134, 217.517)), (' C 231  ILE HD12', ' C 233  ILE  H  ', -0.492, (145.222, 140.897, 130.386)), (' A 983  ARG  HD2', ' C 517  LEU  HG ', -0.492, (148.572, 180.193, 141.685)), (' C  46  SER  HA ', ' C 279  TYR  O  ', -0.49, (155.533, 134.412, 163.207)), (' C 752  LEU HD21', ' C 990  GLU  HG2', -0.489, (176.161, 161.688, 146.196)), (' B  89  GLY  HA3', ' B 270  LEU HD12', -0.489, (198.66, 155.48, 142.946)), (' L 121  PRO  HG3', ' L 131  ALA  HB1', -0.486, (178.326, 149.075, 25.995)), (' B 111  ASP  OD1', ' B 112  SER  N  ', -0.486, (203.576, 148.298, 119.698)), (' B 715  PRO  HA ', ' B1072  GLU  HA ', -0.486, (185.223, 150.458, 219.081)), (' B 473  TYR  OH ', ' H 104  THR  O  ', -0.486, (153.863, 153.871, 87.46)), (' C 369  TYR  OH ', ' C 388  ASN  OD1', -0.485, (142.157, 172.495, 130.316)), (' B 130  VAL  HB ', ' B 233  ILE HD11', -0.485, (199.494, 159.078, 125.095)), (' H 207  ASN  ND2', ' H 218  ASP  OD1', -0.484, (186.926, 163.668, 43.58)), (' B  81  ASN  O  ', ' B 239  GLN  NE2', -0.484, (212.503, 146.469, 131.032)), (' H  68  VAL HG22', ' H  83  LEU HD13', -0.483, (164.267, 137.653, 63.006)), (' H 129  PRO  HB3', ' H 155  TYR  HB3', -0.483, (181.492, 150.434, 43.947)), (' C 950  ASP  OD2', ' C 954  GLN  NE2', -0.482, (157.624, 153.182, 180.77)), (' A 326  ILE HD12', ' A 539  VAL HG21', -0.481, (189.379, 195.076, 150.136)), (' A 603  ASN  OD1', ' A 604  THR  N  ', -0.48, (156.061, 201.348, 181.63)), (' B 128  ILE HD13', ' B 229  LEU HD11', -0.479, (204.329, 163.965, 132.203)), (' B 100  ILE HG22', ' B 242  LEU  HB2', -0.477, (219.58, 153.159, 134.285)), (' B 811  LYS  O  ', ' B 813  SER  N  ', -0.477, (192.884, 188.559, 196.28)), (' B 726  ILE HG12', ' B1061  VAL HG22', -0.475, (184.757, 170.224, 194.547)), (' B1028  LYS  O  ', ' B1032  CYS  HB3', -0.475, (175.442, 170.798, 203.117)), (' A 905  ARG HH11', ' A1036  GLN  HB2', -0.475, (156.028, 168.346, 212.514)), (' A 805  ILE HG22', ' A 818  ILE HD12', -0.475, (145.18, 179.902, 203.564)), (' B 392  PHE  HD1', ' B 517  LEU  HB2', -0.474, (160.174, 147.33, 123.687)), (' A 598  ILE HG23', ' A 664  ILE HG21', -0.473, (168.436, 195.701, 181.726)), (' B 849  LEU  O  ', ' B 853  GLN  HG3', -0.473, (186.364, 178.501, 168.475)), (' A 100  ILE HD13', ' A 263  ALA  HB2', -0.472, (148.45, 225.155, 145.925)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.472, (152.953, 208.923, 162.368)), (' B 128  ILE HG21', ' B 229  LEU HD13', -0.47, (203.294, 163.569, 130.811)), (' B1116  THR HG22', ' B1138  TYR  HD2', -0.469, (174.56, 154.056, 241.325)), (' B 193  VAL HG23', ' B 223  LEU HD22', -0.467, (204.9, 160.408, 146.354)), (' C1043  CYS  HB3', ' C1048  HIS  CD2', -0.466, (162.226, 152.987, 205.613)), (' A 796  ASP  N  ', ' A 796  ASP  OD1', -0.466, (137.113, 174.065, 218.125)), (' B 617  CYS  SG ', ' B 644  GLN  HB2', -0.464, (186.794, 133.028, 173.735)), (' C 715  PRO  HA ', ' C1072  GLU  HA ', -0.464, (145.137, 152.974, 219.539)), (' B 853  GLN  O  ', ' B 858  LEU  HB2', -0.463, (181.152, 180.633, 167.627)), (' A  39  PRO  HG3', ' A  51  THR HG21', -0.463, (154.049, 194.277, 154.841)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.462, (152.952, 138.631, 149.964)), (' A1128  VAL HG21', ' B 918  GLU  HG2', -0.46, (187.701, 165.327, 230.258)), (' B 849  LEU  H  ', ' B 849  LEU  HG ', -0.459, (191.329, 176.95, 170.485)), (' L 194  ALA  HB2', ' L 209  SER  HB3', -0.459, (168.429, 154.901, 18.633)), (' H 196  SER  HA ', ' H 199  LEU HD23', -0.459, (177.608, 171.971, 26.805)), (' C 328  ARG  HD2', ' C 533  LEU HD12', -0.459, (128.908, 180.404, 147.057)), (' B 328  ARG  NH1', ' B 531  THR  O  ', -0.458, (175.969, 130.024, 139.362)), (' H 161  THR HG23', ' H 209  ASN  HB3', -0.458, (182.113, 158.987, 49.471)), (' A1005  GLN  OE1', ' C1002  GLN  NE2', -0.456, (162.351, 165.176, 161.842)), (' A 559  PHE  CG ', ' A 584  ILE HG12', -0.455, (200.811, 181.693, 150.903)), (' A 586  ASP  OD2', ' B 844  ILE  N  ', -0.455, (197.178, 185.73, 159.8)), (' B 961  THR HG21', ' C 765  ARG HH22', -0.455, (180.79, 166.716, 168.522)), (' A 578  ASP  OD2', ' A 581  THR  N  ', -0.453, (199.72, 191.138, 143.827)), (' A 763  LEU HD22', ' A1008  VAL HG21', -0.452, (156.449, 164.705, 167.878)), (' L 185  ALA  O  ', ' L 189  LYS  HG3', -0.451, (179.007, 140.467, 19.355)), (' A 326  ILE  O  ', ' A 541  PHE  HA ', -0.451, (187.559, 192.384, 146.656)), (' C 611  LEU HD22', ' C 666  ILE HG23', -0.45, (137.085, 159.685, 177.607)), (' A 294  ASP  OD2', ' A 297  SER  OG ', -0.45, (162.632, 202.426, 167.501)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.449, (137.466, 132.396, 159.452)), (' B 570  ALA  HB2', ' C 963  VAL HG13', -0.449, (164.787, 147.306, 161.06)), (' L 109  ARG  HG2', ' L 110  THR  H  ', -0.449, (153.627, 171.097, 37.418)), (' C 767  LEU HD23', ' C 770  ILE HD12', -0.449, (172.1, 156.969, 173.598)), (' B 206  LYS  HB2', ' B 223  LEU  HA ', -0.448, (207.686, 164.525, 148.294)), (' H  11  VAL HG21', ' H 157  PRO  HG3', -0.448, (178.296, 145.368, 53.678)), (' C 727  LEU HD11', ' C1028  LYS  HD2', -0.447, (163.572, 154.321, 195.962)), (' A 206  LYS  HG3', ' A 207  HIS  H  ', -0.446, (144.407, 208.869, 152.877)), (' B 433  VAL HG22', ' B 512  VAL HG22', -0.445, (165.304, 142.343, 108.057)), (' B 853  GLN  HG2', ' B 963  VAL HG21', -0.445, (184.133, 177.182, 166.811)), (' A 802  PHE  HZ ', ' A 898  PHE  CZ ', -0.445, (146.687, 175.245, 213.583)), (' B1032  CYS  SG ', ' B1051  SER  OG ', -0.444, (178.153, 169.248, 204.954)), (' B1029  MET  HE2', ' B1053  PRO  HB3', -0.443, (179.042, 175.595, 200.525)), (' B 418  ILE  HA ', ' B 422  ASN HD22', -0.443, (160.367, 144.982, 96.596)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.442, (157.611, 177.573, 121.51)), (' A 122  ASN  O  ', ' A 124  THR  N  ', -0.441, (138.75, 216.077, 135.471)), (' C 676  THR  HA ', ' C 690  GLN  HA ', -0.441, (127.819, 143.248, 184.154)), (' C 914  ASN  OD1', ' C 915  VAL  N  ', -0.44, (158.606, 148.934, 226.137)), (' B  46  SER  N  ', ' B 279  TYR  O  ', -0.44, (198.825, 172.339, 161.109)), (' A 330  PRO  HB2', ' A 332  ILE HD13', -0.44, (197.609, 187.244, 135.058)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.439, (174.645, 171.846, 121.942)), (' B 336  CYS  HB3', ' B 337  PRO  HD2', -0.437, (159.79, 131.3, 119.866)), (' L 191  LYS  HG2', ' L 211  ASN  OD1', -0.436, (175.92, 151.772, 13.677)), (' B 116  SER  HG ', ' B 135  PHE  HE2', -0.436, (204.745, 152.84, 124.986)), (' A 849  LEU  HA ', ' A 849  LEU HD23', -0.435, (144.664, 182.661, 168.087)), (' C 802  PHE  HD1', ' C 805  ILE HD11', -0.435, (165.422, 139.559, 206.085)), (' B 385  THR  OG1', ' B 386  LYS  N  ', -0.435, (176.581, 143.165, 121.535)), (' B 541  PHE  CZ ', ' B 587  ILE HD13', -0.434, (172.1, 139.337, 149.243)), (' A 382  VAL HG22', ' A 517  LEU HD11', -0.434, (182.563, 176.797, 137.586)), (' H  44  ARG  NH1', ' H  45  LEU  O  ', -0.434, (153.823, 146.749, 57.841)), (' A 914  ASN HD22', ' C1123  SER  HB3', -0.434, (158.181, 176.006, 232.157)), (' A 770  ILE  O  ', ' A 774  GLN  HG2', -0.433, (151.934, 164.834, 180.81)), (' A 382  VAL HG21', ' A 515  PHE  HE1', -0.433, (182.629, 176.382, 135.254)), (' B  53  ASP  HB2', ' B  55  PHE  CE1', -0.433, (194.607, 159.823, 149.637)), (' A 117  LEU HD21', ' A 231  ILE HG21', -0.433, (154.722, 204.048, 133.917)), (' A 392  PHE  CD1', ' A 392  PHE  N  ', -0.433, (189.597, 180.211, 135.331)), (' H  50  TRP  NE1', ' H  59  ASN  HB2', -0.429, (153.701, 141.947, 72.769)), (' A1032  CYS  SG ', ' A1051  SER  OG ', -0.429, (155.975, 172.856, 205.217)), (' L  48  LEU HD23', ' L  59  ILE HD12', -0.429, (154.434, 165.215, 63.87)), (' A 898  PHE  HZ ', ' A1050  MET  HE1', -0.429, (149.179, 175.22, 213.643)), (' B 802  PHE  HD1', ' B 805  ILE HD11', -0.428, (187.709, 175.824, 208.679)), (' L 123  ASP  O  ', ' L 127  LYS  HG2', -0.427, (187.962, 149.882, 27.461)), (' A 206  LYS  HG3', ' A 207  HIS  N  ', -0.427, (144.914, 208.854, 153.032)), (' C 206  LYS  HB2', ' C 223  LEU  HA ', -0.426, (144.838, 129.489, 150.057)), (' A 642  VAL HG22', ' A 651  ILE HG12', -0.426, (179.048, 204.399, 175.107)), (' B 770  ILE  O  ', ' B 774  GLN  HG2', -0.426, (171.735, 178.373, 181.745)), (' A 611  LEU HD22', ' A 666  ILE HG23', -0.426, (175.42, 193.902, 179.521)), (' A 802  PHE  CD1', ' A 805  ILE HD11', -0.425, (144.961, 176.611, 209.237)), (' A 666  ILE HD11', ' A 672  ALA  HB2', -0.425, (172.659, 197.898, 183.098)), (' A 459  SER  OG ', ' B1302  NAG  O7 ', -0.425, (187.551, 148.719, 129.186)), (' C 833  PHE  CD1', ' C 959  LEU HD13', -0.424, (166.851, 146.965, 170.344)), (' A 231  ILE HG13', ' A 232  GLY  N  ', -0.424, (156.379, 199.87, 133.231)), (' H 107  TYR  HD1', ' P   3  FUC  H63', -0.423, (154.378, 161.304, 77.894)), (' B  52  GLN  N  ', ' B  52  GLN  OE1', -0.422, (189.299, 160.528, 152.198)), (' B 707  TYR  HB3', ' C 792  PRO  HG3', -0.421, (176.58, 136.448, 212.793)), (' C1053  PRO  O  ', ' C1054  GLN  NE2', -0.421, (167.084, 142.459, 199.402)), (' A 280  ASN  ND2', ' A 284  THR  OG1', -0.42, (142.046, 199.435, 162.271)), (' B 310  LYS  HA ', ' B 599  THR  O  ', -0.42, (193.713, 154.017, 177.7)), (' B 802  PHE  HZ ', ' B 898  PHE  CZ ', -0.419, (185.747, 174.933, 213.174)), (' C1028  LYS  O  ', ' C1032  CYS  HB3', -0.417, (166.841, 153.229, 202.097)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.417, (155.593, 223.364, 151.437)), (' B  48  LEU HD22', ' B 306  PHE  CE1', -0.416, (196.898, 164.574, 163.124)), (' A 589  PRO  HG2', ' B 855  PHE  CG ', -0.416, (185.988, 185.463, 161.874)), (' C  46  SER  CA ', ' C 279  TYR  O  ', -0.416, (155.964, 134.862, 163.353)), (' A 339  GLY  HA2', ' A1303  NAG  C7 ', -0.415, (186.361, 182.213, 117.831)), (' C 326  ILE HD12', ' C 539  VAL HG21', -0.415, (129.958, 175.07, 150.949)), (' C 719  THR HG23', ' C1070  ALA  HB2', -0.415, (148.178, 147.352, 213.823)), (' C 843  ASP  O  ', ' C 845  ALA  N  ', -0.414, (173.244, 129.217, 169.985)), (' A 121  ASN  OD1', ' A 126  VAL HG22', -0.414, (143.342, 211.717, 138.844)), (' B 642  VAL HG22', ' B 651  ILE HG12', -0.413, (192.115, 136.907, 170.721)), (' A 676  THR  HA ', ' A 690  GLN  HA ', -0.413, (165.798, 209.673, 187.099)), (' A 864  LEU  O  ', ' C 669  GLY  N  ', -0.412, (138.538, 164.202, 186.45)), (' B 901  GLN  O  ', ' B 905  ARG  HG2', -0.412, (178.4, 171.795, 217.283)), (' A 903  ALA  HB1', ' A 913  GLN  HB2', -0.412, (154.51, 171.377, 224.666)), (' H 176  PHE  CD2', ' L 165  THR HG23', -0.411, (167.416, 158.919, 40.121)), (' A 172  SER  O  ', ' A 172  SER  OG ', -0.411, (138.546, 207.453, 136.617)), (' A 392  PHE  HB3', ' A 515  PHE  HB2', -0.41, (188.477, 176.341, 135.048)), (' C  36  VAL HG21', ' C 220  PHE  HE1', -0.41, (142.831, 135.887, 157.306)), (' C 725  GLU  OE1', ' C1064  HIS  NE2', -0.409, (160.571, 152.411, 199.767)), (' B 886  TRP  HZ3', ' B 905  ARG  HD3', -0.408, (175.863, 170.964, 214.676)), (' C 770  ILE  O  ', ' C 774  GLN  HG2', -0.407, (173.418, 154.397, 180.254)), (' A 909  ILE HD13', ' A1049  LEU HD21', -0.403, (158.938, 175.263, 216.283)), (' A 894  LEU HD13', ' C 715  PRO  HD3', -0.403, (147.573, 157.042, 218.292)), (' C 673  SER  OG ', ' C 695  TYR  OH ', -0.402, (135.995, 152.056, 187.13)), (' B 709  ASN  ND2', ' C 796  ASP  OD2', -0.402, (171.298, 133.464, 220.825)), (' A 731  MET  CG ', ' A1018  ILE HG13', -0.402, (155.105, 170.845, 182.475)), (' B1080  ALA  C  ', ' B1132  ILE HG13', -0.402, (168.281, 142.545, 231.444)), (' B1043  CYS  HB3', ' B1048  HIS  CD2', -0.401, (177.549, 166.404, 206.508)), (' B 598  ILE HG23', ' B 664  ILE HG21', -0.4, (190.121, 149.402, 177.922)), (' C 286  THR  O  ', ' C 287  ASP  OD1', -0.4, (144.804, 132.026, 162.285))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
