# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 582 ', 'LEU', 0.03804849447753599, (116.403, 151.05599999999998, 135.141)), ('A', ' 709 ', 'ASN', 0.026878844170940983, (134.646, 145.721, 207.37599999999995)), ('A', ' 855 ', 'PHE', 0.012204391913601488, (179.845, 144.404, 151.45)), ('B', ' 139 ', 'PRO', 0.04949940251340776, (111.87900000000002, 190.35199999999995, 121.40799999999997)), ('B', ' 413 ', 'GLY', 0.042456674919697374, (173.36700000000005, 161.71899999999994, 122.364)), ('B', ' 603 ', 'ASN', 0.039177816189703916, (127.426, 177.03799999999995, 166.90799999999996)), ('B', ' 709 ', 'ASN', 0.03372092854417634, (161.626, 184.64, 208.12499999999994)), ('C', ' 536 ', 'ASN', 0.04509169367283915, (194.98, 138.32, 143.185)), ('C', ' 582 ', 'LEU', 0.022754565059452614, (187.78400000000002, 125.96800000000002, 133.971)), ('C', ' 709 ', 'ASN', 0.02206350917622183, (181.88000000000002, 141.921, 207.23299999999998))]
data['omega'] = [('A', ' 392 ', 'PHE', None, (129.94599999999994, 155.054, 125.179))]
data['rota'] = [('A', ' 121 ', 'ASN', 0.17666241453890036, (170.36400000000006, 105.782, 126.957)), ('A', ' 131 ', 'CYS', 0.21673994643641872, (164.077, 113.831, 112.204)), ('A', ' 166 ', 'CYS', 0.10105584880566447, (163.472, 117.976, 108.018)), ('A', ' 422 ', 'ASN', 0.11210125803273166, (140.576, 177.324, 113.083)), ('A', ' 760 ', 'CYS', 0.215928078588891, (172.379, 160.979, 150.118)), ('A', '1004 ', 'LEU', 0.07874357681747116, (167.26, 153.563, 151.494)), ('A', '1127 ', 'ASP', 0.09539511659750796, (132.55999999999995, 158.538, 219.92299999999994)), ('B', ' 366 ', 'SER', 0.23336099961190482, (159.27100000000004, 183.038, 114.46799999999998)), ('B', ' 418 ', 'ILE', 0.1522352034384062, (179.26, 161.295, 110.89999999999998)), ('B', ' 422 ', 'ASN', 0.07636200089935904, (183.323, 164.923, 111.90199999999997)), ('B', ' 429 ', 'PHE', 0.005996341129938984, (173.454, 170.369, 124.151)), ('B', ' 603 ', 'ASN', 0.2866931331990981, (127.426, 177.03799999999995, 166.90799999999996)), ('B', ' 615 ', 'VAL', 0.22458305265238349, (152.997, 191.016, 157.679)), ('B', ' 760 ', 'CYS', 0.12204796075820923, (154.575, 145.861, 149.847)), ('B', ' 916 ', 'LEU', 0.22997404114792125, (140.81800000000007, 160.15, 208.516)), ('B', ' 948 ', 'LEU', 0.2844409176463927, (140.61, 160.058, 173.153)), ('B', '1004 ', 'LEU', 0.08109905002704479, (150.73, 154.226, 151.5)), ('C', '  84 ', 'LEU', 0.02296274625952897, (205.406, 171.226, 126.78799999999998)), ('C', ' 218 ', 'GLN', 0.024904025517559533, (202.327, 182.138, 149.965)), ('C', ' 317 ', 'ASN', 0.17823871586679751, (185.12400000000005, 155.326, 150.829)), ('C', ' 328 ', 'ARG', 0.14261824971897843, (187.721, 137.06199999999995, 129.145)), ('C', ' 581 ', 'THR', 0.29218617496678534, (190.75500000000005, 127.96099999999998, 132.541)), ('C', ' 760 ', 'CYS', 0.12204796075820923, (150.414, 169.27, 150.37799999999996)), ('C', ' 912 ', 'THR', 0.23262439927688813, (168.386, 164.711, 210.61599999999999)), ('C', ' 948 ', 'LEU', 0.09939468157118396, (170.05, 173.62, 173.40499999999997)), ('C', '1004 ', 'LEU', 0.09073359645562283, (159.44200000000006, 168.178, 151.82)), ('C', '1145 ', 'LEU', 0.024773637955013146, (163.69700000000012, 157.26, 238.815))]
data['cbeta'] = [('A', ' 391 ', 'CYS', ' ', 0.3195835078889117, (129.87599999999995, 152.061, 124.79199999999999)), ('A', ' 773 ', 'GLU', ' ', 0.3204632481537576, (172.262, 158.519, 169.836)), ('B', ' 391 ', 'CYS', ' ', 0.26214968148978485, (167.607, 187.198, 124.97899999999997)), ('B', ' 773 ', 'GLU', ' ', 0.3254572846695775, (153.003, 146.82, 169.43399999999994)), ('B', '1041 ', 'ASP', ' ', 0.2563726587661675, (151.894, 167.50499999999994, 189.831)), ('C', ' 166 ', 'CYS', ' ', 0.2896303418160982, (193.174, 185.25399999999993, 109.31599999999997)), ('C', ' 391 ', 'CYS', ' ', 0.3187277068820523, (179.216, 137.609, 124.107)), ('C', ' 773 ', 'GLU', ' ', 0.30053349145387565, (152.39400000000006, 169.437, 170.05599999999998))]
data['probe'] = [(' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.511, (129.267, 152.59, 123.271)), (' B 391  CYS  HB2', ' B 525  CYS  HA ', -0.509, (168.161, 187.463, 123.49)), (' C 391  CYS  HB2', ' C 525  CYS  HA ', -0.5, (179.203, 137.12, 122.162)), (' B 726  ILE HG22', ' B 948  LEU HD13', -0.466, (141.426, 159.916, 176.509)), (' A 671  CYS  SG ', ' A 697  MET  HE2', -0.432, (143.356, 135.181, 173.504)), (' C1043  CYS  HB3', ' C1048  HIS  CD2', -0.413, (166.949, 166.775, 192.264))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
