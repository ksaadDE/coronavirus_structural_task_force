# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  61 ', 'ASP', 0.083859793540423, (-17.919, 80.039, 33.748)), ('A', ' 156 ', 'ASN', 0.23912132500813962, (-21.546, 74.278, 56.94500000000003)), ('A', ' 170 ', 'SER', 0.01977869140739144, (-11.31, 74.949, 64.756)), ('A', ' 190 ', 'LYS', 0.18306777099895713, (5.396, 54.426000000000016, 84.548)), ('A', ' 270 ', 'CYS', 0.05630451448221364, (-29.49000000000002, 73.103, 75.12300000000006)), ('A', ' 294 ', 'SER', 0.01890140386674763, (-13.104, 91.762, 90.27100000000006)), ('B', '  61 ', 'ASP', 0.09437576055607423, (1.678, 34.382, 30.325000000000014)), ('B', ' 126 ', 'LYS', 0.0, (22.12, 39.873, 52.17)), ('B', ' 162 ', 'LEU', 0.013027157926138734, (4.348, 59.226, 55.10700000000003)), ('B', ' 294 ', 'SER', 0.263432863445598, (30.48999999999999, 65.22, 69.512)), ('C', '   6 ', 'LYS', 0.1798103032367919, (5.018, 1.709, 54.26300000000003)), ('C', '  58 ', 'LEU', 0.10419538016796816, (10.944000000000008, 19.482, 53.213)), ('C', '  61 ', 'ASP', 0.09859835904334317, (13.27300000000001, 17.060000000000006, 44.973)), ('C', ' 126 ', 'LYS', 0.17794008122335378, (-10.753, 35.017, 48.742000000000026)), ('C', ' 170 ', 'SER', 0.036242283375901886, (-1.294, 43.33, 55.801)), ('C', ' 197 ', 'THR', 0.12555590791422283, (-3.839, 58.838, 42.70800000000003)), ('C', ' 270 ', 'CYS', 0.012105804489692673, (2.185, 43.56000000000003, 76.375)), ('C', ' 294 ', 'SER', 0.07134527241260175, (-26.667000000000023, 48.56000000000003, 72.625))]
data['cbeta'] = []
data['probe'] = [(' B 178  LEU  O  ', ' B 201  GLY  HA2', -0.564, (16.438, 34.874, 60.844)), (' C 296 BTYR  CE1', ' C 300  ILE HD11', -0.551, (-14.422, 49.883, 70.23)), (' A 147  PHE  CE2', ' A 151  ILE HD11', -0.536, (-16.029, 85.27, 62.025)), (' A 210  THR HG22', ' A 212  SER  H  ', -0.514, (-6.048, 73.505, 82.025)), (' A 206  MET  HE3', ' A 243  MET  SD ', -0.508, (-10.148, 76.365, 69.333)), (' A 263  GLU  OE1', ' A 296  TYR  OH ', -0.503, (-20.18, 82.684, 83.413)), (' B 206  MET  HE3', ' B 243  MET  SD ', -0.502, (13.906, 47.262, 62.398)), (' B 243  MET  HE3', ' B 304  PHE  CZ ', -0.499, (15.794, 50.357, 61.968)), (' B 147  PHE  CE2', ' B 151  ILE HD11', -0.495, (16.031, 49.954, 49.611)), (' B 210  THR HG22', ' B 212  SER  H  ', -0.492, (16.794, 50.43, 75.097)), (' C 147  PHE  CE2', ' C 151  ILE HD11', -0.483, (-6.625, 32.885, 58.983)), (' B 252  GLU  OE1', ' B 297  LYS  HE2', -0.474, (21.423, 63.858, 76.911)), (' A 195  GLN  NE2', ' A 604  HOH  O  ', -0.464, (4.369, 56.341, 73.763)), (' C 296 BTYR  CZ ', ' C 300  ILE HD11', -0.45, (-14.532, 49.502, 71.052)), (' B 636  HOH  O  ', ' C 203  GLU  HB2', -0.436, (-0.899, 49.057, 48.175)), (' B 164  ASP  HB3', ' B 167  GLU  HB2', -0.432, (6.612, 51.49, 59.493)), (' B  21  VAL HG12', ' B  31  PHE  CZ ', -0.428, (5.372, 45.216, 20.771)), (' A 128  ASN  HB2', ' A 129  PRO  HD3', -0.428, (-6.911, 81.643, 54.272)), (' A 243  MET  HE3', ' A 304  PHE  CZ ', -0.426, (-11.367, 79.444, 71.771)), (' A   5  ILE HG13', ' A  21  VAL HG22', -0.424, (-31.082, 95.046, 33.178)), (' C 140 BARG  HA ', ' C 140 BARG  HD2', -0.423, (-15.562, 29.77, 60.243)), (' A  21  VAL HG12', ' A  31  PHE  CZ ', -0.417, (-28.281, 90.589, 33.442)), (' A 178  LEU  O  ', ' A 201  GLY  HA2', -0.413, (-0.286, 76.142, 62.507)), (' C 181  CYS  HA ', ' C 238  GLU  O  ', -0.411, (-11.759, 47.293, 44.687)), (' A  21  VAL HG12', ' A  31  PHE  HZ ', -0.407, (-28.466, 90.935, 33.26))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
