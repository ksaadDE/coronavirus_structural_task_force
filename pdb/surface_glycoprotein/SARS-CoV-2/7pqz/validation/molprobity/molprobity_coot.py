# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  70 ', 'GLY', 0.04651593733949501, (-47.97425, 33.01592, -5.221420000000002)), ('H', ' 102 ', 'PRO', 0.0, (-26.22258, 50.20364, -25.51144))]
data['omega'] = [('A', ' 161 ', 'PRO', None, (-28.743520000000004, 27.820450000000008, 39.66034)), ('A', ' 163 ', 'PRO', None, (-30.30443, 22.07979, 37.63038000000002)), ('B', ' 148 ', 'PRO', None, (-56.739250000000006, 17.258740000000003, 25.93423)), ('H', ' 151 ', 'PRO', None, (-48.44109999999999, 61.226550000000024, -56.126590000000014)), ('H', ' 153 ', 'PRO', None, (-45.15569, 62.45440000000002, -50.93751)), ('L', '   8 ', 'PRO', None, (-52.57958, 55.77922, -21.856840000000005)), ('L', '  95 ', 'PRO', None, (-42.83050999999999, 37.65955, -33.83591000000001)), ('L', ' 141 ', 'PRO', None, (-57.12313, 76.25109, -26.986570000000007))]
data['rota'] = [('H', ' 183 ', 'SER', 0.21675954744719106, (-51.005130000000015, 75.17811, -48.09739)), ('B', '  97 ', 'LEU', 0.244088445470485, (-32.05839, 44.21552, 0.66559)), ('B', ' 102 ', 'VAL', 0.22905997287429297, (-33.477440000000016, 33.59217000000001, 5.793780000000001))]
data['cbeta'] = []
data['probe'] = [(' B  82  ALA  HA ', ' B 112  VAL HG21', -0.712, (-49.993, 10.803, 16.085)), (' A  83  MET  HB3', ' A  86  LEU HD21', -0.707, (-23.704, 35.779, 22.602)), (' H 131  SER  HG ', ' H 135  THR  N  ', -0.68, (-55.839, 93.831, -44.752)), (' B  24  GLY  HA3', ' B  28  ASN HD21', -0.675, (-44.115, 35.616, 2.619)), (' A   6  GLU  OE2', ' A 120  GLY  N  ', -0.664, (-26.384, 20.721, 19.12)), (' H  47  TRP  HE1', ' H  50  VAL HG23', -0.662, (-37.624, 42.678, -37.884)), (' B 120  PRO  HB3', ' B 146  PHE  HB3', -0.649, (-56.46, 18.636, 33.034)), (' A  52  TRP  O  ', ' A  72  ARG  NH1', -0.645, (-18.124, 28.392, 4.506)), (' L 120  PRO  HD3', ' L 132  VAL HG22', -0.624, (-61.412, 82.553, -53.431)), (' A  22  CYS  HB3', ' A  79  LEU  HB3', -0.619, (-19.656, 25.243, 13.179)), (' E 360  ASN  H  ', ' E 523  THR  HB ', -0.591, (-19.071, 0.531, -27.419)), (' A 153  GLY  HA3', ' A 195  VAL HG12', -0.586, (-46.392, 17.527, 47.248)), (' H  99  HIS  HB2', ' H 105  ASN  HB2', -0.563, (-31.587, 50.384, -30.876)), (' A 108  ASN  ND2', ' E 443  SER  O  ', -0.555, (-32.931, 29.661, -8.191)), (' B 139  LEU HD12', ' B 185  LEU HD23', -0.555, (-53.112, 32.435, 45.604)), (' B 188  THR HG22', ' B 190  GLU  H  ', -0.554, (-48.881, 39.392, 54.375)), (' A 103  LEU  HG ', ' A 104  THR HG23', -0.548, (-16.857, 23.343, -6.286)), (' A 173  LEU HD21', ' A 196  VAL HG21', -0.544, (-44.115, 9.233, 48.656)), (' B  85  GLU  HB2', ' B 112  VAL HG22', -0.527, (-49.698, 13.523, 17.223)), (' A 111  TYR  CE1', ' E 440  ASN  HB2', -0.527, (-36.254, 23.604, -7.899)), (' A 133  PRO  HB3', ' A 159  TYR  HB3', -0.523, (-33.895, 25.709, 44.969)), (' H 123  PRO  HB3', ' H 149  TYR  HB3', -0.521, (-49.058, 68.614, -56.656)), (' A  34  MET  HB3', ' A  79  LEU HD22', -0.511, (-21.386, 26.59, 9.854)), (' A  98  LYS  NZ ', ' A 115  ASP  OD2', -0.499, (-26.443, 19.047, 2.992)), (' B  93  TYR  HA ', ' B 102  VAL  HA ', -0.498, (-34.202, 33.363, 4.237)), (' E 365  TYR  CD2', ' E 387  LEU  HB3', -0.495, (-32.565, 3.611, -27.955)), (' H  40  ALA  HB3', ' H  43  LYS  HB2', -0.492, (-50.967, 53.21, -40.183)), (' A  32  TYR  CE1', ' A 101  ASP  HB2', -0.492, (-23.282, 21.49, -1.249)), (' L  65  SER  OG ', ' L  72  THR  OG1', -0.49, (-42.515, 51.921, -13.914)), (' B 115  GLN  HB2', ' B 116  PRO  HD2', -0.49, (-58.19, 8.207, 25.042)), (' E 350  VAL HG22', ' E 422  ASN  HB3', -0.49, (-25.769, 27.27, -28.419)), (' A  30  SER  O  ', ' A  53  TYR  HB2', -0.485, (-16.649, 26.419, 0.734)), (' H 169  THR HG23', ' H 184  SER  HB2', -0.484, (-46.645, 73.817, -46.545)), (' E 365  TYR  HD2', ' E 387  LEU  HB3', -0.483, (-33.075, 3.596, -28.278)), (' H 156  VAL HG22', ' H 202  VAL HG22', -0.482, (-44.107, 73.838, -51.959)), (' B  41  LEU HD23', ' B  86  ALA  HB2', -0.479, (-41.945, 15.551, 16.171)), (' L 166  GLN  HG3', ' L 173  TYR  CZ ', -0.477, (-51.769, 71.288, -29.981)), (' E 339  GLY  O  ', ' E 343  ASN  HB2', -0.473, (-27.657, 11.574, -13.862)), (' A   6  GLU  HA ', ' A  22  CYS  HA ', -0.472, (-20.125, 22.648, 17.38)), (' H  29  VAL HG13', ' H  34  MET  HG3', -0.471, (-28.079, 45.437, -42.649)), (' H 147  LYS  NZ ', ' H 175  GLN  OE1', -0.471, (-58.364, 71.433, -54.684)), (' C   1  NAG  H62', ' C   2  NAG  C7 ', -0.468, (-31.926, 8.185, -6.183)), (' B  33  TYR  CD1', ' B  93  TYR  HB2', -0.467, (-34.702, 33.631, -0.769)), (' B  24  GLY  CA ', ' B  28  ASN HD21', -0.466, (-44.168, 35.725, 3.123)), (' A 115  ASP  N  ', ' A 115  ASP  OD1', -0.465, (-29.052, 20.634, 5.557)), (' H  82  MET  HB3', ' H  85  LEU HD21', -0.464, (-43.839, 45.724, -52.283)), (' L  16  GLY  HA2', ' L  77  SER  HB2', -0.461, (-42.522, 69.748, -15.197)), (' A 149  THR  N  ', ' A 200  SER  HG ', -0.46, (-57.121, 9.047, 52.152)), (' E 396  TYR  HB2', ' E 514  SER  HB2', -0.46, (-24.034, 12.028, -30.99)), (' A  52  TRP  NE1', ' A  57  ASN  HB2', -0.458, (-21.086, 36.077, 1.543)), (' H  90  THR HG23', ' H 114  THR  HA ', -0.458, (-48.528, 54.475, -50.995)), (' H 163  LEU HD21', ' H 186  VAL HG21', -0.453, (-41.9, 83.203, -43.472)), (' H  93  TYR  O  ', ' H 110  GLY  HA2', -0.453, (-37.899, 53.942, -44.913)), (' E 383  SER  HB3', ' E 386  LYS  HB2', -0.452, (-38.495, 2.352, -33.371)), (' E 502  GLY  O  ', ' E 506  GLN  HG3', -0.447, (-39.971, 31.083, -17.698)), (' A  52  TRP  CZ3', ' A 102  ILE HG12', -0.446, (-22.603, 30.679, -2.172)), (' H  47  TRP  NE1', ' H  50  VAL HG23', -0.441, (-37.734, 42.44, -37.895)), (' H   4  LEU HD21', ' H  27  PHE  CZ ', -0.436, (-26.695, 51.36, -40.555)), (' L 185  ASP  OD1', ' L 188  LYS  NZ ', -0.434, (-72.65, 78.516, -58.228)), (' A  52  TRP  HZ3', ' A 102  ILE HG12', -0.433, (-22.276, 31.001, -2.221)), (' A  91  THR HG23', ' A 124  THR  HA ', -0.433, (-29.743, 31.206, 28.639)), (' A 211  ASN  ND2', ' A 222  ASP  OD2', -0.432, (-33.179, 13.448, 52.394)), (' A  52  TRP  HZ3', ' A 102  ILE HG21', -0.431, (-21.453, 30.887, -2.964)), (' B  33  TYR  CD1', ' E 445  VAL HG21', -0.431, (-35.105, 33.402, -3.358)), (' H 199  ILE HG12', ' H 214  LYS  HG2', -0.428, (-40.318, 84.755, -55.917)), (' L 120  PRO  HB3', ' L 131  SER  H  ', -0.427, (-59.413, 79.895, -55.378)), (' H 146  VAL  O  ', ' H 182  LEU  N  ', -0.425, (-51.958, 71.392, -51.398)), (' B  57  PRO  HD2', ' B  60  VAL HG21', -0.425, (-37.418, 14.756, 3.387)), (' L   2  ILE  O  ', ' L  97  THR HG21', -0.423, (-47.358, 40.818, -30.884)), (' L 120  PRO  HG3', ' L 130  ALA  HB1', -0.422, (-61.544, 81.738, -56.017)), (' A 106  TYR  CD2', ' E 441  LEU HD22', -0.421, (-30.273, 21.695, -8.648)), (' H  11  LEU HD21', ' H 118  ALA  O  ', -0.421, (-50.115, 56.674, -59.921)), (' A  52  TRP  HE1', ' A  57  ASN  HB2', -0.42, (-21.088, 36.577, 1.639)), (' L 145  LYS  HB3', ' L 197  THR  OG1', -0.418, (-66.736, 78.187, -33.412)), (' A  52  TRP  CD1', ' A  57  ASN  HB2', -0.418, (-20.509, 35.901, 1.785)), (' A  29  PHE  O  ', ' A  72  ARG  NH2', -0.417, (-17.015, 24.514, 4.373)), (' A  52  TRP  HD1', ' A  57  ASN  O  ', -0.412, (-19.845, 35.347, 3.604)), (' L  50  ASP  OD1', ' L  91  TYR  OH ', -0.412, (-33.429, 44.782, -24.461)), (' B 201  GLN  HG2', ' B 210  GLU  HG3', -0.411, (-62.376, 28.3, 40.757)), (' B  93  TYR  CD2', ' B 102  VAL HG12', -0.411, (-32.225, 31.919, 3.161)), (' L 107  LYS  HA ', ' L 140  TYR  OH ', -0.409, (-53.36, 72.359, -23.105)), (' A 179  THR HG23', ' A 192  LEU HD21', -0.408, (-39.724, 18.677, 41.686)), (' E 420  ASP  OD2', ' H  56  SER  OG ', -0.407, (-29.691, 32.082, -39.121)), (' L  30  SER  OG ', ' L  31  ASN  N  ', -0.404, (-37.394, 40.835, -19.163))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
