# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  32 ', 'PHE', 0.01957532160239387, (207.21499999999995, 151.198, 151.393)), ('A', ' 445 ', 'VAL', 0.06766540659311729, (145.811, 145.12500000000006, 91.675)), ('A', ' 447 ', 'GLY', 0.03635988656403973, (144.33, 149.366, 94.177)), ('A', ' 473 ', 'TYR', 0.018002468933869073, (124.29099999999997, 149.57900000000006, 113.638)), ('A', ' 571 ', 'ASP', 0.030439453798816806, (158.87899999999993, 138.826, 147.771)), ('B', '  98 ', 'SER', 0.02717879608115635, (125.411, 109.97700000000003, 138.247)), ('B', ' 489 ', 'TYR', 0.03890843321637479, (166.04299999999995, 196.022, 105.142)), ('B', ' 491 ', 'PRO', 0.0934935747066417, (164.523, 190.68, 107.905)), ('B', ' 571 ', 'ASP', 0.037059232614707206, (141.938, 175.567, 147.019)), ('B', ' 604 ', 'THR', 0.03317641537431488, (135.073, 134.868, 174.499)), ('B', ' 640 ', 'SER', 0.03641671546986162, (117.087, 148.966, 168.562)), ('C', '  97 ', 'LYS', 0.04451608473858307, (130.93999999999994, 215.84, 138.454)), ('C', ' 110 ', 'LEU', 0.03421173266351192, (150.246, 207.048, 119.65400000000001)), ('C', ' 457 ', 'ARG', 0.002783918875115002, (183.781, 140.935, 115.244)), ('C', ' 604 ', 'THR', 0.03340743263447135, (150.94599999999994, 199.798, 171.96)), ('C', ' 639 ', 'GLY', 0.05498802837557329, (168.306, 205.917, 160.98))]
data['omega'] = [('A', ' 111 ', 'ASP', None, (207.155, 148.372, 116.905))]
data['rota'] = [('A', ' 109 ', 'THR', 0.29929691178781875, (204.639, 146.149, 120.099)), ('A', ' 318 ', 'PHE', 0.19783048384970492, (182.14, 141.021, 155.196)), ('A', ' 366 ', 'SER', 0.15357742506995647, (168.171, 138.744, 117.742)), ('A', ' 422 ', 'ASN', 0.23945867994766304, (138.578, 146.757, 116.555)), ('A', ' 445 ', 'VAL', 0.2395795472379599, (145.811, 145.12500000000006, 91.675)), ('A', ' 458 ', 'LYS', 0.007852532043376121, (128.28, 150.599, 119.435)), ('A', ' 501 ', 'ASN', 0.22695485464560647, (148.746, 156.272, 98.20600000000002)), ('A', ' 760 ', 'CYS', 0.07322877645492554, (161.24, 176.345, 154.453)), ('A', ' 886 ', 'TRP', 0.015404953035620613, (170.812, 176.694, 203.314)), ('A', ' 907 ', 'ASN', 0.10602382429374256, (174.30599999999995, 166.75, 212.23600000000002)), ('A', '1094 ', 'VAL', 0.18565062159712026, (173.605, 150.897, 219.23900000000003)), ('B', ' 122 ', 'ASN', 0.21594557306910517, (132.888, 113.696, 130.266)), ('B', ' 346 ', 'ARG', 0.004730823019286562, (144.20699999999994, 182.865, 103.271)), ('B', ' 353 ', 'TRP', 0.1938949820895619, (148.99699999999996, 185.45, 111.826)), ('B', ' 402 ', 'ILE', 0.2857473098744507, (155.067, 177.974, 107.518)), ('B', ' 421 ', 'TYR', 0.07946154546414136, (160.675, 186.289, 116.289)), ('B', ' 443 ', 'SER', 0.1582716906771774, (152.405, 176.633, 96.821)), ('B', ' 456 ', 'PHE', 0.11705959031536228, (166.116, 188.348, 113.51200000000001)), ('B', ' 461 ', 'LEU', 0.24403309484164046, (158.84999999999994, 188.583, 120.007)), ('B', ' 574 ', 'ASP', 0.15323075128782354, (133.199, 175.51, 148.379)), ('B', ' 634 ', 'ARG', 0.21885310718934817, (123.022, 146.704, 157.863)), ('B', ' 638 ', 'THR', 0.13532858975508547, (119.363, 150.319, 161.661)), ('B', ' 760 ', 'CYS', 0.04881918721366674, (173.975, 155.639, 154.616)), ('B', ' 907 ', 'ASN', 0.0924968979609595, (162.99799999999993, 154.104, 213.142)), ('B', '1082 ', 'CYS', 0.21817081383618758, (147.59999999999994, 172.746, 230.802)), ('C', ' 112 ', 'SER', 0.16764164933904094, (147.852, 205.05, 114.93200000000002)), ('C', ' 307 ', 'THR', 0.0755395872596378, (148.904, 192.841, 164.526)), ('C', ' 382 ', 'VAL', 0.26480564349527086, (174.29, 171.269, 126.98700000000002)), ('C', ' 472 ', 'ILE', 0.1330440017951325, (188.906, 137.954, 108.537)), ('C', ' 474 ', 'GLN', 0.294767478794845, (185.97699999999995, 133.393, 111.73400000000001)), ('C', ' 588 ', 'THR', 0.10358659061653272, (184.816, 185.965, 150.251)), ('C', ' 603 ', 'ASN', 0.2349779148464516, (148.722, 197.245, 170.065)), ('C', ' 622 ', 'VAL', 0.12374430700101174, (173.329, 198.975, 150.927)), ('C', ' 641 ', 'ASN', 0.023859944867557697, (171.121, 206.33, 165.538)), ('C', ' 738 ', 'CYS', 0.03807142064875275, (145.65699999999995, 159.3, 155.591)), ('C', ' 907 ', 'ASN', 0.13350231374794727, (157.477, 170.195, 213.163))]
data['cbeta'] = [('A', ' 454 ', 'ARG', ' ', 0.25793488105750745, (133.947, 147.648, 112.515))]
data['probe'] = [(' B 391  CYS  HB2', ' B 525  CYS  HA ', -0.609, (133.212, 174.674, 127.23)), (' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.538, (162.19, 131.627, 127.576)), (' B 455  LEU HD22', ' B 473  TYR  CD1', -0.481, (163.025, 193.846, 113.434)), (' A 533  LEU HD21', ' A 535  LYS  HE3', -0.425, (170.509, 120.078, 142.773)), (' C 490  PHE  CG ', ' C 491  PRO  HD2', -0.424, (188.129, 141.535, 104.816)), (' C 342  PHE  HB2', ' C1306  NAG  H82', -0.405, (181.013, 173.35, 109.434))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
