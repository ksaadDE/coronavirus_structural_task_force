# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 121 ', 'ALA', 0.013690079746587848, (146.48499999999999, 220.41700000000006, 137.29600000000005)), ('A', ' 625 ', 'GLN', 0.014065278083038365, (190.226, 218.74799999999996, 164.40000000000006)), ('A', ' 628 ', 'PRO', 0.00301368, (185.203, 220.56599999999997, 167.47600000000006)), ('A', ' 632 ', 'VAL', 0.035281278318477875, (183.398, 225.488, 174.36500000000007)), ('B', ' 493 ', 'SER', 0.01600586635720496, (191.408, 193.956, 114.93400000000003)), ('B', ' 830 ', 'PHE', 0.047800295601756124, (198.583, 159.06, 198.503))]
data['omega'] = []
data['rota'] = [('A', ' 624 ', 'ASP', 0.10096874840978878, (188.613, 222.155, 163.29200000000006)), ('A', ' 625 ', 'GLN', 0.04775361017200873, (190.226, 218.74799999999996, 164.40000000000006)), ('A', ' 626 ', 'LEU', 0.007584737003050653, (187.003, 216.567, 164.08200000000005)), ('A', ' 627 ', 'THR', 0.17114282493905178, (186.373, 216.88799999999992, 167.88300000000007)), ('A', ' 628 ', 'PRO', 0.0, (185.203, 220.56599999999997, 167.47600000000006)), ('A', ' 629 ', 'THR', 0.0013599335943581536, (181.49, 220.979, 166.522)), ('B', ' 446 ', 'TYR', 0.04808479883192606, (184.24, 195.45, 113.34)), ('B', ' 449 ', 'LEU', 0.05419294037310664, (186.109, 201.282, 119.69100000000002)), ('B', ' 469 ', 'ILE', 0.14677365239065504, (194.716, 212.276, 122.217)), ('B', ' 485 ', 'CYS', 0.09886698280952994, (199.936, 211.56700000000006, 121.34100000000004)), ('B', ' 489 ', 'LEU', 0.007763130529504619, (190.918, 203.35, 120.85300000000001)), ('B', ' 491 ', 'SER', 0.2325703550703058, (192.802, 198.605, 118.091)), ('B', ' 492 ', 'TYR', 0.012209724300336018, (190.16500000000002, 195.861, 118.09300000000002))]
data['cbeta'] = [('A', ' 625 ', 'GLN', ' ', 0.2961485595825037, (190.86900000000003, 219.09599999999998, 165.749)), ('A', ' 628 ', 'PRO', ' ', 0.3640280196330784, (186.123, 220.97699999999995, 166.33500000000006)), ('B', ' 446 ', 'TYR', ' ', 0.25476627349392633, (182.937, 194.724, 113.67200000000003)), ('B', ' 448 ', 'TYR', ' ', 0.4751516731757591, (185.006, 201.567, 115.77600000000002)), ('B', ' 486 ', 'TYR', ' ', 0.3586410323902594, (197.622, 207.321, 120.44700000000005)), ('B', ' 492 ', 'TYR', ' ', 0.2715586494437902, (188.645, 196.006, 118.14300000000001))]
data['probe'] = [(' A 628  PRO  C  ', ' A 630  TRP  H  ', -0.787, (182.733, 220.892, 168.277)), (' A 628  PRO  C  ', ' A 630  TRP  N  ', -0.749, (182.971, 221.504, 168.468)), (' A 626  LEU  C  ', ' A 628  PRO  HD3', -0.748, (185.42, 217.41, 165.041)), (' B 863  THR  O  ', ' B 866  MET  N  ', -0.73, (203.211, 167.262, 208.535)), (' A 127  LYS  NZ ', ' A 129  CYS  SG ', -0.729, (160.879, 214.432, 127.064)), (' A 863  THR HG22', ' A 866  MET  HE2', -0.727, (157.011, 181.752, 200.789)), (' A 622  HIS  O  ', ' A 628  PRO  HB2', -0.717, (185.839, 222.985, 165.572)), (' B 470  TYR  O  ', ' B 485  CYS  HB3', -0.703, (198.253, 213.111, 123.492)), (' A 619  VAL  O  ', ' A 622  HIS  ND1', -0.674, (187.019, 226.581, 169.569)), (' A 760  LEU  HG ', ' A1005  VAL HG21', -0.664, (178.778, 180.162, 180.876)), (' A 195  TYR  OH ', ' B 391  ASN  ND2', -0.66, (168.43, 199.424, 143.514)), (' B 447  ASN  HB3', ' B 492  TYR  HD2', -0.653, (186.195, 196.422, 118.747)), (' B 617  VAL HG13', ' B 621  ILE HD11', -0.641, (152.546, 170.588, 174.615)), (' A 816  GLU  O  ', ' A 819  LEU  N  ', -0.64, (157.152, 199.841, 201.965)), (' B 759  GLN  HG2', ' B 760  LEU HD12', -0.637, (199.767, 183.821, 180.61)), (' B 348  TYR  HB2', ' B 464  ASP  HB3', -0.634, (185.805, 203.986, 127.842)), (' A 663  ILE HD11', ' A 669  ALA  HB2', -0.634, (183.939, 220.907, 189.124)), (' A 628  PRO  HD2', ' A 629  THR  H  ', -0.633, (183.054, 219.319, 166.136)), (' B 355  ILE  HB ', ' B 392  VAL HG23', -0.632, (166.677, 193.118, 136.232)), (' B 354  ARG  NH1', ' B 355  ILE  O  ', -0.632, (164.787, 195.91, 137.895)), (' A1022  ALA  O  ', ' A1024  THR  N  ', -0.631, (174.722, 187.736, 208.825)), (' A 641  GLN  NE2', ' A 642  THR  O  ', -0.619, (195.921, 220.62, 185.206)), (' B 447  ASN  HB3', ' B 492  TYR  CD2', -0.614, (186.292, 196.176, 118.736)), (' B 641  GLN  NE2', ' B 645  GLY  O  ', -0.61, (152.36, 175.235, 186.672)), (' B 309  ILE HG22', ' B 661  ILE HD11', -0.607, (166.49, 168.713, 193.677)), (' A 739  ILE  O  ', ' A 997  ARG  NH1', -0.605, (172.897, 181.886, 166.702)), (' B 639  VAL HG12', ' B 648  ILE HG22', -0.605, (150.877, 166.924, 184.71)), (' A 627  THR  N  ', ' A 628  PRO  HD3', -0.603, (186.491, 217.561, 165.868)), (' B 967  PHE  O  ', ' B 992  ARG  NH1', -0.603, (187.846, 173.787, 163.746)), (' B 858  LEU HD12', ' B 859  PRO  HD2', -0.603, (205.45, 169.403, 194.039)), (' B 399  ILE HD11', ' B 415  ILE HG12', -0.602, (189.258, 196.138, 127.787)), (' A 140  ASP  HB3', ' A 242  HIS  HD1', -0.601, (149.48, 231.811, 132.588)), (' B 389  PHE  N  ', ' B 521  VAL  O  ', -0.6, (163.772, 189.579, 143.595)), (' A 116  LEU HD21', ' A 118  VAL HG13', -0.588, (157.479, 220.573, 133.557)), (' A 638  ASN  N  ', ' A 651  GLU  OE2', -0.583, (185.51, 231.444, 184.03)), (' B 990  ILE  O  ', ' B 994  ILE HG12', -0.582, (197.55, 176.203, 166.455)), (' B 480  VAL HG23', ' B 485  CYS  H  ', -0.578, (201.051, 212.76, 119.403)), (' B 348  TYR  O  ', ' B 464  ASP  N  ', -0.578, (183.732, 204.336, 129.497)), (' A  65  PHE  HE2', ' A  82  LEU HD11', -0.565, (168.235, 230.153, 145.685)), (' A  34  ARG  NH1', ' A 216  GLY  O  ', -0.565, (158.966, 222.484, 163.085)), (' A  75  LYS  HD2', ' A 255  TRP  HD1', -0.563, (157.873, 240.013, 133.15)), (' A 160  ASN  OD1', ' C   1  NAG  N2 ', -0.561, (168.645, 210.148, 121.577)), (' A 639  VAL HG12', ' A 648  ILE HG22', -0.561, (188.663, 227.25, 179.896)), (' A 129  CYS  HB2', ' A 131  PHE  CE1', -0.561, (162.845, 216.945, 128.229)), (' B 620  ALA  HA ', ' B 631  ARG HH21', -0.559, (148.19, 162.949, 175.335)), (' A1012  ALA  HA ', ' A1015  ILE HG22', -0.558, (177.144, 187.19, 193.836)), (' A 641  GLN  NE2', ' A 645  GLY  O  ', -0.551, (195.204, 221.432, 184.087)), (' B 756  PHE  HA ', ' B 759  GLN HE22', -0.55, (201.351, 184.692, 177.088)), (' A 819  LEU  O  ', ' A 823  VAL  N  ', -0.546, (159.533, 200.27, 198.173)), (' A  95  LYS  HD3', ' A 182  LYS  HG2', -0.546, (148.199, 232.384, 152.767)), (' A1003  THR  O  ', ' A1007  GLN  HG2', -0.546, (181.189, 188.702, 182.084)), (' A 100  ARG  HD3', ' A 139  LEU HD23', -0.546, (152.901, 225.491, 136.943)), (' B 487  PHE  CD2', ' B 488  PRO  HD2', -0.543, (191.025, 208.457, 121.394)), (' D   1  NAG  H3 ', ' D   1  NAG  H83', -0.542, (146.896, 216.434, 132.655)), (' B 397  PHE  HB3', ' B 507  VAL  H  ', -0.541, (180.478, 191.793, 128.332)), (' A 103  ILE HG13', ' A 236  GLN  HB2', -0.541, (166.621, 224.213, 137.406)), (' A 154  VAL HG23', ' A 155  TYR  HD1', -0.537, (159.882, 223.597, 129.031)), (' B 969  ALA  HA ', ' B 992  ARG HH22', -0.536, (189.272, 172.401, 160.877)), (' A 823  VAL  O  ', ' A 826  ALA  N  ', -0.531, (161.497, 200.132, 192.582)), (' A 139  LEU  O  ', ' A 241  LEU  N  ', -0.529, (153.41, 231.993, 136.297)), (' B 619  VAL  O  ', ' B 631  ARG  NE ', -0.527, (150.881, 162.301, 175.959)), (' B 831  ILE  O  ', ' B 832  LYS  HG2', -0.527, (203.969, 160.245, 196.573)), (' B 983  PRO  O  ', ' B 986  ALA  N  ', -0.521, (198.642, 174.673, 155.868)), (' A  81  VAL  HA ', ' A 236  GLN HE22', -0.518, (171.45, 226.993, 139.177)), (' A 613  ASN  N  ', ' A 616  GLU  OE2', -0.517, (198.08, 220.713, 177.761)), (' B 851  LYS  HG3', ' B 852  PHE  H  ', -0.514, (201.539, 162.387, 183.497)), (' B 459  LYS  HE2', ' B 462  GLU  HG3', -0.513, (181.388, 208.197, 137.009)), (' A  53  ASP  HB3', ' A  55  PHE  CE2', -0.513, (170.25, 210.83, 158.578)), (' A 737  MET  HE1', ' B 589  PHE  CZ ', -0.513, (162.918, 180.04, 174.067)), (' B 767  ILE  O  ', ' B 771  GLN  HG2', -0.513, (197.764, 177.981, 196.255)), (' A 628  PRO  HD2', ' A 629  THR  N  ', -0.508, (183.653, 219.768, 166.389)), (' A 863  THR  H  ', ' A 866  MET  HE2', -0.507, (158.301, 181.408, 200.269)), (' A 137  PRO  HB2', ' A 154  VAL HG12', -0.501, (160.725, 227.759, 132.635)), (' A 987  GLU  OE2', ' A 988  VAL HG13', -0.499, (184.471, 176.133, 156.55)), (' A 194  GLY  HA2', ' A 229  GLY  HA2', -0.498, (171.707, 207.253, 140.168)), (' B 441  LYS  HE2', ' B 446  TYR  HB2', -0.498, (182.622, 193.147, 113.421)), (' B 315  PHE  HZ ', ' B 612  VAL HG11', -0.496, (156.057, 174.61, 178.537)), (' B 616  GLU  N  ', ' B 616  GLU  OE1', -0.496, (147.461, 175.911, 178.648)), (' A 632  VAL HG13', ' A 648  ILE HD12', -0.493, (186.555, 224.632, 176.393)), (' A 100  ARG  O  ', ' A 238  LEU  HB2', -0.493, (158.87, 226.053, 138.739)), (' B 817  ASP  OD1', ' B 818  LEU  N  ', -0.492, (189.775, 158.056, 213.147)), (' B 339  PHE  CE1', ' B 508  VAL  HB ', -0.492, (175.537, 190.087, 129.483)), (' A 127  LYS  NZ ', ' A 161  CYS  SG ', -0.49, (160.607, 213.997, 126.722)), (' A 299  THR HG23', ' A 300  LEU HD12', -0.488, (176.438, 208.767, 178.441)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.488, (166.381, 236.136, 153.667)), (' A 287  ASP  OD1', ' A 288  CYS  N  ', -0.487, (174.133, 215.823, 167.266)), (' B 565  ASP  OD1', ' B 569  THR  N  ', -0.484, (163.784, 192.334, 166.791)), (' A 110  SER  OG ', ' A 132  GLN  OE1', -0.483, (169.516, 223.143, 123.714)), (' A 816  GLU  O  ', ' A 820  PHE  N  ', -0.483, (157.397, 198.961, 201.277)), (' A 141  HIS  HD1', ' A 241  LEU  HA ', -0.482, (150.943, 233.217, 137.668)), (' A 284  ASP  N  ', ' A 284  ASP  OD1', -0.48, (160.406, 213.482, 170.151)), (' A 982  ASP  N  ', ' A 982  ASP  OD1', -0.475, (177.217, 178.598, 149.859)), (' A 686  SER  OG ', ' A 687  GLN  N  ', -0.474, (172.291, 232.525, 189.001)), (' A  21  ARG  H  ', ' A  21  ARG  HD3', -0.474, (167.279, 242.351, 135.238)), (' A  96  SER  O  ', ' A  98  ILE HG13', -0.472, (150.699, 230.5, 145.513)), (' B 969  ALA  N  ', ' B 992  ARG HH12', -0.468, (188.502, 172.279, 162.856)), (' A  99  ILE  O  ', ' A 100  ARG  HG3', -0.468, (153.995, 225.642, 141.882)), (' A 759  GLN  HA ', ' A 762  ARG HH11', -0.467, (179.802, 172.805, 184.346)), (' A 272  PHE  CD1', ' A 287  ASP  HA ', -0.467, (171.076, 215.203, 165.611)), (' B 836  ASP  N  ', ' B 836  ASP  OD1', -0.467, (207.002, 153.974, 190.072)), (' B 492  TYR  HA ', ' B 492  TYR  HD1', -0.462, (190.429, 195.084, 119.584)), (' A 628  PRO  O  ', ' A 630  TRP  N  ', -0.461, (183.291, 221.96, 167.964)), (' B 349  ALA  HB1', ' B 463  ARG HH21', -0.46, (178.385, 204.544, 126.793)), (' B 613  ASN  HB3', ' B 616  GLU  OE1', -0.459, (148.41, 177.152, 179.873)), (' A 643  ARG  HA ', ' A 643  ARG  HD3', -0.455, (198.027, 218.953, 188.132)), (' B 400  ARG  O  ', ' B 502  HIS  ND1', -0.455, (188.938, 189.097, 122.039)), (' A  75  LYS  HD2', ' A 255  TRP  CD1', -0.453, (157.653, 239.327, 132.852)), (' B 756  PHE  HA ', ' B 759  GLN  NE2', -0.45, (200.788, 185.017, 177.644)), (' A 734  ASP  OD2', ' B 314  ASN  ND2', -0.447, (166.586, 174.969, 176.616)), (' B1016  ARG  HB2', ' B1016  ARG  NH1', -0.447, (193.032, 183.287, 198.468)), (' B 829  GLY  O  ', ' B 833  GLN  NE2', -0.447, (199.36, 158.792, 194.494)), (' B 428  GLY  HA2', ' B 512  PHE  CE1', -0.447, (173.906, 188.973, 141.894)), (' B 369  ALA  HB3', ' B 371  PHE  CE2', -0.445, (174.437, 180.133, 125.714)), (' A 141  HIS  CD2', ' A 142  LYS  HG2', -0.445, (146.778, 233.083, 137.532)), (' B 369  ALA  HB3', ' B 371  PHE  CZ ', -0.444, (174.691, 180.396, 125.243)), (' B 492  TYR  O  ', ' B 493  SER  C  ', -0.444, (191.004, 193.194, 116.911)), (' A 137  PRO  HB3', ' A 154  VAL  HA ', -0.444, (161.441, 227.801, 130.925)), (' B 977  ILE HG23', ' B 981  LEU HD12', -0.443, (195.607, 168.995, 158.559)), (' A 145  LYS  H  ', ' A 145  LYS  HD2', -0.443, (144.059, 232.375, 127.635)), (' B 991  ASP  O  ', ' B 995  THR HG23', -0.443, (194.586, 179.336, 166.634)), (' A 184  LEU  O  ', ' A 184  LEU HD23', -0.442, (155.59, 223.468, 155.738)), (' A  65  PHE  CE2', ' A  82  LEU HD11', -0.439, (168.243, 230.145, 145.94)), (' B 755  SER  O  ', ' B 759  GLN  NE2', -0.439, (201.872, 185.345, 177.906)), (' A 107  THR  OG1', ' A 109  ASP  OD1', -0.436, (174.891, 221.5, 130.037)), (' A 613  ASN  OD1', ' A 614  CYS  N  ', -0.436, (197.82, 224.443, 180.143)), (' B 352  ARG  HE ', ' B 395  ASP  HB3', -0.435, (176.074, 197.411, 133.307)), (' A 630  TRP  HB3', ' A 632  VAL HG23', -0.434, (183.578, 223.073, 172.263)), (' A 658  GLU  CD ', ' A 658  GLU  H  ', -0.433, (180.219, 221.105, 202.528)), (' B 615  THR  OG1', ' B 616  GLU  OE1', -0.433, (146.204, 175.83, 179.574)), (' B 958  THR  O  ', ' B 962  GLN  HG2', -0.432, (187.678, 170.488, 178.596)), (' A  55  PHE  HB2', ' A 272  PHE  HE2', -0.432, (171.445, 214.737, 160.695)), (' B 554  LYS  NZ ', ' B 583  ASP  OD1', -0.431, (152.224, 192.915, 166.492)), (' B 656  SER  HB3', ' B 695  SER  HB3', -0.43, (153.618, 173.083, 207.607)), (' B 386  ASP  O  ', ' B 525  LYS  NZ ', -0.43, (163.105, 182.131, 147.126)), (' B 389  PHE  HB2', ' B 521  VAL  HB ', -0.43, (164.854, 189.784, 141.406)), (' A 866  MET  HB2', ' A 866  MET  HE3', -0.427, (158.822, 181.703, 203.346)), (' B 770  GLU  HA ', ' B 773  LYS  NZ ', -0.427, (201.208, 182.507, 199.573)), (' A 970  ILE HD12', ' A 980  ARG HH22', -0.427, (176.085, 187.736, 152.043)), (' B 821  ASN  O  ', ' B 824  THR HG22', -0.426, (189.394, 157.477, 204.275)), (' A 627  THR  N  ', ' A 628  PRO  CD ', -0.425, (186.009, 218.114, 166.194)), (' B 418  TYR  O  ', ' B 454  ARG  HG2', -0.425, (190.796, 204.411, 132.728)), (' B 329  ILE  HB ', ' B 359  VAL HG23', -0.425, (156.734, 187.642, 138.383)), (' B 966  LYS  HE3', ' B 971  SER  HA ', -0.424, (189.761, 165.984, 163.188)), (' B 505  TYR  O  ', ' B 507  VAL HG23', -0.423, (182.837, 189.658, 129.096)), (' A 767  ILE  O  ', ' A 771  GLN  OE1', -0.422, (172.832, 181.627, 193.259)), (' A 226  LEU  HA ', ' A 227  PRO  HD3', -0.42, (162.157, 206.046, 140.689)), (' A  48  LEU HD12', ' A 273  LEU HD21', -0.42, (166.357, 208.361, 172.379)), (' A 830  PHE  HD2', ' A 832  LYS  H  ', -0.418, (156.054, 187.633, 187.206)), (' A 778  VAL  C  ', ' A 781  GLN HE22', -0.417, (169.409, 184.635, 208.942)), (' B 600  ASN  OD1', ' B 601  THR  N  ', -0.416, (167.054, 154.116, 196.825)), (' A  97  ASN  HB3', ' A 100  ARG HH22', -0.416, (149.04, 226.617, 142.12)), (' A 951  HIS  HB3', ' A1011  ARG  NH2', -0.416, (176.368, 194.629, 187.112)), (' A 632  VAL  O  ', ' A 632  VAL HG12', -0.416, (184.901, 226.891, 175.25)), (' B 415  ILE  H  ', ' B 415  ILE HD12', -0.415, (192.137, 195.744, 130.477)), (' A 978  PHE  CE1', ' A 990  ILE HD11', -0.414, (174.074, 177.892, 157.954)), (' A 740  CYS  HB3', ' A 746  CYS  HB3', -0.414, (171.152, 176.864, 164.904)), (' A 756  PHE  HA ', ' A 759  GLN HE22', -0.413, (182.369, 173.719, 177.536)), (' A 833  GLN  NE2', ' A 848  CYS  HB2', -0.413, (156.583, 189.418, 178.419)), (' B 535  CYS  HB2', ' B 587  CYS  HB3', -0.413, (153.549, 177.152, 167.463)), (' B 759  GLN  N  ', ' B 759  GLN  OE1', -0.412, (202.706, 183.685, 180.648)), (' A 844  ARG  O  ', ' A 848  CYS  HB3', -0.412, (157.237, 191.647, 176.196)), (' B 374  PHE  HD1', ' B 431  ILE HG13', -0.412, (177.096, 183.471, 135.355)), (' B 450  TYR  HB3', ' B 491  SER  H  ', -0.412, (190.97, 199.908, 119.968)), (' B 400  ARG  NH2', ' B 491  SER  O  ', -0.412, (193.349, 196.21, 119.657)), (' B 749  LEU  HG ', ' B 990  ILE HD11', -0.41, (201.672, 176.03, 162.27)), (' B 753  TYR  OH ', ' B 991  ASP  OD1', -0.409, (196.686, 181.274, 165.741)), (' B 405  ARG  NE ', ' B 405  ARG  O  ', -0.409, (191.649, 187.279, 135.992)), (' A 101  GLY  HA2', ' A 117  ILE  O  ', -0.409, (158.598, 221.701, 138.691)), (' B 495  ARG  HD3', ' B 498  TYR  HB2', -0.408, (192.941, 186.689, 114.651)), (' B1000  SER  O  ', ' B1003  THR  OG1', -0.408, (188.974, 177.229, 179.913)), (' A  37  TYR  HB3', ' A 220  LEU  HB2', -0.407, (161.962, 213.981, 156.5)), (' B 344  PHE  CD1', ' B 506  ARG  HG2', -0.407, (177.919, 190.911, 123.398)), (' A  93  ILE  O  ', ' A  93  ILE HG22', -0.406, (153.587, 231.338, 154.409)), (' A  95  LYS  HE3', ' A 179  GLY  HA2', -0.406, (144.11, 232.635, 153.116)), (' B 392  VAL HG12', ' B 512  PHE  HB3', -0.406, (169.492, 191.976, 141.8)), (' B 388  CYS  SG ', ' B 523  GLY  N  ', -0.406, (160.781, 185.395, 143.625)), (' B 428  GLY  HA2', ' B 512  PHE  HE1', -0.406, (173.83, 189.121, 141.396)), (' A 628  PRO  CD ', ' A 629  THR  N  ', -0.405, (184.14, 219.673, 166.327)), (' B 489  LEU  O  ', ' B 490  ARG  HB2', -0.405, (192.117, 203.229, 117.899)), (' A 127  LYS  HG2', ' A 129  CYS  SG ', -0.405, (161.142, 214.083, 129.384)), (' A 201  LYS  HB3', ' A 220  LEU HD22', -0.404, (157.656, 217.204, 156.296)), (' A 847  ILE  O  ', ' A 850  GLN  HG2', -0.403, (162.095, 189.083, 179.008)), (' B 866  MET  N  ', ' B 866  MET  SD ', -0.401, (204.743, 167.646, 209.121)), (' B 452  LEU HD13', ' B 491  SER  OG ', -0.4, (195.243, 200.065, 120.004))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
