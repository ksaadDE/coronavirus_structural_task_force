# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 491 ', 'PRO', 0.08582935881219016, (243.788, 202.02700000000002, 294.6500000000001)), ('a', '  51 ', 'ILE', 0.04984605748844399, (234.192, 203.82300000000004, 310.842))]
data['omega'] = [('A', ' 503 ', 'VAL', None, (230.662, 179.49000000000007, 287.404)), ('a', ' 151 ', 'PRO', None, (216.032, 209.78699999999995, 339.243)), ('a', ' 153 ', 'PRO', None, (216.218, 215.276, 335.863)), ('a', ' 193 ', 'PRO', None, (206.878, 238.63199999999998, 356.1490000000001)), ('b', '   8 ', 'PRO', None, (242.659, 233.126, 325.31400000000014)), ('b', ' 101 ', 'PRO', None, (245.072, 210.441, 316.26100000000014)), ('b', ' 114 ', 'ALA', None, (228.649, 244.42200000000003, 332.932)), ('b', ' 146 ', 'PRO', None, (233.042, 238.97499999999994, 338.646))]
data['rota'] = [('A', ' 489 ', 'TYR', 0.001935308879027732, (244.641, 202.807, 300.86900000000014)), ('A', ' 493 ', 'GLN', 0.0, (243.593, 195.257, 294.08)), ('a', '  52 ', 'ASN', 0.017119175704122903, (233.82600000000005, 204.28700000000006, 307.048)), ('a', '  55 ', 'ILE', 0.0, (234.5, 198.70500000000007, 303.279)), ('a', '  58 ', 'THR', 0.20903463283223397, (237.35000000000002, 200.973, 311.937)), ('a', '  59 ', 'THR', 0.047738477932265336, (239.77500000000006, 203.066, 313.937)), ('a', ' 115 ', 'VAL', 0.25000803118380865, (225.51, 205.467, 334.299))]
data['cbeta'] = []
data['probe'] = [(' A 455  LEU  CD1', ' A 493  GLN  OE1', -1.373, (238.373, 196.657, 294.149)), (' A 455  LEU  CD1', ' A 493  GLN  CD ', -1.334, (239.601, 196.589, 294.188)), (' A 455  LEU HD12', ' A 493  GLN  NE2', -1.175, (240.522, 197.046, 295.464)), (' A 455  LEU HD12', ' A 493  GLN  CD ', -1.044, (240.184, 197.107, 294.522)), (' A 455  LEU HD11', ' A 493  GLN  CD ', -1.013, (239.485, 196.09, 294.539)), (' A 455  LEU  CD1', ' A 493  GLN  NE2', -1.011, (239.086, 197.286, 295.635)), (' A 455  LEU HD11', ' A 493  GLN  OE1', -1.006, (239.054, 195.669, 294.315)), (' A 453  TYR  CE1', ' A 493  GLN  HG3', -0.978, (240.277, 195.976, 292.697)), (' A 486  PHE  CG ', ' a  59  THR HG21', -0.819, (240.457, 205.145, 310.121)), (' A 486  PHE  CD1', ' a  59  THR  CG2', -0.684, (240.317, 204.123, 310.665)), (' A 486  PHE  CD1', ' a  59  THR HG22', -0.675, (239.894, 203.666, 310.063)), (' A 486  PHE  CG ', ' a  59  THR  CG2', -0.66, (240.544, 204.463, 310.744)), (' A 490  PHE  CD1', ' A 491  PRO  HD2', -0.646, (247.741, 201.7, 294.848)), (' a  51  ILE  O  ', ' a  51  ILE HG23', -0.599, (231.675, 203.825, 310.032)), (' A 452  LEU HD22', ' A 493  GLN  O  ', -0.597, (245.354, 194.449, 291.679)), (' b 118  PRO  HB3', ' b 144  PHE  HB3', -0.576, (228.364, 238.548, 343.895)), (' A 455  LEU  CD1', ' A 493  GLN HE22', -0.575, (239.42, 196.969, 296.671)), (' a  51  ILE  O  ', ' a  51  ILE HG12', -0.569, (232.462, 202.667, 309.442)), (' A 403  ARG  HD2', ' A 505  TYR  HB3', -0.559, (235.516, 187.668, 289.214)), (' A 489  TYR  CD2', ' A 489  TYR  N  ', -0.546, (243.161, 203.859, 301.073)), (' a  34  MET  HE2', ' a  98  ARG  HD3', -0.54, (226.677, 209.592, 308.5)), (' A 474  GLN HE22', ' A 479  PRO  HA ', -0.52, (246.141, 213.261, 302.475)), (' b  21  LEU HD12', ' b  79  LEU HD23', -0.516, (236.676, 232.22, 317.843)), (' a  33  THR HG22', ' a  52  ASN  HB2', -0.505, (234.869, 206.068, 305.506)), (' a  28  THR  O  ', ' a  98  ARG  NH2', -0.499, (225.836, 208.744, 302.997)), (' a  51  ILE  HB ', ' a  58  THR HG22', -0.497, (234.082, 201.946, 312.443)), (' A 452  LEU  CD2', ' A 493  GLN  O  ', -0.486, (245.687, 194.106, 291.321)), (' b 156  ASP  OD2', ' b 194  HIS  ND1', -0.475, (232.24, 224.005, 367.351)), (' b  45  LYS  HB2', ' b  48  GLN  HB2', -0.469, (223.262, 225.509, 320.467)), (' b  88  ASP  OD1', ' b  92  TYR  OH ', -0.459, (230.342, 233.589, 317.784)), (' b 138  VAL HG12', ' b 183  THR  HA ', -0.449, (224.828, 224.727, 351.57)), (' b  60  ARG  NH1', ' b  64  VAL  O  ', -0.447, (228.32, 233.515, 305.36)), (' a   6  GLN HE21', ' a 108  GLY  HA3', -0.442, (223.189, 213.62, 316.114)), (' A 489  TYR  OH ', ' a  55  ILE  CD1', -0.438, (238.068, 201.767, 303.147)), (' A 445  VAL HG22', ' A 499  PRO  HG3', -0.429, (243.662, 176.482, 289.815)), (' b   7  SER  HA ', ' b   8  PRO  HA ', -0.424, (243.874, 231.214, 326.295)), (' A 489  TYR  CE1', ' a  55  ILE  CD1', -0.422, (238.849, 200.943, 303.066)), (' a  29  PHE  HA ', ' a  98  ARG HH22', -0.419, (225.31, 207.451, 304.22)), (' A 471  GLU  O  ', ' A 491  PRO  HG3', -0.417, (246.042, 205.146, 294.287)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.414, (236.802, 199.686, 286.856)), (' A 454  ARG  NH2', ' A 469  SER  O  ', -0.41, (246.229, 205.245, 288.583)), (' b  55  TYR  O  ', ' b  59  SER  OG ', -0.406, (237.463, 226.804, 304.796)), (' a 191  THR  O  ', ' a 195  GLU  N  ', -0.404, (203.061, 238.19, 353.274))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
