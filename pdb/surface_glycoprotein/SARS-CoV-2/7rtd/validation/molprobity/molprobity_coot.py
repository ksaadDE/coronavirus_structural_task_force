# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 210 ', 'PRO', None, (28.028999999999996, -13.242000000000003, 63.273)), ('B', '  32 ', 'PRO', None, (39.505000000000024, 13.914999999999997, 64.7))]
data['rota'] = [('A', '  35 ', 'ARG', 0.15478916446166016, (22.485, 5.241, 54.312000000000005)), ('A', '  58 ', 'GLU', 3.547507730016815e-05, (5.974999999999998, 5.033, 51.179)), ('A', '  81 ', 'LEU', 0.23702765402209644, (26.671000000000042, 23.762999999999995, 71.116)), ('A', ' 110 ', 'LEU', 0.007101846302806614, (15.926000000000002, -5.921, 76.124)), ('A', ' 111 ', 'ARG', 0.026564647413674574, (17.627999999999993, -2.4419999999999997, 76.012)), ('A', ' 121 ', 'LYS', 0.0, (33.52000000000001, 13.414000000000001, 73.974)), ('A', ' 194 ', 'VAL', 0.12099728602857474, (61.77500000000002, -15.895, 63.07000000000001)), ('A', ' 207 ', 'SER', 0.2341446144215633, (34.486000000000004, -15.257, 56.867000000000004)), ('A', ' 207 ', 'SER', 0.010642402048688382, (34.47500000000001, -15.238, 56.869)), ('A', ' 230 ', 'LEU', 0.017602501339405763, (45.59599999999999, -10.155, 68.793)), ('A', ' 255 ', 'GLN', 0.0, (52.738000000000035, -28.842, 69.984)), ('A', ' 268 ', 'LYS', 0.0, (30.82700000000002, -25.883000000000006, 71.188)), ('A', ' 270 ', 'LEU', 0.07202225311403228, (36.77100000000001, -25.341, 68.571)), ('A', ' 273 ', 'ARG', 0.09622197309364468, (46.908000000000015, -27.198, 66.954)), ('B', '   1 ', 'ILE', 0.0, (40.609999999999985, 15.179, 71.568)), ('B', '   4 ', 'THR', 0.19725385150063643, (45.42400000000001, 8.852, 65.606)), ('B', '   9 ', 'VAL', 0.16005389925718155, (45.998, -3.622, 55.277)), ('B', '  20 ', 'SER', 0.2578209889600632, (41.281000000000006, -12.038999999999998, 41.674)), ('B', '  31 ', 'HIS', 0.1167506927114832, (39.09800000000001, 11.602, 65.614)), ('B', '  58 ', 'LYS', 0.0, (30.74000000000001, 2.6599999999999997, 71.232)), ('B', '  58 ', 'LYS', 0.0, (30.748999999999995, 2.67, 71.228)), ('B', '  69 ', 'GLU', 0.16291643036761655, (39.81700000000001, -5.276999999999999, 43.355)), ('B', '  91 ', 'LYS', 0.0039943511097783975, (51.71700000000001, 6.689, 57.433)), ('B', '  97 ', 'ARG', 0.0001780987617686696, (49.705000000000005, -11.75, 52.88400000000001))]
data['cbeta'] = [('A', ' 194 ', 'VAL', ' ', 0.26400436508616915, (61.098, -14.924, 64.11200000000001))]
data['probe'] = [(' A 114  HIS  HD2', ' C   3  GLN HE22', -0.611, (16.807, 8.23, 69.988)), (' A 114  HIS  CD2', ' C   3  GLN HE22', -0.566, (16.613, 8.705, 69.763)), (' B  24  ASN  HB3', ' B  65  LEU HD11', -0.534, (39.458, -3.554, 53.53)), (' B   1  ILE HD11', ' B   3  ARG  HE ', -0.518, (38.199, 11.122, 69.939)), (' A 258  THR  OG1', ' A 260  HIS  HE1', -0.516, (44.669, -24.915, 73.121)), (' A 111 AARG  HB3', ' A 111 AARG HH11', -0.501, (20.48, -1.07, 76.409)), (' A 268  LYS  H  ', ' A 268  LYS  NZ ', -0.491, (30.11, -26.178, 68.853)), (' B   4 ATHR HG22', ' B  86  THR  HB ', -0.491, (47.544, 10.991, 65.965)), (' A  73  THR HG23', ' C   8  LEU HD23', -0.49, (17.168, 19.938, 66.518)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.479, (29.469, 10.656, 71.888)), (' A 267  PRO  HB2', ' A 268  LYS  HE3', -0.463, (28.116, -27.482, 68.509)), (' A 109  PHE  HB2', ' A 165  VAL HG21', -0.437, (11.537, -3.722, 72.42)), (' A 258  THR HG22', ' A 273  ARG  HG2', -0.436, (45.945, -27.831, 70.104)), (' A 262  GLN  HG2', ' A 269  PRO  HB3', -0.425, (34.806, -21.628, 72.421)), (' A 118  TYR  O  ', ' A 121  LYS  HG3', -0.424, (33.189, 16.191, 72.528)), (' A  49  ALA  O  ', ' A  52  ILE HG22', -0.412, (18.408, -3.34, 51.423)), (' B  33  SER  HB3', ' B  62  PHE  CE2', -0.41, (34.453, 11.707, 62.82)), (' A 214 BTHR  OG1', ' A 262  GLN  HB2', -0.403, (35.068, -16.642, 72.244))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
