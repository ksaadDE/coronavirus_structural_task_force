# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (-39.095, 2.1130000000000004, -30.994))]
data['rota'] = [('A', ' 114 ', 'LYS', 0.0011039242428855119, (-49.131, 31.073000000000004, -26.362)), ('A', ' 224 ', 'GLU', 0.23838072413853692, (-14.582, 31.841, -33.695)), ('A', ' 240 ', 'LEU', 0.05965337153421324, (-11.431999999999999, 8.701999999999995, -40.465)), ('A', ' 283 ', 'VAL', 0.15477168458115884, (-13.185, -2.968, -37.589)), ('A', ' 293 ', 'VAL', 0.00927996758715844, (-16.043, -8.056, -19.015)), ('A', ' 401 ', 'HIS', 0.24540871515665333, (-21.507, 18.243, -16.38)), ('A', ' 402 ', 'GLU', 0.004892852072087002, (-21.501, 15.735999999999999, -19.282999999999994)), ('A', ' 419 ', 'LYS', 0.14149224108785363, (-7.501999999999998, -5.859, -14.021)), ('A', ' 439 ', 'LEU', 0.024293032566743273, (-9.444, 3.776, -30.701)), ('A', ' 455 ', 'MET', 0.13795219131332206, (-22.536, 21.617, -39.121999999999986)), ('A', ' 607 ', 'SER', 0.29696833571417863, (-16.059000000000005, 15.599999999999998, -53.895)), ('B', ' 356 ', 'LYS', 0.017230961335498188, (-37.184, 25.253, 31.540999999999997)), ('B', ' 366 ', 'SER', 0.10964674457753007, (-23.408999999999995, 11.508, 34.126)), ('B', ' 387 ', 'LEU', 0.08968176924863273, (-18.69, 17.233000000000004, 37.209)), ('B', ' 430 ', 'THR', 0.09944631079543852, (-20.591, 28.081999999999997, 30.757)), ('B', ' 486 ', 'LEU', 0.07573543361228423, (-42.466, 44.214, -2.678)), ('B', ' 493 ', 'GLN', 0.008222454416851323, (-39.602, 30.739999999999995, 7.419)), ('B', ' 498 ', 'GLN', 0.16648088742187095, (-38.958, 15.299999999999999, 4.902)), ('B', ' 498 ', 'GLN', 5.56236833952231e-05, (-38.966, 15.293, 4.908))]
data['cbeta'] = []
data['probe'] = [(' A  42  GLN HE22', ' B 498 AGLN HE22', -0.825, (-42.655, 18.406, 0.784)), (' A  42  GLN  NE2', ' B 498 AGLN HE22', -0.765, (-41.949, 18.607, 0.235)), (' A 490  PRO  HA ', ' A 612  PRO  HG2', -0.73, (-28.811, 9.521, -52.51)), (' A 402  GLU  HB3', ' A 518  ARG  HD2', -0.691, (-21.264, 15.498, -22.448)), (' B 362  VAL HG13', ' B 526  GLY  HA2', -0.687, (-28.335, 15.572, 42.23)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.64, (-29.326, 32.331, 45.355)), (' A  42  GLN  NE2', ' B 498 AGLN  NE2', -0.584, (-41.421, 18.742, 0.98)), (' A  42  GLN HE22', ' B 498 AGLN  NE2', -0.574, (-41.774, 18.605, 1.318)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.551, (-27.083, 27.388, 43.555)), (' B 521  PRO  HB2', ' B 523  THR HG23', -0.551, (-30.477, 27.916, 46.799)), (' B 334  ASN  O  ', ' B 362  VAL  N  ', -0.551, (-32.932, 16.686, 42.783)), (' B 383  SER  H  ', ' B 387  LEU HD12', -0.546, (-16.908, 20.247, 34.631)), (' A 134  ASN  OD1', ' A 140  GLU  HB3', -0.516, (-46.57, -2.827, -42.805)), (' A  90  ASN  OD1', ' A  92  THR HG22', -0.488, (-21.287, 38.31, -4.966)), (' A 294  THR HG23', ' A 365  THR  HA ', -0.475, (-22.844, -7.589, -18.485)), (' A 187  LYS  HD2', ' A 199  TYR  CZ ', -0.461, (-35.895, 30.039, -28.937)), (' B 379  CYS  HB2', ' B 384  PRO  HD3', -0.461, (-17.886, 19.353, 29.032)), (' A 560  LEU HD22', ' A 564  GLU  HG3', -0.458, (-15.035, 29.171, -8.529)), (' A 184  VAL HG22', ' A 464  PHE  HE1', -0.456, (-35.239, 29.051, -35.995)), (' A 144  LEU  HA ', ' A 148  LEU  HB2', -0.448, (-38.292, 5.438, -36.06)), (' A 190  MET  HE1', ' A 202  TYR  CE1', -0.445, (-33.677, 33.911, -24.399)), (' A 455  MET  HE3', ' A 480  MET  HB2', -0.445, (-25.013, 22.188, -43.825)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.443, (-35.236, 26.119, 26.309)), (' A  55  THR  O  ', ' A  59  VAL HG23', -0.44, (-49.216, 8.665, -13.73)), (' B 390  LEU  HA ', ' B 390  LEU HD23', -0.437, (-19.341, 20.861, 42.78)), (' A 309  LYS  HD2', ' A 328  TRP  CH2', -0.435, (-22.713, 1.006, -3.009)), (' B 403  ARG  HG2', ' B 495  TYR  CE1', -0.422, (-33.113, 24.285, 9.511)), (' A 477  TRP  CZ3', ' A 500  PRO  HB3', -0.419, (-30.36, 20.697, -39.922)), (' A 233  ILE HD13', ' A 450  LEU HD13', -0.419, (-13.965, 17.526, -32.905)), (' A 535  HIS  CE1', ' A 542  CYS  HA ', -0.419, (-2.891, 5.657, -18.306)), (' A 474  MET  HE1', ' A 499  ASP  HB2', -0.416, (-32.997, 18.314, -44.019)), (' A  42  GLN  HA ', ' A  42  GLN  OE1', -0.415, (-42.351, 18.104, -2.107)), (' A  24  GLN  HB3', ' A  83  TYR  HE1', -0.414, (-34.627, 45.042, -3.397)), (' B 431  GLY  HA2', ' B 515  PHE  CD2', -0.413, (-23.3, 24.305, 31.989)), (' A 168  TRP  CZ3', ' A 172  VAL HG21', -0.411, (-41.793, 10.438, -37.865)), (' B 388  ASN  N  ', ' B 388  ASN  OD1', -0.408, (-20.787, 15.225, 38.251)), (' A 293  VAL HG22', ' A 423  LEU  HB3', -0.407, (-14.263, -7.722, -15.67)), (' B 383  SER  HB2', ' B 387  LEU  HG ', -0.406, (-16.074, 18.346, 34.626)), (' A 392  LEU HD13', ' A 563  SER  HA ', -0.404, (-22.095, 31.429, -8.517)), (' A 453  THR HG23', ' A 512  PHE  CD2', -0.403, (-24.618, 19.252, -32.104)), (' A  47  SER  OG ', ' A  62  MET  HE3', -0.403, (-40.764, 14.385, -13.027)), (' B 363  ALA  H  ', ' B 526  GLY  HA3', -0.401, (-27.969, 16.765, 40.839))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
