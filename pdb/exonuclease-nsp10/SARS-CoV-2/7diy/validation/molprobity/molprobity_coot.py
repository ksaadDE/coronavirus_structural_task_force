# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 114 ', 'GLY', 0.018354764765025466, (-26.696999999999996, 2.626, 5.357))]
data['omega'] = [('A', ' 127 ', 'GLY', None, (20.966999999999995, 15.344000000000003, -29.471)), ('B', '  18 ', 'LEU', None, (-8.777000000000003, 12.227, -35.101)), ('B', ' 157 ', 'LEU', None, (-24.155999999999995, 15.83, -6.734000000000002))]
data['rota'] = [('A', '  62 ', 'ASN', 0.0, (17.189, 12.150999999999996, -38.91300000000001)), ('B', ' 115 ', 'VAL', 0.20396100707756404, (-25.462999999999997, 5.764, 3.605)), ('B', ' 118 ', 'VAL', 0.0077960155344436064, (-25.392, 10.916, -5.259000000000002)), ('B', ' 122 ', 'THR', 0.029339525177363147, (-19.35, 14.246, -14.421)), ('B', ' 174 ', 'LEU', 0.0, (-13.296, 2.032000000000001, 10.383)), ('B', ' 181 ', 'VAL', 0.006301065150182694, (-10.892, -0.965, 3.8920000000000003)), ('B', ' 215 ', 'THR', 0.07043791801423308, (-5.255, 5.2, 4.650000000000001)), ('B', ' 223 ', 'THR', 0.03819804675172388, (-0.089, 14.305, 2.524))]
data['cbeta'] = []
data['probe'] = [(' A 128  CYS  HG ', ' A 202   ZN ZN  ', -0.946, (21.385, 22.789, -27.222)), (' B  89  PHE  O  ', ' B 401  HOH  O  ', -0.802, (-20.14, -3.115, -5.255)), (' A   6  GLU  HG3', ' A   7  VAL  H  ', -0.791, (-4.955, 0.404, -26.72)), (' B  15  ILE HG23', ' B  16  THR HG23', -0.781, (-16.129, 12.663, -40.146)), (' A 128  CYS  SG ', ' A 202   ZN ZN  ', -0.751, (21.323, 22.29, -26.587)), (' A   6  GLU  OE2', ' A  10  ASN  ND2', -0.73, (-1.714, 1.262, -26.253)), (' B 184  VAL HG12', ' B 277  THR HG22', -0.707, (-19.863, -7.585, -1.912)), (' B  60  PHE  HB3', ' B  62  MET  HE2', -0.666, (-8.358, -0.534, -13.42)), (' B  32  LYS  O  ', ' B 404  HOH  O  ', -0.638, (-4.109, 10.298, -45.655)), (' A 115  THR HG23', ' A 124  LYS  HD3', -0.608, (17.748, 18.907, -20.834)), (' A  39  THR  O  ', ' A  78  ARG  NH2', -0.608, (-0.426, 3.393, -27.162)), (' B  76  ARG  O  ', ' B  80  ILE HG12', -0.605, (-11.193, -14.697, 2.819)), (' A   6  GLU  HG3', ' A   7  VAL  N  ', -0.604, (-5.43, -0.073, -26.363)), (' A   5  THR  O  ', ' B  25  THR HG21', -0.598, (-6.339, 4.213, -29.276)), (' B 181  VAL HG22', ' B 227  TRP  HZ2', -0.583, (-10.289, 2.181, 4.947)), (' B 181  VAL HG22', ' B 227  TRP  CZ2', -0.576, (-10.753, 2.768, 4.595)), (' B 208  CYS  O  ', ' B 209  LEU  HB2', -0.572, (-1.136, 12.289, 11.394)), (' A 128  CYS  SG ', ' A 130  CYS  SG ', -0.566, (22.537, 23.309, -26.787)), (' A  21  VAL HG22', ' B 200  LYS  HB3', -0.558, (-3.037, 8.677, -5.262)), (' B  92  GLU  OE2', ' B 405  HOH  O  ', -0.545, (-28.362, -0.861, -7.964)), (' A  80  HIS  CE1', ' B  55  ILE HG21', -0.542, (-8.923, 8.472, -22.676)), (' B  94  CYS  HB3', ' B 153  MET  HE1', -0.532, (-28.447, 8.79, -14.76)), (' A  57  VAL HG13', ' A  58  THR HG23', -0.527, (5.434, 22.772, -38.576)), (' B 267  ALA  O  ', ' B 269  VAL  N  ', -0.521, (-33.038, -0.377, -2.715)), (' B 210  CYS  HB3', ' B 212  ARG  H  ', -0.519, (0.257, 6.6, 12.347)), (' A 126  TYR  N  ', ' A 127  GLY  HA2', -0.504, (21.61, 14.507, -27.235)), (' B   3  ASN  OD1', ' B 406  HOH  O  ', -0.498, (-10.637, -7.133, -33.605)), (' B 120  VAL  H  ', ' B 157  LEU  H  ', -0.497, (-23.413, 15.444, -7.8)), (' B 184  VAL HG13', ' B 242  ILE HD11', -0.495, (-17.3, -8.928, -0.686)), (' B 207  CYS  SG ', ' B 210  CYS  HB2', -0.491, (-0.764, 9.165, 11.013)), (' B 113  THR  O  ', ' B 115  VAL  N  ', -0.49, (-24.682, 3.178, 4.108)), (' A  40  ASN  OD1', ' B  25  THR  OG1', -0.49, (-3.961, 3.594, -29.563)), (' B 267  ALA  O  ', ' B 269  VAL HG23', -0.485, (-33.333, 0.378, -2.125)), (' B 120  VAL  N  ', ' B 157  LEU  H  ', -0.484, (-23.443, 15.273, -8.265)), (' B  17  GLY  HA3', ' B  53  ARG  NH2', -0.483, (-12.303, 13.68, -33.93)), (' B  80  ILE  O  ', ' B  83  VAL HG23', -0.48, (-12.324, -11.848, 8.508)), (' B 207  CYS  SG ', ' B 208  CYS  O  ', -0.473, (-0.852, 11.233, 10.152)), (' B  72  MET  HE2', ' B 201  ILE HG21', -0.467, (-5.065, 1.15, -7.225)), (' B  72  MET  HB3', ' B 241  MET  HE3', -0.466, (-8.717, -2.15, -4.875)), (' A  80  HIS  ND1', ' B  55  ILE HG21', -0.465, (-9.332, 8.484, -22.009)), (' A  54  ALA  HB1', ' A 123  TRP  CE2', -0.465, (12.708, 16.492, -27.945)), (' B 221  SER  O  ', ' B 223  THR  N  ', -0.462, (-0.945, 15.84, 0.818)), (' B 250  THR HG23', ' B 251  GLY  N  ', -0.461, (-27.47, -18.254, -10.678)), (' B 207  CYS  HB3', ' B 210  CYS  HB2', -0.459, (-0.15, 8.305, 10.848)), (' B 185  LEU  CD2', ' B 241  MET  HB2', -0.457, (-13.425, -4.261, -4.196)), (' A  53  GLN  O  ', ' A  98  GLN  HG2', -0.443, (12.488, 17.005, -33.08)), (' A  41  CYS  O  ', ' B  26  HIS  HB2', -0.438, (-0.212, 4.639, -33.236)), (' A  12  THR  OG1', ' B  63  ASN  OD1', -0.435, (-3.169, -5.906, -16.356)), (' B 214  ALA  HB1', ' B 224  TYR  HB3', -0.431, (-1.003, 7.836, 4.116)), (' B 260  TYR  HB3', ' B 283  HIS  CD2', -0.431, (-26.525, -16.869, 4.761)), (' B  57  MET  HE3', ' B 196  LYS  HE3', -0.422, (-9.401, 8.134, -14.612)), (' B  14  VAL HG12', ' B  16  THR  H  ', -0.417, (-15.71, 13.926, -36.208)), (' A  74  CYS  HB3', ' A  77  CYS  HB2', -0.417, (0.343, 13.134, -23.508)), (' A 117  CYS  SG ', ' A 119  VAL  HB ', -0.415, (20.234, 25.588, -25.775)), (' B 215  THR HG21', ' B 227  TRP  CD2', -0.414, (-8.234, 5.158, 7.3)), (' A  85  ASN  N  ', ' A  85  ASN  OD1', -0.409, (2.248, 20.62, -15.825)), (' B  69  TYR  HA ', ' B  70  PRO  HD3', -0.408, (2.231, -0.412, -3.362)), (' B  82  HIS  CD2', ' B 180  ARG  HD2', -0.408, (-6.645, -5.865, 7.112)), (' A  65  GLN  HB3', ' A  65  GLN HE21', -0.407, (16.73, 10.786, -33.011)), (' B  88  GLY  C  ', ' B 274  ALA  HB1', -0.405, (-21.809, -1.921, 0.028)), (' B 141  PRO  HB2', ' B 146  PHE  CD2', -0.4, (-31.908, 1.886, -16.22))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
