# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  41 ', 'HIS', 0.026496314577690114, (-27.868, 1.698, -28.181))]
data['omega'] = []
data['rota'] = [('A', '   4 ', 'ARG', 0.0, (5.763, 3.888, -16.95)), ('A', '  43 ', 'ILE', 0.22587270239167148, (-32.453, 1.6950000000000003, -26.097)), ('A', '  49 ', 'MET', 0.028278142901476167, (-28.836, -5.221, -32.941)), ('A', ' 123 ', 'SER', 0.2531301608241805, (-13.078, -0.7229999999999999, -11.984)), ('A', ' 128 ', 'CYS', 0.21340452070464688, (-4.472, 4.248000000000001, -24.299)), ('A', ' 130 ', 'MET', 0.22650000192547684, (-5.982, 5.954, -30.644000000000002)), ('A', ' 148 ', 'VAL', 0.20505110750192626, (-14.739, 7.330999999999999, -21.133)), ('A', ' 177 ', 'LEU', 0.17845365620029605, (-18.607, 13.14500000000001, -26.685999999999996)), ('A', ' 235 ', 'MET', 0.0, (6.601, 2.049, -44.443)), ('B', '  86 ', 'VAL', 0.27042973338096177, (7.713, 8.554, 8.85)), ('B', '  93 ', 'THR', 0.19633706506252188, (-8.856, 20.125, 11.336)), ('B', ' 192 ', 'GLN', 0.13239263283862665, (23.274, 2.164000000000002, -1.258)), ('B', ' 214 ', 'ASN', 0.14634228311599104, (-7.556, -14.05, -24.197)), ('B', ' 216 ', 'ASP', 0.14556775875937286, (-3.077, -16.514999999999997, -27.108999999999998)), ('B', ' 238 ', 'ASN', 0.05691614039761295, (16.83400000000001, -15.955, -12.126)), ('B', ' 261 ', 'VAL', 0.27991199540548545, (-0.932, -25.91000000000001, -14.170000000000002))]
data['cbeta'] = []
data['probe'] = [(' A  49  MET  HA ', ' A  49  MET  HE2', -1.034, (-28.259, -3.699, -32.717)), (' B 260  ALA  HB3', ' B 263  ASP  HB2', -0.994, (-1.072, -27.43, -18.768)), (' A  86  VAL HG23', ' A 179  GLY  HA2', -0.844, (-22.11, 10.152, -29.871)), (' B  41  HIS  HB2', ' B  49  MET  HE1', -0.825, (16.117, 12.81, 3.537)), (' A  49  MET  CE ', ' A  49  MET  HA ', -0.775, (-29.053, -3.853, -31.494)), (' B  41  HIS  CB ', ' B  49  MET  HE1', -0.762, (15.743, 12.349, 3.437)), (' B 260  ALA  HB3', ' B 263  ASP  CB ', -0.745, (-0.925, -28.062, -19.235)), (' B 221  ASN  ND2', ' B 270  GLU  OE1', -0.744, (6.942, -26.595, -25.492)), (' B 258  GLY  O  ', ' B 260  ALA  N  ', -0.727, (-4.842, -26.051, -18.398)), (' A 188  ARG  NH1', ' A 190  THR HG21', -0.718, (-26.222, -4.192, -41.551)), (' B 260  ALA  CB ', ' B 263  ASP  HB2', -0.708, (-1.62, -28.11, -18.013)), (' A 229  ASP  O  ', ' A 233  VAL HG23', -0.707, (13.984, 4.686, -46.407)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.692, (11.238, 1.806, 4.393)), (' B 228  ASN  O  ', ' B 232  LEU HD13', -0.691, (13.593, -29.073, -10.423)), (' B 163  HIS  HE1', ' B 172  HIS  HB3', -0.691, (11.701, 6.175, -5.404)), (' A 108  PRO  HA ', ' A 130  MET  HG2', -0.691, (-6.497, 7.915, -33.371)), (' A  46  SER  O  ', ' A  48  ASP  N  ', -0.684, (-32.428, -7.327, -31.895)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.671, (-14.647, -0.729, -27.375)), (' B 226  THR  HA ', ' B 262  LEU HD23', -0.67, (4.912, -30.912, -12.571)), (' A 249  ILE HD12', ' A 293  PRO  HG2', -0.665, (4.816, 15.254, -31.131)), (' B 254  SER  O  ', ' B 258  GLY  N  ', -0.661, (-8.21, -24.291, -17.055)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.66, (-24.903, 15.407, -12.38)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.659, (11.258, 5.562, -5.706)), (' B  62  SER  HB2', ' B  64  HIS  CE1', -0.657, (8.945, 25.978, 16.179)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.644, (-39.711, 4.994, -32.628)), (' B 251  GLY  N  ', ' B 252  PRO  HD2', -0.636, (-5.659, -21.3, -8.492)), (' A 140  PHE  O  ', ' B   1  SER  N  ', -0.624, (-13.093, -6.887, -23.515)), (' A 286  LEU HD21', ' B 285  ALA  HB2', -0.624, (8.742, -7.796, -28.971)), (' A 230  PHE  CD1', ' A 265  CYS  HB3', -0.617, (14.002, 8.572, -39.893)), (' A 274  ASN  ND2', ' A 502  HOH  O  ', -0.615, (21.751, -6.07, -37.88)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.608, (-9.551, 7.891, -21.515)), (' B  33  ASP  O  ', ' B  94  ALA  HA ', -0.602, (-8.577, 15.879, 9.535)), (' B  53  ASN  ND2', ' B  56  ASP  HB2', -0.596, (19.787, 13.947, 17.404)), (' A  92  ASP  OD1', ' A  93  THR HG23', -0.592, (-32.711, 16.774, -9.882)), (' A  50  LEU  O  ', ' A 188  ARG  HD2', -0.59, (-27.56, -3.614, -38.902)), (' A   5  LYS  HD3', ' B 413  HOH  O  ', -0.587, (-0.491, 1.595, -23.193)), (' A 163  HIS  HE1', ' A 172  HIS  HB3', -0.584, (-14.647, -0.991, -27.386)), (' B 236  LYS  HD3', ' B 236  LYS  O  ', -0.584, (19.683, -19.455, -15.603)), (' B 111  THR HG23', ' B 292  THR HG23', -0.58, (0.518, -8.24, -8.795)), (' A  67  LEU  N  ', ' A  67  LEU HD22', -0.567, (-34.887, 4.376, -16.357)), (' A 151  ASN  ND2', ' A 507  HOH  O  ', -0.565, (-7.83, 14.007, -24.69)), (' B 256  GLN  HG2', ' B 256  GLN  O  ', -0.559, (-11.923, -19.878, -17.325)), (' B  41  HIS  CG ', ' B  49  MET  HE1', -0.557, (15.593, 12.427, 3.0)), (' A 235  MET  HE3', ' A 235  MET  N  ', -0.544, (7.846, 3.627, -44.346)), (' A 249  ILE  CD1', ' A 293  PRO  HG2', -0.543, (4.882, 14.832, -31.527)), (' B 190  THR  OG1', ' B 191  ALA  N  ', -0.535, (26.483, 5.943, 1.101)), (' B  42  VAL  O  ', ' B  42  VAL HG22', -0.535, (11.347, 18.941, 5.677)), (' A 126  TYR  CD2', ' B   6  MET  HE2', -0.534, (-7.937, -1.047, -18.313)), (' A  43  ILE HD11', ' A  54  TYR  HD1', -0.533, (-31.515, 3.975, -30.863)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.532, (0.614, 3.473, -4.754)), (' B 260  ALA  O  ', ' B 264  MET  N  ', -0.529, (0.225, -25.413, -17.782)), (' B 247  VAL HG13', ' B 261  VAL HG11', -0.527, (-0.835, -25.036, -10.257)), (' B 279  ARG  HD3', ' B 279  ARG  N  ', -0.526, (8.231, -13.645, -32.932)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.525, (-24.004, 15.004, -12.289)), (' A  68  VAL HG11', ' A  75  LEU HD12', -0.522, (-28.464, 10.933, -13.561)), (' A   5  LYS  HG2', ' A 127  GLN  HB3', -0.518, (-0.84, 4.046, -20.816)), (' B 210  ALA  HB2', ' B 296  VAL HG22', -0.511, (-3.848, -12.159, -16.735)), (' B 279  ARG  C  ', ' B 280  THR HG23', -0.511, (5.625, -11.048, -30.711)), (' A 233  VAL HG21', ' A 269  LYS  HE2', -0.508, (15.734, 4.361, -44.82)), (' A 234  ALA  O  ', ' A 239  TYR  HB2', -0.507, (7.605, 2.152, -41.375)), (' A 108  PRO  HA ', ' A 130  MET  CG ', -0.507, (-6.359, 7.799, -33.126)), (' B 250  LEU  HG ', ' B 250  LEU  O  ', -0.505, (-3.751, -21.133, -10.768)), (' A  45  THR  OG1', ' A  46  SER  N  ', -0.503, (-33.128, -6.302, -28.593)), (' A 189  GLN  HG2', ' A 189  GLN  O  ', -0.501, (-24.0, -8.447, -35.811)), (' A 231  ASN  O  ', ' A 235  MET  HE3', -0.494, (7.936, 4.998, -45.146)), (' B 114  VAL  O  ', ' B 125  VAL  HA ', -0.493, (0.002, 6.277, -9.923)), (' A 286  LEU  CD2', ' B 285  ALA  HB2', -0.491, (9.054, -7.652, -28.837)), (' A  68  VAL  CG1', ' A  75  LEU HD12', -0.486, (-28.419, 10.07, -13.46)), (' A 136  ILE  O  ', ' A 136  ILE HG13', -0.482, (-9.453, 0.408, -27.967)), (' B 246  HIS  O  ', ' B 250  LEU  HB2', -0.479, (-0.809, -20.155, -8.382)), (' B  41  HIS  HB2', ' B  49  MET  CE ', -0.478, (16.352, 13.054, 3.718)), (' B  67  LEU HD12', ' B  74  GLN HE22', -0.477, (1.85, 27.033, 5.029)), (' A 232  LEU  O  ', ' A 236  LYS  HE3', -0.477, (10.569, 1.62, -47.799)), (' B  63  ASN  OD1', ' B  80  HIS  ND1', -0.476, (5.418, 20.005, 16.249)), (' B 251  GLY  N  ', ' B 252  PRO  CD ', -0.475, (-6.366, -21.332, -8.369)), (' B 175  THR HG22', ' B 181  PHE  CA ', -0.475, (11.303, 1.757, 4.896)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.471, (-16.845, 5.329, -14.762)), (' B  30  LEU  CD2', ' B 177  LEU HD21', -0.47, (-0.066, 7.318, 3.838)), (' B  31  TRP  O  ', ' B  32  LEU HD23', -0.466, (-6.179, 11.748, 4.515)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.462, (-5.525, 22.758, -16.59)), (' B  10  SER  O  ', ' B  14  GLU  HG3', -0.453, (-6.812, 9.629, -6.266)), (' A 222  ARG  NH2', ' A 515  HOH  O  ', -0.452, (30.336, 3.59, -42.281)), (' B 212  VAL HG23', ' B 219  PHE  CZ ', -0.451, (-1.086, -18.789, -22.864)), (' B  97  LYS  HB2', ' B  97  LYS  HE3', -0.45, (-10.344, 14.883, 1.28)), (' A   4  ARG  HB3', ' A   4  ARG  HE ', -0.449, (4.492, 2.057, -15.454)), (' B 246  HIS  O  ', ' B 250  LEU  CB ', -0.447, (-0.67, -20.73, -8.081)), (' A   6  MET  HE1', ' B 460  HOH  O  ', -0.445, (4.361, 12.171, -14.011)), (' A  44  CYS  HB3', ' A  49  MET  HE3', -0.444, (-29.822, -3.129, -30.222)), (' B 211  ALA  HB2', ' B 282  LEU  CD1', -0.443, (-1.448, -12.951, -22.421)), (' B 247  VAL  O  ', ' B 250  LEU  N  ', -0.441, (-2.871, -22.022, -6.788)), (' B 211  ALA  HB2', ' B 282  LEU HD12', -0.44, (-1.334, -12.895, -22.474)), (' B 226  THR  HA ', ' B 262  LEU  CD2', -0.438, (4.806, -31.154, -12.327)), (' B  31  TRP  CD2', ' B  95  ASN  HB2', -0.438, (-7.258, 15.843, 5.683)), (' A  21  THR  HB ', ' A  67  LEU  HB2', -0.435, (-32.651, 2.277, -15.372)), (' B 209  TYR  CD1', ' B 264  MET  HE3', -0.433, (-2.632, -20.325, -17.85)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.43, (-7.4, 16.443, 6.243)), (' B 188  ARG  NH1', ' B 190  THR  HB ', -0.429, (25.317, 7.298, 4.354)), (' A 285  ALA  HB3', ' B 285  ALA  HB3', -0.429, (10.224, -7.726, -26.201)), (' B 196  THR HG22', ' B 465  HOH  O  ', -0.429, (22.145, -11.028, -5.094)), (' B 206  ALA  O  ', ' B 296  VAL HG21', -0.428, (-2.866, -13.87, -15.112)), (' B  30  LEU HD22', ' B 177  LEU HD21', -0.424, (-0.373, 7.498, 3.499)), (' A  80  HIS  HA ', ' A  88  LYS  O  ', -0.422, (-32.183, 13.441, -23.432)), (' A 244  GLN  HA ', ' A 244  GLN  OE1', -0.421, (8.693, 17.873, -41.352)), (' A 230  PHE  HA ', ' A 269  LYS  HE3', -0.42, (14.55, 6.352, -43.466)), (' B 101  TYR  O  ', ' B 102  LYS  HB3', -0.42, (-7.917, 0.718, 7.22)), (' B  40  ARG  NH1', ' B  54  TYR  CD2', -0.418, (15.909, 9.403, 11.296)), (' B 286  LEU  O  ', ' B 286  LEU HD12', -0.418, (7.887, -9.202, -21.682)), (' A 290  GLU  OE1', ' B   4  ARG  NH2', -0.417, (-2.474, 1.312, -25.569)), (' A 213  ILE HG21', ' A 300  CYS  HB3', -0.417, (13.293, 13.042, -19.798)), (' B 222  ARG  H  ', ' B 222  ARG  HG2', -0.416, (2.647, -29.644, -26.465)), (' A  32  LEU  O  ', ' A  33  ASP  HB2', -0.415, (-23.864, 19.002, -16.998)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.413, (-3.127, 11.516, -8.133)), (' B   6  MET  HB2', ' B   6  MET  HE3', -0.411, (-6.349, -2.755, -16.473)), (' A 199  THR HG21', ' A 239  TYR  CZ ', -0.41, (6.776, 1.373, -34.937)), (' B  67  LEU HD12', ' B  74  GLN  NE2', -0.41, (1.913, 27.47, 5.566)), (' B 260  ALA  HB3', ' B 263  ASP  OD2', -0.409, (-1.222, -29.213, -19.079)), (' A  40  ARG  O  ', ' A  42  VAL  N  ', -0.409, (-28.906, 3.111, -26.8)), (' A  40  ARG  CZ ', ' A  54  TYR  CD2', -0.408, (-28.308, 5.037, -33.954)), (' A 130  MET  HB2', ' A 130  MET  HE2', -0.404, (-8.236, 7.438, -30.144)), (' B 106  ILE HG23', ' B 160  CYS  CB ', -0.403, (1.258, -2.486, 0.84)), (' B 263  ASP  O  ', ' B 266  ALA  HB3', -0.403, (3.4, -26.665, -19.449)), (' B 111  THR  CG2', ' B 292  THR HG23', -0.403, (0.603, -7.759, -8.739)), (' B  75  LEU  N  ', ' B  75  LEU HD22', -0.402, (-3.635, 23.535, 6.063)), (' A 189  GLN  CG ', ' A 189  GLN  O  ', -0.401, (-23.626, -7.793, -35.839)), (' A  68  VAL  CG1', ' A  75  LEU  HB2', -0.401, (-29.798, 9.823, -13.126))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
