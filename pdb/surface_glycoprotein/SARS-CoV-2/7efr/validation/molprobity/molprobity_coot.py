# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 494 ', 'ASP', 0.004811622917288984, (-17.864, 46.906, 34.36))]
data['omega'] = [('A', ' 146 ', 'PRO', None, (3.9890000000000017, 50.556, 50.316)), ('B', ' 481 ', 'ASN', None, (36.907999999999994, 35.154, 3.494))]
data['rota'] = [('A', ' 607 ', 'SER', 0.29975554611486094, (-22.911, 28.505999999999993, 45.769999999999996))]
data['cbeta'] = []
data['probe'] = [(' A  81  GLN  OE1', ' A1003  NAG  C6 ', -1.373, (14.559, 31.164, 10.752)), (' A  81  GLN  CD ', ' A1003  NAG  H61', -1.135, (15.892, 30.421, 12.029)), (' A  81  GLN  OE1', ' A1003  NAG  H61', -0.981, (15.666, 30.723, 10.847)), (' A  74  LYS  CE ', ' A1003  NAG  H83', -0.933, (14.711, 39.871, 10.642)), (' A  74  LYS  HE2', ' A1003  NAG  H83', -0.881, (15.945, 39.668, 10.633)), (' A 455  MET  HE3', ' A 480  MET  HB2', -0.839, (-11.896, 33.344, 36.469)), (' B 472  ILE HG12', ' B 482  GLY  HA2', -0.821, (38.562, 37.951, 6.68)), (' A 406  GLU  HG3', ' A 518  ARG  NH1', -0.808, (7.088, 28.41, 45.785)), (' A 246  ALA  HA ', ' A 249  MET  HE3', -0.766, (-18.477, 29.9, 58.544)), (' A  74  LYS  HE3', ' A1003  NAG  H83', -0.761, (14.43, 39.635, 10.881)), (' A 515  TYR  HD1', ' A 518  ARG HH21', -0.754, (5.747, 30.541, 42.89)), (' A 291  ILE HD11', ' A 415  PRO  HG3', -0.75, (6.236, 25.6, 63.808)), (' A 494  ASP  HB3', ' A 496  THR  H  ', -0.696, (-16.767, 48.48, 32.964)), (' A 288  LYS  NZ ', ' A 431  ASP  OD2', -0.689, (-0.93, 21.484, 72.466)), (' B 360  ASN  H  ', ' B 523  THR HG23', -0.686, (71.52, 42.549, 33.653)), (' A 432  ASN  ND2', ' A1101  HOH  O  ', -0.685, (-4.618, 15.064, 69.858)), (' A 402  GLU  C  ', ' A 518  ARG  HG3', -0.683, (8.895, 27.726, 41.95)), (' A  81  GLN  OE1', ' A1003  NAG  C5 ', -0.671, (14.72, 31.834, 10.972)), (' A 229  THR HG23', ' A 516  TYR  OH ', -0.64, (-2.795, 20.22, 39.422)), (' A  52  THR  O  ', ' A 340  GLN  NE2', -0.63, (16.102, 53.596, 42.791)), (' A 455  MET  CE ', ' A 480  MET  HB2', -0.617, (-11.977, 33.596, 35.975)), (' A 420  SER  HB2', ' A1004  NAG  H62', -0.612, (18.904, 24.906, 65.109)), (' A 406  GLU  HG3', ' A 518  ARG HH11', -0.586, (6.349, 27.873, 45.772)), (' B 379  CYS  HB3', ' B 382  VAL HG23', -0.586, (59.93, 30.465, 41.316)), (' A 419  LYS  HD2', ' A 428  PHE  HB3', -0.585, (10.794, 25.65, 70.522)), (' A 455  MET  HE3', ' A 480  MET  CB ', -0.585, (-12.27, 32.572, 36.336)), (' A  85  LEU  HA ', ' A  88  ILE HD12', -0.578, (21.247, 20.36, 14.301)), (' A  74  LYS  HE2', ' A1003  NAG  C8 ', -0.574, (15.933, 39.255, 10.137)), (' A 253  PRO  O  ', ' A 254  SER  HB3', -0.573, (-21.952, 41.952, 59.707)), (' A 402  GLU  O  ', ' A 518  ARG  HG3', -0.572, (8.699, 28.036, 42.702)), (' A  20  THR HG23', ' A  23  GLU  H  ', -0.564, (30.323, 19.564, 13.429)), (' A 187  LYS  HD2', ' A 199  TYR  CZ ', -0.563, (4.18, 37.896, 25.39)), (' A 461  TRP  O  ', ' A 465  LYS  HG2', -0.561, (-6.721, 31.461, 25.318)), (' A 322  ASN  ND2', ' A1102  HOH  O  ', -0.545, (31.372, 32.703, 54.398)), (' A 245  ARG  HB2', ' A 262  LEU HD21', -0.543, (-15.573, 31.138, 53.05)), (' A 442  GLN  NE2', ' A1105  HOH  O  ', -0.541, (4.652, 28.364, 57.406)), (' B 472  ILE  CG1', ' B 482  GLY  HA2', -0.537, (38.132, 37.542, 7.127)), (' A 114  LYS  HB3', ' A 114  LYS  NZ ', -0.536, (7.821, 53.195, 19.228)), (' A 403  ALA  HA ', ' A 518  ARG  CG ', -0.535, (8.593, 26.119, 42.872)), (' A 233  ILE HD13', ' A 450  LEU HD13', -0.534, (-2.91, 22.082, 43.772)), (' B 359  SER  HA ', ' B 524  VAL  CG2', -0.533, (69.289, 41.588, 33.824)), (' A  25  ALA  HB1', ' A  97  LEU HD11', -0.531, (24.582, 23.789, 16.089)), (' A 474  MET  HE1', ' A 499  ASP  HB2', -0.524, (-10.813, 42.195, 37.212)), (' A 477  TRP  CE3', ' A 500  PRO  HG3', -0.522, (-8.686, 37.987, 35.375)), (' A 137  ASN  HB3', ' A 140  GLU  HG2', -0.508, (-6.641, 61.176, 53.184)), (' A 181  GLU  OE1', ' A 470  LYS  HE3', -0.499, (-10.279, 46.542, 23.628)), (' B 393  THR  O  ', ' B 523  THR HG22', -0.499, (71.711, 39.364, 32.237)), (' A  98  GLN  HA ', ' A 101  GLN  HG2', -0.496, (16.429, 25.018, 18.209)), (' A 134  ASN  HB3', ' A 137  ASN  H  ', -0.494, (-8.941, 61.006, 52.003)), (' A 536  GLU  N  ', ' A 536  GLU  OE1', -0.492, (14.308, 12.281, 60.169)), (' A 411  SER  HB3', ' A 543  ASP  HA ', -0.491, (14.05, 21.563, 57.115)), (' A 134  ASN  N  ', ' A 140  GLU  OE2', -0.488, (-6.283, 59.111, 50.104)), (' B 368  LEU  O  ', ' B 371  SER  HB3', -0.488, (55.836, 43.395, 45.343)), (' A 492  PRO  HD3', ' A 613  TYR  CG ', -0.487, (-22.345, 44.099, 43.583)), (' A 137  ASN  HB3', ' A 140  GLU  CG ', -0.485, (-6.132, 61.19, 52.626)), (' A 228  HIS  HB2', ' A1106  HOH  O  ', -0.479, (-6.423, 15.129, 33.249)), (' B 481  ASN  O  ', ' B 483  VAL HG23', -0.474, (36.209, 39.003, 2.9)), (' A  26  LYS  HE2', ' A1002  NAG  HN2', -0.472, (30.786, 19.314, 21.852)), (' A1002  NAG  O3 ', ' A1002  NAG  O7 ', -0.467, (31.635, 19.743, 25.459)), (' B 393  THR HG21', ' B 518  LEU  H  ', -0.466, (72.908, 33.042, 30.907)), (' A 238  GLU  HG2', ' A 604  VAL HG12', -0.464, (-16.727, 21.265, 50.551)), (' A 432  ASN  ND2', ' A1109  HOH  O  ', -0.463, (-4.837, 16.651, 68.253)), (' B 384  PRO  HA ', ' B 387  LEU HD12', -0.457, (61.695, 34.339, 44.534)), (' A 173  GLY  HA3', ' A1144  HOH  O  ', -0.455, (-8.733, 47.664, 37.241)), (' B 450  ASN  ND2', ' B 701  HOH  O  ', -0.453, (39.976, 51.834, 26.748)), (' A 212  VAL HG21', ' A 565  PRO  HG3', -0.453, (15.483, 15.461, 26.645)), (' B 359  SER  HA ', ' B 524  VAL HG22', -0.453, (69.658, 41.733, 34.55)), (' A 321  PRO  HD2', ' A 380  GLN  OE1', -0.45, (25.004, 28.585, 46.85)), (' A 291  ILE  HA ', ' A 291  ILE HD12', -0.45, (5.492, 29.181, 65.319)), (' A 288  LYS  HZ2', ' A 433  GLU  HB2', -0.449, (-1.493, 22.12, 70.913)), (' A 293  VAL  O  ', ' A 297  MET  HG2', -0.446, (9.002, 37.197, 64.094)), (' A 293  VAL HG23', ' A 297  MET  HE3', -0.441, (9.603, 35.302, 62.29)), (' A  73  LEU  HA ', ' A  73  LEU HD12', -0.439, (20.263, 36.683, 19.533)), (' A 134  ASN  HB2', ' A 140  GLU  CD ', -0.439, (-6.755, 58.949, 51.876)), (' A 388  GLN  HG3', ' A 392  LEU  HB2', -0.438, (23.51, 25.221, 29.908)), (' A 310  GLU  HG3', ' A1155  HOH  O  ', -0.434, (19.297, 31.477, 59.823)), (' A 187  LYS  NZ ', ' A 509  ASP  OD2', -0.425, (5.747, 40.627, 27.704)), (' A 309  LYS  O  ', ' A 313  LYS  HG3', -0.424, (23.221, 33.901, 57.994)), (' A 403  ALA  HA ', ' A 518  ARG  HG3', -0.424, (8.737, 26.608, 42.894)), (' A 245  ARG  HD2', ' A1163  HOH  O  ', -0.422, (-18.179, 27.502, 55.233)), (' A 119  ILE HG21', ' A 183  TYR  HB2', -0.422, (0.158, 46.112, 26.339)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.422, (55.431, 40.509, 28.496)), (' A 403  ALA  HA ', ' A 518  ARG  HG2', -0.419, (8.833, 25.788, 43.357)), (' A 131  LYS  HB2', ' A 131  LYS  HE2', -0.418, (-1.541, 58.744, 43.636)), (' B 391  CYS  HB3', ' B 522  ALA  HB1', -0.417, (73.763, 35.787, 37.649)), (' B 481  ASN  N  ', ' B 481  ASN  OD1', -0.415, (35.928, 35.475, 3.02)), (' A 181  GLU  OE1', ' A 470  LYS  CE ', -0.413, (-10.528, 46.197, 23.484)), (' A 187  LYS  HD2', ' A 199  TYR  CE1', -0.41, (3.899, 38.127, 24.948)), (' A 168  TRP  CD1', ' A 502  SER  HB2', -0.41, (-5.142, 46.307, 41.794)), (' A 229  THR  OG1', ' A 581  VAL  HB ', -0.406, (-1.432, 16.864, 41.362)), (' A 237  TYR  CZ ', ' A 451  PRO  HG2', -0.405, (-9.243, 27.232, 46.419)), (' B 425  LEU HD21', ' B 512  VAL HG11', -0.405, (55.124, 32.842, 32.005)), (' A 492  PRO  HD3', ' A 613  TYR  CD2', -0.405, (-22.262, 44.403, 43.179)), (' A 318  VAL  O  ', ' A 551  GLY  HA3', -0.405, (23.795, 20.834, 50.979)), (' A 535  HIS  CG ', ' A 536  GLU  N  ', -0.404, (13.045, 12.812, 58.973)), (' A 165  TRP  CH2', ' A 490  PRO  HD2', -0.401, (-14.171, 42.993, 44.487)), (' B 392  PHE  HB3', ' B 516  GLU  O  ', -0.401, (69.216, 34.27, 33.829)), (' A 381  TYR  CD2', ' A 404  VAL HG21', -0.4, (16.496, 26.236, 41.385))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
