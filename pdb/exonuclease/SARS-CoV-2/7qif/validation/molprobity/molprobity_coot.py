# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('D', ' 369 ', 'SER', 0.0, (-18.30067, 6.678160000000002, 14.433810000000001)), ('D', ' 375 ', 'ASP', 0.01597480824507571, (-23.52463, 5.18917, 21.81791)), ('D', ' 455 ', 'HIS', 0.021959770824121743, (-32.40124, -32.05043, 48.3358))]
data['omega'] = []
data['rota'] = [('D', '  29 ', 'VAL', 0.06709341274471865, (-5.257280000000001, -37.67302, -8.73641)), ('D', '  66 ', 'VAL', 0.0, (-10.20903, -47.85922, -3.93747)), ('D', '  94 ', 'CYS', 0.2792318162348693, (22.922479999999993, -29.65788, 3.5286200000000005)), ('D', ' 152 ', 'LEU', 0.03299009578103144, (17.20014, -28.1084, 18.09117)), ('D', ' 191 ', 'GLU', 0.18259888343451097, (11.04427, -32.98592, 0.37596)), ('D', ' 231 ', 'ILE', 0.0, (6.710380000000001, -47.33865, 19.88942)), ('D', ' 345 ', 'ASP', 0.21145161119216307, (-33.387070000000016, -5.644640000000002, 35.87106)), ('D', ' 389 ', 'VAL', 0.18964778595227136, (-10.17411, -5.33862, 21.48467000000001))]
data['cbeta'] = []
data['probe'] = [(' D 433  LYS  NZ ', ' D 701  HOH  O  ', -0.694, (1.301, -12.769, 31.738)), (' D 405  VAL HG21', ' D 505  GLY  HA2', -0.669, (-5.015, -20.503, 28.754)), (' D  65  GLN  CD ', ' D  67  ASN  H  ', -0.61, (-7.676, -47.788, -2.54)), (' D  29  VAL HG13', ' D  52  ARG  HB2', -0.581, (-3.585, -39.77, -11.327)), (' D 428  THR  OG1', ' D 601  GTG  N2A', -0.543, (-9.468, -17.686, 20.266)), (' D 335  PRO  HB3', ' D 352  ASP  HB3', -0.515, (-23.77, -9.06, 15.067)), (' D 339  LYS  HE2', ' D 348  TRP  HB3', -0.474, (-31.042, -7.374, 27.466)), (' D 454  SER  OG ', ' D 455  HIS  N  ', -0.467, (-30.781, -31.871, 50.525)), (' D 329  LEU HD22', ' D 348  TRP  CE2', -0.458, (-26.235, -7.922, 28.849)), (' D 468  LEU HD23', ' D 483  VAL HG11', -0.454, (-19.421, -23.663, 51.509)), (' D 102  GLY  C  ', ' D 104  ASN  H  ', -0.449, (22.626, -37.407, -3.635)), (' D 374  SER  O  ', ' D 376  LYS  N  ', -0.44, (-24.46, 5.906, 23.632)), (' D 362  LYS  O  ', ' D 365  GLU  HG2', -0.439, (-11.949, -0.527, 16.941)), (' D 400  ARG  HG2', ' D 436  PHE  HZ ', -0.437, (-7.135, -10.361, 26.825)), (' D 465  TYR  CZ ', ' D 467  PRO  HA ', -0.435, (-19.199, -28.803, 55.164)), (' D 454  SER  HA ', ' D 486  HIS  HB2', -0.426, (-28.542, -28.385, 49.499)), (' D 310  ARG  HD3', ' D 601  GTG  O1G', -0.418, (-22.787, -21.303, 25.556)), (' D 374  SER  C  ', ' D 376  LYS  H  ', -0.417, (-24.955, 5.345, 23.475)), (' D 109  LEU HD21', ' D 159  TRP  CH2', -0.413, (14.414, -37.847, 5.75)), (' D 500  MET  HB2', ' D 500  MET  HE2', -0.407, (-12.348, -28.14, 34.945))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
