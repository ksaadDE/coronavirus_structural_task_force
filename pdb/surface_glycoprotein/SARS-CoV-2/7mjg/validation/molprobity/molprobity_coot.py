# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' C  46  SER  HA ', ' C 279  TYR  O  ', -0.689, (198.473, 234.107, 218.066)), (' B  46  SER  HA ', ' B 279  TYR  O  ', -0.681, (231.835, 183.609, 215.409)), (' A 570  ALA  HB1', ' B 963  VAL HG11', -0.668, (215.524, 184.831, 217.875)), (' A 105  ILE  HB ', ' A 239  GLN  HB2', -0.643, (171.249, 158.009, 246.823)), (' B 901  GLN HE21', ' B 905  ARG HH21', -0.625, (207.519, 185.825, 169.782)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.624, (226.546, 179.031, 259.798)), (' C  51  THR  O  ', ' C 274  THR  HA ', -0.622, (186.944, 226.037, 226.654)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.6, (257.345, 197.368, 232.431)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.594, (236.351, 187.8, 244.73)), (' A  94  SER  HB2', ' A 190  ARG  HB2', -0.589, (163.106, 160.448, 233.46)), (' B 317  ASN  ND2', ' C 737  ASP  OD2', -0.589, (218.622, 212.062, 218.032)), (' B 393  THR  HB ', ' B 522  ALA  HA ', -0.57, (204.49, 231.008, 244.731)), (' C 127  VAL HG21', ' C1302  NAG  H62', -0.562, (188.791, 249.918, 255.009)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.553, (248.653, 180.798, 252.983)), (' C 418  ILE  HA ', ' C 422  ASN HD22', -0.552, (195.748, 179.911, 259.942)), (' B 418  ILE  HA ', ' B 422  ASN HD22', -0.551, (184.896, 214.172, 260.79)), (' B 762  GLN  OE1', ' B 765  ARG  NH1', -0.55, (189.999, 188.645, 213.021)), (' C 143  VAL  HA ', ' C 154  GLU  HA ', -0.541, (180.751, 261.189, 250.329)), (' B 105  ILE  O  ', ' B 238  PHE  HA ', -0.534, (245.122, 196.836, 246.663)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.533, (171.379, 141.714, 238.005)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.529, (162.326, 250.94, 240.288)), (' C 821  LEU HD11', ' C 939  SER  HB3', -0.523, (199.845, 231.859, 185.986)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.521, (234.504, 199.227, 216.593)), (' B 276  LEU  HB3', ' B 289  VAL  HB ', -0.521, (232.431, 195.888, 217.547)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.52, (163.364, 171.617, 246.605)), (' B 357  ARG  NH1', ' B 396  TYR  OH ', -0.518, (196.766, 231.662, 249.548)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.516, (171.71, 184.431, 186.139)), (' C 323  THR  OG1', ' C 324  GLU  OE1', -0.512, (162.293, 211.402, 231.922)), (' B 360  ASN  H  ', ' B 523  THR  HB ', -0.508, (206.032, 234.05, 249.994)), (' B 821  LEU HD11', ' B 939  SER  HB2', -0.508, (227.476, 183.493, 186.283)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.503, (198.799, 166.767, 187.216)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.502, (172.93, 149.902, 229.728)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.5, (230.232, 166.673, 283.187)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.499, (184.677, 166.753, 216.77)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.499, (166.181, 248.913, 239.588)), (' C  46  SER  CA ', ' C 279  TYR  O  ', -0.497, (199.213, 233.776, 218.26)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.497, (177.556, 228.67, 217.703)), (' A 127  VAL HG21', ' A1302  NAG  H62', -0.495, (158.228, 165.781, 252.128)), (' C 226  LEU  HG ', ' C 227  VAL HG23', -0.494, (193.274, 242.051, 242.073)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.493, (189.603, 190.735, 173.45)), (' C 278  LYS  HE3', ' C 287  ASP  HB2', -0.492, (191.41, 235.927, 217.081)), (' A  46  SER  HA ', ' A 279  TYR  O  ', -0.492, (169.458, 182.203, 216.768)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.49, (182.868, 229.31, 217.433)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.489, (196.879, 213.498, 173.514)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.488, (181.696, 170.923, 216.582)), (' A 566  GLY  N  ', ' A 575  ALA  O  ', -0.488, (224.082, 176.822, 225.927)), (' A 192  PHE  HA ', ' A 204  TYR  O  ', -0.488, (167.832, 168.12, 234.649)), (' C 128  ILE HD13', ' C 170  TYR  HD2', -0.488, (192.392, 242.965, 248.873)), (' C  27  ALA  HB3', ' C  64  TRP  HB3', -0.486, (168.243, 246.038, 231.671)), (' C 142  GLY  HA3', ' C 156  GLU  HB3', -0.482, (176.913, 258.588, 252.114)), (' B  46  SER  CA ', ' B 279  TYR  O  ', -0.481, (231.072, 182.968, 215.695)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.479, (219.605, 191.209, 166.552)), (' C  36  VAL HG13', ' C 222  ALA  HA ', -0.479, (188.744, 239.218, 227.269)), (' B  93  ALA  HB3', ' B 266  TYR  HB2', -0.477, (249.937, 195.953, 231.727)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.476, (213.163, 193.377, 142.16)), (' B1048  HIS  HA ', ' B1066  THR HG22', -0.476, (213.219, 195.816, 173.526)), (' C 916  LEU HD22', ' C 923  ILE HD13', -0.473, (199.938, 219.853, 161.734)), (' B  94  SER  HB3', ' B 190  ARG  HB2', -0.473, (251.27, 189.166, 234.341)), (' B  36  VAL HG23', ' B 222  ALA  HA ', -0.473, (240.092, 189.07, 225.479)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.471, (236.354, 204.714, 216.947)), (' C 360  ASN  H  ', ' C 523  THR  HB ', -0.468, (167.508, 187.572, 249.859)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.467, (216.414, 171.526, 273.57)), (' B  26  PRO  HB3', ' B  65  PHE  HE1', -0.465, (253.601, 205.052, 237.755)), (' A 139  PRO  HB3', ' A 159  VAL  HA ', -0.464, (166.011, 154.786, 251.872)), (' C 103  GLY  HA3', ' C 119  ILE  O  ', -0.462, (183.271, 246.684, 247.866)), (' B  27  ALA  HB3', ' B  64  TRP  HB3', -0.461, (255.411, 203.657, 232.113)), (' A 164  ASN  OD1', ' A 165  ASN  N  ', -0.46, (170.914, 165.632, 262.511)), (' C 195  LYS  O  ', ' C 201  PHE  HA ', -0.459, (186.707, 233.09, 243.453)), (' B 132  GLU  OE1', ' B 165  ASN  ND2', -0.458, (238.231, 192.977, 263.677)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.458, (171.346, 145.801, 237.485)), (' B 866  THR  H  ', ' B 869  MET  HE3', -0.457, (205.734, 173.821, 193.575)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.453, (195.307, 230.586, 231.555)), (' C  93  ALA  HB3', ' C 266  TYR  HB2', -0.452, (177.34, 244.29, 232.62)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.448, (173.418, 180.904, 230.119)), (' B 125  ASN HD22', ' B 171  VAL HG13', -0.445, (246.488, 177.426, 249.69)), (' A 756  TYR  OH ', ' A 994  ASP  OD1', -0.443, (195.394, 205.361, 230.762)), (' B 377  PHE  HE2', ' B 384  PRO  HB3', -0.443, (209.652, 214.469, 253.843)), (' A 903  ALA  HB1', ' A 913  GLN  HG2', -0.443, (186.182, 196.486, 158.786)), (' B 518  LEU HD21', ' B 546  LEU HD13', -0.442, (208.428, 224.397, 235.941)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.441, (229.165, 217.11, 187.745)), (' C 144  TYR  N  ', ' C 153  MET  O  ', -0.44, (179.605, 263.621, 250.206)), (' B  52  GLN  OE1', ' B 274  THR  OG1', -0.439, (227.238, 200.234, 225.406)), (' B 193  VAL HG23', ' B 223  LEU HD22', -0.439, (241.211, 191.047, 232.35)), (' C 724  THR HG23', ' C 934  ILE HD12', -0.437, (197.306, 223.128, 181.529)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.437, (187.67, 192.098, 142.136)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.436, (181.339, 186.668, 181.792)), (' A 189  LEU  HB3', ' A 208  THR  HB ', -0.436, (161.674, 163.029, 226.869)), (' A  14  GLN  HB3', ' A 158  ARG  HE ', -0.435, (161.46, 148.914, 257.282)), (' B 995  ARG  NH2', ' C 994  ASP  OD2', -0.43, (206.68, 200.485, 232.592)), (' C 442  ASP  OD2', ' C 509  ARG  NE ', -0.43, (184.405, 188.382, 270.219)), (' B 756  TYR  OH ', ' B 994  ASP  OD1', -0.429, (197.525, 193.643, 230.727)), (' C 555  SER  HB3', ' C 586  ASP  HB2', -0.429, (161.118, 194.997, 224.803)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.428, (262.397, 205.734, 241.047)), (' B 191  GLU  O  ', ' B 205  SER  HA ', -0.428, (243.98, 187.457, 233.615)), (' A 193  VAL  HB ', ' A 204  TYR  HB2', -0.428, (170.837, 169.98, 234.134)), (' B  16  VAL  HB ', ' B 140  PHE  HZ ', -0.427, (261.429, 195.596, 254.305)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.426, (223.955, 190.335, 181.032)), (' C  64  TRP  HH2', ' C 214  ARG  HG2', -0.425, (170.759, 251.359, 227.544)), (' A 374  PHE  HA ', ' A 436  TRP  HB3', -0.425, (218.645, 166.558, 271.385)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.424, (199.244, 214.704, 142.159)), (' A 324  GLU  OE2', ' A 537  LYS  NZ ', -0.424, (209.608, 159.503, 230.074)), (' B  39  PRO  HG2', ' B  51  THR HG21', -0.423, (230.432, 191.048, 226.673)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.423, (181.605, 226.015, 200.859)), (' A 544  ASN HD21', ' A 579  PRO  HB3', -0.421, (225.718, 172.876, 236.968)), (' B 907  ASN  ND2', ' B 911  VAL  O  ', -0.421, (209.458, 195.019, 159.401)), (' C1086  LYS  HB2', ' C1086  LYS  HE2', -0.421, (185.573, 194.189, 140.914)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.421, (182.105, 190.049, 174.397)), (' A 996  LEU  HA ', ' A 996  LEU HD23', -0.419, (189.249, 198.091, 229.502)), (' C1139  ASP  HB3', ' C1142  GLN  HB2', -0.419, (191.231, 201.961, 134.151)), (' B 412  PRO  HG3', ' B 429  PHE  HB3', -0.419, (195.519, 214.499, 248.56)), (' C 393  THR  HB ', ' C 522  ALA  HA ', -0.418, (170.86, 187.966, 244.601)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.418, (199.829, 220.774, 174.261)), (' A1029  MET  HB2', ' A1029  MET  HE2', -0.418, (186.041, 201.192, 184.257)), (' C 986  PRO  HA ', ' C 989  ALA  HB3', -0.418, (211.663, 208.487, 240.269)), (' C  52  GLN  HB2', ' C 274  THR HG22', -0.418, (186.509, 222.632, 227.365)), (' B 342  PHE  HB2', ' B1307  NAG  H82', -0.417, (207.099, 223.707, 263.947)), (' A 276  LEU  HB3', ' A 289  VAL  HB ', -0.415, (179.378, 174.856, 218.278)), (' A 528  LYS  HA ', ' A 528  LYS  HD3', -0.415, (218.762, 171.8, 246.323)), (' C  97  LYS  HG2', ' C 186  PHE  HD1', -0.414, (178.379, 257.592, 233.674)), (' B 156  GLU  OE2', ' B 246  ARG  NH2', -0.414, (264.461, 192.17, 253.429)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.413, (217.636, 189.511, 174.428)), (' A 903  ALA  HB2', ' A 916  LEU HD12', -0.412, (183.413, 194.911, 159.744)), (' B 324  GLU  H  ', ' B 539  VAL HG12', -0.412, (226.558, 226.528, 231.582)), (' B 977  LEU HD22', ' B 993  ILE HG12', -0.411, (204.408, 186.064, 233.102)), (' A 569  ILE  HA ', ' B  47  VAL HG21', -0.411, (223.79, 184.866, 217.288)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.411, (259.119, 203.706, 239.86)), (' B 206  LYS  NZ ', ' B 224  GLU  OE2', -0.411, (242.341, 181.427, 227.855)), (' C  48  LEU  HB3', ' C 276  LEU HD11', -0.411, (192.458, 227.479, 218.757)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.41, (226.513, 170.414, 276.586)), (' B 724  THR HG23', ' B 934  ILE HD12', -0.407, (221.211, 190.876, 181.626)), (' C 377  PHE  HE2', ' C 384  PRO  HB3', -0.407, (182.497, 201.012, 253.85)), (' B 105  ILE  HB ', ' B 239  GLN  HB3', -0.407, (248.453, 197.006, 248.22)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.407, (189.529, 195.249, 261.306)), (' B 885  GLY  HA2', ' B 901  GLN  NE2', -0.405, (207.432, 184.134, 169.103)), (' A 382  VAL HG21', ' A 515  PHE  HE2', -0.405, (215.806, 179.179, 260.343)), (' B  39  PRO  HG3', ' B  55  PHE  HZ ', -0.404, (232.078, 192.173, 227.718)), (' C  16  VAL  HB ', ' C 140  PHE  HZ ', -0.403, (170.409, 254.588, 255.092)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.402, (186.584, 168.784, 207.247)), (' B 900  MET  HB3', ' B 900  MET  HE2', -0.4, (208.061, 184.45, 158.966)), (' B 127  VAL HG22', ' B 171  VAL HG22', -0.4, (245.781, 180.0, 250.768))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
