# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.015749143203907932, (6.871359999999992, -51.66263, 13.25358)), ('A', ' 303 ', 'VAL', 0.03934506108826753, (20.397089999999995, -34.83368, 8.75794))]
data['omega'] = []
data['rota'] = [('A', ' 128 ', 'CYS', 0.054982847064842785, (-4.85911, -36.56678, 7.30352))]
data['cbeta'] = [('A', '  55 ', 'GLU', ' ', 0.2847811443002334, (-33.46731, -50.65912, 18.03281))]
data['probe'] = [(' A 290  GLU  OE1', ' A 501  HOH  O  ', -0.984, (-3.68, -33.208, 6.637)), (' A   3  PHE  CE1', ' A 299  GLN  HG2', -0.878, (9.224, -33.797, 6.661)), (' A  53  ASN  OD1', ' A  55  GLU  OE1', -0.827, (-34.132, -48.273, 16.308)), (' A 276  MET  CE ', ' A 281  ILE HG13', -0.82, (7.053, -19.796, 5.123)), (' A 128 ACYS  HA ', ' A 501  HOH  O  ', -0.82, (-4.068, -34.365, 6.562)), (' A 169  THR  CG2', ' A 171  VAL HG22', -0.794, (-17.245, -29.63, 6.731)), (' A 107  GLN  H  ', ' A 110  GLN HE21', -0.768, (-4.466, -38.969, 18.985)), (' A 294  PHE  HE1', ' A 298  ARG  NH2', -0.754, (5.741, -42.419, 12.974)), (' A  55  GLU  CD ', ' A  55  GLU  H  ', -0.724, (-32.63, -48.497, 16.72)), (' A  50  LEU  O  ', ' A  50  LEU HD23', -0.693, (-33.039, -37.7, 9.814)), (' A  83  GLN  HB2', ' A  88  ARG HH21', -0.683, (-20.386, -54.392, 18.589)), (' A 169  THR HG23', ' A 171  VAL HG22', -0.664, (-16.522, -29.418, 6.741)), (' A   8  PHE  HE2', ' A 151  ASN HD22', -0.651, (0.788, -43.228, 10.678)), (' A 288  GLU  HG2', ' A 291  PHE  HE1', -0.638, (2.596, -29.951, 6.447)), (' A 276  MET  HE1', ' A 281  ILE HG13', -0.638, (6.609, -20.193, 5.795)), (' A  55  GLU  N  ', ' A  55  GLU  OE1', -0.629, (-33.052, -49.613, 15.989)), (' A  63  ASN  OD1', ' A  80  HIS  HD2', -0.624, (-26.973, -62.505, 11.793)), (' A 257  THR  O  ', ' A 259  ILE HD12', -0.611, (18.357, -25.081, 16.657)), (' A 226  THR  OG1', ' A 229  ASP  OD2', -0.601, (4.631, -13.83, 28.371)), (' A 264 BMET  HE3', ' A 267  ALA  HB3', -0.598, (9.901, -19.452, 15.6)), (' A 165  MET  HE1', ' A 186  VAL  O  ', -0.594, (-24.126, -38.914, 11.9)), (' A 288  GLU  HG2', ' A 291  PHE  CE1', -0.591, (3.314, -29.66, 6.459)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.586, (-10.74, -62.458, 6.095)), (' A  56  ASP  O  ', ' A  60  ARG  HG3', -0.575, (-36.346, -53.709, 12.346)), (' A 106  ILE HG23', ' A 160  CYS  HB2', -0.574, (-6.89, -42.768, 15.812)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.564, (5.125, -51.839, 14.349)), (' A 169  THR HG21', ' A 543  HOH  O  ', -0.564, (-16.293, -27.52, 8.21)), (' A  90  LYS  HD2', ' A  90  LYS  N  ', -0.562, (-19.648, -61.454, 12.603)), (' A 303  VAL  O  ', ' A 303  VAL HG12', -0.558, (19.883, -33.025, 7.389)), (' A 165  MET  HE3', ' A 181  PHE  CE1', -0.556, (-20.444, -39.762, 11.865)), (' A  45  THR  H  ', ' A  48  ASP  HB2', -0.552, (-32.996, -46.936, 4.982)), (' A 294  PHE  CE1', ' A 298  ARG  NH2', -0.551, (5.258, -41.712, 13.623)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.534, (7.086, -19.436, 6.333)), (' A 186  VAL HG23', ' A 188  ARG  HG2', -0.533, (-27.472, -38.749, 13.434)), (' A 230  PHE  O  ', ' A 233  VAL HG22', -0.532, (0.441, -15.714, 21.015)), (' A 298  ARG  HG3', ' A 299  GLN  N  ', -0.524, (9.256, -39.015, 9.49)), (' A 294  PHE  HE1', ' A 298  ARG  CZ ', -0.52, (5.741, -41.926, 12.875)), (' A 107  GLN  H  ', ' A 110  GLN  NE2', -0.519, (-4.595, -39.471, 18.963)), (' A 301  SER  O  ', ' A 303  VAL HG23', -0.497, (18.792, -37.689, 8.451)), (' A  50  LEU  C  ', ' A  50  LEU HD23', -0.493, (-33.503, -38.343, 9.536)), (' A 298  ARG  HG3', ' A 299  GLN  H  ', -0.488, (8.638, -38.928, 9.65)), (' A 100  LYS  HB3', ' A 100  LYS  HE2', -0.465, (0.574, -56.692, 16.011)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.464, (-27.295, -49.989, 9.278)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.46, (-19.336, -49.522, 6.115)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.456, (-10.334, -61.614, 6.098)), (' A 106  ILE HG23', ' A 160  CYS  CB ', -0.449, (-6.572, -43.428, 15.391)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.446, (-2.699, -53.329, 14.157)), (' A 108  PRO  HB2', ' A 511  HOH  O  ', -0.438, (-7.188, -31.41, 19.633)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.432, (-24.099, -47.971, 14.774)), (' A 257  THR  HB ', ' A 259  ILE  CD1', -0.43, (16.912, -25.562, 16.036)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.43, (-35.632, -54.317, 14.082)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.427, (-6.425, -44.111, 7.709)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.424, (-23.907, -51.704, 10.763)), (' A 153  ASP  O  ', ' A 154  TYR  CB ', -0.421, (5.737, -51.711, 14.634)), (' A 298  ARG  HD2', ' A 402  EDO  H11', -0.421, (6.12, -41.197, 8.414)), (' A 151  ASN  ND2', ' A 505  HOH  O  ', -0.42, (0.689, -41.397, 11.708)), (' A 206  ALA  HB2', ' A 293  PRO  HG3', -0.417, (5.518, -30.953, 16.6)), (' A 102  LYS  HG3', ' A 156  CYS  SG ', -0.414, (-0.869, -53.031, 17.077)), (' A  67  LEU  CD1', ' A  74  GLN  NE2', -0.41, (-23.191, -62.83, -1.396)), (' A  83  GLN  HB2', ' A  88  ARG  NH2', -0.41, (-19.765, -54.672, 19.207)), (' A 219  PHE  HE1', ' A 264 BMET  HE1', -0.404, (11.687, -21.21, 13.235))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
