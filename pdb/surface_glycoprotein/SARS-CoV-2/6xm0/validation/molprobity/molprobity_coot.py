# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 521 ', 'PRO', 0.013554756314414825, (155.929, 173.954, 161.413)), ('A', ' 563 ', 'GLN', 0.033584500791507245, (152.122, 172.787, 170.095)), ('B', ' 165 ', 'ASN', 0.012946117242730384, (141.51399999999995, 189.218, 139.93400000000003)), ('B', ' 521 ', 'PRO', 0.00301368, (198.29, 215.829, 154.50900000000001)), ('B', '1143 ', 'PRO', 0.059274420482915154, (178.302, 191.894, 274.399)), ('C', ' 620 ', 'VAL', 0.04167784825508561, (225.202, 191.707, 187.33)), ('C', '1071 ', 'GLN', 0.038847712735244636, (209.66800000000006, 200.103, 241.60800000000006))]
data['omega'] = []
data['rota'] = [('A', ' 603 ', 'ASN', 0.0023723046449534812, (198.938, 150.155, 198.541)), ('B', ' 129 ', 'LYS', 0.0, (139.153, 185.784, 150.25)), ('B', ' 131 ', 'CYS', 0.08444968474260368, (140.547, 190.80300000000005, 146.729)), ('B', ' 350 ', 'VAL', 0.26899324812388015, (194.285, 219.948, 124.00900000000003)), ('B', ' 622 ', 'VAL', 0.2980450633321288, (161.716, 215.754, 182.68000000000004)), ('B', ' 840 ', 'CYS', 0.2492464568411356, (162.43, 165.131, 192.26100000000002)), ('B', ' 878 ', 'LEU', 0.25145711214508204, (171.188, 169.222, 227.784)), ('C', '  33 ', 'THR', 0.11834778679676769, (217.265, 219.441, 181.791)), ('C', '  63 ', 'THR', 0.29684286178053365, (227.569, 218.627, 169.508)), ('C', ' 114 ', 'THR', 0.10696436790156039, (213.998, 214.886, 145.118)), ('C', ' 319 ', 'ARG', 0.0, (217.392, 189.995, 181.815)), ('C', ' 382 ', 'VAL', 0.16357125682043283, (201.939, 179.599, 156.411)), ('C', ' 389 ', 'ASP', 0.12653485275658877, (213.37399999999994, 179.476, 156.386)), ('C', ' 581 ', 'THR', 0.27113788064530236, (226.87, 166.361, 164.28000000000003)), ('C', ' 588 ', 'THR', 0.05847714492119849, (218.317, 176.526, 179.599))]
data['cbeta'] = [('B', ' 657 ', 'ASN', ' ', 0.26259551631708605, (157.788, 217.518, 213.22900000000004))]
data['probe'] = [(' C 318  PHE  HZ ', ' C 615  VAL HG21', -0.707, (219.339, 188.19, 188.08)), (' B 357  ARG HH22', ' B 394  ASN  HA ', -0.7, (197.456, 217.707, 144.216)), (' C 318  PHE  CZ ', ' C 615  VAL HG21', -0.698, (219.086, 188.181, 188.079)), (' C 599  THR HG22', ' C 601  GLY  H  ', -0.697, (214.354, 207.79, 200.574)), (' B 400  PHE  H  ', ' B 509  ARG  HD2', -0.649, (188.647, 223.305, 128.451)), (' C 630  THR HG22', ' C 632  THR  H  ', -0.647, (223.884, 208.149, 183.287)), (' B 188  ASN  HA ', ' B 209  PRO  HA ', -0.612, (129.752, 183.713, 177.397)), (' C 389  ASP  N  ', ' C 389  ASP  OD1', -0.578, (211.616, 180.866, 155.617)), (' B 901  GLN HE21', ' B 905  ARG  HE ', -0.577, (174.0, 175.119, 236.296)), (' B 140  PHE  HZ ', ' B 248  TYR  H  ', -0.575, (121.004, 195.568, 150.687)), (' A 128  ILE  HB ', ' A 170  TYR  HB3', -0.572, (205.992, 150.003, 148.672)), (' A 619  GLU  OE1', ' B 847  ARG  NH2', -0.571, (162.746, 152.446, 189.893)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.562, (141.118, 192.573, 155.11)), (' A 530  SER  HG ', ' A 580  GLN HE22', -0.561, (158.578, 159.754, 157.39)), (' A  91  TYR  OH ', ' A 191  GLU  OE1', -0.559, (201.229, 142.099, 170.337)), (' A 353  TRP  O  ', ' A 466  ARG  NH2', -0.558, (159.079, 191.878, 142.521)), (' C 422  ASN HD21', ' C 454  ARG  H  ', -0.557, (185.929, 163.237, 138.176)), (' B 314  GLN  NE2', ' B 316  SER  O  ', -0.552, (167.595, 201.887, 188.855)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.547, (190.659, 153.85, 201.822)), (' B 630  THR HG22', ' B 632  THR  H  ', -0.546, (149.316, 205.226, 184.09)), (' C 318  PHE  CD2', ' C 623  ALA  HB1', -0.542, (220.225, 190.619, 184.724)), (' C 853  GLN  HB3', ' C 858  LEU HD12', -0.539, (183.513, 207.751, 189.194)), (' B 605  SER  OG ', ' B 606  ASN  N  ', -0.538, (149.303, 198.74, 199.534)), (' B 393  THR HG22', ' B 523  THR HG22', -0.532, (194.556, 215.419, 150.587)), (' B 392  PHE  HA ', ' B 517  LEU HD21', -0.53, (191.47, 213.67, 148.515)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.505, (217.522, 170.603, 217.907)), (' C 676  THR HG22', ' C 690  GLN HE22', -0.502, (224.622, 210.358, 210.425)), (' B 402  ILE  O  ', ' B 508  TYR  N  ', -0.501, (183.156, 222.952, 123.0)), (' B 391  CYS  HA ', ' B 525  CYS  HB3', -0.501, (188.029, 217.204, 150.706)), (' C 108  THR  O  ', ' C 237  ARG  NH2', -0.5, (220.349, 212.755, 150.872)), (' C 115  GLN  NE2', ' C 130  VAL  O  ', -0.499, (209.256, 221.128, 146.037)), (' C 190  ARG  HE ', ' C 192  PHE  HE2', -0.499, (215.346, 230.211, 166.171)), (' C 403  ARG  NH1', ' C 405  ASP  OD2', -0.498, (181.985, 175.528, 133.93)), (' A 629  LEU  O  ', ' A 634  ARG  NH1', -0.498, (179.4, 145.659, 178.249)), (' B 376  THR HG21', ' B 408  ARG HH12', -0.498, (175.335, 215.648, 130.105)), (' B 310  LYS  HG3', ' B 600  PRO  HA ', -0.498, (156.939, 197.708, 203.737)), (' A 940  SER  OG ', ' A 941  THR  N  ', -0.496, (204.685, 156.885, 214.679)), (' A 577  ARG  HD3', ' A 582  LEU HD13', -0.495, (151.193, 166.047, 166.147)), (' A 122  ASN  HB3', ' A 124  THR HG22', -0.495, (214.181, 138.792, 149.669)), (' C 293  LEU HD12', ' C 630  THR HG21', -0.494, (221.109, 209.41, 182.874)), (' B  66  HIS  HD2', ' B  68  ILE HG12', -0.493, (123.663, 203.181, 170.269)), (' B1127  ASP  N  ', ' B1127  ASP  OD1', -0.492, (194.08, 210.286, 258.625)), (' A  99  ASN  O  ', ' A 102  ARG  NH2', -0.491, (208.835, 133.144, 155.78)), (' B1141  LEU HD13', ' C1141  LEU HD23', -0.49, (187.212, 187.943, 270.061)), (' B 349  SER  HA ', ' B 401  VAL HG12', -0.488, (191.706, 223.757, 123.258)), (' A 855  PHE  CZ ', ' C 589  PRO  HD2', -0.487, (216.296, 177.36, 182.367)), (' B 280  ASN HD21', ' B1302  NAG  H82', -0.483, (146.48, 175.102, 185.76)), (' C1127  ASP  N  ', ' C1127  ASP  OD1', -0.476, (204.921, 166.982, 258.029)), (' A 930  ALA  HA ', ' A 933  LYS  HE2', -0.475, (202.263, 161.731, 229.352)), (' A 370  ASN  O  ', ' C 417  LYS  NZ ', -0.474, (177.585, 168.854, 138.749)), (' C1138  TYR  OH ', ' C1144  GLU  OE1', -0.474, (197.539, 191.37, 270.714)), (' C 858  LEU HD13', ' C 959  LEU HD22', -0.473, (184.461, 204.809, 190.678)), (' C 133  PHE  HE1', ' C 161  SER  HA ', -0.468, (216.703, 229.279, 145.716)), (' B 358  ILE  HB ', ' B 395  VAL  HB ', -0.466, (193.579, 221.275, 143.427)), (' B 140  PHE  CG ', ' B 244  LEU  HB2', -0.464, (122.28, 194.706, 155.593)), (' B 832  GLY  H  ', ' B 960  ASN HD21', -0.463, (165.106, 179.808, 192.532)), (' B 462  LYS  HD2', ' B 463  PRO  HD2', -0.46, (197.237, 206.472, 130.961)), (' A 332  ILE HD12', ' A 360  ASN HD21', -0.459, (153.416, 168.858, 152.2)), (' A 853  GLN  HB2', ' A 858  LEU HD12', -0.458, (205.9, 178.501, 188.198)), (' A 443  SER  OG ', ' A 444  LYS  N  ', -0.457, (173.985, 190.671, 123.234)), (' B 129  LYS  HG3', ' B 133  PHE  HZ ', -0.454, (136.616, 187.583, 149.338)), (' C 320  VAL HG22', ' C 623  ALA  HA ', -0.452, (222.578, 189.988, 182.182)), (' A 411  ALA  HB3', ' A 414  GLN  HG3', -0.452, (177.331, 192.249, 150.001)), (' A 131  CYS  HA ', ' A 166  CYS  HA ', -0.451, (198.713, 149.649, 140.116)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.451, (177.046, 184.041, 141.606)), (' A 552  LEU  HB3', ' A 585  LEU HD12', -0.451, (161.055, 158.98, 171.984)), (' C 101  ILE HD13', ' C 242  LEU  HB3', -0.45, (223.072, 229.985, 160.617)), (' A 503  VAL  HA ', ' A 506  GLN  HG3', -0.449, (182.171, 190.196, 130.807)), (' B1071  GLN  H  ', ' B1071  GLN  HG3', -0.447, (162.113, 195.898, 240.458)), (' B 325  SER  HA ', ' B 540  ASN  HB2', -0.446, (173.106, 217.536, 169.478)), (' A1091  ARG  NH1', ' A1118  ASP  O  ', -0.446, (184.52, 181.119, 258.275)), (' C  99  ASN  O  ', ' C 102  ARG  NH2', -0.445, (220.413, 237.314, 160.965)), (' C 129  LYS  HD2', ' C 169  GLU  HG3', -0.445, (207.086, 230.267, 148.035)), (' B 324  GLU  OE1', ' B 537  LYS  NZ ', -0.444, (168.204, 222.335, 174.262)), (' A 530  SER  OG ', ' A 580  GLN  NE2', -0.444, (158.068, 160.476, 158.347)), (' C 563  GLN  O  ', ' C 577  ARG  NH1', -0.443, (216.164, 162.497, 166.482)), (' A 328  ARG  NH2', ' A 531  THR  O  ', -0.442, (159.799, 156.217, 161.666)), (' C  34  ARG  HA ', ' C  34  ARG  HD3', -0.44, (216.188, 222.897, 179.101)), (' C1103  PHE  HZ ', ' P   1  NAG  H62', -0.437, (208.449, 194.087, 260.88)), (' C 726  ILE HG13', ' C1061  VAL HG22', -0.436, (191.679, 205.487, 217.239)), (' C 129  LYS  HG2', ' C 131  CYS  SG ', -0.434, (209.516, 226.826, 146.37)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.432, (163.018, 209.511, 216.984)), (' C 131  CYS  HA ', ' C 166  CYS  HA ', -0.432, (209.097, 223.47, 144.42)), (' B 642  VAL HG22', ' B 651  ILE HG12', -0.43, (157.608, 215.022, 195.059)), (' B 308  VAL  HB ', ' B 602  THR HG23', -0.43, (154.562, 193.308, 196.8)), (' A 422  ASN HD21', ' A 454  ARG  H  ', -0.43, (167.535, 200.97, 139.98)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.425, (193.843, 197.883, 231.858)), (' A 792  PRO  O  ', ' A 795  LYS  NZ ', -0.424, (219.508, 177.071, 233.204)), (' A 393  THR HG23', ' A 521  PRO  HG2', -0.424, (156.55, 177.282, 159.951)), (' A 321  GLN  NE2', ' A 538  CYS  SG ', -0.423, (173.475, 156.314, 175.981)), (' B 375  SER  OG ', ' B 437  ASN  OD1', -0.422, (174.854, 224.17, 129.729)), (' C 134  GLN  O  ', ' C 160  TYR  OH ', -0.421, (220.615, 225.602, 145.353)), (' C  65  PHE  O  ', ' C 264  ALA  N  ', -0.414, (228.62, 227.196, 167.754)), (' A 901  GLN HE21', ' A 905  ARG  HE ', -0.413, (202.749, 179.978, 236.567)), (' B  29  THR  OG1', ' B  30  ASN  N  ', -0.412, (135.242, 199.858, 180.411)), (' B 521  PRO  HB2', ' C 230  PRO  CB ', -0.411, (199.732, 218.315, 154.756)), (' B 703  ASN HD22', ' C 787  GLN  NE2', -0.411, (166.527, 205.884, 230.153)), (' B 423  TYR  HB2', ' B 463  PRO  HA ', -0.41, (195.11, 210.388, 128.391)), (' C 444  LYS  H  ', ' C 447  GLY  HA2', -0.41, (191.689, 171.303, 120.793)), (' A  99  ASN  HB3', ' A 102  ARG  NH2', -0.41, (209.994, 133.445, 156.297)), (' A 470  THR  HB ', ' A 490  PHE  HE1', -0.408, (159.744, 207.463, 134.973)), (' C 574  ASP  N  ', ' C 574  ASP  OD1', -0.407, (212.977, 170.84, 176.469)), (' B 627  ASP  N  ', ' B 627  ASP  OD1', -0.406, (155.976, 213.045, 179.296)), (' A 896  ILE HD13', ' A 904  TYR  HE1', -0.406, (204.227, 183.554, 241.967)), (' A 389  ASP  OD1', ' A 528  LYS  NZ ', -0.406, (170.221, 164.127, 156.599)), (' A 855  PHE  CE2', ' C 589  PRO  HD2', -0.405, (215.752, 177.252, 181.968)), (' B 406  GLU  HG3', ' B 417  LYS  HD2', -0.405, (182.666, 213.838, 118.722)), (' A 931  ILE  HA ', ' A 931  ILE HD13', -0.405, (205.206, 166.809, 227.632)), (' B 290  ASP  N  ', ' B 290  ASP  OD1', -0.405, (151.126, 194.053, 183.568)), (' C 535  LYS  NZ ', ' C 554  GLU  OE2', -0.405, (228.999, 169.681, 173.046)), (' A1307  NAG  O6 ', ' B 847  ARG  NH1', -0.4, (159.426, 150.205, 190.38)), (' A 210  ILE  HA ', ' A 210  ILE HD12', -0.4, (209.209, 136.519, 175.326))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
