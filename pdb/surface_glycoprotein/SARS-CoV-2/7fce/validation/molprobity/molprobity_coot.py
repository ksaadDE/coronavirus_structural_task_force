# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 215 ', 'ASP', 0.03340155288239927, (108.906, 183.614, 162.992)), ('B', ' 215 ', 'ASP', 0.03339960133963351, (162.513, 107.753, 182.573)), ('B', ' 370 ', 'ASN', 0.008453724733074727, (186.777, 160.25300000000004, 191.08499999999995)), ('B', ' 371 ', 'SER', 0.001426199211560959, (188.485, 163.682, 190.67799999999994)), ('C', ' 215 ', 'ASP', 0.03328280703616405, (196.558, 176.90400000000005, 127.15999999999998))]
data['omega'] = []
data['rota'] = [('A', ' 141 ', 'LEU', 0.077952913452806, (117.747, 199.351, 181.03)), ('A', ' 244 ', 'LEU', 0.12914136278661065, (111.793, 199.235, 179.569)), ('A', ' 312 ', 'ILE', 0.024871286332500752, (122.186, 153.692, 145.011)), ('A', ' 331 ', 'ASN', 0.0, (137.497, 148.437, 197.02399999999997)), ('A', ' 372 ', 'THR', 0.16458496247369583, (157.201, 168.187, 199.586)), ('A', ' 493 ', 'GLN', 0.06085137419999931, (184.152, 155.578, 198.933)), ('A', ' 525 ', 'CYS', 0.06183113152660402, (144.515, 152.45, 191.81399999999994)), ('A', ' 563 ', 'GLN', 0.2895025862503727, (144.448, 136.95600000000005, 184.787)), ('A', ' 878 ', 'LEU', 0.05564174533200222, (136.345, 151.106, 102.87199999999997)), ('A', ' 916 ', 'LEU', 0.19353840426221547, (119.864, 138.294, 95.38499999999998)), ('A', '1039 ', 'ARG', 0.20924052732092346, (131.133, 132.379, 113.929)), ('B', ' 312 ', 'ILE', 0.024800376780197864, (156.582, 121.179, 148.228)), ('B', ' 331 ', 'ASN', 0.0, (198.272, 149.539, 168.846)), ('B', ' 452 ', 'LEU', 0.22530635819824574, (185.71699999999996, 188.671, 178.587)), ('B', ' 525 ', 'CYS', 0.06150559713878438, (189.989, 154.24200000000002, 170.17099999999996)), ('B', ' 563 ', 'GLN', 0.283921850986618, (190.929, 155.14, 153.208)), ('B', ' 878 ', 'LEU', 0.05579935166296746, (117.87099999999997, 124.717, 126.506)), ('B', ' 916 ', 'LEU', 0.19313739912069194, (122.157, 109.388, 111.06499999999997)), ('B', '1039 ', 'ARG', 0.2040822820431651, (137.067, 125.74100000000003, 115.08)), ('C', '  14 ', 'GLN', 0.026277881098087288, (209.86, 194.512, 151.51599999999996)), ('C', ' 312 ', 'ILE', 0.024943299381860365, (163.372, 160.42, 122.45999999999998)), ('C', ' 331 ', 'ASN', 0.0, (155.735, 200.312, 158.76099999999994)), ('C', ' 525 ', 'CYS', 0.061674959149210236, (157.259, 191.924, 163.213)), ('C', ' 563 ', 'GLN', 0.2910054148101907, (142.245, 188.472, 155.996)), ('C', ' 878 ', 'LEU', 0.055975963459347085, (155.067, 117.53800000000003, 113.805)), ('C', ' 916 ', 'LEU', 0.19274293100762782, (147.516, 120.48, 93.162)), ('C', '1039 ', 'ARG', 0.20423428467398405, (139.197, 132.832, 110.015))]
data['cbeta'] = []
data['probe'] = [(' C  67  ALA  O  ', ' C 262  ALA  HA ', -0.748, (206.314, 184.135, 132.591)), (' B  67  ALA  O  ', ' B 262  ALA  HA ', -0.735, (166.392, 107.542, 195.188)), (' A 588  THR HG21', ' B 841  LEU HD12', -0.601, (127.302, 141.95, 170.635)), (' B 588  THR HG21', ' C 841  LEU HD12', -0.587, (181.52, 134.66, 150.375)), (' C 391  CYS  HA ', ' C 525  CYS  HA ', -0.586, (156.783, 189.969, 162.506)), (' A 391  CYS  HA ', ' A 525  CYS  HA ', -0.585, (145.106, 152.367, 189.741)), (' A 841  LEU HD12', ' C 588  THR HG21', -0.572, (152.238, 182.361, 136.182)), (' B 391  CYS  HA ', ' B 525  CYS  HA ', -0.568, (188.657, 154.436, 168.725)), (' C 922  LEU HD11', ' d   1  NAG  H5 ', -0.565, (155.966, 128.133, 89.088)), (' B 922  LEU HD11', ' T   1  NAG  H5 ', -0.564, (126.314, 100.853, 118.271)), (' A 331  ASN  N  ', ' A 331  ASN  OD1', -0.558, (136.714, 147.563, 195.55)), (' A 922  LEU HD11', ' J   1  NAG  H5 ', -0.558, (110.641, 144.654, 100.353)), (' C 777  ASN  OD1', ' C1019 BARG  NH1', -0.556, (148.459, 129.628, 131.246)), (' B 331  ASN  N  ', ' B 331  ASN  OD1', -0.555, (197.59, 148.72, 167.057)), (' A 368  LEU  HA ', ' A 371  SER  HB3', -0.544, (153.035, 166.88, 200.646)), (' A 777  ASN  OD1', ' A1019 BARG  NH1', -0.539, (148.097, 147.11, 121.629)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.539, (188.806, 174.308, 172.16)), (' B 777  ASN  OD1', ' B1019 BARG  NH1', -0.538, (132.021, 141.097, 132.248)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.537, (125.681, 139.973, 109.523)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.537, (164.759, 151.258, 196.812)), (' A 787  GLN  OE1', ' C 703  ASN  ND2', -0.537, (149.135, 150.12, 96.358)), (' B1048  HIS  HA ', ' B1066  THR HG22', -0.537, (131.654, 118.315, 118.975)), (' C 331  ASN  N  ', ' C 331  ASN  OD1', -0.537, (154.769, 199.638, 156.799)), (' M   2  NAG  H3 ', ' M   2  NAG  H83', -0.534, (101.674, 95.352, 100.854)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.533, (147.734, 130.253, 105.051)), (' B 703  ASN  ND2', ' C 787  GLN  OE1', -0.533, (149.538, 106.767, 121.117)), (' A 703  ASN  ND2', ' B 787  GLN  OE1', -0.532, (109.319, 135.233, 122.316)), (' g   2  NAG  H3 ', ' g   2  NAG  H83', -0.531, (112.245, 140.842, 69.834)), (' W   2  NAG  H3 ', ' W   2  NAG  H83', -0.53, (150.933, 101.087, 74.922)), (' C 354  ASN  O  ', ' C 398  ASP  HA ', -0.529, (150.15, 187.965, 182.104)), (' A 485  GLY  H  ', ' A 488  CYS  HB2', -0.509, (196.271, 147.556, 197.823)), (' A 716  THR  N  ', ' A1071  GLN  O  ', -0.5, (108.915, 133.434, 105.03)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.497, (177.752, 171.816, 181.613)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.491, (162.68, 180.292, 183.337)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.483, (164.948, 164.953, 190.961)), (' A 216  LEU HD12', ' A 217  PRO  HD2', -0.48, (114.948, 184.763, 161.603)), (' B 108  THR HG22', ' B 109  THR HG23', -0.477, (180.756, 133.643, 192.465)), (' C 108  THR HG22', ' C 109  THR HG23', -0.474, (188.055, 192.605, 155.558)), (' A  96  GLU  OE2', ' A 101  ILE  N  ', -0.472, (116.65, 195.381, 171.874)), (' C 280  ASN HD22', ' C1301  NAG  H83', -0.471, (191.257, 151.447, 135.63)), (' C 216  LEU HD12', ' C 217  PRO  HD2', -0.469, (196.092, 172.965, 131.807)), (' B 216  LEU HD12', ' B 217  PRO  HD2', -0.467, (159.064, 112.808, 183.282)), (' B1130  ILE HD11', ' C 921  LYS  NZ ', -0.466, (155.641, 113.565, 89.076)), (' A1130  ILE HD11', ' B 921  LYS  NZ ', -0.464, (113.314, 103.097, 114.423)), (' C 716  THR  N  ', ' C1071  GLN  O  ', -0.464, (146.525, 134.66, 87.293)), (' A 921  LYS  NZ ', ' C1130  ILE HD11', -0.464, (116.65, 146.388, 87.77)), (' B 280  ASN HD22', ' B1301  NAG  H83', -0.462, (140.051, 121.51, 175.838)), (' A 108  THR HG22', ' A 109  THR HG23', -0.46, (128.558, 180.043, 189.836)), (' A 139  PRO  HB3', ' A 159  VAL  HA ', -0.46, (121.004, 194.607, 185.553)), (' B 312  ILE HD11', ' B 596  SER  HB3', -0.459, (161.083, 122.05, 147.57)), (' A 280  ASN HD22', ' A1301  NAG  H83', -0.459, (128.951, 184.944, 144.234)), (' A 312  ILE HD11', ' A 596  SER  HB3', -0.455, (121.868, 151.525, 148.836)), (' C 641  ASN  HB3', ' C 653  ALA  O  ', -0.455, (165.977, 172.352, 112.123)), (' B 641  ASN  HB3', ' B 653  ALA  O  ', -0.454, (167.018, 108.92, 148.881)), (' C 312  ILE HD11', ' C 596  SER  HB3', -0.451, (161.347, 164.334, 123.012)), (' B 763  LEU HD22', ' B1008  VAL HG21', -0.446, (141.42, 150.371, 148.609)), (' B  96  GLU  OE2', ' B 101  ILE  N  ', -0.446, (162.471, 115.673, 197.116)), (' A 641  ASN  HB3', ' A 653  ALA  O  ', -0.445, (107.667, 151.745, 150.703)), (' A 763  LEU HD22', ' A1008  VAL HG21', -0.444, (154.596, 155.713, 139.595)), (' A 141  LEU  HA ', ' A 141  LEU HD13', -0.443, (119.079, 199.968, 181.918)), (' C 477  SER  O  ', ' C 478  THR  OG1', -0.442, (132.384, 168.431, 207.757)), (' B 477  SER  O  ', ' B 478  THR  OG1', -0.439, (176.818, 208.573, 164.317)), (' A 105  ILE HD11', ' A 239  GLN HE21', -0.439, (121.258, 188.285, 184.482)), (' B 458  LYS  HB3', ' B 458  LYS  HE2', -0.438, (177.431, 194.656, 160.443)), (' C 105  ILE HD11', ' C 239  GLN HE21', -0.431, (198.144, 189.165, 149.208)), (' C 763  LEU HD22', ' C1008  VAL HG21', -0.431, (155.36, 140.812, 147.303)), (' A 101  ILE HG13', ' A 242  LEU  CD2', -0.428, (116.087, 191.973, 174.738)), (' B 105  ILE HD11', ' B 239  GLN HE21', -0.423, (174.57, 124.338, 197.327)), (' B 101  ILE HG13', ' B 242  LEU  CD2', -0.423, (166.64, 115.976, 195.631)), (' C 580  GLN  HB3', ' C 580  GLN HE21', -0.422, (154.478, 200.6, 152.205)), (' C 101  ILE HG13', ' C 242  LEU  CD2', -0.422, (202.989, 182.193, 140.694)), (' C  96  GLU  OE2', ' C 101  ILE  N  ', -0.421, (205.627, 179.13, 140.967)), (' A1116  THR  HB ', ' A1140  PRO  HD3', -0.42, (114.232, 114.47, 87.743)), (' A  29  THR HG23', ' A  62  VAL HG23', -0.42, (113.417, 178.964, 167.105)), (' B 808  ASP  HA ', ' B 809  PRO  HD3', -0.418, (111.32, 118.379, 136.625)), (' B 580  GLN  HB3', ' B 580  GLN HE21', -0.417, (198.671, 144.242, 164.75)), (' A 518  LEU HD22', ' A 546  LEU  HB2', -0.416, (143.092, 149.209, 181.141)), (' C  14  GLN  OE1', ' C  15  CYS  SG ', -0.416, (206.331, 195.085, 153.685)), (' B1116  THR  HB ', ' B1140  PRO  HD3', -0.416, (128.112, 106.255, 86.652)), (' B 716  THR  N  ', ' B1071  GLN  O  ', -0.415, (135.886, 102.283, 110.85)), (' B  29  THR HG23', ' B  62  VAL HG23', -0.414, (166.693, 113.868, 180.714)), (' C  29  THR  OG1', ' C  30  ASN  N  ', -0.413, (190.192, 178.143, 128.605)), (' B1039  ARG  H  ', ' B1039  ARG  HG2', -0.41, (134.905, 127.043, 115.173)), (' C1116  THR  HB ', ' C1140  PRO  HD3', -0.41, (126.242, 120.418, 78.829)), (' A 580  GLN  HB3', ' A 580  GLN HE21', -0.41, (132.168, 145.579, 194.115)), (' B 312  ILE HD12', ' B 598  ILE HG13', -0.41, (159.538, 119.355, 148.068)), (' C  29  THR HG23', ' C  62  VAL HG23', -0.409, (191.052, 179.406, 131.82)), (' B 100  ILE HD11', ' B 245  HIS  HE1', -0.409, (163.485, 109.494, 201.585)), (' B 206  LYS  HB3', ' B 223  LEU HD22', -0.408, (154.131, 122.483, 185.236)), (' B 518  LEU HD22', ' B 546  LEU  HB2', -0.405, (182.77, 151.212, 162.322)), (' C 642  VAL HG22', ' C 651  ILE HG12', -0.405, (164.495, 176.336, 117.871)), (' A  29  THR  OG1', ' A  30  ASN  N  ', -0.405, (111.333, 177.598, 164.601)), (' B  29  THR  OG1', ' B  30  ASN  N  ', -0.405, (165.573, 111.644, 178.182)), (' C 312  ILE HD12', ' C 598  ILE HG13', -0.402, (163.219, 163.527, 120.937)), (' C 200  TYR  HB3', ' C 228  ASP  OD1', -0.402, (188.866, 171.033, 157.37)), (' C 100  ILE HD11', ' C 245  HIS  HE1', -0.401, (211.19, 182.023, 137.718)), (' B1130  ILE HD11', ' C 921  LYS  HZ1', -0.401, (156.217, 113.518, 89.041)), (' B 642  VAL HG22', ' B 651  ILE HG12', -0.4, (171.473, 113.788, 150.232))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
