# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 102 ', 'VAL', 0.001647286347430354, (34.68299999999999, -40.453, 36.114))]
data['omega'] = [('A', ' 520 ', 'ALA', None, (15.354000000000013, -65.364, 46.588)), ('B', '  54 ', 'ASP', None, (26.723000000000024, -34.8, 29.987)), ('B', ' 153 ', 'PRO', None, (62.85199999999999, -27.413, 8.315)), ('B', ' 155 ', 'PRO', None, (63.388000000000005, -33.397, 6.778)), ('C', ' 146 ', 'PRO', None, (69.16200000000003, -53.27, 26.647)), ('C', ' 157 ', 'SER', None, (83.359, -31.061, 38.54))]
data['rota'] = [('B', ' 101 ', 'TRP', 0.047150915939145, (32.02299999999999, -42.937, 34.823)), ('B', ' 103 ', 'ARG', 0.04760080763237059, (36.995999999999995, -42.739, 38.043)), ('C', '  52 ', 'ASP', 0.24179328833499875, (42.845, -52.983, 40.123))]
data['cbeta'] = [('C', '  52 ', 'ASP', ' ', 0.36899754278504987, (42.481, -52.978, 41.609))]
data['probe'] = [(' A 372  ALA  HB2', ' B 102  VAL HG21', -0.954, (34.223, -37.346, 38.303)), (' C  52  ASP  OD2', ' C  67  ILE HD12', -0.84, (44.92, -51.222, 43.155)), (' B 125  PRO  HB3', ' B 151  TYR  HB3', -0.761, (70.196, -27.694, 8.999)), (' A 485  GLY  H  ', ' A 488  CYS  HB2', -0.756, (41.92, -48.841, 85.257)), (' C 155  ALA  N  ', ' C 158  SER  O  ', -0.751, (78.94, -30.866, 35.642)), (' B 102  VAL HG13', ' B 103  ARG  HG2', -0.74, (34.97, -41.856, 38.758)), (' C 156  ASP  OD2', ' C 194  ARG  N  ', -0.693, (86.961, -27.129, 34.112)), (' A 521  PRO  HB2', ' A 523  THR HG23', -0.676, (11.567, -58.727, 46.145)), (' A 366  SER  HA ', ' A 369  TYR  CZ ', -0.651, (25.787, -44.304, 37.165)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.649, (13.524, -63.231, 48.6)), (' B  52  LYS  HB2', ' B  57  GLU  HG3', -0.642, (30.764, -33.356, 33.998)), (' B  34  MET  HB3', ' B  79  LEU HD22', -0.638, (35.509, -37.195, 24.66)), (' C  50  TYR  O  ', ' C  54  GLN  HB2', -0.63, (40.188, -54.122, 35.988)), (' B 101  TRP  H  ', ' B 101  TRP  HD1', -0.629, (34.349, -44.18, 34.137)), (' B 132  PRO  HD3', ' B 144  LEU  HB3', -0.622, (87.925, -37.2, 12.031)), (' A 334  ASN  HB3', ' A 361  CYS  HA ', -0.619, (11.514, -47.883, 44.412)), (' A 388  ASN HD22', ' A 527  PRO  HG2', -0.618, (22.065, -46.762, 35.852)), (' B 199  THR HG22', ' B 201  ILE HD11', -0.593, (87.674, -33.539, 0.632)), (' C 118  PRO  HB3', ' C 144  PHE  HB3', -0.584, (74.674, -48.554, 24.729)), (' B 101  TRP  CD1', ' B 101  TRP  N  ', -0.569, (33.458, -44.227, 34.069)), (' A 372  ALA  HA ', ' B 103  ARG HH21', -0.557, (35.372, -38.647, 41.86)), (' A 528  LYS  HD2', ' A 528  LYS  O  ', -0.555, (15.993, -53.586, 34.832)), (' A 384  PRO  HA ', ' A 387  LEU  HG ', -0.554, (28.929, -50.822, 39.74)), (' B 132  PRO  HB3', ' B 143  ALA  O  ', -0.553, (87.462, -38.693, 14.697)), (' A 388  ASN  HB3', ' A 527  PRO  HG2', -0.549, (20.963, -47.733, 35.661)), (' B 206  HIS  CD2', ' B 208  PRO  HD2', -0.535, (65.685, -29.113, 4.28)), (' B 101  TRP  CZ2', ' B 103  ARG  HB2', -0.535, (35.796, -44.99, 38.511)), (' A 369  TYR  O  ', ' B 102  VAL HG11', -0.531, (31.956, -40.433, 39.264)), (' A 350  VAL HG22', ' A 422  ASN  HB3', -0.522, (35.158, -49.0, 64.013)), (' C  30  ALA  HB2', ' C  67  ILE HD13', -0.52, (44.803, -50.358, 46.357)), (' C  12  GLU  OE1', ' C  16  LYS  HG3', -0.51, (63.48, -63.933, 32.382)), (' A 411  ALA  HB3', ' A 414  GLN  HG3', -0.509, (41.531, -52.66, 53.491)), (' C  86  GLU  HG3', ' C 109  THR  HA ', -0.503, (60.885, -54.932, 24.943)), (' A 393  THR  HA ', ' A 522  ALA  HA ', -0.501, (16.562, -58.752, 46.358)), (' C  99  LEU  H  ', ' C  99  LEU HD12', -0.501, (42.75, -33.324, 39.395)), (' B 102  VAL  O  ', ' B 102  VAL HG22', -0.5, (35.866, -39.555, 37.627)), (' B   1  GLU  O  ', ' B  26  GLY  HA3', -0.498, (31.197, -48.572, 16.997)), (' C  28  SER  O  ', ' C  31  SER  OG ', -0.494, (44.342, -43.679, 46.742)), (' C  15  GLY  O  ', ' C  16  LYS  HG2', -0.485, (62.381, -66.006, 30.932)), (' B 101  TRP  HD1', ' B 101  TRP  N  ', -0.482, (33.622, -43.996, 34.071)), (' A 365  TYR  CD2', ' A 387  LEU  HB3', -0.481, (24.521, -50.382, 40.692)), (' B  57  GLU  OE1', ' B  59  TYR  OH ', -0.48, (32.334, -33.017, 38.145)), (' A 342  PHE  HB2', ' D   1  NAG  H82', -0.478, (24.269, -39.123, 49.183)), (' C  56  PRO  HD2', ' C  59  VAL HG21', -0.476, (42.576, -56.351, 28.972)), (' C 188  GLU  O  ', ' C 192  SER  OG ', -0.474, (84.362, -19.575, 30.943)), (' C 199  GLN  HG2', ' C 208  GLU  HG3', -0.473, (80.618, -39.254, 33.178)), (' A 341  VAL HG11', ' A 397  ALA  HB1', -0.472, (23.852, -45.626, 53.138)), (' A 528  LYS  CD ', ' A 528  LYS  O  ', -0.472, (16.654, -53.405, 35.06)), (' C 109  THR HG21', ' C 146  PRO  HB3', -0.472, (65.459, -54.13, 25.835)), (' B  12  VAL  O  ', ' B 117  VAL  HA ', -0.469, (52.729, -24.099, 16.757)), (' C  35  GLN  HG3', ' C  50  TYR  HA ', -0.464, (41.957, -50.035, 34.483)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.462, (31.605, -38.99, 58.597)), (' B  33  TRP  CD1', ' B 101  TRP  O  ', -0.459, (31.502, -40.026, 33.579)), (' C  49  ILE  HA ', ' C  54  GLN  O  ', -0.456, (42.706, -55.219, 33.753)), (' A 403  ARG  HG3', ' A 406  GLU  HG3', -0.456, (42.64, -42.903, 61.017)), (' B  89  GLU  N  ', ' B  89  GLU  OE1', -0.454, (55.967, -25.322, 25.511)), (' B 130  LEU HD12', ' B 187  VAL HG12', -0.447, (81.113, -36.843, 14.201)), (' B  91  THR HG23', ' B 116  THR  HA ', -0.442, (54.032, -29.63, 18.046)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.442, (28.421, -54.03, 46.925)), (' A 366  SER  HA ', ' A 369  TYR  CE1', -0.441, (26.28, -43.736, 37.19)), (' C  52  ASP  OD2', ' C  67  ILE  CD1', -0.441, (44.476, -51.05, 44.136)), (' A 396  TYR  HB2', ' A 514  SER  HB2', -0.44, (25.043, -54.446, 53.077)), (' A 497  PHE  CE2', ' A 507  PRO  HB3', -0.439, (36.692, -36.855, 62.648)), (' B   4  LEU HD23', ' B  24  ALA  HA ', -0.438, (34.214, -41.816, 18.68)), (' B 101  TRP  CE2', ' B 103  ARG  HB2', -0.431, (35.598, -45.098, 38.006)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.431, (32.677, -51.378, 46.691)), (' B 175  VAL HG13', ' C 167  THR HG22', -0.431, (68.961, -35.316, 19.633)), (' A 365  TYR  CE2', ' A 387  LEU  HB3', -0.428, (24.736, -51.062, 40.841)), (' B  53  GLN  H  ', ' B  53  GLN  HG2', -0.423, (28.259, -37.351, 32.109)), (' C  29  ILE  N  ', ' C  72  ASN  OD1', -0.421, (48.334, -45.644, 47.767)), (' A 363  ALA  HB1', ' A 365  TYR  CE1', -0.419, (21.361, -48.364, 43.818)), (' B 161  ASN HD21', ' B 200  TYR  H  ', -0.417, (87.625, -37.893, 1.912)), (' B  98  ARG  NH2', ' B 107  ASP  OD2', -0.416, (35.056, -49.312, 26.527)), (' C 125  PRO  HD3', ' C 137  LEU  HG ', -0.415, (82.47, -29.224, 23.81)), (' B 175  VAL  O  ', ' B 182  TYR  HA ', -0.413, (66.575, -30.292, 16.131)), (' B 145  GLY  HA2', ' B 160  TRP  CZ2', -0.412, (81.846, -37.169, 9.899)), (' C  55  ARG  HA ', ' C  56  PRO  HD3', -0.412, (42.169, -55.938, 31.842)), (' A 425  LEU  HA ', ' A 425  LEU HD23', -0.411, (33.143, -56.21, 56.351)), (' C 185  LEU HD23', ' C 190  TRP  HB2', -0.41, (81.786, -24.719, 26.744)), (' B 168  GLY  O  ', ' B 188  VAL  HA ', -0.408, (81.433, -43.939, 10.634)), (' A 388  ASN  HB3', ' A 527  PRO  CG ', -0.407, (20.77, -47.909, 35.909)), (' B 194  SER  O  ', ' B 198  GLN  HB2', -0.407, (92.582, -40.951, 5.0)), (' A 369  TYR  O  ', ' B 102  VAL  CG1', -0.406, (32.434, -40.634, 39.033)), (' D   1  NAG  H62', ' D   2  NAG  H82', -0.403, (24.381, -29.612, 46.357))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
