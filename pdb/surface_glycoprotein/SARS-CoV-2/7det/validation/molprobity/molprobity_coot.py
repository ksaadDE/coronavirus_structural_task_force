# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', ' 142 ', 'PRO', None, (-31.68, 9.385, -22.23)), ('B', ' 215 ', 'PRO', None, (-21.931999999999995, 0.045000000000000005, -34.285999999999994)), ('B', ' 233 ', 'PRO', None, (-32.93900000000001, -3.650999999999999, -1.8369999999999997)), ('D', ' 142 ', 'PRO', None, (-6.897999999999996, -10.488, -29.242)), ('D', ' 215 ', 'PRO', None, (-14.409000000000002, -20.524, -16.597)), ('D', ' 233 ', 'PRO', None, (-3.834999999999992, -24.009999999999994, -49.145999999999994))]
data['rota'] = [('C', ' 386 ', 'LYS', 0.0, (-9.603999999999996, -35.562, -80.43999999999998)), ('D', '  87 ', 'ARG', 0.2388982571608579, (18.46900000000001, -21.59599999999999, -45.17999999999999))]
data['cbeta'] = []
data['probe'] = [(' D 171  MET  HE2', ' D 226  CYS  HB2', -0.762, (-8.624, -19.797, -36.743)), (' B 111  ARG  NH1', ' B 301  HOH  O  ', -0.748, (-46.674, -18.082, -18.945)), (' D 138  LEU HD13', ' D 171  MET  HE1', -0.725, (-8.044, -19.358, -39.395)), (' B 175  GLN  HB2', ' B 185  LEU HD11', -0.708, (-30.062, -4.722, -24.71)), (' B 171  MET  HE2', ' B 226  CYS  HB2', -0.665, (-28.338, -0.344, -14.83)), (' D 192  LEU HD11', ' D 198  ALA  HA ', -0.643, (-15.78, -27.796, -23.076)), (' A 335  LEU HD23', ' A 361  CYS  HA ', -0.639, (-28.206, 2.892, 20.372)), (' B 147  VAL HG11', ' B 216  VAL HG21', -0.612, (-27.548, 4.049, -33.158)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.562, (-15.236, -42.329, -63.017)), (' D  36  TRP  CE2', ' D  81  MET  HB2', -0.534, (7.63, -34.473, -43.023)), (' C 453  TYR  HE2', ' C 455  LEU HD13', -0.525, (-30.715, -43.21, -51.458)), (' C 408  ARG  HG3', ' C 710  HOH  O  ', -0.517, (-20.713, -47.851, -61.478)), (' C 444  LYS  NZ ', ' D 103  GLU  OE2', -0.512, (-15.384, -35.439, -39.211)), (' D 139  THR  HB ', ' D 158  ARG  HB3', -0.506, (-8.794, -11.601, -38.764)), (' B 140  GLN  H  ', ' B 238  GLN HE22', -0.504, (-34.11, 6.646, -16.517)), (' C 426  PRO  HB3', ' C 463  PRO  HB3', -0.504, (-30.854, -35.37, -71.189)), (' B  81  MET  HE1', ' B  94  TYR  CD2', -0.497, (-45.156, -12.177, -9.612)), (' D 135  ASP  OD1', ' D 233  PRO  CD ', -0.487, (-2.477, -21.841, -50.114)), (' B 147  VAL  O  ', ' B 244  ILE  HA ', -0.482, (-32.994, 4.691, -36.008)), (' C 480  CYS  O  ', ' C 483  VAL HG12', -0.475, (-46.573, -34.085, -40.941)), (' C 444  LYS  NZ ', ' C 707  HOH  O  ', -0.475, (-17.02, -36.008, -38.048)), (' C 384  PRO  HA ', ' C 387  LEU HD12', -0.475, (-11.483, -36.617, -75.061)), (' C 338  PHE  HE1', ' C 358  ILE HD13', -0.468, (-14.437, -27.104, -67.843)), (' C 373  SER  HB3', ' C 711  HOH  O  ', -0.467, (-6.299, -40.461, -58.973)), (' B 218  ALA  O  ', ' B 221  VAL HG12', -0.463, (-34.555, -2.878, -34.99)), (' C 372  ALA  O  ', ' C 373  SER  HB2', -0.458, (-3.967, -40.779, -61.387)), (' B  10  GLU  HB3', ' B  12  LYS  HZ2', -0.458, (-55.246, -16.328, -11.358)), (' D 152  ARG  HG3', ' D 214  ASN  HB2', -0.455, (-15.481, -17.386, -20.301)), (' A 338  PHE  HE2', ' A 363  ALA  HB1', -0.453, (-25.685, -5.542, 20.007)), (' C 399  SER  HA ', ' C 510  VAL  O  ', -0.45, (-18.03, -34.037, -60.749)), (' B  36  TRP  CE2', ' B  81  MET  HB2', -0.449, (-42.49, -16.943, -7.465)), (' D  38  ARG  HB3', ' D  48  ILE HD11', -0.448, (7.724, -27.263, -41.239)), (' C 461  LEU  HB3', ' C 465  GLU  HB3', -0.445, (-34.014, -33.97, -63.258)), (' C 347  PHE  CD2', ' C 509  ARG  HG2', -0.445, (-15.379, -34.247, -56.292)), (' B  53  PRO  HA ', ' B  72  VAL HG21', -0.444, (-35.229, -24.028, -3.388)), (' B  12  LYS  HD2', ' B  17  SER  O  ', -0.44, (-55.436, -15.888, -6.884)), (' A 369  TYR  O  ', ' A 371  SER  N  ', -0.439, (-30.208, -17.615, 18.096)), (' D  62  GLN  HB2', ' D  65  LYS  CE ', -0.438, (3.945, -24.512, -55.764)), (' B 165  SER  HB2', ' B 230  ASN  OD1', -0.434, (-21.464, -2.621, -3.834)), (' C 431  GLY  HA2', ' C 515  PHE  CD2', -0.433, (-18.353, -34.13, -74.255)), (' B 155  ILE HG12', ' B 240  THR HG21', -0.433, (-31.396, 5.013, -23.962)), (' D  81  MET  HE3', ' D  83  LEU  HB2', -0.432, (11.866, -30.104, -44.97)), (' D 147  VAL  O  ', ' D 244  ILE  HA ', -0.431, (-4.264, -14.014, -15.821)), (' C 426  PRO  HB2', ' C 428  ASP  OD1', -0.426, (-30.128, -36.56, -73.773)), (' C 354  ASN  O  ', ' C 398  ASP  HA ', -0.426, (-21.008, -29.59, -62.192)), (' B  91  THR  HA ', ' B 115  VAL  O  ', -0.426, (-52.174, -8.136, -12.824)), (' A 360  ASN  HA ', ' A 523  THR  HB ', -0.425, (-23.649, 5.018, 23.206)), (' D 147  VAL HG22', ' D 151  GLN  HB2', -0.425, (-9.659, -13.198, -16.029)), (' D 227  GLN  HB2', ' D 236  PHE  CD2', -0.425, (-4.253, -23.673, -37.113)), (' B  10  GLU  OE1', ' B  12  LYS  NZ ', -0.424, (-55.027, -17.495, -10.836)), (' D 183  LYS  HD3', ' D 196  ILE HD11', -0.424, (-6.824, -30.665, -25.472)), (' D 146  ALA  HB1', ' D 245  LYS  HD3', -0.423, (-2.194, -10.275, -17.274)), (' D 175  GLN  HB2', ' D 185  LEU HD11', -0.422, (-6.139, -24.257, -26.389)), (' A 462  LYS  HB2', ' A 463  PRO  CD ', -0.42, (0.095, -10.167, 17.514)), (' D 171  MET  HE3', ' D 227  GLN  O  ', -0.42, (-8.953, -22.393, -38.397)), (' A 399  SER  HA ', ' A 510  VAL  O  ', -0.419, (-17.042, -11.245, 9.895)), (' C 395  VAL HG22', ' C 515  PHE  HD1', -0.418, (-16.876, -28.814, -73.95)), (' A 430  THR  O  ', ' A 701  HOH  O  ', -0.417, (-13.862, -8.916, 24.14)), (' D 171  MET  HE3', ' D 227  GLN  C  ', -0.417, (-8.488, -22.169, -38.387)), (' B 137  VAL  HB ', ' B 160  SER  OG ', -0.413, (-32.686, 6.75, -6.32)), (' D 245  LYS  HA ', ' D 245  LYS  HD2', -0.412, (-0.878, -11.802, -14.414)), (' D  99  ALA  HB1', ' D 104  TRP  HA ', -0.412, (-6.936, -32.875, -41.205)), (' B 214  ASN  HA ', ' B 215  PRO  HA ', -0.411, (-22.991, 2.183, -33.734)), (' B  67  ARG  NH2', ' B  90  ASP  OD1', -0.41, (-49.301, -5.854, -4.838)), (' C 350  VAL  O  ', ' C 353  TRP  HD1', -0.41, (-26.801, -33.702, -58.387)), (' B  85  SER  O  ', ' B  85  SER  OG ', -0.407, (-54.326, -7.509, -0.949)), (' C 490  PHE  CE2', ' C 492  LEU  HB2', -0.407, (-32.462, -34.638, -46.875)), (' C 426  PRO  HG2', ' C 429  PHE  HB2', -0.405, (-27.137, -36.255, -72.232)), (' B  38  ARG  HB3', ' B  48  ILE HD11', -0.404, (-43.669, -9.076, -9.326)), (' B 138  LEU HD13', ' B 171  MET  HE1', -0.402, (-28.905, 0.639, -12.26)), (' C 386  LYS  H  ', ' C 386  LYS  HG2', -0.401, (-10.945, -37.518, -79.777)), (' B 140  GLN  N  ', ' B 238  GLN HE22', -0.401, (-33.552, 6.982, -16.366)), (' A 462  LYS  HG2', ' A 462  LYS  HZ2', -0.4, (0.904, -8.228, 14.227)), (' B 147  VAL HG13', ' B 151  GLN  HB2', -0.4, (-27.173, 6.377, -34.963))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
