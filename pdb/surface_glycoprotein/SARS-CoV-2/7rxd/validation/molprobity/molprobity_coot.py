# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 157 ', 'PRO', None, (112.13899999999992, 84.249, 114.475)), ('H', ' 159 ', 'PRO', None, (116.03, 84.87799999999994, 110.505)), ('L', '   8 ', 'PRO', None, (121.53799999999998, 107.00499999999994, 91.05800000000002)), ('L', ' 146 ', 'PRO', None, (113.79399999999998, 88.636, 81.87400000000001))]
data['rota'] = [('B', ' 204 ', 'HIS', 0.21785666662966705, (144.954, 150.387, 153.244)), ('B', ' 242 ', 'ASN', 0.07474748446042603, (163.167, 147.5859999999999, 167.10600000000002))]
data['cbeta'] = []
data['probe'] = [(' R 422  ASN HD21', ' R 454  ARG  H  ', -0.947, (104.082, 143.442, 128.772)), (' L  87  GLU  HA ', ' L 173  SER  HB3', -0.811, (128.668, 88.734, 89.547)), (' R 379  CYS  HA ', ' R 432  CYS  HB3', -0.806, (91.249, 160.69, 133.906)), (' H 207  ASN  ND2', ' H 218  ASP  OD1', -0.799, (120.534, 68.053, 107.754)), (' R 379  CYS  HA ', ' R 432  CYS  CB ', -0.751, (92.099, 160.929, 133.703)), (' H 191  VAL HG21', ' L 140  LEU HD11', -0.745, (113.123, 75.481, 92.714)), (' B 233  TRP  HB2', ' B 299  PRO  HG2', -0.738, (166.825, 138.216, 159.588)), (' B 234  SER  HB3', ' B 299  PRO  HD3', -0.717, (170.033, 138.625, 157.747)), (' R 442  ASP  O  ', ' R 448  ASN  ND2', -0.695, (114.872, 155.026, 122.572)), (' B 117  ILE HG12', ' B 245  VAL HG12', -0.695, (160.145, 139.208, 162.239)), (' B 116  LEU HD22', ' B 249  PRO  HD3', -0.689, (150.158, 138.938, 161.254)), (' B  12  ILE HG22', ' B  62  PHE  HB2', -0.689, (171.248, 128.899, 146.473)), (' R 466  ARG  HE ', ' R 468  ILE HD11', -0.678, (107.239, 145.676, 138.481)), (' R 422  ASN HD21', ' R 454  ARG  N  ', -0.672, (104.647, 142.901, 128.649)), (' L  26  THR HG21', ' N  41  PRO  HB3', -0.664, (122.927, 117.82, 105.868)), (' R 442  ASP  OD1', ' R 451  TYR  OH ', -0.661, (112.42, 156.144, 126.741)), (' H 131  VAL HG22', ' H 152  VAL HG12', -0.656, (112.478, 72.834, 106.715)), (' N  91  THR HG23', ' N 118  THR  HA ', -0.649, (130.637, 119.941, 110.826)), (' L  60  ARG  NH1', ' L  68  PHE  O  ', -0.647, (139.541, 102.044, 89.919)), (' R 422  ASN  ND2', ' R 454  ARG  H  ', -0.644, (104.423, 144.002, 129.042)), (' L 138  VAL HG22', ' L 183  THR HG22', -0.642, (105.517, 76.641, 96.834)), (' N  33  ARG  NH2', ' N  37  TYR  OH ', -0.635, (114.971, 131.265, 119.406)), (' L  18  ARG  HG3', ' L  82  ASN  HA ', -0.632, (133.124, 102.49, 82.123)), (' R 454  ARG  NH2', ' R 469  SER  O  ', -0.621, (107.556, 138.834, 133.777)), (' H  19  ARG  NH1', ' H  82  GLN  OE1', -0.613, (126.241, 94.35, 127.79)), (' B  78  ALA  HB2', ' B 269  ALA  HA ', -0.61, (173.128, 115.614, 137.166)), (' N   9  GLY  HA2', ' N  18  LEU HD13', -0.608, (133.513, 127.503, 113.402)), (' B 215  GLU  O  ', ' B 219  ASN  ND2', -0.603, (163.324, 148.062, 154.816)), (' R 378  LYS  O  ', ' R 432  CYS  HB2', -0.601, (92.666, 161.292, 132.97)), (' H  63  THR  O  ', ' H  67  ARG  NH2', -0.592, (117.422, 104.67, 119.078)), (' N  83  MET  HB3', ' N  86  LEU HD21', -0.591, (131.433, 124.588, 119.455)), (' B 230  PRO  HA ', ' B 233  TRP  CE2', -0.59, (162.892, 136.259, 159.771)), (' L  67  ARG  NH2', ' L  87  GLU  OE2', -0.588, (134.44, 92.369, 88.839)), (' L 118  PRO  HB3', ' L 144  PHE  HB3', -0.587, (112.053, 81.609, 83.154)), (' N  99  LYS  O  ', ' R 493  GLN  NE2', -0.584, (110.705, 140.662, 118.918)), (' B 242  ASN  ND2', ' B 242  ASN  O  ', -0.575, (160.77, 148.537, 166.776)), (' H  37  VAL HG22', ' H  47  TRP  HA ', -0.573, (127.547, 102.103, 111.582)), (' H 149  GLY  HA3', ' H 191  VAL HG12', -0.571, (113.683, 72.037, 96.193)), (' B 194  THR  HA ', ' B 197  VAL HG12', -0.568, (138.253, 140.751, 147.351)), (' N 101  VAL  HA ', ' N 107  TYR  HA ', -0.564, (106.908, 139.92, 114.507)), (' B  67  ARG  NH1', ' B 338  SER  OG ', -0.562, (157.926, 127.973, 137.911)), (' B 364  PHE  CE1', ' B 382  ILE HG23', -0.56, (140.349, 133.952, 130.633)), (' L  67  ARG  NH2', ' L  88  ASP  OD1', -0.554, (133.722, 93.328, 88.805)), (' L   6  GLN  HG2', ' L  23  CYS  HB3', -0.552, (125.589, 108.412, 96.274)), (' B  10  ILE  HB ', ' B  38  VAL HG12', -0.549, (177.611, 130.803, 144.786)), (' L 167  SER  OG ', ' L 181  SER  OG ', -0.548, (109.445, 82.162, 96.531)), (' B 116  LEU HD11', ' B 225  MET  HE3', -0.547, (151.681, 142.198, 160.983)), (' L  27  GLN  OE1', ' N 118  THR  OG1', -0.545, (131.109, 120.878, 107.978)), (' B 259  PHE  HB3', ' B 331  MET  HG3', -0.543, (155.171, 126.494, 150.207)), (' H 107  GLY  HA3', ' L  56  TRP  HE1', -0.542, (142.96, 108.802, 104.332)), (' B  66  ASP  OD1', ' B  67  ARG  HG2', -0.539, (159.25, 125.918, 143.138)), (' H  87  ARG  O  ', ' H 121  VAL HG21', -0.538, (112.811, 97.286, 117.907)), (' N  32  ASP  OD1', ' N  33  ARG  N  ', -0.537, (115.47, 140.276, 122.383)), (' B 368  LEU HD23', ' B 378  ARG  HD3', -0.534, (145.764, 129.033, 131.106)), (' B 260  VAL  HB ', ' B 330  ILE  HA ', -0.533, (156.122, 123.686, 154.124)), (' B 504  GLU  O  ', ' B 507  GLU  HG3', -0.529, (103.922, 67.504, 127.854)), (' A   2  GLC  O6 ', ' B 345  ARG  NH2', -0.527, (156.626, 133.612, 141.356)), (' N 106  GLU  N  ', ' N 106  GLU  OE1', -0.526, (102.388, 140.226, 113.244)), (' R 383  SER  HB2', ' R 386  LYS  HB2', -0.526, (86.269, 168.803, 138.112)), (' L 141  LEU  O  ', ' L 179  SER  HA ', -0.526, (113.594, 80.427, 88.866)), (' H  94  TYR  O  ', ' H 116  GLY  HA2', -0.524, (127.253, 91.502, 112.383)), (' B  90  LEU  HB2', ' B  95  TRP  HE1', -0.52, (169.614, 115.022, 157.209)), (' B 247  VAL  HA ', ' B 324  ASN HD21', -0.52, (153.607, 133.691, 162.952)), (' N  38  ARG  NH2', ' N  89  GLU  O  ', -0.515, (125.731, 118.555, 117.435)), (' H  39  GLN  HB2', ' H  45  LEU HD23', -0.514, (124.363, 98.12, 107.104)), (' R 398  ASP  O  ', ' R 511  VAL  HA ', -0.514, (102.552, 156.875, 134.646)), (' B 243  TYR  OH ', ' B 317  ARG  NH1', -0.511, (167.0, 139.816, 163.955)), (' B 337  MET  O  ', ' B 340  PHE  HB3', -0.509, (152.343, 125.394, 140.79)), (' H  87  ARG  NH2', ' H  89  GLU  OE2', -0.507, (113.868, 105.317, 118.277)), (' B  83  ASP  O  ', ' B  87  GLN  HG2', -0.507, (173.024, 109.791, 154.94)), (' L 171  GLN  HB2', ' L 178  TYR  CZ ', -0.505, (118.608, 89.352, 88.773)), (' B 119  ASN  HB3', ' B 122  LEU  HB2', -0.504, (155.424, 150.195, 164.619)), (' L   2  ILE  HB ', ' L  96  GLN  NE2', -0.498, (128.795, 113.412, 107.004)), (' H 176  PHE  HE2', ' L 181  SER  HB3', -0.496, (110.52, 79.44, 94.342)), (' H  63  THR HG23', ' H  64  VAL HG13', -0.495, (120.389, 104.682, 116.624)), (' H 176  PHE  CE2', ' L 181  SER  HB3', -0.493, (111.019, 79.875, 94.638)), (' B  99  ARG  O  ', ' B 333  ASN  ND2', -0.492, (159.731, 115.249, 147.232)), (' H 213  SER  OG ', ' H 215  THR  OG1', -0.49, (113.859, 75.287, 116.829)), (' B  69  GLY  HA3', ' B 333  ASN  O  ', -0.489, (158.952, 118.029, 142.521)), (' L  37  THR HG21', ' L  77  PHE  CE2', -0.487, (135.05, 114.25, 97.941)), (' B  90  LEU  HB2', ' B  95  TRP  NE1', -0.486, (169.424, 115.153, 156.981)), (' H  52  SER  O  ', ' H  72  ARG  NH1', -0.485, (138.767, 100.776, 121.008)), (' H  99  ARG  NE ', ' H 103  ASP  OD2', -0.484, (138.711, 106.812, 112.29)), (' R 353  TRP  CE2', ' R 466  ARG  HB3', -0.483, (103.06, 147.498, 137.711)), (' R 439  ASN HD21', ' R 506  GLN  CD ', -0.482, (106.638, 160.186, 116.37)), (' H  48  VAL HG13', ' H  64  VAL HG21', -0.48, (123.604, 102.71, 117.67)), (' N  36  TRP  HE1', ' N  79  VAL HG12', -0.478, (125.407, 135.27, 119.449)), (' L 166  GLU  HG2', ' L 180  LEU HD11', -0.478, (107.444, 85.563, 92.303)), (' L 130  LEU  HB3', ' L 188  LYS  NZ ', -0.477, (96.103, 65.542, 103.143)), (' R 355  ARG  HE ', ' R 396  TYR  HB3', -0.477, (100.828, 154.07, 143.126)), (' R 379  CYS  HA ', ' R 432  CYS  HB2', -0.475, (92.101, 160.948, 133.449)), (' B 190  LYS  NZ ', ' B 359  ASP  OD1', -0.475, (135.0, 131.248, 142.556)), (' H  40  ALA  HB3', ' H  43  MET  HB3', -0.475, (117.755, 99.499, 108.097)), (' H 110  MET  O  ', ' L  42  TYR  OH ', -0.469, (135.665, 101.126, 105.741)), (' N  97  ASN  OD1', ' N  98  VAL  N  ', -0.469, (115.778, 135.44, 115.242)), (' R 431  GLY  O  ', ' R 432  CYS  HB3', -0.468, (91.267, 160.305, 135.694)), (' H 111  ASP  OD1', ' H 112  TYR  N  ', -0.465, (138.689, 96.646, 107.852)), (' B 485  LEU HD12', ' B 532  PHE  O  ', -0.464, (112.401, 65.109, 122.025)), (' H 107  GLY  HA3', ' L  56  TRP  NE1', -0.462, (142.945, 109.121, 103.962)), (' B 492  LEU HD23', ' H 219  LYS  NZ ', -0.462, (110.345, 66.022, 108.509)), (' H  17  SER  HA ', ' H  83  MET  O  ', -0.46, (118.907, 96.005, 125.761)), (' B  91  TYR  CE1', ' B 306  LYS  HG2', -0.458, (168.414, 118.318, 163.777)), (' H  20  LEU HD23', ' H  83  MET  HE2', -0.457, (122.911, 93.526, 120.497)), (' L 171  GLN HE21', ' L 176  SER  HB3', -0.457, (122.098, 88.408, 84.941)), (' L  13  VAL HG11', ' L  19  VAL HG11', -0.455, (126.165, 99.656, 84.76)), (' L 143  ASN  HA ', ' L 177  THR  HB ', -0.454, (118.042, 82.35, 85.232)), (' B 171  LYS  HG2', ' B 173  GLU  HG2', -0.452, (143.171, 114.511, 149.269)), (' N  83  MET  HE1', ' N 117  VAL HG21', -0.449, (130.367, 126.342, 115.087)), (' N  19  ARG  NH1', ' N  82  GLN  OE1', -0.448, (134.788, 133.247, 122.622)), (' B 485  LEU  HB2', ' B 510  PHE  CE2', -0.447, (111.193, 68.933, 122.648)), (' N  44  GLU  HG2', ' R 486  PHE  HZ ', -0.446, (112.099, 122.015, 115.436)), (' H  37  VAL HG21', ' H 110  MET  HE1', -0.445, (130.735, 101.077, 110.304)), (' H  29  PHE  O  ', ' H  72  ARG  NH2', -0.445, (140.964, 97.14, 120.176)), (' N   4  LEU HD23', ' N  96  CYS  SG ', -0.444, (121.154, 136.754, 113.8)), (' B 235  ASN  O  ', ' B 238  THR  OG1', -0.443, (169.263, 146.997, 157.425)), (' B   9  VAL  N  ', ' B  59  ASP  OD1', -0.442, (179.955, 126.55, 139.417)), (' B  70  GLY  HA2', ' B 335  PRO  HB3', -0.441, (158.572, 119.126, 137.829)), (' B 514  ALA  HB1', ' B 519  VAL  HB ', -0.44, (106.692, 64.093, 115.262)), (' B  49  PRO  HG3', ' B  71  TYR  HE1', -0.44, (163.114, 124.944, 136.755)), (' B 312  LEU  HG ', ' B 318  ILE HG13', -0.44, (168.113, 130.525, 165.239)), (' N   2  VAL HG11', ' N 110  TYR  CE2', -0.439, (113.443, 141.743, 111.016)), (' N  34  MET  HG2', ' N  98  VAL HG12', -0.435, (118.73, 139.398, 118.619)), (' R 490  PHE  CE2', ' R 492  LEU  HB2', -0.435, (111.678, 139.648, 127.303)), (' L 150  LYS  HB2', ' L 202  THR  OG1', -0.434, (102.244, 86.398, 82.546)), (' R 434  ILE  HB ', ' R 511  VAL HG23', -0.431, (100.519, 161.363, 132.825)), (' B  11  TRP  CD1', ' B  58  PRO  HB3', -0.429, (174.214, 129.571, 138.699)), (' B 200  ILE HD13', ' B 205  MET  HB3', -0.428, (146.687, 146.495, 149.902)), (' L 127  ASP  N  ', ' L 127  ASP  OD1', -0.427, (103.488, 63.697, 102.353)), (' L 113  ARG  HD3', ' L 176  SER  O  ', -0.426, (121.038, 86.514, 83.516)), (' H  24  ALA  HB1', ' H  27  PHE  CE1', -0.426, (140.239, 91.406, 115.987)), (' B 364  PHE  HE1', ' B 382  ILE HG23', -0.425, (140.201, 133.626, 131.053)), (' N  91  THR  HA ', ' N 117  VAL  O  ', -0.422, (129.259, 121.2, 112.67)), (' N  18  LEU  HB2', ' N  83  MET  HE3', -0.422, (132.647, 126.846, 117.261)), (' H 122  SER  HG ', ' H 156  PHE  HE1', -0.421, (109.442, 88.234, 116.502)), (' N  17  SER  HA ', ' N  83  MET  O  ', -0.419, (135.486, 125.595, 120.646)), (' N  52  TYR  O  ', ' N  72  ARG  NH2', -0.419, (120.721, 140.662, 127.475)), (' L  37  THR HG21', ' L  77  PHE  HE2', -0.419, (135.11, 114.607, 97.786)), (' B 239  SER  O  ', ' B 240  LYS  HG2', -0.419, (167.908, 151.799, 162.716)), (' H 178  ALA  HB2', ' H 188  LEU HD23', -0.418, (113.188, 82.635, 104.737)), (' H 210  HIS  CD2', ' H 212  PRO  HD2', -0.418, (115.989, 81.06, 113.937)), (' N 121  SER  O  ', ' N 121  SER  OG ', -0.417, (136.264, 111.102, 114.214)), (' N  24  ALA  HB1', ' N  27  PHE  CZ ', -0.416, (120.857, 142.798, 115.018)), (' N  47  TRP  CZ3', ' R 483  VAL HG13', -0.416, (117.066, 126.143, 126.444)), (' L 203  HIS  CD2', ' L 205  GLY  H  ', -0.414, (110.506, 85.148, 79.174)), (' H 149  GLY  HA2', ' H 164  TRP  CZ2', -0.414, (115.495, 70.918, 97.735)), (' H 173  VAL  HA ', ' H 192  VAL HG22', -0.414, (120.605, 74.175, 95.077)), (' L  17  GLU  N  ', ' L  17  GLU  OE1', -0.413, (128.945, 97.184, 79.352)), (' B 148  LEU HD13', ' B 225  MET  HG3', -0.412, (151.064, 144.589, 159.015)), (' H  12  VAL HG23', ' H 121  VAL HG12', -0.412, (114.363, 93.138, 120.837)), (' B 245  VAL HG21', ' B 317  ARG  HA ', -0.412, (161.462, 135.778, 165.872)), (' B  60  ILE HG22', ' B 267  ILE HG12', -0.411, (175.286, 120.428, 143.549)), (' B 300  LEU  HA ', ' B 300  LEU HD23', -0.411, (168.693, 131.986, 155.502)), (' N 106  GLU  HG2', ' N 106  GLU  O  ', -0.41, (104.123, 138.697, 111.535)), (' B  10  ILE HG21', ' B  21  LEU HD21', -0.409, (175.866, 129.23, 146.623)), (' H  32  PHE  CE1', ' H 101  LEU  HG ', -0.408, (145.639, 99.844, 113.373)), (' B  20  GLY  O  ', ' B  24  VAL HG23', -0.406, (179.966, 132.196, 153.561)), (' L  67  ARG  NE ', ' L  88  ASP  OD2', -0.406, (133.203, 95.195, 87.852)), (' R 398  ASP  OD2', ' R 423  TYR  OH ', -0.404, (99.213, 153.088, 136.698)), (' B 122  LEU HD12', ' B 140  LEU HD11', -0.403, (152.036, 153.486, 163.412)), (' B 388  ASP  OD2', ' N  60  TYR  OH ', -0.403, (126.68, 132.562, 128.799)), (' R 497  PHE  CD2', ' R 507  PRO  HB3', -0.402, (109.724, 154.23, 121.848)), (' N   3  GLN  HB2', ' N  25  SER  OG ', -0.401, (121.959, 144.043, 108.305)), (' H  36  TRP  HE1', ' H  79  LEU  HG ', -0.401, (131.111, 95.758, 120.126)), (' L  19  VAL HG22', ' L  81  ILE  HB ', -0.401, (130.412, 100.592, 86.314)), (' B 247  VAL  HA ', ' B 324  ASN  ND2', -0.401, (154.047, 133.301, 162.796))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
