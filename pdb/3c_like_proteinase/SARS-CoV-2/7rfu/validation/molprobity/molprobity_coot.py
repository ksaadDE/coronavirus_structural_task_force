# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.027759769414339844, (10.271999999999998, -11.749, -9.447))]
data['omega'] = []
data['rota'] = [('A', '   4 ', 'ARG', 0.2581487224748583, (-0.140000000000001, 5.4879999999999995, -6.767000000000002)), ('A', '   5 ', 'LYS', 0.10200783796213823, (2.121999999999998, 4.524, -3.807)), ('A', '   6 ', 'MET', 0.07146854703412113, (2.2429999999999994, 0.741, -4.065)), ('A', '  22 ', 'CYS', 0.17440294219657992, (9.233, -15.081999999999999, 26.092)), ('A', '  41 ', 'HIS', 0.11788156732231614, (14.273999999999997, -7.596000000000001, 23.183)), ('A', '  93 ', 'THR', 0.14790923960891295, (10.322, -28.225, 11.385)), ('A', ' 165 ', 'MET', 0.14225332915372657, (11.204999999999998, 0.895, 18.201)), ('A', ' 188 ', 'ARG', 0.22349680609215242, (16.942, 0.522, 24.861000000000004)), ('A', ' 216 ', 'ASP', 0.23042907548055225, (0.6659999999999973, 16.937, -14.845000000000004)), ('A', ' 242 ', 'LEU', 0.2626691666438394, (22.775999999999986, 15.089999999999993, -6.478000000000001))]
data['cbeta'] = []
data['probe'] = [(' A  27  LEU HD11', ' A  42  VAL  HB ', -0.644, (11.101, -11.099, 20.366)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.61, (11.213, 5.704, -0.187)), (' A 207  TRP  NE1', ' A 282  LEU HD12', -0.604, (4.445, 12.332, -8.102)), (' A 217  ARG  HB2', ' A 220  LEU HD12', -0.582, (5.427, 18.839, -18.289)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.582, (15.387, 7.985, -0.736)), (' A  75  LEU HD13', ' A  91  VAL HG21', -0.58, (10.264, -23.268, 13.258)), (' A  87  LEU HD13', ' A  89  LEU HD21', -0.534, (14.834, -15.922, 20.616)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.521, (10.414, -21.768, 5.137)), (' A 163  HIS  HE1', ' A 172  HIS  HB3', -0.511, (9.62, 1.87, 13.802)), (' A 111  THR  HA ', ' A 129  ALA  HA ', -0.498, (11.92, 3.465, 0.994)), (' A 164  HIS  NE2', ' A 175  THR HG23', -0.477, (16.365, -4.724, 15.212)), (' A  22  CYS  SG ', ' A  66  PHE  CE1', -0.475, (12.991, -16.045, 25.352)), (' A 233  VAL  HA ', ' A 236  LYS  HE2', -0.473, (21.707, 26.904, -3.677)), (' A 140  PHE  HD2', ' A 172  HIS  CG ', -0.469, (7.04, 2.474, 12.695)), (' A 164  HIS  CD2', ' A 175  THR HG23', -0.469, (15.909, -4.166, 15.003)), (' A 167  LEU HD11', ' A 185  PHE  CE1', -0.452, (16.415, 7.406, 15.866)), (' A 106  ILE  CD1', ' A 130  MET  HB2', -0.44, (16.255, 2.082, 3.787)), (' A  22  CYS  SG ', ' A  66  PHE  CD1', -0.435, (12.231, -16.525, 25.129)), (' A 219  PHE  HB2', ' A 271  LEU HD11', -0.432, (7.395, 22.119, -11.06)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.428, (0.654, -9.56, 6.603)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.424, (9.383, 1.795, 13.695)), (' A 111  THR HG23', ' A 292  THR HG23', -0.421, (12.803, 4.671, -3.162)), (' A  27  LEU HD22', ' A  39  PRO  HG2', -0.407, (10.816, -8.156, 19.086))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
