# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  32 ', 'PHE', 0.03310862675896822, (211.066, 183.779, 154.271)), ('A', ' 116 ', 'SER', 0.006800735688664576, (209.173, 182.826, 122.70899999999999)), ('A', ' 158 ', 'ARG', 0.024307958154182695, (223.597, 191.046, 120.426)), ('A', ' 186 ', 'PHE', 0.005054748028489969, (220.973, 196.96499999999997, 147.248)), ('A', ' 215 ', 'ASP', 0.016194723921731897, (219.57799999999997, 191.121, 149.77)), ('A', ' 255 ', 'SER', 0.003168142645536969, (236.876, 191.837, 126.255)), ('A', ' 258 ', 'TRP', 0.0005328308095715937, (236.94799999999998, 197.08700000000002, 132.462)), ('A', ' 334 ', 'ASN', 0.008110275332376786, (192.084, 131.208, 124.76899999999998)), ('A', ' 353 ', 'TRP', 0.02570236800574948, (166.91699999999997, 137.271, 117.62499999999999)), ('A', ' 402 ', 'ILE', 0.06364265232307345, (167.03599999999997, 146.177, 112.682)), ('A', ' 463 ', 'PRO', 0.00301368, (163.496, 142.13, 128.95199999999997)), ('A', ' 528 ', 'LYS', 0.0006401923825790411, (197.64799999999997, 140.518, 130.239)), ('A', ' 529 ', 'LYS', 0.0, (198.951, 141.513, 133.499)), ('A', ' 744 ', 'GLY', 0.00514628, (165.781, 186.559, 146.871)), ('A', ' 796 ', 'ASP', 0.001121611601755223, (173.66999999999976, 199.64599999999996, 206.77599999999998)), ('B', '  32 ', 'PHE', 0.019409275544249757, (160.694, 119.135, 157.993)), ('B', ' 333 ', 'THR', 0.03295905122605802, (123.73800000000008, 160.757, 126.455)), ('B', ' 571 ', 'ASP', 0.001193005786204324, (142.499, 168.2, 151.158)), ('B', ' 796 ', 'ASP', 0.006265889127788386, (186.48199999999989, 148.255, 211.149)), ('B', ' 854 ', 'LYS', 0.0005265858555542078, (186.966, 150.394, 160.102)), ('B', '1130 ', 'ILE', 0.0137333994385077, (139.4649999999999, 169.29599999999988, 217.74199999999996)), ('C', '  32 ', 'PHE', 0.039804806453300506, (131.60699999999989, 196.56399999999996, 149.192)), ('C', '  68 ', 'ILE', 0.03041892489536065, (117.37600000000002, 206.1440000000001, 129.505)), ('C', '  99 ', 'ASN', 0.025981008582307733, (114.695, 194.525, 132.002)), ('C', ' 131 ', 'CYS', 0.038289912448179766, (129.68999999999997, 183.715, 114.76299999999999)), ('C', ' 255 ', 'SER', 0.016315222047869206, (112.38199999999999, 209.39900000000003, 116.281)), ('C', ' 334 ', 'ASN', 0.019223766752817627, (184.40799999999987, 200.34700000000018, 118.174)), ('C', ' 353 ', 'TRP', 0.0038815335961932184, (192.338, 174.415, 114.67599999999999)), ('C', ' 402 ', 'ILE', 0.023483631312789355, (184.342, 168.859, 111.06999999999996)), ('C', ' 412 ', 'PRO', 0.015869358168303514, (180.404, 168.988, 126.60399999999998)), ('C', ' 690 ', 'GLN', 0.02320870581982581, (139.3399999999999, 203.801, 171.811)), ('C', ' 744 ', 'GLY', 0.00514628, (150.76199999999997, 153.797, 148.61999999999998)), ('C', ' 796 ', 'ASP', 0.0027277665848287986, (135.50399999999988, 163.46999999999994, 207.47899999999998)), ('C', ' 810 ', 'SER', 0.0003849765872533266, (128.481, 157.718, 189.334)), ('C', ' 813 ', 'SER', 0.028124918869417037, (134.392, 156.515, 184.30599999999998)), ('H', ' 110 ', 'THR', 0.0015586146452630492, (155.169, 94.50800000000001, 163.62599999999998)), ('L', '  56 ', 'THR', 0.0004072539740551903, (144.042, 89.73, 163.609)), ('L', ' 127 ', 'SER', 0.04788665764966959, (180.2209999999999, 63.79199999999998, 195.78)), ('M', ' 110 ', 'THR', 0.0015705944011358416, (113.751, 216.28599999999997, 148.49)), ('N', '  56 ', 'THR', 0.00040455243020563904, (115.813, 228.16399999999996, 147.35699999999997)), ('N', ' 127 ', 'SER', 0.0476361143493478, (68.962, 215.23799999999997, 172.94)), ('O', ' 110 ', 'THR', 0.0015479452067163402, (236.719, 190.405, 156.88)), ('P', '  56 ', 'THR', 0.0004024939385248526, (246.683, 183.66, 158.251)), ('P', ' 127 ', 'SER', 0.04733163270980759, (249.18400000000003, 233.437, 181.33099999999996))]
data['omega'] = [('B', ' 854 ', 'LYS', None, (187.54399999999998, 151.691, 160.288)), ('H', ' 106 ', 'ASP', None, (155.839, 105.338, 158.10199999999998)), ('H', ' 158 ', 'PRO', None, (173.05999999999997, 70.481, 178.384)), ('H', ' 160 ', 'PRO', None, (167.186, 71.894, 177.891)), ('L', '   8 ', 'PRO', None, (156.50699999999998, 101.54600000000002, 183.25999999999996)), ('L', '  95 ', 'TRP', None, (168.062, 98.95200000000001, 161.621)), ('L', ' 141 ', 'PRO', None, (154.2629999999999, 90.071, 198.29699999999997)), ('M', ' 106 ', 'ASP', None, (123.333, 209.36799999999994, 145.562)), ('M', ' 158 ', 'PRO', None, (81.598, 215.61099999999993, 157.486)), ('M', ' 160 ', 'PRO', None, (86.013, 219.763, 157.30599999999998)), ('N', '   8 ', 'PRO', None, (115.10200000000002, 213.91599999999994, 169.212)), ('N', '  95 ', 'TRP', None, (110.84599999999999, 202.842, 147.58299999999997)), ('N', ' 141 ', 'PRO', None, (104.037, 223.68199999999993, 181.25399999999996)), ('O', ' 106 ', 'ASP', None, (227.23099999999997, 184.239, 152.38599999999997)), ('O', ' 158 ', 'PRO', None, (247.44999999999996, 220.659, 166.087)), ('O', ' 160 ', 'PRO', None, (249.381, 214.94599999999994, 166.715)), ('P', '   8 ', 'PRO', None, (229.908, 191.597, 176.603)), ('P', '  95 ', 'TRP', None, (226.115, 198.40399999999997, 153.198)), ('P', ' 141 ', 'PRO', None, (240.71399999999997, 198.61699999999996, 190.63199999999998))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 587  ILE  CA ', ' C 841  LEU  CA ', -0.841, (134.979, 156.484, 150.111)), (' B 575  ALA  N  ', ' C 844  ILE  N  ', -0.804, (133.524, 163.003, 149.972)), (' C 729  VAL  H  ', ' C1059  GLY  HA2', -0.697, (150.483, 165.48, 179.483)), (' B 575  ALA  N  ', ' C 844  ILE  H  ', -0.677, (133.025, 162.848, 149.965)), (' B 183  GLN  CA ', ' B 262  ALA  H  ', -0.668, (163.825, 96.296, 147.29)), (' C 199  GLY  HA2', ' C 232  GLY  HA2', -0.665, (139.717, 179.413, 124.821)), (' B 575  ALA  N  ', ' C 843  ASP  N  ', -0.658, (133.708, 161.333, 148.905)), (' B 729  VAL  H  ', ' B1059  GLY  HA2', -0.652, (176.425, 155.84, 181.163)), (' B 143  VAL  N  ', ' B 245  HIS  H  ', -0.645, (169.805, 96.726, 136.392)), (' B 575  ALA  CA ', ' C 844  ILE  H  ', -0.641, (132.97, 162.526, 149.462)), (' B 142  GLY  HA2', ' B 244  LEU  N  ', -0.631, (168.032, 98.972, 136.259)), (' B 587  ILE  CA ', ' C 842  GLY  H  ', -0.625, (135.211, 158.128, 150.058)), (' C 363  ALA  O  ', ' C 526  GLY  HA2', -0.618, (176.744, 193.739, 122.217)), (' B 587  ILE  CA ', ' C 842  GLY  N  ', -0.616, (134.817, 158.217, 150.119)), (' B 587  ILE  N  ', ' C 840  CYS  O  ', -0.614, (133.614, 157.631, 152.031)), (' B  97  LYS  CA ', ' B 186  PHE  H  ', -0.608, (167.606, 101.341, 150.347)), (' B 143  VAL  C  ', ' B 245  HIS  H  ', -0.604, (169.627, 95.491, 136.504)), (' B 574  ASP  C  ', ' C 845  ALA  H  ', -0.587, (134.065, 161.546, 151.759)), (' H 109  GLY  HA2', ' L  49  TYR  CA ', -0.571, (151.451, 97.283, 162.928)), (' O 109  GLY  HA2', ' P  49  TYR  CA ', -0.566, (236.492, 185.551, 157.493)), (' A  67  ALA  O  ', ' A 261  GLY  HA2', -0.564, (228.315, 190.501, 137.257)), (' M 109  GLY  HA2', ' N  49  TYR  CA ', -0.56, (118.184, 218.133, 148.861)), (' B 574  ASP  O  ', ' B 587  ILE  N  ', -0.545, (134.457, 159.05, 151.292)), (' A 729  VAL  H  ', ' A1059  GLY  HA2', -0.54, (172.156, 183.632, 179.197)), (' B 575  ALA  N  ', ' C 843  ASP  CA ', -0.533, (134.166, 162.366, 148.848)), (' B 574  ASP  N  ', ' C 843  ASP  CA ', -0.532, (136.086, 162.475, 148.838)), (' B 575  ALA  N  ', ' C 843  ASP  C  ', -0.53, (134.108, 162.385, 149.583)), (' B 575  ALA  C  ', ' C 843  ASP  N  ', -0.528, (133.836, 161.789, 147.619)), (' B 587  ILE  C  ', ' C 840  CYS  C  ', -0.527, (134.555, 156.441, 152.568)), (' C 729  VAL  N  ', ' C1059  GLY  HA2', -0.516, (151.348, 165.829, 179.843)), (' B 575  ALA  C  ', ' C 843  ASP  H  ', -0.512, (133.213, 161.65, 147.371)), (' B 142  GLY  HA3', ' B 244  LEU  C  ', -0.51, (167.872, 96.892, 135.395)), (' H 106  ASP  O  ', ' L  32  ASN  N  ', -0.493, (154.547, 104.315, 162.441)), (' M 106  ASP  O  ', ' N  32  ASN  N  ', -0.491, (122.464, 211.501, 149.078)), (' O 106  ASP  O  ', ' P  32  ASN  N  ', -0.49, (228.764, 184.474, 156.261)), (' B 586  ASP  O  ', ' C 841  LEU  N  ', -0.476, (132.926, 156.014, 151.323)), (' C 199  GLY  CA ', ' C 232  GLY  HA2', -0.472, (139.434, 179.167, 124.938)), (' B 143  VAL  N  ', ' B 245  HIS  N  ', -0.466, (169.313, 96.564, 136.093)), (' B 574  ASP  CA ', ' C 843  ASP  C  ', -0.466, (135.222, 163.017, 150.063)), (' B 588  THR  N  ', ' C 841  LEU  CA ', -0.466, (135.59, 155.789, 151.307)), (' A 114  THR  C  ', ' A 116  SER  H  ', -0.465, (209.012, 181.829, 120.509)), (' B 142  GLY  CA ', ' B 244  LEU  N  ', -0.452, (167.948, 98.741, 136.047)), (' B 574  ASP  H  ', ' C 843  ASP  CA ', -0.449, (136.366, 163.228, 149.325)), (' H 106  ASP  O  ', ' L  31  SER  C  ', -0.441, (153.948, 104.562, 162.091)), (' B 588  THR  N  ', ' C 841  LEU  N  ', -0.439, (134.771, 155.636, 152.033)), (' M 106  ASP  O  ', ' N  31  SER  C  ', -0.439, (122.838, 211.962, 149.682)), (' O 106  ASP  O  ', ' P  31  SER  C  ', -0.438, (228.871, 183.921, 156.978)), (' B 575  ALA  CA ', ' C 843  ASP  N  ', -0.437, (133.875, 161.684, 148.461)), (' B 587  ILE  N  ', ' C 841  LEU  CA ', -0.436, (133.881, 157.19, 150.896)), (' A 566  GLY  HA2', ' B  43  PHE  O  ', -0.436, (182.635, 135.572, 151.308)), (' A 729  VAL  N  ', ' A1059  GLY  HA2', -0.435, (172.034, 182.837, 179.45)), (' B 575  ALA  O  ', ' C 843  ASP  CA ', -0.433, (133.884, 163.228, 147.761)), (' A 111  ASP  C  ', ' A 113  LYS  H  ', -0.431, (214.426, 179.835, 117.913)), (' B 575  ALA  N  ', ' C 842  GLY  C  ', -0.43, (134.607, 160.788, 148.953)), (' A  43  PHE  O  ', ' C 566  GLY  HA2', -0.43, (186.702, 193.428, 146.569)), (' C 122  ASN  C  ', ' C 124  THR  H  ', -0.427, (113.07, 186.745, 123.089)), (' B 587  ILE  N  ', ' C 842  GLY  N  ', -0.421, (134.008, 157.818, 150.204)), (' B 729  VAL  N  ', ' B1059  GLY  HA2', -0.414, (176.316, 156.35, 181.796)), (' B 586  ASP  O  ', ' C 841  LEU  CA ', -0.413, (132.663, 156.306, 150.858)), (' B 587  ILE  CA ', ' C 841  LEU  N  ', -0.412, (134.264, 156.384, 151.546)), (' B 587  ILE  N  ', ' C 841  LEU  C  ', -0.41, (133.67, 157.562, 150.305)), (' A 253  ASP  O  ', ' A 257  GLY  HA3', -0.409, (234.737, 196.038, 127.393)), (' B  97  LYS  CA ', ' B 186  PHE  N  ', -0.406, (167.485, 101.045, 150.9)), (' B 586  ASP  C  ', ' C 841  LEU  C  ', -0.404, (133.026, 157.031, 149.97)), (' B 182  LYS  O  ', ' B 261  GLY  HA3', -0.403, (165.722, 96.353, 146.246)), (' B 574  ASP  H  ', ' C 843  ASP  C  ', -0.4, (136.117, 163.925, 149.209))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
