# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', '  54 ', 'ASP', 0.03806531734415965, (-8.9546, 30.57736, -6.458199999999999)), ('H', ' 104 ', 'LEU', 0.044305414323092984, (-6.90676, 19.019050000000004, -0.34708)), ('L', '  96 ', 'SER', 0.011534193891346672, (1.4311399999999999, 15.996890000000002, -15.43984)), ('L', '  97 ', 'LEU', 0.021117149025042633, (-1.07645, 17.69117, -13.00305)), ('L', ' 161 ', 'ALA', 0.015403534797454925, (-39.62239999999997, -6.159870000000003, -39.00392)), ('L', ' 167 ', 'THR', 0.0032484399999999996, (-32.00575, -5.53701, -20.699199999999998)), ('L', ' 168 ', 'PRO', 0.00301368, (-31.08998, -4.38436, -17.09612)), ('L', ' 172 ', 'SER', 0.02899263247359178, (-36.45736, -5.88813, -7.4749)), ('L', ' 174 ', 'ASN', 0.0005528140352043247, (-31.589209999999998, -7.734729999999999, -7.9428399999999995)), ('R', ' 359 ', 'SER', 0.007051484359239556, (15.407559999999998, -2.469840000000002, 19.98174))]
data['omega'] = [('H', ' 107 ', 'PRO', None, (-7.899589999999999, 13.791160000000003, -3.6084999999999994)), ('H', ' 156 ', 'PRO', None, (-33.58745, 14.326950000000007, -26.669749999999997)), ('H', ' 158 ', 'PRO', None, (-33.38887, 12.79669, -20.83686)), ('L', ' 145 ', 'PRO', None, (-31.19691999999999, -15.642139999999998, -14.2573)), ('L', ' 167 ', 'THR', None, (-32.1166, -4.53799, -21.817589999999996)), ('L', ' 174 ', 'ASN', None, (-32.62716, -7.650899999999998, -6.929369999999999))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' L 172  SER  O  ', ' L 174  ASN  N  ', -0.822, (-33.597, -7.477, -7.452)), (' H  16  ARG  HG2', ' H  17  SER  H  ', -0.781, (-21.826, 26.34, -30.302)), (' H  86  ARG  NH1', ' H  88  GLU  OE2', -0.759, (-11.991, 14.331, -30.512)), (' R 409  GLN HE22', ' R 418  ILE  H  ', -0.7, (1.826, 22.067, 15.562)), (' H  46  GLU  OE2', ' H 301  HOH  O  ', -0.689, (-9.588, 11.345, -21.279)), (' H  37  VAL HG21', ' H 112  TRP  CZ3', -0.644, (-17.521, 12.665, -11.727)), (' H 110  SER  HB3', ' L  48  LEU  H  ', -0.642, (-16.879, 9.259, -2.565)), (' H  16  ARG  HG2', ' H  17  SER  N  ', -0.598, (-21.491, 26.063, -29.645)), (' H  36  TRP  HD1', ' H  69  ILE HD12', -0.59, (-14.284, 22.746, -14.213)), (' R 462  LYS  HB2', ' R 465  GLU  HB2', -0.59, (-2.805, 9.698, 23.127)), (' L  56  ARG  NH1', ' L 302  HOH  O  ', -0.582, (-9.594, -0.178, 6.7)), (' R 358  ILE  O  ', ' R 360  ASN  N  ', -0.581, (16.216, -3.593, 17.956)), (' R 364  ASP  O  ', ' R 367  VAL HG12', -0.571, (25.922, 5.405, 14.14)), (' R 409  GLN HE21', ' R 419  ALA  H  ', -0.571, (2.321, 20.586, 17.194)), (' L 135  THR  O  ', ' L 303  HOH  O  ', -0.548, (-49.543, -0.526, -28.301)), (' H 193  VAL HG11', ' H 203  TYR  OH ', -0.546, (-55.452, 1.021, -9.2)), (' H  34  MET  HE1', ' H  97  ARG  HG3', -0.539, (-17.445, 21.937, -3.48)), (' L  29  ASN  OD1', ' L  30  ILE  N  ', -0.538, (0.114, 6.492, -11.121)), (' H  68  THR  CG2', ' H  81  GLN  HB3', -0.529, (-14.621, 28.416, -21.232)), (' R 390  LEU  HA ', ' R 524  VAL  HA ', -0.528, (21.601, 3.996, 29.681)), (' H  51  ILE HD13', ' H  71  ARG  HG3', -0.514, (-13.031, 28.163, -10.989)), (' H 223  LYS  HG3', ' H 303  HOH  O  ', -0.513, (-59.227, -1.988, -20.544)), (' R 394  ASN  HB2', ' R 516  GLU  OE1', -0.505, (9.374, -0.358, 24.409)), (' R 448  ASN  O  ', ' R 496  GLY  HA2', -0.505, (0.659, 19.58, -1.963)), (' R 367  VAL HG13', ' R 368  LEU HD12', -0.503, (25.379, 7.163, 11.803)), (' H 147  LEU HD13', ' H 220  VAL HG21', -0.503, (-52.963, 3.298, -15.335)), (' R 472  ILE HD12', ' R 484  GLU  CG ', -0.497, (-17.893, 16.18, 6.172)), (' H 171  GLY  O  ', ' H 191  VAL  HA ', -0.491, (-46.457, -0.327, -11.072)), (' H  12  VAL HG11', ' H  18  LEU  HB2', -0.49, (-23.592, 23.097, -26.407)), (' L   6  THR  HA ', ' L 301  HOH  O  ', -0.484, (-7.606, -0.473, -17.136)), (' L  95  ASP  O  ', ' L  97  LEU HD22', -0.481, (2.527, 17.517, -12.786)), (' L 114  LYS  HG2', ' L 145  PRO  HD3', -0.481, (-30.904, -18.193, -13.602)), (' H  37  VAL HG21', ' H 112  TRP  HZ3', -0.481, (-17.991, 12.343, -11.521)), (' R 386  LYS  HA ', ' R 389  ASP  OD1', -0.481, (26.883, 5.725, 26.121)), (' R 472  ILE HD12', ' R 484  GLU  HG2', -0.479, (-17.546, 16.273, 6.923)), (' H  29  PHE  CD2', ' H  76  ASN  HA ', -0.479, (-19.547, 29.346, -5.082)), (' H  70  SER  HB2', ' H  79  TYR  HB2', -0.47, (-16.941, 29.485, -15.011)), (' H  68  THR HG23', ' H  81  GLN  HB3', -0.463, (-15.092, 28.044, -20.731)), (' H 132  PRO  HB3', ' H 220  VAL HG12', -0.461, (-53.291, 6.045, -19.723)), (' H  36  TRP  CE2', ' H  80  LEU  HB2', -0.456, (-17.656, 22.693, -15.409)), (' L  49  LEU  HA ', ' L  60  VAL HG21', -0.453, (-15.299, 4.707, 1.591)), (' H 110  SER  HB2', ' L  47  LYS  HA ', -0.45, (-18.939, 9.576, -2.974)), (' L  20  THR  HA ', ' L  75  LEU  O  ', -0.448, (-9.929, -6.788, -4.476)), (' R 409  GLN  NE2', ' R 419  ALA  H  ', -0.446, (2.405, 20.99, 16.934)), (' R 380  TYR  O  ', ' R 430  THR  HA ', -0.443, (15.478, 11.635, 26.408)), (' H  97  ARG  NH1', ' R 484  GLU  OE1', -0.443, (-16.605, 18.469, 2.469)), (' L 211  ALA  O  ', ' L 214  GLU  HG2', -0.442, (-57.659, -8.014, -29.037)), (' L 172  SER  C  ', ' L 175  LYS  H  ', -0.44, (-34.701, -7.43, -8.376)), (' H  52  SER  C  ', ' H  54  ASP  H  ', -0.44, (-9.034, 27.64, -6.259)), (' H  29  PHE  CD1', ' H  34  MET  HE3', -0.44, (-17.947, 24.649, -4.736)), (' R 467  ASP  OD1', ' R 469  SER  HB3', -0.438, (-9.109, 10.196, 14.226)), (' R 516  GLU  OE2', ' R 519  HIS  ND1', -0.432, (6.163, -0.024, 27.508)), (' L  96  SER  HB3', ' L  98  LYS  HE2', -0.43, (-0.437, 14.383, -16.683)), (' H  20  LEU  HG ', ' H  82  MET  HE3', -0.43, (-20.956, 21.965, -20.03)), (' L  25  GLY  HA3', ' L  30  ILE HD12', -0.429, (-1.04, 2.844, -12.309)), (' H  16  ARG  CG ', ' H  17  SER  H  ', -0.429, (-21.631, 26.483, -30.44)), (' H 110  SER  HA ', ' H 112  TRP  CD1', -0.428, (-18.803, 12.404, -4.794)), (' L  63  ARG  NH2', ' L  84  ASP  OD1', -0.425, (-20.502, -4.162, 0.349)), (' L   7  GLN  N  ', ' L 301  HOH  O  ', -0.418, (-7.593, -0.548, -16.746)), (' H  99  LEU  HA ', ' H 109  SER  HB3', -0.412, (-13.413, 15.617, -1.049)), (' L  62  ASP  N  ', ' L  62  ASP  OD1', -0.41, (-14.987, -2.845, 8.265)), (' L  96  SER  O  ', ' L  97  LEU  HB2', -0.41, (-0.097, 18.914, -14.398)), (' H 209  HIS  CE1', ' H 212  SER  HG ', -0.41, (-38.086, 16.442, -25.371)), (' R 359  SER  H  ', ' R 395  VAL  HB ', -0.408, (14.871, 0.003, 19.704)), (' L 167  THR  O  ', ' L 167  THR HG23', -0.407, (-29.624, -6.099, -20.557)), (' L 166  THR  O  ', ' L 167  THR HG22', -0.406, (-30.938, -5.984, -23.018)), (' L  15  PRO  HD3', ' L 111  GLY  H  ', -0.405, (-23.345, -14.415, -4.628))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
