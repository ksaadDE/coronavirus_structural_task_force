# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (89.03799999999994, 112.622, 115.596)), ('A', ' 607 ', 'SER', None, (83.14999999999998, 79.049, 81.895)), ('B', ' 183 ', 'PRO', None, (111.87800000000003, 100.498, 123.70200000000001))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' P  12    U  O4 ', ' T  19    A  N1 ', -0.982, (63.174, 91.362, 112.464)), (' P  11    A  H61', ' T  20    U  H3 ', -0.775, (59.282, 90.251, 112.733)), (' A 402  THR HG22', ' A 404  ASN  H  ', -0.736, (101.454, 110.919, 125.226)), (' A 386  ASN  ND2', ' B 127  LYS  HD2', -0.714, (106.532, 117.841, 124.211)), (' P  12    U  O4 ', ' T  19    A  C6 ', -0.665, (63.369, 90.514, 112.869)), (' A 790  ASN  O  ', ' A 790  ASN  OD1', -0.645, (103.547, 95.734, 93.912)), (' A 846  ASP  HB3', ' A 849  LYS  HD2', -0.634, (84.31, 86.055, 123.011)), (' A 494  ILE  O  ', ' A 573  GLN  NE2', -0.631, (74.283, 101.88, 102.759)), (' A 911  ASN  HA ', ' A 914  ARG  HD2', -0.628, (62.854, 68.854, 113.214)), (' A 755  MET  HG2', ' A 764  VAL HG22', -0.627, (91.056, 85.335, 85.529)), (' P  12    U  O4 ', ' T  19    A  N6 ', -0.62, (62.486, 90.288, 112.398)), (' C  16  VAL HG23', ' C  19  GLN HE21', -0.61, (96.782, 83.234, 135.789)), (' A 856  ILE  O  ', ' A 860  VAL HG23', -0.608, (75.113, 75.962, 117.393)), (' A  86  ILE HD11', ' A 219  PHE  HB3', -0.606, (119.892, 108.272, 59.675)), (' B 145  THR HG23', ' B 146  THR HG23', -0.585, (123.835, 119.21, 127.09)), (' A 128  VAL  HA ', ' A 244  ILE HD11', -0.558, (114.098, 98.44, 80.902)), (' A 238  TYR  O  ', ' A 242  MET  HG3', -0.555, (108.188, 106.305, 79.162)), (' A 575  LEU HD13', ' A 641  LYS  HG3', -0.554, (79.074, 102.566, 88.221)), (' A 531  THR HG22', ' A 536  ILE HD12', -0.547, (84.481, 117.609, 102.161)), (' A 427  GLY  HA2', ' A 430  LYS  HE3', -0.544, (91.627, 59.915, 120.087)), (' A 311  ALA  O  ', ' A 315  VAL HG23', -0.543, (101.953, 110.457, 88.795)), (' P  12    U  C4 ', ' T  19    A  N1 ', -0.536, (62.6, 92.237, 112.808)), (' A 750  ARG  HG3', ' A 750  ARG HH11', -0.536, (83.273, 89.279, 78.161)), (' B 135  TYR  HE1', ' B 139  LYS  HZ3', -0.532, (126.815, 103.811, 122.244)), (' A 712  GLY  HA2', ' A 715  ILE HD12', -0.528, (103.111, 87.233, 66.345)), (' A 503  GLY  O  ', ' A 507  ASN  N  ', -0.523, (86.083, 109.12, 116.741)), (' A 330  VAL HG11', ' B 117  LEU HD13', -0.523, (98.338, 122.678, 108.695)), (' A  96  VAL HG13', ' A 219  PHE  HZ ', -0.516, (124.322, 109.255, 64.88)), (' A 546  TYR  CE2', ' A 845  ASP  HB2', -0.515, (90.077, 87.745, 121.258)), (' A 872  HIS  CD2', ' A 877  TYR  HD2', -0.513, (89.272, 66.37, 103.237)), (' A 836  ARG HH22', ' A 840  ALA  HB2', -0.511, (87.282, 79.378, 113.542)), (' A 571  PHE  CE1', ' A 654  ARG  HG3', -0.511, (81.994, 112.643, 93.42)), (' A 889  ARG  CZ ', ' A 916  TRP  HB2', -0.504, (70.675, 66.601, 118.021)), (' P  11    A  N6 ', ' T  20    U  H3 ', -0.503, (59.35, 90.614, 112.319)), (' A 836  ARG  NH2', ' A 840  ALA  HB2', -0.497, (87.731, 79.314, 113.122)), (' B 135  TYR  CE2', ' B 172  ILE HG22', -0.49, (123.159, 104.578, 125.759)), (' A 366  LEU HD11', ' A 374  TYR  HE2', -0.49, (84.591, 127.209, 111.246)), (' B 135  TYR  HE2', ' B 172  ILE HG22', -0.485, (123.038, 104.726, 126.347)), (' B 135  TYR  HE1', ' B 139  LYS  NZ ', -0.481, (127.073, 104.267, 122.498)), (' C  29  TRP  O  ', ' C  33  VAL HG23', -0.481, (105.523, 88.866, 125.846)), (' A 423  ALA  HA ', ' A 883  LEU HD11', -0.48, (85.712, 65.525, 119.833)), (" P  14    A  H2'", ' P  15    A  C8 ', -0.48, (72.898, 91.383, 117.48)), (' A 201  ILE HG23', ' A 222  PHE  HB3', -0.48, (115.537, 110.692, 59.622)), (' A 720  VAL HG11', ' A 775  LEU  HG ', -0.479, (97.585, 84.393, 69.69)), (' A 689  TYR  O  ', ' A 693  VAL HG23', -0.475, (87.493, 97.362, 92.369)), (' A 239  SER  OG ', ' A 465  ASP  OD1', -0.475, (103.703, 103.449, 77.461)), (' A 454  ASP  O  ', ' A 457  ARG  HG2', -0.47, (107.817, 98.943, 106.311)), (' A 665  GLU  N  ', ' A 665  GLU  OE1', -0.464, (96.663, 108.946, 103.951)), (' A 476  VAL HG22', ' A 696  ILE HG22', -0.463, (90.905, 94.911, 84.507)), (' A 507  ASN  ND2', ' A 541  GLN  OE1', -0.462, (90.244, 106.509, 117.163)), (' A 386  ASN HD21', ' B 127  LYS  HD2', -0.462, (105.443, 117.846, 124.62)), (' A 413  GLY  HA3', ' A 441  PHE  CD2', -0.462, (93.084, 83.141, 121.704)), (' A 569  ARG  O  ', ' A 573  GLN  HB2', -0.459, (76.795, 105.633, 99.231)), (' A  49  LEU  O  ', ' A  50  LYS  HD2', -0.459, (117.979, 88.29, 64.139)), (' A 618  ASP  HA ', ' A1102  HOH  O  ', -0.459, (96.877, 86.432, 95.904)), (' A 366  LEU HD11', ' A 374  TYR  CE2', -0.457, (84.916, 126.786, 111.098)), (' A 329  LEU  HB3', ' B 114  CYS  SG ', -0.456, (98.438, 126.271, 101.876)), (' C  13  LEU  HA ', ' C  16  VAL HG12', -0.456, (99.177, 80.015, 132.193)), (' A 388  LEU HD23', ' A 397  SER  HB3', -0.454, (106.365, 111.363, 114.201)), (' A 153  ASP  N  ', ' A 153  ASP  OD1', -0.452, (129.124, 92.483, 93.183)), (' C   6  VAL HG11', ' C  48  ALA  HB1', -0.45, (105.468, 71.972, 123.582)), (' P  10    G  H1 ', ' T  21    C  N4 ', -0.448, (55.742, 90.073, 112.048)), (' A 658  GLU  O  ', ' A 662  VAL HG22', -0.448, (91.224, 108.057, 99.667)), (' A 885  LEU HD11', ' A 921  TYR  CE2', -0.444, (74.843, 69.617, 112.368)), (' A  41  LYS  HB3', ' A  41  LYS  HE3', -0.441, (105.081, 89.836, 57.649)), (' A 136  GLU  N  ', ' A 136  GLU  OE2', -0.44, (113.036, 83.811, 88.022)), (' C  23  GLU  HA ', ' C  29  TRP  HB2', -0.439, (103.984, 91.869, 129.76)), (' A 885  LEU  O  ', ' A 889  ARG  HG2', -0.439, (75.126, 66.036, 118.612)), (' A 855  MET  HE3', ' A 891  LEU HD21', -0.437, (78.275, 74.878, 124.328)), (' A 333  ILE HG22', ' A 340  PHE  HB2', -0.437, (90.657, 129.294, 112.307)), (' A 633  MET  O  ', ' A 637  VAL HG23', -0.435, (90.056, 103.399, 87.303)), (' C  36  HIS  NE2', ' C  40  LEU HD11', -0.432, (100.0, 81.07, 121.576)), (' A 684  ASP  OD1', ' A 685  ALA  N  ', -0.43, (86.357, 103.428, 101.458)), (' A 420  TYR  O  ', ' A 424  VAL HG23', -0.428, (90.467, 66.752, 123.463)), (' A 144  GLU  O  ', ' A 148  THR  OG1', -0.423, (128.17, 93.231, 82.865)), (' A 378  PRO  HD2', ' A 537  PRO  HG2', -0.422, (92.83, 118.132, 107.106)), (' B  90  MET  HB3', ' B  90  MET  HE2', -0.421, (87.107, 119.594, 120.08)), (' A 696  ILE  O  ', ' A 700  VAL HG23', -0.42, (92.512, 93.07, 83.779)), (' B 141  THR HG22', ' B 142  CYS  SG ', -0.413, (118.676, 111.682, 119.483)), (' A  86  ILE HG22', ' A 224  GLN  NE2', -0.413, (119.095, 111.984, 54.169)), (' A 444  GLN  HB3', ' A 448  ALA  HB2', -0.413, (102.472, 92.897, 118.597)), (' A 480  PHE  CZ ', ' A 693  VAL HG22', -0.412, (86.65, 97.561, 89.263)), (' A 413  GLY  HA3', ' A 441  PHE  HD2', -0.412, (92.912, 82.821, 121.776)), (' A 139  CYS  SG ', ' A 143  LYS  HE3', -0.407, (119.813, 86.096, 87.531)), (' A 566  MET  HB2', ' A 566  MET  HE3', -0.405, (78.826, 110.527, 108.04)), (' A 376  ALA  HB1', ' A 538  THR HG22', -0.403, (88.171, 114.948, 108.906)), (' A1003  POP  O3 ', ' A1003  POP  O6 ', -0.403, (98.101, 90.663, 104.478)), (' A 854  LEU  HA ', ' A 854  LEU HD23', -0.403, (75.038, 82.606, 121.853)), (' A 707  LEU  O  ', ' A 710  THR HG22', -0.402, (102.573, 88.633, 71.564)), (' C  36  HIS  HE2', ' C  40  LEU HD11', -0.4, (99.945, 81.413, 120.901)), (' C  14  LEU HD22', ' C  36  HIS  ND1', -0.4, (101.469, 83.243, 124.847))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
