# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  26 ', 'GLY', 0.034434758690275076, (-23.33167, 15.82267, 23.28334)), ('A', '  56 ', 'SER', 0.004596601113233811, (-4.315629999999998, 13.36786, 27.02892)), ('A', '  57 ', 'GLY', 0.02485595348803646, (-2.1683399999999984, 13.65114, 23.94093)), ('A', ' 103 ', 'PRO', 0.07629297135958013, (-13.409009999999999, -1.7049700000000005, 26.89456)), ('A', ' 104 ', 'SER', 0.03615869742671917, (-11.298649999999997, -4.876379999999998, 26.8142)), ('A', ' 112 ', 'PRO', 0.04307858222908717, (-21.65554, 7.37286, 16.9251)), ('B', '  28 ', 'SER', 0.018543094731445133, (-8.09195, -14.519990000000004, 16.26892)), ('B', '  91 ', 'ASP', 0.019065075796220143, (-5.229700000000001, -5.901490000000002, 16.58013)), ('B', ' 107 ', 'LEU', 0.009480324690636107, (-33.55104, -8.367520000000003, -5.77533)), ('B', ' 152 ', 'ASP', 0.02068361101023036, (-1.1808900000000015, -10.24641, -21.11726)), ('E', ' 481 ', 'ASN', 0.025420294827967756, (12.440840000000001, -24.78253, 15.838370000000001)), ('E', ' 484 ', 'LYS', 0.007370274685309379, (5.45729, -20.103910000000006, 16.40743)), ('E', ' 520 ', 'ALA', 0.015542567686903538, (17.98653000000001, -15.281429999999997, 64.47858)), ('H', '  26 ', 'GLY', 0.03438167528416622, (-2.611289999999997, -51.96661, 67.53056)), ('H', '  56 ', 'SER', 0.004380422938502294, (16.18895, -49.79413, 62.68269)), ('H', '  57 ', 'GLY', 0.025367541977696847, (18.506750000000004, -49.58224, 65.67041)), ('H', ' 103 ', 'PRO', 0.08061280609388852, (6.74818, -35.04567, 60.84386)), ('H', ' 104 ', 'SER', 0.03480886021082169, (8.786689999999997, -31.86796, 60.34821)), ('H', ' 112 ', 'PRO', 0.04288721089549591, (-0.8982199999999967, -42.60397, 72.42794)), ('L', '  28 ', 'SER', 0.01971747136330136, (12.642130000000009, -20.34947, 69.35049)), ('L', '  91 ', 'ASP', 0.01846301784842631, (15.706590000000011, -28.859650000000006, 70.23635)), ('L', ' 107 ', 'LEU', 0.009168574252057459, (-12.111039999999988, -23.705360000000006, 92.75633999999998)), ('L', ' 152 ', 'ASP', 0.020554962622884396, (20.56626000000001, -18.88905, 106.74766)), ('R', ' 484 ', 'LYS', 0.006302637372676787, (25.858350000000005, -16.024250000000006, 71.1401)), ('R', ' 520 ', 'ALA', 0.0032484399999999996, (38.95528, -22.57495, 23.42394))]
data['omega'] = [('A', ' 157 ', 'PRO', None, (-14.144490000000008, 22.11259, -14.350870000000002)), ('A', ' 159 ', 'PRO', None, (-19.82282000000001, 20.01901, -15.3048)), ('B', ' 142 ', 'PRO', None, (-27.661540000000002, -6.92595, -9.21177)), ('H', ' 157 ', 'PRO', None, (8.137570000000004, -52.16044, 105.27687)), ('H', ' 159 ', 'PRO', None, (2.455350000000003, -50.03967, 106.12794)), ('L', ' 142 ', 'PRO', None, (-6.10637, -24.496980000000008, 96.20059)), ('R', ' 480 ', 'CYS', None, (29.1113, -8.758660000000004, 71.44856))]
data['rota'] = [('E', ' 360 ', 'ASN', 0.2991387567482215, (18.724810000000005, -3.86158, 59.49055)), ('E', ' 486 ', 'PHE', 0.006365841543325491, (1.6221800000000002, -25.72918, 15.86053)), ('R', ' 484 ', 'LYS', 0.14143039514643233, (25.858350000000005, -16.024250000000006, 71.1401)), ('R', ' 486 ', 'PHE', 0.006566947805090219, (21.997920000000015, -10.331900000000001, 71.30238)), ('L', '  89 ', 'SER', 0.239341305866739, (9.44592, -29.869090000000007, 72.73787)), ('L', ' 168 ', 'GLN', 0.18121973220106458, (-7.081609999999998, -34.61956, 103.52338)), ('B', '  89 ', 'SER', 0.2412928453583812, (-11.58203, -4.68753, 14.400360000000001)), ('B', ' 168 ', 'GLN', 0.055424154034277445, (-29.06322, 4.0604, -14.91552))]
data['cbeta'] = [('E', ' 486 ', 'PHE', ' ', 0.3403414019950273, (1.5449900000000003, -26.79986, 14.891519999999998)), ('R', ' 486 ', 'PHE', ' ', 0.29034423346476074, (21.924780000000013, -9.13733, 72.08949))]
data['probe'] = [(' H  99  ARG  HB3', ' H 112  PRO  HD2', -0.803, (1.481, -42.918, 69.892)), (' A  99  ARG  HB3', ' A 112  PRO  HD2', -0.796, (-18.364, 8.082, 18.859)), (' E 357  ARG  NE ', ' R 421  TYR  OH ', -0.778, (18.331, -12.478, 52.786)), (' R 520  ALA  HB1', ' R 521  PRO  HD2', -0.77, (39.68, -23.679, 25.087)), (' R 366  SER  O  ', ' R 370  ASN  ND2', -0.735, (20.494, -42.056, 28.85)), (' E 393  THR  O  ', ' E 523  THR  OG1', -0.728, (15.84, -8.81, 59.096)), (' A   2  VAL  HA ', ' A  26  GLY  HA3', -0.724, (-23.52, 14.491, 21.608)), (' R 393  THR  O  ', ' R 523  THR  OG1', -0.716, (36.874, -28.949, 27.892)), (' H   2  VAL  HA ', ' H  26  GLY  HA3', -0.712, (-3.313, -50.094, 68.265)), (' L  32  GLY  N  ', ' L  50  ASP  OD1', -0.695, (5.138, -26.063, 69.599)), (' E 472  ILE HG21', ' E 488  CYS  SG ', -0.694, (7.519, -22.68, 19.155)), (' B  32  GLY  N  ', ' B  50  ASP  OD1', -0.682, (-16.296, -8.923, 16.225)), (' R 472  ILE HG21', ' R 488  CYS  SG ', -0.68, (27.566, -12.925, 67.7)), (' A  35  TYR  HB2', ' A 100  HIS  HB3', -0.675, (-11.192, 5.656, 20.38)), (' A  87  VAL HG11', ' A 121  VAL HG21', -0.672, (-4.91, 16.513, -0.317)), (' H  63  PRO  HG3', ' L  95  HIS  CE1', -0.672, (21.243, -33.765, 75.095)), (' R 520  ALA  HB1', ' R 521  PRO  CD ', -0.671, (40.47, -23.561, 24.443)), (' H  87  VAL HG11', ' H 121  VAL HG21', -0.67, (15.882, -48.544, 89.908)), (' B  27  LEU  O  ', ' B  65  ARG  NH2', -0.665, (-11.626, -13.756, 15.771)), (' R 386  LYS  HE3', ' R 389  ASP  HB2', -0.661, (23.877, -32.759, 18.944)), (' H  35  TYR  HB2', ' H 100  HIS  HB3', -0.661, (8.572, -41.794, 68.347)), (' E 520  ALA  HB1', ' E 521  PRO  HD2', -0.659, (19.176, -14.243, 62.362)), (' L  27  LEU  O  ', ' L  65  ARG  NH2', -0.659, (9.251, -21.524, 68.977)), (' H  72  SER  OG ', ' H  81  SER  OG ', -0.652, (15.388, -54.391, 73.592)), (' A  72  SER  OG ', ' A  81  SER  OG ', -0.65, (-5.934, 19.366, 16.31)), (' B 133  LEU HD12', ' B 179  LEU HD23', -0.635, (-4.382, -1.113, -19.58)), (' L 133  LEU HD12', ' L 179  LEU HD23', -0.621, (16.919, -28.33, 106.473)), (' E 456  PHE  CD2', ' E 491  PRO  HA ', -0.621, (2.692, -19.919, 26.29)), (' L 168  GLN  HG3', ' L 169  SER  H  ', -0.617, (-8.156, -33.361, 105.677)), (' H  92  THR HG23', ' H 120  THR  HA ', -0.615, (10.874, -47.317, 92.714)), (' A  92  THR HG23', ' A 120  THR  HA ', -0.614, (-10.919, 15.257, -3.586)), (' R 456  PHE  CD2', ' R 491  PRO  HA ', -0.613, (22.986, -17.05, 60.456)), (' R 456  PHE  CE2', ' R 489  TYR  CD2', -0.607, (22.096, -16.725, 63.328)), (' E 456  PHE  HD2', ' E 491  PRO  HA ', -0.604, (3.259, -19.716, 26.399)), (' A  35  TYR  HE2', ' E 445  VAL HG13', -0.601, (-5.257, 6.383, 22.197)), (' A 104  SER  HB3', ' A 105  PRO  CD ', -0.601, (-10.656, -7.157, 25.986)), (' A  35  TYR  CE2', ' E 445  VAL HG13', -0.6, (-5.756, 6.29, 22.151)), (' A  56  SER  OG ', ' A  57  GLY  N  ', -0.599, (-3.206, 12.29, 25.516)), (' A 209  ASN  OD1', ' A 216  LYS  HG3', -0.599, (-20.619, 22.025, -27.553)), (' L  94  ALA  HB2', ' R 449  TYR  OH ', -0.598, (17.789, -34.659, 67.058)), (' A  63  PRO  HG3', ' B  95  HIS  CE1', -0.597, (0.19, -0.763, 11.306)), (' B 168  GLN  HG3', ' B 169  SER  H  ', -0.597, (-30.24, 3.824, -17.534)), (' A  93  ALA  HB3', ' A  95  PHE  HE1', -0.597, (-10.386, 11.199, 2.03)), (' H 104  SER  HB3', ' H 105  PRO  CD ', -0.596, (9.691, -29.563, 59.917)), (' R 456  PHE  CB ', ' R 473  TYR  HD2', -0.592, (23.067, -13.439, 59.291)), (' R 456  PHE  HD2', ' R 491  PRO  HA ', -0.588, (23.698, -16.769, 60.551)), (' H  93  ALA  HB3', ' H  95  PHE  HE1', -0.588, (11.146, -43.767, 86.507)), (' R 456  PHE  HB3', ' R 473  TYR  CD2', -0.579, (22.408, -12.764, 59.113)), (' H  15  SER  N  ', ' H  87  VAL  O  ', -0.573, (21.545, -48.956, 91.473)), (' R 456  PHE  HE2', ' R 489  TYR  CD2', -0.572, (22.076, -16.992, 63.353)), (' H  56  SER  OG ', ' H  57  GLY  N  ', -0.571, (17.529, -48.616, 63.814)), (' H 111  ASP  HB3', ' H 112  PRO  HD3', -0.57, (0.942, -41.422, 68.939)), (' E 498  GLN  HB2', ' E 501  TYR  CE1', -0.57, (-7.193, -0.696, 26.034)), (' R 473  TYR  HD1', ' R 474  GLN  N  ', -0.57, (25.813, -10.048, 61.352)), (' H  87  VAL  CG1', ' H 121  VAL HG21', -0.569, (16.539, -47.826, 89.739)), (' R 498  GLN  HB2', ' R 501  TYR  CE1', -0.569, (12.897, -36.118, 61.299)), (' A 111  ASP  HB3', ' A 112  PRO  HD3', -0.568, (-19.931, 5.519, 19.795)), (' A 161  THR  OG1', ' A 209  ASN  HB2', -0.565, (-22.708, 19.928, -24.023)), (' A  87  VAL  CG1', ' A 121  VAL HG21', -0.565, (-4.767, 15.753, -0.6)), (' H 161  THR  OG1', ' H 209  ASN  HB2', -0.559, (0.539, -48.904, 114.514)), (' R 456  PHE  HE2', ' R 489  TYR  CE2', -0.558, (21.648, -18.081, 63.162)), (' L  82  GLU  HG3', ' L 106  VAL HG23', -0.554, (-11.314, -28.555, 87.694)), (' E 520  ALA  HB1', ' E 521  PRO  CD ', -0.552, (19.253, -14.393, 62.988)), (' H 169  LEU HD21', ' H 192  VAL HG21', -0.548, (-3.286, -34.414, 120.981)), (' E 366  SER  O  ', ' E 370  ASN  ND2', -0.545, (-0.717, 5.36, 59.172)), (' R 456  PHE  CE2', ' R 489  TYR  HD2', -0.543, (21.871, -16.437, 62.84)), (' B  37  GLN  OE1', ' B  43  PRO  HG3', -0.542, (-20.082, 4.657, 6.112)), (' A 169  LEU HD21', ' A 192  VAL HG21', -0.54, (-25.634, 6.017, -32.148)), (' H  13  LYS  HB2', ' H  16  GLU  OE2', -0.538, (20.099, -54.925, 93.072)), (' E 386  LYS  HE3', ' E 389  ASP  HB2', -0.537, (2.844, -5.405, 68.352)), (' L 168  GLN  HG3', ' L 169  SER  N  ', -0.536, (-8.481, -33.741, 105.684)), (' B  82  GLU  HG3', ' B 106  VAL HG23', -0.534, (-32.513, -4.494, -0.707)), (' A  41  GLN  HB3', ' A  47  LEU HD23', -0.533, (-15.044, 4.58, 4.227)), (' H 105  PRO  HD3', ' R 505  TYR  CE2', -0.532, (10.694, -29.269, 58.995)), (' H 129  PRO  HD2', ' H 215  THR HG21', -0.531, (9.277, -49.68, 114.406)), (' L  37  GLN  OE1', ' L  43  PRO  HG3', -0.529, (1.297, -37.728, 82.524)), (' A  15  SER  N  ', ' A  87  VAL  O  ', -0.528, (-0.702, 17.365, -2.324)), (' A 108  ASN HD22', ' B  90  ALA  HB3', -0.527, (-9.007, -2.368, 18.113)), (' A  37  GLY  HA2', ' A  52  SER  HA ', -0.525, (-8.663, 8.689, 16.273)), (' H  41  GLN  HB3', ' H  47  LEU HD23', -0.525, (6.635, -38.19, 84.352)), (' R 393  THR HG21', ' R 518  LEU  HB3', -0.524, (35.733, -22.779, 26.261)), (' L  94  ALA  HB2', ' R 449  TYR  HH ', -0.521, (17.867, -34.822, 66.509)), (' A 129  PRO  HD2', ' A 215  THR HG21', -0.514, (-12.955, 21.058, -23.881)), (' H 129  PRO  HB3', ' H 155  TYR  HB3', -0.512, (9.744, -46.804, 110.32)), (' E 453  TYR  HE2', ' E 455  LEU HD13', -0.512, (-2.685, -15.351, 30.686)), (' A  87  VAL HG12', ' A 121  VAL HG11', -0.511, (-4.064, 15.913, -1.998)), (' H  87  VAL HG12', ' H 121  VAL HG11', -0.51, (17.482, -47.904, 91.166)), (' L  11  SER  HB3', ' L 107  LEU  HG ', -0.508, (-9.246, -22.068, 91.631)), (' L  90  ALA  HA ', ' L  95  HIS  O  ', -0.506, (13.964, -31.621, 72.249)), (' E 393  THR HG21', ' E 518  LEU  HB3', -0.506, (14.817, -14.679, 61.254)), (' H  38  TRP  HB3', ' H  50  ILE HD12', -0.505, (11.722, -44.653, 79.158)), (' B  90  ALA  HA ', ' B  95  HIS  O  ', -0.502, (-7.285, -3.214, 14.623)), (' R 456  PHE  HB3', ' R 473  TYR  HD2', -0.502, (22.442, -13.656, 59.29)), (' E 456  PHE  HB3', ' E 473  TYR  CD2', -0.501, (1.985, -23.441, 27.551)), (' B  11  SER  HB3', ' B 107  LEU  HG ', -0.499, (-30.111, -10.264, -5.193)), (' A  94  VAL HG22', ' A 118  LEU  HB2', -0.499, (-16.983, 14.024, 0.439)), (' H  37  GLY  HA2', ' H  52  SER  HA ', -0.498, (11.882, -43.54, 72.418)), (' A  13  LYS  HB2', ' A  16  GLU  OE2', -0.496, (-1.604, 23.625, -2.737)), (' H  73  VAL HG22', ' H  80  PHE  HB3', -0.496, (11.94, -50.779, 69.855)), (' A 129  PRO  HB3', ' A 155  TYR  HB3', -0.495, (-12.882, 18.107, -20.378)), (' A  14  PRO  HD2', ' A 123  SER  HB3', -0.495, (-2.376, 21.104, -7.146)), (' R 456  PHE  CE2', ' R 489  TYR  CE2', -0.492, (21.369, -17.804, 62.701)), (' H  14  PRO  HD2', ' H 123  SER  HB3', -0.49, (19.413, -52.219, 96.916)), (' A  36  TRP  HB3', ' A  80  PHE  CE1', -0.489, (-12.668, 12.97, 18.316)), (' A  38  TRP  HB3', ' A  50  ILE HD12', -0.487, (-9.765, 10.876, 9.939)), (' H  58  SER  HB2', ' R 445  VAL  HB ', -0.487, (18.783, -43.928, 64.418)), (' H  99  ARG  NH2', ' H 111  ASP  OD2', -0.486, (-0.864, -42.138, 66.682)), (' A  73  VAL HG22', ' A  80  PHE  HB3', -0.485, (-9.195, 15.298, 19.816)), (' A  49  TRP  CZ2', ' A  51  GLY  HA2', -0.484, (-5.795, 5.633, 13.956)), (' H  94  VAL HG22', ' H 118  LEU  HB2', -0.481, (4.719, -46.734, 89.137)), (' H  49  TRP  CZ2', ' H  51  GLY  HA2', -0.48, (14.793, -40.343, 74.126)), (' H  99  ARG  HB3', ' H 112  PRO  CD ', -0.478, (1.315, -43.412, 69.87)), (' H 111  ASP  CB ', ' H 112  PRO  HD3', -0.478, (0.125, -41.197, 69.182)), (' H  18  LEU HD11', ' H 119  VAL HG21', -0.477, (12.072, -49.32, 86.831)), (' H  36  TRP  HB3', ' H  80  PHE  CE1', -0.477, (8.264, -48.575, 71.209)), (' L  34  TRP  CE2', ' L  72  LEU  HB2', -0.476, (-1.029, -25.577, 76.262)), (' R 453  TYR  HE2', ' R 455  LEU HD13', -0.476, (18.119, -21.228, 56.924)), (' A 111  ASP  CB ', ' A 112  PRO  HD3', -0.475, (-20.182, 5.489, 19.539)), (' R 456  PHE  HB2', ' R 473  TYR  HD2', -0.475, (23.298, -13.697, 59.441)), (' E 483  VAL  O  ', ' E 485  GLY  N  ', -0.474, (5.605, -22.268, 15.472)), (' H 179  VAL HG12', ' L 163  THR HG23', -0.474, (6.741, -36.704, 101.499)), (' R 386  LYS  HA ', ' R 386  LYS  HD2', -0.474, (21.022, -33.68, 20.51)), (' H   8  GLY  HA3', ' H  20  LEU HD23', -0.473, (10.406, -54.714, 83.261)), (' A 209  ASN  OD1', ' A 216  LYS  HE3', -0.473, (-21.57, 22.79, -27.791)), (' A  99  ARG  HB3', ' A 112  PRO  CD ', -0.472, (-19.18, 7.329, 19.443)), (' A 104  SER  HB3', ' A 105  PRO  HD2', -0.471, (-10.75, -7.627, 26.172)), (' H 178  ALA  HB2', ' H 188  LEU HD12', -0.471, (4.139, -42.181, 105.81)), (' A  73  VAL  CG1', ' A  74  ASP  N  ', -0.47, (-8.361, 18.411, 22.241)), (' B 168  GLN  CG ', ' B 169  SER  H  ', -0.47, (-29.579, 3.663, -17.034)), (' B  34  TRP  CE2', ' B  72  LEU  HB2', -0.469, (-21.991, -8.788, 10.27)), (' A  18  LEU HD11', ' A 119  VAL HG21', -0.469, (-9.304, 16.343, 3.019)), (' B 109  GLN  HG3', ' B 110  PRO  HD2', -0.467, (-36.396, -7.13, -13.306)), (' H  73  VAL  CG1', ' H  74  ASP  N  ', -0.465, (12.515, -53.847, 67.902)), (' A  35  TYR  HB2', ' A 100  HIS  ND1', -0.464, (-10.865, 4.913, 20.344)), (' H 103  PRO  O  ', ' R 501  TYR  HA ', -0.462, (9.199, -35.45, 59.044)), (' A 178  ALA  HB2', ' A 188  LEU HD12', -0.461, (-18.271, 12.156, -16.661)), (' A  62  ASN  O  ', ' A  66  LYS  HB2', -0.46, (1.361, 5.307, 10.493)), (' A   8  GLY  HA3', ' A  20  LEU HD23', -0.46, (-11.256, 21.21, 7.493)), (' E 520  ALA  HB2', ' R 456  PHE  CE1', -0.46, (18.18, -16.304, 61.95)), (' H  49  TRP  HB2', ' L  98  PHE  HE1', -0.46, (9.702, -37.064, 77.664)), (' E 453  TYR  CE2', ' E 455  LEU HD13', -0.459, (-2.556, -15.098, 30.257)), (' H  58  SER  O  ', ' R 445  VAL HG11', -0.458, (17.245, -44.906, 66.405)), (' H  35  TYR  HB2', ' H 100  HIS  ND1', -0.457, (9.424, -40.444, 67.923)), (' H  73  VAL  HA ', ' H  80  PHE  HA ', -0.457, (12.208, -52.987, 71.143)), (' H  62  ASN  O  ', ' H  66  LYS  HB2', -0.457, (22.403, -38.931, 77.452)), (' B 168  GLN  CG ', ' B 169  SER  N  ', -0.455, (-30.23, 3.445, -16.728)), (' H  20  LEU HD12', ' H  95  PHE  HD2', -0.455, (11.042, -48.388, 83.041)), (' A  20  LEU HD12', ' A  95  PHE  HD2', -0.455, (-10.484, 15.428, 6.999)), (' A  73  VAL  HA ', ' A  80  PHE  HA ', -0.454, (-8.34, 17.55, 19.571)), (' L  92  ASN  O  ', ' R 449  TYR  CE1', -0.454, (19.295, -31.324, 65.904)), (' L  30  GLN  HB3', ' L  89  SER  OG ', -0.453, (10.149, -27.208, 71.021)), (' B  30  GLN  HB3', ' B  89  SER  OG ', -0.452, (-10.634, -8.064, 15.6)), (' L 109  GLN  HG3', ' L 110  PRO  HD2', -0.451, (-14.505, -23.904, 100.278)), (' H 113  TRP  CE3', ' L  43  PRO  HD2', -0.451, (2.165, -40.923, 79.343)), (' H 104  SER  HB3', ' H 105  PRO  HD2', -0.449, (9.278, -29.141, 60.674)), (' E 360  ASN  H  ', ' E 523  THR  HB ', -0.448, (17.7, -5.848, 59.628)), (' H  60  TYR  CD1', ' R 446  GLY  HA2', -0.448, (16.855, -39.034, 67.433)), (' A  99  ARG  NH2', ' A 111  ASP  OD2', -0.447, (-21.658, 6.239, 22.403)), (' A 102  ALA  HB3', ' E 500  THR  OG1', -0.445, (-10.376, 2.017, 24.901)), (' B  90  ALA  CB ', ' B  96  VAL HG22', -0.444, (-8.51, -1.136, 16.548)), (' L  90  ALA  CB ', ' L  96  VAL HG22', -0.443, (12.519, -33.649, 70.981)), (' A  73  VAL HG12', ' A  74  ASP  N  ', -0.441, (-8.176, 18.533, 22.509)), (' R 360  ASN  H  ', ' R 523  THR  HB ', -0.437, (38.627, -31.883, 28.538)), (' A  18  LEU  HB2', ' A  87  VAL HG21', -0.437, (-4.224, 17.059, 2.936)), (' A  12  VAL  O  ', ' A 121  VAL  HA ', -0.436, (-6.54, 19.2, -2.841)), (' B 119  PHE  HB2', ' B 134  VAL  HB ', -0.436, (-12.286, 2.123, -24.511)), (' R 455  LEU  HG ', ' R 456  PHE  CE1', -0.435, (18.679, -17.513, 59.521)), (' R 453  TYR  CE2', ' R 455  LEU HD13', -0.435, (18.315, -21.3, 57.128)), (' E 377  PHE  HZ ', ' E 384  PRO  HB3', -0.435, (-2.184, -2.716, 57.376)), (' B  90  ALA  HB1', ' B  96  VAL HG22', -0.431, (-8.243, -0.691, 16.682)), (' B  60  ARG  HB2', ' B  75  SER  O  ', -0.431, (-34.829, -9.308, 9.934)), (' L  60  ARG  HB2', ' L  75  SER  O  ', -0.43, (-13.862, -25.366, 76.757)), (' L  90  ALA  HB1', ' L  96  VAL HG22', -0.43, (12.83, -34.062, 71.019)), (' B  26  ALA  O  ', ' B  30  GLN  HB2', -0.429, (-8.505, -10.559, 15.399)), (' E 519  HIS  CD2', ' L  29  THR  CG2', -0.429, (16.467, -21.839, 65.854)), (' L  26  ALA  O  ', ' L  30  GLN  HB2', -0.428, (12.06, -24.43, 70.653)), (' H  12  VAL  O  ', ' H 121  VAL  HA ', -0.428, (15.232, -50.932, 93.031)), (' L  33  ASN  O  ', ' L  87  CYS  HA ', -0.426, (3.345, -29.406, 76.305)), (' R 377  PHE  HZ ', ' R 384  PRO  HB3', -0.425, (18.702, -34.948, 30.673)), (' B 109  GLN  CG ', ' B 110  PRO  HD2', -0.423, (-35.958, -7.569, -13.277)), (' L 109  GLN  CG ', ' L 110  PRO  HD2', -0.42, (-14.278, -23.425, 100.31)), (' R 520  ALA  CB ', ' R 521  PRO  CD ', -0.42, (39.582, -23.742, 24.715)), (' H  18  LEU  HB2', ' H  87  VAL HG21', -0.419, (17.212, -49.587, 86.942)), (' L 119  PHE  HB2', ' L 134  VAL  HB ', -0.418, (9.75, -31.241, 112.009)), (' H  35  TYR  CE2', ' R 445  VAL HG13', -0.415, (15.018, -42.38, 65.757)), (' A 209  ASN  OD1', ' A 216  LYS  CG ', -0.415, (-20.247, 22.231, -27.816)), (' B  33  ASN  O  ', ' B  87  CYS  HA ', -0.415, (-17.959, -4.672, 11.333)), (' E 518  LEU HD21', ' R 455  LEU  HG ', -0.414, (17.697, -17.686, 58.646)), (' A  53  ILE HD13', ' A  73  VAL HG23', -0.414, (-5.646, 14.467, 19.82)), (' H  29  ILE  HA ', ' H  36  TRP  CZ2', -0.413, (5.947, -49.109, 66.074)), (' H  73  VAL HG12', ' H  74  ASP  N  ', -0.412, (12.525, -54.028, 67.72)), (' A 126  THR HG22', ' A 157  PRO  HD3', -0.411, (-13.399, 25.185, -14.028)), (' H  13  LYS  O  ', ' H  16  GLU  HG3', -0.41, (19.704, -52.454, 92.02)), (' R 368  LEU  HA ', ' R 368  LEU HD23', -0.409, (22.651, -40.657, 34.582)), (' H 126  THR HG22', ' H 157  PRO  HD3', -0.407, (8.683, -54.924, 105.303)), (' B  34  TRP  CD2', ' B  72  LEU  HB2', -0.407, (-22.115, -8.305, 10.209)), (' H  53  ILE HD13', ' H  73  VAL HG23', -0.404, (15.133, -49.88, 70.134)), (' H 105  PRO  HD3', ' R 505  TYR  CD2', -0.403, (11.06, -29.263, 58.653)), (' H 122  SER  C  ', ' H 124  ALA  H  ', -0.403, (15.386, -51.64, 98.579)), (' A  29  ILE  HA ', ' A  36  TRP  CZ2', -0.402, (-14.653, 12.872, 24.071)), (' E 399  SER  HA ', ' E 510  VAL  O  ', -0.401, (4.043, -5.502, 43.929)), (' E 520  ALA  CB ', ' R 456  PHE  CE1', -0.401, (18.499, -15.615, 61.98)), (' L  34  TRP  CD2', ' L  72  LEU  HB2', -0.4, (-1.045, -25.869, 76.526)), (' A 179  VAL HG12', ' B 163  THR HG23', -0.4, (-14.765, 6.383, -13.105))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
