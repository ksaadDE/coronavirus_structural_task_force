# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 155 ', 'ASP', 0.004406349286566152, (114.13737, -29.229859999999995, 36.85795))]
data['omega'] = []
data['rota'] = [('A', ' 121 ', 'SER', 0.017845207912973168, (101.59807999999998, -26.09378999999999, 56.69895))]
data['cbeta'] = []
data['probe'] = [(' A 226  THR  OG1', ' A 229  ASP  OD1', -0.677, (127.748, 11.403, 32.458)), (' A  21  THR  HB ', ' A  67  LEU  HB3', -0.672, (107.765, -31.143, 68.019)), (' A  40  ARG  HA ', ' A  87  LEU HD13', -0.646, (118.655, -25.009, 65.637)), (' A 118  TYR  CE1', ' A 141  LEU  HB2', -0.639, (102.91, -16.358, 59.949)), (' A 165  MET  HE1', ' A 192  GLN  NE2', -0.602, (119.06, -10.665, 65.469)), (' A 188  ARG  HG2', ' A 190  THR HG22', -0.591, (120.399, -10.294, 69.918)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.576, (118.448, -6.385, 44.432)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.562, (112.467, -36.123, 50.387)), (' A   8  PHE  HE2', ' A 151  ASN HD22', -0.526, (112.81, -17.336, 41.013)), (' A 279  ARG  HD2', ' A 280  THR  H  ', -0.523, (100.144, 7.562, 36.01)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.505, (103.237, -23.732, 51.103)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.5, (104.171, -17.46, 59.541)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.499, (115.656, -5.266, 63.89)), (' A 269  LYS  O  ', ' A 273  GLN  HG3', -0.496, (116.423, 13.341, 38.288)), (' A 164  HIS  HD2', ' A 503  HOH  O  ', -0.484, (118.189, -19.244, 63.686)), (' A  40  ARG  CB ', ' A  87  LEU HD13', -0.484, (119.748, -25.133, 65.578)), (' A 207  TRP  CE2', ' A 288  GLU  HB2', -0.483, (108.155, -0.858, 39.463)), (' A  32  LEU HD22', ' A 101  TYR  CD2', -0.48, (115.877, -31.261, 47.892)), (' A 165  MET  HE1', ' A 192  GLN HE22', -0.478, (119.079, -10.921, 65.701)), (' A  40  ARG  CA ', ' A  87  LEU HD13', -0.474, (119.039, -24.781, 65.397)), (' A 242  LEU  HA ', ' A 242  LEU HD12', -0.465, (124.232, -0.268, 38.126)), (' A  67  LEU HD11', ' A  74  GLN  NE2', -0.465, (105.42, -35.894, 66.806)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.46, (112.926, -23.641, 62.322)), (' A 239  TYR  CZ ', ' A 272  LEU HD21', -0.446, (115.342, 6.327, 41.762)), (' A 117  CYS  O  ', ' A 144  SER  HA ', -0.445, (105.514, -19.614, 59.213)), (' A 236  LYS  NZ ', ' A 502  HOH  O  ', -0.443, (117.893, 16.675, 45.842)), (' A  39  PRO  HB3', ' A 164  HIS  CD2', -0.442, (116.654, -20.122, 62.191)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.439, (124.524, -6.59, 33.147)), (' A 221  ASN HD21', ' A 266  ALA  CB ', -0.435, (117.235, 10.924, 29.405)), (' A 118  TYR  CZ ', ' A 141  LEU  HB2', -0.435, (102.466, -16.359, 59.742)), (' A 221  ASN  ND2', ' A 223  PHE  HB2', -0.434, (116.657, 12.416, 28.979)), (' A 219  PHE  O  ', ' A 267  SER  HB3', -0.433, (111.698, 8.784, 30.825)), (' A 230  PHE  HA ', ' A 269  LYS  NZ ', -0.43, (122.277, 10.585, 35.705)), (' A   8  PHE  HE2', ' A 151  ASN  ND2', -0.426, (113.152, -17.187, 41.61)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.413, (111.541, -18.644, 49.033)), (' A 167  LEU  HB3', ' A 168  PRO  CD ', -0.408, (115.622, -5.85, 63.886)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.406, (104.628, -12.417, 37.681)), (' A 243  THR  O  ', ' A 247  VAL HG23', -0.406, (126.02, -1.003, 33.58)), (' A  36  VAL HG21', ' A  68  VAL HG11', -0.404, (112.079, -33.732, 60.012)), (' A  21  THR HG23', ' A  26  THR  OG1', -0.402, (106.64, -27.608, 68.987)), (' A  92  ASP  N  ', ' A  92  ASP  OD1', -0.402, (113.954, -41.393, 59.733))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
