
from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

dict_residue_prop_objects = {}
class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)
        ##save property list frame object
        dict_residue_prop_objects[data_key] = list_obj
# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "clusters","rama", "rota", "cbeta", "probe", "smoc", "cablam",
               "jpred"]
  data_titles = { "clusters"  : "Outlier residue clusters",
                  "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes",
                  "smoc"  : "Local density fit (SMOC)",
                  "cablam": "Ca geometry (CaBLAM)",
                  "jpred":"SS prediction"}
  data_names = { "clusters"  : ["Chain","Residue","Cluster","Outlier types"],
                 "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"],
                 "smoc" : ["Chain", "Residue", "Name", "Score"],
                 "cablam" : ["Chain", "Residue","Name","recommendation","DSSP"],
                 "jpred" : ["Chain", "Residue","Name","predicted SS","current SS"]}
  if (gobject is not None) :
    data_types = {  "clusters" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_INT, gobject.TYPE_STRING,
                             gobject.TYPE_PYOBJECT],
                    "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "smoc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cablam" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT],
                   "jpred" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT]}
  else :
    data_types = dict([ (s, []) for s in ["clusters","rama","rota","cbeta","probe","smoc",
                                          "cablam","jpred"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    ##adding a column type for checkbox (bool) before atom coordinate
    if gobject is not None:
        column_types = column_types[:-1]+[bool]+[column_types[-1]]
    
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    ##add a cell for checkbox
    cell1 = gtk.CellRendererToggle()
    cell1.connect ("toggled", self.on_selected_toggled)
    column = gtk.TreeViewColumn('Dealt with',cell1,active=i+1)
    self.listctrl.append_column(column)
    #column.set_sort_column_id(i+1)
    #column.pack_start(cell1, True)
    
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      row = row[:-1] + (False,)+(row[-1],)
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()
  ##check box toggle
  def on_selected_toggled(self,renderer,path):
    if path is not None:
      model = self.listmodel.get_model()
      it = model.get_iter(path)
      #set toggle
      model[it][-2] = not model[it][-2]
      #set checkboxes for same residues in other lists
      try:
        chain = model[it][0]
        residue = model[it][1]
        for data_key in dict_residue_prop_objects:
          prop_obj = dict_residue_prop_objects[data_key]
          for row in prop_obj.listmodel.get_model():
            if data_key == 'probe':
              atom1_split = row[0].split()
              atom2_split = row[1].split()
              if atom1_split[0] == chain and atom1_split[1] == residue:
                row[-2] = model[it][-2]
              elif atom2_split[0] == chain and atom2_split[1] == residue:
                row[-2] = model[it][-2]
            elif row[0] == chain and row[1] == residue:
              row[-2] = model[it][-2]
      except IndexError: pass

  def check_chain_residue(self,chain,residue):
      pass
  
def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data
data = {}
data['rama'] = []
data['rota'] = []
data['cbeta'] = []
data['clusters'] = [('A', '120', 1, 'backbone clash\n', (125.06, 98.17, 75.263)), ('A', '122', 1, 'backbone clash\n', (125.06, 98.17, 75.263)), ('A', '201', 1, 'side-chain clash\n', (115.426, 111.033, 59.276)), ('A', '202', 1, 'smoc Outlier\n', (111.25299835205078, 112.53500366210938, 60.51499938964844)), ('A', '210', 1, 'smoc Outlier\n', (120.58499908447266, 103.43199920654297, 71.72599792480469)), ('A', '211', 1, 'smoc Outlier\n', (123.71099853515625, 102.2249984741211, 73.48999786376953)), ('A', '217', 1, 'cablam CA Geom Outlier\n', (122.9, 104.7, 65.7)), ('A', '218', 1, 'cablam Outlier\nsmoc Outlier', (120.9, 102.8, 63.1)), ('A', '219', 1, 'smoc Outlier\n', (119.7979965209961, 105.58000183105469, 60.821998596191406)), ('A', '221', 1, 'side-chain clash\n', (114.906, 104.355, 59.743)), ('A', '222', 1, 'side-chain clash\n', (117.754, 108.926, 58.461)), ('A', '223', 1, 'smoc Outlier\n', (112.76499938964844, 110.70600128173828, 55.82400131225586)), ('A', '84', 1, 'Dihedral angle:CB:CG:CD:OE1\n', (122.56400000000001, 106.248, 54.968)), ('A', '86', 1, 'side-chain clash\nsmoc Outlier', (117.754, 108.926, 58.461)), ('A', '90', 1, 'smoc Outlier\n', (123.52200317382812, 114.46700286865234, 62.41999816894531)), ('A', '93', 1, 'smoc Outlier\n', (125.38600158691406, 115.92400360107422, 67.63899993896484)), ('A', '95', 1, 'smoc Outlier\n', (124.98200225830078, 111.83899688720703, 71.14600372314453)), ('A', '97', 1, 'smoc Outlier\n', (128.11500549316406, 106.91799926757812, 67.61499786376953)), ('A', '546', 2, 'side-chain clash\n', (89.722, 87.88, 120.844)), ('A', '720', 2, 'side-chain clash\n', (83.498, 83.191, 118.362)), ('A', '775', 2, 'side-chain clash\n', (83.498, 83.191, 118.362)), ('A', '844', 2, 'side-chain clash\n', (84.498, 82.494, 123.621)), ('A', '845', 2, 'cablam Outlier\nside-chain clash\nsmoc Outlier', (88.7, 85.5, 121.8)), ('A', '846', 2, 'cablam Outlier\n', (86.6, 86.1, 124.9)), ('A', '847', 2, 'cablam Outlier\n', (83.2, 85.2, 123.5)), ('A', '848', 2, 'side-chain clash\n', (80.128, 79.221, 124.647)), ('A', '850', 2, 'smoc Outlier\n', (80.70600128173828, 85.13600158691406, 129.46499633789062)), ('A', '851', 2, 'backbone clash\n', (75.606, 81.245, 128.3)), ('A', '852', 2, 'backbone clash\n', (75.606, 81.245, 128.3)), ('A', '855', 2, 'side-chain clash\n', (80.128, 79.221, 124.647)), ('A', '856', 2, 'side-chain clash\n', (74.234, 73.271, 122.927)), ('A', '858', 2, 'Dihedral angle:CD:NE:CZ:NH1\n', (78.756, 79.38799999999999, 117.587)), ('A', '859', 2, 'smoc Outlier\n', (78.90499877929688, 75.61799621582031, 117.19100189208984)), ('A', '860', 2, 'smoc Outlier\n', (75.84600067138672, 75.65399932861328, 114.91799926757812)), ('A', '891', 2, 'side-chain clash\n', (78.432, 74.576, 124.713)), ('A', '631', 3, 'side-chain clash\n', (95.365, 104.74, 96.663)), ('A', '663', 3, 'side-chain clash\n', (95.365, 104.74, 96.663)), ('A', '664', 3, 'cablam Outlier\n', (98.2, 109.6, 101.7)), ('A', '665', 3, 'smoc Outlier\n', (96.46600341796875, 110.78299713134766, 104.81600189208984)), ('A', '666', 3, 'side-chain clash\n', (98.021, 112.29, 110.835)), ('A', '668', 3, 'smoc Outlier\n', (97.17400360107422, 107.88200378417969, 114.13500213623047)), ('A', '669', 3, 'smoc Outlier\n', (99.44400024414062, 105.05000305175781, 115.29000091552734)), ('A', '673', 3, 'side-chain clash\n', (98.021, 112.29, 110.835)), ('A', '677', 3, 'cablam Outlier\n', (103.3, 106.7, 102.0)), ('A', '678', 3, 'cablam CA Geom Outlier\n', (100.5, 105.0, 100.1)), ('A', '679', 3, 'smoc Outlier\n', (98.55799865722656, 101.79199981689453, 99.69300079345703)), ('A', '680', 3, 'smoc Outlier\n', (94.98999786376953, 100.9219970703125, 100.65699768066406)), ('A', '434', 4, 'side-chain clash\n', (94.22, 62.34, 108.252)), ('A', '876', 4, 'side-chain clash\nDihedral angle:CB:CG:CD:OE1\n', (89.77499999999999, 61.910999999999994, 109.588)), ('A', '878', 4, 'smoc Outlier\n', (84.62899780273438, 63.4640007019043, 107.90899658203125)), ('A', '881', 4, 'smoc Outlier\n', (81.3740005493164, 67.31700134277344, 111.46399688720703)), ('A', '885', 4, 'smoc Outlier\n', (77.06999969482422, 67.53900146484375, 115.97000122070312)), ('A', '889', 4, 'side-chain clash\n', (71.241, 65.921, 119.177)), ('A', '907', 4, 'side-chain clash\n', (71.241, 65.921, 119.177)), ('A', '908', 4, 'smoc Outlier\n', (70.5, 66.23899841308594, 113.33300018310547)), ('A', '909', 4, 'cablam Outlier\n', (72.3, 66.4, 110.0)), ('A', '629', 5, 'smoc Outlier\n', (98.9219970703125, 105.22599792480469, 90.27799987792969)), ('A', '633', 5, 'smoc Outlier\n', (93.15699768066406, 104.43399810791016, 88.43599700927734)), ('A', '634', 5, 'smoc Outlier\n', (90.71099853515625, 102.35199737548828, 90.4800033569336)), ('A', '635', 5, 'smoc Outlier\n', (89.13899993896484, 105.45999908447266, 92.01399993896484)), ('A', '636', 5, 'side-chain clash\n', (90.509, 111.448, 89.382)), ('A', '655', 5, 'side-chain clash\n', (90.509, 111.448, 89.382)), ('A', '689', 5, 'side-chain clash\n', (87.234, 97.63, 91.926)), ('A', '693', 5, 'side-chain clash\n', (87.234, 97.63, 91.926)), ('A', '452', 6, 'side-chain clash\nsmoc Outlier', (98.832, 97.03, 110.566)), ('A', '453', 6, 'smoc Outlier\n', (102.81999969482422, 100.21700286865234, 110.18900299072266)), ('A', '545', 6, 'backbone clash\n', (94.584, 93.005, 113.068)), ('A', '555', 6, 'backbone clash\n', (94.584, 93.005, 113.068)), ('A', '556', 6, 'side-chain clash\n', (98.832, 97.03, 110.566)), ('A', '557', 6, 'smoc Outlier\n', (93.25700378417969, 97.61699676513672, 110.62899780273438)), ('A', '624', 6, 'side-chain clash\n', (102.408, 98.036, 108.305)), ('A', '438', 7, 'smoc Outlier\n', (97.36699676513672, 74.71900177001953, 113.60900115966797)), ('A', '439', 7, 'smoc Outlier\n', (95.29499816894531, 77.8949966430664, 114.19400024414062)), ('A', '836', 7, 'side-chain clash\nDihedral angle:CD:NE:CZ:NH1\n', (90.612, 76.117, 110.979)), ('A', '837', 7, 'side-chain clash\n', (86.202, 74.17, 114.983)), ('A', '840', 7, 'side-chain clash\n', (87.505, 78.854, 113.347)), ('A', '842', 7, 'smoc Outlier\n', (88.9800033569336, 75.19999694824219, 120.76000213623047)), ('A', '884', 7, 'side-chain clash\n', (86.202, 74.17, 114.983)), ('A', '562', 8, 'side-chain clash\n', (92.69, 80.454, 98.993)), ('A', '565', 8, 'side-chain clash\n', (92.69, 80.454, 98.993)), ('A', '811', 8, 'smoc Outlier\n', (91.94100189208984, 77.38500213623047, 96.87000274658203)), ('A', '815', 8, 'smoc Outlier\n', (88.12799835205078, 76.97799682617188, 100.69599914550781)), ('A', '816', 8, 'side-chain clash\n', (88.846, 70.924, 100.282)), ('A', '831', 8, 'side-chain clash\n', (88.846, 70.924, 100.282)), ('A', '39', 9, 'side-chain clash\nsmoc Outlier', (106.02, 94.116, 60.842)), ('A', '40', 9, 'smoc Outlier\n', (103.447998046875, 96.1259994506836, 58.145999908447266)), ('A', '42', 9, 'side-chain clash\n', (106.02, 94.116, 60.842)), ('A', '43', 9, 'smoc Outlier\n', (104.64700317382812, 94.47699737548828, 65.88500213623047)), ('A', '712', 9, 'smoc Outlier\n', (104.78399658203125, 87.60199737548828, 65.7300033569336)), ('A', '238', 10, 'side-chain clash\n', (108.441, 106.372, 79.469)), ('A', '239', 10, 'side-chain clash\nsmoc Outlier', (103.713, 103.468, 77.627)), ('A', '242', 10, 'side-chain clash\nsmoc Outlier', (108.441, 106.372, 79.469)), ('A', '465', 10, 'side-chain clash\n', (103.713, 103.468, 77.627)), ('A', '468', 10, 'smoc Outlier\n', (99.80799865722656, 100.71900177001953, 78.25499725341797)), ('A', '125', 11, 'smoc Outlier\n', (116.21299743652344, 97.6500015258789, 75.10800170898438)), ('A', '34', 11, 'smoc Outlier\n', (115.45700073242188, 92.74400329589844, 72.54199981689453)), ('A', '35', 11, 'side-chain clash\n', (113.15, 91.924, 68.196)), ('A', '45', 11, 'cablam Outlier\n', (108.6, 94.3, 71.9)), ('A', '48', 11, 'side-chain clash\n', (113.15, 91.924, 68.196)), ('A', '334', 12, 'side-chain clash\n', (93.691, 134.886, 114.136)), ('A', '336', 12, 'smoc Outlier\n', (84.9489974975586, 136.2449951171875, 116.01399993896484)), ('A', '337', 12, 'cablam Outlier\nsmoc Outlier', (88.4, 137.3, 117.0)), ('A', '339', 12, 'side-chain clash\n', (93.691, 134.886, 114.136)), ('A', '486', 13, 'smoc Outlier\n', (75.71199798583984, 108.11499786376953, 90.66600036621094)), ('A', '487', 13, 'smoc Outlier\n', (75.01000213623047, 110.30999755859375, 93.65399932861328)), ('A', '488', 13, 'side-chain clash\n', (70.106, 107.69, 97.69)), ('A', '492', 13, 'side-chain clash\nsmoc Outlier', (70.106, 107.69, 97.69)), ('A', '476', 14, 'side-chain clash\n', (90.773, 94.787, 84.438)), ('A', '695', 14, 'smoc Outlier\n', (93.19400024414062, 92.66200256347656, 90.36000061035156)), ('A', '696', 14, 'side-chain clash\n', (90.773, 94.787, 84.438)), ('A', '697', 14, 'smoc Outlier\n', (93.94999694824219, 95.69599914550781, 85.95700073242188)), ('A', '161', 15, 'smoc Outlier\n', (116.64700317382812, 85.76100158691406, 97.28299713134766)), ('A', '166', 15, 'side-chain clash\n', (108.845, 93.219, 102.854)), ('A', '167', 15, 'smoc Outlier\n', (113.61499786376953, 89.70600128173828, 101.25499725341797)), ('A', '458', 15, 'side-chain clash\nsmoc Outlier', (108.845, 93.219, 102.854)), ('A', '274', 16, 'cablam Outlier\nsmoc Outlier', (104.4, 125.2, 94.8)), ('A', '275', 16, 'cablam Outlier\nsmoc Outlier', (107.3, 123.7, 92.8)), ('A', '276', 16, 'side-chain clash\n', (102.668, 122.825, 87.762)), ('A', '296', 16, 'side-chain clash\n', (102.668, 122.825, 87.762)), ('A', '420', 17, 'side-chain clash\n', (90.372, 66.77, 123.208)), ('A', '423', 17, 'smoc Outlier\n', (87.36599731445312, 65.92400360107422, 121.14299774169922)), ('A', '424', 17, 'side-chain clash\n', (92.321, 66.062, 121.736)), ('A', '429', 17, 'side-chain clash\n', (92.321, 66.062, 121.736)), ('A', '382', 18, 'smoc Outlier\n', (99.31600189208984, 118.89700317382812, 114.15799713134766)), ('A', '385', 18, 'smoc Outlier\n', (101.45700073242188, 118.83899688720703, 119.30899810791016)), ('A', '576', 18, 'side-chain clash\n', (98.704, 122.571, 109.155)), ('A', '686', 18, 'side-chain clash\n', (98.704, 122.571, 109.155)), ('A', '600', 19, 'smoc Outlier\n', (77.00599670410156, 78.26000213623047, 89.98200225830078)), ('A', '601', 19, 'smoc Outlier\n', (80.13999938964844, 80.36599731445312, 90.45600128173828)), ('A', '603', 19, 'side-chain clash\n', (81.086, 75.255, 86.351)), ('A', '607', 19, 'cablam Outlier\nsmoc Outlier', (82.1, 79.1, 80.7)), ('A', '503', 20, 'side-chain clash\n', (87.301, 109.049, 112.203)), ('A', '504', 20, 'smoc Outlier\n', (90.11199951171875, 109.74700164794922, 115.76100158691406)), ('A', '507', 20, 'side-chain clash\n', (88.718, 107.951, 116.789)), ('A', '561', 20, 'side-chain clash\n', (87.301, 109.049, 112.203)), ('A', '723', 21, 'smoc Outlier\n', (95.0790023803711, 91.14700317382812, 66.97599792480469)), ('A', '726', 21, 'side-chain clash\n', (97.166, 97.47, 65.83)), ('A', '727', 21, 'smoc Outlier\n', (97.08200073242188, 95.92900085449219, 70.04299926757812)), ('A', '729', 21, 'side-chain clash\nsmoc Outlier', (97.166, 97.47, 65.83)), ('A', '326', 22, 'cablam CA Geom Outlier\n', (103.6, 117.7, 100.7)), ('A', '349', 22, 'smoc Outlier\n', (102.61699676513672, 114.21600341796875, 95.00399780273438)), ('A', '350', 22, 'Dihedral angle:CB:CG:CD:OE1\n', (100.421, 112.96700000000001, 92.144)), ('A', '260', 23, 'side-chain clash\nsmoc Outlier', (129.323, 115.558, 91.02)), ('A', '261', 23, 'smoc Outlier\n', (126.125, 113.63600158691406, 92.73400115966797)), ('A', '262', 23, 'side-chain clash\n', (129.323, 115.558, 91.02)), ('A', '366', 24, 'smoc Outlier\n', (80.60299682617188, 128.45899963378906, 113.26499938964844)), ('A', '367', 24, 'backbone clash\n', (77.245, 123.949, 111.851)), ('A', '368', 24, 'backbone clash\n', (77.245, 123.949, 111.851)), ('A', '357', 25, 'smoc Outlier\n', (87.177001953125, 127.43800354003906, 96.76000213623047)), ('A', '533', 25, 'Dihedral angle:CD:NE:CZ:NH1\n', (84.256, 121.953, 96.009)), ('A', '534', 25, 'smoc Outlier\n', (86.81400299072266, 121.68099975585938, 98.83999633789062)), ('A', '316', 26, 'smoc Outlier\n', (108.54399871826172, 110.9469985961914, 89.06099700927734)), ('A', '462', 26, 'smoc Outlier\n', (106.23100280761719, 103.6520004272461, 90.81500244140625)), ('A', '463', 26, 'smoc Outlier\n', (106.00199890136719, 105.25199890136719, 87.38600158691406)), ('A', '443', 27, 'smoc Outlier\n', (100.30999755859375, 87.21299743652344, 121.23600006103516)), ('A', '444', 27, 'side-chain clash\nsmoc Outlier', (102.291, 93.162, 118.76)), ('A', '448', 27, 'side-chain clash\n', (102.291, 93.162, 118.76)), ('A', '303', 28, 'smoc Outlier\n', (89.20800018310547, 114.23300170898438, 81.5719985961914)), ('A', '304', 28, 'side-chain clash\n', (89.139, 111.263, 82.27)), ('A', '306', 28, 'smoc Outlier\n', (94.42900085449219, 113.48400115966797, 81.25199890136719)), ('A', '615', 29, 'smoc Outlier\n', (95.06900024414062, 78.97100067138672, 87.71099853515625)), ('A', '616', 29, 'smoc Outlier\n', (95.30400085449219, 80.95999908447266, 90.95600128173828)), ('A', '802', 29, 'smoc Outlier\n', (95.02100372314453, 72.61499786376953, 88.06099700927734)), ('A', '493', 30, 'side-chain clash\n', (73.244, 104.357, 105.041)), ('A', '495', 30, 'side-chain clash\n', (73.244, 104.357, 105.041)), ('A', '335', 31, 'side-chain clash\n', (87.788, 129.265, 116.134)), ('A', '340', 31, 'side-chain clash\n', (87.788, 129.265, 116.134)), ('A', '402', 32, 'side-chain clash\n', (101.819, 111.152, 125.76)), ('A', '404', 32, 'side-chain clash\n', (101.819, 111.152, 125.76)), ('A', '254', 33, 'side-chain clash\nsmoc Outlier', (118.204, 119.002, 86.117)), ('A', '285', 33, 'side-chain clash\nDihedral angle:CD:NE:CZ:NH1\n', (114.661, 119.084, 80.41600000000001)), ('A', '755', 34, 'side-chain clash\n', (94.613, 125.696, 117.02)), ('A', '764', 34, 'side-chain clash\n', (94.613, 125.696, 117.02)), ('A', '269', 35, 'smoc Outlier\n', (112.98300170898438, 126.875, 101.88200378417969)), ('A', '270', 35, 'smoc Outlier\n', (110.67900085449219, 125.0979995727539, 104.31999969482422)), ('A', '823', 36, 'cablam Outlier\nsmoc Outlier', (70.6, 64.0, 94.3)), ('A', '824', 36, 'cablam Outlier\n', (71.1, 62.3, 90.9)), ('A', '294', 37, 'side-chain clash\n', (103.711, 115.042, 84.261)), ('A', '313', 37, 'side-chain clash\n', (103.711, 115.042, 84.261)), ('A', '372', 38, 'smoc Outlier\n', (82.7760009765625, 118.87200164794922, 112.10700225830078)), ('A', '373', 38, 'smoc Outlier\n', (85.05999755859375, 119.93900299072266, 109.24400329589844)), ('A', '193', 39, 'side-chain clash\n', (113.25, 115.096, 68.319)), ('A', '232', 39, 'side-chain clash\n', (113.25, 115.096, 68.319)), ('A', '738', 40, 'smoc Outlier\n', (89.54900360107422, 102.80999755859375, 69.62300109863281)), ('A', '740', 40, 'smoc Outlier\n', (85.98899841308594, 98.75399780273438, 68.46199798583984)), ('A', '525', 41, 'smoc Outlier\n', (73.71900177001953, 117.11499786376953, 101.79900360107422)), ('A', '528', 41, 'smoc Outlier\n', (78.5999984741211, 116.46199798583984, 100.53399658203125)), ('A', '864', 42, 'side-chain clash\n', (78.333, 74.261, 106.27)), ('A', '916', 42, 'side-chain clash\n', (78.333, 74.261, 106.27)), ('A', '588', 43, 'side-chain clash\n', (83.637, 86.833, 95.349)), ('A', '758', 43, 'side-chain clash\n', (83.637, 86.833, 95.349)), ('A', '782', 44, 'smoc Outlier\n', (102.11699676513672, 87.677001953125, 86.35600280761719)), ('A', '785', 44, 'smoc Outlier\n', (104.22000122070312, 92.27100372314453, 85.7969970703125)), ('A', '515', 45, 'smoc Outlier\n', (76.68499755859375, 111.79900360107422, 114.0979995727539)), ('A', '517', 45, 'smoc Outlier\n', (71.27200317382812, 111.44400024414062, 114.36100006103516)), ('A', '454', 46, 'side-chain clash\n', (110.084, 98.0, 108.639)), ('A', '457', 46, 'side-chain clash\n', (110.084, 98.0, 108.639)), ('A', '180', 47, 'side-chain clash\n', (123.283, 112.625, 85.606)), ('A', '183', 47, 'side-chain clash\n', (123.283, 112.625, 85.606)), ('A', '474', 48, 'smoc Outlier\n', (89.66699981689453, 101.27200317382812, 78.92400360107422)), ('A', '477', 48, 'smoc Outlier\n', (86.1510009765625, 99.69100189208984, 82.28399658203125)), ('A', '684', 49, 'backbone clash\nsmoc Outlier', (86.149, 103.262, 101.899)), ('A', '685', 49, 'backbone clash\n', (86.149, 103.262, 101.899)), ('A', '806', 50, 'Dihedral angle:CA:C\n', (86.55199999999999, 67.798, 87.65599999999999)), ('A', '807', 50, 'Dihedral angle:N:CA\nsmoc Outlier', (88.74600000000001, 68.9, 90.52)), ('B', '132', 1, 'side-chain clash\n', (119.43, 105.652, 121.522)), ('B', '135', 1, 'jpred outlier', (121.9, 101.9, 121.7)), ('B', '137', 1, 'smoc Outlier\n', (120.63200378417969, 104.71499633789062, 117.43499755859375)), ('B', '138', 1, 'side-chain clash\n', (119.43, 105.652, 121.522)), ('B', '142', 1, 'smoc Outlier\n', (120.60299682617188, 111.84400177001953, 121.31600189208984)), ('B', '143', 1, 'smoc Outlier\n', (124.25499725341797, 111.82599639892578, 122.37200164794922)), ('B', '174', 1, 'smoc Outlier\n', (126.73899841308594, 99.96099853515625, 126.13700103759766)), ('B', '175', 1, 'backbone clash\n', (126.79, 98.707, 130.435)), ('B', '176', 1, 'backbone clash\n', (126.79, 98.707, 130.435)), ('B', '161', 2, 'cablam Outlier\nside-chain clash', (112.1, 103.5, 129.1)), ('B', '162', 2, 'cablam Outlier\nsmoc Outlier', (108.8, 102.3, 127.5)), ('B', '167', 2, 'smoc Outlier\n', (116.1510009765625, 106.56800079345703, 133.24099731445312)), ('B', '168', 2, 'side-chain clash\n', (120.597, 106.663, 134.951)), ('B', '169', 2, 'smoc Outlier\n', (121.74199676513672, 109.48699951171875, 131.3780059814453)), ('B', '171', 2, 'side-chain clash\n', (120.597, 106.663, 134.951)), ('B', '181', 2, 'side-chain clash\nDihedral angle:CA:C\n', (113.34700000000001, 98.222, 128.238)), ('B', '182', 2, 'Dihedral angle:N:CA\nsmoc Outlier', (114.79100000000001, 98.97, 124.846)), ('B', '183', 2, 'cablam CA Geom Outlier\n', (112.5, 101.7, 123.4)), ('B', '110', 3, 'side-chain clash\n', (106.695, 131.429, 104.592)), ('B', '112', 3, 'cablam CA Geom Outlier\nsmoc Outlier', (100.1, 134.3, 100.3)), ('B', '113', 3, 'jpred outlier', (100.2, 133.4, 104.1)), ('B', '114', 4, 'side-chain clash\nsmoc Outlier', (98.603, 126.287, 101.817)), ('B', '116', 4, 'side-chain clash\n', (104.164, 123.911, 100.936)), ('B', '79', 5, 'smoc Outlier\njpred outlier', (73.10099792480469, 114.81999969482422, 122.27899932861328)), ('B', '83', 5, 'smoc Outlier\n', (78.56700134277344, 117.04499816894531, 120.95500183105469)), ('B', '103', 6, 'side-chain clash\n', (104.655, 127.789, 113.779)), ('B', '124', 6, 'side-chain clash\n', (104.655, 127.789, 113.779)), ('B', '101', 7, 'cablam Outlier\nside-chain clash\nsmoc Outlier', (103.4, 134.4, 117.7)), ('B', '104', 7, 'side-chain clash\n', (102.114, 134.63, 116.563)), ('C', '11', 1, 'smoc Outlier\n', (97.89099884033203, 79.1969985961914, 125.86100006103516)), ('C', '14', 1, 'side-chain clash\n', (101.672, 83.09, 124.077)), ('C', '15', 1, 'smoc Outlier\n', (96.71900177001953, 83.74199676513672, 129.85800170898438)), ('C', '16', 1, 'side-chain clash\n', (96.095, 83.59, 136.151)), ('C', '19', 1, 'side-chain clash\n', (96.095, 83.59, 136.151)), ('C', '33', 1, 'smoc Outlier\n', (105.28299713134766, 86.15699768066406, 123.97000122070312)), ('C', '35', 1, 'side-chain clash\n', (106.27, 79.084, 122.844)), ('C', '36', 1, 'side-chain clash\n', (101.672, 83.09, 124.077)), ('C', '38', 1, 'smoc Outlier\n', (107.71099853515625, 79.66400146484375, 119.29199981689453)), ('C', '39', 1, 'side-chain clash\n', (108.133, 74.661, 122.5)), ('C', '44', 1, 'side-chain clash\n', (110.66, 70.947, 118.156)), ('C', '47', 1, 'side-chain clash\n', (110.66, 70.947, 118.156)), ('C', '48', 1, 'side-chain clash\nsmoc Outlier', (108.133, 74.661, 122.5)), ('C', '3', 2, 'smoc Outlier\n', (101.7699966430664, 67.5270004272461, 120.9209976196289)), ('C', '4', 2, 'jpred outlier', (98.4, 69.2, 121.1)), ('C', '5', 2, 'backbone clash\njpred outlier', (100.515, 68.947, 124.814)), ('C', '6', 2, 'backbone clash\n', (100.515, 68.947, 124.814)), ('C', '23', 3, 'smoc Outlier\n', (102.70600128173828, 92.88800048828125, 130.58700561523438)), ('C', '26', 3, 'smoc Outlier\n', (107.57499694824219, 94.69400024414062, 128.8509979248047)), ('C', '55', 4, 'smoc Outlier\n', (107.49700164794922, 79.72100067138672, 130.7689971923828))]
data['probe'] = [(" T  17  U    O2'", ' T  18  A    N3 ', -0.771, (66.033, 84.305, 116.298)), (' C  44  ASP  HB3', ' C  47  GLU  HG2', -0.68, (110.66, 70.947, 118.156)), (' A 503  GLY  O  ', ' A 507  ASN  ND2', -0.634, (88.718, 107.951, 116.789)), (' A 726  ARG  NH2', ' A 744  GLU  OE1', -0.617, (89.686, 93.962, 65.553)), (' A 271  LEU HD23', ' B 110  ALA  HB2', -0.61, (106.695, 131.429, 104.592)), (" T  17  U   HO2'", ' T  18  A    C2 ', -0.609, (66.254, 85.148, 115.545)), (" T  19  A    H2'", ' T  20  U    H6 ', -0.605, (60.048, 89.532, 118.225)), (' P  11  A    N6 ', ' T  20  U    O4 ', -0.604, (59.721, 90.356, 112.279)), (' B 175  ASP  OD1', ' B 176  ASN  N  ', -0.601, (126.79, 98.707, 130.435)), (' B 103  LEU HD23', ' B 124  THR HG21', -0.597, (104.655, 127.789, 113.779)), (' A 755  MET  HG2', ' A 764  VAL HG22', -0.59, (91.574, 84.999, 85.379)), (" P  14  A    H2'", ' P  15  A    H8 ', -0.575, (72.372, 91.653, 117.561)), (' A 380  MET  HE1', ' B  98  LEU HD22', -0.574, (94.613, 125.696, 117.02)), (' A 367  SER  OG ', ' A 368  PHE  N  ', -0.572, (77.245, 123.949, 111.851)), (' A 476  VAL HG22', ' A 696  ILE HG22', -0.57, (90.773, 94.787, 84.438)), (' B 132  ILE HG21', ' B 138  TYR  HB2', -0.554, (119.43, 105.652, 121.522)), (' A 454  ASP  OD2', ' A 457  ARG  NH1', -0.539, (110.084, 98.0, 108.639)), (" T  17  U    O2'", " T  18  A    H2'", -0.537, (65.245, 83.752, 117.424)), (' A 562  ILE  HA ', ' A 565  THR HG22', -0.534, (82.98, 108.473, 108.572)), (" P  10  G    O2'", ' P  11  A    H8 ', -0.533, (59.916, 91.175, 105.98)), (' A 811  GLU  HG2', ' A1103  HOH  O  ', -0.531, (92.69, 80.454, 98.993)), (' A 889  ARG  HG2', ' A 907  LEU  HB2', -0.529, (71.938, 66.734, 118.654)), (' A 201  ILE HG23', ' A 222  PHE  HB3', -0.525, (115.426, 111.033, 59.276)), (' A 503  GLY  HA3', ' A 561  SER  HA ', -0.525, (87.301, 109.049, 112.203)), (' C  16  VAL HG23', ' C  19  GLN HE21', -0.525, (96.095, 83.59, 136.151)), (' A 488  ILE  HB ', ' A 492  GLN  HG3', -0.524, (70.106, 107.69, 97.69)), (' A 864  ILE  O  ', ' A 916  TRP  HH2', -0.522, (78.333, 74.261, 106.27)), (' A 851  ASP  OD1', ' A 852  GLY  N  ', -0.521, (75.606, 81.245, 128.3)), (' A 720  VAL HG11', ' A 775  LEU  HG ', -0.513, (97.836, 84.479, 70.133)), (' A 858  ARG  NH2', ' P  17  U    OP1', -0.504, (83.498, 83.191, 118.362)), (' A 576  LEU HD11', ' A 686  THR HG22', -0.503, (82.665, 102.07, 97.473)), (' A 330  VAL HG11', ' B 117  LEU HD13', -0.502, (98.704, 122.571, 109.155)), (" T  18  A    O2'", ' T  19  A    H8 ', -0.5, (63.086, 85.635, 117.828)), (' A 856  ILE HD11', ' A 891  LEU  HB3', -0.498, (74.234, 73.271, 122.927)), (' A 180  GLU  OE2', ' A 183  ARG  NH1', -0.498, (123.283, 112.625, 85.606)), (' A 636  LEU HD21', ' A 655  LEU HD22', -0.495, (90.509, 111.448, 89.382)), (' A 836  ARG HH22', ' A 840  ALA  HB2', -0.489, (87.542, 79.578, 113.3)), (' A 452  ASP  O  ', ' A 624  ARG  NH2', -0.487, (102.408, 98.036, 108.305)), (' A 452  ASP  OD2', ' A 556  THR  OG1', -0.481, (98.832, 97.03, 110.566)), (' A 402  THR HG22', ' A 404  ASN  H  ', -0.48, (101.819, 111.152, 125.76)), (' A 420  TYR  O  ', ' A 424  VAL HG23', -0.478, (90.372, 66.77, 123.208)), (' A 546  TYR  CE2', ' A 845  ASP  HB2', -0.475, (89.908, 88.038, 121.419)), (' A 726  ARG  HA ', ' A 729  GLU  HG3', -0.473, (97.166, 97.47, 65.83)), (' A 588  VAL HG23', ' A 758  LEU HD12', -0.472, (83.637, 86.833, 95.349)), (' C  35  LEU  O  ', ' C  39  ILE HG12', -0.472, (106.27, 79.084, 122.844)), (' A 666  MET  HB3', ' A 673  LEU HD22', -0.472, (98.021, 112.29, 110.835)), (' A 239  SER  OG ', ' A 465  ASP  OD1', -0.472, (103.713, 103.468, 77.627)), (' C  14  LEU HD22', ' C  36  HIS  CG ', -0.471, (101.672, 83.09, 124.077)), (' A 254  GLU  OE2', ' A 285  ARG  NH2', -0.471, (118.204, 119.002, 86.117)), (' A 844  VAL HG11', ' A 848  VAL  H  ', -0.47, (84.498, 82.494, 123.621)), (' A 434  SER  OG ', ' A 876  GLU  OE2', -0.468, (94.22, 62.34, 108.252)), (' A 836  ARG  NH2', ' A 840  ALA  HB2', -0.46, (87.505, 78.854, 113.347)), (' A 294  TYR  HE1', ' A 313  PHE  HB2', -0.459, (103.701, 114.583, 84.386)), (' A 907  LEU  H  ', ' A 907  LEU HD23', -0.457, (68.437, 68.637, 116.36)), (' A 335  VAL HG11', ' A 340  PHE  CE2', -0.456, (87.788, 129.265, 116.134)), (' B 161  ASP  O  ', ' B 181  ALA  HB3', -0.453, (111.511, 100.152, 128.942)), (' A 603  LYS  HA ', ' A 603  LYS  HD2', -0.451, (81.086, 75.255, 86.351)), (" T  13  A    H2'", ' T  14  A    H8 ', -0.448, (77.136, 89.016, 102.69)), (' A 221  ASP  N  ', ' A 221  ASP  OD1', -0.448, (114.906, 104.355, 59.743)), (' A 631  ARG  HG2', ' A 663  LEU HD13', -0.443, (95.365, 104.74, 96.663)), (' A 333  ILE  O  ', ' A 339  PRO  HA ', -0.442, (91.805, 132.801, 113.551)), (' A 273  TYR  HB3', ' B 116  PRO  HG3', -0.441, (104.164, 123.911, 100.936)), (' A 329  LEU  HB3', ' B 114  CYS  SG ', -0.44, (98.603, 126.287, 101.817)), (' C   5  ASP  OD1', ' C   6  VAL  N  ', -0.438, (100.515, 68.947, 124.814)), (' A 120  THR  OG1', ' A 122  TYR  O  ', -0.434, (125.06, 98.17, 75.263)), (' B 101  ASP  HA ', ' B 104  ASN HD22', -0.433, (102.114, 134.63, 116.563)), (' A 689  TYR  O  ', ' A 693  VAL HG23', -0.432, (87.234, 97.63, 91.926)), (' A 444  GLN  HB3', ' A 448  ALA  HB2', -0.432, (102.291, 93.162, 118.76)), (" P  18  U    H2'", ' P  19  A    H8 ', -0.432, (84.782, 84.094, 106.769)), (' P  13  U    H3 ', ' T  18  A    H62', -0.43, (66.082, 90.913, 115.521)), (" T  17  U    O2'", " T  18  A    H5'", -0.429, (66.809, 83.238, 117.348)), (' A 166  VAL HG13', ' A 458  TYR  CZ ', -0.429, (108.845, 93.219, 102.854)), (' A 837  ILE  O  ', ' A 884  TYR  OH ', -0.427, (86.202, 74.17, 114.983)), (' A 855  MET  HG2', ' A 891  LEU HD21', -0.427, (78.463, 74.909, 123.382)), (' C  39  ILE HG22', ' C  48  ALA  HA ', -0.427, (108.133, 74.661, 122.5)), (' A 304  ASP  N  ', ' A 304  ASP  OD1', -0.424, (89.139, 111.263, 82.27)), (' A 193  CYS  HB3', ' A 232  PRO  HG3', -0.423, (113.25, 115.096, 68.319)), (' A  86  ILE  CD1', ' A 222  PHE  HB2', -0.418, (117.754, 108.926, 58.461)), (' A  35  PHE  HB2', ' A  48  PHE  HD2', -0.417, (113.15, 91.924, 68.196)), (' A 238  TYR  O  ', ' A 242  MET  HG3', -0.416, (108.441, 106.372, 79.469)), (' A 294  TYR  CE1', ' A 313  PHE  HB2', -0.415, (103.711, 115.042, 84.261)), (' A 855  MET  HE3', ' A 891  LEU HD21', -0.414, (78.432, 74.576, 124.713)), (' A 848  VAL HG13', ' A 855  MET  HB2', -0.414, (80.128, 79.221, 124.647)), (' A 276  THR HG23', ' A 296  PRO  HB2', -0.414, (102.668, 122.825, 87.762)), (' A 546  TYR  CD2', ' A 845  ASP  HB2', -0.414, (89.722, 87.88, 120.844)), (' A 424  VAL HG22', ' A 429  PHE  HD2', -0.414, (92.321, 66.062, 121.736)), (' A 260  ASP  OD1', ' A 262  THR HG22', -0.413, (129.323, 115.558, 91.02)), (' A 684  ASP  OD1', ' A 685  ALA  N  ', -0.412, (86.149, 103.262, 101.899)), (' B 168  GLN  HB2', ' B 171  GLU  HG3', -0.412, (120.597, 106.663, 134.951)), (' A  39  ASN  HB2', ' A  42  VAL  H  ', -0.408, (106.02, 94.116, 60.842)), (" P  14  A    H2'", ' P  15  A    C8 ', -0.408, (72.38, 91.258, 117.804)), (' A 334  PHE  CE1', ' A 339  PRO  HB3', -0.408, (93.691, 134.886, 114.136)), (' A 493  VAL HG12', ' A 495  VAL  H  ', -0.407, (73.244, 104.357, 105.041)), (' A 889  ARG  HG2', ' A 907  LEU HD12', -0.405, (71.241, 65.921, 119.177)), (" P  17  U    H2'", ' P  18  U    H6 ', -0.405, (82.577, 83.451, 110.841)), (' A 545  LYS  HB2', ' A 555  ARG  O  ', -0.403, (94.584, 93.005, 113.068)), (' A 816  HIS  HB2', ' A 831  TYR  CZ ', -0.4, (88.846, 70.924, 100.282))]
data['cablam'] = [('A', '45', 'PHE', 'check CA trace,carbonyls, peptide', 'strand\nEEEEE', (108.6, 94.3, 71.9)), ('A', '218', 'ASP', 'check CA trace,carbonyls, peptide', ' \nB----', (120.9, 102.8, 63.1)), ('A', '274', 'ASP', 'check CA trace,carbonyls, peptide', ' \n----H', (104.4, 125.2, 94.8)), ('A', '275', 'PHE', 'check CA trace,carbonyls, peptide', ' \n---HH', (107.3, 123.7, 92.8)), ('A', '337', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (88.4, 137.3, 117.0)), ('A', '509', 'TRP', 'check CA trace,carbonyls, peptide', 'turn\nTTT--', (82.7, 111.6, 122.3)), ('A', '573', 'GLN', ' alpha helix', 'turn\nHHTTT', (76.7, 103.4, 97.6)), ('A', '607', 'SER', 'check CA trace,carbonyls, peptide', 'turn\nHHTT-', (82.1, 79.1, 80.7)), ('A', '664', 'SER', 'check CA trace,carbonyls, peptide', 'bend\nIIS-E', (98.2, 109.6, 101.7)), ('A', '677', 'PRO', 'check CA trace,carbonyls, peptide', ' \nE--S-', (103.3, 106.7, 102.0)), ('A', '823', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nE-SSS', (70.6, 64.0, 94.3)), ('A', '824', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\n-SSSE', (71.1, 62.3, 90.9)), ('A', '845', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nEESSS', (88.7, 85.5, 121.8)), ('A', '846', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSST', (86.6, 86.1, 124.9)), ('A', '847', 'ILE', 'check CA trace,carbonyls, peptide', 'bend\nSSSTT', (83.2, 85.2, 123.5)), ('A', '909', 'ASN', 'check CA trace,carbonyls, peptide', 'turn\n-STTT', (72.3, 66.4, 110.0)), ('A', '151', 'CYS', 'check CA trace', 'bend\nTTS--', (126.5, 98.0, 90.2)), ('A', '217', 'TYR', 'check CA trace', ' \n-B---', (122.9, 104.7, 65.7)), ('A', '326', 'PHE', 'check CA trace', ' \nGG-EE', (103.6, 117.7, 100.7)), ('A', '678', 'GLY', 'check CA trace', 'bend\n--S--', (100.5, 105.0, 100.1)), ('B', '101', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\n-SSHH', (103.4, 134.4, 117.7)), ('B', '161', 'ASP', 'check CA trace,carbonyls, peptide', ' \nEE-SS', (112.1, 103.5, 129.1)), ('B', '162', 'ALA', 'check CA trace,carbonyls, peptide', 'bend\nE-SSS', (108.8, 102.3, 127.5)), ('B', '178', 'PRO', ' three-ten', 'turn\nT-TTS', (120.5, 95.1, 128.3)), ('B', '112', 'ASP', 'check CA trace', 'helix-3\nSGGG-', (100.1, 134.3, 100.3)), ('B', '183', 'PRO', 'check CA trace', ' \n-S-EE', (112.5, 101.7, 123.4))]
data['jpred'] = [('C', '4', 'S', '-', 'H', (98.4, 69.2, 121.1)), ('C', '5', 'D', '-', 'H', (98.4, 69.2, 124.9)), ('B', '79', 'K', '-', 'H', (73.1, 114.8, 122.3)), ('B', '113', 'G', '-', 'H', (100.2, 133.4, 104.1)), ('B', '135', 'Y', '-', 'H', (121.9, 101.9, 121.7))]
data['smoc'] = [('A', 31, 'VAL', 0.5684109381975341, (122.06300354003906, 85.29299926757812, 70.26899719238281)), ('A', 34, 'ALA', 0.6025084523034345, (115.45700073242188, 92.74400329589844, 72.54199981689453)), ('A', 39, 'ASN', 0.5838693941669453, (106.24600219726562, 96.7229995727539, 60.59000015258789)), ('A', 40, 'ASP', 0.5903337287271521, (103.447998046875, 96.1259994506836, 58.145999908447266)), ('A', 43, 'ALA', 0.5934243352697327, (104.64700317382812, 94.47699737548828, 65.88500213623047)), ('A', 86, 'ILE', 0.6055921585901696, (121.66500091552734, 111.16100311279297, 56.82899856567383)), ('A', 90, 'LEU', 0.5505544021124417, (123.52200317382812, 114.46700286865234, 62.41999816894531)), ('A', 93, 'CYS', 0.4526888699629126, (125.38600158691406, 115.92400360107422, 67.63899993896484)), ('A', 95, 'ALA', 0.4683224106595369, (124.98200225830078, 111.83899688720703, 71.14600372314453)), ('A', 97, 'ALA', 0.49386214342570567, (128.11500549316406, 106.91799926757812, 67.61499786376953)), ('A', 100, 'ASP', 0.41199317641424954, (133.0229949951172, 103.91999816894531, 59.74300003051758)), ('A', 125, 'ALA', 0.6141136799327249, (116.21299743652344, 97.6500015258789, 75.10800170898438)), ('A', 132, 'ARG', 0.5468847141803931, (110.08399963378906, 94.21499633789062, 82.47599792480469)), ('A', 135, 'ASP', 0.5848035531985399, (112.59100341796875, 85.58100128173828, 85.48300170898438)), ('A', 144, 'GLU', 0.6039061768265509, (125.88700103759766, 90.57499694824219, 83.1709976196289)), ('A', 161, 'ASP', 0.47377702085579315, (116.64700317382812, 85.76100158691406, 97.28299713134766)), ('A', 167, 'GLU', 0.5165217435248741, (113.61499786376953, 89.70600128173828, 101.25499725341797)), ('A', 171, 'ILE', 0.5804129309340533, (118.70099639892578, 95.1969985961914, 95.76200103759766)), ('A', 179, 'GLY', 0.5888090131852327, (120.24800109863281, 105.48600006103516, 87.70500183105469)), ('A', 189, 'THR', 0.5698923204910545, (118.00700378417969, 111.5999984741211, 73.65499877929688)), ('A', 202, 'VAL', 0.6137505449425961, (111.25299835205078, 112.53500366210938, 60.51499938964844)), ('A', 210, 'GLN', 0.6158764169593903, (120.58499908447266, 103.43199920654297, 71.72599792480469)), ('A', 211, 'ASP', 0.5909822053815367, (123.71099853515625, 102.2249984741211, 73.48999786376953)), ('A', 218, 'ASP', 0.47529493426679126, (120.9260025024414, 102.76899719238281, 63.12099838256836)), ('A', 219, 'PHE', 0.5964295236824073, (119.7979965209961, 105.58000183105469, 60.821998596191406)), ('A', 223, 'ILE', 0.6065589227016446, (112.76499938964844, 110.70600128173828, 55.82400131225586)), ('A', 239, 'SER', 0.5717335832047582, (106.49299621582031, 104.96099853515625, 77.44300079345703)), ('A', 242, 'MET', 0.5915153965409089, (109.04299926757812, 104.9489974975586, 82.12000274658203)), ('A', 254, 'GLU', 0.6185002374181303, (118.34400177001953, 116.52400207519531, 90.43699645996094)), ('A', 260, 'ASP', 0.6543524585474181, (125.9990005493164, 116.5979995727539, 90.35399627685547)), ('A', 261, 'LEU', 0.6001731973095455, (126.125, 113.63600158691406, 92.73400115966797)), ('A', 266, 'ILE', 0.6494933870208727, (119.77799987792969, 121.55599975585938, 97.39299774169922)), ('A', 269, 'ASP', 0.6140410089460033, (112.98300170898438, 126.875, 101.88200378417969)), ('A', 270, 'LEU', 0.5829454507487601, (110.67900085449219, 125.0979995727539, 104.31999969482422)), ('A', 274, 'ASP', 0.5753840173024626, (104.37300109863281, 125.19499969482422, 94.81800079345703)), ('A', 275, 'PHE', 0.6043909703667256, (107.25499725341797, 123.74099731445312, 92.75199890136719)), ('A', 291, 'ASP', 0.5650680763585166, (103.88899993896484, 115.39700317382812, 72.38200378417969)), ('A', 303, 'ASP', 0.6133884810076276, (89.20800018310547, 114.23300170898438, 81.5719985961914)), ('A', 306, 'CYS', 0.5610647555548955, (94.42900085449219, 113.48400115966797, 81.25199890136719)), ('A', 316, 'LEU', 0.5421198007152711, (108.54399871826172, 110.9469985961914, 89.06099700927734)), ('A', 333, 'ILE', 0.5605317322315579, (91.58399963378906, 132.09500122070312, 110.26300048828125)), ('A', 336, 'ASP', 0.510412841429459, (84.9489974975586, 136.2449951171875, 116.01399993896484)), ('A', 337, 'GLY', 0.5804595449431753, (88.40599822998047, 137.343994140625, 117.04900360107422)), ('A', 349, 'ARG', 0.5785116313840065, (102.61699676513672, 114.21600341796875, 95.00399780273438)), ('A', 354, 'VAL', 0.609555634037443, (94.70899963378906, 122.0260009765625, 94.91999816894531)), ('A', 357, 'GLN', 0.6228790449776126, (87.177001953125, 127.43800354003906, 96.76000213623047)), ('A', 366, 'LEU', 0.49091397449315016, (80.60299682617188, 128.45899963378906, 113.26499938964844)), ('A', 372, 'LEU', 0.5788168166917397, (82.7760009765625, 118.87200164794922, 112.10700225830078)), ('A', 373, 'VAL', 0.5688404215386581, (85.05999755859375, 119.93900299072266, 109.24400329589844)), ('A', 382, 'ALA', 0.5298462529788766, (99.31600189208984, 118.89700317382812, 114.15799713134766)), ('A', 385, 'GLY', 0.5879338889639045, (101.45700073242188, 118.83899688720703, 119.30899810791016)), ('A', 396, 'PHE', 0.5836923461497167, (107.71700286865234, 110.43900299072266, 108.14700317382812)), ('A', 408, 'GLN', 0.6246909834089129, (99.38099670410156, 98.44200134277344, 123.21299743652344)), ('A', 423, 'ALA', 0.6484406106607578, (87.36599731445312, 65.92400360107422, 121.14299774169922)), ('A', 431, 'GLU', 0.5744572464969652, (99.88800048828125, 60.92599868774414, 116.97899627685547)), ('A', 438, 'LYS', 0.6360295998148688, (97.36699676513672, 74.71900177001953, 113.60900115966797)), ('A', 439, 'HIS', 0.6064940352550492, (95.29499816894531, 77.8949966430664, 114.19400024414062)), ('A', 443, 'ALA', 0.5714779009136555, (100.30999755859375, 87.21299743652344, 121.23600006103516)), ('A', 444, 'GLN', 0.577013406500018, (102.05500030517578, 90.49800109863281, 120.48100280761719)), ('A', 452, 'ASP', 0.5542616140990431, (103.13099670410156, 96.65599822998047, 111.51699829101562)), ('A', 453, 'TYR', 0.5579056535578449, (102.81999969482422, 100.21700286865234, 110.18900299072266)), ('A', 458, 'TYR', 0.5949873146677696, (107.27100372314453, 98.3030014038086, 100.81500244140625)), ('A', 462, 'THR', 0.5594167901252118, (106.23100280761719, 103.6520004272461, 90.81500244140625)), ('A', 463, 'MET', 0.5272343341144518, (106.00199890136719, 105.25199890136719, 87.38600158691406)), ('A', 468, 'GLN', 0.5814187765002994, (99.80799865722656, 100.71900177001953, 78.25499725341797)), ('A', 474, 'GLU', 0.557341485139397, (89.66699981689453, 101.27200317382812, 78.92400360107422)), ('A', 477, 'ASP', 0.5960808811933114, (86.1510009765625, 99.69100189208984, 82.28399658203125)), ('A', 484, 'ASP', 0.5851204407578546, (74.90699768066406, 101.63999938964844, 87.5459976196289)), ('A', 486, 'GLY', 0.595602924537186, (75.71199798583984, 108.11499786376953, 90.66600036621094)), ('A', 487, 'CYS', 0.6130511888177154, (75.01000213623047, 110.30999755859375, 93.65399932861328)), ('A', 492, 'GLN', 0.6395615582933961, (68.447998046875, 107.06500244140625, 100.82099914550781)), ('A', 504, 'PHE', 0.5329846937724627, (90.11199951171875, 109.74700164794922, 115.76100158691406)), ('A', 515, 'TYR', 0.648242218599119, (76.68499755859375, 111.79900360107422, 114.0979995727539)), ('A', 517, 'ASP', 0.6125903261927654, (71.27200317382812, 111.44400024414062, 114.36100006103516)), ('A', 525, 'ASP', 0.5476190282889275, (73.71900177001953, 117.11499786376953, 101.79900360107422)), ('A', 528, 'PHE', 0.5482248985821268, (78.5999984741211, 116.46199798583984, 100.53399658203125)), ('A', 534, 'ASN', 0.5975563296679604, (86.81400299072266, 121.68099975585938, 98.83999633789062)), ('A', 553, 'ARG', 0.48658156823551, (101.48100280761719, 88.51699829101562, 112.0739974975586)), ('A', 557, 'VAL', 0.4707128572964671, (93.25700378417969, 97.61699676513672, 110.62899780273438)), ('A', 566, 'MET', 0.5880253449045496, (79.63600158691406, 109.63400268554688, 105.25399780273438)), ('A', 580, 'ALA', 0.5993983395732188, (77.01599884033203, 93.27200317382812, 95.29000091552734)), ('A', 600, 'ASN', 0.6229615268567793, (77.00599670410156, 78.26000213623047, 89.98200225830078)), ('A', 601, 'MET', 0.6151913220750971, (80.13999938964844, 80.36599731445312, 90.45600128173828)), ('A', 607, 'SER', 0.6004340390591539, (82.06800079345703, 79.12100219726562, 80.69300079345703)), ('A', 610, 'GLU', 0.5745032904710695, (88.58599853515625, 75.43299865722656, 75.20700073242188)), ('A', 615, 'MET', 0.5653988762884692, (95.06900024414062, 78.97100067138672, 87.71099853515625)), ('A', 616, 'GLY', 0.5781553209772596, (95.30400085449219, 80.95999908447266, 90.95600128173828)), ('A', 618, 'ASP', 0.5725945732875819, (98.88600158691406, 85.40399932861328, 95.22000122070312)), ('A', 622, 'CYS', 0.5558668964895468, (98.927001953125, 93.5780029296875, 98.65399932861328)), ('A', 629, 'MET', 0.5480945710053102, (98.9219970703125, 105.22599792480469, 90.27799987792969)), ('A', 633, 'MET', 0.47855149176841827, (93.15699768066406, 104.43399810791016, 88.43599700927734)), ('A', 634, 'ALA', 0.4691846377069077, (90.71099853515625, 102.35199737548828, 90.4800033569336)), ('A', 635, 'SER', 0.5155997993542086, (89.13899993896484, 105.45999908447266, 92.01399993896484)), ('A', 658, 'GLU', 0.4529471325634204, (89.59500122070312, 110.3010025024414, 98.3239974975586)), ('A', 665, 'GLU', 0.6110206780237378, (96.46600341796875, 110.78299713134766, 104.81600189208984)), ('A', 668, 'MET', 0.4875474770404589, (97.17400360107422, 107.88200378417969, 114.13500213623047)), ('A', 669, 'CYS', 0.4664934022481056, (99.44400024414062, 105.05000305175781, 115.29000091552734)), ('A', 679, 'GLY', 0.5485799685513908, (98.55799865722656, 101.79199981689453, 99.69300079345703)), ('A', 680, 'THR', 0.5182268911663355, (94.98999786376953, 100.9219970703125, 100.65699768066406)), ('A', 684, 'ASP', 0.4816718388054463, (87.56600189208984, 102.572998046875, 103.39299774169922)), ('A', 695, 'ASN', 0.5556335064630334, (93.19400024414062, 92.66200256347656, 90.36000061035156)), ('A', 697, 'CYS', 0.5547602139657495, (93.94999694824219, 95.69599914550781, 85.95700073242188)), ('A', 706, 'ALA', 0.5682592667343168, (102.21600341796875, 88.16899871826172, 77.20500183105469)), ('A', 712, 'GLY', 0.58059963765935, (104.78399658203125, 87.60199737548828, 65.7300033569336)), ('A', 718, 'LYS', 0.5874221880315418, (96.09200286865234, 84.90899658203125, 61.305999755859375)), ('A', 723, 'LEU', 0.5928757172680703, (95.0790023803711, 91.14700317382812, 66.97599792480469)), ('A', 727, 'LEU', 0.5519764117171314, (97.08200073242188, 95.92900085449219, 70.04299926757812)), ('A', 729, 'GLU', 0.48704290543351425, (99.33399963378906, 100.15499877929688, 67.19200134277344)), ('A', 738, 'ASP', 0.618550580733612, (89.54900360107422, 102.80999755859375, 69.62300109863281)), ('A', 740, 'ASP', 0.6057164384009338, (85.98899841308594, 98.75399780273438, 68.46199798583984)), ('A', 747, 'ALA', 0.6067595930636864, (85.60099792480469, 89.60800170898438, 73.8550033569336)), ('A', 754, 'SER', 0.4729939670241383, (87.86900329589844, 83.92500305175781, 82.09200286865234)), ('A', 761, 'ASP', 0.5002411326204126, (91.52200317382812, 86.4489974975586, 95.08799743652344)), ('A', 768, 'SER', 0.6478190072824809, (96.01599884033203, 75.78399658203125, 77.66799926757812)), ('A', 782, 'PHE', 0.5719620836137789, (102.11699676513672, 87.677001953125, 86.35600280761719)), ('A', 785, 'VAL', 0.536250703802488, (104.22000122070312, 92.27100372314453, 85.7969970703125)), ('A', 802, 'GLU', 0.5360386264300849, (95.02100372314453, 72.61499786376953, 88.06099700927734)), ('A', 807, 'LYS', 0.6484831111947438, (88.74600219726562, 68.9000015258789, 90.5199966430664)), ('A', 811, 'GLU', 0.5420689237477765, (91.94100189208984, 77.38500213623047, 96.87000274658203)), ('A', 815, 'GLN', 0.5881050590939064, (88.12799835205078, 76.97799682617188, 100.69599914550781)), ('A', 823, 'GLY', 0.6165279202537031, (70.60299682617188, 64.04299926757812, 94.28700256347656)), ('A', 842, 'CYS', 0.5952108028317263, (88.9800033569336, 75.19999694824219, 120.76000213623047)), ('A', 845, 'ASP', 0.44791918413979603, (88.74099731445312, 85.50800323486328, 121.8239974975586)), ('A', 850, 'THR', 0.3653431353181995, (80.70600128173828, 85.13600158691406, 129.46499633789062)), ('A', 859, 'PHE', 0.5722554863103878, (78.90499877929688, 75.61799621582031, 117.19100189208984)), ('A', 860, 'VAL', 0.5260980660904014, (75.84600067138672, 75.65399932861328, 114.91799926757812)), ('A', 878, 'ALA', 0.6578570287850157, (84.62899780273438, 63.4640007019043, 107.90899658203125)), ('A', 881, 'PHE', 0.5968888130531792, (81.3740005493164, 67.31700134277344, 111.46399688720703)), ('A', 885, 'LEU', 0.5166537342169986, (77.06999969482422, 67.53900146484375, 115.97000122070312)), ('A', 908, 'THR', 0.6430068880403534, (70.5, 66.23899841308594, 113.33300018310547)), ('B', 79, 'LYS', 0.5597936141625391, (73.10099792480469, 114.81999969482422, 122.27899932861328)), ('B', 83, 'VAL', 0.45530790149404354, (78.56700134277344, 117.04499816894531, 120.95500183105469)), ('B', 90, 'MET', 0.5116885819870416, (88.1969985961914, 120.86699676513672, 122.25499725341797)), ('B', 98, 'LEU', 0.5088463746627724, (98.7760009765625, 127.35399627685547, 119.66899871826172)), ('B', 101, 'ASP', 0.6330429500222153, (103.4260025024414, 134.3730010986328, 117.69400024414062)), ('B', 112, 'ASP', 0.4685325249971142, (100.13099670410156, 134.30999755859375, 100.33399963378906)), ('B', 114, 'CYS', 0.5217763999036198, (99.78500366210938, 129.73399353027344, 103.31900024414062)), ('B', 129, 'MET', 0.6159356015125862, (110.09600067138672, 113.63200378417969, 121.6709976196289)), ('B', 137, 'THR', 0.6051944108391808, (120.63200378417969, 104.71499633789062, 117.43499755859375)), ('B', 142, 'CYS', 0.49085520589156495, (120.60299682617188, 111.84400177001953, 121.31600189208984)), ('B', 143, 'ASP', 0.6318308368871598, (124.25499725341797, 111.82599639892578, 122.37200164794922)), ('B', 150, 'ALA', 0.6898864710705341, (115.88800048828125, 120.15699768066406, 112.34100341796875)), ('B', 155, 'GLU', 0.6368180811820975, (118.48300170898438, 120.24800109863281, 125.66999816894531)), ('B', 158, 'GLN', 0.5976750797751883, (113.74800109863281, 113.61100006103516, 130.5970001220703)), ('B', 162, 'ALA', 0.5849939939931994, (108.79000091552734, 102.32499694824219, 127.5459976196289)), ('B', 167, 'VAL', 0.6219423349098898, (116.1510009765625, 106.56800079345703, 133.24099731445312)), ('B', 169, 'LEU', 0.6193667986084417, (121.74199676513672, 109.48699951171875, 131.3780059814453)), ('B', 174, 'MET', 0.6060103264439644, (126.73899841308594, 99.96099853515625, 126.13700103759766)), ('B', 182, 'TRP', 0.49574524653680657, (114.79100036621094, 98.97000122070312, 124.84600067138672)), ('C', 3, 'MET', 0.4510645514517707, (101.7699966430664, 67.5270004272461, 120.9209976196289)), ('C', 11, 'VAL', 0.49749793619934257, (97.89099884033203, 79.1969985961914, 125.86100006103516)), ('C', 15, 'SER', 0.5605194023118399, (96.71900177001953, 83.74199676513672, 129.85800170898438)), ('C', 23, 'GLU', 0.6012082074516956, (102.70600128173828, 92.88800048828125, 130.58700561523438)), ('C', 26, 'SER', 0.5945706100254139, (107.57499694824219, 94.69400024414062, 128.8509979248047)), ('C', 33, 'VAL', 0.5582849333893447, (105.28299713134766, 86.15699768066406, 123.97000122070312)), ('C', 38, 'ASP', 0.4803534165126327, (107.71099853515625, 79.66400146484375, 119.29199981689453)), ('C', 48, 'ALA', 0.525785884990563, (108.30000305175781, 72.5009994506836, 122.71099853515625)), ('C', 55, 'LEU', 0.5176749889308035, (107.49700164794922, 79.72100067138672, 130.7689971923828))]
handle_read_draw_probe_dots_unformatted("/Users/agnel/projects_ccpem/validation/Model_validation_594/validation_cootdata/molprobity_probe7bv2_nolig_0.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
