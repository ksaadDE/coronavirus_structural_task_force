# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  28 ', 'ASN', 0.011075206209592979, (-0.6480000000000083, -81.402, 31.800000000000004)), ('A', '  28 ', 'ASN', 0.0011395299602944052, (0.1379999999999788, -80.869, 32.862)), ('B', '  28 ', 'ASN', 0.019935393080266813, (73.011, -38.508, -17.069)), ('B', '  28 ', 'ASN', 0.003573422593808737, (72.046, -38.492, -18.089))]
data['omega'] = [('A', '  28 ', 'ASN', None, (-1.041000000000002, -80.046, 32.67999999999999)), ('B', '  28 ', 'ASN', None, (72.602, -37.15800000000001, -18.041))]
data['rota'] = [('A', '  28 ', 'ASN', 0.006385374167231894, (-0.6480000000000083, -81.402, 31.800000000000004)), ('B', '  28 ', 'ASN', 0.11308252437390376, (73.011, -38.508, -17.069)), ('B', ' 179 ', 'TYR', 0.0, (36.649000000000015, -49.602, 1.43))]
data['cbeta'] = [('A', ' 279 ', 'PHE', ' ', 0.255846074651425, (12.863, -101.747, 12.545))]
data['probe'] = [(' B   0  MET  SD ', ' B 688  HOH  O  ', -1.035, (53.272, -27.988, -15.973)), (' A 236  VAL  O  ', ' A 501  HOH  O  ', -0.942, (19.886, -98.22, -2.005)), (' A 170  GLU  O  ', ' A 502  HOH  O  ', -0.928, (20.06, -65.164, -2.328)), (' A  36  ASP  N  ', ' A 510  HOH  O  ', -0.896, (-10.05, -63.302, 25.591)), (' A 310  ASP  O  ', ' A 503  HOH  O  ', -0.868, (39.855, -105.477, 0.227)), (' A 346  GLN  NE2', ' A 511  HOH  O  ', -0.866, (31.881, -97.251, 15.076)), (' B 113  GLU  OE1', ' B 503  HOH  O  ', -0.827, (40.397, -38.921, -21.201)), (' B  95  HIS  O  ', ' B 504  HOH  O  ', -0.815, (52.659, -44.509, -12.133)), (' B 133  LEU  O  ', ' B 502  HOH  O  ', -0.806, (33.877, -43.117, -9.69)), (' A 262  PRO  O  ', ' A 505  HOH  O  ', -0.78, (6.448, -100.779, -0.612)), (' A 113  GLU  OE1', ' A 507  HOH  O  ', -0.757, (29.396, -68.754, 35.66)), (' B 138  ARG  NH1', ' B 505  HOH  O  ', -0.749, (30.576, -52.002, -14.399)), (' A  -1  ALA  O  ', ' A 509  HOH  O  ', -0.743, (10.159, -59.731, 32.478)), (' A  87  ASP  OD2', ' A 508  HOH  O  ', -0.742, (18.973, -82.537, 19.124)), (' A 279  PHE  CD1', ' A 290  CYS  HA ', -0.714, (13.925, -104.211, 11.717)), (' B 331  LEU  O  ', ' B 507  HOH  O  ', -0.701, (53.61, -77.875, 10.26)), (' B 307  LYS  NZ ', ' B 512  HOH  O  ', -0.69, (50.293, -66.379, 25.833)), (' B 178  TYR  C  ', ' B 179  TYR  HD1', -0.66, (37.594, -48.136, 2.844)), (' A 272  ASP  OD1', ' A 512  HOH  O  ', -0.629, (19.605, -86.419, 11.033)), (' B 138  ARG  NE ', ' B 514  HOH  O  ', -0.62, (34.54, -53.928, -14.01)), (' B 166  THR HG21', ' B 197  SER  HB3', -0.605, (55.915, -48.41, 8.708)), (' B 237  TYR  O  ', ' B 508  HOH  O  ', -0.604, (67.257, -63.096, 18.601)), (' B 185  VAL  O  ', ' B 187  GLN  NE2', -0.588, (32.971, -55.646, -4.581)), (' A  78  ASP  O  ', ' A 513  HOH  O  ', -0.586, (24.845, -78.582, 26.835)), (' B 209  MET  HB3', ' B 300  ASP  OD1', -0.562, (53.222, -58.327, 23.937)), (' B 128  ASP  O  ', ' B 509  HOH  O  ', -0.553, (36.973, -34.119, -5.848)), (' A   0  MET  HE2', ' A  60  LYS  NZ ', -0.552, (13.631, -65.874, 28.766)), (' B 273  SER  OG ', ' B 275  VAL  O  ', -0.545, (57.971, -58.341, 1.579)), (' A 234  HIS  O  ', ' A 247  GLY  HA3', -0.545, (21.54, -104.574, 0.146)), (' B  90  ARG  NH2', ' B  93  PRO  O  ', -0.535, (57.16, -47.361, -8.178)), (' B 151  LEU  N  ', ' B 521  HOH  O  ', -0.533, (26.941, -47.794, 4.887)), (' B 178  TYR  C  ', ' B 179  TYR  CD1', -0.522, (36.701, -48.299, 3.043)), (' B 179  TYR  HD1', ' B 179  TYR  N  ', -0.521, (37.279, -48.318, 2.612)), (' A 218  MET  HG3', ' A 237  TYR  CE2', -0.52, (20.783, -100.888, -9.744)), (' B 143  ILE  HA ', ' B 177  ASN  O  ', -0.516, (39.599, -45.314, 3.28)), (' B   0  MET  HA ', ' B 688  HOH  O  ', -0.513, (53.784, -28.047, -16.195)), (' A 256  LYS  O  ', ' A 259  LYS  HE3', -0.51, (11.988, -96.089, -6.955)), (' A 256  LYS  O  ', ' A 259  LYS  HG3', -0.509, (11.251, -95.385, -6.433)), (' A 213  PHE  O  ', ' A 514  HOH  O  ', -0.503, (18.902, -95.888, -11.466)), (' B 177  ASN  HB3', ' B 179  TYR  CE1', -0.496, (36.322, -46.483, 5.34)), (' A 330  MET  O  ', ' A 341  PHE  HA ', -0.491, (30.762, -103.505, 3.903)), (' A 134  PHE  CZ ', ' A 181  LYS  HG3', -0.49, (38.64, -73.023, 18.52)), (' A  36  ASP  CA ', ' A 510  HOH  O  ', -0.484, (-10.333, -63.412, 25.619)), (' B  27  ILE HG22', ' B  28 AASN  OD1', -0.477, (75.849, -36.357, -17.557)), (' A 148  VAL HG11', ' A 151  LEU HD12', -0.476, (38.957, -67.445, 14.28)), (' A  90  ARG  NH2', ' A  93  PRO  O  ', -0.472, (17.957, -81.861, 22.753)), (' A 279  PHE  HB2', ' A 290  CYS  O  ', -0.471, (14.308, -102.424, 12.873)), (' A 138  ARG  HG3', ' A 138  ARG HH11', -0.47, (41.839, -75.328, 28.375)), (' A 332  TRP  HB2', ' A 340  THR HG22', -0.469, (29.961, -108.26, 2.653)), (' B 179  TYR  CD1', ' B 179  TYR  N  ', -0.464, (36.757, -47.985, 2.623)), (' A 313  VAL  O  ', ' A 333  CYS  HB2', -0.463, (37.376, -109.099, 0.845)), (' B 199  ASN  HB2', ' B 202  GLU  HG2', -0.46, (63.554, -47.249, 13.135)), (' B 345  LEU HD21', ' B 586  HOH  O  ', -0.455, (62.96, -68.022, 5.361)), (' A 135  ARG  O  ', ' A 181  LYS  NZ ', -0.452, (40.505, -69.273, 22.855)), (' A 196  GLN  HB3', ' A 206  ARG  NH1', -0.45, (21.686, -83.36, -0.408)), (' A 272  ASP  HA ', ' A 512  HOH  O  ', -0.448, (19.168, -86.883, 12.097)), (' B 138  ARG  N  ', ' B 526  HOH  O  ', -0.447, (33.492, -47.597, -12.114)), (' A 226  LYS  O  ', ' A 515  HOH  O  ', -0.446, (33.251, -100.682, -12.49)), (' A 143  ILE  HA ', ' A 177  ASN  O  ', -0.446, (31.868, -71.926, 11.805)), (' A   0  MET  HE2', ' A  60  LYS  HZ2', -0.445, (13.826, -65.905, 29.248)), (' B 177  ASN  HB3', ' B 179  TYR  HE1', -0.445, (36.682, -46.303, 5.661)), (' A 203  PHE  CE1', ' A 252  ILE HG13', -0.444, (18.219, -90.273, -4.665)), (' B   8  ASN  HB3', ' B  15  PHE  HA ', -0.442, (56.034, -27.808, -7.866)), (' B  98  THR  HB ', ' B 101  VAL  HB ', -0.441, (49.096, -38.545, -13.127)), (' A 330  MET  HG2', ' A 344  LYS  HB2', -0.434, (30.903, -102.66, 9.877)), (' B 330  MET  O  ', ' B 341  PHE  HA ', -0.431, (56.297, -72.152, 10.381)), (' A 240  PHE  CZ ', ' A 257  ARG  HD3', -0.427, (12.75, -102.101, -2.617)), (' A 200  LEU  HA ', ' A 200  LEU HD12', -0.422, (13.583, -90.793, 0.599)), (' B  27  ILE  O  ', ' B  28 AASN  C  ', -0.421, (72.023, -37.153, -16.033)), (' B 296  ASP  HB3', ' B 604  HOH  O  ', -0.42, (56.678, -54.537, 10.151)), (' B  63  ILE HG12', ' B 737  HOH  O  ', -0.418, (51.295, -32.433, -2.042)), (' A 218  MET  HG3', ' A 237  TYR  CZ ', -0.411, (20.281, -100.748, -9.738)), (' B  71  ILE HD13', ' B 323  ASP  HB3', -0.411, (48.61, -53.832, 4.565)), (' A 120  THR  OG1', ' A 504  HOH  O  ', -0.411, (35.199, -79.974, 23.409)), (' B 334  LYS  O  ', ' B 337  HIS  ND1', -0.409, (57.368, -81.522, 20.078)), (' A 326  GLU  HB2', ' A 529  HOH  O  ', -0.407, (37.023, -90.29, 11.632)), (' A 132  ASP  O  ', ' A 136  ASN  ND2', -0.401, (37.972, -64.418, 23.732)), (' B 264  GLU  O  ', ' B 280  ILE  HA ', -0.4, (72.276, -59.887, 7.484))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
