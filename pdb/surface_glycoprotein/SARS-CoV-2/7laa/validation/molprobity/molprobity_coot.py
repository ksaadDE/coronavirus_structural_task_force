# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 100 ', 'ILE', 0.0438777626139084, (213.171, 126.255, 178.436)), ('A', ' 137 ', 'ASN', 0.02635888411157934, (203.11399999999995, 125.684, 165.559)), ('A', ' 582 ', 'LEU', 0.02729156141619943, (148.85599999999997, 160.582, 177.127)), ('A', ' 604 ', 'THR', 0.021397253655301898, (193.927, 148.902, 215.498)), ('A', ' 710 ', 'ASN', 0.04529756345014975, (164.534, 170.546, 254.031)), ('B', ' 207 ', 'HIS', 0.011908328917473088, (134.693, 180.441, 176.664)), ('B', ' 618 ', 'THR', 0.04471256279246025, (162.974, 217.81200000000004, 190.84299999999996)), ('B', '1085 ', 'GLY', 0.07057579187426576, (183.294, 213.15200000000004, 267.933)), ('C', '  46 ', 'SER', 0.031162801309092075, (195.774, 218.085, 193.974)), ('C', ' 121 ', 'ASN', 0.03922050440583966, (214.09599999999995, 230.018, 165.54)), ('C', ' 187 ', 'LYS', 0.003635603781000116, (220.10099999999997, 236.763, 181.16999999999996)), ('C', ' 614 ', 'ASP', 0.044149738959445455, (215.347, 185.522, 203.078)), ('H', '  62 ', 'SER', 0.048340369700125244, (161.055, 187.791, 112.45099999999996)), ('L', '  68 ', 'GLY', 0.05131815208042884, (142.25799999999995, 192.925, 134.40699999999998)), ('L', ' 207 ', 'VAL', 0.08063104046385657, (134.191, 216.208, 82.63))]
data['omega'] = [('H', ' 147 ', 'PRO', None, (164.319, 204.979, 95.456)), ('H', ' 149 ', 'PRO', None, (161.265, 207.68500000000006, 100.962)), ('L', ' 142 ', 'PRO', None, (131.18599999999998, 213.059, 106.26399999999997))]
data['rota'] = [('A', '  58 ', 'PHE', 0.003263916896026635, (196.168, 143.768, 193.681)), ('A', '  63 ', 'THR', 0.09717212465556208, (195.847, 132.593, 185.46)), ('A', ' 214 ', 'ARG', 0.0, (203.544, 127.48300000000003, 194.984)), ('A', ' 403 ', 'ARG', 0.10505557726316471, (177.22, 182.958, 141.972)), ('A', ' 418 ', 'ILE', 0.26018888366069737, (174.353, 190.638, 149.072)), ('A', ' 424 ', 'LYS', 0.2588624799191215, (170.413, 187.846, 155.755)), ('A', ' 460 ', 'ASN', 0.11386020610840329, (170.414, 196.445, 156.014)), ('A', ' 463 ', 'PRO', 0.06713255922843187, (167.923, 188.286, 160.223)), ('A', ' 546 ', 'LEU', 0.005374522161876023, (164.08799999999994, 166.04, 175.231)), ('A', ' 702 ', 'GLU', 0.05116437108173992, (170.976, 159.306, 234.473)), ('A', ' 716 ', 'THR', 0.21203983327312098, (183.118, 167.903, 253.729)), ('A', ' 726 ', 'ILE', 0.14963887530568748, (194.98599999999993, 175.05, 224.529)), ('A', ' 739 ', 'THR', 0.09197094566631393, (203.63899999999995, 188.026, 189.889)), ('A', ' 752 ', 'LEU', 0.06364602836077084, (199.37699999999995, 189.882, 179.595)), ('A', ' 878 ', 'LEU', 0.16502747996421072, (204.473, 183.173, 235.76)), ('A', ' 887 ', 'THR', 0.0791443051331458, (198.368, 192.962, 241.56099999999998)), ('A', ' 973 ', 'ILE', 0.19329410831264046, (197.622, 173.109, 175.573)), ('B', '  32 ', 'PHE', 0.020505868730691733, (141.047, 195.024, 185.79199999999994)), ('B', '  66 ', 'HIS', 0.05741483263982682, (128.016, 198.358, 170.038)), ('B', ' 303 ', 'LEU', 0.14747888071254253, (160.682, 189.495, 196.222)), ('B', ' 619 ', 'GLU', 0.28718639828475373, (163.949, 214.697, 188.847)), ('B', ' 675 ', 'GLN', 0.26754917968689396, (149.567, 205.362, 211.103)), ('B', '1094 ', 'VAL', 0.2315893520559574, (173.102, 203.52, 253.07299999999998)), ('H', '  33 ', 'TRP', 0.1398169710034348, (171.472, 201.861, 126.50799999999998)), ('H', '  37 ', 'VAL', 0.16957577198155577, (162.73699999999994, 199.067, 117.574)), ('H', '  97 ', 'ARG', 0.005906162946061595, (165.24, 194.37, 129.911)), ('H', ' 100C', 'TYR', 0.1549615419731296, (159.958, 200.62600000000003, 137.387)), ('H', ' 100D', 'TYR', 0.2126097937823757, (157.152, 197.989, 136.942)), ('H', ' 170 ', 'LEU', 0.2705332120639633, (153.213, 200.823, 93.63)), ('H', ' 200 ', 'HIS', 0.18298785115362343, (164.254, 214.239, 94.192)), ('L', '  21 ', 'ILE', 0.29463184139026266, (139.281, 203.809, 124.829)), ('L', '  23 ', 'CYS', 0.2424480458067831, (144.174, 198.388, 124.63099999999999)), ('L', '  49 ', 'TYR', 0.1659691494498481, (154.974, 207.74, 132.82999999999998)), ('L', ' 117 ', 'THR', 0.036269181850729824, (136.662, 214.079, 88.31)), ('L', ' 118 ', 'LEU', 0.054992561443340686, (139.695, 212.099, 86.963)), ('L', ' 194 ', 'CYS', 0.13952389872701204, (132.937, 209.005, 87.075)), ('L', ' 211 ', 'GLU', 0.021119332989497103, (143.283, 209.688, 76.646)), ('C', ' 112 ', 'SER', 0.29257599631199477, (221.079, 215.041, 152.139)), ('C', ' 130 ', 'VAL', 0.006632594232240463, (212.78699999999995, 218.891, 156.2)), ('C', ' 266 ', 'TYR', 0.04875286817269412, (223.816, 220.927, 178.7)), ('C', ' 303 ', 'LEU', 0.09065138458071872, (202.515, 204.27, 198.858)), ('C', ' 324 ', 'GLU', 0.04172656587581618, (224.46699999999996, 182.58, 180.888)), ('C', ' 709 ', 'ASN', 0.0528358760417042, (207.62899999999996, 183.917, 252.841)), ('C', ' 760 ', 'CYS', 0.11206149358808097, (174.093, 191.05000000000004, 189.859)), ('C', ' 790 ', 'LYS', 0.0, (169.63899999999995, 214.888, 231.31499999999997)), ('C', ' 804 ', 'GLN', 0.060019564803085325, (184.79199999999994, 218.374, 229.242)), ('C', '1081 ', 'ILE', 0.07840912227111634, (197.856, 185.31000000000006, 265.14)), ('C', '1082 ', 'CYS', 0.06763434069971568, (197.66099999999994, 183.21800000000005, 268.361))]
data['cbeta'] = [('A', ' 168 ', 'PHE', ' ', 0.30516540518635077, (211.296, 147.04900000000004, 162.154)), ('A', ' 195 ', 'LYS', ' ', 0.253983246530771, (201.783, 147.684, 178.91)), ('A', ' 536 ', 'ASN', ' ', 0.25070496217235727, (158.302, 151.438, 188.797)), ('A', ' 710 ', 'ASN', ' ', 0.26894135089856125, (163.733, 170.019, 255.23699999999997)), ('A', ' 762 ', 'GLN', ' ', 0.27357239594576493, (193.70599999999993, 194.205, 195.76599999999993)), ('A', '1084 ', 'ASP', ' ', 0.29394413174858836, (162.775, 184.57200000000006, 272.53599999999994)), ('B', ' 113 ', 'LYS', ' ', 0.2931749262482283, (146.717, 192.385, 145.511)), ('L', '  51 ', 'ASN', ' ', 0.3278040000724173, (150.965, 203.036, 135.12299999999996)), ('C', ' 617 ', 'CYS', ' ', 0.2841021107969018, (223.6, 187.985, 203.854))]
data['probe'] = [(' L  21  ILE HG22', ' L  22  SER  H  ', -0.603, (140.536, 201.738, 123.295)), (' C1081  ILE HD11', ' C1137  VAL HG23', -0.559, (195.184, 187.765, 268.299)), (' H 100H PHE  H  ', ' L  46  LEU HD22', -0.505, (158.285, 206.921, 127.583)), (' C1081  ILE HD11', ' C1137  VAL  CG2', -0.503, (194.474, 187.88, 268.029)), (' H 144  ASP  H  ', ' H 171  GLN  NE2', -0.485, (155.406, 203.785, 89.252)), (' L 119  PHE  CD1', ' L 136  LEU HD11', -0.482, (143.33, 213.236, 89.977)), (' B 189  LEU  HB3', ' B 210  ILE HD13', -0.441, (132.664, 184.488, 181.612)), (' A1029  MET  HE2', ' A1053  PRO  HB3', -0.437, (199.216, 182.629, 229.643)), (' C1029  MET  HE2', ' C1053  PRO  HB3', -0.426, (179.777, 204.457, 225.8)), (' A 877  LEU HD13', ' A1029  MET  SD ', -0.423, (200.337, 185.726, 229.656)), (' C1081  ILE  C  ', ' C1081  ILE HD12', -0.416, (196.763, 185.599, 267.249)), (' A 391  CYS  SG ', ' A 522  ALA  HB1', -0.416, (160.578, 167.413, 167.367)), (' A 394  ASN  H  ', ' A 516  GLU  HG3', -0.409, (161.16, 174.621, 164.558)), (' C1097  SER  HB2', ' C1102  TRP  CD2', -0.405, (202.812, 192.612, 263.211)), (' B1083  HIS  CG ', ' B1084  ASP  H  ', -0.404, (178.624, 210.327, 268.665)), (' H  47  TRP  CD1', ' L  96  TRP  HB2', -0.403, (159.253, 194.345, 122.944)), (' C 557  LYS  NZ ', ' C 575  ALA  HB2', -0.4, (217.687, 167.327, 192.017))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
