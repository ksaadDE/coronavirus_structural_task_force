# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('E', ' 146 ', 'PRO', None, (219.572, 139.794, 277.253))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A  46  SER  HA ', ' A 279  TYR  O  ', -0.655, (198.644, 235.957, 176.472)), (' C  46  SER  HA ', ' C 279  TYR  O  ', -0.639, (231.073, 183.647, 177.248)), (' B 105  ILE  HB ', ' B 239  GLN  HB2', -0.626, (169.8, 160.798, 208.583)), (' A  51  THR  O  ', ' A 274  THR  HA ', -0.617, (187.745, 228.035, 186.518)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.591, (163.187, 253.098, 199.8)), (' C 821  LEU HD11', ' C 939  SER  HB2', -0.588, (227.462, 184.197, 148.719)), (' C 201  PHE  HB3', ' C 229  LEU  HB2', -0.585, (235.438, 187.894, 206.253)), (' E 261  CYS  HB2', ' E 488  VAL  HB ', -0.576, (201.061, 147.792, 297.217)), (' B 821  LEU HD11', ' B 939  SER  HB3', -0.575, (172.058, 184.331, 147.939)), (' C 901  GLN HE21', ' C 905  ARG HH21', -0.559, (207.802, 185.378, 132.076)), (' E 260  GLY  HA3', ' E 612  PRO  HD3', -0.556, (197.684, 145.362, 300.154)), (' C  26  PRO  HB3', ' C  65  PHE  HE1', -0.554, (252.739, 205.456, 199.386)), (' E 152  MET  O  ', ' E 161  ARG  NH1', -0.547, (208.355, 138.155, 285.085)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.545, (181.175, 170.851, 177.723)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.542, (171.108, 216.895, 148.62)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.541, (200.434, 231.816, 147.519)), (' C 659  SER  HB3', ' C 698  SER  HB3', -0.54, (229.347, 217.255, 149.757)), (' C 393  THR  HB ', ' C 522  ALA  HA ', -0.539, (203.669, 232.373, 204.573)), (' A 699  LEU HD11', ' B 869  MET  HB3', -0.539, (174.238, 208.749, 150.502)), (' C 418  ILE  HA ', ' C 422  ASN HD22', -0.536, (185.112, 215.038, 221.238)), (' A 143  VAL  HA ', ' A 154  GLU  HA ', -0.536, (182.353, 264.482, 207.834)), (' A 278  LYS  HE3', ' A 287  ASP  HB2', -0.533, (191.027, 237.521, 176.193)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.532, (261.337, 205.956, 203.429)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.525, (234.012, 199.255, 178.099)), (' C 105  ILE  O  ', ' C 238  PHE  HA ', -0.525, (243.943, 196.945, 208.363)), (' E 321  PRO  O  ', ' E 380  GLN  NE2', -0.524, (206.716, 158.17, 252.954)), (' B 125  ASN HD22', ' B 171  VAL HG13', -0.518, (154.139, 172.175, 209.127)), (' C 762  GLN  OE1', ' C 765  ARG  NH1', -0.517, (189.519, 189.064, 174.89)), (' A 916  LEU HD22', ' A 923  ILE HD13', -0.517, (199.697, 219.079, 123.497)), (' C 323  THR  OG1', ' C 324  GLU  OE1', -0.515, (227.627, 227.57, 192.253)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.514, (171.021, 143.548, 201.746)), (' A 142  GLY  HA3', ' A 156  GLU  HB3', -0.513, (178.632, 262.197, 210.469)), (' E 297  MET  HB3', ' E 302  TRP  HB2', -0.513, (204.983, 137.151, 256.287)), (' B 360  ASN  ND2', ' C 169  GLU  O  ', -0.51, (236.008, 180.206, 213.498)), (' B 156  GLU  OE2', ' B 158  ARG  NH1', -0.507, (157.57, 150.952, 215.058)), (' A 127  VAL HG21', ' A1302  NAG  H62', -0.507, (191.673, 254.108, 212.089)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.507, (166.778, 251.413, 198.852)), (' E 455  MET  HG2', ' E 480  MET  HE2', -0.505, (205.296, 159.14, 292.153)), (' B 192  PHE  HA ', ' B 204  TYR  O  ', -0.504, (166.673, 168.949, 195.168)), (' A 103  GLY  HA3', ' A 119  ILE  O  ', -0.504, (185.047, 250.148, 206.107)), (' E 201  ASP  OD2', ' E 219  ARG  NH1', -0.504, (212.995, 177.294, 283.792)), (' E  20  THR HG23', ' E  23  GLU  H  ', -0.503, (219.782, 192.898, 260.513)), (' B1048  HIS  HA ', ' B1066  THR HG22', -0.502, (190.195, 190.673, 135.229)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.501, (183.46, 231.153, 177.601)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.501, (257.869, 203.792, 202.249)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.499, (177.859, 230.038, 177.799)), (' C 599  THR  HB ', ' C 608  VAL HG12', -0.499, (233.942, 205.481, 168.71)), (' A 983  ARG  O  ', ' C 383  SER  N  ', -0.497, (207.821, 216.12, 206.986)), (' A  93  ALA  HB3', ' A 266  TYR  HB2', -0.493, (178.254, 246.685, 191.497)), (' A1035  GLY  HA3', ' C1040  VAL HG21', -0.49, (207.803, 206.104, 135.356)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.489, (184.028, 166.723, 178.033)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.487, (213.41, 192.512, 104.87)), (' A 192  PHE  HA ', ' A 204  TYR  O  ', -0.487, (187.534, 244.15, 194.749)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.486, (155.872, 168.533, 212.08)), (' B 500  THR  HG1', ' E  41  TYR  HH ', -0.484, (226.496, 159.593, 253.085)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.484, (236.144, 204.594, 178.761)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.483, (186.587, 168.161, 168.542)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.483, (195.831, 233.261, 190.432)), (' B 128  ILE HD13', ' B 170  TYR  HD2', -0.479, (161.129, 174.269, 206.348)), (' A 195  LYS  O  ', ' A 201  PHE  HA ', -0.477, (188.658, 236.564, 202.803)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.475, (178.517, 227.121, 167.977)), (' A 985  ASP  N  ', ' A 985  ASP  OD1', -0.474, (209.361, 211.2, 206.171)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.473, (197.217, 222.413, 142.891)), (' B 396  TYR  HB2', ' B 514  SER  HB3', -0.473, (225.577, 181.52, 226.02)), (' C 125  ASN HD22', ' C 171  VAL HG13', -0.473, (245.034, 177.669, 211.087)), (' A1143  PRO  HA ', ' A1146  ASP  HB2', -0.473, (193.506, 204.964, 90.863)), (' B 518  LEU HD23', ' B 520  ALA  H  ', -0.472, (225.648, 190.956, 214.424)), (' B  94  SER  HB2', ' B 190  ARG  HB2', -0.472, (162.496, 161.641, 194.642)), (' A 144  TYR  N  ', ' A 153  MET  O  ', -0.471, (181.123, 267.101, 207.755)), (' B 412  PRO  HB3', ' B 427  ASP  HA ', -0.471, (214.341, 185.885, 233.068)), (' E 555  PHE  HA ', ' E 558  LEU  HB2', -0.47, (203.41, 166.147, 257.754)), (' B 360  ASN HD22', ' C 168  PHE  HE1', -0.469, (235.016, 180.862, 212.433)), (' A  48  LEU  HB3', ' A 276  LEU HD11', -0.468, (192.697, 229.118, 178.063)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.468, (171.009, 147.616, 200.691)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.464, (194.369, 246.786, 206.558)), (' B 176  LEU HD22', ' B 190  ARG  HG2', -0.464, (160.084, 164.093, 196.336)), (' E 535  HIS  NE2', ' E 538  PRO  O  ', -0.464, (186.247, 153.47, 264.169)), (' C  93  ALA  HB3', ' C 266  TYR  HB2', -0.464, (248.955, 196.049, 193.619)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.464, (229.958, 177.952, 231.033)), (' A  36  VAL HG13', ' A 222  ALA  HA ', -0.464, (189.174, 240.811, 185.59)), (' A  46  SER  CA ', ' A 279  TYR  O  ', -0.462, (199.405, 235.422, 176.75)), (' B 724  THR HG23', ' B 934  ILE HD12', -0.461, (181.931, 186.432, 143.655)), (' C 276  LEU  HB3', ' C 289  VAL  HB ', -0.461, (232.134, 195.845, 179.205)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.461, (199.66, 213.536, 103.817)), (' C 193  VAL HG23', ' C 223  LEU HD22', -0.461, (240.508, 191.121, 194.074)), (' C  36  VAL HG23', ' C 222  ALA  HA ', -0.46, (239.505, 189.511, 186.813)), (' E 156  LEU HD11', ' E 281  LEU HD21', -0.459, (200.989, 133.39, 284.682)), (' B 193  VAL  HB ', ' B 204  TYR  HB2', -0.457, (169.717, 171.151, 194.655)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.456, (168.779, 248.049, 191.252)), (' A1040  VAL HG21', ' B1035  GLY  HA3', -0.454, (190.919, 202.928, 135.286)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.454, (256.287, 197.349, 194.567)), (' A 994  ASP  OD2', ' C 995  ARG  NH2', -0.453, (206.032, 201.056, 194.479)), (' C  46  SER  CA ', ' C 279  TYR  O  ', -0.452, (230.682, 182.962, 177.337)), (' B1074  ASN  OD1', ' C 895  GLN  NE2', -0.451, (202.081, 172.939, 124.184)), (' B 358  ILE  HB ', ' B 395  VAL  HB ', -0.45, (227.919, 177.647, 220.855)), (' B  48  LEU  HB3', ' B 276  LEU HD11', -0.449, (177.043, 179.958, 177.521)), (' B 669  GLY  HA2', ' B 697  MET  HE3', -0.449, (202.449, 171.967, 156.951)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.448, (213.149, 195.793, 135.909)), (' B  40  ASP  N  ', ' B  40  ASP  OD1', -0.448, (171.873, 181.009, 190.243)), (' C 434  ILE  O  ', ' C 510  VAL  HA ', -0.447, (199.149, 217.995, 222.954)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.447, (199.97, 220.203, 135.88)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.445, (188.526, 191.004, 104.562)), (' B 756  TYR  OH ', ' B 994  ASP  OD1', -0.444, (194.797, 205.674, 192.41)), (' B 164  ASN  OD1', ' B 165  ASN  N  ', -0.441, (168.547, 169.987, 223.41)), (' A1107  ARG HH22', ' B 907  ASN HD22', -0.44, (190.97, 198.903, 120.588)), (' C 127  VAL HG22', ' C 171  VAL HG22', -0.437, (244.826, 179.9, 212.814)), (' C 724  THR HG23', ' C 934  ILE HD12', -0.436, (221.186, 190.611, 143.936)), (' E 494  ASP  N  ', ' E 494  ASP  OD1', -0.435, (217.058, 150.517, 302.421)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.434, (217.734, 189.301, 136.834)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.434, (197.079, 212.893, 135.225)), (' A  52  GLN  HB2', ' A 274  THR HG22', -0.433, (187.465, 224.759, 187.358)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.432, (182.474, 189.722, 136.459)), (' B 566  GLY  N  ', ' B 575  ALA  O  ', -0.432, (223.482, 177.05, 187.867)), (' C 105  ILE  HB ', ' C 239  GLN  HB3', -0.431, (247.172, 197.083, 209.787)), (' B 139  PRO  HB3', ' B 159  VAL  HA ', -0.43, (164.534, 157.961, 213.642)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.429, (167.147, 152.217, 192.847)), (' C 934  ILE  HA ', ' C 934  ILE HD13', -0.429, (224.02, 190.289, 143.452)), (' C  31  SER  HB3', ' C  60  SER  H  ', -0.428, (243.904, 201.394, 187.294)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.428, (179.896, 183.985, 143.059)), (' E 252  TYR  HB3', ' E 255  TYR  HD2', -0.428, (201.203, 134.577, 294.364)), (' A 156  GLU  OE2', ' A 158  ARG  NH1', -0.427, (175.266, 261.276, 213.666)), (' B 521  PRO  HB3', ' C 200  TYR  HE1', -0.427, (225.933, 187.015, 207.351)), (' A  89  GLY  HA3', ' A 270  LEU HD12', -0.426, (183.03, 234.955, 197.007)), (' A 229  LEU  HG ', ' A 231  ILE HG23', -0.426, (191.887, 239.733, 207.874)), (' E 442  GLN  O  ', ' E 446  ILE  HB ', -0.426, (197.558, 151.156, 275.661)), (' E 524  GLN  HB3', ' E 574  VAL HG11', -0.425, (194.958, 165.839, 268.92)), (' B  97  LYS  HG2', ' B 186  PHE  HD1', -0.423, (157.839, 152.938, 192.381)), (' C 555  SER  HB3', ' C 586  ASP  HB2', -0.422, (214.395, 236.397, 184.466)), (' B 189  LEU  HB3', ' B 208  THR  HB ', -0.421, (161.309, 163.25, 187.795)), (' A1074  ASN  OD1', ' B 895  GLN  NE2', -0.421, (176.153, 211.179, 123.089)), (' B 336  CYS  HA ', ' B 337  PRO  HD3', -0.42, (231.838, 172.544, 217.129)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.42, (201.378, 213.007, 222.697)), (' E 307  ILE HG23', ' E 369  PHE  HD1', -0.419, (205.677, 144.22, 258.168)), (' B 598  ILE HG23', ' B 664  ILE HG21', -0.418, (191.47, 170.649, 163.999)), (' C 720  ILE HG13', ' C 923  ILE HG23', -0.418, (219.713, 190.462, 128.656)), (' B 398  ASP  OD2', ' B 423  TYR  OH ', -0.418, (225.242, 181.097, 231.64)), (' B1029  MET  HB2', ' B1029  MET  HE2', -0.417, (186.132, 200.957, 145.999)), (' C  64  TRP  HH2', ' C 214  ARG  HG2', -0.417, (258.678, 199.41, 189.84)), (' C  48  LEU  HB3', ' C 276  LEU HD11', -0.417, (228.307, 191.612, 178.103)), (' E 183  TYR  OH ', ' E 509  ASP  OD1', -0.416, (220.138, 163.763, 283.695)), (' A 189  LEU  HB3', ' A 208  THR  HB ', -0.416, (185.922, 251.483, 187.009)), (' B 175  PHE  O  ', ' B 207  HIS  NE2', -0.415, (157.553, 168.213, 195.595)), (' B  27  ALA  HB3', ' B  64  TRP  HB3', -0.415, (172.755, 150.854, 192.717)), (' B 426  PRO  HG2', ' B 429  PHE  HB2', -0.415, (218.258, 185.139, 230.396)), (' C 360  ASN  H  ', ' C 523  THR  HB ', -0.414, (204.947, 235.5, 209.624)), (' A 720  ILE HG12', ' A 926  GLN HE21', -0.414, (195.938, 221.744, 128.483)), (' A 102  ARG  HA ', ' A 102  ARG  HD2', -0.414, (184.44, 255.742, 202.466)), (' C 756  TYR  OH ', ' C 994  ASP  OD1', -0.413, (196.803, 194.258, 192.695)), (' B 327  VAL HG12', ' B 542  ASN  HB3', -0.413, (214.869, 172.409, 199.638)), (' C  39  PRO  HG2', ' C  51  THR HG21', -0.413, (229.886, 191.103, 188.303)), (' B 907  ASN HD21', ' B 913  GLN  HG3', -0.413, (189.773, 196.56, 119.412)), (' C 191  GLU  O  ', ' C 205  SER  HA ', -0.411, (243.473, 187.809, 195.282)), (' B 139  PRO  HA ', ' B 158  ARG  O  ', -0.411, (163.536, 156.033, 213.734)), (' B 722  VAL  HA ', ' B1064  HIS  O  ', -0.41, (184.703, 188.137, 138.032)), (' B 790  LYS  HB3', ' B 790  LYS  HE2', -0.41, (168.883, 206.275, 137.097)), (' C 866  THR  H  ', ' C 869  MET  HE3', -0.409, (205.93, 173.821, 155.816)), (' C 885  GLY  HA2', ' C 901  GLN  NE2', -0.409, (207.458, 183.713, 131.437)), (' A1086  LYS  HB2', ' A1086  LYS  HE2', -0.408, (186.307, 193.106, 102.841)), (' A  97  LYS  HG2', ' A 186  PHE  HD1', -0.406, (178.643, 259.461, 191.275)), (' A 540  ASN  OD1', ' A 549  THR  OG1', -0.406, (170.825, 206.482, 191.363)), (' A 598  ILE HG23', ' A 664  ILE HG21', -0.406, (178.633, 221.623, 163.06)), (' B 411  ALA  HB3', ' B 414  GLN  HG3', -0.406, (214.312, 179.552, 238.417)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.406, (232.236, 203.419, 162.125)), (' E 610  TRP  HE3', ' E 614  ALA  HB3', -0.406, (204.286, 145.299, 305.782)), (' B 126  VAL HG23', ' B 174  PRO  HA ', -0.406, (155.37, 168.808, 202.687)), (' A 226  LEU  HG ', ' A 227  VAL HG23', -0.405, (194.1, 245.851, 199.607)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.405, (181.403, 226.191, 161.201)), (' C 123  ALA  HB3', ' C1302  NAG  H82', -0.404, (255.171, 178.283, 211.767)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.404, (199.542, 166.106, 150.084)), (' B  25  PRO  HA ', ' B  26  PRO  HD3', -0.404, (176.663, 146.581, 199.58)), (' C1141  LEU HD23', ' C1145  LEU HD22', -0.403, (203.078, 202.891, 93.15)), (' B 376  THR  O  ', ' B 434  ILE  HA ', -0.403, (218.89, 169.652, 231.265)), (' B  38  TYR  HB2', ' B 225  PRO  HD3', -0.402, (167.523, 177.426, 190.83)), (' C  52  GLN  OE1', ' C 274  THR  OG1', -0.402, (226.707, 200.362, 186.973)), (' E 168  TRP  CD1', ' E 270  MET  HE2', -0.402, (216.955, 144.972, 288.152)), (' A 231  ILE HD12', ' A 233  ILE HG12', -0.401, (187.7, 236.687, 209.812)), (' C 159  VAL HG23', ' C 160  TYR  CD2', -0.401, (249.979, 190.002, 217.111)), (' B 384  PRO  HA ', ' B 387  LEU HD12', -0.401, (215.885, 172.645, 221.622)), (' B 914  ASN  ND2', ' B1111  GLU  OE2', -0.401, (189.189, 187.492, 114.992)), (' B 310  LYS  HG3', ' B 600  PRO  HA ', -0.401, (186.128, 170.825, 161.611)), (' B1040  VAL HG21', ' C1035  GLY  HA3', -0.4, (201.652, 189.774, 135.227)), (' C 722  VAL  HA ', ' C1064  HIS  O  ', -0.4, (217.923, 192.195, 138.442))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
