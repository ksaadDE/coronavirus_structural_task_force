
from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

dict_residue_prop_objects = {}
class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)
        ##save property list frame object
        dict_residue_prop_objects[data_key] = list_obj
# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "clusters","rama", "rota", "cbeta", "probe", "smoc", "cablam",
               "jpred"]
  data_titles = { "clusters"  : "Outlier residue clusters",
                  "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes",
                  "smoc"  : "Local density fit (SMOC)",
                  "cablam": "Ca geometry (CaBLAM)",
                  "jpred":"SS prediction"}
  data_names = { "clusters"  : ["Chain","Residue","Cluster","Outlier types"],
                 "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"],
                 "smoc" : ["Chain", "Residue", "Name", "Score"],
                 "cablam" : ["Chain", "Residue","Name","recommendation","DSSP"],
                 "jpred" : ["Chain", "Residue","Name","predicted SS","current SS"]}
  if (gobject is not None) :
    data_types = {  "clusters" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_INT, gobject.TYPE_STRING,
                             gobject.TYPE_PYOBJECT],
                    "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "smoc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cablam" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT],
                   "jpred" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT]}
  else :
    data_types = dict([ (s, []) for s in ["clusters","rama","rota","cbeta","probe","smoc",
                                          "cablam","jpred"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    ##adding a column type for checkbox (bool) before atom coordinate
    if gobject is not None:
        column_types = column_types[:-1]+[bool]+[column_types[-1]]
    
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    ##add a cell for checkbox
    cell1 = gtk.CellRendererToggle()
    cell1.connect ("toggled", self.on_selected_toggled)
    column = gtk.TreeViewColumn('Dealt with',cell1,active=i+1)
    self.listctrl.append_column(column)
    #column.set_sort_column_id(i+1)
    #column.pack_start(cell1, True)
    
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      row = row[:-1] + (False,)+(row[-1],)
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()
  ##check box toggle
  def on_selected_toggled(self,renderer,path):
    if path is not None:
      model = self.listmodel.get_model()
      it = model.get_iter(path)
      #set toggle
      model[it][-2] = not model[it][-2]
      #set checkboxes for same residues in other lists
      try:
        chain = model[it][0]
        residue = model[it][1]
        for data_key in dict_residue_prop_objects:
          prop_obj = dict_residue_prop_objects[data_key]
          for row in prop_obj.listmodel.get_model():
            if data_key == 'probe':
              atom1_split = row[0].split()
              atom2_split = row[1].split()
              if atom1_split[0] == chain and atom1_split[1] == residue:
                row[-2] = model[it][-2]
              elif atom2_split[0] == chain and atom2_split[1] == residue:
                row[-2] = model[it][-2]
            elif row[0] == chain and row[1] == residue:
              row[-2] = model[it][-2]
      except IndexError: pass

  def check_chain_residue(self,chain,residue):
      pass
  
def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data
data = {}
data['rama'] = []
data['cbeta'] = []
data['jpred'] = []
data['rota'] = [('A', ' 299 ', 'VAL', 0.2376136949410973, (132.945, 150.28800000000007, 113.501)), ('A', ' 915 ', 'TYR', 0.0015968834391481492, (93.40199999999997, 113.22700000000003, 136.496)), ('A', ' 928 ', 'HIS', 0.026918845656558575, (94.721, 116.94500000000001, 118.42500000000001)), ('C', '  14 ', 'LEU', 0.12343117109492724, (122.02300000000005, 116.73000000000005, 155.435))]
data['clusters'] = [('A', '124', 1, 'side-chain clash', (150.112, 123.542, 108.172)), ('A', '128', 1, 'side-chain clash', (150.112, 123.542, 108.172)), ('A', '132', 1, 'side-chain clash', (141.101, 126.196, 110.735)), ('A', '164', 1, 'backbone clash', (139.094, 118.984, 127.621)), ('A', '166', 1, 'backbone clash', (139.094, 118.984, 127.621)), ('A', '167', 1, 'cablam Outlier', (140.3, 117.7, 131.0)), ('A', '196', 1, 'side-chain clash\nsmoc Outlier', (152.993, 135.122, 95.626)), ('A', '203', 1, 'side-chain clash', (152.648, 131.146, 92.011)), ('A', '204', 1, 'side-chain clash', (146.833, 132.413, 95.001)), ('A', '205', 1, 'side-chain clash', (150.79, 133.893, 100.229)), ('A', '207', 1, 'side-chain clash', (149.48, 127.949, 107.001)), ('A', '222', 1, 'side-chain clash', (152.648, 131.146, 92.011)), ('A', '232', 1, 'side-chain clash', (152.993, 135.122, 95.626)), ('A', '233', 1, 'side-chain clash', (146.833, 132.413, 95.001)), ('A', '234', 1, 'side-chain clash', (150.79, 133.893, 100.229)), ('A', '235', 1, 'backbone clash\nDihedral angle:CA:CB:CG:OD1', (143.622, 133.7, 100.798)), ('A', '236', 1, 'side-chain clash\nbackbone clash', (143.48, 131.853, 99.686)), ('A', '238', 1, 'side-chain clash', (143.981, 132.644, 108.444)), ('A', '239', 1, 'side-chain clash\nsmoc Outlier', (139.92, 132.75, 103.628)), ('A', '240', 1, 'smoc Outlier', (143.339, 127.49100000000001, 106.545)), ('A', '241', 1, 'side-chain clash', (149.48, 127.949, 107.001)), ('A', '242', 1, 'side-chain clash', (143.981, 132.644, 108.444)), ('A', '243', 1, 'side-chain clash\nsmoc Outlier', (141.101, 126.196, 110.735)), ('A', '305', 1, 'backbone clash', (130.183, 134.383, 103.952)), ('A', '457', 1, 'side-chain clash', (138.31, 123.036, 134.554)), ('A', '458', 1, 'side-chain clash', (138.31, 123.036, 134.554)), ('A', '467', 1, 'side-chain clash', (139.92, 132.75, 103.628)), ('A', '468', 1, 'side-chain clash', (136.361, 123.427, 106.762)), ('A', '470', 1, 'side-chain clash\nbackbone clash', (130.183, 134.383, 103.952)), ('A', '694', 1, 'side-chain clash', (131.093, 126.107, 117.588)), ('A', '698', 1, 'side-chain clash', (131.093, 126.107, 117.588)), ('A', '705', 1, 'side-chain clash', (136.361, 123.427, 106.762)), ('A', '729', 1, 'Dihedral angle:CB:CG:CD:OE1', (136.201, 127.96600000000001, 94.773)), ('A', '731', 1, 'side-chain clash', (134.791, 130.128, 101.232)), ('A', '732', 1, 'side-chain clash', (142.372, 129.24, 99.26)), ('A', '786', 1, 'side-chain clash', (131.858, 122.591, 120.223)), ('A', '789', 1, 'smoc Outlier', (137.086, 125.57799999999999, 116.319)), ('A', '790', 1, 'side-chain clash', (131.858, 122.591, 120.223)), ('A', '792', 1, 'smoc Outlier', (136.701, 121.04400000000001, 123.233)), ('A', '191', 2, 'side-chain clash', (116.513, 136.525, 138.675)), ('A', '358', 2, 'side-chain clash', (123.288, 160.351, 118.854)), ('A', '376', 2, 'smoc Outlier', (123.31700000000001, 149.184, 135.029)), ('A', '377', 2, 'Dihedral angle:CA:CB:CG:OD1', (126.666, 150.62, 133.914)), ('A', '495', 2, 'smoc Outlier', (107.377, 139.342, 127.712)), ('A', '499', 2, 'Dihedral angle:CA:CB:CG:OD1\ncablam Outlier', (108.05199999999999, 137.819, 138.631)), ('A', '500', 2, 'smoc Outlier', (111.771, 137.101, 138.208)), ('A', '502', 2, 'side-chain clash\ncablam Outlier', (115.768, 143.752, 135.06)), ('A', '503', 2, 'side-chain clash', (120.26, 142.338, 135.333)), ('A', '505', 2, 'cablam Outlier', (122.2, 146.4, 140.0)), ('A', '506', 2, 'side-chain clash', (115.927, 147.321, 139.043)), ('A', '507', 2, 'side-chain clash', (121.351, 140.163, 141.268)), ('A', '509', 2, 'cablam Outlier', (114.4, 146.9, 145.0)), ('A', '512', 2, 'smoc Outlier', (111.255, 142.76, 136.45600000000002)), ('A', '515', 2, 'side-chain clash', (115.927, 147.321, 139.043)), ('A', '516', 2, 'side-chain clash\nsmoc Outlier', (112.075, 142.021, 129.091)), ('A', '533', 2, 'side-chain clash\nDihedral angle:CD:NE:CZ:NH1', (123.798, 154.185, 118.87799999999999)), ('A', '534', 2, 'side-chain clash', (123.976, 157.44, 122.677)), ('A', '536', 2, 'smoc Outlier', (125.633, 149.70299999999997, 127.366)), ('A', '541', 2, 'side-chain clash', (121.351, 140.163, 141.268)), ('A', '561', 2, 'side-chain clash', (120.26, 142.338, 135.333)), ('A', '562', 2, 'side-chain clash', (116.615, 142.769, 131.532)), ('A', '565', 2, 'side-chain clash', (116.615, 142.769, 131.532)), ('A', '569', 2, 'side-chain clash\nsmoc Outlier', (112.075, 142.021, 129.091)), ('A', '653', 2, 'side-chain clash', (124.763, 148.471, 120.772)), ('A', '657', 2, 'side-chain clash', (124.763, 148.471, 120.772)), ('A', '93', 2, 'side-chain clash', (116.513, 136.525, 138.675)), ('A', '589', 3, 'side-chain clash', (114.855, 124.637, 121.006)), ('A', '601', 3, 'side-chain clash', (112.554, 115.69, 112.661)), ('A', '605', 3, 'side-chain clash', (114.976, 117.619, 112.76)), ('A', '615', 3, 'side-chain clash', (125.577, 114.461, 113.447)), ('A', '617', 3, 'side-chain clash\nsmoc Outlier', (125.577, 114.461, 113.447)), ('A', '618', 3, 'side-chain clash\nDihedral angle:CA:CB:CG:OD1', (125.899, 117.202, 122.99700000000001)), ('A', '691', 3, 'backbone clash', (122.283, 125.739, 121.922)), ('A', '699', 3, 'side-chain clash', (127.586, 119.792, 112.297)), ('A', '703', 3, 'side-chain clash\nsmoc Outlier', (127.651, 120.108, 108.306)), ('A', '749', 3, 'side-chain clash', (123.916, 118.503, 103.197)), ('A', '750', 3, 'Dihedral angle:CD:NE:CZ:NH1', (118.87199999999999, 119.819, 103.73700000000001)), ('A', '754', 3, 'side-chain clash', (119.498, 115.416, 111.141)), ('A', '756', 3, 'side-chain clash\nsmoc Outlier', (114.976, 117.619, 112.76)), ('A', '758', 3, 'side-chain clash\nDihedral angle:CA:C', (117.121, 122.513, 119.93100000000001)), ('A', '759', 3, 'backbone clash\nside-chain clash\nDihedral angle:N:CA\nDihedral angle:CA:C', (119.70100000000001, 124.90100000000001, 121.321)), ('A', '760', 3, 'side-chain clash\nDihedral angle:N:CA', (122.359, 122.34700000000001, 122.098)), ('A', '762', 3, 'side-chain clash', (119.083, 118.572, 116.512)), ('A', '764', 3, 'side-chain clash', (119.498, 115.416, 111.141)), ('A', '766', 3, 'side-chain clash\nsmoc Outlier', (124.676, 110.461, 111.939)), ('A', '779', 3, 'side-chain clash', (129.798, 112.641, 115.035)), ('A', '782', 3, 'side-chain clash', (127.586, 119.792, 112.297)), ('A', '798', 3, 'side-chain clash', (127.605, 115.12, 124.956)), ('A', '43', 4, 'side-chain clash', (104.678, 122.523, 122.384)), ('A', '593', 4, 'side-chain clash', (108.433, 115.616, 122.466)), ('A', '594', 4, 'smoc Outlier', (102.94800000000001, 116.476, 123.212)), ('A', '598', 4, 'side-chain clash', (108.433, 115.616, 122.466)), ('A', '724', 4, 'side-chain clash', (104.678, 122.523, 122.384)), ('A', '815', 4, 'smoc Outlier', (113.87499999999999, 111.96900000000001, 126.0)), ('A', '817', 4, 'side-chain clash', (111.792, 110.673, 120.218)), ('A', '829', 4, 'side-chain clash', (103.651, 109.905, 123.397)), ('A', '830', 4, 'side-chain clash\nsmoc Outlier', (105.74, 111.13, 123.745)), ('A', '925', 4, 'side-chain clash', (103.651, 109.905, 123.397)), ('A', '610', 5, 'Dihedral angle:CB:CG:CD:OE1', (118.46600000000001, 108.081, 101.262)), ('A', '611', 5, 'side-chain clash', (123.389, 104.606, 103.78)), ('A', '613', 5, 'side-chain clash', (123.33, 104.45, 106.767)), ('A', '720', 5, 'side-chain clash', (129.799, 112.986, 97.165)), ('A', '752', 5, 'side-chain clash', (123.237, 113.627, 98.21)), ('A', '767', 5, 'side-chain clash', (125.171, 110.766, 102.428)), ('A', '768', 5, 'side-chain clash', (123.389, 104.606, 103.78)), ('A', '770', 5, 'side-chain clash', (125.171, 110.766, 102.428)), ('A', '775', 5, 'side-chain clash', (127.7, 110.763, 98.667)), ('A', '755', 6, 'side-chain clash', (112.884, 117.554, 137.209)), ('A', '836', 6, 'side-chain clash', (112.558, 115.215, 138.143)), ('A', '837', 6, 'side-chain clash\nsmoc Outlier', (106.494, 112.734, 137.19)), ('A', '840', 6, 'side-chain clash', (112.558, 115.215, 138.143)), ('A', '862', 6, 'side-chain clash', (106.494, 112.734, 137.19)), ('A', '864', 6, 'smoc Outlier', (102.063, 113.489, 132.065)), ('A', '866', 6, 'side-chain clash', (107.65, 109.918, 134.861)), ('A', '879', 6, 'Dihedral angle:CA:CB:CG:OD1', (105.303, 100.396, 136.437)), ('A', '881', 6, 'smoc Outlier', (103.422, 105.474, 135.536)), ('A', '409', 7, 'backbone clash', (126.231, 124.888, 149.439)), ('A', '445', 7, 'side-chain clash', (130.209, 123.187, 148.161)), ('A', '448', 7, 'smoc Outlier', (130.24299999999997, 126.34700000000001, 144.319)), ('A', '452', 7, 'smoc Outlier', (131.791, 126.649, 138.584)), ('A', '543', 7, 'side-chain clash', (124.784, 130.554, 138.578)), ('A', '556', 7, 'side-chain clash', (127.57, 128.073, 135.883)), ('A', '584', 7, 'side-chain clash', (121.255, 124.32, 153.497)), ('A', '604', 7, 'side-chain clash', (121.255, 124.32, 153.497)), ('A', '624', 7, 'side-chain clash', (127.57, 128.073, 135.883)), ('A', '251', 8, 'side-chain clash', (150.792, 137.747, 120.662)), ('A', '254', 8, 'side-chain clash\nsmoc Outlier', (155.201, 141.893, 116.516)), ('A', '284', 8, 'Dihedral angle:CA:CB:CG:OD1', (151.161, 144.612, 108.166)), ('A', '285', 8, 'side-chain clash\nDihedral angle:CD:NE:CZ:NH1', (153.82700000000003, 142.437, 109.81)), ('A', '286', 8, 'side-chain clash', (155.077, 138.876, 115.884)), ('A', '287', 8, 'smoc Outlier', (149.226, 139.542, 106.887)), ('A', '316', 8, 'side-chain clash', (147.797, 137.579, 116.209)), ('A', '320', 8, 'side-chain clash', (150.792, 137.747, 120.662)), ('A', '658', 9, 'side-chain clash\nsmoc Outlier', (126.097, 140.087, 124.082)), ('A', '662', 9, 'side-chain clash', (126.097, 140.087, 124.082)), ('A', '676', 9, 'side-chain clash', (126.999, 136.042, 129.565)), ('A', '681', 9, 'side-chain clash', (126.999, 136.042, 129.565)), ('A', '682', 9, 'smoc Outlier', (122.826, 131.344, 130.32600000000002)), ('A', '684', 9, 'side-chain clash\nDihedral angle:CA:CB:CG:OD1', (120.59, 135.694, 127.693)), ('A', '687', 9, 'side-chain clash', (121.401, 133.377, 125.88)), ('A', '274', 10, 'cablam Outlier', (143.2, 152.2, 121.5)), ('A', '275', 10, 'cablam Outlier', (146.0, 149.8, 120.3)), ('A', '277', 10, 'Dihedral angle:CB:CG:CD:OE1', (148.41, 151.41299999999998, 115.633)), ('A', '326', 10, 'cablam CA Geom Outlier', (139.9, 145.8, 127.2)), ('A', '349', 10, 'Dihedral angle:CD:NE:CZ:NH1', (138.64399999999998, 141.899, 121.99400000000001)), ('A', '351', 10, 'cablam Outlier', (135.1, 144.6, 117.7)), ('A', '688', 10, 'side-chain clash', (141.596, 151.598, 127.924)), ('A', '441', 11, 'smoc Outlier', (119.356, 117.52199999999999, 144.409)), ('A', '444', 11, 'backbone clash', (127.554, 119.594, 142.427)), ('A', '549', 11, 'side-chain clash', (122.884, 119.072, 139.029)), ('A', '552', 11, 'backbone clash', (127.554, 119.594, 142.427)), ('A', '553', 11, 'side-chain clash\nDihedral angle:CD:NE:CZ:NH1', (128.318, 119.953, 139.039)), ('A', '555', 11, 'side-chain clash\nsmoc Outlier', (122.884, 119.072, 139.029)), ('A', '626', 12, 'side-chain clash', (127.127, 132.491, 121.203)), ('A', '628', 12, 'side-chain clash', (132.302, 135.175, 122.366)), ('A', '631', 12, 'side-chain clash', (127.127, 132.491, 121.203)), ('A', '663', 12, 'side-chain clash', (132.302, 135.175, 122.366)), ('A', '677', 12, 'cablam Outlier', (136.5, 135.5, 129.2)), ('A', '678', 12, 'cablam CA Geom Outlier', (133.8, 134.6, 126.7)), ('A', '522', 13, 'Dihedral angle:CB:CG:CD:OE1', (108.34, 156.059, 125.232)), ('A', '524', 13, 'side-chain clash', (111.93, 149.429, 125.424)), ('A', '525', 13, 'smoc Outlier', (111.67599999999999, 153.195, 122.988)), ('A', '528', 13, 'side-chain clash', (118.12, 150.207, 122.931)), ('A', '531', 13, 'side-chain clash', (118.12, 150.207, 122.931)), ('A', '570', 13, 'side-chain clash', (111.93, 149.429, 125.424)), ('A', '303', 14, 'side-chain clash', (130.466, 144.731, 105.139)), ('A', '304', 14, 'Dihedral angle:CA:CB:CG:OD1', (128.23399999999998, 141.79399999999998, 108.392)), ('A', '308', 14, 'smoc Outlier', (133.127, 138.873, 110.857)), ('A', '636', 14, 'side-chain clash', (128.022, 142.233, 114.013)), ('A', '651', 14, 'smoc Outlier', (123.164, 146.80800000000002, 113.488)), ('A', '655', 14, 'side-chain clash', (128.022, 142.233, 114.013)), ('A', '398', 15, 'cablam Outlier', (137.9, 143.5, 138.7)), ('A', '666', 15, 'side-chain clash', (133.756, 143.003, 133.764)), ('A', '668', 15, 'side-chain clash', (128.727, 141.699, 139.481)), ('A', '673', 15, 'smoc Outlier', (132.841, 141.286, 140.17899999999997)), ('A', '674', 15, 'smoc Outlier', (134.788, 139.259, 137.6)), ('A', '693', 16, 'side-chain clash', (144.582, 146.191, 144.409)), ('A', '852', 16, 'side-chain clash', (143.91, 147.615, 141.251)), ('A', '855', 16, 'side-chain clash', (143.91, 147.615, 141.251)), ('A', '856', 16, 'side-chain clash', (144.614, 139.959, 146.019)), ('A', '860', 16, 'side-chain clash\nsmoc Outlier', (144.614, 139.959, 146.019)), ('A', '151', 17, 'cablam Outlier', (156.9, 120.4, 122.6)), ('A', '152', 17, 'smoc Outlier', (156.393, 117.357, 124.829)), ('A', '153', 17, 'side-chain clash', (157.367, 115.023, 126.455)), ('A', '171', 17, 'side-chain clash\nsmoc Outlier', (150.048, 119.751, 124.615)), ('A', '174', 17, 'side-chain clash', (150.048, 119.751, 124.615)), ('A', '200', 18, 'side-chain clash', (157.811, 141.445, 89.023)), ('A', '226', 18, 'side-chain clash', (154.107, 144.03, 86.746)), ('A', '227', 18, 'side-chain clash', (157.811, 141.445, 89.023)), ('A', '229', 18, 'side-chain clash', (154.107, 144.03, 86.746)), ('A', '230', 18, 'side-chain clash', (155.791, 141.549, 90.428)), ('A', '540', 19, 'side-chain clash\nsmoc Outlier', (125.104, 157.951, 140.737)), ('A', '602', 19, 'side-chain clash', (125.365, 154.521, 141.066)), ('A', '665', 19, 'side-chain clash', (125.104, 157.951, 140.737)), ('A', '809', 19, 'side-chain clash', (125.365, 154.521, 141.066)), ('A', '428', 20, 'smoc Outlier', (110.36, 99.30199999999999, 143.80800000000002)), ('A', '433', 20, 'backbone clash', (116.038, 99.266, 140.211)), ('A', '435', 20, 'backbone clash', (116.038, 99.266, 140.211)), ('A', '436', 20, 'smoc Outlier', (117.44100000000002, 102.759, 140.078)), ('A', '573', 21, 'cablam Outlier', (111.3, 139.2, 119.8)), ('A', '576', 21, 'side-chain clash', (115.587, 132.928, 119.397)), ('A', '686', 21, 'side-chain clash', (116.672, 136.801, 121.457)), ('A', '689', 21, 'side-chain clash', (115.587, 132.928, 119.397)), ('A', '844', 22, 'side-chain clash', (108.042, 120.153, 147.325)), ('A', '846', 22, 'cablam Outlier', (111.2, 123.4, 148.8)), ('A', '847', 22, 'side-chain clash\ncablam Outlier', (108.054, 124.794, 146.543)), ('A', '848', 22, 'side-chain clash', (108.042, 120.153, 147.325)), ('A', '476', 23, 'side-chain clash', (123.74, 126.632, 110.129)), ('A', '480', 23, 'side-chain clash', (120.189, 130.386, 114.085)), ('A', '696', 23, 'side-chain clash\nsmoc Outlier', (123.74, 126.632, 110.129)), ('A', '330', 24, 'side-chain clash', (133.211, 154.397, 130.547)), ('A', '343', 24, 'side-chain clash', (133.211, 154.397, 130.547)), ('A', '344', 24, 'cablam Outlier', (131.6, 156.1, 127.2)), ('A', '419', 25, 'smoc Outlier', (106.14, 109.0, 147.95600000000002)), ('A', '421', 25, 'side-chain clash', (108.303, 103.677, 150.645)), ('A', '424', 25, 'side-chain clash', (108.303, 103.677, 150.645)), ('A', '822', 26, 'cablam Outlier', (98.8, 104.0, 119.5)), ('A', '823', 26, 'cablam Outlier', (95.6, 104.0, 117.5)), ('A', '825', 26, 'side-chain clash', (98.224, 103.682, 114.808)), ('A', '337', 27, 'cablam Outlier\nsmoc Outlier', (127.5, 169.1, 140.7)), ('A', '338', 27, 'smoc Outlier', (129.221, 166.03, 142.056)), ('A', '212', 28, 'side-chain clash\nbackbone clash', (110.952, 110.572, 155.913)), ('A', '622', 28, 'side-chain clash', (112.29, 107.644, 155.867)), ('A', '131', 29, 'side-chain clash', (144.769, 123.21, 116.536)), ('A', '247', 29, 'side-chain clash\nsmoc Outlier', (144.769, 123.21, 116.536)), ('A', '489', 30, 'side-chain clash', (106.852, 147.476, 117.589)), ('A', '492', 30, 'side-chain clash', (106.852, 147.476, 117.589)), ('A', '122', 31, 'side-chain clash', (155.099, 110.867, 111.187)), ('A', '144', 31, 'side-chain clash', (155.099, 110.867, 111.187)), ('A', '268', 32, 'side-chain clash', (149.777, 145.314, 126.64)), ('A', '322', 32, 'side-chain clash', (149.777, 145.314, 126.64)), ('A', '365', 33, 'smoc Outlier', (118.282, 166.954, 135.436)), ('A', '366', 33, 'smoc Outlier', (118.64999999999999, 163.503, 133.90800000000002)), ('A', '35', 34, 'side-chain clash', (150.923, 113.953, 97.192)), ('A', '50', 34, 'side-chain clash', (150.923, 113.953, 97.192)), ('A', '369', 35, 'side-chain clash', (118.783, 154.841, 130.941)), ('A', '373', 35, 'side-chain clash', (118.783, 154.841, 130.941)), ('A', '315', 36, 'side-chain clash\nsmoc Outlier', (137.086, 135.47, 117.062)), ('A', '629', 36, 'side-chain clash', (137.086, 135.47, 117.062)), ('A', '392', 37, 'side-chain clash', (135.289, 132.828, 145.178)), ('A', '450', 37, 'side-chain clash', (135.289, 132.828, 145.178)), ('A', '885', 38, 'side-chain clash', (96.468, 105.33, 134.053)), ('A', '918', 38, 'side-chain clash', (96.468, 105.33, 134.053)), ('A', '616', 39, 'side-chain clash', (122.184, 111.78, 119.049)), ('A', '800', 39, 'side-chain clash', (122.184, 111.78, 119.049)), ('A', '437', 40, 'side-chain clash', (115.956, 110.042, 145.183)), ('A', '843', 40, 'side-chain clash', (115.956, 110.042, 145.183)), ('A', '884', 41, 'side-chain clash', (100.107, 109.601, 140.629)), ('A', '888', 41, 'side-chain clash\nsmoc Outlier', (100.107, 109.601, 140.629)), ('A', '606', 42, 'side-chain clash', (115.489, 109.307, 111.683)), ('A', '614', 42, 'side-chain clash', (115.489, 109.307, 111.683)), ('A', '483', 43, 'cablam Outlier', (111.5, 133.0, 109.5)), ('A', '484', 43, 'Dihedral angle:CA:CB:CG:OD1', (111.037, 136.756, 109.71000000000001)), ('B', '100', 1, 'cablam Outlier', (140.8, 160.4, 146.6)), ('B', '101', 1, 'Dihedral angle:CA:CB:CG:OD1\nsmoc Outlier', (142.625, 162.599, 143.985)), ('B', '103', 1, 'side-chain clash', (142.061, 158.453, 138.379)), ('B', '106', 1, 'side-chain clash\nsmoc Outlier', (142.061, 158.453, 138.379)), ('B', '87', 1, 'smoc Outlier', (118.114, 153.967, 143.045)), ('B', '90', 1, 'side-chain clash', (123.329, 154.722, 147.482)), ('B', '93', 1, 'side-chain clash', (123.329, 154.722, 147.482)), ('B', '94', 1, 'smoc Outlier', (128.13899999999998, 154.379, 147.316)), ('B', '96', 1, 'Dihedral angle:CD:NE:CZ:NH1', (131.399, 158.815, 148.344)), ('B', '97', 1, 'cablam Outlier', (134.3, 156.4, 148.7)), ('B', '98', 1, 'smoc Outlier', (135.445, 156.92200000000003, 145.141)), ('B', '132', 2, 'side-chain clash', (140.83, 130.855, 150.075)), ('B', '134', 2, 'Dihedral angle:CA:CB:CG:OD1', (145.138, 127.46100000000001, 150.108)), ('B', '138', 2, 'side-chain clash', (146.973, 131.579, 150.56)), ('B', '142', 2, 'smoc Outlier', (150.69, 137.323, 150.39800000000002)), ('B', '143', 2, 'Dihedral angle:CA:CB:CG:OD1', (154.01399999999998, 136.43800000000002, 152.017)), ('B', '183', 2, 'side-chain clash\ncablam CA Geom Outlier', (140.83, 130.855, 150.075)), ('B', '174', 3, 'smoc Outlier', (152.16, 125.18599999999999, 156.71399999999997)), ('B', '175', 3, 'backbone clash', (150.595, 124.429, 161.36)), ('B', '176', 3, 'side-chain clash\nbackbone clash', (150.595, 124.429, 161.36)), ('B', '178', 3, 'cablam Outlier\nsmoc Outlier', (144.1, 122.0, 157.7)), ('B', '179', 3, 'side-chain clash', (145.419, 123.779, 162.756)), ('B', '122', 4, 'side-chain clash', (143.91, 147.615, 141.251)), ('B', '128', 4, 'side-chain clash\nsmoc Outlier', (144.582, 146.191, 144.409)), ('B', '129', 4, 'backbone clash', (142.052, 141.243, 150.383)), ('B', '130', 4, 'side-chain clash', (144.614, 139.959, 146.019)), ('B', '186', 4, 'backbone clash', (142.052, 141.243, 150.383)), ('B', '161', 5, 'side-chain clash\ncablam Outlier', (140.416, 132.4, 158.997)), ('B', '162', 5, 'cablam Outlier\nsmoc Outlier', (135.2, 132.8, 155.2)), ('B', '167', 5, 'side-chain clash\nsmoc Outlier', (140.416, 132.4, 158.997)), ('C', '11', 1, 'side-chain clash', (119.973, 111.029, 150.171)), ('C', '4', 1, 'smoc Outlier', (118.036, 103.886, 148.02700000000002)), ('C', '6', 1, 'side-chain clash', (120.235, 105.818, 153.816)), ('C', '7', 1, 'side-chain clash', (119.973, 111.029, 150.171)), ('C', '8', 1, 'smoc Outlier', (117.44900000000001, 108.929, 151.141)), ('C', '12', 2, 'side-chain clash\nsmoc Outlier', (126.73, 103.226, 160.128)), ('C', '49', 2, 'side-chain clash', (128.61, 104.119, 157.436)), ('C', '53', 2, 'side-chain clash', (128.61, 104.119, 157.436)), ('C', '9', 2, 'side-chain clash', (126.73, 103.226, 160.128)), ('C', '14', 3, 'Rotamer', (122.02300000000005, 116.73000000000005, 155.435)), ('C', '17', 3, 'side-chain clash', (125.131, 119.309, 160.363)), ('C', '22', 3, 'side-chain clash', (125.131, 119.309, 160.363)), ('C', '59', 3, 'smoc Outlier', (125.588, 114.798, 163.004)), ('C', '19', 4, 'side-chain clash', (117.073, 125.959, 160.218)), ('C', '21', 4, 'side-chain clash', (117.073, 125.959, 160.218)), ('C', '18', 5, 'side-chain clash', (121.255, 124.32, 153.497)), ('C', '32', 5, 'smoc Outlier', (129.251, 117.008, 154.976)), ('D', '87', 1, 'side-chain clash\nsmoc Outlier', (112.212, 114.677, 159.165)), ('D', '90', 1, 'side-chain clash\nsmoc Outlier', (112.212, 114.677, 159.165)), ('D', '91', 1, 'smoc Outlier', (115.582, 110.62199999999999, 160.20999999999998)), ('D', '94', 1, 'side-chain clash', (112.29, 107.644, 155.867)), ('D', '100', 2, 'side-chain clash', (123.57, 100.711, 160.303)), ('D', '103', 2, 'side-chain clash', (123.57, 100.711, 160.303)), ('D', '96', 2, 'Dihedral angle:CD:NE:CZ:NH1', (116.087, 102.436, 162.80100000000002)), ('D', '99', 2, 'Dihedral angle:CA:CB:CG:OD1', (119.096, 98.39, 161.117)), ('D', '98', 3, 'side-chain clash\nsmoc Outlier', (119.986, 105.066, 156.051)), ('D', '109', 3, 'smoc Outlier', (126.874, 105.256, 171.593)), ('Q', '16', 1, 'side-chain clash', (105.552, 122.52, 137.236)), ('Q', '17', 1, 'side-chain clash', (108.616, 119.768, 134.433)), ('Q', '18', 1, 'side-chain clash\nbackbone clash', (112.884, 117.554, 137.209)), ('Q', '10', 2, 'side-chain clash', (89.554, 129.95, 122.847)), ('Q', '9', 2, 'side-chain clash', (89.554, 129.95, 122.847)), ('Q', '13', 3, 'side-chain clash', (98.66, 134.459, 137.625)), ('Q', '14', 3, 'side-chain clash', (98.66, 134.459, 137.625)), ('T', '14', 1, 'side-chain clash', (104.678, 122.523, 122.384)), ('T', '15', 1, 'side-chain clash', (102.433, 118.984, 126.478)), ('T', '16', 1, 'backbone clash', (96.746, 119.682, 126.082)), ('T', '10', 2, 'side-chain clash', (116.513, 136.525, 138.675))]
data['probe'] = [(' D 100  ASN HD22', ' D 103  LEU HD13', -0.706, (125.191, 101.311, 158.871)), (' A 618  ASP  HB3', ' A 798  LYS  HE2', -0.69, (126.363, 115.719, 124.982)), (' A 502  ALA  HB1', ' A 562  ILE  HB ', -0.683, (115.768, 143.752, 135.06)), (' A 549  SER  HB3', ' A 555  ARG  NH1', -0.678, (122.084, 119.05, 138.214)), (' A 543  ASN  O  ', ' A 556  THR  OG1', -0.663, (124.784, 130.554, 138.578)), (' A 553  ARG  HE ', ' A 555  ARG  HG2', -0.659, (125.864, 122.108, 135.602)), (' A 684  ASP  HB3', ' A 687  THR  HB ', -0.65, (121.401, 133.377, 125.88)), (' A 358  ASP  HB2', ' A 534  ASN HD21', -0.643, (123.976, 157.44, 122.677)), (' A 830  PRO  HD2', ' A 925  TYR  HE2', -0.636, (105.74, 111.13, 123.745)), (" Q  16    A  H2'", ' Q  17    G  H8 ', -0.634, (105.889, 122.213, 137.969)), (' A 720  VAL HG11', ' A 775  LEU HD13', -0.632, (129.799, 112.986, 97.165)), (' A 549  SER  CB ', ' A 555  ARG  NH1', -0.63, (122.608, 118.632, 137.943)), (' A 254  GLU  OE2', ' A 286  TYR  OH ', -0.626, (155.077, 138.876, 115.884)), (' A 409  THR  OG1', ' A 444  GLN  O  ', -0.624, (126.231, 124.888, 149.439)), (' A 615  MET  HB2', ' A 766  PHE  HE1', -0.617, (124.676, 110.461, 111.939)), (' A 149  TYR  HE2', ' A 212  LEU HD13', -0.615, (157.059, 120.263, 111.805)), (' A 507  ASN  ND2', ' A 541  GLN  OE1', -0.614, (121.351, 140.163, 141.268)), (' A 556  THR HG22', ' A 624  ARG HH22', -0.613, (127.57, 128.073, 135.883)), (' A 699  ALA  O  ', ' A 703  ASN  ND2', -0.61, (127.651, 120.108, 108.306)), (' A 553  ARG  HE ', ' A 555  ARG  CG ', -0.606, (125.803, 121.594, 135.579)), (' A 330  VAL HG11', ' B 117  LEU HD13', -0.602, (134.931, 152.01, 134.426)), (' A 468  GLN  OE1', ' A 705  ASN  ND2', -0.6, (136.361, 123.427, 106.762)), (' A 549  SER  HB3', ' A 555  ARG  CZ ', -0.598, (121.886, 119.588, 137.801)), (' A 602  LEU HD11', ' A 809  PRO  HD3', -0.596, (114.452, 110.1, 116.137)), (' A 924  MET  HE1', " T  16    U  O5'", -0.596, (97.961, 118.893, 128.836)), (' A 380  MET  HE2', ' B  91  LEU HD12', -0.594, (125.365, 154.521, 141.066)), (' A 444  GLN  NE2', ' A 552  ASN  O  ', -0.587, (127.554, 119.594, 142.427)), (' A 837  ILE HG12', ' A 866  ALA  HB2', -0.579, (107.65, 109.918, 134.861)), (' A 516  TYR  OH ', ' A 569  ARG  NH1', -0.578, (112.075, 142.021, 129.091)), (' A 653  TYR  O  ', ' A 657  ASN  ND2', -0.574, (124.763, 148.471, 120.772)), (" Q  16    A  H2'", ' Q  17    G  C8 ', -0.573, (105.552, 122.52, 137.236)), (' A 613  HIS  CD2', ' A 768  SER  HB2', -0.571, (123.33, 104.45, 106.767)), (' A 330  VAL  HA ', ' A 343  SER  HA ', -0.568, (133.211, 154.397, 130.547)), (' A 636  LEU HD21', ' A 655  LEU HD22', -0.566, (128.022, 142.233, 114.013)), (' A 852  GLY  HA2', ' A 855  MET  HE3', -0.559, (100.76, 118.457, 149.717)), (' A 387  LEU HD22', ' B 122  LEU  HA ', -0.559, (143.91, 147.615, 141.251)), (' A 844  VAL HG11', ' A 848  VAL  H  ', -0.558, (108.042, 120.153, 147.325)), (' B 176  ASN  OD1', ' B 179  ASN  ND2', -0.555, (145.419, 123.779, 162.756)), (' A 631  ARG  NH2', ' A 684  ASP  OD1', -0.554, (123.262, 136.02, 123.535)), (' B 132  ILE HG21', ' B 138  TYR  HB2', -0.554, (146.973, 131.579, 150.56)), (' A 786  LEU HD22', ' A 790  ASN HD22', -0.553, (131.858, 122.591, 120.223)), (' A 691  ASN  HB3', ' A 759  SER  O  ', -0.552, (122.283, 125.739, 121.922)), (' A 606  TYR  HE1', ' A 614  LEU HD11', -0.549, (115.468, 109.418, 111.937)), (' A 837  ILE  O  ', ' A 884  TYR  OH ', -0.549, (108.924, 110.546, 139.665)), (' A 122  TYR  OH ', ' A 144  GLU  OE1', -0.543, (155.099, 110.867, 111.187)), (' A 540  THR HG23', ' A 665  GLU  HG3', -0.54, (126.825, 140.416, 131.396)), (' A 340  PHE  HE2', ' B  91  LEU  HG ', -0.54, (125.104, 157.951, 140.737)), (' A 211  ASP  OD2', ' A 212  LEU  N  ', -0.537, (158.513, 122.768, 107.117)), (' A 595  TYR  OH ', ' T  16    U  OP1', -0.536, (96.746, 119.682, 126.082)), (' A 417  LYS  HD2', ' D  90  MET  HE3', -0.535, (110.952, 110.572, 155.913)), (' A 421  ASP  HA ', ' A 424  VAL HG12', -0.532, (108.303, 103.677, 150.645)), (' C  19  GLN  O  ', ' C  21  ARG  NH1', -0.53, (118.769, 125.141, 160.858)), (' A 676  LYS  NZ ', ' A 681  SER  OG ', -0.53, (126.999, 136.042, 129.565)), (' C   9  THR HG21', ' D  98  LEU HD11', -0.523, (119.986, 105.066, 156.051)), (' A 626  MET  HE2', ' A 631  ARG  HD3', -0.522, (127.127, 132.491, 121.203)), (' A 457  ARG  NH2', ' A 458  TYR  OH ', -0.52, (138.31, 123.036, 134.554)), (' A 207  LEU HD21', ' A 241  LEU HD12', -0.519, (149.48, 127.949, 107.001)), (' A 200  GLY  HA2', ' A 230  GLY  H  ', -0.517, (155.791, 141.549, 90.428)), (' A 124  MET  O  ', ' A 128  VAL HG23', -0.516, (150.112, 123.542, 108.172)), (' A 132  ARG  HE ', ' A 243  PRO  HG2', -0.514, (141.101, 126.196, 110.735)), (' A 369  LYS  O  ', ' A 373  VAL HG23', -0.513, (118.783, 154.841, 130.941)), (' A 433  SER  OG ', ' A 435  VAL  O  ', -0.513, (116.038, 99.266, 140.211)), (' A 196  MET  SD ', ' A 232  PRO  HB3', -0.511, (152.993, 135.122, 95.626)), (' A 696  ILE HG23', ' A 755  MET  HE1', -0.505, (122.602, 123.499, 110.635)), (" Q  17    G  H2'", ' Q  18    C  C6 ', -0.504, (108.616, 119.768, 134.433)), (' B 129  MET  HA ', ' B 186  VAL  O  ', -0.499, (142.052, 141.243, 150.383)), (' A 836  ARG  NH2', ' Q  18    C  OP1', -0.498, (112.884, 117.554, 137.209)), (' A 611  ASN  HB3', ' A 768  SER  HB3', -0.498, (123.389, 104.606, 103.78)), (' A 153  ASP  N  ', ' A 153  ASP  OD1', -0.494, (157.367, 115.023, 126.455)), (' A 576  LEU HD11', ' A 686  THR HG22', -0.493, (116.672, 136.801, 121.457)), (' C  17  LEU HD22', ' C  22  VAL HG21', -0.492, (125.131, 119.309, 160.363)), (' A 239  SER  OG ', ' A 467  ARG  HG2', -0.487, (139.92, 132.75, 103.628)), (' A 770  TYR  CD1', ' A 775  LEU HD12', -0.482, (127.7, 110.763, 98.667)), (' A 254  GLU  OE1', ' A 285  ARG  NH2', -0.481, (155.201, 141.893, 116.516)), (' A 238  TYR  O  ', ' A 242  MET  HG3', -0.479, (143.981, 132.644, 108.444)), (' D  87  MET  HA ', ' D  90  MET  HG2', -0.473, (112.212, 114.677, 159.165)), (' A 503  GLY  HA3', ' A 561  SER  HA ', -0.473, (120.26, 142.338, 135.333)), (' A 528  PHE  HA ', ' A 531  THR HG22', -0.473, (118.12, 150.207, 122.931)), (' A 622  CYS  SG ', ' A 760  ASP  OD2', -0.473, (125.899, 124.247, 123.265)), (' A 417  LYS  HE2', ' D  94  MET  HE2', -0.472, (112.29, 107.644, 155.867)), (' A 524  GLN  HB3', ' A 570  GLN HE22', -0.471, (111.93, 149.429, 125.424)), (' A 200  GLY  HA3', ' A 227  PRO  HA ', -0.468, (157.811, 141.445, 89.023)), (' A 615  MET  HE3', ' A 617  TRP  HZ3', -0.467, (125.577, 114.461, 113.447)), (' C  49  PHE  O  ', ' C  53  VAL HG13', -0.466, (128.61, 104.119, 157.436)), (' A 226  THR  OG1', ' A 229  SER  OG ', -0.465, (154.107, 144.03, 86.746)), (' A 164  ASP  OD2', ' A 166  VAL  N  ', -0.464, (139.094, 118.984, 127.621)), (' A 752  HIS  CE1', ' A 770  TYR  HE2', -0.464, (123.237, 113.627, 98.21)), (' A 825  ASP  N  ', ' A 825  ASP  OD1', -0.464, (98.224, 103.682, 114.808)), (' A 668  MET  HB2', ' A 668  MET  HE3', -0.464, (128.727, 141.699, 139.481)), (' A 584  GLY  HA2', ' A 604  THR HG21', -0.463, (109.587, 120.04, 110.016)), (' B  90  MET  HA ', ' B  93  THR HG22', -0.462, (123.329, 154.722, 147.482)), (' A 411  LYS  HG3', ' C  18  GLN  HG3', -0.462, (121.255, 124.32, 153.497)), (' A 303  ASP  N  ', ' A 303  ASP  OD1', -0.461, (130.466, 144.731, 105.139)), (' A 885  LEU HD11', ' A 918  PRO  HB3', -0.459, (96.468, 105.33, 134.053)), (' A 606  TYR  CE1', ' A 614  LEU HD11', -0.458, (115.489, 109.307, 111.683)), (' A 476  VAL HG22', ' A 696  ILE HG22', -0.457, (123.74, 126.632, 110.129)), (' A 836  ARG  NH1', ' A 840  ALA  HB2', -0.457, (112.558, 115.215, 138.143)), (' B 132  ILE  O  ', ' B 183  PRO  HA ', -0.457, (140.83, 130.855, 150.075)), (' A 358  ASP  OD1', ' A 533  ARG  NH1', -0.456, (123.288, 160.351, 118.854)), (' A 171  ILE HD12', ' A 174  VAL  HB ', -0.455, (150.048, 119.751, 124.615)), (' A 205  LEU HD12', ' A 234  VAL HG12', -0.454, (150.79, 133.893, 100.229)), (' A 694  PHE  HE1', ' A 698  GLN HE21', -0.453, (131.093, 126.107, 117.588)), (' A 884  TYR  O  ', ' A 888  ILE HG13', -0.453, (100.107, 109.601, 140.629)), (' A 236  SER  HB3', ' A 732  TYR  HB3', -0.452, (142.372, 129.24, 99.26)), (' B 166  ILE  H  ', ' B 166  ILE HD12', -0.45, (137.128, 137.683, 163.801)), (' A 837  ILE HD11', ' A 862  LEU  HB3', -0.449, (106.494, 112.734, 137.19)), (" Q  13    A  H2'", ' Q  14    G  H8 ', -0.449, (98.66, 134.459, 137.625)), (' A 605  VAL HG21', ' A 756  MET  HE2', -0.447, (115.142, 115.409, 114.627)), (' A 798  LYS  HB3', ' A 798  LYS  HE2', -0.447, (127.605, 115.12, 124.956)), (' A 553  ARG  NE ', ' A 555  ARG  HG2', -0.446, (126.292, 121.505, 135.106)), (' A 756  MET  O  ', ' A 762  ALA  HA ', -0.445, (119.083, 118.572, 116.512)), (' A 601  MET  O  ', ' A 605  VAL HG23', -0.444, (112.554, 115.69, 112.661)), (' A 268  TRP  CD1', ' A 322  PRO  HD3', -0.444, (149.777, 145.314, 126.64)), (' C   6  VAL  HA ', ' C   9  THR HG22', -0.444, (120.235, 105.818, 153.816)), (' A 203  GLY  HA3', ' A 222  PHE  CD2', -0.443, (152.648, 131.146, 92.011)), (' A 480  PHE  CZ ', ' A 693  VAL HG22', -0.442, (120.189, 130.386, 114.085)), (' A 315  VAL HG21', ' A 629  MET  HG2', -0.44, (137.086, 135.47, 117.062)), (' C   9  THR  HA ', ' C  12  VAL HG12', -0.44, (117.406, 110.206, 155.222)), (' A 204  VAL HG12', ' A 233  VAL  HB ', -0.439, (146.833, 132.413, 95.001)), (' A 829  LEU  HG ', ' A 925  TYR  CD2', -0.436, (103.651, 109.905, 123.397)), (' A 658  GLU  O  ', ' A 662  VAL HG22', -0.432, (126.097, 140.087, 124.082)), (' A 251  LEU HD22', ' A 316  LEU  HG ', -0.43, (147.797, 137.579, 116.209)), (' A 779  ILE  HA ', ' A 779  ILE HD13', -0.429, (129.798, 112.641, 115.035)), (' B 103  LEU  H  ', ' B 103  LEU HD12', -0.429, (140.19, 159.237, 141.591)), (' B 161  ASP  HB3', ' B 167  VAL HG21', -0.425, (140.416, 132.4, 158.997)), (' A 699  ALA  HA ', ' A 782  PHE  CZ ', -0.425, (127.586, 119.792, 112.297)), (" Q   9    C  H2'", ' Q  10    C  C6 ', -0.424, (89.554, 129.95, 122.847)), (' A 688  ALA  HA ', ' A 759  SER  OG ', -0.424, (119.346, 127.446, 123.189)), (' A 273  TYR  HB3', ' B 116  PRO  HG3', -0.422, (141.596, 151.598, 127.924)), (' A 251  LEU  O  ', ' A 320  VAL HG12', -0.422, (150.792, 137.747, 120.662)), (' A  35  PHE  HE1', ' A  50  LYS  HG2', -0.422, (150.923, 113.953, 97.192)), (' A 131  LEU  HG ', ' A 247  LEU HD23', -0.421, (144.769, 123.21, 116.536)), (' A 549  SER  CB ', ' A 555  ARG HH12', -0.42, (122.884, 119.072, 139.029)), (' A 856  ILE  O  ', ' A 860  VAL HG23', -0.419, (98.48, 115.927, 140.079)), (' A 594  PHE  HD2', " T  15    U  H4'", -0.418, (102.433, 118.984, 126.478)), (' A 389  LEU  HB3', ' B 130  VAL HG22', -0.418, (144.614, 139.959, 146.019)), (' A 598  TRP  HE1', ' A 817  THR  CG2', -0.417, (111.792, 110.673, 120.218)), (' A 489  ASN  H  ', ' A 492  GLN HE21', -0.417, (106.852, 147.476, 117.589)), (' C  53  VAL HG12', ' D 103  LEU HD12', -0.416, (126.73, 103.226, 160.128)), (' A 731  LEU  HA ', ' A 731  LEU HD23', -0.416, (134.791, 130.128, 101.232)), (' A 689  TYR  O  ', ' A 693  VAL HG23', -0.416, (120.395, 130.69, 116.67)), (' B 175  ASP  OD1', ' B 176  ASN  N  ', -0.415, (150.595, 124.429, 161.36)), (' C   7  LYS  O  ', ' C  11  VAL HG23', -0.414, (119.973, 111.029, 150.171)), (' A 387  LEU HD23', ' B 128  LEU HD12', -0.414, (144.582, 146.191, 144.409)), (' A 576  LEU HD22', ' A 689  TYR  CD1', -0.413, (115.645, 133.348, 120.026)), (' A 767  ASN  HB3', ' A 770  TYR  HB2', -0.413, (125.171, 110.766, 102.428)), (' A 437  LEU HD21', ' A 843  PHE  CE2', -0.413, (115.956, 110.042, 145.183)), (' A 392  ARG  CZ ', ' A 450  ILE HG13', -0.413, (135.289, 132.828, 145.178)), (' C  19  GLN  NE2', ' C  21  ARG HH12', -0.412, (117.073, 125.959, 160.218)), (' A 470  LEU  HA ', ' A 470  LEU HD23', -0.411, (131.541, 134.728, 107.158)), (' A 593  LYS  HB2', ' A 598  TRP  HE3', -0.411, (108.433, 115.616, 122.466)), (' A  43  ALA  O  ', ' A 724  GLN  NE2', -0.411, (137.879, 118.561, 97.189)), (' A 592  SER  HB2', " T  14    C  H4'", -0.41, (104.678, 122.523, 122.384)), (' A 605  VAL  CG2', ' A 756  MET  HB2', -0.41, (114.778, 116.695, 113.303)), (' A 576  LEU HD22', ' A 689  TYR  CG ', -0.41, (115.587, 132.928, 119.397)), (' A 616  GLY  HA3', ' A 800  TRP  CE2', -0.409, (122.184, 111.78, 119.049)), (' A 847  ILE  HA ', ' A 847  ILE HD13', -0.409, (108.054, 124.794, 146.543)), (' A 749  LEU  HA ', ' A 749  LEU HD23', -0.408, (123.916, 118.503, 103.197)), (' A 305  ARG  NH1', ' A 470  LEU  O  ', -0.408, (130.183, 134.383, 103.952)), (' A 562  ILE  HA ', ' A 565  THR HG22', -0.406, (116.615, 142.769, 131.532)), (' A 628  ASN  HA ', ' A 663  LEU HD11', -0.406, (132.302, 135.175, 122.366)), (' A 445  ASP  N  ', ' A 445  ASP  OD1', -0.404, (130.209, 123.187, 148.161)), (' A 666  MET  HB3', ' A 666  MET  HE2', -0.404, (133.756, 143.003, 133.764)), (' A 506  PHE  HB3', ' A 515  TYR  CZ ', -0.403, (115.927, 147.321, 139.043)), (' A  93  CYS  SG ', ' A 191  GLN  HB3', -0.403, (161.42, 136.929, 102.716)), (' A 501  SER  HB2', " T  10    C  H5'", -0.402, (116.513, 136.525, 138.675)), (' B 103  LEU  HA ', ' B 106  ILE HG12', -0.402, (142.061, 158.453, 138.379)), (' B 153  LEU  HA ', ' B 153  LEU HD23', -0.401, (153.471, 146.316, 147.591)), (' D 100  ASN  HB3', ' D 103  LEU  HB2', -0.401, (123.57, 100.711, 160.303)), (' A 754  SER  O  ', ' A 764  VAL  HA ', -0.4, (119.498, 115.416, 111.141)), (' A 605  VAL HG22', ' A 756  MET  HB2', -0.4, (114.976, 117.619, 112.76)), (' A 235  ASP  OD2', ' A 236  SER  N  ', -0.4, (143.48, 131.853, 99.686)), (' A 589  ILE HG12', ' A 758  LEU  CD1', -0.4, (114.855, 124.637, 121.006))]
data['cablam'] = [('A', '151', 'CYS', 'check CA trace,carbonyls, peptide', 'bend\nTTSS-', (156.9, 120.4, 122.6)), ('A', '167', 'GLU', ' alpha helix', 'bend\nSSS-T', (140.3, 117.7, 131.0)), ('A', '218', 'ASP', 'check CA trace,carbonyls, peptide', ' \nB----', (158.0, 123.7, 94.6)), ('A', '274', 'ASP', 'check CA trace,carbonyls, peptide', ' \n----H', (143.2, 152.2, 121.5)), ('A', '275', 'PHE', 'check CA trace,carbonyls, peptide', ' \n---HH', (146.0, 149.8, 120.3)), ('A', '337', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (127.5, 169.1, 140.7)), ('A', '344', 'THR', 'check CA trace,carbonyls, peptide', 'strand\nEEEEE', (131.6, 156.1, 127.2)), ('A', '351', 'LEU', 'check CA trace,carbonyls, peptide', 'bend\nSSS-E', (135.1, 144.6, 117.7)), ('A', '398', 'VAL', 'check CA trace,carbonyls, peptide', 'strand\n-EEEE', (137.9, 143.5, 138.7)), ('A', '483', 'TYR', 'check CA trace,carbonyls, peptide', 'bend\n-SS--', (111.5, 133.0, 109.5)), ('A', '499', 'ASP', 'check CA trace,carbonyls, peptide', ' \n---S-', (108.1, 137.8, 138.6)), ('A', '502', 'ALA', 'check CA trace,carbonyls, peptide', ' \nS---T', (116.4, 141.8, 136.9)), ('A', '505', 'PRO', ' alpha helix', 'turn\n-TTTT', (122.2, 146.4, 140.0)), ('A', '509', 'TRP', 'check CA trace,carbonyls, peptide', 'turn\nTTT--', (114.4, 146.9, 145.0)), ('A', '573', 'GLN', ' alpha helix', 'turn\nHHTTH', (111.3, 139.2, 119.8)), ('A', '607', 'SER', 'check CA trace,carbonyls, peptide', 'turn\nHHTT-', (112.3, 113.5, 105.1)), ('A', '677', 'PRO', 'check CA trace,carbonyls, peptide', ' \nE--SS', (136.5, 135.5, 129.2)), ('A', '822', 'GLN', 'check CA trace,carbonyls, peptide', 'bend\nEESSS', (98.8, 104.0, 119.5)), ('A', '823', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nESSSS', (95.6, 104.0, 117.5)), ('A', '846', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSST', (111.2, 123.4, 148.8)), ('A', '847', 'ILE', 'check CA trace,carbonyls, peptide', 'bend\nSSSTT', (107.9, 123.2, 147.0)), ('A', '326', 'PHE', 'check CA trace', ' \nTS-EE', (139.9, 145.8, 127.2)), ('A', '678', 'GLY', 'check CA trace', 'bend\n--SS-', (133.8, 134.6, 126.7)), ('B', '97', 'LYS', ' three-ten', 'turn\nTSTT-', (134.3, 156.4, 148.7)), ('B', '100', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\nT-SSS', (140.8, 160.4, 146.6)), ('B', '161', 'ASP', 'check CA trace,carbonyls, peptide', ' \nEE-SS', (138.4, 132.8, 157.2)), ('B', '162', 'ALA', 'check CA trace,carbonyls, peptide', 'bend\nE-SSS', (135.2, 132.8, 155.2)), ('B', '178', 'PRO', ' three-ten', 'turn\nT-TTS', (144.1, 122.0, 157.7)), ('B', '183', 'PRO', 'check CA trace', 'bend\n-SSEE', (139.4, 130.7, 151.0))]
data['smoc'] = [('A', 84, u'GLU', 0.7866596609335045, (161.068, 126.52799999999999, 84.44200000000001)), ('A', 90, u'LEU', 0.6516287163784925, (163.707, 134.251, 94.432)), ('A', 95, u'ALA', 0.5284500299956656, (162.684, 132.27499999999998, 103.21600000000001)), ('A', 152, u'CYS', 0.6246738376832565, (156.393, 117.357, 124.829)), ('A', 171, u'ILE', 0.5282209951564878, (147.916, 120.426, 126.415)), ('A', 196, u'MET', 0.6657789804752733, (156.971, 137.83800000000002, 94.998)), ('A', 239, u'SER', 0.5147687117557243, (142.459, 131.13299999999998, 105.909)), ('A', 240, u'LEU', 0.44423583685152707, (143.339, 127.49100000000001, 106.545)), ('A', 243, u'PRO', 0.4961206119752307, (142.777, 128.35800000000003, 113.651)), ('A', 247, u'LEU', 0.4457118963289124, (145.283, 127.34400000000001, 119.085)), ('A', 254, u'GLU', 0.641083855625217, (154.297, 140.226, 120.742)), ('A', 261, u'LEU', 0.6652919367000207, (160.63899999999998, 135.164, 124.27799999999999)), ('A', 287, u'PHE', 0.6169636485253581, (149.226, 139.542, 106.887)), ('A', 308, u'LEU', 0.44552938665738, (133.127, 138.873, 110.857)), ('A', 315, u'VAL', 0.4891489522574286, (140.60299999999998, 137.963, 118.033)), ('A', 333, u'ILE', 0.6733722514982201, (131.099, 162.88700000000003, 133.64299999999997)), ('A', 337, u'GLY', 0.7669363627622403, (127.506, 169.13899999999998, 140.69299999999998)), ('A', 338, u'VAL', 0.7664713939144281, (129.221, 166.03, 142.056)), ('A', 365, u'ARG', 0.6929963963831239, (118.282, 166.954, 135.436)), ('A', 366, u'LEU', 0.7396075242691854, (118.64999999999999, 163.503, 133.90800000000002)), ('A', 376, u'ALA', 0.610079594281014, (123.31700000000001, 149.184, 135.029)), ('A', 419, u'PHE', 0.605904293928521, (106.14, 109.0, 147.95600000000002)), ('A', 428, u'PHE', 0.8075885148306604, (110.36, 99.30199999999999, 143.80800000000002)), ('A', 436, u'GLU', 0.6502887384756921, (117.44100000000002, 102.759, 140.078)), ('A', 441, u'PHE', 0.5408458954117503, (119.356, 117.52199999999999, 144.409)), ('A', 448, u'ALA', 0.5060422758365265, (130.24299999999997, 126.34700000000001, 144.319)), ('A', 452, u'ASP', 0.5603343045642314, (131.791, 126.649, 138.584)), ('A', 495, u'VAL', 0.7153300280053709, (107.377, 139.342, 127.712)), ('A', 500, u'LYS', 0.669878498752916, (111.771, 137.101, 138.208)), ('A', 512, u'ALA', 0.6933943563837376, (111.255, 142.76, 136.45600000000002)), ('A', 516, u'TYR', 0.7411634055556784, (108.312, 146.925, 133.259)), ('A', 525, u'ASP', 0.7687396778275344, (111.67599999999999, 153.195, 122.988)), ('A', 536, u'ILE', 0.6127219298412129, (125.633, 149.70299999999997, 127.366)), ('A', 540, u'THR', 0.48971200724757236, (125.061, 139.621, 134.672)), ('A', 555, u'ARG', 0.4634007239462241, (125.318, 124.44200000000001, 136.91899999999998)), ('A', 569, u'ARG', 0.6645025614010598, (113.636, 141.58700000000002, 123.492)), ('A', 594, u'PHE', 0.6848432723682017, (102.94800000000001, 116.476, 123.212)), ('A', 617, u'TRP', 0.5356682908488318, (125.826, 115.02199999999999, 119.909)), ('A', 651, u'ARG', 0.7020666417812237, (123.164, 146.80800000000002, 113.488)), ('A', 658, u'GLU', 0.4222101830985015, (125.339, 142.048, 122.561)), ('A', 673, u'LEU', 0.5917494643113173, (132.841, 141.286, 140.17899999999997)), ('A', 674, u'TYR', 0.5773478109828764, (134.788, 139.259, 137.6)), ('A', 682, u'SER', 0.47973086417777033, (122.826, 131.344, 130.32600000000002)), ('A', 696, u'ILE', 0.5075265689633734, (123.823, 124.79100000000001, 112.91900000000001)), ('A', 703, u'ASN', 0.5781106127205395, (129.847, 119.24300000000001, 106.459)), ('A', 707, u'LEU', 0.5868313860392457, (133.425, 117.583, 101.812)), ('A', 756, u'MET', 0.5890070170120908, (116.76100000000001, 118.95700000000001, 114.21000000000001)), ('A', 766, u'PHE', 0.5788675851606687, (122.20700000000001, 111.598, 107.136)), ('A', 789, u'GLN', 0.4370681882779625, (137.086, 125.57799999999999, 116.319)), ('A', 792, u'VAL', 0.48863800786129663, (136.701, 121.04400000000001, 123.233)), ('A', 815, u'GLN', 0.5745548900024827, (113.87499999999999, 111.96900000000001, 126.0)), ('A', 830, u'PRO', 0.6698832649663973, (109.326, 110.421, 124.2)), ('A', 837, u'ILE', 0.5279895356606225, (110.972, 111.049, 137.064)), ('A', 860, u'VAL', 0.5142271098362373, (99.87199999999999, 115.191, 137.62)), ('A', 864, u'ILE', 0.5768089282369371, (102.063, 113.489, 132.065)), ('A', 881, u'PHE', 0.6432855197834797, (103.422, 105.474, 135.536)), ('A', 888, u'ILE', 0.6062602006143376, (97.57499999999999, 110.56, 142.611)), ('B', 78, u'ASP', 0.7332005338244406, (103.41000000000001, 155.67299999999997, 141.848)), ('B', 87, u'MET', 0.7843393346560326, (118.114, 153.967, 143.045)), ('B', 94, u'MET', 0.6745107217160522, (128.13899999999998, 154.379, 147.316)), ('B', 98, u'LEU', 0.7172498501467489, (135.445, 156.92200000000003, 145.141)), ('B', 101, u'ASP', 0.6890742808134183, (142.625, 162.599, 143.985)), ('B', 106, u'ILE', 0.6443289018216177, (145.002, 159.055, 136.024)), ('B', 117, u'LEU', 0.6868787913391641, (137.437, 150.46800000000002, 133.68)), ('B', 128, u'LEU', 0.5914664566714957, (142.202, 145.515, 148.467)), ('B', 142, u'CYS', 0.6644991586185924, (150.69, 137.323, 150.39800000000002)), ('B', 162, u'ALA', 0.6559039625928001, (135.184, 132.80100000000002, 155.194)), ('B', 167, u'VAL', 0.6664019038649607, (142.444, 135.15200000000002, 161.701)), ('B', 174, u'MET', 0.8194302117747538, (152.16, 125.18599999999999, 156.71399999999997)), ('B', 178, u'PRO', 0.7917584864693867, (144.134, 122.046, 157.69)), ('C', 4, u'SER', 0.7202645843209139, (118.036, 103.886, 148.02700000000002)), ('C', 8, u'CYS', 0.562508703815548, (117.44900000000001, 108.929, 151.141)), ('C', 12, u'VAL', 0.6536338917341131, (117.225, 114.018, 154.92800000000003)), ('C', 32, u'CYS', 0.6124826548282701, (129.251, 117.008, 154.976)), ('C', 59, u'LEU', 0.7089482991139641, (125.588, 114.798, 163.004)), ('D', 87, u'MET', 0.7502101922223424, (112.724, 115.926, 160.15200000000002)), ('D', 90, u'MET', 0.6886528550517651, (111.77799999999999, 110.82, 160.222)), ('D', 91, u'LEU', 0.7748024419173384, (115.582, 110.62199999999999, 160.20999999999998)), ('D', 98, u'LEU', 0.7359132791050175, (118.06700000000001, 100.633, 158.191)), ('D', 109, u'ASN', 0.42225399079991566, (126.874, 105.256, 171.593))]
handle_read_draw_probe_dots_unformatted("/home/ccpem/agnel/gisaid/countries_seq/structure_data/emdb/EMD-30469/7ctt/Model_validation_1/validation_cootdata/molprobity_probe7ctt_0.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
