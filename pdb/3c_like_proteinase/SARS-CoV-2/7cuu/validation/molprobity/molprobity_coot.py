# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  67 ', 'LEU', 0.20956724045189437, (-3.9329999999999985, 2.8320000000000016, 7.438999999999995)), ('A', '  69 ', 'GLN', 0.0891777866623261, (-9.194, 2.9689999999999994, 3.306999999999998)), ('B', ' 153 ', 'ASP', 0.0019066533918103284, (-15.930999999999992, -8.236, -13.670999999999987)), ('B', ' 155 ', 'ASP', 0.1691133909708597, (-15.917999999999985, -2.8069999999999977, -12.051999999999992)), ('B', ' 171 ', 'VAL', 0.060698447109453435, (-37.272999999999996, -25.487999999999996, -14.148999999999987)), ('B', ' 286 ', 'LEU', 0.0, (-22.792999999999996, -36.033, -6.158999999999996))]
data['cbeta'] = [('A', ' 128 ', 'CYS', ' ', 0.27650182411859825, (-21.782, -20.08899999999999, 6.893999999999995))]
data['probe'] = [(' B 167  LEU  HB2', ' B 171  VAL HG22', -0.91, (-39.409, -25.964, -17.366)), (' A  67  LEU HD21', ' A 747  HOH  O  ', -0.839, (1.03, 3.798, 8.086)), (' A  49  MET  HE2', ' A 502  ALD H273', -0.81, (-1.455, -15.519, 12.989)), (' B  69  GLN  HG2', ' B  74  GLN  OE1', -0.787, (-44.594, 3.217, -8.231)), (' A 197  ASP  HA ', ' A 658  HOH  O  ', -0.765, (-20.195, -30.444, 14.409)), (' B 167  LEU  HB2', ' B 171  VAL  CG2', -0.697, (-38.783, -26.033, -17.4)), (' A 110  GLN  HG3', ' A 815  HOH  O  ', -0.681, (-29.292, -18.064, 16.201)), (' A 123  SER  HB3', ' B 304  THR HG22', -0.672, (-12.765, -10.928, -3.653)), (' A  67  LEU HD23', ' A 836  HOH  O  ', -0.657, (0.357, 0.856, 7.195)), (' A  67  LEU  CD2', ' A 836  HOH  O  ', -0.578, (0.345, 1.273, 7.899)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.574, (-26.671, -25.828, 12.632)), (' A 118  TYR  HB2', ' B 304  THR HG21', -0.563, (-10.381, -9.48, -2.684)), (' B 169  THR  HB ', ' B 171  VAL  CG1', -0.554, (-38.343, -28.718, -15.205)), (' A 155  ASP  HB3', ' A 306  GLN  OE1', -0.551, (-35.497, -1.276, 5.532)), (' A 123  SER  HB2', ' B 303  VAL  O  ', -0.523, (-13.721, -12.203, -5.193)), (' B  22  CYS  SG ', ' B  61  LYS  HE3', -0.519, (-51.109, -3.184, -19.256)), (' A 132  PRO  HG2', ' A 198 BTHR HG23', -0.518, (-23.907, -31.133, 15.681)), (' A 192  GLN  HB3', ' A 501  DMS  H13', -0.512, (-8.007, -24.974, 18.67)), (' B  45  THR HG23', ' B  48  ASP  OD2', -0.503, (-54.939, -8.807, -20.305)), (' B 222  ARG  HG2', ' B 800  HOH  O  ', -0.498, (-4.821, -46.937, -10.382)), (' B   5  LYS  HD3', ' B 613  HOH  O  ', -0.486, (-24.617, -23.569, -8.061)), (' B 233  VAL HG21', ' B 269  LYS  HG3', -0.485, (-15.551, -43.989, -18.442)), (' B   8  PHE  HE1', ' B 305  PHE  CZ ', -0.481, (-16.751, -11.513, -9.654)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.481, (-28.031, -13.243, -12.07)), (' B 155  ASP  N  ', ' B 155  ASP  OD1', -0.479, (-14.731, -2.87, -13.32)), (' B 169  THR  O  ', ' B 169  THR HG22', -0.476, (-38.217, -30.126, -12.291)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.475, (-6.809, -5.663, 16.273)), (' A 118  TYR  HB2', ' B 304  THR  CG2', -0.474, (-10.473, -9.727, -2.695)), (' B 131  ARG  NE ', ' B 197 AASP  OD2', -0.456, (-29.012, -29.015, -15.73)), (' B  40  ARG  HA ', ' B  87  LEU  HG ', -0.455, (-43.261, -5.837, -21.654)), (' B   8  PHE  HB3', ' B 152  ILE HD12', -0.454, (-20.997, -9.932, -8.244)), (' B 188  ARG  NH2', ' B 615  HOH  O  ', -0.448, (-46.0, -15.473, -27.007)), (' A 222  ARG  HG3', ' A 222  ARG HH11', -0.446, (-48.981, -47.373, 4.343)), (' B 186  VAL HG23', ' B 188  ARG  HG2', -0.436, (-45.508, -19.163, -25.617)), (' A 288 AGLU  HG3', ' A 800  HOH  O  ', -0.432, (-28.346, -29.601, 0.015)), (' A 217  ARG  HB3', ' A 220  LEU HD12', -0.43, (-44.801, -36.896, -0.032)), (' A  17  MET  HA ', ' A  17  MET  HE3', -0.427, (-15.634, -4.023, 5.256)), (' A 131  ARG  HD3', ' A 137  LYS  HE2', -0.426, (-20.706, -27.019, 8.42)), (' A  67  LEU  CD2', ' A 747  HOH  O  ', -0.424, (0.566, 2.8, 8.591)), (' B 286 BLEU  HA ', ' B 286 BLEU HD12', -0.415, (-23.317, -37.537, -6.876)), (' B  49  MET  HB3', ' B 505  ALD H273', -0.414, (-49.275, -15.852, -19.358)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.413, (-22.169, -13.371, 6.938)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.411, (-19.04, -8.803, -0.621)), (' B 137  LYS  HB2', ' B 137  LYS  HE3', -0.411, (-30.097, -25.755, -10.824)), (' A 285  ALA  HB2', ' B 286 BLEU HD13', -0.411, (-25.797, -37.494, -4.882)), (' A 137  LYS  HB2', ' A 137  LYS  HE3', -0.403, (-19.456, -26.082, 5.794)), (' B 188  ARG  NE ', ' B 615  HOH  O  ', -0.4, (-46.006, -16.184, -26.882))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
