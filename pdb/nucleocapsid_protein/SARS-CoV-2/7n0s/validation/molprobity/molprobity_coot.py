# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('D', ' 116 ', 'PRO', None, (28.97134, -51.599399999999996, -7.28466)), ('E', ' 116 ', 'PRO', None, (1.5691399999999986, -47.81815, -6.71737)), ('F', ' 116 ', 'PRO', None, (11.973769999999993, -73.44369999999999, -7.47024))]
data['rota'] = [('B', ' 113 ', 'LEU', 0.2142758614767361, (9.384630000000003, -41.12107, 1.10554)), ('D', '  65 ', 'VAL', 0.27778006767139857, (32.06172, -39.98396, -26.67083)), ('D', '  97 ', 'CYS', 0.0629469074206728, (31.92873999999998, -44.481659999999984, -12.11526)), ('D', ' 103 ', 'LEU', 0.13921117429866017, (37.16528, -60.57026, -15.29384)), ('E', '  65 ', 'VAL', 0.17391564798036344, (-9.92779, -50.39222000000001, -26.3801)), ('E', ' 103 ', 'LEU', 0.17052752915526, (5.18712, -35.93193, -14.13513)), ('F', '  -1 ', 'MET', 0.1347160941114535, (18.566820000000007, -68.41195, 0.18423)), ('F', '  65 ', 'VAL', 0.16448591674697918, (19.71819000000002, -82.01116, -27.02401))]
data['cbeta'] = []
data['probe'] = [(' E  65  VAL HG13', ' E  69  PHE  HB2', -0.871, (-10.97, -47.492, -24.584)), (' E  49  VAL HG13', ' E  65  VAL HG21', -0.726, (-8.839, -50.392, -22.798)), (' E  11  LEU HD22', ' E 124  THR  HB ', -0.691, (-21.302, -60.191, -15.128)), (' D  65  VAL HG13', ' D  69  PHE  HB2', -0.677, (35.07, -40.766, -24.637)), (' F  65  VAL HG13', ' F  69  PHE  HB2', -0.661, (17.872, -83.556, -25.232)), (' D  18  LEU  HB3', ' D  84  MET  HE3', -0.653, (36.645, -33.555, -18.727)), (' A 137  GLY  HA2', ' D 101  ARG  HB3', -0.639, (30.998, -59.849, -14.94)), (' F  18  LEU  HB3', ' F  84  MET  HE3', -0.638, (23.352, -89.137, -19.179)), (' D  49  VAL HG13', ' D  65  VAL HG21', -0.636, (31.454, -40.83, -23.052)), (' B 167  LEU HD22', ' B 171  PHE  HB3', -0.623, (18.847, -23.514, -2.563)), (' D  11  LEU HD22', ' D 124  THR  HB ', -0.612, (30.112, -25.734, -15.773)), (' B 113  LEU HD12', ' B 132  TRP  HZ3', -0.609, (6.856, -38.147, 1.174)), (' F  31  SER  O  ', ' F  32  THR HG22', -0.607, (1.373, -80.385, -8.956)), (' F  70  THR  HB ', ' F  83  GLU  HB3', -0.605, (15.369, -90.135, -22.046)), (' E 100  GLY  O  ', ' E 201  HOH  O  ', -0.593, (2.992, -43.737, -9.72)), (' D  31  SER  O  ', ' D  32  THR HG22', -0.591, (40.673, -57.43, -8.949)), (' F  20  LEU  HG ', ' F  84  MET  HE2', -0.586, (21.569, -87.729, -17.483)), (' F  59  ALA  N  ', ' F 106  ILE HD11', -0.584, (6.506, -80.273, -24.648)), (' F  59  ALA  CA ', ' F 106  ILE HD11', -0.564, (7.452, -80.542, -24.38)), (' C  64  LEU  O  ', ' C 131  ILE HG21', -0.55, (-11.23, -77.291, 0.641)), (' C 149  ARG  HG3', ' C 154  ASN  HB2', -0.55, (-3.12, -55.495, 6.432)), (' D  11  LEU  CD2', ' D 124  THR  HB ', -0.545, (30.617, -25.878, -14.983)), (' E  20  LEU  HG ', ' E  84  MET  HE2', -0.543, (-15.763, -49.421, -16.877)), (' B 113  LEU HD12', ' B 132  TRP  CZ3', -0.54, (6.157, -38.141, 0.925)), (' E  31  SER  O  ', ' E  32  THR HG22', -0.538, (0.718, -35.36, -7.947)), (' D  20  LEU  HG ', ' D  84  MET  HE2', -0.535, (36.112, -35.793, -16.969)), (' A 154  ASN  HB3', ' F   1  GLU  HB3', -0.534, (18.766, -75.291, 3.764)), (' C 137  GLY  HA2', ' F 101  ARG  HB3', -0.532, (3.095, -70.701, -14.646)), (' E  23  VAL HG22', ' E  79  THR HG22', -0.532, (-12.044, -42.022, -6.577)), (' F  65  VAL HG13', ' F  69  PHE  CG ', -0.529, (18.695, -83.789, -24.832)), (' F  65  VAL HG13', ' F  69  PHE  CB ', -0.528, (18.435, -84.304, -24.593)), (' F  84  MET  HB3', ' F  87  LEU HD21', -0.525, (23.456, -87.667, -22.548)), (' C 118  GLU  HB3', ' C 121  LEU  HG ', -0.52, (0.657, -75.654, 7.016)), (' D  34  ALA  HB2', ' D 104  GLY  O  ', -0.518, (35.776, -56.092, -17.521)), (' C 112  TYR  CD2', ' C 146  ILE HG21', -0.513, (0.492, -62.514, -0.426)), (' E  34  ALA  HB2', ' E 104  GLY  O  ', -0.513, (2.03, -39.425, -16.602)), (' E  18  LEU  HB3', ' E  84  MET  HE3', -0.487, (-17.962, -50.299, -18.508)), (' A 146  ILE HG23', ' F  -1  MET  HG3', -0.486, (22.347, -67.62, -0.762)), (' E  23  VAL HG22', ' E  79  THR  CG2', -0.481, (-12.633, -41.728, -6.797)), (' B 140  ASN  HB3', ' E  28  ARG HH12', -0.48, (1.691, -43.699, -4.528)), (' B 161  LEU HD13', ' B 165  THR HG21', -0.48, (18.431, -28.631, -6.055)), (' C  86  TYR  HB3', ' C 132  TRP  CE3', -0.48, (-1.687, -74.358, 0.715)), (' B 139  LEU HD13', ' E 115  ALA  HB3', -0.474, (5.669, -47.769, -9.071)), (' B 137  GLY  HA2', ' E 101  ARG  HB3', -0.466, (8.187, -41.453, -13.8)), (' D  41  ALA  HB3', ' D  44  LYS  HB2', -0.462, (20.589, -35.855, -19.903)), (' A 140  ASN  HB3', ' D  28  ARG HH12', -0.458, (32.657, -54.195, -5.746)), (' D  92  SER  HB2', ' D 125  VAL  H  ', -0.456, (29.05, -28.493, -19.72)), (' B  87  TYR  CE1', ' B 110  PHE  HB2', -0.455, (16.62, -32.551, 0.955)), (' A 149  ARG  HG3', ' A 154  ASN  HB2', -0.455, (20.296, -73.605, 5.808)), (' C  53  PHE  HZ ', ' C  75  ASN  HB2', -0.454, (-4.464, -60.917, -2.763)), (' E  65  VAL  CG1', ' E  69  PHE  HB2', -0.452, (-10.082, -47.918, -23.998)), (' F  49  VAL HG13', ' F  65  VAL HG21', -0.45, (19.619, -81.013, -23.311)), (' E  84  MET  HE1', ' E 123  VAL HG21', -0.447, (-16.319, -52.363, -16.489)), (' D  65  VAL  CG1', ' D  69  PHE  HB2', -0.447, (34.416, -41.066, -24.392)), (' D  51  THR HG22', ' D  60  ARG  HB3', -0.446, (32.939, -50.471, -23.415)), (' B 118  GLU  HB3', ' B 121  LEU  HG ', -0.446, (5.292, -37.095, 7.877)), (' B 150  ASN  HB3', ' B 153  ASN  HB2', -0.445, (25.149, -47.268, 10.579)), (' C  87  TYR  CE1', ' C 110  PHE  HB2', -0.442, (-8.511, -68.417, 0.711)), (' F  61  TYR  HB2', ' F  66  GLU  HB2', -0.442, (14.88, -81.517, -28.536)), (' A 111  TYR  CE2', ' A 117  PRO  HD3', -0.441, (30.724, -67.566, 7.865)), (' E  23  VAL  HA ', ' E  79  THR HG22', -0.441, (-10.897, -42.311, -6.421)), (' F  51  THR HG22', ' F  60  ARG  HB3', -0.439, (10.589, -77.522, -23.652)), (' F  54  TRP  CD1', ' F 103  LEU  HA ', -0.436, (-0.106, -77.737, -15.989)), (' F  34  ALA  HB2', ' F 104  GLY  O  ', -0.436, (4.319, -76.772, -17.236)), (' B  58  GLN  HB2', ' B 171  PHE  CZ ', -0.435, (16.756, -22.816, 3.701)), (' F  96  TYR  HB3', ' F 120  GLY  HA2', -0.428, (22.177, -80.158, -10.583)), (' E  63  ASP  N  ', ' E  64  PRO  HD2', -0.428, (-5.437, -52.739, -27.757)), (' B 149  ARG  HG3', ' B 154  ASN  HB2', -0.426, (25.174, -44.028, 6.976)), (' B  64  LEU  O  ', ' B 131  ILE HG21', -0.424, (10.044, -25.871, 1.295)), (' E  92  SER  OG ', ' E 124  THR  HA ', -0.418, (-17.765, -59.855, -17.914)), (' B  55  ALA  HB2', ' B 109  TYR  CE2', -0.417, (20.834, -31.639, 8.013)), (' A  87  TYR  HB2', ' A 131  ILE  CG1', -0.417, (39.404, -69.499, 0.996)), (' D   2  VAL HG12', ' D   4  LEU  H  ', -0.416, (31.481, -44.418, -3.305)), (' A  52  TRP  CD2', ' A 149  ARG  HB2', -0.416, (23.166, -71.675, 4.433)), (' F  29  THR  O  ', ' F  29  THR HG23', -0.414, (4.597, -80.268, -5.634)), (' A  89  ARG  HB2', ' A 108  TRP  CE2', -0.413, (42.085, -72.508, 5.423)), (' E  31  SER  O  ', ' E  32  THR  CG2', -0.412, (1.112, -35.075, -8.024)), (' F  40  GLN  HG3', ' F  96  TYR  OH ', -0.412, (23.738, -74.22, -14.751)), (' F  31  SER  O  ', ' F  32  THR  CG2', -0.408, (0.982, -79.965, -8.836)), (' E  35  MET  SD ', ' E  99  SER  HA ', -0.407, (-1.662, -43.594, -10.289)), (' A  87  TYR  HB2', ' A 131  ILE HG13', -0.407, (39.447, -68.886, 0.953)), (' F  44  LYS  HB3', ' F  44  LYS  HE2', -0.404, (27.898, -73.048, -21.982)), (' C 105  SER  HA ', ' C 106  PRO  HD3', -0.402, (-20.547, -73.004, 9.738)), (' E  65  VAL HG13', ' E  69  PHE  CB ', -0.402, (-11.154, -48.284, -23.674))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
