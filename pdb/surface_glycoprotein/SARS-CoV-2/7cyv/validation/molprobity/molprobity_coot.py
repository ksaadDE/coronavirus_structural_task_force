# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('B', ' 408 ', 'ARG', 0.2978030647183553, (41.54453, 12.06317, 30.21968)), ('B', ' 519 ', 'HIS', 0.29284008271953976, (18.44893, -9.53891, 29.74028))]
data['cbeta'] = []
data['probe'] = [(' A   2  NAG  H61', ' A   4  FUC  H63', -0.81, (57.512, -4.681, 37.88)), (' H  97  ALA  HB3', ' H 114  MET  HE2', -0.782, (16.857, -7.407, 6.232)), (' B 391  CYS  HA ', ' B 525  CYS  HB3', -0.734, (28.628, -11.179, 39.345)), (' H  38  ARG  NH1', ' H  90  ASP  OD1', -0.715, (4.287, -13.478, 13.122)), (' H  39  GLN  OE1', ' H1037  GLN  NE2', -0.712, (6.797, -3.451, 2.781)), (' H  47  TRP  CD2', ' H1097  VAL HG22', -0.705, (15.851, -6.453, 14.002)), (' H1090  ALA  HA ', ' H1097  VAL  HA ', -0.673, (18.288, -2.419, 16.479)), (' B 365  TYR  HD2', ' B 388  ASN  HA ', -0.67, (34.29, -8.017, 41.988)), (' H  35  SER  HB3', ' H 114  MET  HE3', -0.647, (17.888, -8.453, 8.428)), (' H  48  MET  HG2', ' H  64  PHE  HE2', -0.644, (9.711, -11.775, 14.291)), (' H  51  ILE HG13', ' H  58  ALA  HB2', -0.622, (22.183, -16.972, 14.437)), (' B 417  LYS  HD2', ' B 455  LEU HD12', -0.618, (43.87, 14.206, 14.486)), (' H1060  ARG  NH1', ' H1081  ASP  OD2', -0.612, (14.623, 11.649, -6.705)), (' H  39  GLN  NE2', ' H  43  GLN  O  ', -0.608, (4.435, -2.845, 5.904)), (' H1074  ILE  HB ', ' H1077  VAL HG12', -0.602, (13.909, 14.829, -1.903)), (' H1079  ALA  HA ', ' H1107  VAL HG11', -0.594, (7.044, 12.652, -7.601)), (' B 484  GLU  N  ', ' B 484  GLU  OE1', -0.593, (48.672, 8.993, -1.954)), (' B 433  VAL HG22', ' B 512  VAL HG13', -0.573, (37.325, 2.869, 30.271)), (' H  47  TRP  HZ2', ' H  50  ARG  HG2', -0.57, (18.98, -9.26, 14.623)), (' H  67  ARG  NH2', ' H  90  ASP  OD2', -0.562, (3.765, -16.078, 14.948)), (' H  35  SER  OG ', ' H  47  TRP  NE1', -0.559, (16.938, -8.66, 12.094)), (' H  37  VAL HG23', ' H 114  MET  HE1', -0.542, (15.451, -7.356, 7.975)), (' H   6  GLN  HG2', ' H  22  CYS  HB3', -0.541, (15.732, -15.669, 1.26)), (' H 100  GLU  O  ', ' H 112  TYR  HB2', -0.539, (26.658, -3.63, 8.91)), (' H  59  ASN  ND2', ' H1095  THR  O  ', -0.539, (19.53, -8.108, 19.251)), (' B 365  TYR  CD2', ' B 388  ASN  HA ', -0.536, (34.176, -7.799, 41.918)), (' H1036  GLN  HB2', ' H1085  TYR  CE1', -0.532, (12.952, 5.533, -0.166)), (' H  14  PRO  HG2', ' H 127  SER  HB2', -0.53, (-6.253, -21.044, 12.817)), (' H  50  ARG  HD2', ' H 111  TYR  CZ ', -0.523, (23.597, -8.999, 14.389)), (' B 457  ARG  HD3', ' B 459  SER  O  ', -0.519, (34.42, 9.218, 11.942)), (' B 386  LYS  O  ', ' B 390  LEU HD23', -0.519, (29.688, -4.607, 43.671)), (' H1006  GLN  NE2', ' H1085  TYR  O  ', -0.518, (10.179, 5.937, 7.116)), (' B 497  PHE  CE2', ' B 507  PRO  HB3', -0.517, (53.437, 5.159, 23.932)), (' H   6  GLN  HA ', ' H  22  CYS  HA ', -0.512, (15.917, -17.765, 0.213)), (' H 106  ASP  O  ', ' H 108  TYR  N  ', -0.508, (35.96, -10.144, 18.597)), (' H  50  ARG  HD2', ' H 111  TYR  CE1', -0.507, (23.024, -9.026, 13.862)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.503, (20.698, -14.683, 28.942)), (' B 485  GLY  N  ', ' B 488  CYS  O  ', -0.502, (48.262, 13.266, 0.143)), (' H  47  TRP  CG ', ' H1097  VAL HG22', -0.496, (15.53, -5.672, 14.012)), (' H 112  TYR  HA ', ' H1033  TYR  OH ', -0.496, (25.112, -0.201, 10.845)), (' B 391  CYS  CA ', ' B 525  CYS  HB3', -0.496, (27.987, -11.019, 40.014)), (' H  23  LYS  HG3', ' H  78  THR HG22', -0.492, (21.22, -21.86, -0.202)), (' H1027  LEU HD23', ' H1070  VAL HG23', -0.492, (17.943, 9.588, 15.123)), (' B 474  GLN  HA ', ' B 480  CYS  SG ', -0.49, (41.389, 13.589, -0.14)), (' H  36  TRP  HB3', ' H  48  MET  HE2', -0.489, (12.498, -13.356, 10.188)), (' B 381  GLY  HA3', ' B 430  THR  HA ', -0.484, (28.622, 2.04, 34.752)), (' H  71  THR HG23', ' H  80  TYR  HB2', -0.483, (18.225, -22.506, 9.588)), (' H  10  GLU  HB2', ' H 123  VAL HG22', -0.475, (4.607, -19.901, 4.364)), (' B 453  TYR  CE1', ' B 493  GLN  HB3', -0.472, (48.606, 10.065, 14.688)), (' B 457  ARG HH21', ' B 467  ASP  HB2', -0.47, (35.952, 3.462, 11.7)), (' H  35  SER  HG ', ' H  47  TRP  HE1', -0.469, (17.451, -8.426, 11.566)), (' B 350  VAL  HA ', ' B 400  PHE  HB2', -0.46, (44.55, 1.37, 21.755)), (' H1027  LEU  N  ', ' H1028  PRO  HD2', -0.459, (20.428, 8.353, 20.697)), (' H  36  TRP  CE2', ' H  81  MET  HB2', -0.452, (15.228, -16.363, 8.378)), (' H 101  VAL HG23', ' H 111  TYR  HA ', -0.452, (26.98, -6.745, 12.363)), (' B 377  PHE  CD2', ' B 434  ILE HG12', -0.451, (41.375, 0.709, 37.571)), (' H1006  GLN  HG2', ' H1103  THR  OG1', -0.451, (8.315, 8.492, 8.773)), (' H  98  LYS  HB3', ' H  98  LYS  HE3', -0.441, (23.302, -8.233, 1.57)), (' B 440  ASN  OD1', ' B 441  LEU  HG ', -0.44, (57.718, -1.487, 30.832)), (' B 410  ILE  O  ', ' B 425  LEU HD13', -0.431, (35.909, 6.485, 27.066)), (' B 353  TRP  NE1', ' B 466  ARG  HB2', -0.431, (37.865, 0.156, 18.153)), (' H1004  LEU  HG ', ' H1098  VAL HG13', -0.43, (13.632, 1.859, 16.024)), (' H  32  TYR  CD1', ' H  98  LYS  HD3', -0.421, (26.784, -9.614, 3.183)), (' H  36  TRP  CH2', ' H  96  CYS  HB2', -0.416, (14.944, -14.875, 5.063)), (' H  91  THR HG23', ' H 124  THR  HA ', -0.414, (-0.92, -15.319, 6.216)), (' B 384  PRO  HA ', ' B 387  LEU  HB2', -0.414, (33.993, -1.417, 42.326)), (' B 382  VAL HG21', ' B 390  LEU  HG ', -0.413, (28.302, -3.307, 40.799)), (' H 114  MET  O  ', ' H1035  TYR  HE1', -0.407, (19.31, -2.263, 4.84)), (' B 497  PHE  CZ ', ' B 507  PRO  HB3', -0.406, (53.047, 5.367, 24.072)), (' B 445  VAL HG22', ' B 499  PRO  HG2', -0.406, (65.296, 5.483, 24.703)), (' H  35  SER  HA ', ' H  50  ARG  HA ', -0.404, (19.031, -11.786, 11.491))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
