# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  42 ', 'PRO', 0.0022815244928330075, (18.628, 4.773, 147.904)), ('D', '  62 ', 'ASN', 0.00047013144065210323, (41.376, -1.124, 81.711)), ('D', '  70 ', 'GLY', 0.09161491310690423, (19.180999999999997, 0.029, 71.52600000000002)), ('D', ' 157 ', 'ASP', 0.04836441198377952, (20.513999999999996, -30.258, 48.491000000000014)), ('D', ' 158 ', 'SER', 0.03993964969795088, (20.847000000000005, -26.588, 49.533000000000015)), ('F', '  70 ', 'GLY', 0.0757055806944685, (-6.518, -14.998000000000003, 35.05600000000001)), ('F', ' 158 ', 'SER', 0.002736351916215715, (-24.209, 1.18, 56.726)), ('L', ' 158 ', 'ASP', 0.04439159280547897, (18.616, 23.66, -43.79)), ('R', ' 373 ', 'SER', 0.04306843571304747, (18.801999999999992, -12.112, -0.716)), ('R', ' 468 ', 'ILE', 0.08470541660499754, (-6.198, 0.020000000000000007, 12.552000000000001))]
data['omega'] = [('A', ' 160 ', 'PRO', None, (6.761999999999995, 26.059, 158.34400000000005)), ('A', ' 162 ', 'PRO', None, (9.403999999999998, 22.128, 162.368)), ('B', ' 148 ', 'PRO', None, (7.179, -5.472000000000002, 155.706)), ('C', ' 154 ', 'PRO', None, (35.303, -47.729, 75.91200000000003)), ('C', ' 156 ', 'PRO', None, (41.03600000000001, -45.63600000000002, 74.757)), ('D', '  99 ', 'PRO', None, (12.700999999999997, -16.227, 81.626)), ('D', ' 147 ', 'PRO', None, (43.583, -19.404, 63.815000000000005)), ('E', ' 154 ', 'PRO', None, (0.7730000000000015, 26.301, 66.529)), ('E', ' 156 ', 'PRO', None, (3.589999999999999, 22.352, 70.41)), ('F', '  99 ', 'PRO', None, (-8.423000000000002, 5.123, 32.234)), ('F', ' 147 ', 'PRO', None, (1.7140000000000004, -5.381, 64.258)), ('H', ' 160 ', 'PRO', None, (46.532999999999994, 3.553000000000001, -36.161)), ('H', ' 162 ', 'PRO', None, (50.002, 8.158, -34.13300000000002)), ('L', ' 148 ', 'PRO', None, (35.67199999999998, 30.349000000000007, -21.390000000000008))]
data['rota'] = [('B', '  10 ', 'VAL', 0.22505159546201964, (7.450999999999999, -6.168, 146.05200000000005)), ('B', '  42 ', 'PRO', 0.12727949010587838, (18.628, 4.773, 147.904)), ('B', '  96 ', 'SER', 0.2945167083951898, (-0.9690000000000012, 8.899, 122.24400000000001)), ('B', ' 103 ', 'VAL', 0.08925600265758972, (7.027999999999997, 7.396, 129.74000000000004)), ('B', ' 129 ', 'SER', 0.06670915204446366, (-17.51, 18.336, 165.329)), ('B', ' 162 ', 'VAL', 0.04528241529410715, (-12.415, 8.061, 146.118)), ('B', ' 190 ', 'GLU', 0.12644606371531808, (-21.56299999999999, 18.314, 152.82200000000006)), ('A', '  21 ', 'SER', 0.10384342312466945, (23.757, 22.533, 132.9)), ('A', ' 128 ', 'SER', 0.21877448993302928, (6.7170000000000005, 31.795, 154.637)), ('A', ' 172 ', 'LEU', 0.049366369862239225, (1.5399999999999974, 11.314, 179.72200000000004)), ('A', ' 204 ', 'THR', 0.008159601566148922, (-12.24, 11.389, 185.03100000000006)), ('A', ' 206 ', 'THR', 0.2412951445040006, (-8.733, 15.241999999999997, 181.31)), ('A', ' 209 ', 'CYS', 0.05169447534953817, (-2.480000000000004, 17.672, 173.91100000000006)), ('A', ' 223 ', 'ARG', 0.1905919282455923, (-8.745000000000005, 19.316, 175.29200000000006)), ('D', '   3 ', 'VAL', 0.17591792659006483, (17.940999999999995, -14.701999999999996, 73.404)), ('D', '  13 ', 'SER', 0.22761257645946917, (47.086, -10.099000000000004, 67.394)), ('D', '  83 ', 'GLU', 0.1563399152066033, (45.84699999999999, -13.693000000000003, 78.75500000000002)), ('D', ' 129 ', 'GLU', 0.0, (30.587000000000003, -51.42500000000001, 52.722000000000016)), ('D', ' 161 ', 'VAL', 0.20094111478220306, (20.694999999999993, -30.220000000000006, 58.20500000000001)), ('D', ' 189 ', 'GLU', 0.2505132627261655, (17.465999999999994, -44.122, 52.37)), ('D', ' 215 ', 'THR', 0.02620969081831996, (25.478, -41.371, 42.473)), ('C', '  67 ', 'GLN', 0.27069565571705895, (13.833999999999998, -31.498000000000008, 84.92200000000003)), ('C', '  79 ', 'VAL', 0.1510035103064265, (21.93, -25.096000000000007, 98.44000000000001)), ('C', ' 188 ', 'VAL', 0.017227284532094586, (43.440999999999995, -40.419000000000004, 56.97900000000001)), ('C', ' 200 ', 'THR', 0.2794887078819847, (47.990999999999985, -51.945, 49.375000000000014)), ('L', '  28 ', 'ASN', 0.05338897923840969, (14.867, 10.037, -8.294000000000004)), ('L', '  62 ', 'ASP', 0.2713144240498888, (32.41, 25.108000000000008, 4.332000000000002)), ('L', '  83 ', 'GLU', 0.2842204431820015, (41.45399999999999, 24.547000000000008, -6.693000000000001)), ('L', ' 103 ', 'VAL', 0.1602815061044879, (22.034, 7.35, -11.775000000000004)), ('L', ' 143 ', 'ILE', 0.07118595695319832, (36.50799999999999, 26.141, -33.33900000000001)), ('L', ' 160 ', 'SER', 0.0640246301629575, (16.164999999999992, 20.935000000000006, -39.100000000000016)), ('L', ' 162 ', 'VAL', 0.027347644554309568, (20.766000000000002, 16.398, -37.792)), ('L', ' 196 ', 'ARG', 0.28953449677033927, (20.026999999999997, 24.013, -49.627)), ('L', ' 216 ', 'THR', 0.005262533948896835, (25.94299999999999, 25.187, -54.81000000000002)), ('H', '  53 ', 'LEU', 0.1824107370065191, (30.652999999999988, -8.143, 0.4450000000000001)), ('H', '  69 ', 'THR', 0.2230103994473604, (29.53999999999999, -10.731000000000003, -13.455)), ('H', ' 204 ', 'THR', 0.24147046898871832, (50.967000000000006, 33.133, -56.762000000000015)), ('F', '  23 ', 'THR', 0.08706016313640111, (-7.4540000000000015, -8.149, 41.685)), ('F', '  36 ', 'SER', 0.28456668458007706, (4.321999999999999, -4.141, 37.44400000000002)), ('F', ' 162 ', 'LYS', 0.0, (-15.046999999999997, 9.245, 52.937)), ('F', ' 187 ', 'THR', 0.08211348542534354, (-22.39, 18.717, 60.681)), ('F', ' 215 ', 'THR', 0.033625521078804226, (-29.750000000000004, 8.614, 71.37600000000003)), ('E', '   1 ', 'GLN', 0.00893712884365359, (22.153999999999993, 7.982, 32.195000000000014)), ('E', '  77 ', 'SER', 0.23435681254538238, (13.514, 19.540000000000006, 28.233000000000008)), ('E', '  99 ', 'GLN', 0.28191246489071853, (8.519, 4.123000000000001, 30.787)), ('E', ' 137 ', 'SER', 0.26370090504785326, (-20.786, 1.476, 83.33400000000003)), ('E', ' 168 ', 'SER', 0.2542977164438195, (-1.8430000000000009, 6.034000000000002, 85.64500000000002)), ('E', ' 188 ', 'VAL', 0.026638733247098617, (-8.147, 9.31, 77.501)), ('E', ' 212 ', 'THR', 0.008159601566148922, (-4.061, 29.471, 76.55200000000004)), ('E', ' 221 ', 'LYS', 0.022764406860872007, (-23.598, 11.672000000000002, 80.83600000000003)), ('S', ' 332 ', 'ILE', 0.01940435883325229, (33.76199999999999, 15.53, 91.18400000000003)), ('S', ' 445 ', 'VAL', 0.2824965229320304, (-9.697, 17.338, 108.145)), ('S', ' 498 ', 'GLN', 0.15485495562220078, (-6.352000000000003, 13.241, 110.15000000000003)), ('S', ' 503 ', 'VAL', 0.15156816289372443, (1.6039999999999992, 10.741000000000003, 116.664)), ('R', ' 349 ', 'SER', 0.12606120044603908, (-0.19400000000000014, -4.767, 5.497000000000002)), ('R', ' 367 ', 'VAL', 0.14901428603869774, (22.21, -16.570000000000007, 9.044)), ('R', ' 385 ', 'THR', 0.09237107915039441, (29.498, -7.04, 11.621000000000004))]
data['cbeta'] = [('F', ' 157 ', 'ASP', ' ', 0.33960075439544407, (-26.72, 4.260000000000001, 59.829))]
data['probe'] = [(' E 210  SER  OG ', ' E 212  THR HG23', -0.894, (-4.038, 29.468, 72.586)), (' F 162  LYS  HE2', ' F 163  ALA  H  ', -0.811, (-16.387, 11.288, 52.439)), (' H  91  THR HG23', ' H 123  THR  HA ', -0.665, (40.106, 0.912, -24.514)), (' B  80  LEU HD13', ' B 112  VAL HG22', -0.65, (16.167, -8.536, 147.863)), (' F 157  ASP  O  ', ' F 158  SER  HB3', -0.627, (-26.188, 0.894, 57.37)), (' F 187  THR HG22', ' F 190  GLN  HG3', -0.613, (-24.199, 17.433, 58.092)), (' C  18  LEU  HB2', ' C  86  LEU HD11', -0.602, (23.278, -37.603, 88.954)), (' D 155  LYS  HB2', ' D 198  SER  HB3', -0.6, (25.429, -28.149, 51.89)), (' C 200  THR  HB ', ' C 217  LYS  HE3', -0.59, (45.956, -54.306, 49.381)), (' B  41  LEU HD23', ' B  86  ALA  HB2', -0.585, (18.697, -0.617, 144.635)), (' C   7  SER  O  ', ' C 114  THR HG22', -0.584, (31.775, -29.838, 93.08)), (' R 354  ASN  O  ', ' R 398  ASP  HA ', -0.575, (6.146, -6.512, 13.133)), (' H 132  PRO  HB3', ' H 158  TYR  HB3', -0.571, (44.567, 8.465, -42.208)), (' D  48  LEU HD21', ' D  51  TYR  HB3', -0.567, (29.875, -6.953, 87.015)), (' B  37  TRP  HB2', ' B  50  ILE  HB ', -0.566, (14.919, -3.399, 132.515)), (' B   8  PRO  HG2', ' B 152  THR HG21', -0.561, (0.263, -0.267, 146.361)), (' D 125  PRO  HA ', ' D 138  LEU HD23', -0.556, (30.016, -38.996, 52.031)), (' S 364  ASP  OD1', ' S 366  SER  HB3', -0.552, (27.342, 18.084, 104.887)), (' H  52  ILE HD12', ' H  57  MET  HB3', -0.55, (23.434, -7.747, -2.41)), (' L 111  THR HG21', ' L 148  PRO  HB3', -0.548, (36.759, 28.482, -18.451)), (' F 187  THR HG22', ' F 190  GLN  CG ', -0.544, (-24.026, 16.81, 57.999)), (' R 376  THR  HB ', ' R 435  ALA  HB3', -0.539, (15.727, -2.659, 2.15)), (' D 175  ASN  O  ', ' D 176  ASN  HB2', -0.531, (52.261, -25.007, 65.512)), (' D  39  GLN  HB2', ' D  88  TYR  CE2', -0.526, (36.448, -11.987, 78.94)), (' H  55  SER  HB2', ' R 372  ALA  HA ', -0.517, (23.49, -12.433, -0.128)), (' E  33  TRP  CE3', ' E  50  ILE HD12', -0.516, (1.106, 9.825, 26.906)), (' C  99  GLN  HG3', ' C 301  HOH  O  ', -0.515, (22.029, -13.345, 93.166)), (' D 191  TRP  CZ2', ' D 214  PRO  HA ', -0.512, (26.339, -40.943, 47.83)), (' F 138  LEU HD12', ' F 184  LEU HD23', -0.507, (-18.477, 10.434, 61.968)), (' E  36  TRP  HE1', ' E  79  VAL HG12', -0.498, (4.671, 16.892, 33.627)), (' B 111  THR HG21', ' B 148  PRO  HB3', -0.497, (10.072, -4.864, 153.361)), (' E 130  PRO  HD3', ' E 216  LYS  HE2', -0.494, (-16.256, 20.54, 77.819)), (' D  20  ILE HD12', ' D  75  LEU HD23', -0.49, (34.23, -9.206, 74.182)), (' A  40  ALA  O  ', ' A  43  GLN  HB2', -0.49, (9.924, 12.638, 143.679)), (' C 207  HIS  ND1', ' C 210  SER  HB3', -0.489, (36.955, -52.356, 71.943)), (' D  63  ARG  HB3', ' D  78  SER  O  ', -0.489, (42.8, -3.465, 75.925)), (' L   5  THR  HB ', ' L  23  THR  OG1', -0.489, (17.615, 18.417, -16.105)), (' L 192  TRP  CZ2', ' L 215  PRO  HA ', -0.488, (27.845, 21.699, -51.363)), (' H   4  LEU HD22', ' H  22  CYS  SG ', -0.486, (38.098, -0.776, -3.594)), (' S 396  TYR  HB2', ' S 514  SER  HB2', -0.483, (20.483, 2.036, 98.263)), (' F  53  VAL HG12', ' F  54  THR HG23', -0.475, (3.954, -12.59, 35.18)), (' F 157  ASP  O  ', ' F 158  SER  CB ', -0.469, (-25.948, 0.984, 57.374)), (' L  37  TRP  CE2', ' L  75  LEU  HB2', -0.467, (25.252, 20.254, -6.507)), (' R 444  LYS  HE2', ' R 447  GLY  H  ', -0.466, (-3.114, -8.789, -10.547)), (' E  29  PHE  HZ ', ' E  79  VAL HG23', -0.465, (8.923, 17.117, 29.873)), (' C  91  THR HG23', ' C 117  THR  HA ', -0.462, (29.762, -35.974, 82.236)), (' L  38  TYR  HE2', ' L  91  GLN  HB3', -0.461, (26.459, 10.776, -7.248)), (' B 176  ASN  O  ', ' B 177  ASN  HB2', -0.458, (12.313, -2.996, 164.748)), (' L 156  LYS  HD2', ' L 159  SER  O  ', -0.457, (17.824, 23.953, -38.103)), (' B  84  ASP  O  ', ' B 110  LEU HD23', -0.456, (16.155, -4.62, 144.997)), (' E  33  TRP  CZ2', ' R 462  LYS  HE3', -0.456, (1.111, 10.17, 22.679)), (' H  25  SER  C  ', ' H  27  GLY  H  ', -0.453, (41.777, -1.103, 4.759)), (' A 112  ALA  HB2', ' B  36  HIS  CE1', -0.451, (16.031, 1.334, 125.898)), (' F  37  TRP  HB2', ' F  50  ILE  HB ', -0.451, (6.768, -6.602, 40.627)), (' E  35  GLY  O  ', ' E  96  CYS  HA ', -0.451, (5.594, 12.208, 36.431)), (' D  62  ASN  O  ', ' D  64  PHE  N  ', -0.449, (40.147, -2.82, 79.325)), (' D 138  LEU HD12', ' D 184  LEU HD23', -0.447, (25.667, -36.105, 55.38)), (' L  16  GLN  HG2', ' L  17  ARG  H  ', -0.446, (29.922, 34.726, -6.948)), (' D 156  ALA  O  ', ' D 158  SER  N  ', -0.446, (20.248, -28.737, 50.185)), (' C   6  GLN  HB3', ' C 114  THR  CG2', -0.443, (30.135, -28.091, 92.946)), (' F 155  LYS  HE2', ' F 158  SER  HA ', -0.443, (-22.461, 0.321, 57.364)), (' L  48  LEU HD21', ' L  51  CYS  HB3', -0.44, (29.65, 11.599, 1.356)), (' R 439  ASN  O  ', ' R 443  SER  HB2', -0.439, (5.337, -9.936, -7.951)), (' S 439  ASN  O  ', ' S 443  SER  HB2', -0.439, (-1.383, 16.537, 108.513)), (' H 152  GLY  HA2', ' H 167  TRP  CH2', -0.439, (46.063, 23.338, -44.975)), (' A  97  ALA  HB1', ' A 113  PHE  HB3', -0.435, (19.326, 8.747, 130.139)), (' E  18  LEU  HB2', ' E  86  LEU HD11', -0.435, (-0.025, 25.939, 44.178)), (' S 528  LYS  HA ', ' S 528  LYS  HE2', -0.434, (36.77, 13.651, 101.603)), (' A  36  TRP  CE2', ' A  81  MET  HB2', -0.431, (18.226, 20.51, 131.041)), (' R 431  GLY  HA3', ' R 513  LEU  O  ', -0.431, (16.481, -2.529, 15.567)), (' F 162  LYS  H  ', ' F 162  LYS  HE2', -0.429, (-17.246, 10.003, 52.866)), (' B  56  ARG  HD3', ' B  64  PHE  O  ', -0.428, (19.748, -10.12, 133.167)), (' F 146  TYR  CG ', ' F 147  PRO  HA ', -0.425, (3.797, -4.626, 65.649)), (' E 166  LEU HD21', ' E 189  VAL HG21', -0.423, (-7.418, 9.752, 85.201)), (' F 125  PRO  HA ', ' F 138  LEU HD23', -0.422, (-19.426, 10.189, 68.288)), (' F  41  HIS  HD2', ' F 306  HOH  O  ', -0.421, (12.222, 1.265, 48.62)), (' D  61  SER  C  ', ' D  62  ASN  O  ', -0.421, (41.099, -3.176, 81.879)), (' B  22  CYS  HB3', ' B  73  ALA  HB3', -0.416, (6.605, -3.835, 131.899)), (' C 126  PRO  HB3', ' C 152  TYR  HB3', -0.415, (34.895, -48.596, 68.404)), (' H  40  ALA  HB3', ' H  43  GLN  HG3', -0.415, (32.525, 7.931, -22.704)), (' R 401  VAL HG22', ' R 509  ARG  HG2', -0.414, (6.125, -8.039, 2.432)), (' F 138  LEU  CD1', ' F 184  LEU HD23', -0.414, (-18.706, 10.082, 62.591)), (' D  18  ILE HG12', ' D  80  LEU HD11', -0.413, (40.821, -8.442, 70.379)), (' D  22  CYS  O  ', ' D  72  THR  HA ', -0.413, (23.294, -5.927, 71.096)), (' E 133  PRO  HB3', ' E 145  LEU  HB3', -0.41, (-15.322, 9.02, 81.565)), (' C 216  LYS  HA ', ' C 216  LYS  HD3', -0.409, (39.18, -54.241, 56.01)), (' C 174  PRO  HG3', ' D 171  SER  OG ', -0.408, (42.247, -32.867, 68.17)), (' F  48  LEU HD21', ' F  51  TYR  HB3', -0.407, (9.784, -2.954, 35.436)), (' A  39  GLN  HG3', ' A  44  GLY  O  ', -0.407, (10.742, 10.686, 140.677)), (' C 153  PHE  HA ', ' C 154  PRO  HA ', -0.407, (34.492, -45.921, 74.49)), (' A  28  ILE HG13', ' A  31  THR  O  ', -0.407, (26.588, 13.3, 120.236)), (' F 162  LYS  CE ', ' F 162  LYS  H  ', -0.406, (-17.397, 10.132, 52.427)), (' A   2  VAL  HA ', ' A  25  SER  O  ', -0.404, (32.396, 10.326, 128.558)), (' H  99  GLY  HA2', ' H 112  ALA  O  ', -0.403, (28.403, 4.384, -1.476)), (' R 417  LYS  HG2', ' R 455  LEU HD12', -0.402, (-0.629, 8.874, 1.871)), (' S 366  SER  HA ', ' S 369  TYR  CZ ', -0.402, (26.125, 16.647, 108.615)), (' C  36  TRP  CD1', ' C  81  LEU HD13', -0.402, (20.886, -25.398, 91.595)), (' H  34  ILE HG12', ' H  53  LEU HD11', -0.401, (33.088, -3.912, -0.83)), (' B 214  ALA  HB3', ' B 217  GLU  HG2', -0.401, (-21.547, 5.798, 161.735))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
