# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 433  VAL HG23', ' B 512  VAL HG22', -0.672, (293.469, 303.35, 281.86)), (' C   4  LEU HD11', ' C  98  VAL HG23', -0.671, (315.702, 299.827, 291.174)), (' A   4  LEU HD11', ' A  98  VAL HG23', -0.668, (293.844, 299.593, 311.52)), (' B 343  ASN  ND2', ' B1001  RTV  O7 ', -0.668, (292.86, 318.995, 273.698)), (' D 433  VAL HG23', ' D 512  VAL HG22', -0.666, (315.424, 302.64, 320.714)), (' D 350  VAL HG12', ' D 422  ASN  HB3', -0.617, (322.673, 302.306, 312.024)), (' C  91  THR HG23', ' C 128  THR  HA ', -0.607, (322.358, 320.366, 294.495)), (' B 350  VAL HG12', ' B 422  ASN  HB3', -0.598, (286.337, 302.954, 290.627)), (' B 350  VAL HG11', ' B 418  ILE HD12', -0.596, (288.318, 304.202, 291.798)), (' A  91  THR HG23', ' A 128  THR  HA ', -0.593, (287.702, 321.025, 308.458)), (' D 350  VAL HG11', ' D 418  ILE HD12', -0.589, (321.176, 303.452, 310.64)), (' B 391  CYS  HA ', ' B 525  CYS  HA ', -0.576, (293.594, 299.7, 262.242)), (' D 391  CYS  HA ', ' D 525  CYS  HA ', -0.568, (315.721, 298.847, 340.755)), (' B 347  PHE  HD1', ' B 399  SER  HB3', -0.555, (287.058, 311.07, 281.608)), (' B 408  ARG HH21', ' B 409  GLN  HG2', -0.551, (297.143, 299.772, 293.925)), (' D 408  ARG HH21', ' D 409  GLN  HG2', -0.551, (312.121, 299.236, 308.646)), (' D 347  PHE  HD1', ' D 399  SER  HB3', -0.551, (322.806, 309.903, 321.118)), (' A  34  ILE HG21', ' A  79  VAL HG11', -0.539, (290.752, 302.804, 317.3)), (' C  34  ILE HG21', ' C  79  VAL HG11', -0.537, (318.162, 302.265, 285.464)), (' A 123  GLN  HG2', ' B 455  LEU HD21', -0.52, (286.852, 303.696, 303.787)), (' D 374  PHE  HA ', ' D 436  TRP  HB3', -0.518, (311.19, 312.819, 321.803)), (' B 374  PHE  HA ', ' B 436  TRP  HB3', -0.518, (298.48, 313.448, 281.194)), (' A   5  VAL  HB ', ' A  23  ALA  HB3', -0.515, (284.575, 300.601, 310.558)), (' C   5  VAL  HB ', ' C  23  ALA  HB3', -0.514, (324.979, 299.906, 292.455)), (' C  98  VAL  HB ', ' C 120  TYR  HB2', -0.511, (312.611, 298.146, 291.502)), (' B 347  PHE  CD1', ' B 399  SER  HB3', -0.5, (287.14, 311.152, 281.393)), (' B 462  LYS  HG3', ' B 465  GLU  HB2', -0.497, (282.496, 293.141, 285.331)), (' A  98  VAL  HB ', ' A 120  TYR  HB2', -0.495, (295.981, 298.274, 311.48)), (' D 347  PHE  CD1', ' D 399  SER  HB3', -0.494, (322.419, 310.118, 321.567)), (' A 114  LEU HD22', ' A 116  TRP  HZ3', -0.489, (307.627, 310.188, 311.318)), (' C 123  GLN  HG2', ' D 455  LEU HD21', -0.489, (322.324, 302.912, 298.907)), (' C 114  LEU HD22', ' C 116  TRP  HZ3', -0.484, (302.213, 310.145, 292.227)), (' B 401  VAL HG22', ' B 509  ARG  HG2', -0.484, (289.953, 313.707, 285.652)), (' C   9  GLY  HA2', ' C  18  LEU HD21', -0.482, (326.39, 314.002, 291.345)), (' D 401  VAL HG22', ' D 509  ARG  HG2', -0.48, (319.706, 312.477, 317.665)), (' A   9  GLY  HA2', ' A  18  LEU HD21', -0.48, (283.604, 315.355, 312.027)), (' D 462  LYS  HG3', ' D 465  GLU  HB2', -0.478, (326.376, 291.25, 317.17)), (' A  45  ARG  HB2', ' A 115  PRO  HG3', -0.478, (300.882, 310.145, 309.598)), (' A 109  TYR  CE1', ' D 377  PHE  HD2', -0.477, (305.269, 305.205, 326.22)), (' C  45  ARG  HB2', ' C 115  PRO  HG3', -0.476, (308.425, 309.917, 293.484)), (' A   2  VAL HG11', ' A  98  VAL HG21', -0.463, (293.697, 296.724, 311.203)), (' C 114  LEU  HB3', ' C 116  TRP  CE3', -0.454, (302.701, 307.969, 292.239)), (' C  51  ILE HD13', ' C  58  THR HG22', -0.453, (315.976, 304.884, 278.608)), (' A 117  ASP  HA ', ' D 408  ARG  HG3', -0.452, (306.902, 301.452, 312.08)), (' C   2  VAL HG11', ' C  98  VAL HG21', -0.451, (315.218, 296.099, 291.586)), (' A 114  LEU  HB3', ' A 116  TRP  CE3', -0.447, (306.785, 307.95, 310.927)), (' A  51  ILE HD13', ' A  58  THR HG22', -0.445, (293.72, 305.394, 324.912)), (' D 366  SER  HA ', ' D 369  TYR  CE2', -0.436, (307.778, 307.853, 335.414)), (' C  76  LYS  HB3', ' C  76  LYS  HE3', -0.434, (329.599, 298.604, 285.077)), (' C  23  ALA  HA ', ' C  78  THR HG22', -0.434, (325.127, 299.576, 288.084)), (' A  23  ALA  HA ', ' A  78  THR HG22', -0.433, (283.834, 300.384, 314.972)), (' B 366  SER  HA ', ' B 369  TYR  CE2', -0.43, (301.905, 308.718, 267.837)), (' D 444  LYS  HG3', ' D 447  GLY  H  ', -0.43, (323.522, 322.091, 306.344)), (' C  60  TYR  HE1', ' C  70  ILE HG22', -0.428, (317.102, 309.854, 279.199)), (' A  47  GLY  HA3', ' A  50  PHE  CZ ', -0.427, (300.132, 310.439, 317.089)), (' C  33  ALA  HB2', ' C 102  PHE  CZ ', -0.427, (309.937, 299.243, 281.2)), (' A  33  ALA  HB2', ' A 102  PHE  CZ ', -0.427, (299.31, 299.087, 322.302)), (' B 444  LYS  HG3', ' B 447  GLY  H  ', -0.426, (287.122, 323.2, 297.312)), (' D 431  GLY  HA2', ' D 515  PHE  CD2', -0.424, (314.038, 298.371, 329.797)), (' D 519  HIS  ND1', ' D 521  PRO  HD2', -0.422, (325.737, 291.301, 339.825)), (' C  47  GLY  HA3', ' C  50  PHE  CZ ', -0.419, (309.629, 310.402, 286.278)), (' A  60  TYR  HE1', ' A  70  ILE HG22', -0.418, (292.685, 309.667, 324.058)), (' B 431  GLY  HA2', ' B 515  PHE  CD2', -0.418, (295.028, 299.516, 273.327)), (' B 519  HIS  ND1', ' B 521  PRO  HD2', -0.413, (282.83, 293.443, 263.017)), (' B 419  ALA  HA ', ' B 423  TYR  O  ', -0.41, (289.979, 298.376, 289.698)), (' D 419  ALA  HA ', ' D 423  TYR  O  ', -0.409, (319.091, 297.392, 313.38)), (' D 342  PHE  HZ ', ' D 434  ILE HD12', -0.405, (314.567, 307.511, 327.341)), (' B 342  PHE  HZ ', ' B 434  ILE HD12', -0.4, (294.7, 308.859, 276.026))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
