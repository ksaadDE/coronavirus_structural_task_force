# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 450 ', 'ASN', 0.005769432538150583, (200.633, 167.102, 98.151))]
data['omega'] = []
data['rota'] = [('A', ' 449 ', 'TYR', 0.17573115319021881, (202.68500000000003, 168.06200000000004, 95.103)), ('A', ' 450 ', 'ASN', 0.04108761585227199, (200.633, 167.102, 98.151)), ('A', ' 451 ', 'TYR', 0.18552000325202647, (199.996, 170.678, 99.288)), ('L', '  93 ', 'HIS', 0.02357028937310582, (204.49, 173.8200000000001, 88.6)), ('L', '  94 ', 'ARG', 0.0, (205.642, 170.54999999999998, 87.039))]
data['cbeta'] = []
data['probe'] = [(' L  33  TYR  CE2', ' L  93  HIS  CD2', -1.502, (203.412, 176.469, 91.221)), (' L  33  TYR  CD2', ' L  93  HIS  CD2', -1.489, (202.145, 176.472, 89.956)), (' L  33  TYR  CD2', ' L  93  HIS  HD2', -1.297, (203.883, 176.005, 90.064)), (' L  33  TYR  CE2', ' L  93  HIS  HD2', -1.275, (204.128, 176.209, 90.986)), (' L  29  VAL  O  ', ' L  93  HIS  ND1', -1.017, (200.334, 173.932, 88.738)), (' L   2  ILE  CD1', ' L  94  ARG  HD3', -0.997, (202.054, 168.89, 83.443)), (' L  33  TYR  CE2', ' L  93  HIS  NE2', -0.981, (202.09, 175.263, 91.489)), (' L  33  TYR  HE2', ' L  93  HIS  CD2', -0.966, (203.667, 174.638, 91.416)), (' L  33  TYR  HD2', ' L  93  HIS  CD2', -0.949, (202.962, 175.366, 89.552)), (' L  94  ARG  CZ ', ' L  94  ARG  HB3', -0.88, (204.491, 168.813, 85.372)), (' A 451  TYR  O  ', ' A 494  SER  HA ', -0.874, (198.69, 172.307, 96.303)), (' L   2  ILE HD12', ' L  94  ARG  HD3', -0.849, (202.679, 169.773, 83.78)), (' L   1  GLN  HB3', ' L  96  PRO  HG2', -0.845, (207.099, 168.047, 81.116)), (' L   2  ILE  CD1', ' L  94  ARG  CD ', -0.84, (202.567, 169.479, 84.548)), (' L  95  SER  HB3', ' L  96  PRO  HD3', -0.783, (208.497, 167.359, 84.798)), (' A 450  ASN  H  ', ' A 450  ASN HD22', -0.781, (202.429, 165.512, 97.407)), (' L   2  ILE HD11', ' L  94  ARG  HD3', -0.766, (201.419, 168.6, 84.168)), (' A 444  LYS  HG3', ' A 447  GLY  HA2', -0.764, (209.194, 165.262, 92.817)), (' L   2  ILE HD11', ' L  94  ARG  CD ', -0.752, (201.204, 168.812, 84.639)), (' L  94  ARG  HB3', ' L  94  ARG  NH1', -0.712, (205.143, 167.957, 85.179)), (' H  52  SER  O  ', ' H  56  THR  HA ', -0.709, (223.237, 174.906, 91.571)), (' L  65  GLY  HA3', ' L  74  LEU  HA ', -0.703, (193.719, 188.998, 80.807)), (' L  29  VAL  O  ', ' L  93  HIS  CE1', -0.677, (200.586, 174.722, 90.079)), (' A 450  ASN  H  ', ' A 450  ASN  ND2', -0.674, (203.025, 165.969, 97.427)), (' A 379  CYS  HB3', ' A 432  CYS  HA ', -0.669, (205.82, 187.816, 117.82)), (' H  98  ASN  HB3', ' H 101  ASN HD21', -0.657, (216.726, 185.281, 88.946)), (' H  50  GLU  OE2', ' H  59  ASN  ND2', -0.648, (216.874, 171.879, 87.899)), (' A 342  PHE  HE1', ' A 511  VAL HG11', -0.637, (206.191, 176.779, 116.963)), (' A 493  GLN  HG2', ' L  31  SER  H  ', -0.624, (196.998, 177.883, 91.902)), (' H  91  THR  HB ', ' H 116  VAL HG22', -0.618, (222.165, 175.246, 62.862)), (' A 485  GLY  H  ', ' A 488  CYS  HB2', -0.618, (182.816, 174.747, 86.471)), (' L  37  TYR  HB3', ' L  45  PRO  HB2', -0.614, (209.01, 187.452, 77.495)), (' A 437  ASN HD22', ' A 508  TYR  HE1', -0.609, (213.121, 178.312, 102.818)), (' H  29  PHE  HB3', ' H  72  ARG HH12', -0.606, (226.809, 182.426, 90.62)), (' A 357  ARG  NH1', ' A 358  ILE  O  ', -0.593, (198.49, 176.538, 127.365)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.587, (206.37, 173.439, 107.233)), (' H  85  SER  HB3', ' H  87  ARG HH12', -0.586, (226.266, 164.136, 67.527)), (' A 339  GLY  O  ', ' A 343  ASN  N  ', -0.581, (209.908, 169.963, 117.542)), (' H  52  SER  O  ', ' H  56  THR  CA ', -0.578, (223.452, 174.096, 92.108)), (' H  33  THR  OG1', ' H  99  PHE  O  ', -0.575, (216.254, 180.054, 89.93)), (' L  18  ARG  NE ', ' L  76  ILE  O  ', -0.574, (189.325, 195.366, 77.897)), (' L  89  CYS  O  ', ' L 100  GLY  N  ', -0.57, (204.191, 179.76, 77.098)), (' A 353  TRP  O  ', ' A 466  ARG  NH2', -0.569, (193.886, 174.749, 112.904)), (' H   1  GLU  N  ', ' H 107  TYR  OH ', -0.568, (220.176, 195.402, 86.827)), (' A 361  CYS  H  ', ' A 524  VAL HG12', -0.566, (202.731, 175.237, 132.121)), (' A 444  LYS  HB2', ' A 447  GLY  HA3', -0.556, (209.783, 167.121, 93.54)), (' A 401  VAL HG11', ' A 451  TYR  OH ', -0.556, (205.163, 172.013, 103.645)), (' A 412  PRO  HB3', ' A 427  ASP  HA ', -0.555, (197.785, 193.152, 114.129)), (' L  92  TYR  CZ ', ' L  97  TYR  CZ ', -0.551, (211.265, 175.522, 86.841)), (' H  40  SER  HB2', ' H  43  LYS  HE3', -0.551, (212.587, 176.295, 67.25)), (' A 444  LYS  CG ', ' A 447  GLY  HA2', -0.537, (210.002, 165.51, 93.552)), (' L   2  ILE HD11', ' L  94  ARG  HD2', -0.534, (201.402, 168.818, 85.24)), (' H  93  MET  HE1', ' H  95  TYR  CZ ', -0.534, (216.832, 186.006, 72.646)), (' A 443  SER  HB3', ' A 499  PRO  HB3', -0.53, (213.577, 169.025, 96.638)), (' H  38  ARG  NH1', ' H  46  GLU  OE2', -0.528, (215.29, 174.151, 70.236)), (' H   6  GLU  H  ', ' H 110  GLN HE22', -0.527, (225.993, 187.488, 76.573)), (' H   3  GLN  NE2', ' H 108  TRP  O  ', -0.526, (218.887, 190.384, 80.545)), (' H  85  SER  O  ', ' H  87  ARG  NH1', -0.526, (224.985, 165.763, 67.787)), (' A 403  ARG  NH2', ' A 405  ASP  OD2', -0.524, (205.145, 183.115, 95.547)), (' A 449  TYR  O  ', ' A 451  TYR  N  ', -0.517, (200.131, 169.016, 97.48)), (' H  47  TRP  HZ3', ' L  96  PRO  HA ', -0.512, (211.356, 171.082, 82.562)), (' H  95  TYR  OH ', ' L  43  SER  O  ', -0.512, (215.402, 188.175, 72.039)), (' A 486  PHE  O  ', ' A 487  ASN  ND2', -0.51, (180.78, 179.058, 84.571)), (' A 357  ARG  CZ ', ' A 394  ASN  HA ', -0.509, (196.123, 177.808, 127.748)), (' H  60  TYR  HB2', ' H  61  PRO  HD2', -0.503, (216.607, 170.571, 80.667)), (' L  33  TYR  HE2', ' L  93  HIS  NE2', -0.502, (202.513, 174.792, 92.146)), (' H   1  GLU  HG2', ' H  27  PHE  HD1', -0.5, (222.681, 191.193, 88.725)), (' H  19  LYS  NZ ', ' H  80  TYR  HB3', -0.499, (230.44, 174.873, 80.115)), (' H  36  TRP  CG ', ' H  81  LEU HD22', -0.497, (221.85, 176.975, 78.996)), (' L  15  LEU  HA ', ' L 107  ILE HD11', -0.494, (194.215, 198.927, 66.831)), (' H  29  PHE  CD2', ' H  77  ASN  HB3', -0.493, (228.604, 186.086, 89.128)), (' H  52  SER  HB3', ' H  57  TYR  HB2', -0.492, (220.222, 172.89, 92.0)), (' H  29  PHE  O  ', ' H  53  SER  OG ', -0.49, (224.808, 180.562, 93.384)), (' H  74  ASN  ND2', ' H  74  ASN  O  ', -0.485, (230.274, 183.183, 93.124)), (' H  98  ASN  HB3', ' H 101  ASN  ND2', -0.484, (216.861, 184.562, 88.994)), (' A 453  TYR  CE1', ' A 493  GLN  HB3', -0.482, (196.187, 177.813, 95.662)), (' L  11  MET  HE1', ' L 103  THR  HB ', -0.482, (197.857, 186.692, 69.752)), (' L  63  PHE  CE2', ' L  74  LEU HD23', -0.48, (198.362, 189.851, 79.382)), (' H  11  LEU  HB2', ' H 117  SER  HB2', -0.479, (228.359, 177.937, 60.833)), (' L  48  TRP  O  ', ' L  56  ALA  N  ', -0.478, (204.037, 192.883, 86.116)), (' A 437  ASN HD21', ' A 439  ASN  HB2', -0.476, (214.405, 175.885, 101.961)), (' H  88  SER  HA ', ' H 116  VAL HG21', -0.47, (222.891, 172.455, 62.528)), (' H   1  GLU  HG3', ' H 107  TYR  CE2', -0.47, (220.732, 192.685, 86.367)), (' H  29  PHE  HB3', ' H  72  ARG  NH1', -0.469, (226.311, 182.26, 90.613)), (' A 444  LYS  HB2', ' A 447  GLY  CA ', -0.466, (209.897, 166.594, 93.922)), (' A 421  TYR  CD1', ' A 457  ARG  HB3', -0.465, (188.379, 184.056, 100.949)), (' H   1  GLU  OE1', ' H   2  VAL  N  ', -0.463, (224.234, 193.702, 85.109)), (' A 383  SER  H  ', ' A 386  LYS  HZ2', -0.46, (208.919, 192.283, 125.978)), (' H  83  MET  N  ', ' H  83  MET  SD ', -0.46, (226.331, 171.512, 74.19)), (' L  95  SER  N  ', ' L  96  PRO  CD ', -0.457, (207.712, 169.1, 85.761)), (' A 398  ASP  OD2', ' A 423  TYR  OH ', -0.456, (197.286, 181.017, 114.644)), (' A 450  ASN  N  ', ' A 450  ASN  ND2', -0.453, (202.222, 166.531, 97.775)), (' L  39  GLN  NE2', ' L  40  LYS  O  ', -0.45, (212.003, 190.203, 70.32)), (' H   1  GLU  HG2', ' H  27  PHE  CD1', -0.45, (222.54, 191.492, 88.299)), (' A 417  LYS  HE2', ' A 455  LEU HD12', -0.45, (193.354, 183.239, 95.873)), (' A 439  ASN  O  ', ' A 443  SER  OG ', -0.449, (213.491, 170.68, 99.663)), (' A 454  ARG HH22', ' A 469  SER  HB2', -0.444, (185.511, 175.891, 103.158)), (' A 451  TYR  CD2', ' A 497  PHE  CD2', -0.443, (204.714, 172.355, 99.637)), (' L  11  MET  HB3', ' L  13  VAL HG23', -0.441, (193.192, 190.591, 66.733)), (' A 383  SER  H  ', ' A 386  LYS  NZ ', -0.438, (208.987, 192.853, 125.859)), (' A 449  TYR  OH ', ' L  94  ARG  NE ', -0.435, (203.488, 168.263, 87.659)), (' H  52  SER  O  ', ' H  56  THR  N  ', -0.433, (223.61, 174.664, 93.107)), (' H   1  GLU  H3 ', ' H 107  TYR  HE2', -0.433, (220.669, 193.807, 86.026)), (' L  95  SER  CB ', ' L  96  PRO  HD3', -0.433, (208.531, 168.302, 85.324)), (' A 451  TYR  O  ', ' A 494  SER  CA ', -0.429, (198.943, 172.24, 96.3)), (' A 357  ARG  CZ ', ' A 359  SER  HB2', -0.428, (196.565, 175.781, 128.637)), (' A 452  LEU  HA ', ' A 493  GLN  O  ', -0.427, (196.783, 173.806, 97.475)), (' A 502  GLY  HA3', ' H 101  ASN  HA ', -0.427, (215.177, 181.106, 93.611)), (' A 490  PHE  CE2', ' A 492  LEU  HB2', -0.424, (191.319, 172.284, 95.673)), (' L  68  SER  HA ', ' L  72  TYR  CE2', -0.421, (194.143, 180.256, 86.318)), (' H   1  GLU  HG3', ' H 107  TYR  HE2', -0.419, (221.228, 192.995, 86.435)), (' H  20  LEU HD21', ' H 114  VAL HG21', -0.419, (224.919, 179.656, 72.523)), (' L   4  LEU  HB2', ' L 100  GLY  HA2', -0.417, (202.099, 177.843, 76.035)), (' L  23  CYS  HB2', ' L  36  TRP  CZ2', -0.415, (197.889, 182.275, 78.275)), (' H   7  SER  HB3', ' H  21  SER  OG ', -0.415, (230.927, 182.419, 78.006)), (' A 407  VAL HG11', ' A 508  TYR  HD2', -0.415, (209.297, 182.03, 104.99)), (' A 402  ILE HD12', ' A 406  GLU  HG3', -0.414, (203.392, 182.626, 102.758)), (' H  37  VAL HG22', ' H  47  TRP  HA ', -0.411, (214.367, 177.868, 78.731)), (' A 426  PRO  HD3', ' A 463  PRO  HB3', -0.411, (192.293, 187.4, 115.031)), (' L  90  HIS  HD2', ' L  99  PHE  CD2', -0.408, (207.78, 180.612, 78.733)), (' A 437  ASN  HA ', ' A 508  TYR  CD1', -0.408, (211.845, 178.063, 104.869)), (' A 529  LYS  HA ', ' A 529  LYS  HD3', -0.406, (217.966, 180.285, 138.092)), (' A 462  LYS  HD2', ' A 463  PRO  O  ', -0.405, (188.606, 184.195, 114.709)), (' H  33  THR HG22', ' H  52  SER  HA ', -0.404, (219.518, 176.864, 91.63)), (' A 366  SER  HA ', ' A 369  TYR  CZ ', -0.4, (215.403, 183.607, 125.248))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
