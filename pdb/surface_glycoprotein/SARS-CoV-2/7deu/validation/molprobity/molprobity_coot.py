# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', ' 102 ', 'PRO', None, (-23.459, -42.133, -23.782)), ('B', ' 230 ', 'PRO', None, (-36.452, -55.580000000000005, -30.284000000000002))]
data['rota'] = [('A', ' 386 ', 'LYS', 0.0, (13.298, -18.430000000000003, -42.208))]
data['cbeta'] = [('A', ' 403 ', 'ARG', ' ', 0.2827701148488004, (-14.784000000000004, -30.123, -47.583))]
data['probe'] = [(' B  73  HIS  CE1', ' B  75  SER  HB2', -0.695, (-37.596, -26.064, -35.088)), (' A 450  ASN  HA ', ' A 701  HOH  O  ', -0.636, (-14.384, -43.93, -52.853)), (' A 445  VAL HG23', ' A 446  GLY  H  ', -0.615, (-20.836, -37.995, -63.125)), (' A 499  PRO  O  ', ' A 500  THR  OG1', -0.601, (-21.478, -29.013, -60.411)), (' A 336  CYS  HB2', ' A 363  ALA  HB2', -0.58, (13.987, -30.38, -50.55)), (' A 365  TYR  CD2', ' A 387  LEU  HB3', -0.575, (12.526, -23.881, -45.221)), (' A 362  VAL HG13', ' A 526  GLY  HA2', -0.551, (18.086, -26.91, -48.3)), (' A 443  SER  OG ', ' A 499  PRO  HD3', -0.535, (-15.394, -32.384, -60.521)), (' B  40  SER  HB2', ' B  43  LYS  HB2', -0.532, (-50.785, -52.524, -19.595)), (' A 349  SER  HA ', ' A 735  HOH  O  ', -0.522, (-9.748, -38.515, -48.504)), (' B 169  ALA  HB3', ' B 224  GLN  HG2', -0.509, (-33.125, -51.249, -18.365)), (' B  12  VAL  O  ', ' B 118  VAL  HA ', -0.505, (-60.617, -42.838, -27.174)), (' A 403  ARG  HB2', ' A 406  GLU  OE1', -0.491, (-14.357, -31.275, -46.348)), (' B  12  VAL HG12', ' B  13  LYS  H  ', -0.486, (-60.854, -40.707, -30.983)), (' A 444  LYS  O  ', ' A 499  PRO  HD2', -0.466, (-17.915, -33.309, -61.021)), (' B  73  HIS  HE1', ' B  75  SER  HB2', -0.462, (-37.964, -25.336, -34.616)), (' B  12  VAL  CG1', ' B  16  ALA  HB3', -0.454, (-59.395, -40.333, -32.333)), (' B  12  VAL HG21', ' B  18  VAL  CG2', -0.451, (-56.112, -39.132, -29.642)), (' A 364  ASP  OD2', ' A 367  VAL  N  ', -0.448, (12.667, -21.653, -52.562)), (' B 181  PRO  HB2', ' B 190  TYR  CD1', -0.436, (-31.527, -45.309, -13.83)), (' B  11  LEU HD23', ' B 117  THR  HB ', -0.436, (-59.823, -41.442, -23.05)), (' A 503  VAL  HA ', ' A 506  GLN  CD ', -0.436, (-15.777, -25.238, -55.554)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.435, (1.247, -36.983, -44.933)), (' B 139  MET  HE3', ' B 158  CYS  SG ', -0.428, (-35.58, -59.434, -17.392)), (' B  20  ILE HD11', ' B  81  MET  HE2', -0.424, (-46.602, -40.884, -27.226)), (' A 449  TYR  O  ', ' A 701  HOH  O  ', -0.417, (-15.065, -43.372, -52.816)), (' B  81  MET  HE1', ' B  94  TYR  CD2', -0.41, (-47.255, -43.679, -26.677)), (' B 110  TRP  CE3', ' B 179  PRO  HD2', -0.41, (-40.844, -44.161, -17.364)), (' A 347  PHE  CE2', ' A 399  SER  HB2', -0.405, (-1.413, -34.712, -50.315)), (' B 183  ILE  HA ', ' B 188  SER  O  ', -0.403, (-27.592, -49.461, -11.733)), (' A 359  SER  HA ', ' A 524  VAL HG22', -0.403, (15.694, -35.039, -43.345)), (' A 501  ASN  ND2', ' A 713  HOH  O  ', -0.401, (-21.679, -30.852, -53.0))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
