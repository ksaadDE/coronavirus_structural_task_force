# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 110 ', 'LEU', 0.00975037902627211, (148.007, 210.38700000000006, 122.913)), ('A', ' 449 ', 'TYR', 0.028263030375978243, (179.401, 153.759, 101.013)), ('A', ' 481 ', 'ASN', 0.007481676005604246, (190.474, 132.41400000000002, 114.04299999999999)), ('A', ' 621 ', 'PRO', 0.0, (175.91900000000007, 202.627, 157.076)), ('A', ' 720 ', 'ILE', 0.07029417610446939, (152.95900000000003, 181.967, 204.575)), ('B', '  32 ', 'PHE', 0.04237221550723344, (209.462, 154.507, 153.62)), ('B', '  97 ', 'LYS', 0.010877022339930096, (226.113, 163.32000000000005, 139.935)), ('B', ' 110 ', 'LEU', 0.02794115891608888, (209.12600000000006, 151.34400000000005, 122.21399999999998)), ('B', ' 165 ', 'ASN', 0.034992957500878656, (205.928, 158.88800000000006, 111.98900000000002)), ('B', ' 198 ', 'ASP', 0.002597890158208776, (193.202, 161.297, 129.731)), ('B', ' 334 ', 'ASN', 0.00690036431094823, (158.004, 121.128, 126.541)), ('B', ' 350 ', 'VAL', 0.01097006301476912, (155.65, 136.147, 98.953)), ('B', ' 385 ', 'THR', 0.030520740230819354, (174.488, 126.361, 115.893)), ('B', ' 434 ', 'ILE', 0.016198014888751888, (167.956, 129.69400000000005, 110.175)), ('B', ' 448 ', 'ASN', 0.03253755340227609, (161.01300000000006, 126.27400000000003, 95.108)), ('B', ' 496 ', 'GLY', 0.09896423490729897, (163.793, 129.852, 93.23299999999999)), ('B', ' 630 ', 'THR', 0.06798578393782809, (201.881, 144.458, 155.109)), ('B', ' 631 ', 'PRO', 0.0621712689928178, (204.963, 144.898, 157.451)), ('B', ' 709 ', 'ASN', 0.03734364611341169, (172.82300000000004, 137.29300000000006, 213.45)), ('B', ' 814 ', 'LYS', 0.03714725324241584, (186.506, 187.226, 186.64899999999997)), ('C', ' 187 ', 'LYS', 0.045048326006114345, (126.27600000000004, 112.211, 150.91)), ('C', ' 213 ', 'VAL', 0.007942579846936701, (123.13199999999998, 115.98700000000002, 151.787)), ('C', ' 347 ', 'PHE', 0.030071592254862178, (144.689, 183.51000000000005, 111.777)), ('C', ' 418 ', 'ILE', 0.00512602, (158.755, 183.321, 117.466)), ('C', ' 447 ', 'GLY', 0.03365652780604654, (155.59400000000002, 183.687, 98.70299999999999)), ('C', ' 626 ', 'ALA', 0.016240596380593667, (120.751, 151.254, 160.328)), ('C', ' 634 ', 'ARG', 0.0, (126.94600000000007, 146.466, 158.529)), ('C', ' 640 ', 'SER', 0.007315839630252497, (118.756, 146.359, 171.832)), ('C', ' 663 ', 'ASP', 0.03453977630633046, (135.297, 148.68100000000007, 182.897)), ('C', ' 706 ', 'ALA', 0.03741231896791501, (134.57, 161.27, 209.353))]
data['omega'] = []
data['rota'] = [('A', ' 130 ', 'VAL', 0.08076485375076099, (141.862, 203.986, 121.319)), ('A', ' 294 ', 'ASP', 0.13110661896409506, (158.98, 200.796, 158.55)), ('A', ' 350 ', 'VAL', 0.003743256125040713, (182.532, 155.53000000000006, 113.887)), ('A', ' 437 ', 'ASN', 0.23361403548503865, (172.251, 165.762, 107.40399999999998)), ('A', ' 461 ', 'LEU', 0.17452188702611432, (184.22300000000004, 149.414, 125.115)), ('A', ' 493 ', 'GLN', 0.11580028945184695, (180.76300000000006, 147.13600000000005, 107.986)), ('A', ' 539 ', 'VAL', 0.20688102309176332, (181.60700000000006, 193.036, 144.032)), ('A', ' 544 ', 'ASN', 0.027092233911412956, (186.233, 182.551, 133.748)), ('A', ' 547 ', 'THR', 0.12782285363681134, (180.846, 183.303, 139.656)), ('A', ' 588 ', 'THR', 0.11613823311284482, (185.644, 187.74, 151.897)), ('A', ' 608 ', 'VAL', 0.01815586604457933, (161.194, 200.924, 166.68)), ('A', ' 621 ', 'PRO', 0.002453915951707055, (175.91900000000007, 202.627, 157.076)), ('A', ' 739 ', 'THR', 0.11347747963411903, (144.254, 158.911, 155.354)), ('A', ' 760 ', 'CYS', 0.19624515022176625, (149.883, 155.826, 157.55)), ('A', ' 996 ', 'LEU', 0.056433695025244694, (151.096, 166.56, 146.958)), ('B', '  29 ', 'THR', 0.14126450503514398, (214.503, 148.359, 150.562)), ('B', ' 116 ', 'SER', 0.1412354043854547, (205.832, 155.17100000000005, 121.22799999999998)), ('B', ' 122 ', 'ASN', 0.05268115566715632, (219.885, 167.196, 130.013)), ('B', ' 212 ', 'LEU', 0.040461876370818536, (222.874, 157.03800000000007, 150.932)), ('B', ' 286 ', 'THR', 0.14577257044243713, (203.68500000000006, 167.80200000000005, 153.353)), ('B', ' 628 ', 'GLN', 0.2818384189074272, (198.425, 137.971, 154.981)), ('B', ' 632 ', 'THR', 0.05912593468624936, (202.319, 145.387, 160.261)), ('B', ' 634 ', 'ARG', 0.15842902287192867, (199.883, 140.223, 159.514)), ('B', ' 773 ', 'GLU', 0.06607154968095609, (165.433, 177.77300000000005, 175.61)), ('B', ' 907 ', 'ASN', 0.2762198916370242, (174.088, 166.81100000000006, 211.114)), ('B', ' 950 ', 'ASN', 0.25385206778103553, (181.962, 166.067, 174.025)), ('B', '1127 ', 'ASP', 0.22349734223824372, (160.20399999999995, 137.471, 225.528)), ('C', ' 102 ', 'ARG', 0.05571516430736899, (130.264, 116.87, 134.048)), ('C', ' 130 ', 'VAL', 0.2610387556248402, (138.973, 125.743, 125.414)), ('C', ' 210 ', 'ILE', 0.13059198366800037, (128.42200000000005, 114.82500000000003, 154.27)), ('C', ' 226 ', 'LEU', 0.1657929843164043, (144.128, 122.963, 141.401)), ('C', ' 227 ', 'VAL', 0.0, (145.808, 124.872, 138.488)), ('C', ' 234 ', 'ASN', 0.04521781959436315, (137.65400000000005, 137.77, 130.409)), ('C', ' 294 ', 'ASP', 0.10467474849244446, (131.267, 142.177, 161.905)), ('C', ' 328 ', 'ARG', 0.1472901313680043, (124.72800000000007, 174.13900000000007, 139.508)), ('C', ' 408 ', 'ARG', 0.02800437380157592, (157.337, 173.16700000000006, 117.557)), ('C', ' 523 ', 'THR', 0.027909324798238908, (130.71500000000006, 182.341, 131.83)), ('C', ' 544 ', 'ASN', 0.0068964498992193325, (130.565, 175.569, 137.584)), ('C', ' 565 ', 'PHE', 0.04462256480875007, (132.635, 182.268, 146.56)), ('C', ' 592 ', 'PHE', 0.0454881844022707, (132.664, 162.59100000000007, 160.514)), ('C', ' 603 ', 'ASN', 0.06814850620280924, (137.029, 134.658, 175.493)), ('C', ' 608 ', 'VAL', 0.06960607556102924, (129.941, 143.779, 170.289)), ('C', ' 615 ', 'VAL', 0.204137535209524, (128.87, 161.96500000000006, 166.713)), ('C', ' 622 ', 'VAL', 0.2522322956518188, (120.572, 157.44000000000005, 159.597)), ('C', ' 628 ', 'GLN', 0.0031429450544689314, (121.489, 154.73500000000007, 155.868)), ('C', ' 634 ', 'ARG', 0.0, (126.94600000000007, 146.466, 158.529)), ('C', ' 702 ', 'GLU', 0.005627687331074244, (132.32700000000006, 157.956, 197.391)), ('C', ' 752 ', 'LEU', 0.24352615619652596, (174.27200000000005, 156.03, 144.195)), ('C', ' 873 ', 'TYR', 0.2266441285008902, (175.408, 142.247, 190.356)), ('C', ' 935 ', 'GLN', 0.2975928961849013, (155.426, 133.75, 193.581)), ('C', ' 996 ', 'LEU', 0.1428448866908282, (163.313, 153.015, 146.546)), ('C', '1082 ', 'CYS', 0.06221176185501115, (147.04899999999995, 172.399, 228.68)), ('C', '1106 ', 'GLN', 0.22346577529633138, (152.955, 157.874, 216.992))]
data['cbeta'] = [('A', ' 468 ', 'ILE', ' ', 0.2726687358719106, (191.78600000000003, 149.595, 115.55199999999999)), ('A', ' 487 ', 'ASN', ' ', 0.2822225019019258, (177.96, 129.38200000000006, 112.418)), ('A', ' 621 ', 'PRO', ' ', 0.32674963474201746, (176.933, 203.17600000000004, 156.073)), ('B', ' 200 ', 'TYR', ' ', 0.4443695032310011, (196.814, 158.475, 127.216))]
data['probe'] = [(' C 342  PHE  CG ', ' C1305  NAG  H82', -0.564, (137.971, 175.28, 115.225)), (' C 326  ILE HD12', ' C 539  VAL HG21', -0.505, (124.079, 168.637, 147.472)), (' B 342  PHE  CZ ', ' B 436  TRP  CB ', -0.496, (167.957, 123.388, 106.52)), (' C1043  CYS  HB2', ' C1048  HIS  CG ', -0.48, (160.494, 152.692, 198.831)), (' C1097  SER  HB2', ' C1102  TRP  CD2', -0.472, (142.461, 162.349, 225.66)), (' C 233  ILE HG23', ' C1301  NAG  H82', -0.469, (136.779, 134.806, 127.294)), (' A1097  SER  HB2', ' A1102  TRP  CD2', -0.465, (175.68, 184.251, 222.192)), (' B 980  ILE  H  ', ' B 980  ILE HD12', -0.462, (174.605, 175.347, 140.248)), (' B1126  CYS  SG ', ' B1132  ILE HD13', -0.461, (164.792, 141.667, 225.811)), (' B 351  TYR  HA ', ' B 422  ASN  CB ', -0.437, (152.232, 138.396, 98.292)), (' B 715  PRO  HD3', ' C 894  LEU HD11', -0.436, (180.797, 151.779, 208.856)), (' C 980  ILE  H  ', ' C 980  ILE HD12', -0.43, (164.548, 146.041, 141.305)), (' B 349  SER  CB ', ' B 452  ARG  H  ', -0.427, (157.306, 131.791, 98.621)), (' A 104  TRP  HB2', ' A 106  PHE  CE1', -0.426, (142.548, 208.544, 131.04)), (' A 712  ILE  HB ', ' A1077  THR HG21', -0.425, (175.803, 183.464, 213.015)), (' C 559  PHE  CD2', ' C 584  ILE HD12', -0.415, (127.868, 184.41, 148.026)), (' C 342  PHE  CB ', ' C1305  NAG  H82', -0.414, (137.929, 175.811, 114.987)), (' C1078  ALA  CB ', ' C1133  VAL HG22', -0.402, (142.824, 168.674, 224.038)), (' B 198  ASP  C  ', ' B 200  TYR  H  ', -0.401, (195.149, 161.687, 128.849))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
