# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('I', ' 332 ', 'ILE', 0.04264964862779424, (239.465, 292.014, 219.734)), ('I', ' 334 ', 'ASN', 0.0005651639999999999, (244.444, 294.0110000000001, 217.537))]
data['omega'] = [('A', ' 153 ', 'PRO', None, (307.21599999999995, 273.301, 169.487)), ('A', ' 155 ', 'PRO', None, (309.704, 270.65999999999997, 174.808)), ('A', ' 195 ', 'PRO', None, (328.423, 295.4250000000001, 183.016)), ('A', ' 220 ', 'ASP', None, (318.48499999999996, 300.46599999999995, 174.946)), ('B', ' 153 ', 'PRO', None, (220.34800000000007, 273.68299999999994, 153.845)), ('B', ' 155 ', 'PRO', None, (216.65200000000002, 276.247, 158.751)), ('B', ' 195 ', 'PRO', None, (189.35400000000007, 261.105, 153.359)), ('B', ' 220 ', 'ASP', None, (199.98700000000002, 253.067, 151.65)), ('D', ' 153 ', 'PRO', None, (240.094, 191.70700000000002, 156.206)), ('D', ' 155 ', 'PRO', None, (236.88099999999997, 190.116, 161.349)), ('D', ' 195 ', 'PRO', None, (254.22, 161.651, 163.841)), ('D', ' 220 ', 'ASP', None, (260.015, 171.07100000000005, 156.201)), ('F', '  95 ', 'PRO', None, (298.13599999999997, 248.72700000000003, 186.532)), ('F', ' 141 ', 'PRO', None, (306.14699999999993, 283.4790000000001, 202.087)), ('H', '  95 ', 'PRO', None, (221.77399999999994, 207.251, 177.149)), ('H', ' 141 ', 'PRO', None, (249.99499999999995, 179.91, 187.168)), ('M', '  95 ', 'PRO', None, (236.92200000000005, 282.2280000000001, 182.947)), ('M', ' 141 ', 'PRO', None, (203.411, 264.647, 181.427))]
data['rota'] = [('A', '  51 ', 'ILE', 0.07905114456040273, (306.498, 245.35700000000003, 175.069)), ('A', ' 180 ', 'LEU', 0.12530970378240133, (301.9549999999999, 280.01099999999997, 171.8)), ('A', ' 183 ', 'LEU', 0.09779750466139905, (309.682, 280.98500000000007, 178.528)), ('B', '  69 ', 'ILE', 0.13401628970531573, (238.37500000000006, 288.114, 167.555)), ('B', '  82 ', 'LEU', 0.27208547523138304, (238.07400000000007, 281.086, 163.431)), ('B', ' 158 ', 'VAL', 0.012154006061781561, (206.318, 273.93899999999996, 156.219)), ('D', '   2 ', 'VAL', 0.04317688405076738, (215.109, 185.131, 169.829)), ('D', ' 156 ', 'VAL', 0.1247090175649552, (238.543, 185.444, 161.663)), ('E', '  33 ', 'THR', 0.2776358403275779, (265.589, 204.63, 234.12199999999999)), ('E', ' 208 ', 'THR', 0.1805039291117714, (280.991, 203.274, 230.415)), ('E', ' 210 ', 'ILE', 0.05321117976831254, (279.447, 197.27900000000002, 232.355)), ('E', ' 312 ', 'ILE', 0.0863465845516353, (248.36200000000005, 215.66600000000003, 250.456)), ('E', ' 331 ', 'ASN', 0.11702623804008562, (212.10199999999995, 213.626, 213.17)), ('E', ' 332 ', 'ILE', 0.0, (211.69299999999998, 216.797, 211.10899999999998)), ('E', ' 362 ', 'VAL', 0.003150532575091347, (214.48299999999995, 221.966, 204.41399999999996)), ('E', ' 569 ', 'ILE', 0.21443970175349883, (221.73700000000002, 231.527, 238.551)), ('E', ' 599 ', 'THR', 0.08361247044534781, (252.657, 210.342, 249.196)), ('E', ' 738 ', 'CYS', 0.05202265143774901, (260.919, 248.75500000000005, 239.404)), ('E', '1081 ', 'ILE', 0.15226730362972635, (229.139, 221.2880000000001, 307.016)), ('E', '1104 ', 'VAL', 0.034951892741749695, (239.78900000000004, 220.87100000000007, 303.7)), ('F', '  88 ', 'CYS', 0.02101726594811139, (302.42499999999995, 256.03600000000006, 197.574)), ('F', ' 117 ', 'ILE', 0.229924128295689, (311.037, 295.9040000000001, 187.123)), ('H', '  78 ', 'VAL', 0.03796876920758055, (230.565, 180.16900000000004, 193.293)), ('H', ' 132 ', 'VAL', 0.007286087629107849, (259.321, 181.954, 163.69)), ('H', ' 136 ', 'LEU', 0.14645558519542656, (253.775, 177.954, 175.449)), ('I', ' 208 ', 'THR', 0.18892777053213453, (192.12300000000005, 235.037, 231.684)), ('I', ' 312 ', 'ILE', 0.06806895707478851, (220.65900000000008, 252.886, 252.944)), ('I', ' 333 ', 'THR', 0.009765971990934472, (243.1, 292.43400000000014, 220.718)), ('I', ' 362 ', 'VAL', 0.01092593464905926, (243.23900000000006, 288.3730000000001, 214.38)), ('I', ' 503 ', 'VAL', 0.25396815011615514, (236.20300000000003, 299.21300000000014, 180.001)), ('I', ' 599 ', 'THR', 0.21685874560219018, (213.59100000000007, 252.63300000000004, 253.085)), ('I', ' 895 ', 'GLN', 0.1345855466395113, (235.34, 215.50700000000006, 288.139)), ('I', ' 912 ', 'THR', 0.2969652785265877, (230.62500000000009, 235.54000000000005, 298.28)), ('I', ' 961 ', 'THR', 0.2405507950483605, (229.8180000000001, 236.917, 239.47199999999998)), ('I', '1081 ', 'ILE', 0.16259804102748643, (236.1020000000001, 253.4610000000001, 311.302)), ('I', '1104 ', 'VAL', 0.20642182977349713, (230.3510000000001, 245.53100000000006, 305.902)), ('K', '  24 ', 'LEU', 0.16979108963092845, (290.816, 288.5020000000001, 230.268)), ('K', '  33 ', 'THR', 0.20686952732708705, (270.08899999999994, 280.27700000000004, 244.55299999999997)), ('K', '  63 ', 'THR', 0.16117903372647702, (281.607, 283.001, 232.847)), ('K', ' 208 ', 'THR', 0.16116994354805944, (264.796, 294.70600000000013, 241.45299999999997)), ('K', ' 210 ', 'ILE', 0.2045407736204804, (270.41, 295.8550000000001, 244.773)), ('K', ' 312 ', 'ILE', 0.07850577250721456, (266.405, 257.18, 256.496)), ('K', ' 332 ', 'ILE', 0.0024823661152979055, (285.56299999999993, 230.638, 216.183)), ('K', ' 333 ', 'THR', 0.0027198671887163073, (283.3, 227.62300000000002, 215.679)), ('K', ' 393 ', 'THR', 0.1916724273807935, (276.67299999999994, 238.598, 203.31300000000002)), ('K', ' 524 ', 'VAL', 0.006301065150182694, (280.847, 236.269, 207.963)), ('K', ' 525 ', 'CYS', 0.27256120455393773, (282.652, 238.29500000000002, 210.696)), ('K', ' 546 ', 'LEU', 0.13557910060530703, (274.16, 236.99400000000003, 227.18000000000004)), ('K', ' 738 ', 'CYS', 0.07022591461573283, (234.5980000000001, 254.54600000000002, 238.157)), ('K', ' 977 ', 'LEU', 0.08971256103465099, (239.724, 261.457, 226.904)), ('K', '1018 ', 'ILE', 0.13588228851944684, (243.03500000000008, 249.622, 260.938)), ('K', '1081 ', 'ILE', 0.08615433268100925, (260.244, 231.1220000000001, 310.369)), ('M', '  88 ', 'CYS', 0.0, (223.20800000000003, 280.77100000000013, 187.915)), ('M', '  89 ', 'GLN', 0.21425147799881403, (225.99500000000003, 283.1910000000001, 187.015)), ('M', ' 206 ', 'VAL', 0.006958661843946138, (202.21600000000007, 250.00500000000002, 172.739))]
data['cbeta'] = []
data['probe'] = [(' I 333  THR  O  ', ' I 334  ASN  HB2', -1.072, (246.293, 293.558, 219.133)), (' I 332  ILE HG21', ' I 335  LEU HD21', -0.873, (238.852, 293.724, 215.804)), (' I 333  THR  O  ', ' I 333  THR HG23', -0.82, (245.829, 292.015, 219.781)), (' I 333  THR  O  ', ' I 334  ASN  CB ', -0.687, (245.646, 293.06, 218.649)), (' I 332  ILE  CG2', ' I 335  LEU HD21', -0.639, (239.333, 293.224, 216.403)), (' F 106  ILE  H  ', ' F 166  GLN HE22', -0.606, (310.616, 274.445, 202.313)), (' I 332  ILE HG21', ' I 335  LEU  CD2', -0.599, (239.467, 293.945, 215.893)), (' I 332  ILE  CG2', ' I 335  LEU  CD2', -0.588, (239.479, 293.366, 215.872)), (' F  21  ILE  HB ', ' F  73  LEU  HB3', -0.587, (305.662, 259.076, 204.495)), (' D  90  THR HG23', ' D 116  THR  HA ', -0.585, (238.96, 198.577, 161.853)), (' I 333  THR  CG2', ' I 333  THR  O  ', -0.577, (245.088, 291.863, 220.032)), (' E1012  LEU  HB3', ' K1013  ILE HG21', -0.576, (248.886, 244.552, 251.782)), (' K 396  TYR  HB2', ' K 514  SER  HB2', -0.576, (282.284, 237.02, 194.27)), (' I  24  LEU  HB2', ' I  78  ARG  HG2', -0.575, (184.204, 259.489, 222.131)), (' E 396  TYR  HB2', ' E 514  SER  HB2', -0.575, (215.413, 224.594, 188.212)), (' M  38  GLN  HB3', ' M  85  ASP  HB2', -0.574, (216.448, 280.314, 179.435)), (' I 905  ARG  HD2', ' I1049  LEU  HB3', -0.559, (231.468, 230.964, 285.748)), (' A  47  TYR  HB2', ' F  96  TYR  H  ', -0.556, (300.359, 252.01, 185.139)), (' E 333  THR HG23', ' E 334  ASN  H  ', -0.55, (211.379, 221.948, 210.222)), (' I 905  ARG  HB3', ' I1049  LEU HD22', -0.548, (231.689, 232.569, 287.537)), (' K 885  GLY  HA3', ' K 901  GLN HE21', -0.547, (234.099, 252.099, 289.75)), (' K 328  ARG HH22', ' K 585  LEU HD12', -0.547, (287.002, 234.919, 231.779)), (' E1069  PRO  HD2', ' I 891  GLY  HA3', -0.547, (247.049, 219.08, 284.891)), (' K 327  VAL HG12', ' K 542  ASN  HB2', -0.546, (280.269, 241.589, 222.655)), (' A  10  SER  HA ', ' A 115  LEU  HG ', -0.538, (307.276, 263.979, 171.502)), (' K 189  LEU  HB2', ' K 210  ILE HG12', -0.537, (271.145, 294.337, 241.319)), (' A  11  LEU  HB2', ' A 153  PRO  HG3', -0.537, (306.321, 269.508, 168.045)), (' E 720  ILE HG13', ' E 923  ILE HG23', -0.534, (258.86, 222.117, 288.905)), (' E 900  MET  O  ', ' K1107  ARG  NH2', -0.534, (258.511, 235.447, 295.465)), (' M 113  PRO  HB3', ' M 139  PHE  HB3', -0.529, (201.026, 262.357, 174.85)), (' K 599  THR  HB ', ' K 608  VAL HG12', -0.526, (271.131, 264.829, 254.955)), (' I 448  ASN  HB3', ' I 497  PHE  HB2', -0.521, (245.306, 307.386, 184.227)), (' I1090  PRO  O  ', ' K 913  GLN  NE2', -0.521, (240.148, 247.549, 302.96)), (' I 902  MET  SD ', ' I 905  ARG  NH2', -0.519, (228.035, 228.818, 287.42)), (' I  97  LYS  HB3', ' I 186  PHE  HA ', -0.517, (182.603, 241.993, 229.021)), (' K  99  ASN  ND2', ' K 178  ASP  O  ', -0.516, (269.407, 305.611, 231.775)), (' M 106  ILE  H  ', ' M 166  GLN HE22', -0.513, (203.115, 275.043, 181.691)), (' I 273  ARG  NH1', ' I 292  ALA  O  ', -0.512, (211.641, 253.953, 234.832)), (' E 725  GLU  OE2', ' E1028  LYS  NZ ', -0.512, (250.489, 231.346, 271.114)), (' E  99  ASN  ND2', ' E 178  ASP  O  ', -0.512, (286.703, 197.544, 218.495)), (' D 148  VAL  HB ', ' D 183  LEU  HB2', -0.511, (246.34, 183.31, 160.819)), (' K  39  PRO  HG3', ' K  51  THR HG21', -0.51, (258.471, 274.262, 236.411)), (' I  99  ASN  ND2', ' I 178  ASP  O  ', -0.507, (182.034, 235.337, 220.478)), (' B  53  TYR  O  ', ' B  71  ARG  NH1', -0.506, (238.545, 299.089, 171.743)), (' A  20  LEU HD21', ' A 115  LEU HD11', -0.506, (308.684, 261.222, 172.564)), (' E 807  PRO  HB2', ' E 814  LYS  HG2', -0.505, (274.82, 234.898, 274.562)), (' K 780  GLU  O  ', ' K 784  GLN  NE2', -0.502, (232.485, 248.379, 271.277)), (' M 144  ILE HD11', ' M 196  ALA  HB1', -0.502, (204.459, 258.952, 175.431)), (' I 317  ASN  ND2', ' K 737  ASP  OD2', -0.501, (228.7, 256.874, 239.593)), (' F 128  GLY  HA2', ' F 183  LYS  HD2', -0.499, (305.617, 296.934, 167.177)), (' D 160  TRP  HE1', ' D 185  SER  HG ', -0.498, (244.309, 175.852, 166.228)), (' I 331  ASN  OD1', ' I 580  GLN  HG2', -0.496, (236.538, 289.59, 225.78)), (' I 332  ILE  N  ', ' I 332  ILE HD13', -0.496, (238.15, 290.922, 219.663)), (' I 380  TYR  OH ', ' M  93  ARG  NH1', -0.496, (240.559, 281.821, 188.205)), (' E  68  ILE HG22', ' E 262  ALA  HA ', -0.495, (276.078, 187.732, 218.713)), (' E 189  LEU  HB2', ' E 210  ILE HG12', -0.495, (277.859, 198.645, 229.075)), (' F 108  ARG  NH1', ' F 170  ASP  O  ', -0.494, (315.968, 280.129, 202.329)), (' I 905  ARG  O  ', ' I1036  GLN  NE2', -0.493, (233.776, 233.624, 288.831)), (' I 357  ARG  NH1', ' I 394  ASN  OD1', -0.491, (255.305, 283.4, 208.102)), (' K  53  ASP  OD2', ' K 195  LYS  NZ ', -0.49, (260.639, 276.011, 230.087)), (' E1090  PRO  O  ', ' I 913  GLN  NE2', -0.489, (233.745, 229.116, 300.531)), (' E 780  GLU  O  ', ' E 784  GLN  NE2', -0.489, (257.03, 244.561, 272.692)), (' E 418  ILE  HA ', ' E 422  ASN  HB2', -0.487, (210.325, 219.218, 172.991)), (' D  66  ARG  NH2', ' D  84  SER  O  ', -0.487, (232.859, 210.104, 160.542)), (' I1089  PHE  HB3', ' K 913  GLN HE21', -0.485, (241.239, 249.022, 304.061)), (' K 104  TRP  HE1', ' K 119  ILE HD12', -0.483, (265.582, 289.386, 222.333)), (' E 448  ASN  HB3', ' E 497  PHE  HB2', -0.477, (196.799, 208.495, 176.544)), (' H 149  LYS  HB2', ' H 193  THR  HB ', -0.477, (267.127, 181.844, 172.174)), (' B  18  LEU HD11', ' B 115  LEU HD13', -0.476, (228.768, 280.679, 161.941)), (' K 379  CYS  HA ', ' K 432  CYS  HA ', -0.475, (291.203, 243.015, 196.484)), (' E 908  GLY  O  ', ' E1038  LYS  NZ ', -0.474, (245.262, 233.871, 290.017)), (' B  90  THR HG23', ' B 116  THR  HA ', -0.473, (225.667, 274.185, 161.851)), (' B  20  LEU HD21', ' B 115  LEU HD21', -0.472, (226.504, 282.751, 162.177)), (' B 107  ASP  HB3', ' M  46  LEU  HB2', -0.472, (221.971, 290.771, 182.686)), (' A 125  PRO  HB3', ' A 151  TYR  HB3', -0.471, (310.594, 279.736, 170.671)), (' I 965  GLN HE22', ' K 757  GLY  HA3', -0.47, (233.789, 241.726, 233.705)), (' F  32  ASP  OD2', ' F  92  ASN  ND2', -0.467, (304.725, 242.619, 195.081)), (' I  35  GLY  HA3', ' I  56  LEU HD23', -0.467, (202.263, 246.133, 230.506)), (' E1017  GLU  OE1', ' I1019  ARG  NH1', -0.466, (248.62, 233.923, 256.941)), (' F 155  ARG  NH2', ' F 185  GLU  OE2', -0.466, (296.336, 297.862, 178.392)), (' I 599  THR  HB ', ' I 608  VAL HG12', -0.465, (212.842, 253.093, 250.639)), (' E 905  ARG  O  ', ' E1036  GLN  NE2', -0.464, (251.075, 232.045, 289.49)), (' I 329  PHE  HB2', ' I 530  SER  HB3', -0.463, (235.559, 284.575, 223.057)), (' K 353  TRP  HH2', ' K 355  ARG HH21', -0.462, (281.038, 234.973, 187.744)), (' E 353  TRP  HH2', ' E 355  ARG HH21', -0.462, (212.434, 227.235, 182.745)), (' K 326  ILE HD13', ' K 534  VAL  H  ', -0.461, (288.285, 242.449, 229.133)), (' E 333  THR HG23', ' E 334  ASN  N  ', -0.461, (210.743, 221.687, 210.169)), (' I1052  PHE  HB2', ' I1063  LEU  HB2', -0.46, (226.387, 228.803, 275.924)), (' A 173  PRO  HD3', ' F 164  THR HG22', -0.457, (310.047, 278.286, 187.524)), (' E  58  PHE  HB2', ' E 293  LEU HD22', -0.457, (258.816, 206.057, 234.469)), (' E1129  VAL HG22', ' I 917  TYR  HB3', -0.455, (223.497, 226.634, 301.154)), (' E 328  ARG  HB2', ' E 543  PHE  HE1', -0.454, (219.236, 216.784, 221.214)), (' I 985  ASP  O  ', ' I 989  ALA  N  ', -0.452, (242.92, 235.442, 213.707)), (' K 919  ASN  HB3', ' K 922  LEU  HB3', -0.451, (250.693, 260.316, 299.106)), (' A 127  VAL HG22', ' A 148  VAL HG22', -0.451, (314.799, 282.845, 173.543)), (' E 406  GLU  HB3', ' E 418  ILE HG13', -0.451, (210.187, 213.584, 174.371)), (' E  69  HIS  HA ', ' E 260  ALA  H  ', -0.45, (276.473, 185.659, 212.336)), (' I 908  GLY  O  ', ' I1038  LYS  NZ ', -0.45, (238.467, 236.876, 290.192)), (' A  29  ILE HG23', ' A  34  TRP  HE1', -0.449, (313.8, 243.816, 177.907)), (' I 406  GLU  HB3', ' I 418  ILE HG13', -0.449, (247.202, 291.896, 183.344)), (' B 173  PRO  HD2', ' M 162  SER  HB3', -0.449, (211.359, 269.254, 167.137)), (' E 342  PHE  HE1', ' E 511  VAL HG11', -0.447, (210.115, 215.8, 190.965)), (' E  35  GLY  HA3', ' E  56  LEU  HB3', -0.447, (264.866, 207.619, 227.517)), (' F  93  ARG  NH1', ' K 380  TYR  OH ', -0.447, (294.231, 245.105, 191.351)), (' E1030  SER  HB3', ' K1041  ASP  HB2', -0.446, (253.417, 244.227, 278.625)), (' K 742  ILE HG23', ' K1000  ARG  HD2', -0.446, (239.898, 255.788, 232.229)), (' E 280  ASN HD21', ' E 284  THR  HB ', -0.445, (277.242, 213.828, 239.013)), (' I 378  LYS  HE2', ' M  92  ASN  HB2', -0.445, (234.542, 284.396, 189.8)), (' I 454  ARG  NH2', ' I 469  SER  O  ', -0.445, (262.725, 296.068, 185.003)), (' A  66  ARG  HD2', ' A  84  SER  HB2', -0.444, (292.533, 256.714, 168.189)), (' I 108  THR  O  ', ' I 236  THR  OG1', -0.444, (204.722, 253.49, 208.473)), (' K 905  ARG  NH1', ' K1049  LEU  O  ', -0.444, (241.22, 251.221, 287.211)), (' I 780  GLU  O  ', ' I 784  GLN  NE2', -0.443, (242.873, 226.286, 269.275)), (' I 396  TYR  HB2', ' I 514  SER  HB2', -0.443, (250.859, 286.064, 200.625)), (' K 906  PHE  HE2', ' K 916  LEU  HB2', -0.443, (245.538, 254.169, 297.203)), (' F  29  VAL  HB ', ' F  90  GLN  HB3', -0.442, (301.82, 249.094, 196.605)), (' D 158  VAL HG13', ' D 203  VAL HG22', -0.441, (242.648, 178.287, 161.277)), (' K 428  ASP  N  ', ' K 428  ASP  OD1', -0.441, (281.18, 248.601, 189.767)), (' K  33  THR  HB ', ' K 220  PHE  HD1', -0.441, (267.558, 280.837, 245.286)), (' I 104  TRP  HE1', ' I 119  ILE HD12', -0.441, (198.626, 239.54, 213.27)), (' K  40  ASP  N  ', ' K  40  ASP  OD1', -0.439, (254.802, 276.95, 234.734)), (' I 895  GLN  HB3', ' I 895  GLN HE21', -0.438, (235.149, 213.516, 289.855)), (' I1006  THR HG23', ' K1005  GLN HE22', -0.438, (240.576, 243.571, 242.159)), (' A  90  THR HG23', ' A 116  THR  HA ', -0.438, (302.243, 267.977, 174.452)), (' E 565  PHE  HB3', ' E 576  VAL HG23', -0.438, (217.688, 223.834, 226.187)), (' E 328  ARG HH12', ' E 533  LEU HD12', -0.437, (218.916, 210.774, 224.121)), (' E  69  HIS  HB2', ' E 259  THR  HB ', -0.437, (277.046, 183.549, 212.114)), (' I  33  THR  OG1', ' I 219  GLY  O  ', -0.436, (199.349, 244.393, 238.806)), (' K 656  VAL HG12', ' K 658  ASN  H  ', -0.435, (282.687, 255.892, 270.185)), (' I 294  ASP  N  ', ' I 294  ASP  OD1', -0.434, (210.101, 253.193, 240.865)), (' K 203  ILE HD12', ' K 227  VAL  HB ', -0.434, (259.567, 289.354, 224.665)), (' E1006  THR HG23', ' I1005  GLN HE22', -0.434, (248.37, 238.644, 241.934)), (' I 551  VAL  HB ', ' I 588  THR  HB ', -0.432, (230.746, 275.718, 240.155)), (' H   2  ILE HG23', ' H  27  GLN  HB2', -0.432, (227.451, 208.954, 186.932)), (' F 132  VAL  HB ', ' F 179  LEU  HB3', -0.431, (304.8, 294.541, 181.564)), (' E 656  VAL HG12', ' E 658  ASN  H  ', -0.431, (239.384, 199.86, 261.369)), (' E1018  ILE  O  ', ' E1022  ALA  N  ', -0.431, (252.897, 239.559, 263.845)), (' I 879  ALA  O  ', ' I 883  THR  OG1', -0.431, (232.132, 216.392, 282.128)), (' B  40  PHE  HB2', ' B  44  LYS  HB3', -0.431, (226.669, 271.165, 174.091)), (' K 725  GLU  OE1', ' K1064  HIS  NE2', -0.43, (246.929, 252.192, 276.559)), (' I 725  GLU  OE2', ' I1028  LYS  NZ ', -0.43, (233.574, 237.441, 271.418)), (' I 280  ASN  OD1', ' I 284  THR  N  ', -0.43, (206.238, 230.095, 237.265)), (' K 401  VAL HG22', ' K 509  ARG  HG2', -0.43, (297.094, 228.807, 188.859)), (' K 280  ASN HD21', ' K 284  THR  HB ', -0.429, (255.524, 285.452, 246.949)), (' I 725  GLU  OE1', ' I1064  HIS  NE2', -0.428, (231.324, 235.705, 273.577)), (' E1013  ILE HG21', ' I1012  LEU  HG ', -0.428, (246.024, 237.858, 251.653)), (' I 559  PHE  HD2', ' I 577  ARG  HB2', -0.427, (243.496, 284.285, 236.713)), (' B  33  TYR  H  ', ' B  98  ASP  H  ', -0.427, (229.395, 293.491, 178.816)), (' E  40  ASP  N  ', ' E  40  ASP  OD1', -0.427, (270.112, 221.502, 227.807)), (' I 273  ARG  HD2', ' I 292  ALA  HB3', -0.426, (213.07, 252.513, 233.282)), (' E 379  CYS  HA ', ' E 432  CYS  HA ', -0.426, (220.424, 214.254, 188.357)), (' K 280  ASN  OD1', ' K 284  THR  N  ', -0.425, (253.946, 283.817, 245.769)), (' I  58  PHE  HB2', ' I 293  LEU HD22', -0.424, (206.033, 250.984, 237.927)), (' H 117  ILE HG13', ' H 134  CYS  HB2', -0.424, (259.743, 178.723, 168.758)), (' E 375  SER  O  ', ' H  92  ASN  ND2', -0.423, (215.551, 203.423, 186.572)), (' I  22  THR  HB ', ' I  78  ARG  HG3', -0.422, (181.206, 259.159, 220.396)), (' K 105  ILE  HB ', ' K 239  GLN  HB3', -0.422, (275.04, 289.311, 219.473)), (' E 475  ALA  HB3', ' E 487  ASN  HB3', -0.422, (204.257, 223.93, 154.213)), (' E 378  LYS  HB2', ' H  93  ARG HH12', -0.421, (218.63, 210.022, 184.818)), (' H   1  ASP  HB3', ' H  97  THR HG21', -0.421, (227.772, 208.652, 179.798)), (' I 902  MET  HB3', ' I 916  LEU HD22', -0.421, (226.91, 227.408, 292.388)), (' E1115  ILE HG22', ' E1137  VAL HG13', -0.421, (236.069, 223.799, 311.602)), (' K 418  ILE HD13', ' K 422  ASN HD22', -0.421, (291.848, 235.863, 178.929)), (' M  89  GLN HE22', ' M  91  TYR  HD1', -0.42, (227.062, 287.716, 187.343)), (' I  34  ARG HH21', ' I 217  PRO  HB2', -0.42, (192.892, 243.133, 237.257)), (' K 276  LEU HD11', ' K 301  CYS  HA ', -0.42, (261.487, 267.958, 245.907)), (' K 328  ARG HH21', ' K 578  ASP  HB2', -0.42, (286.976, 232.494, 229.516)), (' K 414  GLN  O  ', ' K 424  LYS  NZ ', -0.419, (286.946, 245.941, 180.414)), (' B  86  THR  OG1', ' B  87  SER  N  ', -0.419, (234.096, 269.818, 162.497)), (' D  37  ILE HD12', ' D 109  TRP  HH2', -0.419, (224.763, 196.988, 174.211)), (' H 134  CYS  O  ', ' H 176  SER  OG ', -0.418, (254.098, 181.165, 170.912)), (' I 213  VAL HG12', ' I 214  ARG  HG2', -0.417, (182.628, 250.921, 232.784)), (' M 170  ASP  N  ', ' M 170  ASP  OD1', -0.417, (196.089, 273.736, 175.827)), (' F  49  TYR  HD2', ' F  50  TRP  HD1', -0.417, (312.704, 244.191, 198.081)), (' I 903  ALA  HB1', ' I 913  GLN  HB2', -0.416, (230.381, 229.11, 296.505)), (' E 591  SER  OG ', ' E 619  GLU  OE1', -0.415, (231.74, 211.659, 235.858)), (' E 378  LYS  NZ ', ' H  92  ASN  OD1', -0.415, (219.58, 204.296, 186.657)), (' I 656  VAL HG12', ' I 658  ASN  H  ', -0.414, (211.355, 265.757, 266.929)), (' E 418  ILE HD13', ' E 422  ASN HD22', -0.414, (208.913, 217.713, 172.56)), (' D  38  ARG  N  ', ' D  46  GLU  O  ', -0.414, (229.131, 201.11, 171.283)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.414, (212.88, 208.061, 184.89)), (' I 405  ASP  HA ', ' I 408  ARG HH12', -0.414, (240.388, 291.418, 180.969)), (' I 189  LEU  HB2', ' I 210  ILE HD13', -0.413, (189.857, 240.903, 230.764)), (' E1089  PHE  HB3', ' I 913  GLN HE21', -0.413, (231.851, 229.337, 301.469)), (' K1050  MET  HE3', ' K1065  VAL HG21', -0.413, (244.071, 257.846, 286.654)), (' E 575  ALA  HA ', ' E 586  ASP  HA ', -0.412, (218.826, 219.633, 231.92)), (' M  89  GLN  HB3', ' M  89  GLN HE21', -0.412, (225.087, 285.79, 186.652)), (' E1005  GLN HE22', ' K1006  THR HG23', -0.411, (247.826, 247.17, 242.314)), (' K 213  VAL HG12', ' K 214  ARG  HG3', -0.411, (283.301, 295.885, 242.895)), (' E1084  ASP  N  ', ' E1084  ASP  OD1', -0.411, (226.963, 224.818, 314.958)), (' I  40  ASP  N  ', ' I  40  ASP  OD1', -0.41, (213.037, 235.664, 227.673)), (' I 353  TRP  HH2', ' I 355  ARG HH21', -0.41, (256.016, 288.259, 196.238)), (' D 150  GLY  HA2', ' D 180  LEU HD13', -0.409, (249.227, 189.927, 155.091)), (' E 784  GLN  OE1', ' K1045  LYS  NZ ', -0.409, (257.478, 246.508, 276.972)), (' E 276  LEU HD11', ' E 301  CYS  HA ', -0.408, (258.704, 218.111, 239.257)), (' E 533  LEU HD21', ' E 535  LYS  HE3', -0.408, (216.248, 208.152, 227.217)), (' I 418  ILE HD13', ' I 422  ASN HD22', -0.407, (251.783, 292.728, 183.264)), (' I1084  ASP  N  ', ' I1084  ASP  OD1', -0.407, (240.725, 251.668, 319.003)), (' E 551  VAL  HB ', ' E 588  THR  HB ', -0.407, (225.47, 215.267, 232.966)), (' B 219  ARG  HA ', ' B 220  ASP  HA ', -0.407, (197.877, 253.186, 150.164)), (' M  34  ALA  HB3', ' M  89  GLN HE21', -0.406, (225.291, 286.952, 187.426)), (' F 113  PRO  HB3', ' F 139  PHE  HB3', -0.406, (310.58, 287.797, 197.482)), (' B  14  PRO  HA ', ' B  85  VAL HG23', -0.406, (234.93, 274.511, 158.674)), (' I 139  PRO  HB3', ' I 159  VAL  HA ', -0.405, (189.131, 247.006, 206.449)), (' K 226  LEU  HG ', ' K 227  VAL HG23', -0.405, (257.809, 291.858, 227.351)), (' I 969  ASN  HB2', ' K 755  GLN  HB2', -0.404, (232.963, 243.852, 225.626)), (' A  12  VAL HG21', ' A  18  LEU  HG ', -0.403, (303.418, 261.151, 169.167)), (' E 216  LEU HD13', ' E 266  TYR  HD2', -0.403, (268.575, 197.446, 225.67)), (' F 147  LYS  HE2', ' F 149  LYS  HE3', -0.403, (299.294, 298.049, 194.326)), (' E 574  ASP  N  ', ' E 574  ASP  OD1', -0.403, (221.026, 224.541, 233.65)), (' K1084  ASP  N  ', ' K1084  ASP  OD1', -0.403, (257.006, 226.476, 317.066)), (' I 574  ASP  N  ', ' I 574  ASP  OD1', -0.403, (241.282, 274.728, 239.927)), (' D 158  VAL HG22', ' D 203  VAL HG13', -0.403, (241.89, 180.568, 161.294)), (' K 439  ASN  O  ', ' K 443  SER  OG ', -0.401, (307.154, 226.001, 185.973)), (' K 475  ALA  HB3', ' K 487  ASN  HB3', -0.401, (287.461, 235.139, 158.911)), (' E 571  ASP  OD2', ' I 964  LYS  NZ ', -0.4, (224.57, 236.196, 234.037)), (' E 439  ASN  O  ', ' E 443  SER  OG ', -0.4, (197.295, 203.821, 181.75)), (' K 501  ASN  HB3', ' K 505  TYR  HD2', -0.4, (309.805, 233.566, 178.881)), (' E 866  THR  OG1', ' E 867  ASP  N  ', -0.4, (271.526, 239.961, 263.114))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
