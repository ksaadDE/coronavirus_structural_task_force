# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 481 ', 'ASN', 0.014077382311372942, (31.508, 22.290999999999997, 48.458)), ('A', ' 482 ', 'GLY', 0.0367666392969509, (31.634, 18.566, 47.73800000000001)), ('D', ' 360 ', 'ASN', 0.03737075199102436, (68.02800000000002, 28.662, -29.624)), ('D', ' 481 ', 'ASN', 0.005151774206483454, (37.60800000000001, 23.884, 9.996))]
data['omega'] = []
data['rota'] = [('B', ' 385 ', 'THR', 0.07152787373635308, (15.892000000000007, -18.281999999999996, 37.599)), ('B', ' 455 ', 'LEU', 0.11668840651319125, (34.85200000000001, -4.0920000000000005, 8.206)), ('D', ' 466 ', 'ARG', 0.17913147384795097, (51.50800000000001, 23.645, -9.087)), ('D', ' 517 ', 'LEU', 0.0, (60.407, 16.274, -31.151000000000003)), ('G', '  39 ', 'GLN', 0.21481295531454322, (-1.0910000000000002, 36.218, 20.177)), ('G', '  43 ', 'LYS', 0.007756523483680466, (-5.544000000000001, 32.37699999999999, 16.882))]
data['cbeta'] = []
data['probe'] = [(' D 517  LEU  O  ', ' D 517  LEU HD22', -1.108, (60.085, 13.864, -32.322)), (' D 336  CYS  SG ', ' D 363  ALA  HB2', -0.969, (71.817, 24.354, -26.002)), (' A 393  THR  HB ', ' A 516  GLU  HG3', -0.769, (9.087, -0.946, 77.885)), (' A 465  GLU  OE2', ' K   4  FUL  H5 ', -0.734, (21.755, 13.561, 64.215)), (' H  84  PRO  HA ', ' H 124  VAL  CG2', -0.725, (44.416, -2.096, 29.001)), (' C 358  ILE  HB ', ' C 395  VAL HG13', -0.704, (10.425, -0.239, 51.091)), (' A 457  ARG  NH2', ' K   4  FUL  H4 ', -0.69, (24.366, 13.893, 62.725)), (' H  87  THR HG23', ' H 123  THR  HA ', -0.685, (49.803, -3.346, 27.384)), (' F  39  GLN  HB2', ' F  45  ARG  HG2', -0.683, (54.882, 13.495, 62.085)), (' A 480  CYS  O  ', ' A 482  GLY  N  ', -0.679, (33.031, 20.945, 48.216)), (' F  73  ASN  ND2', ' F 201  HOH  O  ', -0.678, (57.008, 2.06, 36.095)), (' B 384  PRO  HA ', ' B 387  LEU HD12', -0.677, (19.163, -15.004, 34.846)), (' D 517  LEU  CD2', ' D 517  LEU  O  ', -0.647, (60.952, 14.062, -31.632)), (' B 382  VAL HG23', ' B 387  LEU  CD2', -0.643, (22.529, -17.007, 36.011)), (' H  83  LYS  O  ', ' H 124  VAL HG21', -0.643, (45.074, -0.228, 29.628)), (' H  84  PRO  HA ', ' H 124  VAL HG23', -0.63, (44.678, -2.577, 29.795)), (' A 466  ARG  NH2', ' A 701  HOH  O  ', -0.619, (19.129, 5.072, 58.494)), (' D 393  THR  OG1', ' D 516  GLU  HB3', -0.61, (59.928, 19.686, -28.625)), (' A 457  ARG HH22', ' K   4  FUL  H4 ', -0.606, (23.767, 14.244, 63.399)), (' H  12  VAL HG21', ' H  18  LEU  HG ', -0.605, (51.782, 1.665, 34.44)), (' D 517  LEU  CD1', ' D 517  LEU  N  ', -0.601, (60.48, 15.787, -29.442)), (' D 517  LEU  N  ', ' D 517  LEU HD13', -0.6, (59.986, 15.0, -29.464)), (' B 369  TYR  CD2', ' B 384  PRO  HG2', -0.584, (15.994, -16.204, 30.712)), (' D 411  ALA  HB3', ' D 414  GLN  HG2', -0.563, (59.076, 8.102, -11.638)), (' J   4  MAN  H61', ' J   4  MAN  O2 ', -0.562, (29.901, -32.618, 67.894)), (' A 334  ASN  O  ', ' A 362  VAL  N  ', -0.556, (8.572, -16.079, 72.186)), (' D 600  NAG  H3 ', ' D 600  NAG  H83', -0.549, (80.199, 22.193, -15.859)), (' C 417  LYS  HD2', ' C 455  LEU HD12', -0.545, (6.618, 20.748, 29.26)), (' A 346  ARG HH22', ' B 331  ASN  ND2', -0.543, (20.849, -4.919, 52.562)), (' G 118  LYS  NZ ', ' G 202  HOH  O  ', -0.541, (3.606, 47.093, 34.753)), (' B 382  VAL HG23', ' B 387  LEU HD23', -0.535, (23.024, -16.925, 36.769)), (' K   1  NAG  O6 ', ' K   4  FUL  H63', -0.531, (19.879, 14.045, 61.646)), (' A 378  LYS  NZ ', ' A 380  TYR  OH ', -0.527, (30.52, -1.941, 78.596)), (' F 101  SER  O  ', ' F 101  SER  OG ', -0.525, (28.152, 3.41, 43.99)), (' K   2  NAG  O3 ', ' K   3  BMA  O5 ', -0.518, (14.745, 14.677, 68.524)), (' D 364  ASP  O  ', ' D 367  VAL HG12', -0.513, (77.431, 20.048, -22.413)), (' B 455 ALEU HD12', ' B 456  PHE  CZ ', -0.511, (36.07, -4.12, 3.918)), (' A 393  THR  CB ', ' A 516  GLU  HG3', -0.509, (8.697, -2.11, 78.066)), (' H 124  VAL  O  ', ' H 124  VAL HG23', -0.505, (45.419, -3.406, 30.365)), (' J   5  NAG  H3 ', ' J   5  NAG  O7 ', -0.503, (36.252, -32.763, 64.289)), (' J   1  NAG  O6 ', ' J   6  FUL  H63', -0.498, (28.025, -21.962, 61.802)), (' F   4  LEU HD23', ' F  24  VAL HG22', -0.496, (54.531, 0.367, 52.777)), (' C 394  ASN  N  ', ' C 394  ASN  OD1', -0.495, (5.754, -5.854, 47.814)), (' I   1  NAG  H62', ' I   2  NAG  C1 ', -0.49, (6.607, -1.655, 30.427)), (' B 350  VAL HG22', ' B 422  ASN  HB3', -0.489, (30.593, -4.848, 16.76)), (' B 476  GLY  H  ', ' B 487  ASN HD22', -0.488, (46.317, -3.001, -0.437)), (' H  83  LYS  C  ', ' H 124  VAL HG21', -0.484, (43.923, -0.287, 29.83)), (' A 357  ARG  HB2', ' C 335  LEU HD11', -0.484, (11.65, -3.049, 65.173)), (' C 336  CYS  SG ', ' C 363  ALA  HB2', -0.483, (9.849, -0.187, 56.864)), (' E  99  TYR  OH ', ' E 102  GLY  HA2', -0.48, (28.09, 14.335, 9.201)), (' D 485  GLY  H  ', ' D 488  CYS  HB2', -0.474, (44.753, 20.506, 13.496)), (' E  12  VAL HG22', ' E 201  PG4  H41', -0.474, (34.681, -6.069, -29.427)), (' F  40  ALA  HB3', ' F  43  LYS  HG3', -0.473, (57.434, 20.953, 63.383)), (' K   1  NAG  O4 ', ' K   2  NAG  O7 ', -0.466, (14.924, 15.503, 63.131)), (' G  90  TYR  O  ', ' G 119  GLY  HA2', -0.466, (3.437, 41.71, 24.404)), (' B 474  GLN  HG3', ' B 474  GLN  O  ', -0.459, (47.122, -3.071, 3.598)), (' B 341  VAL HG11', ' B 397  ALA  HB1', -0.458, (23.154, -3.055, 29.695)), (' D 335  LEU HD23', ' D 336  CYS  O  ', -0.457, (75.7, 27.084, -22.273)), (' F   1  GLN  HA ', ' F 115  TYR  CZ ', -0.456, (48.36, -5.05, 58.67)), (' B 396  TYR  O  ', ' B 513  LEU  HA ', -0.456, (25.907, -7.224, 31.113)), (' B 438  SER  HB3', ' B 509  ARG  HG3', -0.455, (16.837, -2.02, 18.418)), (' F  99  TYR  CZ ', ' F 102  GLY  HA2', -0.455, (31.906, -1.163, 44.34)), (' B 384  PRO  HA ', ' B 387  LEU  CD1', -0.452, (19.7, -15.562, 34.821)), (' C 461  LEU HD22', ' C 465  GLU  HB3', -0.451, (7.098, 6.588, 31.38)), (' B 331  ASN  N  ', ' C 359  SER  O  ', -0.45, (14.911, -5.038, 53.919)), (' A 454  ARG  NH1', ' A 704  HOH  O  ', -0.45, (29.589, 11.86, 58.198)), (' C 371  SER  OG ', ' C 373  SER  OG ', -0.449, (9.479, 15.83, 59.371)), (' H  90  TYR  O  ', ' H 119  GLY  HA2', -0.449, (57.908, 2.68, 22.252)), (' H  11  LEU HD22', ' H  12  VAL  H  ', -0.448, (50.055, -3.461, 33.804)), (' F  51  ILE HG13', ' F  57  THR HG22', -0.448, (49.961, 9.193, 43.543)), (' B 336  CYS  SG ', ' B 363  ALA  HB2', -0.447, (20.124, -5.277, 39.405)), (' B 382  VAL HG23', ' B 387  LEU HD21', -0.446, (23.09, -16.987, 35.779)), (' A 426  PRO  HG3', ' A 463  PRO  HB3', -0.445, (21.716, 6.748, 74.411)), (' A 360  ASN  H  ', ' A 523  THR  HB ', -0.445, (6.123, -9.33, 71.948)), (' B 455 ALEU HD12', ' B 456  PHE  CE2', -0.441, (36.351, -3.328, 4.252)), (' C 419  ALA  O  ', ' C 424  LYS  HB2', -0.44, (2.729, 10.44, 34.623)), (' B 462  LYS  HB2', ' B 462  LYS  HE3', -0.44, (41.523, -8.92, 23.284)), (' G  83  LYS  HG3', ' G  85  GLU  HG2', -0.44, (1.968, 38.424, 7.612)), (' H  18  LEU  HA ', ' H  18  LEU HD23', -0.439, (53.736, 4.88, 35.475)), (' H  13  GLN  HG2', ' H  14  PRO  HD2', -0.436, (43.895, -3.446, 37.183)), (' G  12  VAL HG23', ' G 124  VAL HG22', -0.435, (2.555, 47.274, 10.732)), (' D 338  PHE  HE1', ' D 358  ILE HD13', -0.435, (68.889, 23.949, -20.879)), (' D 480  CYS  O  ', ' D 482  GLY  N  ', -0.434, (39.661, 23.554, 10.729)), (' G 101  SER  O  ', ' G 101  SER  OG ', -0.433, (28.253, 17.283, 28.346)), (' H 121  GLN HE21', ' H 123  THR HG22', -0.432, (52.42, -4.503, 26.887)), (' B 458  LYS  HD2', ' H  44  GLU  OE2', -0.432, (47.788, -2.948, 9.704)), (' B 388  ASN  HB3', ' B 527  PRO  HD2', -0.426, (16.071, -12.802, 41.991)), (' F  90  TYR  O  ', ' F 119  GLY  HA2', -0.426, (59.734, 8.575, 58.559)), (' H  71  ARG  NH2', ' H  76  ASN  OD1', -0.425, (65.997, 19.932, 25.194)), (' J   2  NAG  HO3', ' J   3  MAN  C1 ', -0.42, (30.039, -26.59, 70.688)), (' G  87  THR HG23', ' G 123  THR  HA ', -0.419, (-2.218, 44.323, 14.119)), (' E  17  SER  OG ', ' E 201  PG4  H61', -0.418, (34.758, -0.575, -27.867)), (' B 346  ARG  HG3', ' B 346  ARG HH21', -0.418, (22.239, 8.357, 19.854)), (' G  82C LEU  HB3', ' G 124  VAL HG21', -0.411, (3.317, 44.546, 10.304)), (' E  75  LYS  HB2', ' E  75  LYS  HE3', -0.411, (18.702, 6.74, -17.918)), (' B 453  TYR  CE2', ' B 455 ALEU HD23', -0.409, (31.6, -4.699, 7.183)), (' D 338  PHE  CE1', ' D 358  ILE HD13', -0.408, (69.065, 24.169, -20.76)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.408, (24.412, -5.876, 78.499)), (' D 457  ARG  NE ', ' D 467  ASP  OD2', -0.406, (46.838, 20.565, -4.207)), (' A 399  SER  HA ', ' A 510  VAL  O  ', -0.406, (25.233, -5.846, 66.212)), (' H  11  LEU HD22', ' H  12  VAL  N  ', -0.405, (50.062, -3.479, 34.007)), (' B 471  GLU  O  ', ' B 491  PRO  HG3', -0.405, (41.213, 2.435, 9.354)), (' E  56  ASN  O  ', ' E  58  LYS  NZ ', -0.405, (35.158, 6.306, -5.309)), (' D 412  PRO  HB3', ' D 426  PRO  O  ', -0.404, (55.751, 10.734, -17.417)), (' E  64  LYS  HB3', ' E  64  LYS  NZ ', -0.404, (45.93, 3.117, -13.991)), (' C 379  CYS  HA ', ' C 432  CYS  HA ', -0.404, (-0.087, 8.202, 50.559)), (' D 364  ASP  HA ', ' D 388  ASN  OD1', -0.403, (75.819, 18.282, -26.85)), (' B 374  PHE  HA ', ' B 436  TRP  HB3', -0.402, (13.873, -8.568, 22.263)), (' A 359  SER  O  ', ' C 331  ASN  N  ', -0.402, (7.846, -11.513, 68.291)), (' C 431  GLY  HA2', ' C 515  PHE  CD2', -0.4, (1.465, 2.645, 50.195)), (' D 444  LYS  HA ', ' D 444  LYS  HD3', -0.4, (74.504, 25.21, 7.91))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
