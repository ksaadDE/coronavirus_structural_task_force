# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 155 ', 'PRO', None, (-2.44267, -22.1037, -6.280260000000001)), ('A', ' 157 ', 'PRO', None, (-7.364630000000005, -23.58369, -9.7939)), ('B', '   8 ', 'PRO', None, (-24.944199999999988, -2.42753, -24.41603)), ('B', '  95 ', 'PRO', None, (-4.75036, -8.21368, -35.56622)), ('B', ' 141 ', 'PRO', None, (-33.39033, -8.07346, -6.04434)), ('C', ' 155 ', 'PRO', None, (-48.62873, 21.953840000000003, 0.42055999999999993)), ('C', ' 157 ', 'PRO', None, (-43.76887, 23.41179, -2.99044)), ('D', '   8 ', 'PRO', None, (-26.054000000000002, 2.047320000000001, -17.77266)), ('D', '  95 ', 'PRO', None, (-46.3399, 8.210509999999992, -29.053860000000004)), ('D', ' 141 ', 'PRO', None, (-17.27032, 7.8831, 0.9004400000000001)), ('F', ' 445 ', 'VAL', None, (-15.14014, 6.57988, -60.96813))]
data['rota'] = [('A', '  18 ', 'LEU', 0.2929282762177426, (5.024760000000001, -24.049729999999997, -20.30794)), ('A', '  20 ', 'LEU', 0.22457195958535758, (-0.08801, -26.26699, -23.77733)), ('A', '  21 ', 'SER', 0.10131535404672759, (-1.6540700000000002, -29.26967, -25.51101)), ('A', '  35 ', 'SER', 0.28011254849932316, (-6.3018699999999965, -20.884199999999993, -32.93775)), ('A', ' 121 ', 'SER', 0.005321201024344191, (6.23943, -15.929219999999999, -7.74415)), ('A', ' 123 ', 'SER', 0.2720702238138291, (4.23183, -21.02247, -3.97837)), ('B', '  45 ', 'LYS', 0.07879650445194059, (-20.637329999999988, -20.434379999999997, -27.71933)), ('B', '  79 ', 'GLN', 0.2967144611154223, (-34.95615, -16.96529, -21.3387)), ('B', ' 176 ', 'SER', 0.2796638299875286, (-21.42256, -15.46607, 1.19206)), ('C', '  20 ', 'LEU', 0.2559874006045977, (-50.98506, 26.2127, -16.87538)), ('C', ' 185 ', 'SER', 0.29129043815923444, (-40.35293, 18.14492999999999, 6.89112)), ('D', ' 142 ', 'ARG', 0.24801970917404403, (-22.02281, 7.91296, -0.09908)), ('D', ' 146 ', 'VAL', 0.2885248359380208, (-26.88517, 7.044359999999999, 11.87311)), ('D', ' 171 ', 'SER', 0.2814991851954972, (-18.0827, 15.69235, -4.70532)), ('E', ' 334 ', 'ASN', 0.21120965839223366, (-14.68789, 23.95919, -42.4898)), ('E', ' 454 ', 'ARG', 0.004166327943541369, (-49.09598, 9.893499999999996, -44.74158)), ('E', ' 478 ', 'THR', 0.14780286634974957, (-67.68016, 6.318639999999999, -34.82942)), ('F', ' 368 ', 'LEU', 0.2997975116973933, (-27.096289999999996, -20.21157, -63.33757)), ('F', ' 430 ', 'THR', 0.2754071003364741, (-14.88719, -30.679410000000004, -57.64848)), ('F', ' 444 ', 'LYS', 0.28372408898587925, (-14.75661, 4.66905, -59.54731)), ('F', ' 517 ', 'LEU', 0.2844760782754726, (-20.765200000000007, -34.901, -50.191))]
data['cbeta'] = [('F', ' 508 ', 'TYR', ' ', 0.3225816837802984, (-13.721510000000002, -10.07442, -63.38425000000001))]
data['probe'] = [(' F 404  GLY  HA2', ' F 508  TYR  HD2', -1.02, (-11.481, -11.153, -65.273)), (' F 404  GLY  CA ', ' F 508  TYR  HD2', -0.975, (-11.097, -10.503, -65.744)), (' F 404  GLY  CA ', ' F 508  TYR  CD2', -0.858, (-11.844, -10.633, -66.32)), (' A 164  SER  H  ', ' A 205  ASN HD21', -0.858, (-18.966, -35.215, -3.678)), (' D 105  GLU  OE1', ' D 173  TYR  OH ', -0.829, (-23.876, 10.72, -5.089)), (' D 110  VAL HG13', ' D 141  PRO  HD3', -0.82, (-14.918, 6.856, 1.312)), (' F 404  GLY  HA2', ' F 508  TYR  CD2', -0.805, (-12.0, -10.981, -65.873)), (' E 384  PRO  HA ', ' E 387  LEU HD12', -0.781, (-27.41, 28.231, -56.941)), (' B 122  ASP  HA ', ' B 125  LEU HD12', -0.773, (-13.882, -24.571, 16.558)), (' D 197  THR HG22', ' D 204  PRO  HB3', -0.763, (-20.254, 4.135, 14.001)), (' B 161  GLU  HG2', ' B 175  LEU HD11', -0.745, (-21.146, -10.824, -0.574)), (' B  42  LYS  NZ ', ' B 302  HOH  O  ', -0.743, (-19.477, -28.64, -21.73)), (' F 444  LYS  O  ', ' F 499  PRO  HD3', -0.737, (-14.678, 4.369, -62.778)), (' F 503  VAL  HA ', ' F 506  GLN  HG3', -0.732, (-11.802, -4.338, -69.453)), (' E 421  TYR  HB3', ' E 454  ARG  HG2', -0.708, (-50.588, 13.006, -45.309)), (' A 167  LEU HD11', ' A 190  VAL HG21', -0.707, (-27.368, -29.705, -1.489)), (' B 187  GLU  OE1', ' B 211  ARG  NH1', -0.7, (-14.381, -18.357, 23.29)), (' F 527  PRO  O  ', ' F 528  LYS  HB2', -0.693, (-36.329, -33.163, -59.213)), (' F 437  ASN  HA ', ' F 508  TYR  CD1', -0.685, (-16.542, -8.644, -65.738)), (' A 189  VAL HG11', ' B 135  LEU HD22', -0.684, (-25.134, -21.568, 2.234)), (' B  91  ASP  OD1', ' B 301  HOH  O  ', -0.683, (-13.46, -13.473, -41.864)), (' F 388  ASN  HB3', ' F 527  PRO  HD2', -0.682, (-32.841, -29.9, -60.244)), (' D 144  ALA  HB2', ' D 198  HIS  HD2', -0.676, (-20.78, 7.113, 5.515)), (' A 222  LYS  NZ ', ' B 122  ASP  OD2', -0.673, (-17.215, -27.705, 17.901)), (' F 404  GLY  HA3', ' F 508  TYR  CD2', -0.67, (-11.2, -9.817, -66.102)), (' B 163  VAL HG22', ' B 175  LEU HD13', -0.669, (-22.147, -11.651, -2.529)), (' F 403  ARG  HG2', ' F 495  TYR  CE1', -0.646, (-6.513, -6.845, -60.508)), (' B 182  SER  OG ', ' B 185  ASP  OD2', -0.645, (-6.853, -11.938, 16.209)), (' D 144  ALA  HB2', ' D 198  HIS  CD2', -0.645, (-20.582, 7.612, 5.708)), (' F 404  GLY  HA3', ' F 508  TYR  CE2', -0.631, (-11.873, -10.138, -66.848)), (' D 190  LYS  HG2', ' D 191  VAL HG23', -0.63, (-28.626, 11.878, 29.943)), (' B 123  GLU  N  ', ' B 123  GLU  OE1', -0.626, (-13.155, -28.081, 13.408)), (' F 437  ASN  HA ', ' F 508  TYR  HD1', -0.623, (-15.971, -8.84, -64.868)), (' F 357  ARG  NH1', ' F 702  HOH  O  ', -0.622, (-21.179, -26.606, -43.065)), (' C  91  THR HG23', ' C 118  THR  HA ', -0.621, (-48.852, 16.956, -7.477)), (' C 132  LEU  HB3', ' D 118  PHE  CD2', -0.615, (-28.928, 23.162, 14.206)), (' C 127  PRO  HB3', ' C 153  TYR  HB3', -0.608, (-44.246, 24.616, 6.266)), (' D 132  VAL HG22', ' D 179  LEU  HB3', -0.602, (-33.773, 13.014, 17.195)), (' D  20  THR HG23', ' D  72  THR HG23', -0.6, (-21.398, 4.586, -25.006)), (' C  97  ALA  HB1', ' C 108  PHE  HB3', -0.599, (-38.404, 20.922, -25.471)), (' F 366  SER  O  ', ' F 370  ASN  HB2', -0.594, (-30.591, -21.676, -66.961)), (' B 154  LEU  CD1', ' D 197  THR HG21', -0.586, (-22.116, 2.144, 13.009)), (' B  83  ILE HD13', ' B 166  GLN  HB3', -0.586, (-28.564, -15.097, -14.267)), (' E 350  VAL HG22', ' E 422  ASN  HB3', -0.582, (-44.335, 13.641, -47.173)), (' C  67  ARG  NH2', ' C  90  ASP  OD2', -0.581, (-55.298, 13.848, -14.62)), (' E 454  ARG  HD2', ' E 457  ARG  HD2', -0.58, (-51.216, 14.35, -42.276)), (' E 417  LYS  HE3', ' E 455  LEU HD12', -0.58, (-53.047, 9.415, -49.951)), (' A 164  SER  H  ', ' A 205  ASN  ND2', -0.574, (-19.038, -35.217, -3.924)), (' B 187  GLU  O  ', ' B 211  ARG  NH2', -0.564, (-15.119, -15.578, 24.41)), (' C  12  VAL HG21', ' C  86  LEU HD13', -0.562, (-54.864, 19.887, -10.856)), (' C 146  LEU HD21', ' C 202  TYR  HD2', -0.561, (-24.427, 30.852, 11.689)), (' F 378  LYS  HE2', ' F 380  TYR  OH ', -0.559, (-11.211, -24.359, -65.745)), (' F 437  ASN  HB2', ' F 508  TYR  HE1', -0.556, (-16.272, -8.569, -67.454)), (' F 356  LYS  NZ ', ' F 701  HOH  O  ', -0.553, (-24.248, -13.328, -49.138)), (' B 113  PRO  HD3', ' B 198  HIS  CD2', -0.551, (-33.491, -9.76, -0.773)), (' D 108  ARG  NH2', ' D 111  ALA  HB2', -0.551, (-13.422, 13.174, 1.16)), (' E 381  GLY  HA3', ' E 430  THR HG22', -0.55, (-36.272, 32.887, -52.856)), (' C   8  GLY  O  ', ' C  18  LEU HD21', -0.545, (-51.774, 26.338, -11.851)), (' E 366  SER  O  ', ' E 370  ASN  HB2', -0.542, (-20.535, 22.406, -59.54)), (' B 117  ILE HG12', ' B 209  PHE  HD2', -0.54, (-23.79, -16.434, 13.379)), (' B 121  SER  HB2', ' B 123  GLU  OE1', -0.534, (-15.043, -27.32, 12.213)), (' D  80  PRO  HA ', ' D 106  ILE HD13', -0.533, (-17.476, 15.605, -10.447)), (' C 156  GLU  OE1', ' C 157  PRO  HA ', -0.528, (-41.959, 22.053, -1.982)), (' A  67  ARG  NH2', ' A  90  ASP  OD2', -0.525, (3.466, -13.453, -21.589)), (' A   4  LEU HD12', ' A 110  VAL HG12', -0.518, (-13.355, -27.161, -30.307)), (' B 132  VAL HG23', ' B 179  LEU  O  ', -0.518, (-15.769, -13.847, 10.245)), (' B 140  TYR  CG ', ' B 141  PRO  HA ', -0.516, (-32.909, -8.613, -8.233)), (' B  37  GLN  HB3', ' B  45  LYS  HB3', -0.514, (-22.637, -18.702, -26.966)), (' A   8  GLY  O  ', ' A  18  LEU HD21', -0.513, (0.854, -25.829, -18.767)), (' B   4  MET  SD ', ' B  90  GLN  HB3', -0.513, (-14.606, -5.766, -34.914)), (' B 105  GLU  OE1', ' B 173  TYR  OH ', -0.51, (-27.331, -10.889, -12.423)), (' B 134  CYS  HB2', ' B 148  TRP  CH2', -0.507, (-21.965, -13.0, 8.366)), (' C 160  VAL HG22', ' C 206  VAL HG22', -0.503, (-36.885, 28.246, 4.698)), (' C  18  LEU HD23', ' C  19  ARG  N  ', -0.502, (-54.445, 25.471, -14.421)), (' D  83  ILE HG13', ' D 106  ILE HD12', -0.502, (-19.834, 14.68, -10.34)), (' A  12  VAL HG21', ' A  86  LEU HD12', -0.5, (4.464, -19.795, -17.576)), (' C  40  ALA  HB3', ' C  43  LYS  HG3', -0.496, (-43.388, 10.414, -11.433)), (' A  97  ALA  HB1', ' A 108  PHE  HB3', -0.495, (-12.217, -20.872, -31.907)), (' B 136  LEU  HB2', ' B 175  LEU  HB3', -0.495, (-26.096, -12.994, -0.032)), (' F 403  ARG  HG3', ' F 406  GLU  HG3', -0.494, (-6.645, -9.524, -62.665)), (' D  80  PRO  HA ', ' D 106  ILE  CD1', -0.494, (-17.93, 15.558, -10.954)), (' A 146  LEU HD21', ' A 202  TYR  CD2', -0.49, (-26.593, -31.485, 4.567)), (' F 403  ARG  HG2', ' F 495  TYR  HE1', -0.488, (-6.213, -7.421, -60.363)), (' B 136  LEU HD12', ' B 175  LEU HD23', -0.487, (-25.8, -10.627, 0.008)), (' D 150  VAL HG13', ' D 192  TYR  HE1', -0.486, (-34.001, 10.803, 24.869)), (' D  79  GLN  HA ', ' D  79  GLN  NE2', -0.483, (-14.519, 16.955, -14.624)), (' B 190  LYS  HG3', ' B 191  VAL  N  ', -0.483, (-21.25, -11.165, 22.802)), (' D 134  CYS  HB2', ' D 148  TRP  CH2', -0.482, (-29.03, 13.459, 14.931)), (' C 146  LEU  HA ', ' D 118  PHE  HE2', -0.481, (-26.942, 25.143, 13.43)), (' B  37  GLN  O  ', ' B  45  LYS  N  ', -0.48, (-19.868, -19.182, -26.143)), (' D  79  GLN  HA ', ' D  79  GLN HE21', -0.48, (-14.66, 17.243, -14.447)), (' D 140  TYR  CG ', ' D 141  PRO  HA ', -0.479, (-17.863, 8.363, -1.446)), (' A 146  LEU HD21', ' A 202  TYR  HD2', -0.479, (-26.594, -31.663, 5.042)), (' D  83  ILE HD13', ' D 166  GLN  HB3', -0.478, (-21.944, 14.861, -7.013)), (' A  51  ILE HG13', ' A  58  THR HG22', -0.477, (1.154, -22.587, -37.659)), (' C 222  LYS  NZ ', ' D 122  ASP  OD2', -0.476, (-33.7, 28.844, 24.202)), (' D 126  LYS  HD2', ' D 126  LYS  O  ', -0.473, (-46.768, 25.144, 23.752)), (' C  51  ILE HD13', ' C  72  ARG  HD2', -0.469, (-50.353, 26.147, -30.246)), (' E 364  ASP  OD1', ' E 366  SER  OG ', -0.469, (-17.871, 24.837, -56.33)), (' C   6  GLU  OE1', ' C  95  TYR  HA ', -0.468, (-42.604, 23.509, -17.779)), (' D  40  PRO  HB3', ' D 165  GLU  HG3', -0.468, (-30.063, 16.85, -7.095)), (' D 142  ARG  HG2', ' D 173  TYR  CZ ', -0.467, (-23.494, 9.741, -2.205)), (' B 140  TYR  CD1', ' B 141  PRO  HA ', -0.466, (-32.204, -9.169, -8.6)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.466, (-25.174, 33.813, -41.068)), (' D   4  MET  HE1', ' D  25  ALA  HB2', -0.466, (-34.455, 3.642, -28.927)), (' E 334  ASN  N  ', ' E 334  ASN  OD1', -0.465, (-14.195, 25.33, -41.344)), (' E 414  GLN  HA ', ' E 414  GLN  OE1', -0.465, (-48.747, 22.904, -56.505)), (' B  67  SER  HA ', ' B  71  PHE  CE2', -0.465, (-21.709, -5.347, -40.267)), (' A 103  SER  OG ', ' F 464  PHE  O  ', -0.464, (-9.881, -22.094, -47.181)), (' F 488  CYS  SG ', ' F 718  HOH  O  ', -0.464, (12.714, -2.504, -43.464)), (' E 403  ARG  HG3', ' E 406  GLU  HG3', -0.463, (-44.575, 9.56, -56.092)), (' D 166  GLN  HG3', ' D 173  TYR  CZ ', -0.463, (-22.311, 12.272, -4.063)), (' D 195  GLU  HG3', ' D 206  THR  OG1', -0.463, (-21.284, 7.2, 19.171)), (' B  22  THR  OG1', ' D  70  ASP  HB2', -0.462, (-25.892, -0.882, -29.78)), (' A 134  PRO  HG3', ' A 146  LEU  HB3', -0.461, (-26.196, -27.483, 7.259)), (' E 403  ARG  HG2', ' E 495  TYR  CE1', -0.458, (-44.044, 7.344, -53.653)), (' C 192  VAL HG21', ' C 202  TYR  CE2', -0.455, (-21.226, 32.067, 10.652)), (' B  33  LEU  O  ', ' B  50  ASP  O  ', -0.455, (-20.724, -11.802, -37.936)), (' C 191  THR HG21', ' D 137  ASN  ND2', -0.455, (-20.679, 21.966, 7.153)), (' E 452  LEU HD23', ' E 494  SER  HA ', -0.454, (-45.553, 3.03, -46.489)), (' C 140  SER  HB3', ' D 116  PHE  CE2', -0.454, (-18.946, 21.43, 13.766)), (' D 151  ASP  OD2', ' D 189  HIS  ND1', -0.453, (-33.721, 8.313, 28.853)), (' E 388  ASN  O  ', ' E 526  GLY  HA3', -0.452, (-19.584, 31.79, -52.086)), (' D  54  LEU HD11', ' D  58  VAL  HB ', -0.45, (-22.558, 19.478, -26.959)), (' D  28  ASP  OD1', ' D  68  GLY  HA2', -0.447, (-32.091, 1.528, -36.166)), (' A  36  TRP  NE1', ' A  81  LEU  HB2', -0.446, (-1.377, -23.355, -28.515)), (' F 354  ASN  O  ', ' F 398  ASP  HA ', -0.446, (-16.467, -17.224, -50.527)), (' F 364  ASP  O  ', ' F 367  VAL HG22', -0.446, (-30.952, -22.311, -60.574)), (' A  83  MET  HB3', ' A  86  LEU HD21', -0.446, (3.82, -18.712, -22.371)), (' A  11  LEU HD12', ' A  12  VAL  N  ', -0.445, (3.103, -20.715, -12.049)), (' C 158  VAL HG12', ' C 208  HIS  CD2', -0.445, (-43.365, 25.879, 1.696)), (' A 208  HIS  CE1', ' A 210  PRO  HG2', -0.444, (-4.188, -25.616, -6.488)), (' C  22  CYS  HB3', ' C  79  LEU  HB3', -0.444, (-46.504, 28.019, -22.564)), (' E 483  VAL  CG2', ' E 490  PHE  HB2', -0.444, (-54.69, 0.564, -40.446)), (' A 116  LEU HD12', ' A 117  VAL  N  ', -0.442, (-4.297, -20.424, -16.045)), (' B  35  TRP  CZ3', ' B  88  CYS  HB3', -0.442, (-21.345, -8.587, -30.597)), (' C  12  VAL  CG1', ' C  18  LEU HD12', -0.441, (-54.581, 22.868, -9.725)), (' D 123  GLU  CD ', ' D 123  GLU  H  ', -0.44, (-38.201, 28.494, 19.57)), (' F 399  SER  HA ', ' F 510  VAL  O  ', -0.44, (-16.889, -15.152, -55.412)), (' B 186  TYR  CE1', ' B 192  TYR  HE2', -0.439, (-16.652, -15.765, 18.044)), (' E 364  ASP  O  ', ' E 367  VAL HG22', -0.439, (-20.431, 22.423, -53.457)), (' F 388  ASN  O  ', ' F 526  GLY  HA3', -0.438, (-31.745, -31.49, -58.585)), (' A 161  SER  HG ', ' A 205  ASN HD22', -0.438, (-17.824, -34.236, -5.194)), (' C  67  ARG HH22', ' C  90  ASP  CG ', -0.437, (-54.209, 13.727, -14.558)), (' B 145  LYS  HA ', ' B 145  LYS  HD2', -0.437, (-24.352, -4.533, 1.725)), (' B 154  LEU HD12', ' D 197  THR HG21', -0.437, (-21.535, 1.676, 13.657)), (' F 444  LYS  HG3', ' F 447  GLY  O  ', -0.436, (-11.221, 4.852, -57.288)), (' C 101  TRP  CH2', ' E 357  ARG  HB2', -0.435, (-30.061, 22.478, -36.874)), (' F 440  ASN  N  ', ' F 440  ASN  OD1', -0.435, (-20.502, -2.658, -64.377)), (' E 354  ASN  O  ', ' E 398  ASP  HA ', -0.435, (-34.603, 17.286, -43.531)), (' A  34  MET  HB3', ' A  34  MET  HE3', -0.434, (-6.627, -24.849, -32.927)), (' C  39  GLN  HG3', ' C  44  GLY  O  ', -0.434, (-39.765, 12.623, -14.734)), (' D 108  ARG HH21', ' D 111  ALA  HB2', -0.433, (-13.17, 12.989, 1.217)), (' B 120  PRO  HG3', ' B 130  ALA  HB1', -0.428, (-14.512, -18.182, 14.352)), (' D  55  GLU  O  ', ' D  58  VAL HG23', -0.428, (-24.184, 22.294, -28.133)), (' E 395  VAL HG22', ' E 515  PHE  HD1', -0.427, (-28.359, 27.857, -47.155)), (' F 439  ASN  ND2', ' F 506  GLN  OE1', -0.426, (-14.76, -1.352, -67.542)), (' F 334  ASN  N  ', ' F 334  ASN  OD1', -0.426, (-36.909, -25.011, -47.821)), (' D 142  ARG  HG2', ' D 173  TYR  CE2', -0.426, (-22.904, 10.13, -2.012)), (' D  35  TRP  CE2', ' D  73  PHE  HB2', -0.426, (-26.719, 9.396, -25.107)), (' D  33  LEU  O  ', ' D  50  ASP  O  ', -0.425, (-30.275, 11.62, -31.001)), (' E 366  SER  HA ', ' E 369  TYR  CE1', -0.425, (-22.286, 25.279, -58.371)), (' B 183  LYS  NZ ', ' B 187  GLU  OE2', -0.424, (-11.017, -20.349, 22.256)), (' B 115  VAL HG22', ' B 136  LEU HD22', -0.423, (-29.105, -12.504, 4.103)), (' D 158  ASN  N  ', ' D 158  ASN  OD1', -0.422, (-37.901, 6.021, 15.386)), (' E 501  ASN  HB3', ' E 505  TYR  HB2', -0.42, (-42.966, 1.913, -60.173)), (' D  35  TRP  HB2', ' D  48  ILE  HB ', -0.42, (-27.592, 13.67, -27.066)), (' F 418  ILE  HA ', ' F 422  ASN HD22', -0.42, (-3.632, -13.952, -55.711)), (' A  67  ARG HH22', ' A  90  ASP  CG ', -0.42, (2.982, -13.721, -21.827)), (' B  61  ARG  NH2', ' B  82  ASP  OD1', -0.419, (-31.607, -18.941, -24.646)), (' B  37  GLN  NE2', ' B  86  TYR  OH ', -0.419, (-26.982, -16.133, -24.34)), (' A 101  TRP  CH2', ' F 357  ARG  HB2', -0.418, (-20.955, -22.84, -43.887)), (' A  59  TYR  OH ', ' F 457  ARG  NH2', -0.418, (-0.757, -17.338, -44.141)), (' F 414  GLN  O  ', ' F 424  LYS  NZ ', -0.418, (-1.446, -23.085, -58.617)), (' A  91  THR HG23', ' A 118  THR  HA ', -0.418, (-2.556, -17.28, -14.002)), (' F 350  VAL  O  ', ' F 353  TRP  HD1', -0.417, (-9.328, -14.18, -50.964)), (' B 184  ALA  O  ', ' B 188  LYS  HG3', -0.416, (-9.72, -13.266, 22.034)), (' D 122  ASP  HA ', ' D 125  LEU HD12', -0.416, (-37.528, 25.405, 22.911)), (' F 367  VAL HG23', ' F 368  LEU HD22', -0.416, (-29.264, -20.168, -60.582)), (' A 174  PHE  CE2', ' B 176  SER  HB3', -0.413, (-21.399, -17.718, -0.271)), (' A 154  PHE  HA ', ' A 155  PRO  HA ', -0.413, (-3.908, -20.375, -5.325)), (' D  32  TYR  HB2', ' D  92  ALA  HB2', -0.412, (-36.309, 7.761, -34.307)), (' A 173  THR HG23', ' A 188  SER  HB2', -0.412, (-18.202, -24.447, -2.939)), (' E 472  ILE HG13', ' E 482  GLY  HA2', -0.412, (-56.144, 1.406, -34.942)), (' B  35  TRP  CE2', ' B  73  PHE  HB2', -0.412, (-24.393, -9.594, -31.949)), (' C   6  GLU  HG2', ' C  96  CYS  SG ', -0.41, (-43.377, 26.694, -19.294)), (' F 501  ASN  HB3', ' F 505  TYR  HB2', -0.41, (-8.028, -1.905, -66.972)), (' A 161  SER  OG ', ' A 205  ASN  ND2', -0.41, (-18.648, -33.939, -4.11)), (' C   2  VAL HG21', ' C 110  VAL HG21', -0.41, (-34.058, 28.938, -26.303)), (' D  35  TRP  CZ3', ' D  88  CYS  HB3', -0.409, (-29.715, 8.445, -23.596)), (' C  33  ALA  HB3', ' C  99  ASP  HB2', -0.408, (-41.77, 22.117, -31.913)), (' C 132  LEU HD11', ' C 149  LEU  HB2', -0.408, (-34.263, 22.607, 11.829)), (' E 528  LYS  HB3', ' E 528  LYS  HE2', -0.408, (-11.735, 34.476, -53.204)), (' C  68  PHE  CE1', ' C  83  MET  HB3', -0.408, (-54.889, 17.773, -16.707)), (' F 396  TYR  O  ', ' F 513  LEU  HA ', -0.406, (-19.261, -23.196, -53.624)), (' A 170  GLY  O  ', ' A 190  VAL  HA ', -0.405, (-27.12, -25.492, -1.429)), (' B  39  LYS  HG2', ' B  84  ALA  HB2', -0.403, (-24.478, -17.966, -20.939)), (' D   6  GLN  HB3', ' D   6  GLN HE21', -0.402, (-29.572, 5.249, -19.712)), (' A 177  VAL HG22', ' A 185  SER  O  ', -0.401, (-12.683, -16.609, -1.014)), (' E 353  TRP  CE2', ' E 466  ARG  HD2', -0.401, (-40.529, 17.387, -40.727)), (' C 178  LEU HD13', ' C 179  GLN  O  ', -0.401, (-45.737, 11.768, 6.17)), (' E 431  GLY  HA2', ' E 515  PHE  CE2', -0.401, (-31.755, 28.08, -51.308)), (' F 412  PRO  HB3', ' F 426  PRO  O  ', -0.401, (-7.535, -28.148, -58.498)), (' E 348  ALA  HB2', ' E 354  ASN  ND2', -0.4, (-34.366, 11.154, -42.923))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
