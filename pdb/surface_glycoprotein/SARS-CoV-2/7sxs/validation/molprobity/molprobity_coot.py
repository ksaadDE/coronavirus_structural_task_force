# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.655, (225.857, 178.629, 260.583)), (' B 901  GLN HE21', ' B 905  ARG HH21', -0.644, (207.833, 185.904, 170.5)), (' A 105  ILE  HB ', ' A 239  GLN  HB2', -0.641, (171.405, 157.949, 247.309)), (' B 821  LEU HD11', ' B 939  SER  HB2', -0.61, (227.396, 183.618, 187.146)), (' C 206  LYS  HB2', ' C 223  LEU  HA ', -0.599, (189.921, 242.706, 231.406)), (' A  94  SER  HB2', ' A 190  ARG  HB2', -0.597, (163.259, 160.452, 233.71)), (' A 127  VAL HG21', ' A1302  NAG  H62', -0.596, (157.916, 165.658, 252.604)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.586, (229.411, 217.693, 188.552)), (' B 393  THR  HB ', ' B 522  ALA  HA ', -0.574, (204.341, 231.066, 245.22)), (' A 570  ALA  HB1', ' B 963  VAL HG11', -0.563, (216.009, 184.767, 218.708)), (' C 418  ILE  HA ', ' C 422  ASN HD22', -0.563, (195.543, 179.857, 260.694)), (' B  94  SER  HB3', ' B 190  ARG  HB2', -0.56, (251.679, 188.72, 235.059)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.557, (236.369, 187.338, 245.231)), (' B 418  ILE  HA ', ' B 422  ASN HD22', -0.554, (184.823, 213.927, 261.416)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.551, (172.234, 184.424, 186.651)), (' B 762  GLN  OE1', ' B 765  ARG  NH1', -0.541, (189.97, 188.555, 213.754)), (' C 821  LEU HD11', ' C 939  SER  HB3', -0.537, (200.469, 231.845, 186.647)), (' C 226  LEU  HG ', ' C 227  VAL HG23', -0.537, (193.887, 242.506, 242.018)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.535, (171.354, 141.637, 238.915)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.534, (234.671, 199.04, 216.844)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.532, (248.635, 181.107, 253.94)), (' C 117  LEU HD22', ' C 231  ILE HD13', -0.53, (185.602, 236.067, 249.571)), (' A 544  ASN HD21', ' A 579  PRO  HB3', -0.527, (225.768, 172.524, 237.221)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.526, (182.868, 230.029, 217.359)), (' C 278  LYS  HE3', ' C 287  ASP  HB2', -0.515, (190.949, 236.81, 217.303)), (' C 323  THR  OG1', ' C 324  GLU  OE1', -0.512, (162.348, 211.175, 232.073)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.512, (213.671, 193.518, 143.126)), (' B 995  ARG  NH2', ' C 994  ASP  OD2', -0.511, (206.481, 199.983, 233.103)), (' C 204  TYR  HA ', ' C 225  PRO  HA ', -0.51, (191.644, 238.692, 236.984)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.51, (198.971, 166.518, 188.121)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.509, (181.533, 170.452, 217.058)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.508, (184.665, 166.384, 217.336)), (' B 724  THR HG23', ' B 934  ILE HD12', -0.507, (220.986, 190.714, 182.429)), (' B  93  ALA  HB3', ' B 266  TYR  HB2', -0.5, (249.972, 196.178, 232.394)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.498, (219.726, 191.334, 167.559)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.497, (162.131, 250.88, 240.811)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.496, (262.275, 205.913, 241.76)), (' B 317  ASN  ND2', ' C 737  ASP  OD2', -0.492, (218.421, 211.653, 219.247)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.491, (181.869, 186.724, 182.431)), (' B  39  PRO  HG2', ' B  51  THR HG21', -0.483, (230.944, 190.878, 227.142)), (' C 916  LEU HD22', ' C 923  ILE HD13', -0.482, (200.126, 219.895, 162.815)), (' B 360  ASN  H  ', ' B 523  THR  HB ', -0.482, (205.898, 234.301, 250.023)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.481, (236.729, 204.476, 217.526)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.481, (177.809, 229.484, 217.362)), (' C 724  THR HG23', ' C 934  ILE HD12', -0.477, (197.767, 222.682, 182.598)), (' A  93  ALA  HB3', ' A 266  TYR  HB2', -0.477, (170.012, 158.047, 231.206)), (' A 189  LEU HD12', ' A 210  ILE HD13', -0.472, (162.952, 159.223, 226.102)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.471, (230.063, 166.669, 284.127)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.468, (173.06, 149.12, 230.282)), (' A 374  PHE  HA ', ' A 436  TRP  HB3', -0.468, (218.688, 166.675, 271.839)), (' B  92  PHE  HB3', ' B 192  PHE  HB2', -0.468, (245.929, 192.005, 237.245)), (' C 128  ILE HD13', ' C 170  TYR  HD2', -0.462, (192.736, 243.166, 249.782)), (' C 203  ILE HD12', ' C 227  VAL  HB ', -0.462, (191.582, 240.568, 243.812)), (' A 969  ASN  OD1', ' B 755  GLN  NE2', -0.462, (189.332, 189.972, 232.67)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.459, (188.124, 191.919, 143.376)), (' B  39  PRO  HG3', ' B  55  PHE  HZ ', -0.458, (232.345, 191.464, 228.209)), (' B 866  THR  H  ', ' B 869  MET  HE3', -0.457, (205.861, 173.825, 194.476)), (' A 164  ASN  OD1', ' A 165  ASN  N  ', -0.457, (170.745, 165.438, 263.121)), (' B 977  LEU HD22', ' B 993  ILE HG12', -0.454, (204.283, 185.849, 234.127)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.452, (234.351, 205.24, 207.643)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.45, (180.979, 226.416, 201.343)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.448, (171.428, 145.611, 238.143)), (' C  94  SER  HB3', ' C 190  ARG  HB2', -0.448, (183.406, 249.197, 236.157)), (' C  36  VAL HG13', ' C 222  ALA  HA ', -0.448, (188.74, 239.28, 227.332)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.447, (166.015, 248.815, 240.52)), (' B 342  PHE  HB2', ' B1307  NAG  H82', -0.446, (207.43, 224.232, 264.507)), (' B 130  VAL  HB ', ' B 168  PHE  HB3', -0.445, (236.838, 186.787, 254.252)), (' B  36  VAL HG23', ' B 222  ALA  HA ', -0.445, (240.155, 189.236, 225.896)), (' B 276  LEU  HB3', ' B 289  VAL  HB ', -0.443, (232.853, 195.645, 218.236)), (' A 971  GLY  HA3', ' A 995  ARG HH21', -0.442, (194.327, 193.892, 234.378)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.442, (163.263, 171.397, 247.211)), (' B 357  ARG  NH1', ' B 396  TYR  OH ', -0.441, (196.851, 231.618, 250.205)), (' C 659  SER  HB3', ' C 698  SER  HB3', -0.441, (171.476, 217.394, 188.31)), (' A  39  PRO  HG3', ' A  51  THR HG21', -0.44, (175.947, 177.805, 227.82)), (' C 331  ASN  HB3', ' C 580  GLN HE21', -0.439, (158.108, 196.757, 245.155)), (' A1029  MET  O  ', ' A1033  VAL  HB ', -0.439, (186.824, 201.807, 180.013)), (' A  14  GLN  HB3', ' A 158  ARG  HE ', -0.439, (161.406, 148.888, 257.951)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.437, (173.279, 180.55, 230.536)), (' B1139  ASP  HB3', ' B1142  GLN  HB2', -0.437, (206.447, 206.58, 135.523)), (' C 210  ILE HG21', ' C 217  PRO  HG3', -0.435, (182.359, 249.992, 226.746)), (' C 971  GLY  HA3', ' C 995  ARG HH21', -0.433, (197.163, 207.958, 234.057)), (' B  31  SER  HB3', ' B  60  SER  H  ', -0.432, (244.677, 201.076, 226.167)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.432, (195.264, 230.901, 231.706)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.431, (186.889, 168.269, 207.837)), (' C  16  VAL  HB ', ' C 140  PHE  HZ ', -0.43, (170.297, 254.313, 255.567)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.429, (190.18, 190.759, 174.47)), (' A  97  LYS  HG2', ' A 186  PHE  HD1', -0.427, (158.21, 152.645, 230.967)), (' B 907  ASN  ND2', ' B 911  VAL  O  ', -0.427, (209.607, 195.039, 160.286)), (' C  92  PHE  HZ ', ' C 101  ILE HD13', -0.426, (179.08, 247.85, 239.785)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.426, (223.883, 190.432, 182.081)), (' C  31  SER  HB3', ' C  60  SER  H  ', -0.425, (176.231, 237.72, 226.076)), (' B 193  VAL HG23', ' B 223  LEU HD22', -0.424, (241.513, 190.465, 232.844)), (' A 903  ALA  HB2', ' A 916  LEU HD12', -0.423, (183.704, 194.761, 160.58)), (' A 381  GLY  HA3', ' A 430  THR  HA ', -0.423, (213.89, 183.853, 264.295)), (' A 996  LEU  HA ', ' A 996  LEU HD23', -0.422, (189.107, 197.963, 230.251)), (' C 986  PRO  HA ', ' C 989  ALA  HB3', -0.42, (211.582, 208.464, 241.056)), (' B 518  LEU HD21', ' B 546  LEU HD13', -0.42, (208.523, 224.631, 236.129)), (' C 393  THR  HB ', ' C 522  ALA  HA ', -0.419, (170.841, 187.797, 244.935)), (' B1141  LEU HD23', ' B1145  LEU HD22', -0.416, (202.736, 203.997, 132.257)), (' A 106  PHE  HB2', ' A 117  LEU  HB3', -0.414, (172.38, 165.464, 248.748)), (' A 907  ASN HD21', ' A 913  GLN  HG3', -0.413, (189.612, 197.102, 158.48)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.412, (199.431, 214.666, 143.026)), (' C 902  MET  HE3', ' C1049  LEU HD13', -0.412, (200.438, 217.425, 168.431)), (' C1086  LYS  HB2', ' C1086  LYS  HE2', -0.412, (185.888, 193.998, 141.745)), (' A 324  GLU  OE2', ' A 537  LYS  NZ ', -0.411, (209.731, 159.533, 230.352)), (' B1040  VAL HG21', ' C1035  GLY  HA3', -0.41, (207.861, 206.129, 174.702)), (' A1141  LEU HD23', ' A1145  LEU HD22', -0.41, (202.79, 195.586, 131.965)), (' A 675  GLN  O  ', ' A 691  SER  N  ', -0.409, (186.278, 160.066, 198.156)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.409, (197.471, 213.027, 174.232)), (' B 358  ILE  HB ', ' B 395  VAL  HB ', -0.409, (202.932, 228.686, 253.702)), (' A 618  THR  OG1', ' A 619  GLU  OE1', -0.408, (208.858, 160.882, 215.118)), (' B 885  GLY  HA2', ' B 901  GLN  NE2', -0.408, (207.719, 184.205, 170.012)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.408, (186.118, 171.024, 200.859)), (' A 193  VAL HG13', ' A 270  LEU HD11', -0.407, (175.174, 168.299, 234.987)), (' C  83  VAL HG12', ' C 237  ARG  HG2', -0.406, (172.097, 237.723, 247.892)), (' B 105  ILE  HB ', ' B 239  GLN  HB3', -0.406, (248.306, 196.878, 248.602)), (' C 926  GLN  NE2', ' Q   1  NAG  O6 ', -0.404, (191.81, 225.15, 166.186)), (' A1139  ASP  HB3', ' A1142  GLN  HB2', -0.404, (203.151, 191.148, 135.107)), (' A1029  MET  HB2', ' A1029  MET  HE2', -0.403, (186.109, 201.034, 184.987)), (' A1074  ASN  OD1', ' B 895  GLN  NE2', -0.403, (202.093, 173.134, 162.738)), (' A 206  LYS  NZ ', ' A 224  GLU  OE2', -0.402, (161.772, 173.212, 228.125)), (' A 278  LYS  HB2', ' A 278  LYS  HE3', -0.402, (173.48, 176.736, 216.269)), (' B 412  PRO  HG3', ' B 429  PHE  HB3', -0.401, (195.542, 214.605, 249.222)), (' B 433  VAL HG12', ' B 512  VAL HG13', -0.4, (197.833, 217.058, 255.77)), (' A 528  LYS  HA ', ' A 528  LYS  HD3', -0.4, (218.928, 171.444, 246.206))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
