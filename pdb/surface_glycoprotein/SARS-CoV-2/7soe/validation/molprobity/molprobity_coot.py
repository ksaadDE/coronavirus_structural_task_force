# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 988 ', 'GLU', 0.04922072560756248, (208.66, 207.953, 232.601)), ('C', ' 988 ', 'GLU', 0.04924185341227711, (226.185, 213.54499999999993, 232.601)), ('F', ' 988 ', 'GLU', 0.049341889041223205, (212.579, 225.92599999999996, 232.601))]
data['cbeta'] = []
data['probe'] = [(' F1142  GLN  N  ', ' F1143  PRO  HD2', -0.511, (209.497, 211.212, 122.198)), (' A1142  GLN  N  ', ' A1143  PRO  HD2', -0.51, (222.821, 212.551, 122.006)), (' C1142  GLN  N  ', ' C1143  PRO  HD2', -0.508, (215.101, 224.114, 122.133)), (' C 148  ASN  HA ', ' C1315  NAG  H82', -0.478, (267.052, 272.942, 228.994)), (' F 620  VAL  N  ', ' F 621  PRO  CD ', -0.475, (185.239, 190.53, 205.412)), (' C  81  ASN  N  ', ' C  82  PRO  CD ', -0.475, (239.242, 267.903, 232.619)), (' C 620  VAL  N  ', ' C 621  PRO  CD ', -0.474, (209.12, 254.932, 205.495)), (' A  81  ASN  N  ', ' A  82  PRO  CD ', -0.474, (249.095, 169.5, 232.714)), (' A 620  VAL  N  ', ' A 621  PRO  CD ', -0.473, (252.916, 201.907, 205.378)), (' F  81  ASN  N  ', ' F  82  PRO  CD ', -0.471, (158.957, 210.021, 232.62)), (' A 329  PHE  HB3', ' A 330  PRO  HD2', -0.469, (250.988, 221.8, 235.04)), (' F 148  ASN  HA ', ' F1315  NAG  H82', -0.466, (141.141, 231.49, 229.17)), (' A 148  ASN  HA ', ' A1315  NAG  H82', -0.465, (239.717, 142.949, 228.928)), (' C 329  PHE  HB3', ' C 330  PRO  CD ', -0.465, (193.041, 243.325, 234.549)), (' A 898  PHE  N  ', ' A 899  PRO  CD ', -0.464, (207.286, 194.553, 152.147)), (' A 294  ASP  HB2', ' A 295  PRO  HD2', -0.463, (242.399, 188.794, 204.58)), (' A 329  PHE  HB3', ' A 330  PRO  CD ', -0.462, (251.013, 222.238, 234.574)), (' C 898  PHE  N  ', ' C 899  PRO  CD ', -0.461, (238.596, 219.118, 152.226)), (' F 898  PHE  N  ', ' F 899  PRO  CD ', -0.46, (201.683, 233.804, 152.132)), (' F 329  PHE  HB3', ' F 330  PRO  CD ', -0.459, (203.31, 182.249, 234.553)), (' F 329  PHE  HB3', ' F 330  PRO  HD2', -0.458, (203.856, 182.177, 235.005)), (' C 329  PHE  HB3', ' C 330  PRO  HD2', -0.457, (192.775, 242.831, 234.991)), (' F 294  ASP  HB2', ' F 295  PRO  HD2', -0.457, (179.428, 206.017, 204.402)), (' F 898  PHE  HB3', ' F 899  PRO  HD3', -0.454, (200.276, 234.156, 153.639)), (' A 898  PHE  HB3', ' A 899  PRO  HD3', -0.453, (207.638, 193.343, 153.176)), (' C 294  ASP  HB2', ' C 295  PRO  HD2', -0.448, (225.831, 252.48, 204.652)), (' F 792  PRO  HA ', ' F 793  PRO  HD3', -0.447, (202.175, 246.125, 159.139)), (' C 898  PHE  HB3', ' C 899  PRO  HD3', -0.444, (239.394, 220.044, 153.176)), (' F 862  PRO  HA ', ' F 863  PRO  HD3', -0.444, (206.061, 238.231, 191.57)), (' F  81  ASN  N  ', ' F  82  PRO  HD3', -0.435, (158.342, 209.888, 232.859)), (' A  81  ASN  N  ', ' A  82  PRO  HD3', -0.431, (249.614, 169.455, 232.712)), (' C  81  ASN  N  ', ' C  82  PRO  HD3', -0.426, (239.411, 268.596, 232.831)), (' A 984  LEU  HA ', ' A 984  LEU HD23', -0.426, (208.677, 201.866, 234.509)), (' L  57  ILE  HA ', ' L  58  PRO  HD3', -0.425, (238.607, 138.007, 258.596)), (' E  62  SER  HA ', ' E  63  PRO  HD3', -0.42, (283.9, 261.307, 234.688)), (' C 792  PRO  HA ', ' C 793  PRO  HD3', -0.418, (248.861, 212.394, 159.184)), (' C 984  LEU  HA ', ' C 984  LEU HD23', -0.417, (231.508, 216.681, 234.495)), (' C 862  PRO  HA ', ' C 863  PRO  HD3', -0.415, (240.159, 213.066, 191.52)), (' A  44  ARG  O  ', ' A 283  GLY  HA2', -0.413, (217.393, 179.386, 213.469)), (' C 714  ILE  HA ', ' C 715  PRO  HD3', -0.409, (216.549, 235.674, 150.919)), (' C  44  ARG  O  ', ' C 283  GLY  HA2', -0.409, (246.486, 235.431, 213.388)), (' C 540  ASN  ND2', ' C 549  THR  OG1', -0.409, (205.705, 243.928, 221.389)), (' A 224  GLU  HA ', ' A 225  PRO  HD3', -0.409, (224.453, 176.211, 222.542)), (' F1089  PHE  HA ', ' F1090  PRO  HD3', -0.409, (210.718, 201.983, 140.363)), (' A 540  ASN  ND2', ' A 549  THR  OG1', -0.403, (245.556, 210.307, 221.567)), (' F 540  ASN  ND2', ' F 549  THR  OG1', -0.402, (196.141, 192.994, 221.592)), (' B  62  SER  HA ', ' B  63  PRO  HD3', -0.402, (221.211, 134.009, 234.688)), (' F  44  ARG  O  ', ' F 283  GLY  HA2', -0.4, (183.389, 232.456, 212.787))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
