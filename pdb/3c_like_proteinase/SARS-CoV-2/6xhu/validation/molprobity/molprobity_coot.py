# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 128 ', 'CYS', 0.012204796803416684, (-4.694, -3.836, 36.735)), ('A', ' 130 ', 'MET', 0.0, (-4.245999999999999, -4.736, 43.478)), ('A', ' 152 ', 'ILE', 0.021458772330081238, (-11.977, 8.575999999999999, 37.571000000000005)), ('A', ' 165 ', 'MET', 0.0, (10.006000000000004, -0.571, 43.331)), ('C', ' 128 ', 'CYS', 0.006419325008311539, (-6.5809999999999995, -4.032999999999999, 19.785)), ('C', ' 130 ', 'MET', 0.0, (-6.971, -5.067000000000002, 13.0)), ('C', ' 165 ', 'MET', 0.1378331311985143, (-21.192, -0.751, 13.138))]
data['cbeta'] = []
data['probe'] = [(' A 226  THR HG23', ' A 229  ASP  H  ', -0.883, (-21.353, -24.819, 50.842)), (' A 218  TRP  CE2', ' A 279  ARG  HD2', -0.706, (-16.817, -23.134, 27.664)), (' A 218  TRP  CD2', ' A 279  ARG  HD2', -0.619, (-17.932, -23.682, 27.407)), (' C 109  GLY  HA2', ' C 200  ILE HD13', -0.618, (-2.277, -8.771, 13.033)), (' A 225  THR HG22', ' A 226  THR  O  ', -0.607, (-22.197, -22.766, 48.17)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.602, (9.202, 9.288, 42.131)), (' C  27  LEU  CD1', ' C  39  PRO  HD2', -0.597, (-20.8, 9.739, 13.434)), (' A  55  GLU  O  ', ' A  59  ILE HG12', -0.569, (18.32, 13.947, 57.031)), (' C 154  TYR  O  ', ' C 305  PHE  HB3', -0.556, (4.055, 11.482, 21.237)), (' C  27  LEU HD13', ' C  39  PRO  HD2', -0.541, (-20.898, 9.145, 14.211)), (' A 225  THR HG23', ' A 229  ASP  HB3', -0.509, (-21.51, -25.676, 48.472)), (' A  27  LEU  CD1', ' A  39  PRO  HD2', -0.5, (9.744, 9.822, 41.941)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.474, (0.866, 8.967, 29.803)), (' C   6  MET  HB2', ' C   6  MET  HE3', -0.466, (1.053, -1.706, 28.714)), (' A 233  VAL HG21', ' A 269  LYS  HD2', -0.458, (-16.7, -27.497, 45.341)), (' A 118  TYR  CE2', ' A 144  SER  HB3', -0.453, (9.152, 2.723, 33.737)), (' C 115  LEU HD11', ' C 122  PRO  HB3', -0.448, (-12.055, 8.964, 26.256)), (' C 165 AMET  HE3', ' C 167  LEU HD21', -0.447, (-20.611, -4.986, 9.259)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.445, (-20.977, -6.832, 48.047)), (' C 106  ILE HD11', ' C 130 BMET  HG3', -0.445, (-6.768, -1.618, 11.679)), (' C 106  ILE HG13', ' C 130 BMET  HE2', -0.444, (-5.627, -1.155, 9.5)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.442, (3.745, 2.225, 50.267)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.441, (-8.579, -8.27, 43.317)), (' C 165 AMET  CE ', ' C 185  PHE  HB3', -0.439, (-19.946, -3.681, 7.354)), (' A 126  TYR  CD1', ' C   6  MET  HE2', -0.438, (1.259, -0.085, 30.614)), (' C 222  ARG  HD2', ' C 222  ARG  N  ', -0.429, (15.334, -28.187, 21.964)), (' C  27  LEU HD11', ' C  39  PRO  HD2', -0.426, (-21.105, 10.02, 13.639)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.425, (2.04, 22.125, 38.359)), (' C 130 BMET  HB3', ' C 130 BMET  HE3', -0.418, (-6.065, -4.628, 10.352)), (' A 106  ILE HD11', ' A 130 BMET  HG3', -0.414, (-4.238, -1.15, 44.469)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.413, (4.442, 8.141, 49.646)), (' C 165 BMET  HB3', ' C 165 BMET  HE3', -0.402, (-22.034, 0.469, 11.055)), (' A 262  LEU  HA ', ' A 262  LEU HD23', -0.4, (-23.88, -18.49, 45.352))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
