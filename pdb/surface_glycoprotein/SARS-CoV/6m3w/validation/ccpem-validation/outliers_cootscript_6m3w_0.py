
from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

dict_residue_prop_objects = {}
class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)
        ##save property list frame object
        dict_residue_prop_objects[data_key] = list_obj
# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "clusters","rama", "rota", "cbeta", "probe", "smoc", "fdr",
               "fsc","diffmap","cablam",
               "jpred"]
  data_titles = { "clusters"  : "Outlier residue clusters",
                  "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes",
                  "smoc"  : "Local density fit (SMOC)",
                  "fdr": "Backbone position score (FDR)",
                  "fsc": "Local density fit (FSC)",
                  "diffmap": "Model-map difference",
                  "cablam": "Ca geometry (CaBLAM)",
                  "jpred":"SS prediction"}
  data_names = { "clusters"  : ["Chain","Residue","Cluster","Outlier types"],
                 "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"],
                 "smoc" : ["Chain", "Residue", "Name", "Score"],
                 "fdr" : ["Chain", "Residue", "Name", "Score"],
                 "fsc" : ["Chain", "Residue", "Name", "Score"],
                 "diffmap" : ["Chain", "Residue", "Name", "Score"],
                 "cablam" : ["Chain", "Residue","Name","recommendation","DSSP"],
                 "jpred" : ["Chain", "Residue","Name","predicted SS","current SS"]}
  if (gobject is not None) :
    data_types = {  "clusters" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_INT, gobject.TYPE_STRING,
                             gobject.TYPE_PYOBJECT],
                    "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "smoc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "fdr" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "fsc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "diffmap" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cablam" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT],
                   "jpred" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT]}
  else :
    data_types = dict([ (s, []) for s in ["clusters","rama","rota","cbeta","probe","smoc",
                                          "fdr","fsc","diffmap","cablam","jpred"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "Validation To-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    ##adding a column type for checkbox (bool) before atom coordinate
    if gobject is not None:
        column_types = column_types[:-1]+[bool]+[column_types[-1]]
    
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    ##add a cell for checkbox
    cell1 = gtk.CellRendererToggle()
    cell1.connect ("toggled", self.on_selected_toggled)
    column = gtk.TreeViewColumn('Dealt with',cell1,active=i+1)
    self.listctrl.append_column(column)
    #column.set_sort_column_id(i+1)
    #column.pack_start(cell1, True)
    
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      row = row[:-1] + (False,)+(row[-1],)
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()
  ##check box toggle
  def on_selected_toggled(self,renderer,path):
    if path is not None:
      model = self.listmodel.get_model()
      it = model.get_iter(path)
      #set toggle
      model[it][-2] = not model[it][-2]
      #set checkboxes for same residues in other lists
      try:
        chain = model[it][0]
        residue = model[it][1]
        for data_key in dict_residue_prop_objects:
          prop_obj = dict_residue_prop_objects[data_key]
          for row in prop_obj.listmodel.get_model():
            if data_key == 'probe':
              atom1_split = row[0].split()
              atom2_split = row[1].split()
              if atom1_split[0] == chain and atom1_split[1] == residue:
                row[-2] = model[it][-2]
              elif atom2_split[0] == chain and atom2_split[1] == residue:
                row[-2] = model[it][-2]
            elif row[0] == chain and row[1] == residue:
              row[-2] = model[it][-2]
      except IndexError: pass

  def check_chain_residue(self,chain,residue):
      pass
  
def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data
data = {}
data['rama'] = []
data['cbeta'] = []
data['fdr'] = []
data['fsc'] = []
data['diffmap'] = []
data['jpred'] = []
data['probe'] = [(' C1071  PHE  HB2', ' C1103  PHE  HB2', -0.676, (-5.198, 15.483, -87.615)), (' B1071  PHE  HB2', ' B1103  PHE  HB2', -0.67, (-11.019, -12.343, -87.618)), (' A1071  PHE  HB2', ' A1103  PHE  HB2', -0.657, (15.695, -2.914, -87.904)), (' A1148  LEU HD23', ' A1151  ILE HG13', -0.65, (10.839, -1.846, 20.463)), (' B1148  LEU HD23', ' B1151  ILE HG13', -0.648, (-6.904, -8.6, 20.485)), (' C1034  PHE  HB2', ' C1045  LEU  HB3', -0.646, (15.084, -13.11, -71.802)), (' A1133  GLU  HG3', ' C 982  ARG HH21', -0.645, (14.815, -2.055, -26.077)), (' C1148  LEU HD23', ' C1151  ILE HG13', -0.643, (-4.534, 10.671, 20.483)), (' A 924  SER  HB2', ' B1165  ILE HG23', -0.643, (-4.617, 8.08, 55.752)), (' A 922  THR  OG1', ' C1167  ARG  NH1', -0.64, (4.685, 9.555, 59.682)), (' A1034  PHE  HB2', ' A1045  LEU  HB3', -0.639, (-18.999, -6.429, -71.914)), (' B1034  PHE  HB2', ' B1045  LEU  HB3', -0.639, (3.959, 19.51, -71.87)), (' B 958  VAL HG11', ' C 959  LEU HD21', -0.637, (5.679, 0.156, 6.37)), (' A1165  ILE HG23', ' C 924  SER  HB2', -0.621, (-4.384, -8.496, 55.625)), (' C1164  GLU  O  ', ' C1168  LEU  HB2', -0.613, (7.378, 3.778, 58.377)), (' A1164  GLU  O  ', ' A1168  LEU  HB2', -0.607, (-0.367, -8.145, 58.218)), (' B1164  GLU  O  ', ' B1168  LEU  HB2', -0.606, (-7.079, 4.729, 58.457)), (' B 741  PHE  HA ', ' B 744  GLN HE21', -0.598, (11.225, 2.41, -31.153)), (' B1087  THR HG22', ' B1094  PRO  HA ', -0.597, (-15.112, 2.546, -92.063)), (' C 741  PHE  HA ', ' C 744  GLN HE21', -0.597, (-3.013, -10.433, -31.103)), (' B1167  ARG  NH1', ' C 922  THR  OG1', -0.596, (-10.682, -0.562, 59.918)), (' C1087  THR HG22', ' C1094  PRO  HA ', -0.596, (9.67, 11.914, -92.058)), (' A 944  LEU  O  ', ' A 948  LEU  HB2', -0.59, (-4.505, 3.259, 23.877)), (' C 944  LEU  O  ', ' C 948  LEU  HB2', -0.589, (-0.521, -5.55, 23.853)), (' A 947  GLN  HB3', ' C1151  ILE HG12', -0.586, (-5.613, 8.276, 21.763)), (' A1087  THR HG22', ' A1094  PRO  HA ', -0.584, (4.979, -14.066, -91.509)), (' A 918  GLU  OE2', ' C1167  ARG  NH1', -0.583, (5.345, 11.13, 60.784)), (' B 944  LEU  O  ', ' B 948  LEU  HB2', -0.58, (5.203, 1.884, 23.471)), (' B1130  PHE  O  ', ' B1134  LEU  HB2', -0.578, (-10.617, -12.34, -19.813)), (' A 741  PHE  HA ', ' A 744  GLN HE21', -0.574, (-7.624, 8.477, -31.074)), (' B 924  SER  HB2', ' C1165  ILE HG23', -0.573, (9.6, -0.061, 55.961)), (' A 744  GLN HE22', ' C1127  LEU HD21', -0.569, (-6.43, 11.016, -30.459)), (' C1130  PHE  O  ', ' C1134  LEU  HB2', -0.565, (-5.576, 15.321, -19.813)), (' B1164  GLU  HG2', ' C 926  ALA  HB2', -0.564, (-7.733, -0.346, 54.142)), (' A1130  PHE  O  ', ' A1134  LEU  HB2', -0.564, (16.009, -3.014, -19.827)), (' A 958  VAL HG11', ' B 959  LEU HD21', -0.554, (-2.771, 5.425, 6.62)), (' B 944  LEU  O  ', ' B 948  LEU  CB ', -0.551, (4.675, 2.678, 23.818)), (' A 694  ILE HD12', ' A1059  THR HG21', -0.55, (9.29, -15.919, -80.814)), (' B 694  ILE HD12', ' B1059  THR HG21', -0.549, (-18.303, 0.063, -80.347)), (' B 982  ARG  NH2', ' C1128  ASP  O  ', -0.548, (-4.075, 15.093, -27.067)), (' C 694  ILE HD12', ' C1059  THR HG21', -0.547, (8.801, 16.048, -80.768)), (' A 944  LEU  O  ', ' A 948  LEU  CB ', -0.547, (-4.737, 2.708, 23.782)), (' A 688  ALA  HB2', ' C1045  LEU HD21', -0.545, (18.626, -14.272, -73.33)), (' C 944  LEU  O  ', ' C 948  LEU  CB ', -0.545, (-0.417, -5.433, 23.329)), (' B 978  LEU HD11', ' C1133  GLU  HB3', -0.544, (-6.974, 11.627, -23.386)), (' A 959  LEU HD21', ' C 958  VAL HG11', -0.531, (-3.371, -5.288, 6.607)), (' C 973  VAL  O  ', ' C 977  ARG  NH1', -0.526, (4.625, 0.717, -16.834)), (' A1127  LEU HD13', ' C 982  ARG  HG3', -0.525, (11.106, -3.6, -29.048)), (' A 973  VAL  O  ', ' A 977  ARG  NH1', -0.524, (-1.805, -4.303, -16.859)), (' B1012  SER  HB3', ' C1023  ASP  HB2', -0.519, (9.694, 4.104, -71.862)), (' B 973  VAL  O  ', ' B 977  ARG  NH1', -0.515, (-2.871, 3.638, -16.747)), (' A 982  ARG  NH2', ' B1128  ASP  O  ', -0.51, (-11.063, -11.22, -26.968)), (' A 978  LEU HD11', ' B1133  GLU  HB3', -0.502, (-6.623, -11.301, -23.316)), (' C1152  SER  OG ', ' C1153  GLY  N  ', -0.502, (2.142, 8.964, 23.363)), (' C 708  VAL HG22', ' C1043  VAL HG22', -0.5, (15.73, -11.759, -62.575)), (' B 913  ILE HD13', ' B 916  ILE HD12', -0.499, (2.035, -1.818, 70.886)), (' A 913  ILE HD13', ' A 916  ILE HD12', -0.499, (0.242, 2.722, 71.207)), (' B1152  SER  OG ', ' B1153  GLY  N  ', -0.499, (-8.789, -2.707, 23.283)), (' B 708  VAL HG22', ' B1043  VAL HG22', -0.498, (2.154, 18.989, -62.423)), (' B1107  ASN  ND2', ' B1109  ASP  OD2', -0.498, (-17.606, -23.587, -82.748)), (' A 982  ARG  HG3', ' B1127  LEU HD13', -0.497, (-8.337, -8.18, -29.414)), (' A1107  ASN  ND2', ' A1109  ASP  OD2', -0.496, (29.234, -3.436, -82.73)), (' C1107  ASN  ND2', ' C1109  ASP  OD2', -0.495, (-11.806, 27.279, -82.633)), (' A1012  SER  HB3', ' B1023  ASP  HB2', -0.495, (-8.711, 6.338, -71.941)), (' A 708  VAL HG22', ' A1043  VAL HG22', -0.493, (-18.183, -7.693, -62.525)), (' C 692  ASN  O  ', ' C1059  THR  N  ', -0.492, (11.218, 20.035, -83.344)), (' A1060  ALA  HB3', ' A1077  PHE  HB2', -0.49, (14.413, -14.935, -86.628)), (' A 933  VAL HG21', ' C1159  VAL HG23', -0.49, (2.553, 8.108, 44.052)), (' A 982  ARG HH21', ' B1133  GLU  HG3', -0.489, (-8.801, -11.768, -25.662)), (' A1152  SER  OG ', ' A1153  GLY  N  ', -0.488, (6.616, -6.639, 23.37)), (' A 926  ALA  HB2', ' C1164  GLU  HG2', -0.488, (3.439, 6.328, 53.941)), (' C 913  ILE HD13', ' C 916  ILE HD12', -0.486, (-2.69, -0.833, 70.916)), (' A1116  ASN  HA ', ' C 708  VAL  HB ', -0.486, (15.984, -7.429, -60.783)), (' B1060  ALA  HB3', ' B1077  PHE  HB2', -0.485, (-19.716, -4.778, -86.699)), (' C 699  ASN  HB2', ' C1053  GLN  HB3', -0.482, (22.595, 5.912, -85.775)), (' B 692  ASN  O  ', ' B1059  THR  N  ', -0.48, (-23.117, -0.229, -83.45)), (' B 699  ASN  HB2', ' B1053  GLN  HB3', -0.478, (-16.095, 16.593, -85.656)), (' A 692  ASN  O  ', ' A1059  THR  N  ', -0.477, (11.764, -19.853, -83.458)), (' A1167  ARG  NH1', ' B 922  THR  OG1', -0.474, (5.758, -9.038, 60.083)), (' C1060  ALA  HB3', ' C1077  PHE  HB2', -0.474, (5.638, 19.465, -86.758)), (' A1149  GLY  O  ', ' A1152  SER  OG ', -0.473, (6.677, -6.66, 22.426)), (' A 913  ILE HG23', ' B1175  LEU HD22', -0.473, (-2.398, 5.037, 71.104)), (' B1015  VAL  O  ', ' C1089  ARG  NH2', -0.472, (9.071, 11.396, -77.303)), (' A 728  SER  O  ', ' A 731  CYS  N  ', -0.472, (-14.856, -4.167, -18.677)), (' A 699  ASN  HB2', ' A1053  GLN  HB3', -0.471, (-6.725, -22.33, -86.077)), (' A1120  TYR  O  ', ' C 996  ARG  NH2', -0.471, (11.834, -3.767, -50.147)), (' A1164  GLU  HG2', ' B 926  ALA  HB2', -0.47, (3.758, -6.221, 54.001)), (' A1127  LEU HD21', ' B 744  GLN HE22', -0.47, (12.669, -0.007, -30.3)), (' B 712  SER  OG ', ' B1040  HIS  ND1', -0.469, (8.904, 15.465, -53.1)), (' A1133  GLU  HB3', ' C 978  LEU HD11', -0.467, (13.099, -0.041, -23.348)), (' B 718  VAL HG21', ' B 989  TYR  HE2', -0.466, (3.525, 12.345, -38.631)), (' A 747  ARG  HD3', ' C1125  PRO  HG2', -0.464, (-10.937, 12.882, -38.006)), (' A 718  VAL HG21', ' A 989  TYR  HE2', -0.461, (-12.897, -2.95, -38.747)), (' C 718  VAL HG21', ' C 989  TYR  HE2', -0.461, (9.269, -9.615, -38.532)), (' B 728  SER  O  ', ' B 731  CYS  N  ', -0.455, (3.929, 14.924, -18.77)), (' B 710  PRO  HA ', ' B1041  GLY  HA2', -0.455, (5.141, 14.856, -58.14)), (' A1045  LEU HD21', ' B 688  ALA  HB2', -0.454, (-21.716, -9.291, -73.693)), (' A 710  PRO  HA ', ' A1041  GLY  HA2', -0.454, (-15.133, -3.216, -57.922)), (' C1023  ASP  OD1', ' C1028  GLY  N  ', -0.453, (13.588, 1.598, -74.327)), (' A1015  VAL  O  ', ' B1089  ARG  NH2', -0.453, (-14.818, 1.977, -77.286)), (' C 712  SER  OG ', ' C1040  HIS  ND1', -0.447, (9.19, -15.386, -53.134)), (' A 927  LEU HD23', ' A 930  LEU HD12', -0.447, (0.126, 2.199, 50.151)), (' C 710  PRO  HA ', ' C1041  GLY  HA2', -0.446, (10.537, -11.795, -58.193)), (' C 927  LEU HD23', ' C 930  LEU HD12', -0.446, (-1.839, -1.243, 50.53)), (' A1151  ILE HG12', ' B 947  GLN  HB3', -0.446, (9.787, 0.82, 22.311)), (' B 927  LEU HD23', ' B 930  LEU HD12', -0.446, (2.08, -0.927, 50.42)), (' B 941  LEU HD23', ' C1156  ALA  HB2', -0.445, (2.39, 5.365, 33.583)), (' B1128  ASP  N  ', ' B1128  ASP  OD1', -0.444, (-10.469, -13.702, -28.394)), (' A1167  ARG  NH1', ' B 918  GLU  OE2', -0.444, (6.75, -10.205, 60.895)), (' B1090  ASN  HB2', ' C1073  ARG HH12', -0.442, (-7.327, 6.928, -85.417)), (' C1038  ALA  HB2', ' C1043  VAL HG23', -0.441, (14.732, -14.339, -61.55)), (' C1128  ASP  N  ', ' C1128  ASP  OD1', -0.44, (-6.767, 15.768, -28.402)), (' B1038  ALA  HB2', ' B1043  VAL HG23', -0.44, (5.287, 19.752, -61.605)), (' C 728  SER  O  ', ' C 731  CYS  N  ', -0.439, (11.125, -10.603, -18.946)), (' C1123  LEU  HA ', ' C1123  LEU HD23', -0.436, (-8.143, 13.345, -42.263)), (' A1038  ALA  HB2', ' A1043  VAL HG23', -0.434, (-20.068, -5.091, -61.352)), (' B1023  ASP  OD1', ' B1028  GLY  N  ', -0.431, (-8.022, 10.941, -74.254)), (' A1123  LEU  HA ', ' A1123  LEU HD23', -0.43, (15.715, -0.069, -42.495)), (' A 920  LEU  HA ', ' A 920  LEU HD23', -0.429, (-0.258, 3.922, 60.789)), (' B 906  ALA  O  ', ' B 910  ASN  HB2', -0.428, (6.296, -4.493, 78.905)), (' B1151  ILE HG12', ' C 947  GLN  HB3', -0.428, (-4.573, -8.977, 22.202)), (' A 906  ALA  O  ', ' A 910  ASN  HB2', -0.427, (0.881, 7.354, 79.233)), (' A 929  LYS  HE2', ' C1161  ILE  HB ', -0.426, (5.381, 9.892, 48.717)), (' C1124  GLN  H  ', ' C1124  GLN  HG2', -0.425, (-5.036, 12.758, -41.318)), (' A1090  ASN  HB2', ' B1073  ARG HH12', -0.422, (-2.138, -10.147, -85.25)), (' C 906  ALA  O  ', ' C 910  ASN  HB2', -0.421, (-6.96, -3.261, 78.847)), (' A 741  PHE  O  ', ' A 745  LEU  HB2', -0.42, (-8.881, 5.183, -33.598)), (' B 982  ARG  HG3', ' C1127  LEU HD13', -0.42, (-2.888, 11.4, -29.356)), (' A1068  LYS  N  ', ' A1108  CYS  SG ', -0.419, (26.078, -8.453, -87.733)), (' C1068  LYS  N  ', ' C1108  CYS  SG ', -0.419, (-5.956, 26.529, -87.761)), (' B1068  LYS  N  ', ' B1108  CYS  SG ', -0.418, (-20.522, -18.211, -87.377)), (' A1128  ASP  N  ', ' A1128  ASP  OD1', -0.418, (16.998, -2.08, -28.003)), (' A 712  SER  OG ', ' A1040  HIS  ND1', -0.414, (-17.763, -0.019, -52.977)), (' A1159  VAL HG23', ' B 933  VAL HG21', -0.414, (6.059, -6.201, 43.733)), (' B 741  PHE  O  ', ' B 745  LEU  HB2', -0.412, (9.15, 4.946, -33.238)), (' C 744  GLN  H  ', ' C 744  GLN  HG2', -0.412, (-2.519, -12.884, -32.526)), (' A 929  LYS  HD3', ' C1161  ILE HG21', -0.411, (4.326, 8.756, 50.188)), (' A 927  LEU  HA ', ' A 927  LEU HD23', -0.41, (-0.752, 3.469, 50.584)), (' C 741  PHE  O  ', ' C 745  LEU  HB2', -0.41, (-0.161, -10.451, -33.238)), (' B1013  GLU  OE2', ' C1021  ARG  NE ', -0.409, (3.618, 0.88, -72.095)), (' A1023  ASP  OD1', ' A1028  GLY  N  ', -0.409, (-5.393, -12.548, -74.503)), (' C1032  MET  HB3', ' C1032  MET  HE2', -0.408, (10.245, -12.034, -79.918)), (' B 702  ILE HG13', ' C1110  VAL  HA ', -0.407, (-6.529, 23.552, -78.872)), (' C 930  LEU  HA ', ' C 930  LEU HD23', -0.406, (-4.785, -1.688, 46.057)), (' C 973  VAL HG13', ' C 977  ARG  NH1', -0.405, (3.297, 1.391, -15.402)), (' B1018  GLN  HA ', ' B1030  HIS  CE1', -0.405, (3.499, 9.906, -77.942)), (' A1124  GLN  H  ', ' A1124  GLN  HG2', -0.405, (13.588, -2.2, -41.365)), (' A 941  LEU HD23', ' B1156  ALA  HB2', -0.405, (-5.448, -0.456, 33.591)), (' C1018  GLN  HA ', ' C1030  HIS  CE1', -0.404, (7.321, -7.948, -77.687)), (' A1110  VAL  HA ', ' C 702  ILE HG13', -0.404, (23.474, -6.115, -79.187)), (' A 728  SER  O  ', ' A 728  SER  OG ', -0.404, (-15.139, -6.072, -19.099)), (' B1152  SER  O  ', ' B1154  ILE  N  ', -0.402, (-8.48, -3.6, 26.65)), (' B1127  LEU HD21', ' C 744  GLN HE22', -0.402, (-6.248, -10.884, -30.286)), (' B 920  LEU  HA ', ' B 920  LEU HD23', -0.402, (3.627, -1.708, 60.724)), (' A1152  SER  O  ', ' A1154  ILE  N  ', -0.402, (7.386, -5.522, 26.641)), (' C 697  PRO  HB3', ' C1051  PRO  HB3', -0.401, (17.56, 6.032, -81.758)), (' A1018  GLN  HA ', ' A1030  HIS  CE1', -0.401, (-10.588, -2.198, -77.735)), (' C 920  LEU  HA ', ' C 920  LEU HD23', -0.401, (-3.308, -2.373, 60.718)), (' A 973  VAL HG13', ' A 977  ARG  NH1', -0.4, (-0.423, -3.613, -15.818)), (' A 924  SER  HB3', ' B1168  LEU HD23', -0.4, (-3.787, 6.176, 57.305)), (' A1118  THR  OG1', ' C 710  PRO  HD2', -0.4, (10.446, -6.015, -58.633))]
data['smoc'] = [('A', 688, u'ALA', 0.8600792183257444, (20.72, -14.723999999999998, -75.67799999999998)), ('A', 702, u'ILE', 0.8573629654978612, (-14.461, -15.515, -80.23400000000001)), ('A', 709, u'MET', 0.8955197733651377, (-12.363000000000001, -5.374, -60.480999999999995)), ('A', 713, u'MET', 0.8749277901613226, (-15.049, 0.03300000000000001, -50.086)), ('A', 723, u'TYR', 0.8569032755038404, (-13.847999999999999, -5.566, -31.294999999999998)), ('A', 747, u'ARG', 0.8529086426843235, (-12.095, 8.825000000000001, -38.946)), ('A', 753, u'ALA', 0.8837223581855097, (-14.809000000000001, 5.944, -48.609)), ('A', 913, u'ILE', 0.8518245810542492, (0.797, 5.395, 71.995)), ('A', 918, u'GLU', 0.8929476930221334, (2.296, 9.16, 64.389)), ('A', 943, u'THR', 0.8790155767063736, (-6.106, 6.41, 28.457)), ('A', 947, u'GLN', 0.8637934903958825, (-7.263999999999999, 5.8919999999999995, 22.696)), ('A', 965, u'ARG', 0.8777453894022609, (-6.973000000000001, 0.09100000000000003, -3.756)), ('A', 972, u'GLU', 0.8742412515021811, (-6.843, -3.1919999999999997, -13.595)), ('A', 988, u'THR', 0.860646285847603, (-3.2680000000000002, -4.313999999999999, -37.009)), ('A', 990, u'VAL', 0.8824365431213449, (-7.106, -1.254, -39.157)), ('A', 993, u'GLN', 0.8651351632554705, (-7.893, -2.5109999999999997, -43.772000000000006)), ('A', 1011, u'MET', 0.8921306213062812, (-12.562000000000001, 2.242, -69.10799999999999)), ('A', 1019, u'SER', 0.890280492772117, (-6.263, -1.611, -77.205)), ('A', 1025, u'CYS', 0.8796953758048838, (-8.5, -5.6419999999999995, -71.73100000000001)), ('A', 1039, u'PRO', 0.8940013440818237, (-22.077, -2.94, -55.88699999999999)), ('A', 1045, u'LEU', 0.8956309645573005, (-17.427, -7.6259999999999994, -70.67299999999999)), ('A', 1055, u'ARG', 0.8774503591802763, (1.814, -24.21, -83.786)), ('A', 1059, u'THR', 0.8722869508003801, (11.2, -17.729, -83.80799999999999)), ('A', 1065, u'HIS', 0.8721882544754641, (24.87, -12.48, -91.60199999999999)), ('A', 1073, u'ARG', 0.8575235599717009, (9.785, -3.6270000000000002, -87.49400000000001)), ('A', 1074, u'GLU', 0.8472658361528558, (6.501, -5.001, -86.111)), ('A', 1080, u'ASN', 0.8498632156969793, (7.776000000000001, -21.822, -93.71900000000001)), ('A', 1088, u'GLN', 0.879733655246437, (2.9179999999999997, -10.186, -87.41900000000001)), ('A', 1090, u'ASN', 0.8646058749549625, (-0.6070000000000001, -11.957, -83.7)), ('A', 1106, u'GLY', 0.8845519678836798, (26.494, -2.134, -88.513)), ('A', 1119, u'VAL', 0.8252076226169391, (12.875000000000002, -3.124, -54.637)), ('A', 1126, u'GLU', 0.7937470652653587, (16.772, -2.0509999999999997, -34.617)), ('A', 1133, u'GLU', 0.8451315863923184, (16.149, -0.05100000000000001, -22.332)), ('A', 1143, u'SER', 0.8275955028318975, (12.607, -2.0919999999999996, 1.7280000000000002)), ('A', 1151, u'ILE', 0.860355059662612, (8.888, -2.5359999999999996, 22.877000000000002)), ('A', 1161, u'ILE', 0.8549428026093273, (3.006, -11.471, 49.217)), ('A', 1168, u'LEU', 0.7926916300559645, (-1.09, -8.773, 60.789)), ('A', 1175, u'LEU', 0.7959170420676013, (-4.319, -7.843, 70.636)), ('A', 1202, u'NAG', 0.8140110953730987, (11.666, -14.006, 32.955999999999996)), ('A', 1205, u'NAG', 0.7516577759890337, (11.164, -21.907999999999998, -101.215)), ('A', 1206, u'NAG', 0.8678829681119328, (7.6259999999999994, -25.511000000000003, -75.55)), ('A', 1207, u'NAG', 0.8505195377784145, (-10.685, -19.484999999999996, -90.96700000000001)), ('A', 1208, u'NAG', 0.8439974509047986, (16.362, -23.944, -88.106)), ('B', 1025, u'CYS', 0.8744051044721309, (-0.6340000000000001, 10.147999999999998, -71.721)), ('B', 1031, u'LEU', 0.8740462369460815, (0.8460000000000001, 13.367, -79.88799999999999)), ('B', 1032, u'MET', 0.8873757691114588, (3.7270000000000003, 14.433, -77.666)), ('B', 1039, u'PRO', 0.8918857865792691, (8.496, 20.554000000000002, -55.878)), ('B', 1055, u'ARG', 0.8661907270126312, (-21.877000000000002, 10.491, -83.766)), ('B', 1059, u'THR', 0.8640515236285555, (-20.951, -0.8770000000000001, -83.793)), ('B', 1065, u'HIS', 0.8792553045741018, (-23.235, -15.338, -91.59100000000001)), ('B', 1088, u'GLN', 0.8708634935457623, (-10.280999999999999, 2.5319999999999996, -87.408)), ('B', 1090, u'ASN', 0.8910708687482725, (-10.053, 6.468, -83.687)), ('B', 1106, u'GLY', 0.869458872804768, (-15.082, -21.915, -88.509)), ('B', 1118, u'THR', 0.8245659417189428, (-7.563999999999999, -8.267, -57.812)), ('B', 1119, u'VAL', 0.8412831449014853, (-9.12, -9.635, -54.631)), ('B', 1125, u'PRO', 0.8407110040542742, (-8.807, -13.469000000000001, -38.118)), ('B', 1126, u'GLU', 0.7830294720333237, (-10.126, -13.555000000000001, -34.612)), ('B', 1132, u'GLU', 0.8847851630112716, (-11.056000000000001, -16.38, -22.103)), ('B', 1133, u'GLU', 0.8617363463008765, (-8.076, -14.019, -22.328)), ('B', 1151, u'ILE', 0.8433424629320012, (-6.578, -6.506, 22.883)), ('B', 1164, u'GLU', 0.8492898304178558, (-9.213999999999999, 2.728, 56.144)), ('B', 1168, u'LEU', 0.7593714427979069, (-6.978000000000001, 5.238, 60.8)), ('B', 1171, u'VAL', 0.8344560537751652, (-7.914, 5.8629999999999995, 65.909)), ('B', 1175, u'LEU', 0.7766045488054341, (-4.555, 7.566999999999999, 70.647)), ('B', 1202, u'NAG', 0.819516235849882, (-17.918, -3.206, 32.94)), ('B', 1205, u'NAG', 0.7802298823490033, (-24.532, 1.2329999999999999, -101.20700000000001)), ('B', 1207, u'NAG', 0.8614810405890376, (-11.627999999999998, 19.005, -90.962)), ('B', 1208, u'NAG', 0.82916629079359, (-28.924, -2.257, -88.11999999999999)), ('B', 688, u'ALA', 0.8332081552615253, (-23.099, -10.629, -75.66499999999999)), ('B', 701, u'SER', 0.9029906042663784, (-9.563, 19.528, -81.84400000000001)), ('B', 702, u'ILE', 0.8588561712945547, (-6.2139999999999995, 20.246, -80.218)), ('B', 706, u'THR', 0.8845197273085204, (-1.508, 19.374000000000002, -68.07199999999999)), ('B', 709, u'MET', 0.8818866063654949, (1.533, 13.355000000000002, -60.471)), ('B', 713, u'MET', 0.8660321911733075, (7.5649999999999995, 12.978, -50.08)), ('B', 714, u'ALA', 0.899297090288387, (8.582, 15.458, -47.432)), ('B', 723, u'TYR', 0.8284712058490863, (2.124, 14.726999999999999, -31.284999999999997)), ('B', 747, u'ARG', 0.8635753332911181, (13.712, 6.023, -38.946)), ('B', 753, u'ALA', 0.9049236116425545, (12.567, 9.817, -48.606)), ('B', 918, u'GLU', 0.8826313293956538, (6.867999999999999, -6.653999999999999, 64.38799999999999)), ('B', 919, u'SER', 0.8864023939463832, (3.678, -5.345, 62.790000000000006)), ('B', 925, u'THR', 0.8589834453523117, (8.192, -4.603999999999999, 54.297000000000004)), ('B', 926, u'ALA', 0.8535685605115235, (4.826999999999999, -4.627999999999999, 52.543)), ('B', 943, u'THR', 0.8614308130289062, (8.664, 2.013, 28.459)), ('B', 947, u'GLN', 0.8584157962792919, (8.790999999999999, 3.278, 22.698)), ('B', 963, u'LEU', 0.8769621050832984, (-0.15000000000000002, 6.258, 0.516)), ('B', 965, u'ARG', 0.875366039440437, (3.606, 5.933000000000001, -3.75)), ('B', 976, u'ASP', 0.8399295033033793, (-0.51, 5.332, -19.093)), ('B', 977, u'ARG', 0.8197676851473894, (-3.9859999999999998, 4.407, -20.276)), ('B', 988, u'THR', 0.8451703944389836, (-2.078, 4.937, -37.001)), ('B', 1011, u'MET', 0.8949950370662458, (8.226999999999999, 9.726999999999999, -69.103)), ('C', 1031, u'LEU', 0.8399870647344263, (11.312000000000001, -7.374, -79.874)), ('C', 1032, u'MET', 0.8654291220616548, (10.827, -10.407, -77.651)), ('C', 1039, u'PRO', 0.883349093591104, (13.801, -17.556, -55.858)), ('C', 1045, u'LEU', 0.903307687903723, (15.483, -11.169, -70.642)), ('C', 1054, u'GLU', 0.9015770264406838, (20.213, 10.052000000000001, -83.427)), ('C', 1055, u'ARG', 0.8589482584269625, (19.951, 13.839, -83.751)), ('C', 1073, u'ARG', 0.8371555498017459, (-1.812, 10.195, -87.49300000000001)), ('C', 1080, u'ASN', 0.8450550344139882, (14.872000000000002, 17.747, -93.692)), ('C', 1088, u'GLN', 0.8656121763981508, (7.332, 7.6339999999999995, -87.403)), ('C', 1090, u'ASN', 0.856841707882207, (10.647999999999998, 5.506, -83.67799999999998)), ('C', 1095, u'GLN', 0.8820473750743706, (7.535, 10.754, -95.399)), ('C', 1106, u'GLY', 0.8571640996572365, (-11.619, 23.804000000000002, -88.53)), ('C', 1118, u'THR', 0.7958868185090356, (-3.44, 10.572000000000001, -57.818999999999996)), ('C', 1119, u'VAL', 0.8200713928310505, (-3.8729999999999998, 12.6, -54.639)), ('C', 1126, u'GLU', 0.7915205651764768, (-6.816, 15.407, -34.624)), ('C', 1133, u'GLU', 0.8431962144168087, (-8.236999999999998, 13.852000000000002, -22.341)), ('C', 1143, u'SER', 0.7966391150088393, (-4.7139999999999995, 11.850000000000001, 1.7240000000000002)), ('C', 1151, u'ILE', 0.8328555450804676, (-2.468, 8.881, 22.877000000000002)), ('C', 1164, u'GLU', 0.8274551650475415, (6.841, 6.662999999999999, 56.149)), ('C', 1168, u'LEU', 0.7428204390144629, (7.927, 3.4859999999999998, 60.806999999999995)), ('C', 1171, u'VAL', 0.8148690363907688, (8.926, 3.997, 65.91600000000001)), ('C', 1175, u'LEU', 0.7494779542356564, (8.759, 0.23600000000000002, 70.65599999999999)), ('C', 688, u'ALA', 0.8318281043286795, (2.135, 25.261999999999997, -75.67199999999998)), ('C', 701, u'SER', 0.8844814730131864, (21.787, -1.323, -81.82199999999999)), ('C', 702, u'ILE', 0.8301512475174001, (20.77, -4.593999999999999, -80.195)), ('C', 706, u'THR', 0.8842407392977847, (17.69, -8.263, -68.051)), ('C', 709, u'MET', 0.8763718216212478, (10.946, -7.96, -60.456999999999994)), ('C', 713, u'MET', 0.8568353653864487, (7.649, -13.027999999999999, -50.067)), ('C', 739, u'GLY', 0.8398720983967966, (-2.9619999999999997, -11.115, -25.261999999999997)), ('C', 747, u'ARG', 0.8174121778199681, (-1.436, -14.97, -38.940999999999995)), ('C', 903, u'LYS', 0.8054174984374667, (-7.996, -1.05, 86.46000000000001)), ('C', 913, u'ILE', 0.8718201545204189, (-5.239000000000001, -2.117, 71.992)), ('C', 918, u'GLU', 0.876090572848578, (-9.229999999999999, -2.75, 64.381)), ('C', 920, u'LEU', 0.887885870165607, (-4.324999999999999, -3.444, 61.673)), ('C', 925, u'THR', 0.866683708647448, (-8.083, -4.913, 54.291000000000004)), ('C', 928, u'GLY', 0.851410614317296, (-5.234, -6.88, 50.312)), ('C', 932, u'ASP', 0.8504877740095419, (-5.437, -7.621999999999999, 44.11)), ('C', 943, u'THR', 0.8411524588627273, (-2.521, -8.578, 28.459999999999997)), ('C', 947, u'GLN', 0.840532193315084, (-1.476, -9.311, 22.701)), ('C', 952, u'PHE', 0.87971256422951, (2.4219999999999997, -5.283, 16.041999999999998)), ('C', 954, u'ALA', 0.8679197168298256, (0.19600000000000004, -8.776, 12.366000000000001)), ('C', 965, u'ARG', 0.8297838095461508, (3.4059999999999997, -6.103999999999999, -3.744)), ('C', 972, u'GLU', 0.8462234706067312, (6.179, -4.319999999999999, -13.579)), ('C', 976, u'ASP', 0.8373555977363354, (4.915, -2.228, -19.087)), ('C', 977, u'ARG', 0.8225136568915601, (5.813999999999999, 1.254, -20.27)), ('C', 994, u'LEU', 0.8543940565425189, (2.57, -5.593999999999999, -44.924)), ('C', 1011, u'MET', 0.8511525753348264, (4.511, -12.017999999999999, -69.09400000000001))]
data['rota'] = [('A', ' 731 ', 'CYS', 0.1703943663350606, (-13.223, -3.284, -19.683)), ('A', ' 973 ', 'VAL', 0.22723075531447057, (-3.116, -3.402, -14.391999999999998)), ('B', ' 731 ', 'CYS', 0.17033286618512297, (3.795, 13.04, -19.675)), ('B', ' 973 ', 'VAL', 0.22931485495455195, (-1.353, 4.341999999999998, -14.384)), ('C', ' 731 ', 'CYS', 0.1692224837406072, (9.523, -9.76, -19.661)), ('C', ' 973 ', 'VAL', 0.22712998077899452, (4.461, -1.0069999999999995, -14.379))]
data['clusters'] = [('A', '1073', 1, 'smoc Outlier', (9.785, -3.6270000000000002, -87.49400000000001)), ('A', '1074', 1, 'smoc Outlier', (6.501, -5.001, -86.111)), ('A', '1087', 1, 'Dihedral angle:CA:C', (5.17, -11.907, -89.84400000000001)), ('A', '1088', 1, 'Dihedral angle:N:CA\nsmoc Outlier', (2.9179999999999997, -10.186, -87.41900000000001)), ('A', '1090', 1, 'smoc Outlier', (-0.6070000000000001, -11.957, -83.7)), ('A', '1092', 1, 'Dihedral angle:CA:C', (1.6560000000000001, -15.633999999999999, -89.266)), ('A', '1093', 1, 'Dihedral angle:N:CA', (1.007, -14.854000000000001, -92.842)), ('A', '723', 2, 'smoc Outlier', (-13.847999999999999, -5.566, -31.294999999999998)), ('A', '725', 2, 'cablam Outlier', (-14.6, -5.6, -25.6)), ('A', '726', 2, 'cablam Outlier', (-17.3, -8.2, -25.5)), ('A', '727', 2, 'cablam CA Geom Outlier', (-18.1, -8.5, -21.8)), ('A', '728', 2, 'backbone clash\nside-chain clash\ncablam Outlier', (-15.139, -6.072, -19.099)), ('A', '729', 2, 'Dihedral angle:CA:C', (-18.097, -3.877, -18.092)), ('A', '730', 2, 'Dihedral angle:N:CA', (-14.843, -3.2030000000000003, -16.224)), ('A', '1147', 3, 'Dihedral angle:CA:C\ncablam Outlier', (8.662, -2.3309999999999995, 14.043)), ('A', '1148', 3, 'Dihedral angle:N:CA\ncablam Outlier', (10.468, -3.7640000000000002, 17.061)), ('A', '1151', 3, 'smoc Outlier', (8.888, -2.5359999999999996, 22.877000000000002)), ('A', '1152', 3, 'Dihedral angle:CA:C', (5.9239999999999995, -4.543, 24.035)), ('A', '1153', 3, 'Dihedral angle:N:CA\ncablam Outlier', (7.856999999999999, -7.566, 25.261)), ('A', '1155', 3, 'cablam Outlier', (6.8, -7.7, 31.3)), ('A', '1080', 4, 'Dihedral angle:CA:C\nsmoc Outlier', (7.776000000000001, -21.822, -93.71900000000001)), ('A', '1081', 4, 'Dihedral angle:N:CA\ncablam Outlier', (9.732, -24.918, -93.14999999999999)), ('A', '1082', 4, 'Dihedral angle:CA:C\ncablam Outlier', (13.136999999999999, -23.272, -93.687)), ('A', '1083', 4, 'Dihedral angle:N:CA\ncablam Outlier', (12.677999999999999, -20.008, -95.512)), ('A', '1205', 4, 'Bond angle:C2:N2:C7\nBond angle:C1:C2:C3\nBond angle:C1:O5:C5\nBond angle:C1:C2:N2\nDihedral angle:C2:C1:O5:C5\nDihedral angle:C3:C1:C2:O5\nsmoc Outlier', (11.164, -21.907999999999998, -101.215)), ('A', '1208', 4, 'smoc Outlier', (16.362, -23.944, -88.106)), ('A', '1065', 5, 'Dihedral angle:CA:C\nsmoc Outlier', (24.87, -12.48, -91.60199999999999)), ('A', '1066', 5, 'Dihedral angle:N:CA\ncablam Outlier', (27.75, -10.1, -92.088)), ('A', '1067', 5, 'Dihedral angle:CA:C', (28.584999999999997, -8.895000000000001, -88.611)), ('A', '1068', 5, 'Dihedral angle:N:CA', (25.35, -7.1259999999999994, -89.27799999999999)), ('A', '1106', 5, 'smoc Outlier', (26.494, -2.134, -88.513)), ('A', '1115', 6, 'Dihedral angle:CA:C', (18.654000000000003, -5.1579999999999995, -63.556999999999995)), ('A', '1116', 6, 'Dihedral angle:N:CA', (16.604000000000003, -5.55, -60.475)), ('A', '1117', 6, 'Bond angle:C\ncablam Outlier', (14.046999999999999, -2.761, -60.066)), ('A', '1118', 6, 'Bond angle:N:CA\ncablam Outlier', (10.913, -2.4579999999999997, -57.818)), ('A', '1119', 6, 'smoc Outlier', (12.875000000000002, -3.124, -54.637)), ('A', '918', 7, 'smoc Outlier', (2.296, 9.16, 64.389)), ('A', '920', 7, 'side-chain clash', (-0.258, 3.922, 60.789)), ('A', '973', 7, 'Rotamer\nside-chain clash', (-3.787, 6.176, 57.305)), ('A', '977', 7, 'side-chain clash', (-3.787, 6.176, 57.305)), ('A', '988', 8, 'smoc Outlier', (-3.2680000000000002, -4.313999999999999, -37.009)), ('A', '990', 8, 'smoc Outlier', (-7.106, -1.254, -39.157)), ('A', '993', 8, 'smoc Outlier', (-7.893, -2.5109999999999997, -43.772000000000006)), ('A', '996', 8, 'Dihedral angle:CD:NE:CZ:NH1', (-6.771000000000001, -2.943, -48.7)), ('A', '1123', 9, 'cablam Outlier', (14.1, 0.4, -42.7)), ('A', '1124', 9, 'Dihedral angle:CA:C\ncablam Outlier', (12.61, -0.8660000000000001, -39.492000000000004)), ('A', '1125', 9, 'Dihedral angle:N:CA\nDihedral angle:CA:C\ncablam Outlier', (16.039, -0.9490000000000001, -38.12200000000001)), ('A', '1126', 9, 'Dihedral angle:N:CA\nsmoc Outlier', (16.772, -2.0509999999999997, -34.617)), ('A', '741', 10, 'side-chain clash', (4.326, 8.756, 50.188)), ('A', '745', 10, 'side-chain clash', (4.326, 8.756, 50.188)), ('A', '906', 10, 'side-chain clash', (5.381, 9.892, 48.717)), ('A', '910', 10, 'side-chain clash', (5.381, 9.892, 48.717)), ('A', '1133', 11, 'smoc Outlier', (16.149, -0.05100000000000001, -22.332)), ('A', '1135', 11, 'Dihedral angle:CA:C', (18.497999999999998, -0.04400000000000001, -17.07)), ('A', '1136', 11, 'Dihedral angle:N:CA', (18.398, 3.444, -18.49)), ('A', '1137', 11, 'cablam Outlier', (15.0, 4.1, -16.8)), ('A', '709', 12, 'smoc Outlier', (-12.363000000000001, -5.374, -60.480999999999995)), ('A', '718', 12, 'side-chain clash', (-15.133, -3.216, -57.922)), ('A', '989', 12, 'side-chain clash', (-15.133, -3.216, -57.922)), ('A', '1045', 13, 'smoc Outlier', (-17.427, -7.6259999999999994, -70.67299999999999)), ('A', '705', 13, 'cablam Outlier', (-13.8, -12.5, -70.8)), ('A', '706', 13, 'cablam Outlier', (-16.1, -11.0, -68.1)), ('A', '1140', 14, 'Dihedral angle:CA:C\ncablam Outlier', (14.256, -1.687, -8.122)), ('A', '1141', 14, 'Dihedral angle:N:CA\ncablam Outlier', (13.173, 0.10800000000000001, -4.933000000000001)), ('A', '1011', 15, 'smoc Outlier', (-12.562000000000001, 2.242, -69.10799999999999)), ('A', '1016', 15, 'cablam Outlier', (-13.2, 4.1, -75.6)), ('A', '913', 16, 'side-chain clash\nbackbone clash\nsmoc Outlier', (-2.398, 5.037, 71.104)), ('A', '916', 16, 'side-chain clash\nbackbone clash', (-2.398, 5.037, 71.104)), ('A', '731', 17, 'Rotamer\nbackbone clash\nside-chain clash', (-10.937, 12.882, -38.006)), ('A', '747', 17, 'Dihedral angle:CD:NE:CZ:NH1\nsmoc Outlier', (-12.095, 8.825000000000001, -38.946)), ('A', '738', 18, 'Bond angle:C', (-7.938000000000001, 4.833, -23.41)), ('A', '739', 18, 'Bond angle:N:CA', (-8.014, 8.152000000000001, -25.264)), ('A', '713', 19, 'smoc Outlier', (-15.049, 0.03300000000000001, -50.086)), ('A', '753', 19, 'smoc Outlier', (-14.809000000000001, 5.944, -48.609)), ('A', '1059', 20, 'smoc Outlier', (11.2, -17.729, -83.80799999999999)), ('A', '744', 20, 'side-chain clash', (9.29, -15.919, -80.814)), ('A', '944', 21, 'side-chain clash', (-3.371, -5.288, 6.607)), ('A', '948', 21, 'side-chain clash', (-3.371, -5.288, 6.607)), ('A', '943', 22, 'smoc Outlier', (-6.106, 6.41, 28.457)), ('A', '947', 22, 'smoc Outlier', (-7.263999999999999, 5.8919999999999995, 22.696)), ('B', '1039', 1, 'cablam Outlier\nsmoc Outlier', (8.5, 20.6, -55.9)), ('B', '709', 1, 'smoc Outlier', (1.533, 13.355000000000002, -60.471)), ('B', '713', 1, 'smoc Outlier', (7.5649999999999995, 12.978, -50.08)), ('B', '714', 1, 'smoc Outlier', (8.582, 15.458, -47.432)), ('B', '728', 1, 'backbone clash\nside-chain clash\ncablam Outlier', (5.141, 14.856, -58.14)), ('B', '731', 1, 'Rotamer\nbackbone clash\nside-chain clash', (5.141, 14.856, -58.14)), ('B', '744', 1, 'side-chain clash', (8.904, 15.465, -53.1)), ('B', '753', 1, 'smoc Outlier', (12.567, 9.817, -48.606)), ('B', '723', 2, 'smoc Outlier', (2.124, 14.726999999999999, -31.284999999999997)), ('B', '725', 2, 'cablam Outlier', (2.4, 15.4, -25.6)), ('B', '726', 2, 'cablam Outlier', (1.5, 19.1, -25.5)), ('B', '727', 2, 'cablam CA Geom Outlier', (1.7, 19.9, -21.8)), ('B', '729', 2, 'Dihedral angle:CA:C', (5.716, 17.559, -18.083)), ('B', '730', 2, 'Dihedral angle:N:CA', (4.676, 14.402000000000001, -16.215)), ('B', '906', 2, 'side-chain clash', (-2.888, 11.4, -29.356)), ('B', '910', 2, 'side-chain clash', (-2.888, 11.4, -29.356)), ('B', '1147', 3, 'Dihedral angle:CA:C\ncablam Outlier', (-6.292, -6.409000000000001, 14.047999999999998)), ('B', '1148', 3, 'Dihedral angle:N:CA\ncablam Outlier', (-8.434, -7.259, 17.067)), ('B', '1151', 3, 'smoc Outlier', (-6.578, -6.506, 22.883)), ('B', '1152', 3, 'Dihedral angle:CA:C', (-6.836, -2.9359999999999995, 24.041999999999998)), ('B', '1153', 3, 'Dihedral angle:N:CA\ncablam Outlier', (-10.42, -3.101, 25.27)), ('B', '1155', 3, 'cablam Outlier', (-10.0, -2.2, 31.3)), ('B', '1080', 4, 'Dihedral angle:CA:C', (-22.791999999999998, 4.137, -93.7)), ('B', '1081', 4, 'Dihedral angle:N:CA\ncablam Outlier', (-26.45, 3.989, -93.12899999999999)), ('B', '1082', 4, 'Dihedral angle:CA:C\ncablam Outlier', (-26.726, 0.21700000000000003, -93.667)), ('B', '1083', 4, 'Dihedral angle:N:CA\ncablam Outlier', (-23.67, -1.015, -95.495)), ('B', '1205', 4, 'Bond angle:C2:N2:C7\nBond angle:C1:C2:C3\nBond angle:C1:O5:C5\nBond angle:C1:C2:N2\nDihedral angle:C2:C1:O5:C5\nDihedral angle:C3:C1:C2:O5\nsmoc Outlier', (-24.532, 1.2329999999999999, -101.20700000000001)), ('B', '1208', 4, 'smoc Outlier', (-28.924, -2.257, -88.11999999999999)), ('B', '918', 5, 'side-chain clash\nsmoc Outlier', (6.75, -10.205, 60.895)), ('B', '919', 5, 'smoc Outlier', (3.678, -5.345, 62.790000000000006)), ('B', '920', 5, 'side-chain clash', (3.627, -1.708, 60.724)), ('B', '922', 5, 'side-chain clash', (5.758, -9.038, 60.083)), ('B', '925', 5, 'smoc Outlier', (8.192, -4.603999999999999, 54.297000000000004)), ('B', '926', 5, 'side-chain clash\nsmoc Outlier', (3.758, -6.221, 54.001)), ('B', '1087', 6, 'Dihedral angle:CA:C', (-12.899000000000001, 1.4409999999999998, -89.832)), ('B', '1088', 6, 'Dihedral angle:N:CA\nsmoc Outlier', (-10.280999999999999, 2.5319999999999996, -87.408)), ('B', '1090', 6, 'smoc Outlier', (-10.053, 6.468, -83.687)), ('B', '1092', 6, 'Dihedral angle:CA:C', (-14.372000000000002, 6.346, -89.251)), ('B', '1093', 6, 'Dihedral angle:N:CA', (-13.374, 6.521, -92.827)), ('B', '1065', 7, 'Dihedral angle:CA:C\nsmoc Outlier', (-23.235, -15.338, -91.59100000000001)), ('B', '1066', 7, 'Dihedral angle:N:CA\ncablam Outlier', (-22.613000000000003, -19.022, -92.07799999999999)), ('B', '1067', 7, 'Dihedral angle:CA:C', (-21.983999999999998, -20.349, -88.603)), ('B', '1068', 7, 'Dihedral angle:N:CA', (-18.835, -18.429, -89.271)), ('B', '1106', 7, 'smoc Outlier', (-15.082, -21.915, -88.509)), ('B', '1132', 8, 'smoc Outlier', (-11.056000000000001, -16.38, -22.103)), ('B', '1133', 8, 'smoc Outlier', (-8.076, -14.019, -22.328)), ('B', '1135', 8, 'Dihedral angle:CA:C', (-9.239999999999998, -16.06, -17.066)), ('B', '1136', 8, 'Dihedral angle:N:CA', (-6.169, -17.715, -18.488999999999997)), ('B', '1137', 8, 'cablam Outlier', (-3.9, -15.2, -16.8)), ('B', '1115', 9, 'Dihedral angle:CA:C', (-13.773, -13.622, -63.550999999999995)), ('B', '1116', 9, 'Dihedral angle:N:CA', (-13.086, -11.652000000000001, -60.468)), ('B', '1117', 9, 'Bond angle:C\ncablam Outlier', (-9.393, -10.829, -60.061)), ('B', '1118', 9, 'Bond angle:N:CA\ncablam Outlier\nsmoc Outlier', (-7.563999999999999, -8.267, -57.812)), ('B', '1119', 9, 'smoc Outlier', (-9.12, -9.635, -54.631)), ('B', '1123', 10, 'cablam Outlier', (-6.7, -12.4, -42.7)), ('B', '1124', 10, 'Dihedral angle:CA:C\ncablam Outlier', (-7.023, -10.539, -39.488)), ('B', '1125', 10, 'Dihedral angle:N:CA\nDihedral angle:CA:C\ncablam Outlier\nsmoc Outlier', (-8.807, -13.469000000000001, -38.118)), ('B', '1126', 10, 'Dihedral angle:N:CA\nsmoc Outlier', (-10.126, -13.555000000000001, -34.612)), ('B', '701', 11, 'smoc Outlier', (-9.563, 19.528, -81.84400000000001)), ('B', '702', 11, 'smoc Outlier', (-6.2139999999999995, 20.246, -80.218)), ('B', '741', 11, 'side-chain clash', (-6.529, 23.552, -78.872)), ('B', '745', 11, 'side-chain clash', (-6.529, 23.552, -78.872)), ('B', '1164', 12, 'smoc Outlier', (-9.213999999999999, 2.728, 56.144)), ('B', '1168', 12, 'smoc Outlier', (-6.978000000000001, 5.238, 60.8)), ('B', '1171', 12, 'smoc Outlier', (-7.914, 5.8629999999999995, 65.909)), ('B', '1175', 12, 'smoc Outlier', (-4.555, 7.566999999999999, 70.647)), ('B', '973', 13, 'Rotamer\nside-chain clash', (-2.871, 3.638, -16.747)), ('B', '976', 13, 'smoc Outlier', (-0.51, 5.332, -19.093)), ('B', '977', 13, 'side-chain clash\nsmoc Outlier', (-2.871, 3.638, -16.747)), ('B', '959', 14, 'side-chain clash', (-2.771, 5.425, 6.62)), ('B', '963', 14, 'smoc Outlier', (-0.15000000000000002, 6.258, 0.516)), ('B', '965', 14, 'smoc Outlier', (3.606, 5.933000000000001, -3.75)), ('B', '1140', 15, 'Dihedral angle:CA:C\ncablam Outlier', (-8.54, -11.568, -8.116999999999999)), ('B', '1141', 15, 'Dihedral angle:N:CA\ncablam Outlier', (-6.442, -11.527999999999999, -4.929)), ('B', '927', 16, 'side-chain clash', (2.39, 5.365, 33.583)), ('B', '930', 16, 'side-chain clash', (2.39, 5.365, 33.583)), ('B', '718', 17, 'side-chain clash', (3.525, 12.345, -38.631)), ('B', '989', 17, 'side-chain clash', (3.525, 12.345, -38.631)), ('B', '705', 18, 'cablam Outlier', (-4.0, 18.2, -70.8)), ('B', '706', 18, 'cablam Outlier\nsmoc Outlier', (-1.5, 19.4, -68.1)), ('B', '1011', 19, 'smoc Outlier', (8.226999999999999, 9.726999999999999, -69.103)), ('B', '1016', 19, 'cablam Outlier', (10.2, 9.4, -75.6)), ('B', '913', 20, 'side-chain clash\nbackbone clash', (-16.095, 16.593, -85.656)), ('B', '916', 20, 'side-chain clash\nbackbone clash', (-16.095, 16.593, -85.656)), ('B', '738', 21, 'Bond angle:C', (8.185, 4.409000000000001, -23.407999999999998)), ('B', '739', 21, 'Bond angle:N:CA', (11.097999999999999, 2.8179999999999996, -25.264)), ('B', '1031', 22, 'smoc Outlier', (0.8460000000000001, 13.367, -79.88799999999999)), ('B', '1032', 22, 'smoc Outlier', (3.7270000000000003, 14.433, -77.666)), ('B', '944', 23, 'side-chain clash', (-6.974, 11.627, -23.386)), ('B', '948', 23, 'side-chain clash', (-6.974, 11.627, -23.386)), ('B', '943', 24, 'smoc Outlier', (8.664, 2.013, 28.459)), ('B', '947', 24, 'side-chain clash\nsmoc Outlier', (9.787, 0.82, 22.311)), ('C', '725', 1, 'cablam Outlier', (12.2, -9.7, -25.5)), ('C', '726', 1, 'cablam Outlier', (15.9, -10.7, -25.5)), ('C', '727', 1, 'cablam CA Geom Outlier', (16.5, -11.3, -21.8)), ('C', '728', 1, 'backbone clash\ncablam Outlier', (11.125, -10.603, -18.946)), ('C', '729', 1, 'Dihedral angle:CA:C', (12.517, -13.65, -18.064999999999998)), ('C', '730', 1, 'Dihedral angle:N:CA', (10.275, -11.195, -16.201)), ('C', '731', 1, 'Rotamer\nbackbone clash', (11.125, -10.603, -18.946)), ('C', '1147', 2, 'Dihedral angle:CA:C\ncablam Outlier', (-2.5149999999999997, 8.581, 14.043)), ('C', '1148', 2, 'Dihedral angle:N:CA\ncablam Outlier', (-2.208, 10.865000000000002, 17.061)), ('C', '1151', 2, 'smoc Outlier', (-2.468, 8.881, 22.877000000000002)), ('C', '1152', 2, 'Dihedral angle:CA:C', (0.7690000000000001, 7.356, 24.04)), ('C', '1153', 2, 'Dihedral angle:N:CA\ncablam Outlier', (2.381, 10.561, 25.269)), ('C', '1155', 2, 'cablam Outlier', (3.0, 9.7, 31.3)), ('C', '924', 3, 'side-chain clash', (-4.384, -8.496, 55.625)), ('C', '925', 3, 'smoc Outlier', (-8.083, -4.913, 54.291000000000004)), ('C', '927', 3, 'side-chain clash', (-1.839, -1.243, 50.53)), ('C', '928', 3, 'smoc Outlier', (-5.234, -6.88, 50.312)), ('C', '930', 3, 'side-chain clash', (-4.785, -1.688, 46.057)), ('C', '932', 3, 'smoc Outlier', (-5.437, -7.621999999999999, 44.11)), ('C', '1087', 4, 'Dihedral angle:CA:C', (7.667999999999999, 10.449, -89.82799999999999)), ('C', '1088', 4, 'Dihedral angle:N:CA\nsmoc Outlier', (7.332, 7.6339999999999995, -87.403)), ('C', '1090', 4, 'smoc Outlier', (10.647999999999998, 5.506, -83.67799999999998)), ('C', '1092', 4, 'Dihedral angle:CA:C', (12.664, 9.328, -89.242)), ('C', '1093', 4, 'Dihedral angle:N:CA', (12.331, 8.371, -92.818)), ('C', '1095', 4, 'smoc Outlier', (7.535, 10.754, -95.399)), ('C', '1065', 5, 'Dihedral angle:CA:C', (-1.8860000000000001, 27.684, -91.603)), ('C', '1066', 5, 'Dihedral angle:N:CA\ncablam Outlier', (-5.402, 28.947999999999997, -92.095)), ('C', '1067', 5, 'Dihedral angle:CA:C', (-6.87, 29.051000000000002, -88.621)), ('C', '1068', 5, 'Dihedral angle:N:CA', (-6.74, 25.366, -89.287)), ('C', '1106', 5, 'smoc Outlier', (-11.619, 23.804000000000002, -88.53)), ('C', '1080', 6, 'Dihedral angle:CA:C\nsmoc Outlier', (14.872000000000002, 17.747, -93.692)), ('C', '1081', 6, 'Dihedral angle:N:CA\ncablam Outlier', (16.536, 21.009, -93.121)), ('C', '1082', 6, 'Dihedral angle:CA:C\ncablam Outlier', (13.384, 23.098, -93.663)), ('C', '1083', 6, 'Dihedral angle:N:CA\ncablam Outlier', (10.814, 21.039, -95.492)), ('C', '1205', 6, 'Bond angle:C2:N2:C7\nBond angle:C1:C2:C3\nBond angle:C1:O5:C5\nBond angle:C1:C2:N2\nDihedral angle:C2:C1:O5:C5\nDihedral angle:C3:C1:C2:O5', (13.142999999999999, 20.634000000000004, -101.233)), ('C', '1115', 7, 'Dihedral angle:CA:C', (-5.058, 18.607000000000003, -63.563)), ('C', '1116', 7, 'Dihedral angle:N:CA', (-3.68, 17.043, -60.478)), ('C', '1117', 7, 'Bond angle:C\ncablam Outlier', (-4.774, 13.422, -60.07)), ('C', '1118', 7, 'Bond angle:N:CA\ncablam Outlier\nsmoc Outlier', (-3.44, 10.572000000000001, -57.818999999999996)), ('C', '1119', 7, 'smoc Outlier', (-3.8729999999999998, 12.6, -54.639)), ('C', '709', 8, 'smoc Outlier', (10.946, -7.96, -60.456999999999994)), ('C', '710', 8, 'side-chain clash', (10.446, -6.015, -58.633)), ('C', '718', 8, 'side-chain clash', (10.537, -11.795, -58.193)), ('C', '989', 8, 'side-chain clash', (10.537, -11.795, -58.193)), ('C', '1054', 9, 'smoc Outlier', (20.213, 10.052000000000001, -83.427)), ('C', '1055', 9, 'smoc Outlier', (19.951, 13.839, -83.751)), ('C', '708', 9, 'side-chain clash', (22.595, 5.912, -85.775)), ('C', '744', 9, 'side-chain clash', (17.56, 6.032, -81.758)), ('C', '1123', 10, 'cablam Outlier', (-7.5, 11.8, -42.7)), ('C', '1124', 10, 'Dihedral angle:CA:C\ncablam Outlier', (-5.704, 11.222, -39.497)), ('C', '1125', 10, 'Dihedral angle:N:CA\nDihedral angle:CA:C\ncablam Outlier', (-7.3839999999999995, 14.213999999999999, -38.13)), ('C', '1126', 10, 'Dihedral angle:N:CA\nsmoc Outlier', (-6.816, 15.407, -34.624)), ('C', '1133', 11, 'smoc Outlier', (-8.236999999999998, 13.852000000000002, -22.341)), ('C', '1135', 11, 'Dihedral angle:CA:C', (-9.450000000000001, 15.870000000000001, -17.081)), ('C', '1136', 11, 'Dihedral angle:N:CA', (-12.397, 14.004, -18.506)), ('C', '1137', 11, 'cablam Outlier', (-11.3, 10.8, -16.8)), ('C', '972', 12, 'smoc Outlier', (6.179, -4.319999999999999, -13.579)), ('C', '973', 12, 'Rotamer\nside-chain clash', (3.297, 1.391, -15.402)), ('C', '976', 12, 'smoc Outlier', (4.915, -2.228, -19.087)), ('C', '977', 12, 'side-chain clash\nsmoc Outlier', (3.297, 1.391, -15.402)), ('C', '1164', 13, 'smoc Outlier', (6.841, 6.662999999999999, 56.149)), ('C', '1168', 13, 'smoc Outlier', (7.927, 3.4859999999999998, 60.806999999999995)), ('C', '1171', 13, 'smoc Outlier', (8.926, 3.997, 65.91600000000001)), ('C', '1175', 13, 'smoc Outlier', (8.759, 0.23600000000000002, 70.65599999999999)), ('C', '943', 14, 'smoc Outlier', (-2.521, -8.578, 28.459999999999997)), ('C', '944', 14, 'side-chain clash', (-0.417, -5.433, 23.329)), ('C', '947', 14, 'side-chain clash\nsmoc Outlier', (-4.573, -8.977, 22.202)), ('C', '948', 14, 'side-chain clash', (-0.417, -5.433, 23.329)), ('C', '918', 15, 'smoc Outlier', (-9.229999999999999, -2.75, 64.381)), ('C', '920', 15, 'side-chain clash\nsmoc Outlier', (-3.308, -2.373, 60.718)), ('C', '922', 15, 'side-chain clash', (-10.682, -0.562, 59.918)), ('C', '1045', 16, 'smoc Outlier', (15.483, -11.169, -70.642)), ('C', '705', 16, 'cablam Outlier', (17.8, -5.5, -70.8)), ('C', '706', 16, 'cablam Outlier\nsmoc Outlier', (17.7, -8.3, -68.1)), ('C', '1140', 17, 'Dihedral angle:CA:C\ncablam Outlier', (-5.887, 13.061, -8.127999999999998)), ('C', '1141', 17, 'Dihedral angle:N:CA\ncablam Outlier', (-6.8839999999999995, 11.213999999999999, -4.94)), ('C', '994', 18, 'smoc Outlier', (2.57, -5.593999999999999, -44.924)), ('C', '996', 18, 'side-chain clash\nDihedral angle:CD:NE:CZ:NH1', (5.984, -4.389, -48.684)), ('C', '926', 19, 'side-chain clash', (8.801, 16.048, -80.768)), ('C', '982', 19, 'side-chain clash\nbackbone clash', (11.218, 20.035, -83.344)), ('C', '701', 20, 'smoc Outlier', (21.787, -1.323, -81.82199999999999)), ('C', '702', 20, 'side-chain clash\nsmoc Outlier', (23.474, -6.115, -79.187)), ('C', '1011', 21, 'smoc Outlier', (4.511, -12.017999999999999, -69.09400000000001)), ('C', '1016', 21, 'cablam Outlier', (3.2, -13.6, -75.6)), ('C', '913', 22, 'side-chain clash\nsmoc Outlier', (-2.69, -0.833, 70.916)), ('C', '916', 22, 'side-chain clash', (-2.69, -0.833, 70.916)), ('C', '906', 23, 'side-chain clash', (-6.96, -3.261, 78.847)), ('C', '910', 23, 'side-chain clash', (-6.96, -3.261, 78.847)), ('C', '952', 24, 'smoc Outlier', (2.4219999999999997, -5.283, 16.041999999999998)), ('C', '954', 24, 'smoc Outlier', (0.19600000000000004, -8.776, 12.366000000000001)), ('C', '738', 25, 'Bond angle:C', (-0.14800000000000002, -9.356000000000002, -23.404)), ('C', '739', 25, 'Bond angle:N:CA\nsmoc Outlier', (-2.9619999999999997, -11.115, -25.261999999999997)), ('C', '1031', 26, 'smoc Outlier', (11.312000000000001, -7.374, -79.874)), ('C', '1032', 26, 'smoc Outlier', (10.827, -10.407, -77.651)), ('C', '741', 27, 'side-chain clash', (-0.161, -10.451, -33.238)), ('C', '745', 27, 'side-chain clash', (-0.161, -10.451, -33.238))]
data['omega'] = [('A', '1093 ', 'SER', None, (0.9060000000000002, -14.794999999999996, -91.396)), ('A', '1116 ', 'ASN', None, (16.879, -5.4049999999999985, -61.90500000000001)), ('A', '1125 ', 'PRO', None, (14.679, -0.389, -38.275)), ('B', '1093 ', 'SER', None, (-13.271999999999997, 6.578, -91.382)), ('B', '1116 ', 'ASN', None, (-13.1, -11.962000000000003, -61.898)), ('B', '1125 ', 'PRO', None, (-7.643, -12.571, -38.271)), ('C', '1093 ', 'SER', None, (12.328999999999999, 8.254000000000003, -91.373)), ('C', '1116 ', 'ASN', None, (-3.942000000000001, 17.207, -61.908)), ('C', '1125 ', 'PRO', None, (-7.172, 12.758000000000001, -38.283))]
data['cablam'] = [('A', '705', 'THR', ' beta sheet', ' \nEE---', (-13.8, -12.5, -70.8)), ('A', '706', 'THR', ' beta sheet', ' \nE---E', (-16.1, -11.0, -68.1)), ('A', '725', 'CYS', 'check CA trace,carbonyls, peptide', ' \nHT-SS', (-14.6, -5.6, -25.6)), ('A', '726', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nT-SS-', (-17.3, -8.2, -25.5)), ('A', '728', 'SER', 'check CA trace,carbonyls, peptide', ' \nSS-HH', (-16.6, -7.4, -18.4)), ('A', '1016', 'LEU', ' alpha helix', 'bend\nIISS-', (-13.2, 4.1, -75.6)), ('A', '1037', 'ALA', 'check CA trace,carbonyls, peptide', 'strand\nEEE-S', (-21.7, -1.6, -62.8)), ('A', '1039', 'PRO', 'check CA trace,carbonyls, peptide', 'bend\nE-SSE', (-22.1, -2.9, -55.9)), ('A', '1066', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\n-SSS-', (27.8, -10.1, -92.1)), ('A', '1081', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\n-SSS-', (9.7, -24.9, -93.1)), ('A', '1082', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nSSS--', (13.1, -23.3, -93.7)), ('A', '1083', 'SER', 'check CA trace,carbonyls, peptide', ' \nSS--E', (12.7, -20.0, -95.5)), ('A', '1099', 'THR', 'check CA trace,carbonyls, peptide', 'bend\n--SSS', (14.5, -4.0, -96.9)), ('A', '1117', 'ASN', 'check CA trace,carbonyls, peptide', ' \n---S-', (14.0, -2.8, -60.1)), ('A', '1118', 'THR', 'check CA trace,carbonyls, peptide', 'bend\n--S--', (10.9, -2.5, -57.8)), ('A', '1123', 'LEU', ' beta sheet', ' \n-----', (14.1, 0.4, -42.7)), ('A', '1124', 'GLN', 'check CA trace,carbonyls, peptide', ' \n-----', (12.6, -0.9, -39.5)), ('A', '1125', 'PRO', 'check CA trace,carbonyls, peptide', ' \n-----', (16.0, -0.9, -38.1)), ('A', '1137', 'TYR', 'check CA trace,carbonyls, peptide', 'bend\nHHS--', (15.0, 4.1, -16.8)), ('A', '1140', 'ASN', ' beta sheet', ' \n-----', (14.3, -1.7, -8.1)), ('A', '1141', 'HIS', ' beta sheet', ' \n-----', (13.2, 0.1, -4.9)), ('A', '1147', 'ASP', ' beta sheet', ' \n----S', (8.7, -2.3, 14.0)), ('A', '1148', 'LEU', ' beta sheet', ' \n---SH', (10.5, -3.8, 17.1)), ('A', '1153', 'GLY', 'check CA trace,carbonyls, peptide', 'helix\nHHH--', (7.9, -7.6, 25.3)), ('A', '1155', 'ASN', 'check CA trace,carbonyls, peptide', ' \nH----', (6.8, -7.7, 31.3)), ('A', '727', 'ASP', 'check CA trace', 'bend\n-SS-H', (-18.1, -8.5, -21.8)), ('A', '1025', 'CYS', 'check CA trace', 'bend\nTSSSS', (-8.5, -5.6, -71.7)), ('B', '705', 'THR', ' beta sheet', ' \nEE---', (-4.0, 18.2, -70.8)), ('B', '706', 'THR', ' beta sheet', ' \nE---E', (-1.5, 19.4, -68.1)), ('B', '725', 'CYS', 'check CA trace,carbonyls, peptide', ' \nHT-SS', (2.4, 15.4, -25.6)), ('B', '726', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nT-SS-', (1.5, 19.1, -25.5)), ('B', '728', 'SER', 'check CA trace,carbonyls, peptide', ' \nSS-HH', (1.9, 18.0, -18.4)), ('B', '1016', 'LEU', ' alpha helix', 'bend\nIISS-', (10.2, 9.4, -75.6)), ('B', '1037', 'ALA', 'check CA trace,carbonyls, peptide', 'strand\nEEE-S', (9.5, 19.6, -62.8)), ('B', '1039', 'PRO', 'check CA trace,carbonyls, peptide', 'bend\nE-SSE', (8.5, 20.6, -55.9)), ('B', '1066', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\n-SSS-', (-22.6, -19.0, -92.1)), ('B', '1081', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\n-SSS-', (-26.4, 4.0, -93.1)), ('B', '1082', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nSSS--', (-26.7, 0.2, -93.7)), ('B', '1083', 'SER', 'check CA trace,carbonyls, peptide', ' \nSS--E', (-23.7, -1.0, -95.5)), ('B', '1099', 'THR', 'check CA trace,carbonyls, peptide', 'bend\n--SSS', (-10.7, -10.5, -96.9)), ('B', '1117', 'ASN', 'check CA trace,carbonyls, peptide', ' \n---S-', (-9.4, -10.8, -60.1)), ('B', '1118', 'THR', 'check CA trace,carbonyls, peptide', 'bend\n--S--', (-7.6, -8.3, -57.8)), ('B', '1123', 'LEU', ' beta sheet', ' \n-----', (-6.7, -12.4, -42.7)), ('B', '1124', 'GLN', 'check CA trace,carbonyls, peptide', ' \n-----', (-7.0, -10.5, -39.5)), ('B', '1125', 'PRO', 'check CA trace,carbonyls, peptide', ' \n-----', (-8.8, -13.5, -38.1)), ('B', '1137', 'TYR', 'check CA trace,carbonyls, peptide', 'bend\nHHS--', (-3.9, -15.2, -16.8)), ('B', '1140', 'ASN', ' beta sheet', ' \n-----', (-8.5, -11.6, -8.1)), ('B', '1141', 'HIS', ' beta sheet', ' \n-----', (-6.4, -11.5, -4.9)), ('B', '1147', 'ASP', ' beta sheet', ' \n----S', (-6.3, -6.4, 14.0)), ('B', '1148', 'LEU', ' beta sheet', ' \n---SH', (-8.4, -7.3, 17.1)), ('B', '1153', 'GLY', 'check CA trace,carbonyls, peptide', 'helix\nHHH--', (-10.4, -3.1, 25.3)), ('B', '1155', 'ASN', 'check CA trace,carbonyls, peptide', ' \nH----', (-10.0, -2.2, 31.3)), ('B', '727', 'ASP', 'check CA trace', 'bend\n-SS-H', (1.7, 19.9, -21.8)), ('B', '1025', 'CYS', 'check CA trace', 'bend\nTSSSS', (-0.6, 10.1, -71.7)), ('C', '705', 'THR', ' beta sheet', ' \nEE---', (17.8, -5.5, -70.8)), ('C', '706', 'THR', ' beta sheet', ' \nE---E', (17.7, -8.3, -68.1)), ('C', '725', 'CYS', 'check CA trace,carbonyls, peptide', ' \nHT-SS', (12.2, -9.7, -25.5)), ('C', '726', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nT-SS-', (15.9, -10.7, -25.5)), ('C', '728', 'SER', 'check CA trace,carbonyls, peptide', ' \nSS-HH', (14.8, -10.6, -18.4)), ('C', '1016', 'LEU', ' alpha helix', 'bend\nIISS-', (3.2, -13.6, -75.6)), ('C', '1037', 'ALA', 'check CA trace,carbonyls, peptide', 'strand\nEEE-S', (12.5, -17.9, -62.8)), ('C', '1039', 'PRO', 'check CA trace,carbonyls, peptide', 'bend\nE-SSE', (13.8, -17.6, -55.9)), ('C', '1066', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\n-SSS-', (-5.4, 28.9, -92.1)), ('C', '1081', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\n-SSS-', (16.5, 21.0, -93.1)), ('C', '1082', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nSSS--', (13.4, 23.1, -93.7)), ('C', '1083', 'SER', 'check CA trace,carbonyls, peptide', ' \nSS--E', (10.8, 21.0, -95.5)), ('C', '1099', 'THR', 'check CA trace,carbonyls, peptide', 'bend\n--SSS', (-3.8, 14.4, -96.9)), ('C', '1117', 'ASN', 'check CA trace,carbonyls, peptide', ' \n---S-', (-4.8, 13.4, -60.1)), ('C', '1118', 'THR', 'check CA trace,carbonyls, peptide', 'bend\n--S--', (-3.4, 10.6, -57.8)), ('C', '1123', 'LEU', ' beta sheet', ' \n-----', (-7.5, 11.8, -42.7)), ('C', '1124', 'GLN', 'check CA trace,carbonyls, peptide', ' \n-----', (-5.7, 11.2, -39.5)), ('C', '1125', 'PRO', 'check CA trace,carbonyls, peptide', ' \n-----', (-7.4, 14.2, -38.1)), ('C', '1137', 'TYR', 'check CA trace,carbonyls, peptide', 'bend\nHHS--', (-11.3, 10.8, -16.8)), ('C', '1140', 'ASN', ' beta sheet', ' \n-----', (-5.9, 13.1, -8.1)), ('C', '1141', 'HIS', ' beta sheet', ' \n-----', (-6.9, 11.2, -4.9)), ('C', '1147', 'ASP', ' beta sheet', ' \n----S', (-2.5, 8.6, 14.0)), ('C', '1148', 'LEU', ' beta sheet', ' \n---SH', (-2.2, 10.9, 17.1)), ('C', '1153', 'GLY', 'check CA trace,carbonyls, peptide', 'helix\nHHH--', (2.4, 10.6, 25.3)), ('C', '1155', 'ASN', 'check CA trace,carbonyls, peptide', ' \nH----', (3.0, 9.7, 31.3)), ('C', '727', 'ASP', 'check CA trace', 'bend\n-SS-H', (16.5, -11.3, -21.8)), ('C', '1025', 'CYS', 'check CA trace', 'bend\nTSSSS', (9.2, -4.5, -71.7))]
handle_read_draw_probe_dots_unformatted("/home/ccpem/agnel/gisaid/countries_seq/structure_data/emdb/EMD-30072/6m3w/Model_validation_1/validation_cootdata/molprobity_probe6m3w_0.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
