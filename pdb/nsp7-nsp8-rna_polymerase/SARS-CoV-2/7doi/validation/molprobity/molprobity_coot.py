# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (126.97800000000004, 151.508, 154.80299999999994)), ('B', ' 183 ', 'PRO', None, (149.735, 139.458, 162.842))]
data['rota'] = [('A', ' 847 ', 'ILE', 0.0, (123.80500000000006, 122.486, 165.764)), ('A', ' 916 ', 'TRP', 0.0013081156768527855, (109.92100000000005, 107.47000000000001, 152.215)), ('C', '  68 ', 'ILE', 0.28088668771557845, (138.925, 112.24399999999997, 184.939))]
data['cbeta'] = [('A', ' 916 ', 'TRP', ' ', 0.31701615003037387, (109.85600000000004, 106.866, 153.627))]
data['probe'] = [(' G 154  TRP  CE3', ' G 190  ARG  HB3', -0.868, (159.27, 113.891, 170.875)), (' A  50  LYS  CE ', ' A1008  POP  O3 ', -0.828, (160.248, 138.341, 102.966)), (' B  85  SER  O  ', ' B  89  THR HG22', -0.82, (120.462, 159.552, 162.901)), (' A 553  ARG  NH1', ' A1003  POP  O3 ', -0.804, (140.542, 129.992, 142.958)), (' A  50  LYS  HE3', ' A1008  POP  O3 ', -0.789, (159.478, 139.108, 102.981)), (' A 377  ASP  OD1', ' A 378  PRO  HD2', -0.787, (131.003, 157.924, 147.766)), (' C  70  LYS  HG2', ' G  92  PHE  HD2', -0.778, (134.935, 112.474, 177.529)), (' B 158  GLN HE21', ' B 166  ILE HG12', -0.769, (148.39, 148.255, 173.703)), (' A 531  THR HG22', ' A 536  ILE HD11', -0.754, (122.294, 157.421, 142.326)), (' A  50  LYS  NZ ', ' A1008  POP  O3 ', -0.75, (160.839, 138.438, 103.978)), (' P1201  HCU  O1 ', ' T  10    U  N3 ', -0.744, (126.735, 134.932, 146.143)), (' G 100  ASN HD22', ' G 103  LEU  HG ', -0.666, (145.987, 107.927, 168.265)), (' A   5  GLN  HA ', ' A   5  GLN HE21', -0.666, (182.358, 132.838, 99.57)), (' A 531  THR HG22', ' A 536  ILE  CD1', -0.661, (122.986, 157.212, 142.146)), (' C  70  LYS  HG2', ' G  92  PHE  CD2', -0.652, (135.704, 112.236, 177.338)), (' A   5  GLN  HA ', ' A   5  GLN  NE2', -0.627, (182.562, 133.88, 99.906)), (' G 156  ILE HG23', ' G 186  VAL HG13', -0.623, (163.196, 115.739, 180.38)), (' A 478  LYS  HE3', ' A 743  ASN  OD1', -0.622, (122.949, 139.79, 112.865)), (' A 538  THR  OG1', ' A 661  GLN  HG2', -0.61, (128.462, 151.453, 144.432)), (' G 105  ASN  O  ', ' G 109  ASN  ND2', -0.596, (150.024, 108.683, 177.412)), (' G 114  CYS  O  ', ' G 114  CYS  SG ', -0.595, (151.342, 113.205, 181.098)), (' B  90  MET  HE3', ' B  94  MET  HE2', -0.587, (128.324, 158.623, 158.167)), (' A 726  ARG  NH1', ' A 738  ASP  OD2', -0.586, (130.251, 142.624, 104.815)), (' G 154  TRP  CZ3', ' G 190  ARG  HB3', -0.586, (159.637, 114.783, 170.431)), (' T   8    C  H6 ', " T   8    C  O5'", -0.585, (127.632, 140.506, 161.745)), (' A 623  ASP  HB3', ' P1201  HCU  C10', -0.578, (133.822, 135.151, 140.482)), (' A 378  PRO  HB3', ' A 539  ILE HG12', -0.574, (132.759, 153.999, 149.797)), (' B 159  VAL HG22', ' B 186  VAL HG12', -0.572, (153.599, 149.372, 166.548)), (' A 848  VAL  O  ', ' A 848  VAL HG12', -0.571, (118.063, 122.592, 163.666)), (' A 496  ASN  ND2', ' T  13    A  OP2', -0.562, (115.477, 136.244, 142.447)), (' B  86  ALA  HA ', ' B  89  THR  CG2', -0.56, (121.378, 158.67, 163.727)), (' G 154  TRP  CH2', ' G 190  ARG  HD2', -0.557, (158.183, 114.495, 168.984)), (' A 525  ASP  OD1', ' A 570  GLN  NE2', -0.555, (111.817, 153.751, 139.249)), (' A   8  LEU  O  ', ' A   8  LEU HD23', -0.554, (179.224, 137.87, 101.714)), (' G 141  THR HG22', ' G 147  PHE  HB2', -0.552, (158.497, 109.001, 179.354)), (' A  58  GLU  O  ', ' A  66  ILE HG12', -0.541, (176.601, 139.279, 114.529)), (' A 333  ILE HD13', ' A 342  VAL HG21', -0.538, (127.701, 167.704, 148.435)), (' A  39  ASN  O  ', ' A 725  HIS  NE2', -0.537, (141.684, 139.251, 100.267)), (' B 158  GLN  NE2', ' B 166  ILE HG12', -0.53, (147.63, 148.902, 173.667)), (' A 396  PHE  HB3', ' A 675  VAL  HB ', -0.527, (143.56, 151.132, 146.088)), (' A 332  LYS  HE3', ' A 339  PRO  HB2', -0.524, (132.782, 171.733, 155.323)), (' G 168  GLN  NE2', ' G 171  GLU  OE1', -0.524, (169.364, 115.25, 192.64)), (' A 436  GLU  HG3', ' A 438  LYS  HE3', -0.512, (137.173, 109.8, 148.517)), (' A  67  ASP  O  ', ' A  69  TYR  CD1', -0.511, (170.264, 139.192, 113.772)), (' A 825  ASP  N  ', ' A 825  ASP  OD1', -0.511, (111.06, 106.543, 126.952)), (' A   8  LEU HD21', ' A  19  LEU  HB2', -0.507, (179.12, 137.233, 104.962)), (' C  34  GLN  NE2', ' C  38  ASP  OD2', -0.507, (148.338, 122.59, 156.834)), (' B 105  ASN  O  ', ' B 109  ASN  OD1', -0.502, (145.966, 173.946, 150.433)), (' B 130  VAL  HB ', ' B 186  VAL HG22', -0.5, (152.428, 150.469, 161.601)), (' C   2  LYS  N  ', ' C   5  ASP  OD2', -0.5, (136.914, 104.61, 160.543)), (' A 378  PRO  HD2', ' A 537  PRO  HG2', -0.499, (131.089, 157.734, 146.95)), (' A 867  TYR  OH ', ' A 922  GLU  HG2', -0.499, (113.417, 106.533, 139.329)), (' G 117  LEU  HG ', ' G 131  VAL HG23', -0.498, (154.104, 121.028, 181.807)), (' B  86  ALA  HA ', ' B  89  THR HG22', -0.497, (120.688, 158.507, 163.801)), (' A 755  MET  HG2', ' A 764  VAL HG22', -0.497, (130.354, 126.472, 122.949)), (' A 239  SER  OG ', ' A 465  ASP  OD1', -0.494, (142.615, 145.031, 116.706)), (' A 480  PHE  CZ ', ' A 693  VAL HG22', -0.492, (125.357, 138.453, 127.532)), (' A   5  GLN  CA ', ' A   5  GLN  NE2', -0.489, (182.581, 133.836, 99.38)), (' A 614  LEU  HB2', ' A 802  GLU  HB3', -0.486, (131.484, 115.222, 124.763)), (' A 864  ILE HG13', ' A 921  TYR  HE1', -0.486, (113.31, 114.062, 147.277)), (' A  35  PHE  HZ ', ' A  50  LYS  HB2', -0.481, (157.924, 134.345, 105.838)), (' A 333  ILE HD11', ' A 342  VAL HG11', -0.478, (127.443, 166.643, 150.131)), (' A 377  ASP  OD1', ' A 378  PRO  CD ', -0.474, (131.625, 157.907, 148.773)), (' C  53  VAL HG22', ' G 103  LEU HD23', -0.474, (147.092, 110.591, 169.23)), (' A 858  ARG  NH2', ' P  17    U  OP1', -0.466, (120.986, 122.32, 155.507)), (' A 602  LEU  O  ', ' A 605  VAL HG12', -0.465, (122.796, 119.217, 124.305)), (' B  79  LYS  HA ', ' B  82  LYS  HE2', -0.459, (110.908, 153.692, 162.597)), (' A 715  ILE  O  ', ' A 721  ARG  NH2', -0.459, (140.802, 125.877, 100.432)), (' A 123  THR  HA ', ' A 211  ASP  HA ', -0.453, (161.215, 141.926, 113.07)), (' A 630  LEU HD11', ' A 789  GLN HE21', -0.45, (138.424, 139.598, 126.392)), (' A  67  ASP  O  ', ' A  69  TYR  HD1', -0.449, (170.134, 139.376, 113.711)), (' A 417  LYS  HD2', ' G  90  MET  HE3', -0.447, (128.969, 112.019, 168.138)), (' G 129  MET  HG2', ' G 187  THR HG22', -0.447, (160.001, 122.016, 178.617)), (' A 378  PRO  HA ', ' A 539  ILE HD11', -0.446, (132.218, 155.041, 152.029)), (' G 161  ASP  N  ', ' G 161  ASP  OD1', -0.444, (162.114, 121.697, 189.499)), (' B 159  VAL  CG2', ' B 186  VAL HG12', -0.442, (153.719, 148.895, 166.825)), (' A 916  TRP  C  ', ' A 916  TRP  CD1', -0.441, (109.567, 105.644, 151.815)), (' A 136  GLU  HG3', ' A 136  GLU  O  ', -0.44, (152.58, 123.362, 125.927)), (' A 705  ASN  ND2', ' A 788  TYR  OH ', -0.439, (142.786, 136.165, 120.172)), (' A 388  LEU HD22', ' A 672  SER  HB3', -0.438, (142.385, 149.64, 156.251)), (' A 855  MET  HE3', ' A 859  PHE  HE2', -0.437, (120.465, 114.415, 159.389)), (' G 120  ILE HD12', ' G 149  TYR  HE2', -0.434, (152.92, 114.841, 173.715)), (' B 104  ASN  HA ', ' B 107  ILE HG22', -0.434, (139.77, 173.271, 152.321)), (' A  82  HIS  NE2', ' A 222  PHE  O  ', -0.434, (154.995, 151.087, 95.02)), (' A 380  MET  HG3', ' B  91  LEU HD11', -0.433, (128.272, 162.018, 155.108)), (' A 501  SER  OG ', ' T   9    C  OP1', -0.431, (124.534, 142.603, 155.533)), (' G 176  ASN  HB2', ' G 179  ASN  HB2', -0.425, (165.645, 113.577, 197.427)), (' A 864  ILE HG13', ' A 921  TYR  CE1', -0.424, (113.395, 113.589, 147.285)), (' A 334  PHE  CE1', ' A 339  PRO  HB3', -0.424, (131.542, 173.855, 155.41)), (' A 472  VAL HG22', ' A 700  VAL HG12', -0.421, (134.087, 137.019, 118.54)), (' A 116  ARG  HG2', ' A 217  TYR  HB2', -0.42, (164.708, 145.464, 104.636)), (' A 603  LYS  HA ', ' A 603  LYS  HD3', -0.42, (120.022, 115.95, 122.59)), (' A 855  MET  HE3', ' A 859  PHE  CE2', -0.418, (120.35, 114.282, 158.935)), (' A 846  ASP  OD1', ' A 848  VAL HG23', -0.418, (121.562, 125.514, 165.289)), (' A  86  ILE HG23', ' A 201  ILE HD13', -0.417, (157.908, 155.341, 99.444)), (' A 121  LYS  NZ ', ' A 144  GLU  OE2', -0.417, (166.617, 131.214, 116.522)), (' A 378  PRO  HB3', ' A 539  ILE  CG1', -0.417, (132.291, 153.769, 150.407)), (' G 158  GLN  HB3', ' G 187  THR  OG1', -0.415, (164.578, 121.132, 179.882)), (' A 336  ASP  OD1', ' A 364  SER  HA ', -0.415, (119.753, 173.675, 155.051)), (' A 258  ASP  OD2', ' A 263  LYS  NZ ', -0.414, (165.988, 164.754, 131.623)), (' A 549  SER  HB2', ' A 555  ARG HH12', -0.413, (133.585, 125.712, 149.888)), (' A 391  LYS  HB3', ' A 391  LYS  HE3', -0.41, (154.081, 145.817, 153.931)), (' A 855  MET  O  ', ' A 859  PHE  HD2', -0.41, (117.082, 115.264, 157.451)), (' A 335  VAL  O  ', ' A 338  VAL  N  ', -0.408, (125.931, 173.281, 157.533)), (' B 136  ASN HD22', ' B 139  LYS  HE3', -0.408, (163.941, 141.423, 157.541)), (' G 154  TRP  CD2', ' G 190  ARG  HB3', -0.408, (159.708, 113.365, 171.23)), (' G 100  ASN HD21', ' G 102  ALA  HB3', -0.407, (148.493, 107.443, 167.901)), (' A 606  TYR  HE1', ' A 614  LEU HD21', -0.407, (127.163, 117.62, 123.722)), (' A  69  TYR  CE1', ' A 121  LYS  HB2', -0.404, (168.722, 136.625, 114.082)), (' A 588  VAL HG23', ' A 758  LEU HD12', -0.403, (122.271, 127.029, 132.324)), (' A 819  LEU  HA ', ' A 819  LEU HD12', -0.403, (120.705, 108.846, 129.09)), (' C  66  VAL  O  ', ' C  66  VAL HG23', -0.402, (136.504, 115.886, 183.033)), (' A 472  VAL  O  ', ' A 476  VAL HG23', -0.401, (130.805, 138.992, 120.903)), (' A 322  PRO  HA ', ' A 323  PRO  HD3', -0.4, (150.524, 156.469, 140.157)), (' C   5  ASP  O  ', ' C   9  THR  OG1', -0.4, (136.942, 110.387, 164.397)), (' A 576  LEU HD11', ' A 686  THR HG22', -0.4, (121.504, 141.724, 135.574))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
