# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 154 ', 'TYR', 0.03792668899940943, (-14.927, -2.309, -3.105))]
data['omega'] = []
data['rota'] = [('A', ' 222 ', 'ARG', 0.0, (27.052000000000003, 9.222, -38.988)), ('A', ' 222 ', 'ARG', 0.0, (27.035, 9.249, -38.974999999999994)), ('B', '  46 ', 'SER', 0.17493343417470034, (20.85900000000001, 17.992, 1.6469999999999998)), ('B', '  86 ', 'VAL', 0.049761464189436756, (7.581, 7.944, 8.538)), ('B', '  86 ', 'VAL', 0.054326222582576224, (7.581, 7.943000000000002, 8.539)), ('B', ' 107 ', 'GLN', 0.25680607816384843, (4.791, -9.079, -0.707)), ('B', ' 153 ', 'ASP', 0.004379693110343178, (-11.253, -3.309, -2.573)), ('B', ' 155 ', 'ASP', 0.12481252547298784, (-15.011, 0.8250000000000002, -0.9069999999999999)), ('B', ' 165 ', 'MET', 0.03639397376950383, (14.325, 7.2410000000000005, -2.341))]
data['cbeta'] = [('A', '  84 ', 'ASN', ' ', 0.3586685546457842, (-23.851, 13.140000000000002, -35.157)), ('A', ' 154 ', 'TYR', ' ', 0.33640123910077807, (-4.2, 24.025, -15.697999999999999)), ('B', '  33 ', 'ASP', ' ', 0.2845834056699344, (-8.415000000000003, 10.756000000000004, 10.575))]
data['probe'] = [(' A 222 AARG  NH1', ' A 402  HOH  O  ', -0.945, (26.339, 3.192, -40.403)), (' A 176  ASP  OD2', ' A 401  HOH  O  ', -0.913, (-16.479, 15.364, -34.269)), (' B 140  PHE  HB2', ' B 172  HIS  CE1', -0.855, (10.883, 8.002, -9.713)), (' B 102  LYS  NZ ', ' B 103  PHE  O  ', -0.792, (-3.253, -2.993, 6.336)), (' B 175  THR HG22', ' B 181  PHE  HB2', -0.736, (10.797, 2.121, 4.044)), (' B 169  THR  OG1', ' B 171  VAL HG22', -0.697, (17.146, 0.932, -10.215)), (' B 110  GLN  OE1', ' B 401  HOH  O  ', -0.696, (-0.044, -9.842, -0.428)), (' B  40  ARG HH11', ' B  82  MET  HE3', -0.694, (12.896, 7.664, 12.374)), (' B 233  VAL HG21', ' B 269  LYS  HE3', -0.671, (12.776, -27.4, -18.426)), (' B 140  PHE  HB2', ' B 172  HIS  HE1', -0.67, (11.177, 8.491, -9.485)), (' B 235  MET  HE2', ' B 241  PRO  HG3', -0.651, (14.454, -21.342, -7.457)), (' B 140  PHE  HB3', ' B 144  SER  OG ', -0.576, (8.959, 10.826, -8.138)), (' B  61  LYS  O  ', ' B 402  HOH  O  ', -0.575, (11.065, 19.418, 17.688)), (' A 140  PHE  HB2', ' A 172  HIS  CE1', -0.574, (-12.448, -2.522, -26.112)), (' B 209  TYR  HD1', ' B 257  THR HG21', -0.568, (-5.835, -20.893, -19.036)), (' B 298  ARG  NH2', ' B 403  HOH  O  ', -0.556, (-8.674, -4.055, -12.199)), (' B  19  GLN  HB3', ' B  69  GLN  HB3', -0.552, (1.066, 22.246, 0.3)), (' B 102  LYS  HZ2', ' B 104  VAL HG12', -0.55, (-3.757, -3.632, 5.657)), (' A 221  ASN  HB2', ' A 222 AARG  NH1', -0.534, (25.83, 5.324, -39.492)), (' B 291  PHE  HB2', ' B 405  HOH  O  ', -0.527, (1.173, -10.491, -16.038)), (' A 211  ALA  HA ', ' A 282  LEU HD21', -0.525, (15.939, 8.179, -23.906)), (' B 227  LEU HD11', ' B 242  LEU  O  ', -0.511, (7.891, -24.475, -7.825)), (' B  66  PHE  HB2', ' B  77  VAL HG21', -0.509, (4.383, 20.906, 10.217)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.504, (-27.096, 3.223, -25.252)), (' B  74  GLN HE21', ' B  76  ARG HH22', -0.497, (-2.848, 28.997, 8.746)), (' B  52  PRO  HD2', ' B 188  ARG  HG2', -0.493, (22.256, 8.845, 6.83)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.49, (-0.387, 8.394, -33.352)), (' A 137  LYS  O  ', ' B   4  ARG  NH2', -0.49, (-4.401, 0.098, -26.916)), (' A 102  LYS  HG3', ' A 156  CYS  SG ', -0.489, (-11.668, 22.901, -21.62)), (' B 130  MET  HE3', ' B 134  PHE  HA ', -0.488, (10.362, -4.743, -3.898)), (' B 175  THR HG22', ' B 181  PHE  CB ', -0.485, (11.354, 1.902, 4.174)), (' B 167  LEU HD12', ' B 171  VAL HG23', -0.482, (16.345, 0.721, -7.195)), (' B  27  LEU HD21', ' B  42  VAL  HB ', -0.479, (9.824, 15.202, 3.902)), (' A 298  ARG  HA ', ' A 298  ARG  NE ', -0.474, (7.32, 20.418, -21.304)), (' B 288  GLU  OE2', ' B 290  GLU  HB2', -0.459, (3.88, -6.366, -16.347)), (' A 222 AARG  CZ ', ' A 222 AARG  H  ', -0.454, (27.223, 6.473, -39.109)), (' B  51  ASN  OD1', ' B 188  ARG  NH1', -0.447, (25.028, 7.333, 9.294)), (' B 209  TYR  HE1', ' B 257  THR  HG1', -0.446, (-5.048, -22.899, -17.953)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.444, (-23.983, 4.906, -24.089)), (' B 171  VAL  C  ', ' B 172  HIS  HD2', -0.443, (14.161, 3.944, -8.836)), (' B  27  LEU HD13', ' B  39  PRO  HD2', -0.436, (7.582, 13.246, 2.142)), (' A  76  ARG  HE ', ' A  78  ILE HG22', -0.434, (-38.222, 16.01, -15.866)), (' B 174  GLY  N  ', ' B 181  PHE  HE1', -0.431, (11.638, 2.357, -0.404)), (' B 140  PHE  HB2', ' B 172  HIS  ND1', -0.426, (10.631, 7.399, -8.545)), (' B 118  TYR  OH ', ' B 141  LEU  N  ', -0.424, (9.643, 12.251, -11.402)), (' A  67  LEU HD12', ' A  74  GLN HE21', -0.423, (-34.065, 5.969, -13.409)), (' A 222 BARG  HB2', ' A 222 BARG  HE ', -0.422, (28.941, 9.767, -40.567)), (' A  51  ASN  OD1', ' A 188  ARG  NH2', -0.42, (-28.399, -2.467, -43.091)), (' A 136  ILE  O  ', ' A 136  ILE HG13', -0.417, (-9.517, 1.079, -29.118)), (' A 211  ALA  HA ', ' A 282  LEU  CD2', -0.416, (16.226, 7.907, -23.914)), (' B 111  THR  HB ', ' B 127  GLN HE21', -0.415, (-0.977, -4.227, -10.55)), (' B 165 AMET  HB2', ' B 165 AMET  HE2', -0.413, (15.092, 5.126, -0.606)), (' A 288  GLU  OE2', ' A 290  GLU  HB2', -0.408, (3.333, 4.329, -26.389)), (' B 175  THR HG22', ' B 181  PHE  CD1', -0.403, (11.332, 2.377, 3.25)), (' A   4  ARG HH11', ' B 137  LYS  HB2', -0.401, (7.968, -0.585, -13.546)), (' B 231  ASN HD22', ' B 241  PRO  HA ', -0.401, (11.483, -22.659, -9.118)), (' A 164  HIS  HB2', ' A 174  GLY  HA2', -0.4, (-17.696, 4.263, -31.479))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
