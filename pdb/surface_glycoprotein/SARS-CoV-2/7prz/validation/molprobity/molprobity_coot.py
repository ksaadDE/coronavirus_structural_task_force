# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', ' 103 ', 'ALA', 0.022816759260605286, (70.07906, -41.57314, 34.70339)), ('H', ' 105 ', 'PRO', 0.03273197025767659, (68.63258, -47.38926, 32.7643)), ('H', ' 160 ', 'PRO', 0.136332115044514, (43.98496, -17.37794, 39.05036))]
data['omega'] = [('H', ' 158 ', 'PRO', None, (42.966729999999984, -16.26914, 32.22484)), ('H', ' 160 ', 'PRO', None, (44.991, -17.15334, 38.01608)), ('L', '   8 ', 'PRO', None, (44.46929999999999, -48.26023, 50.30214)), ('L', ' 101 ', 'PRO', None, (58.59022, -46.60616, 30.847709999999996)), ('L', ' 147 ', 'PRO', None, (33.06299, -37.09513, 57.23196999999999))]
data['rota'] = [('H', '   2 ', 'VAL', 0.06314459767312308, (69.51261, -26.194110000000002, 47.10264)), ('H', '   5 ', 'VAL', 0.22267086293617377, (63.21424999999998, -23.12279999999999, 39.76758)), ('H', '  22 ', 'CYS', 0.2406658473910645, (64.30529, -25.17689, 35.09991)), ('H', '  79 ', 'LEU', 0.0, (67.49506000000001, -27.90813, 31.867479999999993)), ('H', ' 104 ', 'ILE', 0.28059392439689346, (71.40774, -44.70468, 32.95879)), ('H', ' 111 ', 'MET', 0.0031635621654745915, (64.16282, -37.94831, 42.76118999999999)), ('H', ' 149 ', 'LEU', 0.23553466668104422, (26.88602000000001, -15.28374, 52.24388999999999)), ('E', ' 385 ', 'THR', 0.2620247113420637, (86.15817999999999, -43.63248, 77.30594))]
data['cbeta'] = []
data['probe'] = [(' H  52  SER  HA ', ' H 103  ALA  HB3', -0.79, (70.159, -39.91, 32.856)), (' E 408  ARG  NH1', ' L 301  SO4  O4 ', -0.69, (70.362, -38.925, 57.976)), (' L  13  VAL HG23', ' L  84  LEU HD22', -0.651, (46.235, -40.673, 59.732)), (' L 114  ARG  NH2', ' L 306  SO4  O1 ', -0.65, (34.22, -31.332, 65.367)), (' L  97  TYR  HA ', ' L 102  LEU HD22', -0.636, (61.621, -46.064, 37.087)), (' L  29  ILE HG23', ' L  98  TYR  HB2', -0.575, (60.944, -51.964, 39.218)), (' H  93  VAL HG22', ' H 119  THR HG22', -0.574, (50.613, -25.57, 37.494)), (' E 350  VAL HG22', ' E 422  ASN  HB3', -0.56, (84.491, -43.484, 48.345)), (' H  69  THR  HB ', ' H  82  GLN  HB3', -0.553, (62.257, -30.19, 22.488)), (' E 408  ARG  NH2', ' L  62  SER  OG ', -0.545, (71.014, -36.902, 55.612)), (' H 204  THR  HB ', ' H 221  LYS  HE3', -0.543, (28.272, -3.014, 53.198)), (' L 199  ALA  HB2', ' L 214  SER  HB3', -0.542, (13.994, -27.618, 47.352)), (' H 100  SER  HB2', ' H 109  TYR  HB2', -0.538, (69.461, -41.598, 42.917)), (' E 383  SER  HB3', ' E 386  LYS  HE2', -0.537, (83.87, -48.808, 76.019)), (' H 103  ALA  HB1', ' H 108  TYR  HE1', -0.532, (67.708, -41.779, 33.912)), (' L  13  VAL HG21', ' L  19  ALA  HB2', -0.527, (47.066, -43.182, 58.827)), (' H 134  PRO  HD3', ' H 220  LYS  HE2', -0.525, (26.554, -8.389, 42.546)), (' L 112  ILE HD11', ' L 177  SER  OG ', -0.522, (41.745, -32.079, 61.555)), (' H  99  ASP  OD1', ' H 100  SER  N  ', -0.506, (68.611, -39.273, 41.165)), (' L 192  TYR  O  ', ' L 198  TYR  OH ', -0.502, (14.18, -22.112, 36.518)), (' H 112  ASP  N  ', ' H 112  ASP  OD1', -0.499, (66.026, -36.622, 44.563)), (' L  45  LYS  HG2', ' L  90  ALA  HB2', -0.499, (50.902, -33.609, 52.607)), (' H 104  ILE HG22', ' H 105  PRO  HD2', -0.495, (71.707, -46.676, 30.88)), (' E 486  PHE  HE1', ' H  57  HIS  NE2', -0.493, (72.492, -44.505, 26.402)), (' L  30  LEU HD13', ' L  37  THR HG23', -0.487, (63.633, -55.895, 45.491)), (' L 119  PRO  HB3', ' L 145  PHE  HB3', -0.483, (29.247, -30.994, 55.901)), (' E 412  PRO  HG3', ' E 429  PHE  HB3', -0.483, (81.042, -50.902, 61.598)), (' E 489  TYR  CE2', ' H 104  ILE HD13', -0.48, (75.932, -44.976, 31.531)), (' H 142  THR HG22', ' H 147  ALA  HB2', -0.477, (21.054, -17.067, 57.704)), (' L 109  LYS  NZ ', ' L 148  ARG  HD2', -0.476, (39.559, -34.749, 50.524)), (' L  89  VAL HG12', ' L 111  ASP  HA ', -0.475, (44.816, -36.112, 56.859)), (' H 135  LEU  HB3', ' L 124  PHE  CD2', -0.473, (24.583, -17.063, 48.03)), (' E 493  GLN  NE2', ' H  31  ASN  OD1', -0.464, (80.102, -34.784, 37.817)), (' E 355  ARG  HD3', ' E 396  TYR  CD2', -0.463, (95.597, -49.472, 57.738)), (' H  91  THR HG23', ' H 121  THR  HA ', -0.463, (46.654, -25.331, 31.024)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.457, (80.994, -36.732, 61.088)), (' H  12  VAL HG21', ' H  18  LEU  HB2', -0.453, (53.501, -22.722, 24.954)), (' E 431  GLY  HA2', ' E 515  PHE  CD2', -0.449, (87.83, -48.562, 66.727)), (' L 153  GLN  HB3', ' L 201  GLU  HB3', -0.446, (19.473, -34.899, 46.389)), (' E 379  CYS  SG ', ' E 384  PRO  HG3', -0.445, (83.774, -43.67, 70.436)), (' H 200  LEU  HA ', ' H 200  LEU HD23', -0.445, (24.935, -10.635, 58.329)), (' H  53  TYR  HB3', ' H 102  ALA  HA ', -0.443, (73.53, -38.103, 35.76)), (' L   6  GLN  HG3', ' L 106  PRO  HD2', -0.43, (48.922, -46.192, 43.661)), (' E 502  GLY  O  ', ' E 506  GLN  HG3', -0.43, (76.82, -27.674, 51.676)), (' H 137  PRO  HB3', ' H 148  ALA  O  ', -0.428, (23.852, -15.393, 53.724)), (' H  40  ALA  HB3', ' H  43  LYS  HB2', -0.426, (45.547, -34.531, 36.381)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.424, (87.909, -33.386, 54.05)), (' H  27  PHE  CZ ', ' H  98  LYS  HD2', -0.42, (69.907, -31.43, 42.064)), (' L  54  ILE HD13', ' L  60  ARG  HA ', -0.417, (62.323, -43.739, 53.809)), (' E 399  SER  HA ', ' E 510  VAL  O  ', -0.415, (89.148, -39.421, 57.04)), (' L 100  ILE HG23', ' L 101  PRO  HA ', -0.413, (59.791, -44.607, 30.961)), (' H 137  PRO  HD2', ' H 224  PRO  HA ', -0.413, (21.397, -11.153, 51.932)), (' H 176  THR HG23', ' H 191  SER  HB2', -0.412, (36.748, -17.488, 47.301)), (' L  15  LEU  H  ', ' L  15  LEU HD12', -0.412, (44.16, -38.052, 65.144)), (' H 157  PHE  HA ', ' H 158  PRO  HA ', -0.408, (41.174, -18.051, 32.793))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
