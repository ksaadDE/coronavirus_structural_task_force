# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 165 ', 'ASN', 0.0010170543357762225, (138.361, 84.956, 70.105)), ('A', ' 331 ', 'ASN', 0.0, (95.784, 81.911, 87.222)), ('B', ' 165 ', 'ASN', 0.0, (77.51999999999997, 111.01200000000003, 70.079)), ('B', ' 331 ', 'ASN', 0.0, (96.217, 149.398, 87.25300000000001)), ('C', ' 165 ', 'ASN', 0.014757167674339057, (130.568, 150.674, 70.113)), ('C', ' 331 ', 'ASN', 0.0, (154.457, 115.286, 87.241))]
data['cbeta'] = []
data['probe'] = [(' B1306  NAG  O3 ', ' B1306  NAG  O7 ', -0.842, (97.09, 155.79, 90.938)), (' A1305  NAG  O3 ', ' A1305  NAG  O7 ', -0.825, (89.615, 79.446, 90.855)), (' A  37  TYR  OH ', ' A  53  ASP  OD2', -0.8, (136.121, 91.039, 101.318)), (' A1050  MET  HE2', ' A1052  PHE  CE1', -0.734, (135.448, 114.397, 166.22)), (' A  99  ASN  O  ', ' A 102  ARG  NH2', -0.726, (155.48, 72.95, 90.349)), (' C1116  THR  OG1', ' C1138  TYR  O  ', -0.71, (124.565, 121.263, 200.32)), (' B 169  GLU  OE2', ' B 171  VAL HG13', -0.7, (73.916, 100.018, 76.212)), (' A1116  THR  OG1', ' A1138  TYR  O  ', -0.696, (115.941, 104.853, 200.365)), (' A1050  MET  HE2', ' A1052  PHE  CZ ', -0.676, (136.077, 114.106, 166.585)), (' A1303  NAG  O7 ', ' C 457  ARG  NH2', -0.658, (122.836, 85.485, 81.548)), (' B 474  GLN  NE2', ' B 478  THR  O  ', -0.655, (152.998, 134.331, 73.588)), (' A  29  THR HG22', ' A  30  ASN  H  ', -0.65, (141.1, 71.734, 109.58)), (' A 216  LEU HD13', ' A 266  TYR  CD2', -0.647, (145.174, 75.137, 104.24)), (' A 371  SER  OG ', ' A1312  NAG  H83', -0.643, (105.335, 95.729, 67.25)), (' C 169  GLU  OE2', ' C 171  VAL HG23', -0.639, (122.529, 159.43, 76.609)), (' C 331  ASN  N  ', ' C 331  ASN  OD1', -0.631, (154.661, 114.48, 88.75)), (' A 331  ASN  N  ', ' A 331  ASN  OD1', -0.63, (95.133, 82.051, 88.799)), (' C 957  GLN  O  ', ' C 961  THR HG23', -0.628, (113.419, 132.584, 125.144)), (' A 580  GLN  O  ', ' A1305  NAG  H3 ', -0.624, (91.88, 79.578, 92.675)), (' C  99  ASN  O  ', ' C 102  ARG  NH2', -0.622, (132.346, 170.794, 89.807)), (' A 957  GLN  O  ', ' A 961  THR HG23', -0.62, (131.728, 108.614, 125.112)), (' A 702  GLU  OE1', ' B 790  LYS  NZ ', -0.615, (115.531, 81.224, 161.862)), (' B1118  ASP  OD1', ' B1119  ASN  N  ', -0.606, (108.162, 118.036, 194.947)), (' A 617  CYS  O  ', ' A 618  THR  OG1', -0.605, (111.346, 70.917, 129.576)), (' B 121  ASN  OD1', ' B 122  ASN  N  ', -0.603, (64.709, 99.186, 85.367)), (' A 273  ARG  NH2', ' A 292  ALA  O  ', -0.602, (128.355, 84.142, 112.765)), (' B 331  ASN  N  ', ' B 331  ASN  OD1', -0.597, (96.673, 149.873, 88.937)), (' B  29  THR HG22', ' B  30  ASN  H  ', -0.596, (64.878, 115.609, 110.08)), (' B 902  MET  HE1', ' B1050  MET  SD ', -0.587, (102.737, 100.728, 170.737)), (' A 121  ASN  OD1', ' A 122  ASN  N  ', -0.585, (154.667, 79.506, 84.981)), (' C 580  GLN  O  ', ' C1305  NAG  H3 ', -0.582, (158.498, 113.089, 92.663)), (' B 617  CYS  O  ', ' B 618  THR  OG1', -0.58, (78.827, 141.337, 129.715)), (' A 525  CYS  SG ', ' A 526  GLY  N  ', -0.579, (100.704, 88.434, 85.329)), (' A 703  ASN  OD1', ' A 704  SER  N  ', -0.57, (117.702, 84.525, 166.485)), (' B 580  GLN  O  ', ' B1306  NAG  H3 ', -0.569, (95.948, 153.973, 92.741)), (' C 121  ASN  OD1', ' C 122  ASN  N  ', -0.567, (126.974, 167.165, 84.934)), (' A 638  THR HG22', ' A 639  GLY  N  ', -0.565, (121.541, 70.631, 125.313)), (' A 638  THR HG22', ' A 639  GLY  H  ', -0.562, (121.506, 71.304, 125.896)), (' B 638  THR HG22', ' B 639  GLY  N  ', -0.558, (73.506, 132.181, 125.72)), (' A 216  LEU HD12', ' A 217  PRO  HD2', -0.555, (147.308, 75.843, 106.446)), (' C 638  THR HG22', ' C 639  GLY  H  ', -0.552, (151.02, 142.532, 125.738)), (' B  40  ASP  OD2', ' B  44  ARG  NH2', -0.55, (92.446, 101.569, 105.541)), (' A  40  ASP  OD2', ' A  44  ARG  NH2', -0.548, (139.043, 102.471, 105.74)), (' C 617  CYS  O  ', ' C 618  THR  OG1', -0.544, (156.123, 133.981, 129.611)), (' C 273  ARG  NH2', ' C 292  ALA  O  ', -0.541, (135.624, 142.396, 112.285)), (' A 395  VAL HG11', ' A1301  EIC H131', -0.523, (97.925, 97.824, 82.256)), (' B 273  ARG  NH2', ' B 292  ALA  O  ', -0.513, (81.93, 119.88, 112.669)), (' B 703  ASN  OD1', ' B 704  SER  N  ', -0.511, (87.392, 129.004, 166.711)), (' B 865  LEU HD22', ' B 869  MET  HE2', -0.506, (115.436, 89.197, 147.227)), (' B 852  ALA  O  ', ' B 856  ASN  ND2', -0.506, (104.534, 94.693, 118.611)), (' C 638  THR HG22', ' C 639  GLY  N  ', -0.503, (150.841, 143.211, 125.552)), (' C 110  LEU HD12', ' C 135  PHE  CD2', -0.499, (139.296, 154.687, 81.323)), (' A 216  LEU HD13', ' A 266  TYR  CE2', -0.494, (145.368, 74.283, 104.787)), (' A 355  ARG  HG3', ' A 398  ASP  OD1', -0.491, (91.874, 106.35, 79.071)), (' B 638  THR HG22', ' B 639  GLY  H  ', -0.491, (74.031, 132.788, 125.796)), (' B 779  GLN  OE1', ' B 865  LEU HD11', -0.489, (116.819, 93.267, 147.543)), (' B1090  PRO  O  ', ' B1091  ARG  HB3', -0.488, (109.109, 122.044, 189.428)), (' A 773  GLU  OE2', ' A1019  ARG  NE ', -0.487, (120.938, 121.59, 140.88)), (' A 165  ASN  N  ', ' A 165  ASN  OD1', -0.486, (137.091, 83.724, 69.91)), (' C 805  ILE HG22', ' C 818  ILE HD12', -0.486, (106.405, 140.99, 159.641)), (' C 457  ARG  NH1', ' C 467  ASP  OD2', -0.485, (124.195, 85.708, 77.447)), (' C 902  MET  HB3', ' C 916  LEU HD11', -0.484, (109.961, 133.457, 176.362)), (' A 405  ASP  OD2', ' B 373  SER  OG ', -0.484, (106.46, 123.27, 68.636)), (' B 455  LEU HD22', ' B 493  GLN  HG3', -0.482, (136.951, 128.058, 66.733)), (' B  29  THR HG22', ' B  30  ASN  N  ', -0.482, (64.95, 115.642, 109.832)), (' A1090  PRO  O  ', ' A1091  ARG  HB3', -0.48, (112.574, 107.036, 189.474)), (' A1093  GLY  HA3', ' A1105  THR  O  ', -0.478, (117.031, 102.552, 185.322)), (' C1090  PRO  O  ', ' C1091  ARG  HB3', -0.477, (124.365, 117.777, 189.43)), (' B1093  GLY  HA3', ' B1105  THR  O  ', -0.477, (103.15, 120.318, 185.418)), (' C  29  THR HG22', ' C  30  ASN  N  ', -0.477, (140.872, 159.123, 109.831)), (' B 165  ASN  N  ', ' B 165  ASN  OD1', -0.47, (77.186, 112.665, 69.844)), (' C 815  ARG  HD3', ' C 823  PHE  CE2', -0.47, (99.852, 139.485, 149.353)), (' A1118  ASP  OD1', ' A1119  ASN  N  ', -0.47, (116.806, 107.743, 195.227)), (' B 228  ASP  N  ', ' B 228  ASP  OD1', -0.468, (83.558, 102.27, 90.23)), (' C  40  ASP  OD2', ' C  44  ARG  NH2', -0.466, (114.745, 142.522, 105.694)), (' B 335  LEU HD12', ' B 362  VAL  O  ', -0.461, (100.855, 141.564, 78.566)), (' B1306  NAG  C3 ', ' B1306  NAG  O7 ', -0.455, (96.897, 155.15, 91.423)), (' A 228  ASP  N  ', ' A 228  ASP  OD1', -0.455, (142.773, 94.877, 90.115)), (' C1093  GLY  HA3', ' C1105  THR  O  ', -0.454, (125.835, 123.718, 185.53)), (' B1122  VAL  O  ', ' B1122  VAL HG13', -0.453, (115.495, 128.955, 195.121)), (' B1093  GLY  HA2', ' B1107  ARG  HD2', -0.453, (104.044, 120.901, 182.438)), (' C1309  NAG  O3 ', ' C1309  NAG  O7 ', -0.452, (138.985, 137.594, 176.132)), (' A 755  GLN  N  ', ' A 755  GLN  OE1', -0.452, (121.348, 130.037, 107.879)), (' A  29  THR HG22', ' A  30  ASN  N  ', -0.45, (140.708, 72.003, 109.813)), (' B 815  ARG  HD3', ' B 823  PHE  CE2', -0.447, (102.267, 89.752, 149.259)), (' C 852  ALA  O  ', ' C 856  ASN  ND2', -0.446, (103.277, 135.074, 118.306)), (' C 280  ASN  OD1', ' C 282  ASN  N  ', -0.446, (111.528, 154.483, 113.678)), (' B 568  ASP  HB3', ' B 574  ASP  OD1', -0.443, (105.513, 141.399, 111.962)), (' A 390  LEU  O  ', ' A 525  CYS  O  ', -0.441, (102.112, 91.683, 87.67)), (' A1305  NAG  C3 ', ' A1305  NAG  O7 ', -0.439, (90.646, 79.65, 91.377)), (' B 569  ILE  H  ', ' B 569  ILE HD12', -0.439, (108.999, 140.957, 115.036)), (' C1093  GLY  HA2', ' C1107  ARG  HD2', -0.438, (125.819, 122.314, 182.382)), (' C 165  ASN  N  ', ' C 165  ASN  OD1', -0.437, (132.303, 150.156, 69.766)), (' C 642  VAL  O  ', ' C 642  VAL HG23', -0.434, (152.21, 139.204, 132.164)), (' B 981  LEU HD21', ' B 993  ILE HD11', -0.434, (114.173, 100.001, 101.232)), (' A 357  ARG  NH2', ' A 394  ASN  OD1', -0.432, (89.239, 98.648, 87.198)), (' C 228  ASP  O  ', ' C 228  ASP  OD1', -0.43, (119.718, 148.816, 88.635)), (' C 915  VAL  O  ', ' C 919  ASN  ND2', -0.429, (116.434, 136.465, 182.574)), (' B  53  ASP  OD1', ' B  54  LEU  N  ', -0.428, (85.851, 112.476, 102.087)), (' A 190  ARG  HD3', ' A 207  HIS  ND1', -0.427, (152.754, 82.914, 98.313)), (' B 355  ARG  HG3', ' B 398  ASP  OD1', -0.427, (119.36, 140.952, 79.403)), (' B 165  ASN  ND2', ' B1303  NAG  O7 ', -0.425, (80.685, 113.059, 68.29)), (' B 108  THR HG23', ' B 234  ASN  O  ', -0.424, (78.813, 119.149, 83.948)), (' C 796  ASP  O  ', ' C 796  ASP  OD1', -0.423, (97.353, 140.114, 175.645)), (' C 354  ASN  O  ', ' C 398  ASP  HA ', -0.423, (134.506, 100.131, 75.928)), (' B 216  LEU HD13', ' B 266  TYR  CD2', -0.421, (65.309, 110.353, 104.71)), (' B 796  ASP  O  ', ' B 796  ASP  OD1', -0.421, (103.2, 87.508, 175.576)), (' B1116  THR HG23', ' B1118  ASP  OD1', -0.421, (107.496, 118.403, 196.515)), (' B 110  LEU HD12', ' B 135  PHE  CD2', -0.42, (69.806, 116.369, 81.351)), (' A 796  ASP  O  ', ' A 796  ASP  OD1', -0.414, (145.699, 118.484, 175.734)), (' C 568  ASP  HB3', ' C 574  ASP  OD2', -0.413, (143.11, 110.934, 112.064)), (' A1091  ARG  HG2', ' A1091  ARG  O  ', -0.41, (112.891, 109.38, 187.509)), (' A 641  ASN  O  ', ' A 641  ASN  OD1', -0.408, (123.792, 72.874, 131.262)), (' C  53  ASP  OD1', ' C  54  LEU  N  ', -0.408, (127.581, 142.629, 102.305)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.406, (119.071, 139.326, 76.129)), (' A 108  THR HG23', ' A 234  ASN  O  ', -0.405, (130.571, 81.903, 84.084)), (' B1091  ARG  HG2', ' B1091  ARG  O  ', -0.403, (111.063, 120.461, 187.604)), (' C 131  CYS  SG ', ' C 166  CYS  HB3', -0.402, (129.495, 153.554, 74.384)), (' C 553  THR HG22', ' C 554  GLU  N  ', -0.401, (156.004, 117.41, 110.455))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
