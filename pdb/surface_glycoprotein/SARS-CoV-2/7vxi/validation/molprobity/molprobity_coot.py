# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 445 ', 'VAL', 0.030335131226528183, (27.15299999999999, 1.3859999999999995, 71.691)), ('B', ' 148 ', 'ASN', 0.04767561528211177, (86.06099999999998, -26.112999999999992, 36.83)), ('B', ' 985 ', 'ASP', 0.05738404809916349, (11.560999999999998, -12.872, 34.612)), ('C', ' 445 ', 'VAL', 0.031233212122173483, (-0.398, -7.681, 74.12))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 985  ASP  HB2', ' B 986  PRO  HD2', -1.106, (9.419, -12.497, 35.995)), (' B 986  PRO  HG2', ' B 987  PRO  HD3', -1.093, (7.679, -11.609, 35.682)), (' B 985  ASP  HB2', ' B 986  PRO  CD ', -0.99, (10.087, -13.804, 35.498)), (' B 985  ASP  CB ', ' B 986  PRO  HD2', -0.926, (10.121, -12.434, 35.595)), (' B 985  ASP  CG ', ' B 987  PRO  HD2', -0.922, (10.128, -10.742, 35.309)), (' A 985  ASP  OD1', ' A 988  GLU  HB2', -0.89, (-3.313, 6.792, 33.535)), (' A 985  ASP  OD1', ' A 988  GLU  CB ', -0.832, (-2.617, 6.476, 33.133)), (' B 986  PRO  CG ', ' B 987  PRO  HD3', -0.83, (7.549, -12.519, 35.374)), (' B 422  ASN  OD1', ' B 423  TYR  N  ', -0.82, (2.786, 19.541, 53.689)), (' B 986  PRO  HG2', ' B 987  PRO  CD ', -0.784, (7.553, -11.81, 35.233)), (' B 985  ASP  OD2', ' B 987  PRO  CG ', -0.781, (10.121, -10.159, 36.745)), (' C 563  GLN  O  ', ' C 577  ARG  NH1', -0.75, (-28.991, -10.339, 24.905)), (' B 985  ASP  CG ', ' B 987  PRO  CD ', -0.74, (9.551, -10.721, 35.224)), (' B 985  ASP  OD1', ' B 987  PRO  HG2', -0.701, (9.647, -9.787, 35.3)), (' A 985  ASP  OD1', ' A 988  GLU  CG ', -0.701, (-1.693, 6.561, 34.199)), (' B 102  ARG  NH2', ' B 154  LYS  NZ ', -0.7, (65.995, -19.768, 35.07)), (' B 986  PRO  CD ', ' B 987  PRO  HD2', -0.697, (9.175, -12.664, 35.73)), (' B 985  ASP  CG ', ' B 987  PRO  CG ', -0.695, (9.48, -10.268, 35.691)), (' B 985  ASP  CG ', ' B 987  PRO  HG2', -0.694, (10.313, -10.251, 35.796)), (' C 903  ALA  HB1', ' C 913  GLN  HB2', -0.685, (9.265, 11.285, -54.524)), (' B 563  GLN  NE2', ' C  41  LYS  O  ', -0.682, (13.305, 36.458, 14.766)), (' B 102  ARG HH22', ' B 154  LYS  HZ3', -0.678, (65.697, -20.928, 35.679)), (' A 985  ASP  OD1', ' A 988  GLU  HG2', -0.664, (-1.671, 6.787, 34.722)), (' B 616  ASN  OD1', ' B 617  CYS  N  ', -0.661, (38.451, 24.014, -2.856)), (' B  97  LYS  NZ ', ' B 184  GLY  O  ', -0.66, (75.73, -14.757, 18.899)), (' B 986  PRO  N  ', ' B 987  PRO  HD2', -0.655, (9.322, -11.792, 34.823)), (' B 403  ARG  NH2', ' B 406  GLU  OE2', -0.65, (3.748, 17.812, 66.524)), (' B 102  ARG  NH2', ' B 154  LYS  HZ3', -0.649, (65.554, -20.638, 35.736)), (' B 102  ARG HH12', ' B 154  LYS  HD2', -0.638, (68.492, -20.403, 35.016)), (' B 986  PRO  CG ', ' B 987  PRO  CD ', -0.637, (7.839, -11.971, 35.042)), (' B 344  ALA  HB3', ' B 347  PHE  HE1', -0.634, (12.696, 34.578, 54.553)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.633, (-5.822, 44.585, 7.96)), (' B  20  THR  O  ', ' B  21  ARG  NH1', -0.632, (76.943, -2.774, 32.898)), (' C 403  ARG  NH2', ' C 406  GLU  OE2', -0.632, (8.518, -9.974, 56.176)), (' A  66  HIS  ND1', ' A 263  ALA  O  ', -0.631, (-30.376, -47.596, 27.562)), (' A  32  PHE  CD2', ' A  33  THR HG23', -0.631, (-21.859, -33.456, 11.915)), (' B 986  PRO  CD ', ' B 987  PRO  CD ', -0.627, (8.676, -12.628, 35.303)), (' C 661  GLU  O  ', ' C 695  TYR  OH ', -0.622, (-16.502, 22.007, -19.159)), (' C 916  LEU  O  ', ' C 920  GLN  N  ', -0.611, (6.164, 19.737, -54.277)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.611, (36.408, -19.385, 29.409)), (' B1135  ASN  OD1', ' B1136  THR  N  ', -0.61, (17.933, 9.349, -72.508)), (' C  32  PHE  CD2', ' C  33  THR HG23', -0.606, (-7.732, 43.341, 6.272)), (' B 717  ASN  OD1', ' B 718  PHE  N  ', -0.601, (28.614, -6.078, -49.365)), (' A1031  GLU  OE2', ' C1039  ARG  NE ', -0.594, (3.539, 0.158, -32.55)), (' C 287  ASP  OD1', ' C 288  ALA  N  ', -0.593, (-2.34, 39.44, 4.928)), (' B 287  ASP  OD1', ' B 288  ALA  N  ', -0.593, (45.635, -10.366, 5.292)), (' B1039  ARG  NE ', ' C1031  GLU  OE2', -0.591, (8.439, -1.029, -32.993)), (' B 102  ARG HH22', ' B 154  LYS  NZ ', -0.59, (66.373, -20.319, 35.849)), (' A 112  SER  N  ', ' A 133  PHE  O  ', -0.589, (-19.882, -36.238, 51.637)), (' B1074  ASN  OD1', ' C 895  GLN  NE2', -0.589, (28.102, 9.485, -51.764)), (' A 287  ASP  OD1', ' A 288  ALA  N  ', -0.584, (-20.757, -26.326, 10.674)), (' B 985  ASP  OD2', ' B 987  PRO  HG2', -0.583, (10.081, -9.481, 36.459)), (' B 968  SER  OG ', ' C 755  GLN  O  ', -0.581, (20.256, -3.63, 15.954)), (' B 393  THR  CG2', ' B 520  ALA  HB3', -0.581, (16.551, 22.991, 31.9)), (' B 985  ASP  CB ', ' B 987  PRO  HD2', -0.573, (10.268, -12.003, 35.509)), (' A 396  TYR  HH ', ' B 200  TYR  HE1', -0.572, (37.588, -12.188, 35.521)), (' A 193  VAL HG23', ' A 223  LEU HD22', -0.567, (-23.681, -28.858, 24.496)), (' B 986  PRO  HD2', ' B 987  PRO  HD2', -0.554, (9.233, -12.568, 35.967)), (' A 742  ILE  O  ', ' A1000  ARG  NH1', -0.552, (-7.537, 4.417, 16.348)), (' B1054  GLN  O  ', ' B1061  VAL  N  ', -0.549, (18.787, -16.222, -24.859)), (' A 983  ARG  CZ ', ' C 517  LEU HD21', -0.547, (-12.178, -2.642, 30.578)), (' B1017  GLU  OE2', ' C1019  ARG  NH1', -0.544, (14.537, -0.646, -11.311)), (' B 105  ILE  N  ', ' B 239  GLN  O  ', -0.527, (58.617, -8.068, 33.423)), (' A 341  VAL HG23', ' A 342  PHE  H  ', -0.527, (28.453, -14.867, 50.56)), (' B 108  THR  O  ', ' B 237  ARG  NH2', -0.526, (54.687, 1.689, 39.06)), (' A 194  PHE  HE1', ' A 203  ILE HG23', -0.525, (-25.711, -28.52, 31.53)), (' A  91  TYR  HD1', ' A 193  VAL HG22', -0.523, (-21.391, -30.462, 24.939)), (' B 985  ASP  OD2', ' B 987  PRO  HG3', -0.521, (9.224, -9.846, 37.158)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.519, (16.447, 23.689, 28.868)), (' B  40  ASP  OD1', ' B  41  LYS  N  ', -0.516, (37.302, -17.412, 20.74)), (' B 344  ALA  HB3', ' B 347  PHE  CE1', -0.511, (12.506, 34.173, 55.05)), (' A 403  ARG  NH2', ' A 406  GLU  OE2', -0.509, (24.053, 9.011, 54.121)), (' C1072  GLU  N  ', ' C1072  GLU  OE1', -0.508, (-12.019, 15.741, -47.539)), (' B 986  PRO  N  ', ' B 987  PRO  CD ', -0.507, (8.558, -11.935, 34.816)), (' B 329  PHE  O  ', ' B 580  GLN  NE2', -0.506, (28.834, 38.344, 27.186)), (' A  27  ALA  O  ', ' A  64  TRP  N  ', -0.499, (-20.595, -46.656, 24.844)), (' A 983  ARG  NH2', ' C 517  LEU HD21', -0.497, (-12.545, -3.292, 30.471)), (' A1072  GLU  N  ', ' A1072  GLU  OE1', -0.496, (-2.438, -26.806, -45.238)), (' A 487  ASN  OD1', ' B 370  ASN  ND2', -0.494, (32.173, 26.377, 53.783)), (' A  32  PHE  CE2', ' A  33  THR HG23', -0.491, (-21.842, -33.058, 11.555)), (' A 341  VAL HG23', ' A 342  PHE  N  ', -0.49, (28.871, -14.116, 50.593)), (' C 422  ASN  OD1', ' C 423  TYR  N  ', -0.489, (0.834, -15.774, 50.188)), (' B 697  MET  HE1', ' C 865  LEU HD21', -0.483, (28.902, 11.131, -21.739)), (' B  93  ALA  O  ', ' B 266  TYR  N  ', -0.482, (61.099, -6.917, 20.873)), (' B 102  ARG  NH2', ' B 154  LYS  HZ2', -0.481, (65.659, -19.475, 35.544)), (' C 716  THR  N  ', ' C1071  GLN  O  ', -0.48, (-8.756, 16.025, -50.538)), (' B  21  ARG  HE ', ' B  79  PHE  HB2', -0.475, (74.064, -4.319, 31.114)), (' A 563  GLN  NE2', ' B  42  VAL  O  ', -0.475, (38.257, -20.227, 15.816)), (' C 712  ILE  O  ', ' C1075  PHE  N  ', -0.469, (-16.496, 9.874, -53.873)), (' A 200  TYR  HH ', ' C 396  TYR  HH ', -0.466, (-17.434, -14.508, 39.463)), (' A1050  MET  HE2', ' A1052  PHE  HE1', -0.465, (-14.738, -4.441, -37.523)), (' B1104  VAL  O  ', ' B1113  GLN  N  ', -0.46, (19.974, -0.181, -63.322)), (' B1050  MET  HE2', ' B1052  PHE  HE1', -0.459, (17.763, -18.46, -37.837)), (' B 406  GLU  N  ', ' B 406  GLU  OE1', -0.458, (7.429, 18.307, 64.242)), (' B 194  PHE  HE1', ' B 203  ILE HG23', -0.456, (51.707, -13.472, 26.84)), (' B 107  GLY  HA3', ' B 110  LEU HD21', -0.448, (53.791, -4.32, 39.076)), (' A 669  GLY  N  ', ' B 864  LEU  O  ', -0.448, (8.544, -28.549, -13.35)), (' B 393  THR HG21', ' B 520  ALA  HB3', -0.446, (16.232, 22.63, 32.059)), (' C  32  PHE  CE2', ' C  33  THR HG23', -0.446, (-7.844, 43.0, 5.955)), (' C 111  ASP  OD1', ' C 112  SER  N  ', -0.445, (-8.845, 45.046, 46.815)), (' B 340  GLU  O  ', ' B 344  ALA  HB2', -0.445, (13.114, 35.975, 52.717)), (' C 975  SER  O  ', ' C1000  ARG  NH2', -0.444, (15.378, 16.069, 16.89)), (' C 979  ASP  O  ', ' C 983  ARG  N  ', -0.44, (18.742, 17.341, 27.231)), (' A 661  GLU  O  ', ' A 695  TYR  OH ', -0.439, (-1.979, -31.457, -15.892)), (' B1014  ARG  NH1', ' B1017  GLU  OE1', -0.437, (15.849, -4.938, -11.401)), (' B 697  MET  HE1', ' C 865  LEU  CD2', -0.436, (29.047, 11.554, -21.639)), (' B  80  ASP  OD1', ' B  82  PRO  HD3', -0.435, (66.157, -0.552, 29.478)), (' A 111  ASP  OD1', ' A 112  SER  N  ', -0.433, (-18.75, -36.996, 51.932)), (' A 762  GLN HE21', ' C 961  THR HG21', -0.432, (6.633, 13.844, 3.51)), (' C 102  ARG  HG2', ' C 141  LEU HD12', -0.431, (-4.078, 58.441, 33.978)), (' C 366  SER  O  ', ' C 370  ASN  N  ', -0.429, (-14.344, 9.976, 48.52)), (' A 474  GLN  NE2', ' A 478  THR  O  ', -0.427, (41.795, 26.213, 50.329)), (' A1039  ARG  NE ', ' B1031  GLU  OE2', -0.427, (5.203, -4.931, -32.174)), (' C1056  ALA  HB2', ' C1061  VAL HG23', -0.424, (12.219, 18.858, -24.415)), (' A 796  ASP  OD2', ' C 709  ASN  ND2', -0.423, (-24.128, -2.639, -50.419)), (' C 108  THR  OG1', ' C 234  ASN  O  ', -0.422, (-6.188, 37.023, 38.709)), (' A 883  THR  O  ', ' A 901  GLN  NE2', -0.42, (-15.783, 2.592, -44.121)), (' C  93  ALA  O  ', ' C 266  TYR  N  ', -0.419, (-10.897, 50.536, 20.751)), (' C 570  ALA  O  ', ' C 571  ASP  HB2', -0.419, (-13.969, -5.277, 14.432)), (' B 520  ALA  HB1', ' B 521  PRO  CD ', -0.418, (16.793, 23.448, 29.029)), (' C 280  ASN  OD1', ' C 284  THR  N  ', -0.417, (8.858, 41.654, 5.213)), (' A 986  PRO  N  ', ' A 987  PRO  HD2', -0.416, (-3.75, 10.263, 33.91)), (' C 903  ALA  HB2', ' C 916  LEU HD23', -0.416, (10.121, 14.083, -52.846)), (' A 122  ASN  O  ', ' A 123  ALA  HB3', -0.416, (-41.336, -34.868, 39.593)), (' B 945  LEU  O  ', ' B 948  LEU  N  ', -0.415, (23.441, -11.404, -16.323)), (' C 474  GLN  NE2', ' C 478  THR  O  ', -0.414, (12.211, -36.188, 54.648)), (' B 423  TYR  OH ', ' B 425  LEU HD21', -0.413, (10.457, 19.318, 49.874)), (' A  34  ARG  NE ', ' A 191  GLU  OE2', -0.413, (-26.55, -34.506, 19.481)), (' B 318  PHE  N  ', ' B 593  GLY  O  ', -0.413, (32.627, 13.154, 3.82)), (' A 919  ASN  O  ', ' A 922  LEU  N  ', -0.412, (-17.228, -16.177, -49.074)), (' C 122  ASN  O  ', ' C 123  ALA  HB3', -0.41, (2.608, 62.506, 32.35)), (' B 216  LEU HD12', ' B 217  PRO  HD2', -0.41, (61.181, -9.969, 13.312)), (' C 131  CYS  HB2', ' C 133  PHE  CE1', -0.409, (-0.141, 47.762, 43.87)), (' A  34  ARG  NH2', ' A 217  PRO  O  ', -0.409, (-27.067, -36.554, 15.417)), (' A 236  THR  O  ', ' A 237  ARG  NH1', -0.408, (-11.953, -37.367, 38.915)), (' B  63  THR HG22', ' B  64  TRP  N  ', -0.406, (62.78, 0.27, 21.454)), (' B  21  ARG  HE ', ' B  79  PHE  CB ', -0.405, (73.608, -4.355, 31.162)), (' A 196  ASN  ND2', ' A 233  ILE  O  ', -0.402, (-15.234, -26.028, 40.303)), (' C 714  ILE HG13', ' C1105  THR HG21', -0.402, (-9.96, 8.588, -56.181)), (' B 985  ASP  OD1', ' B 987  PRO  HD2', -0.401, (10.074, -10.749, 35.059)), (' A  21  ARG  NE ', ' A  79  PHE  O  ', -0.401, (-24.899, -50.652, 36.766)), (' B 639  GLY  O  ', ' B 640  SER  HB2', -0.4, (51.42, 17.27, -5.246)), (' B 784  GLN  NE2', ' B1030  SER  OG ', -0.4, (5.963, -14.148, -29.058)), (' C 979  ASP  OD2', ' C 983  ARG  NE ', -0.4, (14.7, 18.771, 25.904)), (' B  81  ASN  O  ', ' B 239  GLN  NE2', -0.4, (64.184, -3.052, 34.978))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
