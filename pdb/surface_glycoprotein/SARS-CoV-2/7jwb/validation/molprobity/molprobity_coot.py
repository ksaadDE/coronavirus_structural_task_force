# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 333 ', 'THR', 0.02004811050829099, (175.808, 193.453, 183.044)), ('A', '1112 ', 'PRO', 0.016480137350076328, (210.738, 196.645, 284.496)), ('B', '  32 ', 'PHE', 0.006066239726995728, (169.408, 231.24499999999995, 211.59600000000003)), ('B', '1036 ', 'GLN', 0.01875880034872333, (205.03000000000006, 210.16199999999995, 262.044)), ('C', '  32 ', 'PHE', 0.03358485398051849, (251.26200000000009, 241.39499999999995, 210.596))]
data['omega'] = []
data['rota'] = [('D', ' 148 ', 'GLU', 0.039509624428729635, (208.8, 241.39399999999995, 125.363)), ('D', ' 295 ', 'GLU', 8.133349390877944e-06, (233.67600000000004, 202.63499999999993, 127.725)), ('D', ' 313 ', 'ARG', 0.08895799211223245, (243.65100000000007, 180.394, 119.65)), ('A', '  31 ', 'SER', 0.04356556689504676, (215.702, 165.43, 208.945)), ('A', ' 855 ', 'PHE', 0.10377126480874588, (236.015, 203.223, 214.995)), ('A', '1014 ', 'ARG', 0.05621869631459536, (218.84199999999996, 207.322, 230.41)), ('B', '  34 ', 'ARG', 0.0002052850544261357, (169.777, 226.79899999999995, 207.931)), ('B', ' 140 ', 'PHE', 0.23784277921083033, (155.68999999999994, 231.19399999999993, 186.078)), ('B', ' 324 ', 'GLU', 0.0013603679760028718, (200.81, 249.966, 200.881)), ('B', ' 332 ', 'ILE', 0.0, (219.09000000000006, 257.014, 186.116)), ('B', ' 334 ', 'ASN', 0.10210701445338437, (222.225, 260.732, 181.88)), ('B', ' 335 ', 'LEU', 0.08088659674341339, (220.66700000000006, 258.445, 179.214)), ('B', ' 725 ', 'GLU', 0.289111727811715, (196.775, 214.22599999999994, 249.41899999999998)), ('B', ' 815 ', 'ARG', 0.18794289377454718, (186.926, 198.61699999999993, 249.449)), ('B', '1107 ', 'ARG', 0.00953177405810464, (205.047, 225.527, 274.14)), ('C', ' 140 ', 'PHE', 0.10959856585966293, (255.4330000000001, 253.50999999999993, 180.58)), ('C', ' 186 ', 'PHE', 0.25591936028754964, (257.2920000000001, 257.574, 201.437)), ('C', ' 382 ', 'VAL', 0.006301065150182694, (233.162, 199.139, 172.976)), ('C', '1039 ', 'ARG', 0.0009767474504772228, (218.43900000000005, 216.742, 257.614))]
data['cbeta'] = [('A', ' 525 ', 'CYS', ' ', 0.2536463488085014, (181.36400000000006, 196.384, 187.789)), ('B', ' 333 ', 'THR', ' ', 0.26233442535485785, (221.711, 260.744, 186.162)), ('C', ' 361 ', 'CYS', ' ', 0.3162072796020943, (239.94900000000007, 182.056, 179.916))]
data['probe'] = [(' B 332  ILE  HB ', ' B 362  VAL HG21', -0.781, (218.194, 256.317, 183.524)), (' D 100  ARG  HB3', ' D 116  TYR  HB2', -0.679, (208.466, 233.372, 154.927)), (' B 332  ILE HG21', ' B 527  PRO  HA ', -0.65, (216.5, 254.873, 184.243)), (' A 954  GLN  HB3', ' A1014  ARG  HE ', -0.56, (220.635, 201.855, 228.248)), (' C 215  ASP  N  ', ' C 266  TYR  HH ', -0.554, (258.934, 247.055, 205.005)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.55, (218.524, 248.44, 245.44)), (' B 389  ASP  OD1', ' B 529  LYS  NZ ', -0.547, (210.756, 248.141, 182.329)), (' A1083  HIS  HB2', ' A1137  VAL HG23', -0.542, (200.408, 205.885, 292.827)), (' A 522  ALA  H  ', ' A 544  ASN HD21', -0.54, (179.365, 201.01, 192.6)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.481, (180.564, 200.612, 248.246)), (' C 574  ASP  OD1', ' C 575  ALA  N  ', -0.475, (237.93, 190.377, 209.07)), (' A 571  ASP  OD2', ' B 964  LYS  NZ ', -0.474, (188.761, 210.759, 212.817)), (' C  92  PHE  HB2', ' C 192  PHE  HB2', -0.472, (247.5, 246.544, 196.643)), (' B 577  ARG HH11', ' B 582  LEU  HB3', -0.467, (223.265, 257.294, 201.327)), (' A1084  ASP  N  ', ' A1084  ASP  OD1', -0.467, (197.37, 209.052, 294.408)), (' A 126  VAL  HB ', ' A 170  TYR  HB2', -0.465, (234.951, 166.496, 187.579)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.456, (241.363, 191.892, 247.616)), (' C1028  LYS  NZ ', ' C1042  PHE  O  ', -0.453, (219.385, 222.17, 251.541)), (' B1084  ASP  N  ', ' B1084  ASP  OD1', -0.443, (218.861, 233.647, 293.607)), (' C1142  GLN  N  ', ' C1143  PRO  CD ', -0.442, (222.984, 216.656, 301.485)), (' A 657  ASN  N  ', ' A 657  ASN  OD1', -0.429, (193.84, 174.958, 242.232)), (' A 327  VAL  H  ', ' A 531  THR HG22', -0.425, (182.268, 187.124, 196.266)), (' B 908  GLY  O  ', ' B1038  LYS  NZ ', -0.422, (207.424, 214.95, 267.359)), (' C 186  PHE  HB3', ' C 187  LYS  H  ', -0.421, (256.16, 259.789, 202.166)), (' B 455  LEU  HB3', ' D 250  PHE  CZ ', -0.42, (224.698, 246.078, 142.826)), (' A 391  CYS  O  ', ' A 392  PHE  HB2', -0.418, (183.791, 202.616, 186.528)), (' C 908  GLY  O  ', ' C1038  LYS  NZ ', -0.418, (217.174, 219.404, 266.565)), (' A1098  ASN  N  ', ' A1098  ASN  OD1', -0.418, (203.667, 192.06, 286.704)), (' C 867  ASP  N  ', ' C 867  ASP  OD1', -0.416, (208.532, 240.418, 239.113)), (' C 395  VAL HG22', ' C 515  PHE  HD2', -0.414, (233.118, 189.954, 174.292)), (' A 440  ASN  N  ', ' A 440  ASN  OD1', -0.414, (192.371, 203.828, 156.961)), (' C1039  ARG  HB2', ' C1042  PHE  HB2', -0.412, (218.142, 218.07, 255.388)), (' C 528  LYS  NZ ', ' C 544  ASN  O  ', -0.41, (239.195, 193.641, 193.144)), (' B1098  ASN  N  ', ' B1098  ASN  OD1', -0.41, (199.706, 236.539, 284.794)), (' A 917  TYR  HA ', ' A 920  GLN  HG3', -0.41, (227.975, 197.758, 277.251)), (' A 866  THR  H  ', ' A 869  MET  HE3', -0.408, (240.081, 209.036, 239.959)), (' B 200  TYR  CG ', ' B 230  PRO  HA ', -0.407, (176.807, 216.611, 185.914)), (' B 440  ASN  N  ', ' B 440  ASN  OD1', -0.404, (214.73, 264.329, 153.417)), (' C1084  ASP  N  ', ' C1084  ASP  OD1', -0.404, (227.909, 202.495, 294.57)), (' B 344  ALA  O  ', ' B 509  ARG  NH1', -0.402, (221.385, 261.851, 159.708))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
