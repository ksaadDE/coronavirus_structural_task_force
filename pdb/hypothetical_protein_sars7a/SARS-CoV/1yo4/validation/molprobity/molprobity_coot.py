# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  71 ', 'LEU', 0.023562501719111804, (9.568999999999997, 10.579, -7.954999999999999)), ('A', '  22 ', 'SER', 0.00271381673963151, (-21.109999999999996, -12.117000000000004, -2.463)), ('A', '  36 ', 'ASP', 0.0470096295328137, (-20.175999999999995, -9.585000000000004, -14.141999999999996)), ('A', '  74 ', 'ARG', 0.010485658905512585, (-13.338, 12.917, -13.926)), ('A', '  75 ', 'GLN', 0.021828728952663384, (-12.696, 12.786, -10.166)), ('A', '  78 ', 'VAL', 0.013192911605044972, (-10.945999999999996, 18.649, -11.785999999999996)), ('A', '  31 ', 'PHE', 0.026131450873627622, (-18.013, 0.697, -5.110999999999998)), ('A', '  67 ', 'VAL', 0.06413088445255058, (1.899999999999999, 11.615, -13.433999999999996)), ('A', '  69 ', 'PRO', 0.056760135117712086, (-1.625, 6.584, -16.487)), ('A', '  80 ', 'GLN', 0.007214820666119084, (2.995, 12.479, -29.005)), ('A', '  29 ', 'SER', 0.036260802404942366, (-15.334999999999999, 5.63, -1.6479999999999995)), ('A', '  36 ', 'ASP', 0.0005360600001603829, (-18.393999999999995, -10.313000000000004, -14.527)), ('A', '  64 ', 'ALA', 0.026452759947698523, (-2.157, 6.058, -6.535)), ('A', '  72 ', 'PHE', 0.026320172305915664, (-9.658999999999995, 19.061, -11.686)), ('A', '  73 ', 'ILE', 0.024402297120101817, (-11.725999999999996, 15.965000000000007, -12.563)), ('A', '  83 ', 'TYR', 0.021411842544362323, (-9.447999999999997, 31.509, -6.605999999999998)), ('A', '  10 ', 'ARG', 0.04409303742856833, (-4.602, 8.249, -9.272)), ('A', '  21 ', 'PRO', 0.07246003444230244, (-18.788, -13.893, -5.37)), ('A', '  69 ', 'PRO', 0.014005419499332327, (3.5789999999999997, 5.665, -12.791)), ('A', '  72 ', 'PHE', 0.027579025418243197, (9.850999999999997, 8.742, -18.035999999999994)), ('A', '  77 ', 'GLU', 0.03866721786776439, (11.540999999999997, 3.097, -14.927)), ('A', '  71 ', 'LEU', 0.026485020889632824, (5.911, 11.264, -11.362999999999996)), ('A', '  78 ', 'VAL', 0.005409195709431741, (10.140999999999995, 13.286, -14.596)), ('A', '  23 ', 'GLY', 0.046824144878284214, (-18.842, -8.964, -0.994)), ('A', '  36 ', 'ASP', 0.010753397759190955, (-19.125999999999998, -10.124, -14.283999999999997)), ('A', '  67 ', 'VAL', 0.008719965801560476, (2.255999999999999, 9.79, -12.098999999999997)), ('A', '  78 ', 'VAL', 0.050793520311639195, (6.652999999999999, 14.079, -16.388)), ('A', '  82 ', 'LEU', 0.031681898149809214, (5.677, 12.821, -6.8199999999999985)), ('A', '  67 ', 'VAL', 0.07632445801423533, (2.693, 10.971, -11.709)), ('A', '  68 ', 'SER', 0.0509491651235979, (0.277, 12.385000000000003, -14.301999999999996)), ('A', '  71 ', 'LEU', 0.010183218806681315, (-1.064, 14.533, -18.404)), ('A', '  82 ', 'LEU', 0.032807252154344255, (-2.7309999999999994, 21.894, -24.415999999999993)), ('A', '  22 ', 'SER', 0.04480240847310732, (-21.191999999999993, -11.210000000000004, -3.366)), ('A', '  73 ', 'ILE', 0.060022347108213664, (0.3719999999999998, 19.202, -24.111)), ('A', '  74 ', 'ARG', 0.03705212505309102, (-0.6479999999999998, 22.856, -23.803)), ('A', '  78 ', 'VAL', 0.055319464655130976, (-0.002999999999999999, 21.589000000000006, -16.46099999999999))]
data['omega'] = []
data['rota'] = [('A', '   5 ', 'TYR', 0.007894557362457763, (-2.726999999999999, -4.359, -3.008)), ('A', '  13 ', 'THR', 0.003934046205264575, (-10.493999999999996, 3.792, -12.922)), ('A', '  14 ', 'VAL', 0.20441659199180404, (-9.416999999999994, 0.345, -11.732999999999997)), ('A', '  16 ', 'LEU', 0.0014832092185400342, (-10.934999999999999, -4.922, -9.541)), ('A', '  17 ', 'LYS', 0.07053746198417692, (-12.183999999999996, -8.472, -10.043)), ('A', '  20 ', 'CYS', 0.2611675914579151, (-15.975, -13.506000000000004, -3.773)), ('A', '  24 ', 'THR', 0.12254331213591815, (-19.298, -6.814, 1.8939999999999995)), ('A', '  28 ', 'ASN', 0.051980896430902396, (-15.171999999999999, 4.962, 2.007)), ('A', '  29 ', 'SER', 0.004814702111000738, (-14.269999999999996, 4.604, -1.646)), ('A', '  32 ', 'HIS', 0.06523511640819511, (-19.467999999999993, 0.029, -8.592)), ('A', '  34 ', 'LEU', 0.0008426141541074276, (-19.061999999999998, -3.786, -13.259)), ('A', '  41 ', 'LEU', 0.0, (-12.731999999999996, 2.412, -8.431)), ('A', '  42 ', 'THR', 0.023068338543530797, (-10.862, 5.685, -8.736)), ('A', '  45 ', 'SER', 0.0013399975614447612, (-4.040000000000001, 6.197, -2.311)), ('A', '  56 ', 'THR', 0.0, (-12.654999999999994, -14.352, 4.264)), ('A', '  57 ', 'ARG', 0.06819702662688264, (-11.522999999999998, -10.754, 4.718)), ('A', '  59 ', 'THR', 0.008159601566148922, (-8.207999999999998, -6.17, 2.465)), ('A', '  66 ', 'SER', 0.008039985550567508, (1.064, 9.833, -9.619)), ('A', '  68 ', 'SER', 0.009785551319902894, (5.517, 10.824, -11.792)), ('A', '  70 ', 'LYS', 0.0, (8.937, 7.243, -9.696)), ('A', '  73 ', 'ILE', 0.05661344865359893, (11.815999999999997, 13.028, -3.734999999999999)), ('A', '  76 ', 'GLU', 0.004925055693195218, (10.906999999999996, 7.39, -1.4979999999999996)), ('A', '  77 ', 'GLU', 0.2193679579326716, (8.176999999999998, 8.056, -4.057999999999998)), ('A', '  78 ', 'VAL', 0.1194493761468878, (5.946, 9.987, -1.686)), ('A', '  79 ', 'GLN', 0.0022272964802265128, (6.341, 8.404, 1.748)), ('A', '  81 ', 'GLU', 0.0, (2.180999999999999, 5.741, 3.132999999999999)), ('A', '  83 ', 'TYR', 0.04615388700724884, (7.160000000000001, 4.609, 7.270999999999998)), ('A', '  84 ', 'SER', 0.011820914052208052, (5.135, 7.427, 8.825)), ('A', '  85 ', 'ARG', 0.004021853888415527, (6.406999999999997, 6.631, 12.32)), ('A', '   1 ', 'GLU', 0.06457756322554854, (-7.181999999999998, -12.11, 5.949999999999998)), ('A', '  13 ', 'THR', 0.022192908568133718, (-10.668999999999997, 3.72, -13.065)), ('A', '  14 ', 'VAL', 0.2833670775386027, (-9.655999999999997, 0.318, -11.731)), ('A', '  16 ', 'LEU', 0.01568963111950674, (-11.381999999999998, -4.833, -9.484999999999998)), ('A', '  17 ', 'LYS', 0.0, (-12.727999999999998, -8.341000000000003, -9.929999999999998)), ('A', '  20 ', 'CYS', 0.07031469374875006, (-16.047, -13.628, -4.012)), ('A', '  22 ', 'SER', 0.22194517374397207, (-21.109999999999996, -12.117000000000004, -2.463)), ('A', '  29 ', 'SER', 0.0670266296482751, (-14.897, 4.848, -1.502)), ('A', '  37 ', 'ASN', 0.1675387726086191, (-18.399999999999995, -9.526, -10.807)), ('A', '  41 ', 'LEU', 0.001265428592383667, (-12.879999999999999, 2.578, -8.405)), ('A', '  42 ', 'THR', 0.20655069265889084, (-10.968, 5.781, -9.0)), ('A', '  45 ', 'SER', 0.004019992775283754, (-4.241, 6.319, -2.458)), ('A', '  46 ', 'THR', 0.02540939636316969, (-7.059999999999999, 4.635, -0.603)), ('A', '  56 ', 'THR', 0.07544481457846788, (-12.904, -14.77, 4.262)), ('A', '  57 ', 'ARG', 7.797273919022635e-05, (-11.623, -11.213, 4.533)), ('A', '  62 ', 'LEU', 0.0065464190257623804, (-4.807, 1.111, -3.469)), ('A', '  63 ', 'ARG', 0.2309183543023855, (-1.4229999999999996, 2.436, -4.343)), ('A', '  65 ', 'ARG', 0.21257129874364908, (1.232, 5.29, -8.684)), ('A', '  68 ', 'SER', 0.005359990245779045, (-3.5019999999999993, 12.22, -12.463)), ('A', '  70 ', 'LYS', 0.010640010333901136, (-3.021999999999999, 13.616, -18.016)), ('A', '  71 ', 'LEU', 0.0013970915687523569, (-4.975999999999999, 15.301, -15.217)), ('A', '  74 ', 'ARG', 0.07349578299292421, (-13.338, 12.917, -13.926)), ('A', '  75 ', 'GLN', 0.0, (-12.696, 12.786, -10.166)), ('A', '  76 ', 'GLU', 2.3996360940277448e-05, (-9.174, 13.774, -9.122)), ('A', '  79 ', 'GLN', 0.014265135588698507, (-14.126999999999994, 18.163, -9.799999999999997)), ('A', '  81 ', 'GLU', 0.01665275726443883, (-14.001999999999995, 19.583, -4.1179999999999986)), ('A', '  82 ', 'LEU', 0.00011285028803966674, (-15.244999999999994, 22.919, -2.874)), ('A', '  84 ', 'SER', 0.0704275601353113, (-15.079999999999995, 22.757, -9.673999999999996)), ('A', '   2 ', 'LEU', 0.12988332091367505, (-6.037, -11.675, 3.112999999999999)), ('A', '   3 ', 'TYR', 0.23198623483498057, (-4.6129999999999995, -8.62, 1.3339999999999996)), ('A', '  17 ', 'LYS', 2.094307301877985e-05, (-12.416999999999998, -8.425, -9.615)), ('A', '  20 ', 'CYS', 0.26554166353374636, (-15.924, -13.544, -3.619)), ('A', '  22 ', 'SER', 0.06917049375453739, (-21.296999999999997, -12.818, -2.031)), ('A', '  29 ', 'SER', 0.0028900695865757896, (-15.745, 4.303, -1.555)), ('A', '  34 ', 'LEU', 0.04628788689351212, (-19.584, -3.785, -13.21)), ('A', '  41 ', 'LEU', 0.00015950629619649817, (-13.28, 2.686, -8.814)), ('A', '  42 ', 'THR', 0.17477973718661932, (-11.231, 5.878, -8.871)), ('A', '  47 ', 'HIS', 0.09831081473907709, (-7.023999999999998, 1.0020000000000004, 1.689)), ('A', '  52 ', 'CYS', 0.2546521682849411, (-17.235, -12.316, 1.949)), ('A', '  56 ', 'THR', 0.026837422121746387, (-12.678999999999997, -14.022000000000004, 4.296)), ('A', '  59 ', 'THR', 0.018928132384647894, (-8.193999999999997, -6.132, 2.3469999999999995)), ('A', '  61 ', 'GLN', 0.0, (-4.932, -1.465, -1.3139999999999996)), ('A', '  63 ', 'ARG', 0.22521316177682763, (-1.0929999999999995, 2.289, -4.665999999999999)), ('A', '  65 ', 'ARG', 0.0014950766645447653, (1.173, 6.332, -8.957)), ('A', '  66 ', 'SER', 0.008039985550567508, (0.323, 9.652000000000003, -10.555)), ('A', '  70 ', 'LYS', 0.18253692738174146, (-0.546, 4.491, -19.464)), ('A', '  73 ', 'ILE', 0.041019421748971746, (2.399, 1.405, -26.336)), ('A', '  74 ', 'ARG', 0.0, (0.726, 2.146, -29.65)), ('A', '  75 ', 'GLN', 0.0, (-1.433, 5.276, -29.728)), ('A', '  77 ', 'GLU', 0.25256479350921296, (-3.2459999999999996, 9.164, -24.446)), ('A', '  79 ', 'GLN', 0.0035079636789006725, (0.883, 9.51, -27.973999999999993)), ('A', '  80 ', 'GLN', 0.05008485077445321, (2.995, 12.479, -29.005)), ('A', '  81 ', 'GLU', 0.0, (5.993, 10.468, -29.99299999999999)), ('A', '  83 ', 'TYR', 0.2136212889492205, (2.422999999999999, 10.746, -34.451999999999984)), ('A', '  84 ', 'SER', 0.05379919269952126, (1.2939999999999998, 13.809000000000003, -32.519)), ('A', '  85 ', 'ARG', 0.0, (-2.3629999999999987, 12.755000000000004, -32.454)), ('A', '   1 ', 'GLU', 5.556092114982527e-05, (-6.856, -11.404, 6.009)), ('A', '   7 ', 'GLU', 0.18975389002772827, (-1.2639999999999996, 0.089, -7.938999999999999)), ('A', '  13 ', 'THR', 0.10856137810714951, (-10.578999999999995, 3.627, -13.033)), ('A', '  14 ', 'VAL', 0.28950166951231265, (-9.454999999999995, 0.227, -11.776)), ('A', '  16 ', 'LEU', 0.0060826797371544535, (-10.781999999999998, -5.387, -9.99)), ('A', '  17 ', 'LYS', 0.09924138043890542, (-12.055, -8.95, -10.162)), ('A', '  20 ', 'CYS', 0.012204796803416684, (-16.236, -13.311, -3.630999999999999)), ('A', '  28 ', 'ASN', 0.004640738517778671, (-14.099, 4.814, 1.8789999999999996)), ('A', '  37 ', 'ASN', 0.21056938789071894, (-17.462, -10.68, -10.877999999999997)), ('A', '  41 ', 'LEU', 0.0016034409668687563, (-12.911999999999997, 2.179, -8.507)), ('A', '  45 ', 'SER', 0.022816902578198097, (-4.635, 6.326, -2.328)), ('A', '  56 ', 'THR', 0.008159601566148922, (-13.553999999999998, -14.466, 4.31)), ('A', '  57 ', 'ARG', 0.0, (-11.724, -11.132, 4.264)), ('A', '  59 ', 'THR', 0.060496156729494585, (-8.000999999999998, -6.592, 2.425)), ('A', '  61 ', 'GLN', 0.01809101598178199, (-4.779999999999999, -1.428, -0.612)), ('A', '  62 ', 'LEU', 0.0599093827250016, (-4.768, 1.084, -3.416)), ('A', '  63 ', 'ARG', 0.20084140300628728, (-1.6849999999999996, 3.036, -4.331999999999998)), ('A', '  66 ', 'SER', 0.09384183430005552, (0.9910000000000001, 8.864, -10.128)), ('A', '  67 ', 'VAL', 0.03590438467285434, (-0.672, 12.265, -10.138)), ('A', '  68 ', 'SER', 0.004019992775283754, (-3.6719999999999993, 13.771, -11.896)), ('A', '  70 ', 'LYS', 0.0, (-5.856, 15.870000000000003, -16.249)), ('A', '  74 ', 'ARG', 0.14034151421946575, (-13.241999999999996, 15.753, -9.080999999999996)), ('A', '  79 ', 'GLN', 0.010533616965450415, (-7.889, 22.508000000000006, -8.8)), ('A', '  82 ', 'LEU', 0.0566406611528046, (-9.799999999999997, 29.688, -9.935999999999996)), ('A', '  83 ', 'TYR', 0.104129202728573, (-9.447999999999997, 31.509, -6.605999999999998)), ('A', '   1 ', 'GLU', 0.0039263847999642006, (-8.147999999999996, -11.935, 6.113)), ('A', '   5 ', 'TYR', 0.03201872463675239, (-1.9719999999999998, -4.442, -2.886)), ('A', '  13 ', 'THR', 0.07333649584171895, (-10.879999999999997, 3.45, -12.832)), ('A', '  14 ', 'VAL', 0.19683512122011124, (-9.738, 0.096, -11.498999999999997)), ('A', '  15 ', 'LEU', 0.12066323519930129, (-11.795999999999994, -2.875000000000001, -12.53)), ('A', '  16 ', 'LEU', 0.0020340915168509544, (-11.215999999999996, -5.119, -9.574)), ('A', '  17 ', 'LYS', 0.0, (-12.447999999999999, -8.676, -9.781)), ('A', '  20 ', 'CYS', 0.1916886135831476, (-15.269999999999998, -13.672, -3.816)), ('A', '  29 ', 'SER', 0.0013399975614447612, (-14.125999999999998, 6.076, -1.1479999999999995)), ('A', '  31 ', 'PHE', 0.09626583486311631, (-17.067, 1.957, -5.3)), ('A', '  32 ', 'HIS', 0.27258514782527726, (-19.275999999999996, 0.548, -8.041)), ('A', '  41 ', 'LEU', 0.03679204057522771, (-13.158, 2.094, -8.273)), ('A', '  42 ', 'THR', 0.14626494210276203, (-11.451999999999996, 5.418, -8.81)), ('A', '  45 ', 'SER', 0.013040824903225091, (-3.959, 6.283, -2.503)), ('A', '  56 ', 'THR', 0.0008399720314317935, (-13.589, -14.152, 3.811)), ('A', '  57 ', 'ARG', 0.033320310204892456, (-12.111999999999997, -10.686, 4.351)), ('A', '  59 ', 'THR', 0.006912262669488813, (-8.014, -6.431, 2.503999999999999)), ('A', '  61 ', 'GLN', 0.06976250724353147, (-4.288, -1.673, -0.812)), ('A', '  65 ', 'ARG', 0.0005183063373155546, (0.8039999999999999, 6.202, -9.18)), ('A', '  66 ', 'SER', 0.004019992775283754, (-0.10499999999999994, 9.869, -9.401)), ('A', '  76 ', 'GLU', 0.04641587170532049, (10.703, 3.606, -18.591)), ('A', '  77 ', 'GLU', 0.10974828632415237, (11.540999999999997, 3.097, -14.927)), ('A', '  80 ', 'GLN', 0.1793431179477715, (13.735, 13.350000000000003, -13.904)), ('A', '  84 ', 'SER', 0.1072979170643486, (11.866999999999997, 10.856, -9.861999999999997)), ('A', '  85 ', 'ARG', 0.006444205565418312, (10.300999999999998, 10.017, -6.494999999999998)), ('A', '   3 ', 'TYR', 0.16473375376668267, (-4.3549999999999995, -8.873, 1.199)), ('A', '   5 ', 'TYR', 0.018129738028244934, (-2.7439999999999993, -4.394, -3.309999999999999)), ('A', '  13 ', 'THR', 0.010833611713214193, (-10.519999999999996, 3.781, -13.113)), ('A', '  14 ', 'VAL', 0.16683073325406036, (-9.491999999999996, 0.442, -11.633)), ('A', '  17 ', 'LYS', 0.004299502365937611, (-12.405, -8.633000000000003, -9.348999999999997)), ('A', '  20 ', 'CYS', 0.06712637841701508, (-15.684, -14.088000000000003, -3.673)), ('A', '  22 ', 'SER', 0.005164523077459777, (-20.488999999999997, -11.796, -2.349)), ('A', '  24 ', 'THR', 0.09592917612541668, (-19.605, -6.569, 1.256)), ('A', '  29 ', 'SER', 0.08629936288293387, (-15.249, 5.253, -0.7999999999999998)), ('A', '  31 ', 'PHE', 0.07453411927917863, (-17.030999999999995, 0.679, -4.953)), ('A', '  32 ', 'HIS', 0.07483404710051857, (-18.950999999999993, -0.229, -8.119)), ('A', '  37 ', 'ASN', 0.03497989171651331, (-18.135999999999992, -9.719000000000003, -10.378)), ('A', '  41 ', 'LEU', 0.002323411534370633, (-12.968999999999998, 2.481, -8.554)), ('A', '  42 ', 'THR', 0.2108856657824074, (-11.064, 5.718, -8.971)), ('A', '  45 ', 'SER', 0.003941110372004638, (-4.246000000000001, 6.424, -2.401)), ('A', '  46 ', 'THR', 0.05893452095739419, (-6.711999999999999, 4.634, -0.161)), ('A', '  52 ', 'CYS', 0.2632955079777698, (-17.427, -12.185, 1.366)), ('A', '  56 ', 'THR', 0.0, (-13.495999999999999, -14.228, 4.343)), ('A', '  57 ', 'ARG', 0.0013444859677922251, (-11.880999999999997, -10.812, 4.482)), ('A', '  59 ', 'THR', 0.05736916716389374, (-7.617, -6.321, 2.704)), ('A', '  61 ', 'GLN', 0.06729467943227492, (-4.784, -1.41, -1.049)), ('A', '  62 ', 'LEU', 0.0948113949699537, (-4.7669999999999995, 1.139, -3.8049999999999993)), ('A', '  63 ', 'ARG', 0.036031388622678795, (-1.3249999999999995, 2.334, -4.772)), ('A', '  70 ', 'LYS', 0.1495902454232096, (5.153, 12.975, -14.688)), ('A', '  74 ', 'ARG', 0.0003723892126966781, (10.699999999999994, 12.882, -5.575999999999998)), ('A', '  75 ', 'GLN', 0.0, (11.024999999999995, 12.944, -9.370999999999997)), ('A', '  76 ', 'GLU', 0.05646655135101683, (9.182, 16.179, -10.106999999999996)), ('A', '  78 ', 'VAL', 0.018436362926352184, (10.140999999999995, 13.286, -14.596)), ('A', '  79 ', 'GLN', 0.08023730820601332, (13.436, 14.662, -13.210999999999997)), ('A', '  80 ', 'GLN', 0.04932824966164378, (16.935999999999996, 14.002, -14.653)), ('A', '  83 ', 'TYR', 0.09679543387195369, (18.306, 19.761, -11.476999999999997)), ('A', '  85 ', 'ARG', 0.05047654235617526, (13.739, 18.838, -8.661)), ('A', '   1 ', 'GLU', 0.16750640515073528, (-6.732000000000001, -11.378000000000004, 6.3889999999999985)), ('A', '  13 ', 'THR', 0.008159601566148922, (-10.963999999999997, 3.734, -13.016)), ('A', '  16 ', 'LEU', 0.054138982953551136, (-10.801, -5.249, -10.010999999999996)), ('A', '  17 ', 'LYS', 0.0, (-12.557999999999998, -8.604, -10.018)), ('A', '  18 ', 'GLU', 0.2378383489578714, (-14.704999999999998, -9.711, -7.084)), ('A', '  20 ', 'CYS', 0.201942059479287, (-16.116, -13.484000000000004, -4.07)), ('A', '  29 ', 'SER', 0.004250822925825882, (-14.987999999999998, 5.291000000000002, -1.5579999999999996)), ('A', '  31 ', 'PHE', 0.13570260402315978, (-17.182, 0.609, -5.2)), ('A', '  32 ', 'HIS', 0.043172838716492835, (-19.17, -0.161, -8.33)), ('A', '  34 ', 'LEU', 0.007762046514896777, (-19.675, -4.348, -12.656)), ('A', '  37 ', 'ASN', 0.2887028272993042, (-18.325, -9.632, -11.230999999999996)), ('A', '  41 ', 'LEU', 0.0006083406401570241, (-12.798999999999998, 2.356, -8.473)), ('A', '  42 ', 'THR', 0.05897042899104299, (-11.297999999999998, 5.785, -9.059)), ('A', '  45 ', 'SER', 0.01071998049155809, (-4.48, 6.6800000000000015, -2.1729999999999996)), ('A', '  46 ', 'THR', 0.03604136561926755, (-6.7719999999999985, 4.634, 0.055)), ('A', '  47 ', 'HIS', 0.0060990490684866, (-7.315999999999999, 1.305, 1.7839999999999996)), ('A', '  56 ', 'THR', 0.008159601566148922, (-13.148, -14.691, 4.082)), ('A', '  57 ', 'ARG', 0.0, (-11.715, -11.185, 4.3519999999999985)), ('A', '  59 ', 'THR', 0.06097991672557328, (-8.008, -6.415, 2.413)), ('A', '  61 ', 'GLN', 0.016517247968580444, (-4.929999999999999, -1.27, -0.5999999999999998)), ('A', '  62 ', 'LEU', 0.0, (-4.96, 1.312, -3.326999999999999)), ('A', '  63 ', 'ARG', 0.09591177562559923, (-1.53, 2.56, -4.282)), ('A', '  65 ', 'ARG', 0.028197669022107765, (0.866, 6.077, -8.851999999999997)), ('A', '  66 ', 'SER', 0.0, (0.7419999999999999, 9.791, -9.593999999999996)), ('A', '  73 ', 'ILE', 0.09328996783674445, (-9.029999999999998, 20.579, -16.084999999999994)), ('A', '  76 ', 'GLU', 0.008109241270636261, (-11.139, 18.53, -22.778)), ('A', '  77 ', 'GLU', 0.012885027292271992, (-11.004999999999997, 15.244, -24.68)), ('A', '  78 ', 'VAL', 0.003150532575091347, (-10.998000000000001, 13.588, -21.267)), ('A', '  79 ', 'GLN', 0.042575867987830654, (-14.602000000000002, 14.241, -20.257)), ('A', '  82 ', 'LEU', 0.09162206672399122, (-20.884999999999994, 12.693, -24.619999999999994)), ('A', '  84 ', 'SER', 0.1174797016520217, (-15.164999999999996, 11.632, -27.009)), ('A', '  85 ', 'ARG', 0.0, (-13.578999999999997, 12.666000000000004, -30.289999999999992)), ('A', '   7 ', 'GLU', 0.06237224892476283, (-1.202, -0.189, -8.307)), ('A', '  13 ', 'THR', 0.008159601566148922, (-10.572999999999995, 3.683, -12.855)), ('A', '  14 ', 'VAL', 0.2878427889084889, (-9.350999999999996, 0.327, -11.582)), ('A', '  17 ', 'LYS', 0.0, (-12.617, -8.639, -9.473)), ('A', '  20 ', 'CYS', 0.09560568550452896, (-16.153, -14.058, -3.744999999999999)), ('A', '  24 ', 'THR', 0.0850474466222194, (-19.387, -7.141, 1.512)), ('A', '  29 ', 'SER', 0.01071998049155809, (-14.778, 4.998, -1.683)), ('A', '  32 ', 'HIS', 0.0, (-19.357999999999993, -0.383, -8.115)), ('A', '  37 ', 'ASN', 0.038849676399198646, (-18.24899999999999, -9.744, -10.642)), ('A', '  41 ', 'LEU', 0.00757589565767446, (-12.764, 2.388, -8.382)), ('A', '  42 ', 'THR', 0.08163688999408855, (-10.995999999999997, 5.700000000000002, -8.803)), ('A', '  45 ', 'SER', 0.08767450634477425, (-4.095000000000001, 6.5630000000000015, -2.431)), ('A', '  46 ', 'THR', 0.030454487966453097, (-6.5169999999999995, 4.731000000000002, -0.174)), ('A', '  56 ', 'THR', 0.0013599335943581536, (-13.326999999999998, -14.028, 4.114999999999998)), ('A', '  57 ', 'ARG', 0.08399747193503211, (-11.617, -10.686, 4.661)), ('A', '  59 ', 'THR', 0.028798857454236913, (-7.950999999999999, -6.205, 2.526)), ('A', '  62 ', 'LEU', 0.025265551775253144, (-4.981999999999998, 1.217, -3.69)), ('A', '  63 ', 'ARG', 0.05757126061990939, (-1.4959999999999993, 2.224, -4.692)), ('A', '  65 ', 'ARG', 0.0, (1.545, 6.06, -8.29)), ('A', '  66 ', 'SER', 0.034905176890184145, (0.4999999999999998, 9.722, -8.701)), ('A', '  67 ', 'VAL', 0.2039054048228101, (2.255999999999999, 9.79, -12.098999999999997)), ('A', '  74 ', 'ARG', 0.0, (3.038999999999999, 23.017, -19.249)), ('A', '  75 ', 'GLN', 0.006985004507260157, (1.631, 19.481, -19.592)), ('A', '  77 ', 'GLU', 0.0, (6.098, 14.87, -20.077999999999992)), ('A', '  79 ', 'GLN', 0.10376639120108339, (6.764, 17.046, -14.010999999999996)), ('A', '  80 ', 'GLN', 0.011375313180282006, (5.478999999999999, 15.275, -10.933)), ('A', '  81 ', 'GLU', 0.10550011490696148, (5.281999999999998, 11.501000000000003, -10.34)), ('A', '  82 ', 'LEU', 0.007664709994825307, (5.677, 12.821, -6.8199999999999985)), ('A', '  85 ', 'ARG', 0.18287351296013704, (8.848, 19.019, -6.387)), ('A', '   1 ', 'GLU', 0.01650344194971187, (-7.783, -11.412, 5.754)), ('A', '   6 ', 'GLN', 0.17155162515095437, (-2.977, -2.554, -6.3119999999999985)), ('A', '  13 ', 'THR', 0.017740742381609578, (-10.278999999999996, 3.558, -13.067999999999996)), ('A', '  14 ', 'VAL', 0.2935277255637099, (-9.245999999999997, 0.19, -11.652)), ('A', '  17 ', 'LYS', 0.11258241221850022, (-12.862999999999998, -8.709, -9.755)), ('A', '  25 ', 'TYR', 0.21049659771235213, (-17.56299999999999, -3.7, 1.069)), ('A', '  26 ', 'GLU', 0.025705142110012222, (-15.517, -2.232, 3.924999999999999)), ('A', '  28 ', 'ASN', 0.015292648003164397, (-13.857, 4.302, 2.259)), ('A', '  29 ', 'SER', 0.0, (-14.138, 3.822000000000001, -1.474)), ('A', '  32 ', 'HIS', 0.02590574718081156, (-18.993999999999996, -0.075, -8.184999999999997)), ('A', '  34 ', 'LEU', 0.025145136011623232, (-19.881999999999994, -4.803, -11.929)), ('A', '  41 ', 'LEU', 0.0009691688468130189, (-12.684999999999997, 2.444, -8.57)), ('A', '  42 ', 'THR', 0.14963551919776413, (-10.975, 5.717000000000001, -9.342)), ('A', '  45 ', 'SER', 0.03728911092355546, (-4.311000000000001, 6.549, -2.459)), ('A', '  54 ', 'ASP', 0.002828774267982226, (-18.692, -14.554, 5.0139999999999985)), ('A', '  56 ', 'THR', 0.0027198671887163073, (-13.171000000000001, -14.631, 3.7119999999999993)), ('A', '  59 ', 'THR', 0.03491772320490921, (-7.998999999999997, -6.098000000000002, 2.620999999999999)), ('A', '  61 ', 'GLN', 0.0010988744462357082, (-4.898, -1.268, -0.908)), ('A', '  66 ', 'SER', 0.06354495788127548, (0.3799999999999999, 9.938, -8.884)), ('A', '  70 ', 'LYS', 0.0, (1.1149999999999995, 11.84, -19.98)), ('A', '  71 ', 'LEU', 0.23024946599026017, (-1.064, 14.533, -18.404)), ('A', '  73 ', 'ILE', 0.012198740614787155, (-6.653999999999998, 13.025000000000004, -20.419999999999995)), ('A', '  74 ', 'ARG', 0.0, (-9.902000000000003, 14.335000000000004, -18.954)), ('A', '  78 ', 'VAL', 0.003150532575091347, (-4.029, 20.15, -17.257)), ('A', '  80 ', 'GLN', 0.025653018076909055, (-7.129999999999997, 22.755000000000006, -21.637)), ('A', '  83 ', 'TYR', 0.2638427072687713, (-4.824, 22.7, -27.485999999999994)), ('A', '   5 ', 'TYR', 0.1842255562358174, (-2.5749999999999993, -4.461, -3.209999999999999)), ('A', '  13 ', 'THR', 0.008159601566148922, (-10.658999999999995, 3.783, -13.09)), ('A', '  14 ', 'VAL', 0.12727304549028787, (-9.557999999999995, 0.3510000000000001, -11.887999999999996)), ('A', '  16 ', 'LEU', 0.0, (-10.747999999999998, -4.643, -9.358)), ('A', '  17 ', 'LYS', 0.05990039540554366, (-11.649, -8.323, -9.231)), ('A', '  20 ', 'CYS', 0.20102405101730506, (-15.667999999999997, -13.639, -3.613999999999999)), ('A', '  24 ', 'THR', 0.03710692895628881, (-19.452, -6.222, 1.597)), ('A', '  29 ', 'SER', 0.08095305835812294, (-14.709999999999999, 4.538, -1.6329999999999996)), ('A', '  31 ', 'PHE', 0.23203474324360365, (-17.695999999999998, -0.011, -5.384999999999998)), ('A', '  38 ', 'LYS', 0.1212219505548489, (-15.222999999999999, -6.908, -10.767)), ('A', '  41 ', 'LEU', 0.0011285958765200107, (-13.317999999999998, 2.425, -8.84)), ('A', '  45 ', 'SER', 0.007863761081441321, (-4.198, 6.056, -2.58)), ('A', '  47 ', 'HIS', 0.10913160031340778, (-6.634999999999999, 0.834, 1.77)), ('A', '  48 ', 'PHE', 0.013911996182654998, (-10.031, -0.797, 2.071999999999999)), ('A', '  52 ', 'CYS', 0.2526600353093128, (-17.337999999999997, -12.024, 1.4)), ('A', '  56 ', 'THR', 0.0013599335943581536, (-13.674, -14.369000000000003, 4.374)), ('A', '  57 ', 'ARG', 0.0004394205881680637, (-12.069, -10.933, 4.568999999999998)), ('A', '  59 ', 'THR', 0.0159103411552359, (-7.830999999999999, -6.316000000000002, 2.669)), ('A', '  61 ', 'GLN', 0.03704080214664932, (-4.514999999999999, -1.682, -0.72)), ('A', '  62 ', 'LEU', 0.2551346462058037, (-4.308, 0.809, -3.539)), ('A', '  65 ', 'ARG', 0.013046919105266203, (0.5969999999999998, 6.672, -8.908)), ('A', '  66 ', 'SER', 0.0, (0.315, 10.445, -8.617)), ('A', '  68 ', 'SER', 0.004019992775283754, (0.053, 10.805, -14.951999999999996)), ('A', '  74 ', 'ARG', 0.0, (-0.6479999999999998, 22.856, -23.803)), ('A', '  75 ', 'GLN', 0.0, (-3.0319999999999996, 23.136000000000006, -20.858)), ('A', '  78 ', 'VAL', 0.11024058167156237, (-0.002999999999999999, 21.589000000000006, -16.46099999999999)), ('A', '  79 ', 'GLN', 0.0001494754516771603, (0.154, 23.955, -19.39)), ('A', '  84 ', 'SER', 0.11921327663507726, (0.9039999999999999, 28.345, -23.95)), ('A', '  85 ', 'ARG', 0.0, (-0.2639999999999999, 28.178000000000008, -27.546))]
data['cbeta'] = []
data['probe'] = [(' A  16  LEU  HB3', ' A  39  PHE  CE2', -0.768, (-12.405, -4.834, -7.608)), (' A  10  ARG  HB2', ' A  64  ALA  HB1', -0.646, (-2.681, 8.082, -7.818)), (' A  14  VAL HG13', ' A  43  CYS  SG ', -0.639, (-6.996, 1.783, -11.224)), (' A  29  SER  HB2', ' A  41  LEU HD21', -0.58, (-12.644, 3.059, -3.895)), (' A  32  HIS  O  ', ' A  39  PHE  HA ', -0.556, (-17.151, -2.269, -9.9)), (' A  44  THR  O  ', ' A  62  LEU  HB3', -0.551, (-5.623, 3.444, -4.644)), (' A   3  TYR  HE1', ' A  61  GLN  HG3', -0.528, (-3.551, -2.713, 1.801)), (' A  35  ALA  O  ', ' A  38  LYS  HD2', -0.516, (-16.238, -7.011, -15.521)), (' A  44  THR  HA ', ' A  64  ALA  HB2', -0.484, (-4.562, 7.149, -6.088)), (' A  19  PRO  HD2', ' A  50  PHE  CD2', -0.473, (-14.589, -9.21, -3.432)), (' A   3  TYR  CE1', ' A  61  GLN  HG3', -0.464, (-3.229, -2.907, 1.982)), (' A  68  SER  HB2', ' A  71  LEU  HG ', -0.444, (6.843, 11.376, -9.138)), (' A  79  GLN  O  ', ' A  80  GLN  HB2', -0.44, (3.526, 10.163, 2.689)), (' A  72  PHE  HA ', ' A  76  GLU  O  ', -0.437, (11.238, 9.076, -3.894)), (' A   7  GLU  HG3', ' A  63  ARG  CB ', -0.437, (0.464, 0.81, -6.264)), (' A   8  CYS  SG ', ' A  14  VAL HG13', -0.433, (-6.367, 1.785, -11.414)), (' A  73  ILE  O  ', ' A  74  ARG  HB2', -0.428, (12.461, 13.784, -0.515)), (' A   7  GLU  HG3', ' A  63  ARG  HB2', -0.418, (-0.066, 0.483, -5.944)), (' A  34  LEU  HA ', ' A  34  LEU HD22', -0.417, (-20.052, -2.542, -14.015)), (' A  44  THR  CA ', ' A  64  ALA  HB2', -0.409, (-4.323, 6.67, -5.652)), (' A  10  ARG  HA ', ' A  43  CYS  O  ', -0.406, (-5.597, 7.434, -8.688)), (' A  44  THR  C  ', ' A  64  ALA  HB2', -0.405, (-4.385, 6.331, -4.929)), (' A  14  VAL  O  ', ' A  40  ALA  HA ', -0.4, (-13.034, -0.392, -11.889))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
