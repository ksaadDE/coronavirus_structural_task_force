# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (-38.956, 2.072, -31.354000000000003))]
data['rota'] = [('A', ' 117 ', 'ASN', 0.06565254846360873, (-45.132, 27.35, -26.694)), ('A', ' 240 ', 'LEU', 0.0021548544573921314, (-11.151999999999997, 8.066, -41.015)), ('A', ' 511 ', 'SER', 0.028917353964395723, (-28.349999999999998, 23.575000000000003, -28.41899999999999)), ('B', ' 358 ', 'ILE', 0.29761571192703723, (-33.716, 23.113, 36.932)), ('B', ' 375 ', 'SER', 0.17708105048687384, (-23.929999999999996, 12.487, 18.182999999999996)), ('B', ' 382 ', 'VAL', 0.2885765096848613, (-16.849999999999994, 22.28999999999999, 32.767)), ('B', ' 417 ', 'THR', 0.0013479450899467338, (-28.29099999999998, 32.089, 10.556)), ('B', ' 430 ', 'THR', 0.08371419537962241, (-19.748000000000008, 27.435999999999996, 30.756)), ('B', ' 487 ', 'ASN', 0.011127316076416816, (-38.148, 44.041, -0.394)), ('B', ' 498 ', 'GLN', 0.003213647106959781, (-38.232, 15.139, 4.864))]
data['cbeta'] = []
data['probe'] = [(' A  20  THR  O  ', ' A  24  GLN  HG3', -0.859, (-29.728, 47.986, -1.981)), (' A 390  PHE  HA ', ' A 393  ARG  HD2', -0.678, (-27.389, 25.525, -5.76)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.632, (-26.293, 26.899, 43.48)), (' A 538  PRO  HD2', ' A 541  LYS  HE2', -0.608, (0.018, 2.313, -24.536)), (' A 490  PRO  HA ', ' A 612  PRO  HG2', -0.606, (-28.509, 9.317, -52.728)), (' A  81  GLN  HG3', ' A 101  GLN  HG2', -0.6, (-34.031, 40.72, -14.773)), (' A 419  LYS  HE3', ' A 426  PRO  HA ', -0.576, (-4.093, -9.581, -16.54)), (' A  31  LYS  NZ ', ' A  35  GLU  OE1', -0.572, (-39.981, 33.085, 0.143)), (' A 152  MET  HE1', ' A 165  TRP  HB2', -0.566, (-31.799, 6.143, -44.093)), (' B 369  TYR  CD2', ' B 384  PRO  HB2', -0.56, (-18.778, 14.041, 29.35)), (' A 303  ASP  N  ', ' A 303  ASP  OD1', -0.559, (-23.983, -8.402, -8.008)), (' B 379  CYS  HB2', ' B 384  PRO  HD3', -0.558, (-17.007, 18.609, 28.746)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.555, (-28.578, 31.135, 45.693)), (' A 560  LEU HD22', ' A 564  GLU  HG3', -0.555, (-13.959, 28.595, -9.216)), (' A 188  ASN  O  ', ' A 192  ARG  HG3', -0.54, (-34.428, 37.956, -32.31)), (' B 383  SER  H  ', ' B 387  LEU HD22', -0.539, (-15.679, 19.451, 34.337)), (' A  64  ASN  O  ', ' A  68  LYS  HG3', -0.535, (-47.042, 22.747, -8.821)), (' A  35  GLU  HG2', ' A  72  PHE  CE1', -0.533, (-39.771, 30.302, -3.528)), (' A 305  GLN  NE2', ' A 801  HOH  O  ', -0.528, (-26.57, -1.514, -0.482)), (' B 334  ASN  O  ', ' B 362  VAL  N  ', -0.526, (-32.244, 16.129, 42.972)), (' B 362  VAL HG13', ' B 526  GLY  HA2', -0.525, (-27.549, 14.6, 42.922)), (' A 524  GLN  HG2', ' A 583  PRO  HG2', -0.513, (-6.354, 19.122, -24.128)), (' A 574  VAL HG23', ' A 576  ALA  H  ', -0.512, (-5.559, 24.398, -19.121)), (' A 247  LYS  HB2', ' A 282  THR HG22', -0.511, (-15.226, 0.161, -43.833)), (' A 278  LEU  O  ', ' A 282  THR  OG1', -0.503, (-16.96, -0.02, -39.148)), (' A  81  GLN HE22', ' A 104  GLY  HA2', -0.503, (-37.027, 38.95, -17.317)), (' A 174  LYS  NZ ', ' A 496  THR  OG1', -0.497, (-41.764, 18.192, -50.151)), (' B 403  ARG  HG3', ' B 406  GLU  HG3', -0.496, (-28.607, 23.081, 9.422)), (' A 555  PHE  O  ', ' A 559  ARG  HG2', -0.493, (-13.065, 21.18, -6.446)), (' A 379  ILE  O  ', ' A 383  MET  HG3', -0.487, (-21.964, 13.911, -5.882)), (' A 346  PRO  HB3', ' A 360  MET  HG3', -0.485, (-28.212, 4.364, -15.594)), (' B 383  SER  O  ', ' B 387  LEU  HB2', -0.483, (-17.352, 17.383, 34.206)), (' A 435  GLU  OE2', ' A 541  LYS  HD3', -0.479, (-2.756, -0.532, -25.58)), (' B 391  CYS  HA ', ' B 525  CYS  HA ', -0.477, (-23.911, 21.003, 42.695)), (' B 382  VAL HG11', ' B 515  PHE  HE2', -0.476, (-21.256, 21.215, 32.513)), (' A 269  ASP  OD1', ' A 272  GLY  N  ', -0.472, (-26.615, 8.873, -38.436)), (' A  33  ASN  O  ', ' A  37  GLU  HG3', -0.468, (-32.829, 27.482, -1.85)), (' A 170  SER  O  ', ' A 174  LYS  HD2', -0.468, (-42.953, 14.49, -47.171)), (' B 362  VAL HG13', ' B 527  PRO  HD2', -0.465, (-27.124, 14.857, 44.117)), (' A  55  THR  O  ', ' A  59  VAL HG23', -0.462, (-48.897, 8.877, -13.455)), (' A 144  LEU  HA ', ' A 148  LEU  HB2', -0.461, (-38.083, 5.421, -36.403)), (' A 239  HIS  CE1', ' A 596  LYS  HG2', -0.456, (-3.48, 9.591, -43.766)), (' A 103  ASN  O  ', ' A 107  VAL HG13', -0.453, (-36.765, 38.074, -21.181)), (' A 294  THR HG23', ' A 365  THR  HA ', -0.45, (-22.845, -7.977, -18.905)), (' B 350  VAL HG22', ' B 422  ASN  HB3', -0.447, (-32.619, 29.231, 16.597)), (' B 493  GLN  HG3', ' B 494  SER  N  ', -0.445, (-38.38, 28.227, 6.376)), (' A  82  MET  SD ', ' B 486  PHE  CE2', -0.444, (-38.984, 44.967, -7.705)), (' A 597  ASP  O  ', ' A 600  LYS  HG2', -0.443, (-1.326, 2.486, -46.998)), (' A 465  LYS  HB3', ' A 467  GLU  HG3', -0.438, (-26.273, 34.495, -40.622)), (' A  82  MET  HB2', ' B 486  PHE  CE2', -0.436, (-37.321, 44.985, -7.836)), (' A 233  ILE HD13', ' A 450  LEU HD13', -0.433, (-13.282, 16.94, -33.343)), (' B 357  ARG  HD2', ' B 396  TYR  HE1', -0.427, (-33.742, 29.311, 36.169)), (' B 517  LEU  HA ', ' B 517  LEU HD12', -0.418, (-23.317, 28.773, 40.698)), (' B 502  GLY  O  ', ' B 506  GLN  HG3', -0.418, (-30.611, 14.531, 6.542)), (' A 392  LEU HD13', ' A 563  SER  HA ', -0.416, (-20.571, 31.034, -8.842)), (' A 450  LEU  HB2', ' A 451  PRO  HD3', -0.416, (-15.723, 15.155, -36.092)), (' B 498 BGLN  HB2', ' B 498 BGLN HE21', -0.415, (-38.242, 16.886, 2.657)), (' A 535  HIS  CD2', ' A 542  CYS  HB2', -0.414, (-2.501, 6.94, -19.225)), (' A  82  MET  SD ', ' B 486  PHE  CD2', -0.405, (-39.415, 44.546, -7.054)), (' B 439  ASN  O  ', ' B 443  SER  HB2', -0.405, (-37.456, 11.76, 10.171)), (' A 524  GLN  HB3', ' A 574  VAL HG11', -0.402, (-7.88, 19.783, -20.72))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
