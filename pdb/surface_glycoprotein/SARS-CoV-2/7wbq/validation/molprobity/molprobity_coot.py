# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (-8.055770000000003, 14.42553, 58.79336000000001)), ('C', ' 146 ', 'PRO', None, (23.93913, 45.44564, -9.04504))]
data['rota'] = [('C', ' 133 ', 'CYS', 0.08968208249933622, (10.96564, 45.55528, -7.093660000000001)), ('D', ' 498 ', 'GLN', 0.1503973441384233, (58.021375, 38.06757, 8.38016))]
data['cbeta'] = []
data['probe'] = [(' C 198  ASP  OD2', ' C 201  ASP  N  ', -0.84, (32.097, 70.893, 12.592)), (' C 323  MET  HE1', ' C 379  ILE HG21', -0.79, (55.239, 50.285, -5.776)), (' C 261  CYS  HB2', ' C 488  VAL  HB ', -0.723, (15.803, 71.746, -10.966)), (' A 438  PHE  CD2', ' A 540  HIS  HE1', -0.72, (10.853, 3.583, 36.814)), (' A 438  PHE  CD2', ' A 540  HIS  CE1', -0.688, (10.757, 4.181, 36.291)), (' C 132  VAL HG11', ' C 167  SER  HB3', -0.679, (11.639, 51.643, -6.277)), (' B 383  SER  H  ', ' B 387  LEU HD22', -0.624, (64.894, 28.576, 61.133)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.615, (71.054, 45.081, 72.583)), (' C 335  ASP  HB2', ' C 361  CYS  HB3', -0.604, (41.908, 39.522, -12.354)), (' B 383  SER  O  ', ' B 387  LEU  HB2', -0.596, (64.217, 27.518, 63.291)), (' C 470  LYS  HA ', ' C 473  TRP  CD1', -0.593, (15.175, 68.689, 10.251)), (' A 248  LEU HD12', ' A 262  LEU HD22', -0.591, (-11.344, 9.386, 34.64)), (' A 144  LEU HD21', ' A 271  TRP  CH2', -0.59, (-6.827, 19.614, 50.878)), (' A 133  CYS  HA ', ' A 141  CYS  HA ', -0.584, (-18.693, 16.396, 59.751)), (' A 233  ILE HG12', ' A 581  VAL HG21', -0.582, (5.871, 19.102, 28.827)), (' B 362  VAL HG13', ' B 526  GLY  HA2', -0.579, (66.595, 29.027, 76.058)), (' A 524  GLN  HG2', ' A 583  PRO  HG2', -0.578, (15.471, 19.814, 29.925)), (' C 116  LEU HD22', ' C 186  LEU  HB3', -0.572, (26.39, 58.815, 18.495)), (' C 294  THR HG23', ' C 365  THR  HA ', -0.567, (42.996, 48.143, -23.259)), (' A 144  LEU HD21', ' A 271  TRP  CZ2', -0.565, (-6.961, 20.321, 50.988)), (' D 362  VAL HG13', ' D 526  GLY  HA2', -0.563, (98.448, 31.682, 6.657)), (' B 379  CYS  HB2', ' B 384  PRO  HD3', -0.557, (58.431, 28.089, 60.94)), (' D 379  CYS  HB2', ' D 384  PRO  HD3', -0.556, (90.198, 46.365, 3.894)), (' A 492  PRO  HD3', ' A 613  TYR  HB2', -0.547, (-24.56, 19.32, 37.052)), (' C 144  LEU  HB2', ' C 168  TRP  CZ3', -0.544, (20.451, 50.69, -4.145)), (' A 312  GLU  OE2', ' A 322  ASN  HB2', -0.543, (30.191, 13.778, 55.25)), (' C 198  ASP  OD1', ' C 465  LYS  HG3', -0.542, (29.495, 73.498, 13.449)), (' B 411  ALA  HB3', ' B 414  GLN  HG3', -0.541, (48.95, 35.75, 54.881)), (' A 169  ARG HH22', ' A 271  TRP  HA ', -0.54, (-10.813, 19.543, 44.26)), (' C 249  MET  HG2', ' C 256  ILE  HB ', -0.534, (15.487, 70.531, -21.942)), (' A 256  ILE HD11', ' A 266  LEU HD23', -0.533, (-14.488, 7.902, 36.805)), (' D 379  CYS  HB3', ' D 382  VAL HG13', -0.531, (91.099, 45.94, 6.707)), (' B 403  ARG  HG2', ' B 495  TYR  HE1', -0.528, (36.225, 36.88, 62.786)), (' A  90  ASN  OD1', ' A  92  THR HG22', -0.521, (28.548, 44.008, 41.739)), (' A  55  THR  O  ', ' A  59  VAL HG23', -0.52, (6.115, 26.932, 72.499)), (' C 144  LEU  HB2', ' C 168  TRP  CH2', -0.518, (20.844, 51.162, -3.684)), (' B 438  SER  HB3', ' B 509  ARG  HG3', -0.518, (40.833, 30.925, 71.395)), (' A 271  TRP  NE1', ' A 502  SER  O  ', -0.518, (-9.084, 22.56, 48.366)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.516, (68.897, 40.499, 71.418)), (' A 490  PRO  HA ', ' A 612  PRO  HG2', -0.514, (-20.101, 15.816, 36.818)), (' C 168  TRP  CD1', ' C 502  SER  HB2', -0.512, (19.479, 56.663, -2.304)), (' A 233  ILE  CG1', ' A 581  VAL HG21', -0.512, (5.872, 19.105, 28.572)), (' C 574  VAL HG23', ' C 576  ALA  H  ', -0.511, (52.893, 76.635, -3.354)), (' B 456  PHE  HB3', ' B 473  TYR  CD2', -0.51, (34.699, 53.234, 57.872)), (' A 152  MET  HE2', ' A 270  MET  HA ', -0.502, (-11.418, 15.302, 45.995)), (' A 477  TRP  CZ3', ' A 500  PRO  HB3', -0.502, (-9.061, 28.437, 40.226)), (' C 233  ILE HG12', ' C 581  VAL HG21', -0.502, (37.24, 76.257, -8.803)), (' A 309  LYS  HD2', ' A 328  TRP  CH2', -0.5, (26.25, 9.86, 58.449)), (' C 535  HIS  CD2', ' C 542  CYS  HB2', -0.499, (52.195, 70.743, -20.263)), (' C 168  TRP  NE1', ' C 502  SER  HB2', -0.495, (19.675, 56.438, -2.101)), (' C 168  TRP  HE1', ' C 502  SER  HB2', -0.489, (20.198, 56.011, -1.788)), (' C 457  GLU  HG2', ' C 513  ILE  HB ', -0.488, (33.414, 68.454, 3.291)), (' C 144  LEU  HA ', ' C 148  LEU  HB2', -0.488, (20.727, 50.363, -7.46)), (' C 133  CYS  HA ', ' C 141  CYS  HA ', -0.488, (12.626, 44.567, -7.882)), (' C 181  GLU  HG2', ' C 473  TRP  CH2', -0.488, (18.143, 64.936, 12.314)), (' C 318  VAL  HB ', ' C 551  GLY  HA3', -0.487, (60.39, 63.462, -10.823)), (' A 168  TRP  CZ3', ' A 172  VAL HG21', -0.487, (-12.845, 23.019, 54.007)), (' C  90  ASN  OD1', ' C  92  THR HG22', -0.486, (59.689, 66.734, 17.334)), (' A 499  ASP  N  ', ' A 500  PRO  HD2', -0.484, (-13.35, 28.585, 42.995)), (' D 338  PHE  HE2', ' D 363  ALA  HB1', -0.48, (92.41, 33.938, 8.298)), (' A 187  LYS  HD2', ' A 199  TYR  CZ ', -0.479, (-0.324, 39.841, 46.301)), (' A 581  VAL HG23', ' A 584  LEU HD23', -0.474, (7.777, 18.434, 30.112)), (' F   1  NAG  H62', ' F   2  FUL  H2 ', -0.472, (47.084, 23.155, 82.714)), (' C 318  VAL HG23', ' C 320  LEU  HG ', -0.472, (60.371, 60.33, -9.572)), (' A 169  ARG  NH2', ' A 271  TRP  HA ', -0.47, (-10.308, 19.943, 44.097)), (' B 453  TYR  HD2', ' B 495  TYR  CZ ', -0.469, (35.545, 40.062, 63.922)), (' C  54  ILE HD11', ' C 341  LYS  HB3', -0.469, (36.624, 34.602, -4.911)), (' D 502  GLY  O  ', ' D 506  GLN  HG3', -0.469, (63.803, 42.578, 3.898)), (' A 574  VAL HG23', ' A 576  ALA  H  ', -0.467, (21.12, 24.248, 29.51)), (' C 170  SER  O  ', ' C 174  LYS  HB2', -0.465, (10.952, 55.697, 2.344)), (' C 492  PRO  HD3', ' C 613  TYR  CD1', -0.465, (7.243, 68.095, -7.347)), (' D 439  ASN  O  ', ' D 443  SER  HB2', -0.463, (64.638, 34.435, 5.242)), (' C  72  PHE  O  ', ' C  76  GLN  HG2', -0.462, (47.724, 48.963, 21.869)), (' C  48  TRP  CE2', ' C  52  THR HG21', -0.459, (47.628, 39.011, -2.743)), (' C 223  ILE HG12', ' C 461  TRP  CZ3', -0.458, (32.905, 74.446, 5.815)), (' C 450  LEU  HB2', ' C 451  PRO  HD3', -0.457, (32.315, 71.334, -9.16)), (' C 477  TRP  CZ3', ' C 500  PRO  HB3', -0.455, (22.37, 64.94, 1.754)), (' B 386  LYS  HD3', ' B 388  ASN HD21', -0.455, (64.973, 23.215, 70.003)), (' C 156  LEU HD21', ' C 281  LEU HD21', -0.455, (21.79, 58.581, -23.165)), (' C 309  LYS  HD2', ' C 328  TRP  CH2', -0.454, (57.962, 45.322, -14.249)), (' A 284  PRO  HD3', ' A 440  LEU HD22', -0.45, (0.326, 1.726, 35.713)), (' D 350  VAL HG22', ' D 422  ASN  HB3', -0.45, (73.728, 44.425, 19.545)), (' C 232  GLU  HB2', ' C 581  VAL HG11', -0.449, (38.276, 79.307, -8.19)), (' A  85  LEU  HA ', ' A  88  ILE HD13', -0.446, (21.068, 52.001, 42.996)), (' A 419  LYS  HG2', ' A 424  LEU  HB3', -0.446, (19.531, -3.864, 43.734)), (' C 460  ARG  NH2', ' C 512  PHE  HB2', -0.445, (30.573, 63.415, 3.37)), (' A 270  MET  HB2', ' A 270  MET  HE2', -0.443, (-10.876, 16.155, 49.099)), (' A 438  PHE  HD2', ' A 540  HIS  CE1', -0.443, (10.678, 3.932, 36.28)), (' A 438  PHE  CE2', ' A 540  HIS  CE1', -0.443, (11.78, 4.393, 36.712)), (' D 399  SER  HA ', ' D 510  VAL  O  ', -0.441, (78.856, 38.186, 12.896)), (' B 338  PHE  HE2', ' B 363  ALA  HB1', -0.44, (60.583, 30.707, 74.108)), (' C 557  MET  HG2', ' C 569  ALA  HB1', -0.439, (53.658, 67.717, 1.352)), (' B 502  GLY  O  ', ' B 506  GLN  HG3', -0.436, (32.433, 27.661, 63.784)), (' A 157  ASP  HB3', ' A 160  GLU  HB3', -0.436, (-18.302, 6.659, 47.779)), (' C 312  GLU  HG3', ' C 323  MET  HG2', -0.436, (58.721, 50.331, -10.572)), (' B 435  ALA  HA ', ' B 509  ARG  O  ', -0.433, (45.421, 30.925, 67.818)), (' A 127  TYR  HE1', ' A 502  SER  O  ', -0.428, (-8.474, 23.689, 49.865)), (' A 245  ARG  HA ', ' A 262  LEU HD21', -0.425, (-10.586, 8.597, 32.513)), (' B 456  PHE  HB3', ' B 473  TYR  CE2', -0.424, (34.993, 52.685, 57.69)), (' A 389  PRO  O  ', ' A 393  ARG  HG3', -0.424, (24.409, 35.187, 50.784)), (' A 315  PHE  O  ', ' A 318  VAL HG22', -0.423, (28.787, 13.746, 45.656)), (' A 151  ILE  O  ', ' A 155  SER  HB3', -0.422, (-12.897, 8.07, 48.85)), (' A 460  ARG  NH1', ' A 506  VAL  HA ', -0.421, (-3.27, 31.064, 45.185)), (' A 431  ASP  OD1', ' A 433  GLU  HB2', -0.42, (7.82, -6.509, 33.496)), (' C 284  PRO  HB2', ' C 285  PHE  CD1', -0.42, (32.936, 68.496, -29.489)), (' C  54  ILE  O  ', ' C  54  ILE HG13', -0.417, (37.464, 32.794, -1.862)), (' A 455  MET  HE3', ' A 480  MET  HB2', -0.417, (-9.631, 26.9, 33.91)), (' A  58  ASN  HA ', ' A  61  ASN  HB2', -0.416, (10.78, 30.193, 72.817)), (' A  50  TYR  CE1', ' A  59  VAL HG22', -0.415, (5.249, 26.456, 69.507)), (' A  53  ASN  O  ', ' A  55  THR HG23', -0.414, (9.571, 23.4, 73.162)), (' A 267  LEU  HA ', ' A 278  LEU HD11', -0.413, (-8.381, 10.596, 39.465)), (' C  34  HIS  ND1', ' D 453  TYR  OH ', -0.412, (62.195, 47.275, 17.899)), (' D 401  VAL HG22', ' D 509  ARG  HG2', -0.411, (72.955, 36.308, 10.598)), (' C 126  ILE  O  ', ' C 130  GLY  N  ', -0.41, (19.172, 47.933, 1.729)), (' C 472  GLN  O  ', ' C 476  LYS  HB2', -0.41, (16.199, 72.196, 5.116)), (' D 520  ALA  HB1', ' D 521  PRO  HD2', -0.408, (103.075, 37.105, 23.408)), (' D 364  ASP  OD2', ' D 367  VAL HG23', -0.408, (92.987, 31.636, 0.645)), (' C 239  HIS  CE1', ' C 596  LYS  HG2', -0.407, (30.664, 81.182, -21.18)), (' A 184  VAL HG22', ' A 464  PHE  HE1', -0.404, (-6.811, 38.145, 43.18)), (' C 461  TRP  O  ', ' C 465  LYS  HB2', -0.404, (27.053, 72.718, 10.778)), (' A 514  ARG  HG2', ' A 515  TYR  N  ', -0.403, (5.79, 25.7, 41.833)), (' A 265  HIS  CE1', ' A 490  PRO  HB3', -0.403, (-18.525, 14.228, 39.921)), (' A 439  LEU HD11', ' A 540  HIS  CG ', -0.402, (11.996, 4.753, 33.791)), (' A 457  GLU  HG2', ' A 513  ILE  HB ', -0.402, (2.031, 30.554, 37.922)), (' C 482  ARG  HE ', ' C 488  VAL HG23', -0.401, (14.074, 72.279, -7.683)), (' A 294  THR HG23', ' A 365  THR  HA ', -0.4, (10.823, 1.015, 54.785)), (' B 484  GLU  H  ', ' B 484  GLU  HG2', -0.4, (26.724, 56.786, 66.237))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
