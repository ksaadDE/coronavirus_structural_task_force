# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('L', '  92 ', 'ASN', 0.00028258199999999997, (-54.691, 3.801, 6.887))]
data['omega'] = [('H', ' 151 ', 'PRO', None, (-28.261999999999997, 4.522, -21.442)), ('H', ' 153 ', 'PRO', None, (-25.852, 1.352, -16.652)), ('L', '   8 ', 'PRO', None, (-32.557, 12.129, 13.198)), ('L', ' 140 ', 'PRO', None, (-16.287, 14.306, 8.82))]
data['rota'] = [('E', ' 373 ', 'SER', 0.0026948249014124293, (-74.56899999999999, 18.271, 18.745)), ('H', ' 131 ', 'SER', 0.0578799658553563, (-1.0199999999999994, 18.712, -11.878)), ('H', ' 182 ', 'LEU', 0.034634196394155096, (-19.496999999999993, 10.214, -13.958)), ('H', ' 216 ', 'GLU', 0.11288722823497663, (-0.8249999999999988, 11.502, -18.134)), ('L', '   2 ', 'ILE', 0.14467373157355884, (-50.667, 13.914999999999996, 8.734)), ('L', '  30 ', 'SER', 0.14557894673688104, (-51.885, 5.995, 18.085)), ('L', '  31 ', 'SER', 0.1621277895961597, (-50.036, 2.959, 16.939)), ('L', '  90 ', 'HIS', 0.006493516377457432, (-47.656, 5.6930000000000005, 8.864)), ('L', '  92 ', 'ASN', 0.21786771409701497, (-54.691, 3.801, 6.887))]
data['cbeta'] = [('E', ' 403 ', 'ARG', ' ', 0.2799074245274761, (-60.84599999999999, 5.953, 14.138000000000002)), ('H', ' 182 ', 'LEU', ' ', 0.271386544403975, (-19.951, 8.802, -13.564)), ('L', '   2 ', 'ILE', ' ', 0.29938985314796235, (-50.818, 12.602999999999996, 9.387)), ('L', '  92 ', 'ASN', ' ', 0.5791462061718307, (-55.38699999999999, 4.037, 8.203)), ('L', '  99 ', 'LEU', ' ', 0.2614770472356171, (-37.232, 11.998999999999999, 4.646))]
data['probe'] = [(' E 391  CYS  SG ', ' E 525  CYS  SG ', -1.327, (-96.63, 6.914, 7.88)), (' E 379  CYS  SG ', ' E 432  CYS  SG ', -1.24, (-82.736, 11.921, 7.859)), (' L 107  ARG  NH1', ' L 108  THR  O  ', -0.915, (-12.46, 11.328, 10.781)), (' E 379  CYS  SG ', ' E 432  CYS  CB ', -0.907, (-80.373, 10.591, 7.308)), (' E 391  CYS  CB ', ' E 525  CYS  SG ', -0.852, (-96.057, 7.394, 7.901)), (' E 427  ASP  OD1', ' E 701  HOH  O  ', -0.841, (-72.772, 1.778, -2.465)), (' E 334  ASN HD22', ' E 335  LEU  H  ', -0.773, (-94.969, 7.219, 22.98)), (' E 371  SER  OG ', ' E 373  SER  OG ', -0.75, (-77.908, 17.312, 19.657)), (' H 203  ASN HD21', ' H 205  LYS  HE3', -0.708, (-19.075, -4.571, -20.303)), (' E 340  GLU  OE2', ' E 356  LYS  NZ ', -0.685, (-84.019, 0.129, 22.876)), (' L 209  ASN  OD1', ' L 301  HOH  O  ', -0.672, (-4.464, 30.968, -11.625)), (' H  32  ASN  HB2', ' H  34  MET  HE1', -0.67, (-51.827, -11.034, -0.699)), (' E 393  THR  O  ', ' E 523  THR  OG1', -0.659, (-93.462, 0.435, 10.353)), (' E 474  GLN  O  ', ' E 702  HOH  O  ', -0.657, (-57.606, -16.941, 3.505)), (' L 183  ALA  O  ', ' L 187  LYS  HG3', -0.64, (-16.126, 32.851, -23.986)), (' H 102  TYR  OH ', ' H 301  HOH  O  ', -0.638, (-54.379, -9.22, 14.586)), (' E 383  SER  HB2', ' E 386  LYS  HB2', -0.623, (-86.845, 16.933, 2.912)), (' L 187  LYS  O  ', ' L 188  HIS  ND1', -0.622, (-15.207, 35.102, -17.966)), (' E 448  ASN  O  ', ' E 703  HOH  O  ', -0.604, (-59.752, 0.661, 21.933)), (' E 382  VAL HG12', ' E 383  SER  N  ', -0.596, (-86.07, 14.769, 1.702)), (' E 357  ARG  NH2', ' E 394  ASN  ND2', -0.592, (-89.916, -4.981, 10.956)), (' H  33  TYR  HB2', ' H  98  ASP  O  ', -0.563, (-51.358, -6.665, 3.073)), (' H  99  ARG  HB2', ' H 103  GLY  O  ', -0.562, (-47.861, -6.828, 6.861)), (' E 395  VAL HG22', ' E 515  PHE  HD1', -0.555, (-87.343, 5.136, 8.668)), (' H 203  ASN  ND2', ' H 205  LYS  HE3', -0.552, (-19.166, -4.23, -19.848)), (' L 187  LYS  O  ', ' L 188  HIS  CG ', -0.545, (-14.803, 34.683, -18.628)), (' E 357  ARG  NH2', ' E 394  ASN HD21', -0.54, (-90.49, -4.417, 11.361)), (' E 334  ASN HD22', ' E 335  LEU  N  ', -0.531, (-94.541, 6.964, 22.485)), (' E 394  ASN  O  ', ' E 516  GLU  HB3', -0.512, (-88.134, 0.474, 7.259)), (' E 334  ASN  ND2', ' E 335  LEU  H  ', -0.505, (-94.205, 6.62, 23.178)), (' E 493  GLN HE21', ' E 494  SER  H  ', -0.498, (-56.559, -4.39, 17.535)), (' H   4  LEU HD22', ' H  22  CYS  SG ', -0.486, (-45.272, -10.109, -5.672)), (' L 189  LYS  HD2', ' L 209  ASN  HB3', -0.481, (-4.897, 32.165, -16.022)), (' H 138  GLY  O  ', ' H 189  PRO  HA ', -0.471, (2.256, 9.843, -3.981)), (' L   6  GLN  NE2', ' L  86  TYR  O  ', -0.466, (-35.411, 6.681, 8.907)), (' E 369  TYR  CD1', ' E 369  TYR  O  ', -0.465, (-80.367, 18.978, 12.496)), (' E 403  ARG HH11', ' L  92  ASN  HB3', -0.462, (-56.726, 4.932, 8.532)), (' E 382  VAL  CG1', ' E 383  SER  N  ', -0.459, (-85.811, 14.419, 1.462)), (' L 123  GLN  HG2', ' L 128  THR  O  ', -0.451, (-15.453, 20.249, -23.162)), (' H  34  MET  HB2', ' H  34  MET  HE2', -0.447, (-52.233, -7.929, -2.684)), (' E 369  TYR  CG ', ' E 369  TYR  O  ', -0.443, (-80.863, 18.885, 12.492)), (' L  19  VAL HG22', ' L  75  ILE  HB ', -0.435, (-29.398, 1.283, 17.235)), (' E 365  TYR  HB2', ' E 387  LEU  CD1', -0.433, (-87.002, 13.694, 10.654)), (' L  21  ILE  O  ', ' L  72  THR  HA ', -0.43, (-37.136, 6.869, 17.142)), (' L  21  ILE HG12', ' L 101  THR HG21', -0.427, (-31.877, 7.434, 12.664)), (' E 384  PRO  HA ', ' E 387  LEU  HG ', -0.421, (-84.931, 14.793, 7.253)), (' L   4  LEU HD13', ' L  88  CYS  SG ', -0.42, (-42.222, 8.321, 9.835)), (' L  89  LEU  C  ', ' L  89  LEU HD23', -0.418, (-46.174, 3.511, 8.027)), (' L 165  GLN  HG3', ' L 172  TYR  CE2', -0.417, (-19.666, 7.953, 4.86)), (' E 444  LYS  HA ', ' E 444  LYS  HD3', -0.411, (-60.142, 6.766, 29.434)), (' H  64  LYS  HB2', ' H  64  LYS  HE2', -0.41, (-53.355, 10.084, -6.607)), (' H  59  TYR  O  ', ' H  64  LYS  NZ ', -0.408, (-54.055, 8.513, -4.07)), (' E 339  GLY  O  ', ' E 343  ASN  HB2', -0.407, (-80.088, 7.815, 24.884)), (' L 179  THR  O  ', ' L 180  LEU HD12', -0.404, (-20.168, 25.957, -16.464)), (' H 102  TYR  HA ', ' L  49  TYR  CD1', -0.403, (-48.104, -5.405, 12.43))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
