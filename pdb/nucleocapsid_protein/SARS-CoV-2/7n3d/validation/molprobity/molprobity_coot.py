# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', '  62 ', 'GLU', 0.0243436137091297, (30.906619999999997, -7.98874, 53.38205))]
data['omega'] = [('H', ' 156 ', 'PRO', None, (-24.93584, -2.070869999999999, 18.06836)), ('H', ' 158 ', 'PRO', None, (-19.078729999999993, -3.77389, 17.26811)), ('H', ' 158 ', 'PRO', None, (-19.078729999999993, -3.77389, 17.26811)), ('L', '   8 ', 'PRO', None, (5.69321, 14.31053, 15.3794)), ('L', '  95 ', 'PRO', None, (-1.9747400000000006, 9.39191, 37.95493)), ('L', ' 141 ', 'PRO', None, (-0.8901999999999999, 7.53161, -3.22779))]
data['rota'] = [('H', '  54 ', 'SER', 0.004539026129676096, (-5.342519999999999, -8.77822, 47.3459)), ('H', ' 114 ', 'GLN', 0.0, (-8.16226, -7.73186, 22.94408)), ('H', ' 158 ', 'PRO', 0.1340711469183042, (-18.49537, -4.08354, 15.95752)), ('H', ' 159 ', 'VAL', 0.2317217600680575, (-18.98252, -6.66164, 13.23763)), ('H', ' 187 ', 'LEU', 0.05491207755081679, (-19.82757999999999, -2.09912, 6.464)), ('H', ' 200 ', 'THR', 0.09023794675159913, (-14.975319999999996, -22.54158, -9.22736)), ('H', ' 223 ', 'LYS', 0.009801630160459313, (-24.178189999999994, -12.51234, -11.7779)), ('L', ' 105 ', 'GLU', 0.030125050663469863, (2.60436, 5.35597, 7.2614)), ('L', ' 152 ', 'ASN', 0.20136033931406408, (-25.08362, 12.53908, -15.00091)), ('L', ' 165 ', 'GLU', 0.0024655127244902226, (-5.3038799999999995, 0.48441, 6.83979)), ('L', ' 202 ', 'SER', 0.14750698636174553, (-3.578050000000003, 10.802640000000004, -15.9626)), ('C', '  49 ', 'THR', 0.0573976990001248, (17.329739999999997, 16.27463, 55.30519)), ('C', ' 131 ', 'ILE', 0.23348203533915102, (21.918819999999997, -1.68038, 47.45522))]
data['cbeta'] = []
data['probe'] = [(' H 201  GLN  NE2', ' H 403  HOH  O  ', -0.598, (-11.161, -23.323, -4.893)), (' H  11 BLEU HD21', ' H 121  SER  HB3', -0.555, (-26.385, 2.501, 22.113)), (' H 172  VAL HG22', ' H 191  VAL HG22', -0.539, (-11.096, -11.325, 1.138)), (' H 139  SER  HA ', ' L 116  PHE  HD2', -0.513, (-14.469, -5.12, -10.737)), (' L  65 ASER  OG ', ' L  72 ATHR  OG1', -0.501, (15.83, 9.504, 21.475)), (' C  52  TRP  CE3', ' C 302  EDO  H22', -0.482, (9.183, 9.994, 58.242)), (' C 142  PRO  HG2', ' L  92  TYR  CE2', -0.474, (9.87, 9.683, 39.083)), (' H 192  THR HG21', ' L 137  ASN  ND2', -0.457, (-8.38, -5.994, -5.421)), (' H  11 BLEU  CD2', ' H 121  SER  HB3', -0.443, (-25.874, 2.079, 22.626)), (' C  55  ALA  HB2', ' C 109  TYR  CE2', -0.44, (21.897, 5.704, 59.728)), (' C 167  LEU  HA ', ' C 167  LEU HD23', -0.434, (20.364, -8.971, 56.938)), (' H 159 BVAL  CG2', ' H 187  LEU HD13', -0.429, (-18.767, -4.907, 10.253)), (' L 147  GLN  NE2', ' L 510  HOH  O  ', -0.425, (-15.714, 14.194, -9.78)), (' L 165 BGLU  OE1', ' L 501  HOH  O  ', -0.423, (-5.826, -3.047, 8.823)), (' C  61 BLYS  O  ', ' C  62 BGLU  HB2', -0.411, (30.389, -9.032, 55.137)), (' L 100 AGLN  HB2', ' L 580  HOH  O  ', -0.408, (-0.56, 13.833, 21.576)), (' H  47  TRP  CE3', ' L  96  PRO  HD2', -0.403, (-3.189, 5.703, 36.246)), (' L  63 ASER  O  ', ' L  73  LEU HD12', -0.4, (12.253, 3.554, 19.477)), (' C  61 ALYS  HA ', ' C  61 ALYS  HD3', -0.4, (34.377, -5.414, 56.742))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
