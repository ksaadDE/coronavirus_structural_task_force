# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B  46  SER  HA ', ' B 279  TYR  O  ', -0.657, (231.748, 183.315, 216.556)), (' C  46  SER  HA ', ' C 279  TYR  O  ', -0.638, (198.43, 234.67, 218.477)), (' A 105  ILE  HB ', ' A 239  GLN  HB2', -0.628, (170.224, 157.936, 247.611)), (' C  51  THR  O  ', ' C 274  THR  HA ', -0.625, (186.817, 226.915, 227.461)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.614, (225.882, 178.669, 260.736)), (' B 393  THR  HB ', ' B 522  ALA  HA ', -0.611, (203.836, 231.333, 245.15)), (' B 901  GLN HE21', ' B 905  ARG HH21', -0.602, (207.954, 185.666, 171.061)), (' C 393  THR  HB ', ' C 522  ALA  HA ', -0.58, (170.305, 187.742, 245.095)), (' A 127  VAL HG21', ' A1302  NAG  H62', -0.564, (156.897, 165.639, 252.496)), (' B  26  PRO  HB3', ' B  65  PHE  HE1', -0.564, (253.357, 204.546, 239.23)), (' A  94  SER  HB2', ' A 190  ARG  HB2', -0.563, (162.532, 160.328, 234.225)), (' B 319  ARG  NH2', ' B 590  CYS  O  ', -0.561, (219.386, 220.496, 222.545)), (' B 821  LEU HD11', ' B 939  SER  HB2', -0.56, (227.444, 183.774, 187.789)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.552, (162.557, 252.573, 240.317)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.542, (248.146, 180.063, 253.994)), (' C 143  VAL  HA ', ' C 154  GLU  HA ', -0.542, (181.542, 262.832, 249.902)), (' C 418  ILE  HA ', ' C 422  ASN HD22', -0.541, (194.542, 180.469, 261.102)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.534, (229.275, 165.703, 284.208)), (' A 570  ALA  HB1', ' B 963  VAL HG11', -0.534, (215.477, 184.503, 219.516)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.534, (235.718, 187.361, 245.828)), (' B 762  GLN  OE1', ' B 765  ARG  NH1', -0.533, (189.527, 188.484, 214.436)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.531, (171.883, 184.474, 187.307)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.53, (261.986, 205.325, 242.919)), (' B 518  LEU HD21', ' B 546  LEU HD13', -0.53, (207.447, 224.792, 236.087)), (' C 821  LEU HD11', ' C 939  SER  HB3', -0.523, (199.857, 231.955, 187.33)), (' B 418  ILE  HA ', ' B 422  ASN HD22', -0.521, (184.99, 213.491, 261.868)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.52, (170.604, 141.533, 239.306)), (' C 142  GLY  HA3', ' C 156  GLU  HB3', -0.512, (177.802, 260.418, 251.853)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.512, (166.229, 151.083, 231.53)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.512, (177.357, 229.343, 218.492)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.511, (229.202, 217.174, 189.122)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.51, (256.687, 197.301, 233.694)), (' C 323  THR  OG1', ' C 324  GLU  OE1', -0.51, (161.614, 211.262, 232.402)), (' B 105  ILE  O  ', ' B 238  PHE  HA ', -0.507, (244.742, 196.29, 247.898)), (' C  48  LEU  HB3', ' C 276  LEU HD11', -0.505, (192.171, 227.89, 219.095)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.504, (234.534, 198.956, 217.937)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.503, (234.057, 205.456, 208.436)), (' B 193  VAL HG23', ' B 223  LEU HD22', -0.503, (241.027, 190.756, 233.415)), (' B 424  LYS  NZ ', ' B 425  LEU  O  ', -0.5, (189.392, 213.374, 250.544)), (' B 533  LEU HD21', ' B 585  LEU HD11', -0.497, (218.555, 236.209, 232.998)), (' C 278  LYS  HE3', ' C 287  ASP  HB2', -0.496, (191.334, 236.512, 217.53)), (' C 127  VAL HG21', ' C1302  NAG  H62', -0.494, (189.899, 251.65, 254.501)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.493, (162.316, 171.517, 247.207)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.493, (183.92, 166.433, 217.539)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.492, (170.673, 145.571, 238.39)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.492, (236.133, 204.284, 218.381)), (' C 377  PHE  HE2', ' C 384  PRO  HB3', -0.492, (181.043, 200.819, 254.949)), (' B1040  VAL HG21', ' C1035  GLY  HA3', -0.491, (207.514, 206.408, 175.049)), (' A 895  GLN  NE2', ' C1074  ASN  OD1', -0.487, (176.215, 211.892, 163.064)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.486, (166.569, 250.727, 239.866)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.485, (219.534, 191.193, 168.307)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.484, (213.37, 193.229, 143.814)), (' C 226  LEU  HG ', ' C 227  VAL HG23', -0.484, (193.262, 243.519, 241.841)), (' B 317  ASN  ND2', ' C 737  ASP  OD2', -0.483, (218.161, 211.796, 219.899)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.483, (189.845, 190.567, 174.96)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.482, (258.606, 203.326, 241.613)), (' C  27  ALA  HB3', ' C  64  TRP  HB3', -0.482, (168.482, 247.51, 231.956)), (' C  93  ALA  HB3', ' C 266  TYR  HB2', -0.477, (177.404, 245.387, 232.824)), (' B  93  ALA  HB3', ' B 266  TYR  HB2', -0.475, (249.769, 195.645, 233.09)), (' C 360  ASN  H  ', ' C 523  THR  HB ', -0.474, (166.6, 187.288, 249.989)), (' C 916  LEU HD22', ' C 923  ILE HD13', -0.472, (199.394, 219.65, 163.652)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.47, (182.579, 229.878, 218.353)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.468, (194.925, 231.656, 232.084)), (' C 926  GLN  NE2', ' Q   1  NAG  O6 ', -0.468, (191.709, 225.21, 166.941)), (' B  36  VAL HG23', ' B 222  ALA  HA ', -0.468, (239.867, 189.159, 226.37)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.467, (186.351, 168.122, 208.191)), (' B 360  ASN  H  ', ' B 523  THR  HB ', -0.463, (205.091, 234.514, 250.534)), (' B1048  HIS  HA ', ' B1066  THR HG22', -0.463, (212.823, 196.066, 175.426)), (' C 724  THR HG23', ' C 934  ILE HD12', -0.462, (197.282, 222.821, 182.873)), (' B 377  PHE  HE2', ' B 384  PRO  HB3', -0.462, (209.643, 214.931, 254.924)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.462, (199.01, 166.288, 188.937)), (' B 724  THR HG23', ' B 934  ILE HD12', -0.461, (220.806, 190.896, 183.16)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.461, (180.893, 170.348, 217.636)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.461, (181.011, 226.12, 201.701)), (' B  46  SER  CA ', ' B 279  TYR  O  ', -0.46, (230.989, 182.689, 216.862)), (' A1035  GLY  HA3', ' C1040  VAL HG21', -0.458, (190.415, 203.407, 174.957)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.457, (172.259, 149.595, 230.858)), (' C  46  SER  CA ', ' C 279  TYR  O  ', -0.454, (199.145, 234.18, 218.71)), (' B 125  ASN HD22', ' B 171  VAL HG13', -0.454, (246.342, 177.172, 250.544)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.453, (181.401, 186.159, 182.905)), (' A 175  PHE  O  ', ' A 207  HIS  NE2', -0.453, (158.033, 166.926, 236.129)), (' A 374  PHE  HA ', ' A 436  TRP  HB3', -0.451, (217.911, 166.498, 272.177)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.45, (196.754, 213.252, 175.07)), (' A 164  ASN  OD1', ' A 165  ASN  N  ', -0.45, (169.522, 165.573, 263.332)), (' B 191  GLU  O  ', ' B 205  SER  HA ', -0.449, (244.133, 187.385, 234.769)), (' A 139  PRO  HB3', ' A 159  VAL  HA ', -0.448, (165.471, 154.49, 252.412)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.448, (187.863, 191.88, 143.987)), (' A  46  SER  HA ', ' A 279  TYR  O  ', -0.447, (168.883, 182.066, 217.725)), (' A 192  PHE  HA ', ' A 204  TYR  O  ', -0.446, (166.776, 167.901, 235.698)), (' A  14  GLN  HB3', ' A 158  ARG  HE ', -0.446, (160.232, 148.902, 258.254)), (' A 566  GLY  N  ', ' A 575  ALA  O  ', -0.444, (223.876, 176.566, 227.247)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.443, (172.63, 180.684, 230.929)), (' B 434  ILE  O  ', ' B 510  VAL  HA ', -0.443, (199.95, 216.502, 262.897)), (' A1040  VAL HG21', ' B1035  GLY  HA3', -0.442, (201.249, 190.148, 175.226)), (' B 127  VAL HG22', ' B 171  VAL HG22', -0.44, (245.708, 179.178, 252.101)), (' C 599  THR  HB ', ' C 608  VAL HG12', -0.44, (178.177, 226.787, 208.614)), (' B 132  GLU  OE1', ' B 165  ASN  ND2', -0.438, (237.597, 191.985, 264.819)), (' B  52  GLN  OE1', ' B 274  THR  OG1', -0.438, (227.131, 199.97, 226.663)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.438, (201.936, 211.797, 262.589)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.437, (215.16, 171.3, 274.369)), (' C 195  LYS  O  ', ' C 201  PHE  HA ', -0.437, (187.021, 234.355, 243.87)), (' C 985  ASP  N  ', ' C 985  ASP  OD1', -0.436, (209.677, 210.694, 245.989)), (' B 866  THR  H  ', ' B 869  MET  HE3', -0.435, (205.489, 173.767, 195.104)), (' C 128  ILE HD13', ' C 170  TYR  HD2', -0.435, (192.991, 244.464, 248.981)), (' C  36  VAL HG13', ' C 222  ALA  HA ', -0.435, (188.644, 239.752, 227.399)), (' B  27  ALA  HB3', ' B  64  TRP  HB3', -0.434, (255.042, 202.953, 233.621)), (' A 193  VAL  HB ', ' A 204  TYR  HB2', -0.434, (169.728, 170.105, 234.842)), (' B 276  LEU  HB3', ' B 289  VAL  HB ', -0.434, (232.535, 195.546, 219.039)), (' C 189  LEU  HB2', ' C 210  ILE HD13', -0.428, (182.677, 251.572, 228.909)), (' C 434  ILE  O  ', ' C 510  VAL  HA ', -0.428, (184.715, 191.436, 262.669)), (' B  94  SER  HB3', ' B 190  ARG  HB2', -0.427, (251.114, 188.676, 235.876)), (' B  39  PRO  HG2', ' B  51  THR HG21', -0.426, (230.321, 190.747, 227.854)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.426, (199.49, 214.363, 144.041)), (' A 996  LEU  HA ', ' A 996  LEU HD23', -0.424, (188.625, 197.982, 230.958)), (' A  37  TYR  OH ', ' A  54  LEU  O  ', -0.424, (176.688, 171.815, 233.67)), (' C 197  ILE  O  ', ' C 200  TYR  HB2', -0.423, (189.798, 229.536, 244.867)), (' A 903  ALA  HB2', ' A 916  LEU HD12', -0.423, (183.431, 194.851, 161.217)), (' A1074  ASN  OD1', ' B 895  GLN  NE2', -0.423, (201.851, 173.191, 163.299)), (' A  48  LEU  HB3', ' A 276  LEU HD11', -0.423, (177.478, 179.571, 218.446)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.422, (185.703, 171.0, 201.369)), (' C 156  GLU  OE2', ' C 246  ARG  NH2', -0.422, (172.85, 260.329, 254.038)), (' A 478  THR  OG1', ' A 487  ASN  ND2', -0.42, (227.637, 194.388, 302.23)), (' B  97  LYS  HG2', ' B 186  PHE  HD1', -0.42, (260.801, 189.375, 233.828)), (' C 331  ASN  HB3', ' C 580  GLN HE21', -0.419, (157.175, 196.542, 245.429)), (' A 934  ILE  HA ', ' A 934  ILE HD13', -0.419, (179.519, 184.171, 182.442)), (' A 156  GLU  OE2', ' A 158  ARG  NH1', -0.418, (157.862, 147.722, 254.304)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.418, (217.445, 189.515, 176.187)), (' A1029  MET  HB2', ' A1029  MET  HE2', -0.417, (185.88, 201.135, 185.74)), (' C 144  TYR  N  ', ' C 153  MET  O  ', -0.417, (180.438, 265.255, 249.687)), (' C  48  LEU HD23', ' C 276  LEU HD21', -0.415, (190.584, 228.573, 217.54)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.415, (199.713, 220.554, 176.083)), (' B 934  ILE  HA ', ' B 934  ILE HD13', -0.415, (223.741, 190.345, 182.815)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.415, (188.061, 195.508, 262.42)), (' B  48  LEU HD23', ' B 276  LEU HD21', -0.414, (229.931, 192.986, 216.202)), (' A 125  ASN HD22', ' A 171  VAL HG13', -0.414, (155.2, 169.598, 250.312)), (' C 156  GLU  OE2', ' C 158  ARG  NH1', -0.413, (174.015, 259.658, 255.77)), (' B 722  VAL  HA ', ' B1064  HIS  O  ', -0.413, (217.654, 192.355, 177.87)), (' B 144  TYR  O  ', ' B 153  MET  N  ', -0.413, (266.438, 181.155, 249.24)), (' C 555  SER  HB3', ' C 586  ASP  HB2', -0.413, (160.514, 194.845, 225.368)), (' A 598  ILE HG23', ' A 664  ILE HG21', -0.412, (191.313, 170.9, 203.156)), (' A 528  LYS  HA ', ' A 528  LYS  HD3', -0.412, (218.283, 171.597, 247.263)), (' A 189  LEU  HB3', ' A 208  THR  HB ', -0.412, (161.119, 162.658, 227.601)), (' A 722  VAL  HA ', ' A1064  HIS  O  ', -0.411, (184.334, 188.424, 177.486)), (' B 885  GLY  HA2', ' B 901  GLN  NE2', -0.411, (207.46, 184.161, 170.808)), (' A 278  LYS  HB2', ' A 278  LYS  HE3', -0.41, (173.045, 176.781, 216.278)), (' B1086  LYS  HB2', ' B1086  LYS  HE2', -0.41, (202.369, 215.221, 142.604)), (' B 417  LYS  HA ', ' B 417  LYS  HD2', -0.41, (183.169, 208.826, 260.519)), (' A  93  ALA  HB3', ' A 266  TYR  HB2', -0.409, (169.415, 157.957, 231.587)), (' C 913  GLN  H  ', ' C 913  GLN  HG2', -0.409, (201.337, 211.121, 158.168)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.409, (182.121, 190.032, 175.894)), (' B  48  LEU  HB3', ' B 276  LEU HD11', -0.408, (228.54, 191.729, 217.848)), (' B 995  ARG  NH2', ' C 994  ASP  OD2', -0.408, (206.165, 200.396, 234.348)), (' B1139  ASP  HB3', ' B1142  GLN  HB2', -0.408, (206.42, 206.461, 135.83)), (' C1086  LYS  HB2', ' C1086  LYS  HE2', -0.408, (185.649, 193.982, 142.328)), (' B 192  PHE  HA ', ' B 204  TYR  O  ', -0.407, (242.454, 188.331, 236.337)), (' C  52  GLN  HB2', ' C 274  THR HG22', -0.407, (186.404, 223.542, 228.288)), (' B  39  PRO  HG3', ' B  55  PHE  HZ ', -0.406, (231.952, 191.432, 229.122)), (' C1139  ASP  HB3', ' C1142  GLN  HB2', -0.406, (191.342, 201.83, 135.663)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.405, (225.636, 170.085, 277.622)), (' B 322  PRO  HG3', ' B 549  THR HG21', -0.405, (221.757, 220.779, 230.497)), (' C 996  LEU  HA ', ' C 996  LEU HD23', -0.405, (203.117, 209.956, 230.833)), (' B 717  ASN  ND2', ' B1071  GLN  OE1', -0.404, (226.785, 198.97, 164.12)), (' B 189  LEU  HB3', ' B 208  THR  HB ', -0.403, (250.781, 186.767, 228.841)), (' A 776  LYS  NZ ', ' A 780  GLU  OE2', -0.402, (190.893, 210.662, 193.566)), (' A1139  ASP  HB3', ' A1142  GLN  HB2', -0.402, (202.948, 191.128, 135.77)), (' B 598  ILE HG23', ' B 664  ILE HG21', -0.401, (229.319, 208.06, 203.231)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.401, (173.224, 251.453, 232.984)), (' C 532  ASN  OD1', ' C 533  LEU  N  ', -0.4, (155.291, 203.542, 236.886)), (' A  97  LYS  HG2', ' A 186  PHE  HD1', -0.4, (157.474, 151.98, 230.806)), (' A 907  ASN HD21', ' A 913  GLN  HG3', -0.4, (189.632, 197.311, 158.539))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
