# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', ' 155 ', 'PRO', 0.17813436732726823, (27.808, 3.8059999999999983, -15.512999999999998))]
data['omega'] = [('A', ' 108 ', 'PRO', None, (3.116999999999997, -39.972999999999985, -56.312999999999995)), ('A', ' 153 ', 'PRO', None, (-17.582, -19.396999999999984, -53.35900000000001)), ('A', ' 155 ', 'PRO', None, (-13.900000000000002, -22.839999999999986, -56.989)), ('B', '   8 ', 'PRO', None, (15.832999999999988, -17.614, -65.005)), ('B', ' 141 ', 'PRO', None, (0.755, -11.41099999999999, -80.273)), ('H', ' 155 ', 'PRO', None, (29.06, 4.560999999999997, -15.447999999999999)), ('H', ' 157 ', 'PRO', None, (27.171, 1.055, -10.733)), ('L', '   8 ', 'PRO', None, (1.9079999999999997, -18.296, -13.334)), ('L', ' 142 ', 'PRO', None, (-1.7429999999999988, 0.6709999999999999, -3.461))]
data['rota'] = [('H', '  22 ', 'CYS', 0.2531905574163923, (35.497, -15.278, -7.6209999999999996)), ('H', ' 217 ', 'LYS', 0.2583940891730927, (27.143999999999988, 16.971, 0.718)), ('L', '   1 ', 'ASP', 0.14495185106404399, (17.200000000000017, -26.888999999999985, -26.117)), ('L', '  14 ', 'SER', 0.2900997618768172, (-1.4629999999999992, -11.194999999999997, 0.6849999999999999)), ('L', ' 182 ', 'LEU', 0.2597056972341752, (14.235999999999997, 21.547999999999984, -17.408999999999995)), ('A', ' 185 ', 'SER', 0.14502660943339324, (-17.199, -17.50899999999999, -69.609)), ('B', '  34 ', 'LEU', 0.06859737872036199, (17.880999999999993, -31.897000000000002, -55.99700000000001)), ('B', '  48 ', 'LEU', 0.11858987673273053, (10.356, -34.25899999999996, -63.761))]
data['cbeta'] = []
data['probe'] = [(' E 340  GLU  OE1', ' E 356  LYS  NZ ', -0.685, (37.785, -52.648, -27.843)), (' E 417  LYS  NZ ', ' E 704  GOL  O2 ', -0.668, (14.601, -37.011, -44.252)), (' A  82  MET  HB3', ' A  85  LEU HD21', -0.629, (-6.558, -24.482, -42.36)), (' E 412  PRO  HG3', ' E 429  PHE  HB3', -0.618, (18.431, -39.688, -23.664)), (' B  81  PRO  HA ', ' B 106  ILE HD13', -0.615, (4.963, -24.337, -76.765)), (' A 123  LYS  NZ ', ' A 402  SO4  O1 ', -0.597, (-27.774, -17.351, -56.91)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.59, (28.214, -33.939, -32.406)), (' E 455  LEU HD22', ' E 493  GLN  HG3', -0.564, (16.424, -43.363, -49.483)), (' H  83  MET  HB3', ' H  86  LEU HD21', -0.554, (33.911, -11.206, -22.118)), (' L 146  LYS  HB3', ' L 198  THR  HB ', -0.547, (-3.699, 10.284, -10.359)), (' A  34  MET  HB3', ' A  78  LEU HD22', -0.54, (-0.522, -38.264, -47.417)), (' H  77  ASN  ND2', ' H 402  HOH  O  ', -0.538, (40.409, -20.919, 0.237)), (' L  39  LYS  HG3', ' L  42  LYS  HE2', -0.525, (17.695, -11.524, -1.956)), (' H  67  ARG  NH1', ' H  90  ASP  OD2', -0.521, (30.728, -11.259, -26.164)), (' A 125  PRO  HB3', ' A 151  TYR  HB3', -0.518, (-21.565, -19.207, -60.249)), (' H 134  PRO  HG3', ' H 146  LEU HD23', -0.515, (15.232, 18.375, 5.855)), (' H  34  MET  HB3', ' H  79  LEU HD22', -0.514, (33.332, -21.482, -10.321)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.507, (12.724, -18.929, -3.653)), (' A  11  LEU  HB2', ' A 153  PRO  HG3', -0.498, (-16.243, -20.698, -50.639)), (' A  19  ARG  NE ', ' A 507  HOH  O  ', -0.484, (-10.078, -34.655, -39.333)), (' A  22  CYS  HB3', ' A  78  LEU  HB3', -0.479, (-4.186, -37.744, -47.78)), (' L 147  VAL HG21', ' L 176  LEU HD22', -0.479, (4.972, 9.954, -8.988)), (' B  62  ARG  HB2', ' B  77  SER  O  ', -0.474, (13.75, -31.707, -75.69)), (' H 208  HIS  CD2', ' H 210  PRO  HD2', -0.468, (30.495, 4.323, -10.501)), (' B  10  THR HG22', ' B 103  LYS  HB3', -0.468, (7.692, -16.904, -66.248)), (' B 185  ASP  HA ', ' B 188  LYS  HD3', -0.462, (-30.889, 2.692, -70.153)), (' B  93  ASP  OD1', ' B  94  THR  N  ', -0.454, (16.803, -29.036, -44.534)), (' H  12  VAL HG21', ' H  86  LEU HD12', -0.452, (35.355, -6.631, -22.569)), (' A  29  VAL HG13', ' A  34  MET  HG3', -0.452, (-0.454, -41.4, -46.55)), (' L 187  TYR  O  ', ' L 193  TYR  OH ', -0.45, (10.782, 28.089, -13.484)), (' H 131  PRO  HD3', ' H 217  LYS  HD3', -0.45, (24.477, 19.825, -2.45)), (' E 342  PHE  CE1', ' E 368  LEU HD11', -0.442, (35.658, -41.396, -25.852)), (' A 207  LYS  HB3', ' A 401  PEG  H42', -0.442, (-16.856, -29.197, -54.135)), (' E 497  PHE  CE2', ' E 507  PRO  HB3', -0.442, (29.408, -39.156, -43.857)), (' E 409  GLN HE22', ' E 704  GOL  H11', -0.441, (16.728, -36.677, -40.014)), (' E 379  CYS  SG ', ' E 384  PRO  HG3', -0.439, (28.515, -34.217, -20.157)), (' H  97  ALA  HB1', ' H 108  PHE  HB3', -0.437, (25.318, -21.671, -8.824)), (' H  12  VAL HG11', ' H  86  LEU HD13', -0.435, (33.658, -6.663, -21.582)), (' B  84  PHE  HB2', ' B 106  ILE HD12', -0.429, (4.512, -23.221, -73.945)), (' H  36  TRP  CE2', ' H  81  LEU  HB2', -0.425, (33.844, -16.754, -14.427)), (' L 114  PRO  HB3', ' L 140  PHE  HB3', -0.421, (1.609, 6.489, -1.119)), (' L   4  MET  HE1', ' L  25  ALA  HB2', -0.419, (10.732, -28.217, -17.552)), (' H 167  LEU HD21', ' H 190  VAL HG21', -0.416, (17.646, 9.677, 7.26)), (' B 183  LYS  O  ', ' B 187  GLU  HG2', -0.414, (-33.219, -2.806, -70.587)), (' E 396  TYR  HB2', ' E 514  SER  HB2', -0.413, (25.208, -47.607, -23.124)), (' L 121  PRO  HD3', ' L 133  VAL HG22', -0.411, (12.581, 22.573, -9.388)), (' A 155  PRO  HA ', ' A 404   CL CL  ', -0.409, (-13.833, -21.788, -59.898)), (' E 392  PHE  CD1', ' E 515  PHE  HB3', -0.408, (26.083, -45.525, -15.756)), (' B   2  VAL HG23', ' E 703  GOL  H12', -0.408, (20.79, -25.559, -45.59)), (' E 384  PRO  HG2', ' L  95  LEU HD21', -0.408, (29.339, -31.787, -19.492)), (' A  50  VAL HG21', ' A  99  GLU  HG3', -0.403, (7.544, -35.979, -45.47))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
