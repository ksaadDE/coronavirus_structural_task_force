# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 141 ', 'LYS', 0.013707620609820673, (82.53762999999996, -21.05966000000001, 53.72321)), ('A', ' 210 ', 'ASN', 0.040063377834224576, (72.76682, -29.51308000000001, 17.48285)), ('B', '  88 ', 'GLY', 0.007597799448677074, (104.87885, -2.645539999999999, 6.93434))]
data['omega'] = []
data['rota'] = [('A', ' 296 ', 'VAL', 0.19454815457431018, (87.34699000000003, 8.48174, 29.36848))]
data['cbeta'] = [('A', ' 138 ', 'ASN', ' ', 0.27821937005795905, (91.13916999999998, -16.96840000000001, 48.57353000000002)), ('A', ' 142 ', 'GLU', ' ', 0.3534992126415801, (78.56416999999998, -23.78182, 52.22545000000001)), ('A', ' 238 ', 'GLN', ' ', 0.27323092105592517, (95.53372999999993, -45.66476, 35.47926))]
data['probe'] = [(' A 238  GLN  CB ', ' A 238  GLN  CG ', -1.593, (96.639, -46.356, 34.388)), (' A 142  GLU  CB ', ' A 142  GLU  CG ', -1.542, (77.786, -24.59, 52.096)), (' A 284  GLU  CB ', ' A 284  GLU  CG ', -1.537, (71.879, -11.711, 8.167)), (' A 704  YG4  C1 ', ' A 704  YG4  O3 ', -1.187, (91.318, -28.303, 46.643)), (' A  11  MET  HE1', ' A 847  HOH  O  ', -1.111, (75.371, -37.312, 36.812)), (' A 141  LYS  HG3', ' A 142  GLU  H  ', -0.938, (79.816, -20.736, 52.86)), (' B  27  TYR  N  ', ' B 301  HOH  O  ', -0.872, (121.494, -7.748, 16.182)), (' B  85  ASN  OD1', ' B  86  PRO  HD2', -0.771, (108.233, -2.928, 1.703)), (' A 238  GLN  CB ', ' A 238  GLN  CD ', -0.754, (96.515, -46.983, 35.043)), (' B  24  ALA  O  ', ' B 301  HOH  O  ', -0.746, (121.772, -8.155, 14.82)), (' B  25  LYS  HG2', ' B  25  LYS  O  ', -0.713, (124.685, -5.437, 14.476)), (' A 227  ASN  HB3', ' A 847  HOH  O  ', -0.707, (74.967, -37.444, 37.953)), (' A 141  LYS  HG3', ' A 142  GLU  N  ', -0.658, (80.346, -21.579, 53.329)), (' A 214  LYS  HB2', ' A 215  PRO  HD2', -0.64, (60.998, -24.704, 23.849)), (' A 238  GLN  CA ', ' A 238  GLN  CG ', -0.63, (95.989, -44.786, 34.545)), (' A 141  LYS  CG ', ' A 142  GLU  H  ', -0.624, (80.265, -20.833, 53.355)), (' A 142  GLU  CB ', ' A 142  GLU  CD ', -0.619, (77.392, -24.969, 52.552)), (' A 227  ASN  CB ', ' A 847  HOH  O  ', -0.617, (74.952, -36.716, 38.121)), (' A  99  ASP  OD1', ' A 100  LEU  N  ', -0.574, (92.66, -11.441, 28.332)), (' A 141  LYS  NZ ', ' A 142  GLU  HG3', -0.568, (77.438, -22.541, 54.57)), (' A 140  THR  O  ', ' A 141  LYS  HB2', -0.529, (82.888, -18.984, 53.876)), (' A 284  GLU  CB ', ' A 284  GLU  CD ', -0.525, (72.764, -12.554, 8.373)), (' A 261  SER  O  ', ' A 262  LEU HD23', -0.516, (63.589, -19.016, 4.46)), (' A 238  GLN  CB ', ' A 238  GLN  OE1', -0.51, (96.046, -47.256, 35.788)), (' B  39  THR  O  ', ' B  40  ASN  HB2', -0.481, (110.335, -17.9, 24.154)), (' B  87  LYS  O  ', ' B  89  PHE  N  ', -0.47, (104.39, -3.959, 4.876)), (' B  85  ASN  OD1', ' B  86  PRO  CD ', -0.461, (107.932, -1.768, 2.065)), (' B  58  THR  OG1', ' B  59  PRO  HD2', -0.46, (99.629, -28.498, 8.502)), (' A 141  LYS  CG ', ' A 142  GLU  N  ', -0.46, (80.47, -21.506, 53.418)), (' A 260  MET  CE ', ' A 262  LEU HD11', -0.457, (63.947, -23.242, 4.981)), (' A 142  GLU  CA ', ' A 142  GLU  CG ', -0.452, (79.406, -23.912, 53.186)), (' A   6  GLN  HB3', ' A   7  PRO  HD2', -0.448, (89.995, -43.071, 23.502)), (' B 130  CYS  O  ', ' B 131  ASP  OD1', -0.431, (122.087, -24.559, -11.17)), (' B  85  ASN  HB3', ' B  88  GLY  HA2', -0.415, (106.552, -2.716, 5.833)), (' B  85  ASN HD22', ' B  89  PHE  H  ', -0.409, (106.087, -4.989, 4.821)), (' A  74  SER  OG ', ' A  76  LYS  HG3', -0.408, (102.438, -17.579, 27.139)), (' A 170  LYS  HG2', ' A 171  ILE  N  ', -0.408, (86.472, -25.948, 33.103)), (' B  36  GLN  HA ', ' B  37  PRO  HD3', -0.405, (122.458, -18.338, 24.886)), (' A  11  MET  HA ', ' A  12  PRO  HD3', -0.402, (80.984, -41.248, 32.965)), (' A 133  ASP  HA ', ' A 134  PRO  HD3', -0.401, (90.169, -15.18, 37.413))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
