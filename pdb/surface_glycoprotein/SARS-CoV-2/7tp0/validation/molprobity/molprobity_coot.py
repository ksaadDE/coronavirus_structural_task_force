# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  67 ', 'ALA', 0.04087504000690459, (220.964, 151.688, 131.62599999999998)), ('A', ' 214 ', 'ARG', 0.0449745319590424, (219.243, 154.14799999999994, 144.12299999999996)), ('A', ' 487 ', 'ASN', 0.03652809071808076, (120.37199999999997, 152.653, 110.925)), ('A', ' 521 ', 'PRO', 0.07099652234788692, (159.83199999999997, 125.838, 134.419)), ('A', ' 571 ', 'ASP', 0.030780869651774005, (161.248, 138.374, 148.052)), ('A', ' 621 ', 'PRO', 0.00904105, (190.836, 133.282, 156.433)), ('A', ' 625 ', 'HIS', 0.021492085796488175, (188.06899999999996, 133.625, 148.57099999999997)), ('A', ' 631 ', 'PRO', 0.0, (196.19, 144.589, 151.62)), ('A', ' 632 ', 'THR', 0.0006986698439731988, (192.842, 145.756, 153.27199999999996)), ('A', ' 634 ', 'ARG', 0.011194301718447684, (195.186, 140.321, 154.20299999999997)), ('A', '1083 ', 'HIS', 0.04200525159444969, (169.249, 143.463, 234.71099999999998)), ('B', '  98 ', 'SER', 0.011210754601905463, (133.009, 103.05200000000004, 140.364)), ('B', ' 571 ', 'ASP', 0.042168656953587916, (140.297, 173.806, 149.557)), ('B', ' 604 ', 'THR', 0.016980344084248027, (139.132, 131.125, 175.82799999999995)), ('B', ' 621 ', 'PRO', 0.035423348232689646, (122.30100000000006, 148.71099999999998, 160.127)), ('B', ' 622 ', 'VAL', 0.0412676481454959, (124.34600000000006, 145.809, 158.605)), ('B', '1041 ', 'ASP', 0.028590384281148663, (155.097, 154.527, 197.65599999999998)), ('B', '1145 ', 'LEU', 0.024417279107914084, (162.062, 161.046, 249.039)), ('C', ' 110 ', 'LEU', 0.034477868385939074, (144.285, 207.69799999999998, 122.51999999999998)), ('C', ' 457 ', 'ARG', 0.004970108830174338, (184.273, 141.96999999999997, 113.58399999999999)), ('C', ' 487 ', 'ASN', 0.0419212469980228, (183.544, 133.207, 107.99299999999997)), ('C', ' 604 ', 'THR', 0.035123355385560884, (148.45, 198.208, 174.99)), ('C', ' 637 ', 'SER', 0.014628925219294884, (162.68, 202.811, 161.59199999999998))]
data['omega'] = [('A', ' 627 ', 'ASP', None, (190.823, 136.931, 146.762)), ('A', ' 631 ', 'PRO', None, (195.945, 143.427, 150.76499999999996)), ('C', ' 392 ', 'PHE', None, (183.783, 178.033, 127.85))]
data['rota'] = [('A', ' 132 ', 'GLU', 0.0, (201.703, 154.351, 112.173)), ('A', ' 134 ', 'GLN', 0.1266755343159216, (208.383, 153.70499999999996, 113.18699999999998)), ('A', ' 234 ', 'ASN', 0.06238409826414132, (193.805, 153.521, 123.71799999999998)), ('A', ' 294 ', 'ASP', 0.15717803490410662, (194.962, 147.92199999999994, 155.85)), ('A', ' 366 ', 'SER', 0.10608042085639975, (169.231, 139.68299999999994, 117.525)), ('A', ' 410 ', 'ILE', 0.24955274374127864, (149.532, 149.14799999999994, 118.69899999999998)), ('A', ' 422 ', 'ASN', 0.12680261022746622, (139.244, 144.969, 117.12099999999998)), ('A', ' 458 ', 'LYS', 0.07106525963336195, (128.498, 146.901, 121.86799999999998)), ('A', ' 461 ', 'LEU', 0.21548275990894636, (137.666, 145.644, 122.90699999999997)), ('A', ' 468 ', 'ILE', 0.18924780651856127, (134.379, 137.62599999999995, 114.48599999999999)), ('A', ' 523 ', 'THR', 0.18551900304374794, (160.568, 126.606, 127.673)), ('A', ' 578 ', 'ASP', 0.22886262956356937, (168.134, 123.09500000000003, 139.033)), ('A', ' 608 ', 'VAL', 0.13970985889121001, (195.754, 147.013, 165.605)), ('A', ' 631 ', 'PRO', 0.00102640639620825, (196.19, 144.589, 151.62)), ('A', ' 632 ', 'THR', 0.15919419160023485, (192.842, 145.756, 153.27199999999996)), ('A', ' 638 ', 'THR', 0.05737904262103951, (194.521, 134.68199999999996, 157.334)), ('A', ' 760 ', 'CYS', 0.04881918721366674, (159.911, 176.013, 156.05599999999998)), ('A', ' 779 ', 'GLN', 0.004002180828641994, (167.077, 179.912, 184.62)), ('A', ' 868 ', 'GLU', 0.14992121475784193, (179.15, 186.82299999999995, 184.50199999999998)), ('A', ' 886 ', 'TRP', 0.005448106821859255, (169.473, 175.364, 205.145)), ('A', ' 907 ', 'ASN', 0.10479278733900164, (173.644, 165.72399999999993, 213.90499999999994)), ('A', '1081 ', 'ILE', 0.2655212976916218, (170.53699999999995, 143.325, 228.53999999999994)), ('B', '  99 ', 'ASN', 0.19926069746976524, (134.282, 105.999, 138.203)), ('B', ' 136 ', 'CYS', 0.07322877645492554, (125.90600000000005, 112.89799999999997, 121.737)), ('B', ' 210 ', 'ILE', 0.004762111720952529, (136.966, 108.55599999999997, 153.473)), ('B', ' 227 ', 'VAL', 0.038665960392252494, (147.352, 121.147, 134.604)), ('B', ' 328 ', 'ARG', 0.15485652338434022, (123.85600000000005, 169.015, 137.43)), ('B', ' 421 ', 'TYR', 0.17364591394070872, (156.43299999999996, 187.87699999999995, 118.221)), ('B', ' 443 ', 'SER', 0.0862876126450809, (148.432, 177.779, 98.40799999999997)), ('B', ' 455 ', 'LEU', 0.08780815699436093, (157.253, 191.16999999999996, 113.50499999999997)), ('B', ' 574 ', 'ASP', 0.060623877090098005, (132.028, 172.714, 151.389)), ('B', ' 622 ', 'VAL', 0.06471087206230133, (124.34600000000006, 145.809, 158.605)), ('B', ' 760 ', 'CYS', 0.16448700602327193, (174.142, 156.406, 154.975)), ('C', ' 105 ', 'ILE', 0.01532268470630058, (139.892, 206.106, 127.573)), ('C', ' 112 ', 'SER', 0.20025123988437, (141.995, 205.39399999999995, 118.613)), ('C', ' 116 ', 'SER', 0.10398789095312662, (142.328, 202.066, 122.254)), ('C', ' 165 ', 'ASN', 0.12488492813238244, (135.608, 199.455, 112.657)), ('C', ' 445 ', 'VAL', 0.14793503824608495, (174.118, 158.11300000000006, 91.02499999999999)), ('C', ' 466 ', 'ARG', 0.22367912906004925, (189.71199999999996, 156.426, 116.826)), ('C', ' 641 ', 'ASN', 0.022212923754812642, (167.73199999999997, 205.959, 169.194)), ('C', ' 760 ', 'CYS', 0.12204796075820923, (150.136, 153.496, 156.221)), ('C', ' 907 ', 'ASN', 0.22986742822973788, (156.593, 167.928, 214.685)), ('C', '1092 ', 'GLU', 0.01567174222683347, (168.02599999999995, 169.11999999999995, 220.917))]
data['cbeta'] = [('A', ' 631 ', 'PRO', ' ', 0.308280224109507, (196.446, 145.767, 150.684)), ('C', ' 112 ', 'SER', ' ', 0.2951834721855059, (140.575, 205.145, 119.10999999999997)), ('C', ' 391 ', 'CYS', ' ', 0.25510688737314546, (182.449, 180.76499999999993, 127.76)), ('C', ' 457 ', 'ARG', ' ', 0.2682024419278559, (185.553, 142.82899999999995, 113.46099999999997))]
data['probe'] = [(' C 391  CYS  HB2', ' C 525  CYS  HA ', -0.587, (183.16, 180.791, 126.217)), (' B 391  CYS  HB2', ' B 525  CYS  HA ', -0.587, (131.114, 172.906, 129.8)), (' B 455  LEU HD23', ' B 456  PHE  H  ', -0.56, (159.426, 192.006, 114.339)), (' B1105  THR HG23', ' B1111  GLU  H  ', -0.516, (150.44, 151.896, 221.818)), (' A 323  THR  HG1', ' A 625  HIS  CE1', -0.5, (186.908, 130.946, 144.543)), (' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.49, (164.386, 132.269, 127.337)), (' A1083  HIS  CG ', ' A1084  ASP  H  ', -0.472, (168.323, 144.173, 236.782)), (' B 421  TYR  CE1', ' B 455  LEU HD22', -0.468, (157.815, 192.571, 117.11)), (' B 421  TYR  HA ', ' B 461  LEU  HB2', -0.437, (155.293, 189.13, 119.393)), (' B 132  GLU  H  ', ' B 165  ASN  N  ', -0.428, (136.789, 121.63, 116.864)), (' A1083  HIS  CD2', ' A1084  ASP  H  ', -0.412, (168.049, 144.383, 236.916)), (' A 630  THR  HB ', ' A 631  PRO  CD ', -0.402, (196.378, 142.071, 149.21)), (' B  64  TRP  CD1', ' B 266  TYR  CE1', -0.401, (126.786, 116.219, 148.038))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
