# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  32 ', 'PHE', 0.018088716127084153, (155.743, 112.03000000000003, 150.012)), ('A', ' 112 ', 'SER', 0.048550889279496766, (156.116, 110.302, 111.912)), ('A', ' 123 ', 'ALA', 0.01960490832490552, (173.145, 104.034, 133.483)), ('A', ' 389 ', 'ASP', 0.024025451611794542, (135.875, 147.251, 126.116)), ('A', ' 410 ', 'ILE', 0.047912567873028375, (144.264, 162.326, 109.564)), ('A', ' 582 ', 'LEU', 0.014738291070237481, (115.16, 150.96600000000007, 139.28)), ('A', ' 619 ', 'GLU', 0.04240895870148164, (131.762, 129.875, 151.591)), ('A', ' 709 ', 'ASN', 0.011535195468649633, (132.154, 146.159, 207.261)), ('A', ' 722 ', 'VAL', 0.06907741568014789, (163.62800000000004, 137.383, 192.781)), ('A', ' 814 ', 'LYS', 0.04690470588523295, (184.763, 138.36700000000005, 183.949)), ('A', ' 891 ', 'GLY', 0.08327941615864384, (177.646, 160.83700000000005, 195.78100000000003)), ('B', '  61 ', 'ASN', 0.03287369718853978, (122.174, 190.173, 144.24)), ('B', ' 123 ', 'ALA', 0.012846954235572663, (106.365, 172.662, 132.312)), ('B', ' 304 ', 'LYS', 0.026159936335464026, (133.42700000000005, 170.233, 156.44)), ('B', ' 382 ', 'VAL', 0.054008221149256415, (165.69100000000006, 184.66200000000006, 112.855)), ('B', ' 503 ', 'VAL', 0.09973992814775454, (167.884, 199.66700000000006, 95.63800000000003)), ('B', ' 544 ', 'ASN', 0.04460044619798323, (170.752, 191.164, 133.891)), ('B', ' 569 ', 'ILE', 0.0074854754535353205, (173.355, 181.497, 154.183)), ('B', ' 573 ', 'THR', 0.023333709606835867, (169.71900000000005, 185.93700000000007, 146.463)), ('B', ' 700 ', 'GLY', 0.05386817053048369, (145.61800000000005, 183.14, 185.41600000000003)), ('B', ' 709 ', 'ASN', 0.02835883965843074, (159.043, 185.223, 207.68400000000005)), ('C', ' 112 ', 'SER', 0.011573507992923976, (202.861, 181.005, 114.038)), ('C', ' 213 ', 'VAL', 0.03326923948417088, (211.911, 187.821, 146.547)), ('C', ' 304 ', 'LYS', 0.02347924096128411, (182.977, 174.22700000000003, 157.486)), ('C', ' 410 ', 'ILE', 0.07968388060103515, (160.114, 145.79000000000005, 115.009)), ('C', ' 418 ', 'ILE', 0.012474808562279848, (153.496, 140.234, 112.39400000000002)), ('C', ' 442 ', 'ASP', 0.029658795617673837, (165.393, 139.68200000000004, 98.61100000000003)), ('C', ' 784 ', 'GLN', 0.04322380904829046, (150.65, 174.026, 185.99800000000005)), ('C', '1084 ', 'ASP', 0.011623605782760569, (167.997, 143.025, 229.167))]
data['omega'] = []
data['rota'] = [('A', ' 214 ', 'ARG', 0.2804937673921435, (155.593, 99.12700000000002, 144.59900000000002)), ('A', ' 238 ', 'PHE', 0.27623517212823384, (155.64, 110.62300000000003, 126.365)), ('A', ' 307 ', 'THR', 0.05854943554907929, (160.629, 125.029, 162.376)), ('A', ' 309 ', 'GLU', 0.05726115780605449, (157.607, 128.507, 167.17400000000004)), ('A', ' 319 ', 'ARG', 0.0, (139.005, 136.236, 149.696)), ('A', ' 328 ', 'ARG', 0.11608871934313159, (125.083, 145.387, 131.921)), ('A', ' 461 ', 'LEU', 0.09863746362688232, (142.011, 175.67900000000006, 114.128)), ('A', ' 553 ', 'THR', 0.1064871455443413, (123.203, 142.649, 147.534)), ('A', ' 581 ', 'THR', 0.16008399746499166, (115.744, 149.13, 135.952)), ('A', ' 723 ', 'THR', 0.29818509661555737, (162.229, 138.10300000000007, 189.297)), ('A', ' 739 ', 'THR', 0.06214618387801659, (177.285, 155.68000000000006, 148.676)), ('A', ' 760 ', 'CYS', 0.2885901518261481, (173.056, 160.97800000000007, 151.83)), ('A', ' 794 ', 'ILE', 0.22967247906566973, (185.43, 137.858, 201.842)), ('A', ' 804 ', 'GLN', 0.20577150149184953, (176.159, 133.686, 190.36100000000005)), ('A', ' 873 ', 'TYR', 0.29294857831612087, (180.602, 148.549, 184.854)), ('A', ' 900 ', 'MET', 0.003964940432795706, (171.59000000000006, 146.568, 207.498)), ('A', ' 912 ', 'THR', 0.10314329739603802, (159.54, 146.879, 210.22)), ('A', ' 913 ', 'GLN', 0.06897390564826973, (163.213, 145.853, 210.07500000000005)), ('A', ' 996 ', 'LEU', 0.12410473407267178, (167.786, 151.547, 141.487)), ('A', '1041 ', 'ASP', 0.03087750267422388, (154.881, 147.57000000000005, 190.384)), ('A', '1072 ', 'GLU', 0.2097872885923664, (147.519, 134.923, 205.556)), ('A', '1084 ', 'ASP', 0.1917277508191323, (137.222, 155.94000000000005, 228.02500000000003)), ('B', ' 102 ', 'ARG', 0.2832443475302367, (107.791, 181.50800000000004, 127.401)), ('B', ' 104 ', 'TRP', 0.17368426313998736, (114.822, 182.407, 125.865)), ('B', ' 105 ', 'ILE', 0.2268505305649122, (117.034, 183.031, 122.864)), ('B', ' 122 ', 'ASN', 0.004738112238215259, (105.524, 174.593, 129.096)), ('B', ' 126 ', 'VAL', 0.10527673595062464, (110.27900000000002, 171.726, 125.89800000000001)), ('B', ' 129 ', 'LYS', 0.1408937394700021, (116.359, 174.566, 118.20700000000002)), ('B', ' 227 ', 'VAL', 0.06778597522239098, (119.674, 168.475, 129.78100000000003)), ('B', ' 276 ', 'LEU', 0.23378708795696218, (130.231, 172.236, 150.332)), ('B', ' 338 ', 'PHE', 0.17724086441420428, (176.466, 197.396, 111.03300000000002)), ('B', ' 604 ', 'THR', 0.21915205114405312, (126.51800000000003, 180.944, 169.058)), ('B', ' 608 ', 'VAL', 0.011586087619317476, (134.042, 185.929, 162.389)), ('B', ' 616 ', 'ASN', 0.20501443534870198, (151.383, 194.378, 158.724)), ('B', ' 873 ', 'TYR', 0.23854281161605623, (138.684, 143.314, 184.392)), ('B', ' 907 ', 'ASN', 0.2500971370070995, (147.524, 158.605, 206.015)), ('B', '1004 ', 'LEU', 0.08035672045521014, (150.961, 153.69700000000006, 152.667)), ('B', '1094 ', 'VAL', 0.045100205465294224, (153.985, 172.752, 211.877)), ('B', '1118 ', 'ASP', 0.008443517016224707, (154.774, 163.742, 222.45400000000004)), ('B', '1135 ', 'ASN', 0.055039306619731936, (156.33, 179.167, 224.464)), ('C', ' 218 ', 'GLN', 0.015151023181008525, (204.625, 181.946, 152.698)), ('C', ' 220 ', 'PHE', 0.06105932175833394, (198.196, 184.522, 150.515)), ('C', ' 274 ', 'THR', 0.2237666441558822, (187.328, 171.13200000000006, 146.954)), ('C', ' 328 ', 'ARG', 0.15166555353869304, (188.963, 136.379, 132.736)), ('C', ' 336 ', 'CYS', 0.05492158234119415, (182.133, 133.531, 115.793)), ('C', ' 361 ', 'CYS', 0.07058766524117742, (183.289, 131.576, 120.148)), ('C', ' 429 ', 'PHE', 0.12090386798955985, (164.089, 140.655, 126.77100000000003)), ('C', ' 523 ', 'THR', 0.027710920005916243, (180.732, 130.171, 126.27200000000002)), ('C', ' 538 ', 'CYS', 0.21511769315603768, (193.267, 143.796, 145.87)), ('C', ' 608 ', 'VAL', 0.061417285395678624, (195.58400000000006, 164.622, 163.797)), ('C', ' 615 ', 'VAL', 0.21991747345501783, (190.523, 147.465, 158.922)), ('C', ' 619 ', 'GLU', 0.025712608490976032, (195.866, 146.418, 154.41900000000004)), ('C', '1004 ', 'LEU', 0.06911666743168743, (159.52400000000006, 167.808, 152.623)), ('C', '1106 ', 'GLN', 0.06509395878927865, (169.562, 159.273, 210.833)), ('C', '1127 ', 'ASP', 0.27985396383269934, (168.762, 134.95000000000005, 219.755))]
data['cbeta'] = []
data['probe'] = [(' C 607  GLN  OE1', ' C 674  TYR  HE1', -1.045, (199.97, 166.375, 168.129)), (' C 607  GLN  OE1', ' C 674  TYR  CE1', -0.835, (199.507, 166.668, 168.59)), (' A 607  GLN  OE1', ' A 674  TYR  HE1', -0.769, (147.475, 118.536, 166.741)), (' A  93  ALA  HB1', ' A 189  LEU HD11', -0.673, (162.768, 106.216, 140.266)), (' B 607  GLN  OE1', ' B 674  TYR  HE1', -0.658, (129.394, 188.308, 166.832)), (' A 607  GLN  OE1', ' A 674  TYR  CE1', -0.545, (147.943, 118.22, 167.428)), (' B 132  GLU  CB ', ' B1301  NAG  H81', -0.513, (118.026, 181.372, 108.856)), (' A 342  PHE  HB2', ' A1305  NAG  H82', -0.483, (129.246, 152.217, 105.48)), (' C1083  HIS  CG ', ' C1084  ASP  H  ', -0.482, (168.276, 145.877, 228.451)), (' C  28  TYR  CD2', ' C1301  NAG  H81', -0.482, (210.556, 171.154, 140.493)), (' C1083  HIS  CD2', ' C1084  ASP  H  ', -0.48, (167.51, 145.829, 228.449)), (' C 342  PHE  HB2', ' C1305  NAG  H82', -0.47, (177.346, 139.831, 109.281)), (' A 580  GLN  HA ', ' A1304  NAG  H82', -0.464, (117.268, 149.799, 131.542)), (' A 741  TYR  CE1', ' A 966  LEU HD21', -0.449, (171.947, 148.214, 150.181)), (' A1024  LEU HD11', ' A1028  LYS  HE2', -0.446, (160.79, 150.863, 184.062)), (' C1024  LEU HD11', ' C1028  LYS  HE2', -0.441, (162.616, 163.414, 183.929)), (' B1043  CYS  HB3', ' B1048  HIS  CD2', -0.438, (145.873, 160.634, 192.252)), (' C  43  PHE  CE1', ' C 283  GLY  HA3', -0.434, (180.963, 192.175, 150.95)), (' C 599  THR HG22', ' C 601  GLY  H  ', -0.43, (191.296, 168.852, 167.211)), (' B 280  ASN  ND2', ' B1302  NAG  H81', -0.428, (116.461, 164.598, 153.209)), (' B 886  TRP  CH2', ' B 904  TYR  CD2', -0.423, (146.705, 151.108, 203.594)), (' B  56  LEU HD22', ' B  91  TYR  CD2', -0.421, (121.431, 182.172, 141.193)), (' A 319  ARG  HG2', ' A 319  ARG HH11', -0.418, (139.398, 138.788, 149.979)), (' C 598  ILE  H  ', ' C 598  ILE HD12', -0.417, (190.969, 160.254, 164.753)), (' B 915  VAL HG21', ' B1106  GLN HE22', -0.417, (143.296, 165.326, 210.394)), (' B  37  TYR  HA ', ' B 223  LEU  H  ', -0.414, (120.149, 172.539, 141.702)), (' C1032  CYS  SG ', ' C1048  HIS  CE1', -0.412, (163.833, 168.412, 192.692)), (' A 903  ALA  HB1', ' A 913  GLN  HB2', -0.412, (166.186, 146.471, 208.966)), (' B 353  TRP  H  ', ' B 423  TYR  CB ', -0.405, (180.774, 186.685, 97.544)), (' C 580  GLN  HA ', ' C1302  NAG  H82', -0.404, (189.861, 127.847, 130.204)), (' A 970  PHE  CG ', ' A 999  GLY  HA3', -0.402, (164.265, 150.324, 144.18)), (' B 130  VAL HG22', ' B 168  PHE  H  ', -0.4, (120.681, 173.147, 115.39))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
