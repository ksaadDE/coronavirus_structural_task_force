# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '1079 ', 'PRO', 0.01479633875292874, (212.41900000000007, 235.063, 152.532)), ('B', ' 122 ', 'ASN', 0.042656891217209246, (171.04200000000014, 248.145, 254.701)), ('B', ' 164 ', 'ASN', 0.019414359799544277, (177.8920000000001, 234.442, 269.579)), ('B', ' 483 ', 'VAL', 0.06443358220163954, (241.629, 180.80200000000005, 274.679)), ('C', ' 164 ', 'ASN', 0.036244997652063585, (220.4170000000001, 172.34700000000007, 268.923)), ('C', ' 260 ', 'ALA', 0.022717036907452515, (223.9850000000001, 150.363, 245.07499999999996)), ('C', ' 478 ', 'THR', 0.03245841683400067, (226.44700000000014, 256.45000000000005, 267.407)), ('C', ' 482 ', 'GLY', 0.018957372300682954, (235.08100000000013, 254.69000000000005, 271.124)), ('C', '1128 ', 'VAL', 0.04873762169522582, (240.426, 216.127, 148.384))]
data['omega'] = []
data['rota'] = [('A', ' 101 ', 'ILE', 0.26698348671004624, (263.083, 242.384, 245.19299999999998)), ('A', ' 212 ', 'LEU', 0.19081767548997897, (268.188, 241.658, 228.43499999999995)), ('A', ' 277 ', 'LEU', 0.22592115447888, (245.637, 226.556, 224.447)), ('A', ' 597 ', 'VAL', 0.22585612593546867, (233.4890000000001, 239.557, 210.704)), ('A', ' 599 ', 'THR', 0.1352687701944201, (238.51600000000005, 238.203, 206.914)), ('A', '1050 ', 'MET', 0.2928211519923818, (230.115, 212.465, 171.426)), ('A', '1106 ', 'GLN', 0.27370056772652723, (222.769, 225.799, 155.11499999999998)), ('B', ' 120 ', 'VAL', 0.23493559561665744, (174.1280000000001, 242.688, 253.78399999999996)), ('B', ' 148 ', 'ASN', 0.2974725890857222, (153.76900000000015, 262.927, 258.995)), ('B', ' 212 ', 'LEU', 0.0889821608106146, (164.12700000000007, 246.211, 229.113)), ('B', ' 301 ', 'CYS', 0.23649654828210792, (191.001, 226.664, 219.52199999999993)), ('B', ' 434 ', 'ILE', 0.12254360869002179, (209.20400000000006, 201.392, 262.652)), ('B', ' 693 ', 'ILE', 0.1402976070251656, (175.632, 217.104, 200.34599999999998)), ('B', ' 896 ', 'ILE', 0.29911584723679324, (219.23500000000007, 236.925, 162.536)), ('B', ' 991 ', 'VAL', 0.15459344829940821, (217.12000000000006, 221.359, 237.10299999999995)), ('C', ' 206 ', 'LYS', 0.20220123120028127, (208.50600000000006, 169.086, 238.006)), ('C', ' 227 ', 'VAL', 0.2216790735028424, (208.06900000000005, 176.756, 246.907)), ('C', ' 277 ', 'LEU', 0.21348637130731551, (211.81900000000002, 182.59, 224.409)), ('C', ' 326 ', 'ILE', 0.24457136186969916, (245.54200000000006, 194.075, 240.37099999999995)), ('C', ' 329 ', 'PHE', 0.2968666853264727, (248.1800000000001, 201.631, 246.032)), ('C', ' 434 ', 'ILE', 0.17838652649713757, (231.2760000000001, 213.488, 262.549)), ('C', ' 461 ', 'LEU', 0.2705277916934628, (232.60300000000012, 235.176, 254.73299999999995)), ('C', ' 864 ', 'LEU', 0.11802049330793603, (191.30500000000004, 209.27, 197.59199999999998)), ('C', '1040 ', 'VAL', 0.28028799845043206, (218.519, 206.486, 175.02299999999997))]
data['cbeta'] = []
data['probe'] = [(' B 139  PRO  HA ', ' B 158  ARG  O  ', -1.003, (164.872, 238.699, 258.03)), (' A 139  PRO  HA ', ' A 158  ARG  O  ', -0.893, (260.991, 247.652, 257.159)), (' C 139  PRO  HA ', ' C 158  ARG  O  ', -0.779, (224.175, 159.843, 256.935)), (' B 593  GLY  HA2', ' B 614  ASP  HB2', -0.638, (186.403, 204.68, 214.937)), (' B 105  ILE HD11', ' B 239  GLN HE21', -0.635, (168.993, 232.268, 254.101)), (' C 763  LEU HD22', ' C1008  VAL HG21', -0.622, (205.928, 213.653, 213.538)), (' A  97  LYS  HB3', ' A 186  PHE  HA ', -0.61, (270.58, 241.616, 236.01)), (' A 310  LYS  HA ', ' A 599  THR  O  ', -0.606, (238.967, 235.664, 204.289)), (' B 763  LEU HD22', ' B1008  VAL HG21', -0.603, (219.819, 223.367, 214.022)), (' B 119  ILE HG23', ' B 128  ILE HG12', -0.595, (179.482, 242.369, 252.678)), (' C  97  LYS  HE3', ' C 262  ALA  HB1', -0.593, (217.302, 150.874, 237.742)), (' C 593  GLY  HA2', ' C 614  ASP  HB2', -0.588, (238.64, 194.747, 214.408)), (' C 278  LYS  HB3', ' C 287  ASP  HB3', -0.584, (210.584, 179.071, 220.595)), (' C 642  VAL HG22', ' C 651  ILE HG12', -0.583, (239.94, 180.858, 209.573)), (' C 604  THR  OG1', ' C 605  SER  N  ', -0.582, (221.519, 174.99, 204.954)), (' A 101  ILE HG13', ' A 242  LEU HD22', -0.581, (261.281, 245.096, 244.686)), (' C 354  ASN HD22', ' C 399  SER  HB2', -0.578, (239.315, 220.644, 266.253)), (' C 184  GLY  O  ', ' C 185  ASN  ND2', -0.578, (211.341, 150.556, 232.436)), (' C1105  THR  OG1', ' C1106  GLN  N  ', -0.574, (221.025, 201.397, 153.286)), (' B1076  THR  HB ', ' B1097  SER  HB3', -0.569, (189.585, 209.476, 150.284)), (' A 143  VAL  HA ', ' A 154  GLU  HA ', -0.566, (272.29, 242.54, 254.688)), (' A 907  ASN HD21', ' A 913  GLN HE21', -0.554, (225.872, 212.472, 155.806)), (' A 278  LYS  HB3', ' A 287  ASP  HB2', -0.55, (249.532, 226.943, 220.693)), (' A 742  ILE  O  ', ' A1000  ARG  NH1', -0.549, (228.617, 206.652, 226.646)), (' B 590  CYS  O  ', ' B 634  ARG  NH2', -0.547, (185.319, 203.601, 223.186)), (' C1030  SER  HA ', ' C1034  LEU HD12', -0.547, (202.735, 212.057, 178.683)), (' C 438  SER  HB2', ' C 441  LEU  HB2', -0.546, (232.77, 215.924, 275.33)), (' A 185  ASN  OD1', ' A 211  ASN  ND2', -0.544, (272.125, 240.598, 230.306)), (' C 203  ILE  HB ', ' C 227  VAL HG12', -0.544, (210.939, 175.025, 246.374)), (' B  30  ASN  ND2', ' B  60  SER  O  ', -0.543, (171.348, 229.082, 226.999)), (' A 143  VAL HG21', ' A 179  LEU HD22', -0.539, (271.58, 241.139, 251.058)), (' C 985  ASP  N  ', ' C 985  ASP  OD1', -0.528, (204.06, 208.961, 245.232)), (' C 102  ARG  HG3', ' C 141  LEU HD12', -0.528, (216.358, 158.344, 252.418)), (' A 276  LEU HD22', ' A 301  CYS  HA ', -0.524, (240.133, 229.078, 219.431)), (' A 985  ASP  N  ', ' A 985  ASP  OD1', -0.523, (226.735, 207.154, 244.867)), (' B 119  ILE HG12', ' B 128  ILE HG23', -0.522, (180.158, 239.469, 253.4)), (' B  97  LYS  HB3', ' B 186  PHE  HA ', -0.521, (164.262, 248.385, 236.265)), (' B 148  ASN  ND2', ' B 149  ASN  OD1', -0.519, (156.497, 261.242, 260.19)), (' A 139  PRO  HB2', ' A 241  LEU HD21', -0.518, (257.994, 245.922, 255.338)), (' A  30  ASN  ND2', ' A  60  SER  O  ', -0.517, (248.555, 246.587, 226.067)), (' B1040  VAL HG21', ' C1035  GLY  HA3', -0.515, (205.35, 213.024, 172.243)), (' C 324  GLU  H  ', ' C 539  VAL HG12', -0.512, (243.547, 190.071, 234.318)), (' C 845  ALA  O  ', ' C 847  ARG  N  ', -0.512, (194.39, 190.805, 220.572)), (' B 973  ILE HD11', ' B 980  ILE HG23', -0.512, (211.689, 228.636, 238.778)), (' A 203  ILE  HB ', ' A 227  VAL HG12', -0.511, (252.266, 229.237, 246.075)), (' B  97  LYS  HE2', ' B 262  ALA  HB3', -0.51, (159.944, 247.263, 238.898)), (' C  30  ASN  ND2', ' C  60  SER  O  ', -0.507, (227.32, 169.877, 225.567)), (' A1111  GLU  OE1', ' A1113  GLN  NE2', -0.507, (226.169, 222.345, 148.291)), (' B 393  THR  HB ', ' B 516  GLU  HB2', -0.507, (204.811, 190.321, 247.435)), (' A1030  SER  HB3', ' C1041  ASP  HB2', -0.503, (220.502, 205.46, 178.896)), (' B 741  TYR  O  ', ' B1000  ARG  NH1', -0.502, (215.239, 230.932, 224.666)), (' C 206  LYS  HE3', ' C 221  SER  HB3', -0.501, (209.29, 170.037, 231.731)), (' C 433  VAL HG22', ' C 512  VAL HG22', -0.5, (232.171, 218.832, 259.235)), (' C 985  ASP  HB2', ' C 987  PRO  HD2', -0.499, (202.351, 212.297, 245.216)), (' C 478  THR  OG1', ' C 486  PHE  O  ', -0.497, (225.095, 253.834, 269.01)), (' C 273  ARG  NH2', ' C 292  ALA  O  ', -0.496, (226.992, 181.484, 225.803)), (' A  81  ASN  N  ', ' A  81  ASN  OD1', -0.496, (258.3, 251.979, 247.244)), (' B 403  ARG HH21', ' B 495  TYR  HD2', -0.495, (224.773, 198.467, 274.23)), (' A 733  LYS  HE3', ' A 771  ALA  HB1', -0.494, (227.002, 199.648, 203.37)), (' A  15  CYS  SG ', ' A 161  SER  OG ', -0.491, (258.026, 248.482, 263.814)), (' C 973  ILE HD11', ' C 980  ILE HG23', -0.491, (206.251, 203.828, 239.333)), (' A 590  CYS  O  ', ' A 634  ARG  NH2', -0.49, (221.581, 246.611, 222.683)), (' C 802  PHE  HD2', ' C 805  ILE HD11', -0.489, (196.741, 196.258, 172.547)), (' B 324  GLU  H  ', ' B 539  VAL HG12', -0.487, (181.291, 202.011, 235.207)), (' A 319  ARG  NH1', ' B 744  GLY  O  ', -0.485, (222.906, 237.622, 226.108)), (' B 102  ARG  HG2', ' B 243  ALA  HB2', -0.485, (165.624, 244.649, 250.836)), (' B 393  THR HG23', ' B 522  ALA  HB2', -0.483, (201.558, 187.371, 247.996)), (' C  98  SER  OG ', ' C 182  LYS  O  ', -0.483, (213.181, 149.821, 240.298)), (' C 703  ASN  N  ', ' C 703  ASN  OD1', -0.48, (233.365, 191.925, 175.262)), (' A 805  ILE HD12', ' A 878  LEU HD21', -0.478, (239.385, 206.664, 174.172)), (' A  37  TYR  H  ', ' A  55  PHE  HE1', -0.472, (248.346, 230.42, 232.893)), (' C 119  ILE HG12', ' C 128  ILE HG23', -0.466, (213.425, 172.024, 253.635)), (' A  15  CYS  HB3', ' A 136  CYS  HB3', -0.464, (257.982, 251.963, 262.012)), (' C 444  LYS  HG3', ' C 446  GLY  H  ', -0.464, (230.619, 222.994, 286.446)), (' A 102  ARG HH21', ' A 122  ASN  HA ', -0.464, (266.865, 238.689, 252.805)), (' B 231  ILE  HB ', ' B 233  ILE HG12', -0.463, (184.212, 232.42, 255.523)), (' A1031  GLU  OE2', ' C1039  ARG  NH1', -0.462, (217.61, 212.962, 179.495)), (' C 970  PHE  HD1', ' C 996  LEU HD23', -0.459, (209.067, 205.682, 228.197)), (' B 125  ASN  ND2', ' B 172  SER  O  ', -0.458, (179.75, 252.383, 257.366)), (' B 433  VAL HG22', ' B 512  VAL HG22', -0.458, (212.676, 197.969, 258.962)), (' A 970  PHE  HD1', ' A 996  LEU HD23', -0.457, (226.845, 213.137, 228.185)), (' A 100  ILE HD13', ' A 263  ALA  HB2', -0.456, (267.192, 244.57, 240.753)), (' C  98  SER  HB3', ' C 181  GLY  HA2', -0.456, (212.933, 149.913, 243.754)), (' C 903  ALA  HB1', ' C 913  GLN  HG2', -0.456, (205.387, 203.952, 157.238)), (' B  77  LYS  NZ ', ' B 256  SER  O  ', -0.456, (150.297, 240.027, 251.298)), (' C 421  TYR  HA ', ' C 457  ARG HH21', -0.455, (230.183, 235.362, 258.869)), (' A 770  ILE HD11', ' A1012  LEU  HG ', -0.455, (220.19, 207.726, 206.887)), (' A 119  ILE HG23', ' A 128  ILE HG12', -0.455, (256.481, 232.49, 252.054)), (' B 206  LYS  NZ ', ' B 222  ALA  O  ', -0.455, (183.633, 244.472, 233.454)), (' B 189  LEU  HB2', ' B 210  ILE HD13', -0.454, (170.513, 244.612, 233.423)), (' B 357  ARG HH12', ' B 394  ASN HD22', -0.453, (204.956, 184.656, 251.613)), (' B 605  SER  OG ', ' B 606  ASN  N  ', -0.452, (176.944, 228.639, 207.743)), (' B 437  ASN  ND2', ' B 507  PRO  O  ', -0.451, (214.812, 203.128, 273.659)), (' B 805  ILE HD12', ' B 878  LEU HD11', -0.451, (209.768, 238.982, 176.011)), (' B 401  VAL HG22', ' B 509  ARG  HG2', -0.45, (212.759, 196.168, 271.56)), (' A 751  ASN  O  ', ' A 755  GLN  NE2', -0.45, (217.891, 198.161, 230.965)), (' B 568  ASP  N  ', ' B 568  ASP  OD1', -0.45, (200.744, 192.993, 226.292)), (' B 273  ARG  NH2', ' B 292  ALA  O  ', -0.449, (181.227, 222.191, 226.596)), (' B 189  LEU HD22', ' B 217  PRO  HG2', -0.447, (171.503, 243.042, 231.902)), (' A 825  LYS  HB2', ' A 945  LEU HD12', -0.446, (241.661, 214.411, 191.165)), (' B1081  ILE HG23', ' B1135  ASN  HB3', -0.445, (196.796, 205.828, 143.462)), (' A 593  GLY  HA2', ' A 614  ASP  HB2', -0.445, (221.797, 244.754, 215.401)), (' C 439  ASN  HA ', ' C 507  PRO  HD2', -0.443, (227.847, 218.881, 276.923)), (' C 568  ASP  N  ', ' C 568  ASP  OD1', -0.443, (242.355, 211.696, 226.077)), (' B 986  PRO  N  ', ' B 987  PRO  HD2', -0.442, (220.947, 228.683, 242.948)), (' C  15  CYS  HB3', ' C 136  CYS  HB3', -0.441, (229.47, 160.383, 261.094)), (' C 381  GLY  HA3', ' C 430  THR HG23', -0.441, (231.839, 214.413, 247.82)), (' B 278  LYS  HB3', ' B 287  ASP  HB3', -0.44, (187.682, 237.829, 221.232)), (' A 145  TYR  HB3', ' A 247  SER  HA ', -0.439, (279.015, 248.08, 251.737)), (' A1040  VAL HG21', ' B1035  GLY  HA3', -0.438, (217.833, 224.869, 172.884)), (' A 958  ALA  HB2', ' A1014  ARG HH12', -0.437, (229.293, 214.37, 208.286)), (' A 148  ASN  N  ', ' A 148  ASN  OD1', -0.435, (285.718, 245.58, 257.307)), (' B 203  ILE  HB ', ' B 227  VAL HG12', -0.434, (183.789, 240.517, 246.888)), (' C  89  GLY  HA2', ' C 194  PHE  O  ', -0.434, (219.948, 177.845, 241.782)), (' A 568  ASP  N  ', ' A 568  ASP  OD1', -0.434, (204.239, 239.169, 226.61)), (' A 324  GLU  H  ', ' A 539  VAL HG12', -0.434, (223.346, 250.054, 235.123)), (' B1047  TYR  HB2', ' B1067  TYR  HD1', -0.431, (202.82, 222.813, 168.057)), (' B 642  VAL HG22', ' B 651  ILE HG12', -0.43, (174.649, 209.769, 210.846)), (' C 529  LYS  HB3', ' C 530  SER  H  ', -0.43, (250.39, 197.333, 248.93)), (' C1081  ILE HG23', ' C1135  ASN  HB3', -0.429, (232.125, 204.816, 142.838)), (' A 327  VAL HG22', ' A 542  ASN  HB3', -0.428, (215.991, 245.832, 243.359)), (' C 983  ARG  HG3', ' C 984  LEU  HG ', -0.427, (205.276, 203.646, 243.367)), (' C1050  MET  HG3', ' C1065  VAL HG21', -0.426, (204.513, 200.019, 171.09)), (' B 391  CYS  HA ', ' B 525  CYS  HA ', -0.425, (196.824, 193.506, 250.37)), (' C 326  ILE  H  ', ' C 326  ILE HG13', -0.425, (244.98, 194.571, 238.185)), (' A 789  TYR  H  ', ' A 876  ALA  HB1', -0.423, (234.712, 196.747, 177.905)), (' A  77  LYS  HE3', ' A 259  THR  HA ', -0.421, (269.859, 254.601, 247.329)), (' A 731  MET  HB2', ' A 732  THR  H  ', -0.421, (231.21, 208.351, 201.676)), (' B  69  HIS  NE2', ' B 258  TRP  O  ', -0.419, (152.11, 242.994, 247.847)), (' C  81  ASN  N  ', ' C  81  ASN  OD1', -0.418, (228.9, 159.569, 247.66)), (' B 248  TYR  HD1', ' B 249  LEU  HG ', -0.417, (148.507, 255.98, 253.406)), (' A  28  TYR  HB3', ' A  61  ASN HD21', -0.416, (250.061, 251.673, 230.323)), (' C  31  SER  HA ', ' C 216  LEU HD13', -0.414, (221.701, 166.611, 228.573)), (' A 862  PRO  HA ', ' A 863  PRO  HD3', -0.412, (235.36, 200.114, 202.06)), (' B  85  PRO  HA ', ' B 237  ARG  HG2', -0.412, (173.126, 224.673, 249.286)), (' B 327  VAL HG13', ' B 542  ASN  HB3', -0.411, (189.71, 197.591, 243.917)), (' B 702  GLU  HA ', ' C 788  ILE  HB ', -0.409, (185.315, 209.465, 180.163)), (' C 958  ALA  HB2', ' C1014  ARG HH12', -0.408, (208.937, 203.206, 209.023)), (' A 314  GLN  NE2', ' A 596  SER  OG ', -0.407, (227.076, 238.834, 210.027)), (' A1108  ASN  HA ', ' A1108  ASN HD22', -0.407, (224.608, 227.246, 161.629)), (' C 712  ILE  HA ', ' C 712  ILE HD12', -0.407, (230.607, 198.961, 159.463)), (' B 733  LYS  HB2', ' B 733  LYS  HE3', -0.407, (219.536, 235.3, 203.497)), (' C 185  ASN HD21', ' C 211  ASN  ND2', -0.405, (209.737, 152.279, 230.884)), (' A 205  SER  HB3', ' A 226  LEU HD22', -0.404, (256.562, 229.726, 243.765)), (' B 770  ILE HD11', ' B1012  LEU  HG ', -0.404, (218.446, 222.808, 206.85)), (' B 139  PRO  HB3', ' B 159  VAL  HA ', -0.403, (167.393, 237.061, 258.071)), (' B 314  GLN  NE2', ' B 596  SER  OG ', -0.402, (188.801, 212.57, 211.049)), (' C  52  GLN  NE2', ' C 274  THR  OG1', -0.402, (221.512, 188.332, 229.048)), (' B  96  GLU  HG2', ' B 263  ALA  HB1', -0.4, (165.677, 243.573, 240.702)), (' B 862  PRO  HA ', ' B 863  PRO  HD3', -0.4, (217.25, 240.286, 203.112)), (' B 204  TYR  HD2', ' B 225  PRO  HA ', -0.4, (186.78, 240.522, 240.85))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
