# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 214 ', 'ARG', 0.012864690685633081, (26.270240000000015, -54.567619999999984, 75.77378)), ('E', ' 521 ', 'PRO', 0.09538624882644783, (-21.01761, -29.112069999999992, 11.67405))]
data['omega'] = [('A', ' 152 ', 'PRO', None, (5.64805, -29.856029999999993, 66.7804)), ('A', ' 154 ', 'PRO', None, (10.217800000000006, -27.088529999999995, 63.63127)), ('B', '   8 ', 'PRO', None, (21.228300000000004, -39.1552, 34.47728)), ('B', ' 144 ', 'PRO', None, (30.980450000000012, -41.28757, 46.88327)), ('E', ' 490 ', 'PHE', None, (20.44846, -17.79012, -5.45265)), ('H', ' 115 ', 'PRO', None, (34.375420000000005, 2.83839, 23.72721)), ('H', ' 160 ', 'PRO', None, (52.37498, -12.704709999999999, 40.62065)), ('H', ' 162 ', 'PRO', None, (50.971390000000014, -7.619769999999998, 37.25019)), ('L', '   8 ', 'PRO', None, (54.20640000000001, -3.187830000000001, 6.58379)), ('L', '  95 ', 'PRO', None, (33.91645000000001, -14.65076, 12.83831)), ('L', ' 141 ', 'PRO', None, (70.10958, 5.764009999999998, 19.0645))]
data['rota'] = [('L', '  90 ', 'GLN', 0.13878093311332143, (37.59663000000001, -6.12775, 9.5659)), ('A', '  30 ', 'ASN', 0.23320659076076466, (-12.06381, -20.81421, 32.43574)), ('A', ' 101 ', 'GLN', 0.02491063226474649, (-5.036380000000001, -21.43363, 26.60544)), ('E', ' 343 ', 'ASN', 0.019288129412596944, (4.4421, -19.42717, 22.60428))]
data['cbeta'] = []
data['probe'] = [(' B  54  SER  HB2', ' E 345  THR HG22', -0.782, (10.561, -21.752, 24.5)), (' L  90  GLN HE21', ' L  93  SER  H  ', -0.767, (34.25, -9.493, 9.124)), (' E 360  ASN  H  ', ' E 523  THR  HB ', -0.76, (-13.562, -28.996, 15.682)), (' L  33  LEU HD11', ' L  88  CYS  HB2', -0.662, (42.507, -3.473, 8.741)), (' L  90  GLN  NE2', ' L  93  SER  O  ', -0.657, (34.155, -10.291, 9.918)), (' A 126  VAL  O  ', ' A 214  LYS  NZ ', -0.654, (18.339, -35.404, 77.503)), (' B  38  GLN  HB2', ' B  48  LEU HD11', -0.646, (16.535, -26.165, 37.317)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.624, (-17.228, -26.224, 11.879)), (' A 209  ASN  OD1', ' A 211  LYS  NZ ', -0.614, (11.37, -20.838, 75.639)), (' H 109  VAL HG13', ' L  91  LEU HD11', -0.599, (31.911, -0.914, 8.323)), (' B  93  GLY  HA3', ' B  98  MET  HG3', -0.599, (-1.551, -33.013, 27.82)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.589, (46.737, 4.684, 15.701)), (' B 188  ASP  HA ', ' B 191  LYS  HD3', -0.587, (14.778, -59.042, 73.713)), (' B  91  GLN  NE2', ' B  98  MET  O  ', -0.581, (1.04, -36.989, 31.215)), (' H  68  ARG  NH2', ' H  91  ASP  OD2', -0.581, (42.393, -21.63, 27.849)), (' A  24  ALA  N  ', ' A  77  SER  O  ', -0.58, (-8.301, -17.996, 41.691)), (' A 124  PRO  HB3', ' A 150  TYR  HB3', -0.578, (11.354, -33.242, 70.086)), (' B  57  THR HG21', ' C   2  NAG  H2 ', -0.577, (8.583, -14.243, 31.363)), (' H 156  LYS  NZ ', ' H 184  GLN  OE1', -0.577, (66.212, -9.617, 41.572)), (' H  13  LYS  HB2', ' H  16  GLU  HG3', -0.565, (44.168, -22.542, 39.287)), (' A  30  ASN  HB3', ' A  54  PHE  HB2', -0.563, (-13.918, -22.199, 31.056)), (' B 123  PRO  HD3', ' B 135  VAL HG22', -0.554, (22.126, -48.778, 71.483)), (' A  31  THR  HA ', ' E 335  LEU HD21', -0.549, (-9.698, -21.61, 28.558)), (' B 106  LYS  HE3', ' B 108  ASP  HB3', -0.538, (24.969, -33.928, 44.297)), (' A 205  HIS  HB3', ' A 210  THR  HB ', -0.537, (11.847, -27.628, 72.264)), (' C   5  FUC  O3 ', ' E 373  SER  OG ', -0.533, (2.634, -10.303, 27.192)), (' E 363  ALA  O  ', ' E 526  GLY  HA3', -0.527, (-14.123, -19.679, 21.554)), (' B  67  GLY  HA3', ' B  72  PHE  HA ', -0.519, (15.336, -33.692, 24.165)), (' A  29  PHE  CD2', ' A  74  ASP  HA ', -0.519, (-14.308, -20.407, 38.026)), (' A 124  PRO  HD2', ' A 210  THR HG21', -0.514, (12.12, -29.587, 73.967)), (' E 360  ASN  N  ', ' E 523  THR  HB ', -0.512, (-13.226, -29.307, 16.491)), (' B  48  LEU HD23', ' B  59  ILE HD12', -0.509, (16.028, -21.922, 35.949)), (' B 148  LYS  HB3', ' B 200  THR  HB ', -0.508, (26.246, -51.265, 51.701)), (' A 102  TRP  CZ3', ' E 368  LEU  HG ', -0.504, (-6.549, -16.165, 20.958)), (' H  11  LEU  HB2', ' H 160  PRO  HG3', -0.501, (48.556, -14.037, 39.411)), (' C   1  NAG  H61', ' C   2  NAG  HN2', -0.496, (5.045, -14.592, 30.51)), (' B 110  LYS  HG2', ' B 111  ARG  H  ', -0.49, (33.744, -35.832, 42.49)), (' A  32  TYR  O  ', ' A  53  PRO  HD2', -0.49, (-9.66, -24.739, 33.281)), (' B  15  PRO  HD3', ' B 109  ILE HG23', -0.488, (32.192, -29.059, 42.12)), (' B  78  ARG  NH2', ' H  85  SER  HB3', -0.487, (34.839, -21.815, 32.77)), (' A 102  TRP  CE3', ' E 368  LEU  HG ', -0.486, (-5.721, -16.311, 21.456)), (' B  18  ARG HH21', ' B  75  THR HG21', -0.477, (24.719, -28.152, 25.903)), (' A  33  VAL HG22', ' A  52  ILE HG12', -0.477, (-8.784, -28.32, 31.95)), (' L  90  GLN  NE2', ' L  93  SER  H  ', -0.476, (34.156, -9.766, 9.358)), (' L 107  LYS  HA ', ' L 140  TYR  OH ', -0.474, (65.055, 6.838, 14.51)), (' L 120  PRO  HD3', ' L 132  VAL HG22', -0.473, (75.463, -3.162, 43.816)), (' E 336  CYS  O  ', ' E 338  PHE  N  ', -0.47, (-4.881, -23.333, 21.912)), (' H   8  GLY  HA3', ' H  20  LEU HD23', -0.47, (39.285, -9.976, 36.73)), (' B 196  ALA  HB2', ' B 211  SER  HB3', -0.469, (29.316, -55.109, 65.648)), (' E 364  ASP  OD1', ' E 365  TYR  N  ', -0.468, (-11.843, -16.497, 24.526)), (' E 347  PHE  CE2', ' E 399  SER  HB2', -0.468, (4.094, -18.333, 14.55)), (' A 101  GLN  HB2', ' E 335  LEU HD23', -0.468, (-7.741, -22.559, 27.026)), (' A 101  GLN  NE2', ' E 364  ASP  H  ', -0.467, (-10.441, -20.84, 23.909)), (' E 344  ALA  HB3', ' E 347  PHE  CE1', -0.465, (6.196, -19.852, 17.796)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.461, (8.349, -14.607, 15.112)), (' L   6  GLN  NE2', ' L  86  TYR  O  ', -0.459, (48.73, -2.133, 12.029)), (' A  24  ALA  HB3', ' A  77  SER  HB3', -0.459, (-9.379, -17.458, 39.985)), (' B 110  LYS  HA ', ' B 143  TYR  OH ', -0.458, (31.267, -35.476, 42.627)), (' A  99  LEU  HG ', ' A 100  SER  H  ', -0.457, (-1.682, -23.193, 29.53)), (' A  36  TRP  CE2', ' A  81  MET  HB2', -0.456, (-6.428, -29.082, 44.617)), (' E 368  LEU  HA ', ' E 368  LEU HD23', -0.455, (-4.588, -13.281, 23.064)), (' L  32  TYR  HD1', ' L  91  LEU HD12', -0.455, (31.896, -3.261, 8.301)), (' B  78  ARG HH22', ' H  85  SER  HB3', -0.454, (35.333, -22.037, 32.813)), (' B  12  SER  HB3', ' B 110  LYS  HG3', -0.452, (31.06, -36.823, 40.623)), (' E 447  GLY  HA2', ' E 498  GLN  HG2', -0.45, (22.542, -9.993, 13.656)), (' B 204  LEU HD13', ' B 208  VAL HG23', -0.448, (33.995, -50.288, 55.009)), (' A   3  GLN  N  ', ' A 107  MET  HE3', -0.445, (1.482, -17.428, 39.021)), (' E 332  HIS  CE1', ' E 360  ASN HD22', -0.442, (-15.287, -32.53, 17.832)), (' E 445  VAL HG12', ' H  54  TYR  HB2', -0.442, (23.337, -8.426, 21.587)), (' A 208  SER  OG ', ' A 210  THR  OG1', -0.44, (9.478, -28.191, 73.808)), (' L 210  ASN  HB2', ' L 213  GLU  HB2', -0.436, (84.492, 3.29, 48.043)), (' A 105  LEU  CD2', ' C   2  NAG  H82', -0.435, (4.03, -16.648, 32.669)), (' E 347  PHE  CD1', ' E 509  ARG  HD3', -0.434, (7.448, -16.705, 17.358)), (' H 101  ILE HG21', ' H 112  TRP  CE2', -0.434, (31.016, 1.983, 15.64)), (' H 110  ALA  O  ', ' L  91  LEU HD13', -0.431, (31.775, -2.13, 11.395)), (' A  29  PHE  CE2', ' A  53  PRO  HB3', -0.424, (-12.635, -23.026, 37.34)), (' A  30  ASN  N  ', ' A  30  ASN  OD1', -0.421, (-12.632, -19.499, 33.384)), (' B  94  THR HG21', ' E 337  PRO  HB3', -0.42, (-3.508, -27.804, 22.655)), (' L  40  PRO  HB3', ' L 165  GLU  HG3', -0.42, (55.849, 0.061, 25.302)), (' L 140  TYR  CG ', ' L 141  PRO  HA ', -0.418, (67.876, 5.831, 18.838)), (' H 132  PRO  HB3', ' H 158  TYR  HB3', -0.418, (57.37, -7.489, 43.972)), (' H 114  ASP  HA ', ' H 115  PRO  HA ', -0.417, (36.386, 2.639, 22.405)), (' A   4  LEU HD23', ' A  24  ALA  HA ', -0.415, (-4.662, -18.491, 40.897)), (' L  33  LEU HD12', ' L  89  GLN  O  ', -0.415, (39.069, -3.586, 9.871)), (' A 164  LEU HD21', ' A 187  VAL HG21', -0.412, (31.949, -30.833, 68.018)), (' B  57  THR  CG2', ' C   2  NAG  H2 ', -0.412, (9.001, -14.353, 31.517)), (' B  93  GLY  H  ', ' B  99  TYR  HE1', -0.411, (-0.865, -30.758, 30.759)), (' E 444  LYS  HA ', ' H  58  SER  OG ', -0.41, (22.035, -13.084, 19.905)), (' H 109  VAL HG11', ' L  50  ALA  HB2', -0.409, (32.235, 2.147, 8.065)), (' E 350  VAL  HA ', ' E 400  PHE  HB2', -0.409, (6.732, -16.657, 8.097)), (' H  40  ARG  HB3', ' H  50  ILE HD11', -0.409, (40.975, -12.093, 25.825)), (' B 110  LYS  HG2', ' B 111  ARG  N  ', -0.408, (33.591, -35.794, 42.045)), (' B  78  ARG HH12', ' H  85  SER  H  ', -0.405, (35.464, -21.457, 30.857)), (' E 502  GLY  O  ', ' E 506  GLN  HG3', -0.404, (14.625, -2.88, 14.313)), (' H  12  VAL  O  ', ' H 124  VAL  HA ', -0.404, (46.728, -18.884, 35.57)), (' E 336  CYS  HB2', ' E 338  PHE  CE2', -0.402, (-8.081, -22.431, 20.926)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.401, (1.138, -7.096, 14.434))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
