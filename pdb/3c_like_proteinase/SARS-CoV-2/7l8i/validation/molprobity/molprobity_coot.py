# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.025550053800564385, (0.04500000000000015, -18.315, 1.723)), ('B', '  50 ', 'LEU', 0.003477154904800629, (-19.67199999999999, -2.0840000000000005, 28.880999999999993)), ('B', ' 154 ', 'TYR', 0.035686650123301834, (19.828, -13.817999999999998, 25.838))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 269  LYS  O  ', ' A 273  GLN  HG3', -0.78, (3.092, 17.912, -6.891)), (' B 221  ASN  OD1', ' B 501  HOH  O  ', -0.722, (27.436, 19.568, 19.498)), (' A 225  THR  O  ', ' A 262  LEU HD13', -0.581, (-5.492, 12.011, -14.141)), (' B 163  HIS  NE2', ' B 401  AG7  O18', -0.556, (-5.543, -3.872, 19.481)), (' A 199  THR HG21', ' A 239  TYR  CZ ', -0.551, (9.119, 9.218, -4.14)), (' B  86  VAL HG23', ' B 179  GLY  HA2', -0.551, (-3.554, -9.733, 31.936)), (' B  41  HIS  ND1', ' B  41  HIS  O  ', -0.54, (-14.829, -10.113, 26.203)), (' B  27  LEU HD21', ' B  42  VAL  HB ', -0.513, (-11.007, -14.374, 24.863)), (' A 285  ALA  HB2', ' B 286  LEU HD21', -0.508, (7.894, 14.191, 10.415)), (' B  62  SER  HB3', ' B  64  HIS  CE1', -0.5, (-19.038, -25.692, 31.219)), (' B  10  SER  OG ', ' B  14  GLU  OE2', -0.493, (8.156, -15.399, 13.592)), (' B  25  THR HG23', ' B 401  AG7  H53', -0.492, (-14.922, -12.437, 20.199)), (' A  62  SER  N  ', ' A  65  ASN  OD1', -0.486, (38.378, -29.422, 0.29)), (' A  86  VAL HG23', ' A 179  GLY  HA2', -0.474, (23.915, -17.421, -5.454)), (' A   8  PHE  HE1', ' A 305  PHE  CE2', -0.474, (2.577, -13.248, 4.857)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.467, (30.78, -18.259, 2.493)), (' A 229  ASP  HA ', ' A 232  LEU HD12', -0.457, (2.02, 16.068, -17.724)), (' B 210  ALA  HB2', ' B 296  VAL HG13', -0.452, (21.994, 3.32, 16.816)), (' B  27  LEU HD13', ' B  39  PRO  HD2', -0.449, (-7.51, -13.732, 23.898)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.448, (-3.537, -4.513, 31.17)), (' A 294  PHE  HD1', ' A 298  ARG  HD3', -0.443, (0.247, -8.589, 0.669)), (' B  10  SER  HB2', ' B 115  LEU HD13', -0.441, (6.929, -13.673, 15.868)), (' B  81  SER  O  ', ' B  87  LEU HD12', -0.433, (-9.011, -18.034, 33.498)), (' A  41  HIS  HB3', ' A 401  AG7  C09', -0.428, (31.478, -14.245, 0.555)), (' A  61  LYS  HG3', ' A  65  ASN  CB ', -0.427, (37.939, -27.227, 1.77)), (' A 247  VAL HG22', ' A 261  VAL HG11', -0.425, (-3.382, 4.798, -10.842)), (' B  50  LEU  O  ', ' B 190  THR HG23', -0.417, (-17.769, 0.348, 30.726)), (' A  58  LEU HD22', ' A  80  HIS  HD2', -0.409, (33.57, -26.847, -3.623)), (' A  83  GLN  HB2', ' A  88  LYS  HE2', -0.404, (23.308, -24.199, -7.672)), (' A  58  LEU HD22', ' A  80  HIS  CD2', -0.402, (33.499, -26.996, -3.836)), (' B  68  VAL  O  ', ' B  74  GLN  HG3', -0.4, (-8.877, -27.001, 20.539))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
