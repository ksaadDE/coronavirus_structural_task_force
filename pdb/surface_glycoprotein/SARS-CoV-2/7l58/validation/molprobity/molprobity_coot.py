# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  62 ', 'VAL', 0.023470542452227867, (214.7, 154.416, 192.41)), ('A', '  81 ', 'ASN', 0.03010038387665276, (220.291, 147.43000000000006, 179.15)), ('A', ' 478 ', 'THR', 0.033931885681937855, (179.71900000000016, 235.308, 157.61300000000008)), ('A', '1139 ', 'ASP', 0.019870697837762664, (200.843, 200.40500000000014, 281.26100000000014)), ('B', '  26 ', 'PRO', 0.09160395225363539, (151.2080000000001, 221.0310000000001, 186.35600000000008)), ('B', ' 485 ', 'GLY', 0.07076682905932193, (214.817, 226.565, 117.41800000000003)), ('C', '  68 ', 'ILE', 0.00948232001491321, (249.402, 248.004, 177.7250000000001)), ('C', '  81 ', 'ASN', 0.09002967295781837, (242.9290000000002, 241.056, 171.72100000000003)), ('C', ' 478 ', 'THR', 0.09237721175990403, (189.237, 161.066, 160.262)), ('H', '  42 ', 'GLY', 0.06477134516416476, (213.46900000000014, 237.77400000000014, 90.66300000000005))]
data['omega'] = [('C', ' 344 ', 'ALA', None, (227.456, 183.46, 153.65200000000007)), ('C', ' 855 ', 'PHE', None, (197.283, 227.95100000000005, 202.811)), ('L', '   8 ', 'PRO', None, (206.23500000000007, 222.7690000000001, 87.724)), ('L', '  95 ', 'PRO', None, (220.391, 228.984, 108.60400000000001))]
data['rota'] = [('A', '1134 ', 'ASN', 0.0, (188.6880000000001, 191.72800000000012, 276.319)), ('B', ' 282 ', 'ASN', 0.19087010382306396, (166.067, 187.983, 201.08000000000007)), ('B', '1134 ', 'ASN', 0.002531336201692742, (197.94, 229.41100000000012, 274.591)), ('C', '1074 ', 'ASN', 0.025793061061573173, (231.341, 215.24500000000003, 259.3320000000001))]
data['cbeta'] = [('A', ' 175 ', 'PHE', ' ', 0.26395319109971077, (235.63400000000007, 160.74, 182.46200000000005)), ('H', '  69 ', 'MET', ' ', 0.2676760398676309, (216.88900000000012, 242.427, 113.058))]
data['probe'] = [(' A  31  SER  CB ', ' A  60  SER  H  ', -0.896, (215.86, 158.79, 196.341)), (' A  31  SER  CB ', ' A  60  SER  N  ', -0.744, (215.469, 158.467, 197.278)), (' A 126  VAL  O  ', ' A 172  SER  N  ', -0.65, (236.206, 162.314, 172.881)), (' A 318  PHE  N  ', ' A 593  GLY  O  ', -0.633, (197.011, 174.942, 203.135)), (' G   1  NAG  H61', ' G   2  NAG  HN2', -0.626, (221.633, 233.523, 252.59)), (' B  68  ILE  N  ', ' B  78  ARG  O  ', -0.62, (140.745, 212.758, 181.074)), (' B 778  THR  O  ', ' B 782  PHE  N  ', -0.598, (198.13, 187.542, 234.982)), (' B1134  ASN  N  ', ' B1134  ASN  OD1', -0.597, (198.024, 230.978, 273.273)), (' A 324  GLU  O  ', ' A 540  ASN  N  ', -0.581, (187.883, 172.173, 188.353)), (' A1302  NAG  H82', ' A1302  NAG  O3 ', -0.548, (167.85, 169.958, 176.323)), (' L  27D ASP  O  ', ' L  29  GLY  N  ', -0.545, (209.484, 212.902, 113.352)), (' B  31  SER  N  ', ' B  60  SER  O  ', -0.533, (158.206, 214.005, 194.69)), (' A 747  THR  O  ', ' A 751  ASN  N  ', -0.527, (222.674, 210.443, 188.476)), (' C  67  ALA  N  ', ' C 262  ALA  O  ', -0.527, (245.212, 247.367, 177.655)), (' A1134  ASN  N  ', ' A1134  ASN  OD1', -0.525, (187.271, 191.191, 275.199)), (' A 418  ILE  O  ', ' A 422  ASN  N  ', -0.523, (186.504, 210.857, 160.805)), (' C  26  PRO  HG2', ' C1301  NAG  H61', -0.52, (248.082, 232.532, 182.725)), (' B 675  GLN  O  ', ' B 691  SER  N  ', -0.517, (166.954, 222.27, 220.779)), (' A 143  VAL  O  ', ' A 246  ARG  N  ', -0.513, (234.366, 140.788, 174.579)), (' A 417  LYS  O  ', ' A 421  TYR  N  ', -0.506, (187.951, 213.348, 162.03)), (' A 553  THR  O  ', ' A 586  ASP  N  ', -0.502, (175.786, 176.955, 194.738)), (' L  61  ARG  O  ', ' L  76  SER  N  ', -0.501, (192.841, 220.766, 94.552)), (' C 716  THR  N  ', ' C1071  GLN  O  ', -0.497, (224.339, 220.763, 256.576)), (' F   1  NAG  H61', ' F   2  NAG  C7 ', -0.484, (202.412, 237.405, 272.125)), (' B 327  VAL  O  ', ' B 531  THR  N  ', -0.478, (193.431, 238.974, 178.694)), (' A  51  THR  O  ', ' A 275  PHE  N  ', -0.467, (216.679, 173.902, 196.833)), (' A 553  THR  N  ', ' A 586  ASP  O  ', -0.466, (178.691, 175.343, 194.918)), (' C 612  TYR  O  ', ' C 649  CYS  N  ', -0.452, (239.452, 210.01, 210.154)), (' A  51  THR  N  ', ' A 275  PHE  O  ', -0.452, (218.658, 175.66, 197.642)), (' D   1  NAG  H61', ' D   2  NAG  C7 ', -0.451, (220.219, 178.746, 256.579)), (' H   3  GLN  O  ', ' H  25  SER  N  ', -0.444, (199.84, 243.631, 115.995)), (' H  33  TYR  N  ', ' H  95  VAL  O  ', -0.442, (207.739, 234.192, 117.065)), (' B1096  VAL  O  ', ' B1103  PHE  N  ', -0.441, (191.618, 222.44, 269.151)), (' B 380  TYR  O  ', ' B 431  GLY  N  ', -0.439, (200.44, 223.456, 154.78)), (' A  46  SER  N  ', ' A 279  TYR  O  ', -0.438, (230.395, 178.153, 201.912)), (' B 551  VAL  N  ', ' B 588  THR  O  ', -0.436, (192.325, 233.326, 194.906)), (' C 404  GLY  N  ', ' C 506  GLN  O  ', -0.435, (210.061, 188.644, 151.026)), (' L  11  LEU  N  ', ' L 103  LYS  O  ', -0.434, (201.859, 227.735, 87.229)), (' A  69  HIS  O  ', ' A  78  ARG  N  ', -0.433, (222.884, 136.445, 182.46)), (' C 747  THR  O  ', ' C 751  ASN  N  ', -0.432, (189.296, 212.573, 187.319)), (' L  36  TYR  O  ', ' L  87  TYR  N  ', -0.429, (204.701, 228.683, 97.945)), (' B 543  PHE  N  ', ' B 546  LEU  O  ', -0.427, (199.067, 233.506, 183.661)), (' B 126  VAL  O  ', ' B 172  SER  N  ', -0.424, (154.811, 191.425, 172.424)), (' C 140  PHE  O  ', ' C 159  VAL  N  ', -0.424, (236.686, 246.79, 162.519)), (' H  52  ASN  O  ', ' H  55  GLY  N  ', -0.423, (215.413, 237.985, 122.295)), (' A 711  SER  HA ', ' A1075  PHE  O  ', -0.423, (194.109, 183.78, 262.753)), (' B 647  ALA  HB2', ' B 668  ALA  HB3', -0.413, (186.401, 228.563, 217.15)), (' B 253  ASP  O  ', ' B 257  GLY  N  ', -0.407, (133.844, 207.56, 166.928)), (' B 380  TYR  N  ', ' B 431  GLY  O  ', -0.406, (198.522, 224.465, 152.884)), (' C 990  GLU  O  ', ' C 994  ASP  N  ', -0.405, (199.344, 209.218, 184.342)), (' C  67  ALA  HB3', ' C 263  ALA  HB3', -0.404, (243.846, 247.905, 176.035)), (' B 391  CYS  SG ', ' B 522  ALA  HB1', -0.404, (207.572, 230.473, 167.381)), (' A 701  ALA  O  ', ' B 788  ILE  N  ', -0.401, (197.128, 178.2, 242.431))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
