# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (172.314, 114.176, 126.86500000000002)), ('B', ' 183 ', 'PRO', None, (176.418, 138.389, 137.57)), ('D', ' 505 ', 'PRO', None, (127.931, 186.072, 126.86400000000002)), ('E', ' 183 ', 'PRO', None, (123.831, 161.858, 137.568))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' C  56  LEU  CD2', ' F  56  LEU HD22', -1.506, (150.071, 150.893, 143.044)), (' C  56  LEU HD22', ' F  56  LEU  CD2', -1.49, (150.384, 149.265, 143.167)), (' C  50  GLU  CD ', ' F   2  LYS  HD2', -1.347, (156.371, 152.747, 152.859)), (' C  56  LEU HD21', ' F  56  LEU  CD1', -1.316, (149.95, 151.423, 141.501)), (' C   2  LYS  HD2', ' F  50  GLU  CD ', -1.302, (144.281, 147.213, 152.728)), (' C  56  LEU  CD1', ' F  56  LEU HD21', -1.301, (150.301, 148.933, 141.5)), (' C  50  GLU  CD ', ' F   2  LYS  CD ', -1.269, (156.788, 153.836, 153.629)), (' C   2  LYS  CD ', ' F  50  GLU  CD ', -1.247, (143.39, 146.449, 153.746)), (' C  56  LEU  CD2', ' F  56  LEU  CD2', -1.21, (150.523, 150.438, 142.443)), (' C  56  LEU  CD1', ' F  56  LEU HD11', -1.202, (151.038, 150.246, 140.504)), (' C   2  LYS  HD2', ' F  50  GLU  OE1', -1.199, (143.007, 147.328, 152.94)), (' C  56  LEU HD11', ' F  56  LEU  CD1', -1.196, (149.214, 150.04, 140.528)), (' C  50  GLU  OE1', ' F   2  LYS  HD2', -1.173, (156.695, 153.596, 152.312)), (' C  50  GLU  HG3', ' F   2  LYS  HE3', -1.173, (157.42, 151.016, 154.745)), (' C   2  LYS  HE3', ' F  50  GLU  CG ', -1.131, (142.51, 149.036, 153.892)), (' C  50  GLU  CG ', ' F   2  LYS  HE3', -1.13, (157.492, 151.36, 153.815)), (' C   2  LYS  HE3', ' F  50  GLU  HG3', -1.112, (142.111, 148.297, 154.329)), (' C  56  LEU HD13', ' F  56  LEU  CD2', -1.062, (149.548, 148.592, 142.296)), (' C  52  MET  HE1', ' F  53  VAL  CG2', -1.061, (148.327, 147.228, 148.748)), (' C  53  VAL  CG2', ' F  52  MET  HE1', -1.059, (152.488, 152.502, 148.662)), (' C  50  GLU  CD ', ' F   2  LYS  CE ', -1.058, (157.312, 152.109, 153.312)), (' C  56  LEU  CD2', ' F  56  LEU HD13', -1.046, (150.727, 151.369, 142.036)), (' C   2  LYS  CE ', ' F  50  GLU  CD ', -1.045, (142.449, 147.659, 154.044)), (' C   2  LYS  HD2', ' F  50  GLU  OE2', -1.032, (144.732, 147.012, 153.159)), (' C  56  LEU  CD1', ' F  56  LEU  CD2', -1.012, (149.529, 148.936, 141.996)), (' C  50  GLU  OE2', ' F   2  LYS  HD2', -1.009, (155.526, 153.132, 153.359)), (' C  13  LEU HD21', ' F  60  LEU HD11', -1.009, (149.148, 146.143, 140.173)), (' C  56  LEU  CD2', ' F  56  LEU  CD1', -0.998, (150.748, 151.138, 142.023)), (' C  60  LEU HD11', ' F  13  LEU HD21', -0.996, (151.067, 154.066, 140.156)), (' C   2  LYS  CD ', ' F  50  GLU  OE2', -0.971, (144.725, 146.744, 154.141)), (' C  53  VAL HG22', ' F  52  MET  CE ', -0.965, (151.246, 152.411, 147.902)), (' C  52  MET  CE ', ' F  53  VAL HG22', -0.964, (149.005, 147.873, 147.856)), (' C  50  GLU  OE2', ' F   2  LYS  CG ', -0.961, (155.665, 154.222, 154.521)), (' C   2  LYS  CG ', ' F  50  GLU  OE2', -0.958, (144.855, 146.401, 154.128)), (' C   2  LYS  CD ', ' F  50  GLU  OE1', -0.953, (143.241, 146.217, 153.162)), (' C  56  LEU HD13', ' F  56  LEU HD21', -0.922, (151.064, 148.426, 141.882)), (' C  50  GLU  OE2', ' F   2  LYS  CD ', -0.917, (155.969, 154.183, 154.006)), (' C  56  LEU HD21', ' F  56  LEU HD13', -0.915, (149.816, 151.637, 141.537)), (' C  50  GLU  OE1', ' F   2  LYS  CD ', -0.913, (157.019, 154.082, 153.036)), (' D 206  THR  OG1', ' D 209  ASN  OD1', -0.877, (106.081, 198.893, 176.496)), (' A 206  THR  OG1', ' A 209  ASN  OD1', -0.872, (194.384, 101.87, 176.831)), (' C   2  LYS  HE3', ' F  50  GLU  CD ', -0.859, (143.251, 148.395, 153.864)), (' C  53  VAL HG21', ' F  52  MET  HE1', -0.853, (152.676, 152.724, 149.41)), (' C  52  MET  HE1', ' F  53  VAL HG21', -0.842, (147.582, 147.387, 149.151)), (' C  50  GLU  CD ', ' F   2  LYS  HE3', -0.836, (156.999, 151.928, 153.84)), (' C  50  GLU  OE1', ' F   2  LYS  CE ', -0.834, (157.979, 153.45, 153.25)), (' C  56  LEU  CG ', ' F  56  LEU  CD2', -0.831, (150.523, 150.254, 142.225)), (' D 239  SER  OG ', ' D 465  ASP  OD1', -0.826, (114.925, 199.758, 163.79)), (' C   2  LYS  CE ', ' F  50  GLU  OE1', -0.826, (142.816, 147.808, 153.031)), (' D 804  ASP  OD2', ' D 806  THR  OG1', -0.825, (153.831, 189.777, 174.242)), (' A 239  SER  OG ', ' A 465  ASP  OD1', -0.825, (185.314, 100.497, 163.727)), (' C  52  MET  HE1', ' F  53  VAL HG22', -0.823, (147.917, 147.812, 148.48)), (' C  56  LEU  CD2', ' F  56  LEU  CG ', -0.82, (149.195, 150.239, 142.833)), (' C  56  LEU HD21', ' F  56  LEU  CG ', -0.818, (149.227, 150.48, 142.304)), (' A 804  ASP  OD2', ' A 806  THR  OG1', -0.813, (146.387, 110.417, 174.256)), (' C  56  LEU HD11', ' F  56  LEU HD11', -0.813, (149.981, 149.283, 140.712)), (' C  56  LEU  CG ', ' F  56  LEU HD21', -0.807, (151.024, 149.803, 142.382)), (' C  53  VAL  CG2', ' F  52  MET  CE ', -0.806, (151.261, 151.798, 149.068)), (' C  52  MET  CE ', ' F  53  VAL  CG2', -0.804, (148.976, 148.313, 149.05)), (' C  56  LEU  CD1', ' F  56  LEU  CD1', -0.793, (150.136, 150.761, 141.581)), (' C  53  VAL HG22', ' F  52  MET  HE1', -0.787, (152.226, 152.276, 148.446)), (' C   2  LYS  CE ', ' F  50  GLU  CG ', -0.782, (142.266, 148.222, 153.953)), (' A 452  ASP  OD2', ' A 556  THR  OG1', -0.778, (168.993, 122.173, 143.88)), (' C  50  GLU  OE1', ' F   2  LYS  NZ ', -0.775, (158.277, 152.484, 152.967)), (' C  13  LEU  CD2', ' F  60  LEU HD11', -0.773, (149.739, 145.962, 140.152)), (' C  60  LEU HD11', ' F  13  LEU  CD2', -0.772, (150.513, 154.321, 140.177)), (' C   2  LYS  NZ ', ' F  50  GLU  OE1', -0.769, (142.05, 147.333, 153.211)), (' D 452  ASP  OD2', ' D 556  THR  OG1', -0.769, (131.308, 177.974, 143.795)), (' D 122  TYR  OH ', ' D 144  GLU  OE1', -0.765, (111.616, 180.641, 180.275)), (' C  49  PHE  HB3', ' F  49  PHE  CD1', -0.761, (151.059, 150.29, 152.139)), (' C  49  PHE  CD1', ' F  49  PHE  HB3', -0.76, (149.022, 149.836, 152.087)), (' A 122  TYR  OH ', ' A 144  GLU  OE1', -0.758, (188.379, 119.562, 180.405)), (' C   2  LYS  HG3', ' F  50  GLU  OE2', -0.746, (144.165, 147.266, 155.268)), (' C  52  MET  HE3', ' F  53  VAL HG22', -0.743, (149.147, 148.113, 148.117)), (' C  50  GLU  OE2', ' F   2  LYS  HG3', -0.741, (156.041, 153.131, 155.281)), (' C  53  VAL HG22', ' F  52  MET  HE3', -0.736, (151.086, 151.758, 148.124)), (' A 631  ARG  NH1', ' A 635  SER  OG ', -0.72, (173.662, 103.165, 145.923)), (' D 631  ARG  NH1', ' D 635  SER  OG ', -0.717, (127.242, 196.865, 146.039)), (' C  50  GLU  CG ', ' F   2  LYS  CE ', -0.699, (158.013, 151.952, 153.795)), (' E 131  VAL HG22', ' E 185  ILE  CD1', -0.696, (119.882, 167.192, 133.675)), (' B 131  VAL HG22', ' B 185  ILE  CD1', -0.692, (179.805, 133.2, 133.224)), (' F   7  LYS  NZ ', ' F  40  LEU  O  ', -0.665, (146.793, 163.358, 153.74)), (' C  56  LEU  CG ', ' F  56  LEU  CD1', -0.664, (150.824, 151.146, 141.78)), (' C  56  LEU  CD1', ' F  56  LEU  CG ', -0.664, (149.486, 149.441, 142.018)), (' C  14  LEU HD22', ' C  36  HIS  CG ', -0.664, (156.698, 137.772, 143.828)), (' C   7  LYS  NZ ', ' C  40  LEU  O  ', -0.663, (153.53, 136.962, 153.809)), (' A 531  THR HG21', ' A 567  THR HG21', -0.662, (173.384, 99.979, 131.532)), (' F  14  LEU HD22', ' F  36  HIS  CG ', -0.66, (143.61, 161.756, 143.832)), (' C  49  PHE  HB3', ' F  49  PHE  CE1', -0.658, (152.381, 150.687, 152.363)), (' A 867  TYR  OH ', ' A 922  GLU  OE1', -0.658, (133.225, 112.327, 157.211)), (' C  49  PHE  CE1', ' F  49  PHE  HB3', -0.658, (148.428, 149.342, 152.505)), (' D 531  THR HG21', ' D 567  THR HG21', -0.655, (127.439, 200.317, 131.663)), (' D 867  TYR  OH ', ' D 922  GLU  OE1', -0.645, (167.022, 188.036, 157.429)), (' A 335  VAL  O  ', ' A 338  VAL HG12', -0.633, (185.204, 106.518, 112.356)), (' D 335  VAL  O  ', ' D 338  VAL HG12', -0.631, (115.376, 193.797, 112.48)), (' D 299  VAL HG22', ' D 652  PHE  CE2', -0.621, (114.141, 203.206, 139.697)), (' A 478  LYS  NZ ', ' A 743  ASN  OD1', -0.62, (167.89, 87.054, 161.606)), (' C  56  LEU  CG ', ' F  56  LEU HD11', -0.619, (151.036, 150.737, 141.28)), (' A 299  VAL HG22', ' A 652  PHE  CE2', -0.614, (185.554, 96.656, 139.829)), (' D 503  GLY  O  ', ' D 507  ASN  N  ', -0.607, (131.942, 185.988, 126.691)), (' A 503  GLY  O  ', ' A 507  ASN  N  ', -0.604, (168.122, 114.134, 126.751)), (' F   5  ASP  O  ', ' F   9  THR HG23', -0.595, (153.458, 158.01, 147.61)), (' D 478  LYS  NZ ', ' D 743  ASN  OD1', -0.59, (132.47, 213.106, 161.675)), (' C   5  ASP  O  ', ' C   9  THR HG23', -0.585, (146.255, 142.324, 147.178)), (' A 412  PRO  HB3', ' C  14  LEU HD23', -0.58, (156.342, 136.782, 141.373)), (' D 412  PRO  HB3', ' F  14  LEU HD23', -0.577, (143.793, 163.524, 141.281)), (' C  50  GLU  OE2', ' F   2  LYS  CB ', -0.561, (155.156, 154.246, 154.522)), (' C  56  LEU HD11', ' F  56  LEU  CG ', -0.56, (149.363, 149.351, 141.485)), (' B 120  ILE  O  ', ' B 124  THR  OG1', -0.552, (191.3, 119.555, 126.39)), (' A 885  LEU HD21', ' A 921  TYR  CE2', -0.551, (132.693, 117.467, 149.319)), (' C   2  LYS  CB ', ' F  50  GLU  OE2', -0.55, (145.219, 145.994, 154.405)), (' D 887  TYR  CZ ', ' D 891  LEU HD11', -0.549, (164.606, 171.435, 142.467)), (' D 885  LEU HD21', ' D 921  TYR  CE2', -0.548, (167.195, 183.179, 149.19)), (' A 887  TYR  CZ ', ' A 891  LEU HD11', -0.546, (135.737, 128.676, 142.533)), (' D 892  HIS  CE1', ' D 912  THR HG21', -0.545, (173.246, 182.028, 138.283)), (' A 892  HIS  CE1', ' A 912  THR HG21', -0.542, (126.789, 118.717, 138.061)), (' A 612  PRO  CG ', ' A 805  LEU HD11', -0.537, (152.527, 103.194, 173.718)), (' A 749  LEU  O  ', ' A 753  PHE  N  ', -0.536, (162.406, 98.612, 169.316)), (' D 726  ARG  NH1', ' D 744  GLU  OE1', -0.536, (127.744, 213.246, 172.742)), (' E 131  VAL HG22', ' E 185  ILE HD12', -0.533, (120.004, 167.21, 133.046)), (' A 726  ARG  NH1', ' A 744  GLU  OE1', -0.532, (172.451, 86.844, 172.703)), (' D 612  PRO  CG ', ' D 805  LEU HD11', -0.531, (147.283, 197.104, 173.984)), (' F   5  ASP  OD1', ' F   6  VAL  N  ', -0.53, (154.556, 157.48, 150.946)), (' C   5  ASP  OD1', ' C   6  VAL  N  ', -0.526, (146.418, 142.914, 151.057)), (' D 472  VAL  O  ', ' D 476  VAL HG23', -0.525, (127.96, 202.443, 159.662)), (' C  50  GLU  OE2', ' F   2  LYS  HB3', -0.525, (155.016, 153.804, 154.182)), (' C  59  LEU  O  ', ' C  59  LEU HD23', -0.519, (154.736, 149.812, 135.649)), (' A 885  LEU HD22', ' A 916  TRP  HA ', -0.518, (130.969, 118.655, 147.966)), (' C  50  GLU  CD ', ' F   2  LYS  CG ', -0.517, (156.484, 153.178, 154.898)), (' B 131  VAL HG22', ' B 185  ILE HD12', -0.516, (179.996, 133.068, 133.09)), (' D 749  LEU  O  ', ' D 753  PHE  N  ', -0.515, (137.944, 201.643, 169.222)), (' C   2  LYS  HB3', ' F  50  GLU  OE2', -0.515, (145.348, 146.566, 154.261)), (' A 472  VAL  O  ', ' A 476  VAL HG23', -0.514, (171.804, 97.976, 159.716)), (' E 120  ILE  O  ', ' E 124  THR  OG1', -0.514, (108.697, 180.815, 126.317)), (' D 885  LEU HD22', ' D 916  TRP  HA ', -0.512, (169.275, 181.696, 147.989)), (' D 299  VAL HG22', ' D 652  PHE  HE2', -0.511, (114.668, 203.204, 139.569)), (' A 259  THR  O  ', ' A 259  THR HG22', -0.509, (204.126, 115.164, 156.566)), (' F  59  LEU  O  ', ' F  59  LEU HD23', -0.508, (145.817, 149.875, 135.854)), (' D 259  THR  O  ', ' D 259  THR HG22', -0.494, (95.898, 185.22, 156.665)), (' A 734  ASN  ND2', ' A 736  ASP  O  ', -0.491, (181.784, 87.806, 164.243)), (' F  22  VAL HG23', ' F  28  LEU HD23', -0.489, (138.358, 154.987, 134.915)), (' A 887  TYR  O  ', ' A 891  LEU HD13', -0.488, (133.378, 126.094, 143.223)), (' A 912  THR  HG1', ' A 915  TYR  HD2', -0.486, (130.245, 116.958, 140.175)), (' D 734  ASN  ND2', ' D 736  ASP  O  ', -0.483, (118.772, 212.359, 164.318)), (' A 462  THR  OG1', ' A 791  ASN  OD1', -0.481, (181.213, 113.375, 156.524)), (' C  22  VAL HG23', ' C  28  LEU HD23', -0.48, (161.932, 145.127, 135.078)), (' B 159  VAL HG22', ' B 186  VAL HG23', -0.48, (186.371, 139.455, 129.757)), (' A 299  VAL HG22', ' A 652  PHE  HE2', -0.48, (185.608, 97.178, 139.596)), (' D 544  LEU HD23', ' D 556  THR HG22', -0.48, (132.851, 176.232, 140.764)), (' D 887  TYR  O  ', ' D 891  LEU HD13', -0.478, (166.749, 173.817, 142.922)), (' C  49  PHE  HZ ', ' F  50  GLU  OE2', -0.477, (146.249, 147.343, 153.697)), (' D 462  THR  OG1', ' D 791  ASN  OD1', -0.475, (118.914, 186.884, 156.609)), (' D 155  ASP  OD1', ' D 156  TYR  N  ', -0.472, (113.518, 166.873, 170.497)), (' E 159  VAL HG22', ' E 186  VAL HG23', -0.472, (114.153, 160.413, 129.906)), (' C  50  GLU  OE2', ' F  49  PHE  HZ ', -0.47, (154.007, 153.067, 153.703)), (' A 155  ASP  OD1', ' A 156  TYR  N  ', -0.469, (186.441, 133.008, 170.324)), (' A 615  MET  HE3', ' A 766  PHE  CD1', -0.467, (161.615, 106.807, 171.387)), (' D 615  MET  HE3', ' D 766  PHE  CD1', -0.465, (138.625, 193.408, 171.431)), (' A 544  LEU HD23', ' A 556  THR HG22', -0.465, (167.396, 123.984, 140.686)), (' D 912  THR  HG1', ' D 915  TYR  HD2', -0.464, (169.617, 183.341, 140.444)), (' F  59  LEU  C  ', ' F  59  LEU HD23', -0.463, (145.843, 150.067, 136.345)), (' A 613  HIS  CD2', ' A 768  SER  OG ', -0.462, (157.784, 106.377, 177.915)), (' C  59  LEU  C  ', ' C  59  LEU HD23', -0.462, (154.595, 150.032, 136.164)), (' A 276  THR  O  ', ' A 280  LEU HD23', -0.457, (198.789, 100.498, 146.452)), (' D 613  HIS  CD2', ' D 768  SER  OG ', -0.454, (142.22, 194.122, 178.304)), (' D 712  GLY  HA2', ' D 715  ILE HD12', -0.453, (124.754, 201.854, 181.391)), (' A 712  GLY  HA2', ' A 715  ILE HD12', -0.452, (175.119, 98.197, 181.153)), (' D 209  ASN  HB3', ' D 218  ASP  HB2', -0.45, (102.38, 197.788, 178.428)), (' D 470  LEU  O  ', ' D 473  VAL HG12', -0.449, (122.946, 204.87, 158.702)), (' D 837  ILE  O  ', ' D 884  TYR  OH ', -0.447, (156.734, 175.599, 149.586)), (' A 470  LEU  O  ', ' A 473  VAL HG12', -0.446, (177.108, 95.708, 158.455)), (' A 837  ILE  O  ', ' A 884  TYR  OH ', -0.445, (143.082, 124.448, 149.597)), (' A 818  MET  HG3', ' A 820  VAL HG13', -0.445, (140.535, 112.534, 164.551)), (' D 276  THR  O  ', ' D 280  LEU HD23', -0.443, (101.673, 199.354, 146.261)), (' D 818  MET  HG3', ' D 820  VAL HG13', -0.442, (160.148, 187.822, 164.613)), (' A 209  ASN  HB3', ' A 218  ASP  HB2', -0.441, (197.955, 102.489, 178.361)), (' F   2  LYS  O  ', ' F   5  ASP  OD1', -0.437, (154.149, 156.936, 152.5)), (' D 847  ILE  O  ', ' D 850  THR HG22', -0.437, (156.486, 170.79, 133.633)), (' A 755  MET  HG2', ' A 764  VAL HG22', -0.437, (162.192, 103.86, 164.821)), (' A 847  ILE  O  ', ' A 850  THR HG22', -0.436, (143.762, 129.498, 133.608)), (' D 331  ARG  NE ', ' E 114  CYS  SG ', -0.436, (106.952, 197.326, 128.45)), (' C   2  LYS  O  ', ' C   5  ASP  OD1', -0.433, (145.918, 143.255, 152.09)), (' A 368  PHE  O  ', ' A 372  LEU HD13', -0.431, (171.441, 103.599, 121.33)), (' D 631  ARG  HD3', ' D 680  THR HG22', -0.43, (127.639, 192.171, 148.345)), (' A 211  ASP  OD1', ' A 213  ASN  N  ', -0.427, (199.748, 112.62, 174.215)), (' D 755  MET  HG2', ' D 764  VAL HG22', -0.425, (138.094, 196.337, 164.675)), (' A 331  ARG  NE ', ' B 114  CYS  SG ', -0.424, (193.416, 103.008, 128.351)), (' D 611  ASN  O  ', ' D 768  SER  N  ', -0.423, (141.468, 196.582, 177.441)), (' F  17  LEU  O  ', ' F  22  VAL HG12', -0.423, (141.801, 158.821, 134.361)), (' C  17  LEU  O  ', ' C  22  VAL HG12', -0.422, (158.057, 141.5, 134.215)), (' A 626  MET  CE ', ' A 680  THR HG21', -0.422, (171.248, 109.467, 150.403)), (' D 563  CYS  O  ', ' D 567  THR HG23', -0.422, (129.683, 198.048, 131.732)), (' D 211  ASP  OD1', ' D 213  ASN  N  ', -0.422, (100.644, 187.351, 173.909)), (' D 691  ASN  HB3', ' D 759  SER  O  ', -0.421, (134.99, 191.337, 152.52)), (' A 631  ARG  HD3', ' A 680  THR HG22', -0.42, (172.647, 108.472, 148.142)), (' C  34  GLN  HA ', ' C  34  GLN  OE1', -0.419, (164.085, 138.797, 147.377)), (' E 136  ASN  HA ', ' E 139  LYS  NZ ', -0.418, (112.33, 157.552, 145.277)), (' D 480  PHE  CZ ', ' D 693  VAL HG22', -0.418, (133.474, 200.8, 153.296)), (' B 136  ASN  HA ', ' B 139  LYS  NZ ', -0.417, (187.626, 142.503, 145.046)), (' D 368  PHE  O  ', ' D 372  LEU HD13', -0.416, (128.389, 196.688, 121.14)), (' A 691  ASN  HB3', ' A 759  SER  O  ', -0.416, (165.211, 108.822, 152.483)), (' D 238  TYR  O  ', ' D 242  MET  HG3', -0.416, (110.937, 196.518, 162.871)), (' F  34  GLN  HA ', ' F  34  GLN  OE1', -0.414, (135.778, 161.451, 147.604)), (' A 426  LYS  NZ ', ' A 886  GLN  OE1', -0.413, (130.367, 128.633, 152.262)), (' A 563  CYS  O  ', ' A 567  THR HG23', -0.413, (170.618, 101.786, 131.61)), (' A 480  PHE  CZ ', ' A 693  VAL HG22', -0.412, (166.766, 99.503, 153.361)), (' D 291  ASP  N  ', ' D 291  ASP  OD1', -0.412, (106.164, 207.099, 161.181)), (' A 291  ASP  N  ', ' A 291  ASP  OD1', -0.411, (194.33, 93.334, 160.866)), (' D 626  MET  CE ', ' D 680  THR HG21', -0.411, (128.867, 190.896, 150.411)), (' C  13  LEU  CD2', ' F  60  LEU  CD1', -0.409, (148.997, 145.566, 140.217)), (' D 426  LYS  NZ ', ' D 886  GLN  OE1', -0.409, (169.713, 172.0, 152.235)), (' A 816  HIS  HB2', ' A 831  TYR  CZ ', -0.408, (146.672, 117.495, 162.827)), (' D 816  HIS  HB2', ' D 831  TYR  CZ ', -0.406, (153.57, 182.723, 162.783)), (' A 611  ASN  O  ', ' A 768  SER  N  ', -0.403, (158.753, 103.759, 177.456)), (' A 767  ASN  OD1', ' A 768  SER  N  ', -0.403, (159.988, 102.199, 178.303)), (' D 763  VAL HG23', ' D 812  PHE  CD1', -0.403, (144.078, 190.753, 161.015)), (' D 368  PHE  CE2', ' D 372  LEU HD11', -0.402, (131.234, 195.795, 121.074)), (' B 159  VAL HG11', ' B 172  ILE HD11', -0.401, (184.278, 142.896, 132.015)), (' D 405  VAL HG21', ' E 185  ILE HD12', -0.401, (120.868, 167.514, 132.529)), (' D 767  ASN  OD1', ' D 768  SER  N  ', -0.4, (140.113, 198.07, 178.189)), (' B 136  ASN  OD1', ' B 139  LYS  NZ ', -0.4, (187.131, 143.066, 145.538)), (' A 507  ASN  OD1', ' A 508  LYS  N  ', -0.4, (167.788, 117.148, 124.908))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
