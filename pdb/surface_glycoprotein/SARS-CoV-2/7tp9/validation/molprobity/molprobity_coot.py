# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  98 ', 'SER', 0.03403705953975957, (127.70400000000011, 218.547, 141.984)), ('A', ' 142 ', 'ASP', 0.022838278121122182, (130.034, 223.732, 128.931)), ('A', ' 628 ', 'GLN', 0.010872352170773316, (165.03800000000007, 195.449, 152.70800000000003)), ('B', '  97 ', 'LYS', 0.022264174701829828, (226.05400000000006, 164.487, 140.215)), ('B', ' 110 ', 'LEU', 0.04138765866598836, (208.61300000000006, 154.646, 119.744)), ('B', ' 123 ', 'ALA', 0.023358072233488576, (221.70100000000005, 174.242, 127.499)), ('B', ' 198 ', 'ASP', 0.0029493028944058267, (192.61400000000006, 166.056, 130.06000000000003)), ('B', ' 397 ', 'ALA', 0.025954456265989117, (154.304, 132.169, 108.744)), ('B', ' 421 ', 'TYR', 0.02303903572215773, (149.75900000000004, 136.85399999999996, 98.66)), ('B', ' 442 ', 'ASP', 0.045289145989447416, (160.64100000000005, 122.32099999999997, 98.454)), ('B', ' 511 ', 'VAL', 0.03381574952307652, (161.683, 128.325, 107.756)), ('B', ' 620 ', 'VAL', 0.09720410879816377, (187.91900000000007, 135.276, 155.798)), ('B', ' 621 ', 'PRO', 0.0, (190.894, 136.206, 153.535)), ('B', ' 630 ', 'THR', 0.08144196403873775, (201.86200000000005, 144.91, 150.494)), ('C', '  97 ', 'LYS', 0.047714254966411476, (131.33200000000005, 108.742, 138.906)), ('C', ' 110 ', 'LEU', 0.03405753110946737, (130.03300000000004, 128.551, 121.973)), ('C', ' 137 ', 'ASN', 0.025446159511201993, (125.6530000000001, 119.78599999999997, 122.48)), ('C', ' 446 ', 'GLY', 0.020317824662786046, (154.214, 185.001, 93.684)), ('C', ' 640 ', 'SER', 0.00641120450001586, (120.76200000000003, 142.9, 167.534)), ('C', ' 814 ', 'LYS', 0.03272402702752893, (173.27200000000002, 129.414, 186.776)), ('C', '1041 ', 'ASP', 0.023276682450968592, (154.54300000000006, 153.947, 195.784))]
data['omega'] = []
data['rota'] = [('A', ' 318 ', 'PHE', 0.17441697199034847, (169.046, 191.809, 157.185)), ('A', ' 350 ', 'VAL', 0.020133843472308045, (181.81100000000006, 159.868, 110.314)), ('A', ' 546 ', 'LEU', 0.0819718188479723, (182.68700000000007, 182.409, 138.216)), ('A', ' 603 ', 'ASN', 0.1335571031477739, (147.676, 197.16699999999994, 174.125)), ('A', ' 634 ', 'ARG', 0.008771092411568853, (165.043, 203.682, 157.945)), ('A', ' 760 ', 'CYS', 0.05771395182024796, (150.284, 155.072, 155.127)), ('A', '1082 ', 'CYS', 0.1100454918161814, (181.35399999999996, 170.828, 229.88700000000003)), ('B', ' 122 ', 'ASN', 0.0569557514771718, (219.58500000000006, 171.016, 127.71400000000001)), ('B', ' 212 ', 'LEU', 0.10768937974651838, (222.09800000000007, 159.311, 151.26)), ('B', ' 586 ', 'ASP', 0.11216370269483689, (167.74700000000007, 125.719, 150.09500000000003)), ('B', ' 603 ', 'ASN', 0.2095949701714134, (200.31700000000006, 157.915, 170.879)), ('B', ' 634 ', 'ARG', 0.14148245949939706, (198.60500000000005, 140.949, 154.266)), ('B', ' 638 ', 'THR', 0.11182741454405154, (198.14200000000005, 135.42799999999994, 156.166)), ('B', ' 738 ', 'CYS', 0.050941155663865235, (166.20000000000005, 178.378, 155.407)), ('C', '  62 ', 'VAL', 0.26660629428612215, (125.3420000000001, 128.224, 144.191)), ('C', '  96 ', 'GLU', 0.032451585519463144, (129.849, 112.166, 139.69)), ('C', ' 525 ', 'CYS', 0.19687766289567055, (130.302, 176.895, 128.659)), ('C', ' 565 ', 'PHE', 0.1739754746700436, (131.80100000000004, 181.427, 145.908)), ('C', ' 628 ', 'GLN', 0.018300680178175755, (122.64000000000006, 152.63999999999993, 149.886)), ('C', ' 634 ', 'ARG', 0.0, (127.61600000000008, 144.397, 154.102)), ('C', ' 907 ', 'ASN', 0.104905587970327, (162.7, 149.818, 212.33900000000003)), ('C', '1082 ', 'CYS', 0.13300313999151464, (146.375, 166.777, 231.029))]
data['cbeta'] = [('A', ' 634 ', 'ARG', ' ', 0.2731009469711321, (165.67800000000005, 204.12099999999995, 156.605)), ('B', ' 200 ', 'TYR', ' ', 0.4440082552620284, (195.528, 162.71, 126.982)), ('B', ' 214 ', 'ARG', ' ', 0.25642351601480085, (223.987, 153.243, 146.278)), ('B', ' 621 ', 'PRO', ' ', 0.2778672603714588, (192.00000000000006, 135.152, 153.465)), ('C', ' 130 ', 'VAL', ' ', 0.2522960187517876, (140.761, 126.094, 121.397)), ('C', ' 626 ', 'ALA', ' ', 0.267681018029368, (122.72700000000006, 148.764, 155.705))]
data['probe'] = [(' A 360  ASN  H  ', ' A 523  THR HG22', -0.434, (192.054, 179.051, 124.717))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
