# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 360 ', 'ASN', 0.0006519724531488579, (-14.341790000000003, 13.990550000000002, 2.03265))]
data['omega'] = [('B', ' 112 ', 'PRO', None, (-50.44281, -15.795650000000002, -31.97793)), ('B', ' 157 ', 'PRO', None, (-54.83465000000001, -13.204830000000003, -60.21087)), ('B', ' 159 ', 'PRO', None, (-55.489070000000005, -16.79937, -55.06156)), ('C', ' 145 ', 'PRO', None, (-48.07236, -44.579720000000016, -54.39218)), ('H', ' 112 ', 'PRO', None, (-30.19129, -15.77198, 18.87364)), ('H', ' 157 ', 'PRO', None, (-57.264599999999994, -16.498910000000002, 7.71974)), ('H', ' 159 ', 'PRO', None, (-51.72029000000001, -13.48079, 8.41748)), ('L', ' 145 ', 'PRO', None, (-49.397680000000015, 14.403379999999999, 15.221309999999999))]
data['rota'] = [('E', ' 394 ', 'ASN', 0.26140465248154754, (-6.61384, -41.32375000000001, 61.56663)), ('H', '   2 ', 'VAL', 0.18991881106099653, (-27.141529999999992, -18.68823, 13.8005)), ('H', '  16 ', 'GLN', 0.024801207568275113, (-57.524950000000004, -28.02597, 18.82509)), ('H', ' 179 ', 'VAL', 0.02835479099303484, (-58.98588000000001, -3.8684400000000014, 8.44195)), ('L', '   4 ', 'LEU', 0.19980490531957634, (-41.69807999999999, -7.02764, 36.60439)), ('L', '  68 ', 'LYS', 0.1625124860822743, (-28.68951, -1.91161, 38.59291)), ('L', ' 153 ', 'LYS', 0.07901420111400972, (-69.21817, 11.817100000000002, 1.43577)), ('L', ' 159 ', 'VAL', 0.21144627316939885, (-72.20757, 8.4418, 4.55267)), ('A', ' 358 ', 'ILE', 0.17303339335092602, (-15.374520000000004, 9.19714, -2.71997)), ('B', '  16 ', 'GLN', 0.03957065261558241, (-44.169830000000005, -1.4896500000000004, -57.45567)), ('C', '  29 ', 'VAL', 0.04990083280054274, (-25.55661, -22.865130000000008, -22.791)), ('C', '  68 ', 'LYS', 0.0, (-31.72382000000001, -30.012020000000003, -26.69464)), ('C', ' 159 ', 'VAL', 0.17388661943260803, (-52.758460000000014, -35.40359, -78.44537))]
data['cbeta'] = []
data['probe'] = [(' H  11  LEU  HB2', ' H 157  PRO  HG3', -0.788, (-55.568, -19.392, 9.748)), (' C  49  ILE HG22', ' C  50  ILE HG12', -0.777, (-43.995, -28.912, -30.722)), (' A 366  SER  HB2', ' A 388  ASN HD21', -0.763, (-30.379, 14.476, 4.106)), (' H 179  VAL HG23', ' L 166  THR HG22', -0.735, (-58.095, -1.188, 8.402)), (' A 336  CYS  N  ', ' A 361  CYS  SG ', -0.696, (-18.443, 15.444, -1.689)), (' L  49  ILE HG22', ' L  50  ILE HG12', -0.682, (-28.333, -2.866, 25.897)), (' B 178  ALA  HA ', ' B 188  LEU  HB3', -0.668, (-56.26, -24.969, -60.605)), (' A 386  LYS  HE3', ' L  81  GLN  HB3', -0.648, (-31.319, 8.711, 14.895)), (' B  41  GLN  HB2', ' B  47  LEU HD23', -0.642, (-42.844, -19.284, -44.628)), (' H  41  GLN  HB2', ' H  47  LEU HD23', -0.63, (-43.824, -10.907, 22.598)), (' B 101  VAL HG12', ' B 103  PRO  HD3', -0.618, (-42.91, -14.1, -25.243)), (' E 383  SER  HB3', ' E 386  LYS  HB3', -0.618, (5.229, -42.114, 47.308)), (' H 178  ALA  HA ', ' H 188  LEU  HB3', -0.613, (-55.422, -4.746, 5.305)), (' E 501  TYR  HE1', ' H 102  VAL HG12', -0.612, (-26.929, -20.926, 32.943)), (' H  35  TYR  HB2', ' H 100  LEU  HB3', -0.607, (-32.136, -21.644, 25.932)), (' B 129  PRO  HB3', ' B 155  TYR  HB3', -0.587, (-61.013, -17.503, -62.926)), (' B  11  LEU  HB2', ' B 157  PRO  HG3', -0.578, (-52.6, -11.038, -58.397)), (' A 387  LEU  HA ', ' A 390  LEU HD12', -0.573, (-24.593, 8.311, 8.797)), (' B  42  PRO  HB2', ' B  45  LYS  HD2', -0.564, (-39.737, -19.532, -52.4)), (' H 101  VAL HG12', ' H 103  PRO  HD3', -0.557, (-25.441, -17.585, 28.148)), (' C  39  GLN  HB2', ' C  49  ILE HD11', -0.553, (-46.74, -29.688, -35.938)), (' B 169  LEU HD21', ' B 192  VAL HG21', -0.542, (-70.946, -32.945, -52.609)), (' A 445  VAL HG11', ' B  58  SER  HB3', -0.536, (-37.305, -0.017, -31.897)), (' B  35  TYR  HB2', ' B 100  LEU  HB3', -0.536, (-42.728, -9.367, -31.566)), (' A 406  GLU  OE1', ' A 495  TYR  OH ', -0.53, (-28.286, -10.965, -13.964)), (' H   6  GLN  NE2', ' H  95  TYR  O  ', -0.527, (-42.972, -18.015, 16.04)), (' A 501  TYR  HE1', ' B 102  VAL HG12', -0.514, (-36.863, -10.948, -24.873)), (' L 142  ASP  OD1', ' L 171  GLN  NE2', -0.505, (-45.12, 8.562, 6.282)), (' C 155  ASP  OD1', ' C 192  HIS  HB3', -0.502, (-62.214, -38.128, -82.312)), (' L 148  VAL HG12', ' L 201  HIS  HB2', -0.502, (-55.104, 13.378, 10.911)), (' E 350  VAL HG22', ' E 422  ASN  HB3', -0.501, (-16.813, -23.935, 50.737)), (' H  63  PRO  HA ', ' H  66  LYS  HB2', -0.498, (-46.155, -25.389, 33.903)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.498, (-28.016, -0.269, -15.311)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.493, (-32.632, -1.382, -6.406)), (' H 129  PRO  HB3', ' H 155  TYR  HB3', -0.491, (-57.6, -12.7, 1.424)), (' H  40  ARG  HB3', ' H  50  ILE HD11', -0.488, (-45.687, -18.517, 23.146)), (' A 417  ASN  O  ', ' A 422  ASN  ND2', -0.487, (-23.003, -14.303, -11.106)), (' H  37  SER  HA ', ' H  52  TYR  HA ', -0.487, (-37.427, -23.729, 24.891)), (' A 390  LEU HD13', ' A 392  PHE  HZ ', -0.484, (-22.76, 7.245, 8.916)), (' B  40  ARG  HB3', ' B  50  ILE HD11', -0.483, (-42.75, -12.12, -46.115)), (' C  50  ILE HD13', ' C  56  ARG  HG2', -0.479, (-44.469, -28.67, -27.02)), (' E 350  VAL  HA ', ' E 400  PHE  HB2', -0.479, (-18.205, -28.277, 49.862)), (' L  50  ILE HD13', ' L  56  ARG  HG2', -0.473, (-25.764, -3.434, 26.121)), (' B  37  SER  HA ', ' B  52  TYR  HA ', -0.471, (-42.803, -7.308, -36.911)), (' B   8  GLY  HA3', ' B  20  LEU HD23', -0.471, (-52.618, -6.826, -48.59)), (' A 365  TYR  HA ', ' A 368  LEU HD12', -0.471, (-27.494, 11.079, -0.507)), (' B  68  ARG HH22', ' B  91  ASP  CG ', -0.469, (-39.135, -8.399, -53.305)), (' L  23  THR  HA ', ' L  72  THR HG22', -0.466, (-36.937, -1.981, 40.01)), (' L   6  GLN  NE2', ' L 105  THR  OG1', -0.466, (-39.845, -0.82, 30.06)), (' C 154  ALA  N  ', ' C 157  SER  O  ', -0.465, (-56.638, -39.127, -79.49)), (' L 117  PRO  HB3', ' L 143  PHE  HB3', -0.463, (-52.145, 12.847, 8.096)), (' C  85  GLU  HG3', ' C 108  THR  HA ', -0.461, (-46.17, -37.989, -43.803)), (' A 350  VAL HG22', ' A 422  ASN  HB3', -0.457, (-21.838, -9.891, -11.333)), (' A 501  TYR  CE2', ' B 105  PRO  HD3', -0.457, (-34.441, -11.457, -21.599)), (' B 191  VAL HG11', ' C 139  LEU HD13', -0.457, (-63.054, -33.448, -60.873)), (' E 396  TYR  HB2', ' E 514  SER  HB2', -0.456, (-8.653, -35.628, 57.229)), (' H   8  GLY  HA3', ' H  20  LEU HD23', -0.453, (-46.75, -23.257, 13.234)), (' B  63  PRO  HA ', ' B  66  LYS  HB2', -0.453, (-32.16, -5.086, -43.113)), (' E 342  PHE  HB2', ' E 601  NAG  H82', -0.453, (-15.086, -43.218, 45.813)), (' C 142  ASP  OD1', ' C 171  GLN  NE2', -0.452, (-57.703, -39.652, -51.554)), (' C  68  LYS  HG3', ' C  70  GLY  H  ', -0.451, (-28.568, -28.926, -25.814)), (' B  68  ARG  NH2', ' B  91  ASP  OD2', -0.45, (-38.842, -7.41, -53.531)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.449, (-16.795, 7.774, -0.911)), (' H  68  ARG HH22', ' H  91  ASP  CG ', -0.449, (-54.183, -21.309, 24.632)), (' E 498  GLN  NE2', ' H 102  VAL HG11', -0.446, (-29.107, -21.676, 33.506)), (' A 505  TYR  OH ', ' B 106  LYS  HE3', -0.446, (-36.194, -16.826, -16.738)), (' L  85  GLU  HG3', ' L 108  THR  HA ', -0.444, (-40.715, 7.43, 20.38)), (' C  13  SER  HB2', ' C  16  GLN  HG3', -0.442, (-43.619, -47.659, -36.745)), (' E 449  TYR  HD2', ' E 494  SER  HG ', -0.442, (-29.094, -21.363, 43.673)), (' E 347  PHE  CE2', ' E 399  SER  HB2', -0.436, (-17.785, -35.3, 48.852)), (' C  23  THR  HA ', ' C  72  THR HG22', -0.432, (-28.128, -28.883, -34.662)), (' H  68  ARG  NH2', ' H  91  ASP  OD2', -0.432, (-54.904, -22.233, 25.028)), (' E 447  GLY  HA2', ' E 498  GLN  HG3', -0.432, (-30.277, -24.745, 36.78)), (' C 155  ASP  OD1', ' C 193  ARG  HG2', -0.43, (-63.146, -40.494, -82.415)), (' B 178  ALA  HB2', ' B 188  LEU HD23', -0.428, (-56.412, -23.132, -58.56)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.425, (-2.593, -44.784, 63.492)), (' L 126  SER  N  ', ' L 302  SO4  O4 ', -0.424, (-62.056, -0.426, -12.482)), (' B 131  VAL  HA ', ' B 151  LEU  O  ', -0.42, (-65.759, -22.687, -63.858)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.419, (-20.15, -32.268, 44.165)), (' B 179  VAL HG12', ' B 187  SER  O  ', -0.418, (-55.91, -25.055, -63.669)), (' A 403  ARG  HG3', ' A 495  TYR  CE1', -0.416, (-30.288, -10.101, -16.278)), (' A 456  PHE  CE2', ' C  29  VAL HG11', -0.415, (-23.145, -22.387, -19.458)), (' H  37  SER  HB3', ' H  52  TYR  HB3', -0.414, (-36.253, -22.004, 26.269)), (' L  56  ARG  HD3', ' L  64  PHE  O  ', -0.414, (-24.3, -0.235, 25.514)), (' B   6  GLN  NE2', ' B  95  TYR  O  ', -0.412, (-50.322, -12.511, -44.94)), (' A 502  GLY  O  ', ' A 506  GLN  HG3', -0.411, (-38.424, -6.951, -17.661)), (' C 123  PRO  HA ', ' C 136  LEU HD23', -0.411, (-64.778, -33.486, -72.004)), (' L 136  LEU  HB2', ' L 182  LEU  HB3', -0.411, (-65.285, 4.086, -0.395)), (' A 396  TYR  HB2', ' A 514  SER  HB2', -0.409, (-17.356, 0.77, -0.951)), (' E 431  GLY  HA2', ' E 515  PHE  HD2', -0.407, (-2.631, -37.048, 53.065)), (' B 164  TRP  CH2', ' B 206  CYS  HB3', -0.405, (-69.646, -27.051, -57.371)), (' C 117  PRO  HB3', ' C 143  PHE  HB3', -0.405, (-54.035, -42.889, -58.377)), (' L 138  CYS  HB2', ' L 152  TRP  CH2', -0.402, (-61.955, 6.723, 1.464)), (' E 501  TYR  CE2', ' H 105  PRO  HD3', -0.402, (-23.965, -20.512, 36.898)), (' H  11  LEU HD22', ' H 157  PRO  HD3', -0.402, (-57.53, -18.915, 8.734)), (' B  49  TRP  CZ2', ' B  51  GLY  HA2', -0.401, (-37.912, -8.755, -37.967)), (' C 153  LYS  NZ ', ' C 302  SO4  O2 ', -0.401, (-54.283, -46.631, -77.026)), (' A 476  GLY  H  ', ' A 487  ASN  HB3', -0.4, (-17.0, -30.871, -19.26))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
