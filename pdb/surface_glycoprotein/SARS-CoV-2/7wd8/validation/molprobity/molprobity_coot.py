# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('F', '  33 ', 'VAL', 0.09430531531935729, (88.48800000000001, 46.978, 75.128))]
data['omega'] = [('E', ' 154 ', 'PRO', None, (81.52399999999999, 98.02299999999998, 75.913)), ('E', ' 156 ', 'PRO', None, (79.465, 92.19699999999999, 78.149)), ('F', '   8 ', 'PRO', None, (69.737, 64.058, 66.738)), ('F', '  81 ', 'PRO', None, (65.177, 59.58, 85.275)), ('F', '  99 ', 'PRO', None, (94.71600000000001, 66.306, 66.195)), ('F', ' 145 ', 'PRO', None, (54.23200000000004, 77.75900000000001, 73.987))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' F   6  GLN  NE2', ' F  92  CYS  SG ', -0.699, (78.131, 64.677, 70.268)), (' F 149  ASN  HB2', ' F 201  THR  HB ', -0.687, (50.919, 86.794, 67.453)), (' F 117  PRO  HB3', ' F 143  PHE  HB3', -0.641, (53.905, 84.341, 77.288)), (' E   6  GLN  NE2', ' E  96  CYS  SG ', -0.636, (91.909, 80.259, 80.315)), (' F 167  TRP  NE1', ' F 179  MET  SD ', -0.628, (58.979, 86.714, 72.152)), (' E 140  ASN  OD1', ' E 141  SER  N  ', -0.613, (48.327, 89.797, 92.111)), (' A 334  ASN  OD1', ' A 335  LEU  N  ', -0.6, (100.87, 45.965, 104.376)), (' B 551  VAL  HB ', ' B 588  THR  HB ', -0.59, (106.592, 57.783, 71.058)), (' F  80  HIS  HD2', ' F  81  PRO  HA ', -0.585, (63.417, 59.561, 83.53)), (' F 112  ARG  NH1', ' F 174  ASP  O  ', -0.58, (57.975, 75.621, 84.256)), (' E  38  LYS  HG3', ' E  94  TYR  HE1', -0.572, (87.968, 81.816, 69.756)), (' F 112  ARG HH11', ' F 175  SER  HB2', -0.571, (58.264, 74.839, 83.408)), (' E 128  VAL HG22', ' E 149  VAL HG22', -0.561, (71.134, 100.955, 83.198)), (' F 170  GLN HE21', ' F 175  SER  HB3', -0.552, (60.314, 74.149, 81.47)), (' F 153  LYS  HB2', ' F 197  THR  HB ', -0.547, (47.856, 99.706, 70.541)), (' F 142  ASN  ND2', ' F 176  THR  OG1', -0.535, (57.958, 81.77, 83.534)), (' E  53  PRO  HA ', ' E  72  VAL HG21', -0.534, (104.903, 76.386, 79.202)), (' F 110  ILE  HB ', ' F 170  GLN HE22', -0.531, (61.551, 72.326, 79.533)), (' F  41  GLN  HB2', ' F  51  LEU HD11', -0.531, (75.835, 67.797, 80.701)), (' E 104  ASP  OD1', ' E 105  ALA  N  ', -0.529, (90.88, 60.845, 77.441)), (' E 176  VAL HG11', ' F 164  LEU HD22', -0.52, (66.979, 94.841, 68.414)), (' A 324  GLU  HG2', ' E  31  ARG HH11', -0.516, (107.595, 66.841, 85.024)), (' E  61  ASN  OD1', ' E  62  GLN  N  ', -0.511, (94.46, 72.523, 62.605)), (' B 537  LYS  NZ ', ' E  55  ASP  OD2', -0.511, (108.646, 68.972, 74.955)), (' B 561  PRO  HA ', ' B 577  ARG HH22', -0.51, (95.863, 42.278, 81.965)), (' F 171  ASP  HB3', ' F 175  SER  H  ', -0.508, (61.92, 77.529, 84.171)), (' F   2  ILE  HB ', ' F  94  HIS  CE1', -0.506, (88.575, 62.744, 66.526)), (' E 163  SER  N  ', ' E 203  ASN  OD1', -0.502, (72.286, 95.777, 94.362)), (' E  40  ARG  HD3', ' E  43  GLN  HG3', -0.5, (81.296, 80.69, 64.142)), (' F 154  ILE HD11', ' F 183  LEU HD21', -0.5, (55.22, 103.022, 69.159)), (' A 318  PHE  O  ', ' B 593  GLY  N  ', -0.496, (119.352, 62.44, 67.043)), (' E 162  ASN HD21', ' E 200  VAL  HA ', -0.496, (65.168, 96.981, 96.222)), (' B 560  LEU  HG ', ' B 562  PHE  H  ', -0.495, (96.259, 37.959, 81.302)), (' E  98  ARG  HD3', ' E 109  TYR  HD2', -0.494, (91.682, 71.816, 87.144)), (' F 121  ILE HD12', ' F 198  CYS  HB2', -0.488, (52.642, 97.954, 75.149)), (' A 328  ARG  NH2', ' B 580  GLN  OE1', -0.487, (97.376, 55.642, 89.309)), (' E  30  THR  HA ', ' E  53  PRO  HB2', -0.477, (104.334, 73.737, 83.081)), (' E  99  LYS  HE2', ' E 101  TYR  HE1', -0.476, (95.215, 64.519, 77.631)), (' F 169  ASP  OD1', ' F 170  GLN  N  ', -0.476, (66.077, 78.312, 77.84)), (' E  50  MET  HG2', ' E  59  ARG  HB2', -0.475, (99.032, 70.648, 71.402)), (' B 560  LEU HD12', ' B 561  PRO  HD2', -0.471, (93.649, 38.167, 79.666)), (' F 144  TYR  CD1', ' F 145  PRO  HA ', -0.466, (56.509, 76.528, 74.472)), (' F 110  ILE  HB ', ' F 170  GLN  NE2', -0.461, (61.884, 72.513, 80.039)), (' A 327  VAL  O  ', ' B 531  THR  OG1', -0.46, (104.667, 58.392, 89.26)), (' F 132  GLY  HA2', ' F 187  LYS  HD2', -0.458, (62.982, 115.104, 74.41)), (' E 174  PRO  HD3', ' F 168  THR HG22', -0.452, (67.358, 86.938, 77.52)), (' A 326  ILE HD11', ' B 534  VAL  HB ', -0.446, (103.388, 62.831, 82.056)), (' E 194  THR  O  ', ' E 198  GLU  N  ', -0.444, (58.701, 98.08, 100.352)), (' F  52  ILE HG23', ' F  57  SER  O  ', -0.44, (80.413, 57.788, 83.013)), (' B 535  LYS  HG2', ' B 536  ASN  H  ', -0.439, (100.928, 60.875, 75.388)), (' F 142  ASN  HA ', ' F 176  THR  HB ', -0.436, (57.168, 81.115, 81.374)), (' B 533  LEU HD11', ' B 552  LEU HD13', -0.435, (102.214, 58.06, 80.175)), (' E  35  ASN HD21', ' E  99  LYS  HD2', -0.433, (94.51, 69.208, 76.853)), (' E  47  TRP  CH2', ' E  49  GLY  HA2', -0.433, (95.491, 72.67, 70.123)), (' E  51  ILE HD13', ' E  72  VAL HG13', -0.433, (102.618, 78.394, 77.127)), (' B 551  VAL  N  ', ' B 588  THR  O  ', -0.431, (108.269, 57.735, 73.159)), (' F  37  MET  SD ', ' F  92  CYS  HB2', -0.429, (81.27, 62.297, 72.35)), (' E 195  TRP  HZ3', ' E 200  VAL  H  ', -0.428, (62.354, 99.219, 95.051)), (' B 535  LYS  HG2', ' B 536  ASN  N  ', -0.424, (100.372, 60.94, 75.328)), (' E 106  TRP  HB3', ' F  38  HIS  CE1', -0.423, (87.275, 62.061, 79.475)), (' F 136  VAL  HB ', ' F 183  LEU  HB3', -0.419, (57.601, 101.433, 72.704)), (' E 103  TYR  OH ', ' F  34  TYR  HB2', -0.416, (90.288, 51.805, 76.525)), (' F  54  LEU  C  ', ' F  56  SER  H  ', -0.414, (82.723, 55.172, 79.951)), (' B 524  VAL HG13', ' B 529  LYS  HE2', -0.414, (105.667, 54.25, 99.591)), (' F  80  HIS  CD2', ' F  81  PRO  HA ', -0.408, (63.633, 58.943, 83.617)), (' A 331  ASN  OD1', ' B 580  GLN  NE2', -0.407, (97.879, 53.61, 93.487)), (' E 131  LEU HD11', ' E 148  LEU  HB2', -0.407, (63.604, 99.965, 80.713)), (' F 171  ASP  OD1', ' F 172  SER  N  ', -0.401, (65.297, 78.112, 85.335)), (' F 174  ASP  OD2', ' F 176  THR  OG1', -0.4, (58.21, 80.703, 83.813)), (' A 330  PRO  HG3', ' B 579  PRO  HB3', -0.4, (102.05, 48.517, 89.696))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
