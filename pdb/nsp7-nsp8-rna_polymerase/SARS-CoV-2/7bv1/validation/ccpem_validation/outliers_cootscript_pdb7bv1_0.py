
from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

dict_residue_prop_objects = {}
class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)
        ##save property list frame object
        dict_residue_prop_objects[data_key] = list_obj
# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "clusters","rama", "rota", "cbeta", "probe", "smoc", "cablam",
               "jpred"]
  data_titles = { "clusters"  : "Outlier residue clusters",
                  "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes",
                  "smoc"  : "Local density fit (SMOC)",
                  "cablam": "Ca geometry (CaBLAM)",
                  "jpred":"SS prediction"}
  data_names = { "clusters"  : ["Chain","Residue","Cluster","Outlier types"],
                 "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"],
                 "smoc" : ["Chain", "Residue", "Name", "Score"],
                 "cablam" : ["Chain", "Residue","Name","recommendation","DSSP"],
                 "jpred" : ["Chain", "Residue","Name","predicted SS","current SS"]}
  if (gobject is not None) :
    data_types = {  "clusters" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_INT, gobject.TYPE_STRING,
                             gobject.TYPE_PYOBJECT],
                    "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "smoc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cablam" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT],
                   "jpred" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT]}
  else :
    data_types = dict([ (s, []) for s in ["clusters","rama","rota","cbeta","probe","smoc",
                                          "cablam","jpred"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    ##adding a column type for checkbox (bool) before atom coordinate
    if gobject is not None:
        column_types = column_types[:-1]+[bool]+[column_types[-1]]
    
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    ##add a cell for checkbox
    cell1 = gtk.CellRendererToggle()
    cell1.connect ("toggled", self.on_selected_toggled)
    column = gtk.TreeViewColumn('Dealt with',cell1,active=i+1)
    self.listctrl.append_column(column)
    #column.set_sort_column_id(i+1)
    #column.pack_start(cell1, True)
    
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      row = row[:-1] + (False,)+(row[-1],)
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()
  ##check box toggle
  def on_selected_toggled(self,renderer,path):
    if path is not None:
      model = self.listmodel.get_model()
      it = model.get_iter(path)
      #set toggle
      model[it][-2] = not model[it][-2]
      #set checkboxes for same residues in other lists
      try:
        chain = model[it][0]
        residue = model[it][1]
        for data_key in dict_residue_prop_objects:
          prop_obj = dict_residue_prop_objects[data_key]
          for row in prop_obj.listmodel.get_model():
            if data_key == 'probe':
              atom1_split = row[0].split()
              atom2_split = row[1].split()
              if atom1_split[0] == chain and atom1_split[1] == residue:
                row[-2] = model[it][-2]
              elif atom2_split[0] == chain and atom2_split[1] == residue:
                row[-2] = model[it][-2]
            elif row[0] == chain and row[1] == residue:
              row[-2] = model[it][-2]
      except IndexError: pass

  def check_chain_residue(self,chain,residue):
      pass
  
def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data
data = {}
data['rama'] = []
data['rota'] = []
data['cbeta'] = []
data['clusters'] = [('A', '149', 1, 'side-chain clash\nsmoc Outlier', (83.84, 118.933, 113.245)), ('A', '212', 1, 'side-chain clash\n', (83.84, 118.933, 113.245)), ('A', '239', 1, 'side-chain clash\n', (83.306, 118.066, 114.072)), ('A', '365', 1, 'cablam Outlier\nsmoc Outlier', (81.2, 132.3, 114.3)), ('A', '366', 1, 'smoc Outlier\n', (82.28600311279297, 129.1179962158203, 112.5469970703125)), ('A', '367', 1, 'backbone clash\n', (78.385, 124.807, 111.557)), ('A', '368', 1, 'backbone clash\n', (78.385, 124.807, 111.557)), ('A', '369', 1, 'smoc Outlier\n', (80.56700134277344, 121.9469985961914, 109.4469985961914)), ('A', '465', 1, 'side-chain clash\n', (83.306, 118.066, 114.072)), ('A', '619', 1, 'side-chain clash\n', (85.075, 117.298, 117.994)), ('A', '786', 1, 'side-chain clash\nsmoc Outlier', (85.075, 117.298, 117.994)), ('A', '595', 2, 'smoc Outlier\n', (71.82499694824219, 77.49099731445312, 100.3280029296875)), ('A', '815', 2, 'smoc Outlier\n', (87.50800323486328, 77.35199737548828, 102.51200103759766)), ('A', '816', 2, 'side-chain clash\n', (84.372, 74.068, 101.04)), ('A', '822', 2, 'side-chain clash\nsmoc Outlier', (74.54, 69.344, 97.492)), ('A', '823', 2, 'cablam Outlier\n', (69.6, 65.0, 96.6)), ('A', '827', 2, 'side-chain clash\nsmoc Outlier', (74.54, 69.344, 97.492)), ('A', '829', 2, 'side-chain clash\n', (77.082, 73.23, 100.908)), ('A', '830', 2, 'side-chain clash\n', (78.682, 74.212, 102.247)), ('A', '915', 2, 'smoc Outlier\n', (71.92500305175781, 75.822998046875, 105.3550033569336)), ('A', '916', 2, 'side-chain clash\n', (78.682, 74.212, 102.247)), ('A', '919', 2, 'Dihedral angle:CB:CG:CD:OE1\nsmoc Outlier', (65.197, 76.97, 99.043)), ('A', '440', 3, 'smoc Outlier\n', (96.2040023803711, 80.72799682617188, 118.96800231933594)), ('A', '834', 3, 'smoc Outlier\n', (88.8949966430664, 71.78399658203125, 111.72000122070312)), ('A', '836', 3, 'Dihedral angle:CD:NE:CZ:NH1\n', (90.73400000000001, 76.471, 113.269)), ('A', '837', 3, 'side-chain clash\n', (86.082, 74.993, 117.697)), ('A', '839', 3, 'smoc Outlier\n', (91.1240005493164, 76.75700378417969, 118.10299682617188)), ('A', '840', 3, 'side-chain clash\n', (85.965, 80.538, 118.873)), ('A', '857', 3, 'smoc Outlier\n', (75.51499938964844, 81.72699737548828, 119.69100189208984)), ('A', '858', 3, 'side-chain clash\nDihedral angle:CD:NE:CZ:NH1\n', (79.27, 81.537, 119.107)), ('A', '859', 3, 'side-chain clash\n', (77.78, 75.673, 120.411)), ('A', '884', 3, 'side-chain clash\n', (86.082, 74.993, 117.697)), ('A', '888', 3, 'side-chain clash\nsmoc Outlier', (77.78, 75.673, 120.411)), ('A', '118', 4, 'side-chain clash\n', (130.015, 100.803, 63.17)), ('A', '203', 4, 'side-chain clash\n', (112.828, 105.567, 61.022)), ('A', '217', 4, 'cablam CA Geom Outlier\n', (122.2, 101.8, 65.0)), ('A', '218', 4, 'cablam Outlier\n', (120.3, 99.7, 62.5)), ('A', '220', 4, 'cablam Outlier\nsmoc Outlier', (116.7, 100.3, 58.0)), ('A', '221', 4, 'smoc Outlier\n', (113.06099700927734, 101.36399841308594, 58.176998138427734)), ('A', '222', 4, 'side-chain clash\n', (112.828, 105.567, 61.022)), ('A', '97', 4, 'smoc Outlier\n', (127.18299865722656, 104.5, 66.7969970703125)), ('A', '98', 4, 'side-chain clash\n', (130.015, 100.803, 63.17)), ('A', '498', 5, 'backbone clash\nsmoc Outlier', (80.446, 102.332, 114.661)), ('A', '500', 5, 'side-chain clash\nbackbone clash\n', (84.637, 102.056, 113.693)), ('A', '501', 5, 'side-chain clash\nbackbone clash\nsmoc Outlier', (84.637, 102.056, 113.693)), ('A', '502', 5, 'smoc Outlier\n', (85.26499938964844, 107.58899688720703, 114.01100158691406)), ('A', '503', 5, 'side-chain clash\n', (88.445, 109.312, 111.564)), ('A', '507', 5, 'side-chain clash\n', (90.733, 107.109, 117.062)), ('A', '541', 5, 'side-chain clash\nsmoc Outlier', (90.733, 107.109, 117.062)), ('A', '561', 5, 'side-chain clash\n', (88.445, 109.312, 111.564)), ('A', '388', 6, 'side-chain clash\n', (107.546, 111.317, 114.229)), ('A', '390', 6, 'smoc Outlier\n', (111.68299865722656, 108.49299621582031, 115.59100341796875)), ('A', '391', 6, 'side-chain clash\n', (117.632, 106.314, 114.507)), ('A', '396', 6, 'smoc Outlier\n', (108.72000122070312, 110.22799682617188, 107.46800231933594)), ('A', '397', 6, 'side-chain clash\n', (107.546, 111.317, 114.229)), ('A', '400', 6, 'side-chain clash\n', (106.497, 112.723, 118.755)), ('A', '672', 6, 'smoc Outlier\n', (102.625, 110.5270004272461, 117.1259994506836)), ('A', '673', 6, 'smoc Outlier\n', (101.80400085449219, 111.49700164794922, 113.54000091552734)), ('A', '527', 7, 'side-chain clash\n', (82.469, 117.431, 101.659)), ('A', '531', 7, 'side-chain clash\n', (82.469, 117.431, 101.659)), ('A', '533', 7, 'Dihedral angle:CD:NE:CZ:NH1\n', (85.254, 121.551, 95.348)), ('A', '535', 7, 'smoc Outlier\n', (90.447998046875, 118.70800018310547, 99.37300109863281)), ('A', '536', 7, 'side-chain clash\n', (85.507, 117.521, 102.618)), ('A', '654', 7, 'side-chain clash\n', (84.961, 110.888, 97.688)), ('A', '657', 7, 'side-chain clash\n', (86.489, 116.802, 97.608)), ('A', '658', 7, 'side-chain clash\nsmoc Outlier', (84.961, 110.888, 97.688)), ('A', '490', 8, 'smoc Outlier\n', (71.91799926757812, 111.68499755859375, 102.87000274658203)), ('A', '519', 8, 'smoc Outlier\n', (74.46600341796875, 116.12200164794922, 111.82599639892578)), ('A', '520', 8, 'side-chain clash\n', (73.858, 115.363, 107.766)), ('A', '522', 8, 'smoc Outlier\n', (71.38300323486328, 118.98999786376953, 104.87300109863281)), ('A', '524', 8, 'side-chain clash\n', (73.858, 115.363, 107.766)), ('A', '525', 8, 'smoc Outlier\n', (74.67500305175781, 117.09600067138672, 101.91799926757812)), ('A', '322', 9, 'side-chain clash\n', (108.913, 117.94, 98.546)), ('A', '325', 9, 'side-chain clash\nsmoc Outlier', (108.913, 117.94, 98.546)), ('A', '326', 9, 'cablam CA Geom Outlier\n', (104.2, 117.3, 99.9)), ('A', '327', 9, 'smoc Outlier\n', (101.18699645996094, 116.90299987792969, 102.09300231933594)), ('A', '328', 9, 'side-chain clash\n', (96.115, 118.726, 103.947)), ('A', '537', 9, 'side-chain clash\n', (96.115, 118.726, 103.947)), ('A', '661', 10, 'smoc Outlier\n', (92.26499938964844, 110.58499908447266, 102.94200134277344)), ('A', '665', 10, 'side-chain clash\nsmoc Outlier', (97.125, 108.786, 104.367)), ('A', '676', 10, 'smoc Outlier\n', (101.48999786376953, 106.98699951171875, 105.01200103759766)), ('A', '677', 10, 'cablam CA Geom Outlier\n', (103.6, 106.4, 101.9)), ('A', '678', 10, 'cablam CA Geom Outlier\n', (100.7, 104.5, 100.3)), ('A', '206', 11, 'side-chain clash\n', (99.733, 95.727, 127.351)), ('A', '209', 11, 'side-chain clash\n', (99.733, 95.727, 127.351)), ('A', '445', 11, 'smoc Outlier\n', (104.64700317382812, 93.63300323486328, 123.5999984741211)), ('A', '448', 11, 'smoc Outlier\n', (104.5530014038086, 95.97200012207031, 118.11100006103516)), ('A', '452', 11, 'smoc Outlier\n', (104.46499633789062, 96.53800201416016, 111.86900329589844)), ('A', '413', 12, 'side-chain clash\n', (92.774, 86.658, 124.775)), ('A', '414', 12, 'side-chain clash\n', (89.475, 87.007, 127.842)), ('A', '546', 12, 'side-chain clash\n', (92.774, 86.658, 124.775)), ('A', '845', 12, 'cablam Outlier\nBond angle:C', (87.9, 86.9, 123.5)), ('A', '846', 12, 'side-chain clash\nBond angle:N:CA\n', (86.427, 87.235, 127.068)), ('A', '124', 13, 'side-chain clash\n', (115.314, 97.454, 77.92)), ('A', '125', 13, 'smoc Outlier\n', (115.62300109863281, 95.38500213623047, 74.822998046875)), ('A', '128', 13, 'side-chain clash\n', (115.314, 97.454, 77.92)), ('A', '35', 13, 'smoc Outlier\n', (113.02300262451172, 92.11000061035156, 69.87000274658203)), ('A', '36', 13, 'smoc Outlier\n', (110.08999633789062, 94.49299621582031, 69.46700286865234)), ('A', '708', 14, 'side-chain clash\n', (101.458, 92.856, 70.464)), ('A', '726', 14, 'smoc Outlier\n', (95.48200225830078, 93.86299896240234, 66.7760009765625)), ('A', '728', 14, 'side-chain clash\n', (101.458, 92.856, 70.464)), ('A', '729', 14, 'Dihedral angle:CB:CG:CD:OE1\n', (98.54100000000001, 97.735, 67.43900000000001)), ('A', '734', 14, 'smoc Outlier\n', (96.83999633789062, 103.49400329589844, 68.12100219726562)), ('A', '201', 15, 'side-chain clash\n', (107.483, 130.997, 103.076)), ('A', '270', 15, 'smoc Outlier\n', (111.93000030517578, 124.80000305175781, 102.59100341796875)), ('A', '453', 15, 'side-chain clash\nbackbone clash\n', (108.896, 124.776, 104.159)), ('A', '667', 15, 'side-chain clash\nbackbone clash\n', (108.896, 124.776, 104.159)), ('A', '717', 16, 'side-chain clash\nsmoc Outlier', (95.488, 80.862, 67.098)), ('A', '720', 16, 'side-chain clash\n', (95.488, 80.862, 67.098)), ('A', '773', 16, 'side-chain clash\n', (99.394, 78.649, 72.175)), ('A', '775', 16, 'side-chain clash\n', (99.394, 78.649, 72.175)), ('A', '578', 17, 'side-chain clash\n', (74.636, 93.686, 91.712)), ('A', '582', 17, 'side-chain clash\nsmoc Outlier', (74.636, 93.686, 91.712)), ('A', '583', 17, 'side-chain clash\nDihedral angle:CD:NE:CZ:NH1\n', (74.867, 86.953, 91.336)), ('A', '591', 17, 'side-chain clash\nsmoc Outlier', (74.991, 86.998, 97.95)), ('A', '906', 18, 'side-chain clash\nsmoc Outlier', (67.693, 73.838, 114.42)), ('A', '908', 18, 'cablam Outlier\n', (68.9, 69.2, 116.9)), ('A', '910', 18, 'smoc Outlier\n', (68.51699829101562, 69.71199798583984, 111.0989990234375)), ('A', '911', 18, 'side-chain clash\n', (67.693, 73.838, 114.42)), ('A', '623', 19, 'cablam Outlier\n', (97.9, 96.0, 101.7)), ('A', '680', 19, 'side-chain clash\n', (91.978, 98.165, 100.751)), ('A', '681', 19, 'smoc Outlier\n', (93.51599884033203, 101.16400146484375, 104.66100311279297)), ('A', '687', 19, 'side-chain clash\n', (91.978, 98.165, 100.751)), ('A', '516', 20, 'side-chain clash\n', (78.302, 107.193, 107.08)), ('A', '565', 20, 'smoc Outlier\n', (83.5250015258789, 107.72699737548828, 105.6760025024414)), ('A', '566', 20, 'smoc Outlier\n', (80.44000244140625, 109.9469985961914, 105.48500061035156)), ('A', '758', 21, 'side-chain clash\nDihedral angle:CA:C\n', (86.81400000000001, 88.393, 95.918)), ('A', '759', 21, 'cablam Outlier\nside-chain clash\nDihedral angle:N:CA\nsmoc Outlier', (88.9, 91.1, 97.5)), ('A', '761', 21, 'smoc Outlier\n', (91.18800354003906, 85.8499984741211, 96.5510025024414)), ('A', '282', 22, 'smoc Outlier\n', (112.42900085449219, 117.43699645996094, 83.45700073242188)), ('A', '284', 22, 'smoc Outlier\n', (111.43299865722656, 118.58399963378906, 78.16999816894531)), ('A', '285', 22, 'Dihedral angle:CD:NE:CZ:NH1\n', (114.83, 117.15299999999999, 79.101)), ('A', '615', 23, 'side-chain clash\n', (94.399, 80.938, 86.217)), ('A', '755', 23, 'side-chain clash\nsmoc Outlier', (91.024, 83.826, 86.431)), ('A', '764', 23, 'side-chain clash\n', (94.399, 80.938, 86.217)), ('A', '294', 24, 'side-chain clash\n', (103.918, 115.681, 86.324)), ('A', '314', 24, 'side-chain clash\n', (103.918, 115.681, 86.324)), ('A', '317', 24, 'smoc Outlier\n', (109.09500122070312, 113.33200073242188, 88.70800018310547)), ('A', '739', 25, 'smoc Outlier\n', (85.83000183105469, 99.78500366210938, 71.37999725341797)), ('A', '740', 25, 'smoc Outlier\n', (85.36299896240234, 96.77400207519531, 69.09500122070312)), ('A', '744', 25, 'smoc Outlier\n', (86.56700134277344, 91.2249984741211, 71.41400146484375)), ('A', '869', 26, 'smoc Outlier\n', (82.86199951171875, 68.03399658203125, 107.7249984741211)), ('A', '876', 26, 'Dihedral angle:CB:CG:CD:OE1\n', (88.571, 62.473, 112.721)), ('A', '878', 26, 'smoc Outlier\n', (83.64099884033203, 64.13999938964844, 110.8270034790039)), ('A', '604', 27, 'smoc Outlier\n', (79.49099731445312, 79.87799835205078, 87.2040023803711)), ('A', '606', 27, 'cablam Outlier\n', (83.3, 76.8, 85.2)), ('A', '607', 27, 'cablam CA Geom Outlier\n', (80.9, 78.0, 82.5)), ('A', '614', 28, 'side-chain clash\nsmoc Outlier', (92.01, 73.405, 90.012)), ('A', '802', 28, 'side-chain clash\nsmoc Outlier', (92.01, 73.405, 90.012)), ('A', '808', 28, 'smoc Outlier\n', (87.00700378417969, 72.0009994506836, 93.3479995727539)), ('A', '120', 29, 'smoc Outlier\n', (127.97000122070312, 95.86399841308594, 73.90299987792969)), ('A', '211', 29, 'smoc Outlier\n', (122.90299987792969, 99.76599884033203, 72.98600006103516)), ('A', '610', 30, 'smoc Outlier\n', (87.50199890136719, 73.73400115966797, 77.13500213623047)), ('A', '767', 30, 'smoc Outlier\n', (92.01499938964844, 76.46299743652344, 78.88999938964844)), ('A', '138', 31, 'smoc Outlier\n', (116.81300354003906, 80.98899841308594, 83.91799926757812)), ('A', '139', 31, 'cablam Outlier\n', (117.7, 84.6, 84.7)), ('A', '689', 32, 'side-chain clash\nsmoc Outlier', (87.631, 97.06, 93.027)), ('A', '693', 32, 'side-chain clash\n', (87.631, 97.06, 93.027)), ('A', '648', 33, 'smoc Outlier\n', (84.9010009765625, 116.46099853515625, 85.44200134277344)), ('A', '651', 33, 'smoc Outlier\n', (85.06700134277344, 113.95800018310547, 89.95999908447266)), ('A', '160', 34, 'smoc Outlier\n', (119.30699920654297, 82.63300323486328, 97.60900115966797)), ('A', '161', 34, 'smoc Outlier\n', (116.38899993896484, 85.07099914550781, 97.72000122070312)), ('A', '819', 35, 'side-chain clash\n', (78.962, 66.463, 92.738)), ('A', '826', 35, 'side-chain clash\n', (78.962, 66.463, 92.738)), ('A', '408', 36, 'side-chain clash\n', (96.788, 97.425, 119.684)), ('A', '544', 36, 'side-chain clash\n', (96.788, 97.425, 119.684)), ('A', '549', 37, 'side-chain clash\n', (95.911, 86.013, 113.083)), ('A', '555', 37, 'side-chain clash\n', (95.911, 86.013, 113.083)), ('A', '183', 38, 'side-chain clash\n', (119.803, 113.519, 83.289)), ('A', '286', 38, 'side-chain clash\n', (119.803, 113.519, 83.289)), ('A', '42', 39, 'side-chain clash\n', (104.323, 86.862, 65.386)), ('A', '712', 39, 'side-chain clash\n', (104.323, 86.862, 65.386)), ('A', '468', 40, 'side-chain clash\nsmoc Outlier', (102.345, 94.301, 79.123)), ('A', '705', 40, 'side-chain clash\n', (102.345, 94.301, 79.123)), ('A', '706', 41, 'smoc Outlier\n', (101.41400146484375, 86.2770004272461, 77.96399688720703)), ('A', '707', 41, 'smoc Outlier\n', (99.69400024414062, 86.90499877929688, 74.62899780273438)), ('A', '274', 42, 'cablam Outlier\nsmoc Outlier', (105.2, 124.3, 93.5)), ('A', '275', 42, 'cablam Outlier\n', (108.0, 122.6, 91.5)), ('A', '359', 43, 'smoc Outlier\n', (88.66300201416016, 129.73500061035156, 101.0469970703125)), ('A', '360', 43, 'side-chain clash\n', (87.724, 131.141, 103.623)), ('A', '166', 44, 'side-chain clash\n', (109.04, 93.085, 103.418)), ('A', '458', 44, 'side-chain clash\n', (109.04, 93.085, 103.418)), ('A', '844', 45, 'side-chain clash\n', (94.18, 122.061, 116.365)), ('A', '849', 45, 'side-chain clash\n', (94.18, 122.061, 116.365)), ('A', '575', 46, 'side-chain clash\nsmoc Outlier', (79.259, 102.044, 89.295)), ('A', '641', 46, 'side-chain clash\n', (79.259, 102.044, 89.295)), ('A', '569', 47, 'side-chain clash\n', (77.223, 105.088, 99.871)), ('A', '573', 47, 'side-chain clash\n', (77.223, 105.088, 99.871)), ('A', '179', 48, 'smoc Outlier\n', (120.03500366210938, 104.04299926757812, 87.23100280761719)), ('A', '250', 48, 'smoc Outlier\n', (117.41899871826172, 106.80599975585938, 87.09700012207031)), ('A', '333', 49, 'smoc Outlier\n', (93.03500366210938, 132.50900268554688, 108.60099792480469)), ('A', '340', 49, 'smoc Outlier\n', (94.0260009765625, 129.63299560546875, 112.87200164794922)), ('A', '90', 50, 'side-chain clash\nsmoc Outlier', (122.57, 109.519, 63.249)), ('A', '96', 50, 'side-chain clash\n', (122.57, 109.519, 63.249)), ('A', '631', 51, 'side-chain clash\n', (90.161, 104.206, 94.558)), ('A', '635', 51, 'side-chain clash\n', (90.161, 104.206, 94.558)), ('A', '545', 52, 'side-chain clash\n', (91.219, 95.185, 112.891)), ('A', '557', 52, 'side-chain clash\n', (91.219, 95.185, 112.891)), ('A', '236', 53, 'smoc Outlier\n', (106.65899658203125, 101.91400146484375, 72.09300231933594)), ('A', '237', 53, 'smoc Outlier\n', (110.19100189208984, 102.79299926757812, 73.23400115966797)), ('A', '893', 54, 'smoc Outlier\n', (69.98899841308594, 71.72699737548828, 128.68699645996094)), ('A', '894', 54, 'Dihedral angle:CB:CG:CD:OE1\nsmoc Outlier', (72.116, 73.692, 131.165)), ('A', '477', 55, 'smoc Outlier\n', (85.84200286865234, 98.43399810791016, 82.75599670410156)), ('A', '481', 55, 'smoc Outlier\n', (79.61299896240234, 97.3759994506836, 82.94300079345703)), ('A', '350', 56, 'smoc Outlier\n', (100.76000213623047, 112.05999755859375, 91.84400177001953)), ('A', '351', 56, 'smoc Outlier\n', (98.17900085449219, 114.81099700927734, 91.25900268554688)), ('B', '100', 1, 'smoc Outlier\n', (105.15399932861328, 131.25399780273438, 118.83300018310547)), ('B', '101', 1, 'cablam Outlier\n', (105.7, 134.3, 116.5)), ('B', '103', 1, 'smoc Outlier\n', (105.0479965209961, 130.99400329589844, 112.61100006103516)), ('B', '96', 1, 'Dihedral angle:CD:NE:CZ:NH1\n', (97.11999999999999, 128.73299999999998, 123.57)), ('B', '98', 1, 'smoc Outlier\n', (99.91799926757812, 127.67900085449219, 118.92900085449219)), ('B', '110', 2, 'side-chain clash\nsmoc Outlier', (107.483, 130.997, 103.076)), ('B', '112', 2, 'cablam CA Geom Outlier\n', (101.0, 134.2, 99.0)), ('B', '113', 2, 'jpred outlier', (101.8, 133.0, 102.6)), ('B', '119', 2, 'side-chain clash\n', (108.896, 124.776, 104.159)), ('B', '132', 3, 'side-chain clash\n', (120.068, 105.904, 122.01)), ('B', '135', 3, 'jpred outlier', (122.9, 102.3, 122.0)), ('B', '138', 3, 'side-chain clash\nsmoc Outlier', (120.068, 105.904, 122.01)), ('B', '174', 3, 'smoc Outlier\n', (127.97799682617188, 100.88200378417969, 126.09600067138672)), ('B', '161', 4, 'cablam Outlier\n', (113.0, 104.9, 129.6)), ('B', '163', 4, 'side-chain clash\n', (109.66, 103.146, 131.441)), ('B', '182', 4, 'smoc Outlier\n', (116.02100372314453, 100.13999938964844, 125.52400207519531)), ('B', '183', 4, 'cablam CA Geom Outlier\n', (113.5, 102.6, 123.9)), ('B', '121', 5, 'smoc Outlier\n', (106.80899810791016, 121.93800354003906, 113.5260009765625)), ('B', '125', 5, 'side-chain clash\n', (110.834, 124.2, 116.793)), ('B', '190', 5, 'side-chain clash\n', (110.834, 124.2, 116.793)), ('B', '83', 6, 'side-chain clash\n', (82.865, 118.731, 119.136)), ('B', '87', 6, 'side-chain clash\nsmoc Outlier', (83.306, 118.066, 114.072)), ('B', '168', 7, 'side-chain clash\n', (122.045, 108.026, 134.696)), ('B', '171', 7, 'side-chain clash\n', (122.045, 108.026, 134.696)), ('B', '136', 8, 'side-chain clash\n', (125.097, 104.608, 115.766)), ('B', '140', 8, 'side-chain clash\n', (125.097, 104.608, 115.766)), ('B', '104', 9, 'side-chain clash\n', (103.416, 137.731, 109.485)), ('B', '108', 9, 'side-chain clash\n', (103.416, 137.731, 109.485)), ('B', '90', 10, 'side-chain clash\n', (91.944, 120.103, 119.715)), ('B', '94', 10, 'side-chain clash\n', (94.18, 122.061, 116.365)), ('C', '11', 1, 'smoc Outlier\n', (98.01300048828125, 80.62899780273438, 128.1820068359375)), ('C', '14', 1, 'side-chain clash\n', (102.037, 85.102, 131.301)), ('C', '15', 1, 'smoc Outlier\n', (96.97200012207031, 85.5250015258789, 131.79800415039062)), ('C', '19', 1, 'smoc Outlier\n', (96.8290023803711, 90.25199890136719, 135.86399841308594)), ('C', '28', 1, 'side-chain clash\n', (92.444, 86.928, 134.89)), ('C', '31', 1, 'side-chain clash\n', (92.444, 86.928, 134.89)), ('C', '33', 1, 'smoc Outlier\n', (105.51000213623047, 87.13700103759766, 125.61499786376953)), ('C', '54', 1, 'side-chain clash\n', (91.487, 86.615, 134.594)), ('C', '58', 1, 'side-chain clash\n', (91.487, 86.615, 134.594)), ('C', '3', 2, 'side-chain clash\njpred outlier', (103.006, 72.987, 122.171)), ('C', '4', 2, 'jpred outlier', (98.0, 70.4, 123.9)), ('C', '48', 2, 'smoc Outlier\n', (107.86699676513672, 73.66300201416016, 125.33799743652344)), ('C', '5', 2, 'jpred outlier', (97.7, 70.9, 127.6)), ('C', '7', 2, 'side-chain clash\n', (103.006, 72.987, 122.171)), ('C', '35', 3, 'side-chain clash\n', (108.955, 73.337, 134.779)), ('C', '55', 3, 'side-chain clash\nsmoc Outlier', (108.955, 73.337, 134.779)), ('D', '118', 1, 'side-chain clash\n', (119.464, 84.523, 138.3)), ('D', '123', 1, 'cablam CA Geom Outlier\nside-chain clash', (121.1, 78.8, 127.8)), ('D', '125', 1, 'side-chain clash\nsmoc Outlier', (122.686, 79.838, 129.266)), ('D', '126', 1, 'smoc Outlier\n', (123.56199645996094, 83.34500122070312, 133.29299926757812)), ('D', '128', 1, 'side-chain clash\n', (119.464, 84.523, 138.3)), ('D', '158', 1, 'smoc Outlier\n', (130.14500427246094, 83.15699768066406, 143.91900634765625)), ('D', '159', 1, 'backbone clash\n', (125.361, 82.87, 148.198)), ('D', '185', 1, 'backbone clash\n', (125.361, 82.87, 148.198)), ('D', '187', 1, 'cablam Outlier\n', (123.6, 82.6, 143.0)), ('D', '134', 2, 'cablam Outlier\nsmoc Outlier', (118.0, 80.2, 157.7)), ('D', '162', 2, 'side-chain clash\n', (120.368, 88.374, 154.02)), ('D', '182', 2, 'smoc Outlier\n', (117.84600067138672, 84.50700378417969, 157.2169952392578)), ('D', '183', 2, 'cablam CA Geom Outlier\nside-chain clash', (118.3, 85.3, 153.5)), ('D', '106', 3, 'side-chain clash\n', (107.959, 77.548, 139.613)), ('D', '107', 3, 'smoc Outlier\n', (106.7229995727539, 74.8010025024414, 143.35899353027344)), ('D', '108', 3, 'backbone clash\n', (109.616, 72.403, 145.747)), ('D', '109', 3, 'backbone clash\n', (109.616, 72.403, 145.747)), ('D', '160', 4, 'side-chain clash\n', (126.651, 90.381, 150.104)), ('D', '164', 4, 'side-chain clash\n', (130.067, 91.692, 151.477)), ('D', '165', 4, 'side-chain clash\n', (130.067, 91.692, 151.477)), ('D', '137', 5, 'side-chain clash\n', (115.919, 69.011, 153.726)), ('D', '140', 5, 'side-chain clash\nsmoc Outlier', (115.919, 69.011, 153.726)), ('D', '179', 6, 'side-chain clash\n', (126.42, 82.802, 160.694)), ('D', '180', 6, 'side-chain clash\n', (126.42, 82.802, 160.694)), ('D', '85', 7, 'backbone clash\nsmoc Outlier', (90.942, 84.253, 142.389)), ('D', '86', 7, 'backbone clash\n', (90.942, 84.253, 142.389)), ('D', '143', 8, 'smoc Outlier\n', (124.83599853515625, 68.26300048828125, 147.66299438476562)), ('D', '145', 8, 'cablam Outlier\n', (128.9, 71.9, 146.9)), ('D', '100', 9, 'side-chain clash\n', (107.9, 71.704, 133.97)), ('D', '103', 9, 'side-chain clash\nsmoc Outlier', (107.9, 71.704, 133.97))]
data['probe'] = [(' C  58  VAL HG22', ' D 119  ILE HG12', -1.09, (111.636, 84.349, 134.036)), (' C  60  LEU HD12', ' D 106  ILE HD12', -0.961, (109.267, 77.938, 139.137)), (' C  58  VAL HG22', ' D 119  ILE  CG1', -0.844, (111.695, 84.88, 133.554)), (' C  60  LEU HD12', ' D 106  ILE  CD1', -0.815, (108.664, 77.818, 138.754)), (' C  60  LEU  CD1', ' D 106  ILE HD12', -0.772, (108.476, 77.935, 140.049)), (' A 507  ASN  ND2', ' A 541  GLN  OE1', -0.751, (90.733, 107.109, 117.062)), (' A 545  LYS  HE3', ' A 557  VAL HG21', -0.749, (91.219, 95.185, 112.891)), (' A 755  MET  HG2', ' A 764  VAL HG12', -0.717, (91.024, 83.826, 86.431)), (' A 654  ARG  NH2', ' A 658  GLU  OE2', -0.706, (84.961, 110.888, 97.688)), (' A 830  PRO  HD2', ' A 916  TRP  HE1', -0.695, (78.682, 74.477, 102.258)), (' C  60  LEU  CD1', ' D 106  ILE  CD1', -0.687, (107.959, 77.548, 139.613)), (' A 516  TYR  OH ', ' A 569  ARG  NH1', -0.686, (78.302, 107.193, 107.08)), (' A 631  ARG  NH1', ' A 635  SER  OG ', -0.664, (90.161, 104.206, 94.558)), (' C  58  VAL HG22', ' D 119  ILE  CD1', -0.662, (111.129, 85.584, 133.145)), (' A 758  LEU HD23', ' A 759  SER  H  ', -0.66, (86.998, 89.008, 98.32)), (' A 773  GLN  HG3', ' A 775  LEU HD13', -0.652, (99.394, 78.649, 72.175)), (' B 125  ALA  O  ', ' B 190  ARG  NH2', -0.626, (110.834, 124.2, 116.793)), (' A 549  SER  HB2', ' A 555  ARG HH11', -0.619, (95.911, 86.013, 113.083)), (' A 717  ASP  HB3', ' A 720  VAL HG22', -0.612, (95.488, 80.862, 67.098)), (' A  90  LEU HD11', ' A 201  ILE HD12', -0.607, (118.389, 110.314, 59.233)), (' A 271  LEU HD23', ' B 110  ALA  HB2', -0.606, (107.483, 130.997, 103.076)), (' A 840  ALA  O  ', ' A 858  ARG  NH1', -0.605, (85.965, 80.538, 118.873)), (' B 136  ASN  O  ', ' B 140  ASN  ND2', -0.602, (125.097, 104.608, 115.766)), (' C  35  LEU HD11', ' C  55  LEU HD13', -0.597, (107.728, 82.679, 129.32)), (' A 388  LEU HD13', ' A 400  ALA  HB2', -0.595, (106.497, 112.723, 118.755)), (' A 453  TYR  CE1', ' A 667  VAL HG21', -0.594, (101.372, 105.649, 109.175)), (' A 468  GLN HE22', ' A 705  ASN HD21', -0.581, (102.748, 93.965, 79.119)), (' A 183  ARG  NH1', ' A 286  TYR  OH ', -0.578, (119.803, 113.519, 83.289)), (' A 829  LEU HD22', ' A 916  TRP  CD1', -0.576, (77.458, 72.609, 101.15)), (' A 367  SER  OG ', ' A 368  PHE  N  ', -0.573, (78.385, 124.807, 111.557)), (' A 531  THR  O  ', ' A 657  ASN  ND2', -0.572, (86.489, 116.802, 97.608)), (' A 844  VAL HG21', ' A 849  LYS  HD3', -0.567, (85.747, 81.917, 127.422)), (' B  90  MET  HG2', ' B  94  MET  HE3', -0.561, (91.944, 120.103, 119.715)), (' A 380  MET  HB3', ' B  94  MET  SD ', -0.56, (94.18, 122.061, 116.365)), (' A 206  THR  OG1', ' A 209  ASN  ND2', -0.558, (114.808, 99.526, 66.135)), (' C  16  VAL HG11', ' D  91  LEU HD22', -0.554, (98.822, 81.993, 136.586)), (' C  53  VAL HG22', ' D 103  LEU HD12', -0.548, (108.955, 73.337, 134.779)), (' A 409  THR  OG1', ' C  23  GLU  OE2', -0.539, (99.733, 95.727, 127.351)), (' A 503  GLY  HA3', ' A 561  SER  HA ', -0.539, (88.445, 109.312, 111.564)), (' D  85  SER  OG ', ' D  86  ALA  N  ', -0.539, (90.942, 84.253, 142.389)), (' A  98  LYS  O  ', ' A 118  ARG  NH2', -0.532, (130.015, 100.803, 63.17)), (' A 829  LEU HD22', ' A 916  TRP  HD1', -0.527, (77.082, 73.23, 100.908)), (' D 162  ALA  HB2', ' D 183  PRO  HG2', -0.525, (120.368, 88.374, 154.02)), (' A 583  ARG HH11', ' A 591  THR  HA ', -0.521, (74.991, 86.998, 97.95)), (' A 203  GLY  HA3', ' A 222  PHE  HD1', -0.518, (112.857, 105.825, 61.033)), (' A 500  LYS  HG2', ' A 501  SER  H  ', -0.517, (84.933, 101.737, 113.182)), (' A 203  GLY  HA3', ' A 222  PHE  CD1', -0.517, (112.828, 105.567, 61.022)), (' C  54  SER  O  ', ' C  58  VAL HG23', -0.512, (110.132, 82.338, 133.436)), (' C  53  VAL HG22', ' D 103  LEU  CD1', -0.51, (109.13, 73.823, 134.104)), (' C  19  GLN HE22', ' D  87  MET  CE ', -0.509, (91.487, 86.615, 134.594)), (' A 414  ASN  ND2', ' A 846  ASP  HB3', -0.508, (89.475, 87.007, 127.842)), (' B 104  ASN  ND2', ' B 108  ASN  OD1', -0.506, (103.416, 137.731, 109.485)), (' A 468  GLN  NE2', ' A 705  ASN HD21', -0.503, (102.345, 94.301, 79.123)), (' D 118  ASN HD21', ' D 128  LEU  HA ', -0.5, (119.464, 84.523, 138.3)), (' A 615  MET  HE2', ' A 764  VAL HG21', -0.49, (94.399, 80.938, 86.217)), (' B  83  VAL  O  ', ' B  87  MET  HG3', -0.49, (82.865, 118.731, 119.136)), (' D 160  VAL HG13', ' D 164  SER  HA ', -0.488, (126.651, 90.381, 150.104)), (' D 137  THR  OG1', ' D 140  ASN  OD1', -0.482, (115.919, 69.011, 153.726)), (' A 149  TYR  HE2', ' A 212  LEU HD13', -0.477, (124.481, 96.987, 79.823)), (' A 372  LEU  HA ', ' B  87  MET  HE1', -0.477, (83.84, 118.933, 113.245)), (' A 822  GLN HE21', ' A 827  VAL HG21', -0.474, (74.54, 69.344, 97.492)), (' D 159  VAL HG13', ' D 185  ILE  O  ', -0.473, (125.361, 82.87, 148.198)), (' A 294  TYR  OH ', ' A 314  ASN  ND2', -0.472, (103.918, 115.681, 86.324)), (' B 168  GLN  HB2', ' B 171  GLU  HG3', -0.472, (122.045, 108.026, 134.696)), (' A 619  TYR  HE1', ' A 786  LEU HD21', -0.469, (99.568, 90.347, 91.543)), (' D 123  THR  C  ', ' D 125  ALA  H  ', -0.468, (122.686, 79.838, 129.266)), (' A 509  TRP  CZ3', ' B  87  MET  HG2', -0.466, (85.075, 117.298, 117.994)), (' A 837  ILE  O  ', ' A 884  TYR  OH ', -0.466, (86.082, 74.993, 117.697)), (' A 708  LEU HD21', ' A 728  TYR  HB2', -0.465, (101.458, 92.856, 70.464)), (' C  28  LEU HD12', ' C  31  GLN HE21', -0.464, (111.708, 89.32, 132.023)), (' C  56  LEU  CD2', ' D 103  LEU  HG ', -0.463, (106.122, 75.211, 136.627)), (' A 166  VAL HG13', ' A 458  TYR  CZ ', -0.463, (109.04, 93.085, 103.418)), (' A 851  ASP  N  ', ' A 851  ASP  OD1', -0.46, (78.315, 86.136, 128.82)), (' A  42  VAL HG23', ' A 712  GLY  HA3', -0.46, (104.323, 86.862, 65.386)), (' A 520  SER  O  ', ' A 524  GLN  HG3', -0.459, (73.858, 115.363, 107.766)), (' C  58  VAL  CG2', ' D 119  ILE HG12', -0.455, (110.794, 84.184, 134.18)), (' A 575  LEU HD13', ' A 641  LYS  HG3', -0.453, (79.259, 102.044, 89.295)), (' A 408  GLN  NE2', ' A 544  LEU  HB2', -0.453, (96.788, 97.425, 119.684)), (' A 614  LEU  HB2', ' A 802  GLU  HB3', -0.449, (92.01, 73.405, 90.012)), (' A 391  LYS  HB3', ' A 391  LYS  HE3', -0.447, (117.632, 106.314, 114.507)), (' A 531  THR HG22', ' A 536  ILE HD12', -0.447, (85.507, 117.521, 102.618)), (' A 527  LEU  O  ', ' A 531  THR HG23', -0.444, (82.469, 117.431, 101.659)), (' A 328  PRO  HB3', ' A 537  PRO  HG3', -0.439, (96.115, 118.726, 103.947)), (' A 569  ARG  O  ', ' A 573  GLN  HB2', -0.439, (77.223, 105.088, 99.871)), (' C  56  LEU HD22', ' D 103  LEU  HG ', -0.433, (105.809, 75.225, 136.394)), (' A 322  PRO  O  ', ' A 325  SER  OG ', -0.428, (108.913, 117.94, 98.546)), (' D 164  SER  O  ', ' D 165  LYS  HG3', -0.425, (130.067, 91.692, 151.477)), (' A 578  SER  O  ', ' A 582  THR HG23', -0.424, (74.636, 93.686, 91.712)), (' A 124  MET  O  ', ' A 128  VAL HG23', -0.421, (115.314, 97.454, 77.92)), (' C  19  GLN  NE2', ' D  87  MET  SD ', -0.42, (92.444, 86.928, 134.89)), (' A 498  LEU  O  ', ' A 500  LYS  N  ', -0.419, (80.446, 102.332, 114.661)), (' B 132  ILE HG21', ' B 138  TYR  HB2', -0.418, (120.068, 105.904, 122.01)), (' A  90  LEU  HB3', ' A  96  VAL HG21', -0.418, (122.57, 109.519, 63.249)), (' A 453  TYR  HE1', ' A 667  VAL HG21', -0.417, (101.313, 105.094, 109.228)), (' A 270  LEU  O  ', ' B 119  ILE HD13', -0.416, (108.896, 124.776, 104.159)), (' A 239  SER  OG ', ' A 465  ASP  OD1', -0.416, (103.621, 101.628, 77.717)), (' D 179  ASN  O  ', ' D 180  LEU HD22', -0.415, (126.42, 82.802, 160.694)), (' C  14  LEU  HA ', ' C  14  LEU HD12', -0.415, (102.037, 85.102, 131.301)), (' D 100  ASN  ND2', ' D 103  LEU HD13', -0.415, (107.9, 71.704, 133.97)), (' A 372  LEU HD12', ' B  87  MET  HE1', -0.415, (83.306, 118.066, 114.072)), (' D 108  ASN  OD1', ' D 109  ASN  N  ', -0.414, (109.616, 72.403, 145.747)), (' A 906  MET  HG2', ' A 911  ASN  HB2', -0.414, (67.693, 73.838, 114.42)), (' A 819  LEU HD11', ' A 826  TYR  HB3', -0.411, (78.962, 66.463, 92.738)), (' A 680  THR HG21', ' A 687  THR HG23', -0.411, (91.978, 98.165, 100.751)), (' A 500  LYS  HG2', ' A 501  SER  N  ', -0.41, (84.637, 102.056, 113.693)), (' A 816  HIS  O  ', ' A 830  PRO  HA ', -0.408, (84.372, 74.068, 101.04)), (' B 163  ASP  N  ', ' B 163  ASP  OD1', -0.408, (109.66, 103.146, 131.441)), (' A 388  LEU HD23', ' A 397  SER  OG ', -0.408, (107.546, 111.317, 114.229)), (' C   3  MET  HE2', ' C   7  LYS  HE2', -0.407, (103.006, 72.987, 122.171)), (' A 689  TYR  O  ', ' A 693  VAL HG23', -0.407, (87.631, 97.06, 93.027)), (' A 665  GLU  N  ', ' A 665  GLU  OE1', -0.405, (97.125, 108.786, 104.367)), (' A 830  PRO  HD2', ' A 916  TRP  NE1', -0.404, (78.682, 74.212, 102.247)), (' A 859  PHE  HB3', ' A 888  ILE HG12', -0.403, (77.78, 75.673, 120.411)), (' A 360  ASN  N  ', ' A 360  ASN  OD1', -0.401, (87.724, 131.141, 103.623)), (' A 413  GLY  HA2', ' A 546  TYR  OH ', -0.401, (92.774, 86.658, 124.775))]
data['cablam'] = [('A', '139', 'CYS', 'check CA trace,carbonyls, peptide', ' \nTS-HH', (117.7, 84.6, 84.7)), ('A', '218', 'ASP', 'check CA trace,carbonyls, peptide', ' \nB----', (120.3, 99.7, 62.5)), ('A', '220', 'GLY', 'check CA trace,carbonyls, peptide', ' \n---S-', (116.7, 100.3, 58.0)), ('A', '274', 'ASP', 'check CA trace,carbonyls, peptide', ' \n----H', (105.2, 124.3, 93.5)), ('A', '275', 'PHE', 'check CA trace,carbonyls, peptide', ' \n---HH', (108.0, 122.6, 91.5)), ('A', '337', 'GLY', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (90.8, 138.0, 115.1)), ('A', '365', 'ARG', 'check CA trace,carbonyls, peptide', 'bend\nESS--', (81.2, 132.3, 114.3)), ('A', '606', 'TYR', 'check CA trace,carbonyls, peptide', 'helix\nHHHSS', (83.3, 76.8, 85.2)), ('A', '623', 'ASP', ' alpha helix', 'helix\nTHHHH', (97.9, 96.0, 101.7)), ('A', '759', 'SER', 'check CA trace,carbonyls, peptide', 'bend\nESSS-', (88.9, 91.1, 97.5)), ('A', '823', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nE-SSS', (69.6, 65.0, 96.6)), ('A', '845', 'ASP', 'check CA trace,carbonyls, peptide', ' \nEE-SS', (87.9, 86.9, 123.5)), ('A', '908', 'THR', 'check CA trace,carbonyls, peptide', 'bend\n--SSS', (68.9, 69.2, 116.9)), ('A', '151', 'CYS', 'check CA trace', 'bend\nTTSS-', (126.4, 96.6, 90.0)), ('A', '217', 'TYR', 'check CA trace', ' \n-B---', (122.2, 101.8, 65.0)), ('A', '326', 'PHE', 'check CA trace', ' \nGG-EE', (104.2, 117.3, 99.9)), ('A', '607', 'SER', 'check CA trace', 'bend\nHHSS-', (80.9, 78.0, 82.5)), ('A', '677', 'PRO', 'check CA trace', ' \nE--S-', (103.6, 106.4, 101.9)), ('A', '678', 'GLY', 'check CA trace', 'bend\n--S--', (100.7, 104.5, 100.3)), ('B', '101', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\n--SHH', (105.7, 134.3, 116.5)), ('B', '161', 'ASP', 'check CA trace,carbonyls, peptide', ' \nEE-SS', (113.0, 104.9, 129.6)), ('B', '178', 'PRO', ' three-ten', 'turn\nT-TTS', (121.3, 96.0, 128.9)), ('B', '112', 'ASP', 'check CA trace', 'helix-3\nSGGG-', (101.0, 134.2, 99.0)), ('B', '183', 'PRO', 'check CA trace', ' \n-S-EE', (113.5, 102.6, 123.9)), ('D', '134', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\nE-TTS', (118.0, 80.2, 157.7)), ('D', '145', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nSSS-E', (128.9, 71.9, 146.9)), ('D', '187', 'THR', 'check CA trace,carbonyls, peptide', ' \nE--B-', (123.6, 82.6, 143.0)), ('D', '123', 'THR', 'check CA trace', 'bend\n-SSTT', (121.1, 78.8, 127.8)), ('D', '183', 'PRO', 'check CA trace', ' \n-S-EE', (118.3, 85.3, 153.5))]
data['jpred'] = [('C', '3', 'M', '-', 'H', (101.5, 68.8, 123.7)), ('C', '4', 'S', '-', 'H', (98.0, 70.4, 123.9)), ('C', '5', 'D', '-', 'H', (97.7, 70.9, 127.6)), ('B', '79', 'K', '-', 'H', (74.4, 115.7, 122.2)), ('B', '113', 'G', '-', 'H', (101.8, 133.0, 102.6)), ('B', '135', 'Y', '-', 'H', (122.9, 102.3, 122.0))]
data['smoc'] = [('A', 35, 'PHE', 0.5799572311813356, (113.02300262451172, 92.11000061035156, 69.87000274658203)), ('A', 36, 'ASP', 0.6020277694568791, (110.08999633789062, 94.49299621582031, 69.46700286865234)), ('A', 40, 'ASP', 0.5108336732505387, (101.65799713134766, 92.87999725341797, 59.02399826049805)), ('A', 50, 'LYS', 0.47220189684143804, (119.22000122070312, 85.9749984741211, 65.0989990234375)), ('A', 86, 'ILE', 0.4757213275150551, (120.90499877929688, 106.81600189208984, 56.20899963378906)), ('A', 90, 'LEU', 0.5291253409353768, (123.1240005493164, 111.30400085449219, 61.29199981689453)), ('A', 97, 'ALA', 0.48548512915143294, (127.18299865722656, 104.5, 66.7969970703125)), ('A', 120, 'THR', 0.4952291192010527, (127.97000122070312, 95.86399841308594, 73.90299987792969)), ('A', 125, 'ALA', 0.5570084759961731, (115.62300109863281, 95.38500213623047, 74.822998046875)), ('A', 130, 'ALA', 0.5894532654086465, (114.88600158691406, 90.55899810791016, 81.70600128173828)), ('A', 138, 'ASN', 0.5495736290313652, (116.81300354003906, 80.98899841308594, 83.91799926757812)), ('A', 144, 'GLU', 0.5929368769173177, (125.5260009765625, 88.74299621582031, 83.31999969482422)), ('A', 149, 'TYR', 0.6120307090780309, (128.36900329589844, 96.66000366210938, 84.6729965209961)), ('A', 154, 'ASP', 0.5416555288428252, (129.0449981689453, 86.90799713134766, 91.08200073242188)), ('A', 160, 'LYS', 0.6130332576722913, (119.30699920654297, 82.63300323486328, 97.60900115966797)), ('A', 161, 'ASP', 0.5493306814077492, (116.38899993896484, 85.07099914550781, 97.72000122070312)), ('A', 171, 'ILE', 0.5824908175668532, (118.63800048828125, 94.16000366210938, 95.89800262451172)), ('A', 179, 'GLY', 0.619537126410844, (120.03500366210938, 104.04299926757812, 87.23100280761719)), ('A', 185, 'ALA', 0.5761431393767306, (120.58399963378906, 106.375, 77.46800231933594)), ('A', 193, 'CYS', 0.5409415065788094, (115.6050033569336, 112.08399963378906, 67.75800323486328)), ('A', 211, 'ASP', 0.5461398194388023, (122.90299987792969, 99.76599884033203, 72.98600006103516)), ('A', 220, 'GLY', 0.48402284619670144, (116.71299743652344, 100.27100372314453, 57.99300003051758)), ('A', 221, 'ASP', 0.4657867603831405, (113.06099700927734, 101.36399841308594, 58.176998138427734)), ('A', 233, 'VAL', 0.6307669360370469, (107.86499786376953, 107.56400299072266, 66.6449966430664)), ('A', 236, 'SER', 0.49776313954129414, (106.65899658203125, 101.91400146484375, 72.09300231933594)), ('A', 237, 'TYR', 0.6196192689770542, (110.19100189208984, 102.79299926757812, 73.23400115966797)), ('A', 242, 'MET', 0.5871393588882534, (108.74800109863281, 103.24299621582031, 81.78199768066406)), ('A', 250, 'ALA', 0.6137259054744773, (117.41899871826172, 106.80599975585938, 87.09700012207031)), ('A', 270, 'LEU', 0.6839237079104205, (111.93000030517578, 124.80000305175781, 102.59100341796875)), ('A', 274, 'ASP', 0.6516334226524978, (105.2490005493164, 124.34600067138672, 93.4729995727539)), ('A', 282, 'LEU', 0.608782539319375, (112.42900085449219, 117.43699645996094, 83.45700073242188)), ('A', 284, 'ASP', 0.6054775981914886, (111.43299865722656, 118.58399963378906, 78.16999816894531)), ('A', 292, 'GLN', 0.6807403329922909, (100.96099853515625, 113.75399780273438, 74.02100372314453)), ('A', 306, 'CYS', 0.5358640023643135, (94.5459976196289, 112.10199737548828, 80.85399627685547)), ('A', 312, 'ASN', 0.530814276773816, (102.04399871826172, 108.52400207519531, 85.83100128173828)), ('A', 317, 'PHE', 0.6257986630047659, (109.09500122070312, 113.33200073242188, 88.70800018310547)), ('A', 325, 'SER', 0.6461307132258536, (107.20999908447266, 119.68199920654297, 100.20700073242188)), ('A', 327, 'GLY', 0.5624409820015576, (101.18699645996094, 116.90299987792969, 102.09300231933594)), ('A', 333, 'ILE', 0.5976181876594218, (93.03500366210938, 132.50900268554688, 108.60099792480469)), ('A', 340, 'PHE', 0.595900058245368, (94.0260009765625, 129.63299560546875, 112.87200164794922)), ('A', 350, 'GLU', 0.5448018168217043, (100.76000213623047, 112.05999755859375, 91.84400177001953)), ('A', 351, 'LEU', 0.5920250601004122, (98.17900085449219, 114.81099700927734, 91.25900268554688)), ('A', 359, 'VAL', 0.6426004344700746, (88.66300201416016, 129.73500061035156, 101.0469970703125)), ('A', 365, 'ARG', 0.6091940059158321, (81.18399810791016, 132.30999755859375, 114.27400207519531)), ('A', 366, 'LEU', 0.6210583084321089, (82.28600311279297, 129.1179962158203, 112.5469970703125)), ('A', 369, 'LYS', 0.6062777089953731, (80.56700134277344, 121.9469985961914, 109.4469985961914)), ('A', 390, 'ASP', 0.6294952084893606, (111.68299865722656, 108.49299621582031, 115.59100341796875)), ('A', 396, 'PHE', 0.5638273639450857, (108.72000122070312, 110.22799682617188, 107.46800231933594)), ('A', 416, 'ASN', 0.5812043233554747, (87.89399719238281, 77.94599914550781, 127.82099914550781)), ('A', 436, 'GLU', 0.5151375995501214, (95.55599975585938, 69.64299774169922, 116.11399841308594)), ('A', 440, 'PHE', 0.6195905485037901, (96.2040023803711, 80.72799682617188, 118.96800231933594)), ('A', 445, 'ASP', 0.6493659396483392, (104.64700317382812, 93.63300323486328, 123.5999984741211)), ('A', 448, 'ALA', 0.5620169020753233, (104.5530014038086, 95.97200012207031, 118.11100006103516)), ('A', 452, 'ASP', 0.4549523875635338, (104.46499633789062, 96.53800201416016, 111.86900329589844)), ('A', 468, 'GLN', 0.6192725746749237, (99.47000122070312, 99.01899719238281, 78.48999786376953)), ('A', 477, 'ASP', 0.5634277177571965, (85.84200286865234, 98.43399810791016, 82.75599670410156)), ('A', 481, 'ASP', 0.5540654439626964, (79.61299896240234, 97.3759994506836, 82.94300079345703)), ('A', 490, 'ALA', 0.6295500125292277, (71.91799926757812, 111.68499755859375, 102.87000274658203)), ('A', 498, 'LEU', 0.631703243302989, (77.37799835205078, 102.56400299072266, 113.43599700927734)), ('A', 501, 'SER', 0.5502594586778718, (85.7750015258789, 103.89299774169922, 114.76899719238281)), ('A', 502, 'ALA', 0.5115232171684142, (85.26499938964844, 107.58899688720703, 114.01100158691406)), ('A', 519, 'MET', 0.6396911591257112, (74.46600341796875, 116.12200164794922, 111.82599639892578)), ('A', 522, 'GLU', 0.6119826153228697, (71.38300323486328, 118.98999786376953, 104.87300109863281)), ('A', 525, 'ASP', 0.6280620110648317, (74.67500305175781, 117.09600067138672, 101.91799926757812)), ('A', 535, 'VAL', 0.5926534720212078, (90.447998046875, 118.70800018310547, 99.37300109863281)), ('A', 541, 'GLN', 0.6008868036651557, (94.26899719238281, 105.93599700927734, 113.81700134277344)), ('A', 542, 'MET', 0.5378592072780484, (96.16600036621094, 102.63600158691406, 113.7509994506836)), ('A', 553, 'ARG', 0.5267850811944494, (102.25599670410156, 89.0, 113.52400207519531)), ('A', 565, 'THR', 0.5893691906084175, (83.5250015258789, 107.72699737548828, 105.6760025024414)), ('A', 566, 'MET', 0.5852122981948426, (80.44000244140625, 109.9469985961914, 105.48500061035156)), ('A', 575, 'LEU', 0.571986485232378, (77.59200286865234, 101.19599914550781, 93.20999908447266)), ('A', 576, 'LEU', 0.5682929156276402, (78.93299865722656, 98.90799713134766, 95.93299865722656)), ('A', 582, 'THR', 0.6479007917162439, (74.00299835205078, 90.61699676513672, 91.84400177001953)), ('A', 591, 'THR', 0.6826014972676041, (77.072998046875, 86.3499984741211, 97.9749984741211)), ('A', 595, 'TYR', 0.6742568836682463, (71.82499694824219, 77.49099731445312, 100.3280029296875)), ('A', 604, 'THR', 0.6757056418765227, (79.49099731445312, 79.87799835205078, 87.2040023803711)), ('A', 610, 'GLU', 0.6144699054640383, (87.50199890136719, 73.73400115966797, 77.13500213623047)), ('A', 614, 'LEU', 0.6492655812312006, (91.75800323486328, 75.48200225830078, 87.95500183105469)), ('A', 630, 'LEU', 0.5463657354885919, (97.0009994506836, 101.1520004272461, 90.49800109863281)), ('A', 642, 'HIS', 0.6319270182982146, (79.3280029296875, 109.1989974975586, 87.73100280761719)), ('A', 648, 'LEU', 0.6313367288946162, (84.9010009765625, 116.46099853515625, 85.44200134277344)), ('A', 651, 'ARG', 0.5602787184251804, (85.06700134277344, 113.95800018310547, 89.95999908447266)), ('A', 658, 'GLU', 0.5237230404830276, (89.97599792480469, 109.99800109863281, 98.53500366210938)), ('A', 661, 'GLN', 0.5731413912639609, (92.26499938964844, 110.58499908447266, 102.94200134277344)), ('A', 665, 'GLU', 0.4776058629321948, (96.98500061035156, 110.52899932861328, 104.75800323486328)), ('A', 672, 'SER', 0.568916623342722, (102.625, 110.5270004272461, 117.1259994506836)), ('A', 673, 'LEU', 0.5820436085174708, (101.80400085449219, 111.49700164794922, 113.54000091552734)), ('A', 676, 'LYS', 0.5812914061267577, (101.48999786376953, 106.98699951171875, 105.01200103759766)), ('A', 681, 'SER', 0.536260766429813, (93.51599884033203, 101.16400146484375, 104.66100311279297)), ('A', 689, 'TYR', 0.5865217566545127, (86.0780029296875, 96.4990005493164, 95.86100006103516)), ('A', 698, 'GLN', 0.612769299077103, (96.69200134277344, 92.33399963378906, 87.41799926757812)), ('A', 706, 'ALA', 0.5642828902104337, (101.41400146484375, 86.2770004272461, 77.96399688720703)), ('A', 707, 'LEU', 0.5933395220653483, (99.69400024414062, 86.90499877929688, 74.62899780273438)), ('A', 717, 'ASP', 0.6381845147219527, (95.41899871826172, 79.22000122070312, 65.26100158691406)), ('A', 726, 'ARG', 0.5859524585401735, (95.48200225830078, 93.86299896240234, 66.7760009765625)), ('A', 734, 'ASN', 0.6110944107141238, (96.83999633789062, 103.49400329589844, 68.12100219726562)), ('A', 739, 'THR', 0.6074143322269295, (85.83000183105469, 99.78500366210938, 71.37999725341797)), ('A', 740, 'ASP', 0.5873903377475861, (85.36299896240234, 96.77400207519531, 69.09500122070312)), ('A', 744, 'GLU', 0.6407543443827809, (86.56700134277344, 91.2249984741211, 71.41400146484375)), ('A', 749, 'LEU', 0.6348158437539979, (89.1709976196289, 86.28099822998047, 78.04299926757812)), ('A', 755, 'MET', 0.660644854295413, (87.66999816894531, 84.21700286865234, 86.8239974975586)), ('A', 759, 'SER', 0.5698746589450058, (88.93299865722656, 91.13400268554688, 97.49700164794922)), ('A', 761, 'ASP', 0.5326102236540491, (91.18800354003906, 85.8499984741211, 96.5510025024414)), ('A', 767, 'ASN', 0.6828535673938776, (92.01499938964844, 76.46299743652344, 78.88999938964844)), ('A', 785, 'VAL', 0.5233606791157492, (103.77100372314453, 90.9540023803711, 86.4260025024414)), ('A', 786, 'LEU', 0.6104832788279873, (103.95700073242188, 91.07499694824219, 90.22100067138672)), ('A', 798, 'LYS', 0.5937202405117561, (100.8280029296875, 79.76499938964844, 98.01599884033203)), ('A', 802, 'GLU', 0.6099234952305033, (94.06099700927734, 71.72599792480469, 90.10600280761719)), ('A', 808, 'GLY', 0.6446752432831613, (87.00700378417969, 72.0009994506836, 93.3479995727539)), ('A', 815, 'GLN', 0.614237810657885, (87.50800323486328, 77.35199737548828, 102.51200103759766)), ('A', 822, 'GLN', 0.6396664459012708, (72.94100189208984, 64.68299865722656, 98.34100341796875)), ('A', 827, 'VAL', 0.6799134925410784, (76.96199798583984, 69.29100036621094, 94.93800354003906)), ('A', 834, 'PRO', 0.5501858434322214, (88.8949966430664, 71.78399658203125, 111.72000122070312)), ('A', 839, 'GLY', 0.612381533941298, (91.1240005493164, 76.75700378417969, 118.10299682617188)), ('A', 857, 'GLU', 0.6049813150603808, (75.51499938964844, 81.72699737548828, 119.69100189208984)), ('A', 865, 'ASP', 0.6451213218778705, (80.53199768066406, 76.47699737548828, 109.61699676513672)), ('A', 869, 'LEU', 0.6728644120748409, (82.86199951171875, 68.03399658203125, 107.7249984741211)), ('A', 878, 'ALA', 0.6850979758988448, (83.64099884033203, 64.13999938964844, 110.8270034790039)), ('A', 888, 'ILE', 0.6899986062726386, (75.79399871826172, 72.9739990234375, 122.27200317382812)), ('A', 893, 'ASP', 0.49497326885671483, (69.98899841308594, 71.72699737548828, 128.68699645996094)), ('A', 894, 'GLU', 0.6058097468687608, (72.11599731445312, 73.69200134277344, 131.1649932861328)), ('A', 906, 'MET', 0.5964681234692764, (69.0719985961914, 75.10700225830078, 118.00900268554688)), ('A', 910, 'ASP', 0.5288301632892284, (68.51699829101562, 69.71199798583984, 111.0989990234375)), ('A', 915, 'TYR', 0.6469067553639035, (71.92500305175781, 75.822998046875, 105.3550033569336)), ('A', 919, 'GLU', 0.6505148108800981, (65.1969985961914, 76.97000122070312, 99.04299926757812)), ('B', 87, 'MET', 0.4893448105559585, (85.38800048828125, 120.26499938964844, 119.50399780273438)), ('B', 98, 'LEU', 0.5038010810428031, (99.91799926757812, 127.67900085449219, 118.92900085449219)), ('B', 100, 'ASN', 0.46748203549096434, (105.15399932861328, 131.25399780273438, 118.83300018310547)), ('B', 103, 'LEU', 0.5206378359100277, (105.0479965209961, 130.99400329589844, 112.61100006103516)), ('B', 110, 'ALA', 0.6428069024578029, (106.47599792480469, 133.031005859375, 101.64700317382812)), ('B', 121, 'PRO', 0.6222587812125262, (106.80899810791016, 121.93800354003906, 113.5260009765625)), ('B', 128, 'LEU', 0.5901562998489648, (111.9010009765625, 117.98899841308594, 120.33999633789062)), ('B', 138, 'TYR', 0.6566034555223693, (122.27999877929688, 107.10800170898438, 120.70700073242188)), ('B', 143, 'ASP', 0.5137403175682864, (126.34200286865234, 112.88800048828125, 121.73200225830078)), ('B', 154, 'TRP', 0.6526021089816376, (118.97699737548828, 121.3949966430664, 120.87799835205078)), ('B', 158, 'GLN', 0.661407157111761, (115.41000366210938, 115.00700378417969, 129.9969940185547)), ('B', 174, 'MET', 0.5818698335163294, (127.97799682617188, 100.88200378417969, 126.09600067138672)), ('B', 182, 'TRP', 0.5891456752796866, (116.02100372314453, 100.13999938964844, 125.52400207519531)), ('C', 11, 'VAL', 0.6236924385145588, (98.01300048828125, 80.62899780273438, 128.1820068359375)), ('C', 15, 'SER', 0.5717014086879723, (96.97200012207031, 85.5250015258789, 131.79800415039062)), ('C', 19, 'GLN', 0.5437931003099837, (96.8290023803711, 90.25199890136719, 135.86399841308594)), ('C', 33, 'VAL', 0.5526382008608618, (105.51000213623047, 87.13700103759766, 125.61499786376953)), ('C', 48, 'ALA', 0.5841221250458267, (107.86699676513672, 73.66300201416016, 125.33799743652344)), ('C', 55, 'LEU', 0.5806612122861412, (107.78099822998047, 81.13700103759766, 132.36099243164062)), ('C', 59, 'LEU', 0.5833964303360591, (105.78399658203125, 83.62000274658203, 137.9499969482422)), ('C', 64, 'GLY', 0.357114064960869, (102.33300018310547, 88.66100311279297, 145.0)), ('D', 85, 'SER', 0.4710969407511191, (91.75499725341797, 85.99099731445312, 142.052001953125)), ('D', 87, 'MET', 0.5238012708913974, (92.50800323486328, 82.197998046875, 138.2220001220703)), ('D', 98, 'LEU', 0.5690017263951221, (101.14800262451172, 68.30899810791016, 133.83200073242188)), ('D', 103, 'LEU', 0.4325710715870304, (107.69100189208984, 72.3270034790039, 137.5970001220703)), ('D', 107, 'ILE', 0.4822076745060929, (106.7229995727539, 74.8010025024414, 143.35899353027344)), ('D', 113, 'GLY', 0.3151129722467133, (110.1520004272461, 80.16600036621094, 151.0290069580078)), ('D', 125, 'ALA', 0.2585835444507086, (124.2509994506836, 79.9000015258789, 131.84300231933594)), ('D', 126, 'ALA', 0.36906498897012313, (123.56199645996094, 83.34500122070312, 133.29299926757812)), ('D', 134, 'ASP', 0.325173502789541, (117.96700286865234, 80.1729965209961, 157.66700744628906)), ('D', 140, 'ASN', 0.25067329277549594, (117.4280014038086, 69.20500183105469, 150.3769989013672)), ('D', 143, 'ASP', 0.24588220848510237, (124.83599853515625, 68.26300048828125, 147.66299438476562)), ('D', 148, 'THR', 0.4177896921810501, (120.16200256347656, 71.18199920654297, 142.22799682617188)), ('D', 155, 'GLU', 0.26140194218735474, (128.19900512695312, 75.21199798583984, 139.11300659179688)), ('D', 158, 'GLN', 0.4002586655418518, (130.14500427246094, 83.15699768066406, 143.91900634765625)), ('D', 169, 'LEU', 0.2853011876784471, (131.53500366210938, 76.65699768066406, 156.20199584960938)), ('D', 182, 'TRP', 0.2568875288936245, (117.84600067138672, 84.50700378417969, 157.2169952392578))]
handle_read_draw_probe_dots_unformatted("/Users/agnel/projects_ccpem/validation/Model_validation_593/validation_cootdata/molprobity_probepdb7bv1_0.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
