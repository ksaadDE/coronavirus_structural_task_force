# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 218 ', 'GLN', 0.025531716626244632, (161.45699999999994, 109.942, 153.09)), ('B', ' 382 ', 'VAL', 0.027147888198420025, (137.233, 149.206, 111.703)), ('B', ' 422 ', 'ASN', 0.015758519095440526, (130.84499999999994, 162.064, 93.057)), ('B', ' 441 ', 'LEU', 0.04297135593265906, (112.693, 145.126, 93.497)), ('B', ' 449 ', 'TYR', 0.03233420316678961, (118.803, 156.56999999999994, 87.44100000000002)), ('B', ' 745 ', 'ASP', 0.04828171278422969, (183.133, 152.70899999999995, 143.069)), ('C', ' 112 ', 'SER', 0.007547180721305476, (122.693, 184.156, 112.584)), ('C', ' 198 ', 'ASP', 0.04289115201664358, (134.57899999999995, 171.06, 128.698)), ('C', ' 444 ', 'LYS', 0.04581540678791135, (174.53, 169.242, 91.35699999999999)), ('C', ' 519 ', 'HIS', 0.029272103060131338, (176.178, 184.092, 134.13)), ('C', ' 536 ', 'ASN', 0.04682392499699491, (160.29, 200.63399999999996, 146.682))]
data['omega'] = []
data['rota'] = [('A', ' 760 ', 'CYS', 0.10929178239747654, (151.638, 170.36299999999994, 152.61)), ('A', '1118 ', 'ASP', 0.06267784937226453, (167.217, 157.944, 226.367)), ('B', ' 508 ', 'TYR', 0.06768517119047984, (122.29999999999997, 148.412, 93.91)), ('B', ' 973 ', 'ILE', 0.25474072988222435, (166.97599999999994, 147.78299999999993, 134.477)), ('B', '1081 ', 'ILE', 0.22309084298782234, (143.61, 153.275, 223.709)), ('B', '1106 ', 'GLN', 0.06483912229719754, (156.355, 148.125, 214.25399999999996)), ('B', '1135 ', 'ASN', 0.08629887480303541, (143.289, 149.397, 228.814)), ('C', ' 592 ', 'PHE', 0.12195204566553025, (154.635, 188.362, 153.614)), ('C', ' 619 ', 'GLU', 0.18890386021688324, (151.59999999999994, 197.056, 154.453)), ('C', ' 709 ', 'ASN', 0.04062604437126821, (163.216, 187.199, 210.90999999999997)), ('C', ' 907 ', 'ASN', 0.251850411163646, (152.28299999999996, 160.24599999999998, 209.619)), ('C', '1118 ', 'ASP', 0.11074424418131024, (160.167, 165.38299999999995, 226.648)), ('C', '1135 ', 'ASN', 0.056024326137924046, (161.857, 180.769, 228.786))]
data['cbeta'] = [('A', ' 331 ', 'ASN', ' ', 0.3387516702006735, (190.123, 131.317, 123.766)), ('C', ' 571 ', 'ASP', ' ', 0.2864211609302476, (171.592, 179.07, 144.498)), ('C', '1041 ', 'ASP', ' ', 0.25033956938842233, (153.745, 169.249, 192.47))]
data['probe'] = [(' B 122  ASN  OD1', ' B1302  NAG  C1 ', -1.387, (172.158, 104.893, 121.006)), (' B 122  ASN  CG ', ' B1302  NAG  C1 ', -0.827, (172.22, 103.999, 121.488)), (' A 607  GLN  OE1', ' A 674  TYR  CE1', -0.739, (199.977, 169.456, 168.01)), (' B 927  PHE  CE2', ' B 931  ILE HD11', -0.71, (174.669, 138.602, 197.506)), (' A 607  GLN  OE1', ' A 674  TYR  HE1', -0.694, (200.523, 170.039, 167.712)), (' B 927  PHE  CZ ', ' B 931  ILE HD11', -0.651, (174.208, 138.875, 197.067)), (' A 327  VAL  H  ', ' A 531  THR HG22', -0.642, (192.21, 141.385, 130.253)), (' B 122  ASN  ND2', ' B1302  NAG  C1 ', -0.609, (171.188, 104.587, 121.27)), (' C 607  GLN  OE1', ' C 674  TYR  HE1', -0.564, (132.401, 190.815, 169.467)), (' B 141  LEU  HG ', ' B 141  LEU  O  ', -0.548, (163.691, 96.052, 117.463)), (' B 122  ASN HD21', ' B1302  NAG  C1 ', -0.531, (171.562, 104.249, 120.498)), (' A1081  ILE HD11', ' A1135  ASN  HB2', -0.511, (179.739, 149.475, 226.036)), (' C 709  ASN  N  ', ' C 709  ASN HD22', -0.47, (162.503, 188.977, 211.455)), (' B 122  ASN  ND2', ' B1302  NAG  H2 ', -0.449, (171.821, 103.63, 120.551)), (' B 395  VAL  H  ', ' B 523  THR  CB ', -0.436, (129.495, 161.271, 115.799)), (' C1083  HIS  CG ', ' C1084  ASP  H  ', -0.426, (166.468, 175.823, 231.798)), (' A 109  THR  HB ', ' A 114  THR HG21', -0.416, (202.63, 170.987, 114.681)), (' C 902  MET  HE1', ' C1049  LEU HD13', -0.408, (143.97, 161.105, 203.927)), (' A1075  PHE  HB3', ' A1096  VAL HG13', -0.403, (183.91, 156.041, 216.075))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
