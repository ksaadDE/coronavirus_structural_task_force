# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  84 ', 'ASN', 0.0050468912347348144, (10.242999999999999, 4.004, 12.067000000000004))]
data['omega'] = []
data['rota'] = [('A', '  50 ', 'LEU', 0.2418873120033565, (-28.226, -4.968000000000002, -38.118000000000016)), ('A', '  93 ', 'THR', 0.09256882105648852, (-30.713, 18.521, -11.820000000000004)), ('A', ' 123 ', 'SER', 0.17700925673713622, (-13.234, 0.146, -12.878)), ('A', ' 263 ', 'ASP', 0.014143870794214308, (19.892, 12.585, -38.868)), ('A', ' 297 ', 'VAL', 0.0, (9.121, 18.42, -24.738000000000007)), ('B', '  48 ', 'ASP', 0.2501064554922694, (22.329, 16.424, 6.6960000000000015)), ('B', '  90 ', 'LYS', 0.29939395945056946, (-0.887, 15.911999999999999, 13.855000000000004))]
data['cbeta'] = []
data['probe'] = [(' B 140  PHE  HB2', ' B 172  HIS  CE1', -0.781, (10.267, 8.068, -9.2)), (' B 140  PHE  HD2', ' B 172  HIS  HD1', -0.769, (10.077, 6.175, -8.684)), (' B 233  VAL HG21', ' B 269  LYS  HE3', -0.661, (13.524, -26.785, -18.772)), (' B  33  ASP  OD1', ' B 401  HOH  O  ', -0.635, (-10.992, 10.593, 9.578)), (' B  51  ASN  ND2', ' B  51  ASN  O  ', -0.618, (24.695, 10.917, 10.712)), (' B 166  GLU  HG3', ' B 172  HIS  NE2', -0.587, (13.808, 7.266, -8.972)), (' A 209  TYR  O  ', ' A 213  ILE HG13', -0.574, (16.514, 13.709, -26.657)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.574, (-7.296, 15.795, 5.509)), (' B 171  VAL  O  ', ' B 172  HIS  HD2', -0.572, (14.297, 4.734, -8.725)), (' B 114  VAL HG11', ' B 140  PHE  HZ ', -0.57, (4.744, 5.678, -7.664)), (' B 247  VAL HG22', ' B 261  VAL HG11', -0.568, (1.696, -24.8, -11.006)), (' A 140  PHE  HB2', ' A 172  HIS  CE1', -0.563, (-12.699, -2.503, -26.108)), (' B 166  GLU  HG3', ' B 172  HIS  CD2', -0.558, (14.341, 6.136, -9.021)), (' B 245  ASP  O  ', ' B 249  ILE HG12', -0.539, (-0.838, -20.659, -5.42)), (' A 231  ASN  O  ', ' A 235  MET  HE2', -0.537, (7.928, 5.764, -47.834)), (' A 166  GLU  HG3', ' A 172  HIS  CD2', -0.537, (-13.544, -3.408, -28.84)), (' B 114  VAL HG11', ' B 140  PHE  CZ ', -0.534, (5.078, 6.202, -7.777)), (' A  50  LEU HD23', ' A 189  GLN  HB3', -0.526, (-25.703, -6.129, -36.976)), (' B 169  THR  OG1', ' B 171  VAL HG22', -0.525, (17.608, 0.941, -10.416)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.522, (-24.995, 15.606, -13.204)), (' A  68  VAL HG12', ' A  75  LEU HD23', -0.522, (-28.731, 10.448, -13.908)), (' A 217  ARG  HG2', ' A 220  LEU HD23', -0.52, (23.878, 9.133, -29.432)), (' B 140  PHE  HB3', ' B 144  SER  OG ', -0.52, (9.085, 10.934, -8.13)), (' B 262  LEU  H  ', ' B 262  LEU HD12', -0.516, (0.398, -28.911, -13.668)), (' B 199  THR HG21', ' B 239  TYR  CZ ', -0.51, (10.619, -14.552, -16.864)), (' B  75  LEU HD23', ' B  91  VAL HG11', -0.509, (-2.762, 18.63, 8.04)), (' A 110  GLN  HB3', ' A 405  HOH  O  ', -0.507, (-2.89, 14.391, -29.061)), (' A   4  ARG  HB2', ' B 139  SER  HB2', -0.499, (7.05, 6.183, -15.626)), (' B  76  ARG  HG3', ' B  76  ARG HH11', -0.486, (-0.57, 26.651, 11.909)), (' B 140  PHE  HD1', ' B 144  SER  HB2', -0.484, (7.064, 10.265, -7.536)), (' B  55  GLU  CD ', ' B  55  GLU  H  ', -0.483, (17.809, 9.615, 15.675)), (' A  92  ASP  OD1', ' A  93  THR HG22', -0.478, (-32.649, 15.886, -12.029)), (' B  55  GLU  N  ', ' B  55  GLU  OE1', -0.476, (16.627, 9.949, 15.214)), (' A  81  SER  O  ', ' A  87  LEU HD12', -0.476, (-30.522, 12.153, -27.82)), (' B  56  ASP  O  ', ' B  59  ILE HG22', -0.47, (16.881, 16.697, 18.485)), (' B 226  THR  OG1', ' B 229  ASP  HB2', -0.467, (10.32, -31.874, -13.868)), (' B 140  PHE  HD2', ' B 172  HIS  ND1', -0.467, (10.075, 6.178, -8.937)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.465, (-24.23, 15.544, -13.395)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.447, (-2.678, 11.867, -8.572)), (' B  88  LYS  NZ ', ' B 406  HOH  O  ', -0.446, (2.211, 5.34, 15.224)), (' A 136  ILE HG13', ' A 172  HIS  HB2', -0.445, (-10.567, 1.148, -28.952)), (' B 288  GLU  OE2', ' B 290  GLU  HB2', -0.439, (4.108, -6.319, -16.324)), (' A 228  ASN  ND2', ' A 401  HOH  O  ', -0.437, (10.414, 14.825, -50.525)), (' B 276  MET  HE1', ' B 287  LEU HD21', -0.436, (7.3, -15.311, -24.496)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.434, (-13.091, 5.288, -13.553)), (' B  58  LEU HD11', ' B  80  HIS  HD2', -0.432, (8.775, 15.497, 15.917)), (' A 138  GLY  HA2', ' B   4  ARG  HG3', -0.43, (-6.243, -1.295, -24.126)), (' A 222  ARG  H  ', ' A 222  ARG  NE ', -0.427, (27.658, 6.917, -38.951)), (' B 153  ASP  O  ', ' B 154  TYR  C  ', -0.425, (-13.758, -1.053, -2.922)), (' A 298  ARG  NH1', ' A 407  HOH  O  ', -0.42, (0.047, 17.727, -18.954)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.418, (-0.085, 8.067, -33.101)), (' A  39  PRO  HB3', ' A 164  HIS  CE1', -0.417, (-22.544, 5.456, -28.855)), (' B 282  LEU  HA ', ' B 282  LEU HD23', -0.413, (-2.407, -10.911, -27.377)), (' B 176  ASP  HB2', ' B 408  HOH  O  ', -0.412, (2.253, -0.385, 4.706)), (' A 114  VAL HG11', ' A 140  PHE  CZ ', -0.408, (-11.578, 2.862, -23.063)), (' B  85  CYS  HB2', ' B 179  GLY  O  ', -0.406, (10.057, 3.273, 7.716)), (' B 165 AMET  HB2', ' B 165 AMET  HE3', -0.404, (15.373, 4.787, -1.804)), (' A 114  VAL HG11', ' A 140  PHE  HZ ', -0.404, (-11.56, 3.423, -22.857)), (' B 140  PHE  HB2', ' B 172  HIS  HE1', -0.4, (10.991, 8.586, -9.569))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
