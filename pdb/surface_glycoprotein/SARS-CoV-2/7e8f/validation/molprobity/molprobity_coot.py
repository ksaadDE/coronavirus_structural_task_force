# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', '   8 ', 'PRO', None, (57.29199999999997, 101.066, 118.531)), ('B', '  32 ', 'SER', None, (75.867, 102.59, 100.309)), ('E', '   8 ', 'PRO', None, (36.166, 82.148, 77.42699999999999))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' R 379  CYS  HA ', ' R 432  CYS  HB3', -0.941, (79.027, 72.61, 57.265)), (' R 391  CYS  HA ', ' R 525  CYS  HB3', -0.854, (93.164, 67.533, 57.143)), (' B   2  ILE HG12', ' B  27  GLN  HG3', -0.816, (76.613, 98.925, 111.499)), (' E  83  PHE  HB3', ' E 106  ILE HG12', -0.815, (32.47, 95.145, 83.461)), (' A 131  CYS  HA ', ' A 166  CYS  HB3', -0.807, (101.212, 81.368, 72.784)), (' D  82  MET  HB3', ' D  85  LEU HD21', -0.799, (52.446, 102.274, 55.136)), (' B  24  ARG  NH1', ' B  75  ASP  OD1', -0.71, (67.498, 107.66, 115.019)), (' R 357  ARG  HD2', ' R 394  ASN HD21', -0.705, (94.217, 75.582, 68.042)), (' B  31  HIS  HA ', ' B  34  GLY  H  ', -0.704, (74.84, 104.302, 98.872)), (' R 340  GLU  OE1', ' R 356  LYS  NZ ', -0.686, (87.583, 66.822, 74.778)), (' D  30  SER  HB2', ' D  73  LYS  HE3', -0.68, (70.515, 103.246, 69.759)), (' A 213  VAL HG23', ' A 214  ARG  HG2', -0.669, (141.604, 74.039, 75.013)), (' A  96  GLU  HG3', ' A 100  ILE HG22', -0.656, (125.507, 74.87, 81.466)), (' C  91  THR HG23', ' C 122  THR  HA ', -0.65, (65.721, 72.496, 118.636)), (' A  14  GLN  N  ', ' A  14  GLN  OE1', -0.64, (107.682, 88.253, 86.787)), (' B  36  LEU HD11', ' B  73  GLY  H  ', -0.638, (69.765, 107.105, 104.962)), (' B  66  ARG  NH1', ' B  87  ASP  OD2', -0.637, (47.415, 96.014, 106.101)), (' R 357  ARG  HG2', ' R 357  ARG HH11', -0.637, (93.793, 73.619, 69.193)), (' A 111  ASP  OD1', ' A 134  GLN  NE2', -0.632, (107.165, 91.979, 76.008)), (' C  29  PHE  O  ', ' C  72  ARG  NH2', -0.631, (72.446, 79.97, 92.875)), (' D   1  GLU  HG3', ' D   2  VAL HG23', -0.63, (59.634, 106.703, 83.678)), (' E  30  SER  OG ', ' R 498  GLN  OE1', -0.612, (57.538, 74.622, 81.241)), (' R 379  CYS  HA ', ' R 432  CYS  CB ', -0.608, (78.657, 72.034, 58.29)), (' R 433  VAL HG12', ' R 512  VAL HG13', -0.601, (78.697, 76.199, 63.874)), (' D  82  MET  HE1', ' D 113  VAL HG21', -0.599, (49.256, 104.653, 59.919)), (' C  52  SER  O  ', ' C  72  ARG  NH1', -0.598, (74.782, 81.292, 95.127)), (' C  67  ARG  NH2', ' C  90  ASP  OD2', -0.598, (75.502, 74.666, 117.156)), (' A 148  ASN  OD1', ' A 149  ASN  N  ', -0.597, (115.79, 68.179, 100.518)), (' E  33  LEU HD11', ' E  88  CYS  HB2', -0.596, (48.656, 84.229, 76.247)), (' H  73  ASP  OD2', ' H  76  LYS  NZ ', -0.592, (97.965, 98.724, 87.425)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.574, (132.688, 78.668, 75.729)), (' E  34  ALA  HB2', ' E  91  LEU HD11', -0.574, (54.481, 88.0, 79.039)), (' B  31  HIS  ND1', ' B  31  HIS  O  ', -0.571, (77.566, 104.939, 99.477)), (' H  87  ARG  NE ', ' H  89  GLU  OE2', -0.568, (87.357, 88.848, 114.747)), (' B  33  ASN  HB3', ' C 105  TYR  CD2', -0.565, (76.816, 100.703, 94.563)), (' H   3  GLN  H  ', ' H  25  SER  HB3', -0.564, (111.606, 101.891, 96.201)), (' C 100  ARG  HA ', ' C 113  ASP  HB2', -0.563, (64.42, 88.536, 96.25)), (' A  16  VAL HG21', ' A 254  SER  O  ', -0.559, (118.055, 90.261, 90.618)), (' A 128  ILE HD12', ' A 170  TYR  HD2', -0.558, (108.431, 69.441, 72.082)), (' R 442  ASP  O  ', ' R 448  ASN  ND2', -0.558, (67.627, 71.296, 81.197)), (' C  52  SER  HB3', ' C  57  SER  HB2', -0.557, (80.108, 85.119, 96.961)), (' H  34  MET  HE1', ' H  98  THR HG22', -0.557, (108.174, 94.552, 98.212)), (' C  19  ARG  HG3', ' C  19  ARG HH11', -0.555, (75.51, 68.271, 104.672)), (' A 276  LEU  HB3', ' A 289  VAL HG22', -0.551, (132.763, 66.19, 49.694)), (' D  11  LEU HD11', ' D 116  SER  HB2', -0.55, (40.552, 108.821, 53.34)), (' D  59  TYR  HB2', ' D  64  LYS  HG2', -0.55, (58.862, 91.719, 57.415)), (' R 403  ARG  HG2', ' R 505  TYR  HA ', -0.548, (62.128, 76.26, 72.252)), (' B  12  PRO  HA ', ' B 110  GLU  HG2', -0.544, (47.429, 96.25, 118.552)), (' A 130  VAL HG21', ' A 231  ILE HD12', -0.544, (105.801, 76.13, 68.128)), (' R 391  CYS  CA ', ' R 525  CYS  HB3', -0.539, (93.351, 67.358, 56.964)), (' A 118  LEU HD12', ' A 135  PHE  HE1', -0.537, (109.914, 82.284, 77.027)), (' E  37  GLN  HB2', ' E  47  LEU HD11', -0.527, (44.084, 93.202, 82.279)), (' A 187  LYS  N  ', ' A 210  ILE  O  ', -0.526, (134.111, 66.316, 78.106)), (' A  19  THR  OG1', ' A 138  ASP  OD1', -0.514, (121.197, 91.331, 80.155)), (' R 395  VAL HG22', ' R 515  PHE  HD1', -0.514, (88.737, 71.606, 61.447)), (' C  22  CYS  HB3', ' C  79  LEU  HB3', -0.512, (69.118, 75.483, 99.739)), (' R 347  PHE  CE2', ' R 509  ARG  HB3', -0.508, (74.693, 69.291, 72.877)), (' B  42  LEU HD13', ' B  91  TYR  CZ ', -0.504, (53.554, 93.075, 109.167)), (' H  12  VAL HG11', ' H  86  LEU HD13', -0.502, (88.716, 99.089, 109.039)), (' R 341  VAL HG23', ' R 342  PHE  CD1', -0.501, (81.964, 66.062, 69.375)), (' R 455  LEU HD22', ' R 493  GLN  HG3', -0.501, (64.981, 88.097, 78.717)), (' L  34  TRP  HB2', ' L  47  ILE  HB ', -0.497, (118.026, 85.623, 111.468)), (' A 193  VAL HG13', ' A 270  LEU HD11', -0.495, (121.364, 73.714, 61.546)), (' A  37  TYR  OH ', ' A  54  LEU  O  ', -0.486, (121.502, 72.608, 57.031)), (' A  32  PHE  CD2', ' A 218  GLN  HG2', -0.482, (139.738, 70.331, 65.757)), (' H   9  GLY  HA2', ' H  18  LEU HD21', -0.482, (93.8, 102.051, 107.159)), (' R 395  VAL HG23', ' R 524  VAL HG21', -0.48, (91.811, 70.694, 62.861)), (' A  28  TYR  CE1', ' A  63  THR HG22', -0.477, (131.383, 85.763, 66.362)), (' A  34  ARG  HD2', ' A 191  GLU  OE2', -0.474, (130.342, 69.059, 67.571)), (' E  47  LEU  HA ', ' E  58  VAL HG21', -0.472, (48.78, 94.003, 85.139)), (' D  66  ARG  NH1', ' D  89  ASP  OD2', -0.469, (50.111, 98.249, 54.026)), (' R 376  THR HG23', ' R 378  LYS  HG3', -0.468, (71.615, 72.073, 59.672)), (' D  71  ARG  HE ', ' D  73  LYS  HZ1', -0.468, (70.118, 102.716, 67.223)), (' A 143  VAL HG21', ' A 243  ALA  HB1', -0.463, (119.952, 76.485, 86.903)), (' D  61  ASP  HA ', ' D  64  LYS  HE2', -0.462, (55.697, 88.622, 56.14)), (' B  32  SER  HB3', ' B  37  TYR  CE1', -0.462, (74.594, 100.122, 99.226)), (' A  92  PHE  HB3', ' A 192  PHE  HB2', -0.462, (122.161, 73.852, 69.492)), (' A 128  ILE HD12', ' A 170  TYR  CD2', -0.461, (108.638, 69.278, 71.82)), (' A 130  VAL HG21', ' A 231  ILE HG23', -0.457, (105.691, 77.13, 67.795)), (' C  19  ARG  HG3', ' C  19  ARG  NH1', -0.457, (75.051, 68.455, 104.783)), (' B  16  GLY  N  ', ' B  83  VAL  O  ', -0.456, (41.787, 98.935, 109.073)), (' R 439  ASN  O  ', ' R 443  SER  OG ', -0.456, (63.34, 66.923, 78.75)), (' C  20  LEU HD13', ' C  83  MET  HE3', -0.455, (70.516, 72.755, 110.103)), (' C  60  TYR  HB2', ' C  65  LYS  HD2', -0.455, (81.259, 82.472, 109.422)), (' R 347  PHE  HE2', ' R 509  ARG  HB3', -0.453, (75.146, 69.344, 72.692)), (' D  31  SER  O  ', ' R 473  TYR  OH ', -0.452, (69.219, 98.389, 75.636)), (' H   4  LEU HD11', ' H  98  THR HG23', -0.452, (109.504, 95.365, 99.926)), (' D  52  TYR  O  ', ' D  71  ARG  NH1', -0.449, (67.483, 98.799, 68.29)), (' R 417  LYS  HD3', ' R 455  LEU HD12', -0.449, (65.908, 88.626, 74.346)), (' A  33  THR HG23', ' A  58  PHE  CZ ', -0.449, (133.424, 69.061, 57.824)), (' A 139  PRO  HB2', ' A 159  VAL HG13', -0.447, (113.914, 83.917, 79.421)), (' C  38  ARG  NE ', ' C  46  GLU  OE2', -0.447, (70.573, 81.469, 115.77)), (' B  36  LEU HD12', ' B  76  PHE  HZ ', -0.447, (69.007, 104.576, 106.156)), (' B  21  ILE HD12', ' B  78  LEU HD23', -0.446, (55.634, 98.225, 110.409)), (' E   8  PRO  HG3', ' E  11  LEU HD13', -0.442, (33.278, 83.669, 80.006)), (' A  92  PHE  O  ', ' A 192  PHE  N  ', -0.441, (124.191, 72.186, 69.218)), (' H 112  MET  O  ', ' H 115  TRP  NE1', -0.44, (111.773, 92.184, 105.908)), (' D  47  TRP  HZ2', ' D  50  VAL HG12', -0.44, (59.525, 92.215, 65.365)), (' E   6  GLN  O  ', ' E 100  GLN  NE2', -0.439, (38.958, 82.861, 72.596)), (' D  27  ILE  CD1', ' D 106  VAL HG21', -0.439, (58.583, 102.22, 78.038)), (' A 103  GLY  HA3', ' A 119  ILE  O  ', -0.437, (115.098, 76.255, 76.819)), (' R 382  VAL HG12', ' R 383  SER  H  ', -0.437, (83.233, 69.264, 50.984)), (' A  85  PRO  O  ', ' A 269  TYR  HE1', -0.437, (121.685, 84.141, 64.445)), (' R 350  VAL  O  ', ' R 353  TRP  HD1', -0.435, (77.725, 81.675, 74.096)), (' A 104  TRP  HB2', ' A 106  PHE  CE1', -0.434, (115.633, 77.761, 71.215)), (' R 431  GLY  HA2', ' R 515  PHE  CD2', -0.434, (84.661, 73.03, 59.006)), (' B  15  PRO  HA ', ' B  83  VAL HG12', -0.433, (43.66, 97.674, 110.996)), (' H  38  ARG  NE ', ' H  46  GLU  OE1', -0.432, (96.946, 89.367, 112.378)), (' A 213  VAL HG23', ' A 214  ARG  N  ', -0.43, (140.447, 73.352, 75.703)), (' R 347  PHE  CE2', ' R 509  ARG  HD3', -0.429, (74.889, 68.398, 74.354)), (' D  22  CYS  HB3', ' D  78  LEU  HB3', -0.427, (59.225, 105.133, 68.173)), (' R 442  ASP  HB3', ' R 451  TYR  HE2', -0.426, (69.132, 71.657, 79.653)), (' R 425  LEU  HA ', ' R 425  LEU HD23', -0.426, (80.072, 82.028, 64.225)), (' H  40  ALA  HB3', ' H  43  LYS  HB2', -0.426, (99.83, 92.19, 118.814)), (' B  14  THR HG23', ' B  15  PRO  HD2', -0.422, (39.577, 98.313, 114.471)), (' A  96  GLU  CD ', ' A 190  ARG HH21', -0.422, (123.767, 71.32, 79.122)), (' D  53  SER  OG ', ' R 457  ARG  O  ', -0.421, (70.823, 95.477, 72.703)), (' R 403  ARG  HB2', ' R 406  GLU  OE1', -0.421, (65.603, 78.809, 71.802)), (' A 105  ILE HD11', ' A 239  GLN  HB3', -0.421, (115.867, 85.191, 74.707)), (' A 102  ARG  NH1', ' A 153  MET  SD ', -0.421, (117.976, 72.519, 86.324)), (' A 176  LEU HD21', ' A 192  PHE  CE1', -0.42, (121.373, 70.196, 74.284)), (' B  33  ASN  ND2', ' R 481  ASN  O  ', -0.42, (73.655, 100.281, 93.781)), (' A 123  ALA  HB2', ' A 153  MET  HE1', -0.42, (116.725, 69.401, 86.662)), (' R 339  GLY  O  ', ' R 343  ASN  HB2', -0.42, (81.129, 62.02, 74.303)), (' R 421  TYR  HA ', ' R 461  LEU HD13', -0.42, (75.858, 89.087, 71.59)), (' H 104  SER  HA ', ' H 107  TRP  CD2', -0.419, (105.929, 81.702, 98.0)), (' H  83  MET  CE ', ' H  86  LEU HD21', -0.416, (91.112, 95.657, 108.346)), (' A 108  THR  OG1', ' A 234  ASN  O  ', -0.415, (109.022, 85.578, 64.373)), (' C  97  ALA  HB1', ' C 112  LYS  HB3', -0.414, (65.481, 85.65, 101.997)), (' R 438  SER  CB ', ' R 509  ARG  HG3', -0.413, (70.503, 68.089, 74.272)), (' A 231  ILE HG22', ' A 233  ILE HG23', -0.413, (105.537, 78.66, 65.379)), (' H 113  ASP  OD1', ' H 114  VAL HG23', -0.413, (114.224, 93.981, 100.16)), (' A 212  LEU HD22', ' A 217  PRO  HA ', -0.411, (138.798, 69.548, 70.337)), (' A 213  VAL HG23', ' A 214  ARG  H  ', -0.41, (140.402, 73.243, 75.194)), (' A 199  GLY  HA2', ' A 232  GLY  HA2', -0.41, (105.729, 77.253, 59.973)), (' H  83  MET  HE2', ' H  86  LEU HD21', -0.41, (91.103, 95.757, 108.34)), (' D  99  LEU  HB2', ' D 102  TYR  HB2', -0.41, (59.807, 92.628, 79.819)), (' A 124  THR  C  ', ' A 174  PRO  HD3', -0.409, (113.028, 64.569, 81.298)), (' C  28  ALA  HA ', ' R 449  TYR  HB3', -0.407, (66.654, 78.913, 86.726)), (' A 193  VAL HG23', ' A 223  LEU HD22', -0.407, (123.66, 70.365, 64.557)), (' B  30  LEU HD12', ' B  31  HIS  N  ', -0.407, (73.454, 105.697, 101.41)), (' H  70  ILE HD11', ' H  79  LEU HD11', -0.405, (100.351, 91.911, 98.486)), (' A 176  LEU  HB3', ' A 190  ARG  NH2', -0.404, (121.951, 69.254, 78.586)), (' A 142  GLY  HA3', ' A 156  GLU  HG2', -0.404, (115.24, 80.946, 90.335)), (' D  35  THR HG22', ' D  50  VAL HG23', -0.403, (59.891, 94.869, 69.116)), (' B   4  MET  HB3', ' B   4  MET  HE3', -0.403, (67.594, 98.413, 113.078)), (' A 131  CYS  CA ', ' A 166  CYS  HB3', -0.403, (101.831, 80.662, 73.443)), (' R 382  VAL HG12', ' R 383  SER  N  ', -0.403, (83.307, 69.369, 51.494)), (' E  82  ASP  OD1', ' E  86  TYR  OH ', -0.402, (39.443, 93.742, 84.452)), (' L  59  GLU  N  ', ' L  59  GLU  OE1', -0.401, (129.894, 90.775, 110.0)), (' A 229  LEU  HB2', ' A 231  ILE HG12', -0.401, (107.707, 73.561, 66.048)), (' R 362  VAL HG23', ' R 525  CYS  O  ', -0.4, (93.415, 62.379, 61.027)), (' A 125  ASN  OD1', ' A 171  VAL HG13', -0.4, (107.686, 67.105, 79.642)), (' R 377  PHE  CE2', ' R 434  ILE HG12', -0.4, (77.409, 67.928, 61.861))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
