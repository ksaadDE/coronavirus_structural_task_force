# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('D', '  33 ', 'VAL', 0.00256301, (147.7939999999999, 193.058, 213.23299999999998))]
data['omega'] = [('C', ' 154 ', 'PRO', None, (140.024, 243.869, 215.14999999999995)), ('C', ' 156 ', 'PRO', None, (137.99, 237.90699999999998, 217.22799999999995)), ('D', '   8 ', 'PRO', None, (128.4489999999999, 210.10799999999998, 205.52799999999996)), ('D', '  81 ', 'PRO', None, (124.72899999999997, 204.67899999999997, 223.81)), ('D', '  99 ', 'PRO', None, (153.68199999999987, 213.37799999999993, 203.85699999999997)), ('D', ' 145 ', 'PRO', None, (113.00699999999998, 223.212, 213.376))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' C   6  GLN  NE2', ' C  96  CYS  SG ', -0.67, (150.548, 226.222, 218.865)), (' D   6  GLN  NE2', ' D  92  CYS  SG ', -0.66, (137.198, 211.123, 208.421)), (' A 551  VAL  HB ', ' A 588  THR  HB ', -0.6, (165.204, 204.695, 209.097)), (' A 534  VAL HG13', ' C  33  TRP  HE1', -0.59, (160.429, 212.197, 216.384)), (' B 332  ILE HG21', ' B 335  LEU HD23', -0.58, (162.499, 196.231, 238.232)), (' A 534  VAL  H  ', ' B 326  ILE HD11', -0.58, (161.967, 207.744, 219.423)), (' A 535  LYS  HA ', ' A 552  LEU  HB2', -0.57, (160.709, 206.334, 214.911)), (' A 593  GLY  HA3', ' B 318  PHE  HB2', -0.565, (178.11, 210.474, 203.15)), (' C 142  MET  HE2', ' C 189  THR HG22', -0.549, (115.152, 233.17, 231.52)), (' C  61  ASN  OD1', ' C  62  GLN  N  ', -0.548, (152.162, 218.959, 201.001)), (' D  93  HIS  HE1', ' D 100  PRO  HB2', -0.545, (148.077, 213.102, 209.471)), (' C 106  TRP  HB3', ' D  38  HIS  CE1', -0.532, (146.74, 208.277, 217.286)), (' C  35  ASN HD21', ' C  47  TRP  HE1', -0.53, (151.325, 216.768, 211.279)), (' C 128  VAL HG22', ' C 149  VAL HG22', -0.529, (129.634, 245.768, 222.451)), (' D  41  GLN  HB2', ' D  51  LEU HD11', -0.517, (135.043, 213.084, 220.14)), (' C 176  VAL HG11', ' D 164  LEU HD22', -0.515, (125.243, 240.578, 207.433)), (' A 567  ARG  HG2', ' A 573  THR  HA ', -0.515, (168.811, 193.058, 213.056)), (' C 174  PRO  HG2', ' D 166  SER  HB3', -0.51, (125.791, 234.507, 213.206)), (' D  22  SER  OG ', ' D  74  ASP  OD1', -0.508, (133.556, 203.562, 205.341)), (' D 117  PRO  HB3', ' D 143  PHE  HB3', -0.504, (111.924, 229.707, 216.867)), (' C  53  PRO  HA ', ' C  72  VAL HG21', -0.504, (163.368, 223.461, 217.183)), (' C 145  LEU HD11', ' C 195  TRP  CD1', -0.485, (117.192, 243.495, 232.819)), (' C 194  THR  O  ', ' C 198  GLU  N  ', -0.479, (117.707, 242.735, 240.117)), (' C 104  ASP  OD1', ' C 105  ALA  N  ', -0.472, (150.156, 207.047, 215.353)), (' D 121  ILE HG22', ' D 211  LYS  HG3', -0.463, (108.791, 242.863, 219.687)), (' C  52  HIS  HD2', ' C  53  PRO  HD2', -0.462, (162.718, 217.793, 217.902)), (' C 201  THR HG22', ' C 216  LYS  HG2', -0.461, (125.779, 247.71, 234.318)), (' D  51  LEU  HA ', ' D  62  VAL HG21', -0.46, (138.062, 209.961, 223.789)), (' D  85  GLU  HG2', ' D 172  SER  HB2', -0.46, (125.964, 218.761, 225.811)), (' D 144  TYR  CD1', ' D 145  PRO  HA ', -0.457, (115.085, 222.157, 214.077)), (' A 561  PRO  O  ', ' A 577  ARG  NH1', -0.453, (156.541, 188.353, 220.798)), (' C 143  VAL  N  ', ' C 190  VAL  O  ', -0.452, (113.698, 237.019, 232.497)), (' A 551  VAL HG23', ' A 590  CYS  SG ', -0.451, (167.841, 206.919, 210.21)), (' A 580  GLN  HG2', ' B 331  ASN  HB2', -0.447, (157.002, 197.777, 230.382)), (' A 589  PRO  HG2', ' A 592  PHE  HZ ', -0.444, (169.897, 202.948, 205.291)), (' D   2  ILE  HB ', ' D  94  HIS  CE1', -0.442, (147.448, 208.67, 204.16)), (' D 110  ILE  HB ', ' D 170  GLN HE22', -0.441, (120.75, 217.544, 218.839)), (' D  30  SER  HA ', ' D  35  SER  HA ', -0.44, (146.459, 199.074, 210.206)), (' D 114  ASP  HB3', ' D 204  THR HG21', -0.44, (107.918, 222.23, 216.064)), (' C  35  ASN  OD1', ' C  36  TRP  N  ', -0.439, (151.858, 220.188, 212.954)), (' A 543  PHE  HD2', ' A 576  VAL HG21', -0.439, (164.589, 197.722, 219.497)), (' C  47  TRP  CH2', ' C  49  GLY  HA2', -0.436, (154.102, 218.823, 208.169)), (' D 171  ASP  OD1', ' D 172  SER  N  ', -0.433, (124.067, 223.202, 224.078)), (' D 167  TRP  NE1', ' D 179  MET  SD ', -0.433, (117.927, 231.918, 211.632)), (' C  51  ILE HD13', ' C  72  VAL HG13', -0.429, (161.164, 224.815, 215.35)), (' C 110  TRP  CE2', ' D  48  PRO  HG2', -0.428, (143.208, 218.701, 218.161)), (' D 121  ILE HD12', ' D 198  CYS  HB2', -0.422, (111.0, 242.941, 215.591)), (' D  20  THR HG23', ' D  76  THR HG23', -0.417, (129.6, 202.797, 210.918)), (' D  54  LEU  C  ', ' D  56  SER  H  ', -0.416, (141.931, 200.971, 218.244)), (' A 560  LEU HD12', ' A 561  PRO  HD2', -0.415, (153.581, 184.452, 216.884)), (' C 131  LEU HD11', ' C 148  LEU  HB2', -0.415, (121.459, 245.236, 220.44)), (' C 104  ASP  OD1', ' D  95  SER  HB2', -0.411, (150.103, 207.165, 213.516)), (' D 169  ASP  OD1', ' D 170  GLN  N  ', -0.409, (125.259, 223.697, 217.077)), (' A 577  ARG  HG3', ' A 583  GLU  O  ', -0.408, (156.779, 194.698, 218.658)), (' C  30  THR HG23', ' C  54  SER  HB2', -0.402, (166.208, 218.701, 221.049)), (' D  32  SER  C  ', ' D  34  TYR  H  ', -0.401, (148.707, 195.111, 213.316)), (' C  61  ASN  O  ', ' C  65  LYS  HG3', -0.4, (155.631, 221.539, 200.93)), (' D  54  LEU  O  ', ' D  56  SER  N  ', -0.4, (141.261, 200.027, 217.629))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
