# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 505 ', 'PRO', None, (94.56300000000005, 118.052, 118.05299999999997)), ('B', ' 183 ', 'PRO', None, (116.407, 104.25799999999998, 125.145))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 206  THR  OG1', ' A 209  ASN  OD1', -0.879, (118.09, 106.517, 67.782)), (' A 239  SER  OG ', ' A 465  ASP  OD1', -0.835, (106.864, 108.632, 78.8)), (' A 804  ASP  OD2', ' A 806  THR  OG1', -0.829, (89.793, 72.315, 88.183)), (' A 122  TYR  OH ', ' A 144  GLU  OE1', -0.754, (127.533, 93.077, 78.452)), (' A 452  ASP  OD2', ' A 556  THR  OG1', -0.75, (102.465, 101.251, 111.499)), (' A 631  ARG  NH1', ' A 635  SER  OG ', -0.724, (94.98, 110.722, 96.442)), (' B  83  VAL HG12', ' B  87  MET  HE2', -0.719, (85.877, 123.831, 120.21)), (' B 131  VAL HG22', ' B 185  ILE  CD1', -0.692, (114.777, 110.767, 123.746)), (' C   7  LYS  NZ ', ' C  40  LEU  O  ', -0.67, (104.893, 79.373, 117.9)), (' C  14  LEU HD22', ' C  36  HIS  CG ', -0.657, (105.066, 87.667, 125.204)), (' A 867  TYR  OH ', ' A 922  GLU  OE2', -0.643, (76.037, 73.561, 104.677)), (' A 531  THR HG21', ' A 567  THR HG21', -0.643, (87.562, 121.303, 104.546)), (' A 335  VAL  O  ', ' A 338  VAL HG12', -0.636, (93.911, 138.257, 119.22)), (' A 299  VAL HG22', ' A 652  PHE  CE2', -0.626, (97.198, 126.468, 93.538)), (' A 503  GLY  O  ', ' A 507  ASN  N  ', -0.611, (91.398, 115.075, 119.134)), (' C   5  ASP  O  ', ' C   9  THR HG23', -0.584, (101.296, 76.525, 128.165)), (' B 101  ASP  OD1', ' B 102  ALA  N  ', -0.582, (112.508, 136.132, 120.215)), (' A 412  PRO  HB3', ' C  14  LEU HD23', -0.581, (102.222, 89.077, 126.001)), (' A 478  LYS  NZ ', ' A 743  ASN  OD1', -0.562, (86.305, 104.843, 76.688)), (' A 885  LEU HD21', ' A 921  TYR  CE1', -0.559, (76.847, 76.132, 114.008)), (' A 887  TYR  CZ ', ' A 891  LEU HD11', -0.551, (82.9, 77.868, 125.579)), (' A 912  THR  HG1', ' A 915  TYR  HD2', -0.54, (71.345, 80.117, 121.067)), (' A 726  ARG  NH1', ' A 744  GLU  OE1', -0.534, (92.299, 100.205, 67.741)), (' A 892  HIS  CE1', ' A 912  THR HG21', -0.532, (69.835, 79.034, 124.583)), (' A 612  PRO  CG ', ' A 805  LEU HD11', -0.532, (89.221, 80.063, 82.075)), (' C  59  LEU  O  ', ' C  59  LEU HD23', -0.526, (107.988, 86.238, 139.548)), (' B 131  VAL HG22', ' B 185  ILE HD12', -0.526, (114.12, 111.46, 123.983)), (' C   5  ASP  OD1', ' C   6  VAL  N  ', -0.525, (102.594, 73.443, 126.069)), (' A 472  VAL  O  ', ' A 476  VAL HG23', -0.524, (94.686, 104.164, 83.677)), (' A 885  LEU HD22', ' A 916  TRP  HA ', -0.52, (75.392, 75.068, 116.523)), (' B 120  ILE  O  ', ' B 124  THR  OG1', -0.519, (111.223, 128.84, 117.075)), (' A 749  LEU  O  ', ' A 753  PHE  N  ', -0.518, (91.853, 91.496, 79.68)), (' A 734  ASN  ND2', ' A 736  ASP  O  ', -0.501, (96.41, 112.147, 71.454)), (' A 259  THR  O  ', ' A 259  THR HG22', -0.499, (127.279, 120.22, 89.006)), (' C  22  VAL HG23', ' C  28  LEU HD23', -0.494, (110.306, 93.258, 134.798)), (' A 887  TYR  O  ', ' A 891  LEU HD13', -0.487, (80.847, 77.2, 124.448)), (' A 462  THR  OG1', ' A 791  ASN  OD1', -0.484, (109.966, 105.9, 93.885)), (' A 299  VAL HG22', ' A 652  PHE  HE2', -0.479, (97.307, 125.913, 94.385)), (' B  80  ARG  O  ', ' B  84  THR HG23', -0.477, (82.399, 125.712, 121.433)), (' B 159  VAL HG22', ' B 186  VAL HG23', -0.472, (121.322, 115.009, 128.575)), (' A 615  MET  HE3', ' A 766  PHE  CD1', -0.472, (97.563, 86.535, 84.411)), (' A 155  ASP  OD1', ' A 156  TYR  N  ', -0.47, (131.203, 93.162, 95.364)), (' A 544  LEU HD23', ' A 556  THR HG22', -0.468, (102.001, 101.863, 116.231)), (' A 712  GLY  HA2', ' A 715  ILE HD12', -0.468, (104.21, 92.602, 67.953)), (' C  59  LEU  C  ', ' C  59  LEU HD23', -0.461, (108.084, 85.527, 139.034)), (' A 613  HIS  CD2', ' A 768  SER  OG ', -0.459, (96.523, 79.932, 80.331)), (' A 276  THR  O  ', ' A 280  LEU HD23', -0.455, (111.023, 129.133, 88.626)), (' A 209  ASN  HB3', ' A 218  ASP  HB2', -0.449, (121.816, 107.939, 67.004)), (' B  79  LYS  O  ', ' B  83  VAL HG23', -0.439, (81.968, 121.613, 123.832)), (' C   2  LYS  O  ', ' C   5  ASP  OD1', -0.438, (103.043, 72.689, 125.874)), (' A 470  LEU  O  ', ' A 473  VAL HG12', -0.437, (96.847, 109.293, 81.826)), (' A 837  ILE  O  ', ' A 884  TYR  OH ', -0.436, (88.401, 80.065, 116.209)), (' A 818  MET  HG3', ' A 820  VAL HG13', -0.433, (83.606, 73.809, 98.132)), (' A 211  ASP  OD1', ' A 213  ASN  N  ', -0.431, (128.369, 107.704, 76.159)), (' A 755  MET  HG2', ' A 764  VAL HG22', -0.43, (93.467, 91.949, 86.855)), (' A 684  ASP  O  ', " T   9    C  O2'", -0.43, (88.688, 106.526, 105.389)), (' A 631  ARG  HD3', ' A 680  THR HG22', -0.424, (98.21, 107.413, 99.069)), (' A 847  ILE  O  ', ' A 850  THR HG22', -0.422, (86.714, 88.436, 130.504)), (' B 136  ASN  HA ', ' B 139  LYS  NZ ', -0.422, (129.307, 105.472, 119.62)), (' A 368  PHE  O  ', ' A 372  LEU HD13', -0.421, (85.405, 125.659, 115.355)), (' A 691  ASN  HB3', ' A 759  SER  O  ', -0.42, (94.544, 99.235, 98.266)), (' A 480  PHE  CZ ', ' A 693  VAL HG22', -0.419, (89.685, 103.746, 91.018)), (' A 626  MET  CE ', ' A 680  THR HG21', -0.418, (98.553, 105.055, 98.72)), (' C  17  LEU  O  ', ' C  22  VAL HG12', -0.418, (104.845, 92.954, 134.129)), (' A 238  TYR  O  ', ' A 242  MET  HG3', -0.417, (111.792, 111.289, 80.825)), (' C  34  GLN  HA ', ' C  34  GLN  OE1', -0.417, (111.684, 89.763, 121.331)), (' A 613  HIS  HD1', ' A 803  THR  HA ', -0.417, (96.553, 77.708, 84.718)), (' A 611  ASN  O  ', ' A 768  SER  N  ', -0.415, (95.024, 82.101, 78.626)), (' A 563  CYS  O  ', ' A 567  THR HG23', -0.415, (87.358, 118.796, 107.225)), (' A 507  ASN  OD1', ' A 508  LYS  N  ', -0.409, (92.901, 114.756, 122.312)), (' A 426  LYS  NZ ', ' A 886  GLN  OE1', -0.406, (83.109, 68.306, 120.257)), (' A 758  LEU  O  ', ' A 760  ASP  N  ', -0.406, (92.685, 95.878, 98.091)), (' B 136  ASN  OD1', ' B 139  LYS  NZ ', -0.406, (129.829, 104.064, 119.559)), (' A 816  HIS  HB2', ' A 831  TYR  CZ ', -0.406, (90.772, 77.243, 101.292)), (' A 291  ASP  N  ', ' A 291  ASP  OD1', -0.405, (107.832, 120.224, 74.539)), (' A 371  LEU HD23', ' B  87  MET  HE3', -0.404, (86.921, 126.575, 120.115)), (' A 338  VAL  CG2', ' A 339  PRO  HD2', -0.402, (98.026, 138.005, 122.029)), (' B 159  VAL HG11', ' B 172  ILE HD11', -0.401, (122.9, 111.091, 129.998))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
