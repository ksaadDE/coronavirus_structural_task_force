
from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

dict_residue_prop_objects = {}
class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)
        ##save property list frame object
        dict_residue_prop_objects[data_key] = list_obj
# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "clusters","rama", "rota", "cbeta", "probe", "smoc", "cablam",
               "jpred"]
  data_titles = { "clusters"  : "Outlier residue clusters",
                  "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes",
                  "smoc"  : "Local density fit (SMOC)",
                  "cablam": "Ca geometry (CaBLAM)",
                  "jpred":"SS prediction"}
  data_names = { "clusters"  : ["Chain","Residue","Cluster","Outlier types"],
                 "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"],
                 "smoc" : ["Chain", "Residue", "Name", "Score"],
                 "cablam" : ["Chain", "Residue","Name","recommendation","DSSP"],
                 "jpred" : ["Chain", "Residue","Name","predicted SS","current SS"]}
  if (gobject is not None) :
    data_types = {  "clusters" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_INT, gobject.TYPE_STRING,
                             gobject.TYPE_PYOBJECT],
                    "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "smoc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cablam" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT],
                   "jpred" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT]}
  else :
    data_types = dict([ (s, []) for s in ["clusters","rama","rota","cbeta","probe","smoc",
                                          "cablam","jpred"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    ##adding a column type for checkbox (bool) before atom coordinate
    if gobject is not None:
        column_types = column_types[:-1]+[bool]+[column_types[-1]]
    
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    ##add a cell for checkbox
    cell1 = gtk.CellRendererToggle()
    cell1.connect ("toggled", self.on_selected_toggled)
    column = gtk.TreeViewColumn('Dealt with',cell1,active=i+1)
    self.listctrl.append_column(column)
    #column.set_sort_column_id(i+1)
    #column.pack_start(cell1, True)
    
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      row = row[:-1] + (False,)+(row[-1],)
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()
  ##check box toggle
  def on_selected_toggled(self,renderer,path):
    if path is not None:
      model = self.listmodel.get_model()
      it = model.get_iter(path)
      #set toggle
      model[it][-2] = not model[it][-2]
      #set checkboxes for same residues in other lists
      try:
        chain = model[it][0]
        residue = model[it][1]
        for data_key in dict_residue_prop_objects:
          prop_obj = dict_residue_prop_objects[data_key]
          for row in prop_obj.listmodel.get_model():
            if data_key == 'probe':
              atom1_split = row[0].split()
              atom2_split = row[1].split()
              if atom1_split[0] == chain and atom1_split[1] == residue:
                row[-2] = model[it][-2]
              elif atom2_split[0] == chain and atom2_split[1] == residue:
                row[-2] = model[it][-2]
            elif row[0] == chain and row[1] == residue:
              row[-2] = model[it][-2]
      except IndexError: pass

  def check_chain_residue(self,chain,residue):
      pass
  
def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data
data = {}
data['jpred'] = []
data['probe'] = [(' C 804  GLN HE21', ' C1303  NAG  H5 ', -0.686, (157.475, 127.064, 195.828)), (' B 709  ASN  O  ', ' C 897  PRO  HG3', -0.653, (171.853, 136.914, 211.353)), (' C 599  THR HG22', ' C 601  GLY  H  ', -0.63, (133.88, 138.342, 170.304)), (' A 231  ILE HD12', ' A 233  ILE HG13', -0.576, (145.539, 195.196, 121.722)), (' A 897  PRO  HG3', ' C 709  ASN  O  ', -0.576, (137.462, 164.082, 213.353)), (' A  41  LYS  HB2', ' C 519  HIS  HB2', -0.535, (135.622, 183.607, 137.431)), (' A1032  CYS  CB ', ' A1043  CYS  HG ', -0.533, (152.945, 166.286, 193.993)), (' B  81  ASN  N  ', ' B 265  TYR  HH ', -0.532, (213.372, 146.255, 128.788)), (' C 805  ILE HG13', ' C 878  LEU HD21', -0.502, (164.326, 135.64, 193.919)), (' C1032  CYS  HG ', ' C1043  CYS  HG ', -0.494, (159.762, 150.871, 193.964)), (' A1082  CYS  CB ', ' A1126  CYS  HG ', -0.487, (182.042, 171.64, 227.137)), (' C1032  CYS  SG ', ' C1043  CYS  SG ', -0.468, (159.721, 151.436, 193.68)), (' B1082  CYS  CB ', ' B1126  CYS  HG ', -0.467, (163.58, 138.068, 227.68)), (' B 577  ARG HH11', ' B 582  LEU  HB3', -0.465, (156.191, 115.268, 142.589)), (' C 710  ASN  HB2', ' C1076  THR HG23', -0.449, (136.28, 162.222, 219.362)), (' A 327  VAL  H  ', ' A 531  THR HG22', -0.448, (182.57, 189.963, 130.777)), (' A1032  CYS  HG ', ' A1043  CYS  HB3', -0.445, (153.221, 168.309, 194.597)), (' A1032  CYS  HG ', ' A1043  CYS  CB ', -0.441, (153.688, 168.512, 194.462)), (' C 709  ASN  O  ', ' C 711  SER  N  ', -0.429, (136.898, 163.429, 214.286)), (' A1032  CYS  SG ', ' A1043  CYS  SG ', -0.429, (153.062, 167.477, 194.509)), (' A1076  THR  HB ', ' A1097  SER  HB3', -0.419, (174.334, 183.242, 220.169)), (' A1032  CYS  HB2', ' A1043  CYS  HG ', -0.415, (153.091, 166.074, 193.983)), (' A  34  ARG  HA ', ' A  34  ARG  HD3', -0.412, (141.633, 202.283, 148.188)), (' C 886  TRP  H  ', ' C 886  TRP  HE3', -0.409, (169.215, 147.399, 203.079)), (' B1076  THR  HB ', ' B1097  SER  HB3', -0.409, (177.041, 139.147, 219.755)), (' A1028  LYS  O  ', ' A1032  CYS  HB3', -0.409, (151.196, 164.567, 192.591)), (' C 804  GLN  NE2', ' C1303  NAG  H5 ', -0.405, (157.299, 127.323, 195.76)), (' B 612  TYR  HB2', ' B 649  CYS  HB3', -0.403, (182.911, 135.111, 159.495)), (' A1075  PHE  HB3', ' A1096  VAL HG13', -0.401, (169.969, 181.67, 217.43)), (' A 331  ASN  HB3', ' A 332  ILE  H  ', -0.401, (193.619, 183.748, 121.985))]
data['cbeta'] = [('A', ' 571 ', 'ASP', ' ', 0.25810299934424885, (180.567, 169.303, 143.362)), ('A', ' 617 ', 'CYS', ' ', 0.3464527043279441, (175.909, 197.292, 161.452)), ('A', ' 762 ', 'GLN', ' ', 0.2533939445847165, (151.881, 151.13499999999993, 157.57)), ('C', ' 198 ', 'ASP', ' ', 0.342900838967101, (144.19400000000005, 134.785, 129.158)), ('C', ' 487 ', 'ASN', ' ', 0.2898575230413648, (171.617, 196.987, 106.37700000000001))]
data['smoc'] = [('A', 31, u'SER', 0.6746298892426648, (147.27899999999997, 206.576, 147.45000000000002)), ('A', 42, u'VAL', 0.6229874051853937, (135.624, 182.877, 142.62)), ('A', 97, u'LYS', 0.7712432234985643, (130.463, 216.17499999999998, 139.02200000000002)), ('A', 104, u'TRP', 0.6598789572257749, (141.041, 206.439, 126.68799999999999)), ('A', 198, u'ASP', 0.5982294027753045, (148.877, 187.19, 126.768)), ('A', 214, u'ARG', 0.7797344381329888, (140.611, 217.43800000000002, 148.153)), ('A', 216, u'LEU', 0.7330305155218114, (142.02, 210.248, 147.597)), ('A', 223, u'LEU', 0.6392358525914951, (137.27299999999997, 197.132, 142.525)), ('A', 234, u'ASN', 0.4841519935516027, (149.95200000000003, 195.069, 124.958)), ('A', 235, u'ILE', 0.6018194906945642, (150.63299999999998, 198.86200000000002, 124.663)), ('A', 263, u'ALA', 0.7614270913593171, (136.971, 217.737, 137.21599999999998)), ('A', 267, u'VAL', 0.6062674132153691, (147.097, 208.01899999999998, 137.82700000000003)), ('A', 270, u'LEU', 0.5896802162661771, (150.542, 198.67399999999998, 138.965)), ('A', 285, u'ILE', 0.667388813521292, (137.20899999999997, 192.055, 150.52)), ('A', 297, u'SER', 0.536892436468869, (153.35600000000002, 193.92800000000003, 156.70499999999998)), ('A', 346, u'ARG', 0.7518860709186479, (184.839, 164.135, 99.506)), ('A', 365, u'TYR', 0.7323775802003023, (176.991, 177.585, 115.788)), ('A', 369, u'TYR', 0.733397890420543, (171.435, 176.70999999999998, 113.21900000000001)), ('A', 390, u'LEU', 0.6571947566118198, (179.35200000000003, 177.304, 125.832)), ('A', 406, u'GLU', 0.7300405842116401, (169.016, 155.231, 108.262)), ('A', 414, u'GLN', 0.8173784373034361, (168.93800000000002, 153.634, 119.09100000000001)), ('A', 415, u'THR', 0.8219330182703349, (169.26299999999998, 150.277, 117.223)), ('A', 427, u'ASP', 0.736514649950494, (174.017, 156.55700000000002, 126.059)), ('A', 468, u'ILE', 0.8154416837266061, (187.31, 148.252, 108.195)), ('A', 475, u'ALA', 0.5748493014502172, (175.43200000000002, 133.64499999999998, 108.812)), ('A', 476, u'GLY', 0.6866086873647846, (174.70999999999998, 129.88200000000003, 109.402)), ('A', 477, u'SER', 0.7229750005122237, (176.317, 126.393, 109.543)), ('A', 486, u'PHE', 0.6374486795349485, (175.525, 130.371, 101.24300000000001)), ('A', 493, u'GLN', 0.8085421369431006, (177.545, 146.07299999999998, 100.94200000000001)), ('A', 519, u'HIS', 0.5083499920810574, (188.132, 169.82700000000003, 134.425)), ('A', 524, u'VAL', 0.6947181446613317, (186.79399999999998, 175.607, 121.44400000000002)), ('A', 540, u'ASN', 0.706917660581268, (177.45000000000002, 187.87, 138.191)), ('A', 557, u'LYS', 0.7344568974681197, (195.707, 179.33200000000002, 146.797)), ('A', 571, u'ASP', 0.5468672362386239, (181.083, 170.433, 144.281)), ('A', 587, u'ILE', 0.6653244618630375, (185.04899999999998, 183.02700000000002, 144.915)), ('A', 590, u'CYS', 0.7267996378055741, (177.045, 187.041, 148.30700000000002)), ('A', 594, u'GLY', 0.5764886743458337, (167.74299999999997, 185.554, 157.915)), ('A', 643, u'PHE', 0.6732328464228822, (173.718, 198.566, 166.42200000000003)), ('A', 711, u'SER', 0.5201541012335859, (175.9, 182.85200000000003, 212.596)), ('A', 795, u'LYS', 0.6787236667940567, (132.12, 171.15200000000002, 205.648)), ('A', 819, u'GLU', 0.46732712731514425, (137.445, 174.07899999999998, 186.762)), ('A', 870, u'ILE', 0.4901256892379062, (137.04899999999998, 163.655, 184.208)), ('A', 876, u'ALA', 0.5143599012664544, (136.79299999999998, 161.767, 194.008)), ('A', 901, u'GLN', 0.40489612488275784, (145.88200000000003, 165.641, 208.738)), ('A', 908, u'GLY', 0.47349874430238137, (156.46200000000002, 165.634, 207.33800000000002)), ('A', 930, u'ALA', 0.5678202685449386, (145.834, 181.95800000000003, 198.635)), ('A', 942, u'ALA', 0.5727922301899913, (143.975, 184.034, 179.756)), ('A', 957, u'GLN', 0.5822619918891778, (148.248, 174.16899999999998, 162.313)), ('A', 962, u'LEU', 0.5120578753746404, (147.576, 168.95100000000002, 155.466)), ('A', 969, u'ASN', 0.5503520740098462, (149.7, 170.761, 141.74499999999998)), ('A', 983, u'ARG', 0.6180609690327661, (139.73399999999998, 166.74299999999997, 130.46200000000002)), ('A', 1018, u'ILE', 0.44541354575517705, (152.226, 164.414, 175.136)), ('A', 1026, u'ALA', 0.45859764271324294, (150.334, 160.601, 186.409)), ('A', 1029, u'MET', 0.41055724554417117, (148.903, 162.611, 190.806)), ('A', 1051, u'SER', 0.46421726538551195, (148.056, 169.39200000000002, 196.38100000000003)), ('A', 1080, u'ALA', 0.5610574467034667, (177.73, 171.371, 220.815)), ('A', 1094, u'VAL', 0.49717219675599494, (169.923, 173.526, 216.761)), ('A', 1121, u'PHE', 0.5765303242220372, (172.509, 163.731, 224.041)), ('A', 1137, u'VAL', 0.646069121100269, (172.52200000000002, 171.916, 230.80100000000002)), ('A', 1302, u'NAG', 0.2774960843795604, (173.641, 188.226, 211.201)), ('A', 1305, u'NAG', 0.6260277332229796, (170.577, 204.904, 176.975)), ('A', 1307, u'NAG', 0.7368519008372204, (183.037, 177.412, 102.98)), ('B', 27, u'ALA', 0.6796783808615955, (212.583, 139.24299999999997, 138.665)), ('B', 42, u'VAL', 0.6507562106234314, (190.865, 170.477, 140.27499999999998)), ('B', 44, u'ARG', 0.6406789596062387, (191.756, 170.866, 146.70399999999998)), ('B', 91, u'TYR', 0.6552933131524906, (203.629, 152.651, 136.05800000000002)), ('B', 92, u'PHE', 0.6470243179504248, (207.236, 152.86200000000002, 134.79)), ('B', 139, u'PRO', 0.5741030392695788, (215.445, 154.92600000000002, 116.811)), ('B', 198, u'ASP', 0.3949995973361106, (189.14299999999997, 159.461, 127.849)), ('B', 201, u'PHE', 0.6320851188478899, (197.42000000000002, 159.048, 126.256)), ('B', 216, u'LEU', 0.7164809991121389, (212.04899999999998, 151.985, 144.918)), ('B', 220, u'PHE', 0.7320614638775019, (205.64899999999997, 158.95800000000003, 149.23399999999998)), ('B', 223, u'LEU', 0.5855915082953596, (202.98700000000002, 162.271, 139.941)), ('B', 285, u'ILE', 0.6658740865532244, (198.665, 165.045, 147.665)), ('B', 297, u'SER', 0.6126834739233564, (192.38600000000002, 150.35800000000003, 154.809)), ('B', 308, u'VAL', 0.6626995888440471, (190.86700000000002, 155.21499999999997, 163.541)), ('B', 327, u'VAL', 0.7824465811050803, (167.83200000000002, 124.37599999999999, 134.611)), ('B', 337, u'PRO', 0.6900456562363059, (156.27499999999998, 114.95, 113.248)), ('B', 338, u'PHE', 0.7180962671092626, (157.95000000000002, 117.164, 110.526)), ('B', 344, u'ALA', 0.6219587925438916, (156.17399999999998, 112.99000000000001, 100.776)), ('B', 345, u'THR', 0.5586803149438136, (155.911, 111.41700000000002, 97.25)), ('B', 359, u'SER', 0.7244939480652924, (150.32800000000003, 121.545, 116.48)), ('B', 360, u'ASN', 0.6791042491459995, (150.6, 120.245, 120.113)), ('B', 375, u'SER', 0.5718515487754525, (169.466, 123.67199999999998, 98.64999999999999)), ('B', 390, u'LEU', 0.6511882330937163, (160.187, 130.33100000000002, 120.13199999999999)), ('B', 408, u'ARG', 0.3039352756632999, (163.26899999999998, 134.54399999999998, 94.279)), ('B', 412, u'PRO', 0.38789042899988585, (157.778, 139.761, 101.059)), ('B', 445, u'VAL', 0.5453493425912928, (159.595, 111.193, 80.832)), ('B', 446, u'GLY', 0.47294729724947104, (156.907, 112.883, 78.661)), ('B', 449, u'TYR', 0.5012697658417178, (151.561, 117.842, 84.236)), ('B', 474, u'GLN', 0.00967564649622257, (138.286, 136.563, 78.238)), ('B', 503, u'VAL', 0.30316108258407454, (168.834, 124.02199999999999, 86.41900000000001)), ('B', 517, u'LEU', 0.667754457532009, (150.129, 133.298, 116.819)), ('B', 544, u'ASN', 0.8264209762263985, (159.701, 125.083, 134.86700000000002)), ('B', 551, u'VAL', 0.6792128354424397, (171.227, 126.71400000000001, 148.17899999999997)), ('B', 565, u'PHE', 0.6873820765360147, (156.277, 125.44000000000001, 144.569)), ('B', 577, u'ARG', 0.7594484527507358, (159.517, 120.05, 143.162)), ('B', 583, u'GLU', 0.7889584776493924, (160.708, 114.88499999999999, 145.335)), ('B', 586, u'ASP', 0.6596427309050257, (163.978, 123.27499999999999, 150.32000000000002)), ('B', 595, u'VAL', 0.5893141130084534, (181.696, 142.526, 157.621)), ('B', 619, u'GLU', 0.6476284881616041, (181.251, 129.753, 153.82800000000003)), ('B', 695, u'TYR', 0.6036520191468492, (186.806, 136.025, 175.24499999999998)), ('B', 699, u'LEU', 0.5226772480946754, (179.948, 140.146, 184.77899999999997)), ('B', 713, u'ALA', 0.537043471186664, (178.186, 143.472, 209.724)), ('B', 723, u'THR', 0.5421655973506397, (181.47, 161.30200000000002, 191.73899999999998)), ('B', 759, u'PHE', 0.5199791511058683, (156.889, 172.10299999999998, 152.38500000000002)), ('B', 770, u'ILE', 0.4783395765374512, (163.817, 172.924, 167.76)), ('B', 777, u'ASN', 0.4451687034056314, (166.13899999999998, 173.38000000000002, 177.923)), ('B', 796, u'ASP', 0.601685576714185, (185.54, 179.872, 206.74099999999999)), ('B', 800, u'PHE', 0.5147465879289894, (186.21299999999997, 172.153, 203.37)), ('B', 813, u'SER', 0.3863178723630356, (184.295, 183.80100000000002, 181.268)), ('B', 819, u'GLU', 0.538248807387719, (184.67899999999997, 174.372, 184.512)), ('B', 858, u'LEU', 0.6027537512419476, (172.58, 176.489, 156.34)), ('B', 861, u'LEU', 0.6079241956191003, (172.167, 180.656, 165.612)), ('B', 880, u'GLY', 0.4173128241381579, (173.706, 179.47, 197.74299999999997)), ('B', 890, u'ALA', 0.5116871355723531, (162.51299999999998, 176.586, 199.608)), ('B', 895, u'GLN', 0.5543093003483923, (172.933, 181.409, 206.68)), ('B', 905, u'ARG', 0.5296548477745223, (173.23899999999998, 166.053, 206.04399999999998)), ('B', 916, u'LEU', 0.544585707869499, (180.698, 164.55800000000002, 211.906)), ('B', 934, u'ILE', 0.5551655052119453, (188.21399999999997, 165.04299999999998, 189.93800000000002)), ('B', 977, u'LEU', 0.5309406881335468, (171.974, 173.748, 138.815)), ('B', 979, u'ASP', 0.5552555086441484, (175.112, 173.684, 134.339)), ('B', 980, u'ILE', 0.5892873487548478, (171.504, 172.67299999999997, 133.563)), ('B', 994, u'ASP', 0.5689508170955425, (162.572, 168.84, 139.046)), ('B', 1013, u'ILE', 0.5343679978167098, (163.761, 162.811, 166.85700000000003)), ('B', 1028, u'LYS', 0.46875858596530257, (168.916, 166.64399999999998, 189.39100000000002)), ('B', 1035, u'GLY', 0.47201197480603624, (168.06, 169.39200000000002, 198.277)), ('B', 1062, u'PHE', 0.5035643444497994, (177.181, 167.343, 188.71299999999997)), ('B', 1064, u'HIS', 0.437859991595811, (177.92100000000002, 164.262, 193.70999999999998)), ('B', 1066, u'THR', 0.4935877514509192, (178.24299999999997, 160.768, 199.076)), ('B', 1095, u'PHE', 0.5852977686556855, (171.655, 145.17399999999998, 219.509)), ('B', 1115, u'ILE', 0.5654756342475392, (171.738, 149.025, 226.813)), ('B', 1145, u'LEU', 0.7958058137947835, (167.553, 157.74499999999998, 243.38500000000002)), ('B', 1308, u'NAG', 0.8241245801174846, (158.289, 114.01700000000001, 133.796)), ('C', 44, u'ARG', 0.6688307448535542, (151.5, 126.566, 151.95700000000002)), ('C', 86, u'PHE', 0.7034618983079001, (128.106, 130.33700000000002, 132.335)), ('C', 104, u'TRP', 0.7511732411373216, (128.70399999999998, 118.534, 129.653)), ('C', 122, u'ASN', 0.800857992089616, (132.95600000000002, 107.723, 128.417)), ('C', 165, u'ASN', 0.6486766565031374, (138.632, 125.611, 114.561)), ('C', 166, u'CYS', 0.7588525217890314, (139.046, 122.17599999999999, 116.254)), ('C', 186, u'PHE', 0.734005127092454, (121.927, 109.17599999999999, 147.009)), ('C', 198, u'ASP', 0.778963578995697, (142.98600000000002, 133.93, 128.71599999999998)), ('C', 220, u'PHE', 0.7830531520774661, (133.866, 121.745, 154.15)), ('C', 231, u'ILE', 0.6796217978393122, (141.661, 125.405, 124.34700000000001)), ('C', 233, u'ILE', 0.6964909276419589, (138.08200000000002, 129.461, 123.046)), ('C', 263, u'ALA', 0.6762286572909177, (119.538, 111.9, 138.756)), ('C', 267, u'VAL', 0.6582612776067264, (124.429, 124.99600000000001, 139.81)), ('C', 270, u'LEU', 0.6737498580328811, (131.535, 132.138, 140.73499999999999)), ('C', 297, u'SER', 0.6078900344448683, (133.853, 137.494, 158.62)), ('C', 319, u'ARG', 0.6264537569774097, (130.38700000000003, 156.298, 152.376)), ('C', 346, u'ARG', 0.7812288644484938, (140.202, 181.73999999999998, 101.63499999999999)), ('C', 362, u'VAL', 0.7480393992592975, (126.551, 174.545, 121.476)), ('C', 382, u'VAL', 0.7245696563358981, (142.64499999999998, 168.32800000000003, 126.787)), ('C', 394, u'ASN', 0.7181610753485076, (134.73399999999998, 181.529, 124.738)), ('C', 410, u'ILE', 0.7263652929011041, (152.441, 175.489, 115.59)), ('C', 415, u'THR', 0.6993673354763771, (161.26399999999998, 178.68, 118.24000000000001)), ('C', 422, u'ASN', 0.7336661392441907, (154.286, 185.33100000000002, 112.699)), ('C', 432, u'CYS', 0.7205340995220975, (143.622, 172.167, 119.57799999999999)), ('C', 445, u'VAL', 0.7341059696939785, (149.784, 177.097, 88.092)), ('C', 449, u'TYR', 0.8088114533563218, (152.17899999999997, 184.541, 95.733)), ('C', 450, u'ASN', 0.7829635464248175, (149.21699999999998, 186.122, 97.67099999999999)), ('C', 470, u'THR', 0.7447194425372315, (154.98800000000003, 196.517, 106.698)), ('C', 471, u'GLU', 0.7617667432637484, (157.559, 199.26399999999998, 107.545)), ('C', 503, u'VAL', 0.7635119800117254, (154.559, 167.994, 100.285)), ('C', 513, u'LEU', 0.7016965077688364, (141.16, 176.411, 118.72)), ('C', 515, u'PHE', 0.6989819079523732, (139.959, 177.309, 124.696)), ('C', 518, u'LEU', 0.6577777459758868, (137.771, 181.05100000000002, 133.02700000000002)), ('C', 547, u'THR', 0.6734380492680515, (132.071, 167.04399999999998, 137.637)), ('C', 559, u'PHE', 0.691053250126864, (127.71300000000001, 185.873, 145.509)), ('C', 571, u'ASP', 0.5067204170307348, (140.7, 174.185, 146.055)), ('C', 575, u'ALA', 0.6485305842151068, (129.141, 176.35200000000003, 146.164)), ('C', 590, u'CYS', 0.6095452774168709, (128.24499999999998, 162.63, 150.883)), ('C', 595, u'VAL', 0.5835097649046503, (133.05, 151.12800000000001, 160.42100000000002)), ('C', 619, u'GLU', 0.6667782845966288, (122.77199999999999, 158.696, 156.667)), ('C', 648, u'GLY', 0.5916967786768587, (127.862, 157.455, 165.846)), ('C', 656, u'VAL', 0.6899103744214878, (120.865, 149.21699999999998, 178.70399999999998)), ('C', 664, u'ILE', 0.6655519894906345, (134.66, 147.30200000000002, 175.29299999999998)), ('C', 666, u'ILE', 0.6346897492917983, (132.864, 152.684, 172.165)), ('C', 712, u'ILE', 0.5728479823827921, (139.562, 158.67499999999998, 213.21299999999997)), ('C', 737, u'ASP', 0.5995705240102293, (172.148, 145.83700000000002, 153.257)), ('C', 770, u'ILE', 0.43771992580012165, (169.23, 151.809, 167.403)), ('C', 774, u'GLN', 0.43168706289382835, (169.435, 148.21499999999997, 172.894)), ('C', 777, u'ASN', 0.40490095880012383, (169.32000000000002, 149.95800000000003, 177.654)), ('C', 796, u'ASP', 0.6042147308638661, (167.63, 130.506, 207.255)), ('C', 819, u'GLU', 0.527912689811672, (161.57299999999998, 133.411, 185.198)), ('C', 885, u'GLY', 0.5030776775318857, (169.129, 144.531, 202.32600000000002)), ('C', 911, u'VAL', 0.49805016627189996, (155.206, 150.876, 211.819)), ('C', 950, u'ASP', 0.5804129235858487, (153.379, 143.752, 171.937)), ('C', 957, u'GLN', 0.6043546677239368, (154.945, 143.314, 161.725)), ('C', 959, u'LEU', 0.5537424670426676, (159.841, 143.52200000000002, 159.05200000000002)), ('C', 979, u'ASP', 0.6024376936520915, (161.411, 140.835, 134.26299999999998)), ('C', 1003, u'SER', 0.4942238831302621, (159.845, 151.907, 151.853)), ('C', 1022, u'ALA', 0.41820682944272847, (164.36, 151.194, 180.001)), ('C', 1029, u'MET', 0.4089072497291828, (166.023, 148.82500000000002, 189.85600000000002)), ('C', 1049, u'LEU', 0.4751161698180224, (158.623, 147.17299999999997, 201.777)), ('C', 1060, u'VAL', 0.5566711722720428, (162.089, 142.98600000000002, 183.32600000000002)), ('C', 1066, u'THR', 0.5225104339682187, (153.929, 146.228, 200.011)), ('C', 1087, u'ALA', 0.560950284624966, (148.599, 171.14, 226.605)), ('C', 1094, u'VAL', 0.5704886628921996, (147.76999999999998, 159.966, 217.71699999999998)), ('C', 1105, u'THR', 0.5330575916446748, (148.759, 154.722, 219.33200000000002)), ('C', 1113, u'GLN', 0.5940156627656938, (149.686, 152.83, 224.97899999999998)), ('C', 1119, u'ASN', 0.6068383989218631, (154.72899999999998, 159.369, 225.24899999999997)), ('C', 1120, u'THR', 0.6182883280483535, (154.016, 163.14499999999998, 224.894)), ('C', 1121, u'PHE', 0.5950171895997706, (155.47899999999998, 166.685, 224.93800000000002)), ('C', 1306, u'NAG', 0.6264268252146757, (116.926, 147.833, 179.11499999999998)), ('C', 1308, u'NAG', 0.6268432227256119, (133.291, 172.212, 110.02199999999999)), ('C', 1310, u'NAG', 0.5384121416877349, (132.759, 136.14, 126.99600000000001))]
data['rota'] = [('A', ' 233 ', 'ILE', 0.0005397421858862351, (148.435, 193.88, 121.611)), ('A', ' 332 ', 'ILE', 0.07728528800250968, (191.914, 182.406, 120.001)), ('A', ' 347 ', 'PHE', 0.16815149375301305, (182.90200000000004, 162.15, 102.17)), ('A', ' 414 ', 'GLN', 0.2740073085380048, (168.938, 153.634, 119.091)), ('A', ' 565 ', 'PHE', 0.06504122428521622, (189.728, 175.732, 139.252)), ('A', ' 602 ', 'THR', 0.03654698055988994, (150.267, 195.21099999999996, 167.464)), ('A', ' 603 ', 'ASN', 0.03770699718460514, (147.615, 196.687, 169.817)), ('A', '1073 ', 'LYS', 0.15305170632707196, (166.018, 186.605, 212.668)), ('B', ' 820 ', 'ASP', 0.19528006054544256, (187.766, 175.48, 182.513)), ('B', ' 895 ', 'GLN', 0.11487766130281014, (172.93300000000005, 181.409, 206.68)), ('B', '1074 ', 'ASN', 0.0, (180.96200000000005, 141.121, 212.063)), ('C', ' 319 ', 'ARG', 0.008747069272291111, (130.387, 156.298, 152.376)), ('C', ' 602 ', 'THR', 0.2020671959958943, (135.029, 134.161, 169.232)), ('C', ' 604 ', 'THR', 0.02169439314723306, (132.094, 133.753, 173.573)), ('C', ' 616 ', 'ASN', 0.03188455284059565, (123.46600000000007, 160.059, 161.888)), ('C', ' 709 ', 'ASN', 0.21761143644855097, (135.737, 166.443, 213.885)), ('C', ' 802 ', 'PHE', 0.1263259244694102, (161.262, 132.772, 198.199)), ('C', '1113 ', 'GLN', 0.09626158912871614, (149.68599999999995, 152.83, 224.979))]
data['clusters'] = [('A', '1072', 1, 'Dihedral angle:CB:CG:CD:OE1', (164.04899999999998, 185.156, 209.70999999999998)), ('A', '1073', 1, 'Rotamer', (166.018, 186.605, 212.668)), ('A', '1075', 1, 'Dihedral angle:CA:C', (171.335, 184.27299999999997, 216.05200000000002)), ('A', '1076', 1, 'Dihedral angle:N:CA', (174.768, 183.126, 217.261)), ('A', '1302', 1, 'Planar group:C2:C7:C8:N2:O7\nsmoc Outlier', (173.641, 188.226, 211.201)), ('A', '707', 1, 'Dihedral angle:CA:C', (177.71499999999997, 183.86100000000002, 206.132)), ('A', '708', 1, 'Dihedral angle:N:CA', (179.954, 183.42600000000002, 209.21499999999997)), ('A', '711', 1, 'smoc Outlier', (175.9, 182.85200000000003, 212.596)), ('A', '214', 2, 'smoc Outlier', (140.611, 217.43800000000002, 148.153)), ('A', '215', 2, 'Bond angle:CA:CB:CG', (142.489, 214.071, 147.86100000000002)), ('A', '216', 2, 'smoc Outlier', (142.02, 210.248, 147.597)), ('A', '293', 2, 'cablam CA Geom Outlier', (155.2, 197.8, 152.2)), ('A', '294', 2, 'Bond angle:CA:CB:CG', (157.17899999999997, 197.526, 155.51899999999998)), ('A', '297', 2, 'smoc Outlier', (153.35600000000002, 193.92800000000003, 156.70499999999998)), ('A', '31', 2, 'cablam Outlier\nsmoc Outlier', (147.3, 206.6, 147.5)), ('A', '58', 2, 'Bond angle:CA:CB:CG', (149.95100000000002, 201.01299999999998, 149.297)), ('A', '111', 3, 'Bond angle:C', (149.453, 206.798, 114.848)), ('A', '112', 3, 'Bond angle:N:CA\ncablam Outlier', (149.466, 205.006, 111.428)), ('A', '131', 3, 'Dihedral angle:CA:C', (142.636, 200.423, 114.04700000000001)), ('A', '132', 3, 'Dihedral angle:N:CA', (145.82100000000003, 201.761, 112.403)), ('A', '133', 3, 'Dihedral angle:CA:C\ncablam Outlier', (144.30700000000002, 205.14399999999998, 113.524)), ('A', '134', 3, 'Dihedral angle:N:CA', (145.542, 208.666, 112.98100000000001)), ('A', '186', 4, 'Bond angle:CA:CB:CG', (133.459, 216.642, 142.495)), ('A', '263', 4, 'smoc Outlier', (136.971, 217.737, 137.21599999999998)), ('A', '66', 4, 'Bond angle:CB:CG:CD2', (143.11599999999999, 219.23399999999998, 137.423)), ('A', '97', 4, 'smoc Outlier', (130.463, 216.17499999999998, 139.02200000000002)), ('A', '98', 4, 'cablam Outlier', (130.6, 216.8, 135.2)), ('A', '267', 5, 'smoc Outlier', (147.097, 208.01899999999998, 137.82700000000003)), ('A', '270', 5, 'smoc Outlier', (150.542, 198.67399999999998, 138.965)), ('A', '88', 5, 'cablam Outlier', (152.8, 197.0, 133.3)), ('A', '90', 5, 'Dihedral angle:CA:C', (147.39000000000001, 201.441, 135.24299999999997)), ('A', '91', 5, 'Dihedral angle:N:CA', (145.14, 202.417, 138.108)), ('A', '316', 6, 'Dihedral angle:CA:C', (162.708, 186.725, 154.813)), ('A', '317', 6, 'Dihedral angle:N:CA', (166.24499999999998, 185.68200000000002, 153.91)), ('A', '594', 6, 'smoc Outlier', (167.74299999999997, 185.554, 157.915)), ('A', '613', 6, 'Bond angle:OE1:CD:NE2', (171.07399999999998, 187.641, 161.313)), ('A', '614', 6, 'cablam Outlier', (174.9, 187.2, 161.2)), ('A', '363', 7, 'Dihedral angle:CA:C', (183.07899999999998, 178.48200000000003, 116.735)), ('A', '364', 7, 'Dihedral angle:N:CA', (179.806, 180.12, 115.732)), ('A', '365', 7, 'smoc Outlier', (176.991, 177.585, 115.788)), ('A', '369', 7, 'smoc Outlier', (171.435, 176.70999999999998, 113.21900000000001)), ('A', '524', 7, 'smoc Outlier', (186.79399999999998, 175.607, 121.44400000000002)), ('A', '231', 8, 'side-chain clash', (135.622, 183.607, 137.431)), ('A', '233', 8, 'Rotamer\nside-chain clash', (135.622, 183.607, 137.431)), ('A', '40', 8, 'Bond angle:CA:CB:CG', (139.493, 186.089, 140.257)), ('A', '41', 8, 'cablam Outlier', (135.8, 185.2, 139.6)), ('A', '42', 8, 'smoc Outlier', (135.624, 182.877, 142.62)), ('A', '475', 9, 'smoc Outlier', (175.43200000000002, 133.64499999999998, 108.812)), ('A', '476', 9, 'smoc Outlier', (174.70999999999998, 129.88200000000003, 109.402)), ('A', '477', 9, 'cablam Outlier\nsmoc Outlier', (176.3, 126.4, 109.5)), ('A', '486', 9, 'smoc Outlier', (175.525, 130.371, 101.24300000000001)), ('A', '487', 9, 'cablam Outlier', (176.2, 132.0, 104.7)), ('A', '1308', 10, 'Planar group:C2:C7:C8:N2:O7', (192.565, 189.16299999999998, 124.759)), ('A', '330', 10, 'Ramachandran\ncablam Outlier', (190.191, 183.019, 126.6)), ('A', '331', 10, 'side-chain clash\nRamachandran', (191.55700000000004, 184.428, 123.286)), ('A', '332', 10, 'Rotamer\nside-chain clash\nRamachandran\ncablam Outlier', (191.914, 182.406, 120.001)), ('A', '1094', 11, 'smoc Outlier', (169.923, 173.526, 216.761)), ('A', '1105', 11, 'Dihedral angle:CA:C', (165.04899999999998, 175.32100000000003, 218.75)), ('A', '1106', 11, 'Dihedral angle:N:CA\nBond angle:OE1:CD:NE2', (163.45100000000002, 173.222, 216.056)), ('A', '1107', 11, 'Dihedral angle:CD:NE:CZ:NH1', (165.27299999999997, 174.132, 212.788)), ('A', '310', 12, 'cablam CA Geom Outlier', (154.6, 190.1, 170.9)), ('A', '600', 12, 'Ramachandran', (155.657, 194.297, 170.937)), ('A', '602', 12, 'Rotamer', (150.267, 195.21099999999996, 167.464)), ('A', '603', 12, 'Rotamer', (147.615, 196.687, 169.817)), ('A', '557', 13, 'smoc Outlier', (195.707, 179.33200000000002, 146.797)), ('A', '559', 13, 'Bond angle:CA:CB:CG', (197.448, 176.171, 142.12800000000001)), ('A', '563', 13, 'Bond angle:OE1:CD:NE2', (194.917, 173.016, 137.82000000000002)), ('A', '565', 13, 'Rotamer\nBond angle:CA:CB:CG', (189.728, 175.732, 139.252)), ('A', '1305', 14, 'Planar group:C2:C7:C8:N2:O7\nsmoc Outlier', (170.577, 204.904, 176.975)), ('A', '654', 14, 'Dihedral angle:CB:CG:CD:OE1', (167.71499999999997, 201.916, 170.92800000000003)), ('A', '655', 14, 'Bond angle:CB:CG:CD2', (170.612, 200.366, 172.901)), ('A', '324', 15, 'Dihedral angle:CB:CG:CD:OE1', (178.076, 193.917, 137.383)), ('A', '540', 15, 'smoc Outlier', (177.45000000000002, 187.87, 138.191)), ('A', '549', 15, 'cablam CA Geom Outlier', (177.4, 184.8, 141.1)), ('A', '403', 16, 'Dihedral angle:CD:NE:CZ:NH1', (170.412, 156.67, 103.121)), ('A', '406', 16, 'smoc Outlier', (169.016, 155.231, 108.262)), ('A', '408', 16, 'Dihedral angle:CD:NE:CZ:NH1', (167.10999999999999, 158.22899999999998, 112.44200000000001)), ('A', '1083', 17, 'Bond angle:CB:CG:CD2\ncablam Outlier', (178.787, 171.001, 230.73499999999999)), ('A', '1084', 17, 'cablam Outlier', (180.4, 168.6, 233.3)), ('A', '1137', 17, 'smoc Outlier', (172.52200000000002, 171.916, 230.80100000000002)), ('A', '795', 18, 'smoc Outlier', (132.12, 171.15200000000002, 205.648)), ('A', '796', 18, 'Bond angle:CA:CB:CG', (133.798, 171.14299999999997, 209.14299999999997)), ('A', '797', 18, 'cablam Outlier', (137.4, 171.1, 207.9)), ('A', '108', 19, 'cablam Outlier', (152.7, 201.7, 120.9)), ('A', '234', 19, 'Dihedral angle:CA:C\nsmoc Outlier', (149.95200000000003, 195.069, 124.958)), ('A', '235', 19, 'Ramachandran\nDihedral angle:N:CA\nsmoc Outlier', (150.63299999999998, 198.86200000000002, 124.663)), ('A', '940', 20, 'Dihedral angle:CA:C', (142.379, 187.89200000000002, 184.883)), ('A', '941', 20, 'Dihedral angle:N:CA', (145.05100000000002, 185.985, 182.9)), ('A', '942', 20, 'smoc Outlier', (143.975, 184.034, 179.756)), ('A', '666', 21, 'cablam Outlier', (167.5, 188.3, 170.4)), ('A', '667', 21, 'cablam Outlier', (170.4, 186.0, 171.3)), ('A', '454', 22, 'Planar group:CD:NE:CZ:NH1:NH2', (178.845, 146.839, 106.935)), ('A', '493', 22, 'smoc Outlier', (177.545, 146.07299999999998, 100.94200000000001)), ('A', '1054', 23, 'Bond angle:OE1:CD:NE2', (141.547, 170.306, 188.88400000000001)), ('A', '819', 23, 'Dihedral angle:CB:CG:CD:OE1\nsmoc Outlier', (137.445, 174.07899999999998, 186.762)), ('A', '346', 24, 'smoc Outlier', (184.839, 164.135, 99.506)), ('A', '347', 24, 'Rotamer', (182.90200000000004, 162.15, 102.17)), ('A', '1026', 25, 'smoc Outlier', (150.334, 160.601, 186.409)), ('A', '1029', 25, 'smoc Outlier', (148.903, 162.611, 190.806)), ('A', '414', 26, 'Rotamer\nsmoc Outlier', (168.938, 153.634, 119.091)), ('A', '415', 26, 'smoc Outlier', (169.26299999999998, 150.277, 117.223)), ('A', '327', 27, 'side-chain clash', (182.57, 189.963, 130.777)), ('A', '531', 27, 'side-chain clash', (182.57, 189.963, 130.777)), ('A', '926', 28, 'Bond angle:OE1:CD:NE2', (146.496, 182.095, 204.642)), ('A', '930', 28, 'smoc Outlier', (145.834, 181.95800000000003, 198.635)), ('A', '724', 29, 'Dihedral angle:CA:C', (149.312, 176.39600000000002, 189.955)), ('A', '725', 29, 'Dihedral angle:N:CA', (151.037, 173.82200000000003, 187.742)), ('A', '220', 30, 'cablam CA Geom Outlier', (139.2, 200.4, 151.7)), ('A', '34', 30, 'side-chain clash', (141.633, 202.283, 148.188)), ('A', '466', 31, 'Dihedral angle:CD:NE:CZ:NH1', (185.26399999999998, 151.485, 114.03)), ('A', '468', 31, 'smoc Outlier', (187.31, 148.252, 108.195)), ('A', '223', 32, 'smoc Outlier', (137.27299999999997, 197.132, 142.525)), ('A', '224', 32, 'Dihedral angle:CB:CG:CD:OE1', (135.20299999999997, 194.602, 140.502)), ('A', '962', 33, 'smoc Outlier', (147.576, 168.95100000000002, 155.466)), ('A', '965', 33, 'Bond angle:OE1:CD:NE2', (148.48700000000002, 170.762, 150.503)), ('A', '1101', 34, 'Bond angle:CB:CG:CD2', (171.311, 183.194, 226.81)), ('A', '1102', 34, 'Planar group:CB:CG:CD1:CD2:NE1:CE2:CE3:CZ2:CZ3:CH2', (171.471, 179.791, 225.065)), ('A', '617', 35, 'C-beta\nBond angle:CA:CB:SG\nBond angle:C:CA:CB\nBond angle:C\nBond angle:CA:C\nBond length:C\ncablam Outlier', (176.27599999999998, 196.655, 160.085)), ('A', '618', 35, 'Bond angle:N:CA\nBond angle:N\nBond length:N', (178.29899999999998, 197.596, 156.74699999999999)), ('A', '1043', 36, 'cablam Outlier', (155.3, 169.8, 193.9)), ('A', '1048', 36, 'Bond angle:CB:CG:CD2', (155.22899999999998, 170.48200000000003, 200.067)), ('B', '1083', 1, 'Bond angle:CB:CG:CD2', (165.05800000000002, 141.504, 231.165)), ('B', '1091', 1, 'Dihedral angle:CA:C', (164.636, 152.66899999999998, 220.171)), ('B', '1092', 1, 'Dihedral angle:N:CA\ncablam Outlier', (166.939, 153.41, 217.255)), ('B', '1095', 1, 'smoc Outlier', (171.655, 145.17399999999998, 219.509)), ('B', '1105', 1, 'Dihedral angle:CA:C', (174.624, 150.96200000000002, 218.085)), ('B', '1106', 1, 'Bond angle:OE1:CD:NE2\nDihedral angle:N:CA', (173.284, 153.21699999999998, 215.38800000000003)), ('B', '1115', 1, 'smoc Outlier', (171.738, 149.025, 226.813)), ('B', '1118', 1, 'Dihedral angle:CA:C', (165.98200000000003, 155.006, 227.469)), ('B', '1119', 1, 'Dihedral angle:N:CA', (168.05100000000002, 153.39000000000001, 224.64899999999997)), ('B', '1135', 1, 'Dihedral angle:CA:C', (170.529, 140.534, 229.30200000000002)), ('B', '1136', 1, 'Dihedral angle:N:CA\nDihedral angle:CA:C', (170.533, 143.26, 231.95700000000002)), ('B', '1137', 1, 'Dihedral angle:N:CA', (168.944, 146.567, 230.90200000000002)), ('B', '108', 2, 'cablam Outlier', (199.8, 146.5, 119.1)), ('B', '110', 2, 'cablam Outlier', (204.8, 147.8, 116.7)), ('B', '111', 2, 'cablam Outlier', (205.5, 147.3, 113.0)), ('B', '112', 2, 'cablam CA Geom Outlier', (203.2, 148.5, 110.2)), ('B', '113', 2, 'Ramachandran', (199.38300000000007, 147.775, 109.682)), ('B', '131', 2, 'Dihedral angle:CA:C', (203.607, 157.008, 112.30499999999999)), ('B', '132', 2, 'Dihedral angle:N:CA', (202.83100000000002, 153.53, 110.94600000000001)), ('B', '133', 2, 'cablam Outlier', (206.5, 152.9, 112.1)), ('B', '135', 2, 'Bond angle:CA:CB:CG', (211.95100000000002, 151.12800000000001, 113.083)), ('B', '137', 2, 'Ramachandran\ncablam Outlier', (214.84, 149.019, 118.885)), ('B', '139', 2, 'smoc Outlier', (215.445, 154.92600000000002, 116.811)), ('B', '216', 3, 'cablam Outlier\nsmoc Outlier', (212.0, 152.0, 144.9)), ('B', '217', 3, 'Dihedral angle:CA:C', (212.65200000000002, 153.602, 148.403)), ('B', '218', 3, 'Dihedral angle:N:CA', (209.583, 153.611, 150.664)), ('B', '220', 3, 'smoc Outlier', (205.64899999999997, 158.95800000000003, 149.23399999999998)), ('B', '293', 3, 'cablam CA Geom Outlier', (194.5, 146.6, 150.4)), ('B', '297', 3, 'smoc Outlier', (192.38600000000002, 150.35800000000003, 154.809)), ('B', '33', 3, 'cablam Outlier', (203.1, 153.3, 148.4)), ('B', '34', 3, 'cablam CA Geom Outlier', (204.1, 154.5, 144.8)), ('B', '58', 3, 'Bond angle:CA:CB:CG', (199.905, 149.42200000000003, 146.996)), ('B', '1043', 4, 'cablam CA Geom Outlier', (172.8, 161.3, 192.5)), ('B', '1048', 4, 'Bond angle:CB:CG:CD2', (173.873, 161.319, 199.094)), ('B', '1054', 4, 'Bond angle:OE1:CD:NE2', (179.60399999999998, 172.863, 187.005)), ('B', '1062', 4, 'smoc Outlier', (177.181, 167.343, 188.71299999999997)), ('B', '1064', 4, 'Bond angle:CB:CG:CD2\nsmoc Outlier', (177.92100000000002, 164.262, 193.70999999999998)), ('B', '1066', 4, 'smoc Outlier', (178.24299999999997, 160.768, 199.076)), ('B', '723', 4, 'smoc Outlier', (181.47, 161.30200000000002, 191.73899999999998)), ('B', '819', 4, 'smoc Outlier', (184.67899999999997, 174.372, 184.512)), ('B', '820', 4, 'Rotamer', (187.766, 175.48, 182.513)), ('B', '1074', 5, 'Rotamer\nbackbone clash', (171.853, 136.914, 211.353)), ('B', '1302', 5, 'Planar group:C2:C7:C8:N2:O7', (181.198, 136.061, 209.56)), ('B', '1305', 5, 'Planar group:C2:C7:C8:N2:O7', (168.92100000000002, 131.484, 216.71399999999997)), ('B', '708', 5, 'Dihedral angle:CA:C', (173.51299999999998, 133.55700000000002, 209.062)), ('B', '709', 5, 'Ramachandran\nDihedral angle:N:CA\ncablam Outlier', (170.788, 133.925, 211.689)), ('B', '710', 5, 'Dihedral angle:CA:C\ncablam Outlier', (172.71699999999998, 135.89200000000002, 214.38700000000003)), ('B', '711', 5, 'Dihedral angle:N:CA', (175.35000000000002, 137.632, 212.28)), ('B', '713', 5, 'smoc Outlier', (178.186, 143.472, 209.724)), ('B', '1069', 6, 'Dihedral angle:CA:C', (180.62800000000001, 152.993, 204.70499999999998)), ('B', '1070', 6, 'Dihedral angle:N:CA', (184.185, 151.592, 204.592)), ('B', '718', 6, 'Dihedral angle:CA:C', (183.636, 155.833, 206.156)), ('B', '719', 6, 'Dihedral angle:N:CA', (184.98700000000002, 157.429, 202.971)), ('B', '926', 6, 'Bond angle:OE1:CD:NE2', (188.602, 163.227, 202.40800000000002)), ('B', '1303', 7, 'Planar group:C2:C7:C8:N2:O7', (189.975, 177.54399999999998, 202.063)), ('B', '796', 7, 'smoc Outlier', (185.54, 179.872, 206.74099999999999)), ('B', '797', 7, 'cablam Outlier', (183.9, 176.6, 205.5)), ('B', '800', 7, 'smoc Outlier', (186.21299999999997, 172.153, 203.37)), ('B', '197', 8, 'cablam CA Geom Outlier', (191.6, 156.6, 128.7)), ('B', '198', 8, 'cablam Outlier\nsmoc Outlier', (189.1, 159.5, 127.8)), ('B', '200', 8, 'Dihedral angle:CA:C', (193.73499999999999, 158.846, 125.346)), ('B', '201', 8, 'Dihedral angle:N:CA\nsmoc Outlier', (197.42000000000002, 159.048, 126.256)), ('B', '577', 9, 'side-chain clash\nsmoc Outlier', (156.191, 115.268, 142.589)), ('B', '581', 9, 'Dihedral angle:CA:C', (161.873, 113.227, 139.85700000000003)), ('B', '582', 9, 'side-chain clash\nDihedral angle:N:CA', (158.934, 114.44900000000001, 141.915)), ('B', '583', 9, 'Dihedral angle:CB:CG:CD:OE1\nsmoc Outlier', (160.708, 114.88499999999999, 145.335)), ('B', '736', 10, 'Dihedral angle:CA:C', (168.069, 176.30700000000002, 156.859)), ('B', '737', 10, 'Dihedral angle:N:CA', (166.578, 178.418, 154.075)), ('B', '856', 10, 'cablam CA Geom Outlier', (174.4, 176.7, 151.2)), ('B', '858', 10, 'smoc Outlier', (172.58, 176.489, 156.34)), ('B', '1306', 11, 'Planar group:C2:C7:C8:N2:O7', (194.753, 130.82100000000003, 175.411)), ('B', '655', 11, 'Bond angle:CB:CG:CD2', (190.32200000000003, 132.809, 171.561)), ('B', '695', 11, 'smoc Outlier', (186.806, 136.025, 175.24499999999998)), ('B', '265', 12, 'side-chain clash', (213.372, 146.255, 128.788)), ('B', '66', 12, 'Bond angle:CB:CG:CD2', (218.374, 145.77299999999997, 133.342)), ('B', '81', 12, 'side-chain clash', (213.372, 146.255, 128.788)), ('B', '327', 13, 'smoc Outlier', (167.83200000000002, 124.37599999999999, 134.611)), ('B', '531', 13, 'Dihedral angle:CA:C', (170.871, 120.398, 133.132)), ('B', '532', 13, 'Dihedral angle:N:CA', (171.74299999999997, 117.925, 135.86800000000002)), ('B', '445', 14, 'smoc Outlier', (159.595, 111.193, 80.832)), ('B', '446', 14, 'smoc Outlier', (156.907, 112.883, 78.661)), ('B', '498', 14, 'Bond angle:OE1:CD:NE2', (161.32200000000003, 116.478, 82.367)), ('B', '308', 15, 'smoc Outlier', (190.86700000000002, 155.21499999999997, 163.541)), ('B', '310', 15, 'cablam CA Geom Outlier', (189.3, 151.8, 169.3)), ('B', '600', 15, 'cablam Outlier', (192.3, 148.8, 169.1)), ('B', '357', 16, 'Dihedral angle:CD:NE:CZ:NH1', (149.14399999999998, 121.104, 110.068)), ('B', '359', 16, 'smoc Outlier', (150.32800000000003, 121.545, 116.48)), ('B', '360', 16, 'smoc Outlier', (150.6, 120.245, 120.113)), ('B', '515', 17, 'Bond angle:CA:CB:CG', (153.15800000000002, 130.262, 111.44300000000001)), ('B', '516', 17, 'Dihedral angle:CB:CG:CD:OE1', (150.129, 131.75, 113.282)), ('B', '517', 17, 'smoc Outlier', (150.129, 133.298, 116.819)), ('B', '977', 18, 'smoc Outlier', (171.974, 173.748, 138.815)), ('B', '979', 18, 'Bond angle:CA:CB:CG\nsmoc Outlier', (175.112, 173.684, 134.339)), ('B', '980', 18, 'smoc Outlier', (171.504, 172.67299999999997, 133.563)), ('B', '90', 19, 'Dihedral angle:CA:C', (201.57, 151.27399999999997, 133.224)), ('B', '91', 19, 'Dihedral angle:N:CA\nsmoc Outlier', (203.629, 152.651, 136.05800000000002)), ('B', '92', 19, 'smoc Outlier', (207.236, 152.86200000000002, 134.79)), ('B', '41', 20, 'cablam Outlier', (192.7, 169.1, 137.2)), ('B', '42', 20, 'smoc Outlier', (190.865, 170.477, 140.27499999999998)), ('B', '44', 20, 'smoc Outlier', (191.756, 170.866, 146.70399999999998)), ('B', '1144', 21, 'Dihedral angle:CB:CG:CD:OE1', (170.478, 158.74899999999997, 241.08100000000002)), ('B', '1145', 21, 'smoc Outlier', (167.553, 157.74499999999998, 243.38500000000002)), ('B', '344', 22, 'smoc Outlier', (156.17399999999998, 112.99000000000001, 100.776)), ('B', '345', 22, 'smoc Outlier', (155.911, 111.41700000000002, 97.25)), ('B', '934', 23, 'smoc Outlier', (188.21399999999997, 165.04299999999998, 189.93800000000002)), ('B', '935', 23, 'Bond angle:OE1:CD:NE2', (190.691, 167.778, 188.863)), ('B', '122', 24, 'cablam CA Geom Outlier', (217.0, 164.1, 124.6)), ('B', '123', 24, 'Ramachandran', (219.302, 167.13899999999995, 125.174)), ('B', '890', 25, 'smoc Outlier', (162.51299999999998, 176.586, 199.608)), ('B', '891', 25, 'cablam Outlier', (162.6, 180.4, 200.2)), ('B', '363', 26, 'Dihedral angle:CA:C', (160.16299999999998, 121.52499999999999, 117.57199999999999)), ('B', '364', 26, 'Dihedral angle:N:CA', (163.638, 121.288, 116.01400000000001)), ('B', '643', 27, 'Bond angle:CA:CB:CG', (186.93200000000002, 130.989, 165.501)), ('B', '644', 27, 'Bond angle:OE1:CD:NE2', (183.14299999999997, 130.354, 165.27399999999997)), ('B', '612', 28, 'side-chain clash', (182.911, 135.111, 159.495)), ('B', '649', 28, 'side-chain clash', (182.911, 135.111, 159.495)), ('B', '337', 29, 'smoc Outlier', (156.27499999999998, 114.95, 113.248)), ('B', '338', 29, 'smoc Outlier', (157.95000000000002, 117.164, 110.526)), ('B', '744', 30, 'Ramachandran', (170.05300000000005, 179.097, 145.363)), ('B', '745', 30, 'cablam Outlier', (169.9, 182.2, 143.0)), ('B', '461', 31, 'Dihedral angle:CA:C', (146.535, 138.416, 94.452)), ('B', '462', 31, 'Dihedral angle:N:CA', (145.912, 139.847, 97.91600000000001)), ('B', '949', 32, 'Bond angle:OE1:CD:NE2', (181.3, 165.288, 172.379)), ('B', '950', 32, 'Bond angle:CA:CB:CG', (178.85100000000003, 162.61299999999997, 171.02)), ('C', '1083', 1, 'Bond angle:CB:CG:CD2\ncablam Outlier', (146.605, 168.177, 232.318)), ('C', '1087', 1, 'smoc Outlier', (148.599, 171.14, 226.605)), ('C', '1088', 1, 'Bond angle:CB:CG:CD2', (150.221, 167.753, 225.761)), ('C', '1118', 1, 'Dihedral angle:CA:C', (157.317, 160.476, 227.866)), ('C', '1119', 1, 'Dihedral angle:N:CA\nsmoc Outlier', (154.72899999999998, 159.369, 225.24899999999997)), ('C', '1120', 1, 'smoc Outlier', (154.016, 163.14499999999998, 224.894)), ('C', '1121', 1, 'smoc Outlier', (155.47899999999998, 166.685, 224.93800000000002)), ('C', '1122', 1, 'Dihedral angle:CA:C', (154.107, 169.92200000000003, 226.51899999999998)), ('C', '1123', 1, 'Dihedral angle:N:CA', (153.601, 173.206, 224.627)), ('C', '1135', 1, 'Dihedral angle:CA:C', (142.824, 163.724, 230.863)), ('C', '1136', 1, 'Dihedral angle:N:CA\nDihedral angle:CA:C', (145.38000000000002, 162.44, 233.363)), ('C', '1137', 1, 'Dihedral angle:N:CA', (148.91299999999998, 162.24099999999999, 231.947)), ('C', '1305', 2, 'Planar group:C2:C7:C8:N2:O7', (134.672, 169.236, 218.933)), ('C', '707', 2, 'cablam Outlier', (134.4, 162.2, 208.3)), ('C', '708', 2, 'Dihedral angle:CA:C', (133.706, 164.538, 211.271)), ('C', '709', 2, 'Rotamer\nbackbone clash\nRamachandran\nDihedral angle:N:CA\ncablam Outlier', (135.737, 166.44299999999998, 213.88500000000002)), ('C', '710', 2, 'Ramachandran\ncablam Outlier', (136.634, 163.929, 216.69100000000003)), ('C', '711', 2, 'backbone clash', (136.898, 163.429, 214.286)), ('C', '712', 2, 'smoc Outlier', (139.562, 158.67499999999998, 213.21299999999997)), ('C', '805', 2, 'side-chain clash', (136.28, 162.222, 219.362)), ('C', '878', 2, 'side-chain clash', (136.28, 162.222, 219.362)), ('C', '1019', 3, 'Dihedral angle:CD:NE:CZ:NH1', (164.495, 153.905, 175.88200000000003)), ('C', '1022', 3, 'smoc Outlier', (164.36, 151.194, 180.001)), ('C', '1058', 3, 'Bond angle:CB:CG:CD2', (163.008, 141.812, 176.036)), ('C', '731', 3, 'Dihedral angle:CA:C', (163.918, 145.756, 170.82600000000002)), ('C', '732', 3, 'Dihedral angle:N:CA', (165.29899999999998, 143.147, 168.424)), ('C', '770', 3, 'smoc Outlier', (169.23, 151.809, 167.403)), ('C', '773', 3, 'Dihedral angle:CB:CG:CD:OE1', (171.24299999999997, 151.569, 172.21699999999998)), ('C', '774', 3, 'smoc Outlier', (169.435, 148.21499999999997, 172.894)), ('C', '777', 3, 'smoc Outlier', (169.32000000000002, 149.95800000000003, 177.654)), ('C', '267', 4, 'smoc Outlier', (124.429, 124.99600000000001, 139.81)), ('C', '270', 4, 'smoc Outlier', (131.535, 132.138, 140.73499999999999)), ('C', '61', 4, 'Dihedral angle:CA:C', (121.657, 129.594, 146.93800000000002)), ('C', '62', 4, 'Dihedral angle:N:CA', (122.516, 127.113, 144.20299999999997)), ('C', '86', 4, 'smoc Outlier', (128.106, 130.33700000000002, 132.335)), ('C', '88', 4, 'cablam Outlier', (132.3, 134.4, 135.0)), ('C', '90', 4, 'Dihedral angle:CA:C', (130.29, 127.771, 137.341)), ('C', '91', 4, 'Dihedral angle:N:CA', (130.15200000000002, 125.577, 140.415)), ('C', '357', 5, 'Dihedral angle:CD:NE:CZ:NH1', (135.445, 184.40800000000002, 118.436)), ('C', '394', 5, 'smoc Outlier', (134.73399999999998, 181.529, 124.738)), ('C', '432', 5, 'smoc Outlier', (143.622, 172.167, 119.57799999999999)), ('C', '513', 5, 'smoc Outlier', (141.16, 176.411, 118.72)), ('C', '515', 5, 'smoc Outlier', (139.959, 177.309, 124.696)), ('C', '516', 5, 'Dihedral angle:CB:CG:CD:OE1', (139.429, 179.792, 127.569)), ('C', '518', 5, 'smoc Outlier', (137.771, 181.05100000000002, 133.02700000000002)), ('C', '519', 5, 'side-chain clash', (135.622, 183.607, 137.431)), ('C', '186', 6, 'smoc Outlier', (121.927, 109.17599999999999, 147.009)), ('C', '263', 6, 'smoc Outlier', (119.538, 111.9, 138.756)), ('C', '94', 6, 'Dihedral angle:CA:C', (125.489, 116.154, 141.797)), ('C', '95', 6, 'Dihedral angle:N:CA', (124.338, 113.905, 144.598)), ('C', '96', 6, 'Bond angle:C', (124.67299999999999, 110.509, 142.903)), ('C', '97', 6, 'Ramachandran\nBond angle:N:CA\ncablam Outlier', (123.843, 106.757, 143.038)), ('C', '1307', 7, 'Planar group:C2:C7:C8:N2:O7', (118.169, 163.605, 161.971)), ('C', '615', 7, 'Dihedral angle:CA:C', (127.233, 159.536, 161.403)), ('C', '616', 7, 'Rotamer\nDihedral angle:N:CA', (123.46600000000001, 160.059, 161.88800000000003)), ('C', '619', 7, 'smoc Outlier', (122.77199999999999, 158.696, 156.667)), ('C', '648', 7, 'smoc Outlier', (127.862, 157.455, 165.846)), ('C', '1043', 8, 'cablam Outlier', (156.7, 150.4, 193.6)), ('C', '1048', 8, 'Bond angle:CB:CG:CD2', (156.60999999999999, 149.751, 199.824)), ('C', '1049', 8, 'smoc Outlier', (158.623, 147.17299999999997, 201.777)), ('C', '1064', 8, 'Bond angle:CB:CG:CD2', (156.77399999999997, 144.546, 194.49800000000002)), ('C', '1066', 8, 'smoc Outlier', (153.929, 146.228, 200.011)), ('C', '599', 9, 'side-chain clash\nBond angle:CA:C', (132.99, 141.447, 169.313)), ('C', '600', 9, 'Bond angle:N\ncablam CA Geom Outlier', (132.35700000000003, 139.71499999999997, 172.752)), ('C', '601', 9, 'side-chain clash', (133.88, 138.342, 170.304)), ('C', '602', 9, 'Rotamer', (135.029, 134.161, 169.232)), ('C', '604', 9, 'Rotamer\ncablam Outlier', (132.094, 133.753, 173.573)), ('C', '1094', 10, 'smoc Outlier', (147.76999999999998, 159.966, 217.71699999999998)), ('C', '1105', 10, 'Dihedral angle:CA:C\nsmoc Outlier', (148.759, 154.722, 219.33200000000002)), ('C', '1106', 10, 'Dihedral angle:N:CA', (151.202, 154.636, 216.466)), ('C', '1113', 10, 'Rotamer\nBond angle:OE1:CD:NE2\nsmoc Outlier', (149.686, 152.83, 224.97899999999998)), ('C', '333', 11, 'cablam Outlier', (120.3, 175.7, 121.4)), ('C', '362', 11, 'smoc Outlier', (126.551, 174.545, 121.476)), ('C', '363', 11, 'Dihedral angle:CA:C', (129.618, 172.94, 119.864)), ('C', '364', 11, 'Dihedral angle:N:CA', (130.04399999999998, 169.445, 118.46000000000001)), ('C', '228', 12, 'Dihedral angle:CA:C', (144.136, 123.233, 132.77399999999997)), ('C', '229', 12, 'Dihedral angle:N:CA', (143.24599999999998, 122.851, 129.075)), ('C', '231', 12, 'smoc Outlier', (141.661, 125.405, 124.34700000000001)), ('C', '233', 12, 'smoc Outlier', (138.08200000000002, 129.461, 123.046)), ('C', '675', 13, 'Bond angle:OE1:CD:NE2', (124.88199999999999, 139.611, 178.661)), ('C', '691', 13, 'Dihedral angle:CA:C', (123.003, 140.004, 173.342)), ('C', '692', 13, 'Dihedral angle:N:CA', (125.7, 142.64399999999998, 173.04399999999998)), ('C', '1054', 14, 'Bond angle:OE1:CD:NE2', (162.89800000000002, 138.707, 187.505)), ('C', '1060', 14, 'smoc Outlier', (162.089, 142.98600000000002, 183.32600000000002)), ('C', '819', 14, 'smoc Outlier', (161.57299999999998, 133.411, 185.198)), ('C', '539', 15, 'Dihedral angle:CA:C', (124.06700000000001, 162.777, 143.70999999999998)), ('C', '540', 15, 'Dihedral angle:N:CA', (126.706, 162.88800000000003, 141.037)), ('C', '549', 15, 'cablam CA Geom Outlier', (129.7, 164.0, 143.9)), ('C', '293', 16, 'cablam CA Geom Outlier', (129.8, 137.6, 154.0)), ('C', '297', 16, 'smoc Outlier', (133.853, 137.494, 158.62)), ('C', '298', 16, 'Dihedral angle:CB:CG:CD:OE1', (135.151, 140.936, 157.578)), ('C', '220', 17, 'cablam CA Geom Outlier\nsmoc Outlier', (133.9, 121.7, 154.2)), ('C', '33', 17, 'cablam Outlier', (130.6, 126.8, 153.0)), ('C', '34', 17, 'cablam CA Geom Outlier', (131.2, 124.9, 149.7)), ('C', '1002', 18, 'Bond angle:OE1:CD:NE2', (160.848, 155.319, 150.379)), ('C', '1003', 18, 'smoc Outlier', (159.845, 151.907, 151.853)), ('C', '965', 18, 'Bond angle:OE1:CD:NE2', (156.796, 146.132, 149.854)), ('C', '1306', 19, 'Planar group:C2:C7:C8:N2:O7\nsmoc Outlier', (116.926, 147.833, 179.11499999999998)), ('C', '656', 19, 'smoc Outlier', (120.865, 149.21699999999998, 178.70399999999998)), ('C', '664', 20, 'smoc Outlier', (134.66, 147.30200000000002, 175.29299999999998)), ('C', '666', 20, 'cablam Outlier\nsmoc Outlier', (132.9, 152.7, 172.2)), ('C', '957', 21, 'smoc Outlier', (154.945, 143.314, 161.725)), ('C', '959', 21, 'smoc Outlier', (159.841, 143.52200000000002, 159.05200000000002)), ('C', '165', 22, 'smoc Outlier', (138.632, 125.611, 114.561)), ('C', '166', 22, 'smoc Outlier', (139.046, 122.17599999999999, 116.254)), ('C', '1069', 23, 'Dihedral angle:CA:C', (146.412, 148.111, 206.222)), ('C', '1070', 23, 'Dihedral angle:N:CA', (143.464, 145.69299999999998, 206.52100000000002)), ('C', '408', 24, 'Dihedral angle:CD:NE:CZ:NH1', (155.785, 171.758, 113.164)), ('C', '410', 24, 'smoc Outlier', (152.441, 175.489, 115.59)), ('C', '122', 25, 'Bond angle:C\nsmoc Outlier', (132.95600000000002, 107.723, 128.417)), ('C', '123', 25, 'Bond angle:N:CA', (132.737, 104.699, 130.83100000000002)), ('C', '574', 26, 'Bond angle:CA:CB:CG', (131.915, 174.207, 147.71699999999998)), ('C', '575', 26, 'smoc Outlier', (129.141, 176.35200000000003, 146.164)), ('C', '319', 27, 'Rotamer\nsmoc Outlier', (130.387, 156.298, 152.376)), ('C', '590', 27, 'smoc Outlier', (128.24499999999998, 162.63, 150.883)), ('C', '111', 28, 'Bond angle:C\nBond angle:CA:CB:CG', (125.37899999999999, 124.52499999999999, 118.32499999999999)), ('C', '112', 28, 'Bond angle:N:CA', (127.088, 123.101, 115.17299999999999)), ('C', '796', 29, 'Bond angle:CA:CB:CG\nsmoc Outlier', (167.63, 130.506, 207.255)), ('C', '797', 29, 'cablam Outlier', (165.4, 133.5, 206.2)), ('C', '449', 30, 'smoc Outlier', (152.17899999999997, 184.541, 95.733)), ('C', '450', 30, 'smoc Outlier', (149.21699999999998, 186.122, 97.67099999999999)), ('C', '581', 31, 'Dihedral angle:CA:C', (118.318, 179.51899999999998, 137.106)), ('C', '582', 31, 'Dihedral angle:N:CA', (120.79700000000001, 181.813, 138.846)), ('C', '487', 32, 'C-beta\nside-chain clash', (157.475, 127.064, 195.828)), ('C', '886', 32, 'side-chain clash', (157.299, 127.323, 195.76)), ('C', '736', 33, 'Dihedral angle:CA:C', (169.993, 146.17499999999998, 156.365)), ('C', '737', 33, 'Dihedral angle:N:CA\nsmoc Outlier', (172.148, 145.83700000000002, 153.257)), ('C', '40', 34, 'Bond angle:CA:CB:CG', (147.096, 128.207, 142.625)), ('C', '41', 34, 'cablam Outlier', (149.7, 125.4, 142.3)), ('C', '470', 35, 'smoc Outlier', (154.98800000000003, 196.517, 106.698)), ('C', '471', 35, 'Dihedral angle:CB:CG:CD:OE1\nsmoc Outlier', (157.559, 199.26399999999998, 107.545)), ('D', '2', 1, 'Planar group:C2:C7:C8:N2:O7', (166.47, 183.788, 232.33200000000002)), ('F', '2', 1, 'Planar group:C2:C7:C8:N2:O7', (141.836, 151.123, 233.23899999999998))]
data['rama'] = [('A', ' 235 ', 'ILE', 0.00512602, (150.63300000000007, 198.862, 124.663)), ('A', ' 330 ', 'PRO', 0.004523578760151871, (190.191, 183.019, 126.6)), ('A', ' 331 ', 'ASN', 0.016405421563113316, (191.55700000000004, 184.428, 123.286)), ('A', ' 332 ', 'ILE', 0.06671384182211812, (191.914, 182.406, 120.001)), ('A', ' 600 ', 'PRO', 0.0346303893812585, (155.657, 194.297, 170.937)), ('B', ' 113 ', 'LYS', 0.046858989872390885, (199.38300000000007, 147.775, 109.682)), ('B', ' 123 ', 'ALA', 0.04115755931952818, (219.302, 167.13899999999995, 125.174)), ('B', ' 137 ', 'ASN', 0.03132404492888892, (214.84, 149.019, 118.885)), ('B', ' 709 ', 'ASN', 0.0018652062754081007, (170.78800000000007, 133.925, 211.68900000000002)), ('B', ' 744 ', 'GLY', 0.09526814563214168, (170.05300000000005, 179.097, 145.363)), ('C', '  97 ', 'LYS', 0.020321807612825753, (123.84300000000005, 106.757, 143.038)), ('C', ' 198 ', 'ASP', 0.04820475936930321, (142.986, 133.93, 128.716)), ('C', ' 709 ', 'ASN', 0.00261706078962187, (135.737, 166.443, 213.885)), ('C', ' 710 ', 'ASN', 0.0041521351831322285, (136.634, 163.929, 216.69100000000003))]
data['cablam'] = [('A', '31', 'SER', 'check CA trace,carbonyls, peptide', ' \nEE-TT', (147.3, 206.6, 147.5)), ('A', '41', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\n-SSEE', (135.8, 185.2, 139.6)), ('A', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\n-TTEE', (152.8, 197.0, 133.3)), ('A', '98', 'SER', 'check CA trace,carbonyls, peptide', 'bend\nESS--', (130.6, 216.8, 135.2)), ('A', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEESS-', (152.7, 201.7, 120.9)), ('A', '112', 'SER', 'check CA trace,carbonyls, peptide', 'bend\n-SSSS', (149.5, 205.0, 111.4)), ('A', '133', 'PHE', ' beta sheet', ' \nES---', (144.3, 205.1, 113.5)), ('A', '330', 'PRO', 'check CA trace,carbonyls, peptide', ' \nE----', (190.2, 183.0, 126.6)), ('A', '332', 'ILE', 'check CA trace,carbonyls, peptide', ' \n-----', (191.9, 182.4, 120.0)), ('A', '477', 'SER', 'check CA trace,carbonyls, peptide', 'bend\nSSS--', (176.3, 126.4, 109.5)), ('A', '481', 'ASN', 'check CA trace,carbonyls, peptide', 'turn\n--TT-', (187.1, 128.8, 105.4)), ('A', '487', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\n--S--', (176.2, 132.0, 104.7)), ('A', '536', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\n--SSE', (185.7, 192.8, 145.9)), ('A', '614', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nEES--', (174.9, 187.2, 161.2)), ('A', '617', 'CYS', 'check CA trace,carbonyls, peptide', 'turn\n--TTT', (176.3, 196.7, 160.1)), ('A', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (167.5, 188.3, 170.4)), ('A', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (170.4, 186.0, 171.3)), ('A', '797', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\n--STT', (137.4, 171.1, 207.9)), ('A', '890', 'ALA', 'check CA trace,carbonyls, peptide', 'bend\nGGSSS', (147.6, 153.1, 200.0)), ('A', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'turn\nTTTSS', (155.3, 169.8, 193.9)), ('A', '1083', 'HIS', 'check CA trace,carbonyls, peptide', 'bend\nEESSS', (178.8, 171.0, 230.7)), ('A', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (180.4, 168.6, 233.3)), ('A', '220', 'PHE', 'check CA trace', ' \nSS---', (139.2, 200.4, 151.7)), ('A', '293', 'LEU', 'check CA trace', 'bend\nTTSSH', (155.2, 197.8, 152.2)), ('A', '310', 'LYS', 'check CA trace', 'bend\n--SEE', (154.6, 190.1, 170.9)), ('A', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (177.4, 184.8, 141.1)), ('A', '856', 'ASN', 'check CA trace', 'turn\n-TTTE', (138.8, 165.2, 152.6)), ('B', '33', 'THR', 'check CA trace,carbonyls, peptide', 'bend\n--S--', (203.1, 153.3, 148.4)), ('B', '41', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\n-SSEE', (192.7, 169.1, 137.2)), ('B', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\n-TT-E', (195.0, 148.8, 131.1)), ('B', '97', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nEESS-', (222.8, 158.9, 137.0)), ('B', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEESSS', (199.8, 146.5, 119.1)), ('B', '110', 'LEU', 'check CA trace,carbonyls, peptide', 'bend\nSSSSS', (204.8, 147.8, 116.7)), ('B', '111', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nSSSSS', (205.5, 147.3, 113.0)), ('B', '133', 'PHE', ' beta sheet', ' \n-----', (206.5, 152.9, 112.1)), ('B', '137', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\n--S-G', (214.8, 149.0, 118.9)), ('B', '198', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSS', (189.1, 159.5, 127.8)), ('B', '216', 'LEU', ' beta sheet', ' \n-S--S', (212.0, 152.0, 144.9)), ('B', '544', 'ASN', 'check CA trace,carbonyls, peptide', 'turn\nEETTE', (159.7, 125.1, 134.9)), ('B', '600', 'PRO', 'check CA trace,carbonyls, peptide', 'bend\nEES-T', (192.3, 148.8, 169.1)), ('B', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (181.1, 141.3, 169.5)), ('B', '709', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\n--SS-', (170.8, 133.9, 211.7)), ('B', '710', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\n-SS-E', (172.7, 135.9, 214.4)), ('B', '745', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nTSS-H', (169.9, 182.2, 143.0)), ('B', '797', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\n--STT', (183.9, 176.6, 205.5)), ('B', '891', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nHHSS-', (162.6, 180.4, 200.2)), ('B', '1092', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (166.9, 153.4, 217.3)), ('B', '34', 'ARG', 'check CA trace', ' \n-S---', (204.1, 154.5, 144.8)), ('B', '112', 'SER', 'check CA trace', 'bend\nSSSSS', (203.2, 148.5, 110.2)), ('B', '122', 'ASN', 'check CA trace', 'strand\nEEETT', (217.0, 164.1, 124.6)), ('B', '197', 'ILE', 'check CA trace', 'bend\nEESSS', (191.6, 156.6, 128.7)), ('B', '293', 'LEU', 'check CA trace', 'bend\nTTSSH', (194.5, 146.6, 150.4)), ('B', '310', 'LYS', 'check CA trace', 'bend\n--SEE', (189.3, 151.8, 169.3)), ('B', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (169.4, 132.0, 143.3)), ('B', '856', 'ASN', 'check CA trace', 'bend\n--SSE', (174.4, 176.7, 151.2)), ('B', '1043', 'CYS', 'check CA trace', 'bend\nTSSSS', (172.8, 161.3, 192.5)), ('C', '33', 'THR', 'check CA trace,carbonyls, peptide', 'bend\n--S--', (130.6, 126.8, 153.0)), ('C', '41', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\n-SSEE', (149.7, 125.4, 142.3)), ('C', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\n-TTEE', (132.3, 134.4, 135.0)), ('C', '97', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nEESS-', (123.8, 106.8, 143.0)), ('C', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEESSS', (128.8, 130.5, 123.0)), ('C', '198', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\nEETTE', (143.0, 133.9, 128.7)), ('C', '211', 'ASN', 'check CA trace,carbonyls, peptide', ' \nE---S', (124.1, 111.1, 154.3)), ('C', '218', 'GLN', 'check CA trace,carbonyls, peptide', 'bend\n--SS-', (126.7, 121.3, 155.5)), ('C', '281', 'GLU', 'check CA trace,carbonyls, peptide', 'turn\nE-TTS', (150.6, 121.4, 158.1)), ('C', '333', 'THR', ' beta sheet', ' \n----B', (120.3, 175.7, 121.4)), ('C', '353', 'TRP', 'check CA trace,carbonyls, peptide', ' \nGG-EE', (146.5, 185.5, 111.2)), ('C', '475', 'ALA', 'check CA trace,carbonyls, peptide', ' \nEE-SS', (168.8, 195.5, 109.5)), ('C', '481', 'ASN', 'check CA trace,carbonyls, peptide', 'turn\n--TTS', (164.0, 206.9, 105.4)), ('C', '536', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\n--SSE', (119.1, 167.1, 149.7)), ('C', '604', 'THR', 'check CA trace,carbonyls, peptide', 'turn\nTTT-S', (132.1, 133.8, 173.6)), ('C', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (132.9, 152.7, 172.2)), ('C', '707', 'TYR', ' beta sheet', ' \n----S', (134.4, 162.2, 208.3)), ('C', '709', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\n--SS-', (135.7, 166.4, 213.9)), ('C', '710', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\n-SS-E', (136.6, 163.9, 216.7)), ('C', '797', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\n--STT', (165.4, 133.5, 206.2)), ('C', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'turn\nTTTSS', (156.7, 150.4, 193.6)), ('C', '1083', 'HIS', 'check CA trace,carbonyls, peptide', 'bend\nEESSS', (146.6, 168.2, 232.3)), ('C', '34', 'ARG', 'check CA trace', ' \n-S---', (131.2, 124.9, 149.7)), ('C', '220', 'PHE', 'check CA trace', ' \nSS---', (133.9, 121.7, 154.2)), ('C', '293', 'LEU', 'check CA trace', 'bend\nTTSSH', (129.8, 137.6, 154.0)), ('C', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (129.7, 164.0, 143.9)), ('C', '600', 'PRO', 'check CA trace', 'bend\nEES-T', (132.4, 139.7, 172.8))]
handle_read_draw_probe_dots_unformatted("/home/ccpem/agnel/gisaid/countries_seq/structure_data/emdb/EMD-23552/7lwo/Model_validation_1/validation_cootdata/molprobity_probe7lwo_0.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
