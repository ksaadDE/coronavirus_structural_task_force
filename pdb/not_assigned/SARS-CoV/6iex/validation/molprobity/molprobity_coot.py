# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 194 ', 'ILE', 0.010696403660891024, (-12.868, 9.832, 47.45499999999997))]
data['omega'] = [('A', ' 210 ', 'PRO', None, (-3.1340000000000017, -2.9690000000000007, 17.851)), ('A', ' 220 ', 'ASP', None, (-26.907, 6.893000000000003, 31.497)), ('B', '  32 ', 'PRO', None, (12.808000000000003, 20.162, 26.090999999999987))]
data['rota'] = [('A', '  12 ', 'MET', 0.0, (20.543, 17.157, 20.159999999999993)), ('A', '  23 ', 'ILE', 0.0, (19.507, 8.544000000000004, 17.464)), ('A', '  32 ', 'LEU', 0.0, (9.624000000000004, -0.76, 17.014999999999986)), ('A', '  34 ', 'VAL', 0.16084935982252901, (15.28500000000001, -1.168, 14.637999999999995)), ('A', '  35 ', 'ARG', 0.005893798796463878, (17.51, 1.2990000000000002, 16.521999999999988)), ('A', '  89 ', 'GLU', 0.08285671387531164, (26.674, 27.967000000000002, 21.003)), ('A', '  92 ', 'SER', 0.05321201169863343, (21.16, 23.465, 23.582999999999984)), ('A', ' 111 ', 'ARG', 0.2777574775186381, (1.0970000000000009, 9.298, 1.447)), ('A', ' 115 ', 'GLN', 0.2947148187511121, (9.540000000000001, 16.867, 7.563999999999995)), ('A', ' 154 ', 'GLU', 0.1142494882961262, (12.998, 14.004000000000007, -6.558)), ('A', ' 156 ', 'LEU', 0.0, (13.109000000000002, 11.508, -1.842999999999999)), ('A', ' 198 ', 'GLU', 0.23583852178735232, (-18.049, 10.876, 45.729)), ('A', ' 219 ', 'ARG', 0.16340640357089511, (-24.609, 7.268000000000003, 32.223)), ('A', ' 231 ', 'VAL', 0.0812351238398585, (-4.3260000000000005, 9.114, 30.390999999999995)), ('A', ' 247 ', 'VAL', 0.09601577218955173, (-15.046000000000003, 9.474, 36.09899999999999)), ('A', ' 255 ', 'GLN', 0.0, (-24.834, 1.778, 39.125)), ('A', ' 264 ', 'GLU', 0.0521401129698889, (-10.064, -3.039, 16.004)), ('A', ' 268 ', 'LYS', 0.2388896995564821, (-18.243, -5.371, 18.784999999999993)), ('B', '  89 ', 'GLN', 0.0, (13.09, 19.867, 41.84099999999997)), ('B', '  94 ', 'LYS', 0.006711993469760833, (5.010999999999997, 6.568, 43.876)), ('B', '  99 ', 'MET', 0.06540398613865257, (-3.4920000000000004, 3.132, 38.54099999999997)), ('C', '   5 ', 'LEU', 0.13798317927535036, (20.27, 9.851, 1.217999999999999)), ('C', '   7 ', 'LEU', 0.08099564991303616, (23.835000000000004, 13.673000000000007, 3.0679999999999983)), ('C', '   8 ', 'LEU', 0.011499250708595555, (20.646000000000004, 15.757, 3.2769999999999997)), ('C', '   9 ', 'LEU', 0.22506597573767598, (22.111, 19.062, 4.423))]
data['cbeta'] = []
data['probe'] = [(' A  48  ARG  O  ', ' A 239  ARG  NH2', -0.765, (10.854, -6.143, 18.319)), (' A  76  GLU  HG2', ' C   9  LEU HD11', -0.69, (26.5, 20.058, 6.14)), (' A 219  ARG  HG3', ' A 219  ARG  O  ', -0.673, (-25.258, 9.277, 31.688)), (' C   5  LEU  O  ', ' C 101  HOH  O  ', -0.654, (18.686, 11.036, 3.24)), (' A 194  ILE HD12', ' A 198  GLU  HG3', -0.648, (-15.277, 12.223, 44.195)), (' A  64  THR HG22', ' A  68  LYS  HD2', -0.633, (27.561, 2.701, 10.562)), (' A  23  ILE HD12', ' B  54  LEU  HB3', -0.628, (16.12, 9.126, 21.123)), (' A 253  GLU  O  ', ' A 256  ARG  HG2', -0.619, (-24.462, 5.547, 38.896)), (' A  72  GLN  NE2', ' A 305  HOH  O  ', -0.578, (30.482, 14.957, 11.318)), (' A 152  VAL HG11', ' C   8  LEU HD21', -0.566, (16.232, 16.005, 0.787)), (' A 238  ASP  O  ', ' A 239  ARG  HB2', -0.552, (4.358, -6.937, 22.544)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.551, (8.867, 18.452, 13.816)), (' A 147  LEU HD23', ' A 152  VAL HG21', -0.529, (17.692, 18.32, 0.425)), (' A  97  ARG  HD2', ' A 116  TYR  CZ ', -0.527, (14.734, 15.4, 7.174)), (' A 204  TRP  CZ2', ' B  99  MET  HA ', -0.526, (-4.617, 2.664, 37.378)), (' A 190  THR  OG1', ' A 192  HIS  HE1', -0.518, (-9.441, 1.679, 39.653)), (' A  71  THR  O  ', ' A  75  ARG  HG3', -0.514, (26.258, 14.661, 13.146)), (' B  94  LYS  HB3', ' B  94  LYS  NZ ', -0.512, (5.517, 5.574, 46.342)), (' A 204  TRP  HZ2', ' B  99  MET  HA ', -0.511, (-4.908, 2.622, 37.708)), (' A  77  SER  O  ', ' A  81  LEU  HG ', -0.507, (20.77, 23.33, 11.006)), (' A  10  THR  HB ', ' A  23  ILE HD13', -0.5, (17.09, 11.364, 18.451)), (' B  87  LEU  O  ', ' B 101  HOH  O  ', -0.494, (14.105, 20.743, 36.774)), (' A  23  ILE  CD1', ' B  54  LEU  HB3', -0.489, (16.065, 9.463, 20.595)), (' A 129  ASP  O  ', ' A 131  ARG  HG3', -0.48, (5.207, 15.52, -6.063)), (' B  27  VAL HG11', ' B  35  ILE HD13', -0.478, (11.28, 12.172, 30.778)), (' C   5  LEU  O  ', ' C   8  LEU HD12', -0.476, (19.104, 12.149, 2.534)), (' A 115  GLN  HB3', ' A 125  ALA  CB ', -0.468, (7.501, 18.254, 6.666)), (' A 192  HIS  NE2', ' B  98  ASP  HB3', -0.458, (-7.073, 1.847, 42.075)), (' B  24  ASN  HB3', ' B  65  LEU HD11', -0.457, (7.248, 1.432, 31.219)), (' A   6  ARG  NH1', ' A 102  ASP  OD1', -0.453, (3.093, 6.673, 7.41)), (' A 194  ILE  H  ', ' A 199  ALA  HA ', -0.452, (-14.534, 8.401, 45.595)), (' A 155  GLN  HB3', ' C   5  LEU HD11', -0.452, (17.343, 10.741, -2.98)), (' B  27  VAL HG11', ' B  35  ILE  CD1', -0.45, (10.768, 12.208, 31.101)), (' B  75  LYS  HB3', ' B  75  LYS  HE2', -0.448, (6.724, -3.587, 54.616)), (' A  49  ALA  HA ', ' A 239  ARG  NH2', -0.447, (10.724, -7.092, 18.174)), (' A 238  ASP  O  ', ' A 239  ARG  CB ', -0.447, (4.494, -6.653, 22.627)), (' A 168  LEU  O  ', ' A 172  LEU  HG ', -0.442, (5.077, -4.52, 5.456)), (' A  50  PRO  HD2', ' A 178  LYS  NZ ', -0.44, (8.696, -8.766, 16.634)), (' A 201  LEU  HB2', ' A 247  VAL HG23', -0.439, (-16.557, 6.517, 36.844)), (' A 152  VAL  CG1', ' C   8  LEU HD21', -0.432, (16.346, 15.794, 0.699)), (' A 219  ARG  HA ', ' A 220  ASP  HA ', -0.428, (-24.972, 5.212, 32.002)), (' A  26  GLY  HA3', ' A  34  VAL HG12', -0.428, (13.745, 1.141, 12.738)), (' A  89  GLU  H  ', ' A  89  GLU  HG2', -0.428, (27.746, 30.207, 20.31)), (' A 203  CYS  HB2', ' A 217  TRP  CZ2', -0.428, (-14.537, 3.01, 33.476)), (' A 139  ALA  O  ', ' A 142  ILE  HB ', -0.412, (17.698, 29.095, 5.51)), (' A 195  SER  HB2', ' A 196  ASP  H  ', -0.41, (-16.374, 13.02, 51.338)), (' A 117  ALA  HB2', ' B  60  TRP  CD2', -0.407, (9.025, 18.358, 14.317)), (' A 218  GLN  HG3', ' A 223  ASP  OD1', -0.407, (-20.488, 7.257, 26.78)), (' A  35  ARG  HD3', ' A  48  ARG  NH2', -0.404, (18.647, -0.627, 20.888)), (' A 218  GLN  O  ', ' A 257  TYR  HA ', -0.4, (-22.441, 5.464, 32.998))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
