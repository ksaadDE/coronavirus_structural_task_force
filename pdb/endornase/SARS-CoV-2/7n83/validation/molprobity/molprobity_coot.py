# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  28 ', 'ASN', 0.02733684575502908, (-0.5920000000000323, -81.428, 32.013)), ('B', '  28 ', 'ASN', 0.026747787772605797, (73.029, -38.558, -17.134999999999994))]
data['omega'] = []
data['rota'] = [('A', '  28 ', 'ASN', 0.17976754849663917, (-0.5920000000000323, -81.428, 32.013)), ('A', ' 188 ', 'GLN', 0.0, (42.65699999999997, -79.22499999999997, 12.763)), ('A', ' 226 ', 'LYS', 0.26175139227800687, (31.008000000000006, -99.31099999999998, -14.271)), ('A', ' 260 ', 'GLU', 0.12372619563351228, (7.16999999999998, -97.89399999999998, -6.7639999999999985)), ('A', ' 319 ', 'LYS', 0.025643840106459065, (36.571999999999996, -95.95499999999997, 8.553)), ('A', ' 326 ', 'GLU', 0.2544737664624477, (34.548999999999985, -91.41499999999998, 12.007999999999996)), ('B', '  28 ', 'ASN', 0.19065584221521378, (73.029, -38.558, -17.134999999999994)), ('B', '  34 ', 'LYS', 0.0, (71.332, -22.87099999999999, -12.660999999999994)), ('B', ' 149 ', 'LYS', 0.1240896910042809, (26.959999999999994, -43.039, 4.304999999999997)), ('B', ' 260 ', 'GLU', 0.12001873683880827, (73.963, -56.30099999999999, 21.717)), ('B', ' 345 ', 'LEU', 0.00038614297946668405, (57.525, -64.189, 0.6999999999999996))]
data['cbeta'] = []
data['probe'] = [(' B 330  MET  HG2', ' B 344  LYS  HD2', -0.753, (56.35, -72.2, 4.061)), (' A 188  GLN  O  ', ' A 405  WNM  H8 ', -0.689, (41.564, -82.271, 13.281)), (' A 127  VAL  HB ', ' A 130  GLN  HG3', -0.61, (27.964, -64.336, 18.9)), (' B 200  LEU HD11', ' B 254  LEU  HB3', -0.598, (66.768, -56.814, 13.15)), (' A 200  LEU HD11', ' A 254  LEU  HB3', -0.592, (14.168, -94.506, 1.165)), (' B 316  LYS  NZ ', ' B 501  HOH  O  ', -0.577, (46.347, -75.525, 12.234)), (' B 127  VAL  HB ', ' B 130  GLN  HG3', -0.543, (40.017, -36.071, -3.476)), (' A  12  LYS  HE3', ' A  18  GLN  HG3', -0.516, (8.368, -57.519, 20.454)), (' A 212  ASP  O  ', ' A 216  LEU  HB2', -0.507, (19.389, -94.514, -14.312)), (' B  82  ASN HD22', ' B 403  WNM  H13', -0.505, (43.611, -34.457, -11.392)), (' A  82  ASN HD22', ' A 404  WNM  H13', -0.504, (23.34, -64.728, 26.445)), (' B 246  GLY  HA2', ' B 401  CIT  O4 ', -0.489, (67.373, -70.83, 11.58)), (' B  12  LYS  HE3', ' B  18  GLN  HG3', -0.487, (54.339, -21.253, -5.603)), (' B  57  LEU HD11', ' B 105  THR HG21', -0.48, (54.905, -40.859, -14.853)), (' A  71  ILE HD13', ' A 323  ASP  HB3', -0.477, (28.222, -83.855, 10.255)), (' B  71  ILE HD13', ' B 323  ASP  HB3', -0.476, (48.885, -53.828, 4.225)), (' A 266  GLU  HB3', ' A 279  PHE  HB3', -0.455, (11.342, -100.27, 13.006)), (' A  57  LEU HD11', ' A 105  THR HG21', -0.453, (16.845, -75.321, 30.053)), (' B 269  ILE HD13', ' B 402  WNM  O08', -0.443, (60.851, -60.589, -4.386)), (' A  27  ILE  CG2', ' A  32  TYR  CE1', -0.429, (-3.725, -76.841, 29.798)), (' A  67  PRO  HB3', ' A 178  TYR  OH ', -0.424, (26.834, -76.753, 12.073)), (' B 266  GLU  HB3', ' B 279  PHE  HB3', -0.422, (71.641, -60.488, 1.822)), (' B  84  VAL HG23', ' B 101  VAL HG11', -0.417, (51.138, -37.556, -10.613)), (' B  67  PRO  HB3', ' B 178  TYR  OH ', -0.411, (46.704, -47.42, 2.942)), (' B 148  VAL HG11', ' B 151  LEU HD12', -0.411, (31.631, -44.738, 1.101)), (' A  27  ILE HG23', ' A  32  TYR  HE1', -0.403, (-3.453, -77.535, 30.025))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
