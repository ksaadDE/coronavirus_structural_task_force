# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('E', ' 146 ', 'PRO', None, (217.022, 141.33, 276.786))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' C  46  SER  HA ', ' C 279  TYR  O  ', -0.637, (231.527, 183.503, 176.685)), (' A  51  THR  O  ', ' A 274  THR  HA ', -0.631, (188.575, 227.224, 186.297)), (' A  46  SER  HA ', ' A 279  TYR  O  ', -0.629, (199.167, 235.586, 176.525)), (' B 105  ILE  HB ', ' B 239  GLN  HB2', -0.607, (171.047, 160.202, 208.242)), (' C 901  GLN HE21', ' C 905  ARG HH21', -0.579, (207.798, 185.547, 131.777)), (' C 821  LEU HD11', ' C 939  SER  HB2', -0.572, (228.003, 183.976, 147.857)), (' B 289  VAL HG13', ' B 297  SER  HB3', -0.567, (182.079, 170.598, 177.444)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.563, (257.15, 197.175, 193.705)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.557, (171.281, 216.551, 149.017)), (' C 659  SER  HB3', ' C 698  SER  HB3', -0.554, (229.14, 217.316, 149.466)), (' E 261  CYS  HB2', ' E 488  VAL  HB ', -0.553, (198.337, 149.203, 296.276)), (' A 699  LEU HD11', ' B 869  MET  HB3', -0.55, (174.689, 208.495, 150.81)), (' C 201  PHE  HB3', ' C 229  LEU  HB2', -0.546, (236.016, 187.58, 205.526)), (' A 278  LYS  HE3', ' A 287  ASP  HB2', -0.544, (191.443, 237.155, 176.222)), (' E 482  ARG  NH1', ' E 608  THR  O  ', -0.543, (198.527, 152.237, 300.997)), (' C  26  PRO  HB3', ' C  65  PHE  HE1', -0.541, (253.521, 204.668, 198.939)), (' C 289  VAL HG13', ' C 297  SER  HB3', -0.536, (234.418, 199.018, 177.54)), (' E 260  GLY  HA3', ' E 612  PRO  HD3', -0.535, (194.867, 146.55, 298.804)), (' A 289  VAL HG13', ' A 297  SER  HB3', -0.531, (183.703, 230.182, 177.578)), (' B  22  THR  O  ', ' B  78  ARG  NH1', -0.529, (172.11, 143.023, 201.298)), (' A  22  THR  O  ', ' A  78  ARG  NH1', -0.529, (164.006, 252.4, 200.469)), (' C 105  ILE  O  ', ' C 238  PHE  HA ', -0.521, (244.75, 196.421, 207.593)), (' A  78  ARG  NH2', ' A  80  ASP  OD1', -0.517, (167.574, 250.587, 199.492)), (' A 821  LEU HD11', ' A 939  SER  HB3', -0.516, (200.276, 231.72, 147.715)), (' E 321  PRO  O  ', ' E 380  GLN  NE2', -0.516, (205.181, 159.441, 252.121)), (' C 193  VAL HG23', ' C 223  LEU HD22', -0.515, (241.081, 191.024, 193.138)), (' C 599  THR  HB ', ' C 608  VAL HG12', -0.514, (234.205, 205.284, 168.238)), (' B 821  LEU HD11', ' B 939  SER  HB3', -0.512, (172.694, 184.028, 148.066)), (' E 555  PHE  HA ', ' E 558  LEU  HB2', -0.512, (201.653, 167.396, 256.761)), (' E 201  ASP  OD2', ' E 219  ARG  NH1', -0.511, (210.662, 178.668, 283.26)), (' A 916  LEU HD22', ' A 923  ILE HD13', -0.509, (199.858, 219.278, 123.454)), (' E  20  THR HG23', ' E  23  GLU  H  ', -0.504, (217.922, 194.2, 259.964)), (' A 142  GLY  HA3', ' A 156  GLU  HB3', -0.502, (179.399, 261.376, 211.058)), (' B 127  VAL HG21', ' B1302  NAG  H62', -0.502, (157.069, 167.793, 211.959)), (' C 762  GLN  OE1', ' C 765  ARG  NH1', -0.502, (190.25, 188.699, 174.899)), (' A 294  ASP  N  ', ' A 294  ASP  OD1', -0.501, (178.502, 229.531, 178.003)), (' B  94  SER  HB2', ' B 190  ARG  HB2', -0.501, (163.655, 161.037, 194.421)), (' A 994  ASP  OD2', ' C 995  ARG  NH2', -0.501, (206.965, 200.459, 194.124)), (' C 127  VAL HG21', ' C1302  NAG  H62', -0.5, (247.944, 180.008, 213.172)), (' E 152  MET  O  ', ' E 161  ARG  NH1', -0.5, (205.733, 139.475, 284.348)), (' A1074  ASN  OD1', ' B 895  GLN  NE2', -0.499, (176.107, 211.172, 123.44)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.498, (262.124, 205.434, 202.627)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.497, (187.175, 168.423, 167.86)), (' B1048  HIS  HA ', ' B1066  THR HG22', -0.497, (190.345, 190.627, 135.219)), (' B 156  GLU  OE2', ' B 158  ARG  NH1', -0.496, (158.778, 150.194, 214.949)), (' C  78  ARG  NH2', ' C  80  ASP  OD1', -0.496, (258.629, 203.541, 201.227)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.495, (212.924, 193.072, 104.553)), (' A  48  LEU  HB3', ' A 276  LEU HD11', -0.493, (193.428, 228.522, 177.931)), (' B 675  GLN  O  ', ' B 691  SER  N  ', -0.49, (187.134, 159.351, 158.953)), (' B  78  ARG  NH2', ' B  80  ASP  OD1', -0.49, (172.249, 146.997, 200.179)), (' B 518  LEU HD23', ' B 520  ALA  H  ', -0.489, (225.675, 191.897, 214.288)), (' B 926  GLN  NE2', ' L   1  NAG  O6 ', -0.488, (182.422, 179.875, 127.299)), (' B 756  TYR  OH ', ' B 994  ASP  OD1', -0.487, (195.72, 205.421, 192.463)), (' A 143  VAL  HA ', ' A 154  GLU  HA ', -0.486, (183.052, 263.69, 208.361)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.485, (167.869, 152.0, 192.502)), (' B 125  ASN HD22', ' B 171  VAL HG13', -0.485, (155.298, 171.392, 209.059)), (' B 128  ILE HD13', ' B 170  TYR  HD2', -0.484, (161.998, 173.654, 206.289)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.483, (184.938, 166.505, 177.662)), (' B  48  LEU  HB3', ' B 276  LEU HD11', -0.482, (178.025, 179.551, 177.095)), (' C 294  ASP  N  ', ' C 294  ASP  OD1', -0.482, (236.505, 204.391, 178.226)), (' A  46  SER  CA ', ' A 279  TYR  O  ', -0.48, (199.997, 235.377, 176.66)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.475, (179.024, 226.685, 168.158)), (' A 926  GLN  NE2', ' F   1  NAG  O6 ', -0.474, (191.787, 224.902, 126.948)), (' A1143  PRO  HA ', ' A1146  ASP  HB2', -0.474, (192.936, 205.552, 90.847)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.473, (174.316, 251.715, 192.159)), (' A1040  VAL HG21', ' B1035  GLY  HA3', -0.472, (190.877, 202.926, 135.375)), (' A  93  ALA  HB3', ' A 266  TYR  HB2', -0.472, (179.062, 245.958, 191.903)), (' B 396  TYR  HB2', ' B 514  SER  HB3', -0.471, (224.346, 182.953, 225.751)), (' C1048  HIS  HA ', ' C1066  THR HG22', -0.47, (213.166, 195.957, 135.644)), (' A 540  ASN  OD1', ' A 549  THR  OG1', -0.469, (171.717, 205.629, 191.551)), (' B 193  VAL  HB ', ' B 204  TYR  HB2', -0.469, (170.825, 170.675, 194.193)), (' C  93  ALA  HB3', ' C 266  TYR  HB2', -0.469, (249.786, 195.823, 192.825)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.469, (197.099, 232.678, 190.031)), (' E 297  MET  HB3', ' E 302  TRP  HB2', -0.468, (203.719, 138.929, 255.677)), (' E 156  LEU HD11', ' E 281  LEU HD21', -0.467, (198.364, 134.759, 283.809)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.467, (225.042, 184.791, 213.474)), (' E 535  HIS  NE2', ' E 538  PRO  O  ', -0.466, (184.358, 154.937, 262.886)), (' A1035  GLY  HA3', ' C1040  VAL HG21', -0.466, (207.977, 205.845, 135.385)), (' B 426  PRO  HG2', ' B 429  PHE  HB2', -0.466, (217.238, 186.207, 229.752)), (' A 985  ASP  N  ', ' A 985  ASP  OD1', -0.465, (209.836, 210.471, 206.281)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.465, (188.113, 191.461, 104.614)), (' B 327  VAL  H  ', ' B 531  THR HG22', -0.463, (216.18, 166.859, 198.901)), (' C 125  ASN HD22', ' C 171  VAL HG13', -0.46, (246.372, 177.339, 210.224)), (' C  36  VAL HG23', ' C 222  ALA  HA ', -0.459, (240.145, 189.079, 186.269)), (' A 226  LEU  HG ', ' A 227  VAL HG23', -0.458, (195.281, 244.828, 200.245)), (' A  27  ALA  HB3', ' A  64  TRP  HB3', -0.457, (169.609, 247.336, 191.809)), (' A 128  ILE HD13', ' A 170  TYR  HD2', -0.456, (195.625, 246.13, 206.888)), (' B1029  MET  HB2', ' B1029  MET  HE2', -0.456, (186.439, 200.536, 145.938)), (' A 156  GLU  OE2', ' A 158  ARG  NH1', -0.455, (176.335, 260.235, 214.743)), (' C 566  GLY  HA3', ' C 575  ALA  HB3', -0.455, (208.497, 233.607, 185.519)), (' B1074  ASN  OD1', ' C 895  GLN  NE2', -0.454, (202.081, 173.114, 123.824)), (' E 610  TRP  HE3', ' E 614  ALA  HB3', -0.454, (201.155, 146.143, 304.659)), (' B  40  ASP  N  ', ' B  40  ASP  OD1', -0.453, (172.913, 180.557, 190.156)), (' B1040  VAL HG21', ' C1035  GLY  HA3', -0.453, (201.665, 189.948, 135.582)), (' C 566  GLY  O  ', ' C 573  THR  HA ', -0.453, (207.839, 229.035, 186.311)), (' E 455  MET  HG2', ' E 480  MET  HE2', -0.45, (202.796, 161.053, 291.495)), (' B 566  GLY  N  ', ' B 575  ALA  O  ', -0.45, (224.22, 176.777, 187.274)), (' B 412  PRO  HB3', ' B 427  ASP  HA ', -0.449, (213.096, 186.434, 232.488)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.447, (199.785, 220.258, 136.029)), (' C  46  SER  CA ', ' C 279  TYR  O  ', -0.446, (231.151, 182.81, 176.775)), (' A 229  LEU  HG ', ' A 231  ILE HG23', -0.446, (193.047, 238.752, 208.357)), (' B 176  LEU HD22', ' B 190  ARG  HG2', -0.445, (160.809, 163.445, 196.357)), (' B 598  ILE HG23', ' B 664  ILE HG21', -0.444, (192.089, 170.766, 163.224)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.444, (198.962, 213.826, 103.935)), (' B 192  PHE  HA ', ' B 204  TYR  O  ', -0.443, (167.855, 168.388, 195.23)), (' A1048  HIS  HA ', ' A1066  THR HG22', -0.442, (196.94, 212.915, 135.332)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.441, (197.181, 222.561, 143.286)), (' B 914  ASN  ND2', ' B1111  GLU  OE2', -0.441, (188.934, 187.702, 114.952)), (' A 598  ILE HG23', ' A 664  ILE HG21', -0.44, (178.899, 221.211, 163.067)), (' C 276  LEU  HB3', ' C 289  VAL  HB ', -0.44, (232.586, 195.457, 178.694)), (' B 189  LEU  HB3', ' B 208  THR  HB ', -0.44, (162.383, 162.702, 187.556)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.439, (217.817, 189.539, 136.42)), (' B  97  LYS  HG2', ' B 186  PHE  HD1', -0.438, (158.951, 152.329, 192.124)), (' C 537  LYS  HB3', ' C 537  LYS  HE2', -0.436, (227.679, 228.102, 188.44)), (' C 724  THR HG23', ' C 934  ILE HD12', -0.435, (221.399, 190.779, 143.488)), (' B  38  TYR  HB2', ' B 225  PRO  HD3', -0.435, (168.228, 176.625, 190.811)), (' E 252  TYR  HB3', ' E 255  TYR  HD2', -0.434, (198.682, 136.266, 293.907)), (' C 191  GLU  O  ', ' C 205  SER  HA ', -0.433, (243.83, 187.253, 194.507)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.433, (182.609, 189.619, 136.551)), (' A1107  ARG HH22', ' B 907  ASN HD22', -0.431, (190.729, 199.02, 120.382)), (' B 175  PHE  O  ', ' B 207  HIS  NE2', -0.43, (158.753, 167.434, 195.649)), (' A 103  GLY  HA3', ' A 119  ILE  O  ', -0.428, (185.941, 249.2, 206.495)), (' B 164  ASN  OD1', ' B 165  ASN  N  ', -0.426, (169.589, 169.447, 223.08)), (' C  39  PRO  HG2', ' C  51  THR HG21', -0.425, (230.33, 190.942, 187.79)), (' A 132  GLU  OE1', ' A 165  ASN  ND2', -0.424, (186.706, 238.303, 223.817)), (' C 192  PHE  HA ', ' C 204  TYR  O  ', -0.422, (242.469, 188.496, 196.048)), (' A  36  VAL HG13', ' A 222  ALA  HA ', -0.421, (189.992, 240.632, 185.932)), (' C 722  VAL  HA ', ' C1064  HIS  O  ', -0.421, (218.023, 192.382, 138.088)), (' C 866  THR  H  ', ' C 869  MET  HE3', -0.42, (206.508, 173.686, 155.43)), (' B 659  SER  HB3', ' B 698  SER  HB3', -0.42, (200.236, 165.999, 149.482)), (' B 126  VAL HG23', ' B 174  PRO  HA ', -0.419, (156.791, 168.055, 202.998)), (' C 934  ILE  HA ', ' C 934  ILE HD13', -0.418, (224.197, 190.493, 142.946)), (' C  52  GLN  OE1', ' C 274  THR  OG1', -0.418, (227.088, 200.168, 186.488)), (' A  52  GLN  HB2', ' A 274  THR HG22', -0.418, (188.36, 224.174, 187.355)), (' B 996  LEU  HA ', ' B 996  LEU HD23', -0.417, (189.738, 198.164, 191.41)), (' E 320  LEU HD11', ' E 554  LEU HD23', -0.417, (199.778, 162.495, 256.609)), (' C 885  GLY  HA2', ' C 901  GLN  NE2', -0.417, (207.462, 183.886, 131.127)), (' C 742  ILE  O  ', ' C1000  ARG  NH1', -0.416, (206.184, 185.632, 189.067)), (' B 139  PRO  HB3', ' B 159  VAL  HA ', -0.416, (166.184, 157.352, 213.16)), (' B 722  VAL  HA ', ' B1064  HIS  O  ', -0.415, (185.121, 188.366, 138.174)), (' B 316  SER  OG ', ' B 317  ASN  N  ', -0.415, (195.69, 173.987, 179.202)), (' B 384  PRO  HA ', ' B 387  LEU HD12', -0.415, (214.352, 173.816, 221.021)), (' B 669  GLY  HA2', ' B 697  MET  HE3', -0.415, (203.083, 171.873, 156.556)), (' C 132  GLU  OE1', ' C 165  ASN  ND2', -0.414, (237.343, 192.241, 224.47)), (' A 195  LYS  O  ', ' A 201  PHE  HA ', -0.414, (189.836, 235.559, 202.862)), (' C  27  ALA  HB3', ' C  64  TRP  HB3', -0.414, (255.455, 203.302, 193.417)), (' B 453  TYR  HE2', ' B 455  LEU HD13', -0.414, (224.529, 180.518, 250.579)), (' B 310  LYS  HG3', ' B 600  PRO  HA ', -0.413, (186.834, 170.693, 161.23)), (' B 360  ASN HD22', ' C 168  PHE  HD1', -0.412, (235.229, 181.832, 213.355)), (' B 790  LYS  HB3', ' B 790  LYS  HE2', -0.412, (168.955, 205.979, 137.501)), (' B 724  THR HG23', ' B 934  ILE HD12', -0.411, (182.096, 185.775, 143.557)), (' B  93  ALA  HB3', ' B 266  TYR  HB2', -0.41, (170.418, 158.962, 192.043)), (' A  48  LEU HD23', ' A 276  LEU HD21', -0.41, (191.867, 229.55, 176.256)), (' A  97  LYS  HG2', ' A 186  PHE  HD1', -0.409, (179.223, 258.764, 191.894)), (' B 418  ILE  HA ', ' B 422  ASN  HB2', -0.409, (223.324, 181.952, 242.73)), (' E 245  ARG  NH2', ' E 605  GLY  O  ', -0.408, (189.827, 149.931, 293.284)), (' C  97  LYS  HG2', ' C 186  PHE  HD1', -0.408, (260.845, 189.549, 193.613)), (' E 528  ALA  HB2', ' E 574  VAL HG12', -0.407, (191.786, 167.237, 265.071)), (' A 986  PRO  HA ', ' A 989  ALA  HB3', -0.407, (212.204, 208.351, 202.398)), (' C 717  ASN  ND2', ' C1071  GLN  OE1', -0.407, (226.94, 198.865, 124.202)), (' A 318  PHE  O  ', ' A 592  PHE  HA ', -0.406, (173.958, 210.879, 179.845)), (' E 360  MET  HE1', ' E 372  ALA  HA ', -0.406, (208.627, 150.27, 261.486)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.406, (232.422, 203.213, 161.603)), (' C 127  VAL HG22', ' C 171  VAL HG22', -0.406, (245.737, 179.365, 211.757)), (' A 722  VAL  HA ', ' A1064  HIS  O  ', -0.405, (197.649, 218.884, 137.924)), (' B 907  ASN HD21', ' B 913  GLN  HG3', -0.405, (189.571, 196.772, 119.461)), (' B 366  SER  OG ', ' B 388  ASN  ND2', -0.404, (217.337, 168.51, 215.185)), (' A  34  ARG  NH2', ' A 221  SER  OG ', -0.402, (186.852, 245.861, 185.5)), (' A 756  TYR  OH ', ' A 994  ASP  OD2', -0.402, (207.404, 201.23, 192.856)), (' A 277  LEU HD12', ' A 285  ILE HD13', -0.402, (192.719, 235.941, 184.199)), (' C  94  SER  HB3', ' C 190  ARG  HB2', -0.402, (251.123, 188.847, 195.602)), (' C 281  GLU  HB3', ' C1305  NAG  H82', -0.401, (235.52, 178.323, 175.015)), (' C  64  TRP  HH2', ' C 214  ARG  HG2', -0.4, (258.966, 199.414, 189.051)), (' A 996  LEU  HA ', ' A 996  LEU HD23', -0.4, (203.902, 209.998, 190.996)), (' A 913  GLN  H  ', ' A 913  GLN  HG2', -0.4, (200.993, 211.201, 117.646))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
