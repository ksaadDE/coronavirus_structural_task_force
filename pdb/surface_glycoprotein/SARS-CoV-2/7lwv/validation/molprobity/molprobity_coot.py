# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 331 ', 'ASN', 0.046915587395851936, (191.933, 186.235, 124.009)), ('A', ' 600 ', 'PRO', 0.04242844467352256, (155.195, 194.531, 171.052)), ('A', '1041 ', 'ASP', 0.04591778656573424, (160.516, 171.441, 193.536)), ('A', '1074 ', 'ASN', 0.008065564855188922, (169.38, 185.98, 213.252)), ('A', '1075 ', 'PHE', 0.009465339658566189, (170.655, 184.384, 216.56)), ('B', ' 536 ', 'ASN', 0.042875251029448246, (175.224, 123.084, 148.07299999999998)), ('B', ' 744 ', 'GLY', 0.03277650684596675, (169.654, 179.54, 145.99399999999997)), ('C', '  97 ', 'LYS', 0.049425270410433604, (125.611, 107.516, 140.642)), ('C', ' 112 ', 'SER', 0.012512370974076158, (129.946, 126.749, 112.94))]
data['omega'] = []
data['rota'] = [('A', ' 391 ', 'CYS', 0.11716846702572833, (182.622, 177.24699999999996, 126.22199999999997)), ('A', ' 602 ', 'THR', 0.004284127652929962, (149.643, 195.287, 167.76099999999997)), ('A', ' 603 ', 'ASN', 0.013593024469023718, (147.109, 196.784, 170.234)), ('B', '  81 ', 'ASN', 0.2079080202974227, (216.71999999999997, 148.166, 127.80399999999997)), ('B', ' 124 ', 'THR', 0.0027198671887163073, (217.12799999999996, 172.214, 125.18899999999998)), ('B', ' 125 ', 'ASN', 0.0013367089878597535, (214.322, 170.649, 123.057)), ('B', ' 273 ', 'ARG', 0.00040515277875056863, (192.047, 152.945, 142.822)), ('B', ' 274 ', 'THR', 0.23432430861932868, (190.316, 155.317, 145.299)), ('B', '1100 ', 'THR', 0.0, (181.63199999999995, 138.907, 225.614)), ('C', ' 391 ', 'CYS', 0.12610033254486072, (131.839, 174.239, 128.922)), ('C', ' 619 ', 'GLU', 0.1709171411958693, (122.06700000000005, 157.32699999999994, 156.53999999999996)), ('C', ' 716 ', 'ILE', 0.2384999668587929, (144.039, 146.026, 213.374))]
data['cbeta'] = [('B', ' 200 ', 'TYR', ' ', 0.25713899203384355, (194.433, 161.469, 123.84799999999998)), ('B', ' 487 ', 'ASN', ' ', 0.2681571115105147, (143.938, 136.044, 72.023)), ('C', ' 130 ', 'VAL', ' ', 0.29689904343456236, (138.911, 124.517, 120.17099999999999)), ('C', ' 198 ', 'ASP', ' ', 0.355571770556081, (145.108, 137.033, 129.99)), ('C', ' 487 ', 'ASN', ' ', 0.25945837870892746, (172.922, 194.66, 105.929)), ('C', '1041 ', 'ASP', ' ', 0.253493024442372, (151.373, 154.246, 193.32399999999998))]
data['probe'] = [(' C1081  ILE HD12', ' C1135  ASN  HB3', -0.527, (144.89, 162.333, 228.712)), (' B 125  ASN  HA ', ' B 125  ASN HD22', -0.463, (213.197, 171.974, 122.849)), (' C 599  THR HG22', ' C 601  GLY  H  ', -0.458, (134.12, 138.325, 169.726)), (' A1032  CYS  CB ', ' A1043  CYS  HG ', -0.457, (152.826, 166.074, 194.227)), (' A1028  LYS  O  ', ' A1032  CYS  HB3', -0.419, (151.132, 164.615, 192.899)), (' C1032  CYS  CB ', ' C1043  CYS  SG ', -0.413, (160.274, 150.579, 194.184)), (' C 716  ILE  H  ', ' C 716  ILE HG13', -0.408, (142.055, 146.842, 212.014))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
