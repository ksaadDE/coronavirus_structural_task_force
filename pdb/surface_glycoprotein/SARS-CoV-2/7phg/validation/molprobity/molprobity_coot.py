# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' H  52  VAL  O  ', ' H  71  ARG  NH1', -0.918, (220.686, 249.09, 276.083)), (' A 473  TYR  OH ', ' H 100  GLY  O  ', -0.862, (208.766, 245.507, 270.833)), (' L  86  TYR  O  ', ' L 102  THR  OG1', -0.854, (203.17, 250.329, 298.944)), (' A 376  THR  OG1', ' A 435  ALA  O  ', -0.798, (234.516, 242.069, 254.573)), (' L  26  SER  OG ', ' L  27  GLN  OE1', -0.777, (205.746, 265.124, 291.061)), (' L  13  LEU HD13', ' L  19  ALA  HB1', -0.745, (193.338, 247.351, 302.368)), (' L  76  SER  O  ', ' L  77  ARG  NE ', -0.733, (185.12, 242.067, 299.982)), (' H  39  GLN  NE2', ' H  43  GLN  O  ', -0.721, (213.54, 249.265, 301.935)), (' L  80  PRO  HA ', ' L 106  ILE HG21', -0.721, (195.168, 238.493, 304.615)), (' L  65  SER  HG ', ' L  72  THR  HG1', -0.72, (190.897, 252.774, 292.776)), (' L   6  GLN  HG3', ' L 102  THR HG22', -0.704, (202.171, 254.699, 301.098)), (' A 488  CYS  SG ', ' L  32  TYR  OH ', -0.702, (205.403, 254.024, 276.413)), (' A 453  TYR  N  ', ' A 493  GLN  O  ', -0.669, (223.164, 252.675, 266.12)), (' L   6  GLN  CG ', ' L 102  THR HG22', -0.666, (202.345, 255.103, 300.632)), (' L  78  LEU HD21', ' L 106  ILE HD12', -0.657, (194.454, 241.801, 303.884)), (' H   1  GLN  O  ', ' H   3  GLN  NE2', -0.65, (211.224, 230.127, 284.44)), (' A 454  ARG  NE ', ' A 467  ASP  OD2', -0.648, (214.121, 251.121, 261.723)), (' L  27  GLN  N  ', ' L  27  GLN  OE1', -0.638, (203.638, 265.755, 290.677)), (' H  94  ALA  HB3', ' H 102  LEU HD11', -0.629, (213.074, 241.394, 283.254)), (' H   4  LEU  HG ', ' H 102  LEU HD13', -0.626, (214.366, 239.045, 285.445)), (' H  38  ARG  NH1', ' H  86  ASP  OD1', -0.602, (223.684, 252.938, 298.423)), (' A 498  GLN  N  ', ' A 501  ASN  OD1', -0.599, (235.627, 251.848, 268.954)), (' A 439  ASN  O  ', ' A 443  SER  OG ', -0.593, (238.195, 253.403, 262.286)), (' L  27  GLN  O  ', ' L  28  VAL HG13', -0.58, (202.564, 263.233, 288.081)), (' A 393  THR HG21', ' A 520  ALA  HB3', -0.58, (214.969, 243.928, 234.819)), (' H  56  ASN  OD1', ' H  57  THR  N  ', -0.578, (220.278, 254.923, 279.001)), (' H 102  LEU  O  ', ' H 102  LEU HD12', -0.575, (211.801, 240.994, 285.783)), (' H  48  ILE HD13', ' H  90  TYR  CD2', -0.574, (222.186, 247.526, 293.817)), (' H  93  ALA  HB2', ' H 103  TRP  CZ3', -0.573, (212.557, 244.913, 289.953)), (' A 405  ASP  OD1', ' A 406  GLU  N  ', -0.57, (228.766, 242.414, 265.261)), (' H 111  VAL  O  ', ' H 111  VAL HG23', -0.568, (230.402, 248.263, 304.712)), (' L  10  THR HG22', ' L 103  LYS  HD2', -0.562, (203.413, 248.538, 308.463)), (' L   4  LEU  HG ', ' L  97  THR HG21', -0.556, (206.073, 258.567, 293.586)), (' H  13  LYS  O  ', ' H  16  THR HG22', -0.554, (234.613, 248.707, 299.058)), (' L  87  TYR  CE2', ' L  98  PHE  HA ', -0.554, (208.201, 253.655, 294.532)), (' H  48  ILE HG21', ' H  80  MET  SD ', -0.552, (222.959, 249.033, 290.9)), (' L  16  GLY  O  ', ' L  77  ARG  NH1', -0.549, (183.934, 241.959, 303.681)), (' L   4  LEU HD13', ' L  88  CYS  SG ', -0.544, (203.712, 255.683, 293.793)), (' H  48  ILE HD13', ' H  90  TYR  HD2', -0.543, (222.465, 247.763, 293.594)), (' L  85  VAL  O  ', ' L  85  VAL HG23', -0.538, (206.27, 245.861, 299.601)), (' H  28  THR  O  ', ' H  28  THR HG23', -0.537, (213.749, 239.497, 275.316)), (' H  45  LEU HD12', ' L  98  PHE  HB3', -0.537, (211.543, 251.196, 294.648)), (' A 455  LEU HD21', ' H  53  GLY  O  ', -0.531, (220.361, 248.962, 270.954)), (' L  34  GLY  O  ', ' L  89  GLN  N  ', -0.527, (204.224, 251.496, 291.209)), (' L   9  GLY  O  ', ' L  10  THR  OG1', -0.523, (201.267, 251.726, 309.609)), (' A 452  LEU HD23', ' A 494  SER  HA ', -0.522, (224.857, 255.328, 267.059)), (' A 403  ARG  NH2', ' A 406  GLU  OE2', -0.517, (227.128, 244.377, 267.087)), (' A 392  PHE  O  ', ' A 524  VAL HG22', -0.513, (222.98, 243.874, 235.232)), (' A 403  ARG  NH1', ' A 405  ASP  OD2', -0.509, (229.268, 243.131, 268.354)), (' H  87  THR  O  ', ' H  87  THR HG23', -0.507, (223.3, 248.004, 304.333)), (' H  41  ARG  CZ ', ' H  41  ARG  HA ', -0.507, (216.478, 244.752, 304.662)), (' A 332  ILE  O  ', ' A 333  THR  OG1', -0.498, (234.85, 249.957, 228.63)), (' H   6  GLN  OE1', ' H 106  GLY  N  ', -0.497, (218.252, 238.837, 293.254)), (' H  45  LEU HD11', ' L  36  TYR  OH ', -0.492, (210.865, 249.073, 293.65)), (' L  11  LEU HD21', ' L 104  VAL HG22', -0.489, (198.169, 249.068, 302.886)), (' H   1  GLN  C  ', ' H   2  MET  HE2', -0.483, (209.567, 231.48, 283.66)), (' L  45  ARG HH22', ' L  58  ILE HD11', -0.48, (200.063, 237.515, 295.165)), (' A 472  ILE HD12', ' A 480  CYS  SG ', -0.478, (206.654, 256.933, 273.511)), (' A 524  VAL  O  ', ' A 524  VAL HG23', -0.476, (225.421, 243.648, 234.429)), (' H  24  ALA  HB3', ' H  29  PHE  CD2', -0.476, (218.365, 238.868, 280.522)), (' H  37  VAL  HB ', ' H  45  LEU HD13', -0.475, (214.102, 249.316, 293.935)), (' L  13  LEU HD12', ' L 104  VAL HG13', -0.472, (195.957, 246.871, 303.639)), (' A 386  LYS  HD2', ' A 386  LYS  O  ', -0.47, (231.514, 234.834, 236.008)), (' L  11  LEU  H  ', ' L  11  LEU HD23', -0.469, (198.674, 249.989, 306.5)), (' L  79  GLU  N  ', ' L  79  GLU  OE1', -0.467, (192.351, 239.065, 299.741)), (' H  47  TRP  NE1', ' L  96  TRP  HB2', -0.467, (212.935, 254.936, 288.538)), (' L  65  SER  N  ', ' L  72  THR  O  ', -0.465, (193.273, 251.288, 291.879)), (' H  66  ARG HH21', ' H  82  LEU HD12', -0.462, (226.592, 253.164, 294.397)), (' L 105  GLU  N  ', ' L 105  GLU  OE1', -0.461, (199.361, 246.106, 306.791)), (' A 441  LEU  O  ', ' A 509  ARG  NH1', -0.461, (236.11, 255.286, 256.504)), (' H  93  ALA  HB2', ' H 103  TRP  CE3', -0.456, (212.795, 243.989, 289.785)), (' A 472  ILE  O  ', ' A 472  ILE HG13', -0.455, (207.513, 255.889, 270.503)), (' A 423  TYR  CE2', ' A 425  LEU HD11', -0.45, (221.441, 243.099, 252.981)), (' A 380  TYR  OH ', ' A 425  LEU HD23', -0.449, (222.715, 238.185, 251.227)), (' L  14  SER  CA ', ' L  78  LEU HD23', -0.448, (192.252, 242.221, 305.508)), (' H   2  MET  HA ', ' H   2  MET  HE2', -0.444, (210.7, 231.878, 282.83)), (' L  93  SER  O  ', ' L  96  TRP  NE1', -0.444, (210.661, 257.908, 284.568)), (' H  44  ARG  HE ', ' L  87  TYR  HB2', -0.443, (207.511, 250.076, 298.016)), (' A 475  ALA  HB3', ' A 487  ASN HD22', -0.442, (208.57, 248.671, 276.587)), (' L   4  LEU  CD2', ' L  25  GLY  HA2', -0.441, (202.508, 260.579, 292.941)), (' H   4  LEU HD11', ' H  24  ALA  HB2', -0.441, (217.033, 238.813, 283.447)), (' A 518  LEU  H  ', ' A 518  LEU HD23', -0.439, (215.93, 241.066, 236.782)), (' A 393  THR HG21', ' A 518  LEU HD21', -0.439, (215.537, 244.029, 235.776)), (' A 365  TYR  O  ', ' A 368  LEU  HG ', -0.435, (235.74, 243.364, 241.488)), (' A 456  PHE  HB3', ' A 473  TYR  CD2', -0.434, (211.678, 249.043, 270.881)), (' H  11  VAL  O  ', ' H  11  VAL HG23', -0.432, (233.934, 241.005, 301.191)), (' A 478  THR  O  ', ' A 478  THR HG23', -0.429, (202.012, 253.104, 276.552)), (' H  39  GLN  OE1', ' H  45  LEU  HB3', -0.429, (213.526, 248.278, 298.512)), (' A 382  VAL HG21', ' A 390  LEU  HG ', -0.428, (227.261, 235.209, 238.35)), (' A 404  GLY  O  ', ' A 407  VAL HG12', -0.428, (231.736, 240.171, 261.549)), (' A 438  SER  OG ', ' A 507  PRO  O  ', -0.427, (235.028, 249.511, 259.259)), (' H  84  SER  HA ', ' H 111  VAL HG21', -0.427, (229.566, 250.925, 303.554)), (' L  78  LEU HD21', ' L 106  ILE  CD1', -0.426, (195.292, 242.066, 304.4)), (' H  28  THR HG22', ' H  98  SER  HA ', -0.425, (211.111, 238.025, 274.397)), (' A 395  VAL HG23', ' A 524  VAL HG21', -0.424, (224.53, 245.212, 237.462)), (' A 393  THR HG23', ' A 521  PRO  O  ', -0.422, (217.541, 244.712, 233.085)), (' H  70  THR  N  ', ' H  79  TYR  O  ', -0.422, (225.77, 247.291, 283.952)), (' A 356  LYS  O  ', ' A 358  ILE HD12', -0.422, (223.461, 250.882, 242.438)), (' H  10  GLU  N  ', ' H  10  GLU  OE1', -0.421, (227.254, 240.147, 297.339)), (' H  39  GLN  O  ', ' H  89  VAL HG12', -0.42, (217.917, 244.788, 300.142)), (' A 470  THR  O  ', ' A 470  THR HG23', -0.419, (212.26, 259.114, 264.523)), (' H  39  GLN  OE1', ' H  45  LEU  N  ', -0.419, (212.888, 249.315, 299.48)), (' H  41  ARG  HA ', ' H  41  ARG  NE ', -0.416, (216.423, 244.409, 305.337)), (' A 419  ALA  O  ', ' A 424  LYS  NZ ', -0.414, (216.06, 239.168, 259.127)), (' A 422  ASN  OD1', ' A 454  ARG  HB3', -0.413, (218.586, 249.297, 262.284)), (' A 418  ILE  O  ', ' A 419  ALA  HB3', -0.412, (220.229, 240.031, 260.17)), (' A 350  VAL HG12', ' A 452  LEU  O  ', -0.408, (222.873, 251.773, 262.778)), (' A 473  TYR  O  ', ' A 488  CYS  HA ', -0.408, (208.44, 253.056, 272.963)), (' L   6  GLN  CD ', ' L 102  THR HG22', -0.407, (203.134, 254.856, 300.752)), (' A 491  PRO  C  ', ' A 492  LEU HD22', -0.407, (216.313, 253.31, 266.578)), (' L  35  TRP  CZ3', ' L  73  LEU  HB2', -0.406, (196.552, 249.723, 294.604)), (' A 401  VAL HG21', ' A 451  TYR  CZ ', -0.404, (229.988, 254.464, 258.714)), (' H  46  GLU  HA ', ' L  98  PHE  HB2', -0.404, (213.293, 253.204, 294.857)), (' L  48  ILE HD11', ' L  51  ALA  HA ', -0.402, (195.018, 248.589, 287.261)), (' H  91  TYR  HE2', ' L  44  PRO  HD3', -0.402, (212.347, 242.939, 296.044)), (' L  36  TYR  HD2', ' L  44  PRO  HB2', -0.401, (207.668, 244.216, 294.165)), (' A 385  THR  O  ', ' A 386  LYS  HG3', -0.401, (233.064, 233.631, 238.162)), (' A 458  LYS  H  ', ' A 458  LYS  HD2', -0.401, (208.161, 248.203, 265.084))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
