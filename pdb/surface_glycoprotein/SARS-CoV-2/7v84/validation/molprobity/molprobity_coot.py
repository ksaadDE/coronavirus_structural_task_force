# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.779, (198.913, 196.063, 225.883)), (' F 177  ARG  HB2', ' F 498  CYS  HB2', -0.679, (209.889, 189.92, 138.1)), (' F 293  VAL HG22', ' F 366  MET  HE2', -0.627, (239.944, 189.445, 171.049)), (' F 271  TRP  NE1', ' F 502  SER  O  ', -0.622, (217.808, 189.052, 146.005)), (' F 161  ARG  NH1', ' F 265  HIS  O  ', -0.611, (231.598, 187.865, 143.764)), (' F 581  VAL HG23', ' F 584  LEU HD13', -0.61, (226.678, 210.1, 158.78)), (' F 252  TYR  HE2', ' F 266  LEU HD22', -0.585, (235.422, 188.23, 140.72)), (' F 457  GLU  HG2', ' F 513  ILE HD13', -0.583, (214.316, 204.873, 152.44)), (' F 249  MET  HE1', ' F 258  PRO  HD3', -0.574, (241.878, 198.948, 133.464)), (' F 523  PHE  HB3', ' F 583  PRO  HB2', -0.565, (228.939, 209.524, 163.552)), (' D   1  NAG  H3 ', ' D   1  NAG  H83', -0.56, (187.415, 204.112, 160.147)), (' F 270  MET  HB3', ' F 271  TRP  CE3', -0.558, (221.879, 187.834, 148.344)), (' F 307  ILE HG23', ' F 369  PHE  HD1', -0.557, (232.257, 188.623, 176.189)), (' F 374  HIS  HE2', ' F 406  GLU  HG2', -0.548, (224.08, 196.613, 166.565)), (' F 284  PRO  HG3', ' F 440  LEU HD13', -0.529, (243.216, 199.664, 153.973)), (' F  38  ASP  OD1', ' F  39  LEU  N  ', -0.529, (196.082, 188.744, 179.052)), (' A 349  SER  OG ', ' A 452  LEU  O  ', -0.525, (190.647, 190.137, 195.113)), (' F 201  ASP  OD1', ' F 204  ARG  NH2', -0.524, (204.284, 209.274, 150.694)), (' A 340  GLU  OE2', ' A 356  LYS  NZ ', -0.523, (191.881, 184.644, 214.757)), (' F 152  MET  O  ', ' F 161  ARG  NH2', -0.519, (231.711, 186.123, 146.726)), (' A 353  TRP  O  ', ' A 466  ARG  NH1', -0.518, (187.145, 192.287, 204.334)), (' F 145  GLU  HB2', ' F 146  PRO  HD2', -0.514, (222.368, 177.276, 155.252)), (' A 392  PHE  HD2', ' A 515  PHE  HB3', -0.507, (196.596, 200.355, 219.694)), (' F  67  ASP  OD1', ' F  68  LYS  N  ', -0.501, (194.587, 182.631, 168.572)), (' F  77  SER  O  ', ' F  81  GLN  NE2', -0.501, (187.684, 199.62, 165.331)), (' A 492  LEU  O  ', ' A 493  GLN  NE2', -0.497, (187.003, 192.139, 185.814)), (' A 421  TYR  HA ', ' A 461  LEU HD23', -0.493, (187.423, 202.463, 195.984)), (' F 262  LEU  H  ', ' F 262  LEU HD23', -0.489, (232.27, 198.479, 139.982)), (' F 181  GLU  HG3', ' F 470  LYS  HD2', -0.487, (202.574, 194.686, 136.773)), (' A 411  ALA  HB3', ' A 414  GLN  HG3', -0.485, (201.297, 205.643, 201.508)), (' A 346  ARG  HG3', ' A 346  ARG HH11', -0.485, (191.226, 181.768, 201.838)), (' F 351  LEU  HB2', ' F 355  ASP  HB3', -0.482, (208.653, 187.935, 180.203)), (' A 457  ARG  NH1', ' A 467  ASP  OD2', -0.479, (181.916, 200.006, 196.668)), (' F 288  LYS  HG2', ' F 433  GLU  HB2', -0.471, (250.81, 197.7, 161.213)), (' F 346  PRO  HA ', ' F 359  LEU  O  ', -0.471, (220.094, 184.598, 170.913)), (' B   1  NAG  O4 ', ' B   2  NAG  H62', -0.47, (209.687, 179.896, 212.329)), (' F  85  LEU HD12', ' F  88  ILE HD12', -0.47, (191.116, 210.478, 169.562)), (' F 161  ARG HH22', ' F 268  GLY  HA2', -0.468, (232.552, 187.602, 147.166)), (' F 172  VAL  HA ', ' F 175  GLN HE22', -0.467, (212.111, 180.695, 141.932)), (' F 374  HIS  CE1', ' F 378  HIS  HE2', -0.465, (221.482, 195.353, 168.533)), (' A 518  LEU HD23', ' A 520  ALA  H  ', -0.464, (186.604, 202.571, 225.781)), (' F 331  SER  HB2', ' F 358  ILE  H  ', -0.459, (217.91, 184.664, 178.644)), (' F 116  LEU HD13', ' F 186  LEU HD23', -0.458, (197.19, 191.858, 148.184)), (' F 376  MET  HB2', ' F 376  MET  HE2', -0.456, (224.472, 191.681, 177.722)), (' F 119  ILE  HA ', ' F 122  THR HG22', -0.454, (200.902, 184.004, 147.397)), (' F 268  GLY  O  ', ' F 277  ASN  ND2', -0.451, (230.56, 187.819, 151.16)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.451, (199.049, 187.108, 200.93)), (' F 589  GLU  HB3', ' F 590  PRO  HD3', -0.448, (239.778, 210.927, 161.138)), (' F 323  MET  HB3', ' F 323  MET  HE3', -0.448, (219.867, 191.114, 184.138)), (' B   1  NAG  H62', ' B   2  NAG  H2 ', -0.445, (208.02, 178.091, 213.874)), (' F 315  PHE  CZ ', ' F 408  MET  HG3', -0.441, (225.249, 198.234, 176.003)), (' F 322  ASN  OD1', ' F 323  MET  N  ', -0.438, (222.152, 194.147, 186.746)), (' F 524  GLN  HA ', ' F 583  PRO  HG2', -0.435, (226.378, 211.725, 165.379)), (' F  20  THR  OG1', ' F  23  GLU  OE1', -0.435, (184.234, 214.515, 178.805)), (' F 439  LEU HD23', ' F 591  LEU  HB2', -0.426, (240.192, 205.34, 158.361)), (' A 392  PHE  CD1', ' A 517  LEU HD13', -0.426, (195.326, 202.724, 223.925)), (' A 529  LYS  HA ', ' A 529  LYS  HD3', -0.426, (209.717, 189.257, 230.359)), (' A 346  ARG  HG3', ' A 346  ARG  NH1', -0.419, (191.33, 181.353, 202.283)), (' F 389  PRO  O  ', ' F 393  ARG  HG3', -0.418, (203.811, 200.625, 177.465)), (' A 500  THR  OG1', ' F  41  TYR  OH ', -0.417, (206.215, 183.916, 184.1)), (' F 323  MET  HE1', ' F 379  ILE HG21', -0.417, (218.623, 192.081, 180.625)), (' F 284  PRO  HD3', ' F 440  LEU HD22', -0.417, (241.971, 197.485, 154.618)), (' F 245  ARG  NH2', ' F 603  PHE  O  ', -0.415, (239.007, 205.324, 139.892)), (' F 134  ASN  HB3', ' F 163  TRP  CZ2', -0.414, (225.564, 174.869, 139.06)), (' F 157  ASP  HB3', ' F 160  GLU  HG2', -0.411, (234.784, 180.542, 140.727)), (' A 393  THR HG23', ' A 394  ASN  OD1', -0.411, (190.139, 198.817, 221.569)), (' F 204  ARG  CZ ', ' F 223  ILE HD11', -0.409, (207.553, 209.55, 150.089)), (' F  39  LEU  HA ', ' F  39  LEU HD12', -0.408, (196.695, 186.258, 177.059)), (' F 398  GLU  HB3', ' F 514  ARG  HE ', -0.407, (213.205, 199.456, 162.41)), (' F 116  LEU  O  ', ' F 119  ILE HG22', -0.407, (198.442, 187.908, 149.626)), (' F 492  PRO  HG3', ' F 613  TYR  CZ ', -0.405, (224.351, 193.701, 128.654)), (' F 227  GLU  HA ', ' F 230  PHE  HB3', -0.404, (221.077, 211.673, 149.921)), (' F 332  MET  HB3', ' F 332  MET  HE2', -0.403, (218.117, 179.592, 175.696)), (' F  74  LYS  HB2', ' F  74  LYS  HE2', -0.403, (191.192, 189.862, 164.663)), (' F 147  GLY  O  ', ' F 151  ILE HG12', -0.402, (227.694, 177.73, 147.996)), (' F 458  LYS  O  ', ' F 462  MET  HG3', -0.402, (211.989, 205.323, 144.169))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
