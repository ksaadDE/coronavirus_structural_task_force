# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 120 ', 'PRO', None, (-25.078999999999983, -14.91, -7.9)), ('H', ' 165 ', 'PRO', None, (-41.285, -10.118, -39.488)), ('H', ' 167 ', 'PRO', None, (-35.225, -8.779, -40.451)), ('L', ' 147 ', 'PRO', None, (-20.476999999999997, 11.883, -25.787))]
data['rota'] = [('A', ' 524 ', 'VAL', 0.256367618569902, (-31.56099999999998, -2.065, 47.732)), ('H', '   3 ', 'GLN', 0.18409490564999742, (-24.594999999999995, -20.909, -12.234)), ('H', '  21 ', 'THR', 0.05937374832104192, (-37.699, -21.70299999999999, -15.836)), ('H', '  29 ', 'ILE', 0.21957080268927326, (-32.815, -24.413, -4.434)), ('H', '  66 ', 'ARG', 0.15255218577386792, (-47.968, -8.926, -7.745)), ('H', ' 213 ', 'ILE', 0.0859645807236517, (-34.88400000000001, 7.232999999999996, -53.804999999999986)), ('L', '  68 ', 'LYS', 0.19833225376405383, (-23.644999999999996, 6.355, 1.1899999999999997))]
data['cbeta'] = []
data['probe'] = [(' A 474  GLN  OE1', ' A 601  HOH  O  ', -0.809, (-53.269, -15.215, 9.263)), (' A 361  CYS  SG ', ' A 646  HOH  O  ', -0.796, (-28.784, -4.07, 44.918)), (' A 420  ASP  OD1', ' A 602  HOH  O  ', -0.795, (-46.683, 2.635, 21.48)), (' A 336  CYS  SG ', ' A 646  HOH  O  ', -0.78, (-28.615, -3.839, 44.865)), (' L 200  GLN  NE2', ' L 303  HOH  O  ', -0.73, (-37.498, 18.332, -22.038)), (' H  29  ILE HD11', ' H  75  THR  HA ', -0.727, (-35.452, -28.452, -6.31)), (' A 361  CYS  O  ', ' A 603  HOH  O  ', -0.721, (-28.55, -1.915, 47.394)), (' A 465  GLU  OE2', ' A 604  HOH  O  ', -0.674, (-49.119, -6.115, 24.971)), (' A 360  ASN  H  ', ' A 523  THR HG22', -0.663, (-32.21, -6.69, 47.803)), (' A 395  VAL HG13', ' A 524  VAL HG21', -0.662, (-32.945, -0.696, 44.103)), (' A 381  GLY  HA3', ' A 430  THR HG22', -0.658, (-40.981, 8.227, 39.086)), (' H   4  LEU HD22', ' H  24  VAL HG22', -0.652, (-30.108, -21.061, -10.567)), (' L 216  GLU  O  ', ' L 301  HOH  O  ', -0.643, (-48.194, 22.615, -42.278)), (' A 461  LEU HD22', ' A 465  GLU  HG3', -0.639, (-45.365, -6.536, 25.512)), (' A 484  GLU  OE1', ' A 605  HOH  O  ', -0.581, (-41.449, -11.11, 4.941)), (' H 189  GLN  OE1', ' H 301  HOH  O  ', -0.58, (-46.53, 2.23, -35.022)), (' H 211  THR HG23', ' H 228  ARG  HD2', -0.575, (-36.751, 10.735, -58.092)), (' H 211  THR HG23', ' H 228  ARG HH11', -0.574, (-35.742, 11.711, -57.987)), (' H  14  PRO  HD2', ' H 131  SER  HB3', -0.56, (-50.439, -11.235, -30.104)), (' A 393  THR  O  ', ' A 523  THR  HB ', -0.559, (-35.106, -5.357, 47.638)), (' H 148  SER  HB3', ' H 154  ALA  HA ', -0.543, (-31.272, 20.687, -45.13)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.537, (-33.571, -5.439, 30.793)), (' A 403  ARG  NH1', ' A 608  HOH  O  ', -0.528, (-34.772, 2.36, 11.972)), (' L 186  LEU  HB3', ' L 190  GLN  HG3', -0.522, (-52.236, 11.463, -32.273)), (' A 516  GLU  HG2', ' A 518  LEU  HG ', -0.521, (-42.263, -3.413, 43.856)), (' A 358  ILE  HB ', ' A 395  VAL HG23', -0.515, (-31.126, -3.894, 40.368)), (' A 431  GLY  HA2', ' A 515  PHE  CE2', -0.502, (-35.421, 4.625, 38.468)), (' H  68  ARG  NH2', ' H  91  ASP  OD2', -0.5, (-47.498, -8.795, -18.774)), (' L  80  LEU HD11', ' L 109  LEU HD21', -0.495, (-15.282, 4.993, -16.015)), (' L  23  THR HG23', ' L 325  HOH  O  ', -0.481, (-28.56, 11.164, -7.4)), (' L  41  LEU HD23', ' L  86  ALA  HB2', -0.478, (-19.365, -2.303, -18.644)), (' H  68  ARG HH22', ' H  91  ASP  CG ', -0.476, (-46.664, -7.894, -18.815)), (' H 137  PRO  HB3', ' H 163  TYR  HB3', -0.473, (-42.036, -3.403, -42.693)), (' H  61  TYR  O  ', ' H 302  HOH  O  ', -0.465, (-42.794, -7.705, -3.135)), (' A 517  LEU  H  ', ' A 517  LEU HD23', -0.455, (-41.9, 0.635, 43.584)), (' L 165  VAL  HA ', ' L 183  TYR  O  ', -0.455, (-42.662, 7.502, -29.44)), (' A 384  PRO  HA ', ' A 387  LEU  HG ', -0.449, (-31.171, 11.323, 40.95)), (' H   8  GLY  HA3', ' H  20  LEU HD23', -0.446, (-38.923, -18.589, -20.83)), (' L  94  ASP  O  ', ' L  99  GLY  HA2', -0.439, (-40.865, -1.574, 0.615)), (' A 395  VAL HG12', ' A 515  PHE  HD1', -0.438, (-34.079, 0.418, 41.961)), (' L 150  VAL  CG2', ' L 201  VAL HG13', -0.435, (-30.494, 13.62, -26.972)), (' H   1  GLN  NE2', ' H   3  GLN  OE1', -0.431, (-19.527, -23.334, -11.716)), (' A 368  LEU  HA ', ' A 368  LEU HD23', -0.429, (-22.106, 3.82, 36.825)), (' H  53  ILE HD13', ' H  73  VAL HG23', -0.428, (-40.207, -21.137, -5.494)), (' H   1  GLN  HG3', ' H 325  HOH  O  ', -0.418, (-19.775, -24.821, -7.894)), (' L 150  VAL HG21', ' L 201  VAL HG13', -0.417, (-30.598, 13.885, -27.47)), (' H 213  ILE HD13', ' H 228  ARG  HB2', -0.407, (-38.336, 8.264, -56.168)), (' H  20  LEU HD12', ' H  82  LEU HD23', -0.402, (-39.96, -14.819, -16.044))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
