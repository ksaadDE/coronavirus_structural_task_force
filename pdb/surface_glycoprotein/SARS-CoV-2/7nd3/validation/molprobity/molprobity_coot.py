# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 123 ', 'ALA', 0.04191756541313106, (254.02100000000002, 223.07699999999994, 173.031)), ('L', '  94 ', 'LEU', 0.030763199414314758, (208.58400000000006, 182.794, 122.808)), ('L', '  95 ', 'PRO', 0.0, (207.124, 182.509, 119.25800000000001))]
data['omega'] = [('B', ' 123 ', 'ALA', None, (253.16000000000003, 221.95499999999996, 172.674)), ('L', '   8 ', 'PRO', None, (218.501, 176.42899999999995, 103.824))]
data['rota'] = [('A', ' 590 ', 'CYS', 0.18215806447904487, (207.445, 230.69199999999995, 196.69)), ('A', ' 615 ', 'VAL', 0.24870788768456825, (206.28400000000005, 232.16499999999994, 209.16300000000007)), ('A', ' 878 ', 'LEU', 0.03636416528855274, (176.852, 196.242, 242.94300000000004)), ('A', ' 900 ', 'MET', 0.2374874318335862, (181.875, 196.716, 259.2600000000001)), ('A', '1004 ', 'LEU', 0.21814438142786363, (188.167, 199.19499999999994, 201.52)), ('A', '1082 ', 'CYS', 0.08430471623892859, (213.90000000000006, 209.552, 275.531)), ('B', ' 950 ', 'ASP', 0.16559678110230117, (215.532, 204.954, 218.748)), ('B', '1017 ', 'GLU', 0.27770730450915104, (203.24699999999996, 201.99599999999995, 220.435)), ('B', '1132 ', 'ILE', 0.07132731743562856, (209.20600000000002, 172.876, 267.188)), ('C', ' 231 ', 'ILE', 0.1324335968428592, (189.238, 167.19099999999995, 167.16900000000004)), ('C', ' 517 ', 'LEU', 0.14044060305414652, (174.87000000000006, 211.553, 178.30700000000004)), ('C', ' 738 ', 'CYS', 0.0, (210.467, 191.11699999999993, 198.476)), ('C', ' 907 ', 'ASN', 0.1280897068469899, (200.69500000000002, 186.398, 256.853)), ('C', '1004 ', 'LEU', 0.25818582916298666, (202.99700000000007, 192.20399999999995, 200.38200000000006)), ('H', '  11 ', 'LEU', 0.0004577024756387411, (202.699, 207.49799999999993, 108.462)), ('L', '  11 ', 'LEU', 0.00629498628393922, (217.22600000000006, 177.43699999999995, 97.31300000000003)), ('L', '  15 ', 'VAL', 0.19181351989596104, (208.55700000000002, 172.22600000000006, 89.024))]
data['cbeta'] = []
data['probe'] = [(' B 475  ALA  O  ', ' H  32  ASN  ND2', -0.721, (187.253, 182.691, 118.805)), (' A1093  GLY  O  ', ' A1107  ARG  NH1', -0.661, (203.909, 207.254, 262.244)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.637, (181.058, 207.621, 246.102)), (' B1116  THR  OG1', ' B1118  ASP  OD1', -0.634, (208.552, 190.505, 274.193)), (' A  29  THR HG23', ' A  62  VAL HG23', -0.628, (176.005, 245.663, 193.118)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.627, (203.903, 177.157, 102.706)), (' L  29  ILE HG21', ' L  90  GLN  HG3', -0.627, (210.738, 175.416, 119.552)), (' C 224  GLU  N  ', ' C 224  GLU  OE1', -0.619, (189.652, 157.912, 186.285)), (' A 330  PRO  HB2', ' A 332  ILE HD13', -0.616, (222.905, 230.559, 172.962)), (' A 326  ILE HD12', ' A 539  VAL HG21', -0.615, (211.573, 235.668, 187.202)), (' H  29  VAL HG13', ' H  34  MET  HG3', -0.613, (190.72, 188.513, 119.146)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.604, (199.343, 175.818, 242.717)), (' A 393  THR HG21', ' A 520  ALA  HB3', -0.604, (222.991, 217.948, 178.112)), (' B 287  ASP  OD1', ' B 288  ALA  N  ', -0.604, (234.85, 208.131, 199.826)), (' C 287  ASP  OD1', ' C 288  ALA  N  ', -0.602, (183.652, 163.819, 198.975)), (' B 532  ASN  OD1', ' B 533  LEU  N  ', -0.601, (219.824, 164.611, 180.483)), (' B 908  GLY  O  ', ' B1038  LYS  NZ ', -0.599, (205.395, 198.289, 252.035)), (' B 965  GLN  NE2', ' B1003  SER  OG ', -0.593, (206.688, 205.81, 197.312)), (' C 902  MET  HE1', ' C1049  LEU HD13', -0.592, (200.453, 178.889, 249.903)), (' A 736  VAL HG11', ' A1004  LEU HD21', -0.587, (184.368, 197.27, 202.78)), (' A1105  THR HG22', ' A1112  PRO  HA ', -0.586, (196.835, 211.773, 269.089)), (' B1103  PHE  HZ ', ' K   1  NAG  H62', -0.579, (221.963, 186.244, 272.073)), (' A 195  LYS  HD3', ' A 197  ILE HD13', -0.568, (179.922, 227.758, 181.416)), (' B1040  VAL HG21', ' C1035  GLY  HA3', -0.566, (207.156, 190.366, 244.332)), (' B 811  LYS  O  ', ' B 813  SER  N  ', -0.566, (218.121, 228.279, 233.069)), (' B  33  THR  OG1', ' B 219  GLY  O  ', -0.565, (242.646, 208.286, 197.379)), (' B1028  LYS  O  ', ' B1032  CYS  CB ', -0.562, (206.0, 205.11, 239.482)), (' C1093  GLY  O  ', ' C1107  ARG  NH1', -0.562, (188.318, 192.605, 262.213)), (' B 961  THR HG21', ' C 765  ARG HH22', -0.557, (212.241, 203.626, 204.838)), (' B 122  ASN  O  ', ' B 124  THR  N  ', -0.553, (252.115, 224.028, 171.908)), (' A 122  ASN  O  ', ' A 124  THR  N  ', -0.539, (155.044, 240.918, 174.105)), (' B 100  ILE HG22', ' B 242  LEU  HB2', -0.536, (257.3, 209.817, 176.421)), (' B 703  ASN  OD1', ' B 704  SER  N  ', -0.535, (224.299, 179.312, 244.044)), (' C 403  ARG  NH1', ' C 405  ASP  OD2', -0.535, (196.658, 215.0, 151.153)), (' B 895  GLN  N  ', ' B 895  GLN  OE1', -0.533, (203.277, 219.909, 255.58)), (' A 552  LEU  HB3', ' A 585  LEU HD13', -0.53, (217.281, 233.402, 190.394)), (' A 117  LEU HD21', ' A 231  ILE HD13', -0.53, (175.669, 232.565, 171.768)), (' B 537  LYS  O  ', ' B 539  VAL HG23', -0.528, (220.429, 171.222, 188.618)), (' B 902  MET  HE1', ' B1049  LEU HD13', -0.528, (214.739, 204.892, 251.256)), (' A1106  GLN  NE2', ' A1111  GLU  OE1', -0.526, (191.827, 207.526, 265.489)), (' C 229  LEU  HB3', ' C 231  ILE HG23', -0.523, (189.616, 164.368, 169.028)), (' B 770  ILE  O  ', ' B 774  GLN  HG2', -0.523, (200.152, 212.455, 217.923)), (' A 403  ARG  NH1', ' A 405  ASP  OD2', -0.523, (204.229, 196.728, 150.479)), (' C1028  LYS  O  ', ' C1032  CYS  CB ', -0.521, (202.906, 186.98, 238.377)), (' A 377  PHE  HE2', ' A 384  PRO  HG3', -0.519, (204.084, 217.504, 165.819)), (' A 280  ASN  ND2', ' A 284  THR  OG1', -0.515, (165.027, 223.954, 199.83)), (' A 805  ILE HG22', ' A 818  ILE HD12', -0.515, (174.48, 205.606, 240.892)), (' C 122  ASN  O  ', ' C 124  THR  N  ', -0.514, (186.012, 143.867, 168.961)), (' C 564  GLN  NE2', ' C 577  ARG  O  ', -0.513, (162.229, 209.69, 184.813)), (' A 236  THR HG21', ' D   1  NAG  H5 ', -0.506, (187.864, 238.311, 171.906)), (' C1053  PRO  O  ', ' C1054  GLN  NE2', -0.506, (207.417, 176.031, 235.572)), (' C 905  ARG  HD2', ' C1049  LEU  O  ', -0.505, (202.837, 183.333, 247.703)), (' C 914  ASN  ND2', ' C1111  GLU  OE2', -0.501, (195.842, 180.175, 265.381)), (' C 720  ILE HG13', ' C 923  ILE HG23', -0.501, (197.65, 174.245, 251.079)), (' H  34  MET  HB3', ' H  78  LEU HD22', -0.501, (193.847, 189.391, 118.053)), (' A 319  ARG  NH2', ' B 745  ASP  OD2', -0.495, (204.223, 226.293, 195.274)), (' A 852  ALA  O  ', ' A 856  ASN  ND2', -0.495, (174.392, 202.302, 201.061)), (' A1028  LYS  O  ', ' A1032  CYS  CB ', -0.494, (188.576, 198.886, 239.866)), (' B 487  ASN  ND2', ' H  26  GLY  O  ', -0.494, (184.887, 181.086, 114.162)), (' C 201  PHE  HB2', ' C 231  ILE HD11', -0.493, (186.239, 166.732, 170.47)), (' A 117  LEU HD21', ' A 231  ILE HG21', -0.492, (174.269, 232.543, 171.389)), (' C 117  LEU HD11', ' C 231  ILE HD13', -0.492, (185.373, 165.424, 167.765)), (' B  30  ASN  OD1', ' B  31  SER  N  ', -0.492, (246.086, 200.585, 194.741)), (' C1106  GLN  NE2', ' C1111  GLU  OE1', -0.489, (193.614, 181.856, 262.968)), (' A 100  ILE HD13', ' A 263  ALA  HB2', -0.488, (162.94, 250.213, 184.399)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.488, (219.766, 218.119, 165.747)), (' B 111  ASP  OD1', ' B 112  SER  N  ', -0.485, (246.039, 202.444, 158.799)), (' A 796  ASP  N  ', ' A 796  ASP  OD1', -0.485, (168.615, 197.687, 255.368)), (' C1028  LYS  O  ', ' C1032  CYS  HB2', -0.484, (202.807, 187.815, 238.032)), (' A1028  LYS  O  ', ' A1032  CYS  HB3', -0.483, (188.399, 198.599, 239.481)), (' B1086  LYS  HD3', ' B1122  VAL HG11', -0.483, (200.329, 179.449, 275.664)), (' B 276  LEU  HB3', ' B 289  VAL  CG2', -0.483, (229.625, 204.775, 199.438)), (' C 611  LEU HD22', ' C 666  ILE HG23', -0.482, (171.708, 184.155, 215.025)), (' A 611  LEU HD22', ' A 666  ILE HG23', -0.48, (198.861, 228.348, 217.062)), (' B 727  LEU HD11', ' B1028  LYS  HD2', -0.479, (207.993, 203.959, 233.346)), (' C 673  SER  OG ', ' C 695  TYR  OH ', -0.479, (173.149, 176.819, 224.054)), (' B  46  SER  N  ', ' B 279  TYR  O  ', -0.477, (228.024, 217.597, 200.44)), (' C  40  ASP  N  ', ' C  40  ASP  OD1', -0.476, (192.89, 167.835, 187.226)), (' B  52  GLN  N  ', ' B  52  GLN  OE1', -0.476, (224.646, 203.874, 189.744)), (' A 106  PHE  HB3', ' A 235  ILE HD13', -0.475, (177.726, 237.423, 173.05)), (' B 324  GLU  N  ', ' B 324  GLU  OE1', -0.471, (223.996, 173.972, 184.145)), (' A 294  ASP  OD2', ' A 297  SER  OG ', -0.471, (183.829, 233.14, 205.245)), (' B 805  ILE HG22', ' B 818  ILE HD12', -0.471, (219.431, 214.04, 239.344)), (' A 280  ASN  OD1', ' A 283  GLY  N  ', -0.47, (165.246, 220.859, 198.865)), (' A 736  VAL HG22', ' A 858  LEU HD22', -0.47, (180.942, 198.452, 204.828)), (' A 392  PHE  HE1', ' A 517  LEU  HB3', -0.468, (214.492, 216.336, 175.533)), (' A1029  MET  HE2', ' A1053  PRO  HB3', -0.465, (181.93, 198.217, 236.991)), (' C 909  ILE HD13', ' C1049  LEU HD21', -0.465, (197.533, 182.484, 250.952)), (' C 858  LEU HD23', ' C 959  LEU HD22', -0.464, (205.262, 183.379, 204.281)), (' A 749  CYS  HB2', ' A 977  LEU HD21', -0.463, (181.083, 195.529, 188.123)), (' B1028  LYS  O  ', ' B1032  CYS  HB3', -0.462, (206.084, 205.809, 239.732)), (' B1013  ILE HD13', ' C1012  LEU  HB3', -0.462, (201.55, 197.73, 212.016)), (' L  28  ASP  HA ', ' L  68  GLY  O  ', -0.46, (215.27, 169.722, 119.636)), (' B1028  LYS  O  ', ' B1032  CYS  HB2', -0.46, (205.634, 204.914, 239.693)), (' C 328  ARG  NH1', ' C 578  ASP  OD2', -0.459, (155.683, 204.559, 184.01)), (' A 234  ASN  ND2', ' D   1  NAG  O7 ', -0.459, (186.983, 233.599, 169.418)), (' C 457  ARG  NH2', ' C 465  GLU  OE2', -0.458, (187.801, 231.111, 167.134)), (' B 415  THR  HG1', ' H  58  PHE  HE1', -0.457, (202.363, 186.371, 131.4)), (' C 309  GLU  O  ', ' C 313  TYR  OH ', -0.457, (183.082, 175.169, 214.144)), (' B 726  ILE HG12', ' B1061  VAL HG22', -0.455, (215.791, 208.038, 230.841)), (' A 898  PHE  HZ ', ' A1050  MET  HE1', -0.455, (179.602, 201.719, 251.033)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.455, (214.44, 200.573, 276.188)), (' B 858  LEU HD23', ' B 959  LEU HD22', -0.453, (208.307, 213.867, 206.346)), (' C1043  CYS  HB3', ' C1048  HIS  CD2', -0.453, (198.676, 184.828, 241.994)), (' C 752  LEU HD21', ' C 990  GLU  HG2', -0.452, (208.488, 197.398, 181.815)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.45, (211.776, 174.199, 141.742)), (' C1105  THR HG22', ' C1112  PRO  HA ', -0.449, (187.576, 183.58, 267.388)), (' B1082  CYS  SG ', ' B1132  ILE HG12', -0.449, (207.689, 172.86, 271.014)), (' B 476  GLY  N  ', ' B 487  ASN  HB3', -0.447, (184.847, 179.721, 118.166)), (' B 302  THR HG21', ' B 315  THR HG22', -0.447, (223.761, 196.029, 204.502)), (' A 901  GLN  O  ', ' A 905  ARG  HG2', -0.446, (185.312, 198.241, 254.35)), (' A 612  TYR  HE2', ' A 651  ILE HD12', -0.443, (197.801, 236.735, 209.372)), (' B 205  SER  HB3', ' B 226  LEU HD12', -0.443, (241.353, 217.069, 182.265)), (' C  46  SER  HA ', ' C 279  TYR  O  ', -0.442, (194.979, 163.936, 200.876)), (' A 392  PHE  CE1', ' A 517  LEU  HB3', -0.441, (214.587, 216.27, 175.37)), (' A 234  ASN  OD1', ' A 235  ILE  N  ', -0.44, (183.976, 235.459, 171.385)), (' H  33  TYR  CB ', ' H  98  ASP  HB3', -0.438, (196.11, 182.354, 120.374)), (' C 727  LEU HD11', ' C1028  LYS  HD2', -0.438, (199.954, 186.705, 232.677)), (' B1116  THR HG22', ' B1138  TYR  HD2', -0.437, (211.282, 188.655, 278.155)), (' C1086  LYS  HB3', ' C1122  VAL HG13', -0.431, (187.262, 202.08, 276.622)), (' H   4  LEU HD22', ' H  24  VAL HG22', -0.43, (190.432, 188.476, 113.161)), (' A1006  THR  O  ', ' A1010  GLN  HG2', -0.429, (191.688, 202.693, 207.304)), (' A 707  TYR  HB3', ' B 792  PRO  HG3', -0.428, (210.478, 223.328, 253.078)), (' B 377  PHE  HD1', ' B 434  ILE HG12', -0.428, (211.271, 173.247, 148.588)), (' A 905  ARG HH11', ' A1036  GLN  HB2', -0.428, (188.426, 197.685, 249.238)), (' A 303  LEU HD12', ' A 308  VAL HG22', -0.428, (183.68, 223.908, 210.983)), (' C 358  ILE  HB ', ' C 395  VAL  HB ', -0.426, (170.362, 214.688, 167.341)), (' B 189  LEU HD11', ' B 217  PRO  HG2', -0.426, (251.264, 211.697, 193.45)), (' C 676  THR  HA ', ' C 690  GLN  HA ', -0.425, (167.677, 165.841, 221.429)), (' A 676  THR  HA ', ' A 690  GLN  HA ', -0.425, (185.111, 240.329, 225.21)), (' B 736  VAL HG11', ' B1004  LEU HD21', -0.424, (202.091, 212.941, 203.089)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.421, (217.882, 206.818, 244.434)), (' A 902  MET  HE1', ' A1049  LEU HD13', -0.419, (184.336, 204.506, 252.622)), (' B1126  CYS  HB2', ' B1132  ILE HD13', -0.418, (205.478, 173.376, 269.291)), (' C 725  GLU  OE1', ' C1064  HIS  NE2', -0.418, (197.9, 183.689, 236.316)), (' A  46  SER  HA ', ' A 279  TYR  O  ', -0.417, (169.438, 218.666, 202.462)), (' A1103  PHE  HZ ', ' G   1  NAG  H62', -0.416, (197.251, 216.852, 275.919)), (' A 763  LEU HD22', ' A1008  VAL HG21', -0.416, (189.296, 194.996, 204.845)), (' C 886  TRP  HH2', ' C 904  TYR  HB3', -0.415, (206.24, 185.946, 253.389)), (' L  19  VAL HG21', ' L  78  LEU HD13', -0.415, (210.37, 172.708, 96.046)), (' A 517  LEU  O  ', ' A 517  LEU HD12', -0.415, (215.322, 214.424, 179.209)), (' A 717  ASN  OD1', ' A 718  PHE  N  ', -0.414, (187.273, 215.614, 258.022)), (' C 770  ILE  O  ', ' C 774  GLN  HG2', -0.414, (209.421, 190.492, 216.139)), (' H  33  TYR  HB2', ' H  98  ASP  HB3', -0.414, (196.075, 182.098, 120.363)), (' A 802  PHE  HD1', ' A 805  ILE HD11', -0.413, (175.53, 202.891, 246.463)), (' A1039  ARG  HE ', ' B1031  GLU  CD ', -0.412, (198.69, 200.796, 239.929)), (' B 419  ALA  HA ', ' B 423  TYR  O  ', -0.412, (199.028, 178.953, 137.571)), (' B 502  GLY  O  ', ' B 506  GLN  HG3', -0.409, (214.514, 169.519, 128.638)), (' A 377  PHE  CE2', ' A 384  PRO  HG3', -0.409, (204.51, 217.15, 165.453)), (' A 759  PHE  HD2', ' A1001  LEU HD21', -0.408, (192.379, 193.672, 195.945)), (' C 749  CYS  HB2', ' C 977  LEU HD21', -0.408, (209.292, 189.37, 186.538)), (' B 983  ARG  O  ', ' B 984  LEU HD23', -0.408, (205.353, 215.66, 175.953)), (' C  45  SER  O  ', ' C  47  VAL HG23', -0.407, (197.84, 167.326, 200.225)), (' H   6  GLU  CD ', ' H 112  GLY  H  ', -0.407, (195.922, 192.538, 107.819)), (' H  33  TYR  HB3', ' H  50  LEU HD11', -0.406, (196.87, 183.543, 121.647)), (' A 961  THR HG21', ' B 762  GLN  CD ', -0.406, (188.271, 208.731, 204.816)), (' C  65  PHE  O  ', ' C 264  ALA  HA ', -0.405, (168.664, 151.667, 180.218)), (' A1012  LEU  HB3', ' C1013  ILE HD13', -0.405, (194.642, 196.42, 212.2)), (' A 770  ILE  O  ', ' A 774  GLN  HG2', -0.404, (185.186, 193.387, 217.512)), (' C 763  LEU HD22', ' C1008  VAL HG21', -0.404, (205.967, 194.692, 204.049)), (' B 350  VAL HG21', ' B 418  ILE HG23', -0.404, (200.738, 174.046, 135.579)), (' B 541  PHE  CZ ', ' B 587  ILE HD13', -0.403, (211.046, 172.422, 188.452)), (' H  18  LEU  HB3', ' H  82  MET  HE3', -0.403, (200.442, 203.038, 115.776)), (' C 328  ARG  NH2', ' C 580  GLN  OE1', -0.403, (154.525, 203.796, 180.396)), (' H  36  TRP  CE2', ' H  80  LEU  HB2', -0.401, (197.266, 195.202, 117.614)), (' B 595  VAL HG22', ' B 612  TYR  HD1', -0.401, (225.242, 185.49, 202.287)), (' A 727  LEU HD11', ' A1028  LYS  HD2', -0.401, (188.883, 202.309, 234.476)), (' A 866  THR  OG1', ' A 869  MET  SD ', -0.4, (170.646, 190.876, 226.594)), (' A 520  ALA  O  ', ' A 522  ALA  N  ', -0.4, (222.217, 221.598, 177.964)), (' B 324  GLU  OE2', ' B 534  VAL HG21', -0.4, (223.292, 170.391, 184.312)), (' A 787  GLN  OE1', ' C 703  ASN  ND2', -0.4, (175.628, 182.606, 245.033)), (' L  61  ARG  NH1', ' L  79  GLN  HB2', -0.4, (201.515, 172.981, 93.687))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
