# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 662 ', 'CYS', 0.036283266288350824, (255.51300000000003, 225.352, 229.562)), ('A', ' 663 ', 'ASP', 0.026014063451697336, (252.371, 225.407, 231.728)), ('B', ' 232 ', 'GLY', 0.04004156051549509, (291.731, 251.49800000000005, 289.501)), ('B', ' 235 ', 'ILE', 0.028426803341613523, (297.276, 257.905, 286.705)), ('B', ' 562 ', 'PHE', 0.01022831063309594, (253.70300000000015, 302.011, 265.028)), ('B', ' 569 ', 'ILE', 0.08005348870957453, (256.713, 283.718, 254.17600000000002)), ('B', ' 738 ', 'CYS', 0.0018407323544199032, (259.39500000000004, 239.479, 257.03000000000003)), ('B', ' 982 ', 'SER', 0.04285568110050168, (268.3, 234.428, 277.857)), ('B', '1071 ', 'GLN', 0.015416139968696325, (280.471, 263.91100000000006, 201.303)), ('C', '  87 ', 'ASN', 0.0006264648352765157, (230.995, 292.64, 276.299)), ('C', ' 548 ', 'GLY', 0.04905213718439329, (229.257, 251.743, 267.926)), ('C', ' 549 ', 'THR', 0.012971930593525608, (227.236, 254.909, 267.16)), ('D', ' 106 ', 'TYR', 0.028157738739513993, (249.8140000000001, 319.1239999999999, 336.53)), ('H', ' 106 ', 'TYR', 0.03731777892997406, (276.258, 276.503, 314.527))]
data['omega'] = []
data['rota'] = [('A', ' 603 ', 'ASN', 0.03452531542317508, (238.439, 221.886, 238.639)), ('C', ' 738 ', 'CYS', 0.05462094856487278, (269.188, 263.973, 258.412)), ('C', ' 740 ', 'MET', 0.13684634914336397, (270.666, 268.492, 261.407))]
data['cbeta'] = [('C', ' 333 ', 'THR', ' ', 0.5040790651057389, (213.012, 238.011, 285.142))]
data['probe'] = [(' B 977  LEU HD11', ' B 993  ILE HG12', -0.687, (262.809, 240.379, 270.722)), (' B 520  ALA  HA ', ' C 232  GLY  HA3', -0.528, (245.84, 295.849, 286.139)), (' B 231  ILE  O  ', ' B 233  ILE  N  ', -0.496, (293.647, 251.867, 288.668)), (' C 898  PHE  N  ', ' C 899  PRO  CD ', -0.491, (263.372, 277.992, 201.019)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.48, (249.108, 248.609, 219.996)), (' B 898  PHE  N  ', ' B 899  PRO  CD ', -0.478, (270.86, 238.985, 199.687)), (' C 796  ASP  N  ', ' C 796  ASP  OD2', -0.456, (266.872, 285.001, 204.241)), (' A 898  PHE  HB3', ' A 899  PRO  HD3', -0.454, (232.623, 250.585, 201.652)), (' B 780  GLU  O  ', ' B 784  GLN  NE2', -0.445, (258.893, 241.192, 223.702)), (' C 548  GLY  O  ', ' C 549  THR  CB ', -0.443, (229.106, 255.107, 267.419)), (' C 738  CYS  HB3', ' C 760  CYS  HB3', -0.439, (271.102, 261.728, 257.405)), (' C 521  PRO  O  ', ' C 522  ALA  HB3', -0.438, (231.799, 237.295, 288.046)), (' C 736  VAL  CB ', ' C 858  LEU HD23', -0.438, (266.582, 268.823, 254.099)), (' B 986  PRO  N  ', ' B 987  PRO  HD2', -0.431, (259.416, 237.746, 281.412)), (' C  86  PHE  HD2', ' C  86  PHE  O  ', -0.428, (233.493, 295.364, 277.66)), (' B1138  TYR  O  ', ' B1140  PRO  HD3', -0.425, (262.24, 263.723, 176.575)), (' A 620  VAL  N  ', ' A 621  PRO  CD ', -0.417, (264.513, 216.064, 253.355)), (' A 986  PRO  N  ', ' A 987  PRO  CD ', -0.417, (244.707, 259.231, 283.187)), (' C 986  PRO  N  ', ' C 987  PRO  CD ', -0.412, (267.954, 261.91, 283.236)), (' C 578  ASP  HA ', ' C 579  PRO  HD3', -0.411, (219.356, 244.877, 271.167)), (' B 620  VAL  N  ', ' B 621  PRO  CD ', -0.408, (285.694, 282.009, 254.696)), (' B 231  ILE  C  ', ' B 233  ILE  H  ', -0.408, (293.762, 251.061, 288.925)), (' B 568  ASP  O  ', ' B 570  ALA  N  ', -0.401, (256.928, 283.711, 256.44))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
