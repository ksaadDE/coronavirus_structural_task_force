
from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

dict_residue_prop_objects = {}
class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)
        ##save property list frame object
        dict_residue_prop_objects[data_key] = list_obj
# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "clusters","rama", "rota", "cbeta", "probe", "smoc", "cablam",
               "jpred"]
  data_titles = { "clusters"  : "Outlier residue clusters",
                  "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes",
                  "smoc"  : "Local density fit (SMOC)",
                  "cablam": "Ca geometry (CaBLAM)",
                  "jpred":"SS prediction"}
  data_names = { "clusters"  : ["Chain","Residue","Cluster","Outlier types"],
                 "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"],
                 "smoc" : ["Chain", "Residue", "Name", "Score"],
                 "cablam" : ["Chain", "Residue","Name","recommendation","DSSP"],
                 "jpred" : ["Chain", "Residue","Name","predicted SS","current SS"]}
  if (gobject is not None) :
    data_types = {  "clusters" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_INT, gobject.TYPE_STRING,
                             gobject.TYPE_PYOBJECT],
                    "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "smoc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cablam" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT],
                   "jpred" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT]}
  else :
    data_types = dict([ (s, []) for s in ["clusters","rama","rota","cbeta","probe","smoc",
                                          "cablam","jpred"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    ##adding a column type for checkbox (bool) before atom coordinate
    if gobject is not None:
        column_types = column_types[:-1]+[bool]+[column_types[-1]]
    
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    ##add a cell for checkbox
    cell1 = gtk.CellRendererToggle()
    cell1.connect ("toggled", self.on_selected_toggled)
    column = gtk.TreeViewColumn('Dealt with',cell1,active=i+1)
    self.listctrl.append_column(column)
    #column.set_sort_column_id(i+1)
    #column.pack_start(cell1, True)
    
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      row = row[:-1] + (False,)+(row[-1],)
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()
  ##check box toggle
  def on_selected_toggled(self,renderer,path):
    if path is not None:
      model = self.listmodel.get_model()
      it = model.get_iter(path)
      #set toggle
      model[it][-2] = not model[it][-2]
      #set checkboxes for same residues in other lists
      try:
        chain = model[it][0]
        residue = model[it][1]
        for data_key in dict_residue_prop_objects:
          prop_obj = dict_residue_prop_objects[data_key]
          for row in prop_obj.listmodel.get_model():
            if data_key == 'probe':
              atom1_split = row[0].split()
              atom2_split = row[1].split()
              if atom1_split[0] == chain and atom1_split[1] == residue:
                row[-2] = model[it][-2]
              elif atom2_split[0] == chain and atom2_split[1] == residue:
                row[-2] = model[it][-2]
            elif row[0] == chain and row[1] == residue:
              row[-2] = model[it][-2]
      except IndexError: pass

  def check_chain_residue(self,chain,residue):
      pass
  
def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data
data = {}
data['clusters'] = []
data['jpred'] = []
data['probe'] = [(' L  21  ILE HG22', ' L  22  SER  H  ', -0.603, (140.536, 201.738, 123.295)), (' C1081  ILE HD11', ' C1137  VAL HG23', -0.559, (195.184, 187.765, 268.299)), (' H 100H PHE  H  ', ' L  46  LEU HD22', -0.505, (158.285, 206.921, 127.583)), (' C1081  ILE HD11', ' C1137  VAL  CG2', -0.503, (194.474, 187.88, 268.029)), (' H 144  ASP  H  ', ' H 171  GLN  NE2', -0.485, (155.406, 203.785, 89.252)), (' L 119  PHE  CD1', ' L 136  LEU HD11', -0.482, (143.33, 213.236, 89.977)), (' B 189  LEU  HB3', ' B 210  ILE HD13', -0.441, (132.664, 184.488, 181.612)), (' A1029  MET  HE2', ' A1053  PRO  HB3', -0.437, (199.216, 182.629, 229.643)), (' C1029  MET  HE2', ' C1053  PRO  HB3', -0.426, (179.777, 204.457, 225.8)), (' A 877  LEU HD13', ' A1029  MET  SD ', -0.423, (200.337, 185.726, 229.656)), (' C1081  ILE  C  ', ' C1081  ILE HD12', -0.416, (196.763, 185.599, 267.249)), (' A 391  CYS  SG ', ' A 522  ALA  HB1', -0.416, (160.578, 167.413, 167.367)), (' A 394  ASN  H  ', ' A 516  GLU  HG3', -0.409, (161.16, 174.621, 164.558)), (' C1097  SER  HB2', ' C1102  TRP  CD2', -0.405, (202.812, 192.612, 263.211)), (' B1083  HIS  CG ', ' B1084  ASP  H  ', -0.404, (178.624, 210.327, 268.665)), (' H  47  TRP  CD1', ' L  96  TRP  HB2', -0.403, (159.253, 194.345, 122.944)), (' C 557  LYS  NZ ', ' C 575  ALA  HB2', -0.4, (217.687, 167.327, 192.017))]
data['cbeta'] = [('A', ' 168 ', 'PHE', ' ', 0.3051654051863925, (211.29599999999994, 147.049, 162.154)), ('A', ' 195 ', 'LYS', ' ', 0.25398324653073356, (201.78299999999993, 147.684, 178.91)), ('A', ' 536 ', 'ASN', ' ', 0.250704962172331, (158.302, 151.438, 188.797)), ('A', ' 710 ', 'ASN', ' ', 0.26894135089861887, (163.73299999999995, 170.019, 255.23699999999997)), ('A', ' 762 ', 'GLN', ' ', 0.273572395945685, (193.706, 194.205, 195.766)), ('A', '1084 ', 'ASP', ' ', 0.2939441317484802, (162.77499999999998, 184.57200000000006, 272.536)), ('B', ' 113 ', 'LYS', ' ', 0.2931749262482635, (146.717, 192.385, 145.51099999999997)), ('L', '  51 ', 'ASN', ' ', 0.3278040000724588, (150.96499999999995, 203.036, 135.123)), ('C', ' 617 ', 'CYS', ' ', 0.28410211079692543, (223.59999999999994, 187.98499999999996, 203.854))]
data['smoc'] = [('A', 39, u'PRO', 0.715236626448284, (205.21699999999998, 154.108, 185.65200000000002)), ('A', 51, u'THR', 0.7731097733247401, (198.73, 157.364, 189.49800000000002)), ('A', 69, u'HIS', 0.5590583710183084, (201.60899999999998, 117.13499999999999, 177.788)), ('A', 92, u'PHE', 0.7140770303698649, (203.748, 137.353, 183.333)), ('A', 113, u'LYS', 0.6806289209827572, (199.45700000000002, 138.207, 157.48100000000002)), ('A', 123, u'ALA', 0.5688798534014862, (220.86200000000002, 137.86, 178.412)), ('A', 138, u'ASP', 0.6466161096449758, (203.38000000000002, 126.17499999999998, 169.297)), ('A', 140, u'PHE', 0.6232197555994404, (209.298, 123.088, 169.24299999999997)), ('A', 167, u'THR', 0.6406354411785768, (210.256, 145.335, 157.88600000000002)), ('A', 171, u'VAL', 0.6472304261188417, (218.751, 142.38700000000003, 167.566)), ('A', 198, u'ASP', 0.6875180193632822, (199.996, 153.60399999999998, 170.677)), ('A', 201, u'PHE', 0.6973858513519957, (206.047, 148.281, 173.63299999999998)), ('A', 203, u'ILE', 0.7308881367311832, (208.95000000000002, 145.726, 179.259)), ('A', 210, u'ILE', 0.7027166571795536, (212.445, 132.19299999999998, 196.90800000000002)), ('A', 214, u'ARG', 0.655372204439566, (203.54399999999998, 127.483, 194.984)), ('A', 229, u'LEU', 0.6906945247637549, (210.32800000000003, 148.354, 171.123)), ('A', 233, u'ILE', 0.6580356781380567, (200.564, 146.789, 166.107)), ('A', 236, u'THR', 0.6217383885266538, (195.58100000000002, 140.54899999999998, 170.69299999999998)), ('A', 265, u'TYR', 0.7240875603156776, (204.272, 129.73299999999998, 185.046)), ('A', 285, u'ILE', 0.750064496909271, (208.96200000000002, 152.159, 195.683)), ('A', 301, u'CYS', 0.7810526666263092, (193.69299999999998, 157.17, 198.36)), ('A', 308, u'VAL', 0.7203391201113892, (194.153, 156.035, 208.297)), ('A', 329, u'PHE', 0.7852526927554035, (159.22, 160.467, 169.18)), ('A', 333, u'THR', 0.7266974268877358, (155.518, 158.086, 160.138)), ('A', 354, u'ASN', 0.7639528456506269, (161.29299999999998, 180.311, 148.30800000000002)), ('A', 357, u'ARG', 0.7848453022279768, (157.68200000000002, 175.312, 156.336)), ('A', 382, u'VAL', 0.7894529781906281, (173.77899999999997, 171.271, 165.315)), ('A', 398, u'ASP', 0.7718137038932517, (165.134, 178.809, 152.51399999999998)), ('A', 401, u'VAL', 0.7380868878372309, (170.631, 180.54899999999998, 143.539)), ('A', 406, u'GLU', 0.7834714173882422, (178.97299999999998, 184.431, 147.17)), ('A', 415, u'THR', 0.7519356192196467, (179.176, 191.44, 156.70499999999998)), ('A', 417, u'LYS', 0.7975157451816244, (176.46, 193.32100000000003, 150.836)), ('A', 428, u'ASP', 0.7551622365899948, (173.577, 183.564, 166.52100000000002)), ('A', 433, u'VAL', 0.7491413459405236, (173.753, 176.042, 154.56)), ('A', 442, u'ASP', 0.7892222228853113, (170.92600000000002, 175.86100000000002, 135.228)), ('A', 444, u'LYS', 0.6077083218336307, (171.497, 176.651, 129.366)), ('A', 445, u'VAL', 0.38267528966843106, (173.51899999999998, 175.71099999999998, 126.19)), ('A', 453, u'TYR', 0.6944733039759448, (171.265, 190.03, 142.121)), ('A', 456, u'PHE', 0.7375041653169072, (171.36, 198.39200000000002, 146.585)), ('A', 462, u'LYS', 0.7737871010308133, (166.795, 191.96, 159.71599999999998)), ('A', 503, u'VAL', 0.751434111232149, (184.242, 177.959, 138.092)), ('A', 505, u'TYR', 0.7059106086267076, (180.781, 182.809, 138.86)), ('A', 518, u'LEU', 0.7357282530197599, (162.319, 176.006, 170.98000000000002)), ('A', 519, u'HIS', 0.636741246799031, (160.924, 174.677, 174.335)), ('A', 527, u'PRO', 0.814660195916338, (163.726, 158.43, 161.98600000000002)), ('A', 529, u'LYS', 0.6761856112274693, (163.371, 153.46200000000002, 166.86200000000002)), ('A', 532, u'ASN', 0.8110762186053453, (158.49, 150.227, 174.51899999999998)), ('A', 533, u'LEU', 0.8010889798811465, (157.73, 152.255, 177.71399999999997)), ('A', 539, u'VAL', 0.7848548214282919, (166.26, 154.363, 182.206)), ('A', 544, u'ASN', 0.7618744905976838, (160.364, 164.237, 171.526)), ('A', 545, u'GLY', 0.7222737623953644, (164.2, 164.83100000000002, 171.556)), ('A', 556, u'ASN', 0.7812300760513287, (148.708, 161.889, 189.553)), ('A', 569, u'ILE', 0.7887469137150377, (160.684, 175.04299999999998, 191.238)), ('A', 582, u'LEU', 0.7475483499752844, (148.85600000000002, 160.58200000000002, 177.127)), ('A', 590, u'CYS', 0.7983839321997023, (168.333, 157.907, 189.51)), ('A', 641, u'ASN', 0.7711154453913069, (174.73499999999999, 142.653, 207.53)), ('A', 650, u'LEU', 0.7321769952597323, (175.347, 151.54299999999998, 207.061)), ('A', 666, u'ILE', 0.6480030523578982, (177.33700000000002, 158.948, 211.954)), ('A', 671, u'CYS', 0.6654746412269636, (177.409, 156.575, 216.499)), ('A', 695, u'TYR', 0.6592720862692659, (174.291, 152.278, 218.41899999999998)), ('A', 699, u'LEU', 0.7352152608107826, (174.33200000000002, 161.423, 226.565)), ('A', 715, u'PRO', 0.6900604137185583, (181.031, 169.123, 250.792)), ('A', 729, u'VAL', 0.5972155227096758, (197.089, 182.496, 218.57299999999998)), ('A', 742, u'ILE', 0.685062363408107, (201.125, 183.545, 187.931)), ('A', 748, u'GLU', 0.7618194696496629, (205.316, 187.584, 177.60399999999998)), ('A', 763, u'LEU', 0.6556893570934171, (196.257, 190.141, 196.77599999999998)), ('A', 781, u'VAL', 0.5714720955227323, (198.062, 187.491, 224.168)), ('A', 789, u'TYR', 0.6916338006259253, (209.46200000000002, 189.625, 236.567)), ('A', 805, u'ILE', 0.6472212738444553, (206.394, 175.35700000000003, 234.782)), ('A', 813, u'SER', 0.722702048941259, (215.54, 178.583, 224.57)), ('A', 822, u'LEU', 0.6949753210503229, (204.363, 171.283, 224.35000000000002)), ('A', 861, u'LEU', 0.749463450033263, (208.161, 185.651, 207.053)), ('A', 865, u'LEU', 0.7093109340335152, (208.648, 187.505, 219.01)), ('A', 877, u'LEU', 0.5322095142565088, (203.617, 186.271, 233.60399999999998)), ('A', 888, u'PHE', 0.6164295684520843, (200.904, 193.037, 238.685)), ('A', 896, u'ILE', 0.6892014239079246, (202.69, 188.508, 249.084)), ('A', 915, u'VAL', 0.6777817423473176, (190.018, 176.15, 255.315)), ('A', 916, u'LEU', 0.6383489061622495, (193.29399999999998, 176.803, 253.45100000000002)), ('A', 938, u'LEU', 0.6687120432642129, (201.677, 165.721, 227.447)), ('A', 962, u'LEU', 0.6433149194109287, (197.87, 176.329, 195.99800000000002)), ('A', 973, u'ILE', 0.7450145181430238, (197.622, 173.10899999999998, 175.57299999999998)), ('A', 979, u'ASP', 0.6870683461339779, (206.04299999999998, 174.96, 176.73499999999999)), ('A', 996, u'LEU', 0.7469033667802166, (196.566, 179.88600000000002, 182.33200000000002)), ('A', 1009, u'THR', 0.6335645145576335, (189.935, 184.471, 200.434)), ('A', 1013, u'ILE', 0.619245310833356, (188.45600000000002, 183.778, 206.505)), ('A', 1031, u'GLU', 0.6160801997483938, (190.917, 187.678, 233.38100000000003)), ('A', 1060, u'VAL', 0.5798138950994244, (199.11899999999997, 179.36, 224.254)), ('A', 1087, u'ALA', 0.6684945544887309, (163.281, 184.88400000000001, 262.943)), ('A', 1089, u'PHE', 0.6563409309605517, (168.84, 184.084, 259.43899999999996)), ('A', 1094, u'VAL', 0.5414054020687545, (173.608, 177.923, 255.75)), ('A', 1096, u'VAL', 0.6078842546054107, (172.27399999999997, 172.42000000000002, 258.91999999999996)), ('A', 1099, u'GLY', 0.6809440023657782, (169.687, 164.877, 262.96999999999997)), ('A', 1105, u'THR', 0.6221738802992384, (178.323, 176.52200000000002, 258.126)), ('A', 1128, u'VAL', 0.6804049537029004, (156.35700000000003, 185.334, 257.687)), ('A', 1142, u'GLN', 0.7433014849085975, (175.708, 186.167, 278.64400000000006)), ('A', 1143, u'PRO', 0.7195552318129518, (178.48000000000002, 183.76399999999998, 279.89799999999997)), ('B', 27, u'ALA', 0.6828171513130576, (133.517, 204.225, 174.935)), ('B', 34, u'ARG', 0.7338571486941603, (141.88100000000003, 190.272, 183.067)), ('B', 35, u'GLY', 0.7029358099529425, (143.556, 188.833, 179.96)), ('B', 88, u'ASP', 0.7272965641091399, (150.334, 193.768, 169.055)), ('B', 102, u'ARG', 0.6259582531818797, (130.58100000000002, 183.80200000000002, 163.707)), ('B', 115, u'GLN', 0.7064594948444306, (146.74099999999999, 186.944, 151.89800000000002)), ('B', 118, u'LEU', 0.6569515689094667, (139.561, 184.554, 158.287)), ('B', 129, u'LYS', 0.6910602113553483, (141.007, 180.075, 156.306)), ('B', 136, u'CYS', 0.6906456245298856, (132.79299999999998, 193.496, 150.38600000000002)), ('B', 139, u'PRO', 0.7705843574435267, (131.03, 191.74899999999997, 155.73299999999998)), ('B', 209, u'PRO', 0.6954675398742493, (129.36800000000002, 180.23499999999999, 181.66299999999998)), ('B', 222, u'ALA', 0.7697075433343278, (143.18, 182.586, 183.03)), ('B', 226, u'LEU', 0.7701705543474902, (142.961, 177.005, 171.74399999999997)), ('B', 233, u'ILE', 0.7025786826867125, (151.784, 187.508, 158.261)), ('B', 290, u'ASP', 0.7536871644468908, (151.38500000000002, 193.117, 186.702)), ('B', 293, u'LEU', 0.768525703750604, (151.342, 198.683, 187.38500000000002)), ('B', 327, u'VAL', 0.7841056532845642, (178.82600000000002, 217.364, 169.312)), ('B', 545, u'GLY', 0.781950296743763, (188.539, 215.11599999999999, 174.343)), ('B', 549, u'THR', 0.7998807145607881, (177.01299999999998, 211.51399999999998, 179.45200000000003)), ('B', 557, u'LYS', 0.8270997624455376, (187.534, 225.627, 187.737)), ('B', 560, u'LEU', 0.7959819731823361, (196.369, 225.51299999999998, 182.507)), ('B', 582, u'LEU', 0.7526633779276269, (187.72, 229.77399999999997, 175.20499999999998)), ('B', 583, u'GLU', 0.8333204752938242, (186.198, 227.96800000000002, 178.267)), ('B', 587, u'ILE', 0.7633260763892586, (181.347, 217.056, 183.504)), ('B', 597, u'VAL', 0.6673795936435485, (159.317, 201.24899999999997, 198.35700000000003)), ('B', 666, u'ILE', 0.6769067425772484, (164.68200000000002, 205.601, 206.0)), ('B', 671, u'CYS', 0.7130487526926819, (161.708, 206.964, 209.76999999999998)), ('B', 699, u'LEU', 0.7475667641082016, (165.412, 208.05800000000002, 220.893)), ('B', 714, u'ILE', 0.6462089911042705, (165.782, 203.35600000000002, 247.369)), ('B', 760, u'CYS', 0.6553443109816941, (186.207, 170.554, 192.66)), ('B', 767, u'LEU', 0.6224644112724802, (181.466, 172.51299999999998, 202.681)), ('B', 782, u'PHE', 0.5912734182591973, (174.077, 172.01399999999998, 224.823)), ('B', 795, u'LYS', 0.8090635224508345, (157.62800000000001, 169.251, 242.39700000000002)), ('B', 827, u'THR', 0.7174693200270604, (158.728, 177.909, 209.45800000000003)), ('B', 876, u'ALA', 0.6633102008280523, (169.21899999999997, 167.871, 232.33)), ('B', 911, u'VAL', 0.6218424457040354, (169.374, 191.92200000000003, 248.556)), ('B', 916, u'LEU', 0.6094706153542128, (163.212, 186.667, 249.765)), ('B', 931, u'ILE', 0.6634200317615998, (156.376, 182.342, 232.77499999999998)), ('B', 984, u'LEU', 0.7882883994131813, (177.349, 169.141, 168.90200000000002)), ('B', 993, u'ILE', 0.7068401144748738, (180.624, 172.91299999999998, 177.819)), ('B', 996, u'LEU', 0.7320865045055488, (178.972, 176.347, 181.33)), ('B', 1018, u'ILE', 0.6188542167865646, (177.032, 181.349, 213.30800000000002)), ('B', 1025, u'ALA', 0.5453447845649816, (175.222, 180.777, 223.369)), ('B', 1029, u'MET', 0.5628654361705202, (174.79899999999998, 178.818, 229.102)), ('B', 1080, u'ALA', 0.6596246972647666, (178.564, 209.52800000000002, 257.49299999999994)), ('B', 1094, u'VAL', 0.6360974665604309, (173.102, 203.52, 253.07299999999998)), ('B', 1144, u'GLU', 0.7307621742078617, (172.974, 195.41899999999998, 279.29099999999994)), ('B', 1147, u'SER', 0.6814719105005052, (172.752, 194.70899999999997, 284.92299999999994)), ('B', 1202, u'NAG', 0.7581718077125574, (128.976, 173.642, 156.947)), ('B', 1205, u'NAG', 0.7880996976137082, (174.117, 220.252, 249.961)), ('H', 8, u'GLY', 0.4830181234179721, (173.265, 204.504, 108.268)), ('H', 9, u'GLY', 0.5198184828705918, (170.212, 203.287, 106.248)), ('H', 32, u'TYR', 0.6253519221937217, (170.505, 204.92700000000002, 128.66)), ('H', 38, u'ARG', 0.7055626424268928, (160.853, 199.415, 114.205)), ('H', 43, u'LYS', 0.5708875341287718, (150.67899999999997, 198.265, 111.503)), ('H', 52, u'ARG', 0.6762464071091823, (171.251, 195.236, 129.06)), ('H', 74, u'ALA', 0.5296432545983741, (183.835, 205.815, 122.56)), ('H', 97, u'ARG', 0.563083526549052, (165.23999999999998, 194.37, 129.911)), ('H', 113, u'SER', 0.38263231374580564, (164.978, 193.58700000000002, 93.553)), ('H', 119, u'PRO', 0.41926802052302775, (159.535, 209.09, 88.34400000000001)), ('H', 150, u'VAL', 0.4651847238730501, (160.74699999999999, 212.164, 98.768)), ('H', 158, u'ALA', 0.47222480790604454, (154.642, 228.796, 98.19)), ('H', 163, u'VAL', 0.5388956259674309, (147.761, 220.916, 99.10499999999999)), ('H', 175, u'LEU', 0.5375670460685205, (158.43200000000002, 200.73899999999998, 91.506)), ('H', 181, u'VAL', 0.45002647956275577, (146.58800000000002, 217.637, 94.66999999999999)), ('H', 187, u'SER', 0.3986475849611514, (139.854, 231.81, 86.58)), ('H', 200, u'HIS', 0.43343673948737926, (164.254, 214.23899999999998, 94.192)), ('H', 211, u'VAL', 0.40602208864382316, (150.85700000000003, 223.18200000000002, 84.512)), ('L', 8, u'PRO', 0.5882678245319188, (139.969, 201.14399999999998, 115.333)), ('L', 53, u'ASN', 0.6406860598961976, (151.977, 210.49800000000002, 135.65200000000002)), ('L', 58, u'VAL', 0.5483058933361026, (151.945, 215.88400000000001, 127.67799999999998)), ('L', 64, u'ASP', 0.6341446073398928, (145.035, 206.30100000000002, 131.015)), ('L', 79, u'GLN', 0.40360362108012726, (140.52800000000002, 219.04399999999998, 118.651)), ('L', 81, u'GLU', 0.43822329431940227, (144.965, 217.265, 115.17199999999998)), ('L', 115, u'THR', 0.4364403577507257, (134.187, 217.067, 94.21300000000001)), ('L', 120, u'PRO', 0.45678375813104827, (143.411, 214.142, 82.595)), ('L', 135, u'CYS', 0.4185860788010181, (139.47299999999998, 209.102, 90.05799999999999)), ('L', 139, u'ASP', 0.48481401762476417, (136.157, 217.70399999999998, 99.592)), ('L', 153, u'SER', 0.5296553945636103, (130.08200000000002, 202.403, 80.093)), ('L', 162, u'THR', 0.422954807034759, (141.73899999999998, 204.136, 101.55199999999999)), ('L', 169, u'SER', 0.5082315532174005, (140.477, 225.28, 108.205)), ('L', 170, u'ASN', 0.5337890648644098, (137.52700000000002, 222.812, 107.73)), ('L', 172, u'LYS', 0.5012124551274231, (136.72899999999998, 217.907, 104.705)), ('L', 173, u'TYR', 0.531608498770972, (138.38200000000003, 214.57399999999998, 103.584)), ('L', 184, u'GLU', 0.4021619447867394, (147.23899999999998, 201.134, 73.084)), ('L', 202, u'THR', 0.278175947226336, (123.163, 214.642, 94.007)), ('C', 27, u'ALA', 0.6069321859872956, (232.738, 217.424, 180.661)), ('C', 35, u'GLY', 0.741307596328983, (214.076, 217.68800000000002, 183.059)), ('C', 44, u'ARG', 0.812282882522347, (194.701, 217.24499999999998, 187.70899999999997)), ('C', 59, u'PHE', 0.7814724902309486, (220.92100000000002, 213.048, 189.303)), ('C', 61, u'ASN', 0.809024224495283, (224.929, 213.077, 183.95700000000002)), ('C', 62, u'VAL', 0.7760477525705346, (224.03, 215.89600000000002, 181.526)), ('C', 81, u'ASN', 0.6432378155843098, (229.309, 224.092, 168.286)), ('C', 110, u'LEU', 0.7152402506995422, (221.91, 216.206, 158.33)), ('C', 126, u'VAL', 0.6802242784060315, (209.95800000000003, 229.491, 164.849)), ('C', 129, u'LYS', 0.7062453476502928, (211.74599999999998, 222.18200000000002, 157.94899999999998)), ('C', 132, u'GLU', 0.6410405642713427, (217.879, 218.147, 150.984)), ('C', 136, u'CYS', 0.6515683229837734, (230.26399999999998, 224.222, 154.772)), ('C', 169, u'GLU', 0.6535812288962168, (207.48600000000002, 223.20899999999997, 156.771)), ('C', 187, u'LYS', 0.6718012795483759, (220.101, 236.76299999999998, 181.17)), ('C', 191, u'GLU', 0.6705917093004868, (215.165, 224.437, 178.56)), ('C', 200, u'TYR', 0.6020435340273246, (206.31, 211.76999999999998, 164.937)), ('C', 216, u'LEU', 0.7226309692057982, (221.93, 224.732, 186.46200000000002)), ('C', 217, u'PRO', 0.7453860301096676, (219.48200000000003, 225.792, 189.319)), ('C', 235, u'ILE', 0.6646520285273619, (215.568, 210.262, 163.99800000000002)), ('C', 263, u'ALA', 0.6457307120195231, (227.532, 230.289, 174.74599999999998)), ('C', 270, u'LEU', 0.7234721196818449, (215.33200000000002, 210.629, 178.21399999999997)), ('C', 285, u'ILE', 0.7788637036443417, (203.251, 219.978, 188.71399999999997)), ('C', 298, u'GLU', 0.7134542623492186, (210.637, 203.45800000000003, 195.64299999999997)), ('C', 315, u'THR', 0.6894119185883999, (208.641, 198.319, 197.90200000000002)), ('C', 316, u'SER', 0.7570683550491013, (209.665, 195.677, 195.38700000000003)), ('C', 319, u'ARG', 0.799408952501097, (215.411, 187.963, 191.94299999999998)), ('C', 544, u'ASN', 0.6436869213216055, (215.339, 165.899, 178.846)), ('C', 545, u'GLY', 0.7092006491188335, (213.19, 166.65200000000002, 181.99)), ('C', 547, u'THR', 0.7700167079508399, (213.909, 173.791, 180.117)), ('C', 554, u'GLU', 0.7932555535609019, (226.153, 168.836, 191.721)), ('C', 555, u'SER', 0.7689097140037343, (224.023, 166.507, 193.899)), ('C', 562, u'PHE', 0.7959803609596302, (216.58, 154.404, 183.778)), ('C', 582, u'LEU', 0.7245018613865429, (225.36, 161.26999999999998, 182.475)), ('C', 587, u'ILE', 0.8379024773412385, (217.975, 172.306, 189.761)), ('C', 592, u'PHE', 0.7912286491329046, (214.412, 185.411, 195.383)), ('C', 597, u'VAL', 0.6867302768564209, (212.605, 199.69899999999998, 203.281)), ('C', 598, u'ILE', 0.7161600874527957, (212.963, 200.568, 206.978)), ('C', 614, u'ASP', 0.747606139524408, (215.347, 185.52200000000002, 203.078)), ('C', 657, u'ASN', 0.7808526627671613, (225.30100000000002, 194.93, 221.156)), ('C', 666, u'ILE', 0.6965882586150086, (211.865, 193.634, 211.379)), ('C', 693, u'ILE', 0.6796610312127456, (220.46800000000002, 201.15800000000002, 214.43)), ('C', 697, u'MET', 0.744085602836863, (214.172, 194.064, 221.086)), ('C', 699, u'LEU', 0.7289769305120487, (210.721, 192.931, 226.524)), ('C', 705, u'VAL', 0.5756938945710803, (209.71299999999997, 191.02100000000002, 243.07)), ('C', 712, u'ILE', 0.6529122387327458, (203.653, 191.73999999999998, 252.071)), ('C', 733, u'LYS', 0.7171847025611746, (177.21399999999997, 202.039, 204.30200000000002)), ('C', 736, u'VAL', 0.7255032307322846, (176.874, 199.411, 194.259)), ('C', 747, u'THR', 0.7796320507378875, (171.561, 197.768, 176.678)), ('C', 748, u'GLU', 0.7999417870943089, (173.86700000000002, 195.985, 174.154)), ('C', 781, u'VAL', 0.5839355956010681, (176.118, 199.934, 221.01399999999998)), ('C', 793, u'PRO', 0.7900666152772704, (171.757, 222.835, 235.77599999999998)), ('C', 795, u'LYS', 0.7792987673562312, (176.71899999999997, 220.64399999999998, 238.74399999999997)), ('C', 805, u'ILE', 0.5876928601872627, (182.64299999999997, 215.21399999999997, 228.6)), ('C', 811, u'LYS', 0.7145004941131757, (178.065, 223.883, 219.72)), ('C', 823, u'PHE', 0.6589078364142038, (185.023, 214.39200000000002, 215.511)), ('C', 858, u'LEU', 0.7658500241802478, (178.531, 203.39700000000002, 193.442)), ('C', 873, u'TYR', 0.6120617961235816, (172.494, 208.732, 223.319)), ('C', 880, u'GLY', 0.5437933213788659, (172.38500000000002, 208.183, 233.853)), ('C', 881, u'THR', 0.5919857942107543, (175.948, 207.23499999999999, 234.935)), ('C', 901, u'GLN', 0.5906265578650197, (178.14399999999998, 206.63299999999998, 244.181)), ('C', 909, u'ILE', 0.6118219748019889, (186.901, 197.034, 244.437)), ('C', 913, u'GLN', 0.6172963126224154, (184.228, 203.689, 251.73499999999999)), ('C', 920, u'GLN', 0.7302620239102063, (187.606, 213.194, 248.412)), ('C', 938, u'LEU', 0.6796825933173455, (193.96, 213.74499999999998, 221.353)), ('C', 962, u'LEU', 0.6159242340285472, (187.011, 198.955, 192.758)), ('C', 965, u'GLN', 0.7017717774644064, (189.504, 198.363, 187.94899999999998)), ('C', 977, u'LEU', 0.7116682498214295, (182.795, 199.584, 176.72299999999998)), ('C', 982, u'SER', 0.7202051217214448, (181.58100000000002, 202.15, 168.303)), ('C', 987, u'PRO', 0.7864133595755272, (180.076, 189.377, 166.17899999999997)), ('C', 988, u'GLU', 0.7672897442589989, (183.51899999999998, 190.671, 167.284)), ('C', 1001, u'LEU', 0.6502758963453119, (182.21499999999997, 190.74599999999998, 187.696)), ('C', 1008, u'VAL', 0.6271688739083691, (181.931, 192.314, 197.893)), ('C', 1012, u'LEU', 0.613384993275938, (181.67399999999998, 190.77399999999997, 203.727)), ('C', 1013, u'ILE', 0.6479945521599784, (184.82500000000002, 189.767, 205.67499999999998)), ('C', 1026, u'ALA', 0.6143770900082466, (178.155, 196.92200000000003, 223.04399999999998)), ('C', 1051, u'SER', 0.5367513660104374, (183.597, 204.54899999999998, 232.466)), ('C', 1060, u'VAL', 0.5454278665549037, (182.88500000000002, 204.85700000000003, 220.24099999999999)), ('C', 1068, u'VAL', 0.622263128590142, (195.491, 202.335, 240.39800000000002)), ('C', 1077, u'THR', 0.629591233342651, (202.89100000000002, 189.509, 257.742)), ('C', 1080, u'ALA', 0.6679380649097051, (196.96800000000002, 184.136, 261.587)), ('C', 1087, u'ALA', 0.634401640228269, (194.354, 181.012, 266.041)), ('C', 1100, u'THR', 0.6214859349992057, (207.3, 194.51, 267.77799999999996)), ('C', 1105, u'THR', 0.6619741604936179, (194.401, 196.44, 257.42499999999995)), ('C', 1128, u'VAL', 0.7056036034696125, (197.88100000000003, 173.546, 262.28799999999995)), ('C', 1135, u'ASN', 0.6938318563570073, (200.129, 188.60299999999998, 269.676)), ('C', 1141, u'LEU', 0.7006126471168286, (183.756, 194.576, 275.572)), ('C', 1201, u'NAG', 0.7969869913885063, (228.781, 211.87, 186.854)), ('N', 3, u'BMA', 0.6054361701010378, (145.88500000000002, 194.373, 246.67499999999998))]
data['rota'] = [('A', '  58 ', 'PHE', 0.0032414452814988094, (196.16799999999995, 143.768, 193.681)), ('A', '  63 ', 'THR', 0.09927342081716402, (195.84699999999995, 132.593, 185.46)), ('A', ' 214 ', 'ARG', 0.0, (203.54399999999998, 127.483, 194.984)), ('A', ' 403 ', 'ARG', 0.10198761812545425, (177.22, 182.958, 141.972)), ('A', ' 418 ', 'ILE', 0.26061287055566396, (174.35299999999995, 190.638, 149.072)), ('A', ' 424 ', 'LYS', 0.2613839600916865, (170.41299999999998, 187.84599999999995, 155.75499999999994)), ('A', ' 460 ', 'ASN', 0.1134170283408249, (170.41399999999996, 196.445, 156.014)), ('A', ' 463 ', 'PRO', 0.06654719677280915, (167.92299999999997, 188.286, 160.223)), ('A', ' 546 ', 'LEU', 0.005337689030488755, (164.088, 166.04, 175.231)), ('A', ' 702 ', 'GLU', 0.05185248601756814, (170.976, 159.306, 234.473)), ('A', ' 716 ', 'THR', 0.21373260172248645, (183.11799999999997, 167.903, 253.72899999999998)), ('A', ' 726 ', 'ILE', 0.14825593598028053, (194.98599999999993, 175.04999999999995, 224.529)), ('A', ' 739 ', 'THR', 0.09320693187019956, (203.63899999999995, 188.026, 189.889)), ('A', ' 752 ', 'LEU', 0.06613998109863453, (199.37699999999995, 189.88199999999995, 179.595)), ('A', ' 878 ', 'LEU', 0.1681382318303888, (204.473, 183.173, 235.75999999999996)), ('A', ' 887 ', 'THR', 0.07979454577017739, (198.368, 192.962, 241.561)), ('A', ' 973 ', 'ILE', 0.19459910603188166, (197.622, 173.109, 175.573)), ('B', '  32 ', 'PHE', 0.02039844170970522, (141.047, 195.02399999999997, 185.79199999999994)), ('B', '  66 ', 'HIS', 0.05708031972147268, (128.016, 198.358, 170.038)), ('B', ' 303 ', 'LEU', 0.14998718760440888, (160.682, 189.495, 196.222)), ('B', ' 619 ', 'GLU', 0.2862299293380932, (163.94899999999996, 214.697, 188.84699999999998)), ('B', ' 675 ', 'GLN', 0.26533400725191286, (149.56699999999995, 205.36199999999997, 211.10299999999995)), ('B', '1094 ', 'VAL', 0.22888272195864004, (173.10199999999995, 203.52, 253.073)), ('H', '  33 ', 'TRP', 0.13719942817231895, (171.472, 201.861, 126.508)), ('H', '  37 ', 'VAL', 0.16831020940718033, (162.73699999999994, 199.067, 117.57399999999998)), ('H', '  97 ', 'ARG', 0.005860248447817645, (165.24, 194.37, 129.91099999999997)), ('H', ' 100C', 'TYR', 0.1554742925177945, (159.958, 200.626, 137.387)), ('H', ' 100D', 'TYR', 0.21107234863018542, (157.152, 197.989, 136.942)), ('H', ' 170 ', 'LEU', 0.2702743784060814, (153.213, 200.823, 93.63)), ('H', ' 200 ', 'HIS', 0.1807521160075029, (164.254, 214.239, 94.19199999999996)), ('L', '  21 ', 'ILE', 0.2904376821741177, (139.281, 203.809, 124.829)), ('L', '  23 ', 'CYS', 0.23663788021220403, (144.174, 198.38799999999995, 124.63099999999999)), ('L', '  49 ', 'TYR', 0.16364641024693385, (154.974, 207.74, 132.82999999999996)), ('L', ' 117 ', 'THR', 0.04000602558903508, (136.662, 214.079, 88.31)), ('L', ' 118 ', 'LEU', 0.05713770346975655, (139.695, 212.099, 86.963)), ('L', ' 194 ', 'CYS', 0.13233933194821487, (132.937, 209.005, 87.075)), ('L', ' 211 ', 'GLU', 0.02012746056675972, (143.28299999999996, 209.688, 76.64599999999999)), ('C', ' 112 ', 'SER', 0.2919213279180739, (221.07899999999995, 215.04099999999994, 152.139)), ('C', ' 130 ', 'VAL', 0.006583094002520424, (212.78699999999995, 218.891, 156.2)), ('C', ' 266 ', 'TYR', 0.04790937052882797, (223.816, 220.927, 178.69999999999993)), ('C', ' 303 ', 'LEU', 0.09349767946750438, (202.515, 204.27, 198.85799999999998)), ('C', ' 324 ', 'GLU', 0.041476661084214966, (224.46699999999996, 182.58, 180.88799999999995)), ('C', ' 709 ', 'ASN', 0.051211044665709846, (207.629, 183.917, 252.84099999999998)), ('C', ' 760 ', 'CYS', 0.10509967695789663, (174.093, 191.04999999999998, 189.859)), ('C', ' 790 ', 'LYS', 0.0, (169.63899999999995, 214.888, 231.315)), ('C', ' 804 ', 'GLN', 0.05887977374550422, (184.79199999999994, 218.374, 229.242)), ('C', '1081 ', 'ILE', 0.08240346616741673, (197.856, 185.31000000000006, 265.13999999999993)), ('C', '1082 ', 'CYS', 0.06708576965499334, (197.661, 183.21800000000005, 268.361))]
data['omega'] = [('H', ' 147 ', 'PRO', None, (164.319, 204.979, 95.45599999999997)), ('H', ' 149 ', 'PRO', None, (161.26499999999993, 207.685, 100.962)), ('L', ' 142 ', 'PRO', None, (131.186, 213.059, 106.26399999999998))]
data['rama'] = [('A', ' 100 ', 'ILE', 0.043877762613875215, (213.17099999999994, 126.255, 178.43599999999998)), ('A', ' 137 ', 'ASN', 0.026358884111580556, (203.114, 125.68399999999997, 165.55899999999994)), ('A', ' 582 ', 'LEU', 0.02729156141619851, (148.856, 160.582, 177.127)), ('A', ' 604 ', 'THR', 0.02139725365530274, (193.92699999999996, 148.902, 215.49799999999993)), ('A', ' 710 ', 'ASN', 0.04529756345016293, (164.534, 170.546, 254.031)), ('B', ' 207 ', 'HIS', 0.011908328917474861, (134.693, 180.441, 176.66399999999996)), ('B', ' 618 ', 'THR', 0.04471256279248322, (162.97399999999993, 217.81199999999995, 190.84299999999993)), ('B', '1085 ', 'GLY', 0.07057579187425012, (183.29399999999995, 213.152, 267.933)), ('C', '  46 ', 'SER', 0.031162801309040436, (195.774, 218.085, 193.974)), ('C', ' 121 ', 'ASN', 0.03922050440587443, (214.09599999999995, 230.018, 165.54)), ('C', ' 187 ', 'LYS', 0.003635603780999439, (220.10099999999994, 236.763, 181.16999999999993)), ('C', ' 614 ', 'ASP', 0.04414973895933595, (215.347, 185.522, 203.078)), ('H', '  62 ', 'SER', 0.04834036970016027, (161.05499999999995, 187.791, 112.45099999999998)), ('L', '  68 ', 'GLY', 0.051318152080376774, (142.258, 192.925, 134.407)), ('L', ' 207 ', 'VAL', 0.08063104046384612, (134.191, 216.208, 82.63))]
data['cablam'] = [('A', '33', 'THR', 'check CA trace,carbonyls, peptide', 'bend\n--S--', (200.5, 142.4, 195.8)), ('A', '46', 'SER', 'check CA trace,carbonyls, peptide', 'bend\n--S-E', (209.0, 159.7, 200.3)), ('A', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\n-SSSE', (195.5, 144.9, 177.7)), ('A', '101', 'ILE', 'check CA trace,carbonyls, peptide', ' \nTS--E', (211.4, 129.6, 178.3)), ('A', '111', 'ASP', 'check CA trace,carbonyls, peptide', 'beta bridge\n-SB--', (200.7, 132.9, 160.3)), ('A', '141', 'LEU', 'check CA trace,carbonyls, peptide', ' \n-----', (212.0, 124.5, 171.7)), ('A', '188', 'ASN', 'check CA trace,carbonyls, peptide', ' \n----E', (214.3, 133.5, 191.7)), ('A', '198', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\nEETTE', (200.0, 153.6, 170.7)), ('A', '214', 'ARG', 'check CA trace,carbonyls, peptide', 'turn\n-TTS-', (203.5, 127.5, 195.0)), ('A', '282', 'ASN', 'check CA trace,carbonyls, peptide', 'turn\n-TTS-', (216.3, 155.8, 198.8)), ('A', '291', 'CYS', 'check CA trace,carbonyls, peptide', 'turn\nEETTS', (192.5, 152.6, 195.1)), ('A', '463', 'PRO', 'check CA trace,carbonyls, peptide', 'turn\n--TT-', (167.9, 188.3, 160.2)), ('A', '464', 'PHE', 'check CA trace,carbonyls, peptide', 'turn\n-TT--', (165.5, 186.6, 157.7)), ('A', '475', 'ALA', 'check CA trace,carbonyls, peptide', ' \nEE-SS', (173.7, 207.6, 145.5)), ('A', '502', 'GLY', 'check CA trace,carbonyls, peptide', ' \nT--ST', (184.6, 179.1, 134.4)), ('A', '503', 'VAL', 'check CA trace,carbonyls, peptide', 'bend\n--STT', (184.2, 178.0, 138.1)), ('A', '530', 'SER', 'check CA trace,carbonyls, peptide', ' \n-----', (160.3, 154.0, 169.2)), ('A', '603', 'ASN', 'check CA trace,carbonyls, peptide', 'turn\n-TTT-', (196.9, 151.0, 214.1)), ('A', '604', 'THR', 'check CA trace,carbonyls, peptide', 'turn\nTTT-S', (193.9, 148.9, 215.5)), ('A', '614', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\nEET--', (170.5, 159.0, 201.9)), ('A', '617', 'CYS', 'check CA trace,carbonyls, peptide', 'turn\n--TT-', (168.3, 149.8, 202.0)), ('A', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (177.3, 158.9, 212.0)), ('A', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (174.3, 161.3, 212.4)), ('A', '981', 'LEU', ' alpha helix', 'helix\nHHHHH', (206.7, 180.1, 175.1)), ('A', '982', 'SER', ' alpha helix', 'helix\nHHHHS', (208.5, 177.5, 172.9)), ('A', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'bend\nTTSSS', (188.6, 178.8, 233.3)), ('A', '1092', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (176.7, 184.3, 255.2)), ('A', '1098', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\nEESSS', (173.2, 166.3, 262.3)), ('A', '1101', 'HIS', 'check CA trace,carbonyls, peptide', 'bend\nSSS-E', (171.4, 169.7, 267.2)), ('A', '1109', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\nTTS--', (182.6, 173.2, 253.0)), ('A', '34', 'ARG', 'check CA trace', ' \n-S---', (202.8, 142.4, 192.7)), ('A', '137', 'ASN', 'check CA trace', 'bend\n--SS-', (203.1, 125.7, 165.6)), ('A', '138', 'ASP', 'check CA trace', 'bend\n-SS--', (203.4, 126.2, 169.3)), ('A', '215', 'ASP', 'check CA trace', 'bend\nTTS--', (202.9, 131.2, 194.1)), ('A', '484', 'GLU', 'check CA trace', ' \nT--BT', (166.6, 205.3, 136.3)), ('A', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (168.1, 159.7, 183.0)), ('A', '1125', 'ASN', 'check CA trace', 'strand\nEEETT', (158.8, 186.8, 263.5)), ('B', '31', 'SER', 'check CA trace,carbonyls, peptide', ' \nEE-TT', (140.4, 196.0, 182.1)), ('B', '41', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nSSSEE', (152.7, 174.6, 177.0)), ('B', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\n-SS-E', (150.3, 193.8, 169.1)), ('B', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEESSS', (146.9, 194.1, 156.2)), ('B', '113', 'LYS', ' alpha helix', 'bend\nSSSS-', (146.5, 191.2, 146.4)), ('B', '114', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nSSS-E', (147.7, 190.1, 149.9)), ('B', '122', 'ASN', 'check CA trace,carbonyls, peptide', ' \nEE-SS', (129.0, 177.2, 161.4)), ('B', '123', 'ALA', 'check CA trace,carbonyls, peptide', 'bend\nE-SS-', (127.9, 175.5, 164.6)), ('B', '133', 'PHE', ' beta sheet', ' \nES---', (140.0, 187.6, 149.6)), ('B', '206', 'LYS', ' beta sheet', ' \nEE--B', (138.1, 181.0, 178.4)), ('B', '545', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\n-SS-E', (188.5, 215.1, 174.3)), ('B', '617', 'CYS', 'check CA trace,carbonyls, peptide', 'turn\n--TT-', (162.8, 216.4, 194.4)), ('B', '618', 'THR', 'check CA trace,carbonyls, peptide', 'turn\n-TT--', (163.0, 217.8, 190.8)), ('B', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (164.7, 205.6, 206.0)), ('B', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (168.0, 207.2, 206.9)), ('B', '891', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nGSSS-', (181.2, 169.4, 239.7)), ('B', '1036', 'GLN', 'check CA trace,carbonyls, peptide', ' \nSS---', (174.8, 183.6, 238.3)), ('B', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'turn\nTTTSS', (171.7, 188.1, 230.9)), ('B', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (180.5, 212.0, 270.3)), ('B', '1092', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (176.6, 197.1, 253.9)), ('B', '34', 'ARG', 'check CA trace', ' \nTT---', (141.9, 190.3, 183.1)), ('B', '112', 'SER', 'check CA trace', 'bend\nSSSSS', (142.8, 191.2, 147.5)), ('B', '132', 'GLU', 'check CA trace', 'bend\nEES--', (143.8, 187.0, 148.9)), ('B', '220', 'PHE', 'check CA trace', ' \n-S---', (140.3, 186.7, 187.9)), ('B', '293', 'LEU', 'check CA trace', 'helix-3\nGGGSH', (151.3, 198.7, 187.4)), ('B', '310', 'LYS', 'check CA trace', 'bend\n--SEE', (156.3, 195.7, 206.7)), ('B', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (177.0, 211.5, 179.5)), ('B', '856', 'ASN', 'check CA trace', 'bend\n--SSE', (171.0, 168.6, 191.6)), ('H', '56', 'SER', 'check CA trace,carbonyls, peptide', ' \nT----', (172.1, 189.4, 128.4)), ('H', '66', 'ARG', ' alpha helix', 'turn\nTTT--', (169.3, 187.6, 111.4)), ('H', '82B', 'SER', 'check CA trace,carbonyls, peptide', ' ', ('', '', '')), ('H', '87', 'THR', 'check CA trace,carbonyls, peptide', ' \nGG-S-', (161.3, 197.7, 105.1)), ('H', '97', 'ARG', 'check CA trace,carbonyls, peptide', ' \n---SS', (165.2, 194.4, 129.9)), ('H', '104', 'GLY', 'check CA trace,carbonyls, peptide', ' \n---S-', (164.5, 209.8, 117.2)), ('H', '105', 'GLN', 'check CA trace,carbonyls, peptide', 'bend\n--S-B', (163.8, 210.4, 113.4)), ('H', '61', 'ASP', 'check CA trace', 'turn\nB-TTT', (158.8, 186.1, 115.0)), ('H', '62', 'SER', 'check CA trace', 'turn\n-TTTT', (161.1, 187.8, 112.5)), ('H', '148', 'GLU', 'check CA trace', ' \nBS---', (160.9, 206.3, 98.9)), ('L', '17', 'GLN', 'check CA trace,carbonyls, peptide', ' \nTT-EE', (134.0, 216.8, 124.1)), ('L', '25', 'GLY', 'check CA trace,carbonyls, peptide', ' \nEE--T', (146.0, 191.8, 125.7)), ('L', '29', 'ALA', 'check CA trace,carbonyls, peptide', 'bend\nTTSS-', (151.2, 189.7, 134.6)), ('L', '30', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\nTSS--', (152.1, 192.8, 136.8)), ('L', '51', 'ASN', 'check CA trace,carbonyls, peptide', 'turn\nBTTTB', (151.3, 204.5, 135.2)), ('L', '95A', 'SER', 'check CA trace,carbonyls, peptide', ' ', ('', '', '')), ('L', '96', 'TRP', 'check CA trace,carbonyls, peptide', 'strand\nTSEEE', (157.9, 193.4, 124.9)), ('L', '165', 'PRO', 'check CA trace,carbonyls, peptide', ' \n-B---', (141.8, 212.4, 106.8)), ('L', '169', 'SER', 'check CA trace,carbonyls, peptide', 'bend\n-SSS-', (140.5, 225.3, 108.2)), ('L', '171', 'ASN', 'check CA trace,carbonyls, peptide', ' \nSS--E', (136.9, 219.1, 108.4)), ('L', '200', 'GLY', 'check CA trace,carbonyls, peptide', 'bend\n-SS--', (124.5, 214.3, 100.7)), ('L', '208', 'ALA', 'check CA trace,carbonyls, peptide', ' \n-----', (135.8, 214.0, 79.9)), ('L', '12', 'SER', 'check CA trace', 'strand\nEEEE-', (134.6, 209.7, 118.6)), ('L', '18', 'ARG', 'check CA trace', 'strand\nT-EEE', (135.1, 213.3, 125.6)), ('L', '67', 'SER', 'check CA trace', 'strand\nEEETT', (143.1, 196.6, 135.1)), ('L', '110', 'PRO', 'check CA trace', 'bend\n--S--', (128.7, 218.4, 108.4)), ('C', '46', 'SER', 'check CA trace,carbonyls, peptide', 'bend\n-SS--', (195.8, 218.1, 194.0)), ('C', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\n--SEE', (214.6, 208.3, 172.2)), ('C', '97', 'LYS', 'check CA trace,carbonyls, peptide', 'turn\n--TTS', (222.4, 235.3, 176.5)), ('C', '102', 'ARG', 'check CA trace,carbonyls, peptide', ' \n---B-', (219.2, 229.2, 165.4)), ('C', '106', 'PHE', ' beta sheet', ' \n-B-SS', (218.0, 216.1, 163.7)), ('C', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\n-SSSS', (220.4, 210.9, 160.5)), ('C', '113', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nSSSS-', (220.0, 211.6, 150.8)), ('C', '123', 'ALA', 'check CA trace,carbonyls, peptide', 'turn\nEETTE', (213.8, 236.4, 163.3)), ('C', '231', 'ILE', ' beta sheet', ' \nE----', (206.0, 213.8, 160.5)), ('C', '536', 'ASN', 'check CA trace,carbonyls, peptide', 'bend\n--SSE', (226.7, 177.3, 191.5)), ('C', '570', 'ALA', 'check CA trace,carbonyls, peptide', 'turn\nETTTE', (205.0, 169.4, 195.1)), ('C', '614', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nEES--', (215.3, 185.5, 203.1)), ('C', '616', 'ASN', 'check CA trace,carbonyls, peptide', ' \nS--SS', (221.7, 184.8, 201.6)), ('C', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (211.9, 193.6, 211.4)), ('C', '709', 'ASN', 'check CA trace,carbonyls, peptide', 'turn\n--TTE', (207.6, 183.9, 252.8)), ('C', '1036', 'GLN', 'check CA trace,carbonyls, peptide', ' \nSS---', (181.0, 198.2, 237.3)), ('C', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'bend\nTTSSS', (187.8, 198.2, 231.3)), ('C', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (182.0, 205.5, 212.9)), ('C', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (195.3, 182.1, 274.1)), ('C', '1109', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\nSSS--', (195.1, 200.5, 250.9)), ('C', '34', 'ARG', 'check CA trace', ' \n-S---', (215.6, 219.1, 186.3)), ('C', '112', 'SER', 'check CA trace', 'bend\nSSSSS', (221.1, 215.0, 152.1)), ('C', '220', 'PHE', 'check CA trace', ' \nSS---', (212.2, 221.6, 190.3)), ('C', '310', 'LYS', 'check CA trace', 'bend\n--SEE', (207.7, 205.7, 210.3)), ('C', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (216.2, 178.9, 184.9)), ('C', '856', 'ASN', 'check CA trace', 'bend\n--SSE', (180.4, 204.9, 188.5))]
handle_read_draw_probe_dots_unformatted("/home/ccpem/agnel/gisaid/countries_seq/structure_data/emdb/EMD-23246/7laa/Model_validation_1/validation_cootdata/molprobity_probe7laa_0.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
