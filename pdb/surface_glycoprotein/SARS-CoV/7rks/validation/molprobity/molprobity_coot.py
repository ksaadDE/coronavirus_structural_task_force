# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('L', ' 106A', 'LEU', 0.034527622478532465, (33.45789, -14.58993, -8.57303)), ('L', ' 151 ', 'ASP', 0.03043747288965952, (65.86644, -23.61378, 7.3501900000000004)), ('M', ' 151 ', 'ASP', 0.03996201938081704, (7.38677, -21.18333, -40.79574))]
data['omega'] = [('H', ' 147 ', 'PRO', None, (54.435750000000006, 9.59843, 9.91136)), ('H', ' 149 ', 'PRO', None, (51.12722, 9.461779999999997, 4.60951)), ('I', ' 147 ', 'PRO', None, (17.425060000000016, 12.60054, -40.01414)), ('I', ' 149 ', 'PRO', None, (20.712570000000007, 12.10688, -34.76057)), ('L', ' 141 ', 'PRO', None, (40.62576, -15.718100000000009, -6.61143)), ('M', ' 141 ', 'PRO', None, (30.77954000000001, -14.554579999999996, -24.7293)), ('R', ' 470 ', 'PRO', None, (-6.84643, 8.3992, -26.61174)), ('S', ' 470 ', 'PRO', None, (78.57284, 7.87323, -4.27097))]
data['rota'] = [('H', ' 150 ', 'VAL', 0.28383519947152686, (54.36672, 7.89946, 1.20811)), ('I', '  30 ', 'SER', 0.06805927062448834, (53.73512000000001, 21.99347, -44.11097)), ('I', ' 150 ', 'VAL', 0.029439089216410877, (17.44548, 10.14903, -31.48425)), ('I', ' 182 ', 'VAL', 0.250838005556847, (14.105270000000008, -2.14248, -20.08098)), ('I', ' 186 ', 'SER', 0.010642402048688382, (8.487950000000007, -9.67731, -13.24009)), ('L', '  77 ', 'SER', 0.161275713784257, (21.648460000000007, -11.018390000000002, -10.85753)), ('L', ' 110 ', 'LYS', 0.14396844795922228, (40.45368, -18.371480000000002, -11.060890000000002)), ('L', ' 162 ', 'THR', 0.2299217193715918, (49.382440000000045, -7.020439999999999, 3.8013500000000002)), ('L', ' 163 ', 'THR', 0.008087669993983582, (45.87079, -7.842609999999999, 3.0383500000000003)), ('L', ' 201 ', 'THR', 0.14565537053049082, (50.81448000000004, -24.046380000000003, -2.52314)), ('M', '   1 ', 'GLN', 0.026886836985815014, (48.366780000000006, -3.60703, -55.888180000000006)), ('M', '  77 ', 'SER', 0.14102108661535234, (49.42023, -9.83235, -20.34297)), ('M', ' 192 ', 'SER', 0.026630574788392355, (10.96651, -17.685280000000013, -36.01559)), ('M', ' 200 ', 'SER', 0.031060389011553335, (24.05768, -23.6785, -29.67129)), ('R', ' 377 ', 'LEU', 0.2018497379052625, (5.1233699999999995, 20.74425, 22.42593)), ('R', ' 395 ', 'ARG', 0.004998436002658912, (9.540000000000003, 6.186840000000001, 1.7405600000000003)), ('R', ' 467 ', 'CYS', 0.26942534943216834, (-5.577400000000003, 16.93325, -26.68623)), ('R', ' 474 ', 'CYS', 0.09684643591754138, (-1.5831399999999984, 12.217330000000004, -24.78317)), ('S', ' 354 ', 'VAL', 0.12848180432158354, (74.42944, 5.34355, -51.06983)), ('S', ' 426 ', 'ARG', 0.13296913316181003, (74.57659, -5.66922, -34.16045)), ('S', ' 433 ', 'THR', 0.04529554851686453, (80.37836000000006, -10.29045, -23.83471)), ('S', ' 467 ', 'CYS', 0.10038094971675414, (77.3643, 16.5044, -4.67377))]
data['cbeta'] = []
data['probe'] = [(' I 135  THR  N  ', ' I 186  SER  HG ', -1.233, (10.629, -11.692, -14.156)), (' H 135  THR  N  ', ' H 186  SER  HG ', -1.104, (61.532, -11.859, -19.426)), (' S 467  CYS  SG ', ' S 468  THR  N  ', -0.959, (77.233, 14.0, -5.289)), (' M 142  GLY  HA3', ' M 172  TYR  HD2', -0.917, (30.01, -9.493, -27.43)), (' R 358  SER  HB3', ' R 360  PHE  CE1', -0.898, (-3.053, 1.166, 16.251)), (' H 126  PRO  HG3', ' H 138  LEU  HB3', -0.87, (63.95, -5.42, -11.359)), (' R 321  ASN  ND2', ' R 347  ASN  O  ', -0.808, (-10.217, 23.947, 20.863)), (' H 169  VAL HG11', ' L 160  GLU  HB3', -0.772, (53.481, -6.508, 8.125)), (' I 135  THR  N  ', ' I 186  SER  OG ', -0.754, (10.264, -11.807, -13.043)), (' R 489  ILE  H  ', ' R 489  ILE HD12', -0.75, (5.242, -8.491, 0.104)), (' H 199  ASN  HB2', ' H 206  LYS  NZ ', -0.739, (57.496, 11.803, -3.964)), (' R 358  SER  HB3', ' R 360  PHE  HE1', -0.732, (-3.816, 0.659, 16.633)), (' L 108  GLN  HG2', ' L 109  PRO  HD2', -0.727, (39.35, -13.832, -15.569)), (' H 135  THR  N  ', ' H 186  SER  OG ', -0.716, (62.229, -11.845, -18.575)), (' R 467  CYS  SG ', ' R 468  THR  N  ', -0.709, (-5.292, 14.586, -26.257)), (' I 197  ASN  ND2', ' I 208  ASP  OD1', -0.708, (9.14, 11.216, -22.181)), (' H 197  ASN  ND2', ' H 208  ASP  OD1', -0.686, (63.264, 9.926, -8.633)), (' M 142  GLY  HA3', ' M 172  TYR  CD2', -0.676, (28.91, -9.196, -27.183)), (' R 326  GLY  O  ', ' R 330  ASN  HB2', -0.656, (-9.8, 8.867, 14.65)), (' H  11  VAL HG12', ' H 110  THR  HB ', -0.653, (48.015, 9.379, 12.223)), (' L   3  VAL HG12', ' L  26  SER  HB3', -0.65, (22.432, -11.38, 20.368)), (' H 199  ASN  HB2', ' H 206  LYS  HZ2', -0.646, (58.015, 11.615, -4.413)), (' M 120  PRO  HD3', ' M 132  LEU HD21', -0.637, (5.453, -9.499, -36.196)), (' L  83  GLU  HB2', ' L 106  VAL HG12', -0.636, (32.032, -8.864, -6.508)), (' I  99  TYR  HB2', ' S 371  ALA  HB1', -0.631, (63.66, 7.851, -49.617)), (' H  13  GLN  HB2', ' H  16  ARG  HE ', -0.622, (51.112, 13.785, 21.839)), (' H 150  VAL HG12', ' H 178  LEU HD21', -0.621, (54.023, 4.763, 1.063)), (' M  77  SER  O  ', ' M  77  SER  OG ', -0.613, (48.885, -7.949, -19.317)), (' I 100G TYR  OH ', ' M  49  LYS  NZ ', -0.609, (58.96, 2.926, -43.608)), (' H  95  GLY  HA3', ' H 100I GLY  O  ', -0.603, (19.767, 8.557, 11.411)), (' H  52  SER  O  ', ' H  71  ARG  NH1', -0.599, (20.41, 16.308, 17.63)), (' I  87  THR HG23', ' I 110  THR  HA ', -0.595, (25.736, 9.16, -44.764)), (' M  19  VAL HG22', ' M  78  LEU HD11', -0.595, (45.684, -11.746, -26.739)), (' H  20  LEU  HG ', ' H  82  MET  HE2', -0.595, (37.921, 13.37, 15.926)), (' R 462  PRO  HD2', ' R 473  ASN  HB3', -0.562, (2.772, 14.757, -26.189)), (' H  40  ALA  HB3', ' H  43  LYS  HB2', -0.558, (39.141, -1.74, 12.939)), (' H  22  CYS  HB3', ' H  78  LEU  HB3', -0.558, (28.814, 16.34, 12.199)), (' S 326  GLY  O  ', ' S 330  ASN  HB2', -0.541, (80.812, 6.127, -46.113)), (' M 120  PRO  HD3', ' M 132  LEU  CD2', -0.534, (5.355, -8.91, -35.585)), (' M  35  TRP  CE2', ' M  73  LEU  HB2', -0.533, (50.203, -6.887, -35.268)), (' S 483  PHE  CE2', ' S 493  PRO  HB3', -0.527, (74.374, -0.318, -29.795)), (' H 100  ASP  OD2', ' H 100C VAL HG23', -0.525, (13.055, -0.527, 19.874)), (' S 322  LEU HD23', ' S 349  VAL HG23', -0.524, (79.642, 14.928, -56.645)), (' L  59  PRO  HG2', ' L  62  PHE  CD2', -0.522, (21.007, -3.362, -5.523)), (' H  34  MET  HG3', ' H  78  LEU HD22', -0.522, (26.222, 14.227, 12.528)), (' L 149  LYS  HE3', ' L 154  PRO  HG3', -0.519, (57.194, -24.581, 9.153)), (' H 100G TYR  OH ', ' L  49  LYS  NZ ', -0.518, (12.114, 3.015, 11.798)), (' L  30  SER  O  ', ' L  52  THR  OG1', -0.516, (10.808, -6.872, 14.593)), (' H  99  TYR  HB2', ' R 371  ALA  HB1', -0.513, (7.962, 8.56, 18.105)), (' I  51  ILE HD11', ' I  54  GLY  HA2', -0.512, (49.005, 18.495, -52.419)), (' I  20  LEU  HG ', ' I  82  MET  HE2', -0.511, (33.86, 15.586, -47.697)), (' H  51  ILE HD11', ' H  54  GLY  HA2', -0.507, (23.005, 17.539, 20.852)), (' H 193  THR HG22', ' H 210  ARG  NH2', -0.505, (71.07, 2.838, -15.19)), (' H  36  TRP  HD1', ' H  69  ILE HD12', -0.502, (28.499, 12.039, 17.464)), (' S 334  PHE  CE2', ' S 386  SER  HB3', -0.502, (76.99, 8.548, -37.359)), (' L 120  PRO  HD3', ' L 132  LEU  CD2', -0.501, (66.446, -11.765, 3.119)), (' H 199  ASN  HB2', ' H 206  LYS  HZ3', -0.501, (57.714, 12.746, -4.065)), (' M  61  ARG  HD2', ' M  76  SER  O  ', -0.501, (50.16, -7.494, -22.238)), (' L 144  VAL  CG1', ' L 195  VAL HG13', -0.497, (49.342, -16.901, -0.535)), (' M  56  ASP  N  ', ' M  56  ASP  OD1', -0.493, (53.128, 8.042, -29.39)), (' I   6  GLU  N  ', ' I   6  GLU  OE1', -0.487, (38.807, 16.49, -37.989)), (' M  25  LEU HD22', ' M  31  TYR  HB2', -0.486, (53.881, -6.679, -48.437)), (' L 108  GLN  HG2', ' L 109  PRO  CD ', -0.485, (38.335, -13.904, -15.572)), (' L 203  GLU  O  ', ' L 204  LYS  HD3', -0.484, (59.033, -21.246, -4.706)), (' S 417  MET  HE1', ' S 503  LEU HD11', -0.484, (64.479, 22.999, -49.343)), (' H 119  PRO  HB3', ' H 145  TYR  HB3', -0.481, (59.45, 5.991, 5.651)), (' R 334  PHE  CE2', ' R 386  SER  HB3', -0.48, (-5.506, 9.305, 6.239)), (' R 395  ARG  HB2', ' R 395  ARG  HE ', -0.479, (11.625, 6.39, 0.069)), (' H 135  THR HG22', ' H 183  THR HG22', -0.478, (58.092, -9.105, -15.802)), (' I  95  GLY  HA3', ' I 100I GLY  O  ', -0.478, (52.093, 9.832, -42.318)), (' R 406  ALA  O  ', ' R 411  LYS  HD3', -0.477, (7.206, 16.263, -3.858)), (' R 425  THR HG21', ' R 495  ARG  HG3', -0.477, (-4.541, 2.218, 5.959)), (' H  11  VAL  HA ', ' H 110  THR  O  ', -0.473, (47.449, 10.607, 14.531)), (' I 123  PRO  HG3', ' I 209  LYS  HE3', -0.47, (2.665, 2.85, -27.322)), (' L 149  LYS  HD2', ' L 194  GLN HE22', -0.468, (58.535, -24.449, 4.917)), (' R 404  VAL  CG2', ' R 442  TYR  HA ', -0.468, (3.243, 9.892, -11.452)), (' H 169  VAL HG11', ' L 160  GLU  CB ', -0.468, (54.245, -6.383, 8.131)), (' R 462  PRO  CD ', ' R 473  ASN  HB3', -0.467, (3.12, 14.757, -25.527)), (' R 489  ILE  CD1', ' R 489  ILE  H  ', -0.467, (5.757, -8.267, 1.047)), (' H  72  ASP  OD2', ' H  75  LYS  HG3', -0.465, (27.669, 27.463, 14.282)), (' H  87  THR HG23', ' H 110  THR  HA ', -0.459, (45.223, 6.252, 13.597)), (' M  83  GLU  HB2', ' M 106  VAL HG12', -0.457, (38.825, -7.11, -24.898)), (' L 117  LEU HD13', ' L 134  CYS  HB2', -0.456, (59.372, -13.815, 0.301)), (' M  61  ARG  HB3', ' M  76  SER  O  ', -0.452, (50.879, -7.405, -23.203)), (' M 166  LYS  HA ', ' M 172  TYR  HD1', -0.451, (28.033, -5.83, -24.017)), (' S 337  VAL  HA ', ' S 387  PHE  HB2', -0.448, (74.058, 9.832, -30.231)), (' I 119  PRO  HB3', ' I 145  TYR  HB3', -0.448, (12.04, 8.56, -35.662)), (' L 149  LYS  HB2', ' L 192  SER  HB2', -0.447, (60.481, -21.9, 4.735)), (' L   6  GLN  NE2', ' L  86  TYR  O  ', -0.446, (26.685, -7.979, 6.985)), (' M 189  ARG  HA ', ' M 189  ARG  HD3', -0.443, (3.515, -19.554, -42.259)), (' R 363  THR  HB ', ' R 422  ALA  HB3', -0.443, (4.349, 4.573, 7.806)), (' M  38  GLN  O  ', ' M  84  ALA  HB1', -0.442, (40.008, -1.514, -31.048)), (' H  36  TRP  CE2', ' H  80  LEU  HB2', -0.441, (32.159, 13.472, 15.814)), (' M  50  LEU HD23', ' M  71  ARG  HB3', -0.44, (53.966, -7.388, -39.455)), (' M  40  PRO  O  ', ' M  41  GLU  HB3', -0.439, (34.361, 2.755, -27.754)), (' L 129  LYS  HA ', ' L 129  LYS  HD3', -0.437, (68.912, -4.459, 11.232)), (' I   6  GLU  HB2', ' I 107  THR HG23', -0.437, (36.048, 15.998, -38.959)), (' R 439  LYS  HG2', ' R 480  ASP  OD1', -0.436, (-7.334, 5.212, -10.455)), (' M  18  SER  OG ', ' M  76  SER  HA ', -0.436, (50.976, -12.259, -23.764)), (' I 181  VAL HG21', ' M 135  LEU HD13', -0.436, (14.926, -5.381, -26.287)), (' S 483  PHE  CD2', ' S 493  PRO  HB3', -0.435, (74.444, -0.743, -29.595)), (' S 406  ALA  O  ', ' S 411  LYS  HD3', -0.434, (64.616, 16.219, -27.473)), (' L  61  ARG  O  ', ' L  75  ILE  HA ', -0.433, (19.219, -8.438, -4.898)), (' H 168  ALA  HA ', ' H 178  LEU  HB3', -0.432, (53.246, 0.169, 2.848)), (' L  25  LEU HD23', ' L  28  HIS  O  ', -0.43, (15.57, -8.803, 17.683)), (' M  61  ARG HH21', ' M  82  ASP  CG ', -0.43, (46.538, -4.25, -23.556)), (' H 125  ALA  HB3', ' H 214  LYS  HG3', -0.429, (69.931, -7.205, -6.586)), (' H  82  MET  HB3', ' H  82C LEU HD21', -0.429, (39.896, 10.751, 20.489)), (' R 337  VAL  HA ', ' R 387  PHE  HB2', -0.427, (-3.062, 10.538, -0.666)), (' I  47  TRP  HZ2', ' I  50  VAL HG12', -0.427, (47.185, 8.608, -50.821)), (' R 448  LEU HD22', ' R 452  GLU  HB3', -0.426, (1.711, 21.262, -5.0)), (' R 445  HIS  CE1', ' R 460  PHE  CE1', -0.425, (2.974, 18.51, -19.535)), (' H   6  GLU  N  ', ' H   6  GLU  OE1', -0.424, (32.944, 14.453, 6.529)), (' H  34  MET  HB3', ' H  78  LEU HD13', -0.423, (25.221, 14.89, 14.915)), (' H 189  LEU  HA ', ' H 189  LEU HD23', -0.422, (67.002, -3.482, -16.789)), (' L  83  GLU  HG3', ' L 104  LEU  O  ', -0.421, (32.374, -9.51, -2.721)), (' I 195  ILE HG13', ' I 210  ARG  HG3', -0.421, (3.578, 5.362, -19.697)), (' I  66  ARG  HD3', ' I  83  ARG  NH2', -0.419, (31.501, 7.91, -58.873)), (' I   3  GLN  HG2', ' I  25  SER  HB2', -0.419, (46.044, 20.638, -32.426)), (' L   2  PRO  HB3', ' L  28  HIS  CG ', -0.418, (18.273, -7.114, 21.229)), (' I  82  MET  HB3', ' I  82C LEU HD21', -0.417, (31.95, 13.197, -51.643)), (' L  59  PRO  HG2', ' L  62  PHE  CE2', -0.417, (21.47, -3.146, -5.513)), (' M  56  ASP  HB3', ' S 395  ARG  NH2', -0.417, (56.55, 8.281, -28.251)), (' L 149  LYS  HD2', ' L 194  GLN  NE2', -0.416, (58.383, -24.339, 4.975)), (' M  20  LYS  HE3', ' M  72  TYR  CD1', -0.416, (52.209, -14.874, -36.102)), (' I 153  SER  OG ', ' I 197  ASN  HB2', -0.415, (13.135, 10.508, -21.987)), (' S 401  GLN  O  ', ' S 411  LYS  NZ ', -0.413, (60.503, 15.623, -27.96)), (' R 352  TYR  HB3', ' R 355  LEU HD12', -0.413, (1.001, 10.936, 19.837)), (' L 179  SER  O  ', ' L 180  LEU HD23', -0.413, (63.413, -11.67, 11.042)), (' I   4  LEU  HB3', ' I  92  CYS  SG ', -0.412, (43.164, 15.677, -39.05)), (' A   1  NAG  O3 ', ' A   1  NAG  O7 ', -0.412, (-12.403, 9.027, 20.466)), (' M  61  ARG  O  ', ' M  75  ILE  HA ', -0.409, (51.375, -7.643, -26.501)), (' H  99  TYR  HB2', ' R 371  ALA  CB ', -0.408, (8.279, 8.56, 18.355)), (' R 425  THR HG21', ' R 495  ARG  CG ', -0.408, (-4.86, 2.752, 5.965)), (' H 198  VAL  O  ', ' H 206  LYS  HD2', -0.407, (60.648, 10.997, -2.587)), (' L  59  PRO  HG2', ' L  62  PHE  HD2', -0.407, (20.438, -3.046, -5.338)), (' M 140  TYR  HA ', ' M 141  PRO  HA ', -0.406, (29.917, -12.305, -24.384)), (' H   5  VAL HG13', ' H  23  ALA  HB3', -0.406, (31.793, 19.282, 5.427)), (' I  69  ILE HD11', ' I  78  LEU HD11', -0.406, (45.013, 15.555, -48.059)), (' M 166  LYS  HA ', ' M 172  TYR  CD1', -0.404, (28.502, -6.016, -24.253)), (' H  18  LEU  HA ', ' H  18  LEU HD12', -0.404, (42.151, 17.345, 18.137)), (' H 152  VAL  HA ', ' H 197  ASN  O  ', -0.403, (57.616, 7.067, -5.05)), (' S 439  LYS  HG2', ' S 480  ASP  OD1', -0.402, (78.351, 4.683, -21.013)), (' S 418  GLY  HA3', ' S 499  LEU  O  ', -0.401, (67.406, 16.179, -42.861)), (' M 149  LYS  HD2', ' M 194  GLN  OE1', -0.401, (14.692, -21.803, -38.052)), (' H 150  VAL HG23', ' H 200  HIS  HB2', -0.4, (57.503, 9.013, 2.119))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
