# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('E', ' 152 ', 'PRO', None, (158.496, 233.924, 119.91999999999999)), ('E', ' 154 ', 'PRO', None, (160.58, 228.39, 117.489)), ('F', '   8 ', 'PRO', None, (193.084, 219.13, 120.36300000000001)), ('F', ' 143 ', 'PRO', None, (188.051, 226.34300000000007, 104.64799999999998)), ('H', ' 152 ', 'PRO', None, (127.15100000000005, 132.601, 116.92499999999998)), ('H', ' 154 ', 'PRO', None, (130.968, 137.22500000000002, 114.768)), ('J', ' 152 ', 'PRO', None, (229.769, 157.896, 116.392)), ('J', ' 154 ', 'PRO', None, (223.776, 158.76600000000005, 114.336)), ('K', '   8 ', 'PRO', None, (200.299, 134.71500000000006, 117.186)), ('K', ' 143 ', 'PRO', None, (208.143, 136.98900000000006, 100.907)), ('L', '   8 ', 'PRO', None, (123.82300000000002, 169.745, 119.07900000000001)), ('L', ' 143 ', 'PRO', None, (120.238, 162.7220000000001, 103.069))]
data['rota'] = [('A', ' 122 ', 'ASN', 0.23351174104788625, (186.785, 121.17600000000004, 160.224)), ('A', ' 537 ', 'ASN', 0.13842824177417806, (147.60599999999994, 150.821, 172.476)), ('A', ' 612 ', 'VAL', 0.19220622382325747, (150.50399999999993, 147.527, 193.07300000000004)), ('A', ' 865 ', 'GLU', 0.2881542560079932, (199.79099999999997, 159.898, 214.771)), ('A', ' 875 ', 'LEU', 0.0001641206909432982, (192.665, 160.674, 228.004)), ('A', ' 926 ', 'SER', 0.1939405045940903, (184.82400000000007, 144.062, 232.362)), ('B', ' 564 ', 'ARG', 0.19468524685480876, (182.794, 199.373, 180.05)), ('B', ' 612 ', 'VAL', 0.11971675633941498, (162.503, 202.778, 193.775)), ('B', ' 788 ', 'THR', 0.029406189646322644, (149.726, 153.333, 232.401)), ('B', ' 875 ', 'LEU', 0.0021173326144836775, (154.03499999999994, 159.36, 228.301)), ('B', ' 966 ', 'ASN', 0.2582997346331209, (158.28499999999997, 172.277, 174.889)), ('B', '1069 ', 'GLU', 0.06506161185056976, (156.75399999999996, 189.374, 243.21800000000002)), ('C', ' 307 ', 'LYS', 0.0743862731047601, (199.86099999999996, 185.113, 204.583)), ('C', ' 543 ', 'LEU', 0.2443597641839062, (195.29399999999998, 155.91, 168.049)), ('C', ' 612 ', 'VAL', 0.07446689366541355, (204.589, 165.12300000000002, 192.667)), ('C', ' 875 ', 'LEU', 0.0001825542647777607, (172.23599999999996, 193.534, 228.70699999999997)), ('L', '  34 ', 'LEU', 0.2406677732285294, (133.05199999999994, 166.99, 133.117)), ('K', '  34 ', 'LEU', 0.04932471075198545, (197.545, 143.36300000000003, 131.573))]
data['cbeta'] = []
data['probe'] = [(' A1088  ARG  NH1', ' A1117  THR  O  ', -0.813, (166.632, 168.629, 258.082)), (' A 193  VAL HG13', ' A 267  LEU HD11', -0.762, (175.509, 133.068, 169.248)), (' K  38  GLN  HB2', ' K  48  LEU HD11', -0.745, (199.336, 148.979, 119.131)), (' E 108  TRP  HE1', ' F  37  TYR  HH ', -0.738, (177.141, 214.142, 131.989)), (' B 226  LEU  HG ', ' B 227  VAL HG23', -0.737, (126.564, 178.859, 166.576)), (' A 560  GLN  O  ', ' A 574  ARG  NH1', -0.736, (132.977, 166.052, 173.132)), (' A 616  GLU  N  ', ' A 616  GLU  OE1', -0.728, (147.42, 143.419, 189.129)), (' C 186  PHE  N  ', ' C 211  ASN  OD1', -0.711, (217.124, 216.438, 183.506)), (' A 126  VAL  CG1', ' A 128  ILE HG13', -0.71, (184.951, 128.36, 155.482)), (' C 663  ILE HD11', ' C 669  ALA  HB2', -0.702, (205.752, 174.903, 204.026)), (' B 616  GLU  N  ', ' B 616  GLU  OE1', -0.702, (161.026, 207.611, 190.194)), (' B  34  ARG  NH1', ' B 191  GLU  OE2', -0.699, (125.592, 186.673, 180.894)), (' B 700  ASN  ND2', ' C 784  GLN  OE1', -0.691, (159.643, 195.371, 232.123)), (' A1025  LYS  NZ ', ' A1039  PHE  O  ', -0.688, (175.841, 161.865, 223.408)), (' C1088  ARG  NH1', ' C1115  ASP  O  ', -0.674, (177.964, 169.643, 257.884)), (' B 560  GLN  O  ', ' B 574  ARG  NH1', -0.673, (186.735, 209.491, 174.528)), (' C 733  VAL HG11', ' C1001  LEU HD21', -0.67, (169.351, 186.029, 188.801)), (' F  38  GLN  HB2', ' F  48  LEU HD11', -0.668, (181.137, 211.417, 121.721)), (' C1113  THR HG22', ' C1135  TYR  HB3', -0.665, (185.227, 169.948, 264.017)), (' C 653  VAL HG12', ' C 655  ASN  H  ', -0.644, (213.952, 172.272, 213.243)), (' B1088  ARG  NH1', ' B1117  THR  O  ', -0.643, (174.388, 177.941, 258.43)), (' C1025  LYS  NZ ', ' C1039  PHE  O  ', -0.639, (179.24, 178.398, 223.068)), (' A 653  VAL HG12', ' A 655  ASN  H  ', -0.621, (153.897, 135.439, 212.789)), (' A 668  CYS  SG ', ' A 694  MET  HE2', -0.616, (159.166, 146.979, 209.818)), (' A 224  GLU  N  ', ' A 224  GLU  OE1', -0.61, (187.478, 132.198, 173.514)), (' B 506  ARG HH12', ' P   1  NAG  H81', -0.608, (182.249, 196.94, 134.929)), (' C 224  GLU  N  ', ' C 224  GLU  OE1', -0.607, (200.132, 206.182, 175.871)), (' B1045  HIS  HA ', ' B1063  THR HG22', -0.607, (159.95, 174.345, 231.731)), (' B 733  VAL HG11', ' B1001  LEU HD21', -0.602, (161.796, 162.7, 187.99)), (' A 711  ILE HD12', ' A1093  VAL HG11', -0.6, (162.734, 153.48, 249.12)), (' C 411  GLN  O  ', ' C 421  LYS  NZ ', -0.597, (168.384, 155.12, 153.128)), (' B  53  ASP  OD1', ' B  54  LEU  N  ', -0.592, (141.02, 185.961, 173.714)), (' A 947  ASP  OD2', ' A 951  GLN  NE2', -0.591, (176.474, 156.544, 204.009)), (' C 735  CYS  SG ', ' C 736  THR  N  ', -0.588, (163.706, 186.204, 184.665)), (' L  24  ARG  NH1', ' L  71  ASP  OD1', -0.584, (122.836, 175.718, 128.674)), (' C1078  ILE HD12', ' C1112  ILE HD13', -0.581, (189.5, 164.911, 257.563)), (' C 526  LYS  NZ ', ' J  54  LEU  O  ', -0.579, (208.219, 153.313, 153.205)), (' F 122  PRO  HD3', ' F 134  VAL HG22', -0.568, (171.375, 246.778, 102.185)), (' E  30  SER  OG ', ' E  74  GLU  OE2', -0.568, (169.135, 211.835, 151.465)), (' B 900  ALA  HB1', ' B 910  GLN  HB2', -0.566, (159.056, 167.973, 246.756)), (' B 329  ILE HG22', ' B 331  ASN  H  ', -0.56, (180.827, 212.909, 154.84)), (' J  28  THR  O  ', ' J  32  SER  OG ', -0.56, (203.231, 157.116, 141.939)), (' C 733  VAL HG13', ' C 855  LEU HD23', -0.56, (170.043, 189.168, 189.132)), (' F  34  LEU  HB3', ' F  52  ALA  HB2', -0.558, (188.413, 209.612, 132.887)), (' A 344  PHE  HB2', ' A 398  VAL HG23', -0.554, (149.335, 176.809, 137.884)), (' F   6  GLN  O  ', ' F 102  GLN  NE2', -0.553, (190.238, 222.447, 124.099)), (' B1069  GLU  HG2', ' C 891  LEU HD21', -0.549, (158.919, 188.637, 239.983)), (' L 188  TYR  O  ', ' L 194  TYR  OH ', -0.548, (102.937, 136.354, 99.07)), (' B 721  THR HG23', ' B1058  VAL HG13', -0.548, (152.853, 171.095, 220.185)), (' F  82  GLU  N  ', ' F  82  GLU  OE1', -0.547, (177.861, 208.392, 110.853)), (' B 307  LYS  NZ ', ' B 660  ASP  OD2', -0.547, (147.988, 192.606, 209.377)), (' C  29  THR HG23', ' C  62  VAL HG23', -0.543, (217.965, 196.721, 178.459)), (' A 319  PRO  HG3', ' A 537  ASN  ND2', -0.543, (151.298, 148.831, 173.865)), (' B 454  ARG  NH1', ' B 456  SER  OG ', -0.541, (202.34, 180.196, 151.4)), (' B1025  LYS  NZ ', ' B1039  PHE  O  ', -0.538, (163.74, 173.115, 223.21)), (' A 306  GLU  N  ', ' A 306  GLU  OE1', -0.536, (175.785, 142.763, 200.0)), (' A 982  ASP  OD2', ' C 380  SER  OG ', -0.535, (189.722, 166.534, 157.208)), (' B 196  ASN  OD1', ' B 235  ILE HD12', -0.532, (135.391, 188.334, 160.997)), (' B 977  ILE HG23', ' B 981  LEU HD12', -0.531, (158.777, 164.844, 166.546)), (' K 107  GLU  OE1', ' K 175  TYR  OH ', -0.529, (206.818, 141.813, 107.006)), (' B 593  SER  OG ', ' B 610  GLN  OE1', -0.527, (157.885, 192.905, 196.527)), (' A1111  ILE  O  ', ' A1116  ASN  ND2', -0.526, (167.868, 159.147, 259.482)), (' B 711  ILE HD12', ' B1093  VAL HG11', -0.524, (163.698, 188.161, 249.705)), (' B1113  THR HG22', ' B1135  TYR  HB3', -0.524, (167.508, 181.422, 264.392)), (' B1078  ILE  CD1', ' B1112  ILE HD13', -0.523, (169.814, 188.056, 258.402)), (' E  39  GLN  OE1', ' F  39  GLN  NE2', -0.522, (176.418, 221.351, 123.918)), (' B 451  ARG  NH2', ' B 466  SER  O  ', -0.519, (203.165, 185.129, 142.695)), (' C1111  ILE  O  ', ' C1116  ASN  ND2', -0.518, (185.696, 171.746, 259.4)), (' J  39  GLN  HB2', ' J  45  LEU HD23', -0.516, (212.592, 147.908, 124.816)), (' A 115  GLN  NE2', ' A 167  THR HG21', -0.514, (176.626, 137.014, 145.556)), (' L 107  GLU  OE1', ' L 175  TYR  OH ', -0.513, (125.34, 161.135, 108.375)), (' A1078  ILE HD12', ' A1112  ILE HD13', -0.513, (160.244, 159.981, 257.846)), (' C  81  ASN  O  ', ' C 239  GLN  NE2', -0.512, (221.58, 200.08, 160.801)), (' A 115  GLN HE22', ' A 167  THR HG21', -0.507, (176.928, 137.84, 145.643)), (' A1113  THR HG22', ' A1135  TYR  HB3', -0.506, (166.472, 160.115, 264.364)), (' B 115  GLN  N  ', ' B 115  GLN  OE1', -0.505, (134.032, 190.02, 150.049)), (' A 614  CYS  N  ', ' A 641  GLN  OE1', -0.505, (148.06, 143.402, 195.271)), (' L  38  GLN  HB2', ' L  48  LEU HD11', -0.505, (136.257, 163.014, 120.482)), (' E  91  THR HG23', ' E 115  THR  HA ', -0.505, (166.34, 231.949, 126.702)), (' C 724  LEU HD11', ' C1025  LYS  HD2', -0.504, (177.205, 180.864, 219.341)), (' L  99  THR HG22', ' L 100  PHE  N  ', -0.503, (125.042, 161.07, 131.871)), (' F 188  TYR  O  ', ' F 194  TYR  OH ', -0.503, (172.305, 254.301, 102.962)), (' L  62  ARG  NE ', ' L  83  ASP  OD2', -0.501, (140.332, 167.229, 114.203)), (' B 723  ILE HG22', ' B 945  LEU HD13', -0.501, (155.313, 170.864, 213.488)), (' B 653  VAL HG12', ' B 655  ASN  H  ', -0.501, (151.177, 205.922, 214.663)), (' A 578  THR  O  ', ' A 580  GLU  N  ', -0.5, (130.953, 158.435, 172.139)), (' E   6  GLN  NE2', ' E  96  CYS  SG ', -0.499, (167.511, 217.781, 134.513)), (' E  59  ASN  ND2', ' F  96  PRO  O  ', -0.498, (180.937, 221.931, 144.434)), (' C 900  ALA  HB1', ' C 910  GLN  HB2', -0.498, (177.663, 184.488, 247.056)), (' A 325  ARG  NH2', ' A 528  THR  O  ', -0.496, (135.944, 150.497, 166.295)), (' C 721  THR HG23', ' C1058  VAL HG13', -0.496, (182.631, 188.64, 220.279)), (' B1037  VAL HG21', ' C1032  GLY  HA3', -0.496, (170.095, 180.792, 231.365)), (' L 110  ARG  NH1', ' L 111  THR  OG1', -0.496, (125.733, 165.554, 96.492)), (' J  89  GLU  N  ', ' J  89  GLU  OE1', -0.495, (227.035, 142.855, 125.323)), (' A 414  ASN  N  ', ' A 414  ASN  OD1', -0.494, (160.876, 187.494, 145.773)), (' C 390  THR  O  ', ' C 520  THR  OG1', -0.494, (193.137, 145.069, 157.803)), (' F  19  ALA  HB2', ' F  79  LEU HD21', -0.493, (188.909, 210.753, 114.136)), (' C 578  THR  O  ', ' C 580  GLU  N  ', -0.489, (205.049, 143.759, 170.918)), (' B 193  VAL HG23', ' B 223  LEU  CD2', -0.488, (130.253, 186.126, 174.65)), (' A 712  PRO  HA ', ' A1069  GLU  HA ', -0.487, (166.454, 148.761, 242.75)), (' B 390  THR  O  ', ' B 520  THR  OG1', -0.487, (186.256, 204.801, 159.861)), (' A 128  ILE HD13', ' A 229  LEU HD11', -0.485, (182.859, 132.162, 157.09)), (' A 226  LEU  HB3', ' A 227  VAL HG23', -0.485, (186.529, 131.989, 163.638)), (' B  27  ALA  HB3', ' B  64  TRP  HB3', -0.483, (124.264, 202.838, 176.871)), (' C 711  ILE HD12', ' C1093  VAL HG11', -0.481, (192.941, 170.537, 249.304)), (' A 733  VAL HG22', ' A 855  LEU HD22', -0.481, (187.83, 164.929, 190.508)), (' L 145  GLU  N  ', ' L 145  GLU  OE1', -0.479, (118.563, 160.81, 107.668)), (' C1045  HIS  HA ', ' C1063  THR HG22', -0.476, (182.289, 181.005, 231.567)), (' B  81  ASN  ND2', ' B  81  ASN  O  ', -0.476, (121.877, 200.097, 162.748)), (' A 721  THR HG23', ' A1058  VAL HG13', -0.475, (183.029, 153.999, 219.612)), (' H  38  ARG  NH2', ' H  89  GLU  O  ', -0.473, (120.383, 146.091, 127.519)), (' C 270  ARG  NH1', ' C 287  ASP  OD2', -0.473, (206.448, 188.32, 181.954)), (' A 733  VAL HG11', ' A1001  LEU HD21', -0.471, (186.094, 167.153, 188.391)), (' H  91  THR HG23', ' H 115  THR  HA ', -0.471, (125.125, 139.56, 124.51)), (' L  48  LEU HD22', ' L  59  ILE HD12', -0.47, (140.826, 163.024, 121.822)), (' B 398  VAL HG22', ' B 506  ARG  HG2', -0.47, (185.036, 191.375, 137.925)), (' E  89  GLU  N  ', ' E  89  GLU  OE1', -0.469, (172.316, 238.033, 129.727)), (' C 898  GLN  O  ', ' C 902  ARG  HG2', -0.468, (175.272, 185.616, 240.015)), (' C 414  ASN  N  ', ' C 414  ASN  OD1', -0.467, (165.146, 155.29, 144.532)), (' A 694  MET  HE1', ' B 861  LEU  HG ', -0.465, (159.235, 150.205, 210.023)), (' A 613  ASN  OD1', ' A 614  CYS  N  ', -0.465, (146.786, 143.36, 194.322)), (' F  34  LEU HD22', ' F  72  PHE  CG ', -0.464, (190.548, 211.82, 131.618)), (' K 110  ARG  NH1', ' K 111  THR  OG1', -0.463, (203.189, 140.736, 94.988)), (' C 201  PHE  HE2', ' C 203  ILE HD11', -0.463, (204.54, 201.822, 163.203)), (' A 126  VAL HG12', ' A 128  ILE HG13', -0.462, (185.478, 128.379, 155.568)), (' A 236  THR HG21', ' G   1  NAG  H5 ', -0.462, (163.842, 135.088, 156.501)), (' A 782  VAL HG22', ' A 784  GLN  O  ', -0.46, (196.263, 168.891, 226.132)), (' A 900  ALA  HB1', ' A 910  GLN  HB2', -0.46, (182.793, 160.224, 246.764)), (' A 898  GLN  O  ', ' A 902  ARG  HG2', -0.46, (184.681, 161.511, 239.445)), (' B 613  ASN  OD1', ' B 614  CYS  N  ', -0.459, (160.895, 208.054, 195.258)), (' F 145  GLU  N  ', ' F 145  GLU  OE1', -0.456, (187.971, 228.776, 109.294)), (' C 613  ASN  OD1', ' C 614  CYS  N  ', -0.454, (210.302, 163.267, 194.045)), (' K 145  GLU  N  ', ' K 145  GLU  OE1', -0.453, (210.633, 135.965, 105.64)), (' A1123  CYS  SG ', ' A1129  ILE HD13', -0.452, (152.024, 165.838, 258.263)), (' F 195  ALA  HB2', ' F 210  SER  HB3', -0.452, (181.231, 247.424, 97.68)), (' B 578  THR  O  ', ' B 580  GLU  N  ', -0.451, (181.232, 215.444, 173.54)), (' K 195  ALA  HB2', ' K 210  SER  HB3', -0.451, (229.688, 132.632, 92.356)), (' A1045  HIS  HA ', ' A1063  THR HG22', -0.447, (176.912, 158.08, 231.471)), (' C 978  LEU HD21', ' C 990  ILE HD11', -0.446, (168.506, 189.152, 170.225)), (' H 171  PHE  HE1', ' H 186  VAL HG22', -0.445, (123.751, 146.295, 100.274)), (' C 277  ASN  OD1', ' C 281  THR  N  ', -0.445, (194.284, 205.91, 185.86)), (' A 117  LEU HD22', ' A 231  ILE HD13', -0.444, (177.416, 134.225, 156.131)), (' F  51  GLY  O  ', ' F  52  ALA  HB3', -0.444, (188.398, 206.96, 133.519)), (' B 663  ILE HD11', ' B 669  ALA  HB2', -0.443, (152.985, 197.934, 205.239)), (' C 895  PHE  HZ ', ' C1047  MET  HE1', -0.443, (178.222, 190.833, 236.068)), (' A 319  PRO  HG3', ' A 537  ASN HD22', -0.443, (150.976, 148.869, 174.0)), (' B 347  VAL HG22', ' B 419  ASN  HB3', -0.442, (192.569, 185.084, 143.957)), (' A 876  ALA  O  ', ' A 880  THR  OG1', -0.442, (195.499, 163.1, 233.537)), (' A 115  GLN  HB3', ' A 233  ILE HD11', -0.441, (175.144, 134.658, 149.802)), (' C 642  THR  OG1', ' C 645  GLY  O  ', -0.439, (206.086, 167.945, 199.844)), (' A 390  THR  O  ', ' A 520  THR  OG1', -0.438, (138.161, 168.915, 159.361)), (' C 115  GLN  N  ', ' C 115  GLN  OE1', -0.438, (206.756, 197.13, 149.288)), (' B 563  GLY  O  ', ' B 571  ASP  N  ', -0.438, (180.306, 201.903, 179.96)), (' C 415  ILE HD13', ' C 419  ASN HD22', -0.437, (168.735, 152.234, 142.568)), (' B 270  ARG  NH1', ' B 287  ASP  OD1', -0.437, (142.086, 192.528, 182.937)), (' A 666  GLY  HA2', ' A 694  MET  HE3', -0.436, (156.283, 148.722, 210.552)), (' A 313  SER  OG ', ' A 314  ASN  N  ', -0.436, (162.049, 147.305, 186.833)), (' B 193  VAL HG13', ' B 267  LEU HD11', -0.436, (134.292, 188.0, 172.227)), (' C 338  VAL HG11', ' C 394  ALA  HB1', -0.436, (186.748, 150.251, 145.951)), (' C 347  VAL HG22', ' C 419  ASN  HB3', -0.435, (172.047, 150.228, 143.646)), (' B 966  ASN  N  ', ' B 966  ASN  OD1', -0.434, (156.785, 173.081, 175.693)), (' H  33  VAL HG22', ' H  52  ILE HG12', -0.434, (134.326, 156.431, 145.173)), (' A 593  SER  OG ', ' A 610  GLN  NE2', -0.433, (161.113, 148.849, 195.632)), (' J  91  THR HG23', ' J 115  THR  HA ', -0.433, (224.833, 151.343, 123.074)), (' H  30  SER  OG ', ' H  74  GLU  OE2', -0.433, (140.723, 151.361, 149.773)), (' L 195  ALA  HB2', ' L 210  SER  HB3', -0.429, (105.087, 147.146, 94.325)), (' F  21  LEU  N  ', ' F  21  LEU HD12', -0.429, (190.606, 212.611, 120.451)), (' C 913  LEU HD22', ' C 920  ILE HD13', -0.428, (183.64, 187.801, 243.126)), (' K  19  ALA  HB2', ' K  79  LEU HD21', -0.427, (194.97, 142.788, 112.117)), (' A 823  VAL HG23', ' A 942  LEU HD12', -0.426, (186.156, 151.73, 211.479)), (' C 331  ASN  O  ', ' C 359  VAL HG12', -0.426, (201.482, 149.1, 151.786)), (' F  24  ARG  NE ', ' F  71  ASP  OD1', -0.425, (198.126, 216.804, 129.953)), (' B 422  LEU HD21', ' B 509  VAL HG11', -0.425, (186.616, 188.689, 151.956)), (' H  28  THR  O  ', ' H  32  SER  OG ', -0.425, (141.963, 155.152, 142.912)), (' F 177  LEU HD23', ' F 178  SER  N  ', -0.424, (177.437, 234.798, 107.377)), (' B  31  SER  OG ', ' B  60  SER  N  ', -0.423, (133.745, 196.435, 182.084)), (' B 306  GLU  N  ', ' B 306  GLU  OE1', -0.422, (146.112, 183.845, 201.521)), (' C 819  LEU HD22', ' C 942  LEU HD11', -0.421, (183.038, 192.118, 216.251)), (' B1090  GLY  O  ', ' B1104  ARG  NH1', -0.421, (170.888, 182.647, 248.379)), (' A  31  SER  HB3', ' A  62  VAL HG13', -0.42, (171.259, 125.277, 177.233)), (' C1048  SER  OG ', ' C1061  HIS  ND1', -0.419, (178.79, 183.536, 227.375)), (' A 506  ARG HH12', ' D   1  NAG  H81', -0.418, (147.266, 170.595, 134.903)), (' A 784  GLN  OE1', ' C 700  ASN  ND2', -0.418, (200.519, 171.188, 230.9)), (' C 400  ARG  NH1', ' C 403  GLU  OE2', -0.417, (167.461, 157.032, 138.826)), (' B1111  ILE  O  ', ' B1116  ASN  ND2', -0.417, (166.5, 180.536, 259.878)), (' C 286  VAL HG23', ' C 303  PHE  CE2', -0.416, (200.385, 194.215, 189.909)), (' C 373  THR  HB ', ' C 432  ALA  HB3', -0.415, (180.009, 161.619, 143.726)), (' K  13  LEU  O  ', ' K 109  LYS  N  ', -0.415, (199.414, 141.831, 104.821)), (' A 641  GLN  NE2', ' A 645  GLY  O  ', -0.415, (150.058, 145.129, 198.107)), (' H  73  ASP  O  ', ' H  77  SER  N  ', -0.414, (140.973, 144.312, 145.352)), (' A 454  ARG  NH1', ' A 456  SER  O  ', -0.413, (152.407, 194.232, 152.401)), (' A1069  GLU  N  ', ' A1069  GLU  OE1', -0.412, (165.817, 147.32, 240.71)), (' H 143  LEU  HB2', ' H 216  VAL HG11', -0.412, (123.275, 139.28, 92.878)), (' L  19  ALA  HB2', ' L  79  LEU HD21', -0.41, (133.019, 170.407, 113.477)), (' B 134  GLN  O  ', ' B 161  SER  N  ', -0.41, (121.223, 194.754, 148.796)), (' C 712  PRO  HA ', ' C1069  GLU  HA ', -0.41, (195.551, 176.143, 243.217)), (' E  37  VAL  O  ', ' E  95  TYR  N  ', -0.409, (171.495, 222.223, 132.699)), (' A 712  PRO  HD3', ' B 891  LEU HD13', -0.408, (165.33, 153.246, 241.471)), (' A1026  MET  HE1', ' A1050  PRO  HB3', -0.408, (187.619, 162.151, 222.285)), (' A1138  LEU  HG ', ' A1142  LEU HD13', -0.408, (171.103, 168.182, 273.676)), (' A1122  ASN  ND2', ' A1124  ASP  OD2', -0.407, (147.044, 171.848, 260.739)), (' V   4  MAN  HO3', ' V   5  MAN  C1 ', -0.407, (187.77, 172.302, 132.222)), (' B1078  ILE HD12', ' B1112  ILE HD13', -0.407, (170.276, 187.431, 258.374)), (' A 315  PHE  O  ', ' A 589  PHE  HA ', -0.406, (154.967, 149.073, 186.531)), (' A1078  ILE  CD1', ' A1112  ILE HD13', -0.406, (159.944, 159.37, 258.069)), (' C 756  PHE  CG ', ' C 757  CYS  N  ', -0.405, (162.724, 180.152, 185.001)), (' A1032  GLY  HA3', ' C1037  VAL HG21', -0.405, (182.618, 169.406, 231.184)), (' C 902  ARG  HD2', ' C1046  LEU  O  ', -0.405, (176.879, 183.677, 235.58)), (' B  31  SER  HB3', ' B  62  VAL HG13', -0.404, (131.417, 196.458, 179.52)), (' A 663  ILE HD11', ' A 669  ALA  HB2', -0.404, (159.544, 141.617, 203.804)), (' C 733  VAL HG13', ' C 855  LEU  CD2', -0.404, (170.365, 188.736, 189.369)), (' A 575  ASP  HB3', ' A 578  THR  O  ', -0.404, (132.256, 157.427, 171.406)), (' A 278  GLU  N  ', ' A 278  GLU  OE1', -0.403, (192.621, 138.983, 188.58)), (' C 801  GLN  HG3', ' C 932  GLN  NE2', -0.401, (185.986, 199.43, 227.854)), (' A 793  ASP  N  ', ' A 793  ASP  OD1', -0.401, (198.633, 154.717, 240.013)), (' B 310  TYR  O  ', ' B 593  SER  HA ', -0.401, (154.185, 191.621, 195.946)), (' K 141  PHE  O  ', ' K 175  TYR  N  ', -0.4, (210.031, 142.387, 99.955)), (' F  62  ARG  NE ', ' F  83  ASP  OD2', -0.4, (182.035, 206.071, 114.751)), (' K   4  MET  HE3', ' K  23  CYS  SG ', -0.4, (200.752, 137.559, 128.216)), (' K 195  ALA  HB2', ' K 210  SER  CB ', -0.4, (229.941, 132.641, 92.357))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
