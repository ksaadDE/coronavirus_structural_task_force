# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  98 ', 'GLN', 0.21236107145154176, (124.98399999999994, 92.903, 143.526)), ('B', '  92 ', 'GLU', 0.24568815081880496, (103.06699999999994, 117.32099999999998, 114.184))]
data['cbeta'] = [('B', ' 190 ', 'PHE', ' ', 0.25244158294712526, (109.40699999999994, 117.056, 117.58899999999994))]
data['probe'] = [(' A  80  HIS  HA ', ' B 131  THR HG21', -0.722, (112.168, 100.096, 128.898)), (' B   9  LYS  HZ1', " T   8    U  H5'", -0.677, (109.241, 118.591, 128.37)), (' B 302  GLU  OE1', ' B 422  ASN  ND2', -0.663, (121.905, 109.449, 83.173)), (' B   9  LYS  NZ ', " T   8    U  H5'", -0.659, (109.601, 118.866, 128.691)), (' A  70  GLY  CA ', ' A  97  VAL HG23', -0.654, (119.165, 95.247, 139.814)), (' B 304  LYS  HE2', ' B 500  MET  HE1', -0.623, (118.957, 104.686, 74.929)), (' B 405  VAL  O  ', ' B 410  ASN  ND2', -0.617, (110.802, 115.608, 85.421)), (' B 368  TYR  HD1', ' B 389  VAL HG21', -0.61, (119.021, 135.455, 78.498)), (' A   5  THR HG23', ' A   6  GLU  HG2', -0.599, (117.234, 109.99, 132.181)), (' A  45  LEU  HB2', ' B  38  LEU  HG ', -0.593, (124.525, 104.123, 150.914)), (' A  33  SER  OG ', ' B  67  ASN  ND2', -0.585, (135.506, 99.94, 118.216)), (" D  54    G  H2'", ' D  55    A  H8 ', -0.574, (126.993, 145.184, 151.848)), (' A  73  CYS  SG ', ' A  97  VAL HG21', -0.572, (120.467, 94.933, 138.331)), (' B  73  PHE  CZ ', ' B 188  HIS  HD2', -0.562, (119.738, 116.363, 114.927)), (' A  38  ILE HD12', ' A 108  VAL HG21', -0.56, (125.433, 100.841, 131.013)), (' B 159  TRP  HA ', ' B 162  VAL HG12', -0.559, (101.934, 102.407, 114.076)), (' B 118  VAL HG23', ' B 156  GLY  HA2', -0.555, (95.441, 107.898, 111.038)), (" T  14    U  H2'", ' T  15    A  H8 ', -0.552, (116.058, 139.672, 138.856)), (' B 355  PRO  HD3', ' B 365  GLU  HG3', -0.552, (133.345, 134.288, 84.234)), (' B 234  ASP  N  ', ' B 234  ASP  OD1', -0.551, (108.894, 95.332, 109.953)), (' A  70  GLY  HA2', ' A  97  VAL HG23', -0.55, (119.8, 95.534, 140.267)), (' A  97  VAL HG12', ' A  98  GLN  N  ', -0.544, (123.408, 93.384, 141.438)), (' B 478  ASN  HA ', ' B 483  VAL HG12', -0.538, (115.902, 106.475, 49.852)), (' B 373  HIS  HA ', ' B 376  LYS  HG2', -0.537, (121.851, 142.969, 75.709)), (' B 118  VAL HG11', ' B 152  LEU HD22', -0.534, (94.767, 112.274, 110.402)), (' A  70  GLY  HA3', ' A  97  VAL HG23', -0.524, (118.816, 94.546, 140.348)), (' B 188  HIS  CG ', ' B 188  HIS  O  ', -0.516, (117.653, 117.978, 116.153)), (" D  54    G  H2'", ' D  55    A  C8 ', -0.514, (127.761, 145.091, 151.739)), (' B 375  ASP  N  ', ' B 375  ASP  OD1', -0.514, (119.009, 144.321, 73.684)), (' A  70  GLY  HA2', ' A  97  VAL  CG2', -0.51, (119.71, 95.388, 139.644)), (' A  44  MET  HE2', ' A  96  TYR  CE1', -0.509, (118.238, 98.996, 147.717)), (' B 495  LEU  O  ', ' B 499  ASN  ND2', -0.508, (113.751, 107.027, 67.954)), (' B 106  PRO  HA ', ' B 190  PHE  HZ ', -0.505, (104.693, 113.486, 117.558)), (' B 171  SER  OG ', ' B 227  TRP  O  ', -0.501, (111.38, 98.411, 98.851)), (' A  99  ILE HD12', ' A 110  PHE  HB3', -0.5, (127.758, 94.085, 137.09)), (' A  62  ASN  HB3', ' A  65  GLN  OE1', -0.497, (130.506, 89.771, 148.714)), (' B   5  THR HG22', ' B   7  LEU  H  ', -0.496, (117.302, 114.627, 128.061)), (' B 278  ARG  NH1', ' B 412  PRO  O  ', -0.494, (113.459, 117.315, 94.969)), (' B 469  LYS  HZ3', ' B 483  VAL HG13', -0.484, (114.127, 104.415, 49.622)), (" D  53    A  H2'", ' D  54    G  H8 ', -0.483, (126.462, 143.405, 156.273)), (' A  73  CYS  HA ', ' A 108  VAL HG12', -0.479, (123.218, 98.511, 135.013)), (' B 447  TYR  HB2', ' B 519  LEU HD21', -0.477, (120.033, 117.589, 56.602)), (" D  53    A  H2'", ' D  54    G  C8 ', -0.476, (126.704, 143.396, 156.4)), (' B 242  ILE HD11', ' B 247  TRP  CZ2', -0.475, (122.753, 119.559, 104.691)), (' B  91  VAL HG23', ' B 190  PHE  CD2', -0.473, (107.183, 116.281, 115.627)), (" D  63    A  H2'", ' D  64    A  C8 ', -0.471, (109.851, 132.729, 137.82)), (' A  97  VAL  CG1', ' A  98  GLN  N  ', -0.469, (123.157, 92.949, 141.419)), (' B 321  LEU HD11', ' B 329  LEU HD13', -0.466, (127.242, 127.1, 64.96)), (' B 489  ASN  HA ', ' B 492  ARG  HG3', -0.465, (119.303, 102.065, 60.643)), (' A  45  LEU HD12', ' B  38  LEU HD23', -0.464, (125.796, 105.691, 151.615)), (' B 283  HIS  HA ', ' B 287  VAL HG13', -0.459, (118.042, 125.618, 94.895)), (' B  95  HIS  CD2', " T   7    G  H1'", -0.459, (102.89, 120.269, 124.376)), (" D  62    U  H2'", ' D  63    A  H8 ', -0.455, (112.936, 129.313, 140.727)), (' B 283  HIS  O  ', ' B 287  VAL HG22', -0.453, (119.848, 126.833, 95.889)), (' B 355  PRO  HA ', ' B 363  ILE HD11', -0.452, (135.314, 130.34, 82.298)), (' A  47  THR HG23', ' A  49  THR  H  ', -0.451, (126.374, 94.587, 156.022)), (" T  14    U  H2'", ' T  15    A  C8 ', -0.449, (115.945, 139.253, 139.176)), (' A  57  VAL HG13', ' A  58  THR HG23', -0.443, (114.619, 90.793, 150.836)), (' B 116  ASN  OD1', ' B 271  SER  HB3', -0.442, (101.352, 115.254, 103.982)), (' B 241  MET  HB3', ' B 241  MET  HE2', -0.441, (117.698, 110.696, 110.049)), (' B   9  LYS  NZ ', ' T   9    G  OP2', -0.438, (110.437, 118.685, 129.259)), (" D  65    A  H2'", ' D  66    A  H8 ', -0.437, (109.56, 137.704, 129.776)), (' B 283  HIS  CE1', ' B 287  VAL HG21', -0.436, (117.972, 129.101, 95.628)), (' B 191  GLU  N  ', ' B 191  GLU  OE1', -0.435, (111.29, 116.345, 114.753)), (" D  56    A  H2'", ' D  57    G  H8 ', -0.431, (131.115, 141.774, 143.524)), (" D  58    C  H2'", ' D  59    U  C6 ', -0.431, (130.238, 132.666, 140.178)), (' B 392  TYR  HB2', ' B 439  LEU HD11', -0.43, (114.331, 131.617, 73.231)), (' B 354  GLN  HA ', ' B 365  GLU  HG3', -0.429, (132.111, 134.04, 84.026)), (' B  54  LEU HD13', ' B 136  VAL HG11', -0.429, (102.304, 107.808, 127.469)), (' B 315  MET  HE3', ' B 319  ALA  HB2', -0.428, (121.765, 118.568, 60.815)), (' B 153  MET  HB3', ' B 153  MET  HE2', -0.428, (92.822, 112.248, 119.605)), (" D  68    C  H2'", ' D  69    A  C8 ', -0.428, (112.12, 130.68, 118.294)), (" D  66    A  H2'", ' D  67    U  C6 ', -0.427, (111.498, 137.734, 124.904)), (' A  78  ARG HH21', ' B  25  THR HG22', -0.426, (120.287, 106.529, 134.855)), (" D  62    U  H2'", ' D  63    A  C8 ', -0.426, (112.94, 129.401, 140.785)), (' A  43  LYS  HE2', ' A  66  GLU  HG2', -0.425, (128.879, 100.489, 145.208)), (' B 339  LYS  HZ2', ' B 348  TRP  HB2', -0.424, (133.915, 127.761, 67.755)), (' B 221  SER  O  ', ' B 223  THR  N  ', -0.424, (114.734, 89.319, 110.836)), (' B  93  GLY  N  ', " D  71    C  O3'", -0.423, (102.438, 118.108, 116.216)), (' B 312  VAL HG11', ' B 501  MET  SD ', -0.422, (118.719, 115.23, 71.918)), (' B  67  ASN  OD1', ' B  68  GLY  N  ', -0.421, (132.92, 99.89, 114.875)), (' B 218  SER  HB2', ' B 233  PHE  CD2', -0.421, (112.112, 92.335, 107.993)), (' B 242  ILE HD11', ' B 247  TRP  HZ2', -0.419, (123.314, 119.463, 104.937)), (' A  13  VAL HG22', ' A  30  TYR  CZ ', -0.414, (128.707, 106.486, 125.657)), (' B  84  ARG  HB3', ' B 177  LEU  HB3', -0.412, (117.762, 108.614, 94.042)), (' B 205  ARG  HA ', ' B 205  ARG  HD2', -0.412, (125.813, 93.481, 108.083)), (' A  20  ALA  HA ', ' B 201  ILE  O  ', -0.407, (120.345, 99.587, 116.922)), (" D  63    A  H2'", ' D  64    A  H8 ', -0.407, (109.598, 132.72, 137.819)), (" D  61    U  H2'", ' D  62    U  C6 ', -0.407, (117.223, 127.189, 141.904)), (" D  56    A  H2'", ' D  57    G  C8 ', -0.406, (131.36, 141.696, 143.776)), (' B 409  LEU  HA ', ' B 409  LEU HD13', -0.404, (117.748, 109.902, 87.442)), (' B  19  HIS  ND1', ' B  21  THR HG22', -0.402, (112.785, 98.946, 145.466)), (' B 403  THR HG21', ' B 430  ALA  HA ', -0.4, (110.134, 123.563, 85.753)), (' B 428  THR  HA ', ' B 429  PRO  HD3', -0.4, (117.495, 124.812, 85.436))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
