# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 108 ', 'PRO', None, (-2.89216, 5.848989999999996, -41.55474999999999)), ('A', ' 153 ', 'PRO', None, (19.00507, 25.72152, -42.58967)), ('A', ' 155 ', 'PRO', None, (15.18845, 22.06806, -39.431639999999994)), ('B', '   8 ', 'PRO', None, (-14.98219, 28.302910000000015, -31.831959999999995)), ('B', ' 141 ', 'PRO', None, (-0.25162, 32.80553, -16.04906)), ('H', ' 157 ', 'PRO', None, (-48.54978, -18.628870000000003, -14.08973)), ('H', ' 159 ', 'PRO', None, (-50.22899999999999, -22.02387, -19.065259999999995)), ('L', '   8 ', 'PRO', None, (-59.79118, -1.75587, -45.79959999999999)), ('L', ' 142 ', 'PRO', None, (-71.21237, -11.503890000000004, -38.77806))]
data['rota'] = [('E', ' 369 ', 'TYR', 0.00990199711760046, (-35.35798, 15.43538, -75.11521999999998)), ('A', '  84 ', 'SER', 0.0931451531063473, (9.23839, 25.612379999999998, -59.587949999999985)), ('B', '  34 ', 'LEU', 0.09153349367759153, (-17.408670000000004, 14.77162, -41.77985999999999)), ('B', '  49 ', 'ILE', 0.2649042633607255, (-13.73216, 11.210190000000008, -35.10209)), ('B', '  93 ', 'ASP', 0.06281184224963779, (-17.09051, 17.221440000000015, -51.76625)), ('H', '  98 ', 'ARG', 0.2320405715525302, (-33.05159999999998, -10.21321, -40.74749)), ('H', ' 203 ', 'THR', 0.11659820232976853, (-74.23997, -33.61175, -14.304579999999998)), ('L', '  22 ', 'THR', 0.028306845342740417, (-55.36072999999999, -0.42977, -49.00842999999998)), ('L', '  55 ', 'GLN', 0.1641202242492017, (-40.6414, -12.10862, -52.881019999999985))]
data['cbeta'] = []
data['probe'] = [(' B  81  PRO  HA ', ' B 106  ILE HD13', -0.681, (-4.706, 20.122, -20.991)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.671, (-49.282, -12.362, -47.124)), (' L  18  ARG  NH2', ' L 301  HOH  O  ', -0.645, (-55.716, -9.052, -61.694)), (' B  10  THR HG22', ' B 103  LYS  HB3', -0.621, (-6.818, 28.927, -30.666)), (' A  29  VAL HG13', ' A  34  MET  HG3', -0.609, (1.215, 4.984, -51.654)), (' A 125  PRO  HB3', ' A 151  TYR  HB3', -0.591, (23.183, 25.658, -35.957)), (' H 133  PRO  HD3', ' H 219  LYS  HE2', -0.584, (-68.315, -22.76, -8.947)), (' A  82  MET  HB3', ' A  85  LEU HD21', -0.578, (7.58, 22.033, -55.068)), (' H  50  TRP  CD1', ' H  59  ASN  HB2', -0.544, (-30.861, 0.912, -36.77)), (' E 340  GLU  OE1', ' E 356  LYS  NZ ', -0.543, (-37.876, -3.83, -71.218)), (' E 368  LEU  HA ', ' E 371  SER  HB2', -0.516, (-37.863, 12.045, -73.334)), (' A  34  MET  HB3', ' A  78  LEU HD22', -0.508, (1.02, 8.055, -50.875)), (' H  36  TRP  CE2', ' H  81  MET  HB2', -0.506, (-33.225, -8.274, -29.765)), (' A  11  LEU  HB2', ' A 153  PRO  HG3', -0.503, (17.456, 24.175, -45.553)), (' B  84  PHE  HB2', ' B 106  ILE HD12', -0.503, (-4.077, 21.536, -23.025)), (' H  51  ILE HD11', ' H  56  GLY  HA2', -0.492, (-23.554, -4.221, -34.067)), (' H  54  ASN  OD1', ' H  55  ASN  N  ', -0.485, (-20.764, -4.251, -39.047)), (' A 149  LYS  NZ ', ' A 177  GLN  OE1', -0.482, (22.375, 34.781, -32.089)), (' H  12  LYS  HG3', ' H  18  VAL  HB ', -0.48, (-37.403, -10.637, -18.705)), (' H  29  PHE  HE2', ' H  72  THR HG23', -0.471, (-23.999, -11.509, -35.102)), (' B 197  THR HG22', ' B 204  PRO  HB3', -0.469, (9.416, 42.954, -12.113)), (' B   4  MET  HE2', ' B  25  ALA  HB2', -0.466, (-19.84, 22.127, -43.98)), (' H 129  PRO  HB3', ' H 155  TYR  HB3', -0.463, (-56.116, -20.236, -12.471)), (' A  50  VAL HG21', ' A  99  GLU  HG3', -0.457, (-7.417, 10.75, -52.45)), (' L  89  GLN HE21', ' L  97  ILE HG23', -0.456, (-40.208, -0.587, -41.533)), (' H   1  GLN  N  ', ' H   1  GLN  OE1', -0.456, (-31.18, -23.876, -45.78)), (' H  55  ASN  ND2', ' H 301  PG4  H42', -0.45, (-21.484, 0.769, -39.963)), (' L   8  PRO  HG3', ' L  11  LEU HD13', -0.449, (-62.266, -4.522, -46.863)), (' B  62  ARG  HB2', ' B  77  SER  O  ', -0.449, (-13.876, 14.215, -21.928)), (' B 113  PRO  HB3', ' B 139  PHE  HB3', -0.447, (6.744, 31.593, -14.728)), (' B 106  ILE  O  ', ' B 166  GLN  NE2', -0.447, (-3.5, 26.108, -20.307)), (' C   1  NAG  N2 ', ' E 343  ASN  OD1', -0.444, (-41.835, 5.233, -63.17)), (' H  47  TRP  CG ', ' L  97  ILE  HB ', -0.435, (-38.488, -0.522, -37.307)), (' H  40  ALA  HB3', ' H  43  GLN  HG3', -0.431, (-50.24, -4.213, -28.238)), (' E 347  PHE  CE2', ' E 399  SER  HB2', -0.431, (-31.39, 3.907, -64.537)), (' E 455  LEU HD22', ' E 493  GLN  HG3', -0.426, (-15.775, 4.062, -49.128)), (' E 501  ASN  ND2', ' E1004  HOH  O  ', -0.421, (-27.516, 15.618, -45.356)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.419, (-28.545, -2.77, -86.459)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.418, (-27.336, 13.809, -65.998)), (' B 145  LYS  HB3', ' B 197  THR  OG1', -0.418, (6.862, 42.302, -16.565)), (' A   2  VAL HG21', ' E 486  PHE  CE2', -0.418, (-1.321, -0.967, -39.97)), (' E 366  SER  HB2', ' E 388  ASN  ND2', -0.417, (-37.491, 13.133, -82.285)), (' B  21  LEU HD23', ' B 102  THR  HB ', -0.415, (-11.469, 23.587, -32.277)), (' L 141  TYR  CG ', ' L 142  PRO  HA ', -0.414, (-69.54, -12.88, -39.246)), (' H 129  PRO  HD2', ' H 215  THR HG21', -0.411, (-55.3, -24.027, -9.388)), (' A 190  VAL HG11', ' A 200  TYR  CE1', -0.41, (20.079, 17.218, -14.955)), (' B   1  ASP  HA ', ' B  97  ARG HH12', -0.409, (-15.508, 22.911, -52.796)), (' E 357  ARG HH21', ' E 394  ASN HD21', -0.405, (-26.475, -7.403, -80.653)), (' E 502  GLY  O  ', ' E 506  GLN  HG3', -0.405, (-28.12, 16.835, -52.564)), (' E 387  LEU  HA ', ' E 387  LEU HD23', -0.403, (-29.115, 9.708, -83.413)), (' E 412  PRO  HG3', ' E 429  PHE  HB3', -0.403, (-17.368, 8.595, -74.448)), (' B  40  LYS  HG2', ' B  85  ALA  HB2', -0.401, (-2.898, 17.874, -29.033))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
