# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('G', ' 348 ', 'GLN', 0.002808406846879037, (-25.60749, 14.06437, 81.97384999999997))]
data['omega'] = [('A', ' 181 ', 'PRO', None, (-33.895569999999985, 17.537799999999997, 26.79334)), ('A', ' 348 ', 'GLN', None, (-24.065560000000005, 24.06337, -13.7376)), ('A', ' 349 ', 'LYS', None, (-22.45154, 26.774879999999996, -12.40851)), ('C', ' 181 ', 'PRO', None, (12.72045, 68.12951, 28.462829999999993)), ('E', '  77 ', 'THR', None, (-7.778539999999995, 3.9598100000000005, 40.19110999999999)), ('E', ' 181 ', 'PRO', None, (13.203420000000003, -22.77943, 37.413229999999984)), ('G', ' 181 ', 'PRO', None, (-33.487489999999994, 23.69188, 40.41802999999999)), ('G', ' 348 ', 'GLN', None, (-26.739689999999992, 14.958029999999999, 82.25297)), ('G', ' 349 ', 'LYS', None, (-25.81695, 13.30845, 79.74464))]
data['rota'] = [('A', '  61 ', 'SER', 0.1734272297588996, (-27.10024, 17.52938, -1.89175)), ('A', ' 116 ', 'SER', 0.037467799067499745, (-17.7347, 1.1921100000000002, 9.39759)), ('A', ' 161 ', 'SER', 0.01071998049155809, (-40.90078999999999, -1.25292, 10.09043)), ('A', ' 265 ', 'THR', 0.003746420774587177, (-24.02073, 53.17540000000001, 3.31288)), ('A', ' 293 ', 'SER', 0.030484206412957616, (-29.80165, 34.19769, 0.61827)), ('C', '  25 ', 'ASN', 0.006324284094775787, (-6.686739999999998, 32.70177, 40.71915)), ('C', '  77 ', 'THR', 0.09586347524921005, (-11.078949999999997, 45.65626, 23.92756)), ('C', '  86 ', 'THR', 0.022552069032056737, (11.8679, 38.35115, 13.543339999999997)), ('C', ' 105 ', 'SER', 0.2984738336226642, (13.17328, 43.86565999999999, 18.87289)), ('C', ' 200 ', 'GLN', 0.27103846638086654, (20.595369999999996, 68.32774, 20.3351)), ('C', ' 263 ', 'ASN', 0.12691863033046952, (5.773540000000002, 40.31941, 54.22402)), ('C', ' 287 ', 'THR', 0.2394706416398144, (2.227680000000001, 59.10577999999999, 42.54007)), ('C', ' 293 ', 'SER', 0.016514358095688138, (8.46192, 39.3142, 40.02901)), ('C', ' 362 ', 'LEU', 0.19666363733543607, (-3.360869999999998, 56.60467, 43.24965)), ('E', '  41 ', 'SER', 0.14546412977567144, (11.1241, 9.6682, 38.41117)), ('E', '  78 ', 'ILE', 0.28493452739116953, (-6.858969999999998, 3.75831, 44.9275)), ('E', ' 161 ', 'SER', 0.22571396672220875, (20.131079999999997, -10.768620000000004, 59.2883)), ('E', ' 284 ', 'VAL', 0.05768029988359203, (-0.28980999999999835, -15.66667, 28.47626)), ('E', ' 293 ', 'SER', 0.02236946495949041, (14.363060000000003, 6.381830000000001, 26.19616)), ('E', ' 362 ', 'LEU', 0.24768686287109293, (-0.1739099999999989, -8.59796, 22.21041)), ('F', ' 158 ', 'THR', 0.0258387386566028, (31.64482, 12.104580000000004, 39.49946)), ('F', ' 178 ', 'VAL', 0.04030549322279816, (15.45044, -1.15809, 0.83233)), ('G', '  66 ', 'VAL', 0.2776200841359689, (-25.22084, 28.00187, 66.91944)), ('G', '  82 ', 'GLN', 0.17140240037517437, (-21.00144999999999, 31.19409, 68.20894)), ('G', ' 142 ', 'SER', 0.12025595901444903, (-31.87402, 34.66398, 45.61342)), ('G', ' 161 ', 'SER', 0.11067446721186942, (-38.730659999999986, 43.00414999999999, 56.84483)), ('G', ' 212 ', 'LYS', 0.008375659353045871, (-48.18179, 5.98795, 56.080209999999994)), ('G', ' 216 ', 'ARG', 0.039124906692033355, (-39.33711999999999, 13.44618, 59.52250999999998)), ('H', ' 171 ', 'ASP', 0.06069285512733726, (-44.88585, -7.13845, 59.81739)), ('X', '  50 ', 'SER', 0.10526642216767694, (-6.824519999999999, 37.28814, 13.32303)), ('X', '  51 ', 'GLU', 0.2686823491544959, (-8.25517, 40.79132, 14.00593)), ('X', '  60 ', 'LEU', 0.10403065760478095, (-34.09463, 45.30678, 17.05916)), ('I', '  53 ', 'ASP', 0.12379438112218272, (-6.891559999999998, 50.30973000000001, 51.38055)), ('I', '  62 ', 'TYR', 0.1143519391373979, (19.596659999999996, 54.023959999999995, 56.63169)), ('J', '  53 ', 'ASP', 0.22629412704733917, (-2.015839999999999, -1.4840999999999998, 13.848479999999997)), ('K', '  53 ', 'ASP', 0.06091098315585898, (-17.905989999999996, -4.424719999999999, 54.85514))]
data['cbeta'] = [('A', ' 252 ', 'LYS', ' ', 0.28947278139920896, (-38.9632, 42.823660000000004, 28.35169)), ('A', ' 348 ', 'GLN', ' ', 0.29237380220614523, (-22.250679999999992, 23.47134, -11.98142)), ('A', ' 350 ', 'LYS', ' ', 0.3164134764391137, (-17.816390000000006, 25.692520000000005, -9.22398)), ('E', ' 119 ', 'GLN', ' ', 0.27608418087161823, (4.15281, -3.53348, 59.29062))]
data['probe'] = [(' B 164  PHE  HA ', ' B 192  MET  HE1', -0.98, (-41.169, 36.104, -9.835)), (' A 348  GLN  OE1', ' A 351  ASN  ND2', -0.844, (-22.892, 22.793, -8.491)), (' B 189  ILE HG13', ' B 192  MET  HE3', -0.84, (-41.608, 34.464, -7.624)), (' E 211  LEU HD13', ' E 235  SER  HB3', -0.781, (21.887, -4.264, 23.707)), (' E 140  ASN  ND2', ' E 401  HOH  O  ', -0.754, (17.285, -27.913, 49.032)), (' A 193  ILE HG12', ' A 206 AARG  HD3', -0.733, (-48.084, 24.204, 17.478)), (' H 168  THR HG22', ' H 185  LYS  HD3', -0.729, (-44.848, -4.499, 70.877)), (' G 357  ASN  ND2', ' G 401  HOH  O  ', -0.718, (-10.693, 13.43, 55.517)), (' D 181  ASN  N  ', ' D 301  HOH  O  ', -0.684, (15.704, 43.119, 63.225)), (' A 347  PRO  O  ', ' A 348  GLN  HG3', -0.681, (-23.739, 21.912, -12.262)), (' B 158  THR  N  ', ' B 301  HOH  O  ', -0.679, (-49.183, 24.827, -10.744)), (' G 350  LYS  HG2', ' G 352  TYR  CZ ', -0.658, (-19.112, 13.528, 74.442)), (' C 211  LEU HD13', ' C 235  SER  HB3', -0.637, (17.702, 49.246, 41.766)), (' C  88  PRO  HD2', ' C 106  CYS  HB2', -0.622, (14.313, 39.114, 19.636)), (' E  65  ASP  HB3', ' E  84  MET  HE3', -0.608, (9.526, 8.388, 49.778)), (' H 167  PRO  HD2', ' H 186  HIS  HB2', -0.606, (-44.736, 2.06, 68.575)), (' G 182  MET  CE ', ' G 228  PRO  HB2', -0.602, (-35.001, 17.947, 41.59)), (' A 263  ASN  OD1', ' A 401  HOH  O  ', -0.601, (-23.509, 49.842, 4.449)), (' G 211  LEU HD13', ' G 235  SER  HB3', -0.594, (-42.119, 7.764, 56.419)), (' E 193  ILE HG12', ' E 206  ARG  HG2', -0.592, (28.909, -15.899, 33.934)), (' G 182  MET  HE3', ' G 228  PRO  HB2', -0.572, (-34.452, 18.462, 42.154)), (' E 165  MET  HE1', ' E 201  PRO  HD2', -0.568, (20.993, -20.886, 46.325)), (' E 117  SER  HB2', ' E 119  GLN  HG3', -0.564, (2.01, -3.612, 60.417)), (' C 106  CYS  HA ', ' C 129  PRO  HB3', -0.558, (17.296, 42.271, 20.752)), (' G 121  ILE HD12', ' G 122  GLN  H  ', -0.556, (-31.721, 40.815, 62.718)), (' E 117  SER  OG ', ' E 119  GLN  HB2', -0.554, (2.771, -4.983, 58.631)), (' E  41  SER  OG ', ' F 204  ARG  NH2', -0.551, (14.328, 11.221, 37.979)), (' A 165  MET  HE1', ' A 201  PRO  HB2', -0.547, (-42.808, 10.982, 21.032)), (' C 110  ALA  HB3', ' C 124  ALA  HB3', -0.536, (15.044, 51.374, 14.712)), (' C 165  MET  HE1', ' C 201  PRO  O  ', -0.535, (23.299, 64.651, 21.64)), (' E 282  HIS  CE1', ' E 284  VAL HG22', -0.527, (-1.907, -12.677, 27.128)), (' C 282  HIS  CE1', ' C 284  VAL  HB ', -0.524, (-3.59, 61.448, 37.208)), (' C 282  HIS  HE1', ' C 284  VAL  HB ', -0.523, (-3.921, 61.963, 37.276)), (' E 110  ALA  HB3', ' E 124  ALA  HB3', -0.52, (17.912, -6.283, 51.01)), (' C  62  TRP  HA ', ' C  88  PRO  HB3', -0.52, (9.627, 37.939, 22.311)), (' G 316  GLN  CD ', ' G 349  LYS  HG2', -0.52, (-26.128, 10.837, 74.888)), (' A 239  ARG  NH1', ' X  61  ASP  OD2', -0.517, (-38.296, 42.812, 12.94)), (' C 182  MET  HE2', ' C 220  ILE HG12', -0.515, (13.669, 62.138, 33.841)), (' E 274  TYR  CD1', ' E 294  ASP  HB3', -0.511, (14.152, 6.884, 21.01)), (' C 190  ARG  HA ', ' C 215  HIS  CE1', -0.506, (23.052, 50.557, 37.282)), (' C  79  PRO  HD2', ' X  52  LEU  HB2', -0.505, (-11.227, 42.437, 18.155)), (' G 216  ARG  NH2', ' H 201  GLU  OE2', -0.504, (-36.546, 15.277, 65.058)), (' G 346  ASN  OD1', ' G 348  GLN  HB2', -0.501, (-27.807, 11.939, 81.994)), (' C 165  MET  HE2', ' C 167  LEU HD11', -0.499, (24.687, 61.806, 21.944)), (' C  78  ILE HG22', ' C  80  LYS  HD3', -0.497, (-10.6, 46.809, 16.75)), (' G 184 BVAL HG23', ' G 220  ILE HD11', -0.497, (-36.643, 19.066, 46.659)), (' F 205  LEU  O  ', ' F 209  GLN  HG3', -0.495, (23.956, 10.217, 44.781)), (' A 211  LEU HD13', ' A 235  SER  HB3', -0.491, (-38.923, 34.578, 10.309)), (' G 315  ASP  N  ', ' G 315  ASP  OD1', -0.49, (-23.81, 5.897, 72.402)), (' H 193  LYS  HE3', ' H 196  GLU  OE2', -0.49, (-55.259, 8.585, 67.059)), (' A  62  TRP  HA ', ' A  88  PRO  HB3', -0.488, (-31.276, 17.559, -4.047)), (' H 205  LEU  O  ', ' H 209  GLN  HG3', -0.485, (-41.24, 24.022, 75.164)), (' C 102  PHE  CE1', ' C 112  MET  HG3', -0.483, (7.99, 55.565, 13.183)), (' A 365  ARG  O  ', ' A 366  ASN  HB2', -0.482, (-17.376, 41.425, 27.154)), (' G 110  ALA  HB3', ' G 124  ALA  HB3', -0.482, (-35.706, 33.713, 59.188)), (' G  62  TRP  CZ3', ' H 204  ARG  HG2', -0.481, (-36.924, 20.063, 72.471)), (' G 174  TYR  CZ ', ' G 188  ALA  HB2', -0.478, (-46.671, 17.505, 61.4)), (' A 182  MET  HE3', ' A 228  PRO  HB2', -0.478, (-34.234, 23.321, 25.6)), (' H 202  GLU  O  ', ' H 206  GLU  HG3', -0.478, (-44.542, 20.716, 72.163)), (' C  76  GLN  NE2', ' X  55  GLU  OE1', -0.477, (-18.238, 44.785, 22.39)), (' A  35  THR HG23', ' A  77  THR  OG1', -0.476, (-10.382, 19.119, 0.853)), (' C 274  TYR  CD2', ' C 294  ASP  HB3', -0.476, (8.363, 38.732, 45.05)), (' G  26  HIS  CD2', ' G  26  HIS  H  ', -0.474, (-17.102, 6.787, 74.085)), (' A 165  MET  HE1', ' A 201  PRO  CB ', -0.467, (-42.413, 11.39, 21.548)), (' D 168  THR HG22', ' D 185  LYS  HD3', -0.466, (18.264, 31.512, 50.556)), (' G 296  ARG  NH1', ' G 313  GLN  HB2', -0.465, (-26.022, -1.136, 67.1)), (' E 106  CYS  HA ', ' E 129  PRO  HB3', -0.465, (21.179, 2.004, 45.704)), (' A 144  VAL  O  ', ' A 155  PHE  HA ', -0.465, (-38.326, 9.059, 14.953)), (' A 190  ARG  HA ', ' A 215  HIS  CE1', -0.464, (-44.384, 29.936, 11.576)), (' G 106  CYS  HA ', ' G 129  PRO  HB3', -0.464, (-39.455, 27.386, 67.175)), (' E 293  SER  HA ', ' E 317  PRO  HB3', -0.462, (13.719, 7.146, 27.525)), (' G 274  TYR  HB3', ' G 293  SER  HB2', -0.461, (-35.038, 4.973, 66.077)), (' G  85  HIS  NE2', ' G 103  THR  OG1', -0.459, (-30.83, 32.16, 63.856)), (' D 163  LYS  HE2', ' F 213  LYS  O  ', -0.457, (19.763, 20.035, 37.216)), (' E  32  ILE HG21', ' E  75  GLY  O  ', -0.455, (-7.419, 3.133, 35.04)), (' E 336  TYR  CE2', ' E 338  TRP  HA ', -0.455, (18.233, 12.514, 32.779)), (' G 144  VAL  O  ', ' G 155  PHE  HA ', -0.455, (-37.341, 32.757, 51.617)), (' A 274  TYR  CD2', ' A 294  ASP  HB3', -0.455, (-29.636, 39.411, 0.868)), (' A 239  ARG  NH1', ' X  61  ASP  OD1', -0.454, (-38.1, 43.668, 12.637)), (' A  52  LEU  HA ', ' A  52  LEU HD12', -0.453, (-15.935, 8.493, 17.538)), (' D 190  THR HG23', ' D 200  LEU HD23', -0.453, (17.964, 37.367, 35.123)), (' G 136  ILE  O  ', ' G 142  SER  HA ', -0.452, (-31.787, 32.583, 45.757)), (' G 293  SER  HA ', ' G 317  PRO  HB3', -0.449, (-32.238, 7.775, 67.742)), (' A 338  TRP  CD2', ' B 204  ARG  HG3', -0.449, (-34.72, 24.56, -7.453)), (' C 336  TYR  CE2', ' C 338  TRP  HA ', -0.447, (11.344, 32.645, 33.112)), (' A 141  TYR  OH ', ' A 201  PRO  HD3', -0.443, (-39.16, 10.84, 23.626)), (' E  62  TRP  HA ', ' E  88  PRO  HB3', -0.443, (15.568, 7.472, 43.571)), (' G 336  TYR  CE2', ' G 338  TRP  HA ', -0.442, (-35.823, 12.464, 74.236)), (' E 302  LYS  HG3', ' E 443  HOH  O  ', -0.442, (7.934, -14.132, 20.914)), (' A 336  TYR  CE2', ' A 338  TRP  HA ', -0.442, (-33.079, 28.777, -6.983)), (' C 241  ALA  HA ', ' C 256  THR HG22', -0.441, (16.569, 54.368, 45.836)), (' A  88  PRO  HD2', ' A 106  CYS  HB2', -0.44, (-35.6, 14.939, -3.655)), (' G 207  ILE HD13', ' G 243  HIS  NE2', -0.44, (-43.655, 12.357, 43.808)), (' G  80  LYS  HA ', ' G  80  LYS  HD3', -0.438, (-12.51, 30.388, 64.997)), (' J  58  MET  O  ', ' J  60  LEU HD22', -0.437, (13.461, -7.932, 10.894)), (' C  80  LYS  HA ', ' C  80  LYS  HD2', -0.436, (-8.921, 46.557, 14.812)), (' A 190  ARG  HD2', ' A 211  LEU  O  ', -0.436, (-45.543, 34.317, 11.736)), (' C 287  THR HG22', ' C 301  ASP  HA ', -0.435, (2.377, 59.124, 45.464)), (' G  52  LEU  HA ', ' G  52  LEU HD12', -0.434, (-14.856, 30.328, 50.808)), (' A 110  ALA  HB3', ' A 124  ALA  HB3', -0.433, (-36.743, 7.481, 7.825)), (' C  35  THR HG23', ' C  77  THR  OG1', -0.432, (-11.0, 42.965, 25.374)), (' G  62  TRP  HA ', ' G  88  PRO  HB3', -0.43, (-32.985, 23.749, 70.931)), (' E  41  SER  HB3', ' E 335  SER  HB3', -0.428, (11.426, 9.141, 35.905)), (' G 302  LYS  HG3', ' G 434  HOH  O  ', -0.428, (-28.785, 5.526, 45.309)), (' A 100  LYS  HD2', ' A 112  MET  SD ', -0.427, (-27.756, 2.656, 12.062)), (' E 144  VAL  O  ', ' E 155  PHE  HA ', -0.425, (18.567, -13.803, 48.58)), (' G 338  TRP  CE3', ' H 204  ARG  HD2', -0.425, (-36.005, 16.141, 73.727)), (' G 346  ASN  CG ', ' G 348  GLN  HB2', -0.424, (-27.316, 11.889, 81.825)), (' F 162  ILE  H  ', ' F 162  ILE HD12', -0.424, (31.294, 15.808, 33.022)), (' G 168  GLN  NE2', ' G 408  HOH  O  ', -0.42, (-52.631, 27.61, 56.155)), (' G 365  ARG  HD2', ' K  55  GLU  HB2', -0.419, (-21.308, -3.582, 48.412)), (' C 165  MET  HE2', ' C 167  LEU  CD1', -0.417, (24.498, 61.524, 21.804)), (' C 293  SER  OG ', ' C 337  ASP  OD2', -0.417, (10.161, 38.291, 37.942)), (' G 350  LYS  HG3', ' G 351  ASN  N  ', -0.414, (-21.529, 15.315, 74.859)), (' G 316  GLN  HG3', ' G 349  LYS  HE3', -0.413, (-26.794, 8.749, 75.584)), (' G 115  LEU  HA ', ' G 115  LEU HD23', -0.412, (-19.801, 34.53, 61.351)), (' C  83  GLN  HG2', ' C 113  TRP  CE2', -0.412, (1.674, 46.684, 12.621)), (' A 346  ASN  O  ', ' A 348  GLN  HA ', -0.411, (-24.399, 25.386, -11.996)), (' D 163  LYS  HA ', ' D 163  LYS  HD3', -0.411, (19.203, 24.338, 36.472)), (' A 165  MET  HE1', ' A 201  PRO  CD ', -0.411, (-42.366, 10.329, 21.899)), (' E  88  PRO  HD2', ' E 106  CYS  HB2', -0.41, (19.031, 6.016, 46.13)), (' E  95  SER  HB3', ' E 100  LYS  HB2', -0.409, (6.416, -11.442, 50.015)), (' E 218  VAL  HA ', ' E 232  ALA  O  ', -0.407, (16.228, -9.251, 28.786)), (' A 217  CYS  SG ', ' A 279  ILE HG13', -0.406, (-32.179, 29.777, 10.701)), (' G 126  HIS  CE1', ' G 154  LYS  HD2', -0.406, (-42.719, 32.67, 57.337)), (' C 112  MET  HB2', ' C 123  ILE HG21', -0.405, (9.873, 54.264, 11.407)), (' B 198  LYS  HE2', ' B 206  GLU  OE2', -0.405, (-46.054, 22.53, -5.41)), (' C 190  ARG  HD2', ' C 211  LEU  O  ', -0.404, (24.006, 49.946, 42.298)), (' G  95  SER  HB3', ' G 100  LYS  HB2', -0.403, (-25.005, 33.869, 53.513)), (' G 272  ASP  HB3', ' G 274  TYR  CE1', -0.403, (-35.555, -0.683, 68.222)), (' A  84  MET  HB3', ' A  84  MET  HE3', -0.401, (-28.552, 8.295, -4.567)), (' B 189  ILE  O  ', ' B 192  MET  HG3', -0.4, (-42.445, 35.043, -4.992)), (' G 328  ASN  O  ', ' G 357  ASN  HA ', -0.4, (-14.461, 11.475, 54.953))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
