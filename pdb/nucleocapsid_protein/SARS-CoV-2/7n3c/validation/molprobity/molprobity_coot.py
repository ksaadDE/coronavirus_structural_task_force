# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 160 ', 'PRO', None, (52.403880000000015, 10.46677, 13.2514)), ('H', ' 162 ', 'PRO', None, (50.90278, 5.81745, 17.158289999999997)), ('H', ' 162 ', 'PRO', None, (50.90278, 5.81745, 17.158289999999997)), ('L', '   8 ', 'PRO', None, (19.77325, 7.17123, 31.693019999999997)), ('L', '  95 ', 'PRO', None, (16.30706, 8.90607, 7.856549999999999)), ('L', ' 141 ', 'PRO', None, (33.28434, 10.832499999999992, 41.50293))]
data['rota'] = [('H', ' 107 ', 'GLU', 0.03367965473257002, (18.199709999999996, -18.81683, 9.3408)), ('H', ' 107 ', 'GLU', 0.016723264818329177, (18.12222, -18.95814, 9.42629)), ('H', ' 164 ', 'THR', 0.07275936942121172, (54.71938999999998, 4.1753699999999965, 23.822129999999998)), ('L', '   1 ', 'GLU', 0.0047965205184361094, (13.934149999999999, 13.05281, 11.62573)), ('L', ' 105 ', 'GLU', 0.0758945245587099, (30.338359999999987, 2.37946, 34.800329999999995)), ('L', ' 213 ', 'GLU', 0.03275171441756898, (60.30972, 29.89078, 41.85108999999999)), ('C', '  46 ', 'MET', 0.0, (-12.788609999999998, 4.18229, 8.48011)), ('C', ' 100 ', 'LYS', 0.0, (-32.00332, -16.19985, 14.92073)), ('C', ' 107 ', 'ARG', 0.26846952529604406, (-13.638169999999992, -13.10577, 5.094979999999999))]
data['cbeta'] = []
data['probe'] = [(' L 195  GLU  HG3', ' L 206  THR HG22', -0.536, (41.211, 26.803, 42.651)), (' L 142 AARG  NH2', ' L 163  VAL HG11', -0.502, (36.62, 11.667, 29.853)), (' C 154  ASN  ND2', ' C 206  IOD  I  ', -0.501, (-6.268, 4.635, -5.394)), (' C  94  ILE HG12', ' C 104  LEU HD21', -0.493, (-25.81, -13.696, 7.02)), (' H 107 AGLU  O  ', ' H 109  PRO  HD3', -0.488, (15.629, -16.174, 9.27)), (' C  88  ARG  NH1', ' C 207  IOD  I  ', -0.48, (-10.182, -5.703, 9.959)), (' C  93  ARG  HG2', ' C 103  ASP  OD1', -0.479, (-22.092, -14.019, 13.434)), (' H 177  HIS  HD2', ' H 544  HOH  O  ', -0.478, (46.115, 5.378, 34.342)), (' L   1  GLU  HG2', ' L 403  HOH  O  ', -0.475, (12.443, 10.592, 9.409)), (' H 212  ASN  OD1', ' H 219  LYS  HD3', -0.475, (62.175, 3.776, 21.751)), (' C 107 AARG  HD3', ' C 328  HOH  O  ', -0.459, (-17.754, -12.178, 6.135)), (' L  33  LEU HD11', ' L  88 BCYS  SG ', -0.456, (16.323, 1.058, 21.594)), (' H 153  CYS  SG ', ' H 209  CYS  SG ', -0.449, (58.871, 10.841, 30.264)), (' L 142 AARG  NH1', ' L 406  HOH  O  ', -0.448, (36.4, 8.864, 30.838)), (' C  45  ASN  O  ', ' C  49  THR HG22', -0.446, (-10.538, 4.663, 6.626)), (' L 184  ALA  O  ', ' L 188  LYS  HG3', -0.446, (55.18, 37.347, 27.593)), (' H 212  ASN  ND2', ' H 408  HOH  O  ', -0.445, (60.61, 3.262, 18.464)), (' L  91  ARG  HA ', ' L  96  LEU HD22', -0.443, (16.552, 2.431, 10.243)), (' H 153  CYS  HG ', ' H 209  CYS  HG ', -0.443, (58.257, 10.351, 29.996)), (' L 187  GLU  OE1', ' L 211  ARG  NH1', -0.43, (59.66, 34.294, 32.808)), (' C 118  GLU  HB3', ' C 121  LEU HD12', -0.429, (-1.538, -6.365, 13.346)), (' L   1  GLU  HB3', ' L 467  HOH  O  ', -0.426, (14.212, 10.019, 10.837)), (' C  92  ARG  HG2', ' C 328  HOH  O  ', -0.419, (-19.221, -11.808, 7.061)), (' H 161 AGLU  HG3', ' H 189  TYR  CZ ', -0.417, (47.167, 10.318, 16.622)), (' H 107 BGLU  N  ', ' H 107 BGLU  OE1', -0.416, (17.528, -18.27, 7.631)), (' L   0  ALA  HB3', ' L 503  HOH  O  ', -0.415, (19.422, 12.927, 10.791)), (' L 126  LYS  HB3', ' L 126  LYS  HE3', -0.412, (65.169, 25.011, 24.485)), (' C 136  GLU  HB2', ' H 105  PHE  CE2', -0.409, (10.956, -17.68, 1.072)), (' C  55  ALA  HB2', ' C 109  TYR  CE2', -0.406, (-12.588, -9.363, 1.888)), (' C  92  ARG  HG3', ' C 104  LEU HD12', -0.403, (-22.309, -11.545, 6.745))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
