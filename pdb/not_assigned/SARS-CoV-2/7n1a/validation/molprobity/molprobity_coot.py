# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 210 ', 'PRO', None, (-25.439, 22.779, -16.340999999999998)), ('B', '  32 ', 'PRO', None, (-7.168999999999999, 2.092, -7.159)), ('D', ' 210 ', 'PRO', None, (-18.790000000000003, 24.786999999999985, -37.464)), ('E', '  32 ', 'PRO', None, (-15.443000000000005, 36.18200000000003, -64.11))]
data['rota'] = [('A', '  17 ', 'ARG', 0.0015696447167745321, (-14.709000000000001, -16.135, -2.6669999999999994)), ('A', ' 111 ', 'ARG', 0.0, (-23.036, 9.645, -30.931)), ('A', ' 192 ', 'HIS', 0.0, (-6.037999999999995, 37.868, -0.45499999999999996)), ('D', '  87 ', 'GLN', 0.05936254187110369, (-9.609999999999989, 52.762999999999984, -69.896)), ('E', '   0 ', 'MET', 0.0, (-9.727999999999994, 41.150999999999996, -66.399)), ('E', '   1 ', 'ILE', 0.12044972190061376, (-8.515999999999993, 38.121, -64.401))]
data['cbeta'] = [('A', '  14 ', 'ARG', ' ', 0.3519608975830053, (-13.955999999999998, -9.36, -2.454999999999999)), ('A', ' 181 ', 'ARG', ' ', 0.3127487678903604, (-34.221, 25.0, -16.794))]
data['probe'] = [(' D 493  HOH  O  ', ' E   0  MET  HE1', -1.361, (-16.676, 40.452, -66.966)), (' D 493  HOH  O  ', ' E   0  MET  CE ', -1.268, (-16.481, 41.101, -67.0)), (' A 301  PG4  H62', ' A 467  HOH  O  ', -1.131, (-31.499, 20.91, -8.542)), (' D 301  PG4  H72', ' D 424  HOH  O  ', -1.085, (-28.527, 23.881, -40.361)), (' A 111  ARG HH22', ' A 128  GLU  HG3', -1.072, (-16.9, 8.854, -32.278)), (' A 189  MET  HE2', ' A 201  LEU HD22', -0.971, (-8.149, 40.007, -8.526)), (' A 111  ARG  NH2', ' A 128  GLU  HG3', -0.951, (-17.786, 9.66, -31.923)), (' A 111  ARG  HB2', ' A 111  ARG HH11', -0.928, (-20.843, 9.065, -30.469)), (' A 301  PG4  O1 ', ' A 401  HOH  O  ', -0.877, (-28.573, 16.336, -6.895)), (' D 104  GLY  N  ', ' D 110  LEU HD23', -0.855, (-12.334, 37.789, -30.908)), (' D 430  HOH  O  ', ' E   0  MET  HE2', -0.822, (-15.367, 42.025, -64.575)), (' D 104  GLY  H  ', ' D 110  LEU HD23', -0.817, (-11.615, 38.339, -30.476)), (' D 177  GLU  HG2', ' D 178  THR HG23', -0.809, (-30.717, 29.562, -32.107)), (' A 301  PG4  H41', ' A 467  HOH  O  ', -0.807, (-31.477, 20.236, -8.529)), (' D 251  SER  OG ', ' D 402  HOH  O  ', -0.801, (-6.207, -3.938, -54.076)), (' A  61  ASP  OD2', ' A 403  HOH  O  ', -0.791, (-43.36, -6.053, -13.415)), (' D 180  GLN  OE1', ' D 403  HOH  O  ', -0.771, (-23.348, 32.36, -27.453)), (' D 121  LYS  HD3', ' E   1  ILE HD12', -0.763, (-7.316, 41.604, -62.932)), (' D 104  GLY  H  ', ' D 110  LEU  CD2', -0.753, (-11.308, 38.152, -30.26)), (' D 121  LYS  HB3', ' E   1  ILE HD13', -0.752, (-7.249, 40.938, -60.839)), (' A 192  HIS  NE2', ' A 202  ARG  NH1', -0.739, (-7.846, 32.567, -3.033)), (' D 121  LYS  HD3', ' E   1  ILE  CD1', -0.739, (-6.366, 41.532, -62.728)), (' A 301  PG4  H22', ' A 467  HOH  O  ', -0.699, (-31.823, 20.135, -8.287)), (' D  97  ARG  NH2', ' D 405  HOH  O  ', -0.696, (-18.311, 51.706, -46.641)), (' C   3  GLN  OE1', ' C 101  HOH  O  ', -0.695, (-25.24, -4.273, -23.873)), (' D 104  GLY  N  ', ' D 110  LEU  CD2', -0.686, (-11.097, 37.684, -30.658)), (' A 111  ARG  HB2', ' A 111  ARG  NH1', -0.684, (-20.262, 8.979, -30.702)), (' D 239  GLY  HA3', ' D 301  PG4  H31', -0.665, (-27.962, 25.491, -41.585)), (' A 239  GLY  HA3', ' A 301  PG4  H21', -0.647, (-29.444, 18.648, -8.318)), (' D 178  THR  O  ', ' D 181  ARG  HG2', -0.645, (-25.861, 27.165, -33.914)), (' A 214  THR HG23', ' A 499  HOH  O  ', -0.628, (-16.099, 25.218, -21.23)), (' D 119  ASP  HB3', ' E   0  MET  HB3', -0.619, (-11.547, 42.529, -64.436)), (' A 148  GLU  OE2', ' A 405  HOH  O  ', -0.609, (-13.901, -5.64, -35.384)), (' D 301  PG4  H32', ' D 424  HOH  O  ', -0.604, (-29.278, 25.067, -40.215)), (' D  35  ARG  HD2', ' E  53  ASP  OD2', -0.603, (-30.366, 36.261, -50.418)), (' E  12  ARG  O  ', ' E 101  HOH  O  ', -0.586, (-26.202, 16.431, -46.087)), (' D 232  GLU  OE2', ' E   6  LYS  NZ ', -0.562, (-12.341, 25.88, -55.389)), (' D 108  ARG  O  ', ' D 110  LEU  CD2', -0.551, (-11.622, 39.728, -29.882)), (' E  22  PHE  CE2', ' E  69  GLU  HG2', -0.548, (-35.271, 20.672, -51.574)), (' A 111  ARG  HD3', ' A 113  TYR  OH ', -0.547, (-19.855, 11.553, -27.539)), (' E  40  LEU HD23', ' E  45  ARG  HA ', -0.544, (-32.241, 20.23, -67.307)), (' E  77  GLU  HG3', ' E 110  HOH  O  ', -0.543, (-27.08, 10.265, -63.154)), (' A 111  ARG  CB ', ' A 111  ARG HH11', -0.542, (-20.622, 9.523, -30.449)), (' A 219  ARG  HD2', ' A 256  ARG  NH1', -0.529, (1.469, 41.108, -16.826)), (' A 177  GLU  O  ', ' A 181  ARG  HD2', -0.521, (-37.03, 23.458, -14.997)), (' A 240  THR HG23', ' A 301  PG4  H61', -0.514, (-28.28, 23.015, -8.507)), (' A 192  HIS  N  ', ' A 192  HIS  ND1', -0.514, (-7.143, 37.202, -2.026)), (' A 189  MET  HE3', ' A 217  TRP  HH2', -0.511, (-9.187, 37.889, -10.355)), (' A 111  ARG  CB ', ' A 111  ARG  NH1', -0.511, (-20.545, 9.38, -30.855)), (' D 191  HIS  O  ', ' D 192  HIS  ND1', -0.506, (-14.608, -0.615, -51.795)), (' A 111  ARG  NH2', ' A 128  GLU  CG ', -0.504, (-17.047, 9.425, -32.468)), (' D 103  VAL  HA ', ' D 110  LEU HD23', -0.491, (-11.768, 38.683, -31.355)), (' D 301  PG4  C3 ', ' D 424  HOH  O  ', -0.489, (-28.884, 24.962, -40.389)), (' E  25  CYS  HB2', ' E  39  LEU HD21', -0.489, (-26.357, 20.651, -59.977)), (' A 111  ARG  HD3', ' A 113  TYR  CZ ', -0.484, (-19.855, 10.271, -27.595)), (' A 219  ARG  HB2', ' A 224  GLN  OE1', -0.477, (-1.758, 37.639, -16.622)), (' D 117  ALA  HB2', ' E  60  TRP  CE2', -0.474, (-10.536, 41.509, -54.136)), (' D 121  LYS  NZ ', ' D 417  HOH  O  ', -0.472, (-7.399, 46.528, -60.433)), (' D 108  ARG  O  ', ' D 110  LEU HD22', -0.465, (-11.516, 39.743, -29.678)), (' A 192  HIS  HD1', ' A 192  HIS  N  ', -0.464, (-7.702, 37.009, -2.151)), (' D 218  GLN  HG2', ' D 223  ASP  HA ', -0.463, (0.8, 12.053, -41.893)), (' A  19  GLU  OE1', ' A  75  ARG  NH1', -0.461, (-22.171, -13.601, -6.013)), (' A 189  MET  HE3', ' A 201  LEU  HB3', -0.457, (-8.681, 37.822, -9.363)), (' E   6  LYS  O  ', ' E  27  VAL  HA ', -0.457, (-18.09, 24.866, -59.282)), (' D 301  PG4  H51', ' D 424  HOH  O  ', -0.457, (-28.459, 24.368, -39.634)), (' E  40  LEU  HB3', ' E  44  GLU  H  ', -0.453, (-30.971, 17.371, -67.825)), (' D 227  ASP  HB3', ' D 248  VAL HG13', -0.453, (-1.91, 7.297, -54.075)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.453, (-11.96, 2.244, -19.15)), (' A 191  HIS  HB3', ' A 274  TRP  CH2', -0.452, (-9.988, 41.733, -3.197)), (' D  84  TYR  HB3', ' D 139  ALA  HB1', -0.451, (-7.482, 54.168, -61.38)), (' D 109  PHE  C  ', ' D 110  LEU HD22', -0.443, (-10.486, 40.215, -30.375)), (' D  11  SER  HA ', ' D  21  ARG  O  ', -0.44, (-23.496, 44.61, -58.608)), (' B  38  ASP  HB3', ' B  45  ARG  HG3', -0.439, (-14.419, 10.106, 10.224)), (' D  45  MET  HE2', ' F   2  LEU HD11', -0.439, (-27.395, 45.976, -45.236)), (' D 301  PG4  H51', ' D 301  PG4  H72', -0.435, (-28.222, 24.619, -39.341)), (' E  88  SER  OG ', ' E  89  GLN  N  ', -0.434, (-16.224, 24.526, -74.827)), (' D  82  ARG  HG3', ' D 442  HOH  O  ', -0.431, (-15.491, 50.393, -64.961)), (' A 301  PG4  C4 ', ' A 467  HOH  O  ', -0.428, (-31.546, 20.66, -8.653)), (' E  17  ASN  ND2', ' E  74  GLU  HG2', -0.424, (-32.267, 2.386, -57.169)), (' D 121  LYS  HB3', ' E   1  ILE  CD1', -0.422, (-6.725, 41.015, -61.412)), (' A  98  MET  HB3', ' A  98  MET  HE3', -0.422, (-17.942, 4.253, -20.867)), (' D 227  ASP  HB3', ' D 248  VAL  CG1', -0.422, (-2.337, 7.17, -54.256)), (' A 219  ARG  HD2', ' A 256  ARG  CZ ', -0.422, (1.129, 41.239, -16.826)), (' A 224  GLN  OE1', ' A 257  TYR  CE2', -0.421, (-1.536, 37.516, -14.747)), (' A 301  PG4  C2 ', ' A 467  HOH  O  ', -0.419, (-30.877, 19.953, -7.836)), (' A  81  LEU HD13', ' A 118  TYR  CD1', -0.416, (-10.791, -7.046, -16.28)), (' D 214  THR HG22', ' D 216  THR HG23', -0.415, (-5.524, 17.615, -41.699)), (' A  82  ARG  HD3', ' A 409  HOH  O  ', -0.412, (-11.666, -13.534, -10.226)), (' E  40  LEU  HB3', ' E  44  GLU  N  ', -0.407, (-31.011, 17.105, -68.333)), (' A 159  TYR  CE2', ' C   3  GLN  HG2', -0.406, (-27.905, -0.115, -24.648)), (' D   6  ARG  NE ', ' D 113  TYR  OH ', -0.405, (-14.703, 38.077, -40.943)), (' A 214  THR  OG1', ' A 262  GLN  HB2', -0.403, (-15.713, 28.61, -20.829)), (' E  31  HIS  ND1', ' E  32  PRO  HA ', -0.402, (-15.302, 37.658, -62.249))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
