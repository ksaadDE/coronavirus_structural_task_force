# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('D', '   8 ', 'PRO', None, (157.452, 191.185, 184.925)), ('D', '  95 ', 'PRO', None, (174.578, 196.711, 202.17899999999997)), ('F', '   8 ', 'PRO', None, (210.736, 275.659, 186.84999999999997)), ('F', '  95 ', 'PRO', None, (211.54700000000005, 257.214, 203.60399999999998)), ('H', '   8 ', 'PRO', None, (254.961, 191.72, 172.045)), ('H', '  95 ', 'PRO', None, (244.41, 198.56, 193.573)), ('K', '   8 ', 'PRO', None, (261.31899999999996, 279.36099999999993, 171.073)), ('M', '   8 ', 'PRO', None, (183.177, 230.561, 152.225)), ('O', '   8 ', 'PRO', None, (214.25500000000005, 190.076, 145.616))]
data['rota'] = [('A', ' 165 ', 'ASN', 0.18576880111639993, (255.433, 228.117, 183.44099999999997)), ('B', ' 165 ', 'ASN', 0.18736991619280252, (180.47700000000006, 253.22199999999998, 192.815)), ('C', ' 165 ', 'ASN', 0.18883324684228114, (191.86200000000002, 174.742, 184.39399999999998))]
data['cbeta'] = []
data['probe'] = [(' C 471  GLU  HA ', ' F  27  GLN  HA ', -0.899, (209.626, 255.956, 190.746)), (' B 902  MET  HE1', ' B1050  MET  HE3', -0.787, (202.621, 217.147, 283.867)), (' A 790  LYS  HA ', ' A 790  LYS  HE2', -0.785, (230.209, 238.645, 273.416)), (' C 471  GLU  HA ', ' F  27  GLN  CA ', -0.745, (209.349, 256.798, 191.286)), (' A 779  GLN  NE2', ' A 783  ALA  CB ', -0.743, (219.039, 231.218, 263.047)), (' B 902  MET  HE1', ' B1050  MET  CE ', -0.735, (202.618, 216.68, 283.491)), (' A 779  GLN  NE2', ' A 783  ALA  HB3', -0.732, (218.713, 230.848, 264.002)), (' C 305  SER  C  ', ' C 307  THR  H  ', -0.665, (202.323, 183.782, 236.977)), (' B 902  MET  CE ', ' B1050  MET  HE1', -0.664, (202.673, 216.055, 284.156)), (' A 779  GLN HE21', ' A 783  ALA  HB3', -0.64, (218.719, 230.43, 263.687)), (' B 902  MET  CE ', ' B1050  MET  CE ', -0.635, (202.55, 216.654, 284.376)), (' A 986  LYS  HD2', ' C 427  ASP  CB ', -0.629, (209.239, 230.781, 207.477)), (' C 779  GLN  HG3', ' C 783  ALA  HB3', -0.622, (234.791, 199.478, 258.786)), (' C 471  GLU  HA ', ' F  27  GLN  CB ', -0.619, (208.881, 256.385, 192.006)), (' C 905  ARG  HD2', ' C1049  LEU  O  ', -0.61, (222.709, 195.414, 278.805)), (' A 986  LYS  HZ3', ' C 427  ASP  C  ', -0.576, (207.095, 229.549, 207.962)), (' B1142  GLN  N  ', ' B1143  PRO  CD ', -0.576, (224.573, 214.007, 317.984)), (' A 986  LYS  CD ', ' C 427  ASP  CB ', -0.566, (209.491, 230.389, 207.583)), (' C 979  ASP  OD1', ' C 980  ILE  N  ', -0.564, (218.42, 196.974, 209.746)), (' A1142  GLN  N  ', ' A1143  PRO  CD ', -0.563, (230.461, 201.079, 316.012)), (' A 473  TYR  O  ', ' A 474  GLN  C  ', -0.556, (177.057, 201.011, 185.437)), (' C1142  GLN  N  ', ' C1143  PRO  CD ', -0.555, (216.956, 201.78, 317.652)), (' B 565  PHE  HE1', ' B 567  ARG  HE ', -0.555, (238.552, 231.664, 219.029)), (' A 389  ASP  HA ', ' A 528  LYS  HD2', -0.542, (225.223, 190.326, 198.797)), (' C 305  SER  C  ', ' C 307  THR  N  ', -0.533, (201.595, 183.782, 236.977)), (' B 305  SER  C  ', ' B 307  THR  H  ', -0.504, (196.215, 238.123, 242.545)), (' A 329  PHE  CZ ', ' A 528  LYS  HD3', -0.496, (225.702, 187.393, 200.476)), (' A 472  ILE  HA ', ' A 491  PRO  HD3', -0.493, (180.358, 196.745, 182.717)), (' A 898  PHE  N  ', ' A 899  PRO  CD ', -0.492, (235.363, 226.678, 286.978)), (' B  81  ASN  N  ', ' B  82  PRO  CD ', -0.487, (185.271, 268.237, 216.232)), (' C  81  ASN  N  ', ' C  82  PRO  CD ', -0.483, (178.266, 166.248, 207.554)), (' A  81  ASN  N  ', ' A  82  PRO  CD ', -0.482, (271.076, 212.732, 201.456)), (' B 898  PHE  N  ', ' B 899  PRO  CD ', -0.482, (197.451, 211.834, 289.986)), (' C1128  VAL  O  ', ' C1128  VAL HG22', -0.48, (201.075, 220.996, 300.674)), (' C 898  PHE  N  ', ' C 899  PRO  CD ', -0.472, (229.114, 186.59, 284.249)), (' B 902  MET  HE2', ' B1050  MET  HE1', -0.464, (202.367, 215.928, 285.089)), (' A 889  GLY  O  ', ' B1045  LYS  NZ ', -0.455, (217.774, 226.437, 275.072)), (' A  81  ASN  N  ', ' A  82  PRO  HD3', -0.452, (271.621, 212.904, 201.639)), (' C  81  ASN  N  ', ' C  82  PRO  HD3', -0.446, (178.074, 166.06, 208.041)), (' F  29  ILE  O  ', ' F  30  ARG  C  ', -0.445, (200.304, 260.455, 193.851)), (' B 905  ARG  CD ', ' B1050  MET  HE2', -0.443, (204.533, 214.471, 283.45)), (' B9215  GLU  N  ', ' B9216  PRO  CD ', -0.441, (179.832, 265.964, 239.159)), (' B 862  PRO  HA ', ' B 863  PRO  HD3', -0.438, (192.075, 209.087, 250.115)), (' B  81  ASN  N  ', ' B  82  PRO  HD3', -0.438, (184.937, 268.782, 216.495)), (' A  48  LEU HD22', ' A 306  PHE  HE1', -0.436, (247.753, 220.944, 230.836)), (' A9215  GLU  N  ', ' A9216  PRO  CD ', -0.436, (278.187, 215.5, 223.752)), (' C9215  GLU  N  ', ' C9216  PRO  CD ', -0.435, (184.695, 157.488, 228.547)), (' A 796  TYR  CG ', ' A9312  NAG  H82', -0.433, (245.638, 231.603, 281.679)), (' B 986  LYS  N  ', ' B 987  PRO  HD2', -0.432, (199.985, 209.957, 205.455)), (' C 862  PRO  HA ', ' C 863  PRO  HD3', -0.431, (230.946, 192.437, 244.314)), (' B1073  LYS  HD3', ' B1075  PHE  CZ ', -0.431, (219.643, 233.011, 296.984)), (' C1050  MET  HE2', ' C1052  PHE  CZ ', -0.428, (224.276, 189.882, 274.874)), (' A 779  GLN HE22', ' A 783  ALA  CB ', -0.427, (218.837, 232.144, 263.56)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.425, (227.969, 212.915, 267.07)), (' A 542  ASN  HA ', ' A 546  LEU  O  ', -0.425, (225.724, 187.885, 208.129)), (' C 986  LYS  N  ', ' C 987  PRO  HD2', -0.424, (222.462, 207.096, 202.517)), (' C 656  VAL  HA ', ' C9309  NAG  H82', -0.422, (178.125, 190.798, 257.088)), (' A1082  CYS  HB3', ' A1134  ASN  OD1', -0.421, (229.877, 184.461, 303.587)), (' A 986  LYS  HZ2', ' C 427  ASP  CB ', -0.421, (207.822, 231.029, 208.3)), (' B1076  THR  HB ', ' B1097  SER  HB3', -0.418, (228.539, 232.308, 299.87)), (' B 299  THR  OG1', ' B 315  THR HG21', -0.418, (206.611, 240.74, 240.323)), (' B 567  ARG  HA ', ' B 572  THR  O  ', -0.416, (237.574, 233.433, 224.605)), (' A 986  LYS  N  ', ' A 987  PRO  HD2', -0.414, (213.116, 227.539, 205.598)), (' C 821  LEU  C  ', ' C 821  LEU HD23', -0.403, (217.941, 182.179, 257.829)), (' O  59  ILE  HA ', ' O  60  PRO  HD3', -0.403, (228.213, 192.817, 162.352)), (' H  58  VAL  HA ', ' H  59  PRO  HD3', -0.402, (271.636, 199.605, 184.005)), (' A  44  ARG  O  ', ' A 283  GLY  HA2', -0.401, (247.549, 231.59, 226.496)), (' C 305  SER  CB ', ' C 307  THR  O  ', -0.401, (202.288, 185.436, 238.248)), (' B 898  PHE  HB3', ' B 899  PRO  HD3', -0.4, (197.485, 213.247, 289.109))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
