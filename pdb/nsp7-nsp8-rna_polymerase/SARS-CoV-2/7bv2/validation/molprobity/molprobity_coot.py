# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(" T  17    U  O2'", ' T  18    A  N3 ', -0.771, (66.033, 84.305, 116.298)), (' C  44  ASP  HB3', ' C  47  GLU  HG2', -0.68, (110.66, 70.947, 118.156)), (' P  13    U  H3 ', ' T  18    A  N6 ', -0.647, (65.923, 91.102, 114.569)), (' A 503  GLY  O  ', ' A 507  ASN  ND2', -0.634, (88.718, 107.951, 116.789)), (' A 726  ARG  NH2', ' A 744  GLU  OE1', -0.617, (89.686, 93.962, 65.553)), (' A 271  LEU HD23', ' B 110  ALA  HB2', -0.61, (106.695, 131.429, 104.592)), (' P  11    A  N6 ', ' T  20    U  O4 ', -0.604, (59.721, 90.356, 112.279)), (' B 175  ASP  OD1', ' B 176  ASN  N  ', -0.601, (126.79, 98.707, 130.435)), (' B 103  LEU HD23', ' B 124  THR HG21', -0.597, (104.655, 127.789, 113.779)), (' A 755  MET  HG2', ' A 764  VAL HG22', -0.59, (91.574, 84.999, 85.379)), (' A 380  MET  HE1', ' B  98  LEU HD22', -0.574, (94.613, 125.696, 117.02)), (' A 367  SER  OG ', ' A 368  PHE  N  ', -0.572, (77.245, 123.949, 111.851)), (' A 476  VAL HG22', ' A 696  ILE HG22', -0.57, (90.773, 94.787, 84.438)), (' B 132  ILE HG21', ' B 138  TYR  HB2', -0.554, (119.43, 105.652, 121.522)), (' A 454  ASP  OD2', ' A 457  ARG  NH1', -0.539, (110.084, 98.0, 108.639)), (" T  17    U  O2'", " T  18    A  H2'", -0.537, (65.245, 83.752, 117.424)), (' A 562  ILE  HA ', ' A 565  THR HG22', -0.534, (82.98, 108.473, 108.572)), (' A 811  GLU  HG2', ' A1103  HOH  O  ', -0.531, (92.69, 80.454, 98.993)), (' A 889  ARG  HG2', ' A 907  LEU  HB2', -0.529, (71.938, 66.734, 118.654)), (' A 201  ILE HG23', ' A 222  PHE  HB3', -0.525, (115.426, 111.033, 59.276)), (' A 503  GLY  HA3', ' A 561  SER  HA ', -0.525, (87.301, 109.049, 112.203)), (' C  16  VAL HG23', ' C  19  GLN HE21', -0.525, (96.095, 83.59, 136.151)), (' A 488  ILE  HB ', ' A 492  GLN  HG3', -0.524, (70.106, 107.69, 97.69)), (' A 864  ILE  O  ', ' A 916  TRP  HH2', -0.522, (78.333, 74.261, 106.27)), (' A 851  ASP  OD1', ' A 852  GLY  N  ', -0.521, (75.606, 81.245, 128.3)), (' A 720  VAL HG11', ' A 775  LEU  HG ', -0.513, (97.836, 84.479, 70.133)), (' A 858  ARG  NH2', ' P  17    U  OP1', -0.504, (83.498, 83.191, 118.362)), (' A 576  LEU HD11', ' A 686  THR HG22', -0.503, (82.665, 102.07, 97.473)), (' A 330  VAL HG11', ' B 117  LEU HD13', -0.502, (98.704, 122.571, 109.155)), (' A 856  ILE HD11', ' A 891  LEU  HB3', -0.498, (74.234, 73.271, 122.927)), (' A 180  GLU  OE2', ' A 183  ARG  NH1', -0.498, (123.283, 112.625, 85.606)), (' A 636  LEU HD21', ' A 655  LEU HD22', -0.495, (90.509, 111.448, 89.382)), (' A 836  ARG HH22', ' A 840  ALA  HB2', -0.489, (87.542, 79.578, 113.3)), (' A 452  ASP  O  ', ' A 624  ARG  NH2', -0.487, (102.408, 98.036, 108.305)), (' A 452  ASP  OD2', ' A 556  THR  OG1', -0.481, (98.832, 97.03, 110.566)), (' A 402  THR HG22', ' A 404  ASN  H  ', -0.48, (101.819, 111.152, 125.76)), (" P  14    A  H2'", ' P  15    A  C8 ', -0.48, (72.898, 91.383, 117.48)), (' A 420  TYR  O  ', ' A 424  VAL HG23', -0.478, (90.372, 66.77, 123.208)), (' A 546  TYR  CE2', ' A 845  ASP  HB2', -0.475, (89.908, 88.038, 121.419)), (' A 726  ARG  HA ', ' A 729  GLU  HG3', -0.473, (97.166, 97.47, 65.83)), (' A 588  VAL HG23', ' A 758  LEU HD12', -0.472, (83.637, 86.833, 95.349)), (' C  35  LEU  O  ', ' C  39  ILE HG12', -0.472, (106.27, 79.084, 122.844)), (' A 666  MET  HB3', ' A 673  LEU HD22', -0.472, (98.021, 112.29, 110.835)), (' A 239  SER  OG ', ' A 465  ASP  OD1', -0.472, (103.713, 103.468, 77.627)), (' C  14  LEU HD22', ' C  36  HIS  CG ', -0.471, (101.672, 83.09, 124.077)), (' A 254  GLU  OE2', ' A 285  ARG  NH2', -0.471, (118.204, 119.002, 86.117)), (' A 844  VAL HG11', ' A 848  VAL  H  ', -0.47, (84.498, 82.494, 123.621)), (' A 434  SER  OG ', ' A 876  GLU  OE2', -0.468, (94.22, 62.34, 108.252)), (' A 836  ARG  NH2', ' A 840  ALA  HB2', -0.46, (87.505, 78.854, 113.347)), (' A 294  TYR  HE1', ' A 313  PHE  HB2', -0.459, (103.701, 114.583, 84.386)), (' A 907  LEU  H  ', ' A 907  LEU HD23', -0.457, (68.437, 68.637, 116.36)), (' A 335  VAL HG11', ' A 340  PHE  CE2', -0.456, (87.788, 129.265, 116.134)), (' B 161  ASP  O  ', ' B 181  ALA  HB3', -0.453, (111.511, 100.152, 128.942)), (' A 603  LYS  HA ', ' A 603  LYS  HD2', -0.451, (81.086, 75.255, 86.351)), (" T  19    A  H2'", ' T  20    U  H6 ', -0.45, (59.718, 89.538, 118.445)), (' A 221  ASP  N  ', ' A 221  ASP  OD1', -0.448, (114.906, 104.355, 59.743)), (' A 631  ARG  HG2', ' A 663  LEU HD13', -0.443, (95.365, 104.74, 96.663)), (' A 333  ILE  O  ', ' A 339  PRO  HA ', -0.442, (91.805, 132.801, 113.551)), (' A 273  TYR  HB3', ' B 116  PRO  HG3', -0.441, (104.164, 123.911, 100.936)), (' A 329  LEU  HB3', ' B 114  CYS  SG ', -0.44, (98.603, 126.287, 101.817)), (' C   5  ASP  OD1', ' C   6  VAL  N  ', -0.438, (100.515, 68.947, 124.814)), (' A 120  THR  OG1', ' A 122  TYR  O  ', -0.434, (125.06, 98.17, 75.263)), (' B 101  ASP  HA ', ' B 104  ASN HD22', -0.433, (102.114, 134.63, 116.563)), (' A 689  TYR  O  ', ' A 693  VAL HG23', -0.432, (87.234, 97.63, 91.926)), (' A 444  GLN  HB3', ' A 448  ALA  HB2', -0.432, (102.291, 93.162, 118.76)), (" T  20    U  H2'", ' T  21    C  C6 ', -0.432, (55.715, 92.695, 116.43)), (' P  13    U  H3 ', ' T  18    A  H62', -0.43, (66.082, 90.913, 115.521)), (" T  17    U  O2'", " T  18    A  H5'", -0.429, (66.809, 83.238, 117.348)), (' A 166  VAL HG13', ' A 458  TYR  CZ ', -0.429, (108.845, 93.219, 102.854)), (' A 837  ILE  O  ', ' A 884  TYR  OH ', -0.427, (86.202, 74.17, 114.983)), (' A 855  MET  HG2', ' A 891  LEU HD21', -0.427, (78.463, 74.909, 123.382)), (' C  39  ILE HG22', ' C  48  ALA  HA ', -0.427, (108.133, 74.661, 122.5)), (' A 304  ASP  N  ', ' A 304  ASP  OD1', -0.424, (89.139, 111.263, 82.27)), (' A 193  CYS  HB3', ' A 232  PRO  HG3', -0.423, (113.25, 115.096, 68.319)), (' A  86  ILE  CD1', ' A 222  PHE  HB2', -0.418, (117.754, 108.926, 58.461)), (' A  35  PHE  HB2', ' A  48  PHE  HD2', -0.417, (113.15, 91.924, 68.196)), (' A 238  TYR  O  ', ' A 242  MET  HG3', -0.416, (108.441, 106.372, 79.469)), (' A 294  TYR  CE1', ' A 313  PHE  HB2', -0.415, (103.711, 115.042, 84.261)), (' A 855  MET  HE3', ' A 891  LEU HD21', -0.414, (78.432, 74.576, 124.713)), (' A 848  VAL HG13', ' A 855  MET  HB2', -0.414, (80.128, 79.221, 124.647)), (' A 276  THR HG23', ' A 296  PRO  HB2', -0.414, (102.668, 122.825, 87.762)), (' A 546  TYR  CD2', ' A 845  ASP  HB2', -0.414, (89.722, 87.88, 120.844)), (' A 424  VAL HG22', ' A 429  PHE  HD2', -0.414, (92.321, 66.062, 121.736)), (' A 260  ASP  OD1', ' A 262  THR HG22', -0.413, (129.323, 115.558, 91.02)), (' A 684  ASP  OD1', ' A 685  ALA  N  ', -0.412, (86.149, 103.262, 101.899)), (' B 168  GLN  HB2', ' B 171  GLU  HG3', -0.412, (120.597, 106.663, 134.951)), (' A  39  ASN  HB2', ' A  42  VAL  H  ', -0.408, (106.02, 94.116, 60.842)), (' A 334  PHE  CE1', ' A 339  PRO  HB3', -0.408, (93.691, 134.886, 114.136)), (' A 493  VAL HG12', ' A 495  VAL  H  ', -0.407, (73.244, 104.357, 105.041)), (' A 889  ARG  HG2', ' A 907  LEU HD12', -0.405, (71.241, 65.921, 119.177)), (" T  13    A  H2'", ' T  14    A  C8 ', -0.405, (77.51, 88.97, 102.959)), (' A 545  LYS  HB2', ' A 555  ARG  O  ', -0.403, (94.584, 93.005, 113.068)), (' A 816  HIS  HB2', ' A 831  TYR  CZ ', -0.4, (88.846, 70.924, 100.282))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
