# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', ' 115 ', 'ALA', None, (-20.85, 22.857, 33.182)), ('B', ' 148 ', 'PRO', None, (-23.193000000000005, 26.88, 40.437)), ('B', ' 150 ', 'PRO', None, (-22.769, 27.419, 46.63400000000001)), ('C', ' 145 ', 'PRO', None, (-17.515, 6.885999999999998, 66.712)), ('H', ' 148 ', 'PRO', None, (52.05, 32.22600000000001, 22.247)), ('H', ' 150 ', 'PRO', None, (51.61099999999997, 31.812, 16.049)), ('L', ' 145 ', 'PRO', None, (46.245999999999974, 8.912, -0.9380000000000001))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' H 144  LYS  NZ ', ' L 128  GLU  OE2', -0.946, (61.172, 17.445, 23.688)), (' A 360  ASN  HA ', ' A 523  THR HG22', -0.832, (55.507, 23.083, 77.03)), (' C 186  PRO  O  ', ' C 190  LYS  HG3', -0.827, (-38.97, 2.548, 36.925)), (' C 160  LYS  O  ', ' C 302  HOH  O  ', -0.772, (-21.648, 2.5, 41.631)), (' H 205  ASN  OD1', ' H 301  HOH  O  ', -0.739, (56.975, 40.862, 20.142)), (' H 170  VAL HG11', ' L 164  GLU  HB3', -0.721, (50.571, 16.711, 19.408)), (' C  33  ALA  HB1', ' C  51  TYR  HA ', -0.702, (13.261, 6.721, 54.833)), (' E 493  GLN  OE1', ' E 601  HOH  O  ', -0.668, (11.397, 21.632, 3.065)), (' C 169  SER  OG ', ' C 301  HOH  O  ', -0.648, (-22.622, 14.998, 56.801)), (' A 360  ASN  CA ', ' A 523  THR HG22', -0.644, (54.796, 23.308, 76.724)), (' L  33  ALA  HB1', ' L  51  TYR  HA ', -0.631, (16.216, 8.582, 10.281)), (' B 182 BVAL HG21', ' C 139  LEU HD13', -0.608, (-31.524, 13.181, 55.405)), (' B 160  LEU HD21', ' B 183  VAL HG21', -0.599, (-37.233, 19.771, 61.476)), (' L 167  LYS  HD2', ' L 168  PRO  HD2', -0.577, (44.834, 13.677, 8.955)), (' H 170  VAL HG11', ' L 164  GLU  CB ', -0.564, (51.064, 16.149, 19.951)), (' B 182 BVAL  CG2', ' C 139  LEU HD13', -0.561, (-31.911, 13.431, 54.976)), (' A 447  GLY  HA2', ' A 498  GLN  HG3', -0.554, (13.094, 23.609, 72.535)), (' L  40  LEU HD13', ' L  85  ALA  HB2', -0.537, (33.543, 18.403, 2.038)), (' B 199  VAL  HB ', ' B 208  VAL HG13', -0.534, (-35.564, 25.015, 47.317)), (' E 365  TYR  CD2', ' E 387  LEU  HB3', -0.534, (-17.774, 14.279, -20.655)), (' B 194  THR HG22', ' B 318  HOH  O  ', -0.533, (-49.024, 20.037, 56.941)), (' A 462  LYS  HG2', ' A 465  GLU  OE1', -0.523, (38.029, 7.662, 60.349)), (' B  72  ARG  HD3', ' B  74  THR  OG1', -0.514, (14.564, 25.843, 36.721)), (' L 153  LYS  HD3', ' L 158  PRO  HA ', -0.511, (52.226, -0.24, 20.662)), (' A 403  ARG  NH1', ' A 405  ASP  OD1', -0.508, (19.628, 11.051, 74.251)), (' A 455  LEU HD11', ' A 493  GLN  HB2', -0.503, (18.678, 14.717, 60.851)), (' H  36  TRP  CE2', ' H  81  MET  HB2', -0.495, (26.593, 25.566, 24.307)), (' H 148  PRO  HD2', ' H 203  PRO  HB3', -0.494, (52.453, 34.524, 20.992)), (' H 101  TYR  HB2', ' L  37  TYR  CE2', -0.492, (23.277, 17.221, 11.991)), (' C  38  GLN  HB2', ' C  48  LEU HD11', -0.482, (0.603, 13.853, 61.314)), (' A 363  ALA  O  ', ' A 526  GLY  HA2', -0.479, (49.713, 20.216, 86.551)), (' B  36  TRP  CE2', ' B  81  MET  HB2', -0.479, (2.524, 20.514, 38.573)), (' E 336  CYS  SG ', ' E 363  ALA  HB2', -0.475, (-20.031, 20.979, -17.399)), (' A 443  SER  HB3', ' A 499  PRO  HD3', -0.474, (15.253, 24.656, 76.833)), (' B 101  TYR  HB2', ' C  37  TYR  CE1', -0.471, (5.253, 13.687, 52.447)), (' L 196  SER  HB2', ' L 209  THR HG22', -0.466, (59.825, 0.121, 15.061)), (' E 403  ARG  HG3', ' E 495  TYR  CE1', -0.464, (7.533, 16.783, -6.315)), (' C   3  VAL  HB ', ' C 100  VAL  HB ', -0.462, (1.847, 2.241, 46.435)), (' B 182 AVAL  CG1', ' C 139  LEU HD13', -0.455, (-31.944, 12.831, 55.033)), (' E 456  PHE  HD2', ' E 491  PRO  HA ', -0.455, (6.488, 14.933, 8.282)), (' H 160  LEU HD21', ' H 183  VAL HG21', -0.452, (66.754, 21.684, 2.555)), (' E 502  GLY  O  ', ' E 506  GLN  HG3', -0.451, (11.899, 18.445, -15.036)), (' B 122  VAL HG21', ' B 208  VAL HG11', -0.447, (-36.012, 24.273, 45.953)), (' L 173  ASN  ND2', ' L 175  LYS  HD2', -0.447, (55.036, 14.812, -3.214)), (' C  29  ILE  O  ', ' C  67  LYS  HE2', -0.442, (11.044, -1.13, 54.181)), (' B  66  GLY  O  ', ' B  85  ARG  NH2', -0.439, (-2.276, 12.928, 26.293)), (' B 201  HIS  CD2', ' B 203  PRO  HD2', -0.438, (-26.641, 28.84, 44.285)), (' H  87  ARG  HG2', ' H  90  ASP  OD2', -0.437, (38.506, 19.834, 30.986)), (' C 196  SER  HB2', ' C 209  THR HG22', -0.434, (-32.344, -3.947, 52.103)), (' A 383  SER  HB3', ' A 386  LYS  HB2', -0.434, (46.451, 7.847, 89.095)), (' E 378  LYS  HG3', ' E 611  HOH  O  ', -0.433, (-4.094, 7.991, -15.06)), (' A 338  PHE  HE2', ' A 363  ALA  HB1', -0.431, (45.803, 21.066, 83.317)), (' A 364  ASP  O  ', ' A 367  VAL HG22', -0.43, (42.897, 21.645, 88.179)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.428, (-1.234, 14.013, -16.91)), (' H   3  GLN  HB2', ' H  25  SER  OG ', -0.428, (20.492, 33.926, 11.718)), (' E 338  PHE  HE2', ' E 363  ALA  HB1', -0.428, (-17.6, 19.802, -18.384)), (' L  79  LEU HD11', ' L 107  LEU HD21', -0.426, (33.244, 11.511, -2.556)), (' A 399  SER  HA ', ' A 510  VAL  O  ', -0.426, (33.782, 18.624, 74.897)), (' H  87  ARG  HG3', ' H  89  ASP  OD1', -0.425, (40.144, 17.762, 29.709)), (' E 363  ALA  O  ', ' E 527  PRO  HD3', -0.42, (-20.7, 18.819, -22.419)), (' B  72  ARG  HD2', ' B  72  ARG  O  ', -0.419, (11.872, 25.726, 34.83)), (' H  32  TYR  O  ', ' H  53  PRO  HG3', -0.415, (14.987, 25.245, 20.881)), (' B 196  ILE HG12', ' B 211  LYS  HA ', -0.415, (-43.649, 22.309, 53.126)), (' E 455  LEU HD23', ' E 491  PRO  O  ', -0.413, (6.58, 15.513, 5.726)), (' L  48  LEU  HA ', ' L  48  LEU HD23', -0.411, (23.357, 16.942, 3.117)), (' B  32  TYR  O  ', ' B  53  PRO  HG3', -0.411, (13.847, 20.612, 43.436)), (' A 472  ILE HG12', ' A 619  HOH  O  ', -0.404, (24.395, 16.278, 47.973)), (' L  35  HIS  O  ', ' L  89  CYS  HA ', -0.401, (25.261, 10.07, 10.156)), (' C  22  CYS  HB2', ' C  36  TRP  CH2', -0.401, (1.828, 3.522, 58.048)), (' L 196  SER  CB ', ' L 209  THR HG22', -0.4, (59.509, -0.626, 15.531))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
