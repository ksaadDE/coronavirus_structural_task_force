# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.0, (-26.053999999999974, 8.825, 46.29299999999999)), ('A', ' 128 ', 'CYS', 0.077085198404838, (-25.38099999999998, 10.474999999999996, 54.923999999999985)), ('A', ' 155 ', 'ASP', 0.0055124403854236136, (-34.274, 27.71699999999998, 49.411999999999985)), ('A', ' 165 ', 'MET', 0.12363330344147061, (-16.148999999999994, 12.975999999999992, 67.50599999999999)), ('A', ' 299 ', 'GLN', 0.10807756517846723, (-34.189, 11.383, 41.96))]
data['cbeta'] = [('A', ' 155 ', 'ASP', ' ', 0.38432804495438694, (-34.55599999999999, 29.07799999999999, 48.699999999999996))]
data['probe'] = [(' A  49  MET  HE2', ' B   1  PHQ  H51', -1.112, (-12.788, 16.325, 74.722)), (' A  40  ARG HH12', ' A 501  DMS  H23', -0.826, (-21.226, 20.485, 79.726)), (' A  49  MET  HE2', ' B   1  PHQ  C5 ', -0.755, (-13.387, 16.023, 74.234)), (' A   5  LYS  HD3', ' A 291  PHE  CZ ', -0.741, (-27.529, 6.721, 46.992)), (' A 163  HIS  NE2', ' B   4  FL6  H7 ', -0.737, (-15.53, 13.215, 62.858)), (' A 197  ASP  HB3', ' A 504  GOL  H32', -0.663, (-26.144, -1.332, 61.844)), (' A  49  MET  CE ', ' B   1  PHQ  H51', -0.64, (-12.545, 16.13, 75.218)), (' A 142  ASN  HA ', ' B   4  FL6  H6 ', -0.631, (-10.07, 14.675, 63.694)), (' A  55  GLU  H  ', ' A 501  DMS  H13', -0.598, (-19.384, 23.43, 82.481)), (' A 100  LYS  NZ ', ' A 603  HOH  O  ', -0.594, (-36.707, 29.844, 57.461)), (' A 286  LEU  C  ', ' A 286  LEU HD12', -0.582, (-26.294, -3.932, 48.843)), (' A 229  ASP  HB3', ' A 670  HOH  O  ', -0.581, (-43.784, -14.79, 56.972)), (' A 166  GLU  HB2', ' B   4  FL6  H8 ', -0.545, (-13.519, 10.67, 64.127)), (' A 213  ILE HG21', ' A 300  CYS  HB3', -0.537, (-37.666, 6.832, 39.308)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.53, (-25.053, 15.474, 70.314)), (' A 137  LYS  NZ ', ' A 504  GOL  O3 ', -0.527, (-24.209, 0.061, 58.951)), (' A 286  LEU  O  ', ' A 286  LEU HD12', -0.509, (-26.722, -3.22, 48.667)), (' A 165  MET  SD ', ' B   1  PHQ  H81', -0.474, (-16.247, 12.612, 71.285)), (' A   5  LYS  HG3', ' A 127  GLN  HB3', -0.462, (-25.497, 9.819, 49.324)), (' A  61  LYS  NZ ', ' A 612  HOH  O  ', -0.461, (-9.669, 26.565, 78.312)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.46, (-28.119, 11.596, 43.362)), (' A 127  GLN  HG2', ' A 669  HOH  O  ', -0.45, (-28.866, 10.211, 50.077)), (' A   5  LYS  NZ ', ' A 601  HOH  O  ', -0.449, (-25.276, 6.071, 51.822)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.447, (-35.855, 5.171, 44.002)), (' A  40  ARG  NH1', ' A 501  DMS  H23', -0.445, (-21.253, 20.684, 79.222)), (' A  55  GLU  H  ', ' A 501  DMS  C1 ', -0.414, (-19.698, 23.0, 82.427)), (' A  76  ARG  HB3', ' A  92  ASP  OD2', -0.412, (-15.852, 42.779, 65.421)), (' A 262  LEU HD23', ' A 678  HOH  O  ', -0.411, (-49.137, -4.029, 50.661)), (' A 286  LEU  C  ', ' A 286  LEU  CD1', -0.407, (-26.034, -3.821, 49.615)), (' A 108  PRO  HB3', ' A 132  PRO  HA ', -0.4, (-31.575, 4.968, 63.396)), (' A 243  THR  O  ', ' A 246  HIS  HB2', -0.4, (-44.973, 0.793, 56.952))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
