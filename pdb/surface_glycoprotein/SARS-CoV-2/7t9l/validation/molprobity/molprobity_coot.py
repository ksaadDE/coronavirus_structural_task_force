# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 445 ', 'VAL', 0.05512647298613693, (234.536, 158.014, 250.97999999999996))]
data['cbeta'] = []
data['probe'] = [(' D  85  LEU HD12', ' D  94  LYS  HG3', -0.625, (215.991, 183.077, 272.081)), (' D 475  LYS  NZ ', ' D 495  GLU  OE1', -0.602, (216.725, 153.582, 305.965)), (' D 170  SER  OG ', ' D 174  LYS  NZ ', -0.598, (224.444, 143.418, 299.463)), (' D  21  ILE HD13', ' D  87  GLU  HG3', -0.583, (220.08, 192.643, 270.441)), (' A 457  ARG  NH1', ' A 467  ASP  OD2', -0.574, (229.651, 189.651, 245.187)), (' D 457  GLU  HG2', ' D 512  PHE  HB3', -0.531, (211.506, 158.717, 285.036)), (' A 393  THR HG21', ' A 518  LEU  HB2', -0.528, (225.528, 188.908, 218.1)), (' D 169  ARG HH22', ' D 271  TRP  HA ', -0.527, (213.671, 145.998, 290.371)), (' D 381  TYR  HD1', ' D 558  LEU  HG ', -0.521, (206.906, 161.89, 262.667)), (' D 232  GLU  HB3', ' D 581  VAL HG11', -0.518, (192.847, 159.424, 283.676)), (' D 144  LEU  HA ', ' D 148  LEU  HB2', -0.505, (221.065, 139.068, 285.275)), (' A 383  SER  HB3', ' A 386  LYS  HG2', -0.5, (210.83, 175.5, 220.565)), (' D 538  PRO  HD2', ' D 541  LYS  HD2', -0.498, (186.156, 147.115, 267.002)), (' D 152  MET  O  ', ' D 161  ARG  NH1', -0.495, (210.579, 135.551, 286.971)), (' D 288  LYS  HE3', ' D 289  PRO  HD2', -0.481, (191.349, 130.734, 269.958)), (' D 462  MET  HE3', ' D 468  ILE HD11', -0.479, (210.814, 161.217, 297.279)), (' A 403  ARG  HD2', ' A 505  HIS  HA ', -0.478, (223.077, 168.165, 249.459)), (' A 374  PHE  HA ', ' A 436  TRP  HB3', -0.477, (221.948, 164.915, 233.788)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.471, (229.615, 178.23, 232.79)), (' D 183  TYR  OH ', ' D 509  ASP  OD1', -0.47, (221.619, 161.214, 286.125)), (' D 156  LEU HD11', ' D 281  LEU HD21', -0.47, (203.852, 130.686, 286.316)), (' D 381  TYR  CD1', ' D 558  LEU  HG ', -0.466, (207.534, 162.312, 262.921)), (' A 412  PRO  HB3', ' A 427  ASP  HA ', -0.464, (213.835, 184.562, 235.381)), (' D 148  LEU  HA ', ' D 151  ILE HG22', -0.464, (218.579, 136.001, 286.331)), (' D 205  GLY  HA2', ' D 219  ARG  HG2', -0.455, (211.859, 172.62, 281.983)), (' D 524  GLN  HB3', ' D 574  VAL HG11', -0.454, (196.737, 162.688, 271.252)), (' D 177  ARG HH12', ' D 495  GLU  HG3', -0.454, (219.281, 155.03, 302.264)), (' D 435  GLU  OE2', ' D 541  LYS  NZ ', -0.452, (187.04, 143.13, 267.984)), (' D 527  GLU  OE2', ' D 586  ASN  ND2', -0.45, (189.1, 156.675, 272.39)), (' D 165  TRP  HA ', ' D 270  MET  HE1', -0.448, (217.058, 140.431, 291.632)), (' D 168  TRP  CD1', ' D 270  MET  HE2', -0.448, (219.063, 142.857, 290.441)), (' D 460  ARG  HD3', ' D 506  VAL HG23', -0.447, (217.08, 158.001, 288.933)), (' D 260  GLY  HA3', ' D 612  PRO  HD3', -0.446, (199.604, 141.905, 301.323)), (' D 326  GLY  O  ', ' D 330  ASN  ND2', -0.442, (222.369, 153.916, 252.06)), (' D 535  HIS  NE2', ' D 538  PRO  O  ', -0.438, (188.257, 150.602, 266.187)), (' D 332  MET  HB3', ' D 332  MET  HE2', -0.437, (223.522, 146.447, 259.929)), (' D 460  ARG  HA ', ' D 463  VAL HG12', -0.436, (215.207, 161.513, 293.062)), (' D 168  TRP  HE1', ' D 502  SER  HB2', -0.433, (219.593, 146.187, 289.98)), (' D 123  MET  HE1', ' D 180  TYR  HD1', -0.423, (223.206, 156.657, 291.138)), (' D 557  MET  HB3', ' D 557  MET  HE3', -0.422, (202.636, 164.566, 263.892)), (' D 142  LEU HD11', ' D 147  GLY  HA3', -0.421, (222.511, 134.226, 283.274)), (' D 528  ALA  HB2', ' D 574  VAL HG12', -0.421, (194.827, 162.871, 268.058)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.42, (227.661, 178.411, 222.488)), (' D 458  LYS  HD2', ' D 462  MET  HE2', -0.416, (207.865, 161.364, 295.424)), (' D 477  TRP  CE2', ' D 500  PRO  HG3', -0.415, (213.798, 153.441, 294.127)), (' D 261  CYS  HB2', ' D 488  VAL  HB ', -0.413, (203.122, 145.016, 299.228)), (' D 178  PRO  HA ', ' D 181  GLU  HB2', -0.412, (226.86, 158.131, 298.306)), (' A 411  ALA  HB3', ' A 414  GLN  HG3', -0.408, (214.207, 178.563, 240.052)), (' A 457  ARG  NE ', ' A 459  SER  O  ', -0.408, (226.269, 189.533, 247.018)), (' A 390  LEU  HA ', ' A 390  LEU HD12', -0.401, (215.748, 179.953, 215.157))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
