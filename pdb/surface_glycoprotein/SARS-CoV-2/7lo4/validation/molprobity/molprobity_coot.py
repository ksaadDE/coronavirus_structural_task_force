# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 482 ', 'GLY', 0.05463887682102624, (24.33, -2.173000000000001, -61.199))]
data['omega'] = [('A', ' 146 ', 'PRO', None, (-12.342, 16.713, -15.280000000000003))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 455  MET  HE3', ' A 480  MET  HB2', -0.783, (5.432, 38.214, -18.429)), (' B 366  SER  O  ', ' B 370  ASN  ND2', -0.754, (-28.081, 6.66, -80.193)), (' B 364  ASP  O  ', ' B 367  VAL HG22', -0.648, (-25.039, 2.689, -82.272)), (' A  86  GLN  N  ', ' A  86  GLN  OE1', -0.621, (21.79, 25.382, -52.81)), (' A  85  LEU HD22', ' A  94  LYS  HG3', -0.603, (15.571, 25.623, -52.394)), (' A 230  PHE  O  ', ' A 233  ILE HG22', -0.534, (-1.995, 46.057, -28.053)), (' A  21  ILE HG21', ' A  84  PRO  HD2', -0.52, (21.727, 20.2, -56.634)), (' A  22  GLU  HG2', ' A  26  LYS  HE3', -0.511, (13.936, 22.628, -62.133)), (' B 366  SER  HB3', ' B 388  ASN HD21', -0.487, (-27.482, 6.369, -84.763)), (' A  20  THR  OG1', ' A  23  GLU  HG2', -0.471, (18.331, 20.926, -64.502)), (' A 476  LYS  O  ', ' A 480  MET  HG3', -0.456, (8.051, 38.493, -16.395)), (' B 387  LEU  HA ', ' B 387  LEU HD23', -0.452, (-20.805, 10.413, -87.969)), (' A 553  LYS  HE2', ' A 573  VAL  O  ', -0.452, (-8.947, 41.295, -50.068)), (' A 174  LYS  HG2', ' A 496  THR  O  ', -0.45, (8.243, 24.093, -7.872)), (' A 292  ASP  HA ', ' A 366  MET  SD ', -0.448, (-28.136, 31.03, -30.749)), (' A 460  ARG  NH2', ' A 512  PHE  HB2', -0.447, (3.428, 28.876, -26.759)), (' A 394  ASN  HB3', ' A 562  LYS  HD3', -0.444, (1.015, 24.382, -45.576)), (' A 190  MET  HB3', ' A 190  MET  HE3', -0.436, (16.134, 21.667, -30.749)), (' A  23  GLU  H  ', ' A  23  GLU  HG2', -0.434, (17.98, 20.693, -63.777)), (' A 430  GLU  OE1', ' A 541  LYS  HD3', -0.434, (-27.24, 44.06, -36.046)), (' A 478  TRP  CD2', ' A 489  GLU  HB3', -0.432, (1.782, 35.532, -9.996)), (' A 519  THR  O  ', ' A 522  GLN  HG2', -0.428, (-8.935, 37.203, -35.947)), (' A 237  TYR  CE1', ' A 451  PRO  HG2', -0.427, (-5.716, 41.92, -22.07)), (' A 318  VAL  O  ', ' A 551  GLY  HA3', -0.426, (-17.239, 33.532, -53.163)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.423, (-14.847, 10.316, -71.003)), (' A 455  MET  HE1', ' A 477  TRP  CE3', -0.422, (5.147, 34.326, -18.03)), (' B 346  ARG  HA ', ' B 707  HOH  O  ', -0.419, (-9.834, -5.299, -67.176)), (' B 370  ASN  O  ', ' B 370  ASN  OD1', -0.409, (-28.894, 6.114, -76.293)), (' A 474  MET  HE1', ' A 499  ASP  HB2', -0.408, (4.924, 30.688, -13.121)), (' A 430  GLU  H  ', ' A 430  GLU  HG3', -0.407, (-31.884, 43.645, -35.28)), (' A 203  TRP  CD2', ' A 511  SER  HB3', -0.403, (6.818, 27.088, -30.844)), (' A 366  MET  HE3', ' A 418  LEU HD11', -0.4, (-27.642, 32.015, -34.778))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
