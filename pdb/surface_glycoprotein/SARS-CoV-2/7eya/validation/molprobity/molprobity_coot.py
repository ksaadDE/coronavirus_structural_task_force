# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('N', ' 166 ', 'CYS', 0.009350251055922288, (214.19799999999992, 276.08, 225.301))]
data['omega'] = [('L', '   8 ', 'PRO', None, (234.711, 288.829, 212.46900000000002)), ('L', '  95 ', 'PRO', None, (213.624, 286.558, 203.272))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' H 102  TYR  HB2', ' R 445  VAL  HB ', -0.666, (218.3, 273.922, 184.898)), (' N  28  TYR  HB2', ' N  64  TRP  HB3', -0.666, (232.74, 263.691, 254.028)), (' R 358  ILE  HB ', ' R 395  VAL  HB ', -0.647, (205.661, 259.976, 216.831)), (' H  39  GLN  HB3', ' H  45  LEU HD23', -0.644, (226.782, 296.014, 197.401)), (' H  98  ARG  NH2', ' H 117  ASP  OD2', -0.642, (224.562, 281.507, 185.632)), (' N 131  CYS  HA ', ' N 166  CYS  HB3', -0.63, (216.108, 275.913, 227.017)), (' R 379  CYS  CB ', ' R 432  CYS  HA ', -0.623, (208.824, 249.669, 208.054)), (' H 117  ASP  HA ', ' L  46  LEU HD22', -0.614, (227.607, 282.315, 191.496)), (' H  91  THR HG23', ' H 126  THR  HA ', -0.614, (222.462, 308.395, 194.245)), (' R 439  ASN  O  ', ' R 443  SER  OG ', -0.609, (214.398, 266.839, 189.65)), (' R 379  CYS  HB3', ' R 432  CYS  HA ', -0.602, (208.372, 249.907, 207.857)), (' H   3  GLN  O  ', ' H  25  SER  OG ', -0.597, (225.521, 290.017, 178.178)), (' R 361  CYS  SG ', ' R 362  VAL  N  ', -0.594, (197.572, 262.032, 217.561)), (' L  47  LEU  HG ', ' L  48  ILE HD12', -0.589, (234.447, 281.006, 198.249)), (' R 457  ARG  NE ', ' R 467  ASP  OD2', -0.583, (231.134, 259.831, 212.349)), (' N  40  ASP  OD1', ' N 204  TYR  OH ', -0.574, (213.444, 254.464, 237.261)), (' H  28  THR  HG1', ' H 102  TYR  HH ', -0.562, (218.377, 278.423, 180.479)), (' L  47  LEU  HG ', ' L  48  ILE  H  ', -0.557, (234.102, 280.874, 197.732)), (' N 112  SER  N  ', ' N 134  GLN  OE1', -0.553, (225.728, 279.813, 227.674)), (' N  30  ASN  OD1', ' N  31  SER  N  ', -0.551, (229.669, 256.455, 255.113)), (' R 422  ASN HD21', ' R 453  TYR  HB2', -0.549, (226.408, 259.793, 202.795)), (' H 117  ASP  OD1', ' H 118  ILE  N  ', -0.536, (225.365, 283.851, 187.937)), (' N 126  VAL  HB ', ' N 174  PRO  HA ', -0.536, (207.886, 271.603, 243.351)), (' N  41  LYS  HZ3', ' N  43  PHE  HE1', -0.531, (210.453, 245.089, 236.919)), (' N 106  PHE  O  ', ' N 117  LEU  N  ', -0.527, (220.705, 271.442, 232.603)), (' L  24  ARG  NH1', ' L  70  GLU  OE2', -0.504, (229.026, 278.973, 217.08)), (' N  93  ALA  HA ', ' N 191  GLU  HA ', -0.491, (219.02, 262.878, 249.479)), (' R 497  PHE  CD1', ' R 507  PRO  HD3', -0.491, (219.435, 263.828, 192.619)), (' H  98  ARG  HG2', ' H  99  ASP  H  ', -0.491, (220.754, 283.669, 186.796)), (' L  55  GLN  O  ', ' L  58  VAL HG12', -0.488, (236.224, 277.819, 191.976)), (' N  83  VAL HG22', ' N 237  ARG  HG2', -0.483, (229.712, 270.345, 237.315)), (' N 130  VAL  O  ', ' N 130  VAL HG13', -0.481, (215.493, 273.25, 228.05)), (' L  48  ILE  H  ', ' L  48  ILE HD12', -0.481, (234.593, 280.474, 198.205)), (' R 418  ILE HG13', ' R 422  ASN  HB2', -0.475, (224.542, 257.706, 205.06)), (' L  46  LEU HD12', ' L  47  LEU  N  ', -0.475, (230.945, 282.746, 195.243)), (' N  32  PHE  CE2', ' N  62  VAL  HB ', -0.475, (227.593, 256.96, 250.056)), (' L   5  THR  O  ', ' L  24  ARG  N  ', -0.471, (228.457, 284.784, 212.355)), (' H  61  ALA  HB3', ' H  64  VAL HG12', -0.47, (212.952, 296.471, 200.093)), (' N 106  PHE  HB2', ' N 117  LEU  HB3', -0.468, (219.561, 269.396, 234.007)), (' L  18  ARG  NH2', ' R 482  GLY  O  ', -0.467, (243.675, 274.053, 205.926)), (' R 444  LYS  HG2', ' R 448  ASN  HB2', -0.464, (219.35, 270.94, 192.344)), (' L  46  LEU HD12', ' L  47  LEU  H  ', -0.461, (230.802, 282.985, 195.503)), (' H  47  TRP  HZ2', ' H  50  SER  HB2', -0.46, (213.919, 288.75, 196.294)), (' N  91  TYR  OH ', ' N 191  GLU  OE1', -0.458, (219.293, 257.361, 250.983)), (' N 108  THR  HA ', ' N 236  THR HG22', -0.454, (227.974, 268.128, 230.779)), (' L  48  ILE HD11', ' L  62  PHE  HB3', -0.447, (237.477, 279.351, 198.952)), (' L  33  LEU HD13', ' L  71  PHE  CD2', -0.446, (226.611, 279.651, 207.364)), (' N  39  PRO  O  ', ' N  41  LYS  HG2', -0.441, (211.948, 248.642, 236.361)), (' R 431  GLY  HA3', ' R 514  SER  HA ', -0.441, (210.2, 252.195, 213.257)), (' N 168  PHE  HE1', ' N 170  TYR  HB2', -0.441, (208.931, 269.704, 232.715)), (' N  83  VAL  O  ', ' N  83  VAL HG13', -0.433, (232.493, 270.138, 238.926)), (' R 345  THR HG23', ' R 346  ARG  HG2', -0.43, (212.055, 273.325, 203.656)), (' R 433  VAL HG22', ' R 512  VAL HG13', -0.427, (213.243, 253.697, 208.476)), (' L  42  LYS  HB3', ' L  42  LYS  HE3', -0.426, (235.585, 293.513, 190.243)), (' N 125  ASN  OD1', ' N 126  VAL  N  ', -0.422, (206.312, 274.629, 241.7)), (' N 128  ILE  HB ', ' N 170  TYR  HB3', -0.421, (209.425, 270.77, 235.108)), (' N 280  ASN  O  ', ' N 281  GLU  HG2', -0.421, (203.253, 242.749, 251.191)), (' L  29  ILE HD11', ' L  33  LEU  HB2', -0.417, (224.171, 279.248, 205.41)), (' R 502  GLY  O  ', ' R 506  GLN  HG3', -0.416, (217.544, 259.242, 187.794)), (' N  38  TYR  O  ', ' N  40  ASP  N  ', -0.415, (212.914, 251.144, 238.745)), (' R 379  CYS  HB2', ' R 432  CYS  HA ', -0.415, (208.815, 249.479, 208.784)), (' R 401  VAL HG22', ' R 509  ARG  HG2', -0.415, (214.388, 264.232, 200.058)), (' N 275  PHE  CD1', ' N 290  ASP  HA ', -0.415, (222.714, 243.977, 244.894)), (' R 350  VAL HG12', ' R 422  ASN  HB3', -0.412, (223.702, 259.819, 205.87)), (' H 116  PHE  HB2', ' L  36  TYR  OH ', -0.412, (225.232, 285.584, 194.997)), (' N  32  PHE  HE2', ' N  62  VAL  HB ', -0.411, (227.672, 256.551, 249.715)), (' N  56  LEU HD12', ' N  57  PRO  HD2', -0.409, (226.911, 252.322, 244.52)), (' N  38  TYR  HE1', ' N 222  ALA  HB1', -0.408, (210.376, 250.29, 247.008)), (' L  48  ILE HG13', ' L  54  LEU HD23', -0.406, (235.282, 277.419, 197.362)), (' L  61  ARG  HB2', ' L  76  SER  HB3', -0.405, (245.18, 277.82, 200.494)), (' N 173  GLN  HG2', ' N 174  PRO  HD2', -0.404, (203.63, 271.418, 246.302)), (' R 422  ASN  ND2', ' R 453  TYR  HB2', -0.4, (226.146, 260.141, 203.188))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
