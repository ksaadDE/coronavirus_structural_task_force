# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('B', ' 610 ', 'VAL', 0.007351242675213143, (203.63899999999995, 247.53000000000003, 234.18300000000002)), ('B', '1004 ', 'LEU', 0.08567197959892553, (237.69, 244.27200000000005, 241.96500000000003)), ('C', ' 608 ', 'VAL', 0.057080969307687426, (236.1999999999999, 198.137, 229.888)), ('C', ' 610 ', 'VAL', 0.292919651349833, (241.523, 201.30300000000005, 232.253)), ('C', ' 742 ', 'ILE', 0.22284804027655247, (221.08899999999997, 233.89500000000007, 248.51))]
data['cbeta'] = []
data['probe'] = [(' C1028  LYS  O  ', ' C1032  CYS  HB3', -0.634, (225.561, 231.94, 203.484)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.628, (225.742, 256.057, 190.855)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.619, (206.851, 267.512, 272.879)), (' C 770  ILE HD11', ' C1012  LEU HD23', -0.606, (227.847, 237.706, 229.6)), (' C 328  ARG HH21', ' C 533  LEU  HB2', -0.605, (266.094, 206.234, 258.586)), (' C 599  THR HG22', ' C 601  GLY  H  ', -0.601, (231.426, 201.296, 226.231)), (' A 781  VAL HG12', ' A1026  ALA  HB2', -0.601, (241.849, 225.726, 211.828)), (' A 406  GLU  OE1', ' A 409  GLN  NE2', -0.6, (221.647, 238.049, 285.102)), (' B 763  LEU HD22', ' B1008  VAL HG21', -0.593, (241.259, 241.794, 238.282)), (' C 972  ALA  HA ', ' C 995  ARG HH21', -0.587, (229.303, 226.975, 258.935)), (' A 381  GLY  HA3', ' A 430  THR  HA ', -0.587, (232.002, 249.474, 269.573)), (' B 544  ASN HD21', ' B 579  PRO  HB3', -0.582, (203.386, 214.504, 259.811)), (' A 763  LEU HD13', ' A1004  LEU  HG ', -0.582, (239.397, 225.612, 240.921)), (' C 412  PRO  HB3', ' C 427  ASP  HA ', -0.581, (249.347, 237.872, 270.752)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.577, (193.563, 275.914, 255.637)), (' C 398  ASP  HB2', ' C 512  VAL  HB ', -0.574, (257.424, 232.507, 280.263)), (' B  81  ASN  N  ', ' B 265  TYR  HH ', -0.572, (193.606, 272.937, 265.797)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.571, (216.018, 212.625, 275.75)), (' B 707  TYR  HB3', ' C 792  PRO  HG3', -0.569, (206.072, 231.497, 191.375)), (' A 101  ILE  HA ', ' A 242  LEU  HA ', -0.565, (291.562, 244.937, 266.575)), (' A 319  ARG  NH1', ' B 740  MET  SD ', -0.563, (248.968, 255.524, 246.67)), (' A 707  TYR  HB3', ' B 792  PRO  HG3', -0.56, (245.862, 264.008, 191.829)), (' C 976  VAL HG12', ' C 979  ASP  H  ', -0.557, (216.291, 226.46, 258.001)), (' A1028  LYS  O  ', ' A1032  CYS  HB3', -0.556, (243.898, 230.047, 203.322)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.546, (230.361, 244.208, 205.773)), (' A 350  VAL HG11', ' A 418  ILE HD12', -0.539, (219.157, 243.679, 286.305)), (' A 725  GLU  OE1', ' A1064  HIS  NE2', -0.538, (249.046, 234.935, 205.529)), (' A 770  ILE HD11', ' A1012  LEU HD22', -0.538, (238.97, 227.02, 230.961)), (' B 825  LYS  HD2', ' B 942  ALA  HB2', -0.537, (223.96, 263.405, 217.63)), (' A 126  VAL  H  ', ' A 172  SER  HB2', -0.537, (287.386, 230.492, 269.74)), (' A 982  SER  HB3', ' C 390  LEU HD21', -0.534, (253.389, 217.92, 263.8)), (' A 360  ASN  OD1', ' A 523  THR  OG1', -0.531, (230.109, 270.653, 272.808)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.526, (221.632, 220.71, 197.666)), (' C 350  VAL HG11', ' C 418  ILE HD12', -0.525, (254.199, 242.096, 286.756)), (' A 117  LEU HD21', ' A 231  ILE HG21', -0.522, (274.42, 240.034, 273.071)), (' A 866  THR  H  ', ' A 869  MET  HE3', -0.516, (249.947, 212.784, 216.075)), (' C 735  SER  HA ', ' C 767  LEU HD13', -0.516, (218.356, 236.153, 234.291)), (' B 759  PHE  O  ', ' B 763  LEU  HG ', -0.512, (245.184, 240.85, 241.207)), (' C 781  VAL HG12', ' C1026  ALA  HB2', -0.509, (223.678, 235.667, 211.888)), (' A 422  ASN  ND2', ' A 454  ARG  O  ', -0.508, (215.108, 241.569, 284.817)), (' C 908  GLY  O  ', ' C1038  LYS  NZ ', -0.506, (231.95, 231.957, 190.091)), (' C 360  ASN  OD1', ' C 523  THR  OG1', -0.505, (270.189, 219.022, 271.057)), (' C 666  ILE HD11', ' C 672  ALA  HB2', -0.501, (242.383, 203.23, 223.173)), (' C 106  PHE  HB2', ' C 117  LEU  HB2', -0.5, (220.048, 194.661, 270.702)), (' C 763  LEU HD22', ' C1008  VAL HG21', -0.499, (226.412, 236.993, 238.132)), (' B 613  GLN  HA ', ' B 648  GLY  HA3', -0.498, (205.096, 238.528, 232.344)), (' A 905  ARG HH11', ' A1036  GLN  HB2', -0.498, (244.106, 229.884, 193.882)), (' C 712  ILE HD11', ' C1096  VAL HG12', -0.496, (243.602, 218.843, 179.104)), (' A 792  PRO  HG3', ' C 707  TYR  HB3', -0.495, (254.491, 213.716, 190.376)), (' B 127  VAL HG21', ' B1302  NAG  H5 ', -0.494, (209.362, 281.564, 277.459)), (' A 411  ALA  HB3', ' A 414  GLN  HG3', -0.492, (227.37, 239.024, 277.304)), (' C 433  VAL HG23', ' C 512  VAL HG22', -0.491, (252.815, 232.025, 280.987)), (' C 444  LYS  H  ', ' C 448  ASN  HB2', -0.49, (254.923, 236.929, 302.471)), (' B1028  LYS  O  ', ' B1032  CYS  HB3', -0.49, (236.199, 246.954, 203.96)), (' B1028  LYS  O  ', ' B1032  CYS  CB ', -0.489, (235.987, 246.769, 203.5)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.488, (232.974, 245.131, 285.77)), (' C 437  ASN  ND2', ' C 506  GLN  OE1', -0.487, (245.378, 231.877, 295.637)), (' C 388  ASN  HB2', ' C 527  PRO  HD2', -0.486, (256.965, 213.168, 273.569)), (' C 409  GLN  HB3', ' C 419  ALA  HB2', -0.484, (248.703, 242.265, 280.684)), (' A1047  TYR  HB2', ' A1067  TYR  HB3', -0.483, (249.145, 239.425, 192.451)), (' A 448  ASN  HB3', ' A 497  PHE  HB2', -0.48, (222.226, 244.902, 299.835)), (' A 444  LYS  H  ', ' A 448  ASN  HB2', -0.479, (222.576, 246.11, 302.261)), (' C 457  ARG  NH2', ' C 467  ASP  OD1', -0.479, (262.702, 249.824, 280.586)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.478, (228.13, 256.156, 198.98)), (' A  35  GLY  HA3', ' A  56  LEU  HB3', -0.478, (275.008, 245.183, 252.704)), (' B 736  VAL  HA ', ' B 858  LEU  HA ', -0.475, (243.299, 252.867, 238.728)), (' A 766  ALA  O  ', ' A 770  ILE HG13', -0.475, (238.273, 223.412, 230.225)), (' C 734  THR HG21', ' C 959  LEU HD21', -0.474, (219.518, 229.385, 234.231)), (' A 119  ILE HG12', ' A 128  ILE HG23', -0.473, (280.505, 236.604, 272.51)), (' A1028  LYS  O  ', ' A1032  CYS  CB ', -0.473, (243.964, 230.673, 202.952)), (' B 997  ILE HG22', ' B1001  LEU HD23', -0.47, (241.665, 241.312, 249.895)), (' C 358  ILE  HB ', ' C 395  VAL HG23', -0.469, (263.975, 224.515, 276.238)), (' A 457  ARG  NH2', ' A 467  ASP  OD1', -0.469, (208.589, 246.714, 279.739)), (' C 308  VAL HG22', ' C 602  THR HG23', -0.469, (227.986, 202.347, 229.588)), (' A 328  ARG  NH1', ' A 578  ASP  OD2', -0.468, (241.944, 275.212, 261.558)), (' B 280  ASN  OD1', ' B 284  THR  N  ', -0.468, (221.912, 272.404, 246.371)), (' A 398  ASP  HB2', ' A 512  VAL  HB ', -0.467, (225.501, 251.687, 280.98)), (' B 318  PHE  N  ', ' B 593  GLY  O  ', -0.466, (207.798, 240.426, 241.295)), (' A 922  LEU HD11', ' E   1  NAG  H3 ', -0.466, (263.213, 239.584, 184.75)), (' B  81  ASN  N  ', ' B 265  TYR  OH ', -0.465, (193.747, 272.849, 265.318)), (' B 725  GLU  OE1', ' B1064  HIS  NE2', -0.462, (229.753, 248.591, 206.004)), (' C 880  GLY  O  ', ' C 884  SER  OG ', -0.462, (214.962, 235.552, 195.142)), (' B 342  PHE  HB2', ' B1306  NAG  H82', -0.461, (198.299, 213.685, 288.187)), (' C 422  ASN  ND2', ' C 454  ARG  O  ', -0.461, (254.845, 246.809, 285.563)), (' B 676  THR  HA ', ' B 690  GLN  HA ', -0.459, (197.74, 258.57, 221.007)), (' C 381  GLY  HA3', ' C 430  THR  HA ', -0.458, (251.986, 229.736, 269.244)), (' A 950  ASP  OD2', ' A 954  GLN  NE2', -0.457, (250.713, 236.877, 224.876)), (' B 119  ILE HG12', ' B 128  ILE HG12', -0.457, (210.01, 273.887, 272.063)), (' A1097  SER  HB2', ' A1102  TRP  CD2', -0.456, (246.74, 257.036, 173.317)), (' A 326  ILE HD13', ' A 533  LEU  HG ', -0.455, (246.477, 272.176, 259.018)), (' A 403  ARG  HB3', ' A 406  GLU  HG2', -0.452, (223.241, 239.177, 289.411)), (' C 950  ASP  OD2', ' C 954  GLN  NE2', -0.452, (228.725, 222.246, 224.924)), (' A 878  LEU HD11', ' A1052  PHE  HB3', -0.451, (253.435, 224.672, 201.165)), (' B 128  ILE HG21', ' B 229  LEU HD11', -0.451, (212.58, 271.715, 273.288)), (' A1019  ARG  NH1', ' C1017  GLU  OE1', -0.45, (233.954, 229.088, 220.506)), (' C 715  PRO  HA ', ' C1072  GLU  HA ', -0.449, (237.052, 213.232, 184.904)), (' B 734  THR HG21', ' B 959  LEU HD11', -0.449, (237.379, 252.419, 233.139)), (' B  92  PHE  HB3', ' B 192  PHE  HB2', -0.448, (205.44, 271.899, 261.277)), (' A 393  THR  HA ', ' A 522  ALA  HA ', -0.447, (229.964, 265.293, 268.125)), (' C 864  LEU  HG ', ' C 865  LEU HD12', -0.447, (211.97, 238.939, 218.326)), (' A 117  LEU  HG ', ' A 130  VAL HG12', -0.446, (276.48, 239.911, 275.412)), (' A 905  ARG  HG3', ' A1050  MET  HE2', -0.445, (248.933, 229.263, 192.075)), (' C 598  ILE HG23', ' C 664  ILE HG21', -0.444, (237.855, 204.307, 224.713)), (' C 611  LEU HD22', ' C 666  ILE HG23', -0.444, (244.376, 206.587, 226.934)), (' A 796  ASP  N  ', ' A 796  ASP  OD1', -0.444, (259.522, 216.691, 188.122)), (' A 326  ILE HD12', ' A 539  VAL HG21', -0.443, (247.598, 270.054, 257.606)), (' A 766  ALA  HB1', ' A1012  LEU HD21', -0.442, (237.376, 225.887, 232.64)), (' C1091  ARG  NH1', ' C1120  THR  O  ', -0.441, (240.897, 233.486, 170.411)), (' A 193  VAL HG23', ' A 223  LEU HD22', -0.441, (277.181, 240.51, 257.504)), (' C 101  ILE  HA ', ' C 242  LEU  HA ', -0.439, (215.909, 180.976, 264.814)), (' C 805  ILE HD12', ' C 878  LEU HD11', -0.438, (214.232, 225.291, 200.065)), (' C 676  THR  HA ', ' C 690  GLN  HA ', -0.437, (235.915, 190.833, 218.902)), (' C1028  LYS  O  ', ' C1032  CYS  CB ', -0.437, (226.176, 231.582, 203.053)), (' A 330  PRO  HD3', ' A 579  PRO  HB2', -0.436, (236.95, 271.209, 266.742)), (' C 412  PRO  HD3', ' C 425  LEU HD23', -0.435, (249.847, 235.749, 274.772)), (' A 598  ILE HG23', ' A 664  ILE HG21', -0.435, (260.634, 252.483, 226.374)), (' B 130  VAL HG11', ' B 231  ILE HD13', -0.435, (212.15, 267.869, 276.718)), (' C 411  ALA  HB3', ' C 414  GLN  HG3', -0.435, (245.941, 238.764, 277.733)), (' B 326  ILE  O  ', ' B 542  ASN  N  ', -0.434, (203.078, 224.966, 258.379)), (' C1047  TYR  HB2', ' C1067  TYR  HB3', -0.434, (230.542, 222.717, 192.087)), (' A 901  GLN  O  ', ' A 905  ARG  HG2', -0.433, (248.039, 228.464, 189.333)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.432, (226.644, 249.754, 292.322)), (' A 280  ASN  OD1', ' A 284  THR  N  ', -0.432, (274.027, 228.736, 245.606)), (' A 231  ILE HD12', ' A 233  ILE  HB ', -0.429, (271.961, 242.31, 275.06)), (' A 880  GLY  O  ', ' A 884  SER  OG ', -0.428, (246.218, 218.718, 194.763)), (' C 656  VAL HG12', ' C 658  ASN  H  ', -0.427, (247.377, 196.207, 214.022)), (' C  57  PRO  HB2', ' C  60  SER  HB3', -0.426, (230.984, 193.382, 248.811)), (' A 731  MET  H  ', ' A 774  GLN  HG2', -0.426, (245.594, 224.499, 222.889)), (' A 599  THR  HB ', ' A 608  VAL HG12', -0.426, (265.874, 251.36, 231.897)), (' C 189  LEU  HB2', ' C 210  ILE HD13', -0.425, (214.525, 183.592, 249.87)), (' C 389  ASP  HB3', ' C 528  LYS  HE2', -0.423, (254.073, 212.111, 268.678)), (' B1097  SER  HB2', ' B1102  TRP  CD2', -0.423, (211.751, 237.512, 173.268)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.423, (264.856, 248.876, 225.266)), (' A 437  ASN  ND2', ' A 506  GLN  OE1', -0.422, (232.314, 241.483, 295.888)), (' A 564  GLN  HG2', ' A 565  PHE  HD2', -0.421, (230.867, 266.813, 259.419)), (' A 963  VAL HG13', ' C 570  ALA  HB2', -0.42, (254.58, 225.243, 243.301)), (' A 976  VAL HG12', ' A 979  ASP  H  ', -0.42, (252.447, 221.614, 257.07)), (' C 752  LEU HD11', ' C 990  GLU  HG2', -0.42, (223.153, 238.385, 260.795)), (' C1097  SER  HB2', ' C1102  TRP  CD2', -0.418, (246.582, 217.276, 172.041)), (' B 973  ILE HD11', ' B 984  LEU HD11', -0.418, (236.53, 248.178, 264.404)), (' C 431  GLY  HA2', ' C 515  PHE  HD2', -0.417, (254.894, 227.432, 272.862)), (' C 403  ARG  HB3', ' C 406  GLU  HG3', -0.416, (248.594, 240.95, 290.288)), (' C  92  PHE  HB3', ' C 192  PHE  HB2', -0.415, (218.929, 190.514, 259.058)), (' A 767  LEU  HA ', ' A 770  ILE HD12', -0.415, (240.433, 223.47, 231.581)), (' B 743  CYS  HB3', ' B 749  CYS  HB3', -0.414, (246.441, 249.063, 253.119)), (' C 973  ILE HG21', ' C 984  LEU HD11', -0.414, (224.229, 227.079, 263.469)), (' C 731  MET  SD ', ' C1011  GLN  NE2', -0.414, (223.319, 230.959, 229.815)), (' C 403  ARG  HD2', ' C 405  ASP  HB2', -0.413, (245.618, 241.69, 291.048)), (' A 666  ILE HD11', ' A 672  ALA  HB2', -0.413, (260.219, 257.183, 225.126)), (' C 393  THR  HA ', ' C 522  ALA  HA ', -0.412, (265.803, 222.433, 266.945)), (' A 119  ILE HG23', ' A 128  ILE HG12', -0.412, (282.105, 235.899, 271.092)), (' B 317  ASN  HA ', ' B 594  GLY  HA2', -0.411, (209.991, 241.506, 240.308)), (' A 778  THR HG22', ' A 865  LEU HD12', -0.411, (245.581, 217.92, 215.337)), (' B 294  ASP  OD1', ' B 297  SER  N  ', -0.411, (207.307, 256.803, 238.881)), (' A 976  VAL  HB ', ' A 979  ASP  HB2', -0.41, (253.086, 223.994, 257.433)), (' A 676  THR  HA ', ' A 690  GLN  HA ', -0.41, (273.996, 257.008, 221.032)), (' C 719  THR HG23', ' C1070  ALA  HB2', -0.408, (229.271, 212.357, 190.511)), (' A 570  ALA  HB2', ' B 963  VAL HG13', -0.408, (234.43, 256.542, 244.864)), (' C 294  ASP  OD1', ' C 297  SER  N  ', -0.407, (231.545, 199.389, 236.725)), (' C 326  ILE HD12', ' C 539  VAL HG21', -0.406, (260.218, 206.719, 254.44)), (' C 712  ILE HG12', ' C1077  THR  HB ', -0.403, (246.185, 218.023, 180.165)), (' A 736  VAL  HB ', ' A 767  LEU HD13', -0.403, (242.932, 221.905, 236.533)), (' B 666  ILE HD11', ' B 672  ALA  HB2', -0.402, (204.541, 246.681, 224.894)), (' A 468  ILE HD12', ' A 468  ILE HG23', -0.402, (211.218, 252.141, 286.823)), (' A 873  TYR  HE1', ' C 699  LEU  HB3', -0.402, (246.509, 212.0, 208.761)), (' A 229  LEU HD12', ' A 230  PRO  HD2', -0.4, (272.256, 232.929, 273.003)), (' A 759  PHE  O  ', ' A 762  GLN  HG2', -0.4, (234.559, 223.907, 240.263)), (' A 231  ILE HG13', ' A 233  ILE  H  ', -0.4, (269.94, 241.525, 274.178))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
