# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 155 ', 'ASN', 0.19134567491532092, (99.388, 146.982, 146.145)), ('A', ' 178 ', 'LEU', 0.001493429753803223, (85.41099999999997, 150.17599999999996, 112.777)), ('A', ' 459 ', 'VAL', 0.206948634248923, (122.52300000000001, 98.581, 99.462)), ('B', ' 155 ', 'ASN', 0.1911740978216489, (157.419, 109.824, 146.12799999999996)), ('B', ' 178 ', 'LEU', 0.001517726665295739, (171.383, 106.622, 112.755)), ('B', ' 459 ', 'VAL', 0.20757027784363236, (134.272, 158.21899999999994, 99.445))]
data['cbeta'] = []
data['probe'] = [(' B 174  VAL  HA ', ' B 177  SER  OG ', -0.661, (169.992, 106.737, 117.549)), (' A 174  VAL  HA ', ' A 177  SER  OG ', -0.653, (86.191, 149.975, 117.47)), (' A  66  VAL  HA ', ' A  71  MET  HE3', -0.636, (86.56, 137.591, 156.775)), (' B  66  VAL  HA ', ' B  71  MET  HE3', -0.631, (169.632, 119.595, 156.405)), (' A1000  EUJ  H6 ', ' A1000  EUJ  O12', -0.591, (106.456, 143.162, 146.754)), (' B1000  EUJ  H6 ', ' B1000  EUJ  O12', -0.581, (150.476, 114.173, 146.777)), (' B  93  ILE HG22', ' B 191  ARG  HD3', -0.568, (161.632, 120.121, 124.557)), (' A  65  ARG  NH1', ' A 145  TYR  O  ', -0.561, (85.722, 142.766, 151.141)), (' A  93  ILE HG22', ' A 191  ARG  HD3', -0.561, (95.266, 136.643, 124.646)), (' A  58  GLN  OE1', ' A  60  ARG  NH2', -0.547, (95.2, 127.44, 149.282)), (' A 638  ASP  N  ', ' A 638  ASP  OD1', -0.541, (103.608, 132.918, 110.383)), (' B  58  GLN  OE1', ' B  60  ARG  NH2', -0.536, (161.133, 129.613, 149.54)), (' B 459  VAL HG12', ' B 460  LEU HD23', -0.533, (136.827, 159.399, 96.918)), (' A 157  TRP  HB3', ' A 197  GLN HE22', -0.532, (99.653, 142.061, 140.073)), (' B  65  ARG  NH1', ' B 145  TYR  O  ', -0.531, (170.791, 113.704, 151.056)), (' B 638  ASP  N  ', ' B 638  ASP  OD1', -0.529, (153.195, 123.884, 110.507)), (' A 459  VAL HG12', ' A 460  LEU HD23', -0.526, (120.458, 97.419, 97.102)), (' B 439  ASN  OD1', ' B 557  ARG  NH1', -0.526, (142.294, 159.83, 131.707)), (' A 129  GLU  OE2', ' A 191  ARG  NH1', -0.522, (92.872, 138.469, 120.902)), (' B 157  TRP  HB3', ' B 197  GLN HE22', -0.516, (157.503, 114.496, 140.503)), (' A 439  ASN  OD1', ' A 557  ARG  NH1', -0.516, (114.513, 96.941, 131.794)), (' A 174  VAL  HA ', ' A 177  SER  HG ', -0.511, (86.093, 149.435, 117.929)), (' B 129  GLU  OE2', ' B 191  ARG  NH1', -0.511, (163.405, 118.031, 121.003)), (' B 207  LYS  HD2', ' B1000  EUJ  O6 ', -0.505, (148.202, 115.102, 145.439)), (' A 207  LYS  HD2', ' A1000  EUJ  O6 ', -0.502, (109.009, 142.094, 145.611)), (' B 174  VAL  HA ', ' B 177  SER  HG ', -0.494, (170.741, 107.23, 118.192)), (' B 179  VAL  CG1', ' B 181  HIS  HB2', -0.493, (168.146, 110.298, 108.596)), (' A 345  VAL HG22', ' A 358  LYS  HE3', -0.493, (88.536, 127.681, 177.151)), (' A 179  VAL  CG1', ' A 181  HIS  HB2', -0.484, (89.231, 146.742, 108.47)), (' B 345  VAL HG22', ' B 358  LYS  HE3', -0.482, (168.419, 128.533, 177.174)), (' A 683  VAL  O  ', ' A 687  ASN  ND2', -0.48, (123.579, 134.542, 130.31)), (' A1000  EUJ  O11', ' A1000  EUJ  O2 ', -0.477, (103.94, 142.359, 146.453)), (' A1000  EUJ  H35', ' A1000  EUJ  H48', -0.477, (101.76, 146.302, 133.745)), (' B 683  VAL  O  ', ' B 687  ASN  ND2', -0.475, (133.845, 122.229, 130.374)), (' B 420  PRO  O  ', ' B 423  GLN  NE2', -0.473, (151.826, 180.572, 146.455)), (' B 171  ASP  OD1', ' B 187  ARG  NH1', -0.473, (164.208, 112.254, 119.838)), (' A 420  PRO  O  ', ' A 423  GLN  NE2', -0.473, (104.789, 76.036, 146.658)), (' A 109  ALA  HB2', ' B 286  ARG  HE ', -0.47, (105.587, 126.485, 109.362)), (' B 108  THR  OG1', ' B 109  ALA  N  ', -0.466, (150.554, 132.025, 105.287)), (' A 108  THR  OG1', ' A 109  ALA  N  ', -0.463, (106.124, 125.216, 105.5)), (' A 623  CYS  HB3', ' B 623  CYS  HB3', -0.459, (128.757, 128.526, 99.508)), (' A 635  ASN  ND2', ' A 637  ASP  OD2', -0.458, (106.254, 132.927, 106.14)), (' B 104  SER  HB3', ' B 638  ASP  HB2', -0.456, (155.894, 125.622, 112.265)), (' B 635  ASN  ND2', ' B 637  ASP  OD2', -0.453, (150.032, 123.958, 106.151)), (' B 179  VAL HG13', ' B 181  HIS  N  ', -0.453, (168.058, 110.994, 109.791)), (' B 178  LEU  H  ', ' B 178  LEU  HG ', -0.453, (169.78, 107.53, 114.622)), (' A 104  SER  HB3', ' A 638  ASP  HB2', -0.452, (101.146, 130.679, 112.488)), (' B 422  LEU  O  ', ' B 426  GLN  NE2', -0.452, (153.32, 174.389, 144.186)), (' A 179  VAL HG13', ' A 181  HIS  N  ', -0.451, (89.16, 145.622, 109.939)), (' A 286  ARG  HE ', ' B 109  ALA  HB2', -0.447, (151.288, 130.271, 109.315)), (' A 422  LEU  O  ', ' A 426  GLN  NE2', -0.447, (103.5, 82.803, 144.04)), (' A 178  LEU HD12', ' A 179  VAL  H  ', -0.445, (87.333, 148.288, 112.343)), (' B 178  LEU HD12', ' B 179  VAL  H  ', -0.44, (169.059, 108.338, 112.225)), (' A 171  ASP  OD1', ' A 187  ARG  NH1', -0.438, (92.464, 144.648, 119.763)), (' B 171  ASP  HA ', ' B 174  VAL HG12', -0.432, (166.335, 108.05, 120.747)), (' A 171  ASP  HA ', ' A 174  VAL HG12', -0.431, (90.589, 148.574, 121.152)), (' A 268  LEU HD22', ' A 277  VAL HG11', -0.43, (136.205, 137.956, 114.184)), (' A 303  LEU  HA ', ' A 303  LEU HD23', -0.429, (134.177, 140.246, 131.49)), (' B 268  LEU HD22', ' B 277  VAL HG11', -0.424, (120.828, 118.783, 114.651)), (' A 692  LEU  HA ', ' A 692  LEU HD12', -0.422, (119.185, 128.855, 140.9)), (' A 328  PHE  HD1', ' A 331  ARG HH21', -0.419, (109.466, 133.598, 160.483)), (' A 392  SER  O  ', ' A 396  PHE  N  ', -0.417, (101.128, 124.942, 171.5)), (' B 206  LEU  HA ', ' B 206  LEU HD23', -0.415, (145.219, 117.73, 137.221)), (' B 623  CYS  HA ', ' B 628  GLN  HG3', -0.414, (130.795, 127.095, 98.284)), (' A 539  SER  O  ', ' A 543  MET  N  ', -0.414, (103.754, 100.286, 107.105)), (' B 453  LEU  HA ', ' B 453  LEU HD12', -0.413, (137.987, 157.083, 108.982)), (' B 593  PHE  O  ', ' B 673  TYR  OH ', -0.412, (146.718, 117.658, 118.116)), (' A 465  ASP  N  ', ' A 465  ASP  OD1', -0.411, (116.512, 93.047, 102.71)), (' A 676  LEU  HA ', ' A 676  LEU HD23', -0.41, (118.61, 143.843, 123.661)), (' B 328  PHE  HD1', ' B 331  ARG HH21', -0.409, (147.599, 123.018, 160.169)), (' B1000  EUJ  H35', ' B1000  EUJ  H48', -0.407, (155.378, 110.386, 133.779)), (' B 465  ASP  N  ', ' B 465  ASP  OD1', -0.407, (139.896, 163.792, 102.869)), (' A 623  CYS  HA ', ' A 628  GLN  HG3', -0.407, (125.587, 129.569, 98.268)), (' B 321  LYS  HA ', ' B 321  LYS  HD3', -0.406, (140.186, 120.357, 152.86)), (' A 423  GLN  H  ', ' A 423  GLN  HG3', -0.403, (103.122, 78.392, 147.211)), (' B 692  LEU  HA ', ' B 692  LEU HD12', -0.402, (137.719, 128.098, 140.953))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
